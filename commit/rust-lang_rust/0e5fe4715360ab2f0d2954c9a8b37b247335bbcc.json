{"sha": "0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNWZlNDcxNTM2MGFiMmYwZDI5NTRjOWE4YjM3YjI0NzMzNWJiY2M=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-01T13:45:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-01T13:45:10Z"}, "message": "Merge #7080\n\n7080: Implement ConstParams for HIR r=Veykril a=Veykril\n\nr? @flodiebold \n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8a5f87218610fa80b1994dce8e0066ec713f6f0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a5f87218610fa80b1994dce8e0066ec713f6f0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7ydmCRBK7hj4Ov3rIwAAdHIIADX015WdOsgSs/BZxemtXPnG\nPHDkqWzFPkqfZuSHcdEukvEAeHnsTVTSu1y9jVilFroNsXeDCHluRNBwJ0qszgNu\nDGE2W99IgN3CQeIW1hk5BHXD5rJEB80CyVTOnYV7k5XAda+BQFc0AxIAfEK7UQrR\nFlA3N45UuHOc6SfPJaIDgrmzADmPP93CMjgR8ulA1FuuLOArISZj+WTS2d2LeU7a\nWZhoWecaHKhOCCf8TQU5eO9K5M7aDz/dxZC36bU93pPth6jfk839scqakuWsPbkW\n10sG8t2zjhINPa9heb6vgIhOkC/08MjjzYSb6LvSzeLLhWVqXkG5G4qNNpMIqkM=\n=ExsY\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a5f87218610fa80b1994dce8e0066ec713f6f0d\nparent 51d29fe55456e6e7af69d23982aa57c7fcf91e81\nparent 18bf2e5af5875f036b321bcf9e07e9904c02510e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1609508710 +0000\ncommitter GitHub <noreply@github.com> 1609508710 +0000\n\nMerge #7080\n\n7080: Implement ConstParams for HIR r=Veykril a=Veykril\n\nr? @flodiebold \n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "html_url": "https://github.com/rust-lang/rust/commit/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d29fe55456e6e7af69d23982aa57c7fcf91e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d29fe55456e6e7af69d23982aa57c7fcf91e81", "html_url": "https://github.com/rust-lang/rust/commit/51d29fe55456e6e7af69d23982aa57c7fcf91e81"}, {"sha": "18bf2e5af5875f036b321bcf9e07e9904c02510e", "url": "https://api.github.com/repos/rust-lang/rust/commits/18bf2e5af5875f036b321bcf9e07e9904c02510e", "html_url": "https://github.com/rust-lang/rust/commit/18bf2e5af5875f036b321bcf9e07e9904c02510e"}], "stats": {"total": 279, "additions": 238, "deletions": 41}, "files": [{"sha": "4a3ed7783efcc6c1e2069cd3531678cf6136f0bf", "filename": "crates/assists/src/ast_transform.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fassists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fassists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fast_transform.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -204,7 +204,8 @@ impl<'a> AstTransform<'a> for QualifyPaths<'a> {\n             }\n             PathResolution::Local(_)\n             | PathResolution::TypeParam(_)\n-            | PathResolution::SelfType(_) => None,\n+            | PathResolution::SelfType(_)\n+            | PathResolution::ConstParam(_) => None,\n             PathResolution::Macro(_) => None,\n             PathResolution::AssocItem(_) => None,\n         }"}, {"sha": "97b7a8b5f58a6efb31c212376caa35adc72d5393", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -18,10 +18,10 @@ use hir_def::{\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, DefWithBodyId, EnumId,\n-    FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId, LocalEnumVariantId, LocalFieldId,\n-    LocalModuleId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n-    UnionId,\n+    AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId,\n+    DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId,\n+    LocalEnumVariantId, LocalFieldId, LocalModuleId, Lookup, ModuleId, StaticId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, UnionId,\n };\n use hir_def::{find_path::PrefixKind, item_scope::ItemInNs, visibility::Visibility};\n use hir_expand::{\n@@ -1125,7 +1125,12 @@ impl GenericDef {\n                 id: LifetimeParamId { parent: self.into(), local_id },\n             })\n             .map(GenericParam::LifetimeParam);\n-        ty_params.chain(lt_params).collect()\n+        let const_params = generics\n+            .consts\n+            .iter()\n+            .map(|(local_id, _)| ConstParam { id: ConstParamId { parent: self.into(), local_id } })\n+            .map(GenericParam::ConstParam);\n+        ty_params.chain(lt_params).chain(const_params).collect()\n     }\n \n     pub fn type_params(self, db: &dyn HirDatabase) -> Vec<TypeParam> {\n@@ -1237,8 +1242,9 @@ impl Label {\n pub enum GenericParam {\n     TypeParam(TypeParam),\n     LifetimeParam(LifetimeParam),\n+    ConstParam(ConstParam),\n }\n-impl_from!(TypeParam, LifetimeParam for GenericParam);\n+impl_from!(TypeParam, LifetimeParam, ConstParam for GenericParam);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct TypeParam {\n@@ -1300,6 +1306,26 @@ impl LifetimeParam {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct ConstParam {\n+    pub(crate) id: ConstParamId,\n+}\n+\n+impl ConstParam {\n+    pub fn name(self, db: &dyn HirDatabase) -> Name {\n+        let params = db.generic_params(self.id.parent);\n+        params.consts[self.id.local_id].name.clone()\n+    }\n+\n+    pub fn module(self, db: &dyn HirDatabase) -> Module {\n+        self.id.parent.module(db.upcast()).into()\n+    }\n+\n+    pub fn parent(self, _db: &dyn HirDatabase) -> GenericDef {\n+        self.id.parent.into()\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Impl {\n     pub(crate) id: ImplId,"}, {"sha": "2422887e341b43160861bf530aa9b1dbe4fc4986", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -44,6 +44,7 @@ from_id![\n     (hir_def::ImplId, crate::Impl),\n     (hir_def::TypeParamId, crate::TypeParam),\n     (hir_def::LifetimeParamId, crate::LifetimeParam),\n+    (hir_def::ConstParamId, crate::ConstParam),\n     (hir_expand::MacroDefId, crate::MacroDef)\n ];\n "}, {"sha": "dd7c0c57067c27e9ab3d5df0157563ed2e464496", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -10,8 +10,8 @@ use hir_expand::InFile;\n use syntax::ast;\n \n use crate::{\n-    db::HirDatabase, Const, Enum, Field, FieldSource, Function, Impl, LifetimeParam, MacroDef,\n-    Module, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n+    db::HirDatabase, Const, ConstParam, Enum, Field, FieldSource, Function, Impl, LifetimeParam,\n+    MacroDef, Module, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n };\n \n pub trait HasSource {\n@@ -140,3 +140,11 @@ impl HasSource for LifetimeParam {\n         child_source.map(|it| it[self.id.local_id].clone())\n     }\n }\n+\n+impl HasSource for ConstParam {\n+    type Ast = ast::ConstParam;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<Self::Ast> {\n+        let child_source = self.id.parent.child_source(db.upcast());\n+        child_source.map(|it| it[self.id.local_id].clone())\n+    }\n+}"}, {"sha": "8ac27e2dd85d9f496bd10840b0489d349ba95322", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -34,9 +34,9 @@ pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     code_model::{\n         Access, Adt, AsAssocItem, AssocItem, AssocItemContainer, Callable, CallableKind, Const,\n-        Crate, CrateDependency, DefWithBody, Enum, Field, FieldSource, Function, GenericDef,\n-        HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, ScopeDef,\n-        Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, Variant, VariantDef,\n+        ConstParam, Crate, CrateDependency, DefWithBody, Enum, Field, FieldSource, Function,\n+        GenericDef, HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef,\n+        ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, Variant, VariantDef,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope},"}, {"sha": "cd689c86935e24ebad1be98f3685126b96d99bf9", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -25,9 +25,9 @@ use crate::{\n     diagnostics::Diagnostic,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    AssocItem, Callable, Crate, Field, Function, HirFileId, Impl, InFile, Label, LifetimeParam,\n-    Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait, Type, TypeAlias, TypeParam,\n-    VariantDef,\n+    AssocItem, Callable, ConstParam, Crate, Field, Function, HirFileId, Impl, InFile, Label,\n+    LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait, Type,\n+    TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -38,6 +38,7 @@ pub enum PathResolution {\n     Local(Local),\n     /// A generic parameter\n     TypeParam(TypeParam),\n+    ConstParam(ConstParam),\n     SelfType(Impl),\n     Macro(MacroDef),\n     AssocItem(AssocItem),\n@@ -59,7 +60,9 @@ impl PathResolution {\n             PathResolution::Def(ModuleDef::TypeAlias(alias)) => {\n                 Some(TypeNs::TypeAliasId((*alias).into()))\n             }\n-            PathResolution::Local(_) | PathResolution::Macro(_) => None,\n+            PathResolution::Local(_) | PathResolution::Macro(_) | PathResolution::ConstParam(_) => {\n+                None\n+            }\n             PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n             PathResolution::AssocItem(AssocItem::Const(_))\n@@ -744,6 +747,7 @@ to_def_impls![\n     (crate::Variant, ast::Variant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),\n+    (crate::ConstParam, ast::ConstParam, const_param_to_def),\n     (crate::MacroDef, ast::MacroRules, macro_rules_to_def),\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n     (crate::Label, ast::Label, label_to_def),"}, {"sha": "4b9ebff729cceb43c9ca2e138f18801b321b937e", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -6,9 +6,9 @@ use hir_def::{\n     dyn_map::DynMap,\n     expr::{LabelId, PatId},\n     keys::{self, Key},\n-    ConstId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId, GenericDefId, ImplId,\n-    LifetimeParamId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n-    VariantId,\n+    ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId, GenericDefId,\n+    ImplId, LifetimeParamId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n+    UnionId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroDefKind};\n use rustc_hash::FxHashMap;\n@@ -157,6 +157,18 @@ impl SourceToDefCtx<'_, '_> {\n         dyn_map[keys::LIFETIME_PARAM].get(&src).copied()\n     }\n \n+    pub(super) fn const_param_to_def(\n+        &mut self,\n+        src: InFile<ast::ConstParam>,\n+    ) -> Option<ConstParamId> {\n+        let container: ChildContainer =\n+            self.find_generic_param_container(src.as_ref().map(|it| it.syntax()))?.into();\n+        let db = self.db;\n+        let dyn_map =\n+            &*self.cache.entry(container).or_insert_with(|| container.child_by_source(db));\n+        dyn_map[keys::CONST_PARAM].get(&src).copied()\n+    }\n+\n     // FIXME: use DynMap as well?\n     pub(super) fn macro_rules_to_def(\n         &mut self,"}, {"sha": "30a8e513dd197291f010edd1cd1537109ea6deea", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -479,6 +479,7 @@ pub(crate) fn resolve_hir_path(\n                 ValueNs::StructId(it) => PathResolution::Def(Struct::from(it).into()),\n                 ValueNs::EnumVariantId(it) => PathResolution::Def(Variant::from(it).into()),\n                 ValueNs::ImplSelf(impl_id) => PathResolution::SelfType(impl_id.into()),\n+                ValueNs::GenericParam(it) => PathResolution::ConstParam(it.into()),\n             };\n             Some(res)\n         });"}, {"sha": "9b5b886c2bb8bd97d93cb39af2ce43df4f9805c4", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -21,24 +21,31 @@ use crate::{\n     keys,\n     src::{HasChildSource, HasSource},\n     type_ref::{LifetimeRef, TypeBound, TypeRef},\n-    AdtId, GenericDefId, LifetimeParamId, LocalLifetimeParamId, LocalTypeParamId, Lookup,\n-    TypeParamId,\n+    AdtId, ConstParamId, GenericDefId, LifetimeParamId, LocalConstParamId, LocalLifetimeParamId,\n+    LocalTypeParamId, Lookup, TypeParamId,\n };\n \n-/// Data about a generic parameter (to a function, struct, impl, ...).\n+/// Data about a generic type parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct TypeParamData {\n     pub name: Option<Name>,\n     pub default: Option<TypeRef>,\n     pub provenance: TypeParamProvenance,\n }\n \n-/// Data about a generic parameter (to a function, struct, impl, ...).\n+/// Data about a generic lifetime parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct LifetimeParamData {\n     pub name: Name,\n }\n \n+/// Data about a generic const parameter (to a function, struct, impl, ...).\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub struct ConstParamData {\n+    pub name: Name,\n+    pub ty: TypeRef,\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum TypeParamProvenance {\n     TypeParamList,\n@@ -51,6 +58,7 @@ pub enum TypeParamProvenance {\n pub struct GenericParams {\n     pub types: Arena<TypeParamData>,\n     pub lifetimes: Arena<LifetimeParamData>,\n+    pub consts: Arena<ConstParamData>,\n     pub where_predicates: Vec<WherePredicate>,\n }\n \n@@ -76,6 +84,7 @@ pub enum WherePredicateTypeTarget {\n pub(crate) struct SourceMap {\n     pub(crate) type_params: ArenaMap<LocalTypeParamId, Either<ast::Trait, ast::TypeParam>>,\n     lifetime_params: ArenaMap<LocalLifetimeParamId, ast::LifetimeParam>,\n+    const_params: ArenaMap<LocalConstParamId, ast::ConstParam>,\n }\n \n impl GenericParams {\n@@ -268,6 +277,13 @@ impl GenericParams {\n             let lifetime_ref = LifetimeRef::new_name(name);\n             self.fill_bounds(&lower_ctx, &lifetime_param, Either::Right(lifetime_ref));\n         }\n+        for const_param in params.const_params() {\n+            let name = const_param.name().map_or_else(Name::missing, |it| it.as_name());\n+            let ty = const_param.ty().map_or(TypeRef::Error, |it| TypeRef::from_ast(lower_ctx, it));\n+            let param = ConstParamData { name, ty };\n+            let param_id = self.consts.alloc(param);\n+            sm.const_params.insert(param_id, const_param.clone());\n+        }\n     }\n \n     fn fill_where_predicates(&mut self, lower_ctx: &LowerCtx, where_clause: ast::WhereClause) {\n@@ -353,12 +369,16 @@ impl GenericParams {\n         });\n     }\n \n-    pub fn find_by_name(&self, name: &Name) -> Option<LocalTypeParamId> {\n+    pub fn find_type_by_name(&self, name: &Name) -> Option<LocalTypeParamId> {\n         self.types\n             .iter()\n             .find_map(|(id, p)| if p.name.as_ref() == Some(name) { Some(id) } else { None })\n     }\n \n+    pub fn find_const_by_name(&self, name: &Name) -> Option<LocalConstParamId> {\n+        self.consts.iter().find_map(|(id, p)| if p.name == *name { Some(id) } else { None })\n+    }\n+\n     pub fn find_trait_self_param(&self) -> Option<LocalTypeParamId> {\n         self.types.iter().find_map(|(id, p)| {\n             if p.provenance == TypeParamProvenance::TraitSelf {\n@@ -390,6 +410,16 @@ impl HasChildSource<LocalLifetimeParamId> for GenericDefId {\n     }\n }\n \n+impl HasChildSource<LocalConstParamId> for GenericDefId {\n+    type Value = ast::ConstParam;\n+    fn child_source(\n+        &self,\n+        db: &dyn DefDatabase,\n+    ) -> InFile<ArenaMap<LocalConstParamId, Self::Value>> {\n+        GenericParams::new(db, *self).1.map(|source_maps| source_maps.const_params)\n+    }\n+}\n+\n impl ChildBySource for GenericDefId {\n     fn child_by_source(&self, db: &dyn DefDatabase) -> DynMap {\n         let mut res = DynMap::default();\n@@ -406,6 +436,10 @@ impl ChildBySource for GenericDefId {\n             let id = LifetimeParamId { parent: *self, local_id };\n             res[keys::LIFETIME_PARAM].insert(sm.with_value(src.clone()), id);\n         }\n+        for (local_id, src) in sm.value.const_params.iter() {\n+            let id = ConstParamId { parent: *self, local_id };\n+            res[keys::CONST_PARAM].insert(sm.with_value(src.clone()), id);\n+        }\n         res\n     }\n }"}, {"sha": "b6f5107313402dac07ed9037f277508c7ff0d188", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -260,6 +260,7 @@ impl GenericParamsStorage {\n     fn alloc(&mut self, params: GenericParams) -> GenericParamsId {\n         if params.types.is_empty()\n             && params.lifetimes.is_empty()\n+            && params.consts.is_empty()\n             && params.where_predicates.is_empty()\n         {\n             return GenericParamsId::EMPTY;\n@@ -269,8 +270,12 @@ impl GenericParamsStorage {\n     }\n }\n \n-static EMPTY_GENERICS: GenericParams =\n-    GenericParams { types: Arena::new(), lifetimes: Arena::new(), where_predicates: Vec::new() };\n+static EMPTY_GENERICS: GenericParams = GenericParams {\n+    types: Arena::new(),\n+    lifetimes: Arena::new(),\n+    consts: Arena::new(),\n+    where_predicates: Vec::new(),\n+};\n \n #[derive(Default, Debug, Eq, PartialEq)]\n struct ItemTreeData {"}, {"sha": "89b3ed8686439563280420c62521783b56643911", "filename": "crates/hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fkeys.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -8,8 +8,8 @@ use syntax::{ast, AstNode, AstPtr};\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, LifetimeParamId, StaticId,\n-    StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n+    ConstId, ConstParamId, EnumId, EnumVariantId, FieldId, FunctionId, ImplId, LifetimeParamId,\n+    StaticId, StructId, TraitId, TypeAliasId, TypeParamId, UnionId,\n };\n \n pub type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -29,6 +29,7 @@ pub const TUPLE_FIELD: Key<ast::TupleField, FieldId> = Key::new();\n pub const RECORD_FIELD: Key<ast::RecordField, FieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n pub const LIFETIME_PARAM: Key<ast::LifetimeParam, LifetimeParamId> = Key::new();\n+pub const CONST_PARAM: Key<ast::ConstParam, ConstParamId> = Key::new();\n \n pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();\n "}, {"sha": "25f460504fd75ecc9bf9c36544fa3c8358ed0d72", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -231,6 +231,13 @@ pub struct LifetimeParamId {\n }\n pub type LocalLifetimeParamId = Idx<generics::LifetimeParamData>;\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct ConstParamId {\n+    pub parent: GenericDefId,\n+    pub local_id: LocalConstParamId,\n+}\n+pub type LocalConstParamId = Idx<generics::ConstParamData>;\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum ContainerId {\n     ModuleId(ModuleId),"}, {"sha": "129f1dbac99766b11be6fae177239ff4a51bfaba", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -20,9 +20,9 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, AssocContainerId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId,\n-    FunctionId, GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId,\n-    StaticId, StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    AdtId, AssocContainerId, ConstId, ConstParamId, ContainerId, DefWithBodyId, EnumId,\n+    EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId,\n+    ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -93,6 +93,7 @@ pub enum ValueNs {\n     StaticId(StaticId),\n     StructId(StructId),\n     EnumVariantId(EnumVariantId),\n+    GenericParam(ConstParamId),\n }\n \n impl Resolver {\n@@ -163,7 +164,7 @@ impl Resolver {\n                 }\n \n                 Scope::GenericParams { params, def } => {\n-                    if let Some(local_id) = params.find_by_name(first_name) {\n+                    if let Some(local_id) = params.find_type_by_name(first_name) {\n                         let idx = if path.segments.len() == 1 { None } else { Some(1) };\n                         return Some((\n                             TypeNs::GenericParam(TypeParamId { local_id, parent: *def }),\n@@ -285,11 +286,17 @@ impl Resolver {\n                 Scope::ExprScope(_) => continue,\n \n                 Scope::GenericParams { params, def } if n_segments > 1 => {\n-                    if let Some(local_id) = params.find_by_name(first_name) {\n+                    if let Some(local_id) = params.find_type_by_name(first_name) {\n                         let ty = TypeNs::GenericParam(TypeParamId { local_id, parent: *def });\n                         return Some(ResolveValueResult::Partial(ty, 1));\n                     }\n                 }\n+                Scope::GenericParams { params, def } if n_segments == 1 => {\n+                    if let Some(local_id) = params.find_const_by_name(first_name) {\n+                        let val = ValueNs::GenericParam(ConstParamId { local_id, parent: *def });\n+                        return Some(ResolveValueResult::ValueNs(val));\n+                    }\n+                }\n                 Scope::GenericParams { .. } => continue,\n \n                 Scope::ImplDefScope(impl_) => {"}, {"sha": "f3567c49e6cb5e20d65509123e1194e686fbeddd", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -5,8 +5,8 @@ use std::sync::Arc;\n use arena::map::ArenaMap;\n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n-    db::DefDatabase, expr::ExprId, DefWithBodyId, FunctionId, GenericDefId, ImplId, LocalFieldId,\n-    TypeParamId, VariantId,\n+    db::DefDatabase, expr::ExprId, ConstParamId, DefWithBodyId, FunctionId, GenericDefId, ImplId,\n+    LocalFieldId, TypeParamId, VariantId,\n };\n \n use crate::{\n@@ -37,6 +37,9 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::cycle(crate::lower::impl_self_ty_recover)]\n     fn impl_self_ty(&self, def: ImplId) -> Binders<Ty>;\n \n+    #[salsa::invoke(crate::lower::const_param_ty_query)]\n+    fn const_param_ty(&self, def: ConstParamId) -> Ty;\n+\n     #[salsa::invoke(crate::lower::impl_trait_query)]\n     fn impl_trait(&self, def: ImplId) -> Option<Binders<TraitRef>>;\n "}, {"sha": "5d541104e2101b55db2c3e91e488e6c6fd180e00", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -89,6 +89,7 @@ impl<'a> InferenceContext<'a> {\n                     return None;\n                 }\n             }\n+            ValueNs::GenericParam(it) => return Some(self.db.const_param_ty(it)),\n         };\n \n         let ty = self.db.value_ty(typable);"}, {"sha": "222f61a11d5430a3a2232a332d40a9c993ccc453", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -16,9 +16,9 @@ use hir_def::{\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AssocContainerId, AssocItemId, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n-    HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n-    UnionId, VariantId,\n+    AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, EnumId, EnumVariantId, FunctionId,\n+    GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, UnionId, VariantId,\n };\n use hir_expand::name::Name;\n use smallvec::SmallVec;\n@@ -1221,6 +1221,15 @@ pub(crate) fn impl_self_ty_query(db: &dyn HirDatabase, impl_id: ImplId) -> Binde\n     Binders::new(generics.len(), Ty::from_hir(&ctx, &impl_data.target_type))\n }\n \n+pub(crate) fn const_param_ty_query(db: &dyn HirDatabase, def: ConstParamId) -> Ty {\n+    let parent_data = db.generic_params(def.parent);\n+    let data = &parent_data.consts[def.local_id];\n+    let resolver = def.parent.resolver(db.upcast());\n+    let ctx = TyLoweringContext::new(db, &resolver);\n+\n+    Ty::from_hir(&ctx, &data.ty)\n+}\n+\n pub(crate) fn impl_self_ty_recover(\n     db: &dyn HirDatabase,\n     _cycle: &[String],"}, {"sha": "8d431b9201aa273424cba2799cf4b92627c42bf4", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -2375,3 +2375,19 @@ fn infer_operator_overload() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn infer_const_params() {\n+    check_infer(\n+        r#\"\n+        fn foo<const FOO: usize>() {\n+            let bar = FOO;\n+        }\n+        \"#,\n+        expect![[r#\"\n+            27..49 '{     ...FOO; }': ()\n+            37..40 'bar': usize\n+            43..46 'FOO': usize\n+        \"#]],\n+    );\n+}"}, {"sha": "bcde2b6f125a188544aefe6815fbd43144b85007", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -24,6 +24,7 @@ pub enum SymbolKind {\n     Impl,\n     Field,\n     TypeParam,\n+    ConstParam,\n     LifetimeParam,\n     ValueParam,\n     SelfParam,\n@@ -225,6 +226,7 @@ impl TryToNav for Definition {\n             Definition::TypeParam(it) => Some(it.to_nav(db)),\n             Definition::LifetimeParam(it) => Some(it.to_nav(db)),\n             Definition::Label(it) => Some(it.to_nav(db)),\n+            Definition::ConstParam(it) => Some(it.to_nav(db)),\n         }\n     }\n }\n@@ -485,6 +487,23 @@ impl ToNav for hir::LifetimeParam {\n     }\n }\n \n+impl ToNav for hir::ConstParam {\n+    fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n+        let src = self.source(db);\n+        let full_range = src.value.syntax().text_range();\n+        NavigationTarget {\n+            file_id: src.file_id.original_file(db),\n+            name: self.name(db).to_string().into(),\n+            kind: Some(SymbolKind::ConstParam),\n+            full_range,\n+            focus_range: src.value.name().map(|n| n.syntax().text_range()),\n+            container_name: None,\n+            description: None,\n+            docs: None,\n+        }\n+    }\n+}\n+\n /// Get a description of a symbol.\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`"}, {"sha": "367fac05e9de3441d24953d3e13a38b7572bf501", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -193,6 +193,7 @@ fn rewrite_intra_doc_link(\n         Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::TypeParam(_)\n+        | Definition::ConstParam(_)\n         | Definition::LifetimeParam(_)\n         | Definition::Label(_) => return None,\n     }?;"}, {"sha": "49eb8caae61766035b160bf24aa2d077afa9c99b", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -370,7 +370,10 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n                 Adt::Enum(it) => from_def_source(db, it, mod_path),\n             })\n         }\n-        Definition::TypeParam(_) | Definition::LifetimeParam(_) | Definition::Label(_) => {\n+        Definition::TypeParam(_)\n+        | Definition::LifetimeParam(_)\n+        | Definition::ConstParam(_)\n+        | Definition::Label(_) => {\n             // FIXME: Hover for generic param\n             None\n         }"}, {"sha": "fa58fc3196553362c4a450831e8b9712098cdb84", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -1144,4 +1144,20 @@ fn foo<'a>() -> &'a () {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn test_find_const_param() {\n+        check(\n+            r#\"\n+fn foo<const FOO<|>: usize>() -> usize {\n+    FOO\n+}\n+\"#,\n+            expect![[r#\"\n+                FOO ConstParam FileId(0) 7..23 13..16 Other\n+\n+                FileId(0) 42..45 Other\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "ba00852445d520c452a00f8ea9aab804f61b0491", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -819,6 +819,7 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n         },\n         Definition::SelfType(_) => HighlightTag::Symbol(SymbolKind::Impl),\n         Definition::TypeParam(_) => HighlightTag::Symbol(SymbolKind::TypeParam),\n+        Definition::ConstParam(_) => HighlightTag::Symbol(SymbolKind::ConstParam),\n         Definition::Local(local) => {\n             let tag = if local.is_param(db) {\n                 HighlightTag::Symbol(SymbolKind::ValueParam)"}, {"sha": "8b88670798c21cbed8d46afb3186427d4434658c", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -77,6 +77,7 @@ impl HighlightTag {\n                 SymbolKind::Function => \"function\",\n                 SymbolKind::TypeAlias => \"type_alias\",\n                 SymbolKind::TypeParam => \"type_param\",\n+                SymbolKind::ConstParam => \"const_param\",\n                 SymbolKind::LifetimeParam => \"lifetime\",\n                 SymbolKind::Macro => \"macro\",\n                 SymbolKind::Local => \"variable\","}, {"sha": "02270b0770a0b85c3e4c672366e734dcceae80a3", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -118,6 +118,10 @@\n     <span class=\"keyword control\">loop</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">const_param</span><span class=\"punctuation\">&lt;</span><span class=\"keyword\">const</span> <span class=\"const_param declaration\">FOO</span><span class=\"punctuation\">:</span> <span class=\"builtin_type\">usize</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">usize</span> <span class=\"punctuation\">{</span>\n+    <span class=\"const_param\">FOO</span>\n+<span class=\"punctuation\">}</span>\n+\n <span class=\"keyword\">use</span> <span class=\"module\">ops</span><span class=\"operator\">::</span><span class=\"trait\">Fn</span><span class=\"punctuation\">;</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">baz</span><span class=\"punctuation\">&lt;</span><span class=\"type_param declaration\">F</span><span class=\"punctuation\">:</span> <span class=\"trait\">Fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">&gt;</span><span class=\"punctuation\">(</span><span class=\"value_param declaration callable\">f</span><span class=\"punctuation\">:</span> <span class=\"type_param\">F</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"value_param callable\">f</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>"}, {"sha": "30b5b648e9c69ae3655dded3923ff91c25e90672", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -91,6 +91,10 @@ fn never() -> ! {\n     loop {}\n }\n \n+fn const_param<const FOO: usize>() -> usize {\n+    FOO\n+}\n+\n use ops::Fn;\n fn baz<F: Fn() -> ()>(f: F) {\n     f()"}, {"sha": "cc5078bf0fe7eaa1a00230dc22da9835ae2966fc", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -6,8 +6,8 @@\n // FIXME: this badly needs rename/rewrite (matklad, 2020-02-06).\n \n use hir::{\n-    db::HirDatabase, Crate, Field, HasVisibility, Impl, Label, LifetimeParam, Local, MacroDef,\n-    Module, ModuleDef, Name, PathResolution, Semantics, TypeParam, Visibility,\n+    db::HirDatabase, ConstParam, Crate, Field, HasVisibility, Impl, Label, LifetimeParam, Local,\n+    MacroDef, Module, ModuleDef, Name, PathResolution, Semantics, TypeParam, Visibility,\n };\n use syntax::{\n     ast::{self, AstNode},\n@@ -26,6 +26,7 @@ pub enum Definition {\n     Local(Local),\n     TypeParam(TypeParam),\n     LifetimeParam(LifetimeParam),\n+    ConstParam(ConstParam),\n     Label(Label),\n }\n \n@@ -39,6 +40,7 @@ impl Definition {\n             Definition::Local(it) => Some(it.module(db)),\n             Definition::TypeParam(it) => Some(it.module(db)),\n             Definition::LifetimeParam(it) => Some(it.module(db)),\n+            Definition::ConstParam(it) => Some(it.module(db)),\n             Definition::Label(it) => Some(it.module(db)),\n         }\n     }\n@@ -52,6 +54,7 @@ impl Definition {\n             Definition::Local(_) => None,\n             Definition::TypeParam(_) => None,\n             Definition::LifetimeParam(_) => None,\n+            Definition::ConstParam(_) => None,\n             Definition::Label(_) => None,\n         }\n     }\n@@ -79,6 +82,7 @@ impl Definition {\n             Definition::Local(it) => it.name(db)?,\n             Definition::TypeParam(it) => it.name(db),\n             Definition::LifetimeParam(it) => it.name(db),\n+            Definition::ConstParam(it) => it.name(db),\n             Definition::Label(it) => it.name(db),\n         };\n         Some(name)\n@@ -233,6 +237,10 @@ impl NameClass {\n                     let def = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::TypeParam(def)))\n                 },\n+                ast::ConstParam(it) => {\n+                    let def = sema.to_def(&it)?;\n+                    Some(NameClass::Definition(Definition::ConstParam(def)))\n+                },\n                 _ => None,\n             }\n         }\n@@ -417,6 +425,7 @@ impl From<PathResolution> for Definition {\n             PathResolution::TypeParam(par) => Definition::TypeParam(par),\n             PathResolution::Macro(def) => Definition::Macro(def),\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n+            PathResolution::ConstParam(par) => Definition::ConstParam(par),\n         }\n     }\n }"}, {"sha": "5c4366f16e3109dc77b9579a238da877bc680d62", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -44,6 +44,7 @@ define_semantic_token_types![\n     (ESCAPE_SEQUENCE, \"escapeSequence\"),\n     (FORMAT_SPECIFIER, \"formatSpecifier\"),\n     (GENERIC, \"generic\"),\n+    (CONST_PARAMETER, \"constParameter\"),\n     (LIFETIME, \"lifetime\"),\n     (LABEL, \"label\"),\n     (PUNCTUATION, \"punctuation\"),"}, {"sha": "999b18351558d5c8884e4d3ca96d4ce13fb25c3d", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5fe4715360ab2f0d2954c9a8b37b247335bbcc/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=0e5fe4715360ab2f0d2954c9a8b37b247335bbcc", "patch": "@@ -42,6 +42,7 @@ pub(crate) fn symbol_kind(symbol_kind: SymbolKind) -> lsp_types::SymbolKind {\n         SymbolKind::Field => lsp_types::SymbolKind::Field,\n         SymbolKind::Static => lsp_types::SymbolKind::Constant,\n         SymbolKind::Const => lsp_types::SymbolKind::Constant,\n+        SymbolKind::ConstParam => lsp_types::SymbolKind::Constant,\n         SymbolKind::Impl => lsp_types::SymbolKind::Object,\n         SymbolKind::Local\n         | SymbolKind::SelfParam\n@@ -378,6 +379,7 @@ fn semantic_token_type_and_modifiers(\n             SymbolKind::Impl => lsp_types::SemanticTokenType::TYPE,\n             SymbolKind::Field => lsp_types::SemanticTokenType::PROPERTY,\n             SymbolKind::TypeParam => lsp_types::SemanticTokenType::TYPE_PARAMETER,\n+            SymbolKind::ConstParam => semantic_tokens::CONST_PARAMETER,\n             SymbolKind::LifetimeParam => semantic_tokens::LIFETIME,\n             SymbolKind::Label => semantic_tokens::LABEL,\n             SymbolKind::ValueParam => lsp_types::SemanticTokenType::PARAMETER,"}]}