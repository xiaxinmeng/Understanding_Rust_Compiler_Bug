{"sha": "5801991b5d54676410b7a65a664e8e83cc89136d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDE5OTFiNWQ1NDY3NjQxMGI3YTY1YTY2NGU4ZTgzY2M4OTEzNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T08:27:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T08:27:42Z"}, "message": "Auto merge of #31562 - llogiq:lint_post, r=Manishearth\n\nThis fixes #31512 for me.\n\nA bit of explanation: I want to have `check_block_post(&mut self, &Context, &Block)` and `check_crate_post(&mut self, &Context, &Crate)` methods in both early and late lint passes. Ideally we'd have _post methods for all operations that walk, but this'll do for now.\n\n@Manishearth r?", "tree": {"sha": "ce9e431ecbcfc81267621fee3b9b4a1b76e37a2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce9e431ecbcfc81267621fee3b9b4a1b76e37a2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5801991b5d54676410b7a65a664e8e83cc89136d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5801991b5d54676410b7a65a664e8e83cc89136d", "html_url": "https://github.com/rust-lang/rust/commit/5801991b5d54676410b7a65a664e8e83cc89136d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5801991b5d54676410b7a65a664e8e83cc89136d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a94642c6f50476cbabbaa27a89ca0fcbf6c89f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a94642c6f50476cbabbaa27a89ca0fcbf6c89f1a", "html_url": "https://github.com/rust-lang/rust/commit/a94642c6f50476cbabbaa27a89ca0fcbf6c89f1a"}, {"sha": "a270b7b2d920689340d4d0cfd62bbde34b429441", "url": "https://api.github.com/repos/rust-lang/rust/commits/a270b7b2d920689340d4d0cfd62bbde34b429441", "html_url": "https://github.com/rust-lang/rust/commit/a270b7b2d920689340d4d0cfd62bbde34b429441"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "ea74e74a863cf21cfba900c23a50f4e5318db15c", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5801991b5d54676410b7a65a664e8e83cc89136d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5801991b5d54676410b7a65a664e8e83cc89136d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5801991b5d54676410b7a65a664e8e83cc89136d", "patch": "@@ -758,6 +758,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n             run_lints!(cx, check_item, late_passes, it);\n             cx.visit_ids(|v| v.visit_item(it));\n             hir_visit::walk_item(cx, it);\n+            run_lints!(cx, check_item_post, late_passes, it);\n         })\n     }\n \n@@ -846,6 +847,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_block(&mut self, b: &hir::Block) {\n         run_lints!(self, check_block, late_passes, b);\n         hir_visit::walk_block(self, b);\n+        run_lints!(self, check_block_post, late_passes, b);\n     }\n \n     fn visit_arm(&mut self, a: &hir::Arm) {\n@@ -918,6 +920,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n             run_lints!(cx, check_item, early_passes, it);\n             cx.visit_ids(|v| v.visit_item(it));\n             ast_visit::walk_item(cx, it);\n+            run_lints!(cx, check_item_post, early_passes, it);\n         })\n     }\n \n@@ -1001,6 +1004,7 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     fn visit_block(&mut self, b: &ast::Block) {\n         run_lints!(self, check_block, early_passes, b);\n         ast_visit::walk_block(self, b);\n+        run_lints!(self, check_block_post, early_passes, b);\n     }\n \n     fn visit_arm(&mut self, a: &ast::Arm) {\n@@ -1253,6 +1257,8 @@ pub fn check_crate(tcx: &ty::ctxt, access_levels: &AccessLevels) {\n         run_lints!(cx, check_crate, late_passes, krate);\n \n         hir_visit::walk_crate(cx, krate);\n+\n+        run_lints!(cx, check_crate_post, late_passes, krate);\n     });\n \n     // If we missed any lints added to the session, then there's a bug somewhere\n@@ -1284,6 +1290,8 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n         run_lints!(cx, check_crate, early_passes, krate);\n \n         ast_visit::walk_crate(cx, krate);\n+\n+        run_lints!(cx, check_crate_post, early_passes, krate);\n     });\n \n     // Put the lint store back in the session."}, {"sha": "5e2e8c4c6d5f8877cf02e1f5df72efbb64f2c564", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5801991b5d54676410b7a65a664e8e83cc89136d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5801991b5d54676410b7a65a664e8e83cc89136d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=5801991b5d54676410b7a65a664e8e83cc89136d", "patch": "@@ -132,11 +132,14 @@ pub trait LintPass {\n pub trait LateLintPass: LintPass {\n     fn check_name(&mut self, _: &LateContext, _: Span, _: ast::Name) { }\n     fn check_crate(&mut self, _: &LateContext, _: &hir::Crate) { }\n+    fn check_crate_post(&mut self, _: &LateContext, _: &hir::Crate) { }\n     fn check_mod(&mut self, _: &LateContext, _: &hir::Mod, _: Span, _: ast::NodeId) { }\n     fn check_foreign_item(&mut self, _: &LateContext, _: &hir::ForeignItem) { }\n     fn check_item(&mut self, _: &LateContext, _: &hir::Item) { }\n+    fn check_item_post(&mut self, _: &LateContext, _: &hir::Item) { }\n     fn check_local(&mut self, _: &LateContext, _: &hir::Local) { }\n     fn check_block(&mut self, _: &LateContext, _: &hir::Block) { }\n+    fn check_block_post(&mut self, _: &LateContext, _: &hir::Block) { }\n     fn check_stmt(&mut self, _: &LateContext, _: &hir::Stmt) { }\n     fn check_arm(&mut self, _: &LateContext, _: &hir::Arm) { }\n     fn check_pat(&mut self, _: &LateContext, _: &hir::Pat) { }\n@@ -174,11 +177,14 @@ pub trait LateLintPass: LintPass {\n pub trait EarlyLintPass: LintPass {\n     fn check_ident(&mut self, _: &EarlyContext, _: Span, _: ast::Ident) { }\n     fn check_crate(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n+    fn check_crate_post(&mut self, _: &EarlyContext, _: &ast::Crate) { }\n     fn check_mod(&mut self, _: &EarlyContext, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n     fn check_foreign_item(&mut self, _: &EarlyContext, _: &ast::ForeignItem) { }\n     fn check_item(&mut self, _: &EarlyContext, _: &ast::Item) { }\n+    fn check_item_post(&mut self, _: &EarlyContext, _: &ast::Item) { }\n     fn check_local(&mut self, _: &EarlyContext, _: &ast::Local) { }\n     fn check_block(&mut self, _: &EarlyContext, _: &ast::Block) { }\n+    fn check_block_post(&mut self, _: &EarlyContext, _: &ast::Block) { }\n     fn check_stmt(&mut self, _: &EarlyContext, _: &ast::Stmt) { }\n     fn check_arm(&mut self, _: &EarlyContext, _: &ast::Arm) { }\n     fn check_pat(&mut self, _: &EarlyContext, _: &ast::Pat) { }"}]}