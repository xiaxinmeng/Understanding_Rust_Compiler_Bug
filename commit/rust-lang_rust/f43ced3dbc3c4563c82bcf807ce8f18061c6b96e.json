{"sha": "f43ced3dbc3c4563c82bcf807ce8f18061c6b96e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0M2NlZDNkYmMzYzQ1NjNjODJiY2Y4MDdjZThmMTgwNjFjNmI5NmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T14:29:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-21T14:29:47Z"}, "message": "Rollup merge of #67462 - DutchGhost:const_slice_from_raw_parts, r=dtolnay\n\nMake ptr::slice_from_raw_parts a const fn available under a feature flag\n\nA first step in the direction of https://github.com/rust-lang/rust/issues/67456 .\nThis makes `ptr::slice_from_raw_parts` and `ptr::slice_from_raw_parts_mut` available as a const fn under a feature flag.", "tree": {"sha": "0b27abd5f30a000dfd2b42a7d9e0e6673b58e8eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b27abd5f30a000dfd2b42a7d9e0e6673b58e8eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/ixbCRBK7hj4Ov3rIwAAdHIIAJgHvhABjFIue+7xB4qCVDEg\nIgvZlU0EjMzFRxHDyliEOyW0K9IXmb1J0THpY+laOWnsAGbwO3jsRrn89WvXnpdA\nYXuZ/6AgmvyjA20hznihbQbIXKZrJbsxbDxt8hjFWizoOIokweVfSIlZ9pW7bdXC\nm35BhBif7VUzDLscUSW9SrbGP6RACyHhdCgU/PMgxz4/Nlg/qiFxkzXCUVaYgeeU\n2ONIciYLuLfDGHRxRTvBLuXmj/XKPpAQCrLWkIromOPPlYJSkrUp7/W/uJ+JkYP/\nEcdO1a0+Ch/1m5EuFy311AjK3z0cAPJnXg4/6Ba4F8yw/8FMAeF5DsbctYpjyJQ=\n=9+sn\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b27abd5f30a000dfd2b42a7d9e0e6673b58e8eb\nparent a01f956f981d8ab41093d01460d40c17e2b996cc\nparent 382d370c4f5750900ec8896b3659d7624fe048a0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576938587 +0100\ncommitter GitHub <noreply@github.com> 1576938587 +0100\n\nRollup merge of #67462 - DutchGhost:const_slice_from_raw_parts, r=dtolnay\n\nMake ptr::slice_from_raw_parts a const fn available under a feature flag\n\nA first step in the direction of https://github.com/rust-lang/rust/issues/67456 .\nThis makes `ptr::slice_from_raw_parts` and `ptr::slice_from_raw_parts_mut` available as a const fn under a feature flag.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e", "html_url": "https://github.com/rust-lang/rust/commit/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01f956f981d8ab41093d01460d40c17e2b996cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01f956f981d8ab41093d01460d40c17e2b996cc", "html_url": "https://github.com/rust-lang/rust/commit/a01f956f981d8ab41093d01460d40c17e2b996cc"}, {"sha": "382d370c4f5750900ec8896b3659d7624fe048a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/382d370c4f5750900ec8896b3659d7624fe048a0", "html_url": "https://github.com/rust-lang/rust/commit/382d370c4f5750900ec8896b3659d7624fe048a0"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "924563fc44f6e74f632e1ebd31dcad62815afd86", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=f43ced3dbc3c4563c82bcf807ce8f18061c6b96e", "patch": "@@ -259,7 +259,8 @@ pub(crate) struct FatPtr<T> {\n /// ```\n #[inline]\n #[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n-pub fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n     unsafe { Repr { raw: FatPtr { data, len } }.rust }\n }\n \n@@ -275,7 +276,8 @@ pub fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n /// [`from_raw_parts_mut`]: ../../std/slice/fn.from_raw_parts_mut.html\n #[inline]\n #[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n-pub fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n+#[rustc_const_unstable(feature = \"const_slice_from_raw_parts\", issue = \"67456\")]\n+pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n     unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }\n }\n "}, {"sha": "1f20ebc01e9937d62f26fb38a51f21701b2467ba", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f43ced3dbc3c4563c82bcf807ce8f18061c6b96e", "patch": "@@ -36,6 +36,9 @@\n #![feature(iter_is_partitioned)]\n #![feature(iter_order_by)]\n #![feature(cmp_min_max_by)]\n+#![feature(slice_from_raw_parts)]\n+#![feature(const_slice_from_raw_parts)]\n+#![feature(const_raw_ptr_deref)]\n \n extern crate test;\n "}, {"sha": "473bc881d2932a8775b4213bdb8a84bc5408a487", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43ced3dbc3c4563c82bcf807ce8f18061c6b96e/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=f43ced3dbc3c4563c82bcf807ce8f18061c6b96e", "patch": "@@ -1,6 +1,17 @@\n use core::cell::RefCell;\n use core::ptr::*;\n \n+#[test]\n+fn test_const_from_raw_parts() {\n+    const SLICE: &[u8] = &[1, 2, 3, 4];\n+    const FROM_RAW: &[u8] = unsafe { &*slice_from_raw_parts(SLICE.as_ptr(), SLICE.len()) };\n+    assert_eq!(SLICE, FROM_RAW);\n+\n+    let slice = &[1, 2, 3, 4, 5];\n+    let from_raw = unsafe { &*slice_from_raw_parts(slice.as_ptr(), 2) } ;\n+    assert_eq!(&slice[..2], from_raw);\n+}\n+\n #[test]\n fn test() {\n     unsafe {"}]}