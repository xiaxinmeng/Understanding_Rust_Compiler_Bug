{"sha": "28ec27b33acc513a6534eb0d310caf7700800205", "node_id": "C_kwDOAAsO6NoAKDI4ZWMyN2IzM2FjYzUxM2E2NTM0ZWIwZDMxMGNhZjc3MDA4MDAyMDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-29T01:51:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-29T01:51:23Z"}, "message": "Auto merge of #9388 - Jarcho:rustup, r=Jarcho\n\nRustup\n\nHopefully this is done right.\n\nchangelog: None", "tree": {"sha": "bd3684f68f86ad3f2b709a00bae2d757e28ea895", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3684f68f86ad3f2b709a00bae2d757e28ea895"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ec27b33acc513a6534eb0d310caf7700800205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ec27b33acc513a6534eb0d310caf7700800205", "html_url": "https://github.com/rust-lang/rust/commit/28ec27b33acc513a6534eb0d310caf7700800205", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ec27b33acc513a6534eb0d310caf7700800205/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e31c8cab41c09984085d82b61c4b2e3ad38a164", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e31c8cab41c09984085d82b61c4b2e3ad38a164", "html_url": "https://github.com/rust-lang/rust/commit/4e31c8cab41c09984085d82b61c4b2e3ad38a164"}, {"sha": "e5507390b79ba19b3b71134ddcfa5e4c72119c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5507390b79ba19b3b71134ddcfa5e4c72119c9e", "html_url": "https://github.com/rust-lang/rust/commit/e5507390b79ba19b3b71134ddcfa5e4c72119c9e"}], "stats": {"total": 126, "additions": 65, "deletions": 61}, "files": [{"sha": "fac2c99714d9bf808d6a13f6bae1b6a82af59356", "filename": ".github/workflows/clippy.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -24,6 +24,7 @@ env:\n   RUST_BACKTRACE: 1\n   CARGO_TARGET_DIR: '${{ github.workspace }}/target'\n   NO_FMT_TEST: 1\n+  CARGO_INCREMENTAL: 0\n \n jobs:\n   base:"}, {"sha": "30607af490124589f44ce0cf831ca57ab8edad98", "filename": ".github/workflows/clippy_bors.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/.github%2Fworkflows%2Fclippy_bors.yml", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/.github%2Fworkflows%2Fclippy_bors.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_bors.yml?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -10,6 +10,7 @@ env:\n   RUST_BACKTRACE: 1\n   CARGO_TARGET_DIR: '${{ github.workspace }}/target'\n   NO_FMT_TEST: 1\n+  CARGO_INCREMENTAL: 0\n \n defaults:\n   run:"}, {"sha": "20cc330e035f8990563c10bdfd313dedcfc15fa5", "filename": "clippy_lints/src/crate_in_macro_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcrate_in_macro_def.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -74,8 +74,8 @@ impl EarlyLintPass for CrateInMacroDef {\n \n fn is_macro_export(attr: &Attribute) -> bool {\n     if_chain! {\n-        if let AttrKind::Normal(attr_item, _) = &attr.kind;\n-        if let [segment] = attr_item.path.segments.as_slice();\n+        if let AttrKind::Normal(normal) = &attr.kind;\n+        if let [segment] = normal.item.path.segments.as_slice();\n         then {\n             segment.ident.name == sym::macro_export\n         } else {"}, {"sha": "1506ea604f0dd21ab827db4062d57bd9a2939532", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -2,7 +2,10 @@ use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n use clippy_utils::ty::{expr_sig, is_copy, peel_mid_ty_refs, ty_sig, variant_of_res};\n-use clippy_utils::{fn_def_id, get_parent_expr, is_lint_allowed, meets_msrv, msrvs, path_to_local, walk_to_expr_usage};\n+use clippy_utils::{\n+    fn_def_id, get_parent_expr, get_parent_expr_for_hir, is_lint_allowed, meets_msrv, msrvs, path_to_local,\n+    walk_to_expr_usage,\n+};\n use rustc_ast::util::parser::{PREC_POSTFIX, PREC_PREFIX};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n@@ -732,6 +735,19 @@ fn walk_parents<'tcx>(\n                 Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n             },\n \n+            Node::ExprField(field) if field.span.ctxt() == ctxt => match get_parent_expr_for_hir(cx, field.hir_id) {\n+                Some(Expr {\n+                    hir_id,\n+                    kind: ExprKind::Struct(path, ..),\n+                    ..\n+                }) => variant_of_res(cx, cx.qpath_res(path, *hir_id))\n+                    .and_then(|variant| variant.fields.iter().find(|f| f.name == field.ident.name))\n+                    .map(|field_def| {\n+                        ty_auto_deref_stability(cx, cx.tcx.type_of(field_def.did), precedence).position_for_arg()\n+                    }),\n+                _ => None,\n+            },\n+\n             Node::Expr(parent) if parent.span.ctxt() == ctxt => match parent.kind {\n                 ExprKind::Ret(_) => {\n                     let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n@@ -833,17 +849,6 @@ fn walk_parents<'tcx>(\n                         }\n                     })\n                 },\n-                ExprKind::Struct(path, fields, _) => {\n-                    let variant = variant_of_res(cx, cx.qpath_res(path, parent.hir_id));\n-                    fields\n-                        .iter()\n-                        .find(|f| f.expr.hir_id == child_id)\n-                        .zip(variant)\n-                        .and_then(|(field, variant)| variant.fields.iter().find(|f| f.name == field.ident.name))\n-                        .map(|field| {\n-                            ty_auto_deref_stability(cx, cx.tcx.type_of(field.did), precedence).position_for_arg()\n-                        })\n-                },\n                 ExprKind::Field(child, name) if child.hir_id == e.hir_id => Some(Position::FieldAccess(name.name)),\n                 ExprKind::Unary(UnOp::Deref, child) if child.hir_id == e.hir_id => Some(Position::Deref),\n                 ExprKind::Match(child, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)"}, {"sha": "0f1d701865e7d711bbf8ae1bdb949c31d5214611", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -61,9 +61,8 @@ impl EarlyLintPass for DoubleParens {\n                     }\n                 }\n             },\n-            ExprKind::MethodCall(_, ref params, _) => {\n-                if params.len() == 2 {\n-                    let param = &params[1];\n+            ExprKind::MethodCall(_, _, ref params, _) => {\n+                if let [ref param] = params[..] {\n                     if let ExprKind::Paren(_) = param.kind {\n                         span_lint(cx, DOUBLE_PARENS, param.span, msg);\n                     }"}, {"sha": "e32ef9933afe5c2b16a062fd81aed35b3439b340", "filename": "clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -290,7 +290,7 @@ impl<'a> NormalizedPat<'a> {\n                     LitKind::Char(val) => Self::LitInt(val.into()),\n                     LitKind::Int(val, _) => Self::LitInt(val),\n                     LitKind::Bool(val) => Self::LitBool(val),\n-                    LitKind::Float(..) | LitKind::Err(_) => Self::Wild,\n+                    LitKind::Float(..) | LitKind::Err => Self::Wild,\n                 },\n                 _ => Self::Wild,\n             },"}, {"sha": "bffbf20b4d289982288b8a9ffb2e7eb81d39bc97", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -57,10 +57,10 @@ impl EarlyLintPass for OctalEscapes {\n         }\n \n         if let ExprKind::Lit(lit) = &expr.kind {\n-            if matches!(lit.token.kind, LitKind::Str) {\n-                check_lit(cx, &lit.token, lit.span, true);\n-            } else if matches!(lit.token.kind, LitKind::ByteStr) {\n-                check_lit(cx, &lit.token, lit.span, false);\n+            if matches!(lit.token_lit.kind, LitKind::Str) {\n+                check_lit(cx, &lit.token_lit, lit.span, true);\n+            } else if matches!(lit.token_lit.kind, LitKind::ByteStr) {\n+                check_lit(cx, &lit.token_lit, lit.span, false);\n             }\n         }\n     }"}, {"sha": "d9ee031c9f9756ffe11968f79499cd56b0277bca", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -37,9 +37,9 @@ declare_lint_pass!(OptionEnvUnwrap => [OPTION_ENV_UNWRAP]);\n impl EarlyLintPass for OptionEnvUnwrap {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path_segment, args, _) = &expr.kind;\n+            if let ExprKind::MethodCall(path_segment, receiver, _, _) = &expr.kind;\n             if matches!(path_segment.ident.name, sym::expect | sym::unwrap);\n-            if let ExprKind::Call(caller, _) = &args[0].kind;\n+            if let ExprKind::Call(caller, _) = &receiver.kind;\n             if is_direct_expn_of(caller.span, \"option_env\").is_some();\n             then {\n                 span_lint_and_help("}, {"sha": "e6e3ad05ad70abbee15e673653f9b076a43affff", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -109,12 +109,12 @@ impl EarlyLintPass for Precedence {\n             let mut arg = operand;\n \n             let mut all_odd = true;\n-            while let ExprKind::MethodCall(path_segment, args, _) = &arg.kind {\n+            while let ExprKind::MethodCall(path_segment, receiver, _, _) = &arg.kind {\n                 let path_segment_str = path_segment.ident.name.as_str();\n                 all_odd &= ALLOWED_ODD_FUNCTIONS\n                     .iter()\n                     .any(|odd_function| **odd_function == *path_segment_str);\n-                arg = args.first().expect(\"A method always has a receiver.\");\n+                arg = receiver;\n             }\n \n             if_chain! {"}, {"sha": "5d36f0f5ff8bc91cde11f88026437c7ceb826f21", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -595,7 +595,7 @@ fn ident_difference_expr_with_base_location(\n         | (Unary(_, _), Unary(_, _))\n         | (Binary(_, _, _), Binary(_, _, _))\n         | (Tup(_), Tup(_))\n-        | (MethodCall(_, _, _), MethodCall(_, _, _))\n+        | (MethodCall(_, _, _, _), MethodCall(_, _, _, _))\n         | (Call(_, _), Call(_, _))\n         | (ConstBlock(_), ConstBlock(_))\n         | (Array(_), Array(_))"}, {"sha": "ac73173697e8596bcc5b013f1b7d57e38fc28ab2", "filename": "clippy_lints/src/unused_peekable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_peekable.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -201,7 +201,7 @@ impl<'tcx> Visitor<'_> for PeekableVisitor<'_, 'tcx> {\n                             return;\n                         },\n                     },\n-                    Node::Block(_) => {},\n+                    Node::Block(_) | Node::ExprField(_) => {},\n                     _ => {\n                         break;\n                     },"}, {"sha": "b8a5d4ea8c9fbe177429781c403313046f752194", "filename": "clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_rounding.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -30,11 +30,10 @@ declare_clippy_lint! {\n declare_lint_pass!(UnusedRounding => [UNUSED_ROUNDING]);\n \n fn is_useless_rounding(expr: &Expr) -> Option<(&str, String)> {\n-    if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind\n+    if let ExprKind::MethodCall(name_ident, receiver, _, _) = &expr.kind\n         && let method_name = name_ident.ident.name.as_str()\n         && (method_name == \"ceil\" || method_name == \"round\" || method_name == \"floor\")\n-        && !args.is_empty()\n-        && let ExprKind::Lit(spanned) = &args[0].kind\n+        && let ExprKind::Lit(spanned) = &receiver.kind\n         && let LitKind::Float(symbol, ty) = spanned.kind {\n             let f = symbol.as_str().parse::<f64>().unwrap();\n             let f_str = symbol.to_string() + if let LitFloatType::Suffixed(ty) = ty {"}, {"sha": "cd1d90e860b9fe865baef8a27bcbeb3078b7b0ec", "filename": "clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_unit.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -89,7 +89,7 @@ impl EarlyLintPass for UnusedUnit {\n         }\n     }\n \n-    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef, _: &ast::TraitBoundModifier) {\n+    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef) {\n         let segments = &poly.trait_ref.path.segments;\n \n         if_chain! {"}, {"sha": "429c64ac156418c1656161f2d840c8330235f96f", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         match lit.value.node {\n             LitKind::Bool(val) => kind!(\"Bool({val:?})\"),\n             LitKind::Char(c) => kind!(\"Char({c:?})\"),\n-            LitKind::Err(val) => kind!(\"Err({val})\"),\n+            LitKind::Err => kind!(\"Err\"),\n             LitKind::Byte(b) => kind!(\"Byte({b})\"),\n             LitKind::Int(i, suffix) => {\n                 let int_ty = match suffix {"}, {"sha": "eb34085a2abf3a5e5631bf182173a33cb14abb9c", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -593,8 +593,8 @@ fn extract_clippy_version_value(cx: &LateContext<'_>, item: &'_ Item<'_>) -> Opt\n     attrs.iter().find_map(|attr| {\n         if_chain! {\n             // Identify attribute\n-            if let ast::AttrKind::Normal(ref attr_kind, _) = &attr.kind;\n-            if let [tool_name, attr_name] = &attr_kind.path.segments[..];\n+            if let ast::AttrKind::Normal(ref attr_kind) = &attr.kind;\n+            if let [tool_name, attr_name] = &attr_kind.item.path.segments[..];\n             if tool_name.ident.name == sym::clippy;\n             if attr_name.ident.name == sym::version;\n             if let Some(version) = attr.value_str();"}, {"sha": "5533840b166f8c783c94e076b25d670bf26fbe71", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -683,12 +683,12 @@ impl Write {\n                 },\n             };\n \n-            let replacement: String = match lit.token.kind {\n+            let replacement: String = match lit.token_lit.kind {\n                 LitKind::StrRaw(_) | LitKind::ByteStrRaw(_) if matches!(fmtstr.style, StrStyle::Raw(_)) => {\n-                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::Str | LitKind::ByteStr if matches!(fmtstr.style, StrStyle::Cooked) => {\n-                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n+                    lit.token_lit.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_)\n                 | LitKind::Str\n@@ -697,7 +697,7 @@ impl Write {\n                 | LitKind::Integer\n                 | LitKind::Float\n                 | LitKind::Err => continue,\n-                LitKind::Byte | LitKind::Char => match lit.token.symbol.as_str() {\n+                LitKind::Byte | LitKind::Char => match lit.token_lit.symbol.as_str() {\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Cooked) => \"\\\\\\\"\",\n                     \"\\\"\" if matches!(fmtstr.style, StrStyle::Raw(0)) => continue,\n                     \"\\\\\\\\\" if matches!(fmtstr.style, StrStyle::Raw(_)) => \"\\\\\",\n@@ -708,7 +708,7 @@ impl Write {\n                     x => x,\n                 }\n                 .into(),\n-                LitKind::Bool => lit.token.symbol.as_str().deref().into(),\n+                LitKind::Bool => lit.token_lit.symbol.as_str().deref().into(),\n             };\n \n             if !fmt_spans.is_empty() {"}, {"sha": "493991f30e8720fe16be776ffb29d71f96acbc32", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -147,7 +147,9 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Array(l), Array(r)) | (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),\n         (Call(lc, la), Call(rc, ra)) => eq_expr(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n-        (MethodCall(lc, la, _), MethodCall(rc, ra, _)) => eq_path_seg(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n+        (MethodCall(lc, ls, la, _), MethodCall(rc, rs, ra, _)) => {\n+            eq_path_seg(lc, rc) && eq_expr(ls, rs) && over(la, ra, |l, r| eq_expr(l, r))\n+        },\n         (Binary(lo, ll, lr), Binary(ro, rl, rr)) => lo.node == ro.node && eq_expr(ll, rl) && eq_expr(lr, rr),\n         (Unary(lo, l), Unary(ro, r)) => mem::discriminant(lo) == mem::discriminant(ro) && eq_expr(l, r),\n         (Lit(l), Lit(r)) => l.kind == r.kind,\n@@ -693,7 +695,7 @@ pub fn eq_attr(l: &Attribute, r: &Attribute) -> bool {\n     l.style == r.style\n         && match (&l.kind, &r.kind) {\n             (DocComment(l1, l2), DocComment(r1, r2)) => l1 == r1 && l2 == r2,\n-            (Normal(l, _), Normal(r, _)) => eq_path(&l.path, &r.path) && eq_mac_args(&l.args, &r.args),\n+            (Normal(l), Normal(r)) => eq_path(&l.item.path, &r.item.path) && eq_mac_args(&l.item.args, &r.item.args),\n             _ => false,\n         }\n }"}, {"sha": "8ab77c88166365eecc83f35968e83e3d17ac1b0b", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -59,8 +59,8 @@ pub fn get_attr<'a>(\n     name: &'static str,\n ) -> impl Iterator<Item = &'a ast::Attribute> {\n     attrs.iter().filter(move |attr| {\n-        let attr = if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n-            attr\n+        let attr = if let ast::AttrKind::Normal(ref normal) = attr.kind {\n+            &normal.item\n         } else {\n             return false;\n         };"}, {"sha": "e053708edd50779cc1b845c66f7b26cbc33d5cdb", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -45,7 +45,7 @@ pub enum Constant {\n     /// A reference\n     Ref(Box<Constant>),\n     /// A literal with syntax error.\n-    Err(Symbol),\n+    Err,\n }\n \n impl PartialEq for Constant {\n@@ -118,9 +118,7 @@ impl Hash for Constant {\n             Self::Ref(ref r) => {\n                 r.hash(state);\n             },\n-            Self::Err(ref s) => {\n-                s.hash(state);\n-            },\n+            Self::Err => {},\n         }\n     }\n }\n@@ -194,7 +192,7 @@ pub fn lit_to_mir_constant(lit: &LitKind, ty: Option<Ty<'_>>) -> Constant {\n             _ => bug!(),\n         },\n         LitKind::Bool(b) => Constant::Bool(b),\n-        LitKind::Err(s) => Constant::Err(s),\n+        LitKind::Err => Constant::Err,\n     }\n }\n "}, {"sha": "8ab87c48620d21e7ca6f85a546934eaeda921329", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -1900,8 +1900,8 @@ pub fn std_or_core(cx: &LateContext<'_>) -> Option<&'static str> {\n \n pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n     cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n-        if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n-            attr.path == sym::no_std\n+        if let ast::AttrKind::Normal(ref normal) = attr.kind {\n+            normal.item.path == sym::no_std\n         } else {\n             false\n         }\n@@ -1910,8 +1910,8 @@ pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n \n pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n     cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n-        if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n-            attr.path == sym::no_core\n+        if let ast::AttrKind::Normal(ref normal) = attr.kind {\n+            normal.item.path == sym::no_core\n         } else {\n             false\n         }"}, {"sha": "85b60fefd60fc4ab84a271c50ebc510bd7449221", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-08-11\"\n+channel = \"nightly-2022-08-27\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "235eae5af1ec386e3f0c620bba77a21bc0e0afff", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -95,7 +95,7 @@ struct ClippyCallbacks {\n \n impl rustc_driver::Callbacks for ClippyCallbacks {\n     // JUSTIFICATION: necessary in clippy driver to set `mir_opt_level`\n-    #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+    #[allow(rustc::bad_opt_access)]\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();"}, {"sha": "c3235f06779b3ee6aacb1ec051ce2c68536c1195", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::semicolon_if_nothing_returned)]\n #![allow(clippy::redundant_closure)]\n-#![feature(label_break_value)]\n #![feature(let_else)]\n \n fn get_unit() {}"}, {"sha": "78813e7cc1c39c5aa294f08db14ca9cfe0688a50", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28ec27b33acc513a6534eb0d310caf7700800205/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28ec27b33acc513a6534eb0d310caf7700800205/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=28ec27b33acc513a6534eb0d310caf7700800205", "patch": "@@ -1,31 +1,31 @@\n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:10:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:9:5\n    |\n LL |     println!(\"Hello\")\n    |     ^^^^^^^^^^^^^^^^^ help: add a `;` here: `println!(\"Hello\");`\n    |\n    = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:14:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:13:5\n    |\n LL |     get_unit()\n    |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:19:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:18:5\n    |\n LL |     y = x + 1\n    |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:25:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:24:9\n    |\n LL |         hello()\n    |         ^^^^^^^ help: add a `;` here: `hello();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:36:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:35:9\n    |\n LL |         ptr::drop_in_place(s.as_mut_ptr())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`"}]}