{"sha": "c0f48f9eb091b5054acb98575c69c67a0aeefb7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZjQ4ZjllYjA5MWI1MDU0YWNiOTg1NzVjNjljNjdhMGFlZWZiN2I=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-08T22:59:42Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-08T22:59:42Z"}, "message": "Merge #472\n\n472: Stupidly simple idea to make DefIds more stable r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "31af7c72f0d9dd99232aaf93a5785ad09a9336ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31af7c72f0d9dd99232aaf93a5785ad09a9336ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0f48f9eb091b5054acb98575c69c67a0aeefb7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f48f9eb091b5054acb98575c69c67a0aeefb7b", "html_url": "https://github.com/rust-lang/rust/commit/c0f48f9eb091b5054acb98575c69c67a0aeefb7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0f48f9eb091b5054acb98575c69c67a0aeefb7b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "46f74e33ca53a7897e9020d3de75cc76a6b89d79", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f74e33ca53a7897e9020d3de75cc76a6b89d79", "html_url": "https://github.com/rust-lang/rust/commit/46f74e33ca53a7897e9020d3de75cc76a6b89d79"}, {"sha": "d18d8399f5b601bd870f2aa3b5173b77b33f6073", "url": "https://api.github.com/repos/rust-lang/rust/commits/d18d8399f5b601bd870f2aa3b5173b77b33f6073", "html_url": "https://github.com/rust-lang/rust/commit/d18d8399f5b601bd870f2aa3b5173b77b33f6073"}], "stats": {"total": 196, "additions": 103, "deletions": 93}, "files": [{"sha": "8ac49eba3e5f397b19b6dde8096c1d0e7a9dc323", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c0f48f9eb091b5054acb98575c69c67a0aeefb7b/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f48f9eb091b5054acb98575c69c67a0aeefb7b/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=c0f48f9eb091b5054acb98575c69c67a0aeefb7b", "patch": "@@ -253,13 +253,17 @@ impl SourceFileItems {\n     }\n \n     fn init(&mut self, source_file: &SourceFile) {\n-        source_file.syntax().descendants().for_each(|it| {\n+        // By walking the tree in bread-first order we make sure that parents\n+        // get lower ids then children. That is, addding a new child does not\n+        // change parent's id. This means that, say, adding a new function to a\n+        // trait does not chage ids of top-level items, which helps caching.\n+        bfs(source_file.syntax(), |it| {\n             if let Some(module_item) = ast::ModuleItem::cast(it) {\n                 self.alloc(module_item.syntax().to_owned());\n             } else if let Some(macro_call) = ast::MacroCall::cast(it) {\n                 self.alloc(macro_call.syntax().to_owned());\n             }\n-        });\n+        })\n     }\n \n     fn alloc(&mut self, item: TreePtr<SyntaxNode>) -> SourceFileItemId {\n@@ -305,3 +309,16 @@ impl std::ops::Index<SourceFileItemId> for SourceFileItems {\n         &self.arena[idx]\n     }\n }\n+\n+/// Walks the subtree in bfs order, calling `f` for each node.\n+fn bfs(node: &SyntaxNode, mut f: impl FnMut(&SyntaxNode)) {\n+    let mut curr_layer = vec![node];\n+    let mut next_layer = vec![];\n+    while !curr_layer.is_empty() {\n+        curr_layer.drain(..).for_each(|node| {\n+            next_layer.extend(node.children());\n+            f(node);\n+        });\n+        std::mem::swap(&mut curr_layer, &mut next_layer);\n+    }\n+}"}, {"sha": "17de54b4422dba46fa0c9bfef8e0c4b4ef2eece2", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 75, "deletions": 59, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/c0f48f9eb091b5054acb98575c69c67a0aeefb7b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0f48f9eb091b5054acb98575c69c67a0aeefb7b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=c0f48f9eb091b5054acb98575c69c67a0aeefb7b", "patch": "@@ -322,46 +322,17 @@ fn reexport_across_crates() {\n     );\n }\n \n-#[test]\n-fn typing_inside_a_function_should_not_invalidate_item_map() {\n-    let (mut db, pos) = MockDatabase::with_position(\n-        \"\n-        //- /lib.rs\n-        mod foo;\n-\n-        use crate::foo::bar::Baz;\n-\n-        //- /foo/mod.rs\n-        pub mod bar;\n-\n-        //- /foo/bar.rs\n-        <|>\n-        salsa::query_group! {\n-            trait Baz {\n-                fn foo() -> i32 { 1 + 1 }\n-            }\n-        }\n-        \",\n-    );\n+fn check_item_map_is_not_recomputed(initial: &str, file_change: &str) {\n+    let (mut db, pos) = MockDatabase::with_position(initial);\n     let source_root = db.file_source_root(pos.file_id);\n     {\n         let events = db.log_executed(|| {\n             db.item_map(source_root).unwrap();\n         });\n         assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n     }\n-\n-    let new_text = \"\n-        salsa::query_group! {\n-            trait Baz {\n-                fn foo() -> i32 { 92 }\n-            }\n-        }\n-    \"\n-    .to_string();\n-\n     db.query_mut(ra_db::FileTextQuery)\n-        .set(pos.file_id, Arc::new(new_text));\n+        .set(pos.file_id, Arc::new(file_change.to_string()));\n \n     {\n         let events = db.log_executed(|| {\n@@ -376,8 +347,8 @@ fn typing_inside_a_function_should_not_invalidate_item_map() {\n }\n \n #[test]\n-fn typing_inside_a_function_inside_a_macro_should_not_invalidate_item_map() {\n-    let (mut db, pos) = MockDatabase::with_position(\n+fn typing_inside_a_function_should_not_invalidate_item_map() {\n+    check_item_map_is_not_recomputed(\n         \"\n         //- /lib.rs\n         mod foo;<|>\n@@ -392,36 +363,81 @@ fn typing_inside_a_function_inside_a_macro_should_not_invalidate_item_map() {\n \n         //- /foo/bar.rs\n         pub struct Baz;\n-    \",\n-    );\n-    let source_root = db.file_source_root(pos.file_id);\n-    {\n-        let events = db.log_executed(|| {\n-            db.item_map(source_root).unwrap();\n-        });\n-        assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n-    }\n-\n-    let new_text = \"\n+        \",\n+        \"\n         mod foo;\n \n         use crate::foo::bar::Baz;\n \n         fn foo() -> i32 { 92 }\n-    \"\n-    .to_string();\n+        \",\n+    );\n+}\n \n-    db.query_mut(ra_db::FileTextQuery)\n-        .set(pos.file_id, Arc::new(new_text));\n+#[test]\n+fn adding_inner_items_should_not_invalidate_item_map() {\n+    check_item_map_is_not_recomputed(\n+        \"\n+        //- /lib.rs\n+        struct S { a: i32}\n+        enum E { A }\n+        trait T {\n+            fn a() {}\n+        }\n+        mod foo;<|>\n+        impl S {\n+            fn a() {}\n+        }\n+        use crate::foo::bar::Baz;\n+        //- /foo/mod.rs\n+        pub mod bar;\n \n-    {\n-        let events = db.log_executed(|| {\n-            db.item_map(source_root).unwrap();\n-        });\n-        assert!(\n-            !format!(\"{:?}\", events).contains(\"item_map\"),\n-            \"{:#?}\",\n-            events\n-        )\n-    }\n+        //- /foo/bar.rs\n+        pub struct Baz;\n+        \",\n+        \"\n+        struct S { a: i32, b: () }\n+        enum E { A, B }\n+        trait T {\n+            fn a() {}\n+            fn b() {}\n+        }\n+        mod foo;<|>\n+        impl S {\n+            fn a() {}\n+            fn b() {}\n+        }\n+        use crate::foo::bar::Baz;\n+        \",\n+    );\n+}\n+\n+#[test]\n+fn typing_inside_a_function_inside_a_macro_should_not_invalidate_item_map() {\n+    check_item_map_is_not_recomputed(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+\n+        use crate::foo::bar::Baz;\n+\n+        //- /foo/mod.rs\n+        pub mod bar;\n+\n+        //- /foo/bar.rs\n+        <|>\n+        salsa::query_group! {\n+            trait Baz {\n+                fn foo() -> i32 { 1 + 1 }\n+            }\n+        }\n+        \",\n+        \"\n+        salsa::query_group! {\n+            trait Baz {\n+                fn foo() -> i32 { 92 }\n+            }\n+        }\n+        \",\n+    );\n }"}, {"sha": "77bddab7cff14ac218c9dc0423cc46988843b907", "filename": "crates/ra_syntax/fuzz/Cargo.lock", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c0f48f9eb091b5054acb98575c69c67a0aeefb7b/crates%2Fra_syntax%2Ffuzz%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c0f48f9eb091b5054acb98575c69c67a0aeefb7b/crates%2Fra_syntax%2Ffuzz%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ffuzz%2FCargo.lock?ref=c0f48f9eb091b5054acb98575c69c67a0aeefb7b", "patch": "@@ -135,15 +135,6 @@ dependencies = [\n  \"stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"parking_lot\"\n-version = \"0.6.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"parking_lot\"\n version = \"0.7.0\"\n@@ -153,18 +144,6 @@ dependencies = [\n  \"parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"parking_lot_core\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.45 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"parking_lot_core\"\n version = \"0.4.0\"\n@@ -208,8 +187,8 @@ dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_text_edit 0.1.0\",\n- \"rowan 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rowan 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"text_unit 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -226,7 +205,7 @@ name = \"ra_text_edit\"\n version = \"0.1.0\"\n dependencies = [\n  \"proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"text_unit 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -337,12 +316,12 @@ dependencies = [\n \n [[package]]\n name = \"rowan\"\n-version = \"0.1.3\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smol_str 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"text_unit 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -415,7 +394,7 @@ dependencies = [\n \n [[package]]\n name = \"text_unit\"\n-version = \"0.1.5\"\n+version = \"0.1.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -491,9 +470,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9667ddcc6cc8a43afc9b7917599d7216aa09c463919ea32c59ed6cac8bc945\"\n \"checksum num-traits 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0b3a5d7cc97d6d30d8b9bc8fa19bf45349ffe46241e8816f50f62f6d6aaabee1\"\n \"checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13\"\n-\"checksum parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0802bff09003b291ba756dc7e79313e51cc31667e94afbe847def490424cde5\"\n \"checksum parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9723236a9525c757d9725b993511e3fc941e33f27751942232f0058298297edf\"\n-\"checksum parking_lot_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad7f7e6ebdc79edff6fdcb87a55b620174f7a989e3eb31b65231f4af57f00b8c\"\n \"checksum parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94c8c7923936b28d546dfd14d4472eaf34c99b14e1c973a32b3e6d4eb04298c9\"\n \"checksum proptest 0.8.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"926d0604475349f463fe44130aae73f2294b5309ab2ca0310b998bd334ef191f\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n@@ -509,7 +486,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum redox_syscall 0.1.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"52ee9a534dc1301776eff45b4fa92d2c39b1d8c3d3357e6eb593e0d795506fc2\"\n \"checksum regex-syntax 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e47a2ed29da7a9e1960e1639e7a982e6edc6d49be308a3b02daf511504a16d1\"\n \"checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5\"\n-\"checksum rowan 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9ccca91953e9c549cac18e8f41daa5d49dad1c9a4c9bb977ac42718bb34e1bf\"\n+\"checksum rowan 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ae9ae7dba5e703f423ceb8646d636c73e6d858a2f8c834808b4565e42ccda9e2\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n \"checksum rusty-fork 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9591f190d2852720b679c21f66ad929f9f1d7bb09d1193c26167586029d8489c\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n@@ -519,7 +496,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum smol_str 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"486a74e9b9fc53373808f7a17e10fc728adcb1fbe272292271d8bea61175e181\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum tempfile 3.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e91405c14320e5c79b3d148e1c86f40749a36e490642202a31689cb1a3452b2\"\n-\"checksum text_unit 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8009d7bdbd896a7e09b595f8f9325a19047fc708653e60d0895202b82135048f\"\n+\"checksum text_unit 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"158bb1c22b638b1da3c95a8ad9f061ea40d4d39fd0301be3a520f92efeeb189e\"\n \"checksum ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\""}]}