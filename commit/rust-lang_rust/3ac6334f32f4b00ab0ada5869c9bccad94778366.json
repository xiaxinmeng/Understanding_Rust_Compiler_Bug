{"sha": "3ac6334f32f4b00ab0ada5869c9bccad94778366", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYzYzMzRmMzJmNGIwMGFiMGFkYTU4NjljOWJjY2FkOTQ3NzgzNjY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-13T16:52:41Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:09:19Z"}, "message": "port resolve.rs from oldvisit to <V:Visitor> trait.", "tree": {"sha": "a258eb44859c4755b001f2d6fb604c3d4f7ca49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a258eb44859c4755b001f2d6fb604c3d4f7ca49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ac6334f32f4b00ab0ada5869c9bccad94778366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ac6334f32f4b00ab0ada5869c9bccad94778366", "html_url": "https://github.com/rust-lang/rust/commit/3ac6334f32f4b00ab0ada5869c9bccad94778366", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ac6334f32f4b00ab0ada5869c9bccad94778366/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c15f21bd76d0658866d2db431c4bb4bc6b2932e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c15f21bd76d0658866d2db431c4bb4bc6b2932e", "html_url": "https://github.com/rust-lang/rust/commit/6c15f21bd76d0658866d2db431c4bb4bc6b2932e"}], "stats": {"total": 220, "additions": 123, "deletions": 97}, "files": [{"sha": "9654bf3fc01fbeacf60076c7fc0e12267b5026f6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 123, "deletions": 97, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/3ac6334f32f4b00ab0ada5869c9bccad94778366/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ac6334f32f4b00ab0ada5869c9bccad94778366/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3ac6334f32f4b00ab0ada5869c9bccad94778366", "patch": "@@ -27,17 +27,14 @@ use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::ast_util::{Privacy, Public, Private};\n use syntax::ast_util::{variant_visibility_to_privacy, visibility_to_privacy};\n use syntax::attr;\n-use syntax::oldvisit::{mk_simple_visitor, default_simple_visitor};\n-use syntax::oldvisit::{default_visitor, mk_vt, Visitor, visit_block};\n-use syntax::oldvisit::{visit_crate, visit_expr, visit_expr_opt};\n-use syntax::oldvisit::{visit_foreign_item, visit_item};\n-use syntax::oldvisit::{visit_mod, visit_ty, vt, SimpleVisitor};\n use syntax::parse::token;\n use syntax::parse::token::ident_interner;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::path_to_str;\n use syntax::codemap::{span, dummy_sp, BytePos};\n use syntax::opt_vec::OptVec;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n \n use std::str;\n use std::uint;\n@@ -131,7 +128,30 @@ pub enum SelfBinding {\n     HasSelfBinding(NodeId, bool /* is implicit */)\n }\n \n-pub type ResolveVisitor = vt<()>;\n+struct ResolveVisitor {\n+    resolver: @mut Resolver,\n+}\n+\n+impl Visitor<()> for ResolveVisitor {\n+    fn visit_item(&mut self, item:@item, _:()) {\n+        self.resolver.resolve_item(item, self);\n+    }\n+    fn visit_arm(&mut self, arm:&arm, _:()) {\n+        self.resolver.resolve_arm(arm, self);\n+    }\n+    fn visit_block(&mut self, block:&Block, _:()) {\n+        self.resolver.resolve_block(block, self);\n+    }\n+    fn visit_expr(&mut self, expr:@expr, _:()) {\n+        self.resolver.resolve_expr(expr, self);\n+    }\n+    fn visit_local(&mut self, local:@Local, _:()) {\n+        self.resolver.resolve_local(local, self);\n+    }\n+    fn visit_ty(&mut self, ty:&Ty, _:()) {\n+        self.resolver.resolve_type(ty, self);\n+    }\n+}\n \n /// Contains data for specific types of import directives.\n pub enum ImportDirectiveSubclass {\n@@ -871,6 +891,45 @@ pub struct Resolver {\n     used_imports: HashSet<NodeId>,\n }\n \n+struct BuildReducedGraphVisitor {\n+    resolver: @mut Resolver,\n+}\n+\n+impl Visitor<ReducedGraphParent> for BuildReducedGraphVisitor {\n+\n+    fn visit_item(&mut self, item:@item, context:ReducedGraphParent) {\n+        self.resolver.build_reduced_graph_for_item(item, (context, self));\n+    }\n+\n+    fn visit_foreign_item(&mut self, foreign_item:@foreign_item, context:ReducedGraphParent) {\n+        self.resolver.build_reduced_graph_for_foreign_item(foreign_item,\n+                                                             (context,\n+                                                              self));\n+    }\n+\n+    fn visit_view_item(&mut self, view_item:&view_item, context:ReducedGraphParent) {\n+        self.resolver.build_reduced_graph_for_view_item(view_item,\n+                                                          (context,\n+                                                           self));\n+    }\n+\n+    fn visit_block(&mut self, block:&Block, context:ReducedGraphParent) {\n+        self.resolver.build_reduced_graph_for_block(block,\n+                                                      (context,\n+                                                       self));\n+    }\n+\n+}\n+\n+struct UnusedImportCheckVisitor { resolver: @mut Resolver }\n+\n+impl Visitor<()> for UnusedImportCheckVisitor {\n+    fn visit_view_item(&mut self, vi:&view_item, _:()) {\n+        self.resolver.check_for_item_unused_imports(vi);\n+        visit::walk_view_item(self, vi, ());\n+    }\n+}\n+\n impl Resolver {\n     /// The main name resolution procedure.\n     pub fn resolve(@mut self) {\n@@ -900,27 +959,9 @@ impl Resolver {\n     pub fn build_reduced_graph(@mut self) {\n         let initial_parent =\n             ModuleReducedGraphParent(self.graph_root.get_module());\n-        visit_crate(self.crate, (initial_parent, mk_vt(@Visitor {\n-            visit_item: |item, (context, visitor)|\n-                self.build_reduced_graph_for_item(item, (context, visitor)),\n-\n-            visit_foreign_item: |foreign_item, (context, visitor)|\n-                self.build_reduced_graph_for_foreign_item(foreign_item,\n-                                                             (context,\n-                                                              visitor)),\n-\n-            visit_view_item: |view_item, (context, visitor)|\n-                self.build_reduced_graph_for_view_item(view_item,\n-                                                          (context,\n-                                                           visitor)),\n-\n-            visit_block: |block, (context, visitor)|\n-                self.build_reduced_graph_for_block(block,\n-                                                      (context,\n-                                                       visitor)),\n \n-            .. *default_visitor()\n-        })));\n+        let mut visitor = BuildReducedGraphVisitor { resolver: self, };\n+        visit::walk_crate(&mut visitor, self.crate, initial_parent);\n     }\n \n     /// Returns the current module tracked by the reduced graph parent.\n@@ -1094,7 +1135,7 @@ impl Resolver {\n     pub fn build_reduced_graph_for_item(@mut self,\n                                         item: @item,\n                                         (parent, visitor): (ReducedGraphParent,\n-                                                            vt<ReducedGraphParent>)) {\n+                                                            &mut BuildReducedGraphVisitor)) {\n         let ident = item.ident;\n         let sp = item.span;\n         let privacy = visibility_to_privacy(item.vis);\n@@ -1115,7 +1156,7 @@ impl Resolver {\n                 let new_parent =\n                     ModuleReducedGraphParent(name_bindings.get_module());\n \n-                visit_mod(module_, sp, item.id, (new_parent, visitor));\n+                visit::walk_mod(visitor, module_, new_parent);\n             }\n \n             item_foreign_mod(ref fm) => {\n@@ -1142,7 +1183,7 @@ impl Resolver {\n                     anonymous => parent\n                 };\n \n-                visit_item(item, (new_parent, visitor));\n+                visit::walk_item(visitor, item, new_parent);\n             }\n \n             // These items live in the value namespace.\n@@ -1160,7 +1201,7 @@ impl Resolver {\n \n                 let def = def_fn(local_def(item.id), purity);\n                 name_bindings.define_value(privacy, def, sp);\n-                visit_item(item, (new_parent, visitor));\n+                visit::walk_item(visitor, item, new_parent);\n             }\n \n             // These items live in the type namespace.\n@@ -1186,7 +1227,7 @@ impl Resolver {\n                         // inherited => privacy of the enum item\n                         variant_visibility_to_privacy(variant.node.vis,\n                                                       privacy == Public),\n-                        (new_parent, visitor));\n+                        new_parent, visitor);\n                 }\n             }\n \n@@ -1213,7 +1254,7 @@ impl Resolver {\n                 // Record the def ID of this struct.\n                 self.structs.insert(local_def(item.id));\n \n-                visit_item(item, (new_parent, visitor));\n+                visit::walk_item(visitor, item, new_parent);\n             }\n \n             item_impl(_, None, ref ty, ref methods) => {\n@@ -1293,11 +1334,11 @@ impl Resolver {\n                     _ => {}\n                 }\n \n-                visit_item(item, (parent, visitor));\n+                visit::walk_item(visitor, item, parent);\n             }\n \n             item_impl(_, Some(_), _, _) => {\n-                visit_item(item, (parent, visitor));\n+                visit::walk_item(visitor, item, parent);\n             }\n \n             item_trait(_, _, ref methods) => {\n@@ -1364,7 +1405,7 @@ impl Resolver {\n                 }\n \n                 name_bindings.define_type(privacy, def_trait(def_id), sp);\n-                visit_item(item, (new_parent, visitor));\n+                visit::walk_item(visitor, item, new_parent);\n             }\n \n             item_mac(*) => {\n@@ -1379,9 +1420,8 @@ impl Resolver {\n                                            variant: &variant,\n                                            item_id: def_id,\n                                            parent_privacy: Privacy,\n-                                           (parent, _visitor):\n-                                           (ReducedGraphParent,\n-                                            vt<ReducedGraphParent>)) {\n+                                           parent: ReducedGraphParent,\n+                                           _: &mut BuildReducedGraphVisitor) {\n         let ident = variant.node.name;\n \n         let privacy =\n@@ -1418,7 +1458,7 @@ impl Resolver {\n                                              view_item: &view_item,\n                                              (parent, _):\n                                              (ReducedGraphParent,\n-                                              vt<ReducedGraphParent>)) {\n+                                              &mut BuildReducedGraphVisitor)) {\n         let privacy = visibility_to_privacy(view_item.vis);\n         match view_item.node {\n             view_item_use(ref view_paths) => {\n@@ -1517,7 +1557,7 @@ impl Resolver {\n                                                 foreign_item: @foreign_item,\n                                                 (parent, visitor):\n                                                 (ReducedGraphParent,\n-                                                 vt<ReducedGraphParent>)) {\n+                                                 &mut BuildReducedGraphVisitor)) {\n         let name = foreign_item.ident;\n         let (name_bindings, new_parent) =\n             self.add_child(name, parent, ForbidDuplicateValues,\n@@ -1532,14 +1572,14 @@ impl Resolver {\n                     HasTypeParameters(\n                         generics, foreign_item.id, 0, NormalRibKind))\n                 {\n-                    visit_foreign_item(foreign_item, (new_parent, visitor));\n+                    visit::walk_foreign_item(visitor, foreign_item, new_parent);\n                 }\n             }\n             foreign_item_static(_, m) => {\n                 let def = def_static(local_def(foreign_item.id), m);\n                 name_bindings.define_value(Public, def, foreign_item.span);\n \n-                visit_foreign_item(foreign_item, (new_parent, visitor));\n+                visit::walk_foreign_item(visitor, foreign_item, new_parent);\n             }\n         }\n     }\n@@ -1548,7 +1588,7 @@ impl Resolver {\n                                          block: &Block,\n                                          (parent, visitor):\n                                          (ReducedGraphParent,\n-                                          vt<ReducedGraphParent>)) {\n+                                          &mut BuildReducedGraphVisitor)) {\n         let new_parent;\n         if self.block_needs_anonymous_module(block) {\n             let block_id = block.id;\n@@ -1568,7 +1608,7 @@ impl Resolver {\n             new_parent = parent;\n         }\n \n-        visit_block(block, (new_parent, visitor));\n+        visit::walk_block(visitor, block, new_parent);\n     }\n \n     pub fn handle_external_def(@mut self,\n@@ -3454,24 +3494,11 @@ impl Resolver {\n     pub fn resolve_crate(@mut self) {\n         debug!(\"(resolving crate) starting\");\n \n-        visit_crate(self.crate, ((), mk_vt(@Visitor {\n-            visit_item: |item, (_context, visitor)|\n-                self.resolve_item(item, visitor),\n-            visit_arm: |arm, (_context, visitor)|\n-                self.resolve_arm(arm, visitor),\n-            visit_block: |block, (_context, visitor)|\n-                self.resolve_block(block, visitor),\n-            visit_expr: |expr, (_context, visitor)|\n-                self.resolve_expr(expr, visitor),\n-            visit_local: |local, (_context, visitor)|\n-                self.resolve_local(local, visitor),\n-            visit_ty: |ty, (_context, visitor)|\n-                self.resolve_type(ty, visitor),\n-            .. *default_visitor()\n-        })));\n+        let mut visitor = ResolveVisitor{ resolver: self };\n+        visit::walk_crate(&mut visitor, self.crate, ());\n     }\n \n-    pub fn resolve_item(@mut self, item: @item, visitor: ResolveVisitor) {\n+    pub fn resolve_item(@mut self, item: @item, visitor: &mut ResolveVisitor) {\n         debug!(\"(resolving item) resolving %s\",\n                self.session.str_of(item.ident));\n \n@@ -3503,7 +3530,7 @@ impl Resolver {\n                 do self.with_type_parameter_rib(\n                     HasTypeParameters(\n                         generics, item.id, 0, NormalRibKind)) {\n-                    visit_item(item, ((), visitor));\n+                    visit::walk_item(visitor, item, ());\n                 }\n             }\n \n@@ -3513,7 +3540,7 @@ impl Resolver {\n                                            NormalRibKind))\n                         || {\n \n-                    visit_item(item, ((), visitor));\n+                    visit::walk_item(visitor, item, ());\n                 }\n             }\n \n@@ -3613,12 +3640,14 @@ impl Resolver {\n                                     HasTypeParameters(\n                                         generics, foreign_item.id, 0,\n                                         NormalRibKind),\n-                                    || visit_foreign_item(*foreign_item,\n-                                                          ((), visitor)));\n+                                    || visit::walk_foreign_item(visitor,\n+                                                                *foreign_item,\n+                                                                ()));\n                             }\n                             foreign_item_static(*) => {\n-                                visit_foreign_item(*foreign_item,\n-                                                   ((), visitor));\n+                                visit::walk_foreign_item(visitor,\n+                                                         *foreign_item,\n+                                                         ());\n                             }\n                         }\n                     }\n@@ -3640,7 +3669,7 @@ impl Resolver {\n \n             item_static(*) => {\n                 self.with_constant_rib(|| {\n-                    visit_item(item, ((), visitor));\n+                    visit::walk_item(visitor, item, ());\n                 });\n             }\n \n@@ -3713,7 +3742,7 @@ impl Resolver {\n                             type_parameters: TypeParameters,\n                             block: &Block,\n                             self_binding: SelfBinding,\n-                            visitor: ResolveVisitor) {\n+                            visitor: &mut ResolveVisitor) {\n         // Create a value rib for the function.\n         let function_value_rib = @Rib(rib_kind);\n         self.value_ribs.push(function_value_rib);\n@@ -3784,7 +3813,7 @@ impl Resolver {\n \n     pub fn resolve_type_parameters(@mut self,\n                                    type_parameters: &OptVec<TyParam>,\n-                                   visitor: ResolveVisitor) {\n+                                   visitor: &mut ResolveVisitor) {\n         for type_parameter in type_parameters.iter() {\n             for bound in type_parameter.bounds.iter() {\n                 self.resolve_type_parameter_bound(type_parameter.id, bound, visitor);\n@@ -3795,7 +3824,7 @@ impl Resolver {\n     pub fn resolve_type_parameter_bound(@mut self,\n                                         id: NodeId,\n                                         type_parameter_bound: &TyParamBound,\n-                                        visitor: ResolveVisitor) {\n+                                        visitor: &mut ResolveVisitor) {\n         match *type_parameter_bound {\n             TraitTyParamBound(ref tref) => {\n                 self.resolve_trait_reference(id, tref, visitor, TraitBoundingTypeParameter)\n@@ -3807,7 +3836,7 @@ impl Resolver {\n     pub fn resolve_trait_reference(@mut self,\n                                    id: NodeId,\n                                    trait_reference: &trait_ref,\n-                                   visitor: ResolveVisitor,\n+                                   visitor: &mut ResolveVisitor,\n                                    reference_type: TraitReferenceType) {\n         match self.resolve_path(id, &trait_reference.path, TypeNS, true, visitor) {\n             None => {\n@@ -3833,7 +3862,7 @@ impl Resolver {\n                           id: NodeId,\n                           generics: &Generics,\n                           fields: &[@struct_field],\n-                          visitor: ResolveVisitor) {\n+                          visitor: &mut ResolveVisitor) {\n         let mut ident_map = HashMap::new::<ast::ident, @struct_field>();\n         for &field in fields.iter() {\n             match field.node.kind {\n@@ -3876,7 +3905,7 @@ impl Resolver {\n                           rib_kind: RibKind,\n                           method: @method,\n                           outer_type_parameter_count: uint,\n-                          visitor: ResolveVisitor) {\n+                          visitor: &mut ResolveVisitor) {\n         let method_generics = &method.generics;\n         let type_parameters =\n             HasTypeParameters(method_generics,\n@@ -3903,7 +3932,7 @@ impl Resolver {\n                                   opt_trait_reference: &Option<trait_ref>,\n                                   self_type: &Ty,\n                                   methods: &[@method],\n-                                  visitor: ResolveVisitor) {\n+                                  visitor: &mut ResolveVisitor) {\n         // If applicable, create a rib for the type parameters.\n         let outer_type_parameter_count = generics.ty_params.len();\n         do self.with_type_parameter_rib(HasTypeParameters\n@@ -3976,16 +4005,16 @@ impl Resolver {\n \n     pub fn resolve_module(@mut self,\n                           module_: &_mod,\n-                          span: span,\n+                          _span: span,\n                           _name: ident,\n                           id: NodeId,\n-                          visitor: ResolveVisitor) {\n+                          visitor: &mut ResolveVisitor) {\n         // Write the implementations in scope into the module metadata.\n         debug!(\"(resolving module) resolving module ID %d\", id);\n-        visit_mod(module_, span, id, ((), visitor));\n+        visit::walk_mod(visitor, module_, ());\n     }\n \n-    pub fn resolve_local(@mut self, local: @Local, visitor: ResolveVisitor) {\n+    pub fn resolve_local(@mut self, local: @Local, visitor: &mut ResolveVisitor) {\n         let mutability = if local.is_mutbl {Mutable} else {Immutable};\n \n         // Resolve the type.\n@@ -4056,7 +4085,7 @@ impl Resolver {\n         }\n     }\n \n-    pub fn resolve_arm(@mut self, arm: &arm, visitor: ResolveVisitor) {\n+    pub fn resolve_arm(@mut self, arm: &arm, visitor: &mut ResolveVisitor) {\n         self.value_ribs.push(@Rib(NormalRibKind));\n \n         let bindings_list = @mut HashMap::new();\n@@ -4069,13 +4098,13 @@ impl Resolver {\n         // pat_idents are variants\n         self.check_consistent_bindings(arm);\n \n-        visit_expr_opt(arm.guard, ((), visitor));\n+        visit::walk_expr_opt(visitor, arm.guard, ());\n         self.resolve_block(&arm.body, visitor);\n \n         self.value_ribs.pop();\n     }\n \n-    pub fn resolve_block(@mut self, block: &Block, visitor: ResolveVisitor) {\n+    pub fn resolve_block(@mut self, block: &Block, visitor: &mut ResolveVisitor) {\n         debug!(\"(resolving block) entering block\");\n         self.value_ribs.push(@Rib(NormalRibKind));\n \n@@ -4091,7 +4120,7 @@ impl Resolver {\n         }\n \n         // Descend into the block.\n-        visit_block(block, ((), visitor));\n+        visit::walk_block(visitor, block, ());\n \n         // Move back up.\n         self.current_module = orig_module;\n@@ -4100,7 +4129,7 @@ impl Resolver {\n         debug!(\"(resolving block) leaving block\");\n     }\n \n-    pub fn resolve_type(@mut self, ty: &Ty, visitor: ResolveVisitor) {\n+    pub fn resolve_type(@mut self, ty: &Ty, visitor: &mut ResolveVisitor) {\n         match ty.node {\n             // Like path expressions, the interpretation of path types depends\n             // on whether the path has multiple elements in it or not.\n@@ -4178,12 +4207,12 @@ impl Resolver {\n                         self.resolve_type_parameter_bound(ty.id, bound, visitor);\n                     }\n                 };\n-                visit_ty(ty, ((), visitor));\n+                visit::walk_ty(visitor, ty, ());\n             }\n \n             _ => {\n                 // Just resolve embedded types.\n-                visit_ty(ty, ((), visitor));\n+                visit::walk_ty(visitor, ty, ());\n             }\n         }\n     }\n@@ -4195,7 +4224,7 @@ impl Resolver {\n                            // Maps idents to the node ID for the (outermost)\n                            // pattern that binds them\n                            bindings_list: Option<@mut HashMap<ident,NodeId>>,\n-                           visitor: ResolveVisitor) {\n+                           visitor: &mut ResolveVisitor) {\n         let pat_id = pattern.id;\n         do walk_pat(pattern) |pattern| {\n             match pattern.node {\n@@ -4477,7 +4506,7 @@ impl Resolver {\n                         path: &Path,\n                         namespace: Namespace,\n                         check_ribs: bool,\n-                        visitor: ResolveVisitor)\n+                        visitor: &mut ResolveVisitor)\n                         -> Option<def> {\n         // First, resolve the types.\n         for ty in path.types.iter() {\n@@ -4903,7 +4932,7 @@ impl Resolver {\n       return false;\n     }\n \n-    pub fn resolve_expr(@mut self, expr: @expr, visitor: ResolveVisitor) {\n+    pub fn resolve_expr(@mut self, expr: @expr, visitor: &mut ResolveVisitor) {\n         // First, record candidate traits for this expression if it could\n         // result in the invocation of a method call.\n \n@@ -4971,7 +5000,7 @@ impl Resolver {\n                     }\n                 }\n \n-                visit_expr(expr, ((), visitor));\n+                visit::walk_expr(visitor, expr, ());\n             }\n \n             expr_fn_block(ref fn_decl, ref block) => {\n@@ -5005,7 +5034,7 @@ impl Resolver {\n                     }\n                 }\n \n-                visit_expr(expr, ((), visitor));\n+                visit::walk_expr(visitor, expr, ());\n             }\n \n             expr_loop(_, Some(label)) => {\n@@ -5017,7 +5046,7 @@ impl Resolver {\n                         rib.bindings.insert(label, def_like);\n                     }\n \n-                    visit_expr(expr, ((), visitor));\n+                    visit::walk_expr(visitor, expr, ());\n                 }\n             }\n \n@@ -5055,7 +5084,7 @@ impl Resolver {\n             }\n \n             _ => {\n-                visit_expr(expr, ((), visitor));\n+                visit::walk_expr(visitor, expr, ());\n             }\n         }\n     }\n@@ -5293,11 +5322,8 @@ impl Resolver {\n     //\n \n     pub fn check_for_unused_imports(@mut self) {\n-        let vt = mk_simple_visitor(@SimpleVisitor {\n-            visit_view_item: |vi| self.check_for_item_unused_imports(vi),\n-            .. *default_simple_visitor()\n-        });\n-        visit_crate(self.crate, ((), vt));\n+        let mut visitor = UnusedImportCheckVisitor{ resolver: self };\n+        visit::walk_crate(&mut visitor, self.crate, ());\n     }\n \n     pub fn check_for_item_unused_imports(&mut self, vi: &view_item) {"}]}