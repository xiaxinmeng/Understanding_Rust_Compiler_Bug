{"sha": "939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOWE5N2Y1Y2I0YzhmNDRiYzYwNzg0YmJmNGFhNWQ0NGYxYzVkY2E=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-18T13:24:24Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-18T13:24:24Z"}, "message": "Add #[inline(always)] to each operator method", "tree": {"sha": "1b64d1db3f3f04b0188283ee851434c430d98ac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b64d1db3f3f04b0188283ee851434c430d98ac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "html_url": "https://github.com/rust-lang/rust/commit/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2", "html_url": "https://github.com/rust-lang/rust/commit/d2a81b95c3e2ccfdba0324caae531ce3528ed4e2"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "404f1a82de5d009ad635e7b07a362daf45292eb1", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "patch": "@@ -288,26 +288,32 @@ impl num::One for f32 {\n \n #[cfg(notest)]\n impl ops::Add<f32,f32> for f32 {\n+    #[inline(always)]\n     fn add(&self, other: &f32) -> f32 { *self + *other }\n }\n #[cfg(notest)]\n impl ops::Sub<f32,f32> for f32 {\n+    #[inline(always)]\n     fn sub(&self, other: &f32) -> f32 { *self - *other }\n }\n #[cfg(notest)]\n impl ops::Mul<f32,f32> for f32 {\n+    #[inline(always)]\n     fn mul(&self, other: &f32) -> f32 { *self * *other }\n }\n #[cfg(notest)]\n impl ops::Div<f32,f32> for f32 {\n+    #[inline(always)]\n     fn div(&self, other: &f32) -> f32 { *self / *other }\n }\n #[cfg(notest)]\n impl ops::Modulo<f32,f32> for f32 {\n+    #[inline(always)]\n     fn modulo(&self, other: &f32) -> f32 { *self % *other }\n }\n #[cfg(notest)]\n impl ops::Neg<f32> for f32 {\n+    #[inline(always)]\n     fn neg(&self) -> f32 { -*self }\n }\n "}, {"sha": "b4eaa0e7fdc605f41c2765a40febaa8bf10be382", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "patch": "@@ -310,26 +310,32 @@ impl num::One for f64 {\n \n #[cfg(notest)]\n impl ops::Add<f64,f64> for f64 {\n+    #[inline(always)]\n     fn add(&self, other: &f64) -> f64 { *self + *other }\n }\n #[cfg(notest)]\n impl ops::Sub<f64,f64> for f64 {\n+    #[inline(always)]\n     fn sub(&self, other: &f64) -> f64 { *self - *other }\n }\n #[cfg(notest)]\n impl ops::Mul<f64,f64> for f64 {\n+    #[inline(always)]\n     fn mul(&self, other: &f64) -> f64 { *self * *other }\n }\n #[cfg(notest)]\n impl ops::Div<f64,f64> for f64 {\n+    #[inline(always)]\n     fn div(&self, other: &f64) -> f64 { *self / *other }\n }\n #[cfg(notest)]\n impl ops::Modulo<f64,f64> for f64 {\n+    #[inline(always)]\n     fn modulo(&self, other: &f64) -> f64 { *self % *other }\n }\n #[cfg(notest)]\n impl ops::Neg<f64> for f64 {\n+    #[inline(always)]\n     fn neg(&self) -> f64 { -*self }\n }\n "}, {"sha": "42f0f033ac243cc7ebca3a1d6106d71f70b06e55", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "patch": "@@ -387,15 +387,21 @@ pub fn tan(x: float) -> float {\n \n #[cfg(notest)]\n impl Eq for float {\n+    #[inline(always)]\n     fn eq(&self, other: &float) -> bool { (*self) == (*other) }\n+    #[inline(always)]\n     fn ne(&self, other: &float) -> bool { (*self) != (*other) }\n }\n \n #[cfg(notest)]\n impl Ord for float {\n+    #[inline(always)]\n     fn lt(&self, other: &float) -> bool { (*self) < (*other) }\n+    #[inline(always)]\n     fn le(&self, other: &float) -> bool { (*self) <= (*other) }\n+    #[inline(always)]\n     fn ge(&self, other: &float) -> bool { (*self) >= (*other) }\n+    #[inline(always)]\n     fn gt(&self, other: &float) -> bool { (*self) > (*other) }\n }\n \n@@ -444,26 +450,32 @@ impl num::Round for float {\n \n #[cfg(notest)]\n impl ops::Add<float,float> for float {\n+    #[inline(always)]\n     fn add(&self, other: &float) -> float { *self + *other }\n }\n #[cfg(notest)]\n impl ops::Sub<float,float> for float {\n+    #[inline(always)]\n     fn sub(&self, other: &float) -> float { *self - *other }\n }\n #[cfg(notest)]\n impl ops::Mul<float,float> for float {\n+    #[inline(always)]\n     fn mul(&self, other: &float) -> float { *self * *other }\n }\n #[cfg(notest)]\n impl ops::Div<float,float> for float {\n+    #[inline(always)]\n     fn div(&self, other: &float) -> float { *self / *other }\n }\n #[cfg(notest)]\n impl ops::Modulo<float,float> for float {\n+    #[inline(always)]\n     fn modulo(&self, other: &float) -> float { *self % *other }\n }\n #[cfg(notest)]\n impl ops::Neg<float> for float {\n+    #[inline(always)]\n     fn neg(&self) -> float { -*self }\n }\n "}, {"sha": "044c62e92c17d7d030829339023a1cb050e66001", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "patch": "@@ -177,50 +177,63 @@ impl num::One for T {\n \n #[cfg(notest)]\n impl ops::Add<T,T> for T {\n+    #[inline(always)]\n     fn add(&self, other: &T) -> T { *self + *other }\n }\n #[cfg(notest)]\n impl ops::Sub<T,T> for T {\n+    #[inline(always)]\n     fn sub(&self, other: &T) -> T { *self - *other }\n }\n #[cfg(notest)]\n impl ops::Mul<T,T> for T {\n+    #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n #[cfg(notest)]\n impl ops::Div<T,T> for T {\n+    #[inline(always)]\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n #[cfg(notest)]\n impl ops::Modulo<T,T> for T {\n+    #[inline(always)]\n     fn modulo(&self, other: &T) -> T { *self % *other }\n }\n #[cfg(notest)]\n impl ops::Neg<T> for T {\n+    #[inline(always)]\n     fn neg(&self) -> T { -*self }\n }\n+\n #[cfg(notest)]\n impl ops::BitOr<T,T> for T {\n+    #[inline(always)]\n     fn bitor(&self, other: &T) -> T { *self | *other }\n }\n #[cfg(notest)]\n impl ops::BitAnd<T,T> for T {\n+    #[inline(always)]\n     fn bitand(&self, other: &T) -> T { *self & *other }\n }\n #[cfg(notest)]\n impl ops::BitXor<T,T> for T {\n+    #[inline(always)]\n     fn bitxor(&self, other: &T) -> T { *self ^ *other }\n }\n #[cfg(notest)]\n impl ops::Shl<T,T> for T {\n+    #[inline(always)]\n     fn shl(&self, other: &T) -> T { *self << *other }\n }\n #[cfg(notest)]\n impl ops::Shr<T,T> for T {\n+    #[inline(always)]\n     fn shr(&self, other: &T) -> T { *self >> *other }\n }\n #[cfg(notest)]\n impl ops::Not<T> for T {\n+    #[inline(always)]\n     fn not(&self) -> T { !*self }\n }\n "}, {"sha": "b49ec65a95bbf4981e19603c1c197ed53d9388b1", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=939a97f5cb4c8f44bc60784bbf4aa5d44f1c5dca", "patch": "@@ -142,50 +142,63 @@ impl num::One for T {\n \n #[cfg(notest)]\n impl ops::Add<T,T> for T {\n+    #[inline(always)]\n     fn add(&self, other: &T) -> T { *self + *other }\n }\n #[cfg(notest)]\n impl ops::Sub<T,T> for T {\n+    #[inline(always)]\n     fn sub(&self, other: &T) -> T { *self - *other }\n }\n #[cfg(notest)]\n impl ops::Mul<T,T> for T {\n+    #[inline(always)]\n     fn mul(&self, other: &T) -> T { *self * *other }\n }\n #[cfg(notest)]\n impl ops::Div<T,T> for T {\n+    #[inline(always)]\n     fn div(&self, other: &T) -> T { *self / *other }\n }\n #[cfg(notest)]\n impl ops::Modulo<T,T> for T {\n+    #[inline(always)]\n     fn modulo(&self, other: &T) -> T { *self % *other }\n }\n #[cfg(notest)]\n impl ops::Neg<T> for T {\n+    #[inline(always)]\n     fn neg(&self) -> T { -*self }\n }\n+\n #[cfg(notest)]\n impl ops::BitOr<T,T> for T {\n+    #[inline(always)]\n     fn bitor(&self, other: &T) -> T { *self | *other }\n }\n #[cfg(notest)]\n impl ops::BitAnd<T,T> for T {\n+    #[inline(always)]\n     fn bitand(&self, other: &T) -> T { *self & *other }\n }\n #[cfg(notest)]\n impl ops::BitXor<T,T> for T {\n+    #[inline(always)]\n     fn bitxor(&self, other: &T) -> T { *self ^ *other }\n }\n #[cfg(notest)]\n impl ops::Shl<T,T> for T {\n+    #[inline(always)]\n     fn shl(&self, other: &T) -> T { *self << *other }\n }\n #[cfg(notest)]\n impl ops::Shr<T,T> for T {\n+    #[inline(always)]\n     fn shr(&self, other: &T) -> T { *self >> *other }\n }\n #[cfg(notest)]\n impl ops::Not<T> for T {\n+    #[inline(always)]\n     fn not(&self) -> T { !*self }\n }\n "}]}