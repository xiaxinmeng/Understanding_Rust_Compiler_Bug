{"sha": "36eafe5712b9e64498716caa02649972117ee86a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZWFmZTU3MTJiOWU2NDQ5ODcxNmNhYTAyNjQ5OTcyMTE3ZWU4NmE=", "commit": {"author": {"name": "Collins Abitekaniza", "email": "collins.abitekaniza@osmosisworld.com", "date": "2018-05-27T23:56:33Z"}, "committer": {"name": "Collins Abitekaniza", "email": "collins.abitekaniza@osmosisworld.com", "date": "2018-06-03T14:43:11Z"}, "message": "impl is_tool on Mode enum\n\nmake is_tool inherent prop of mode\n\nfix errors from rebase\n\nresolve issues from review", "tree": {"sha": "abc9ccf830eb4af6ae02d1e7204d440d3a8e1302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abc9ccf830eb4af6ae02d1e7204d440d3a8e1302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36eafe5712b9e64498716caa02649972117ee86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36eafe5712b9e64498716caa02649972117ee86a", "html_url": "https://github.com/rust-lang/rust/commit/36eafe5712b9e64498716caa02649972117ee86a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36eafe5712b9e64498716caa02649972117ee86a/comments", "author": null, "committer": null, "parents": [{"sha": "11333972e89ca6b7ada92162b8b079217caf4177", "url": "https://api.github.com/repos/rust-lang/rust/commits/11333972e89ca6b7ada92162b8b079217caf4177", "html_url": "https://github.com/rust-lang/rust/commit/11333972e89ca6b7ada92162b8b079217caf4177"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "9300b94156acbdd729483d275c8175a09b84da12", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=36eafe5712b9e64498716caa02649972117ee86a", "patch": "@@ -806,7 +806,7 @@ impl<'a> Builder<'a> {\n             );\n         }\n \n-        if [Mode::ToolRustc, Mode::ToolStd, Mode::ToolTest].iter().any(|m| &mode == m) {\n+        if mode.is_tool() {\n             // Tools like cargo and rls don't get debuginfo by default right now, but this can be\n             // enabled in the config.  Adding debuginfo makes them several times larger.\n             if self.config.rust_debuginfo_tools {\n@@ -1012,7 +1012,7 @@ impl<'a> Builder<'a> {\n         // be resolved because MinGW has the import library. The downside is we\n         // don't get newer functions from Windows, but we don't use any of them\n         // anyway.\n-        if ![Mode::ToolRustc, Mode::ToolStd, Mode::ToolTest].iter().any(|m| &mode == m) {\n+        if !mode.is_tool() {\n             cargo.env(\"WINAPI_NO_BUNDLED_LIBRARIES\", \"1\");\n         }\n "}, {"sha": "b3ccb3cc3c926ca29dc823aed9a212e32ac4aec7", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=36eafe5712b9e64498716caa02649972117ee86a", "patch": "@@ -219,7 +219,7 @@ impl Step for Rustdoc {\n \n         let mut cargo = prepare_tool_cargo(builder,\n                                            compiler,\n-                                           Mode::Rustc,\n+                                           Mode::ToolRustc,\n                                            target,\n                                            \"check\",\n                                            \"src/tools/rustdoc\");"}, {"sha": "7341137e20d721101ac286ad00da1d844d51a607", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=36eafe5712b9e64498716caa02649972117ee86a", "patch": "@@ -953,7 +953,7 @@ impl Step for PlainSourceTarball {\n             if !has_cargo_vendor {\n                 let mut cmd = builder.cargo(\n                     builder.compiler(0, builder.config.build),\n-                    Mode::Tool,\n+                    Mode::ToolRustc,\n                     builder.config.build,\n                     \"install\"\n                 );"}, {"sha": "19599b33ebe261d942156450ea2e4f2e2e1b3448", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=36eafe5712b9e64498716caa02649972117ee86a", "patch": "@@ -799,13 +799,15 @@ impl Step for Rustdoc {\n         builder.ensure(tool::Rustdoc { host: compiler.host });\n \n         // Symlink compiler docs to the output directory of rustdoc documentation.\n-        let out_dir = builder.stage_out(compiler, Mode::Tool).join(target).join(\"doc\");\n+        let out_dir = builder.stage_out(compiler, Mode::ToolRustc).join(target).join(\"doc\");\n         t!(fs::create_dir_all(&out_dir));\n         builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n-        let mut cargo = prepare_tool_cargo(builder, compiler, target, \"doc\", \"src/tools/rustdoc\");\n+        let mut cargo = prepare_tool_cargo(\n+            builder, compiler, Mode::ToolRustc, target, \"doc\", \"src/tools/rustdoc\");\n+\n         cargo.env(\"RUSTDOCFLAGS\", \"--document-private-items\");\n         builder.run(&mut cargo);\n     }"}, {"sha": "d16d7a520659b6313fd077dae3b80326a9c6c196", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=36eafe5712b9e64498716caa02649972117ee86a", "patch": "@@ -324,6 +324,15 @@ pub enum Mode {\n     ToolRustc,\n }\n \n+impl Mode {\n+    pub fn is_tool(&self) -> bool {\n+        match self {\n+            Mode::ToolStd | Mode::ToolTest | Mode::ToolRustc => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n impl Build {\n     /// Creates a new set of build configuration from the `flags` on the command\n     /// line and the filesystem `config`."}, {"sha": "a0b6222421d71a78b83cde71bec69deafc80257c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36eafe5712b9e64498716caa02649972117ee86a/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=36eafe5712b9e64498716caa02649972117ee86a", "patch": "@@ -1729,7 +1729,7 @@ impl Step for CrateRustdoc {\n \n         let mut cargo = tool::prepare_tool_cargo(builder,\n                                                  compiler,\n-                                                 Mode::Rustc,\n+                                                 Mode::ToolRustc,\n                                                  target,\n                                                  test_kind.subcommand(),\n                                                  \"src/tools/rustdoc\");"}]}