{"sha": "59d858a0b142a718a771bdcc3c1f096e3ae01d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDg1OGEwYjE0MmE3MThhNzcxYmRjYzNjMWYwOTZlM2FlMDFkNWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-09T08:52:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-09T08:56:23Z"}, "message": "refactor away the closures and `Event` enum", "tree": {"sha": "d40f91a523ab5bff957289c3cc77860cded0f276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40f91a523ab5bff957289c3cc77860cded0f276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d858a0b142a718a771bdcc3c1f096e3ae01d5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWS83AAoJEFbW7qD8Z6xGwhQQALUrHijk6T4D/JkWxIQoBX2X\nZgULBTUuM+Rb3DPr9UJYU6ieRAylhAFuz30q6d5YuP2i8IeCuK/r2h4CRVcqr46K\nCmPwQiyunUUgp8f7jrL2WS68iC2ZiiW1qg0WGwx+Kla3+f6Tu9OlH/CGfkaVvhu4\nRsfZEQSvq/Ta3k4Yi614l7V3nHNZ3LuB3zXFTbZszhNN4Wmk1EahEqHozUNwM30F\n8i1VrQBUwDqzPLEgExvGiRyLsi/xnJcRwmzS/uqZH9Ms0GMfHt7Hm7f1XznlMtVX\n9+V1gYKar9wHtoS3mODxYVTs5//uqv/HxijeX6dOh7PZmkPHQP5WEq8Om0W7JA3f\nXBWJNisE+wLojXmDxAK+BaIVsz9Lhoffmk5w7NWnH5RtuOO6Yk20/m9J7Sy0oud8\nbtA4EbKGztTowpSSFhCbTJpruvazdFmATLOHk98+Z+5qHKW5SWf+1dBmNRWh2zGT\n8E1Yo7NCOha4CfuPjfviM8sHXOlmv4C6yh8Tu80dikxZMImVpsCXxNqpROX0zxQn\ndPLJhiIL4KdLveCdANc7tpRzLF+FSqB22pNQEZDbjGAdvEC8//xuXj2oGgntiIol\nqZPaynPCpep69AnjFyD+I4Jb0G62StNIZ9iSrGs5BFEhi8JAn0+IOkddbPI964vL\nhe217in6Yd255p3HE2jp\n=lkGR\n-----END PGP SIGNATURE-----", "payload": "tree d40f91a523ab5bff957289c3cc77860cded0f276\nparent cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465462365 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465462583 +0200\n\nrefactor away the closures and `Event` enum"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d858a0b142a718a771bdcc3c1f096e3ae01d5f", "html_url": "https://github.com/rust-lang/rust/commit/59d858a0b142a718a771bdcc3c1f096e3ae01d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d858a0b142a718a771bdcc3c1f096e3ae01d5f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a", "html_url": "https://github.com/rust-lang/rust/commit/cbbf58bbaaafb9cdd9cb837bc3570a8b04bc734a"}], "stats": {"total": 58, "additions": 20, "deletions": 38}, "files": [{"sha": "b581e860d78483f7357993b88b1cce2efaec5967", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59d858a0b142a718a771bdcc3c1f096e3ae01d5f/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d858a0b142a718a771bdcc3c1f096e3ae01d5f/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=59d858a0b142a718a771bdcc3c1f096e3ae01d5f", "patch": "@@ -395,17 +395,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n \n     fn run(&mut self) -> EvalResult<()> {\n         let mut stepper = stepper::Stepper::new(self);\n-        let mut done = false;\n-        while !done {\n-            use self::stepper::Event::*;\n-            stepper.step(|event| match event {\n-                Block(b) => trace!(\"// {:?}\", b),\n-                Assignment(a) => trace!(\"{:?}\", a),\n-                Terminator(t) => trace!(\"{:?}\", t.kind),\n-                Done => done = true,\n-                _ => {},\n-            })?;\n-        }\n+        while stepper.step()? {}\n         Ok(())\n     }\n "}, {"sha": "50aaba1d73f133436966d74ebbbe25f0b8577f07", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59d858a0b142a718a771bdcc3c1f096e3ae01d5f/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d858a0b142a718a771bdcc3c1f096e3ae01d5f/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=59d858a0b142a718a771bdcc3c1f096e3ae01d5f", "patch": "@@ -15,16 +15,6 @@ use syntax::codemap::Span;\n use std::rc::Rc;\n use memory::Pointer;\n \n-pub enum Event<'a, 'tcx: 'a> {\n-    Block(mir::BasicBlock),\n-    Return,\n-    Call,\n-    Constant,\n-    Assignment(&'a mir::Statement<'tcx>),\n-    Terminator(&'a mir::Terminator<'tcx>),\n-    Done,\n-}\n-\n pub struct Stepper<'fncx, 'a: 'fncx, 'b: 'a + 'mir, 'mir: 'fncx, 'tcx: 'b>{\n     fncx: &'fncx mut FnEvalContext<'a, 'b, 'mir, 'tcx>,\n \n@@ -41,39 +31,37 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n         }\n     }\n \n-    fn statement<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F, stmt: &mir::Statement<'tcx>) -> EvalResult<()> {\n-        f(Event::Assignment(stmt));\n+    fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> EvalResult<()> {\n+        trace!(\"{:?}\", stmt);\n         let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n         let result = self.fncx.eval_assignment(lvalue, rvalue);\n         self.fncx.maybe_report(result)?;\n         self.fncx.frame_mut().stmt += 1;\n         Ok(())\n     }\n \n-    fn terminator<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F, terminator: &mir::Terminator<'tcx>) -> EvalResult<()> {\n+    fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> EvalResult<()> {\n         // after a terminator we go to a new block\n         self.fncx.frame_mut().stmt = 0;\n         let term = {\n-            f(Event::Terminator(terminator));\n+            trace!(\"{:?}\", terminator.kind);\n             let result = self.fncx.eval_terminator(terminator);\n             self.fncx.maybe_report(result)?\n         };\n         match term {\n-            TerminatorTarget::Block => f(Event::Block(self.fncx.frame().next_block)),\n             TerminatorTarget::Return => {\n-                f(Event::Return);\n                 self.fncx.pop_stack_frame();\n             },\n-            TerminatorTarget::Call => f(Event::Call),\n+            TerminatorTarget::Block |\n+            TerminatorTarget::Call => trace!(\"// {:?}\", self.fncx.frame().next_block),\n         }\n         Ok(())\n     }\n \n     // returns true as long as there are more things to do\n-    pub fn step<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F) -> EvalResult<()> {\n+    pub fn step(&mut self) -> EvalResult<bool> {\n         if self.fncx.stack.is_empty() {\n-            f(Event::Done);\n-            return Ok(());\n+            return Ok(false);\n         }\n \n         let block = self.fncx.frame().next_block;\n@@ -92,10 +80,11 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n                 mir: &mir,\n             }.visit_statement(block, stmt);\n             if self.constants.is_empty() {\n-                return self.statement(f, stmt);\n+                self.statement(stmt)?;\n             } else {\n-                return self.extract_constants(f);\n+                self.extract_constants()?;\n             }\n+            return Ok(true);\n         }\n \n         let terminator = basic_block.terminator();\n@@ -109,19 +98,22 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n             mir: &mir,\n         }.visit_terminator(block, terminator);\n         if self.constants.is_empty() {\n-            self.terminator(f, terminator)\n+            self.terminator(terminator)?;\n         } else {\n-            self.extract_constants(f)\n+            self.extract_constants()?;\n         }\n+        Ok(true)\n     }\n \n-    fn extract_constants<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F) -> EvalResult<()> {\n+    fn extract_constants(&mut self) -> EvalResult<()> {\n         assert!(!self.constants.is_empty());\n         for (cid, span, return_ptr, mir) in self.constants.drain(..) {\n-            f(Event::Constant);\n+            trace!(\"queuing a constant\");\n             self.fncx.push_stack_frame(cid.def_id, span, mir, cid.substs, Some(return_ptr));\n         }\n-        self.step(f)\n+        // self.step() can't be \"done\", so it can't return false\n+        assert!(self.step()?);\n+        Ok(())\n     }\n }\n "}]}