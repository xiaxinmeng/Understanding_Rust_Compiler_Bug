{"sha": "71b526bf944c04ed0ac7d96b898332b4697a53a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYjUyNmJmOTQ0YzA0ZWQwYWM3ZDk2Yjg5ODMzMmI0Njk3YTUzYTY=", "commit": {"author": {"name": "Dirk Gadsden", "email": "dirk@esherido.com", "date": "2016-01-24T22:41:44Z"}, "committer": {"name": "Dirk Gadsden", "email": "dirk@esherido.com", "date": "2016-01-24T23:48:45Z"}, "message": "Add section about memory safety to `ffi::CString` documentation\n\nAlso a minor language tweak to the documentation of the\n`ffi::CString::from_raw` function.", "tree": {"sha": "683ed78159b2f6a4fdd34c810b1c60846559da86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/683ed78159b2f6a4fdd34c810b1c60846559da86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b526bf944c04ed0ac7d96b898332b4697a53a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b526bf944c04ed0ac7d96b898332b4697a53a6", "html_url": "https://github.com/rust-lang/rust/commit/71b526bf944c04ed0ac7d96b898332b4697a53a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b526bf944c04ed0ac7d96b898332b4697a53a6/comments", "author": {"login": "dirk", "id": 7081, "node_id": "MDQ6VXNlcjcwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/7081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirk", "html_url": "https://github.com/dirk", "followers_url": "https://api.github.com/users/dirk/followers", "following_url": "https://api.github.com/users/dirk/following{/other_user}", "gists_url": "https://api.github.com/users/dirk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirk/subscriptions", "organizations_url": "https://api.github.com/users/dirk/orgs", "repos_url": "https://api.github.com/users/dirk/repos", "events_url": "https://api.github.com/users/dirk/events{/privacy}", "received_events_url": "https://api.github.com/users/dirk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dirk", "id": 7081, "node_id": "MDQ6VXNlcjcwODE=", "avatar_url": "https://avatars.githubusercontent.com/u/7081?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirk", "html_url": "https://github.com/dirk", "followers_url": "https://api.github.com/users/dirk/followers", "following_url": "https://api.github.com/users/dirk/following{/other_user}", "gists_url": "https://api.github.com/users/dirk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirk/subscriptions", "organizations_url": "https://api.github.com/users/dirk/orgs", "repos_url": "https://api.github.com/users/dirk/repos", "events_url": "https://api.github.com/users/dirk/events{/privacy}", "received_events_url": "https://api.github.com/users/dirk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0486e12ad0661adcfdbd926dea17d7edfda419c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0486e12ad0661adcfdbd926dea17d7edfda419c1", "html_url": "https://github.com/rust-lang/rust/commit/0486e12ad0661adcfdbd926dea17d7edfda419c1"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "4c3b77402e43f317d21de08be5243089f02d3c67", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71b526bf944c04ed0ac7d96b898332b4697a53a6/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b526bf944c04ed0ac7d96b898332b4697a53a6/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=71b526bf944c04ed0ac7d96b898332b4697a53a6", "patch": "@@ -60,6 +60,18 @@ use vec::Vec;\n /// }\n /// # }\n /// ```\n+///\n+/// # Safety\n+///\n+/// `CString` is intended for working with traditional C-style strings\n+/// (a sequence of non-null bytes terminated by a single null byte); the\n+/// primary use case for these kinds of strings is interoperating with C-like\n+/// code. Often you will need to transfer ownership to/from that external\n+/// code. It is strongly recommended that you thoroughly read through the\n+/// documentation of `CString` before use, as improper ownership management\n+/// of `CString` instances can lead to invalid memory accesses, memory leaks,\n+/// and other memory errors.\n+\n #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CString {\n@@ -209,9 +221,9 @@ impl CString {\n \n     /// Retakes ownership of a CString that was transferred to C.\n     ///\n-    /// The only appropriate argument is a pointer obtained by calling\n-    /// `into_raw`. The length of the string will be recalculated\n-    /// using the pointer.\n+    /// This should only ever be called with a pointer that was earlier\n+    /// obtained by calling `into_raw` on a CString. Additionally, the length\n+    /// of the string will be recalculated from the pointer.\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte"}]}