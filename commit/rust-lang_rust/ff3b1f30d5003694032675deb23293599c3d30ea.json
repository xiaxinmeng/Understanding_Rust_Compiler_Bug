{"sha": "ff3b1f30d5003694032675deb23293599c3d30ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2IxZjMwZDUwMDM2OTQwMzI2NzVkZWIyMzI5MzU5OWMzZDMwZWE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-05-27T21:53:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-27T21:53:11Z"}, "message": "Merge pull request #2735 from Pazzaz/string-changes\n\nSome changes to rewrite_string", "tree": {"sha": "84739b28d70a4b834aa933c2877f87fc365b66be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84739b28d70a4b834aa933c2877f87fc365b66be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3b1f30d5003694032675deb23293599c3d30ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbCyjHCRBK7hj4Ov3rIwAAdHIIABX16vJteN20F11s9/0oy3XK\nZJXJlVnrQGtQlKNmIPluQ9LUhf+VsDTlvjTrVlBqSIxjawLc5/Yv2C6Y4V1CVhCz\niisbePV6h3bvWO25Q8FjOLFQhnIeo/rw5b4jDp8G08IjBielwe1xwg8f6oLURWN+\npN5/tv3RQgpueUjtSD7IMEmzZG0qNI01eDsS95oetcR+VT3r+IeQFj1WoAD34vht\n5F9LrDceM85PJTeZW6IoZ5AENvw46e0Cfp4tuNGorgCRUcT4nG64sf9Ogjygeat4\n1f5HriPgyCkYB+Tu7Z0VxS/Bzi1gGlOgXOxjvFkkZd2neSXntxpPiZbYjOu9K3c=\n=ltpt\n-----END PGP SIGNATURE-----\n", "payload": "tree 84739b28d70a4b834aa933c2877f87fc365b66be\nparent a92a1cb51283bc6861bb1bb33b2b34c36b5d16bd\nparent f711078126f95bd580c69c39af9fc16e3f83c859\nauthor Seiichi Uchida <seuchida@gmail.com> 1527457991 +0900\ncommitter GitHub <noreply@github.com> 1527457991 +0900\n\nMerge pull request #2735 from Pazzaz/string-changes\n\nSome changes to rewrite_string"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3b1f30d5003694032675deb23293599c3d30ea", "html_url": "https://github.com/rust-lang/rust/commit/ff3b1f30d5003694032675deb23293599c3d30ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3b1f30d5003694032675deb23293599c3d30ea/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92a1cb51283bc6861bb1bb33b2b34c36b5d16bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92a1cb51283bc6861bb1bb33b2b34c36b5d16bd", "html_url": "https://github.com/rust-lang/rust/commit/a92a1cb51283bc6861bb1bb33b2b34c36b5d16bd"}, {"sha": "f711078126f95bd580c69c39af9fc16e3f83c859", "url": "https://api.github.com/repos/rust-lang/rust/commits/f711078126f95bd580c69c39af9fc16e3f83c859", "html_url": "https://github.com/rust-lang/rust/commit/f711078126f95bd580c69c39af9fc16e3f83c859"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "a5453c0a8ed2947fdc949adf767d2b0184d0db1c", "filename": "src/string.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ff3b1f30d5003694032675deb23293599c3d30ea/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3b1f30d5003694032675deb23293599c3d30ea/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=ff3b1f30d5003694032675deb23293599c3d30ea", "patch": "@@ -56,7 +56,6 @@ pub fn rewrite_string<'a>(\n     let graphemes = UnicodeSegmentation::graphemes(&*stripped_str, false).collect::<Vec<&str>>();\n     let shape = fmt.shape;\n     let indent = shape.indent.to_string_with_newline(fmt.config);\n-    let punctuation = \":,;.\";\n \n     // `cur_start` is the position in `orig` of the start of the current line.\n     let mut cur_start = 0;\n@@ -90,27 +89,27 @@ pub fn rewrite_string<'a>(\n         }\n \n         // Push cur_end left until we reach whitespace (or the line is too small).\n-        while !graphemes[cur_end - 1].trim().is_empty() {\n+        while !is_whitespace(graphemes[cur_end - 1]) {\n             cur_end -= 1;\n             if cur_end < cur_start + MIN_STRING {\n                 // We couldn't find whitespace before the string got too small.\n                 // So start again at the max length and look for punctuation.\n                 cur_end = cur_start + max_chars;\n-                while !punctuation.contains(graphemes[cur_end - 1]) {\n+                while !is_punctuation(graphemes[cur_end - 1]) {\n                     cur_end -= 1;\n \n                     // If we can't break at whitespace or punctuation, grow the string instead.\n                     if cur_end < cur_start + MIN_STRING {\n                         cur_end = cur_start + max_chars;\n-                        while !(punctuation.contains(graphemes[cur_end - 1])\n-                            || graphemes[cur_end - 1].trim().is_empty())\n+                        while !(is_punctuation(graphemes[cur_end - 1])\n+                            || is_whitespace(graphemes[cur_end - 1]))\n                         {\n-                            if cur_end >= graphemes.len() {\n+                            cur_end += 1;\n+                            if cur_end == graphemes.len() {\n                                 let line = &graphemes[cur_start..].join(\"\");\n                                 result.push_str(line);\n                                 break 'outer;\n                             }\n-                            cur_end += 1;\n                         }\n                         break;\n                     }\n@@ -119,7 +118,7 @@ pub fn rewrite_string<'a>(\n             }\n         }\n         // Make sure there is no whitespace to the right of the break.\n-        while cur_end < stripped_str.len() && graphemes[cur_end].trim().is_empty() {\n+        while cur_end < stripped_str.len() && is_whitespace(graphemes[cur_end]) {\n             cur_end += 1;\n         }\n \n@@ -148,6 +147,17 @@ pub fn rewrite_string<'a>(\n     wrap_str(result, fmt.config.max_width(), fmt.shape)\n }\n \n+fn is_whitespace(grapheme: &str) -> bool {\n+    grapheme.chars().all(|c| c.is_whitespace())\n+}\n+\n+fn is_punctuation(grapheme: &str) -> bool {\n+    match grapheme.as_bytes()[0] {\n+        b':' | b',' | b';' | b'.' => true,\n+        _ => false,\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{rewrite_string, StringFormat};"}]}