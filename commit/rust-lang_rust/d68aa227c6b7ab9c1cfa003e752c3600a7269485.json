{"sha": "d68aa227c6b7ab9c1cfa003e752c3600a7269485", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OGFhMjI3YzZiN2FiOWMxY2ZhMDAzZTc1MmMzNjAwYTcyNjk0ODU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-27T00:00:00Z"}, "message": "liveness: Access live nodes directly through self.lnks[ln]", "tree": {"sha": "7362d485e134281aee8b182374b8458f1ad54e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7362d485e134281aee8b182374b8458f1ad54e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d68aa227c6b7ab9c1cfa003e752c3600a7269485", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d68aa227c6b7ab9c1cfa003e752c3600a7269485", "html_url": "https://github.com/rust-lang/rust/commit/d68aa227c6b7ab9c1cfa003e752c3600a7269485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d68aa227c6b7ab9c1cfa003e752c3600a7269485/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d38975cc638bcdeb7e9bcd10621615e8f9f3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d38975cc638bcdeb7e9bcd10621615e8f9f3c0", "html_url": "https://github.com/rust-lang/rust/commit/57d38975cc638bcdeb7e9bcd10621615e8f9f3c0"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "9eac2f79e412c1781ae14528bca8982fff34b0db", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d68aa227c6b7ab9c1cfa003e752c3600a7269485/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d68aa227c6b7ab9c1cfa003e752c3600a7269485/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=d68aa227c6b7ab9c1cfa003e752c3600a7269485", "patch": "@@ -302,10 +302,6 @@ impl IrMaps<'tcx> {\n     fn set_captures(&mut self, hir_id: HirId, cs: Vec<CaptureInfo>) {\n         self.capture_info_map.insert(hir_id, Rc::new(cs));\n     }\n-\n-    fn lnk(&self, ln: LiveNode) -> LiveNodeKind {\n-        self.lnks[ln]\n-    }\n }\n \n fn visit_fn<'tcx>(\n@@ -691,7 +687,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn live_on_entry(&self, ln: LiveNode, var: Variable) -> Option<LiveNodeKind> {\n         assert!(ln.is_valid());\n         let reader = self.rwu_table.get_reader(self.idx(ln, var));\n-        if reader.is_valid() { Some(self.ir.lnk(reader)) } else { None }\n+        if reader.is_valid() { Some(self.ir.lnks[reader]) } else { None }\n     }\n \n     // Is this variable live on entry to any of its successor nodes?\n@@ -708,7 +704,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn assigned_on_entry(&self, ln: LiveNode, var: Variable) -> Option<LiveNodeKind> {\n         assert!(ln.is_valid());\n         let writer = self.rwu_table.get_writer(self.idx(ln, var));\n-        if writer.is_valid() { Some(self.ir.lnk(writer)) } else { None }\n+        if writer.is_valid() { Some(self.ir.lnks[writer]) } else { None }\n     }\n \n     fn assigned_on_exit(&self, ln: LiveNode, var: Variable) -> Option<LiveNodeKind> {\n@@ -746,7 +742,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let mut wr = Vec::new();\n         {\n             let wr = &mut wr as &mut dyn Write;\n-            write!(wr, \"[{:?} of kind {:?} reads\", ln, self.ir.lnk(ln));\n+            write!(wr, \"[{:?} of kind {:?} reads\", ln, self.ir.lnks[ln]);\n             self.write_vars(wr, ln, |idx| self.rwu_table.get_reader(idx).is_valid());\n             write!(wr, \"  writes\");\n             self.write_vars(wr, ln, |idx| self.rwu_table.get_writer(idx).is_valid());"}]}