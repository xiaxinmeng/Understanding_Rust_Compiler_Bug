{"sha": "3ba588db496c99eb6a9280400271af4cb1958a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYTU4OGRiNDk2Yzk5ZWI2YTkyODA0MDAyNzFhZjRjYjE5NThhOTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-23T22:48:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T08:11:48Z"}, "message": "make fs.rs at least build under Windows", "tree": {"sha": "1d9fdf7e0cecb8c1ee37c7cc1fc41a4b5e987702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d9fdf7e0cecb8c1ee37c7cc1fc41a4b5e987702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba588db496c99eb6a9280400271af4cb1958a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba588db496c99eb6a9280400271af4cb1958a91", "html_url": "https://github.com/rust-lang/rust/commit/3ba588db496c99eb6a9280400271af4cb1958a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba588db496c99eb6a9280400271af4cb1958a91/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e29c8646e3836cec79bd17a73ac13a2b90e6e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4", "html_url": "https://github.com/rust-lang/rust/commit/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "b6d460f7a981ca0b7b58e261d04ab7e9efb2de0f", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ba588db496c99eb6a9280400271af4cb1958a91/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba588db496c99eb6a9280400271af4cb1958a91/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=3ba588db496c99eb6a9280400271af4cb1958a91", "patch": "@@ -142,7 +142,10 @@ fn test_symlink() {\n     let symlink_path = prepare(\"miri_test_fs_symlink.txt\");\n \n     // Creating a symbolic link should succeed.\n+    #[cfg(unix)]\n     std::os::unix::fs::symlink(&path, &symlink_path).unwrap();\n+    #[cfg(windows)]\n+    std::os::windows::fs::symlink_file(&path, &symlink_path).unwrap();\n     // Test that the symbolic link has the same contents as the file.\n     let mut symlink_file = File::open(&symlink_path).unwrap();\n     let mut contents = Vec::new();"}]}