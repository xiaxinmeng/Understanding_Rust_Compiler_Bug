{"sha": "689e8470ffa7aeca17cfee428704a4d6c4148c11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWU4NDcwZmZhN2FlY2ExN2NmZWU0Mjg3MDRhNGQ2YzQxNDhjMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T09:03:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T09:03:29Z"}, "message": "Auto merge of #83458 - saethlin:improve-vec-benches, r=dtolnay\n\nClean up Vec's benchmarks\n\nThe Vec benchmarks need a lot of love. I sort of noticed this in https://github.com/rust-lang/rust/pull/83357 but the overall situation is much less awesome than I thought at the time. The first commit just removes a lot of asserts and does a touch of other cleanup.\n\nA number of these benchmarks are poorly-named. For example, `bench_map_fast` is not in fact fast, `bench_rev_1` and `bench_rev_2` are vague, `bench_in_place_zip_iter_mut` doesn't call `zip`, `bench_in_place*` don't do anything in-place... Should I fix these, or is there tooling that depend on the names not changing?\n\nI've also noticed that `bench_rev_1` and `bench_rev_2` are remarkably fragile. It looks like poking other code in `Vec` can cause the codegen of this benchmark to switch to a version that has almost exactly half its current throughput and I have absolutely no idea why.\n\nHere's the fast version:\n```asm\n  0.69 \u2502110:   movdqu -0x20(%rbx,%rdx,4),%xmm0\n  1.76 \u2502       movdqu -0x10(%rbx,%rdx,4),%xmm1\n  0.71 \u2502       pshufd $0x1b,%xmm1,%xmm1\n  0.60 \u2502       pshufd $0x1b,%xmm0,%xmm0\n  3.68 \u2502       movdqu %xmm1,-0x30(%rcx)\n 14.36 \u2502       movdqu %xmm0,-0x20(%rcx)\n 13.88 \u2502       movdqu -0x40(%rbx,%rdx,4),%xmm0\n  6.64 \u2502       movdqu -0x30(%rbx,%rdx,4),%xmm1\n  0.76 \u2502       pshufd $0x1b,%xmm1,%xmm1\n  0.77 \u2502       pshufd $0x1b,%xmm0,%xmm0\n  1.87 \u2502       movdqu %xmm1,-0x10(%rcx)\n 13.01 \u2502       movdqu %xmm0,(%rcx)\n 38.81 \u2502       add    $0x40,%rcx\n  0.92 \u2502       add    $0xfffffffffffffff0,%rdx\n  1.22 \u2502     \u2191 jne    110\n```\nAnd the slow one:\n```asm\n  0.42 \u25029a880:   movdqa     %xmm2,%xmm1\n  4.03 \u25029a884:   movq       -0x8(%rbx,%rsi,4),%xmm4\n  8.49 \u25029a88a:   pshufd     $0xe1,%xmm4,%xmm4\n  2.58 \u25029a88f:   movq       -0x10(%rbx,%rsi,4),%xmm5\n  7.02 \u25029a895:   pshufd     $0xe1,%xmm5,%xmm5\n  4.79 \u25029a89a:   punpcklqdq %xmm5,%xmm4\n  5.77 \u25029a89e:   movdqu     %xmm4,-0x18(%rdx)\n 15.74 \u25029a8a3:   movq       -0x18(%rbx,%rsi,4),%xmm4\n  3.91 \u25029a8a9:   pshufd     $0xe1,%xmm4,%xmm4\n  5.04 \u25029a8ae:   movq       -0x20(%rbx,%rsi,4),%xmm5\n  5.29 \u25029a8b4:   pshufd     $0xe1,%xmm5,%xmm5\n  4.60 \u25029a8b9:   punpcklqdq %xmm5,%xmm4\n  9.81 \u25029a8bd:   movdqu     %xmm4,-0x8(%rdx)\n 11.05 \u25029a8c2:   paddq      %xmm3,%xmm0\n  0.86 \u25029a8c6:   paddq      %xmm3,%xmm2\n  5.89 \u25029a8ca:   add        $0x20,%rdx\n  0.12 \u25029a8ce:   add        $0xfffffffffffffff8,%rsi\n  1.16 \u25029a8d2:   add        $0x2,%rdi\n  2.96 \u25029a8d6: \u2192 jne        9a880 <<alloc::vec::Vec<T,A> as core::iter::traits::collect::Extend<&T>>::extend+0xd0>\n```", "tree": {"sha": "b44441d2619e490f651ee2bd5438ad81d48d6e34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b44441d2619e490f651ee2bd5438ad81d48d6e34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689e8470ffa7aeca17cfee428704a4d6c4148c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689e8470ffa7aeca17cfee428704a4d6c4148c11", "html_url": "https://github.com/rust-lang/rust/commit/689e8470ffa7aeca17cfee428704a4d6c4148c11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689e8470ffa7aeca17cfee428704a4d6c4148c11/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e229abadfe47df74625309fba44c0f3b8a0649", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e229abadfe47df74625309fba44c0f3b8a0649", "html_url": "https://github.com/rust-lang/rust/commit/a0e229abadfe47df74625309fba44c0f3b8a0649"}, {"sha": "8c8841811414ba3348f8c604b0ce01200cc8be91", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8841811414ba3348f8c604b0ce01200cc8be91", "html_url": "https://github.com/rust-lang/rust/commit/8c8841811414ba3348f8c604b0ce01200cc8be91"}], "stats": {"total": 93, "additions": 25, "deletions": 68}, "files": [{"sha": "48709e89823d8b850b3ae55967d55fb0ed82227f", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 25, "deletions": 68, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/689e8470ffa7aeca17cfee428704a4d6c4148c11/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689e8470ffa7aeca17cfee428704a4d6c4148c11/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=689e8470ffa7aeca17cfee428704a4d6c4148c11", "patch": "@@ -4,23 +4,13 @@ use test::{black_box, Bencher};\n \n #[bench]\n fn bench_new(b: &mut Bencher) {\n-    b.iter(|| {\n-        let v: Vec<u32> = Vec::new();\n-        assert_eq!(v.len(), 0);\n-        assert_eq!(v.capacity(), 0);\n-        v\n-    })\n+    b.iter(|| Vec::<u32>::new())\n }\n \n fn do_bench_with_capacity(b: &mut Bencher, src_len: usize) {\n     b.bytes = src_len as u64;\n \n-    b.iter(|| {\n-        let v: Vec<u32> = Vec::with_capacity(src_len);\n-        assert_eq!(v.len(), 0);\n-        assert_eq!(v.capacity(), src_len);\n-        v\n-    })\n+    b.iter(|| Vec::<u32>::with_capacity(src_len))\n }\n \n #[bench]\n@@ -46,12 +36,7 @@ fn bench_with_capacity_1000(b: &mut Bencher) {\n fn do_bench_from_fn(b: &mut Bencher, src_len: usize) {\n     b.bytes = src_len as u64;\n \n-    b.iter(|| {\n-        let dst = (0..src_len).collect::<Vec<_>>();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-        dst\n-    })\n+    b.iter(|| (0..src_len).collect::<Vec<_>>())\n }\n \n #[bench]\n@@ -77,12 +62,7 @@ fn bench_from_fn_1000(b: &mut Bencher) {\n fn do_bench_from_elem(b: &mut Bencher, src_len: usize) {\n     b.bytes = src_len as u64;\n \n-    b.iter(|| {\n-        let dst: Vec<usize> = repeat(5).take(src_len).collect();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().all(|x| *x == 5));\n-        dst\n-    })\n+    b.iter(|| repeat(5).take(src_len).collect::<Vec<usize>>())\n }\n \n #[bench]\n@@ -110,12 +90,7 @@ fn do_bench_from_slice(b: &mut Bencher, src_len: usize) {\n \n     b.bytes = src_len as u64;\n \n-    b.iter(|| {\n-        let dst = src.clone()[..].to_vec();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-        dst\n-    });\n+    b.iter(|| src.as_slice().to_vec());\n }\n \n #[bench]\n@@ -144,9 +119,7 @@ fn do_bench_from_iter(b: &mut Bencher, src_len: usize) {\n     b.bytes = src_len as u64;\n \n     b.iter(|| {\n-        let dst: Vec<_> = FromIterator::from_iter(src.clone());\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+        let dst: Vec<_> = FromIterator::from_iter(src.iter().cloned());\n         dst\n     });\n }\n@@ -180,8 +153,6 @@ fn do_bench_extend(b: &mut Bencher, dst_len: usize, src_len: usize) {\n     b.iter(|| {\n         let mut dst = dst.clone();\n         dst.extend(src.clone());\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n         dst\n     });\n }\n@@ -230,8 +201,6 @@ fn do_bench_extend_from_slice(b: &mut Bencher, dst_len: usize, src_len: usize) {\n     b.iter(|| {\n         let mut dst = dst.clone();\n         dst.extend_from_slice(&src);\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n         dst\n     });\n }\n@@ -290,12 +259,7 @@ fn do_bench_clone(b: &mut Bencher, src_len: usize) {\n \n     b.bytes = src_len as u64;\n \n-    b.iter(|| {\n-        let dst = src.clone();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-        dst\n-    });\n+    b.iter(|| src.clone());\n }\n \n #[bench]\n@@ -329,8 +293,7 @@ fn do_bench_clone_from(b: &mut Bencher, times: usize, dst_len: usize, src_len: u\n \n         for _ in 0..times {\n             dst.clone_from(&src);\n-            assert_eq!(dst.len(), src_len);\n-            assert!(dst.iter().enumerate().all(|(i, x)| dst_len + i == *x));\n+            dst = black_box(dst);\n         }\n         dst\n     });\n@@ -463,11 +426,10 @@ macro_rules! bench_in_place {\n             fn $fname(b: &mut Bencher) {\n                 b.iter(|| {\n                     let src: Vec<$type> = black_box(vec![$init; $count]);\n-                    let mut sink = src.into_iter()\n+                    src.into_iter()\n                         .enumerate()\n                         .map(|(idx, e)| idx as $type ^ e)\n-                        .collect::<Vec<$type>>();\n-                    black_box(sink.as_mut_ptr())\n+                        .collect::<Vec<$type>>()\n                 });\n             }\n         )+\n@@ -527,7 +489,6 @@ fn bench_in_place_zip_recycle(b: &mut Bencher) {\n             .enumerate()\n             .map(|(i, (d, s))| d.wrapping_add(i as u8) ^ s)\n             .collect::<Vec<_>>();\n-        assert_eq!(mangled.len(), 1000);\n         data = black_box(mangled);\n     });\n }\n@@ -614,23 +575,6 @@ fn bench_nest_chain_chain_collect(b: &mut Bencher) {\n     });\n }\n \n-pub fn example_plain_slow(l: &[u32]) -> Vec<u32> {\n-    let mut result = Vec::with_capacity(l.len());\n-    result.extend(l.iter().rev());\n-    result\n-}\n-\n-pub fn map_fast(l: &[(u32, u32)]) -> Vec<u32> {\n-    let mut result = Vec::with_capacity(l.len());\n-    for i in 0..l.len() {\n-        unsafe {\n-            *result.get_unchecked_mut(i) = l[i].0;\n-            result.set_len(i);\n-        }\n-    }\n-    result\n-}\n-\n #[bench]\n fn bench_range_map_collect(b: &mut Bencher) {\n     b.iter(|| (0..LEN).map(|_| u32::default()).collect::<Vec<_>>());\n@@ -669,7 +613,11 @@ fn bench_rev_1(b: &mut Bencher) {\n #[bench]\n fn bench_rev_2(b: &mut Bencher) {\n     let data = black_box([0; LEN]);\n-    b.iter(|| example_plain_slow(&data));\n+    b.iter(|| {\n+        let mut v = Vec::<u32>::with_capacity(data.len());\n+        v.extend(data.iter().rev());\n+        v\n+    });\n }\n \n #[bench]\n@@ -685,7 +633,16 @@ fn bench_map_regular(b: &mut Bencher) {\n #[bench]\n fn bench_map_fast(b: &mut Bencher) {\n     let data = black_box([(0, 0); LEN]);\n-    b.iter(|| map_fast(&data));\n+    b.iter(|| {\n+        let mut result = Vec::with_capacity(data.len());\n+        for i in 0..data.len() {\n+            unsafe {\n+                *result.get_unchecked_mut(i) = data[i].0;\n+                result.set_len(i);\n+            }\n+        }\n+        result\n+    });\n }\n \n fn random_sorted_fill(mut seed: u32, buf: &mut [u32]) {"}]}