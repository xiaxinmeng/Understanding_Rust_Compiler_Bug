{"sha": "7f6177e64627110e5b9776bd5304d65806081390", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNjE3N2U2NDYyNzExMGU1Yjk3NzZiZDUzMDRkNjU4MDYwODEzOTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T10:52:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-22T17:27:07Z"}, "message": "Fix fallout from changes. In cases where stage0 compiler is needed, we\ncannot use an `as` expression to coerce, so I used a one-off function\ninstead (this is a no-op in stage0, but in stage1+ it triggers\ncoercion from the fn pointer to the fn item type).", "tree": {"sha": "7f2836a870dc5221135964ff338b9f591b249ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f2836a870dc5221135964ff338b9f591b249ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6177e64627110e5b9776bd5304d65806081390", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6177e64627110e5b9776bd5304d65806081390", "html_url": "https://github.com/rust-lang/rust/commit/7f6177e64627110e5b9776bd5304d65806081390", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6177e64627110e5b9776bd5304d65806081390/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "211782fef562cac25922080229fd8443fb352792", "url": "https://api.github.com/repos/rust-lang/rust/commits/211782fef562cac25922080229fd8443fb352792", "html_url": "https://github.com/rust-lang/rust/commit/211782fef562cac25922080229fd8443fb352792"}], "stats": {"total": 180, "additions": 120, "deletions": 60}, "files": [{"sha": "1cd58aee0612f5a1370f0b43bdafc7c814c7b7da", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -30,6 +30,7 @@ use iter::range;\n use kinds::Sized;\n use mem;\n use num::Int;\n+use ops::FnMut;\n use option::Option;\n use option::Option::{None, Some};\n use ops::{Fn, FnMut};"}, {"sha": "009079bd21453fca3e420d862701a93ac1ea1080", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -65,17 +65,21 @@ const HOEDOWN_EXTENSIONS: libc::c_uint =\n \n type hoedown_document = libc::c_void;  // this is opaque to us\n \n+type blockcodefn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                                 *const hoedown_buffer, *mut libc::c_void);\n+\n+type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n+                              libc::c_int, *mut libc::c_void);\n+\n #[repr(C)]\n struct hoedown_renderer {\n     opaque: *mut hoedown_html_renderer_state,\n-    blockcode: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                    *const hoedown_buffer, *mut libc::c_void)>,\n+    blockcode: Option<blockcodefn>,\n     blockquote: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                                      *mut libc::c_void)>,\n     blockhtml: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                                     *mut libc::c_void)>,\n-    header: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                 libc::c_int, *mut libc::c_void)>,\n+    header: Option<headerfn>,\n     other: [libc::size_t, ..28],\n }\n \n@@ -281,8 +285,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n             toc_builder: if print_toc {Some(TocBuilder::new())} else {None}\n         };\n         (*(*renderer).opaque).opaque = &mut opaque as *mut _ as *mut libc::c_void;\n-        (*renderer).blockcode = Some(block);\n-        (*renderer).header = Some(header);\n+        (*renderer).blockcode = Some(block as blockcodefn);\n+        (*renderer).header = Some(header as headerfn);\n \n         let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);\n         hoedown_document_render(document, ob, s.as_ptr(),\n@@ -354,8 +358,8 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(0, 0);\n-        (*renderer).blockcode = Some(block);\n-        (*renderer).header = Some(header);\n+        (*renderer).blockcode = Some(block as blockcodefn);\n+        (*renderer).header = Some(header as headerfn);\n         (*(*renderer).opaque).opaque = tests as *mut _ as *mut libc::c_void;\n \n         let document = hoedown_document_new(renderer, HOEDOWN_EXTENSIONS, 16);"}, {"sha": "9e4a66e0e5e06122a1682f90d853121b081a2fca", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -829,8 +829,12 @@ impl Path {\n         let s = if self.has_nonsemantic_trailing_slash() {\n                     self.repr.slice_to(self.repr.len()-1)\n                 } else { self.repr.as_slice() };\n-        let idx = s.rfind(if !prefix_is_verbatim(self.prefix) { is_sep }\n-                          else { is_sep_verbatim });\n+        let sep_test: fn(char) -> bool = if !prefix_is_verbatim(self.prefix) {\n+            is_sep\n+        } else {\n+            is_sep_verbatim\n+        };\n+        let idx = s.rfind(sep_test);\n         let prefixlen = self.prefix_len();\n         self.sepidx = idx.and_then(|x| if x < prefixlen { None } else { Some(x) });\n     }\n@@ -1048,7 +1052,11 @@ fn parse_prefix<'a>(mut path: &'a str) -> Option<PathPrefix> {\n \n // None result means the string didn't need normalizing\n fn normalize_helper<'a>(s: &'a str, prefix: Option<PathPrefix>) -> (bool, Option<Vec<&'a str>>) {\n-    let f = if !prefix_is_verbatim(prefix) { is_sep } else { is_sep_verbatim };\n+    let f: fn(char) -> bool = if !prefix_is_verbatim(prefix) {\n+        is_sep\n+    } else {\n+        is_sep_verbatim\n+    };\n     let is_abs = s.len() > prefix_len(prefix) && f(s.char_at(prefix_len(prefix)));\n     let s_ = s.slice_from(prefix_len(prefix));\n     let s_ = if is_abs { s_.slice_from(1) } else { s_ };"}, {"sha": "04718dcc6ae3bb8435437dc817256cb0317f6897", "filename": "src/libstd/thread_local/mod.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibstd%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibstd%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fmod.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -189,11 +189,12 @@ macro_rules! __thread_local_inner {\n             }\n         };\n \n-        #[cfg(not(any(target_os = \"macos\", target_os = \"linux\")))]\n+        #[cfg(all(stage0, not(any(target_os = \"macos\", target_os = \"linux\"))))]\n         const INIT: ::std::thread_local::KeyInner<$t> = {\n             unsafe extern fn __destroy(ptr: *mut u8) {\n                 ::std::thread_local::destroy_value::<$t>(ptr);\n             }\n+\n             ::std::thread_local::KeyInner {\n                 inner: ::std::cell::UnsafeCell { value: $init },\n                 os: ::std::thread_local::OsStaticKey {\n@@ -203,6 +204,21 @@ macro_rules! __thread_local_inner {\n             }\n         };\n \n+        #[cfg(all(not(stage0), not(any(target_os = \"macos\", target_os = \"linux\"))))]\n+        const INIT: ::std::thread_local::KeyInner<$t> = {\n+            unsafe extern fn __destroy(ptr: *mut u8) {\n+                ::std::thread_local::destroy_value::<$t>(ptr);\n+            }\n+\n+            ::std::thread_local::KeyInner {\n+                inner: ::std::cell::UnsafeCell { value: $init },\n+                os: ::std::thread_local::OsStaticKey {\n+                    inner: ::std::thread_local::OS_INIT_INNER,\n+                    dtor: ::std::option::Option::Some(__destroy as unsafe extern fn(*mut u8)),\n+                },\n+            }\n+        };\n+\n         INIT\n     });\n }\n@@ -323,6 +339,12 @@ mod imp {\n         // *should* be the case that this loop always terminates because we\n         // provide the guarantee that a TLS key cannot be set after it is\n         // flagged for destruction.\n+        #[cfg(not(stage0))]\n+        static DTORS: os::StaticKey = os::StaticKey {\n+            inner: os::INIT_INNER,\n+            dtor: Some(run_dtors as unsafe extern \"C\" fn(*mut u8)),\n+        };\n+        #[cfg(stage0)]\n         static DTORS: os::StaticKey = os::StaticKey {\n             inner: os::INIT_INNER,\n             dtor: Some(run_dtors),"}, {"sha": "f76c350902d7df4e37ef336e53d67cbd1605a4f4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -50,14 +50,16 @@ pub trait ItemDecorator {\n               push: |P<ast::Item>|);\n }\n \n-impl ItemDecorator for fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, |P<ast::Item>|) {\n+impl<F> ItemDecorator for F\n+    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &ast::Item, |P<ast::Item>|)\n+{\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               sp: Span,\n               meta_item: &ast::MetaItem,\n               item: &ast::Item,\n               push: |P<ast::Item>|) {\n-        self.clone()(ecx, sp, meta_item, item, push)\n+        (*self)(ecx, sp, meta_item, item, push)\n     }\n }\n \n@@ -70,14 +72,16 @@ pub trait ItemModifier {\n               -> P<ast::Item>;\n }\n \n-impl ItemModifier for fn(&mut ExtCtxt, Span, &ast::MetaItem, P<ast::Item>) -> P<ast::Item> {\n+impl<F> ItemModifier for F\n+    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, P<ast::Item>) -> P<ast::Item>\n+{\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               span: Span,\n               meta_item: &ast::MetaItem,\n               item: P<ast::Item>)\n               -> P<ast::Item> {\n-        self.clone()(ecx, span, meta_item, item)\n+        (*self)(ecx, span, meta_item, item)\n     }\n }\n \n@@ -93,13 +97,15 @@ pub trait TTMacroExpander {\n pub type MacroExpanderFn =\n     for<'cx> fn(&'cx mut ExtCtxt, Span, &[ast::TokenTree]) -> Box<MacResult+'cx>;\n \n-impl TTMacroExpander for MacroExpanderFn {\n+impl<F> TTMacroExpander for F\n+    where F : for<'cx> Fn(&'cx mut ExtCtxt, Span, &[ast::TokenTree]) -> Box<MacResult+'cx>\n+{\n     fn expand<'cx>(&self,\n                    ecx: &'cx mut ExtCtxt,\n                    span: Span,\n                    token_tree: &[ast::TokenTree])\n                    -> Box<MacResult+'cx> {\n-        self.clone()(ecx, span, token_tree)\n+        (*self)(ecx, span, token_tree)\n     }\n }\n \n@@ -115,14 +121,18 @@ pub trait IdentMacroExpander {\n pub type IdentMacroExpanderFn =\n     for<'cx> fn(&'cx mut ExtCtxt, Span, ast::Ident, Vec<ast::TokenTree>) -> Box<MacResult+'cx>;\n \n-impl IdentMacroExpander for IdentMacroExpanderFn {\n+impl<F> IdentMacroExpander for F\n+    where F : for<'cx> Fn(&'cx mut ExtCtxt, Span, ast::Ident,\n+                          Vec<ast::TokenTree>) -> Box<MacResult+'cx>\n+{\n     fn expand<'cx>(&self,\n                    cx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    ident: ast::Ident,\n                    token_tree: Vec<ast::TokenTree> )\n-                   -> Box<MacResult+'cx> {\n-        self.clone()(cx, sp, ident, token_tree)\n+                   -> Box<MacResult+'cx>\n+    {\n+        (*self)(cx, sp, ident, token_tree)\n     }\n }\n "}, {"sha": "1b4e5891f941de493f284cf808da66326a7b88ea", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -20,7 +20,7 @@ impl X {\n }\n \n fn main() {\n-    let mut x = X(Either::Right(main));\n+    let mut x = X(Either::Right(main as fn()));\n     (&mut x).with(\n         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n             match opt {"}, {"sha": "1db813292b01241b79535116219a01fa6f2b93c5", "filename": "src/test/compile-fail/cast-to-bare-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -13,7 +13,7 @@ fn foo(_x: int) { }\n fn main() {\n     let v: u64 = 5;\n     let x = foo as extern \"C\" fn() -> int;\n-    //~^ ERROR non-scalar cast\n+    //~^ ERROR mismatched types\n     let y = v as extern \"Rust\" fn(int) -> (int, int);\n     //~^ ERROR non-scalar cast\n     y(x());"}, {"sha": "52f4c4749e224f90e1455befddc899c5cf7557a6", "filename": "src/test/compile-fail/coerce-bare-fn-to-closure-and-proc.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-bare-fn-to-closure-and-proc.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -8,12 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Test that coercions from fn item types are ok, but not fn pointer\n+// types to closures/procs are not allowed.\n+\n fn foo() {}\n \n-fn main() {\n+fn fn_item_type() {\n     let f = foo;\n \n     let f_closure: || = f;\n-    //~^ ERROR: cannot coerce non-statically resolved bare fn to closure\n-    //~^^ HELP: consider embedding the function in a closure\n }\n+\n+fn fn_pointer_type() {\n+    let f = foo as fn();\n+    let f_closure: || = f;\n+    //~^ ERROR: mismatched types\n+}\n+\n+fn main() { }"}, {"sha": "cd4ec495556c562303249997f20c36d31f7b3694", "filename": "src/test/compile-fail/issue-10764.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fissue-10764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fissue-10764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10764.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -12,4 +12,4 @@ fn f(_: extern \"Rust\" fn()) {}\n extern fn bar() {}\n \n fn main() { f(bar) }\n-//~^ ERROR: expected `fn()`, found `extern \"C\" fn()`\n+//~^ ERROR mismatched types"}, {"sha": "6e8f7ffb68da4285549855b1da38623942474616", "filename": "src/test/compile-fail/issue-9575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -10,6 +10,6 @@\n \n #[start]\n fn start(argc: int, argv: *const *const u8, crate_map: *const u8) -> int {\n-    //~^ ERROR start function expects type: `fn(int, *const *const u8) -> int`\n+    //~^ ERROR incorrect number of function parameters\n     0\n }"}, {"sha": "4a42728da6f580f0aab75f13891ba84b9eb8b670", "filename": "src/test/compile-fail/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -15,7 +15,7 @@ fn a<'a, 'b:'a>(x: &mut &'a int, y: &mut &'b int) {\n \n fn b<'a, 'b>(x: &mut &'a int, y: &mut &'b int) {\n     // Illegal now because there is no `'b:'a` declaration.\n-    *x = *y; //~ ERROR mismatched types\n+    *x = *y; //~ ERROR cannot infer\n }\n \n fn c<'a,'b>(x: &mut &'a int, y: &mut &'b int) {"}, {"sha": "f4654367970d11d052b16a23f73f54b8933e3113", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -12,10 +12,10 @@ fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x int) {\n     let y = 3;\n-    let mut ay = &y; //~ ERROR cannot infer\n+    let mut ay = &y;\n \n     ignore::< for<'z>|&'z int|>(|z| {\n-        ay = x;\n+        ay = x; //~ ERROR cannot infer\n         ay = &y;\n         ay = z;\n     });"}, {"sha": "bce397c47932f453baa83c8deffb871c1a593b04", "filename": "src/test/compile-fail/static-reference-to-fn-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-1.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -24,7 +24,7 @@ fn foo() -> Option<int> {\n \n fn create() -> A<'static> {\n     A {\n-        func: &foo, //~ ERROR borrowed value does not live long enough\n+        func: &foo, //~ ERROR mismatched types\n     }\n }\n "}, {"sha": "d7255c3ba0694ff96f10149795d439cb22bba3c7", "filename": "src/test/compile-fail/static-reference-to-fn-2.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -9,29 +9,31 @@\n // except according to those terms.\n \n struct StateMachineIter<'a> {\n-    statefn: &'a fn(&mut StateMachineIter<'a>) -> Option<&'static str>\n+    statefn: &'a StateMachineFunc<'a>\n }\n \n+type StateMachineFunc<'a> = fn(&mut StateMachineIter<'a>) -> Option<&'static str>;\n+\n impl<'a> Iterator<&'static str> for StateMachineIter<'a> {\n     fn next(&mut self) -> Option<&'static str> {\n         return  (*self.statefn)(self);\n     }\n }\n \n fn state1(self_: &mut StateMachineIter) -> Option<&'static str> {\n-    self_.statefn = &state2;\n+    self_.statefn = &(state2 as StateMachineFunc);\n     //~^ ERROR borrowed value does not live long enough\n     return Some(\"state1\");\n }\n \n fn state2(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n-    self_.statefn = &state3;\n+    self_.statefn = &(state3 as StateMachineFunc);\n     //~^ ERROR borrowed value does not live long enough\n     return Some(\"state2\");\n }\n \n fn state3(self_: &mut StateMachineIter) -> Option<(&'static str)> {\n-    self_.statefn = &finished;\n+    self_.statefn = &(finished as StateMachineFunc);\n     //~^ ERROR borrowed value does not live long enough\n     return Some(\"state3\");\n }\n@@ -42,7 +44,7 @@ fn finished(_: &mut StateMachineIter) -> Option<(&'static str)> {\n \n fn state_iter() -> StateMachineIter<'static> {\n     StateMachineIter {\n-        statefn: &state1 //~ ERROR borrowed value does not live long enough\n+        statefn: &(state1 as StateMachineFunc) //~ ERROR borrowed value does not live long enough\n     }\n }\n "}, {"sha": "e4389cd69dd62f88ed6b53ca928abe3999b912a6", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -50,20 +50,20 @@\n \n \n              ((::std::fmt::format as\n-                  fn(&core::fmt::Arguments<'_>) -> collections::string::String)((&((::std::fmt::Arguments::new\n-                                                                                       as\n-                                                                                       fn(&[&str], &[core::fmt::Argument<'_>]) -> core::fmt::Arguments<'_>)((__STATIC_FMTSTR\n-                                                                                                                                                                as\n-                                                                                                                                                                &'static [&'static str]),\n-                                                                                                                                                            (&([]\n-                                                                                                                                                                  as\n-                                                                                                                                                                  [core::fmt::Argument<'_>; 0])\n-                                                                                                                                                                as\n-                                                                                                                                                                &[core::fmt::Argument<'_>; 0]))\n-                                                                                      as\n-                                                                                      core::fmt::Arguments<'_>)\n-                                                                                    as\n-                                                                                    &core::fmt::Arguments<'_>))\n+                  fn(&core::fmt::Arguments<'_>) -> collections::string::String {std::fmt::format})((&((::std::fmt::Arguments::new\n+                                                                                                          as\n+                                                                                                          fn(&[&str], &[core::fmt::Argument<'_>]) -> core::fmt::Arguments<'_> {core::fmt::Arguments<'a>::new})((__STATIC_FMTSTR\n+                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                   &'static [&'static str]),\n+                                                                                                                                                                                                               (&([]\n+                                                                                                                                                                                                                     as\n+                                                                                                                                                                                                                     [core::fmt::Argument<'_>; 0])\n+                                                                                                                                                                                                                   as\n+                                                                                                                                                                                                                   &[core::fmt::Argument<'_>; 0]))\n+                                                                                                         as\n+                                                                                                         core::fmt::Arguments<'_>)\n+                                                                                                       as\n+                                                                                                       &core::fmt::Arguments<'_>))\n                  as collections::string::String)\n          }\n      } as collections::string::String);\n@@ -78,7 +78,8 @@\n pub fn use_id() {\n     let _ =\n         ((id::<[int; (3u as uint)]> as\n-             fn([int; 3]) -> [int; 3])(([(1 as int), (2 as int), (3 as int)]\n-                                           as [int; 3])) as [int; 3]);\n+             fn([int; 3]) -> [int; 3] {id})(([(1 as int), (2 as int),\n+                                              (3 as int)] as [int; 3])) as\n+            [int; 3]);\n }\n fn main() { }"}, {"sha": "069ca6ecf49dd4c3f1ef83212d7e7fef3beebfa0", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -18,6 +18,6 @@ struct S {\n }\n \n pub fn main() {\n-    assert!(foopy == f);\n+    assert!(foopy as extern \"C\" fn() == f);\n     assert!(f == s.f);\n }"}, {"sha": "3febff18704deea2faf81c12c4d46e9966d6d09c", "filename": "src/test/run-pass/extern-compare-with-return-type.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -18,15 +18,17 @@ extern fn uintret() -> uint { 22 }\n extern fn uintvoidret(_x: uint) {}\n \n extern fn uintuintuintuintret(x: uint, y: uint, z: uint) -> uint { x+y+z }\n+type uintuintuintuintret = extern fn(uint,uint,uint) -> uint;\n \n pub fn main() {\n-    assert!(voidret1 == voidret1);\n-    assert!(voidret1 != voidret2);\n+    assert!(voidret1 as extern fn() == voidret1 as extern fn());\n+    assert!(voidret1 as extern fn() != voidret2 as extern fn());\n \n-    assert!(uintret == uintret);\n+    assert!(uintret as extern fn() -> uint == uintret as extern fn() -> uint);\n \n-    assert!(uintvoidret == uintvoidret);\n+    assert!(uintvoidret as extern fn(uint) == uintvoidret as extern fn(uint));\n \n-    assert!(uintuintuintuintret == uintuintuintuintret);\n+    assert!(uintuintuintuintret as uintuintuintuintret ==\n+            uintuintuintuintret as uintuintuintuintret);\n }\n "}, {"sha": "d28950241874d2db112f1d5be09a2adc696933c5", "filename": "src/test/run-pass/issue-10767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fissue-10767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10767.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -12,5 +12,5 @@\n pub fn main() {\n     fn f() {\n     };\n-    let _: Box<fn()> = box f;\n+    let _: Box<fn()> = box() (f as fn());\n }"}, {"sha": "0f4978d78dd86700d0961236461cb6a7ca632250", "filename": "src/test/run-pass/issue-15444.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fissue-15444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6177e64627110e5b9776bd5304d65806081390/src%2Ftest%2Frun-pass%2Fissue-15444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15444.rs?ref=7f6177e64627110e5b9776bd5304d65806081390", "patch": "@@ -25,5 +25,6 @@ fn thing(a: int, b: int) -> int {\n }\n \n fn main() {\n+    let thing: fn(int, int) -> int = thing; // coerce to fn type\n     bar(&thing);\n }"}]}