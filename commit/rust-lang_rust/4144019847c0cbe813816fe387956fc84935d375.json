{"sha": "4144019847c0cbe813816fe387956fc84935d375", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNDQwMTk4NDdjMGNiZTgxMzgxNmZlMzg3OTU2ZmM4NDkzNWQzNzU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-07T06:21:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-07T06:21:03Z"}, "message": "Rollup merge of #86016 - luqmana:infer-linker-flavor, r=petrochenkov\n\nUnify duplicate linker_and_flavor methods in rustc_codegen_{cranelift,ssa}.\n\nThe two methods were exactly the same so this removes the cranelift copy. This will help make sure both they don't get out of sync.", "tree": {"sha": "c758d50de80b492a4fbfd8355721455c232059e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c758d50de80b492a4fbfd8355721455c232059e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4144019847c0cbe813816fe387956fc84935d375", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvbrPCRBK7hj4Ov3rIwAAe64IADg/vnN1bXG/dWuq5Lc+vXjE\noYXDYzr0LKnLWZk0diDeOPozH7V1GGoBqKmhKTAaigo8NSFX6wZTfavoWdXjl5n7\nQJKhRi2HT0+nd9Sc5P1tLtRksJ6cwY21LlbMdRrnwZT9F530WZIttNOluBpwHUzY\n5sdKtYC6DBaIPaWmjnIryYu/xuvy6WwQKltmw7fMFUek1X3AhCQij6/Lx6GCMU17\nfjZ3HdwW01fBmrQh8YJ8HkyKF/33IEqwyyUEb/cYRCpU6jSwR5O1yA8qWqYXfs6b\nlv/UPXFI+pbRtsFoNOjVnObsQ47B6AMO7nGN/eOTh6Wio+1rZBbreB7JszOCNWE=\n=A6+T\n-----END PGP SIGNATURE-----\n", "payload": "tree c758d50de80b492a4fbfd8355721455c232059e3\nparent 7d07cfbbe7af709b7f1e8be856a9d5efd6d816e7\nparent a26f00357f95f6affba7917e00e02152b1b24210\nauthor Yuki Okushi <jtitor@2k36.org> 1623046863 +0900\ncommitter GitHub <noreply@github.com> 1623046863 +0900\n\nRollup merge of #86016 - luqmana:infer-linker-flavor, r=petrochenkov\n\nUnify duplicate linker_and_flavor methods in rustc_codegen_{cranelift,ssa}.\n\nThe two methods were exactly the same so this removes the cranelift copy. This will help make sure both they don't get out of sync.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4144019847c0cbe813816fe387956fc84935d375", "html_url": "https://github.com/rust-lang/rust/commit/4144019847c0cbe813816fe387956fc84935d375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4144019847c0cbe813816fe387956fc84935d375/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d07cfbbe7af709b7f1e8be856a9d5efd6d816e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d07cfbbe7af709b7f1e8be856a9d5efd6d816e7", "html_url": "https://github.com/rust-lang/rust/commit/7d07cfbbe7af709b7f1e8be856a9d5efd6d816e7"}, {"sha": "a26f00357f95f6affba7917e00e02152b1b24210", "url": "https://api.github.com/repos/rust-lang/rust/commits/a26f00357f95f6affba7917e00e02152b1b24210", "html_url": "https://github.com/rust-lang/rust/commit/a26f00357f95f6affba7917e00e02152b1b24210"}], "stats": {"total": 93, "additions": 3, "deletions": 90}, "files": [{"sha": "f86236ef3eafc6eee6c6a476bb19d2fed1f13ce4", "filename": "compiler/rustc_codegen_cranelift/src/toolchain.rs", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4144019847c0cbe813816fe387956fc84935d375/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4144019847c0cbe813816fe387956fc84935d375/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs?ref=4144019847c0cbe813816fe387956fc84935d375", "patch": "@@ -2,9 +2,8 @@\n \n use std::path::PathBuf;\n \n-use rustc_middle::bug;\n+use rustc_codegen_ssa::back::link::linker_and_flavor;\n use rustc_session::Session;\n-use rustc_target::spec::LinkerFlavor;\n \n /// Tries to infer the path of a binary for the target toolchain from the linker name.\n pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n@@ -30,90 +29,3 @@ pub(crate) fn get_toolchain_binary(sess: &Session, tool: &str) -> PathBuf {\n \n     linker\n }\n-\n-// Adapted from https://github.com/rust-lang/rust/blob/5db778affee7c6600c8e7a177c48282dab3f6292/src/librustc_codegen_ssa/back/link.rs#L848-L931\n-fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n-    fn infer_from(\n-        sess: &Session,\n-        linker: Option<PathBuf>,\n-        flavor: Option<LinkerFlavor>,\n-    ) -> Option<(PathBuf, LinkerFlavor)> {\n-        match (linker, flavor) {\n-            (Some(linker), Some(flavor)) => Some((linker, flavor)),\n-            // only the linker flavor is known; use the default linker for the selected flavor\n-            (None, Some(flavor)) => Some((\n-                PathBuf::from(match flavor {\n-                    LinkerFlavor::Em => {\n-                        if cfg!(windows) {\n-                            \"emcc.bat\"\n-                        } else {\n-                            \"emcc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Gcc => {\n-                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n-                            // On historical Solaris systems, \"cc\" may have\n-                            // been Sun Studio, which is not flag-compatible\n-                            // with \"gcc\".  This history casts a long shadow,\n-                            // and many modern illumos distributions today\n-                            // ship GCC as \"gcc\" without also making it\n-                            // available as \"cc\".\n-                            \"gcc\"\n-                        } else {\n-                            \"cc\"\n-                        }\n-                    }\n-                    LinkerFlavor::Ld => \"ld\",\n-                    LinkerFlavor::Msvc => \"link.exe\",\n-                    LinkerFlavor::Lld(_) => \"lld\",\n-                    LinkerFlavor::PtxLinker => \"rust-ptx-linker\",\n-                    LinkerFlavor::BpfLinker => \"bpf-linker\",\n-                }),\n-                flavor,\n-            )),\n-            (Some(linker), None) => {\n-                let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n-                    sess.fatal(\"couldn't extract file stem from specified linker\")\n-                });\n-\n-                let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::Em\n-                } else if stem == \"gcc\"\n-                    || stem.ends_with(\"-gcc\")\n-                    || stem == \"clang\"\n-                    || stem.ends_with(\"-clang\")\n-                {\n-                    LinkerFlavor::Gcc\n-                } else if stem == \"ld\" || stem == \"ld.lld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::Ld\n-                } else if stem == \"link\" || stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc\n-                } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.lld_flavor)\n-                } else {\n-                    // fall back to the value in the target spec\n-                    sess.target.linker_flavor\n-                };\n-\n-                Some((linker, flavor))\n-            }\n-            (None, None) => None,\n-        }\n-    }\n-\n-    // linker and linker flavor specified via command line have precedence over what the target\n-    // specification specifies\n-    if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), sess.opts.cg.linker_flavor) {\n-        return ret;\n-    }\n-\n-    if let Some(ret) = infer_from(\n-        sess,\n-        sess.target.linker.clone().map(PathBuf::from),\n-        Some(sess.target.linker_flavor),\n-    ) {\n-        return ret;\n-    }\n-\n-    bug!(\"Not enough information provided to determine how to invoke the linker\");\n-}"}, {"sha": "e80cc0bdc02da97f3f40c011fcc2f94a61a66720", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4144019847c0cbe813816fe387956fc84935d375/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4144019847c0cbe813816fe387956fc84935d375/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=4144019847c0cbe813816fe387956fc84935d375", "patch": "@@ -1147,7 +1147,8 @@ pub fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool\n         && (info.compiler_builtins == Some(cnum) || info.is_no_builtins.contains(&cnum))\n }\n \n-fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n+// This functions tries to determine the appropriate linker (and corresponding LinkerFlavor) to use\n+pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n     fn infer_from(\n         sess: &Session,\n         linker: Option<PathBuf>,"}]}