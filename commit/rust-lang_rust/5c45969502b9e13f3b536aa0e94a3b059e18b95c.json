{"sha": "5c45969502b9e13f3b536aa0e94a3b059e18b95c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNDU5Njk1MDJiOWUxM2YzYjUzNmFhMGU5NGEzYjA1OWUxOGI5NWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T06:01:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-20T06:01:49Z"}, "message": "Auto merge of #79192 - tmiasko:naked-noinline, r=oli-obk\n\nNever inline naked functions\n\nThe `#[naked]` attribute disabled prologue / epilogue emission for the\nfunction and it is responsibility of a developer to provide them. The\ncompiler is no position to inline such functions correctly.\n\nDisable inlining of naked functions at LLVM and MIR level.\n\nCloses #60919.", "tree": {"sha": "f02012d2178970395a50031fd82c7c38847599f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02012d2178970395a50031fd82c7c38847599f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c45969502b9e13f3b536aa0e94a3b059e18b95c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c45969502b9e13f3b536aa0e94a3b059e18b95c", "html_url": "https://github.com/rust-lang/rust/commit/5c45969502b9e13f3b536aa0e94a3b059e18b95c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c45969502b9e13f3b536aa0e94a3b059e18b95c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "url": "https://api.github.com/repos/rust-lang/rust/commits/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a", "html_url": "https://github.com/rust-lang/rust/commit/74285eb3a83eac639f9c54ba8c4ccf9879b3b00a"}, {"sha": "c2fb99984c2ed4b54f5b8baff26fcc04af71d032", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2fb99984c2ed4b54f5b8baff26fcc04af71d032", "html_url": "https://github.com/rust-lang/rust/commit/c2fb99984c2ed4b54f5b8baff26fcc04af71d032"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "364a3a1eeb5e78c39b0202ed80eea41d8d31e23b", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c45969502b9e13f3b536aa0e94a3b059e18b95c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c45969502b9e13f3b536aa0e94a3b059e18b95c/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=5c45969502b9e13f3b536aa0e94a3b059e18b95c", "patch": "@@ -67,7 +67,7 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n     }\n }\n \n-#[derive(Clone, PartialEq, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Encodable, Decodable)]\n pub enum InlineAttr {\n     None,\n     Hint,"}, {"sha": "62a7986c194f0309b24a420dccef066e81554b54", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c45969502b9e13f3b536aa0e94a3b059e18b95c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c45969502b9e13f3b536aa0e94a3b059e18b95c/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=5c45969502b9e13f3b536aa0e94a3b059e18b95c", "patch": "@@ -25,7 +25,7 @@ use crate::value::Value;\n \n /// Mark LLVM function to use provided inline heuristic.\n #[inline]\n-fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr, requires_inline: bool) {\n+fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n     use self::InlineAttr::*;\n     match inline {\n         Hint => Attribute::InlineHint.apply_llfn(Function, val),\n@@ -35,7 +35,6 @@ fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr, requires\n                 Attribute::NoInline.apply_llfn(Function, val);\n             }\n         }\n-        None if requires_inline => Attribute::InlineHint.apply_llfn(Function, val),\n         None => {}\n     };\n }\n@@ -226,7 +225,14 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n         }\n     }\n \n-    inline(cx, llfn, codegen_fn_attrs.inline.clone(), instance.def.requires_inline(cx.tcx));\n+    let inline_attr = if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n+        InlineAttr::Never\n+    } else if codegen_fn_attrs.inline == InlineAttr::None && instance.def.requires_inline(cx.tcx) {\n+        InlineAttr::Hint\n+    } else {\n+        codegen_fn_attrs.inline\n+    };\n+    inline(cx, llfn, inline_attr);\n \n     // The `uwtable` attribute according to LLVM is:\n     //"}, {"sha": "4eeb8969bb11002fcea6d0694c76404c73396b9e", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c45969502b9e13f3b536aa0e94a3b059e18b95c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c45969502b9e13f3b536aa0e94a3b059e18b95c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=5c45969502b9e13f3b536aa0e94a3b059e18b95c", "patch": "@@ -254,6 +254,11 @@ impl Inliner<'tcx> {\n             self.tcx.sess.opts.debugging_opts.inline_mir_threshold\n         };\n \n+        if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n+            debug!(\"#[naked] present - not inlining\");\n+            return false;\n+        }\n+\n         if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::COLD) {\n             debug!(\"#[cold] present - not inlining\");\n             return false;"}, {"sha": "2a2208d4fce3949676fc7534c411cd30278c265b", "filename": "src/test/codegen/naked-noinline.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5c45969502b9e13f3b536aa0e94a3b059e18b95c/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c45969502b9e13f3b536aa0e94a3b059e18b95c/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs?ref=5c45969502b9e13f3b536aa0e94a3b059e18b95c", "patch": "@@ -0,0 +1,30 @@\n+// Checks that naked functions are never inlined.\n+// compile-flags: -O -Zmir-opt-level=2\n+// ignore-wasm32\n+#![crate_type = \"lib\"]\n+#![feature(asm)]\n+#![feature(naked_functions)]\n+\n+#[inline(always)]\n+#[naked]\n+#[no_mangle]\n+pub unsafe extern \"C\" fn f() {\n+// Check that f has naked and noinline attributes.\n+//\n+// CHECK:       define void @f() unnamed_addr [[ATTR:#[0-9]+]]\n+// CHECK-NEXT:  start:\n+// CHECK-NEXT:    call void asm\n+    asm!(\"\", options(noreturn));\n+}\n+\n+#[no_mangle]\n+pub unsafe fn g() {\n+// Check that call to f is not inlined.\n+//\n+// CHECK-LABEL: define void @g()\n+// CHECK-NEXT:  start:\n+// CHECK-NEXT:    call void @f()\n+    f();\n+}\n+\n+// CHECK: attributes [[ATTR]] = { naked noinline{{.*}} }"}]}