{"sha": "6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOWVjYWE3Y2YwYTE1ZGI0NmQxM2Q3MjkzMmFjYjJkNjc4YzI5ZjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-19T20:30:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-19T21:28:43Z"}, "message": "Tweak wording and spans of closure lifetime errors", "tree": {"sha": "89aff86d1b1ffdb8e1e229c5cc7ecce4e5efd8ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89aff86d1b1ffdb8e1e229c5cc7ecce4e5efd8ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "html_url": "https://github.com/rust-lang/rust/commit/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1820da52110cc5cfb40436225c939067049ccf32", "url": "https://api.github.com/repos/rust-lang/rust/commits/1820da52110cc5cfb40436225c939067049ccf32", "html_url": "https://github.com/rust-lang/rust/commit/1820da52110cc5cfb40436225c939067049ccf32"}], "stats": {"total": 97, "additions": 64, "deletions": 33}, "files": [{"sha": "95f44b813c5d2b6c4f8caff05aaecb21eb8881ab", "filename": "src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Foutlives_closure.rs?ref=6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "patch": "@@ -69,16 +69,46 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                                 sup_sp,\n                                 \"borrowed data cannot be stored outside of its closure\");\n                             err.span_label(sup_sp, \"cannot be stored outside of its closure\");\n-                            if sup_sp == origin_sp {\n+                            if origin_sp == sup_sp || origin_sp.contains(sup_sp) {\n+// // sup_sp == origin.span():\n+//\n+// let mut x = None;\n+//     ----- borrowed data cannot be stored into here...\n+// with_int(|y| x = Some(y));\n+//          ---          ^ cannot be stored outside of its closure\n+//          |\n+//          ...because it cannot outlive this closure\n+//\n+// // origin.contains(&sup_sp):\n+//\n+// let mut f: Option<&u32> = None;\n+//     ----- borrowed data cannot be stored into here...\n+// closure_expecting_bound(|x: &'x u32| {\n+//                         ------------ ... because it cannot outlive this closure\n+//     f = Some(x);\n+//              ^ cannot be stored outside of its closure\n                                 err.span_label(*external_span,\n                                                \"borrowed data cannot be stored into here...\");\n                                 err.span_label(*closure_span,\n                                                \"...because it cannot outlive this closure\");\n                             } else {\n+// FIXME: the wording for this case could be much improved\n+//\n+// let mut lines_to_use: Vec<&CrateId> = Vec::new();\n+//                           - cannot infer an appropriate lifetime...\n+// let push_id = |installed_id: &CrateId| {\n+//     -------   ------------------------ borrowed data cannot outlive this closure\n+//     |\n+//     ...so that variable is valid at time of its declaration\n+//     lines_to_use.push(installed_id);\n+//                       ^^^^^^^^^^^^ cannot be stored outside of its closure\n+                                err.span_label(origin_sp,\n+                                               \"cannot infer an appropriate lifetime...\");\n+                                err.span_label(*external_span,\n+                                               \"...so that variable is valid at time of its \\\n+                                                declaration\");\n                                 err.span_label(*closure_span,\n                                                \"borrowed data cannot outlive this closure\");\n-                                err.span_label(origin_sp,\n-                                               \"cannot infer an appropriate lifetime\");\n                             }\n                             err.emit();\n                             return Some(ErrorReported);"}, {"sha": "8f1545fa009865a49bb2c7c1595f05fa5b550cd0", "filename": "src/test/ui/borrowck/issue-7573.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.rs?ref=6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "patch": "@@ -28,6 +28,7 @@ pub fn remove_package_from_database() {\n         //~^ NOTE cannot infer an appropriate lifetime\n     let push_id = |installed_id: &CrateId| {\n         //~^ NOTE borrowed data cannot outlive this closure\n+        //~| NOTE ...so that variable is valid at time of its declaration\n         lines_to_use.push(installed_id);\n         //~^ ERROR borrowed data cannot be stored outside of its closure\n         //~| NOTE cannot be stored outside of its closure"}, {"sha": "99b48d9276c068a088274e349719f75fc2fc043f", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "patch": "@@ -1,13 +1,15 @@\n error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/issue-7573.rs:31:27\n+  --> $DIR/issue-7573.rs:32:27\n    |\n 27 |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-   |                               - cannot infer an appropriate lifetime\n+   |                               - cannot infer an appropriate lifetime...\n 28 |         //~^ NOTE cannot infer an appropriate lifetime\n 29 |     let push_id = |installed_id: &CrateId| {\n-   |                   ------------------------ borrowed data cannot outlive this closure\n-30 |         //~^ NOTE borrowed data cannot outlive this closure\n-31 |         lines_to_use.push(installed_id);\n+   |         -------   ------------------------ borrowed data cannot outlive this closure\n+   |         |\n+   |         ...so that variable is valid at time of its declaration\n+...\n+32 |         lines_to_use.push(installed_id);\n    |                           ^^^^^^^^^^^^ cannot be stored outside of its closure\n \n error: aborting due to previous error"}, {"sha": "a2ad7c3f768c6aac17fe601d76970fa4f2d3f639", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr?ref=6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "patch": "@@ -1,12 +1,12 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/regions-escape-bound-fn.rs:18:27\n    |\n+17 |     let mut x: Option<&isize> = None;\n+   |         ----- borrowed data cannot be stored into here...\n 18 |     with_int(|y| x = Some(y));\n-   |              ---     -----^-\n-   |              |       |    |\n-   |              |       |    cannot be stored outside of its closure\n-   |              |       cannot infer an appropriate lifetime\n-   |              borrowed data cannot outlive this closure\n+   |              ---          ^ cannot be stored outside of its closure\n+   |              |\n+   |              ...because it cannot outlive this closure\n \n error: aborting due to previous error\n "}, {"sha": "4b01e42fa67d02b21631fe4cf1ca601d16114534", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr?ref=6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "patch": "@@ -1,12 +1,12 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/regions-escape-unboxed-closure.rs:16:32\n    |\n+15 |     let mut x: Option<&isize> = None;\n+   |         ----- borrowed data cannot be stored into here...\n 16 |     with_int(&mut |y| x = Some(y));\n-   |                   ---     -----^-\n-   |                   |       |    |\n-   |                   |       |    cannot be stored outside of its closure\n-   |                   |       cannot infer an appropriate lifetime\n-   |                   borrowed data cannot outlive this closure\n+   |                   ---          ^ cannot be stored outside of its closure\n+   |                   |\n+   |                   ...because it cannot outlive this closure\n \n error: aborting due to previous error\n "}, {"sha": "ebb1e561e57ab6acec3dd4f1e24e891f7b0fd186", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f9ecaa7cf0a15db46d13d72932acb2d678c29f1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=6f9ecaa7cf0a15db46d13d72932acb2d678c29f1", "patch": "@@ -1,24 +1,22 @@\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/expect-region-supply-region.rs:28:18\n    |\n+26 |     let mut f: Option<&u32> = None;\n+   |         ----- borrowed data cannot be stored into here...\n 27 |     closure_expecting_bound(|x| {\n-   |                             --- borrowed data cannot outlive this closure\n+   |                             --- ...because it cannot outlive this closure\n 28 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n-   |             -----^-\n-   |             |    |\n-   |             |    cannot be stored outside of its closure\n-   |             cannot infer an appropriate lifetime\n+   |                  ^ cannot be stored outside of its closure\n \n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/expect-region-supply-region.rs:38:18\n    |\n+36 |     let mut f: Option<&u32> = None;\n+   |         ----- borrowed data cannot be stored into here...\n 37 |     closure_expecting_bound(|x: &u32| {\n-   |                             --------- borrowed data cannot outlive this closure\n+   |                             --------- ...because it cannot outlive this closure\n 38 |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n-   |             -----^-\n-   |             |    |\n-   |             |    cannot be stored outside of its closure\n-   |             cannot infer an appropriate lifetime\n+   |                  ^ cannot be stored outside of its closure\n \n error[E0308]: mismatched types\n   --> $DIR/expect-region-supply-region.rs:47:33\n@@ -87,14 +85,14 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the b\n error: borrowed data cannot be stored outside of its closure\n   --> $DIR/expect-region-supply-region.rs:52:18\n    |\n+43 |     let mut f: Option<&u32> = None;\n+   |         ----- borrowed data cannot be stored into here...\n+...\n 47 |     closure_expecting_bound(|x: &'x u32| {\n-   |                             ------------ borrowed data cannot outlive this closure\n+   |                             ------------ ...because it cannot outlive this closure\n ...\n 52 |         f = Some(x);\n-   |             -----^-\n-   |             |    |\n-   |             |    cannot be stored outside of its closure\n-   |             cannot infer an appropriate lifetime\n+   |                  ^ cannot be stored outside of its closure\n \n error: aborting due to 5 previous errors\n "}]}