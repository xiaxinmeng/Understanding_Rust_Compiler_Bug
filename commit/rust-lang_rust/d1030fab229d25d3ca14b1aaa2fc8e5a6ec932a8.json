{"sha": "d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "node_id": "C_kwDOAAsO6NoAKGQxMDMwZmFiMjI5ZDI1ZDNjYTE0YjFhYWEyZmM4ZTVhNmVjOTMyYTg", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-17T13:53:14Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-12-28T01:59:21Z"}, "message": "UPDATE - migrate fn simd_simple_float_intrinsic error messages", "tree": {"sha": "c301d7fbc95fca37039fbcdfd10c6dd9a75af3a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c301d7fbc95fca37039fbcdfd10c6dd9a75af3a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "html_url": "https://github.com/rust-lang/rust/commit/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e26366ad99a6da4df5c9b476eff00c48e50d1774", "url": "https://api.github.com/repos/rust-lang/rust/commits/e26366ad99a6da4df5c9b476eff00c48e50d1774", "html_url": "https://github.com/rust-lang/rust/commit/e26366ad99a6da4df5c9b476eff00c48e50d1774"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "6f630b479ed2a361c3e9aebc98ae5cf1d07bd28c", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "patch": "@@ -3636,6 +3636,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_symbol_mangling\",\n  \"rustc_target\",\n+ \"rustc_type_ir\",\n  \"serde_json\",\n  \"smallvec\",\n  \"snap\",\n@@ -3770,6 +3771,7 @@ dependencies = [\n  \"rustc_serialize\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"rustc_type_ir\",\n  \"serde\",\n  \"serde_json\",\n  \"termcolor\","}, {"sha": "032063d23b6d9ad9358ab4ce03a82b613be5139e", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "patch": "@@ -1165,42 +1165,24 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n         span: Span,\n         args: &[OperandRef<'tcx, &'ll Value>],\n     ) -> Result<&'ll Value, ()> {\n-        #[allow(unused_macro_rules)]\n-        macro_rules! emit_error {\n-            ($msg: tt) => {\n-                emit_error!($msg, )\n-            };\n-            ($msg: tt, $($fmt: tt)*) => {\n-                span_invalid_monomorphization_error(\n-                    bx.sess(), span,\n-                    &format!(concat!(\"invalid monomorphization of `{}` intrinsic: \", $msg),\n-                             name, $($fmt)*));\n-            }\n-        }\n-        macro_rules! return_error {\n-            ($($fmt: tt)*) => {\n-                {\n-                    emit_error!($($fmt)*);\n-                    return Err(());\n-                }\n-            }\n-        }\n-\n         let (elem_ty_str, elem_ty) = if let ty::Float(f) = in_elem.kind() {\n             let elem_ty = bx.cx.type_float_from_ty(*f);\n             match f.bit_width() {\n                 32 => (\"f32\", elem_ty),\n                 64 => (\"f64\", elem_ty),\n                 _ => {\n-                    return_error!(\n-                        \"unsupported element type `{}` of floating-point vector `{}`\",\n-                        f.name_str(),\n-                        in_ty\n-                    );\n+                    bx.sess().emit_err(InvalidMonomorphization::FloatingPointVector {\n+                        span,\n+                        name,\n+                        f_ty: *f,\n+                        in_ty,\n+                    });\n+                    return Err(());\n                 }\n             }\n         } else {\n-            return_error!(\"`{}` is not a floating-point type\", in_ty);\n+            bx.sess().emit_err(InvalidMonomorphization::FloatingPointType { span, name, in_ty });\n+            return Err(());\n         };\n \n         let vec_ty = bx.type_vector(elem_ty, in_len);\n@@ -1222,7 +1204,10 @@ fn generic_simd_intrinsic<'ll, 'tcx>(\n             sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_round => (\"round\", bx.type_func(&[vec_ty], vec_ty)),\n             sym::simd_trunc => (\"trunc\", bx.type_func(&[vec_ty], vec_ty)),\n-            _ => return_error!(\"unrecognized intrinsic `{}`\", name),\n+            _ => {\n+                bx.sess().emit_err(InvalidMonomorphization::UnrecognizedIntrinsic { span, name });\n+                return Err(());\n+            }\n         };\n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n         let f = bx.declare_cfn(llvm_name, llvm::UnnamedAddr::No, fn_ty);"}, {"sha": "d1ad687e6aee32a2b3e30c17557e58e366efce87", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "patch": "@@ -27,6 +27,7 @@ rustc_arena = { path = \"../rustc_arena\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_middle = { path = \"../rustc_middle\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_symbol_mangling = { path = \"../rustc_symbol_mangling\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "5ecba6925fabfdf0bc3ef868acf1a7e4d5784048", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{\n use rustc_macros::Diagnostic;\n use rustc_middle::ty::Ty;\n use rustc_span::{Span, Symbol};\n+use rustc_type_ir::FloatTy;\n use std::borrow::Cow;\n use std::io::Error;\n use std::path::{Path, PathBuf};\n@@ -631,4 +632,28 @@ pub enum InvalidMonomorphization<'tcx> {\n         span: Span,\n         ty: Ty<'tcx>,\n     },\n+\n+    #[diag(codegen_ssa_invalid_monomorphization_floating_point_vector, code = \"E0511\")]\n+    FloatingPointVector {\n+        #[primary_span]\n+        span: Span,\n+        name: Symbol,\n+        f_ty: FloatTy,\n+        in_ty: Ty<'tcx>,\n+    },\n+\n+    #[diag(codegen_ssa_invalid_monomorphization_floating_point_type, code = \"E0511\")]\n+    FloatingPointType {\n+        #[primary_span]\n+        span: Span,\n+        name: Symbol,\n+        in_ty: Ty<'tcx>,\n+    },\n+\n+    #[diag(codegen_ssa_invalid_monomorphization_unrecognized_intrinsic, code = \"E0511\")]\n+    UnrecognizedIntrinsic {\n+        #[primary_span]\n+        span: Span,\n+        name: Symbol,\n+    },\n }"}, {"sha": "0d9a9d851fc66052ca16825850995d1c247f5935", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "patch": "@@ -219,3 +219,9 @@ codegen_ssa_invalid_monomorphization_basic_integer_type = invalid monomorphizati\n codegen_ssa_invalid_monomorphization_basic_float_type = invalid monomorphization of `{$name}` intrinsic: expected basic float type, found `{$ty}`\n \n codegen_ssa_invalid_monomorphization_float_to_int_unchecked = invalid monomorphization of `float_to_int_unchecked` intrinsic: expected basic float type, found `{$ty}`\n+\n+codegen_ssa_invalid_monomorphization_floating_point_vector = invalid monomorphization of `{$name}` intrinsic: unsupported element type `{$f_ty}` of floating-point vector `{$in_ty}`\n+\n+codegen_ssa_invalid_monomorphization_floating_point_type = invalid monomorphization of `{$name}` intrinsic: `{$in_ty}` is not a floating-point type\n+\n+codegen_ssa_invalid_monomorphization_unrecognized_intrinsic = invalid monomorphization of `{$name}` intrinsic: unrecognized intrinsic `{$name}`"}, {"sha": "cadd53fbd8356b3409ec98e7d9eaac9cfb54fcc4", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "patch": "@@ -17,6 +17,7 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n+rustc_type_ir = { path = \"../rustc_type_ir\" }\n unicode-width = \"0.1.4\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.9\""}, {"sha": "794b6efcc2b246674b452ad0f4e3aa3e120b2b6a", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=d1030fab229d25d3ca14b1aaa2fc8e5a6ec932a8", "patch": "@@ -9,6 +9,7 @@ use rustc_span::edition::Edition;\n use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n+use rustc_type_ir as type_ir;\n use std::borrow::Cow;\n use std::fmt;\n use std::num::ParseIntError;\n@@ -170,6 +171,12 @@ impl IntoDiagnosticArg for ast::token::TokenKind {\n     }\n }\n \n+impl IntoDiagnosticArg for type_ir::FloatTy {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(self.name_str()))\n+    }\n+}\n+\n impl IntoDiagnosticArg for Level {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n         DiagnosticArgValue::Str(Cow::Borrowed(match self {"}]}