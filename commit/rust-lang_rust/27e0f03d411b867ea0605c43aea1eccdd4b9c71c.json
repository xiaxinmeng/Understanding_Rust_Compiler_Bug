{"sha": "27e0f03d411b867ea0605c43aea1eccdd4b9c71c", "node_id": "C_kwDOAAsO6NoAKDI3ZTBmMDNkNDExYjg2N2VhMDYwNWM0M2FlYTFlY2NkZDRiOWM3MWM", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-05T16:54:15Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-05T16:54:15Z"}, "message": "Add internal descriptions to a few queries", "tree": {"sha": "b2e3f7b198c3b71b03ae748aabffaaee66022590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2e3f7b198c3b71b03ae748aabffaaee66022590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e0f03d411b867ea0605c43aea1eccdd4b9c71c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQKzJMVGhRNDIHUP8p1nx7S++zRae5hYOHYiEafD5izYL3++fqEIG5Z/OWT1Io7uM8s\nFqBBzxqZTVa5IhZBV9swU=\n-----END SSH SIGNATURE-----", "payload": "tree b2e3f7b198c3b71b03ae748aabffaaee66022590\nparent 04583f29c8eb33bf2c444c549d8fc0c7a4f0735d\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667667255 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667667255 +0100\n\nAdd internal descriptions to a few queries\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e0f03d411b867ea0605c43aea1eccdd4b9c71c", "html_url": "https://github.com/rust-lang/rust/commit/27e0f03d411b867ea0605c43aea1eccdd4b9c71c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e0f03d411b867ea0605c43aea1eccdd4b9c71c/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04583f29c8eb33bf2c444c549d8fc0c7a4f0735d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04583f29c8eb33bf2c444c549d8fc0c7a4f0735d", "html_url": "https://github.com/rust-lang/rust/commit/04583f29c8eb33bf2c444c549d8fc0c7a4f0735d"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "00242e7eed775ff925c370f6aedcf5315e186b45", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/27e0f03d411b867ea0605c43aea1eccdd4b9c71c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e0f03d411b867ea0605c43aea1eccdd4b9c71c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=27e0f03d411b867ea0605c43aea1eccdd4b9c71c", "patch": "@@ -271,6 +271,10 @@ rustc_queries! {\n         desc { |tcx| \"elaborating item bounds for `{}`\", tcx.def_path_str(key) }\n     }\n \n+    /// Look up all native libraries this crate depends on.\n+    /// These are assembled from the following places:\n+    /// - `extern` blocks (depending on their `link` attributes)\n+    /// - the `libs` (`-l`) option\n     query native_libraries(_: CrateNum) -> Vec<NativeLib> {\n         arena_cache\n         desc { \"looking up the native libraries of a linked crate\" }\n@@ -1539,6 +1543,7 @@ rustc_queries! {\n         desc { \"available upstream drop-glue for `{:?}`\", substs }\n     }\n \n+    /// Returns a list of all `extern` blocks of a crate.\n     query foreign_modules(_: CrateNum) -> FxHashMap<DefId, ForeignModule> {\n         arena_cache\n         desc { \"looking up the foreign modules of a linked crate\" }\n@@ -1550,27 +1555,37 @@ rustc_queries! {\n     query entry_fn(_: ()) -> Option<(DefId, EntryFnType)> {\n         desc { \"looking up the entry function of a crate\" }\n     }\n+\n+    /// Finds the `rustc_proc_macro_decls` item of a crate.\n     query proc_macro_decls_static(_: ()) -> Option<LocalDefId> {\n-        desc { \"looking up the derive registrar for a crate\" }\n+        desc { \"looking up the proc macro declarations for a crate\" }\n     }\n+\n     // The macro which defines `rustc_metadata::provide_extern` depends on this query's name.\n     // Changing the name should cause a compiler error, but in case that changes, be aware.\n     query crate_hash(_: CrateNum) -> Svh {\n         eval_always\n         desc { \"looking up the hash a crate\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the hash for the host proc macro. Used to support -Z dual-proc-macro.\n     query crate_host_hash(_: CrateNum) -> Option<Svh> {\n         eval_always\n         desc { \"looking up the hash of a host version of a crate\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the extra data to put in each output filename for a crate.\n+    /// For example, compiling the `foo` crate with `extra-filename=-a` creates a `libfoo-b.rlib` file.\n     query extra_filename(_: CrateNum) -> String {\n         arena_cache\n         eval_always\n         desc { \"looking up the extra filename for a crate\" }\n         separate_provide_extern\n     }\n+\n+    /// Gets the paths where the crate came from in the file system.\n     query crate_extern_paths(_: CrateNum) -> Vec<PathBuf> {\n         arena_cache\n         eval_always\n@@ -1594,6 +1609,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    /// Get the corresponding native library from the `native_libraries` query\n     query native_library(def_id: DefId) -> Option<&'tcx NativeLib> {\n         desc { |tcx| \"getting the native library for `{}`\", tcx.def_path_str(def_id) }\n     }"}]}