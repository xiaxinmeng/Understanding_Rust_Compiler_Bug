{"sha": "2369af8c829c187aa8c734f4f6b1d6fd452a41ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNjlhZjhjODI5YzE4N2FhOGM3MzRmNGY2YjFkNmZkNDUyYTQxZmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T17:59:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T17:59:12Z"}, "message": "simplify", "tree": {"sha": "94a4bb3ff1e834bcb46557ecc399134ccbec29be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a4bb3ff1e834bcb46557ecc399134ccbec29be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2369af8c829c187aa8c734f4f6b1d6fd452a41ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2369af8c829c187aa8c734f4f6b1d6fd452a41ff", "html_url": "https://github.com/rust-lang/rust/commit/2369af8c829c187aa8c734f4f6b1d6fd452a41ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2369af8c829c187aa8c734f4f6b1d6fd452a41ff/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5887c0e574064934f2b090746a89894efc6c8f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5887c0e574064934f2b090746a89894efc6c8f8f", "html_url": "https://github.com/rust-lang/rust/commit/5887c0e574064934f2b090746a89894efc6c8f8f"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "8713fb0f0a0767072876c80ab489ab6c6fd3fdea", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2369af8c829c187aa8c734f4f6b1d6fd452a41ff/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2369af8c829c187aa8c734f4f6b1d6fd452a41ff/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=2369af8c829c187aa8c734f4f6b1d6fd452a41ff", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Resolution};\n+use hir::Resolution;\n use ra_syntax::{AstNode, ast::NameOwner};\n use test_utils::tested_by;\n \n@@ -44,40 +44,40 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         }\n         hir::ModuleDef::Struct(s) => {\n             let ty = s.ty(ctx.db);\n-            ty.iterate_impl_items(ctx.db, |item| match item {\n-                hir::ImplItem::Method(func) => {\n-                    let sig = func.signature(ctx.db);\n-                    if !sig.has_self_param() {\n-                        acc.add_function(ctx, func);\n+            ty.iterate_impl_items(ctx.db, |item| {\n+                match item {\n+                    hir::ImplItem::Method(func) => {\n+                        let sig = func.signature(ctx.db);\n+                        if !sig.has_self_param() {\n+                            acc.add_function(ctx, func);\n+                        }\n                     }\n-                    None::<()>\n-                }\n-                hir::ImplItem::Const(ct) => {\n-                    let source = ct.source(ctx.db);\n-                    if let Some(name) = source.1.name() {\n-                        CompletionItem::new(\n-                            CompletionKind::Reference,\n-                            ctx.source_range(),\n-                            name.text().to_string(),\n-                        )\n-                        .from_const(ctx, ct)\n-                        .add_to(acc);\n+                    hir::ImplItem::Const(ct) => {\n+                        let source = ct.source(ctx.db);\n+                        if let Some(name) = source.1.name() {\n+                            CompletionItem::new(\n+                                CompletionKind::Reference,\n+                                ctx.source_range(),\n+                                name.text().to_string(),\n+                            )\n+                            .from_const(ctx, ct)\n+                            .add_to(acc);\n+                        }\n                     }\n-                    None::<()>\n-                }\n-                hir::ImplItem::Type(ty) => {\n-                    let source = ty.source(ctx.db);\n-                    if let Some(name) = source.1.name() {\n-                        CompletionItem::new(\n-                            CompletionKind::Reference,\n-                            ctx.source_range(),\n-                            name.text().to_string(),\n-                        )\n-                        .from_type(ctx, ty)\n-                        .add_to(acc);\n+                    hir::ImplItem::Type(ty) => {\n+                        let source = ty.source(ctx.db);\n+                        if let Some(name) = source.1.name() {\n+                            CompletionItem::new(\n+                                CompletionKind::Reference,\n+                                ctx.source_range(),\n+                                name.text().to_string(),\n+                            )\n+                            .from_type(ctx, ty)\n+                            .add_to(acc);\n+                        }\n                     }\n-                    None::<()>\n                 }\n+                None::<()>\n             });\n         }\n         _ => return,"}]}