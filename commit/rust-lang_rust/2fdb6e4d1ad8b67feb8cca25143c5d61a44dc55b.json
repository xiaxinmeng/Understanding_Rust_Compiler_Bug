{"sha": "2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZGI2ZTRkMWFkOGI2N2ZlYjhjY2EyNTE0M2M1ZDYxYTQ0ZGM1NWI=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-01-14T13:39:41Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-01-14T13:39:41Z"}, "message": "deprecate extend_from_slice lint", "tree": {"sha": "c087eac2e9d98bffd8120712e612fbfccbaec4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c087eac2e9d98bffd8120712e612fbfccbaec4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "html_url": "https://github.com/rust-lang/rust/commit/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3605dd29b7d7beb812ed1e32415c86365f74ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3605dd29b7d7beb812ed1e32415c86365f74ea5", "html_url": "https://github.com/rust-lang/rust/commit/e3605dd29b7d7beb812ed1e32415c86365f74ea5"}], "stats": {"total": 84, "additions": 18, "deletions": 66}, "files": [{"sha": "01bf489f384f916110b08109595920d1b955d37e", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 184 lints included in this crate:\n+There are 183 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -230,7 +230,6 @@ name\n [explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)                         | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n [explicit_into_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_into_iter_loop)                     | warn    | for-looping over `_.into_iter()` when `_` would do\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                               | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n-[extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                                 | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_map](https://github.com/Manishearth/rust-clippy/wiki#filter_map)                                               | allow   | using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                             | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic)                                   | allow   | any floating-point arithmetic statement"}, {"sha": "17139f28c2e49fd8013fa26513b4e096233c7dc3", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "patch": "@@ -4,6 +4,17 @@ macro_rules! declare_deprecated_lint {\n     }\n }\n \n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** This used to check for `Vec::extend`, which was slower than\n+/// `Vec::extend_from_slice`. Thanks to specialization, this is no longer true.\n+declare_deprecated_lint! {\n+    pub EXTEND_FROM_SLICE,\n+    \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n+}\n+\n+\n /// **What it does:** Nothing. This lint has been deprecated.\n ///\n /// **Deprecation reason:** This used to check for `Vec::as_slice`, which was unstable with good"}, {"sha": "0d797c567b8cb70dfed0ba6c79150aa79e943c6f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "patch": "@@ -179,6 +179,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     };\n \n     let mut store = reg.sess.lint_store.borrow_mut();\n+    store.register_removed(\n+        \"extend_from_slice\",\n+        \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\",\n+    );\n     store.register_removed(\n         \"unstable_as_slice\",\n         \"`Vec::as_slice` has been stabilized in 1.7\",\n@@ -408,7 +412,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::CHARS_NEXT_CMP,\n         methods::CLONE_DOUBLE_REF,\n         methods::CLONE_ON_COPY,\n-        methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n         methods::GET_UNWRAP,\n         methods::ITER_NTH,"}, {"sha": "23ceeec78e01ea1175c3f892319945d27ba2a4f7", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "patch": "@@ -292,24 +292,6 @@ declare_lint! {\n     \"using any `*or` method with a function call, which suggests `*or_else`\"\n }\n \n-/// **What it does:** Checks for usage of `.extend(s)` on a `Vec` to extend the\n-/// vector by a slice.\n-///\n-/// **Why is this bad?** Since Rust 1.6, the `extend_from_slice(_)` method is\n-/// stable and at least for now faster.\n-///\n-/// **Known problems:** None.\n-///\n-/// **Example:**\n-/// ```rust\n-/// my_vec.extend(&xs)\n-/// ```\n-declare_lint! {\n-    pub EXTEND_FROM_SLICE,\n-    Warn,\n-    \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n-}\n-\n /// **What it does:** Checks for usage of `.clone()` on a `Copy` type.\n ///\n /// **Why is this bad?** The only reason `Copy` types implement `Clone` is for\n@@ -522,8 +504,7 @@ declare_lint! {\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(EXTEND_FROM_SLICE,\n-                    OPTION_UNWRAP_USED,\n+        lint_array!(OPTION_UNWRAP_USED,\n                     RESULT_UNWRAP_USED,\n                     SHOULD_IMPLEMENT_TRAIT,\n                     WRONG_SELF_CONVENTION,\n@@ -844,21 +825,6 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n     }\n }\n \n-fn lint_vec_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n-    let arg_ty = cx.tables.expr_ty(&args[1]);\n-    if let Some(slice) = derefs_to_slice(cx, &args[1], arg_ty) {\n-        span_lint_and_then(cx,\n-                           EXTEND_FROM_SLICE,\n-                           expr.span,\n-                           \"use of `extend` to extend a Vec by a slice\",\n-                           |db| {\n-            db.span_suggestion(expr.span,\n-                               \"try this\",\n-                               format!(\"{}.extend_from_slice({})\", snippet(cx, args[0].span, \"_\"), slice));\n-        });\n-    }\n-}\n-\n fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n     let arg = &args[1];\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n@@ -885,9 +851,7 @@ fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n \n fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &[hir::Expr]) {\n     let (obj_ty, _) = walk_ptrs_ty_depth(cx.tables.expr_ty(&args[0]));\n-    if match_type(cx, obj_ty, &paths::VEC) {\n-        lint_vec_extend(cx, expr, args);\n-    } else if match_type(cx, obj_ty, &paths::STRING) {\n+    if match_type(cx, obj_ty, &paths::STRING) {\n         lint_string_extend(cx, expr, args);\n     }\n }"}, {"sha": "0f9a44b619f25f689179a2cbfd23b9d6687aa752", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=2fdb6e4d1ad8b67feb8cca25143c5d61a44dc55b", "patch": "@@ -508,31 +508,6 @@ fn starts_with() {\n     //~| SUGGESTION !\"\".starts_with(' ')\n }\n \n-fn use_extend_from_slice() {\n-    let mut v : Vec<&'static str> = vec![];\n-    v.extend(&[\"Hello\", \"World\"]);\n-    //~^ ERROR use of `extend`\n-    //~| HELP try this\n-    //~| SUGGESTION v.extend_from_slice(&[\"Hello\", \"World\"]);\n-    v.extend(&vec![\"Some\", \"more\"]);\n-    //~^ ERROR use of `extend`\n-    //~| HELP try this\n-    //~| SUGGESTION v.extend_from_slice(&vec![\"Some\", \"more\"]);\n-\n-    v.extend(vec![\"And\", \"even\", \"more\"].iter());\n-    //~^ ERROR use of `extend`\n-    //~| HELP try this\n-    //FIXME: the suggestion if broken because of the macro\n-    let o : Option<&'static str> = None;\n-    v.extend(o);\n-    v.extend(Some(\"Bye\"));\n-    v.extend(vec![\"Not\", \"like\", \"this\"]);\n-    v.extend([\"But\", \"this\"].iter());\n-    //~^ERROR use of `extend\n-    //~| HELP try this\n-    //~| SUGGESTION v.extend_from_slice(&[\"But\", \"this\"]);\n-}\n-\n fn str_extend_chars() {\n     let abc = \"abc\";\n     let def = String::from(\"def\");"}]}