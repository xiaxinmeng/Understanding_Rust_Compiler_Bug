{"sha": "b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZThiN2RkZjdlNTgzZTk2NGM3NzQ3NmNjYTk1ZGJlNmVhNjFhMWM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-05T15:40:03Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-05T15:53:05Z"}, "message": "rustdoc: Remove unused Clean impls", "tree": {"sha": "067a64975f9fcda070bea896be64fedfbaf94fe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/067a64975f9fcda070bea896be64fedfbaf94fe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "html_url": "https://github.com/rust-lang/rust/commit/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f931da0f6abba92f4177e11407025e2b088da65", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f931da0f6abba92f4177e11407025e2b088da65", "html_url": "https://github.com/rust-lang/rust/commit/6f931da0f6abba92f4177e11407025e2b088da65"}], "stats": {"total": 47, "additions": 1, "deletions": 46}, "files": [{"sha": "dc60b5a1d58e1624604c15079a20d7354be46b4b", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                     visibility: Inherited,\n                     def_id: FakeDefId::new_fake(item_def_id.krate),\n                     kind: box ImplItem(Impl {\n-                        span: self.cx.tcx.def_span(impl_def_id).clean(self.cx),\n+                        span: Span::from_rustc_span(self.cx.tcx.def_span(impl_def_id)),\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n                             self.cx.tcx.generics_of(impl_def_id),"}, {"sha": "767b14135bdfa550e558dbeea04c8b062141e3dd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b0e8b7ddf7e583e964c77476cca95dbe6ea61a1c", "patch": "@@ -227,20 +227,6 @@ impl<'tcx> Clean<GenericBound> for ty::PolyTraitRef<'tcx> {\n     }\n }\n \n-impl<'tcx> Clean<Option<Vec<GenericBound>>> for InternalSubsts<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Option<Vec<GenericBound>> {\n-        let mut v = Vec::new();\n-        v.extend(self.regions().filter_map(|r| r.clean(cx)).map(GenericBound::Outlives));\n-        v.extend(self.types().map(|t| {\n-            GenericBound::TraitBound(\n-                PolyTrait { trait_: t.clean(cx), generic_params: Vec::new() },\n-                hir::TraitBoundModifier::None,\n-            )\n-        }));\n-        if !v.is_empty() { Some(v) } else { None }\n-    }\n-}\n-\n impl Clean<Lifetime> for hir::Lifetime {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Lifetime {\n         let def = cx.tcx.named_region(self.hir_id);\n@@ -296,12 +282,6 @@ impl Clean<Constant> for hir::ConstArg {\n     }\n }\n \n-impl Clean<Lifetime> for ty::GenericParamDef {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Lifetime {\n-        Lifetime(self.name)\n-    }\n-}\n-\n impl Clean<Option<Lifetime>> for ty::RegionKind {\n     fn clean(&self, _cx: &mut DocContext<'_>) -> Option<Lifetime> {\n         match *self {\n@@ -1764,12 +1744,6 @@ impl Clean<Variant> for hir::VariantData<'_> {\n     }\n }\n \n-impl Clean<Span> for rustc_span::Span {\n-    fn clean(&self, _cx: &mut DocContext<'_>) -> Span {\n-        Span::from_rustc_span(*self)\n-    }\n-}\n-\n impl Clean<Path> for hir::Path<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n         Path {\n@@ -2211,22 +2185,3 @@ impl Clean<TypeBindingKind> for hir::TypeBindingKind<'_> {\n         }\n     }\n }\n-\n-enum SimpleBound {\n-    TraitBound(Vec<PathSegment>, Vec<SimpleBound>, Vec<GenericParamDef>, hir::TraitBoundModifier),\n-    Outlives(Lifetime),\n-}\n-\n-impl From<GenericBound> for SimpleBound {\n-    fn from(bound: GenericBound) -> Self {\n-        match bound.clone() {\n-            GenericBound::Outlives(l) => SimpleBound::Outlives(l),\n-            GenericBound::TraitBound(t, mod_) => match t.trait_ {\n-                Type::ResolvedPath { path, .. } => {\n-                    SimpleBound::TraitBound(path.segments, Vec::new(), t.generic_params, mod_)\n-                }\n-                _ => panic!(\"Unexpected bound {:?}\", bound),\n-            },\n-        }\n-    }\n-}"}]}