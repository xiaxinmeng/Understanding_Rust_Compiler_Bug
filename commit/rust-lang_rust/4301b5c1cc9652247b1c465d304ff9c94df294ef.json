{"sha": "4301b5c1cc9652247b1c465d304ff9c94df294ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMDFiNWMxY2M5NjUyMjQ3YjFjNDY1ZDMwNGZmOWM5NGRmMjk0ZWY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-19T22:35:39Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-27T09:56:43Z"}, "message": "Add notes about memory ordering to futex parker implementation.", "tree": {"sha": "d5a428c6a0beb354bfc466573575dceef697d891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5a428c6a0beb354bfc466573575dceef697d891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4301b5c1cc9652247b1c465d304ff9c94df294ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4301b5c1cc9652247b1c465d304ff9c94df294ef", "html_url": "https://github.com/rust-lang/rust/commit/4301b5c1cc9652247b1c465d304ff9c94df294ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4301b5c1cc9652247b1c465d304ff9c94df294ef/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485f882d7713b0e0b864fc8b21368910e5b8b0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/485f882d7713b0e0b864fc8b21368910e5b8b0a7", "html_url": "https://github.com/rust-lang/rust/commit/485f882d7713b0e0b864fc8b21368910e5b8b0a7"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "a5d4927dcc5cac841b370c4f8c072f096975d433", "filename": "library/std/src/thread/parker/futex.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4301b5c1cc9652247b1c465d304ff9c94df294ef/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4301b5c1cc9652247b1c465d304ff9c94df294ef/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fparker%2Ffutex.rs?ref=4301b5c1cc9652247b1c465d304ff9c94df294ef", "patch": "@@ -11,6 +11,26 @@ pub struct Parker {\n     state: AtomicI32,\n }\n \n+// Notes about memory ordering:\n+//\n+// Memory ordering is only relevant for the relative ordering of operations\n+// between different variables. Even Ordering::Relaxed guarantees a\n+// monotonic/consistent order when looking at just a single atomic variable.\n+//\n+// So, since this parker is just a single atomic variable, we only need to look\n+// at the ordering guarantees we need to provide to the 'outside world'.\n+//\n+// The only memory ordering guarantee that parking and unparking provide, is\n+// that things which happened before unpark() are visible on the thread\n+// returning from park() afterwards. Otherwise, it was effectively unparked\n+// before unpark() was called while still consuming the 'token'.\n+//\n+// In other words, unpark() needs to synchronize with the part of park() that\n+// consumes the token and returns.\n+//\n+// This is done with a release-acquire synchronization, by using\n+// Ordering::Release when writing NOTIFIED (the 'token') in unpark(), and using\n+// Ordering::Acquire when checking for this state in park().\n impl Parker {\n     #[inline]\n     pub const fn new() -> Self {"}]}