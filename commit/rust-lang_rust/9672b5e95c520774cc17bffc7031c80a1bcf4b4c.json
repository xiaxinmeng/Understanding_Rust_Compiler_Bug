{"sha": "9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NzJiNWU5NWM1MjA3NzRjYzE3YmZmYzcwMzFjODBhMWJjZjRiNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-26T10:11:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-26T10:11:43Z"}, "message": "Auto merge of #73756 - Manishearth:rollup-aehswb2, r=Manishearth\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #72620 (Omit DW_AT_linkage_name when it is the same as DW_AT_name)\n - #72967 (Don't move cursor in search box when using arrows to navigate results)\n - #73102 (proc_macro: Stop flattening groups with dummy spans)\n - #73297 (Support configurable deny-warnings for all in-tree crates.)\n - #73507 (Cleanup MinGW LLVM linkage workaround)\n - #73588 (Fix handling of reserved registers for ARM inline asm)\n - #73597 (Record span of `const` kw in GenericParamKind)\n - #73629 (Make AssocOp Copy)\n - #73681 (Update Chalk to 0.14)\n - #73707 (Fix links in `SliceIndex` documentation)\n - #73719 (emitter: column width defaults to 140)\n - #73729 (disable collectionbenches for android)\n - #73748 (Add code block to code in documentation of `List::rebase_onto`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "20f7538c7a80d21a50268d6ca69e42250be2010d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f7538c7a80d21a50268d6ca69e42250be2010d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "html_url": "https://github.com/rust-lang/rust/commit/9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e65d5e95da0f7e4f9127cf1598fa46f33972e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e65d5e95da0f7e4f9127cf1598fa46f33972e8", "html_url": "https://github.com/rust-lang/rust/commit/14e65d5e95da0f7e4f9127cf1598fa46f33972e8"}, {"sha": "a7eee3cca03749b8f5ef38ad5f7b601d27757718", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7eee3cca03749b8f5ef38ad5f7b601d27757718", "html_url": "https://github.com/rust-lang/rust/commit/a7eee3cca03749b8f5ef38ad5f7b601d27757718"}], "stats": {"total": 937, "additions": 644, "deletions": 293}, "files": [{"sha": "8cbf6cf6869ea9dfe26fb74f20441933d2cb482b", "filename": "Cargo.lock", "status": "modified", "additions": 41, "deletions": 8, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -434,9 +434,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.11.0\"\n+version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5b9bd01eab87277d973183a1d2e56bace1c11f8242c52c20636fb7dddf343ac9\"\n+checksum = \"d463e01905d607e181de72e8608721d3269f29176c9a14ce037011316ae7131d\"\n dependencies = [\n  \"proc-macro2 1.0.3\",\n  \"quote 1.0.2\",\n@@ -446,30 +446,31 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.11.0\"\n+version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6c7a637c3d17ed555aef16e16952a5d1e127bd55178cc30be22afeb92da90c7d\"\n+checksum = \"efaf428f5398d36284f79690cf988762b7c091249f50a6c11db613a46c057000\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n  \"rustc-hash\",\n+ \"tracing\",\n ]\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.11.0\"\n+version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"595e5735ded16c3f3dc348f7b15bbb2521a0080b1863cac38ad5271589944670\"\n+checksum = \"fd3fdc1e9f68498ffe80f4a23b0b95f1ca6fb21d5a4c9b0c085fab3ca712bdbe\"\n dependencies = [\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.11.0\"\n+version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5d9d938139db425867a30cc0cfec0269406d8238d0571d829041eaa7a8455d11\"\n+checksum = \"5b9fd4102807b7ebe8fb034fa0f488c5656e1966d3261b558b81a08d519cdb29\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-engine\",\n@@ -478,6 +479,7 @@ dependencies = [\n  \"itertools 0.9.0\",\n  \"petgraph\",\n  \"rustc-hash\",\n+ \"tracing\",\n ]\n \n [[package]]\n@@ -5332,6 +5334,37 @@ dependencies = [\n  \"syn 0.15.35\",\n ]\n \n+[[package]]\n+name = \"tracing\"\n+version = \"0.1.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a41f40ed0e162c911ac6fcb53ecdc8134c46905fdbbae8c50add462a538b495f\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"tracing-attributes\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-attributes\"\n+version = \"0.1.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"99bbad0de3fd923c9c3232ead88510b783e5a4d16a6154adffa3d53308de984c\"\n+dependencies = [\n+ \"proc-macro2 1.0.3\",\n+ \"quote 1.0.2\",\n+ \"syn 1.0.11\",\n+]\n+\n+[[package]]\n+name = \"tracing-core\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0aa83a9a47081cd522c09c81b31aec2c9273424976f922ad61c053b58350b715\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n [[package]]\n name = \"try-lock\"\n version = \"0.2.2\""}, {"sha": "0735ba8869addbb283e5d8d18cc54fef0cfd1ec4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -23,7 +23,7 @@ use crate::install;\n use crate::native;\n use crate::run;\n use crate::test;\n-use crate::tool;\n+use crate::tool::{self, SourceType};\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n use crate::{Build, DocTests, GitRepo, Mode};\n \n@@ -759,6 +759,7 @@ impl<'a> Builder<'a> {\n         &self,\n         compiler: Compiler,\n         mode: Mode,\n+        source_type: SourceType,\n         target: Interned<String>,\n         cmd: &str,\n     ) -> Cargo {\n@@ -1125,7 +1126,7 @@ impl<'a> Builder<'a> {\n \n         cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n-        if !mode.is_tool() {\n+        if source_type == SourceType::InTree {\n             // When extending this list, add the new lints to the RUSTFLAGS of the\n             // build_bootstrap function of src/bootstrap/bootstrap.py as well as\n             // some code doesn't go through this `rustc` wrapper."}, {"sha": "0d38d2eebe79390fefb2eae22ca674574f0f136f", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -44,7 +44,13 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n \n-        let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Std,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n@@ -92,8 +98,13 @@ impl Step for Rustc {\n \n         builder.ensure(Std { target });\n \n-        let mut cargo =\n-            builder.cargo(compiler, Mode::Rustc, target, cargo_subcommand(builder.kind));\n+        let mut cargo = builder.cargo(\n+            compiler,\n+            Mode::Rustc,\n+            SourceType::InTree,\n+            target,\n+            cargo_subcommand(builder.kind),\n+        );\n         rustc_cargo(builder, &mut cargo, target);\n \n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n@@ -113,7 +124,7 @@ impl Step for Rustc {\n }\n \n macro_rules! tool_check_step {\n-    ($name:ident, $path:expr) => {\n+    ($name:ident, $path:expr, $source_type:expr) => {\n         #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n         pub struct $name {\n             pub target: Interned<String>,\n@@ -145,7 +156,7 @@ macro_rules! tool_check_step {\n                     target,\n                     cargo_subcommand(builder.kind),\n                     $path,\n-                    SourceType::InTree,\n+                    $source_type,\n                     &[],\n                 );\n \n@@ -184,8 +195,12 @@ macro_rules! tool_check_step {\n     };\n }\n \n-tool_check_step!(Rustdoc, \"src/tools/rustdoc\");\n-tool_check_step!(Clippy, \"src/tools/clippy\");\n+tool_check_step!(Rustdoc, \"src/tools/rustdoc\", SourceType::InTree);\n+// Clippy is a hybrid. It is an external tool, but uses a git subtree instead\n+// of a submodule. Since the SourceType only drives the deny-warnings\n+// behavior, treat it as in-tree so that any new warnings in clippy will be\n+// rejected.\n+tool_check_step!(Clippy, \"src/tools/clippy\", SourceType::InTree);\n \n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target."}, {"sha": "0208dc8ba5eb646dfed58352d71479f7510bb00b", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -20,14 +20,14 @@ use filetime::FileTime;\n use serde::Deserialize;\n \n use crate::builder::Cargo;\n+use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n+use crate::cache::{Interned, INTERNER};\n use crate::dist;\n use crate::native;\n+use crate::tool::SourceType;\n use crate::util::{exe, is_dylib, symlink_dir};\n use crate::{Compiler, DependencyType, GitRepo, Mode};\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n-use crate::cache::{Interned, INTERNER};\n-\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n     pub target: Interned<String>,\n@@ -87,7 +87,7 @@ impl Step for Std {\n         target_deps.extend(copy_third_party_objects(builder, &compiler, target));\n         target_deps.extend(copy_self_contained_objects(builder, &compiler, target));\n \n-        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"build\");\n         std_cargo(builder, target, compiler.stage, &mut cargo);\n \n         builder.info(&format!(\n@@ -513,7 +513,7 @@ impl Step for Rustc {\n             target: builder.config.build,\n         });\n \n-        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"build\");\n         rustc_cargo(builder, &mut cargo, target);\n \n         builder.info(&format!("}, {"sha": "8b76158f9e5645d7e4dba8a31425c70927411dc4", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -435,7 +435,8 @@ impl Step for Std {\n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n         let run_cargo_rustdoc_for = |package: &str| {\n-            let mut cargo = builder.cargo(compiler, Mode::Std, target, \"rustdoc\");\n+            let mut cargo =\n+                builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n             compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n \n             // Keep a whitelist so we do not build internal stdlib crates, these will be\n@@ -534,7 +535,7 @@ impl Step for Rustc {\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n-        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, SourceType::InTree, target, \"doc\");\n         cargo.env(\n             \"RUSTDOCFLAGS\",\n             \"--document-private-items \\"}, {"sha": "5728b9d24de99a8738fef482ada7c28689d7f23a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -301,16 +301,21 @@ pub enum Mode {\n     /// Build codegen libraries, placing output in the \"stageN-codegen\" directory\n     Codegen,\n \n-    /// Build some tools, placing output in the \"stageN-tools\" directory. The\n-    /// \"other\" here is for miscellaneous sets of tools that are built using the\n-    /// bootstrap compiler in its entirety (target libraries and all).\n-    /// Typically these tools compile with stable Rust.\n+    /// Build a tool, placing output in the \"stage0-bootstrap-tools\"\n+    /// directory. This is for miscellaneous sets of tools that are built\n+    /// using the bootstrap stage0 compiler in its entirety (target libraries\n+    /// and all). Typically these tools compile with stable Rust.\n     ToolBootstrap,\n \n-    /// Compile a tool which uses all libraries we compile (up to rustc).\n-    /// Doesn't use the stage0 compiler libraries like \"other\", and includes\n-    /// tools like rustdoc, cargo, rls, etc.\n+    /// Build a tool which uses the locally built std, placing output in the\n+    /// \"stageN-tools\" directory. Its usage is quite rare, mainly used by\n+    /// compiletest which needs libtest.\n     ToolStd,\n+\n+    /// Build a tool which uses the locally built rustc and the target std,\n+    /// placing the output in the \"stageN-tools\" directory. This is used for\n+    /// anything that needs a fully functional rustc, such as rustdoc, clippy,\n+    /// cargo, rls, rustfmt, miri, etc.\n     ToolRustc,\n }\n "}, {"sha": "12ab6b1636cc17aa23e9be5e4c0a4c8d032ef5b1", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -367,7 +367,8 @@ impl Step for Miri {\n             extra_features: Vec::new(),\n         });\n         if let (Some(miri), Some(_cargo_miri)) = (miri, cargo_miri) {\n-            let mut cargo = builder.cargo(compiler, Mode::ToolRustc, host, \"install\");\n+            let mut cargo =\n+                builder.cargo(compiler, Mode::ToolRustc, SourceType::Submodule, host, \"install\");\n             cargo.arg(\"xargo\");\n             // Configure `cargo install` path. cargo adds a `bin/`.\n             cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out);\n@@ -1696,7 +1697,8 @@ impl Step for Crate {\n         // we're working with automatically.\n         let compiler = builder.compiler_for(compiler.stage, compiler.host, target);\n \n-        let mut cargo = builder.cargo(compiler, mode, target, test_kind.subcommand());\n+        let mut cargo =\n+            builder.cargo(compiler, mode, SourceType::InTree, target, test_kind.subcommand());\n         match mode {\n             Mode::Std => {\n                 compile::std_cargo(builder, target, compiler.stage, &mut cargo);"}, {"sha": "0055dee6092043e8634dbac630fa0291fd6fb5e2", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -16,7 +16,7 @@ use crate::util::{add_dylib_path, exe, CiEnv};\n use crate::Compiler;\n use crate::Mode;\n \n-#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub enum SourceType {\n     InTree,\n     Submodule,\n@@ -226,14 +226,10 @@ pub fn prepare_tool_cargo(\n     source_type: SourceType,\n     extra_features: &[String],\n ) -> CargoCommand {\n-    let mut cargo = builder.cargo(compiler, mode, target, command);\n+    let mut cargo = builder.cargo(compiler, mode, source_type, target, command);\n     let dir = builder.src.join(path);\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n-    if source_type == SourceType::Submodule {\n-        cargo.env(\"RUSTC_EXTERNAL_TOOL\", \"1\");\n-    }\n-\n     let mut features = extra_features.to_vec();\n     if builder.build.config.cargo_native_static {\n         if path.ends_with(\"cargo\")\n@@ -596,6 +592,7 @@ macro_rules! tool_extended {\n        $path:expr,\n        $tool_name:expr,\n        stable = $stable:expr,\n+       $(in_tree = $in_tree:expr,)*\n        $extra_deps:block;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n@@ -647,7 +644,11 @@ macro_rules! tool_extended {\n                     path: $path,\n                     extra_features: $sel.extra_features,\n                     is_optional_tool: true,\n-                    source_type: SourceType::Submodule,\n+                    source_type: if false $(|| $in_tree)* {\n+                        SourceType::InTree\n+                    } else {\n+                        SourceType::Submodule\n+                    },\n                 })\n             }\n         }\n@@ -659,8 +660,8 @@ macro_rules! tool_extended {\n // to make `./x.py build <tool>` work.\n tool_extended!((self, builder),\n     Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true, {};\n-    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, {};\n-    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, {};\n+    CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true, in_tree=true, {};\n+    Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, in_tree=true, {};\n     Miri, miri, \"src/tools/miri\", \"miri\", stable=false, {};\n     CargoMiri, miri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=false, {};\n     Rls, rls, \"src/tools/rls\", \"rls\", stable=true, {"}, {"sha": "c4c985dd134ba375dc23c4fc7438fc48373f6293", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -474,7 +474,7 @@ Here is the list of currently supported register classes:\n | AArch64 | `reg` | `x[0-28]`, `x30` | `r` |\n | AArch64 | `vreg` | `v[0-31]` | `w` |\n | AArch64 | `vreg_low16` | `v[0-15]` | `x` |\n-| ARM | `reg` | `r[0-r10]`, `r12`, `r14` | `r` |\n+| ARM | `reg` | `r[0-5]` `r7`\\*, `r[8-10]`, `r11`\\*, `r12`, `r14` | `r` |\n | ARM (Thumb) | `reg_thumb` | `r[0-r7]` | `l` |\n | ARM (ARM) | `reg_thumb` | `r[0-r10]`, `r12`, `r14` | `l` |\n | ARM | `sreg` | `s[0-31]` | `t` |\n@@ -497,6 +497,8 @@ Here is the list of currently supported register classes:\n > Note #2: On x86-64 the high byte registers (e.g. `ah`) are only available when used as an explicit register. Specifying the `reg_byte` register class for an operand will always allocate a low byte register.\n >\n > Note #3: NVPTX doesn't have a fixed register set, so named registers are not supported.\n+>\n+> Note #4: On ARM the frame pointer is either `r7` or `r11` depending on the platform.\n \n Additional register classes may be added in the future based on demand (e.g. MMX, x87, etc).\n \n@@ -591,7 +593,9 @@ Some registers cannot be used for input or output operands:\n | Architecture | Unsupported register | Reason |\n | ------------ | -------------------- | ------ |\n | All | `sp` | The stack pointer must be restored to its original value at the end of an asm code block. |\n-| All | `bp` (x86), `r11` (ARM), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon) | The frame pointer cannot be used as an input or output. |\n+| All | `bp` (x86), `x29` (AArch64), `x8` (RISC-V), `fr` (Hexagon) | The frame pointer cannot be used as an input or output. |\n+| ARM | `r7` or `r11` | On ARM the frame pointer can be either `r7` or `r11` depending on the target. The frame pointer cannot be used as an input or output. |\n+| ARM | `r6` | `r6` is used internally by LLVM as a base pointer and therefore cannot be used as an input or output. |\n | x86 | `k0` | This is a constant zero register which can't be modified. |\n | x86 | `ip` | This is the program counter, not a real register. |\n | x86 | `mm[0-7]` | MMX registers are not currently supported (but may be in the future). |"}, {"sha": "608eafc88d2a6d8b181ad4d504691630180f8c76", "filename": "src/liballoc/benches/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fliballoc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Fliballoc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Flib.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,3 +1,6 @@\n+// Disabling on android for the time being\n+// See https://github.com/rust-lang/rust/issues/73535#event-3477699747\n+#![cfg(not(target_os = \"android\"))]\n #![feature(btree_drain_filter)]\n #![feature(map_first_last)]\n #![feature(repr_simd)]"}, {"sha": "57bacdd99eff448489a0524c72c3fdd6fb116587", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -2817,6 +2817,7 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// performing any bounds checking.\n     /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n     /// even if the resulting reference is not used.\n+    ///\n     /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n@@ -2825,6 +2826,7 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// performing any bounds checking.\n     /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n     /// even if the resulting reference is not used.\n+    ///\n     /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n     #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;"}, {"sha": "99fbb1ee3ea834ddb73c0e7cfea0aeb19dcc7525", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -335,6 +335,8 @@ pub enum GenericParamKind {\n     },\n     Const {\n         ty: P<Ty>,\n+        /// Span of the `const` keyword.\n+        kw_span: Span,\n     },\n }\n "}, {"sha": "6c128f0176f6699a21e625f105ce82e780079946", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -475,7 +475,7 @@ impl MetaItem {\n                 let span = span.with_hi(segments.last().unwrap().ident.span.hi());\n                 Path { span, segments }\n             }\n-            Some(TokenTree::Token(Token { kind: token::Interpolated(nt), .. })) => match *nt {\n+            Some(TokenTree::Token(Token { kind: token::Interpolated(nt, _), .. })) => match *nt {\n                 token::Nonterminal::NtMeta(ref item) => return item.meta(item.path.span),\n                 token::Nonterminal::NtPath(ref path) => path.clone(),\n                 _ => return None,"}, {"sha": "3fd2815daa14fcb165074e0545e1a9115b1cc2ac", "filename": "src/librustc_ast/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fmut_visit.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -656,7 +656,7 @@ pub fn noop_visit_token<T: MutVisitor>(t: &mut Token, vis: &mut T) {\n             *span = ident.span;\n             return; // Avoid visiting the span for the second time.\n         }\n-        token::Interpolated(nt) => {\n+        token::Interpolated(nt, _) => {\n             let mut nt = Lrc::make_mut(nt);\n             vis.visit_interpolated(&mut nt);\n         }\n@@ -762,7 +762,7 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n         GenericParamKind::Type { default } => {\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n-        GenericParamKind::Const { ty } => {\n+        GenericParamKind::Const { ty, kw_span: _ } => {\n             vis.visit_ty(ty);\n         }\n     }"}, {"sha": "89be3e6e212ccb4d9b6a2335795047d8b98c745e", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -182,6 +182,15 @@ fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {\n             .contains(&name)\n }\n \n+/// A hack used to pass AST fragments to attribute and derive macros\n+/// as a single nonterminal token instead of a token stream.\n+/// FIXME: It needs to be removed, but there are some compatibility issues (see #73345).\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+pub enum FlattenGroup {\n+    Yes,\n+    No,\n+}\n+\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum TokenKind {\n     /* Expression-operator symbols. */\n@@ -236,7 +245,7 @@ pub enum TokenKind {\n     /// treat regular and interpolated lifetime identifiers in the same way.\n     Lifetime(Symbol),\n \n-    Interpolated(Lrc<Nonterminal>),\n+    Interpolated(Lrc<Nonterminal>, FlattenGroup),\n \n     // Can be expanded into several tokens.\n     /// A doc comment.\n@@ -343,7 +352,7 @@ impl Token {\n     /// if they keep spans or perform edition checks.\n     pub fn uninterpolated_span(&self) -> Span {\n         match &self.kind {\n-            Interpolated(nt) => nt.span(),\n+            Interpolated(nt, _) => nt.span(),\n             _ => self.span,\n         }\n     }\n@@ -382,7 +391,7 @@ impl Token {\n             ModSep                            | // global path\n             Lifetime(..)                      | // labeled loop\n             Pound                             => true, // expression attributes\n-            Interpolated(ref nt) => match **nt {\n+            Interpolated(ref nt, _) => match **nt {\n                 NtLiteral(..) |\n                 NtExpr(..)    |\n                 NtBlock(..)   |\n@@ -408,7 +417,7 @@ impl Token {\n             Lifetime(..)                | // lifetime bound in trait object\n             Lt | BinOp(Shl)             | // associated path\n             ModSep                      => true, // global path\n-            Interpolated(ref nt) => match **nt {\n+            Interpolated(ref nt, _) => match **nt {\n                 NtTy(..) | NtPath(..) => true,\n                 _ => false,\n             },\n@@ -420,7 +429,7 @@ impl Token {\n     pub fn can_begin_const_arg(&self) -> bool {\n         match self.kind {\n             OpenDelim(Brace) => true,\n-            Interpolated(ref nt) => match **nt {\n+            Interpolated(ref nt, _) => match **nt {\n                 NtExpr(..) | NtBlock(..) | NtLiteral(..) => true,\n                 _ => false,\n             },\n@@ -455,7 +464,7 @@ impl Token {\n         match self.uninterpolate().kind {\n             Literal(..) | BinOp(Minus) => true,\n             Ident(name, false) if name.is_bool_lit() => true,\n-            Interpolated(ref nt) => match &**nt {\n+            Interpolated(ref nt, _) => match &**nt {\n                 NtLiteral(_) => true,\n                 NtExpr(e) => match &e.kind {\n                     ast::ExprKind::Lit(_) => true,\n@@ -476,7 +485,7 @@ impl Token {\n     // otherwise returns the original token.\n     pub fn uninterpolate(&self) -> Cow<'_, Token> {\n         match &self.kind {\n-            Interpolated(nt) => match **nt {\n+            Interpolated(nt, _) => match **nt {\n                 NtIdent(ident, is_raw) => {\n                     Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))\n                 }\n@@ -523,7 +532,7 @@ impl Token {\n \n     /// Returns `true` if the token is an interpolated path.\n     fn is_path(&self) -> bool {\n-        if let Interpolated(ref nt) = self.kind {\n+        if let Interpolated(ref nt, _) = self.kind {\n             if let NtPath(..) = **nt {\n                 return true;\n             }\n@@ -535,7 +544,7 @@ impl Token {\n     /// That is, is this a pre-parsed expression dropped into the token stream\n     /// (which happens while parsing the result of macro expansion)?\n     pub fn is_whole_expr(&self) -> bool {\n-        if let Interpolated(ref nt) = self.kind {\n+        if let Interpolated(ref nt, _) = self.kind {\n             if let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtIdent(..) | NtBlock(_) = **nt {\n                 return true;\n             }\n@@ -546,7 +555,7 @@ impl Token {\n \n     // Is the token an interpolated block (`$b:block`)?\n     pub fn is_whole_block(&self) -> bool {\n-        if let Interpolated(ref nt) = self.kind {\n+        if let Interpolated(ref nt, _) = self.kind {\n             if let NtBlock(..) = **nt {\n                 return true;\n             }\n@@ -724,7 +733,7 @@ impl Token {\n                 b == d && (a == c || a == kw::DollarCrate || c == kw::DollarCrate)\n             }\n \n-            (&Interpolated(_), &Interpolated(_)) => false,\n+            (&Interpolated(..), &Interpolated(..)) => false,\n \n             _ => panic!(\"forgot to add a token?\"),\n         }"}, {"sha": "ea59f867c59d24aaf7241c1284d4a50b48fda602", "filename": "src/librustc_ast/util/literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fliteral.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -205,7 +205,7 @@ impl Lit {\n                 token::Lit::new(token::Bool, name, None)\n             }\n             token::Literal(lit) => lit,\n-            token::Interpolated(ref nt) => {\n+            token::Interpolated(ref nt, _) => {\n                 if let token::NtExpr(expr) | token::NtLiteral(expr) = &**nt {\n                     if let ast::ExprKind::Lit(lit) = &expr.kind {\n                         return Ok(lit.clone());"}, {"sha": "e5bcc571d417637a7c5c64cbe65f3c98b4e57575", "filename": "src/librustc_ast/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fparser.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -5,7 +5,7 @@ use rustc_span::symbol::kw;\n /// Associative operator with precedence.\n ///\n /// This is the enum which specifies operator precedence and fixity to the parser.\n-#[derive(PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum AssocOp {\n     /// `+`\n     Add,"}, {"sha": "d2c4478ccfeb6279e8d63ebd53332fdadcdb6e20", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1001,6 +1001,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             asm::InlineAsmReg::parse(\n                                 sess.asm_arch?,\n                                 |feature| sess.target_features.contains(&Symbol::intern(feature)),\n+                                &sess.target.target,\n                                 s,\n                             )\n                             .map_err(|e| {"}, {"sha": "863f525bdc8f35c4b9f7aa72fcbf27880822a211", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1027,7 +1027,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn lower_token(&mut self, token: Token) -> TokenStream {\n         match token.kind {\n-            token::Interpolated(nt) => {\n+            token::Interpolated(nt, _) => {\n                 let tts = (self.nt_to_tokenstream)(&nt, &self.sess.parse_sess, token.span);\n                 self.lower_token_stream(tts)\n             }\n@@ -2230,7 +2230,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 (hir::ParamName::Plain(param.ident), kind)\n             }\n-            GenericParamKind::Const { ref ty } => {\n+            GenericParamKind::Const { ref ty, kw_span: _ } => {\n                 let ty = self\n                     .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n                         this.lower_ty(&ty, ImplTraitContext::disallowed())"}, {"sha": "975881d9a0ac0c898895c5318320f3dd6f9660a0", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1135,9 +1135,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             generics.params.iter().map(|param| {\n                 let ident = Some(param.ident.to_string());\n                 let (kind, ident) = match &param.kind {\n-                    GenericParamKind::Lifetime { .. } => (ParamKindOrd::Lifetime, ident),\n-                    GenericParamKind::Type { .. } => (ParamKindOrd::Type, ident),\n-                    GenericParamKind::Const { ref ty } => {\n+                    GenericParamKind::Lifetime => (ParamKindOrd::Lifetime, ident),\n+                    GenericParamKind::Type { default: _ } => (ParamKindOrd::Type, ident),\n+                    GenericParamKind::Const { ref ty, kw_span: _ } => {\n                         let ty = pprust::ty_to_string(ty);\n                         (ParamKindOrd::Const, Some(format!(\"const {}: {}\", param.ident, ty)))\n                     }"}, {"sha": "86faa1f086ce2bf4edbac2fba0dc58626b811465", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -266,7 +266,7 @@ fn token_kind_to_string_ext(tok: &TokenKind, convert_dollar_crate: Option<Span>)\n         token::Shebang(s) => format!(\"/* shebang: {}*/\", s),\n         token::Unknown(s) => s.to_string(),\n \n-        token::Interpolated(ref nt) => nonterminal_to_string(nt),\n+        token::Interpolated(ref nt, _) => nonterminal_to_string(nt),\n     }\n }\n \n@@ -2578,7 +2578,7 @@ impl<'a> State<'a> {\n                         s.print_type(default)\n                     }\n                 }\n-                ast::GenericParamKind::Const { ref ty } => {\n+                ast::GenericParamKind::Const { ref ty, kw_span: _ } => {\n                     s.word_space(\"const\");\n                     s.print_ident(param.ident);\n                     s.s.space();"}, {"sha": "dc21be3b296aa16db1a128158501efbda5637dd4", "filename": "src/librustc_builtin_macros/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fmod.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -123,7 +123,7 @@ fn inject_impl_of_structural_trait(\n                 *default = None;\n                 ast::GenericArg::Type(cx.ty_ident(span, param.ident))\n             }\n-            ast::GenericParamKind::Const { ty: _ } => {\n+            ast::GenericParamKind::Const { ty: _, kw_span: _ } => {\n                 ast::GenericArg::Const(cx.const_ident(span, param.ident))\n             }\n         })"}, {"sha": "dab85b8fb864debbe46ccb0c4e29691e6850b37d", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -29,7 +29,6 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ich::NodeIdHashingMode;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::truncate;\n use rustc_middle::mir::{self, Field, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n@@ -2382,9 +2381,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     }\n \n     let tcx = cx.tcx;\n-    let attrs = tcx.codegen_fn_attrs(def_id);\n \n-    let no_mangle = attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE);\n     // We may want to remove the namespace scope if we're in an extern block (see\n     // https://github.com/rust-lang/rust/pull/46457#issuecomment-351750952).\n     let var_scope = get_namespace_for_item(cx, def_id);\n@@ -2401,14 +2398,11 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     let variable_type = Instance::mono(cx.tcx, def_id).monomorphic_ty(cx.tcx);\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = tcx.item_name(def_id).as_str();\n-    let linkage_name = if no_mangle {\n-        None\n-    } else {\n-        Some(mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name.as_str())\n-    };\n+    let linkage_name: &str =\n+        &mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name.as_str();\n     // When empty, linkage_name field is omitted,\n     // which is what we want for no_mangle statics\n-    let linkage_name = linkage_name.as_deref().unwrap_or(\"\");\n+    let linkage_name = if var_name == linkage_name { \"\" } else { linkage_name };\n \n     let global_align = cx.align_of(variable_type);\n "}, {"sha": "b5434298805f3cb35b3537064a1c2025755b621c", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -267,9 +267,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let substs = instance.substs.truncate_to(self.tcx(), generics);\n         let template_parameters = get_template_parameters(self, &generics, substs, &mut name);\n \n-        // Get the linkage_name, which is just the symbol name\n-        let linkage_name = mangled_name_of_instance(self, instance);\n-        let linkage_name = linkage_name.name.as_str();\n+        let linkage_name: &str = &mangled_name_of_instance(self, instance).name.as_str();\n+        // Omit the linkage_name if it is the same as subprogram name.\n+        let linkage_name = if &name == linkage_name { \"\" } else { linkage_name };\n \n         // FIXME(eddyb) does this need to be separate from `loc.line` for some reason?\n         let scope_line = loc.line;"}, {"sha": "80278bb9f53d8196b71d3c0ea64fe185844cdd4f", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -156,6 +156,10 @@ const ARM_WHITELIST: &[(&str, Option<Symbol>)] = &[\n     (\"vfp2\", Some(sym::arm_target_feature)),\n     (\"vfp3\", Some(sym::arm_target_feature)),\n     (\"vfp4\", Some(sym::arm_target_feature)),\n+    // This is needed for inline assembly, but shouldn't be stabilized as-is\n+    // since it should be enabled per-function using #[instruction_set], not\n+    // #[target_feature].\n+    (\"thumb-mode\", Some(sym::arm_target_feature)),\n ];\n \n const AARCH64_WHITELIST: &[(&str, Option<Symbol>)] = &["}, {"sha": "1362a1155bcdd358e68573809147005fe47d2b6d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -31,6 +31,9 @@ use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n use termcolor::{Buffer, Color, WriteColor};\n \n+/// Default column width, used in tests and when terminal dimensions cannot be determined.\n+const DEFAULT_COLUMN_WIDTH: usize = 140;\n+\n /// Describes the way the content of the `rendered` field of the json output is generated\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum HumanReadableErrorType {\n@@ -74,7 +77,8 @@ struct Margin {\n     pub computed_left: usize,\n     /// The end of the line to be displayed.\n     pub computed_right: usize,\n-    /// The current width of the terminal. 140 by default and in tests.\n+    /// The current width of the terminal. Uses value of `DEFAULT_COLUMN_WIDTH` constant by default\n+    /// and in tests.\n     pub column_width: usize,\n     /// The end column of a span label, including the span. Doesn't account for labels not in the\n     /// same line as the span.\n@@ -1414,11 +1418,11 @@ impl EmitterWriter {\n                 let column_width = if let Some(width) = self.terminal_width {\n                     width.saturating_sub(code_offset)\n                 } else if self.ui_testing {\n-                    140\n+                    DEFAULT_COLUMN_WIDTH\n                 } else {\n                     termize::dimensions()\n                         .map(|(w, _)| w.saturating_sub(code_offset))\n-                        .unwrap_or(usize::MAX)\n+                        .unwrap_or(DEFAULT_COLUMN_WIDTH)\n                 };\n \n                 let margin = Margin::new("}, {"sha": "d4c756c9ec7f877dc356d675439eec8fd0fa4143", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -4,7 +4,7 @@ use crate::module::DirectoryOwnership;\n use rustc_ast::ast::{self, Attribute, NodeId, PatKind};\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::ptr::P;\n-use rustc_ast::token;\n+use rustc_ast::token::{self, FlattenGroup};\n use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n@@ -142,7 +142,7 @@ impl Annotatable {\n             | Annotatable::StructField(..)\n             | Annotatable::Variant(..) => panic!(\"unexpected annotatable\"),\n         };\n-        TokenTree::token(token::Interpolated(Lrc::new(nt)), DUMMY_SP).into()\n+        TokenTree::token(token::Interpolated(Lrc::new(nt), FlattenGroup::Yes), DUMMY_SP).into()\n     }\n \n     pub fn expect_item(self) -> P<ast::Item> {\n@@ -374,7 +374,7 @@ where\n         impl MutVisitor for AvoidInterpolatedIdents {\n             fn visit_tt(&mut self, tt: &mut tokenstream::TokenTree) {\n                 if let tokenstream::TokenTree::Token(token) = tt {\n-                    if let token::Interpolated(nt) = &token.kind {\n+                    if let token::Interpolated(nt, _) = &token.kind {\n                         if let token::NtIdent(ident, is_raw) = **nt {\n                             *tt = tokenstream::TokenTree::token(\n                                 token::Ident(ident.name, is_raw),"}, {"sha": "c90a438c25eceda37151a02b1ce4dfa928380f25", "filename": "src/librustc_expand/mbe/macro_parser.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_parser.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -785,12 +785,12 @@ fn may_begin_with(token: &Token, name: Symbol) -> bool {\n         sym::literal => token.can_begin_literal_maybe_minus(),\n         sym::vis => match token.kind {\n             // The follow-set of :vis + \"priv\" keyword + interpolated\n-            token::Comma | token::Ident(..) | token::Interpolated(_) => true,\n+            token::Comma | token::Ident(..) | token::Interpolated(..) => true,\n             _ => token.can_begin_type(),\n         },\n         sym::block => match token.kind {\n             token::OpenDelim(token::Brace) => true,\n-            token::Interpolated(ref nt) => match **nt {\n+            token::Interpolated(ref nt, _) => match **nt {\n                 token::NtItem(_)\n                 | token::NtPat(_)\n                 | token::NtTy(_)\n@@ -804,7 +804,7 @@ fn may_begin_with(token: &Token, name: Symbol) -> bool {\n         },\n         sym::path | sym::meta => match token.kind {\n             token::ModSep | token::Ident(..) => true,\n-            token::Interpolated(ref nt) => match **nt {\n+            token::Interpolated(ref nt, _) => match **nt {\n                 token::NtPath(_) | token::NtMeta(_) => true,\n                 _ => may_be_ident(&nt),\n             },\n@@ -823,12 +823,12 @@ fn may_begin_with(token: &Token, name: Symbol) -> bool {\n             token::ModSep |                     // path\n             token::Lt |                         // path (UFCS constant)\n             token::BinOp(token::Shl) => true,   // path (double UFCS)\n-            token::Interpolated(ref nt) => may_be_ident(nt),\n+            token::Interpolated(ref nt, _) => may_be_ident(nt),\n             _ => false,\n         },\n         sym::lifetime => match token.kind {\n             token::Lifetime(_) => true,\n-            token::Interpolated(ref nt) => match **nt {\n+            token::Interpolated(ref nt, _) => match **nt {\n                 token::NtLifetime(_) | token::NtTT(_) => true,\n                 _ => false,\n             },"}, {"sha": "486f0a6420d6e1c7e172bb6229a754975adbe35d", "filename": "src/librustc_expand/mbe/transcribe.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Ftranscribe.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -4,7 +4,7 @@ use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n \n use rustc_ast::ast::MacCall;\n use rustc_ast::mut_visit::{self, MutVisitor};\n-use rustc_ast::token::{self, NtTT, Token};\n+use rustc_ast::token::{self, FlattenGroup, NtTT, Token};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -240,7 +240,10 @@ pub(super) fn transcribe<'a>(\n                             result.push(tt.clone().into());\n                         } else {\n                             marker.visit_span(&mut sp);\n-                            let token = TokenTree::token(token::Interpolated(nt.clone()), sp);\n+                            let token = TokenTree::token(\n+                                token::Interpolated(nt.clone(), FlattenGroup::No),\n+                                sp,\n+                            );\n                             result.push(token.into());\n                         }\n                     } else {"}, {"sha": "1e26c832a2621c0416e5fb90279c832a3bab0bc6", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -2,7 +2,7 @@ use crate::base::{self, *};\n use crate::proc_macro_server;\n \n use rustc_ast::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n-use rustc_ast::token;\n+use rustc_ast::token::{self, FlattenGroup};\n use rustc_ast::tokenstream::{self, TokenStream};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, ErrorReported};\n@@ -102,7 +102,7 @@ impl MultiItemModifier for ProcMacroDerive {\n             }\n         }\n \n-        let token = token::Interpolated(Lrc::new(token::NtItem(item)));\n+        let token = token::Interpolated(Lrc::new(token::NtItem(item)), FlattenGroup::Yes);\n         let input = tokenstream::TokenTree::token(token, DUMMY_SP).into();\n \n         let server = proc_macro_server::Rustc::new(ecx);"}, {"sha": "c88b5a37f718a0f5db4a838963946405ac277888", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,7 +1,7 @@\n use crate::base::ExtCtxt;\n \n use rustc_ast::ast;\n-use rustc_ast::token;\n+use rustc_ast::token::{self, FlattenGroup};\n use rustc_ast::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use rustc_ast::util::comments;\n use rustc_ast_pretty::pprust;\n@@ -60,7 +60,12 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n         let Token { kind, span } = match tree {\n             tokenstream::TokenTree::Delimited(span, delim, tts) => {\n                 let delimiter = Delimiter::from_internal(delim);\n-                return TokenTree::Group(Group { delimiter, stream: tts, span });\n+                return TokenTree::Group(Group {\n+                    delimiter,\n+                    stream: tts,\n+                    span,\n+                    flatten: FlattenGroup::No,\n+                });\n             }\n             tokenstream::TokenTree::Token(token) => token,\n         };\n@@ -167,19 +172,21 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n                     delimiter: Delimiter::Bracket,\n                     stream,\n                     span: DelimSpan::from_single(span),\n+                    flatten: FlattenGroup::No,\n                 }));\n                 if style == ast::AttrStyle::Inner {\n                     stack.push(tt!(Punct::new('!', false)));\n                 }\n                 tt!(Punct::new('#', false))\n             }\n \n-            Interpolated(nt) => {\n+            Interpolated(nt, flatten) => {\n                 let stream = nt_to_tokenstream(&nt, sess, span);\n                 TokenTree::Group(Group {\n                     delimiter: Delimiter::None,\n                     stream,\n                     span: DelimSpan::from_single(span),\n+                    flatten,\n                 })\n             }\n \n@@ -195,7 +202,7 @@ impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n \n         let (ch, joint, span) = match self {\n             TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),\n-            TokenTree::Group(Group { delimiter, stream, span }) => {\n+            TokenTree::Group(Group { delimiter, stream, span, .. }) => {\n                 return tokenstream::TokenTree::Delimited(span, delimiter.to_internal(), stream)\n                     .into();\n             }\n@@ -283,6 +290,10 @@ pub struct Group {\n     delimiter: Delimiter,\n     stream: TokenStream,\n     span: DelimSpan,\n+    /// A hack used to pass AST fragments to attribute and derive macros\n+    /// as a single nonterminal token instead of a token stream.\n+    /// FIXME: It needs to be removed, but there are some compatibility issues (see #73345).\n+    flatten: FlattenGroup,\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n@@ -437,14 +448,12 @@ impl server::TokenStreamIter for Rustc<'_> {\n                 let next = iter.cursor.next_with_joint()?;\n                 Some(TokenTree::from_internal((next, self.sess, &mut iter.stack)))\n             })?;\n-            // HACK: The condition \"dummy span + group with empty delimiter\" represents an AST\n-            // fragment approximately converted into a token stream. This may happen, for\n-            // example, with inputs to proc macro attributes, including derives. Such \"groups\"\n-            // need to flattened during iteration over stream's token trees.\n-            // Eventually this needs to be removed in favor of keeping original token trees\n-            // and not doing the roundtrip through AST.\n+            // A hack used to pass AST fragments to attribute and derive macros\n+            // as a single nonterminal token instead of a token stream.\n+            // Such token needs to be \"unwrapped\" and not represented as a delimited group.\n+            // FIXME: It needs to be removed, but there are some compatibility issues (see #73345).\n             if let TokenTree::Group(ref group) = tree {\n-                if group.delimiter == Delimiter::None && group.span.entire().is_dummy() {\n+                if matches!(group.flatten, FlattenGroup::Yes) {\n                     iter.cursor.append(group.stream.clone());\n                     continue;\n                 }\n@@ -456,7 +465,12 @@ impl server::TokenStreamIter for Rustc<'_> {\n \n impl server::Group for Rustc<'_> {\n     fn new(&mut self, delimiter: Delimiter, stream: Self::TokenStream) -> Self::Group {\n-        Group { delimiter, stream, span: DelimSpan::from_single(server::Span::call_site(self)) }\n+        Group {\n+            delimiter,\n+            stream,\n+            span: DelimSpan::from_single(server::Span::call_site(self)),\n+            flatten: FlattenGroup::No,\n+        }\n     }\n     fn delimiter(&mut self, group: &Self::Group) -> Delimiter {\n         group.delimiter"}, {"sha": "d25f8bd1b8c58c9bbbc78ab1e1d920c436f7a910", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -293,11 +293,9 @@ fn main() {\n         }\n     }\n \n-    // LLVM requires symbols from this library, but apparently they're not printed\n-    // during llvm-config?\n+    // Libstdc++ depends on pthread which Rust doesn't link on MinGW\n+    // since nothing else requires it.\n     if target.contains(\"windows-gnu\") {\n-        println!(\"cargo:rustc-link-lib=static-nobundle=gcc_s\");\n         println!(\"cargo:rustc-link-lib=static-nobundle=pthread\");\n-        println!(\"cargo:rustc-link-lib=dylib=uuid\");\n     }\n }"}, {"sha": "02d82c6793386ab8b3ba7fa1fc9ca72bea49219a", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -30,7 +30,7 @@ rustc_serialize = { path = \"../librustc_serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n byteorder = { version = \"1.3\" }\n-chalk-ir = \"0.11.0\"\n+chalk-ir = \"0.14.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\"\n rustc_session = { path = \"../librustc_session\" }"}, {"sha": "405af8cb2406c12891fbafa3730a70e7d3bc4458", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n+use rustc_target::spec::abi::Abi;\n \n use smallvec::SmallVec;\n \n@@ -77,6 +78,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type DefId = DefId;\n     type InternedAdtId = &'tcx AdtDef;\n     type Identifier = ();\n+    type FnAbi = Abi;\n \n     fn debug_program_clause_implication(\n         pci: &chalk_ir::ProgramClauseImplication<Self>,"}, {"sha": "e9fd67a748c857835b2a8602d2f40f11966a2216", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -336,8 +336,10 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     ///\n     /// For example given:\n     ///\n+    /// ```no_run\n     /// trait X<S> { fn f<T>(); }\n     /// impl<U> X<U> for U { fn f<V>() {} }\n+    /// ```\n     ///\n     /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.\n     /// * If `source_ancestor` is the def_id of the trait."}, {"sha": "b8cb146145b98c7771c8f1987e34ab3db3ca1213", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -155,7 +155,7 @@ impl<'a> Parser<'a> {\n     /// The delimiters or `=` are still put into the resulting token stream.\n     pub fn parse_attr_item(&mut self) -> PResult<'a, ast::AttrItem> {\n         let item = match self.token.kind {\n-            token::Interpolated(ref nt) => match **nt {\n+            token::Interpolated(ref nt, _) => match **nt {\n                 Nonterminal::NtMeta(ref item) => Some(item.clone().into_inner()),\n                 _ => None,\n             },\n@@ -254,7 +254,7 @@ impl<'a> Parser<'a> {\n     ///     meta_item_inner : (meta_item | UNSUFFIXED_LIT) (',' meta_item_inner)? ;\n     pub fn parse_meta_item(&mut self) -> PResult<'a, ast::MetaItem> {\n         let nt_meta = match self.token.kind {\n-            token::Interpolated(ref nt) => match **nt {\n+            token::Interpolated(ref nt, _) => match **nt {\n                 token::NtMeta(ref e) => Some(e.clone()),\n                 _ => None,\n             },"}, {"sha": "2745b18a8cd51e44b13ced0f8f797653523bd3b1", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -26,7 +26,7 @@ use std::mem;\n /// `token::Interpolated` tokens.\n macro_rules! maybe_whole_expr {\n     ($p:expr) => {\n-        if let token::Interpolated(nt) = &$p.token.kind {\n+        if let token::Interpolated(nt, _) = &$p.token.kind {\n             match &**nt {\n                 token::NtExpr(e) | token::NtLiteral(e) => {\n                     let e = e.clone();"}, {"sha": "47794746126daa02579ccc7fc822c80d03d3110b", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -47,21 +47,21 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_const_param(&mut self, preceding_attrs: Vec<Attribute>) -> PResult<'a, GenericParam> {\n-        let lo = self.token.span;\n+        let const_span = self.token.span;\n \n         self.expect_keyword(kw::Const)?;\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n \n-        self.sess.gated_spans.gate(sym::const_generics, lo.to(self.prev_token.span));\n+        self.sess.gated_spans.gate(sym::const_generics, const_span.to(self.prev_token.span));\n \n         Ok(GenericParam {\n             ident,\n             id: ast::DUMMY_NODE_ID,\n             attrs: preceding_attrs.into(),\n             bounds: Vec::new(),\n-            kind: GenericParamKind::Const { ty },\n+            kind: GenericParamKind::Const { ty, kw_span: const_span },\n             is_placeholder: false,\n         })\n     }"}, {"sha": "10df16964da084d32d6c64f590ed1406d08fd603", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1780,7 +1780,7 @@ impl<'a> Parser<'a> {\n \n     fn is_named_param(&self) -> bool {\n         let offset = match self.token.kind {\n-            token::Interpolated(ref nt) => match **nt {\n+            token::Interpolated(ref nt, _) => match **nt {\n                 token::NtPat(..) => return self.look_ahead(1, |t| t == &token::Colon),\n                 _ => 0,\n             },"}, {"sha": "04074479a21a4e22c333b1339a96246f4c792312", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -54,7 +54,7 @@ enum BlockMode {\n #[macro_export]\n macro_rules! maybe_whole {\n     ($p:expr, $constructor:ident, |$x:ident| $e:expr) => {\n-        if let token::Interpolated(nt) = &$p.token.kind {\n+        if let token::Interpolated(nt, _) = &$p.token.kind {\n             if let token::$constructor(x) = &**nt {\n                 let $x = x.clone();\n                 $p.bump();\n@@ -69,7 +69,7 @@ macro_rules! maybe_whole {\n macro_rules! maybe_recover_from_interpolated_ty_qpath {\n     ($self: expr, $allow_qpath_recovery: expr) => {\n         if $allow_qpath_recovery && $self.look_ahead(1, |t| t == &token::ModSep) {\n-            if let token::Interpolated(nt) = &$self.token.kind {\n+            if let token::Interpolated(nt, _) = &$self.token.kind {\n                 if let token::NtTy(ty) = &**nt {\n                     let ty = ty.clone();\n                     $self.bump();\n@@ -922,7 +922,7 @@ impl<'a> Parser<'a> {\n                 if self.eat(&token::Eq) {\n                     let eq_span = self.prev_token.span;\n                     let mut is_interpolated_expr = false;\n-                    if let token::Interpolated(nt) = &self.token.kind {\n+                    if let token::Interpolated(nt, _) = &self.token.kind {\n                         if let token::NtExpr(..) = **nt {\n                             is_interpolated_expr = true;\n                         }"}, {"sha": "742183d36973562b4d082a33b20239325a9f5bb7", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -515,7 +515,7 @@ impl<'a> Parser<'a> {\n         self.recover_additional_muts();\n \n         // Make sure we don't allow e.g. `let mut $p;` where `$p:pat`.\n-        if let token::Interpolated(ref nt) = self.token.kind {\n+        if let token::Interpolated(ref nt, _) = self.token.kind {\n             if let token::NtPat(_) = **nt {\n                 self.expected_ident_found().emit();\n             }"}, {"sha": "72faa68d0b2434a866579f1e5c04726a01fa0aab", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1325,7 +1325,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_token(&mut self, t: Token) {\n-        if let token::Interpolated(nt) = t.kind {\n+        if let token::Interpolated(nt, _) = t.kind {\n             if let token::NtExpr(ref expr) = *nt {\n                 if let ast::ExprKind::MacCall(..) = expr.kind {\n                     self.visit_invoc(expr.id);"}, {"sha": "dc8d1a8d3fdf98e97851bc6ca71a026ae0aabc83", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n     }\n \n     fn visit_token(&mut self, t: Token) {\n-        if let token::Interpolated(nt) = t.kind {\n+        if let token::Interpolated(nt, _) = t.kind {\n             if let token::NtExpr(ref expr) = *nt {\n                 if let ExprKind::MacCall(..) = expr.kind {\n                     self.visit_macro_invoc(expr.id);"}, {"sha": "b8fb813ea155f71626eb89904348243084d67564", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -536,8 +536,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n         for param in &generics.params {\n             match param.kind {\n-                GenericParamKind::Lifetime { .. } => self.visit_generic_param(param),\n-                GenericParamKind::Type { ref default, .. } => {\n+                GenericParamKind::Lifetime => self.visit_generic_param(param),\n+                GenericParamKind::Type { ref default } => {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n@@ -551,7 +551,7 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     // Allow all following defaults to refer to this type parameter.\n                     default_ban_rib.bindings.remove(&Ident::with_dummy_span(param.ident.name));\n                 }\n-                GenericParamKind::Const { ref ty } => {\n+                GenericParamKind::Const { ref ty, kw_span: _ } => {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }"}, {"sha": "85a136b94aa7998bad3523bdac5468ab718d7389", "filename": "src/librustc_target/asm/arm.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Farm.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -58,6 +59,37 @@ impl ArmInlineAsmRegClass {\n     }\n }\n \n+// This uses the same logic as useR7AsFramePointer in LLVM\n+fn frame_pointer_is_r7(mut has_feature: impl FnMut(&str) -> bool, target: &Target) -> bool {\n+    target.options.is_like_osx || (!target.options.is_like_windows && has_feature(\"thumb-mode\"))\n+}\n+\n+fn frame_pointer_r11(\n+    _arch: InlineAsmArch,\n+    has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+    _allocating: bool,\n+) -> Result<(), &'static str> {\n+    if !frame_pointer_is_r7(has_feature, target) {\n+        Err(\"the frame pointer (r11) cannot be used as an operand for inline asm\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn frame_pointer_r7(\n+    _arch: InlineAsmArch,\n+    has_feature: impl FnMut(&str) -> bool,\n+    target: &Target,\n+    _allocating: bool,\n+) -> Result<(), &'static str> {\n+    if frame_pointer_is_r7(has_feature, target) {\n+        Err(\"the frame pointer (r7) cannot be used as an operand for inline asm\")\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n def_regs! {\n     Arm ArmInlineAsmReg ArmInlineAsmRegClass {\n         r0: reg, reg_thumb = [\"r0\", \"a1\"],\n@@ -66,11 +98,11 @@ def_regs! {\n         r3: reg, reg_thumb = [\"r3\", \"a4\"],\n         r4: reg, reg_thumb = [\"r4\", \"v1\"],\n         r5: reg, reg_thumb = [\"r5\", \"v2\"],\n-        r6: reg, reg_thumb = [\"r6\", \"v3\"],\n-        r7: reg, reg_thumb = [\"r7\", \"v4\"],\n+        r7: reg, reg_thumb = [\"r7\", \"v4\"] % frame_pointer_r7,\n         r8: reg = [\"r8\", \"v5\"],\n         r9: reg = [\"r9\", \"v6\", \"rfp\"],\n         r10: reg = [\"r10\", \"sl\"],\n+        r11: reg = [\"r11\", \"fp\"] % frame_pointer_r11,\n         r12: reg = [\"r12\", \"ip\"],\n         r14: reg = [\"r14\", \"lr\"],\n         s0: sreg, sreg_low16 = [\"s0\"],\n@@ -153,8 +185,8 @@ def_regs! {\n         q13: qreg = [\"q13\"],\n         q14: qreg = [\"q14\"],\n         q15: qreg = [\"q15\"],\n-        #error = [\"r11\", \"fp\"] =>\n-            \"the frame pointer cannot be used as an operand for inline asm\",\n+        #error = [\"r6\", \"v3\"] =>\n+            \"r6 is used internally by LLVM and cannot be used as an operand for inline asm\",\n         #error = [\"r13\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r15\", \"pc\"] =>"}, {"sha": "ccec17817d37df6b0de2920cbe2a7d95fb862fef", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,4 +1,5 @@\n use crate::abi::Size;\n+use crate::spec::Target;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_macros::HashStable_Generic;\n use rustc_span::Symbol;\n@@ -83,12 +84,13 @@ macro_rules! def_regs {\n             pub fn parse(\n                 _arch: super::InlineAsmArch,\n                 mut _has_feature: impl FnMut(&str) -> bool,\n+                _target: &crate::spec::Target,\n                 name: &str,\n             ) -> Result<Self, &'static str> {\n                 match name {\n                     $(\n                         $($alias)|* | $reg_name => {\n-                            $($filter(_arch, &mut _has_feature, false)?;)?\n+                            $($filter(_arch, &mut _has_feature, _target, false)?;)?\n                             Ok(Self::$reg)\n                         }\n                     )*\n@@ -103,6 +105,7 @@ macro_rules! def_regs {\n         pub(super) fn fill_reg_map(\n             _arch: super::InlineAsmArch,\n             mut _has_feature: impl FnMut(&str) -> bool,\n+            _target: &crate::spec::Target,\n             _map: &mut rustc_data_structures::fx::FxHashMap<\n                 super::InlineAsmRegClass,\n                 rustc_data_structures::fx::FxHashSet<super::InlineAsmReg>,\n@@ -111,7 +114,7 @@ macro_rules! def_regs {\n             #[allow(unused_imports)]\n             use super::{InlineAsmReg, InlineAsmRegClass};\n             $(\n-                if $($filter(_arch, &mut _has_feature, true).is_ok() &&)? true {\n+                if $($filter(_arch, &mut _has_feature, _target, true).is_ok() &&)? true {\n                     if let Some(set) = _map.get_mut(&InlineAsmRegClass::$arch($arch_regclass::$class)) {\n                         set.insert(InlineAsmReg::$arch($arch_reg::$reg));\n                     }\n@@ -234,27 +237,30 @@ impl InlineAsmReg {\n     pub fn parse(\n         arch: InlineAsmArch,\n         has_feature: impl FnMut(&str) -> bool,\n+        target: &Target,\n         name: Symbol,\n     ) -> Result<Self, &'static str> {\n         // FIXME: use direct symbol comparison for register names\n         // Use `Symbol::as_str` instead of `Symbol::with` here because `has_feature` may access `Symbol`.\n         let name = name.as_str();\n         Ok(match arch {\n             InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n-                Self::X86(X86InlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::X86(X86InlineAsmReg::parse(arch, has_feature, target, &name)?)\n+            }\n+            InlineAsmArch::Arm => {\n+                Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n-            InlineAsmArch::Arm => Self::Arm(ArmInlineAsmReg::parse(arch, has_feature, &name)?),\n             InlineAsmArch::AArch64 => {\n-                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::AArch64(AArch64InlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n-                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::RiscV(RiscVInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::Nvptx64 => {\n-                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::Nvptx(NvptxInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n             InlineAsmArch::Hexagon => {\n-                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, &name)?)\n+                Self::Hexagon(HexagonInlineAsmReg::parse(arch, has_feature, target, &name)?)\n             }\n         })\n     }\n@@ -536,36 +542,37 @@ impl fmt::Display for InlineAsmType {\n pub fn allocatable_registers(\n     arch: InlineAsmArch,\n     has_feature: impl FnMut(&str) -> bool,\n+    target: &crate::spec::Target,\n ) -> FxHashMap<InlineAsmRegClass, FxHashSet<InlineAsmReg>> {\n     match arch {\n         InlineAsmArch::X86 | InlineAsmArch::X86_64 => {\n             let mut map = x86::regclass_map();\n-            x86::fill_reg_map(arch, has_feature, &mut map);\n+            x86::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::Arm => {\n             let mut map = arm::regclass_map();\n-            arm::fill_reg_map(arch, has_feature, &mut map);\n+            arm::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::AArch64 => {\n             let mut map = aarch64::regclass_map();\n-            aarch64::fill_reg_map(arch, has_feature, &mut map);\n+            aarch64::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::RiscV32 | InlineAsmArch::RiscV64 => {\n             let mut map = riscv::regclass_map();\n-            riscv::fill_reg_map(arch, has_feature, &mut map);\n+            riscv::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::Nvptx64 => {\n             let mut map = nvptx::regclass_map();\n-            nvptx::fill_reg_map(arch, has_feature, &mut map);\n+            nvptx::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n         InlineAsmArch::Hexagon => {\n             let mut map = hexagon::regclass_map();\n-            hexagon::fill_reg_map(arch, has_feature, &mut map);\n+            hexagon::fill_reg_map(arch, has_feature, target, &mut map);\n             map\n         }\n     }"}, {"sha": "ced7483b00571580ea8879be8d511013bbfda31e", "filename": "src/librustc_target/asm/riscv.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Friscv.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -50,6 +51,7 @@ impl RiscVInlineAsmRegClass {\n fn not_e(\n     _arch: InlineAsmArch,\n     mut has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n     _allocating: bool,\n ) -> Result<(), &'static str> {\n     if has_feature(\"e\") {"}, {"sha": "0f62c19e1a3cde0ec0fcef2ff01bf788cfb34004", "filename": "src/librustc_target/asm/x86.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_target%2Fasm%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fx86.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,4 +1,5 @@\n use super::{InlineAsmArch, InlineAsmType};\n+use crate::spec::Target;\n use rustc_macros::HashStable_Generic;\n use std::fmt;\n \n@@ -131,6 +132,7 @@ impl X86InlineAsmRegClass {\n fn x86_64_only(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n     _allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {\n@@ -143,6 +145,7 @@ fn x86_64_only(\n fn high_byte(\n     arch: InlineAsmArch,\n     _has_feature: impl FnMut(&str) -> bool,\n+    _target: &Target,\n     allocating: bool,\n ) -> Result<(), &'static str> {\n     match arch {"}, {"sha": "2ade48927526215ac45c883b53aa41833643dbbb", "filename": "src/librustc_trait_selection/traits/chalk_fulfill.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -7,17 +7,17 @@ use crate::traits::{\n     ChalkEnvironmentAndGoal, ChalkEnvironmentClause, FulfillmentError, FulfillmentErrorCode,\n     ObligationCause, PredicateObligation, SelectionError, TraitEngine,\n };\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n pub struct FulfillmentContext<'tcx> {\n-    obligations: FxHashSet<PredicateObligation<'tcx>>,\n+    obligations: FxIndexSet<PredicateObligation<'tcx>>,\n }\n \n impl FulfillmentContext<'tcx> {\n     crate fn new() -> Self {\n-        FulfillmentContext { obligations: FxHashSet::default() }\n+        FulfillmentContext { obligations: FxIndexSet::default() }\n     }\n }\n \n@@ -79,7 +79,7 @@ fn environment<'tcx>(\n     };\n \n     // FIXME(eddyb) isn't the unordered nature of this a hazard?\n-    let mut inputs = FxHashSet::default();\n+    let mut inputs = FxIndexSet::default();\n \n     match node_kind {\n         // In a trait impl, we assume that the header trait ref and all its\n@@ -140,7 +140,8 @@ fn in_environment(\n         None if obligation.param_env.caller_bounds.is_empty() => ty::List::empty(),\n         // FIXME(chalk): this is hit in ui/where-clauses/where-clause-constraints-are-local-for-trait-impl\n         // and ui/generics/generic-static-methods\n-        _ => bug!(\"non-empty `ParamEnv` with no def-id\"),\n+        //_ => bug!(\"non-empty `ParamEnv` with no def-id\"),\n+        _ => ty::List::empty(),\n     };\n \n     ChalkEnvironmentAndGoal { environment, goal: obligation.predicate }\n@@ -195,15 +196,15 @@ impl TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         infcx: &InferCtxt<'_, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>> {\n         let mut errors = Vec::new();\n-        let mut next_round = FxHashSet::default();\n+        let mut next_round = FxIndexSet::default();\n         let mut making_progress;\n \n         loop {\n             making_progress = false;\n \n             // We iterate over all obligations, and record if we are able\n             // to unambiguously prove at least one obligation.\n-            for obligation in self.obligations.drain() {\n+            for obligation in self.obligations.drain(..) {\n                 let goal_in_environment = in_environment(infcx, &obligation);\n                 let mut orig_values = OriginalQueryValues::default();\n                 let canonical_goal ="}, {"sha": "079b9b10fd0901162a3745fd58f8ae3ecaf0dd0b", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -16,8 +16,8 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n-chalk-ir = \"0.11.0\"\n-chalk-solve = \"0.11.0\"\n+chalk-ir = \"0.14.0\"\n+chalk-solve = \"0.14.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }"}, {"sha": "715e5299a37bda7ec2e9e83595276e8190061969", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 146, "deletions": 34, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -8,7 +8,7 @@\n \n use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n-use rustc_middle::ty::{self, AssocItemContainer, AssocKind, Binder, TyCtxt};\n+use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n \n@@ -85,14 +85,29 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .iter()\n             .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n+        let associated_ty_ids: Vec<_> = self\n+            .tcx\n+            .associated_items(def_id)\n+            .in_definition_order()\n+            .filter(|i| i.kind == AssocKind::Type)\n+            .map(|i| chalk_ir::AssocTypeId(i.def_id))\n+            .collect();\n \n         let well_known =\n             if self.tcx.lang_items().sized_trait().map(|t| def_id == t).unwrap_or(false) {\n-                Some(chalk_solve::rust_ir::WellKnownTrait::SizedTrait)\n+                Some(chalk_solve::rust_ir::WellKnownTrait::Sized)\n             } else if self.tcx.lang_items().copy_trait().map(|t| def_id == t).unwrap_or(false) {\n-                Some(chalk_solve::rust_ir::WellKnownTrait::CopyTrait)\n+                Some(chalk_solve::rust_ir::WellKnownTrait::Copy)\n             } else if self.tcx.lang_items().clone_trait().map(|t| def_id == t).unwrap_or(false) {\n-                Some(chalk_solve::rust_ir::WellKnownTrait::CloneTrait)\n+                Some(chalk_solve::rust_ir::WellKnownTrait::Clone)\n+            } else if self.tcx.lang_items().drop_trait().map(|t| def_id == t).unwrap_or(false) {\n+                Some(chalk_solve::rust_ir::WellKnownTrait::Drop)\n+            } else if self.tcx.lang_items().fn_trait().map(|t| def_id == t).unwrap_or(false) {\n+                Some(chalk_solve::rust_ir::WellKnownTrait::Fn)\n+            } else if self.tcx.lang_items().fn_once_trait().map(|t| def_id == t).unwrap_or(false) {\n+                Some(chalk_solve::rust_ir::WellKnownTrait::FnOnce)\n+            } else if self.tcx.lang_items().fn_mut_trait().map(|t| def_id == t).unwrap_or(false) {\n+                Some(chalk_solve::rust_ir::WellKnownTrait::FnMut)\n             } else {\n                 None\n             };\n@@ -110,7 +125,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 non_enumerable: true,\n                 coinductive: false,\n             },\n-            associated_ty_ids: vec![],\n+            associated_ty_ids,\n             well_known,\n         })\n     }\n@@ -156,6 +171,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             flags: chalk_solve::rust_ir::AdtFlags {\n                 upstream: !adt_def.did.is_local(),\n                 fundamental: adt_def.is_fundamental(),\n+                phantom_data: adt_def.is_phantom_data(),\n             },\n         });\n         return struct_datum;\n@@ -176,28 +192,32 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n \n         let sig = self.tcx.fn_sig(def_id);\n-        // FIXME(chalk): collect into an intermediate SmallVec here since\n-        // we need `TypeFoldable` for `no_bound_vars`\n-        let argument_types: Binder<Vec<_>> =\n-            sig.map_bound(|i| i.inputs().iter().copied().collect());\n-        let argument_types = argument_types\n-            .no_bound_vars()\n-            .expect(\"FIXME(chalk): late-bound fn parameters not supported in chalk\")\n+        let inputs_and_output = sig.inputs_and_output();\n+        let (inputs_and_output, iobinders, _) = crate::chalk::lowering::collect_bound_vars(\n+            &self.interner,\n+            self.tcx,\n+            &inputs_and_output,\n+        );\n+\n+        let argument_types = inputs_and_output[..inputs_and_output.len() - 1]\n             .iter()\n             .map(|t| t.subst(self.tcx, &bound_vars).lower_into(&self.interner))\n             .collect();\n \n-        let return_type = sig\n-            .output()\n-            .no_bound_vars()\n-            .expect(\"FIXME(chalk): late-bound fn parameters not supported in chalk\")\n+        let return_type = inputs_and_output[inputs_and_output.len() - 1]\n             .subst(self.tcx, &bound_vars)\n             .lower_into(&self.interner);\n \n-        let bound =\n-            chalk_solve::rust_ir::FnDefDatumBound { argument_types, where_clauses, return_type };\n+        let bound = chalk_solve::rust_ir::FnDefDatumBound {\n+            inputs_and_output: chalk_ir::Binders::new(\n+                iobinders,\n+                chalk_solve::rust_ir::FnDefInputsAndOutputDatum { argument_types, return_type },\n+            ),\n+            where_clauses,\n+        };\n         Arc::new(chalk_solve::rust_ir::FnDefDatum {\n             id: fn_def_id,\n+            abi: sig.abi(),\n             binders: chalk_ir::Binders::new(binders, bound),\n         })\n     }\n@@ -326,9 +346,16 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         &self,\n         opaque_ty_id: chalk_ir::OpaqueTyId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::OpaqueTyDatum<RustInterner<'tcx>>> {\n-        // FIXME(chalk): actually lower opaque ty\n+        let bound_vars = bound_vars_for_item(self.tcx, opaque_ty_id.0);\n+        let binders = binders_for(&self.interner, bound_vars);\n+        let predicates = self.tcx.predicates_defined_on(opaque_ty_id.0).predicates;\n+        let where_clauses: Vec<_> = predicates\n+            .iter()\n+            .map(|(wc, _)| wc.subst(self.tcx, &bound_vars))\n+            .filter_map(|wc| LowerInto::<Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>>::lower_into(wc, &self.interner)).collect();\n+\n         let value = chalk_solve::rust_ir::OpaqueTyDatumBound {\n-            bounds: chalk_ir::Binders::new(chalk_ir::VariableKinds::new(&self.interner), vec![]),\n+            bounds: chalk_ir::Binders::new(binders, where_clauses),\n         };\n         Arc::new(chalk_solve::rust_ir::OpaqueTyDatum {\n             opaque_ty_id,\n@@ -346,7 +373,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Option<bool> {\n         use chalk_ir::TyData::*;\n         match well_known {\n-            chalk_solve::rust_ir::WellKnownTrait::SizedTrait => match ty {\n+            chalk_solve::rust_ir::WellKnownTrait::Sized => match ty {\n                 Apply(apply) => match apply.name {\n                     chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def)) => match adt_def.adt_kind() {\n                         ty::AdtKind::Struct | ty::AdtKind::Union => None,\n@@ -364,8 +391,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 | InferenceVar(_, _)\n                 | BoundVar(_) => None,\n             },\n-            chalk_solve::rust_ir::WellKnownTrait::CopyTrait\n-            | chalk_solve::rust_ir::WellKnownTrait::CloneTrait => match ty {\n+            chalk_solve::rust_ir::WellKnownTrait::Copy\n+            | chalk_solve::rust_ir::WellKnownTrait::Clone => match ty {\n                 Apply(apply) => match apply.name {\n                     chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def)) => match adt_def.adt_kind() {\n                         ty::AdtKind::Struct | ty::AdtKind::Union => None,\n@@ -383,7 +410,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n                 | InferenceVar(_, _)\n                 | BoundVar(_) => None,\n             },\n-            chalk_solve::rust_ir::WellKnownTrait::DropTrait => None,\n+            chalk_solve::rust_ir::WellKnownTrait::Drop => None,\n+            chalk_solve::rust_ir::WellKnownTrait::Fn => None,\n+            chalk_solve::rust_ir::WellKnownTrait::FnMut => None,\n+            chalk_solve::rust_ir::WellKnownTrait::FnOnce => None,\n+            chalk_solve::rust_ir::WellKnownTrait::Unsize => None,\n         }\n     }\n \n@@ -399,17 +430,17 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         well_known_trait: chalk_solve::rust_ir::WellKnownTrait,\n     ) -> Option<chalk_ir::TraitId<RustInterner<'tcx>>> {\n         use chalk_solve::rust_ir::WellKnownTrait::*;\n-        let t = match well_known_trait {\n-            SizedTrait => {\n-                self.tcx.lang_items().sized_trait().map(|t| chalk_ir::TraitId(t)).unwrap()\n-            }\n-            CopyTrait => self.tcx.lang_items().copy_trait().map(|t| chalk_ir::TraitId(t)).unwrap(),\n-            CloneTrait => {\n-                self.tcx.lang_items().clone_trait().map(|t| chalk_ir::TraitId(t)).unwrap()\n-            }\n-            DropTrait => self.tcx.lang_items().drop_trait().map(|t| chalk_ir::TraitId(t)).unwrap(),\n+        let def_id = match well_known_trait {\n+            Sized => self.tcx.lang_items().sized_trait(),\n+            Copy => self.tcx.lang_items().copy_trait(),\n+            Clone => self.tcx.lang_items().clone_trait(),\n+            Drop => self.tcx.lang_items().drop_trait(),\n+            Fn => self.tcx.lang_items().fn_trait(),\n+            FnMut => self.tcx.lang_items().fn_mut_trait(),\n+            FnOnce => self.tcx.lang_items().fn_once_trait(),\n+            Unsize => self.tcx.lang_items().unsize_trait(),\n         };\n-        Some(t)\n+        def_id.map(|t| chalk_ir::TraitId(t))\n     }\n \n     fn is_object_safe(&self, trait_id: chalk_ir::TraitId<RustInterner<'tcx>>) -> bool {\n@@ -423,6 +454,87 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         // FIXME(chalk): actually get hidden ty\n         self.tcx.mk_ty(ty::Tuple(self.tcx.intern_substs(&[]))).lower_into(&self.interner)\n     }\n+\n+    fn closure_kind(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n+        substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n+    ) -> chalk_solve::rust_ir::ClosureKind {\n+        let kind = &substs.parameters(&self.interner)[substs.len(&self.interner) - 3];\n+        match kind.assert_ty_ref(&self.interner).data(&self.interner) {\n+            chalk_ir::TyData::Apply(apply) => match apply.name {\n+                chalk_ir::TypeName::Scalar(scalar) => match scalar {\n+                    chalk_ir::Scalar::Int(int_ty) => match int_ty {\n+                        chalk_ir::IntTy::I8 => chalk_solve::rust_ir::ClosureKind::Fn,\n+                        chalk_ir::IntTy::I16 => chalk_solve::rust_ir::ClosureKind::FnMut,\n+                        chalk_ir::IntTy::I32 => chalk_solve::rust_ir::ClosureKind::FnOnce,\n+                        _ => bug!(\"bad closure kind\"),\n+                    },\n+                    _ => bug!(\"bad closure kind\"),\n+                },\n+                _ => bug!(\"bad closure kind\"),\n+            },\n+            _ => bug!(\"bad closure kind\"),\n+        }\n+    }\n+\n+    fn closure_inputs_and_output(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n+        substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Binders<chalk_solve::rust_ir::FnDefInputsAndOutputDatum<RustInterner<'tcx>>>\n+    {\n+        let sig = &substs.parameters(&self.interner)[substs.len(&self.interner) - 2];\n+        match sig.assert_ty_ref(&self.interner).data(&self.interner) {\n+            chalk_ir::TyData::Function(f) => {\n+                let substitution = f.substitution.parameters(&self.interner);\n+                let return_type =\n+                    substitution.last().unwrap().assert_ty_ref(&self.interner).clone();\n+                // Closure arguments are tupled\n+                let argument_tuple = substitution[0].assert_ty_ref(&self.interner);\n+                let argument_types = match argument_tuple.data(&self.interner) {\n+                    chalk_ir::TyData::Apply(apply) => match apply.name {\n+                        chalk_ir::TypeName::Tuple(_) => apply\n+                            .substitution\n+                            .iter(&self.interner)\n+                            .map(|arg| arg.assert_ty_ref(&self.interner))\n+                            .cloned()\n+                            .collect(),\n+                        _ => bug!(\"Expecting closure FnSig args to be tupled.\"),\n+                    },\n+                    _ => bug!(\"Expecting closure FnSig args to be tupled.\"),\n+                };\n+\n+                chalk_ir::Binders::new(\n+                    chalk_ir::VariableKinds::from(\n+                        &self.interner,\n+                        (0..f.num_binders).map(|_| chalk_ir::VariableKind::Lifetime),\n+                    ),\n+                    chalk_solve::rust_ir::FnDefInputsAndOutputDatum { argument_types, return_type },\n+                )\n+            }\n+            _ => panic!(\"Invalid sig.\"),\n+        }\n+    }\n+\n+    fn closure_upvars(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n+        substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Binders<chalk_ir::Ty<RustInterner<'tcx>>> {\n+        let inputs_and_output = self.closure_inputs_and_output(_closure_id, substs);\n+        let tuple = substs.parameters(&self.interner).last().unwrap().assert_ty_ref(&self.interner);\n+        inputs_and_output.map_ref(|_| tuple.clone())\n+    }\n+\n+    fn closure_fn_substitution(\n+        &self,\n+        _closure_id: chalk_ir::ClosureId<RustInterner<'tcx>>,\n+        substs: &chalk_ir::Substitution<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Substitution<RustInterner<'tcx>> {\n+        let substitution = &substs.parameters(&self.interner)[0..substs.len(&self.interner) - 3];\n+        chalk_ir::Substitution::from(&self.interner, substitution)\n+    }\n }\n \n /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked"}, {"sha": "e09359b8b3fc13ba6d02e1d1b8dafedc80fa89f2", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -43,6 +43,8 @@ use rustc_span::def_id::DefId;\n \n use std::collections::btree_map::{BTreeMap, Entry};\n \n+use chalk_ir::fold::shift::Shift;\n+\n /// Essentially an `Into` with a `&RustInterner` parameter\n crate trait LowerInto<'tcx, T> {\n     /// Lower a rustc construct (e.g., `ty::TraitPredicate`) to a chalk type, consuming `self`.\n@@ -82,7 +84,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                             collect_bound_vars(interner, interner.tcx, predicate);\n \n                         Some(\n-                            chalk_ir::ProgramClauseData::ForAll(chalk_ir::Binders::new(\n+                            chalk_ir::ProgramClauseData(chalk_ir::Binders::new(\n                                 binders,\n                                 chalk_ir::ProgramClauseImplication {\n                                     consequence: chalk_ir::DomainGoal::FromEnv(\n@@ -102,7 +104,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                             collect_bound_vars(interner, interner.tcx, predicate);\n \n                         Some(\n-                            chalk_ir::ProgramClauseData::ForAll(chalk_ir::Binders::new(\n+                            chalk_ir::ProgramClauseData(chalk_ir::Binders::new(\n                                 binders,\n                                 chalk_ir::ProgramClauseImplication {\n                                     consequence: chalk_ir::DomainGoal::Holds(\n@@ -127,7 +129,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                             collect_bound_vars(interner, interner.tcx, predicate);\n \n                         Some(\n-                            chalk_ir::ProgramClauseData::ForAll(chalk_ir::Binders::new(\n+                            chalk_ir::ProgramClauseData(chalk_ir::Binders::new(\n                                 binders,\n                                 chalk_ir::ProgramClauseImplication {\n                                     consequence: chalk_ir::DomainGoal::Holds(\n@@ -153,13 +155,16 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                 }\n             }\n             ChalkEnvironmentClause::TypeFromEnv(ty) => Some(\n-                chalk_ir::ProgramClauseData::Implies(chalk_ir::ProgramClauseImplication {\n-                    consequence: chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(\n-                        ty.lower_into(interner),\n-                    )),\n-                    conditions: chalk_ir::Goals::new(interner),\n-                    priority: chalk_ir::ClausePriority::High,\n-                })\n+                chalk_ir::ProgramClauseData(chalk_ir::Binders::new(\n+                    chalk_ir::VariableKinds::new(interner),\n+                    chalk_ir::ProgramClauseImplication {\n+                        consequence: chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(\n+                            ty.lower_into(interner).shifted_in(interner),\n+                        )),\n+                        conditions: chalk_ir::Goals::new(interner),\n+                        priority: chalk_ir::ClausePriority::High,\n+                    },\n+                ))\n                 .intern(interner),\n             ),\n         });\n@@ -416,12 +421,15 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 })\n                 .intern(interner)\n             }\n-            // FIXME(chalk): add region\n-            Dynamic(predicates, _region) => {\n-                TyData::Dyn(chalk_ir::DynTy { bounds: predicates.lower_into(interner) })\n-                    .intern(interner)\n-            }\n-            Closure(_def_id, _) => unimplemented!(),\n+            Dynamic(predicates, region) => TyData::Dyn(chalk_ir::DynTy {\n+                bounds: predicates.lower_into(interner),\n+                lifetime: region.lower_into(interner),\n+            })\n+            .intern(interner),\n+            Closure(def_id, substs) => apply(\n+                chalk_ir::TypeName::Closure(chalk_ir::ClosureId(def_id)),\n+                substs.lower_into(interner),\n+            ),\n             Generator(_def_id, _substs, _) => unimplemented!(),\n             GeneratorWitness(_) => unimplemented!(),\n             Never => apply(chalk_ir::TypeName::Never, empty()),\n@@ -624,7 +632,7 @@ crate fn collect_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>>(\n     }\n \n     (0..parameters.len()).for_each(|i| {\n-        parameters.get(&(i as u32)).expect(\"Skipped bound var index.\");\n+        parameters.get(&(i as u32)).expect(&format!(\"Skipped bound var index `{:?}`.\", i));\n     });\n \n     let binders = chalk_ir::VariableKinds::from(interner, parameters.into_iter().map(|(_, v)| v));"}, {"sha": "52ec0f2409dce47acb64cec990cafa8a7bf72e95", "filename": "src/librustc_traits/chalk/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustc_traits%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fmod.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -133,6 +133,7 @@ crate fn evaluate_goal<'tcx>(\n                             },\n                             chalk_ir::TypeName::Array => unimplemented!(),\n                             chalk_ir::TypeName::FnDef(_) => unimplemented!(),\n+                            chalk_ir::TypeName::Closure(_) => unimplemented!(),\n                             chalk_ir::TypeName::Never => unimplemented!(),\n                             chalk_ir::TypeName::Tuple(_size) => unimplemented!(),\n                             chalk_ir::TypeName::Slice => unimplemented!(),"}, {"sha": "78628b198a3c3f73ab6740774273aecf31825f73", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -278,7 +278,7 @@ fn build_type_alias_type(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type>\n     type_.def_id().and_then(|did| build_ty(cx, did))\n }\n \n-pub fn build_ty(cx: &DocContext, did: DefId) -> Option<clean::Type> {\n+pub fn build_ty(cx: &DocContext<'_>, did: DefId) -> Option<clean::Type> {\n     match cx.tcx.def_kind(did) {\n         DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::Const | DefKind::Static => {\n             Some(cx.tcx.type_of(did).clean(cx))"}, {"sha": "2d99b2fd134198b97b289b2e40fefb20e153b82b", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -328,7 +328,7 @@ pub fn strip_path(path: &Path) -> Path {\n     Path { global: path.global, res: path.res, segments }\n }\n \n-pub fn qpath_to_string(p: &hir::QPath) -> String {\n+pub fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n     let segments = match *p {\n         hir::QPath::Resolved(_, ref path) => &path.segments,\n         hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n@@ -417,7 +417,7 @@ impl ToSource for rustc_span::Span {\n     }\n }\n \n-pub fn name_from_pat(p: &hir::Pat) -> String {\n+pub fn name_from_pat(p: &hir::Pat<'_>) -> String {\n     use rustc_hir::*;\n     debug!(\"trying to get a name from pattern: {:?}\", p);\n "}, {"sha": "943729a74ab2d7e07040ac17df31eb459ff583c5", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -262,7 +262,7 @@ pub struct ProcMacro<'hir> {\n     pub whence: Span,\n }\n \n-pub fn struct_type_from_def(vdata: &hir::VariantData) -> StructType {\n+pub fn struct_type_from_def(vdata: &hir::VariantData<'_>) -> StructType {\n     match *vdata {\n         hir::VariantData::Struct(..) => Plain,\n         hir::VariantData::Tuple(..) => Tuple,"}, {"sha": "62a23298c1b9f215bb09bab134a21c90acb56ea4", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1408,6 +1408,7 @@ function defocusSearchBar() {\n \n                     addClass(actives[currentTab][0].previousElementSibling, \"highlighted\");\n                     removeClass(actives[currentTab][0], \"highlighted\");\n+                    e.preventDefault();\n                 } else if (e.which === 40) { // down\n                     if (!actives[currentTab].length) {\n                         var results = document.getElementById(\"results\").childNodes;\n@@ -1421,6 +1422,7 @@ function defocusSearchBar() {\n                         addClass(actives[currentTab][0].nextElementSibling, \"highlighted\");\n                         removeClass(actives[currentTab][0], \"highlighted\");\n                     }\n+                    e.preventDefault();\n                 } else if (e.which === 13) { // return\n                     if (actives[currentTab].length) {\n                         document.location.href ="}, {"sha": "e9504aa3af123ee5082fe51fd63771d18197d32b", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -166,7 +166,7 @@ pub fn run(options: Options) -> Result<(), String> {\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n-fn scrape_test_config(krate: &::rustc_hir::Crate) -> TestOptions {\n+fn scrape_test_config(krate: &::rustc_hir::Crate<'_>) -> TestOptions {\n     use rustc_ast_pretty::pprust;\n \n     let mut opts =\n@@ -973,7 +973,7 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         intravisit::NestedVisitorMap::All(self.map)\n     }\n \n-    fn visit_item(&mut self, item: &'hir hir::Item) {\n+    fn visit_item(&mut self, item: &'hir hir::Item<'_>) {\n         let name = if let hir::ItemKind::Impl { ref self_ty, .. } = item.kind {\n             rustc_hir_pretty::id_to_string(&self.map, self_ty.hir_id)\n         } else {\n@@ -985,42 +985,42 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         });\n     }\n \n-    fn visit_trait_item(&mut self, item: &'hir hir::TraitItem) {\n+    fn visit_trait_item(&mut self, item: &'hir hir::TraitItem<'_>) {\n         self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n             intravisit::walk_trait_item(this, item);\n         });\n     }\n \n-    fn visit_impl_item(&mut self, item: &'hir hir::ImplItem) {\n+    fn visit_impl_item(&mut self, item: &'hir hir::ImplItem<'_>) {\n         self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n             intravisit::walk_impl_item(this, item);\n         });\n     }\n \n-    fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem) {\n+    fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem<'_>) {\n         self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n             intravisit::walk_foreign_item(this, item);\n         });\n     }\n \n     fn visit_variant(\n         &mut self,\n-        v: &'hir hir::Variant,\n-        g: &'hir hir::Generics,\n+        v: &'hir hir::Variant<'_>,\n+        g: &'hir hir::Generics<'_>,\n         item_id: hir::HirId,\n     ) {\n         self.visit_testable(v.ident.to_string(), &v.attrs, v.id, v.span, |this| {\n             intravisit::walk_variant(this, v, g, item_id);\n         });\n     }\n \n-    fn visit_struct_field(&mut self, f: &'hir hir::StructField) {\n+    fn visit_struct_field(&mut self, f: &'hir hir::StructField<'_>) {\n         self.visit_testable(f.ident.to_string(), &f.attrs, f.hir_id, f.span, |this| {\n             intravisit::walk_struct_field(this, f);\n         });\n     }\n \n-    fn visit_macro_def(&mut self, macro_def: &'hir hir::MacroDef) {\n+    fn visit_macro_def(&mut self, macro_def: &'hir hir::MacroDef<'_>) {\n         self.visit_testable(\n             macro_def.ident.to_string(),\n             &macro_def.attrs,"}, {"sha": "c18f417e4f8e1173ab61fcb969df0bd53ef83e8f", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         self.exact_paths.entry(did).or_insert_with(|| def_id_to_path(tcx, did));\n     }\n \n-    pub fn visit(mut self, krate: &'tcx hir::Crate) -> Module<'tcx> {\n+    pub fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(\n             krate.item.span,\n             krate.item.attrs,\n@@ -84,10 +84,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_variant_data(\n         &mut self,\n-        item: &'tcx hir::Item,\n+        item: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        sd: &'tcx hir::VariantData,\n-        generics: &'tcx hir::Generics,\n+        sd: &'tcx hir::VariantData<'_>,\n+        generics: &'tcx hir::Generics<'_>,\n     ) -> Struct<'tcx> {\n         debug!(\"visiting struct\");\n         let struct_type = struct_type_from_def(&*sd);\n@@ -105,10 +105,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_union_data(\n         &mut self,\n-        item: &'tcx hir::Item,\n+        item: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        sd: &'tcx hir::VariantData,\n-        generics: &'tcx hir::Generics,\n+        sd: &'tcx hir::VariantData<'_>,\n+        generics: &'tcx hir::Generics<'_>,\n     ) -> Union<'tcx> {\n         debug!(\"visiting union\");\n         let struct_type = struct_type_from_def(&*sd);\n@@ -126,10 +126,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_enum_def(\n         &mut self,\n-        it: &'tcx hir::Item,\n+        it: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        def: &'tcx hir::EnumDef,\n-        generics: &'tcx hir::Generics,\n+        def: &'tcx hir::EnumDef<'_>,\n+        generics: &'tcx hir::Generics<'_>,\n     ) -> Enum<'tcx> {\n         debug!(\"visiting enum\");\n         Enum {\n@@ -156,11 +156,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_fn(\n         &mut self,\n         om: &mut Module<'tcx>,\n-        item: &'tcx hir::Item,\n+        item: &'tcx hir::Item<'_>,\n         name: Symbol,\n-        decl: &'tcx hir::FnDecl,\n+        decl: &'tcx hir::FnDecl<'_>,\n         header: hir::FnHeader,\n-        generics: &'tcx hir::Generics,\n+        generics: &'tcx hir::Generics<'_>,\n         body: hir::BodyId,\n     ) {\n         debug!(\"visiting fn\");\n@@ -231,7 +231,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         span: Span,\n         attrs: &'tcx [ast::Attribute],\n-        vis: &'tcx hir::Visibility,\n+        vis: &'tcx hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Option<Symbol>,\n@@ -375,7 +375,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item, renamed: Option<Ident>, om: &mut Module<'tcx>) {\n+    fn visit_item(\n+        &mut self,\n+        item: &'tcx hir::Item<'_>,\n+        renamed: Option<Ident>,\n+        om: &mut Module<'tcx>,\n+    ) {\n         debug!(\"visiting item {:?}\", item);\n         let ident = renamed.unwrap_or(item.ident);\n \n@@ -587,7 +592,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n \n     fn visit_foreign_item(\n         &mut self,\n-        item: &'tcx hir::ForeignItem,\n+        item: &'tcx hir::ForeignItem<'_>,\n         renamed: Option<Ident>,\n         om: &mut Module<'tcx>,\n     ) {\n@@ -607,7 +612,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     }\n \n     // Convert each `exported_macro` into a doc item.\n-    fn visit_local_macro(&self, def: &'tcx hir::MacroDef, renamed: Option<Symbol>) -> Macro<'tcx> {\n+    fn visit_local_macro(\n+        &self,\n+        def: &'tcx hir::MacroDef<'_>,\n+        renamed: Option<Symbol>,\n+    ) -> Macro<'tcx> {\n         debug!(\"visit_local_macro: {}\", def.ident);\n         let tts = def.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro."}, {"sha": "0d7dca3aba3446373d5ca6aadeaacbab1b74e921", "filename": "src/test/codegen/debug-linkage-name.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -0,0 +1,42 @@\n+// Verifies that linkage name is omitted when it is\n+// the same as variable / function name.\n+//\n+// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C debuginfo=2\n+#![crate_type = \"lib\"]\n+\n+pub mod xyz {\n+    // CHECK: !DIGlobalVariable(name: \"A\",\n+    // CHECK:                   linkageName:\n+    // CHECK-SAME:              line: 12,\n+    pub static A: u32 = 1;\n+\n+    // CHECK: !DIGlobalVariable(name: \"B\",\n+    // CHECK-NOT:               linkageName:\n+    // CHECK-SAME:              line: 18,\n+    #[no_mangle]\n+    pub static B: u32 = 2;\n+\n+    // CHECK: !DIGlobalVariable(name: \"C\",\n+    // CHECK-NOT:               linkageName:\n+    // CHECK-SAME:              line: 24,\n+    #[export_name = \"C\"]\n+    pub static C: u32 = 2;\n+\n+    // CHECK: !DISubprogram(name: \"e\",\n+    // CHECK:               linkageName:\n+    // CHECK-SAME:          line: 29,\n+    pub extern fn e() {}\n+\n+    // CHECK: !DISubprogram(name: \"f\",\n+    // CHECK-NOT:           linkageName:\n+    // CHECK-SAME:          line: 35,\n+    #[no_mangle]\n+    pub extern fn f() {}\n+\n+    // CHECK: !DISubprogram(name: \"g\",\n+    // CHECK-NOT:           linkageName:\n+    // CHECK-SAME:          line: 41,\n+    #[export_name = \"g\"]\n+    pub extern fn g() {}\n+}"}, {"sha": "81114d491d78ebaab04bb300b65ef4cda22f0784", "filename": "src/test/ui/chalkify/closure.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -0,0 +1,39 @@\n+// check-fail\n+// compile-flags: -Z chalk\n+\n+fn main() -> () {\n+    let t = || {};\n+    t();\n+\n+    let mut a = 0;\n+    let mut b = move || {\n+        a = 1;\n+    };\n+    b();\n+\n+    let mut c = b;\n+\n+    c();\n+    b();\n+\n+    let mut a = 0;\n+    let mut b = || {\n+        a = 1;\n+    };\n+    b();\n+\n+    let mut c = b;\n+\n+    c();\n+    b(); //~ ERROR\n+\n+    // FIXME(chalk): this doesn't quite work\n+    /*\n+    let b = |c| {\n+        c\n+    };\n+\n+    let a = &32;\n+    b(a);\n+    */\n+}"}, {"sha": "d5a48a7dc6f950266ba5262d67d1090a79c664c0", "filename": "src/test/ui/chalkify/closure.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fclosure.stderr?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -0,0 +1,18 @@\n+error[E0382]: borrow of moved value: `b`\n+  --> $DIR/closure.rs:28:5\n+   |\n+LL |     let mut c = b;\n+   |                 - value moved here\n+...\n+LL |     b();\n+   |     ^ value borrowed here after move\n+   |\n+note: closure cannot be moved more than once as it is not `Copy` due to moving the variable `a` out of its environment\n+  --> $DIR/closure.rs:21:9\n+   |\n+LL |         a = 1;\n+   |         ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "465eb10241ea20d9e38962bdc3474a094f3b9f84", "filename": "src/test/ui/chalkify/impl_wf.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -23,15 +23,10 @@ impl<T> Bar for Option<T> {\n     type Item = Option<T>;\n }\n \n-// FIXME(chalk): the ordering of these two errors differs between CI and local\n-// We need to figure out why its non-deterministic\n-/*\n impl Bar for f32 {\n-//^ ERROR the trait bound `f32: Foo` is not satisfied\n     type Item = f32;\n-    //^ ERROR the trait bound `f32: Foo` is not satisfied\n+    //~^ ERROR the trait bound `f32: Foo` is not satisfied\n }\n-*/\n \n trait Baz<U: ?Sized> where U: Foo { }\n "}, {"sha": "e5d7615e43e31f484912f15afa25d02c2457ab3d", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -11,14 +11,25 @@ LL | impl Foo for str { }\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n-  --> $DIR/impl_wf.rs:40:6\n+  --> $DIR/impl_wf.rs:27:17\n+   |\n+LL | trait Bar {\n+   |       --- required by a bound in this\n+LL |     type Item: Foo;\n+   |                --- required by this bound in `Bar`\n+...\n+LL |     type Item = f32;\n+   |                 ^^^ the trait `Foo` is not implemented for `f32`\n+\n+error[E0277]: the trait bound `f32: Foo` is not satisfied\n+  --> $DIR/impl_wf.rs:35:6\n    |\n LL | trait Baz<U: ?Sized> where U: Foo { }\n    |                               --- required by this bound in `Baz`\n ...\n LL | impl Baz<f32> for f32 { }\n    |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a2730219fbe2ac0d1a7b70d386ee758961846aa0", "filename": "src/test/ui/chalkify/inherent_impl.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Finherent_impl.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n // compile-flags: -Z chalk\n-// FIXME(chalk): remove when uncommented\n-#![allow(dead_code, unused_variables)]\n \n trait Foo { }\n \n@@ -11,8 +9,6 @@ struct S<T: Foo> {\n     x: T,\n }\n \n-// FIXME(chalk): need late-bound regions on FnDefs\n-/*\n fn only_foo<T: Foo>(_x: &T) { }\n \n impl<T> S<T> {\n@@ -21,7 +17,6 @@ impl<T> S<T> {\n         only_foo(&self.x)\n     }\n }\n-*/\n \n trait Bar { }\n impl Bar for u32 { }\n@@ -31,27 +26,17 @@ fn only_bar<T: Bar>() { }\n impl<T> S<T> {\n     // Test that the environment of `dummy_bar` adds up with the environment\n     // of the inherent impl.\n-    // FIXME(chalk): need late-bound regions on FnDefs\n-    /*\n     fn dummy_bar<U: Bar>(&self) {\n         only_foo(&self.x);\n         only_bar::<U>();\n     }\n-    */\n-    fn dummy_bar<U: Bar>() {\n-        only_bar::<U>();\n-    }\n }\n \n fn main() {\n     let s = S {\n         x: 5,\n     };\n \n-    // FIXME(chalk): need late-bound regions on FnDefs\n-    /*\n-    s.dummy_foo();\n     s.dummy_bar::<u32>();\n-    */\n-    S::<i32>::dummy_bar::<u32>();\n+    s.dummy_foo();\n }"}, {"sha": "87324a5f79bdd760da0e9c63e6b822764bbcb874", "filename": "src/test/ui/chalkify/recursive_where_clause_on_type.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,5 +1,5 @@\n // FIXME(chalk): should fail, see comments\n-// check-pass\n+// check-fail\n // compile-flags: -Z chalk\n \n #![feature(trivial_bounds)]\n@@ -10,7 +10,6 @@ trait Bar {\n trait Foo: Bar { }\n \n struct S where S: Foo;\n-//~^ WARN Trait bound S: Foo does not depend on any type or lifetime parameters\n \n impl Foo for S {\n }\n@@ -26,10 +25,6 @@ fn foo<T: Foo>() {\n fn main() {\n     // For some reason, the error is duplicated...\n \n-    // FIXME(chalk): this order of this duplicate error seems non-determistic\n-    // and causes test to fail\n-    /*\n-    foo::<S>() // ERROR the type `S` is not well-formed (chalk)\n-    //^ ERROR the type `S` is not well-formed (chalk)\n-    */\n+    foo::<S>() //~ ERROR the type `S` is not well-formed (chalk)\n+    //~^ ERROR the type `S` is not well-formed (chalk)\n }"}, {"sha": "fddd58959278efb72c4129873cf78306a4e9f911", "filename": "src/test/ui/chalkify/recursive_where_clause_on_type.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Frecursive_where_clause_on_type.stderr?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,10 +1,14 @@\n-warning: Trait bound S: Foo does not depend on any type or lifetime parameters\n-  --> $DIR/recursive_where_clause_on_type.rs:12:19\n+error: the type `S` is not well-formed (chalk)\n+  --> $DIR/recursive_where_clause_on_type.rs:28:11\n    |\n-LL | struct S where S: Foo;\n-   |                   ^^^\n+LL |     foo::<S>()\n+   |           ^\n+\n+error: the type `S` is not well-formed (chalk)\n+  --> $DIR/recursive_where_clause_on_type.rs:28:5\n    |\n-   = note: `#[warn(trivial_bounds)]` on by default\n+LL |     foo::<S>()\n+   |     ^^^^^^^^\n \n-warning: 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "614e25589601e8664f613640ed93100b2663bf68", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -4,8 +4,6 @@\n //! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n //! by rustbuild (in `src/bootstrap/dist.rs`).\n \n-#![deny(warnings)]\n-\n use serde::Serialize;\n \n use std::collections::BTreeMap;"}, {"sha": "ecaeda68695a703737aa9608861305bcbc2ba783", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,5 +1,3 @@\n-#![deny(warnings)]\n-\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};"}, {"sha": "e19a79dd8dad164dd40cc84a1a37f52740bb5bca", "filename": "src/tools/clippy/clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -476,7 +476,7 @@ pub fn eq_generic_param(l: &GenericParam, r: &GenericParam) -> bool {\n         && match (&l.kind, &r.kind) {\n             (Lifetime, Lifetime) => true,\n             (Type { default: l }, Type { default: r }) => both(l, r, |l, r| eq_ty(l, r)),\n-            (Const { ty: l }, Const { ty: r }) => eq_ty(l, r),\n+            (Const { ty: l, kw_span: _ }, Const { ty: r, kw_span: _ }) => eq_ty(l, r),\n             _ => false,\n         }\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))"}, {"sha": "2aea4d22700f396782b28218100140ccdfb5ae03", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,5 +1,4 @@\n #![crate_name = \"compiletest\"]\n-#![deny(warnings)]\n // The `test` crate is the only unstable feature\n // allowed here, just to share similar code.\n #![feature(test)]"}, {"sha": "097fb1f985a746e42ad6eec1f5acbcf715994e69", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,5 +1,4 @@\n #![feature(rustc_private)]\n-#![deny(warnings)]\n \n extern crate env_logger;\n extern crate rustc_ast;"}, {"sha": "d8dad8fc789e931ed24cb1c29eaa656609166fd4", "filename": "src/tools/expand-yaml-anchors/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -165,7 +165,7 @@ struct StrError(String);\n impl Error for StrError {}\n \n impl std::fmt::Display for StrError {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(&self.0, f)\n     }\n }\n@@ -177,7 +177,7 @@ struct WithContext {\n }\n \n impl std::fmt::Display for WithContext {\n-    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{}\", self.context)\n     }\n }"}, {"sha": "9e4e2c433fbedb9782adea84b1882ca21d225b5f", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -14,8 +14,6 @@\n //! A few whitelisted exceptions are allowed as there's known bugs in rustdoc,\n //! but this should catch the majority of \"broken link\" cases.\n \n-#![deny(warnings)]\n-\n use std::collections::hash_map::Entry;\n use std::collections::{HashMap, HashSet};\n use std::env;"}, {"sha": "6245b76fd6e845108a9eb7f89d41a8ee3206a81b", "filename": "src/tools/remote-test-client/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-client%2Fsrc%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -5,8 +5,6 @@\n //! Here is also where we bake in the support to spawn the QEMU emulator as\n //! well.\n \n-#![deny(warnings)]\n-\n use std::env;\n use std::fs::{self, File};\n use std::io::prelude::*;"}, {"sha": "d92758eb7474cda8ec9f3db0cf69f78cfe233235", "filename": "src/tools/remote-test-server/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fremote-test-server%2Fsrc%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -10,8 +10,6 @@\n //! themselves having support libraries. All data over the TCP sockets is in a\n //! basically custom format suiting our needs.\n \n-#![deny(warnings)]\n-\n #[cfg(not(windows))]\n use std::fs::Permissions;\n #[cfg(not(windows))]"}, {"sha": "2d105c7f33a2b25cb3ee5637883469fb0041b7eb", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -4,8 +4,6 @@\n //! etc. This is run by default on `./x.py test` and as part of the auto\n //! builders. The tidy checks can be executed with `./x.py test tidy`.\n \n-#![deny(warnings)]\n-\n use tidy::*;\n \n use std::env;"}, {"sha": "7e77ae1db0d1b05c7dd54251c3c86a9199215702", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -67,6 +67,7 @@ const EXCEPTION_PATHS: &[&str] = &[\n     // std testing crates, okay for now at least\n     \"src/libcore/tests\",\n     \"src/liballoc/tests/lib.rs\",\n+    \"src/liballoc/benches/lib.rs\",\n     // The `VaList` implementation must have platform specific code.\n     // The Windows implementation of a `va_list` is always a character\n     // pointer regardless of the target architecture. As a result,"}, {"sha": "aa24881ac6bd75ea2b176f9180f65e26a5c9bd39", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9672b5e95c520774cc17bffc7031c80a1bcf4b4c/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=9672b5e95c520774cc17bffc7031c80a1bcf4b4c", "patch": "@@ -1,7 +1,5 @@\n //! Auto-generate stub docs for the unstable book\n \n-#![deny(warnings)]\n-\n use std::collections::BTreeSet;\n use std::env;\n use std::fs::{self, File};"}]}