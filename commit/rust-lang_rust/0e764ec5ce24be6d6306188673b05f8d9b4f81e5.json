{"sha": "0e764ec5ce24be6d6306188673b05f8d9b4f81e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNzY0ZWM1Y2UyNGJlNmQ2MzA2MTg4NjczYjA1ZjhkOWI0ZjgxZTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-18T21:57:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-09-06T11:27:22Z"}, "message": "extract autoderef type adjustment code into a reusable\nhelper", "tree": {"sha": "20af8dddf1652d6fdc05b252b9511cf390636532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20af8dddf1652d6fdc05b252b9511cf390636532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e764ec5ce24be6d6306188673b05f8d9b4f81e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e764ec5ce24be6d6306188673b05f8d9b4f81e5", "html_url": "https://github.com/rust-lang/rust/commit/0e764ec5ce24be6d6306188673b05f8d9b4f81e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e764ec5ce24be6d6306188673b05f8d9b4f81e5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3", "html_url": "https://github.com/rust-lang/rust/commit/714f2a8921b1e686ae2ba02965fcd3b3e733e4c3"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "98422d1dffe5e28a99c4dcc5c2477073056d47c6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0e764ec5ce24be6d6306188673b05f8d9b4f81e5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e764ec5ce24be6d6306188673b05f8d9b4f81e5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0e764ec5ce24be6d6306188673b05f8d9b4f81e5", "patch": "@@ -5191,28 +5191,12 @@ impl<'tcx> TyS<'tcx> {\n \n                         if !adjusted_ty.references_error() {\n                             for i in 0..adj.autoderefs {\n-                                let method_call = MethodCall::autoderef(expr_id, i as u32);\n-                                match method_type(method_call) {\n-                                    Some(method_ty) => {\n-                                        // Overloaded deref operators have all late-bound\n-                                        // regions fully instantiated and coverge.\n-                                        let fn_ret =\n-                                            cx.no_late_bound_regions(&method_ty.fn_ret()).unwrap();\n-                                        adjusted_ty = fn_ret.unwrap();\n-                                    }\n-                                    None => {}\n-                                }\n-                                match adjusted_ty.builtin_deref(true, NoPreference) {\n-                                    Some(mt) => { adjusted_ty = mt.ty; }\n-                                    None => {\n-                                        cx.sess.span_bug(\n-                                            span,\n-                                            &format!(\"the {}th autoderef failed: {}\",\n-                                                    i,\n-                                                     adjusted_ty)\n-                                            );\n-                                    }\n-                                }\n+                                adjusted_ty =\n+                                    adjusted_ty.adjust_for_autoderef(cx,\n+                                                                     expr_id,\n+                                                                     span,\n+                                                                     i as u32,\n+                                                                     &mut method_type);\n                             }\n                         }\n \n@@ -5228,6 +5212,39 @@ impl<'tcx> TyS<'tcx> {\n         };\n     }\n \n+    pub fn adjust_for_autoderef<F>(&'tcx self,\n+                                   cx: &ctxt<'tcx>,\n+                                   expr_id: ast::NodeId,\n+                                   expr_span: Span,\n+                                   autoderef: u32, // how many autoderefs so far?\n+                                   mut method_type: F)\n+                                   -> Ty<'tcx> where\n+        F: FnMut(MethodCall) -> Option<Ty<'tcx>>,\n+    {\n+        let method_call = MethodCall::autoderef(expr_id, autoderef);\n+        let mut adjusted_ty = self;\n+        match method_type(method_call) {\n+            Some(method_ty) => {\n+                // Method calls always have all late-bound regions\n+                // fully instantiated.\n+                let fn_ret = cx.no_late_bound_regions(&method_ty.fn_ret()).unwrap();\n+                adjusted_ty = fn_ret.unwrap();\n+            }\n+            None => {}\n+        }\n+        match adjusted_ty.builtin_deref(true, NoPreference) {\n+            Some(mt) => mt.ty,\n+            None => {\n+                cx.sess.span_bug(\n+                    expr_span,\n+                    &format!(\"the {}th autoderef failed: {}\",\n+                             autoderef,\n+                             adjusted_ty)\n+                        );\n+            }\n+        }\n+    }\n+\n     pub fn adjust_for_autoref(&'tcx self, cx: &ctxt<'tcx>,\n                               autoref: Option<AutoRef<'tcx>>)\n                               -> Ty<'tcx> {"}]}