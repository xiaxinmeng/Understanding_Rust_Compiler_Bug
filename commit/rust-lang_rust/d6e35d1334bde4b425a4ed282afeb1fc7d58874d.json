{"sha": "d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZTM1ZDEzMzRiZGU0YjQyNWE0ZWQyODJhZmViMWZjN2Q1ODg3NGQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-01T18:20:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-01T18:20:29Z"}, "message": "Rollup merge of #66018 - pnkfelix:issue-64872-revert-64324, r=alexcrichton\n\nRevert PR 64324: dylibs export generics again (for now)\n\nAs discussed on PR #65781, this is a targeted attempt to undo the main semantic change from PR #64324, by putting `dylib` back in the set of crate types that export generic symbols.\n\nThe main reason to do this is that PR #64324 had unanticipated side-effects that caused bugs like #64872, and in the opinion of @alexcrichton and myself, the impact of #64872 is worse than #64319.\n\nIn other words, it is better for us, in the short term, to reopen #64319 as currently unfixed for now than to introduce new bugs like #64872.\n\nFix #64872\n\nReopen #64319", "tree": {"sha": "f52aa9e4168a818b6c9cc208dda4db07baf91df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f52aa9e4168a818b6c9cc208dda4db07baf91df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdvHdtCRBK7hj4Ov3rIwAAdHIIAKKElGjF+EXC2K2sWojx5SaL\nnPyRgKylfwCv3jpCvQhvd9yz0Y3Hltu+7i56mHsPitTIyyrC8glcKPCrl2CGo0Sv\nil1E0HujU/NdXgp+Tj6I9L0ONpQVziZsCx5iy/76U4BYB9wCkG0r2E8iIaY9T3Iu\n5LVDAHGaWbqVPj66wTYKuH4cv2V2uXWo6vpylAh01f6SwVoVB+JYMSXF6Ybul7EH\nHqx6MznOF61YR9gsF0WOGXya0ioTk67xlA9p6KaGnenlQyFgc0XSS26tPLbHrjCM\nwY9N7iauu6dsLRd5nHTrbrpWFly8muNHTFFffBjIYVWzzlREUjeFGOM7BQG3KZc=\n=GOOS\n-----END PGP SIGNATURE-----\n", "payload": "tree f52aa9e4168a818b6c9cc208dda4db07baf91df7\nparent 81505e7fdcef858a1c727e10d650037059f2e5d4\nparent 6457914ff663973c86d9c5a5ff3ff60cb460f2a1\nauthor Tyler Mandry <tmandry@gmail.com> 1572632429 -0700\ncommitter GitHub <noreply@github.com> 1572632429 -0700\n\nRollup merge of #66018 - pnkfelix:issue-64872-revert-64324, r=alexcrichton\n\nRevert PR 64324: dylibs export generics again (for now)\n\nAs discussed on PR #65781, this is a targeted attempt to undo the main semantic change from PR #64324, by putting `dylib` back in the set of crate types that export generic symbols.\n\nThe main reason to do this is that PR #64324 had unanticipated side-effects that caused bugs like #64872, and in the opinion of @alexcrichton and myself, the impact of #64872 is worse than #64319.\n\nIn other words, it is better for us, in the short term, to reopen #64319 as currently unfixed for now than to introduce new bugs like #64872.\n\nFix #64872\n\nReopen #64319\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "html_url": "https://github.com/rust-lang/rust/commit/d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81505e7fdcef858a1c727e10d650037059f2e5d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/81505e7fdcef858a1c727e10d650037059f2e5d4", "html_url": "https://github.com/rust-lang/rust/commit/81505e7fdcef858a1c727e10d650037059f2e5d4"}, {"sha": "6457914ff663973c86d9c5a5ff3ff60cb460f2a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6457914ff663973c86d9c5a5ff3ff60cb460f2a1", "html_url": "https://github.com/rust-lang/rust/commit/6457914ff663973c86d9c5a5ff3ff60cb460f2a1"}], "stats": {"total": 171, "additions": 79, "deletions": 92}, "files": [{"sha": "3d28beefb3413f0dea2b38ed691f6ac822ca92d5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -1514,8 +1514,14 @@ impl<'tcx> TyCtxt<'tcx> {\n                 CrateType::Executable |\n                 CrateType::Staticlib  |\n                 CrateType::ProcMacro  |\n-                CrateType::Dylib      |\n                 CrateType::Cdylib     => false,\n+\n+                // FIXME rust-lang/rust#64319, rust-lang/rust#64872:\n+                // We want to block export of generics from dylibs,\n+                // but we must fix rust-lang/rust#65890 before we can\n+                // do that robustly.\n+                CrateType::Dylib      => true,\n+\n                 CrateType::Rlib       => true,\n             }\n         })"}, {"sha": "999cc406585030253ae30ac0efde7e465d645667", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -14,7 +14,6 @@ use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n                              LinkerPluginLto, Lto};\n-use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use rustc_serialize::{json, Encoder};\n@@ -1112,20 +1111,10 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n                     continue;\n                 }\n \n-                // Do not export generic symbols from upstream crates in linked\n-                // artifact (notably the `dylib` crate type). The main reason\n-                // for this is that `symbol_name` is actually wrong for generic\n-                // symbols because it guesses the name we'd give them locally\n-                // rather than the name it has upstream (depending on\n-                // `share_generics` settings and such).\n-                //\n-                // To fix that issue we just say that linked artifacts, aka\n-                // `dylib`s, never export generic symbols and they aren't\n-                // available to downstream crates. (the not available part is\n-                // handled elsewhere).\n-                if let ExportedSymbol::Generic(..) = symbol {\n-                    continue;\n-                }\n+                // FIXME rust-lang/rust#64319, rust-lang/rust#64872:\n+                // We want to block export of generics from dylibs,\n+                // but we must fix rust-lang/rust#65890 before we can\n+                // do that robustly.\n \n                 symbols.push(symbol.symbol_name(tcx).to_string());\n             }"}, {"sha": "de187a3f5e0dcbd9352b4f922df3a23bb468384b", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -9,7 +9,6 @@ use rustc::ty::query::QueryConfig;\n use rustc::middle::cstore::{CrateSource, CrateStore, DepKind, EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n-use rustc::middle::dependency_format::Linkage;\n use rustc::hir::def;\n use rustc::hir;\n use rustc::session::{CrateDisambiguator, Session};\n@@ -235,26 +234,11 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     used_crate_source => { Lrc::new(cdata.source.clone()) }\n \n     exported_symbols => {\n-        let mut syms = cdata.exported_symbols(tcx);\n-\n-        // When linked into a dylib crates don't export their generic symbols,\n-        // so if that's happening then we can't load upstream monomorphizations\n-        // from this crate.\n-        let formats = tcx.dependency_formats(LOCAL_CRATE);\n-        let remove_generics = formats.iter().any(|(_ty, list)| {\n-            match list.get(def_id.krate.as_usize() - 1) {\n-                Some(Linkage::IncludedFromDylib) | Some(Linkage::Dynamic) => true,\n-                _ => false,\n-            }\n-        });\n-        if remove_generics {\n-            syms.retain(|(sym, _threshold)| {\n-                match sym {\n-                    ExportedSymbol::Generic(..) => false,\n-                    _ => return true,\n-                }\n-            });\n-        }\n+        let syms = cdata.exported_symbols(tcx);\n+\n+        // FIXME rust-lang/rust#64319, rust-lang/rust#64872: We want\n+        // to block export of generics from dylibs, but we must fix\n+        // rust-lang/rust#65890 before we can do that robustly.\n \n         Arc::new(syms)\n     }"}, {"sha": "b2c6b8b3cbbf2bf4d15e5fdc3b71681a799522ae", "filename": "src/test/run-make-fulldeps/issue-64319/Makefile", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/81505e7fdcef858a1c727e10d650037059f2e5d4/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/81505e7fdcef858a1c727e10d650037059f2e5d4/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2FMakefile?ref=81505e7fdcef858a1c727e10d650037059f2e5d4", "patch": "@@ -1,39 +0,0 @@\n--include ../tools.mk\n-\n-# Different optimization levels imply different values for `-Zshare-generics`,\n-# so try out a whole bunch of combinations to make sure everything is compatible\n-all:\n-\t# First up, try some defaults\n-\t$(RUSTC) --crate-type rlib foo.rs\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3\n-\n-\t# Next try mixing up some things explicitly\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type rlib foo.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n-\n-\t# Now combine a whole bunch of options together\n-\t$(RUSTC) --crate-type rlib foo.rs\n-\t$(RUSTC) --crate-type dylib bar.rs\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1 -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=1 -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2 -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=2 -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3 -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=3 -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=s -Z share-generics=yes\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z -Z share-generics=no\n-\t$(RUSTC) --crate-type dylib bar.rs -C opt-level=z -Z share-generics=yes"}, {"sha": "3895c0b6cdbb3d760b7df23c8934eca5da0210e8", "filename": "src/test/run-make-fulldeps/issue-64319/bar.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81505e7fdcef858a1c727e10d650037059f2e5d4/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81505e7fdcef858a1c727e10d650037059f2e5d4/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Fbar.rs?ref=81505e7fdcef858a1c727e10d650037059f2e5d4", "patch": "@@ -1,5 +0,0 @@\n-extern crate foo;\n-\n-pub fn bar() {\n-    foo::foo();\n-}"}, {"sha": "c54a238e9add7f8ae13a1602df43d48467bf2b57", "filename": "src/test/run-make-fulldeps/issue-64319/foo.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81505e7fdcef858a1c727e10d650037059f2e5d4/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81505e7fdcef858a1c727e10d650037059f2e5d4/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-64319%2Ffoo.rs?ref=81505e7fdcef858a1c727e10d650037059f2e5d4", "patch": "@@ -1,9 +0,0 @@\n-pub fn foo() {\n-    bar::<usize>();\n-}\n-\n-pub fn bar<T>() {\n-    baz();\n-}\n-\n-fn baz() {}"}, {"sha": "7901866015bf2ffa564a7a4b8e10ddb8961baeb4", "filename": "src/test/run-make-fulldeps/symbol-visibility/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -79,12 +79,12 @@ all:\n \t# Check that a Rust dylib exports its monomorphic functions, including generics this time\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"1\" ]\n \n \t# Check that a Rust dylib exports the monomorphic functions from its dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"1\" ]\n \n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]"}, {"sha": "82bb95f1ef2b3ca8e33d9a1f17b9ef4a7d04feb3", "filename": "src/test/ui/cross-crate/issue-64872/auxiliary/a_def_obj.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fa_def_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fa_def_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fa_def_obj.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -C debuginfo=2\n+\n+// no-prefer-dynamic\n+#![crate_type = \"rlib\"]\n+\n+pub trait Object { fn method(&self) { } }\n+\n+impl Object for u32 { }\n+impl Object for () { }\n+impl<T> Object for &T { }\n+\n+pub fn unused() {\n+    let ref u = 0_u32;\n+    let _d = &u as &dyn crate::Object;\n+    _d.method()\n+}"}, {"sha": "21c0274b991fce0f2b93923e1ee91a1684cfb25b", "filename": "src/test/ui/cross-crate/issue-64872/auxiliary/b_reexport_obj.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fb_reexport_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fb_reexport_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fb_reexport_obj.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -C debuginfo=2 -C prefer-dynamic\n+\n+#![crate_type=\"dylib\"]\n+\n+extern crate a_def_obj;\n+\n+pub use a_def_obj::Object;"}, {"sha": "611238f56173ae9a0cf1b1e017601908492cb460", "filename": "src/test/ui/cross-crate/issue-64872/auxiliary/c_another_vtable_for_obj.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fc_another_vtable_for_obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fc_another_vtable_for_obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fc_another_vtable_for_obj.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -0,0 +1,12 @@\n+// no-prefer-dynamic\n+// compile-flags: -C debuginfo=2\n+#![crate_type=\"rlib\"]\n+\n+extern crate b_reexport_obj;\n+use b_reexport_obj::Object;\n+\n+pub fn another_dyn_debug() {\n+    let ref u = 1_u32;\n+    let _d = &u as &dyn crate::Object;\n+    _d.method()\n+}"}, {"sha": "8d73f9b666f1e117273d00498134459a918c6749", "filename": "src/test/ui/cross-crate/issue-64872/auxiliary/d_chain_of_rlibs_and_dylibs.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fd_chain_of_rlibs_and_dylibs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fd_chain_of_rlibs_and_dylibs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fauxiliary%2Fd_chain_of_rlibs_and_dylibs.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: -C debuginfo=2 -C prefer-dynamic\n+\n+#![crate_type=\"rlib\"]\n+\n+extern crate c_another_vtable_for_obj;\n+\n+pub fn chain() {\n+    c_another_vtable_for_obj::another_dyn_debug();\n+}"}, {"sha": "20fe2053cc7c319efd075da973c674fc7c471f3e", "filename": "src/test/ui/cross-crate/issue-64872/issue-64872.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fissue-64872.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6e35d1334bde4b425a4ed282afeb1fc7d58874d/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fissue-64872.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fissue-64872%2Fissue-64872.rs?ref=d6e35d1334bde4b425a4ed282afeb1fc7d58874d", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+// note that these aux-build directives must be in this order: the\n+// later crates depend on the earlier ones. (The particular bug that\n+// is being exercised here used to exhibit itself during the build of\n+// `chain_of_rlibs_and_dylibs.dylib`)\n+\n+// aux-build:a_def_obj.rs\n+// aux-build:b_reexport_obj.rs\n+// aux-build:c_another_vtable_for_obj.rs\n+// aux-build:d_chain_of_rlibs_and_dylibs.rs\n+\n+extern crate d_chain_of_rlibs_and_dylibs;\n+\n+pub fn main() {\n+    d_chain_of_rlibs_and_dylibs::chain();\n+}"}]}