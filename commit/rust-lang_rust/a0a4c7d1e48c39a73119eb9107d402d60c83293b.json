{"sha": "a0a4c7d1e48c39a73119eb9107d402d60c83293b", "node_id": "C_kwDOAAsO6NoAKGEwYTRjN2QxZTQ4YzM5YTczMTE5ZWI5MTA3ZDQwMmQ2MGM4MzI5M2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-12T06:54:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-12T06:54:28Z"}, "message": "Auto merge of #91825 - matthiaskrgr:rollup-e4s8lwp, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #91746 (Btree: assert more API compatibility)\n - #91748 (rustdoc: Add regression test for Iterator as notable trait on &mut T)\n - #91811 (bootstrap: Change unwrap() to expect() for WIX path)\n - #91814 (doc: fix typo in comments)\n - #91815 (better span for unexpected normalization failure in CTFE engine)\n - #91817 (rustbot: Add autolabeling for `T-rustdoc`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "899d37afcb7b3456b6ee62b5e9c67ea347dd39da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899d37afcb7b3456b6ee62b5e9c67ea347dd39da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0a4c7d1e48c39a73119eb9107d402d60c83293b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0a4c7d1e48c39a73119eb9107d402d60c83293b", "html_url": "https://github.com/rust-lang/rust/commit/a0a4c7d1e48c39a73119eb9107d402d60c83293b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0a4c7d1e48c39a73119eb9107d402d60c83293b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58457bbfd3b08e015bdb03862a1d3cf2d48a800a", "url": "https://api.github.com/repos/rust-lang/rust/commits/58457bbfd3b08e015bdb03862a1d3cf2d48a800a", "html_url": "https://github.com/rust-lang/rust/commit/58457bbfd3b08e015bdb03862a1d3cf2d48a800a"}, {"sha": "479e18920cdcf1201ad5ea2bc6da8ecd654a1afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/479e18920cdcf1201ad5ea2bc6da8ecd654a1afc", "html_url": "https://github.com/rust-lang/rust/commit/479e18920cdcf1201ad5ea2bc6da8ecd654a1afc"}], "stats": {"total": 162, "additions": 121, "deletions": 41}, "files": [{"sha": "a7c08f225b0040792f8b6496aa77c1eec98d16cd", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n-use rustc_span::{Pos, Span, DUMMY_SP};\n+use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n@@ -525,7 +525,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .try_subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)\n             .or_else(|e| {\n                 self.tcx.sess.delay_span_bug(\n-                    DUMMY_SP,\n+                    self.cur_span(),\n                     format!(\"failed to normalize {}\", e.get_type_for_failure()).as_str(),\n                 );\n "}, {"sha": "d6f856a6f0a705b06a1a76cd0a412b70bb53440a", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -140,7 +140,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             sym::min_align_of_val | sym::size_of_val => {\n                 // Avoid `deref_operand` -- this is not a deref, the ptr does not have to be\n-                // dereferencable!\n+                // dereferenceable!\n                 let place = self.ref_to_mplace(&self.read_immediate(&args[0])?)?;\n                 let (size, align) = self\n                     .size_and_align_of_mplace(&place)?"}, {"sha": "e526bfa2b52c7a489ff35c2789c695f1ca995d72", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -327,7 +327,7 @@ where\n         self.memory.get_mut(place.ptr, size, place.align)\n     }\n \n-    /// Check if this mplace is dereferencable and sufficiently aligned.\n+    /// Check if this mplace is dereferenceable and sufficiently aligned.\n     fn check_mplace_access(\n         &self,\n         mplace: MPlaceTy<'tcx, M::PointerTag>,"}, {"sha": "c95aeeaa605586abb9c138e7ae244083c1e55c2b", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -1556,7 +1556,7 @@ fn test_clone_from() {\n }\n \n #[allow(dead_code)]\n-fn test_variance() {\n+fn assert_covariance() {\n     fn map_key<'new>(v: BTreeMap<&'static str, ()>) -> BTreeMap<&'new str, ()> {\n         v\n     }\n@@ -1615,7 +1615,7 @@ fn test_variance() {\n }\n \n #[allow(dead_code)]\n-fn test_sync() {\n+fn assert_sync() {\n     fn map<T: Sync>(v: &BTreeMap<T, T>) -> impl Sync + '_ {\n         v\n     }\n@@ -1684,7 +1684,7 @@ fn test_sync() {\n }\n \n #[allow(dead_code)]\n-fn test_send() {\n+fn assert_send() {\n     fn map<T: Send>(v: BTreeMap<T, T>) -> impl Send {\n         v\n     }"}, {"sha": "7390ff5a59c8cd5b7908e53d04a2fa09e2108295", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -3,6 +3,7 @@ use super::super::testing::rng::DeterministicRng;\n use super::*;\n use crate::vec::Vec;\n use std::cmp::Ordering;\n+use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n@@ -513,7 +514,7 @@ fn test_recovery() {\n }\n \n #[allow(dead_code)]\n-fn test_variance() {\n+fn assert_covariance() {\n     fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> {\n         v\n     }\n@@ -530,7 +531,7 @@ fn test_variance() {\n }\n \n #[allow(dead_code)]\n-fn test_sync() {\n+fn assert_sync() {\n     fn set<T: Sync>(v: &BTreeSet<T>) -> impl Sync + '_ {\n         v\n     }\n@@ -569,7 +570,7 @@ fn test_sync() {\n }\n \n #[allow(dead_code)]\n-fn test_send() {\n+fn assert_send() {\n     fn set<T: Send>(v: BTreeSet<T>) -> impl Send {\n         v\n     }\n@@ -607,6 +608,37 @@ fn test_send() {\n     }\n }\n \n+#[allow(dead_code)]\n+// Check that the member-like functions conditionally provided by #[derive()]\n+// are not overriden by genuine member functions with a different signature.\n+fn assert_derives() {\n+    fn hash<T: Hash, H: Hasher>(v: BTreeSet<T>, state: &mut H) {\n+        v.hash(state);\n+        // Tested much more thoroughly outside the crate in btree_set_hash.rs\n+    }\n+    fn eq<T: PartialEq>(v: BTreeSet<T>) {\n+        let _ = v.eq(&v);\n+    }\n+    fn ne<T: PartialEq>(v: BTreeSet<T>) {\n+        let _ = v.ne(&v);\n+    }\n+    fn cmp<T: Ord>(v: BTreeSet<T>) {\n+        let _ = v.cmp(&v);\n+    }\n+    fn min<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>) {\n+        let _ = v.min(w);\n+    }\n+    fn max<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>) {\n+        let _ = v.max(w);\n+    }\n+    fn clamp<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>, x: BTreeSet<T>) {\n+        let _ = v.clamp(w, x);\n+    }\n+    fn partial_cmp<T: PartialOrd>(v: &BTreeSet<T>) {\n+        let _ = v.partial_cmp(&v);\n+    }\n+}\n+\n #[test]\n fn test_ord_absence() {\n     fn set<K>(mut set: BTreeSet<K>) {"}, {"sha": "ee2df0d5160127a26676b89f5ea04c39ff736136", "filename": "library/alloc/src/collections/vec_deque/iter_mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fiter_mut.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -12,7 +12,7 @@ use super::{count, wrap_index, RingSlices};\n /// [`iter_mut`]: super::VecDeque::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n-    // Internal safety invariant: the entire slice is dereferencable.\n+    // Internal safety invariant: the entire slice is dereferenceable.\n     ring: *mut [T],\n     tail: usize,\n     head: usize,\n@@ -42,7 +42,7 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // The `IterMut` invariant also ensures everything is dereferencable.\n+        // The `IterMut` invariant also ensures everything is dereferenceable.\n         let (front, back) = unsafe { (&*front, &*back) };\n         f.debug_tuple(\"IterMut\").field(&front).field(&back).finish()\n     }\n@@ -78,7 +78,7 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // The `IterMut` invariant also ensures everything is dereferencable.\n+        // The `IterMut` invariant also ensures everything is dereferenceable.\n         let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = front.iter_mut().fold(accum, &mut f);\n         back.iter_mut().fold(accum, &mut f)\n@@ -132,7 +132,7 @@ impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n     {\n         let (front, back) = RingSlices::ring_slices(self.ring, self.head, self.tail);\n         // SAFETY: these are the elements we have not handed out yet, so aliasing is fine.\n-        // The `IterMut` invariant also ensures everything is dereferencable.\n+        // The `IterMut` invariant also ensures everything is dereferenceable.\n         let (front, back) = unsafe { (&mut *front, &mut *back) };\n         accum = back.iter_mut().rfold(accum, &mut f);\n         front.iter_mut().rfold(accum, &mut f)"}, {"sha": "075becfb7d11ab2934ef3a435558895df5d2b9d3", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -1020,7 +1020,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, T> {\n         // SAFETY: The internal `IterMut` safety invariant is established because the\n-        // `ring` we create is a dereferencable slice for lifetime '_.\n+        // `ring` we create is a dereferenceable slice for lifetime '_.\n         let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n \n         unsafe { IterMut::new(ring, self.tail, self.head, PhantomData) }\n@@ -1209,7 +1209,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         let (tail, head) = self.range_tail_head(range);\n \n         // SAFETY: The internal `IterMut` safety invariant is established because the\n-        // `ring` we create is a dereferencable slice for lifetime '_.\n+        // `ring` we create is a dereferenceable slice for lifetime '_.\n         let ring = ptr::slice_from_raw_parts_mut(self.ptr(), self.cap());\n \n         unsafe { IterMut::new(ring, tail, head, PhantomData) }"}, {"sha": "33bee4324fd385f06aab96258d23de91be942b5c", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -2121,7 +2121,7 @@ impl<T: ?Sized> Weak<T> {\n             // a valid payload address, as the payload is at least as aligned as RcBox (usize).\n             ptr as *const T\n         } else {\n-            // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n+            // SAFETY: if is_dangling returns false, then the pointer is dereferenceable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n             unsafe { ptr::addr_of_mut!((*ptr).value) }"}, {"sha": "7c065f37d1fa87764f8bc676305dd81695c5d2f0", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -1743,7 +1743,7 @@ impl<T: ?Sized> Weak<T> {\n             // a valid payload address, as the payload is at least as aligned as ArcInner (usize).\n             ptr as *const T\n         } else {\n-            // SAFETY: if is_dangling returns false, then the pointer is dereferencable.\n+            // SAFETY: if is_dangling returns false, then the pointer is dereferenceable.\n             // The payload may be dropped at this point, and we have to maintain provenance,\n             // so use raw pointer manipulation.\n             unsafe { ptr::addr_of_mut!((*ptr).data) }"}, {"sha": "332be06dd161704dbe5300da7b6b5de78e78ae78", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -119,7 +119,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -183,7 +183,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -1003,7 +1003,7 @@ impl<T> *const [T] {\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable\n     /// is *[undefined behavior]* even if the resulting pointer is not used.\n     ///\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n@@ -1025,7 +1025,7 @@ impl<T> *const [T] {\n     where\n         I: SliceIndex<[T]>,\n     {\n-        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked(self) }\n     }\n "}, {"sha": "15ef64bc73f8205d5e6866ff18a2059c4be81a80", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -122,7 +122,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -189,7 +189,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -368,7 +368,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -434,7 +434,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -1266,7 +1266,7 @@ impl<T> *mut [T] {\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable\n     /// is *[undefined behavior]* even if the resulting pointer is not used.\n     ///\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n@@ -1288,7 +1288,7 @@ impl<T> *mut [T] {\n     where\n         I: SliceIndex<[T]>,\n     {\n-        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         unsafe { index.get_unchecked_mut(self) }\n     }\n "}, {"sha": "4f4e7eca281804d478dcc79bf70566766c57e93b", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -109,7 +109,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -142,7 +142,7 @@ impl<T: Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * You must enforce Rust's aliasing rules, since the returned lifetime `'a` is\n     ///   arbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\n@@ -289,7 +289,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -338,7 +338,7 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// * The pointer must be properly aligned.\n     ///\n-    /// * It must be \"dereferencable\" in the sense defined in [the module documentation].\n+    /// * It must be \"dereferenceable\" in the sense defined in [the module documentation].\n     ///\n     /// * The pointer must point to an initialized instance of `T`.\n     ///\n@@ -604,7 +604,7 @@ impl<T> NonNull<[T]> {\n     /// Returns a raw pointer to an element or subslice, without doing bounds\n     /// checking.\n     ///\n-    /// Calling this method with an out-of-bounds index or when `self` is not dereferencable\n+    /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable\n     /// is *[undefined behavior]* even if the resulting pointer is not used.\n     ///\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n@@ -628,7 +628,7 @@ impl<T> NonNull<[T]> {\n     where\n         I: SliceIndex<[T]>,\n     {\n-        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.\n+        // SAFETY: the caller ensures that `self` is dereferenceable and `index` in-bounds.\n         // As a consequence, the resulting pointer cannot be null.\n         unsafe { NonNull::new_unchecked(self.as_ptr().get_unchecked_mut(index)) }\n     }"}, {"sha": "7d5d70f17207c3c60e4ae6d3c44deb9e2f7ef9bd", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -380,7 +380,7 @@ impl<T> [T] {\n         I: SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &*index.get_unchecked(self) }\n     }\n@@ -416,7 +416,7 @@ impl<T> [T] {\n         I: SliceIndex<Self>,\n     {\n         // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &mut *index.get_unchecked_mut(self) }\n     }"}, {"sha": "1d4600fa4a2d7e0917e8e26e8ae1b3a125a140b8", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -416,7 +416,7 @@ impl str {\n     #[inline]\n     pub unsafe fn get_unchecked<I: SliceIndex<str>>(&self, i: I) -> &I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &*i.get_unchecked(self) }\n     }\n@@ -451,7 +451,7 @@ impl str {\n     #[inline]\n     pub unsafe fn get_unchecked_mut<I: SliceIndex<str>>(&mut self, i: I) -> &mut I::Output {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &mut *i.get_unchecked_mut(self) }\n     }\n@@ -504,7 +504,7 @@ impl str {\n     #[inline]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &*(begin..end).get_unchecked(self) }\n     }\n@@ -537,7 +537,7 @@ impl str {\n     #[inline]\n     pub unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str {\n         // SAFETY: the caller must uphold the safety contract for `get_unchecked_mut`;\n-        // the slice is dereferencable because `self` is a safe reference.\n+        // the slice is dereferenceable because `self` is a safe reference.\n         // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.\n         unsafe { &mut *(begin..end).get_unchecked_mut(self) }\n     }"}, {"sha": "dd179df394889e91dbe213d35bf1570d103a75e1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -1564,7 +1564,9 @@ impl Step for Extended {\n             builder.install(&etc.join(\"gfx/rust-logo.ico\"), &exe, 0o644);\n \n             // Generate msi installer\n-            let wix = PathBuf::from(env::var_os(\"WIX\").unwrap());\n+            let wix_path = env::var_os(\"WIX\")\n+                .expect(\"`WIX` environment variable must be set for generating MSI installer(s).\");\n+            let wix = PathBuf::from(wix_path);\n             let heat = wix.join(\"bin/heat.exe\");\n             let candle = wix.join(\"bin/candle.exe\");\n             let light = wix.join(\"bin/light.exe\");"}, {"sha": "bfce46cf4444af0442dc41e8bb8d3b428462bfc9", "filename": "src/test/rustdoc/doc-notable_trait-mut_t_is_not_an_iterator.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-mut_t_is_not_an_iterator.rs?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -0,0 +1,23 @@\n+//! Test case for [#80737].\n+//!\n+//! A SomeTrait that is implemented for `&mut T where T: SomeTrait`\n+//! should not be marked as \"notable\" for return values that do not\n+//! have bounds on the trait itself.\n+//!\n+//! [#80737]: https://github.com/rust-lang/rust/issues/80737\n+\n+#![feature(rustdoc_internals)]\n+#![no_std]\n+\n+#[doc(primitive = \"reference\")]\n+/// Some useless docs, wouhou!\n+///\n+/// We need to put this in here, because notable traits\n+/// that are implemented on foreign types don't show up.\n+mod reference {}\n+\n+// @has doc_notable_trait_mut_t_is_not_an_iterator/fn.fn_no_matches.html\n+// @!has - '//code[@class=\"content\"]' 'Iterator'\n+pub fn fn_no_matches<'a, T: 'a>() -> &'a mut T {\n+    panic!()\n+}"}, {"sha": "fb9cee43b2dfbe8fb229086785291ab91bfce706", "filename": "triagebot.toml", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a0a4c7d1e48c39a73119eb9107d402d60c83293b/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a0a4c7d1e48c39a73119eb9107d402d60c83293b/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=a0a4c7d1e48c39a73119eb9107d402d60c83293b", "patch": "@@ -91,6 +91,29 @@ exclude_labels = [\n     \"requires-nightly\",\n ]\n \n+[autolabel.\"T-rustdoc\"]\n+trigger_files = [\n+    # Source code\n+    \"src/librustdoc\",\n+    \"src/tools/rustdoc\",\n+    \"src/rustdoc-json-types\",\n+\n+    # Tests\n+    \"src/test/rustdoc\",\n+    \"src/test/rustdoc-ui\",\n+    \"src/test/rustdoc-gui\",\n+    \"src/test/rustdoc-js\",\n+    \"src/test/rustdoc-js-std\",\n+    \"src/test/rustdoc-json\",\n+\n+    # Internal tooling\n+    \"src/etc/htmldocck.py\",\n+    \"src/tools/jsondocck\",\n+    \"src/tools/rustdoc-gui\",\n+    \"src/tools/rustdoc-js\",\n+    \"src/tools/rustdoc-themes\",\n+]\n+\n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"#{number} {title}\""}]}