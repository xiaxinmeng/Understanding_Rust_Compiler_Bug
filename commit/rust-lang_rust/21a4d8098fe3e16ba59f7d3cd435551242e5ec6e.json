{"sha": "21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYTRkODA5OGZlM2UxNmJhNTlmN2QzY2Q0MzU1NTEyNDJlNWVjNmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-29T06:06:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-29T06:06:09Z"}, "message": "Auto merge of #32438 - kamalmarhubi:intoiterator-example, r=steveklabnik\n\nstyle: Use `iter` for IntoIterator parameter names\n\nThis commit standardizes the codebase on `iter` for parameters with\nIntoIterator bounds.\n\nPreviously about 40% of IntoIterator parameters were named `iterable`,\nwith most of the rest being named `iter`. There was a single place where\nit was named `iterator`.", "tree": {"sha": "9f7a53f7e9720edcd193e06058918c62e74eef58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7a53f7e9720edcd193e06058918c62e74eef58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "html_url": "https://github.com/rust-lang/rust/commit/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a11129701c873d96fe0816e4c8b55510efebe96e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a11129701c873d96fe0816e4c8b55510efebe96e", "html_url": "https://github.com/rust-lang/rust/commit/a11129701c873d96fe0816e4c8b55510efebe96e"}, {"sha": "93569acdbe09a63a670a5a5ad6bd0a2e2d8a90b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/93569acdbe09a63a670a5a5ad6bd0a2e2d8a90b9", "html_url": "https://github.com/rust-lang/rust/commit/93569acdbe09a63a670a5a5ad6bd0a2e2d8a90b9"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "2988a6360955ff3fe306696788ddec136823c11d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -980,13 +980,13 @@ impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n-    fn extend<I: IntoIterator<Item = T>>(&mut self, iterable: I) {\n-        let iter = iterable.into_iter();\n-        let (lower, _) = iter.size_hint();\n+    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n+        let iterator = iter.into_iter();\n+        let (lower, _) = iterator.size_hint();\n \n         self.reserve(lower);\n \n-        for elem in iter {\n+        for elem in iterator {\n             self.push(elem);\n         }\n     }"}, {"sha": "6731b15fb2e9ceb35afbb49587fce5feb6cf3d11", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -1388,35 +1388,35 @@ impl Clone for String {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<char> for String {\n-    fn from_iter<I: IntoIterator<Item = char>>(iterable: I) -> String {\n+    fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {\n         let mut buf = String::new();\n-        buf.extend(iterable);\n+        buf.extend(iter);\n         buf\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> FromIterator<&'a str> for String {\n-    fn from_iter<I: IntoIterator<Item = &'a str>>(iterable: I) -> String {\n+    fn from_iter<I: IntoIterator<Item = &'a str>>(iter: I) -> String {\n         let mut buf = String::new();\n-        buf.extend(iterable);\n+        buf.extend(iter);\n         buf\n     }\n }\n \n #[stable(feature = \"extend_string\", since = \"1.4.0\")]\n impl FromIterator<String> for String {\n-    fn from_iter<I: IntoIterator<Item = String>>(iterable: I) -> String {\n+    fn from_iter<I: IntoIterator<Item = String>>(iter: I) -> String {\n         let mut buf = String::new();\n-        buf.extend(iterable);\n+        buf.extend(iter);\n         buf\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<char> for String {\n-    fn extend<I: IntoIterator<Item = char>>(&mut self, iterable: I) {\n-        let iterator = iterable.into_iter();\n+    fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {\n+        let iterator = iter.into_iter();\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);\n         for ch in iterator {\n@@ -1427,24 +1427,24 @@ impl Extend<char> for String {\n \n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a> Extend<&'a char> for String {\n-    fn extend<I: IntoIterator<Item = &'a char>>(&mut self, iterable: I) {\n-        self.extend(iterable.into_iter().cloned());\n+    fn extend<I: IntoIterator<Item = &'a char>>(&mut self, iter: I) {\n+        self.extend(iter.into_iter().cloned());\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Extend<&'a str> for String {\n-    fn extend<I: IntoIterator<Item = &'a str>>(&mut self, iterable: I) {\n-        for s in iterable {\n+    fn extend<I: IntoIterator<Item = &'a str>>(&mut self, iter: I) {\n+        for s in iter {\n             self.push_str(s)\n         }\n     }\n }\n \n #[stable(feature = \"extend_string\", since = \"1.4.0\")]\n impl Extend<String> for String {\n-    fn extend<I: IntoIterator<Item = String>>(&mut self, iterable: I) {\n-        for s in iterable {\n+    fn extend<I: IntoIterator<Item = String>>(&mut self, iter: I) {\n+        for s in iter {\n             self.push_str(&s)\n         }\n     }"}, {"sha": "dde5cbb508e1bab661e1337371c9d9b8d00e8dd9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -1302,13 +1302,13 @@ impl<T> ops::DerefMut for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n-    fn from_iter<I: IntoIterator<Item = T>>(iterable: I) -> Vec<T> {\n+    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {\n         // Unroll the first iteration, as the vector is going to be\n         // expanded on this iteration in every case when the iterable is not\n         // empty, but the loop in extend_desugared() is not going to see the\n         // vector being full in the few subsequent loop iterations.\n         // So we get better branch prediction.\n-        let mut iterator = iterable.into_iter();\n+        let mut iterator = iter.into_iter();\n         let mut vector = match iterator.next() {\n             None => return Vec::new(),\n             Some(element) => {\n@@ -1389,8 +1389,8 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n-    fn extend<I: IntoIterator<Item = T>>(&mut self, iterable: I) {\n-        self.extend_desugared(iterable.into_iter())\n+    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n+        self.extend_desugared(iter.into_iter())\n     }\n }\n "}, {"sha": "9e2b25d178fb930619ee4ecb867ec32a93542394", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -2057,8 +2057,8 @@ impl<A> IndexMut<usize> for VecDeque<A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> FromIterator<A> for VecDeque<A> {\n-    fn from_iter<T: IntoIterator<Item = A>>(iterable: T) -> VecDeque<A> {\n-        let iterator = iterable.into_iter();\n+    fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> VecDeque<A> {\n+        let iterator = iter.into_iter();\n         let (lower, _) = iterator.size_hint();\n         let mut deq = VecDeque::with_capacity(lower);\n         deq.extend(iterator);"}, {"sha": "b4378a5fec58d5a8a5bd0fb0272a6bebfed51c14", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -2458,10 +2458,10 @@ impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n ///\n /// // and we'll implement FromIterator\n /// impl FromIterator<i32> for MyCollection {\n-///     fn from_iter<I: IntoIterator<Item=i32>>(iterator: I) -> Self {\n+///     fn from_iter<I: IntoIterator<Item=i32>>(iter: I) -> Self {\n ///         let mut c = MyCollection::new();\n ///\n-///         for i in iterator {\n+///         for i in iter {\n ///             c.add(i);\n ///         }\n ///\n@@ -2508,7 +2508,7 @@ pub trait FromIterator<A>: Sized {\n     /// assert_eq!(v, vec![5, 5, 5, 5, 5]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_iter<T: IntoIterator<Item=A>>(iterator: T) -> Self;\n+    fn from_iter<T: IntoIterator<Item=A>>(iter: T) -> Self;\n }\n \n /// Conversion into an `Iterator`.\n@@ -2683,11 +2683,11 @@ impl<I: Iterator> IntoIterator for I {\n ///     // This is a bit simpler with the concrete type signature: we can call\n ///     // extend on anything which can be turned into an Iterator which gives\n ///     // us i32s. Because we need i32s to put into MyCollection.\n-///     fn extend<T: IntoIterator<Item=i32>>(&mut self, iterable: T) {\n+///     fn extend<T: IntoIterator<Item=i32>>(&mut self, iter: T) {\n ///\n ///         // The implementation is very straightforward: loop through the\n ///         // iterator, and add() each element to ourselves.\n-///         for elem in iterable {\n+///         for elem in iter {\n ///             self.add(elem);\n ///         }\n ///     }\n@@ -2727,7 +2727,7 @@ pub trait Extend<A> {\n     /// assert_eq!(\"abcdef\", &message);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn extend<T: IntoIterator<Item=A>>(&mut self, iterable: T);\n+    fn extend<T: IntoIterator<Item=A>>(&mut self, iter: T);\n }\n \n /// An iterator able to yield elements from both ends."}, {"sha": "4d8021138a0d5f62e8ff7b8299cca69a9480cc78", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -748,7 +748,7 @@ pub struct DecodeUtf16<I>\n     buf: Option<u16>,\n }\n \n-/// Create an iterator over the UTF-16 encoded code points in `iterable`,\n+/// Create an iterator over the UTF-16 encoded code points in `iter`,\n /// returning unpaired surrogates as `Err`s.\n ///\n /// # Examples\n@@ -796,9 +796,9 @@ pub struct DecodeUtf16<I>\n /// ```\n #[unstable(feature = \"decode_utf16\", reason = \"recently exposed\", issue = \"27830\")]\n #[inline]\n-pub fn decode_utf16<I: IntoIterator<Item = u16>>(iterable: I) -> DecodeUtf16<I::IntoIter> {\n+pub fn decode_utf16<I: IntoIterator<Item = u16>>(iter: I) -> DecodeUtf16<I::IntoIter> {\n     DecodeUtf16 {\n-        iter: iterable.into_iter(),\n+        iter: iter.into_iter(),\n         buf: None,\n     }\n }"}, {"sha": "7ab5c90b0abde6bf753c981f1a815a243c45e648", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -1580,11 +1580,11 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>\n     where K: Eq + Hash, S: BuildHasher + Default\n {\n-    fn from_iter<T: IntoIterator<Item=(K, V)>>(iterable: T) -> HashMap<K, V, S> {\n-        let iter = iterable.into_iter();\n-        let lower = iter.size_hint().0;\n+    fn from_iter<T: IntoIterator<Item=(K, V)>>(iter: T) -> HashMap<K, V, S> {\n+        let iterator = iter.into_iter();\n+        let lower = iterator.size_hint().0;\n         let mut map = HashMap::with_capacity_and_hasher(lower, Default::default());\n-        map.extend(iter);\n+        map.extend(iterator);\n         map\n     }\n }"}, {"sha": "fdde1773a4518d16006988e06aa5756dcf58da7f", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -633,11 +633,11 @@ impl<T, S> FromIterator<T> for HashSet<T, S>\n     where T: Eq + Hash,\n           S: BuildHasher + Default,\n {\n-    fn from_iter<I: IntoIterator<Item=T>>(iterable: I) -> HashSet<T, S> {\n-        let iter = iterable.into_iter();\n-        let lower = iter.size_hint().0;\n+    fn from_iter<I: IntoIterator<Item=T>>(iter: I) -> HashSet<T, S> {\n+        let iterator = iter.into_iter();\n+        let lower = iterator.size_hint().0;\n         let mut set = HashSet::with_capacity_and_hasher(lower, Default::default());\n-        set.extend(iter);\n+        set.extend(iterator);\n         set\n     }\n }"}, {"sha": "f64f835e198541e720f3b899cc8673cede7a3551", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a4d8098fe3e16ba59f7d3cd435551242e5ec6e/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=21a4d8098fe3e16ba59f7d3cd435551242e5ec6e", "patch": "@@ -356,8 +356,8 @@ impl FromIterator<CodePoint> for Wtf8Buf {\n /// This replaces surrogate code point pairs with supplementary code points,\n /// like concatenating ill-formed UTF-16 strings effectively would.\n impl Extend<CodePoint> for Wtf8Buf {\n-    fn extend<T: IntoIterator<Item=CodePoint>>(&mut self, iterable: T) {\n-        let iterator = iterable.into_iter();\n+    fn extend<T: IntoIterator<Item=CodePoint>>(&mut self, iter: T) {\n+        let iterator = iter.into_iter();\n         let (low, _high) = iterator.size_hint();\n         // Lower bound of one byte per code point (ASCII only)\n         self.bytes.reserve(low);"}]}