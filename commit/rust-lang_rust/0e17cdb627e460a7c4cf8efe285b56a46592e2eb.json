{"sha": "0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMTdjZGI2MjdlNDYwYTdjNGNmOGVmZTI4NWI1NmE0NjU5MmUyZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T22:05:16Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T22:05:56Z"}, "message": "rustc: Add regions to the type system", "tree": {"sha": "1909f49b2b6e5e1d76e2c06fc262803e820c1e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1909f49b2b6e5e1d76e2c06fc262803e820c1e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "html_url": "https://github.com/rust-lang/rust/commit/0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc1d3e7042f19ed836bf99e6ede10e4ad049776", "html_url": "https://github.com/rust-lang/rust/commit/ebc1d3e7042f19ed836bf99e6ede10e4ad049776"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "d7a17bbe036728c5e66cac991ecc1a503719d16b", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "patch": "@@ -93,6 +93,19 @@ fn enc_mt(w: io::writer, cx: @ctxt, mt: ty::mt) {\n     }\n     enc_ty(w, cx, mt.ty);\n }\n+fn enc_region(w: io::writer, cx: @ctxt, r: ty::region) {\n+    alt r {\n+        ty::re_named(did) {\n+            w.write_char('n'); w.write_str(cx.ds(did)); w.write_char('|');\n+        }\n+        ty::re_caller(did) {\n+            w.write_char('c'); w.write_str(cx.ds(did)); w.write_char('|');\n+        }\n+        ty::re_block(nid) {\n+            w.write_char('b'); w.write_int(nid); w.write_char('|');\n+        }\n+    }\n+}\n fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n     alt st {\n       ty::ty_nil { w.write_char('n'); }\n@@ -147,6 +160,11 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n       ty::ty_box(mt) { w.write_char('@'); enc_mt(w, cx, mt); }\n       ty::ty_uniq(mt) { w.write_char('~'); enc_mt(w, cx, mt); }\n       ty::ty_ptr(mt) { w.write_char('*'); enc_mt(w, cx, mt); }\n+      ty::ty_rptr(r, mt) {\n+        w.write_char('&');\n+        enc_region(w, cx, r);\n+        enc_mt(w, cx, mt);\n+      }\n       ty::ty_vec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }\n       ty::ty_rec(fields) {\n         w.write_str(\"R[\");"}, {"sha": "61ccba7c94f6159ea1bc163ac1bff9a7a19eba15", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "patch": "@@ -59,6 +59,7 @@ const shape_bare_fn: u8 = 27u8;\n const shape_tydesc: u8 = 28u8;\n const shape_send_tydesc: u8 = 29u8;\n const shape_class: u8 = 30u8;\n+const shape_rptr: u8 = 31u8;\n \n fn hash_res_info(ri: res_info) -> uint {\n     let h = 5381u;\n@@ -384,6 +385,10 @@ fn shape_of(ccx: crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n       }\n       ty::ty_iface(_, _) { s += [shape_box_fn]; }\n       ty::ty_class(_, _) { s += [shape_class]; }\n+      ty::ty_rptr(_, tm) {\n+        s += [shape_rptr];\n+        add_substr(s, shape_of(ccx, tm.ty, ty_param_map));\n+      }\n       ty::ty_res(did, raw_subt, tps) {\n         let subt = ty::substitute_type_params(ccx.tcx, tps, raw_subt);\n         let ri = {did: did, t: subt};"}, {"sha": "b293fd80e3ac088e3407b2b1d9c4296c7d21d229", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "patch": "@@ -78,7 +78,12 @@ fn type_of(cx: crate_ctxt, t: ty::t) -> TypeRef {\n       }\n       ty::ty_ptr(mt) {\n         let mt_ty = mt.ty;\n-        T_ptr(type_of(cx, mt_ty)) }\n+        T_ptr(type_of(cx, mt_ty))\n+      }\n+      ty::ty_rptr(_, mt) {\n+        let mt_ty = mt.ty;\n+        T_ptr(type_of(cx, mt_ty))\n+      }\n       ty::ty_rec(fields) {\n         let tys: [TypeRef] = [];\n         for f: ty::field in fields {"}, {"sha": "ddcde34d8abefe6e1b5e13a89c19ccef8b27b67a", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "patch": "@@ -78,6 +78,7 @@ export ty_iface, mk_iface;\n export ty_res, mk_res;\n export ty_param, mk_param;\n export ty_ptr, mk_ptr, mk_mut_ptr, type_is_unsafe_ptr;\n+export ty_rptr, mk_rptr;\n export ty_rec, mk_rec;\n export ty_enum, mk_enum, type_is_enum;\n export ty_tup, mk_tup;\n@@ -87,6 +88,7 @@ export ty_uint, mk_uint, mk_mach_uint;\n export ty_uniq, mk_uniq, mk_imm_uniq, type_is_unique_box;\n export ty_var, mk_var;\n export ty_self, mk_self;\n+export region, re_named, re_caller, re_block;\n export get, type_has_params, type_has_vars, type_id;\n export same_type;\n export ty_var_id;\n@@ -218,6 +220,12 @@ type fn_ty = {proto: ast::proto,\n               ret_style: ret_style,\n               constraints: [@constr]};\n \n+enum region {\n+    re_named(def_id),\n+    re_caller(def_id),\n+    re_block(node_id)\n+}\n+\n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in front/ast::rs as well.\n enum sty {\n@@ -233,6 +241,7 @@ enum sty {\n     ty_uniq(mt),\n     ty_vec(mt),\n     ty_ptr(mt),\n+    ty_rptr(region, mt),\n     ty_rec([field]),\n     ty_fn(fn_ty),\n     ty_iface(def_id, [t]),\n@@ -369,7 +378,7 @@ fn mk_t_with_id(cx: ctxt, st: sty, o_def_id: option<ast::def_id>) -> t {\n       ty_enum(_, tys) | ty_iface(_, tys) | ty_class(_, tys) {\n         for tt in tys { derive_flags(has_params, has_vars, tt); }\n       }\n-      ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_ptr(m) {\n+      ty_box(m) | ty_uniq(m) | ty_vec(m) | ty_ptr(m) | ty_rptr(_, m) {\n         derive_flags(has_params, has_vars, m.ty);\n       }\n       ty_rec(flds) {\n@@ -438,6 +447,8 @@ fn mk_imm_uniq(cx: ctxt, ty: t) -> t { mk_uniq(cx, {ty: ty,\n \n fn mk_ptr(cx: ctxt, tm: mt) -> t { mk_t(cx, ty_ptr(tm)) }\n \n+fn mk_rptr(cx: ctxt, r: region, tm: mt) -> t { mk_t(cx, ty_rptr(r, tm)) }\n+\n fn mk_mut_ptr(cx: ctxt, ty: t) -> t { mk_ptr(cx, {ty: ty,\n                                                   mutbl: ast::m_mutbl}) }\n \n@@ -505,7 +516,9 @@ fn walk_ty(cx: ctxt, ty: t, f: fn(t)) {\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n       ty_str | ty_send_type | ty_type | ty_opaque_box |\n       ty_opaque_closure_ptr(_) | ty_var(_) | ty_param(_, _) {}\n-      ty_box(tm) | ty_vec(tm) | ty_ptr(tm) { walk_ty(cx, tm.ty, f); }\n+      ty_box(tm) | ty_vec(tm) | ty_ptr(tm) | ty_rptr(_, tm) {\n+        walk_ty(cx, tm.ty, f);\n+      }\n       ty_enum(_, subtys) | ty_iface(_, subtys) | ty_class(_, subtys)\n        | ty_self(subtys) {\n         for subty: t in subtys { walk_ty(cx, subty, f); }\n@@ -1112,6 +1125,13 @@ fn hash_type_structure(st: sty) -> uint {\n         }\n         h\n     }\n+    fn hash_region(r: region) -> uint {\n+        alt r {\n+          re_named(_)   { 1u }\n+          re_caller(_)  { 2u }\n+          re_block(_)   { 3u }\n+        }\n+    }\n     alt st {\n       ty_nil { 0u } ty_bool { 1u }\n       ty_int(t) {\n@@ -1158,6 +1178,10 @@ fn hash_type_structure(st: sty) -> uint {\n       ty_type { 32u }\n       ty_bot { 34u }\n       ty_ptr(mt) { hash_subty(35u, mt.ty) }\n+      ty_rptr(region, mt) {\n+        let h = (46u << 2u) + hash_region(region);\n+        hash_subty(h, mt.ty)\n+      }\n       ty_res(did, sub, tps) {\n         let h = hash_subty(hash_def(18u, did), sub);\n         hash_subtys(h, tps)"}, {"sha": "cbc053217f4b758a3cc9277d5ad22453260e5d10", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "patch": "@@ -319,8 +319,8 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n       ast::ty_ptr(mt) {\n         ty::mk_ptr(tcx, ast_mt_to_mt(tcx, mode, mt))\n       }\n-      ast::ty_rptr(_,_) {\n-        fail \"TODO: regions\";\n+      ast::ty_rptr(_, mt) {\n+        ty::mk_rptr(tcx, ty::re_block(0), ast_mt_to_mt(tcx, mode, mt))\n       }\n       ast::ty_tup(fields) {\n         let flds = vec::map(fields, bind ast_ty_to_ty(tcx, mode, _));"}, {"sha": "8ab5aa770beff26e65ff03d5ca2901e2d9e23d23", "filename": "src/serializer/serializer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Fserializer%2Fserializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e17cdb627e460a7c4cf8efe285b56a46592e2eb/src%2Fserializer%2Fserializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fserializer%2Fserializer.rs?ref=0e17cdb627e460a7c4cf8efe285b56a46592e2eb", "patch": "@@ -258,6 +258,7 @@ impl serialize_methods for serialize_ctx {\n             self.serialize_ty(t, v)\n           }\n           ty::ty_ptr(_) |\n+          ty::ty_rptr(_,_) |\n           ty::ty_fn(_) |\n           ty::ty_iface(_, _) |\n           ty::ty_res(_, _, _) |\n@@ -431,6 +432,7 @@ impl deserialize_methods for serialize_ctx {\n             self.deserialize_ty(t)\n           }\n           ty::ty_ptr(_) |\n+          ty::ty_rptr(_,_) |\n           ty::ty_fn(_) |\n           ty::ty_iface(_, _) |\n           ty::ty_res(_, _, _) |"}]}