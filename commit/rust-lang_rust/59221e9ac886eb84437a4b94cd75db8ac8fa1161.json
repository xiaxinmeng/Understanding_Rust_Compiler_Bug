{"sha": "59221e9ac886eb84437a4b94cd75db8ac8fa1161", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MjIxZTlhYzg4NmViODQ0MzdhNGI5NGNkNzVkYjhhYzhmYTExNjE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-28T20:52:13Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-28T20:52:23Z"}, "message": "replace more vector + (issue #2719)", "tree": {"sha": "1d53799b7c7f5ed4e2240ac67affc2fa563e02b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d53799b7c7f5ed4e2240ac67affc2fa563e02b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59221e9ac886eb84437a4b94cd75db8ac8fa1161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59221e9ac886eb84437a4b94cd75db8ac8fa1161", "html_url": "https://github.com/rust-lang/rust/commit/59221e9ac886eb84437a4b94cd75db8ac8fa1161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59221e9ac886eb84437a4b94cd75db8ac8fa1161/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a39d1ca363b900e2b341f501eb556ec576b523", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a39d1ca363b900e2b341f501eb556ec576b523", "html_url": "https://github.com/rust-lang/rust/commit/58a39d1ca363b900e2b341f501eb556ec576b523"}], "stats": {"total": 172, "additions": 106, "deletions": 66}, "files": [{"sha": "e12a62fc41db7edbe4cb2fc8b5beb18eb402dfce", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -5,6 +5,7 @@ import ptr::addr_of;\n import libc::size_t;\n \n export append;\n+export append_one;\n export init_op;\n export is_empty;\n export is_not_empty;\n@@ -492,6 +493,13 @@ pure fn append<T: copy>(+lhs: [T]/~, rhs: [const T]/&) -> [T]/~ {\n     ret v;\n }\n \n+#[inline(always)]\n+pure fn append_one<T>(+lhs: [T]/~, +x: T) -> [T]/~ {\n+    let mut v <- lhs;\n+    unchecked { push(v, x); }\n+    v\n+}\n+\n #[inline(always)]\n pure fn append_mut<T: copy>(lhs: [mut T]/&, rhs: [const T]/&) -> [mut T]/~ {\n     let mut v = [mut]/~;"}, {"sha": "295f3416d36a2b47a14d332d327bf3b17bb45c6f", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -57,7 +57,7 @@ type ctx = {map: map, mut path: path,\n type vt = visit::vt<ctx>;\n \n fn extend(cx: ctx, +elt: ident) -> @path {\n-    @(cx.path + [path_name(elt)]/~)\n+    @(vec::append(cx.path, [path_name(elt)]/~))\n }\n \n fn mk_ast_map_visitor() -> vt {"}, {"sha": "b89be203e16ef061ec101f4ac8639be1bb168b02", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -740,14 +740,15 @@ fn mk_deser_fn(cx: ext_ctxt, span: span,\n             []/~))]/~;\n \n     let deser_tps: [ast::ty_param]/~ =\n-        [{ident: @\"__D\",\n-          id: cx.next_id(),\n-          bounds: deser_bnds}]/~ + vec::map(tps) {|tp|\n-        let cloned = cx.clone_ty_param(tp);\n-        {bounds: @(vec::append(*cloned.bounds,\n-                               [ast::bound_copy]/~))\n-         with cloned}\n-    };\n+        vec::append([{ident: @\"__D\",\n+                      id: cx.next_id(),\n+                      bounds: deser_bnds}]/~,\n+                    vec::map(tps) {|tp|\n+                        let cloned = cx.clone_ty_param(tp);\n+                        {bounds: @(vec::append(*cloned.bounds,\n+                                               [ast::bound_copy]/~))\n+                         with cloned}\n+                    });\n \n     let deser_blk = cx.expr_blk(f(cx, tps_map, #ast(expr){__d}));\n "}, {"sha": "5833ba0170f4d1a59f25ab2ecc4fc0ee3d44e555", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -108,12 +108,16 @@ fn expand_nested_bindings(m: match, col: uint, val: ValueRef) -> match {\n     for vec::each(m) {|br|\n       alt br.pats[col].node {\n           ast::pat_ident(name, some(inner)) {\n-            let pats = vec::slice(br.pats, 0u, col) + [inner]/~ +\n-                vec::slice(br.pats, col + 1u, br.pats.len());\n-            vec::push(result, @{pats: pats,\n-                        bound: br.bound + [{ident: path_to_ident(name),\n-                                val: val}]/~\n-                         with *br});\n+            let pats = vec::append(\n+                vec::slice(br.pats, 0u, col),\n+                vec::append([inner]/~,\n+                            vec::view(br.pats, col + 1u, br.pats.len())));\n+            vec::push(result,\n+                      @{pats: pats,\n+                        bound: vec::append(\n+                            br.bound, [{ident: path_to_ident(name),\n+                                        val: val}]/~)\n+                                with *br});\n           }\n           _ { vec::push(result, br); }\n         }\n@@ -129,12 +133,14 @@ fn enter_match(dm: def_map, m: match, col: uint, val: ValueRef,\n     for vec::each(m) {|br|\n         alt e(br.pats[col]) {\n           some(sub) {\n-            let pats = sub + vec::slice(br.pats, 0u, col) +\n-                vec::slice(br.pats, col + 1u, br.pats.len());\n+            let pats = vec::append(\n+                vec::append(sub, vec::view(br.pats, 0u, col)),\n+                vec::view(br.pats, col + 1u, br.pats.len()));\n             let self = br.pats[col];\n             let bound = alt self.node {\n               ast::pat_ident(name, none) if !pat_is_variant(dm, self) {\n-                br.bound + [{ident: path_to_ident(name), val: val}]/~\n+                vec::append(br.bound,\n+                            [{ident: path_to_ident(name), val: val}]/~)\n               }\n               _ { br.bound }\n             };\n@@ -417,8 +423,8 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef]/~,\n                 expand_nested_bindings(m, col, val)\n             } else { m };\n \n-    let vals_left = vec::slice(vals, 0u, col) +\n-        vec::slice(vals, col + 1u, vals.len());\n+    let vals_left = vec::append(vec::slice(vals, 0u, col),\n+                                vec::view(vals, col + 1u, vals.len()));\n     let ccx = bcx.fcx.ccx;\n     let mut pat_id = 0;\n     for vec::each(m) {|br|\n@@ -439,7 +445,7 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef]/~,\n             vec::push(rec_vals, GEPi(bcx, val, [0u, ix]/~));\n         }\n         compile_submatch(bcx, enter_rec(dm, m, col, rec_fields, val),\n-                         rec_vals + vals_left, chk, exits);\n+                         vec::append(rec_vals, vals_left), chk, exits);\n         ret;\n     }\n \n@@ -455,7 +461,7 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef]/~,\n             i += 1u;\n         }\n         compile_submatch(bcx, enter_tup(dm, m, col, val, n_tup_elts),\n-                         tup_vals + vals_left, chk, exits);\n+                         vec::append(tup_vals, vals_left), chk, exits);\n         ret;\n     }\n \n@@ -465,8 +471,8 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef]/~,\n         let box_no_addrspace = non_gc_box_cast(bcx, llbox);\n         let unboxed =\n             GEPi(bcx, box_no_addrspace, [0u, abi::box_field_body]/~);\n-        compile_submatch(bcx, enter_box(dm, m, col, val), [unboxed]/~\n-                         + vals_left, chk, exits);\n+        compile_submatch(bcx, enter_box(dm, m, col, val),\n+                         vec::append([unboxed]/~, vals_left), chk, exits);\n         ret;\n     }\n \n@@ -476,7 +482,7 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef]/~,\n         let unboxed =\n             GEPi(bcx, box_no_addrspace, [0u, abi::box_field_body]/~);\n         compile_submatch(bcx, enter_uniq(dm, m, col, val),\n-                         [unboxed]/~ + vals_left, chk, exits);\n+                         vec::append([unboxed]/~, vals_left), chk, exits);\n         ret;\n     }\n \n@@ -580,7 +586,7 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef]/~,\n           lit(_) | range(_, _) { }\n         }\n         compile_submatch(opt_cx, enter_opt(tcx, m, opt, col, size, val),\n-                         unpacked + vals_left, chk, exits);\n+                         vec::append(unpacked, vals_left), chk, exits);\n     }\n \n     // Compile the fall-through case, if any"}, {"sha": "5c2cbc09b09c656af6125d919c411b39d9e9a419", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -2203,7 +2203,7 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id,\n     }\n     ccx.monomorphizing.insert(fn_id, depth + 1u);\n \n-    let pt = *pt + [path_name(@ccx.names(*name))]/~;\n+    let pt = vec::append(*pt, [path_name(@ccx.names(*name))]/~);\n     let s = mangle_exported_name(ccx, pt, mono_ty);\n \n     let mk_lldecl = {||\n@@ -2346,8 +2346,9 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n                 ty::lookup_item_type(ccx.tcx, impl_did);\n             if (*impl_bnds).len() + mth.tps.len() == 0u {\n                 let llfn = get_item_val(ccx, mth.id);\n-                let path = ty::item_path(ccx.tcx, impl_did) +\n-                    [path_name(mth.ident)]/~;\n+                let path = vec::append(\n+                    ty::item_path(ccx.tcx, impl_did),\n+                    [path_name(mth.ident)]/~);\n                 trans_fn(ccx, path, mth.decl, mth.body,\n                          llfn, impl_self(impl_ty), none, mth.id);\n             }\n@@ -3113,7 +3114,7 @@ fn trans_args(cx: block, llenv: ValueRef, args: call_args, fn_ty: ty::t,\n         }\n       }\n       arg_vals(vs) {\n-        llargs += vs;\n+        vec::push_all(llargs, vs);\n       }\n     }\n \n@@ -3867,10 +3868,11 @@ fn trans_log(log_ex: @ast::expr, lvl: @ast::expr,\n        ret trans_expr(bcx, lvl, ignore);\n     }\n \n-    let modpath = [path_mod(ccx.link_meta.name)]/~ +\n+    let modpath = vec::append(\n+        [path_mod(ccx.link_meta.name)]/~,\n         vec::filter(bcx.fcx.path, {|e|\n             alt e { path_mod(_) { true } _ { false } }\n-        });\n+        }));\n     let modname = path_str(modpath);\n \n     let global = if ccx.module_data.contains_key(modname) {\n@@ -4901,12 +4903,16 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n       ast::item_fn(decl, tps, body) {\n         if decl.purity == ast::extern_fn  {\n             let llfndecl = get_item_val(ccx, item.id);\n-            foreign::trans_extern_fn(ccx, *path + [path_name(item.ident)]/~,\n+            foreign::trans_extern_fn(ccx,\n+                                     vec::append(\n+                                         *path,\n+                                         [path_name(item.ident)]/~),\n                                      decl, body, llfndecl, item.id);\n         } else if tps.len() == 0u {\n             let llfndecl = get_item_val(ccx, item.id);\n-            trans_fn(ccx, *path + [path_name(item.ident)]/~, decl, body,\n-                     llfndecl, no_self, none, item.id);\n+            trans_fn(ccx,\n+                     vec::append(*path, [path_name(item.ident)]/~),\n+                     decl, body, llfndecl, no_self, none, item.id);\n         } else {\n             for vec::each(body.node.stmts) {|stmt|\n                 alt stmt.node {\n@@ -5112,9 +5118,11 @@ fn fill_fn_pair(bcx: block, pair: ValueRef, llfn: ValueRef,\n }\n \n fn item_path(ccx: @crate_ctxt, i: @ast::item) -> path {\n-    *alt check ccx.tcx.items.get(i.id) {\n-      ast_map::node_item(_, p) { p }\n-    } + [path_name(i.ident)]/~\n+    vec::append(\n+        *alt check ccx.tcx.items.get(i.id) {\n+            ast_map::node_item(_, p) { p }\n+        },\n+        [path_name(i.ident)]/~)\n }\n \n /* If there's already a symbol for the dtor with <id> and substs <substs>,\n@@ -5125,9 +5133,10 @@ fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id,\n   alt ccx.item_symbols.find(id) {\n      some(s) { s }\n      none if is_none(substs) {\n-       let s = mangle_exported_name(ccx,\n-                               path + [path_name(@ccx.names(\"dtor\"))]/~,\n-                               t);\n+       let s = mangle_exported_name(\n+           ccx,\n+           vec::append(path, [path_name(@ccx.names(\"dtor\"))]/~),\n+           t);\n        ccx.item_symbols.insert(id, s);\n        s\n      }\n@@ -5137,8 +5146,11 @@ fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id,\n        alt substs {\n          some(ss) {\n            let mono_ty = ty::subst_tps(ccx.tcx, ss.tys, t);\n-           mangle_exported_name(ccx, path +\n-                           [path_name(@ccx.names(\"dtor\"))]/~, mono_ty)\n+           mangle_exported_name(\n+               ccx,\n+               vec::append(path,\n+                           [path_name(@ccx.names(\"dtor\"))]/~),\n+               mono_ty)\n          }\n          none {\n              ccx.sess.bug(#fmt(\"get_dtor_symbol: not monomorphizing and \\\n@@ -5157,7 +5169,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n         let mut exprt = false;\n         let val = alt check ccx.tcx.items.get(id) {\n           ast_map::node_item(i, pth) {\n-            let my_path = *pth + [path_name(i.ident)]/~;\n+            let my_path = vec::append(*pth, [path_name(i.ident)]/~);\n             alt check i.node {\n               ast::item_const(_, _) {\n                 let typ = ty::node_id_to_type(ccx.tcx, i.id);\n@@ -5182,18 +5194,20 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n           ast_map::node_method(m, impl_id, pth) {\n             exprt = true;\n             let mty = ty::node_id_to_type(ccx.tcx, id);\n-            let pth = *pth + [path_name(@ccx.names(\"meth\")),\n-                              path_name(m.ident)]/~;\n+            let pth = vec::append(*pth, [path_name(@ccx.names(\"meth\")),\n+                                         path_name(m.ident)]/~);\n             let llfn = register_fn_full(ccx, m.span, pth, id, mty);\n             set_inline_hint_if_appr(m.attrs, llfn);\n             llfn\n           }\n           ast_map::node_foreign_item(ni, _, pth) {\n             exprt = true;\n-            register_fn(ccx, ni.span, *pth + [path_name(ni.ident)]/~, ni.id)\n+            register_fn(ccx, ni.span,\n+                        vec::append(*pth, [path_name(ni.ident)]/~),\n+                        ni.id)\n           }\n           ast_map::node_ctor(nm, tps, ctor, _, pt) {\n-            let my_path = *pt + [path_name(nm)]/~;\n+            let my_path = vec::append(*pt, [path_name(nm)]/~);\n             register_fn(ccx, ctor.span, my_path, ctor.node.id)\n           }\n           ast_map::node_dtor(tps, dt, parent_id, pt) {\n@@ -5219,7 +5233,9 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n \n           ast_map::node_variant(v, enm, pth) {\n             assert v.node.args.len() != 0u;\n-            let pth = *pth + [path_name(enm.ident), path_name(v.node.name)]/~;\n+            let pth = vec::append(*pth,\n+                                  [path_name(enm.ident),\n+                                   path_name(v.node.name)]/~);\n             let llfn = alt check enm.node {\n               ast::item_enum(_, _, _) {\n                 register_fn(ccx, v.span, pth, id)\n@@ -5248,8 +5264,8 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item) {\n         let mut i = 0;\n         let path = item_path(ccx, it);\n         for vec::each(variants) {|variant|\n-            let p = path + [path_name(variant.node.name),\n-                            path_name(@\"discrim\")]/~;\n+            let p = vec::append(path, [path_name(variant.node.name),\n+                                       path_name(@\"discrim\")]/~);\n             let s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n             let disr_val = vi[i].disr_val;\n             note_unique_llvm_symbol(ccx, s);\n@@ -5454,7 +5470,7 @@ fn crate_ctxt_to_encode_parms(cx: @crate_ctxt)\n         let mut result = []/~;\n         for list::each(cx.maps.impl_map.get(id)) {\n             |impls|\n-            result += (*impls).map({|i| (i.ident, i.did) });\n+            vec::push_all(result, (*impls).map({|i| (i.ident, i.did) }));\n         }\n         ret result;\n     }"}, {"sha": "360e1169d5191ba83a7d2eb7f818c51edfdbcd3d", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -329,9 +329,11 @@ fn build_closure(bcx0: block,\n           none { bcx.fcx.llretptr }\n         };\n         let nil_ret = PointerCast(bcx, our_ret, T_ptr(T_nil()));\n-        env_vals +=\n-            [env_ref(flagptr, ty::mk_mut_ptr(tcx, ty::mk_bool(tcx)), owned),\n-             env_ref(nil_ret, ty::mk_nil_ptr(tcx), owned)]/~;\n+        vec::push(env_vals,\n+                  env_ref(flagptr,\n+                          ty::mk_mut_ptr(tcx, ty::mk_bool(tcx)), owned));\n+        vec::push(env_vals,\n+                  env_ref(nil_ret, ty::mk_nil_ptr(tcx), owned));\n     }\n     ret store_environment(bcx, env_vals, ck);\n }\n@@ -391,7 +393,7 @@ fn trans_expr_fn(bcx: block,\n     let ccx = bcx.ccx(), bcx = bcx;\n     let fty = node_id_type(bcx, id);\n     let llfnty = type_of_fn_from_ty(ccx, fty);\n-    let sub_path = bcx.fcx.path + [path_name(@\"anon\")]/~;\n+    let sub_path = vec::append_one(bcx.fcx.path, path_name(@\"anon\"));\n     let s = mangle_internal_name_by_path(ccx, sub_path);\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n \n@@ -475,7 +477,8 @@ fn trans_bind_1(cx: block, outgoing_fty: ty::t,\n \n     // Actually construct the closure\n     let {llbox, cdata_ty, bcx} = store_environment(\n-        bcx, env_vals + vec::map(bound, {|x| env_expr(x, expr_ty(bcx, x))}),\n+        bcx, vec::append(env_vals,\n+                         vec::map(bound, {|x| env_expr(x, expr_ty(bcx, x))})),\n         ty::ck_box);\n \n     // Make thunk"}, {"sha": "0f7b82de3141e6279a7e219ef0ea6fddb95ef78c", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -312,8 +312,10 @@ fn revoke_clean(cx: block, val: ValueRef) {\n             alt cu { clean_temp(v, _, _) if v == val { true } _ { false } }\n         })) {|i|\n             info.cleanups =\n-                vec::slice(info.cleanups, 0u, i) +\n-                vec::slice(info.cleanups, i + 1u, info.cleanups.len());\n+                vec::append(vec::slice(info.cleanups, 0u, i),\n+                            vec::view(info.cleanups,\n+                                      i + 1u,\n+                                      info.cleanups.len()));\n             scope_clean_changed(info);\n         }\n     }\n@@ -706,7 +708,7 @@ fn T_box_header(cx: @crate_ctxt) -> TypeRef {\n }\n \n fn T_box(cx: @crate_ctxt, t: TypeRef) -> TypeRef {\n-    ret T_struct(T_box_header_fields(cx) + [t]/~);\n+    ret T_struct(vec::append(T_box_header_fields(cx), [t]/~));\n }\n \n fn T_box_ptr(t: TypeRef) -> TypeRef {\n@@ -723,7 +725,7 @@ fn T_opaque_box_ptr(cx: @crate_ctxt) -> TypeRef {\n }\n \n fn T_unique(cx: @crate_ctxt, t: TypeRef) -> TypeRef {\n-    ret T_struct(T_box_header_fields(cx) + [t]/~);\n+    ret T_struct(vec::append(T_box_header_fields(cx), [t]/~));\n }\n \n fn T_unique_ptr(t: TypeRef) -> TypeRef {"}, {"sha": "53f553e4fde8b1fff6dd4980f397b5721519f22e", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -19,11 +19,13 @@ fn trans_impl(ccx: @crate_ctxt, path: path, name: ast::ident,\n               methods: [@ast::method]/~, tps: [ast::ty_param]/~) {\n     let _icx = ccx.insn_ctxt(\"impl::trans_impl\");\n     if tps.len() > 0u { ret; }\n-    let sub_path = path + [path_name(name)]/~;\n+    let sub_path = vec::append_one(path, path_name(name));\n     for vec::each(methods) {|m|\n         if m.tps.len() == 0u {\n             let llfn = get_item_val(ccx, m.id);\n-            trans_fn(ccx, sub_path + [path_name(m.ident)]/~, m.decl, m.body,\n+            trans_fn(ccx,\n+                     vec::append_one(sub_path, path_name(m.ident)),\n+                     m.decl, m.body,\n                      llfn, impl_self(ty::node_id_to_type(ccx.tcx, m.self_id)),\n                      none, m.id);\n         }\n@@ -121,8 +123,10 @@ fn trans_monomorphized_callee(bcx: block, callee_id: ast::node_id,\n         let mth_id = method_with_name(bcx.ccx(), impl_did, mname);\n         let n_m_tps = method_ty_param_count(ccx, mth_id, impl_did);\n         let node_substs = node_id_type_params(bcx, callee_id);\n-        let ty_substs = impl_substs +\n-            vec::tailn(node_substs, node_substs.len() - n_m_tps);\n+        let ty_substs\n+            = vec::append(impl_substs,\n+                          vec::tailn(node_substs,\n+                                     node_substs.len() - n_m_tps));\n         let {bcx, val} = trans_self_arg(bcx, base, derefs);\n         let lval = lval_static_fn_inner(bcx, mth_id, callee_id, ty_substs,\n                                         some(sub_origins));"}, {"sha": "82dfc71630ffb9840f93ede4b4702aa938dc7998", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59221e9ac886eb84437a4b94cd75db8ac8fa1161/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=59221e9ac886eb84437a4b94cd75db8ac8fa1161", "patch": "@@ -37,7 +37,7 @@ fn type_of_fn(cx: @crate_ctxt, inputs: [ty::arg]/~,\n     vec::push(atys, T_opaque_box_ptr(cx));\n \n     // ... then explicit args.\n-    atys += type_of_explicit_args(cx, inputs);\n+    vec::push_all(atys, type_of_explicit_args(cx, inputs));\n     ret T_fn(atys, llvm::LLVMVoidType());\n }\n "}]}