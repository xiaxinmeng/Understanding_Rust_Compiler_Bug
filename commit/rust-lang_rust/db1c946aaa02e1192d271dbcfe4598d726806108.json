{"sha": "db1c946aaa02e1192d271dbcfe4598d726806108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMWM5NDZhYWEwMmUxMTkyZDI3MWRiY2ZlNDU5OGQ3MjY4MDYxMDg=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-06-30T19:48:34Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-07-08T19:31:59Z"}, "message": "unnecessary_sort_by: avoid linting if key borrows", "tree": {"sha": "47f6d996197916f5eb177ad7ce208bdaadd3e7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47f6d996197916f5eb177ad7ce208bdaadd3e7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db1c946aaa02e1192d271dbcfe4598d726806108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db1c946aaa02e1192d271dbcfe4598d726806108", "html_url": "https://github.com/rust-lang/rust/commit/db1c946aaa02e1192d271dbcfe4598d726806108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db1c946aaa02e1192d271dbcfe4598d726806108/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e12a316b01f22289d3e7701f129f92b313a98a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12a316b01f22289d3e7701f129f92b313a98a9d", "html_url": "https://github.com/rust-lang/rust/commit/e12a316b01f22289d3e7701f129f92b313a98a9d"}], "stats": {"total": 176, "additions": 131, "deletions": 45}, "files": [{"sha": "fa560ffb980c82407d748018b6b12717c7572267", "filename": "clippy_lints/src/let_and_return.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db1c946aaa02e1192d271dbcfe4598d726806108/clippy_lints%2Fsrc%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1c946aaa02e1192d271dbcfe4598d726806108/clippy_lints%2Fsrc%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_and_return.rs?ref=db1c946aaa02e1192d271dbcfe4598d726806108", "patch": "@@ -1,6 +1,5 @@\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, PatKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -9,7 +8,7 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{in_macro, match_qpath, snippet_opt, span_lint_and_then};\n+use crate::utils::{fn_def_id, in_macro, match_qpath, snippet_opt, span_lint_and_then};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let`-bindings, which are subsequently\n@@ -97,22 +96,6 @@ struct BorrowVisitor<'a, 'tcx> {\n     borrows: bool,\n }\n \n-impl BorrowVisitor<'_, '_> {\n-    fn fn_def_id(&self, expr: &Expr<'_>) -> Option<DefId> {\n-        match &expr.kind {\n-            ExprKind::MethodCall(..) => self.cx.tables().type_dependent_def_id(expr.hir_id),\n-            ExprKind::Call(\n-                Expr {\n-                    kind: ExprKind::Path(qpath),\n-                    ..\n-                },\n-                ..,\n-            ) => self.cx.qpath_res(qpath, expr.hir_id).opt_def_id(),\n-            _ => None,\n-        }\n-    }\n-}\n-\n impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n     type Map = Map<'tcx>;\n \n@@ -121,7 +104,7 @@ impl<'tcx> Visitor<'tcx> for BorrowVisitor<'_, 'tcx> {\n             return;\n         }\n \n-        if let Some(def_id) = self.fn_def_id(expr) {\n+        if let Some(def_id) = fn_def_id(self.cx, expr) {\n             self.borrows = self\n                 .cx\n                 .tcx"}, {"sha": "91c1789a2ffb1b592da5b6c06132962fa074aed1", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/db1c946aaa02e1192d271dbcfe4598d726806108/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1c946aaa02e1192d271dbcfe4598d726806108/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=db1c946aaa02e1192d271dbcfe4598d726806108", "patch": "@@ -5,24 +5,23 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, Param, Pat, PatKind, Path, PathSegment, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n     /// **What it does:**\n-    /// Detects when people use `Vec::sort_by` and pass in a function\n+    /// Detects uses of `Vec::sort_by` passing in a closure\n     /// which compares the two arguments, either directly or indirectly.\n     ///\n     /// **Why is this bad?**\n     /// It is more clear to use `Vec::sort_by_key` (or `Vec::sort` if\n-    /// possible) than to use `Vec::sort_by` and and a more complicated\n+    /// possible) than to use `Vec::sort_by` and a more complicated\n     /// closure.\n     ///\n     /// **Known problems:**\n-    /// If the suggested `Vec::sort_by_key` uses Reverse and it isn't\n-    /// imported by a use statement in the current frame, then a `use`\n-    /// statement that imports it will need to be added (which this lint\n-    /// can't do).\n+    /// If the suggested `Vec::sort_by_key` uses Reverse and it isn't already\n+    /// imported by a use statement, then it will need to be added manually.\n     ///\n     /// **Example:**\n     ///\n@@ -201,28 +200,41 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n             };\n             let vec_name = Sugg::hir(cx, &args[0], \"..\").to_string();\n             let unstable = name == \"sort_unstable_by\";\n+\n             if_chain! {\n                 if let ExprKind::Path(QPath::Resolved(_, Path {\n                     segments: [PathSegment { ident: left_name, .. }], ..\n                 })) = &left_expr.kind;\n                 if left_name == left_ident;\n                 then {\n-                    Some(LintTrigger::Sort(SortDetection { vec_name, unstable }))\n-                }\n-                else {\n-                    Some(LintTrigger::SortByKey(SortByKeyDetection {\n-                        vec_name,\n-                        unstable,\n-                        closure_arg,\n-                        closure_body,\n-                        reverse\n-                    }))\n+                    return Some(LintTrigger::Sort(SortDetection { vec_name, unstable }))\n+                } else {\n+                    if !key_returns_borrow(cx, left_expr) {\n+                        return Some(LintTrigger::SortByKey(SortByKeyDetection {\n+                            vec_name,\n+                            unstable,\n+                            closure_arg,\n+                            closure_body,\n+                            reverse\n+                        }))\n+                    }\n                 }\n             }\n-        } else {\n-            None\n         }\n     }\n+\n+    None\n+}\n+\n+fn key_returns_borrow(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(def_id) = utils::fn_def_id(cx, expr) {\n+        let output = cx.tcx.fn_sig(def_id).output();\n+        let ty = output.skip_binder();\n+        return matches!(ty.kind, ty::Ref(..))\n+            || ty.walk().any(|arg| matches!(arg.unpack(), GenericArgKind::Lifetime(_)));\n+    }\n+\n+    false\n }\n \n impl LateLintPass<'_> for UnnecessarySortBy {"}, {"sha": "93075b9f0b5088a03cb932fa1517cd65dd1fe859", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db1c946aaa02e1192d271dbcfe4598d726806108/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1c946aaa02e1192d271dbcfe4598d726806108/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=db1c946aaa02e1192d271dbcfe4598d726806108", "patch": "@@ -1363,6 +1363,21 @@ pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_>, did: DefId) -> bool {\n     )\n }\n \n+/// Returns the `DefId` of the callee if the given expression is a function or method call.\n+pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n+    match &expr.kind {\n+        ExprKind::MethodCall(..) => cx.tables().type_dependent_def_id(expr.hir_id),\n+        ExprKind::Call(\n+            Expr {\n+                kind: ExprKind::Path(qpath),\n+                ..\n+            },\n+            ..,\n+        ) => cx.tables().qpath_res(qpath, expr.hir_id).opt_def_id(),\n+        _ => None,\n+    }\n+}\n+\n pub fn run_lints(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bool {\n     lints.iter().any(|lint| {\n         matches!("}, {"sha": "c017d1cf9a468bc03ddc55829e277442dfe87734", "filename": "tests/ui/unnecessary_sort_by.fixed", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/db1c946aaa02e1192d271dbcfe4598d726806108/tests%2Fui%2Funnecessary_sort_by.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/db1c946aaa02e1192d271dbcfe4598d726806108/tests%2Fui%2Funnecessary_sort_by.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.fixed?ref=db1c946aaa02e1192d271dbcfe4598d726806108", "patch": "@@ -2,11 +2,11 @@\n \n use std::cmp::Reverse;\n \n-fn id(x: isize) -> isize {\n-    x\n-}\n+fn unnecessary_sort_by() {\n+    fn id(x: isize) -> isize {\n+        x\n+    }\n \n-fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n     // Forward examples\n     vec.sort();\n@@ -24,3 +24,41 @@ fn main() {\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n }\n+\n+// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+mod issue_5754 {\n+    struct Test(String);\n+\n+    #[derive(PartialOrd, Ord, PartialEq, Eq)]\n+    struct Wrapper<'a>(&'a str);\n+\n+    impl Test {\n+        fn name(&self) -> &str {\n+            &self.0\n+        }\n+\n+        fn wrapped(&self) -> Wrapper<'_> {\n+            Wrapper(&self.0)\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_unstable_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_unstable_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+    }\n+}\n+\n+fn main() {\n+    unnecessary_sort_by();\n+    issue_5754::test();\n+}"}, {"sha": "1929c72b2f2cd3737194c2c52eba6aaa309b3380", "filename": "tests/ui/unnecessary_sort_by.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/db1c946aaa02e1192d271dbcfe4598d726806108/tests%2Fui%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1c946aaa02e1192d271dbcfe4598d726806108/tests%2Fui%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_sort_by.rs?ref=db1c946aaa02e1192d271dbcfe4598d726806108", "patch": "@@ -2,11 +2,11 @@\n \n use std::cmp::Reverse;\n \n-fn id(x: isize) -> isize {\n-    x\n-}\n+fn unnecessary_sort_by() {\n+    fn id(x: isize) -> isize {\n+        x\n+    }\n \n-fn main() {\n     let mut vec: Vec<isize> = vec![3, 6, 1, 2, 5];\n     // Forward examples\n     vec.sort_by(|a, b| a.cmp(b));\n@@ -24,3 +24,41 @@ fn main() {\n     vec.sort_by(|_, b| b.cmp(c));\n     vec.sort_unstable_by(|a, _| a.cmp(c));\n }\n+\n+// Should not be linted to avoid hitting https://github.com/rust-lang/rust/issues/34162\n+mod issue_5754 {\n+    struct Test(String);\n+\n+    #[derive(PartialOrd, Ord, PartialEq, Eq)]\n+    struct Wrapper<'a>(&'a str);\n+\n+    impl Test {\n+        fn name(&self) -> &str {\n+            &self.0\n+        }\n+\n+        fn wrapped(&self) -> Wrapper<'_> {\n+            Wrapper(&self.0)\n+        }\n+    }\n+\n+    pub fn test() {\n+        let mut args: Vec<Test> = vec![];\n+\n+        // Forward\n+        args.sort_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        args.sort_unstable_by(|a, b| a.name().cmp(b.name()));\n+        args.sort_unstable_by(|a, b| a.wrapped().cmp(&b.wrapped()));\n+        // Reverse\n+        args.sort_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+        args.sort_unstable_by(|a, b| b.name().cmp(a.name()));\n+        args.sort_unstable_by(|a, b| b.wrapped().cmp(&a.wrapped()));\n+    }\n+}\n+\n+fn main() {\n+    unnecessary_sort_by();\n+    issue_5754::test();\n+}"}]}