{"sha": "785459d630a129c4007e865b3c907cd5c469d604", "node_id": "C_kwDOAAsO6NoAKDc4NTQ1OWQ2MzBhMTI5YzQwMDdlODY1YjNjOTA3Y2Q1YzQ2OWQ2MDQ", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-07T07:32:30Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-04-06T06:25:52Z"}, "message": "Erase query cache values", "tree": {"sha": "5fc8c9f7ba082b77401631a13e34ddc715ec12cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fc8c9f7ba082b77401631a13e34ddc715ec12cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/785459d630a129c4007e865b3c907cd5c469d604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/785459d630a129c4007e865b3c907cd5c469d604", "html_url": "https://github.com/rust-lang/rust/commit/785459d630a129c4007e865b3c907cd5c469d604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/785459d630a129c4007e865b3c907cd5c469d604/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f211da7101a3c91f0afc23436abbcd3bd1d40d2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f211da7101a3c91f0afc23436abbcd3bd1d40d2b", "html_url": "https://github.com/rust-lang/rust/commit/f211da7101a3c91f0afc23436abbcd3bd1d40d2b"}], "stats": {"total": 378, "additions": 329, "deletions": 49}, "files": [{"sha": "83046e14f116b6c70fa01e5cb7a7e7da3d3deda4", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -0,0 +1,225 @@\n+use crate::ty;\n+use std::intrinsics::type_name;\n+use std::{\n+    fmt,\n+    mem::{size_of, transmute_copy, MaybeUninit},\n+};\n+\n+#[derive(Copy, Clone)]\n+pub struct Erased<T: Copy> {\n+    data: MaybeUninit<T>,\n+}\n+\n+impl<T: Copy> fmt::Debug for Erased<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Erased\")\n+    }\n+}\n+\n+pub trait EraseType: Copy {\n+    type Result: Copy;\n+}\n+\n+// Allow `type_alias_bounds` since compilation will fail without `EraseType`.\n+#[allow(type_alias_bounds)]\n+pub type Erase<T: Copy + EraseType> = Erased<impl Copy>;\n+\n+#[inline(always)]\n+pub fn erase<T: EraseType>(src: T) -> Erase<T> {\n+    assert_eq!(\n+        size_of::<T>(),\n+        size_of::<T::Result>(),\n+        \"size of {} must match erased type {}\",\n+        type_name::<T>(),\n+        type_name::<T::Result>()\n+    );\n+    Erased::<<T as EraseType>::Result> {\n+        // SAFETY: Is it safe to transmute to MaybeUninit for types with the same sizes.\n+        data: unsafe { transmute_copy(&src) },\n+    }\n+}\n+\n+/// Restores an erased value.\n+#[inline(always)]\n+pub fn restore<T: EraseType>(value: Erase<T>) -> T {\n+    let value: Erased<<T as EraseType>::Result> = value;\n+    // SAFETY: Due to the use of impl Trait in `Erase` the only way to safetly create an instance\n+    // of `Erase` is to call `erase`, so we know that `value.data` is a valid instance of `T` of\n+    // the right size.\n+    unsafe { transmute_copy(&value.data) }\n+}\n+\n+impl<T> EraseType for &'_ T {\n+    type Result = [u8; size_of::<*const ()>()];\n+}\n+\n+impl<T> EraseType for &'_ [T] {\n+    type Result = [u8; size_of::<*const [()]>()];\n+}\n+\n+impl<T> EraseType for &'_ ty::List<T> {\n+    type Result = [u8; size_of::<*const ()>()];\n+}\n+\n+impl<T: Copy, E: Copy> EraseType for Result<T, E> {\n+    type Result = Self;\n+}\n+\n+impl<T: Copy> EraseType for Option<T> {\n+    type Result = Self;\n+}\n+\n+impl<T: Copy> EraseType for rustc_hir::MaybeOwner<T> {\n+    type Result = Self;\n+}\n+\n+impl<T: Copy> EraseType for ty::Visibility<T> {\n+    type Result = Self;\n+}\n+\n+impl<T: Copy> EraseType for ty::Binder<'_, T> {\n+    type Result = Self;\n+}\n+\n+impl<T: Copy> EraseType for ty::EarlyBinder<T> {\n+    type Result = Self;\n+}\n+\n+impl<T0: Copy, T1: Copy> EraseType for (T0, T1) {\n+    type Result = Self;\n+}\n+\n+macro_rules! trivial {\n+    ($($ty:ty),+ $(,)?) => {\n+        $(\n+            impl EraseType for $ty {\n+                type Result = [u8; size_of::<$ty>()];\n+            }\n+        )*\n+    }\n+}\n+\n+trivial! {\n+    (),\n+    bool,\n+    rustc_ast::expand::allocator::AllocatorKind,\n+    rustc_attr::ConstStability,\n+    rustc_attr::DefaultBodyStability,\n+    rustc_attr::Deprecation,\n+    rustc_attr::Stability,\n+    rustc_data_structures::svh::Svh,\n+    rustc_errors::ErrorGuaranteed,\n+    rustc_hir::Constness,\n+    rustc_hir::def_id::DefId,\n+    rustc_hir::def_id::DefIndex,\n+    rustc_hir::def_id::LocalDefId,\n+    rustc_hir::def::DefKind,\n+    rustc_hir::Defaultness,\n+    rustc_hir::definitions::DefKey,\n+    rustc_hir::GeneratorKind,\n+    rustc_hir::HirId,\n+    rustc_hir::IsAsync,\n+    rustc_hir::ItemLocalId,\n+    rustc_hir::LangItem,\n+    rustc_hir::OwnerId,\n+    rustc_hir::Upvar,\n+    rustc_index::bit_set::FiniteBitSet<u32>,\n+    rustc_middle::metadata::ModChild,\n+    rustc_middle::middle::dependency_format::Linkage,\n+    rustc_middle::middle::exported_symbols::SymbolExportInfo,\n+    rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault,\n+    rustc_middle::middle::resolve_bound_vars::ResolvedArg,\n+    rustc_middle::middle::stability::DeprecationEntry,\n+    rustc_middle::mir::ConstQualifs,\n+    rustc_middle::mir::interpret::AllocId,\n+    rustc_middle::mir::interpret::ErrorHandled,\n+    rustc_middle::mir::interpret::LitToConstError,\n+    rustc_middle::thir::ExprId,\n+    rustc_middle::traits::CodegenObligationError,\n+    rustc_middle::traits::EvaluationResult,\n+    rustc_middle::traits::OverflowError,\n+    rustc_middle::traits::query::NoSolution,\n+    rustc_middle::traits::WellFormedLoc,\n+    rustc_middle::ty::adjustment::CoerceUnsizedInfo,\n+    rustc_middle::ty::AssocItem,\n+    rustc_middle::ty::AssocItemContainer,\n+    rustc_middle::ty::BoundVariableKind,\n+    rustc_middle::ty::DeducedParamAttrs,\n+    rustc_middle::ty::Destructor,\n+    rustc_middle::ty::fast_reject::SimplifiedType,\n+    rustc_middle::ty::ImplPolarity,\n+    rustc_middle::ty::Representability,\n+    rustc_middle::ty::ReprOptions,\n+    rustc_middle::ty::UnusedGenericParams,\n+    rustc_middle::ty::util::AlwaysRequiresDrop,\n+    rustc_session::config::CrateType,\n+    rustc_session::config::EntryFnType,\n+    rustc_session::config::OptLevel,\n+    rustc_session::config::SymbolManglingVersion,\n+    rustc_session::cstore::CrateDepKind,\n+    rustc_session::cstore::ExternCrate,\n+    rustc_session::cstore::LinkagePreference,\n+    rustc_session::Limits,\n+    rustc_session::lint::LintExpectationId,\n+    rustc_span::def_id::CrateNum,\n+    rustc_span::def_id::DefPathHash,\n+    rustc_span::ExpnHash,\n+    rustc_span::ExpnId,\n+    rustc_span::Span,\n+    rustc_span::Symbol,\n+    rustc_span::symbol::Ident,\n+    rustc_target::spec::PanicStrategy,\n+    rustc_type_ir::Variance,\n+    u32,\n+    usize,\n+}\n+\n+macro_rules! tcx_lifetime {\n+    ($($($fake_path:ident)::+),+ $(,)?) => {\n+        $(\n+            impl<'tcx> EraseType for $($fake_path)::+<'tcx> {\n+                type Result = [u8; size_of::<$($fake_path)::+<'static>>()];\n+            }\n+        )*\n+    }\n+}\n+\n+tcx_lifetime! {\n+    rustc_middle::hir::Owner,\n+    rustc_middle::middle::exported_symbols::ExportedSymbol,\n+    rustc_middle::mir::ConstantKind,\n+    rustc_middle::mir::DestructuredConstant,\n+    rustc_middle::mir::interpret::ConstAlloc,\n+    rustc_middle::mir::interpret::ConstValue,\n+    rustc_middle::mir::interpret::GlobalId,\n+    rustc_middle::mir::interpret::LitToConstInput,\n+    rustc_middle::traits::ChalkEnvironmentAndGoal,\n+    rustc_middle::traits::query::MethodAutoderefStepsResult,\n+    rustc_middle::traits::query::type_op::AscribeUserType,\n+    rustc_middle::traits::query::type_op::Eq,\n+    rustc_middle::traits::query::type_op::ProvePredicate,\n+    rustc_middle::traits::query::type_op::Subtype,\n+    rustc_middle::ty::AdtDef,\n+    rustc_middle::ty::AliasTy,\n+    rustc_middle::ty::Clause,\n+    rustc_middle::ty::ClosureTypeInfo,\n+    rustc_middle::ty::Const,\n+    rustc_middle::ty::DestructuredConst,\n+    rustc_middle::ty::ExistentialTraitRef,\n+    rustc_middle::ty::FnSig,\n+    rustc_middle::ty::GenericArg,\n+    rustc_middle::ty::GenericPredicates,\n+    rustc_middle::ty::inhabitedness::InhabitedPredicate,\n+    rustc_middle::ty::Instance,\n+    rustc_middle::ty::InstanceDef,\n+    rustc_middle::ty::layout::FnAbiError,\n+    rustc_middle::ty::layout::LayoutError,\n+    rustc_middle::ty::ParamEnv,\n+    rustc_middle::ty::Predicate,\n+    rustc_middle::ty::SymbolName,\n+    rustc_middle::ty::TraitRef,\n+    rustc_middle::ty::Ty,\n+    rustc_middle::ty::UnevaluatedConst,\n+    rustc_middle::ty::ValTree,\n+    rustc_middle::ty::VtblEntry,\n+}"}, {"sha": "846df6d5188f61f457006e78cfa15c7030092002", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -7,6 +7,7 @@\n use crate::ty::{self, print::describe_as_module, TyCtxt};\n use rustc_span::def_id::LOCAL_CRATE;\n \n+pub mod erase;\n mod keys;\n pub use keys::{AsLocalKey, Key, LocalCrate};\n "}, {"sha": "734512b4048c74bf84701a864bf6fef005221752", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -17,6 +17,7 @@ use crate::mir::interpret::{\n };\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n+use crate::query::erase::{erase, restore, Erase};\n use crate::query::{AsLocalKey, Key};\n use crate::thir;\n use crate::traits::query::{\n@@ -57,6 +58,8 @@ use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n+pub(crate) use rustc_query_system::query::QueryJobId;\n+use rustc_query_system::query::*;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::cstore::{CrateDepKind, CrateSource};\n use rustc_session::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n@@ -66,18 +69,19 @@ use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi;\n use rustc_target::spec::PanicStrategy;\n+\n+use std::marker::PhantomData;\n use std::mem;\n use std::ops::Deref;\n use std::path::PathBuf;\n use std::sync::Arc;\n \n-pub(crate) use rustc_query_system::query::QueryJobId;\n-use rustc_query_system::query::*;\n-\n #[derive(Default)]\n pub struct QuerySystem<'tcx> {\n     pub arenas: QueryArenas<'tcx>,\n     pub caches: QueryCaches<'tcx>,\n+    // Since we erase query value types we tell the typesystem about them with `PhantomData`.\n+    _phantom_values: QueryPhantomValues<'tcx>,\n }\n \n #[derive(Copy, Clone)]\n@@ -263,8 +267,8 @@ macro_rules! define_callbacks {\n                 pub fn $name<'tcx>(\n                     _tcx: TyCtxt<'tcx>,\n                     value: query_provided::$name<'tcx>,\n-                ) -> query_values::$name<'tcx> {\n-                    query_if_arena!([$($modifiers)*]\n+                ) -> Erase<query_values::$name<'tcx>> {\n+                    erase(query_if_arena!([$($modifiers)*]\n                         {\n                             if mem::needs_drop::<query_provided::$name<'tcx>>() {\n                                 &*_tcx.query_system.arenas.$name.alloc(value)\n@@ -273,7 +277,7 @@ macro_rules! define_callbacks {\n                             }\n                         }\n                         (value)\n-                    )\n+                    ))\n                 }\n             )*\n         }\n@@ -282,7 +286,7 @@ macro_rules! define_callbacks {\n             use super::*;\n \n             $(\n-                pub type $name<'tcx> = <<$($K)* as Key>::CacheSelector as CacheSelector<'tcx, $V>>::Cache;\n+                pub type $name<'tcx> = <<$($K)* as Key>::CacheSelector as CacheSelector<'tcx, Erase<$V>>>::Cache;\n             )*\n         }\n \n@@ -334,6 +338,11 @@ macro_rules! define_callbacks {\n             }\n         }\n \n+        #[derive(Default)]\n+        pub struct QueryPhantomValues<'tcx> {\n+            $($(#[$attr])* pub $name: PhantomData<query_values::$name<'tcx>>,)*\n+        }\n+\n         #[derive(Default)]\n         pub struct QueryCaches<'tcx> {\n             $($(#[$attr])* pub $name: query_storage::$name<'tcx>,)*\n@@ -395,10 +404,10 @@ macro_rules! define_callbacks {\n                 let key = key.into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n \n-                match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n+                restore::<$V>(match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(value) => value,\n                     None => self.tcx.queries.$name(self.tcx, self.span, key, QueryMode::Get).unwrap(),\n-                }\n+                })\n             })*\n         }\n \n@@ -459,7 +468,7 @@ macro_rules! define_callbacks {\n                 span: Span,\n                 key: query_keys::$name<'tcx>,\n                 mode: QueryMode,\n-            ) -> Option<$V>;)*\n+            ) -> Option<Erase<$V>>;)*\n         }\n     };\n }\n@@ -486,7 +495,8 @@ macro_rules! define_feedable {\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 let tcx = self.tcx;\n-                let value = query_provided_to_value::$name(tcx, value);\n+                let erased = query_provided_to_value::$name(tcx, value);\n+                let value = restore::<$V>(erased);\n                 let cache = &tcx.query_system.caches.$name;\n \n                 match try_get_cached(tcx, cache, &key) {\n@@ -505,7 +515,7 @@ macro_rules! define_feedable {\n                             &value,\n                             hash_result!([$($modifiers)*]),\n                         );\n-                        cache.complete(key, value, dep_node_index);\n+                        cache.complete(key, erased, dep_node_index);\n                         value\n                     }\n                 }"}, {"sha": "7e053735aa9cffcab3943547607796c1169e40bf", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -18,19 +18,21 @@ extern crate rustc_middle;\n \n use rustc_data_structures::sync::AtomicU64;\n use rustc_middle::arena::Arena;\n-use rustc_middle::dep_graph::{self, DepKindStruct};\n+use rustc_middle::dep_graph::{self, DepKind, DepKindStruct};\n+use rustc_middle::query::erase::{erase, restore, Erase};\n use rustc_middle::query::AsLocalKey;\n use rustc_middle::ty::query::{\n     query_keys, query_provided, query_provided_to_value, query_storage, query_values,\n };\n use rustc_middle::ty::query::{ExternProviders, Providers, QueryEngine};\n use rustc_middle::ty::TyCtxt;\n+use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n+use rustc_query_system::Value;\n use rustc_span::Span;\n \n #[macro_use]\n mod plumbing;\n pub use plumbing::QueryCtxt;\n-use rustc_query_system::dep_graph::SerializedDepNodeIndex;\n use rustc_query_system::query::*;\n #[cfg(parallel_compiler)]\n pub use rustc_query_system::query::{deadlock, QueryContext};\n@@ -43,6 +45,14 @@ pub use on_disk_cache::OnDiskCache;\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n+trait QueryToConfig<'tcx>: 'tcx {\n+    type Value;\n+    type Config: QueryConfig<QueryCtxt<'tcx>>;\n+\n+    fn config(qcx: QueryCtxt<'tcx>) -> Self::Config;\n+    fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::Value;\n+}\n+\n rustc_query_append! { define_queries! }\n \n impl<'tcx> Queries<'tcx> {"}, {"sha": "4d64517d4a31335474b9d72a5ecd8c7f68472ca5", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::mir::{self, interpret};\n use rustc_middle::ty::codec::{RefDecodable, TyDecoder, TyEncoder};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_query_system::dep_graph::DepContext;\n+use rustc_query_system::query::QueryConfig;\n use rustc_query_system::query::{QueryCache, QuerySideEffects};\n use rustc_serialize::{\n     opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder},\n@@ -1064,13 +1065,13 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for [u8] {\n     }\n }\n \n-pub fn encode_query_results<'a, 'tcx, Q>(\n-    query: Q,\n+pub(crate) fn encode_query_results<'a, 'tcx, Q>(\n+    query: Q::Config,\n     qcx: QueryCtxt<'tcx>,\n     encoder: &mut CacheEncoder<'a, 'tcx>,\n     query_result_index: &mut EncodedDepNodeIndex,\n ) where\n-    Q: super::QueryConfig<QueryCtxt<'tcx>>,\n+    Q: super::QueryToConfig<'tcx>,\n     Q::Value: Encodable<CacheEncoder<'a, 'tcx>>,\n {\n     let _timer = qcx\n@@ -1089,7 +1090,7 @@ pub fn encode_query_results<'a, 'tcx, Q>(\n \n             // Encode the type check tables with the `SerializedDepNodeIndex`\n             // as tag.\n-            encoder.encode_tagged(dep_node, value);\n+            encoder.encode_tagged(dep_node, &Q::restore(*value));\n         }\n     });\n }"}, {"sha": "ddc86b5173fbe7c58ddff3c39475e3043e11d845", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -263,14 +263,14 @@ macro_rules! feedable {\n }\n \n macro_rules! hash_result {\n-    ([]) => {{\n-        Some(dep_graph::hash_result)\n+    ([][$V:ty]) => {{\n+        Some(|hcx, result| dep_graph::hash_result(hcx, &restore::<$V>(*result)))\n     }};\n-    ([(no_hash) $($rest:tt)*]) => {{\n+    ([(no_hash) $($rest:tt)*][$V:ty]) => {{\n         None\n     }};\n-    ([$other:tt $($modifiers:tt)*]) => {\n-        hash_result!([$($modifiers)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        hash_result!([$($modifiers)*][$($args)*])\n     };\n }\n \n@@ -479,7 +479,7 @@ macro_rules! define_queries {\n \n         $(impl<'tcx> QueryConfig<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n             type Key = query_keys::$name<'tcx>;\n-            type Value = query_values::$name<'tcx>;\n+            type Value = Erase<query_values::$name<'tcx>>;\n \n             #[inline(always)]\n             fn name(self) -> &'static str {\n@@ -508,7 +508,7 @@ macro_rules! define_queries {\n             }\n \n             fn execute_query(self, tcx: TyCtxt<'tcx>, key: Self::Key) -> Self::Value {\n-                tcx.$name(key)\n+                erase(tcx.$name(key))\n             }\n \n             #[inline]\n@@ -558,6 +558,16 @@ macro_rules! define_queries {\n                 })\n             }\n \n+            #[inline]\n+            fn from_cycle_error(\n+                self,\n+                tcx: TyCtxt<'tcx>,\n+                cycle: &[QueryInfo<DepKind>],\n+            ) -> Self::Value {\n+                let result: query_values::$name<'tcx> = Value::from_cycle_error(tcx, cycle);\n+                erase(result)\n+            }\n+\n             #[inline(always)]\n             fn anon(self) -> bool {\n                 is_anon!([$($modifiers)*])\n@@ -590,7 +600,22 @@ macro_rules! define_queries {\n \n             #[inline(always)]\n             fn hash_result(self) -> rustc_query_system::query::HashResult<Self::Value> {\n-                hash_result!([$($modifiers)*])\n+                hash_result!([$($modifiers)*][query_values::$name<'tcx>])\n+            }\n+        })*\n+\n+        $(impl<'tcx> QueryToConfig<'tcx> for queries::$name<'tcx> {\n+            type Value = query_values::$name<'tcx>;\n+            type Config = Self;\n+\n+            #[inline(always)]\n+            fn config(_qcx: QueryCtxt<'tcx>) -> Self::Config {\n+                Self::default()\n+            }\n+\n+            #[inline(always)]\n+            fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::Value {\n+                restore::<query_values::$name<'tcx>>(value)\n             }\n         })*\n \n@@ -665,6 +690,7 @@ macro_rules! define_queries {\n             use $crate::profiling_support::QueryKeyStringCache;\n             use rustc_query_system::query::QueryMap;\n             use rustc_middle::dep_graph::DepKind;\n+            use crate::QueryToConfig;\n \n             pub(super) const fn dummy_query_struct<'tcx>() -> QueryStruct<'tcx> {\n                 fn noop_try_collect_active_jobs(_: QueryCtxt<'_>, _: &mut QueryMap<DepKind>) -> Option<()> {\n@@ -708,8 +734,8 @@ macro_rules! define_queries {\n                     )\n                 },\n                 encode_query_results: expand_if_cached!([$($modifiers)*], |qcx, encoder, query_result_index|\n-                    $crate::on_disk_cache::encode_query_results(\n-                        super::queries::$name::default(),\n+                    $crate::on_disk_cache::encode_query_results::<super::queries::$name<'tcx>>(\n+                        super::queries::$name::config(qcx),\n                         qcx,\n                         encoder,\n                         query_result_index,\n@@ -798,9 +824,9 @@ macro_rules! define_queries_struct {\n                 &'tcx self,\n                 tcx: TyCtxt<'tcx>,\n                 span: Span,\n-                key: <queries::$name<'tcx> as QueryConfig<QueryCtxt<'tcx>>>::Key,\n+                key: query_keys::$name<'tcx>,\n                 mode: QueryMode,\n-            ) -> Option<query_values::$name<'tcx>> {\n+            ) -> Option<Erase<query_values::$name<'tcx>>> {\n                 let qcx = QueryCtxt { tcx, queries: self };\n                 get_query(\n                     queries::$name::default(),"}, {"sha": "ae3b67915cbd0954c435c682cc6b7fb682fb08e6", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -4,7 +4,7 @@ use crate::dep_graph::{DepNode, DepNodeParams, SerializedDepNodeIndex};\n use crate::error::HandleCycleError;\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n-use crate::query::{QueryContext, QueryState};\n+use crate::query::{QueryContext, QueryInfo, QueryState};\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use std::fmt::Debug;\n@@ -45,6 +45,12 @@ pub trait QueryConfig<Qcx: QueryContext>: Copy {\n \n     fn loadable_from_disk(self, qcx: Qcx, key: &Self::Key, idx: SerializedDepNodeIndex) -> bool;\n \n+    fn from_cycle_error(\n+        self,\n+        tcx: Qcx::DepContext,\n+        cycle: &[QueryInfo<Qcx::DepKind>],\n+    ) -> Self::Value;\n+\n     fn anon(self) -> bool;\n     fn eval_always(self) -> bool;\n     fn depth_limit(self) -> bool;"}, {"sha": "5314d26b9401a120bc0a548b537d68a1ce43da8c", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785459d630a129c4007e865b3c907cd5c469d604/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=785459d630a129c4007e865b3c907cd5c469d604", "patch": "@@ -11,7 +11,6 @@ use crate::query::job::QueryLatch;\n use crate::query::job::{report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo};\n use crate::query::SerializedDepNodeIndex;\n use crate::query::{QueryContext, QueryMap, QuerySideEffects, QueryStackFrame};\n-use crate::values::Value;\n use crate::HandleCycleError;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n@@ -120,43 +119,45 @@ where\n \n #[cold]\n #[inline(never)]\n-fn mk_cycle<Qcx, R, D: DepKind>(\n+fn mk_cycle<Q, Qcx>(\n+    query: Q,\n     qcx: Qcx,\n-    cycle_error: CycleError<D>,\n+    cycle_error: CycleError<Qcx::DepKind>,\n     handler: HandleCycleError,\n-) -> R\n+) -> Q::Value\n where\n-    Qcx: QueryContext + HasDepContext<DepKind = D>,\n-    R: std::fmt::Debug + Value<Qcx::DepContext, Qcx::DepKind>,\n+    Q: QueryConfig<Qcx>,\n+    Qcx: QueryContext,\n {\n     let error = report_cycle(qcx.dep_context().sess(), &cycle_error);\n-    handle_cycle_error(*qcx.dep_context(), &cycle_error, error, handler)\n+    handle_cycle_error(query, qcx, &cycle_error, error, handler)\n }\n \n-fn handle_cycle_error<Tcx, V>(\n-    tcx: Tcx,\n-    cycle_error: &CycleError<Tcx::DepKind>,\n+fn handle_cycle_error<Q, Qcx>(\n+    query: Q,\n+    qcx: Qcx,\n+    cycle_error: &CycleError<Qcx::DepKind>,\n     mut error: DiagnosticBuilder<'_, ErrorGuaranteed>,\n     handler: HandleCycleError,\n-) -> V\n+) -> Q::Value\n where\n-    Tcx: DepContext,\n-    V: Value<Tcx, Tcx::DepKind>,\n+    Q: QueryConfig<Qcx>,\n+    Qcx: QueryContext,\n {\n     use HandleCycleError::*;\n     match handler {\n         Error => {\n             error.emit();\n-            Value::from_cycle_error(tcx, &cycle_error.cycle)\n+            query.from_cycle_error(*qcx.dep_context(), &cycle_error.cycle)\n         }\n         Fatal => {\n             error.emit();\n-            tcx.sess().abort_if_errors();\n+            qcx.dep_context().sess().abort_if_errors();\n             unreachable!()\n         }\n         DelayBug => {\n             error.delay_as_bug();\n-            Value::from_cycle_error(tcx, &cycle_error.cycle)\n+            query.from_cycle_error(*qcx.dep_context(), &cycle_error.cycle)\n         }\n     }\n }\n@@ -269,7 +270,7 @@ where\n         &qcx.current_query_job(),\n         span,\n     );\n-    (mk_cycle(qcx, error, query.handle_cycle_error()), None)\n+    (mk_cycle(query, qcx, error, query.handle_cycle_error()), None)\n }\n \n #[inline(always)]\n@@ -306,7 +307,7 @@ where\n \n             (v, Some(index))\n         }\n-        Err(cycle) => (mk_cycle(qcx, cycle, query.handle_cycle_error()), None),\n+        Err(cycle) => (mk_cycle(query, qcx, cycle, query.handle_cycle_error()), None),\n     }\n }\n "}]}