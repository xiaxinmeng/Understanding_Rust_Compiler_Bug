{"sha": "3d09017477e562d44cb90fca1a4a38c75f664f2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMDkwMTc0NzdlNTYyZDQ0Y2I5MGZjYTFhNGEzOGM3NWY2NjRmMmQ=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-25T08:05:30Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-25T08:05:30Z"}, "message": "Add a compile fail example, binding -> variable, apply suggestions", "tree": {"sha": "eaf7e1d6c4a6f2f9a8d434c4f25bd0d77e229c38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaf7e1d6c4a6f2f9a8d434c4f25bd0d77e229c38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d09017477e562d44cb90fca1a4a38c75f664f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d09017477e562d44cb90fca1a4a38c75f664f2d", "html_url": "https://github.com/rust-lang/rust/commit/3d09017477e562d44cb90fca1a4a38c75f664f2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d09017477e562d44cb90fca1a4a38c75f664f2d/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c46e36d39cc0f833075e59936cf96a60f6348e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c46e36d39cc0f833075e59936cf96a60f6348e4", "html_url": "https://github.com/rust-lang/rust/commit/3c46e36d39cc0f833075e59936cf96a60f6348e4"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "32fa0da3e2925ece7e35c71bd911bdce52e61543", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3d09017477e562d44cb90fca1a4a38c75f664f2d/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d09017477e562d44cb90fca1a4a38c75f664f2d/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=3d09017477e562d44cb90fca1a4a38c75f664f2d", "patch": "@@ -965,49 +965,58 @@ mod move_keyword {}\n \n #[doc(keyword = \"mut\")]\n //\n-/// A mutable binding, reference, or pointer.\n+/// A mutable variable, reference, or pointer.\n ///\n-/// `mut` can be used in several situations. The first is mutable bindings,\n+/// `mut` can be used in several situations. The first is mutable variables,\n /// which can be used anywhere you can bind a value to a variable name. Some\n /// examples:\n ///\n-/// ```\n-/// // A mutable binding in the parameter list of a function.\n+/// ```rust\n+/// // A mutable variable in the parameter list of a function.\n /// fn foo(mut x: u8, y: u8) -> u8 {\n ///     x += y;\n ///     x\n /// }\n ///\n-/// // A mutable binding for a variable.\n+/// // Modifying a mutable variable.\n+/// # #[allow(unused_assignments)]\n /// let mut a = 5;\n /// a = 6;\n ///\n /// assert_eq!(foo(3, 4), 7);\n /// assert_eq!(a, 6);\n /// ```\n ///\n-/// The second is references. They can be created from `mut` bindings and must\n-/// be unique: no other binding can have a mutable reference, nor a simple\n-/// reference.\n+/// The second is mutable references. They can be created from `mut` variables\n+/// and must be unique: no other variables can have a mutable reference, nor a\n+/// shared reference.\n ///\n-/// ```\n+/// ```rust\n /// // Taking a mutable reference.\n /// fn push_two(v: &mut Vec<u8>) {\n ///     v.push(2);\n /// }\n ///\n-/// // You cannot take a mutable reference to a non-mutable variable.\n+/// // A mutable reference cannot be taken to a non-mutable variable.\n /// let mut v = vec![0, 1];\n /// // Passing a mutable reference.\n /// push_two(&mut v);\n ///\n /// assert_eq!(v, vec![0, 1, 2]);\n /// ```\n ///\n-/// Mutable pointers work much like mutable references, with the added\n-/// possibility of being nul. The syntax is `*mut Type`.\n+/// ```rust,compile_fail,E0502\n+/// let mut v = vec![0, 1];\n+/// let mut_ref_v = &mut v;\n+/// ##[allow(unused)]\n+/// let ref_v = &v;\n+/// mut_ref_v.push(2);\n+/// ```\n+///\n+/// Mutable raw pointers work much like mutable references, with the added\n+/// possibility of not pointing to a valid object. The syntax is `*mut Type`.\n ///\n-/// You can find more information on mutable references and pointers in the\n+/// More information on mutable references and pointers can be found in```\n /// [Reference].\n ///\n /// [Reference]: ../reference/types/pointer.html#mutable-references-mut"}]}