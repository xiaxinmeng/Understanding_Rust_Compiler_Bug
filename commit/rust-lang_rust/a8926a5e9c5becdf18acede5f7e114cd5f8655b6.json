{"sha": "a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OTI2YTVlOWM1YmVjZGYxOGFjZWRlNWY3ZTExNGNkNWY4NjU1YjY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-05-06T11:47:58Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-08-30T10:34:20Z"}, "message": "Use `panic::set_hook` to print the ICE message", "tree": {"sha": "bc9fbcaf2b16a8ec24b0bb8b88b41e994b4807ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc9fbcaf2b16a8ec24b0bb8b88b41e994b4807ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "html_url": "https://github.com/rust-lang/rust/commit/a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a38de68a8de14fe49e96b315db026bd57b9696", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a38de68a8de14fe49e96b315db026bd57b9696", "html_url": "https://github.com/rust-lang/rust/commit/19a38de68a8de14fe49e96b315db026bd57b9696"}], "stats": {"total": 115, "additions": 68, "deletions": 47}, "files": [{"sha": "179bf59388a296028641c56fe52d439ee08581c1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "patch": "@@ -3204,6 +3204,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"env_logger 0.5.13\",\n  \"graphviz\",\n+ \"lazy_static 1.3.0\",\n  \"log\",\n  \"rustc\",\n  \"rustc_ast_borrowck\","}, {"sha": "8bd61c25843aa4a0344e518b2a8907ec641748fd", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n graphviz = { path = \"../libgraphviz\" }\n+lazy_static = \"1.0\"\n log = \"0.4\"\n env_logger = { version = \"0.5\", default-features = false }\n rustc = { path = \"../librustc\" }"}, {"sha": "5b7ac14ba3585bd7af27465db03ac7ca8e4ecae6", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 64, "deletions": 45, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "patch": "@@ -21,6 +21,8 @@ pub extern crate getopts;\n extern crate libc;\n #[macro_use]\n extern crate log;\n+#[macro_use]\n+extern crate lazy_static;\n \n pub extern crate rustc_plugin_impl as plugin;\n \n@@ -1143,61 +1145,77 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n     }\n }\n \n-/// Runs a procedure which will detect panics in the compiler and print nicer\n-/// error messages rather than just failing the test.\n+/// Runs a closure and catches unwinds triggered by fatal errors.\n ///\n-/// The diagnostic emitter yielded to the procedure should be used for reporting\n-/// errors of the compiler.\n-pub fn report_ices_to_stderr_if_any<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported> {\n+/// The compiler currently panics with a special sentinel value to abort\n+/// compilation on fatal errors. This function catches that sentinel and turns\n+/// the panic into a `Result` instead.\n+pub fn catch_fatal_errors<F: FnOnce() -> R, R>(f: F) -> Result<R, ErrorReported> {\n     catch_unwind(panic::AssertUnwindSafe(f)).map_err(|value| {\n         if value.is::<errors::FatalErrorMarker>() {\n             ErrorReported\n         } else {\n-            // Thread panicked without emitting a fatal diagnostic\n-            eprintln!(\"\");\n-\n-            let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n-                errors::ColorConfig::Auto,\n-                None,\n-                false,\n-                false,\n-                None,\n-            ));\n-            let handler = errors::Handler::with_emitter(true, None, emitter);\n-\n-            // a .span_bug or .bug call has already printed what\n-            // it wants to print.\n-            if !value.is::<errors::ExplicitBug>() {\n-                handler.emit(&MultiSpan::new(),\n-                             \"unexpected panic\",\n-                             errors::Level::Bug);\n-            }\n+            panic::resume_unwind(value);\n+        }\n+    })\n+}\n \n-            let mut xs: Vec<Cow<'static, str>> = vec![\n-                \"the compiler unexpectedly panicked. this is a bug.\".into(),\n-                format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL).into(),\n-                format!(\"rustc {} running on {}\",\n-                        option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n-                        config::host_triple()).into(),\n-            ];\n+lazy_static! {\n+    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send + 'static> = {\n+        let hook = panic::take_hook();\n+        panic::set_hook(Box::new(report_ice));\n+        hook\n+    };\n+}\n \n-            if let Some((flags, excluded_cargo_defaults)) = extra_compiler_flags() {\n-                xs.push(format!(\"compiler flags: {}\", flags.join(\" \")).into());\n+pub fn report_ice(info: &panic::PanicInfo<'_>) {\n+    (*DEFAULT_HOOK)(info);\n+\n+    // Thread panicked without emitting a fatal diagnostic\n+    eprintln!();\n+\n+    let emitter = Box::new(errors::emitter::EmitterWriter::stderr(\n+        errors::ColorConfig::Auto,\n+        None,\n+        false,\n+        false,\n+        None,\n+    ));\n+    let handler = errors::Handler::with_emitter(true, None, emitter);\n+\n+    // a .span_bug or .bug call has already printed what\n+    // it wants to print.\n+    if !info.payload().is::<errors::ExplicitBug>() {\n+        handler.emit(&MultiSpan::new(),\n+                     \"unexpected panic\",\n+                     errors::Level::Bug);\n+    }\n \n-                if excluded_cargo_defaults {\n-                    xs.push(\"some of the compiler flags provided by cargo are hidden\".into());\n-                }\n-            }\n+    let mut xs: Vec<Cow<'static, str>> = vec![\n+        \"the compiler unexpectedly panicked. this is a bug.\".into(),\n+        format!(\"we would appreciate a bug report: {}\", BUG_REPORT_URL).into(),\n+        format!(\"rustc {} running on {}\",\n+                option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n+                config::host_triple()).into(),\n+    ];\n \n-            for note in &xs {\n-                handler.emit(&MultiSpan::new(),\n-                             note,\n-                             errors::Level::Note);\n-            }\n+    if let Some((flags, excluded_cargo_defaults)) = extra_compiler_flags() {\n+        xs.push(format!(\"compiler flags: {}\", flags.join(\" \")).into());\n \n-            panic::resume_unwind(Box::new(errors::FatalErrorMarker));\n+        if excluded_cargo_defaults {\n+            xs.push(\"some of the compiler flags provided by cargo are hidden\".into());\n         }\n-    })\n+    }\n+\n+    for note in &xs {\n+        handler.emit(&MultiSpan::new(),\n+                     note,\n+                     errors::Level::Note);\n+    }\n+}\n+\n+pub fn install_ice_hook() {\n+    lazy_static::initialize(&DEFAULT_HOOK);\n }\n \n /// This allows tools to enable rust logging without having to magically match rustc's\n@@ -1210,7 +1228,8 @@ pub fn main() {\n     let start = Instant::now();\n     init_rustc_env_logger();\n     let mut callbacks = TimePassesCallbacks::default();\n-    let result = report_ices_to_stderr_if_any(|| {\n+    install_ice_hook();\n+    let result = catch_fatal_errors(|| {\n         let args = env::args_os().enumerate()\n             .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n                     early_error(ErrorOutputType::default(),"}, {"sha": "0b366da29d37e2b838102889707c4319afe56adc", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "patch": "@@ -453,7 +453,7 @@ where R: 'static + Send,\n     // First, parse the crate and extract all relevant information.\n     info!(\"starting to run rustc\");\n \n-    let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n+    let result = rustc_driver::catch_fatal_errors(move || {\n         let crate_name = options.crate_name.clone();\n         let crate_version = options.crate_version.clone();\n         let (mut krate, renderinfo, renderopts) = core::run_core(options);"}, {"sha": "bd9113c7079eac19006297f9d0733dee9f194002", "filename": "src/test/ui-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8926a5e9c5becdf18acede5f7e114cd5f8655b6/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fcompiler-calls.rs?ref=a8926a5e9c5becdf18acede5f7e114cd5f8655b6", "patch": "@@ -24,7 +24,7 @@ impl rustc_driver::Callbacks for TestCalls<'_> {\n fn main() {\n     let mut count = 1;\n     let args = vec![\"compiler-calls\".to_string(), \"foo.rs\".to_string()];\n-    rustc_driver::report_ices_to_stderr_if_any(|| {\n+    rustc_driver::catch_fatal_errors(|| {\n         rustc_driver::run_compiler(&args, &mut TestCalls { count: &mut count }, None, None).ok();\n     }).ok();\n     assert_eq!(count, 2);"}]}