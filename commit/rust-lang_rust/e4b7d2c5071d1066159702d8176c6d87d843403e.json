{"sha": "e4b7d2c5071d1066159702d8176c6d87d843403e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YjdkMmM1MDcxZDEwNjYxNTk3MDJkODE3NmM2ZDg3ZDg0MzQwM2U=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-05-26T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-05-27T16:36:32Z"}, "message": "Omit DW_AT_linkage_name when it is the same as DW_AT_name\n\nThe DWARF standard suggests that it might be useful to include\n`DW_AT_linkage_name` when it is *distinct* from the identifier name.", "tree": {"sha": "94ff45c970a4e56b981dd065add3f01486026dbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94ff45c970a4e56b981dd065add3f01486026dbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4b7d2c5071d1066159702d8176c6d87d843403e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b7d2c5071d1066159702d8176c6d87d843403e", "html_url": "https://github.com/rust-lang/rust/commit/e4b7d2c5071d1066159702d8176c6d87d843403e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4b7d2c5071d1066159702d8176c6d87d843403e/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c", "html_url": "https://github.com/rust-lang/rust/commit/aeca4d6428c52cbf2c8d1f28657b0bdf92e4ea7c"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "484dc597bdbb144b4f17552515ed76803c7bd68d", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4b7d2c5071d1066159702d8176c6d87d843403e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b7d2c5071d1066159702d8176c6d87d843403e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=e4b7d2c5071d1066159702d8176c6d87d843403e", "patch": "@@ -29,7 +29,6 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ich::NodeIdHashingMode;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::truncate;\n use rustc_middle::mir::{self, Field, GeneratorLayout};\n use rustc_middle::ty::layout::{self, IntegerExt, PrimitiveExt, TyAndLayout};\n@@ -2299,9 +2298,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     }\n \n     let tcx = cx.tcx;\n-    let attrs = tcx.codegen_fn_attrs(def_id);\n \n-    let no_mangle = attrs.flags.contains(CodegenFnAttrFlags::NO_MANGLE);\n     // We may want to remove the namespace scope if we're in an extern block (see\n     // https://github.com/rust-lang/rust/pull/46457#issuecomment-351750952).\n     let var_scope = get_namespace_for_item(cx, def_id);\n@@ -2318,14 +2315,11 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     let variable_type = Instance::mono(cx.tcx, def_id).monomorphic_ty(cx.tcx);\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = tcx.item_name(def_id).as_str();\n-    let linkage_name = if no_mangle {\n-        None\n-    } else {\n-        Some(mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name.as_str())\n-    };\n+    let linkage_name: &str =\n+        &mangled_name_of_instance(cx, Instance::mono(tcx, def_id)).name.as_str();\n     // When empty, linkage_name field is omitted,\n     // which is what we want for no_mangle statics\n-    let linkage_name = linkage_name.as_deref().unwrap_or(\"\");\n+    let linkage_name = if var_name == linkage_name { \"\" } else { linkage_name };\n \n     let global_align = cx.align_of(variable_type);\n "}, {"sha": "b5434298805f3cb35b3537064a1c2025755b621c", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4b7d2c5071d1066159702d8176c6d87d843403e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b7d2c5071d1066159702d8176c6d87d843403e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=e4b7d2c5071d1066159702d8176c6d87d843403e", "patch": "@@ -267,9 +267,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let substs = instance.substs.truncate_to(self.tcx(), generics);\n         let template_parameters = get_template_parameters(self, &generics, substs, &mut name);\n \n-        // Get the linkage_name, which is just the symbol name\n-        let linkage_name = mangled_name_of_instance(self, instance);\n-        let linkage_name = linkage_name.name.as_str();\n+        let linkage_name: &str = &mangled_name_of_instance(self, instance).name.as_str();\n+        // Omit the linkage_name if it is the same as subprogram name.\n+        let linkage_name = if &name == linkage_name { \"\" } else { linkage_name };\n \n         // FIXME(eddyb) does this need to be separate from `loc.line` for some reason?\n         let scope_line = loc.line;"}, {"sha": "0d7dca3aba3446373d5ca6aadeaacbab1b74e921", "filename": "src/test/codegen/debug-linkage-name.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e4b7d2c5071d1066159702d8176c6d87d843403e/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b7d2c5071d1066159702d8176c6d87d843403e/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs?ref=e4b7d2c5071d1066159702d8176c6d87d843403e", "patch": "@@ -0,0 +1,42 @@\n+// Verifies that linkage name is omitted when it is\n+// the same as variable / function name.\n+//\n+// compile-flags: -C no-prepopulate-passes\n+// compile-flags: -C debuginfo=2\n+#![crate_type = \"lib\"]\n+\n+pub mod xyz {\n+    // CHECK: !DIGlobalVariable(name: \"A\",\n+    // CHECK:                   linkageName:\n+    // CHECK-SAME:              line: 12,\n+    pub static A: u32 = 1;\n+\n+    // CHECK: !DIGlobalVariable(name: \"B\",\n+    // CHECK-NOT:               linkageName:\n+    // CHECK-SAME:              line: 18,\n+    #[no_mangle]\n+    pub static B: u32 = 2;\n+\n+    // CHECK: !DIGlobalVariable(name: \"C\",\n+    // CHECK-NOT:               linkageName:\n+    // CHECK-SAME:              line: 24,\n+    #[export_name = \"C\"]\n+    pub static C: u32 = 2;\n+\n+    // CHECK: !DISubprogram(name: \"e\",\n+    // CHECK:               linkageName:\n+    // CHECK-SAME:          line: 29,\n+    pub extern fn e() {}\n+\n+    // CHECK: !DISubprogram(name: \"f\",\n+    // CHECK-NOT:           linkageName:\n+    // CHECK-SAME:          line: 35,\n+    #[no_mangle]\n+    pub extern fn f() {}\n+\n+    // CHECK: !DISubprogram(name: \"g\",\n+    // CHECK-NOT:           linkageName:\n+    // CHECK-SAME:          line: 41,\n+    #[export_name = \"g\"]\n+    pub extern fn g() {}\n+}"}]}