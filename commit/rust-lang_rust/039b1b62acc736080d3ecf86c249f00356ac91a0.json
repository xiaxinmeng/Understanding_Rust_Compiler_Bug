{"sha": "039b1b62acc736080d3ecf86c249f00356ac91a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOWIxYjYyYWNjNzM2MDgwZDNlY2Y4NmMyNDlmMDAzNTZhYzkxYTA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-26T14:52:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-26T14:52:31Z"}, "message": "Rollup merge of #82456 - klensy:or-else, r=estebank\n\nReplaced some unwrap_or and map_or with lazy variants\n\nReplaced some `unwrap_or` and `map_or` with `unwrap_or_else` and `map_or_else`.", "tree": {"sha": "06a59887bed652640e0c2294ab8f0287038203c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06a59887bed652640e0c2294ab8f0287038203c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/039b1b62acc736080d3ecf86c249f00356ac91a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOQswCRBK7hj4Ov3rIwAAdHIIABnkEuro9KdWIqyqwAQf7inB\n2oB84ohE2C5CNnw2UP25ynd9mL1geG0hz0be+8UlnpxwaJ1pUiqrST/SwTBC4ZV5\nuKc8e2jGCllhOonmwx68q6owKfUEI7qoL1zHBuX0I5RJPMaoE+KzabWferLyXg9I\n9D447ld3i8RNnHA4Gp5wjKnt6TEFN13PI2VfF33Nu+iSxSHxfRVfoTAgNqZblo0C\n4BTUbCQbOrRaOA4oG/hF+T32Me5LRqmId/KtYeV+5l9ziImjG5gLobjLOn2WyYSm\nRL9hDmwdka+JBtYbm+xPejNeESEBWmPdLQvvLE0UsEIlcx94SuDkskUPkb9+K5s=\n=4DX3\n-----END PGP SIGNATURE-----\n", "payload": "tree 06a59887bed652640e0c2294ab8f0287038203c5\nparent a56bbb134fe98931de92b587c3b98920f6923bc9\nparent 08b1e8004b06112fb8334155b2cea314bd3e8161\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1614351151 +0100\ncommitter GitHub <noreply@github.com> 1614351151 +0100\n\nRollup merge of #82456 - klensy:or-else, r=estebank\n\nReplaced some unwrap_or and map_or with lazy variants\n\nReplaced some `unwrap_or` and `map_or` with `unwrap_or_else` and `map_or_else`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/039b1b62acc736080d3ecf86c249f00356ac91a0", "html_url": "https://github.com/rust-lang/rust/commit/039b1b62acc736080d3ecf86c249f00356ac91a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/039b1b62acc736080d3ecf86c249f00356ac91a0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a56bbb134fe98931de92b587c3b98920f6923bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a56bbb134fe98931de92b587c3b98920f6923bc9", "html_url": "https://github.com/rust-lang/rust/commit/a56bbb134fe98931de92b587c3b98920f6923bc9"}, {"sha": "08b1e8004b06112fb8334155b2cea314bd3e8161", "url": "https://api.github.com/repos/rust-lang/rust/commits/08b1e8004b06112fb8334155b2cea314bd3e8161", "html_url": "https://github.com/rust-lang/rust/commit/08b1e8004b06112fb8334155b2cea314bd3e8161"}], "stats": {"total": 62, "additions": 34, "deletions": 28}, "files": [{"sha": "1464784ae288c494cf7394a70db8d31fddbe2338", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -2372,7 +2372,7 @@ fn compute_type_parameters(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -> &'ll DIAr\n     fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {\n         let mut names = generics\n             .parent\n-            .map_or(vec![], |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n+            .map_or_else(Vec::new, |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n         names.extend(generics.params.iter().map(|param| param.name));\n         names\n     }"}, {"sha": "c28b0d64651e350a15390843ee581ef99db7a305", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -481,9 +481,9 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n \n         fn get_parameter_names(cx: &CodegenCx<'_, '_>, generics: &ty::Generics) -> Vec<Symbol> {\n-            let mut names = generics\n-                .parent\n-                .map_or(vec![], |def_id| get_parameter_names(cx, cx.tcx.generics_of(def_id)));\n+            let mut names = generics.parent.map_or_else(Vec::new, |def_id| {\n+                get_parameter_names(cx, cx.tcx.generics_of(def_id))\n+            });\n             names.extend(generics.params.iter().map(|param| param.name));\n             names\n         }"}, {"sha": "b007df5730621e7e368067afcd68a5055f721f15", "filename": "compiler/rustc_codegen_llvm/src/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -65,8 +65,8 @@ fn search_meta_section<'a>(\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n             let mut name_buf = None;\n             let name_len = llvm::LLVMRustGetSectionName(si.llsi, &mut name_buf);\n-            let name = name_buf.map_or(\n-                String::new(), // We got a NULL ptr, ignore `name_len`.\n+            let name = name_buf.map_or_else(\n+                String::new, // We got a NULL ptr, ignore `name_len`.\n                 |buf| {\n                     String::from_utf8(\n                         slice::from_raw_parts(buf.as_ptr() as *const u8, name_len as usize)"}, {"sha": "caa6a6a8e3a2661cdcfe1dd845b46df346db607d", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -2082,7 +2082,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         let filestem = cratepath.file_stem().unwrap().to_str().unwrap();\n         cmd.link_rust_dylib(\n             Symbol::intern(&unlib(&sess.target, filestem)),\n-            parent.unwrap_or(Path::new(\"\")),\n+            parent.unwrap_or_else(|| Path::new(\"\")),\n         );\n     }\n }"}, {"sha": "5a27135581747f15e5d91d1412996406502c69f6", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -201,7 +201,7 @@ fn check_panic_str<'tcx>(\n             Some(v) if v.len() == 1 => \"panic message contains a brace\",\n             _ => \"panic message contains braces\",\n         };\n-        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or(vec![span]), |lint| {\n+        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n             let mut l = lint.build(msg);\n             l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n             if span.contains(arg.span) {"}, {"sha": "291e7ef045e4f6c9f7e390c745110dbfa8f89d43", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -378,14 +378,14 @@ fn add_query_description_impl(\n                 let t = &(t.0).0;\n                 quote! { #t }\n             })\n-            .unwrap_or(quote! { _ });\n+            .unwrap_or_else(|| quote! { _ });\n         let value = args\n             .as_ref()\n             .map(|t| {\n                 let t = &(t.1).0;\n                 quote! { #t }\n             })\n-            .unwrap_or(quote! { _ });\n+            .unwrap_or_else(|| quote! { _ });\n         // expr is a `Block`, meaning that `{ #expr }` gets expanded\n         // to `{ { stmts... } }`, which triggers the `unused_braces` lint.\n         quote! {\n@@ -409,7 +409,7 @@ fn add_query_description_impl(\n     };\n \n     let (tcx, desc) = modifiers.desc;\n-    let tcx = tcx.as_ref().map_or(quote! { _ }, |t| quote! { #t });\n+    let tcx = tcx.as_ref().map_or_else(|| quote! { _ }, |t| quote! { #t });\n \n     let desc = quote! {\n         #[allow(unused_variables)]"}, {"sha": "8a0fce209b7fbeb0a9b6ddfea32a78c909864d61", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -473,9 +473,9 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                                         .map(\n                                             |applicability_idx| quote!(#binding.#applicability_idx),\n                                         )\n-                                        .unwrap_or(quote!(\n-                                            rustc_errors::Applicability::Unspecified\n-                                        ));\n+                                        .unwrap_or_else(|| {\n+                                            quote!(rustc_errors::Applicability::Unspecified)\n+                                        });\n                                     return Ok((span, applicability));\n                                 }\n                                 throw_span_err!("}, {"sha": "fa234ff5feb64095d10f6a3c3bcffed3c432c0ac", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -50,7 +50,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n \n     let name =\n         with_no_trimmed_paths(|| ty::tls::with(|tcx| tcx.def_path_str(cid.instance.def_id())));\n-    let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n+    let prom = cid.promoted.map_or_else(String::new, |p| format!(\"::promoted[{:?}]\", p));\n     trace!(\"eval_body_using_ecx: pushing stack frame for global: {}{}\", name, prom);\n \n     ecx.push_stack_frame("}, {"sha": "5b4939b740726449237ae38ec81004140f86946b", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n         fn tokens_to_string(tokens: &[TokenType]) -> String {\n             let mut i = tokens.iter();\n             // This might be a sign we need a connect method on `Iterator`.\n-            let b = i.next().map_or(String::new(), |t| t.to_string());\n+            let b = i.next().map_or_else(String::new, |t| t.to_string());\n             i.enumerate().fold(b, |mut b, (i, a)| {\n                 if tokens.len() > 2 && i == tokens.len() - 2 {\n                     b.push_str(\", or \");"}, {"sha": "493f25f4992d1f261f905759ba34881e865f0001", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -1971,7 +1971,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // Therefore, we would compute `object_lifetime_defaults` to a\n         // vector like `['x, 'static]`. Note that the vector only\n         // includes type parameters.\n-        let object_lifetime_defaults = type_def_id.map_or(vec![], |def_id| {\n+        let object_lifetime_defaults = type_def_id.map_or_else(Vec::new, |def_id| {\n             let in_body = {\n                 let mut scope = self.scope;\n                 loop {"}, {"sha": "2df326628e7872962571110dab50d0b109975970", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -169,7 +169,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n \n     // Check if sysroot is found using env::args().next(), and if is not found,\n     // use env::current_exe() to imply sysroot.\n-    from_env_args_next().unwrap_or(from_current_exe())\n+    from_env_args_next().unwrap_or_else(from_current_exe)\n }\n \n // The name of the directory rustc expects libraries to be located."}, {"sha": "264cc4f248cec9fe14ecbc19e36f097051c87a61", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -349,7 +349,7 @@ fn report_negative_positive_conflict(\n         E0751,\n         \"found both positive and negative implementation of trait `{}`{}:\",\n         overlap.trait_desc,\n-        overlap.self_desc.clone().map_or(String::new(), |ty| format!(\" for type `{}`\", ty))\n+        overlap.self_desc.clone().map_or_else(String::new, |ty| format!(\" for type `{}`\", ty))\n     );\n \n     match tcx.span_of_impl(negative_impl_def_id) {\n@@ -397,7 +397,10 @@ fn report_conflicting_impls(\n         let msg = format!(\n             \"conflicting implementations of trait `{}`{}:{}\",\n             overlap.trait_desc,\n-            overlap.self_desc.clone().map_or(String::new(), |ty| { format!(\" for type `{}`\", ty) }),\n+            overlap\n+                .self_desc\n+                .clone()\n+                .map_or_else(String::new, |ty| { format!(\" for type `{}`\", ty) }),\n             match used_to_be_allowed {\n                 Some(FutureCompatOverlapErrorKind::Issue33140) => \" (E0119)\",\n                 _ => \"\",\n@@ -415,7 +418,7 @@ fn report_conflicting_impls(\n                     impl_span,\n                     format!(\n                         \"conflicting implementation{}\",\n-                        overlap.self_desc.map_or(String::new(), |ty| format!(\" for `{}`\", ty))\n+                        overlap.self_desc.map_or_else(String::new, |ty| format!(\" for `{}`\", ty))\n                     ),\n                 );\n             }"}, {"sha": "38ff88553e8d1e77218a174b56cb208c02b9c3dc", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -1716,7 +1716,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_item(def_id, name, Namespace::ValueNS)\n-                    .map_or(Vec::new(), |x| vec![x])\n+                    .map_or_else(Vec::new, |x| vec![x])\n             }\n         } else {\n             self.tcx.associated_items(def_id).in_definition_order().copied().collect()"}, {"sha": "bb85336d7fb2d681ae9be5769ed1591ea577c390", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -1062,7 +1062,10 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span) {\n         E0533,\n         \"expected unit struct, unit variant or constant, found {}{}\",\n         res.descr(),\n-        tcx.sess.source_map().span_to_snippet(span).map_or(String::new(), |s| format!(\" `{}`\", s)),\n+        tcx.sess\n+            .source_map()\n+            .span_to_snippet(span)\n+            .map_or_else(|_| String::new(), |s| format!(\" `{}`\", s)),\n     )\n     .emit();\n }"}, {"sha": "f8ca916caf127b5f13c248478f9b50183437b017", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -879,7 +879,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let sm = tcx.sess.source_map();\n             let path_str = sm\n                 .span_to_snippet(sm.span_until_char(pat.span, '('))\n-                .map_or(String::new(), |s| format!(\" `{}`\", s.trim_end()));\n+                .map_or_else(|_| String::new(), |s| format!(\" `{}`\", s.trim_end()));\n             let msg = format!(\n                 \"expected tuple struct or tuple variant, found {}{}\",\n                 res.descr(),"}, {"sha": "af82a3bb4f59a31189f79518dec55b238ab1ff78", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -348,9 +348,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 let min_list_wb = min_list\n                     .iter()\n                     .map(|captured_place| {\n-                        let locatable = captured_place.info.path_expr_id.unwrap_or(\n-                            self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local()),\n-                        );\n+                        let locatable = captured_place.info.path_expr_id.unwrap_or_else(|| {\n+                            self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local())\n+                        });\n \n                         self.resolve(captured_place.clone(), &locatable)\n                     })"}, {"sha": "9fbc56f051beba0f20033b61cbf225001c528605", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039b1b62acc736080d3ecf86c249f00356ac91a0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=039b1b62acc736080d3ecf86c249f00356ac91a0", "patch": "@@ -2387,7 +2387,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                     .sess\n                     .source_map()\n                     .span_to_snippet(ast_ty.span)\n-                    .map_or(String::new(), |s| format!(\" `{}`\", s));\n+                    .map_or_else(|_| String::new(), |s| format!(\" `{}`\", s));\n                 tcx.sess\n                     .struct_span_err(\n                         ast_ty.span,"}]}