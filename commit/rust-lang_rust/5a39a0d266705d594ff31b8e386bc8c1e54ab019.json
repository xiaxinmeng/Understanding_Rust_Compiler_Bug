{"sha": "5a39a0d266705d594ff31b8e386bc8c1e54ab019", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMzlhMGQyNjY3MDVkNTk0ZmYzMWI4ZTM4NmJjOGMxZTU0YWIwMTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-31T11:29:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-01T11:13:06Z"}, "message": "To handle more complex cases, modify the deferred call handler to be\nspecialized to closures, and invoke them as soon as we know the\nclosure kind. I thought initially we would need a fixed-point\ninference algorithm but it appears I was mistaken, so we can do this.", "tree": {"sha": "98dd59f7fc5ccc545ac6c93f2dad6519670eee3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98dd59f7fc5ccc545ac6c93f2dad6519670eee3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a39a0d266705d594ff31b8e386bc8c1e54ab019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a39a0d266705d594ff31b8e386bc8c1e54ab019", "html_url": "https://github.com/rust-lang/rust/commit/5a39a0d266705d594ff31b8e386bc8c1e54ab019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a39a0d266705d594ff31b8e386bc8c1e54ab019/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1f54f01d666279f50153536eb5a8494f26d89a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1f54f01d666279f50153536eb5a8494f26d89a7", "html_url": "https://github.com/rust-lang/rust/commit/e1f54f01d666279f50153536eb5a8494f26d89a7"}], "stats": {"total": 401, "additions": 354, "deletions": 47}, "files": [{"sha": "93c6445606eb896ebe2bb0b7025a0bdc6ceadd19", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 42, "deletions": 36, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -14,7 +14,7 @@ use super::check_argument_types;\n use super::check_expr;\n use super::check_method_argument_types;\n use super::demand;\n-use super::DeferredResolution;\n+use super::DeferredCallResolution;\n use super::err_args;\n use super::Expectation;\n use super::expected_types_for_fn_args;\n@@ -99,8 +99,8 @@ pub fn check_call<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             confirm_builtin_call(fcx, call_expr, callee_ty, arg_exprs, expected);\n         }\n \n-        Some(CallStep::Closure(fn_sig)) => {\n-            confirm_closure_call(fcx, call_expr, arg_exprs, expected, fn_sig);\n+        Some(CallStep::DeferredClosure(fn_sig)) => {\n+            confirm_deferred_closure_call(fcx, call_expr, arg_exprs, expected, fn_sig);\n         }\n \n         Some(CallStep::Overloaded(method_callee)) => {\n@@ -112,7 +112,7 @@ pub fn check_call<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n \n enum CallStep<'tcx> {\n     Builtin,\n-    Closure(ty::FnSig<'tcx>),\n+    DeferredClosure(ty::FnSig<'tcx>),\n     Overloaded(ty::MethodCallee<'tcx>)\n }\n \n@@ -138,21 +138,28 @@ fn try_overloaded_call_step<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n \n         ty::ty_closure(def_id, _, substs) => {\n-            let closure_ty =\n-                fcx.closure_type(def_id, substs);\n-            let fn_sig =\n-                fcx.infcx().replace_late_bound_regions_with_fresh_var(call_expr.span,\n-                                                                      infer::FnCall,\n-                                                                      &closure_ty.sig).0;\n-            fcx.record_deferred_resolution(box CallResolution {\n-                call_expr: call_expr,\n-                callee_expr: callee_expr,\n-                adjusted_ty: adjusted_ty,\n-                autoderefref: autoderefref,\n-                fn_sig: fn_sig.clone(),\n-                closure_def_id: def_id,\n-            });\n-            return Some(CallStep::Closure(fn_sig));\n+            assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n+\n+            // Check whether this is a call to a closure where we\n+            // haven't yet decided on whether the closure is fn vs\n+            // fnmut vs fnonce. If so, we have to defer further processing.\n+            if fcx.closure_kind(def_id).is_none() {\n+                let closure_ty =\n+                    fcx.closure_type(def_id, substs);\n+                let fn_sig =\n+                    fcx.infcx().replace_late_bound_regions_with_fresh_var(call_expr.span,\n+                                                                          infer::FnCall,\n+                                                                          &closure_ty.sig).0;\n+                fcx.record_deferred_call_resolution(\n+                    def_id,\n+                    box CallResolution {call_expr: call_expr,\n+                                        callee_expr: callee_expr,\n+                                        adjusted_ty: adjusted_ty,\n+                                        autoderefref: autoderefref,\n+                                        fn_sig: fn_sig.clone(),\n+                                        closure_def_id: def_id});\n+                return Some(CallStep::DeferredClosure(fn_sig));\n+            }\n         }\n \n         _ => {}\n@@ -258,11 +265,11 @@ fn confirm_builtin_call<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     write_call(fcx, call_expr, fn_sig.output);\n }\n \n-fn confirm_closure_call<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n-                                 call_expr: &ast::Expr,\n-                                 arg_exprs: &'tcx [P<ast::Expr>],\n-                                 expected: Expectation<'tcx>,\n-                                 fn_sig: ty::FnSig<'tcx>)\n+fn confirm_deferred_closure_call<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n+                                          call_expr: &ast::Expr,\n+                                          arg_exprs: &'tcx [P<ast::Expr>],\n+                                          expected: Expectation<'tcx>,\n+                                          fn_sig: ty::FnSig<'tcx>)\n {\n     // `fn_sig` is the *signature* of the cosure being called. We\n     // don't know the full details yet (`Fn` vs `FnMut` etc), but we\n@@ -338,22 +345,18 @@ impl<'tcx> Repr<'tcx> for CallResolution<'tcx> {\n     }\n }\n \n-impl<'tcx> DeferredResolution<'tcx> for CallResolution<'tcx> {\n-    fn attempt_resolution<'a>(&self, fcx: &FnCtxt<'a,'tcx>) -> bool {\n-        debug!(\"attempt_resolution() {}\",\n+impl<'tcx> DeferredCallResolution<'tcx> for CallResolution<'tcx> {\n+    fn resolve<'a>(&mut self, fcx: &FnCtxt<'a,'tcx>) {\n+        debug!(\"DeferredCallResolution::resolve() {}\",\n                self.repr(fcx.tcx()));\n \n-        match fcx.closure_kind(self.closure_def_id) {\n-            Some(_) => { }\n-            None => {\n-                return false;\n-            }\n-        }\n+        // we should not be invoked until the closure kind has been\n+        // determined by upvar inference\n+        assert!(fcx.closure_kind(self.closure_def_id).is_some());\n \n         // We may now know enough to figure out fn vs fnmut etc.\n         match try_overloaded_call_traits(fcx, self.call_expr, self.callee_expr,\n                                          self.adjusted_ty, self.autoderefref.clone()) {\n-            None => false,\n             Some(method_callee) => {\n                 // One problem is that when we get here, we are going\n                 // to have a newly instantiated function signature\n@@ -382,8 +385,11 @@ impl<'tcx> DeferredResolution<'tcx> for CallResolution<'tcx> {\n                                self.fn_sig.output.unwrap());\n \n                 write_overloaded_call_method_map(fcx, self.call_expr, method_callee);\n-\n-                true\n+            }\n+            None => {\n+                fcx.tcx().sess.span_bug(\n+                    self.call_expr.span,\n+                    \"failed to find an overloaded call trait for closure call\");\n             }\n         }\n     }"}, {"sha": "0aad1f99ce8f22b77589ef1966a0d7a4a47c20ce", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -110,6 +110,7 @@ use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n use util::lev_distance::lev_distance;\n \n use std::cell::{Cell, Ref, RefCell};\n+use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem::replace;\n use std::rc::Rc;\n use std::iter::repeat;\n@@ -172,15 +173,21 @@ pub struct Inherited<'a, 'tcx: 'a> {\n     // Tracks trait obligations incurred during this function body.\n     fulfillment_cx: RefCell<traits::FulfillmentContext<'tcx>>,\n \n-    //\n-    deferred_resolutions: RefCell<Vec<DeferredResolutionHandler<'tcx>>>,\n+    // When we process a call like `c()` where `c` is a closure type,\n+    // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n+    // `FnOnce` closure. In that case, we defer full resolution of the\n+    // call until upvar inference can kick in and make the\n+    // decision. We keep these deferred resolutions sorted by the\n+    // def-id of the closure, so that once we decide, we can easily go\n+    // back and process them.\n+    deferred_call_resolutions: RefCell<DefIdMap<Vec<DeferredCallResolutionHandler<'tcx>>>>,\n }\n \n-trait DeferredResolution<'tcx> {\n-    fn attempt_resolution<'a>(&self, fcx: &FnCtxt<'a,'tcx>) -> bool;\n+trait DeferredCallResolution<'tcx> {\n+    fn resolve<'a>(&mut self, fcx: &FnCtxt<'a,'tcx>);\n }\n \n-type DeferredResolutionHandler<'tcx> = Box<DeferredResolution<'tcx>+'tcx>;\n+type DeferredCallResolutionHandler<'tcx> = Box<DeferredCallResolution<'tcx>+'tcx>;\n \n /// When type-checking an expression, we propagate downward\n /// whatever type hint we are able in the form of an `Expectation`.\n@@ -391,7 +398,7 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             closure_kinds: RefCell::new(DefIdMap()),\n             fn_sig_map: RefCell::new(NodeMap()),\n             fulfillment_cx: RefCell::new(traits::FulfillmentContext::new()),\n-            deferred_resolutions: RefCell::new(Vec::new()),\n+            deferred_call_resolutions: RefCell::new(DefIdMap()),\n         }\n     }\n \n@@ -1295,8 +1302,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if ty::type_has_ty_infer(t) || ty::type_is_error(t) { Err(()) } else { Ok(t) }\n     }\n \n-    fn record_deferred_resolution(&self, r: DeferredResolutionHandler<'tcx>) {\n-        self.inh.deferred_resolutions.borrow_mut().push(r);\n+    fn record_deferred_call_resolution(&self,\n+                                       closure_def_id: ast::DefId,\n+                                       r: DeferredCallResolutionHandler<'tcx>) {\n+        let mut deferred_call_resolutions = self.inh.deferred_call_resolutions.borrow_mut();\n+        let mut vec = match deferred_call_resolutions.entry(closure_def_id) {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(Vec::new()),\n+        };\n+        vec.push(r);\n+    }\n+\n+    fn remove_deferred_call_resolutions(&self,\n+                                        closure_def_id: ast::DefId)\n+                                        -> Vec<DeferredCallResolutionHandler<'tcx>>\n+    {\n+        let mut deferred_call_resolutions = self.inh.deferred_call_resolutions.borrow_mut();\n+        deferred_call_resolutions.remove(&closure_def_id).unwrap_or(Vec::new())\n     }\n \n     pub fn tag(&self) -> String {"}, {"sha": "961a2e39dc08f6491ad32814672941b959e81b4f", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -67,6 +67,9 @@ pub fn closure_analyze_fn(fcx: &FnCtxt,\n \n     let mut adjust = AdjustBorrowKind::new(fcx, &closures_with_inferred_kinds);\n     adjust.visit_block(body);\n+\n+    // it's our job to process these.\n+    assert!(fcx.inh.deferred_call_resolutions.borrow().is_empty());\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -186,10 +189,56 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n \n         self.visit_block(body);\n \n-        debug!(\"analyzing fn body with id {}\", body.id);\n+        debug!(\"analyzing closure `{}` with fn body id `{}`\", id, body.id);\n \n         let mut euv = euv::ExprUseVisitor::new(self, self.fcx);\n         euv.walk_fn(decl, body);\n+\n+        // If we had not yet settled on a closure kind for this closure,\n+        // then we should have by now. Process and remove any deferred resolutions.\n+        //\n+        // Interesting fact: all calls to this closure must come\n+        // *after* its definition.  Initially, I thought that some\n+        // kind of fixed-point iteration would be required, due to the\n+        // possibility of twisted examples like this one:\n+        //\n+        // ```rust\n+        // let mut closure0 = None;\n+        // let vec = vec!(1, 2, 3);\n+        //\n+        // loop {\n+        //     {\n+        //         let closure1 = || {\n+        //             match closure0.take() {\n+        //                 Some(c) => {\n+        //                     return c(); // (*) call to `closure0` before it is defined\n+        //                 }\n+        //                 None => { }\n+        //             }\n+        //         };\n+        //         closure1();\n+        //     }\n+        //\n+        //     closure0 = || vec;\n+        // }\n+        // ```\n+        //\n+        // However, this turns out to be wrong. Examples like this\n+        // fail to compile because the type of the variable `c` above\n+        // is an inference variable.  And in fact since closure types\n+        // cannot be written, there is no way to make this example\n+        // work without a boxed closure. This implies that we can't\n+        // have two closures that recursively call one another without\n+        // some form of boxing (and hence explicit writing of a\n+        // closure kind) involved. Huzzah. -nmatsakis\n+        let closure_def_id = ast_util::local_def(id);\n+        if self.closures_with_inferred_kinds.contains(&id) {\n+            let mut deferred_call_resolutions =\n+                self.fcx.remove_deferred_call_resolutions(closure_def_id);\n+            for deferred_call_resolution in deferred_call_resolutions.iter_mut() {\n+                deferred_call_resolution.resolve(self.fcx);\n+            }\n+        }\n     }\n \n     fn adjust_upvar_borrow_kind_for_consume(&self,"}, {"sha": "5cf71a9be6a024677e458e3dc7f4bba8a6c9c811", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -280,8 +280,6 @@ fn check_object_type_binds_all_associated_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n pub fn select_all_fcx_obligations_and_apply_defaults(fcx: &FnCtxt) {\n     debug!(\"select_all_fcx_obligations_and_apply_defaults\");\n \n-    fcx.inh.deferred_resolutions.borrow_mut()\n-                                .retain(|r| !r.attempt_resolution(fcx));\n     select_fcx_obligations_where_possible(fcx);\n     fcx.default_type_parameters();\n     select_fcx_obligations_where_possible(fcx);\n@@ -290,6 +288,10 @@ pub fn select_all_fcx_obligations_and_apply_defaults(fcx: &FnCtxt) {\n pub fn select_all_fcx_obligations_or_error(fcx: &FnCtxt) {\n     debug!(\"select_all_fcx_obligations_or_error\");\n \n+    // upvar inference should have ensured that all deferrred call\n+    // resolutions are handled by now.\n+    assert!(fcx.inh.deferred_call_resolutions.borrow().is_empty());\n+\n     select_all_fcx_obligations_and_apply_defaults(fcx);\n     let mut fulfillment_cx = fcx.inh.fulfillment_cx.borrow_mut();\n     let r = fulfillment_cx.select_all_or_error(fcx.infcx(), fcx);"}, {"sha": "7398e6f1089bcddaf76b9ed95ea01ec2cb2d7348", "filename": "src/test/compile-fail/unboxed-closures-failed-recursive-fn-1.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-1.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various unsuccessful attempts to put the unboxed closure kind\n+// inference into an awkward position that might require fixed point\n+// iteration (basically where inferring the kind of a closure `c`\n+// would require knowing the kind of `c`). I currently believe this is\n+// impossible.\n+\n+fn a() {\n+    // This case of recursion wouldn't even require fixed-point\n+    // iteration, but it still doesn't work. The weird structure with\n+    // the `Option` is to avoid giving any useful hints about the `Fn`\n+    // kind via the expected type.\n+    let mut factorial: Option<Box<Fn(u32) -> u32>> = None;\n+\n+    let f = |x: u32| -> u32 {\n+        let g = factorial.as_ref().unwrap();\n+        if x == 0 {1} else {x * g(x-1)}\n+    };\n+\n+    factorial = Some(Box::new(f));\n+    //~^ ERROR cannot assign to `factorial` because it is borrowed\n+}\n+\n+fn main() { }"}, {"sha": "f40c8fc7474947a01db763c316ab46afff760cd1", "filename": "src/test/compile-fail/unboxed-closures-failed-recursive-fn-2.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-failed-recursive-fn-2.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various unsuccessful attempts to put the unboxed closure kind\n+// inference into an awkward position that might require fixed point\n+// iteration (basically where inferring the kind of a closure `c`\n+// would require knowing the kind of `c`). I currently believe this is\n+// impossible.\n+\n+fn a() {\n+    let mut closure0 = None;\n+    let vec = vec!(1, 2, 3);\n+\n+    loop {\n+        {\n+            let closure1 = || {\n+                match closure0.take() {\n+                    Some(c) => {\n+                        return c();\n+                        //~^ ERROR the type of this value must be known in this context\n+                    }\n+                    None => { }\n+                }\n+            };\n+            closure1();\n+        }\n+\n+        closure0 = || vec;\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "afbc141b5d246aa8390d13001e41c26ede2e424e", "filename": "src/test/compile-fail/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to infer a suitable kind for this closure\n+// that is just called (`FnMut`).\n+\n+fn main() {\n+    let mut counter = 0;\n+\n+    // Here this must be inferred to FnMut so that it can mutate counter,\n+    // but we forgot the mut.\n+    let tick1 = || {\n+        counter += 1;\n+    };\n+\n+    // In turn, tick2 must be inferred to FnMut so that it can call\n+    // tick1, but we forgot the mut. The error message we currently\n+    // get seems... suboptimal.\n+    let tick2 = || { //~ ERROR closure cannot assign to immutable local variable `tick1`\n+        tick1();\n+    };\n+\n+    tick2(); //~ ERROR cannot borrow\n+}\n+"}, {"sha": "215b2c6798e40c80f30333dd4edbc1a34120b3b6", "filename": "src/test/compile-fail/unboxed-closures-recursive-fn-using-fn-mut.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-recursive-fn-using-fn-mut.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core,unboxed_closures)]\n+\n+use std::marker::CovariantType;\n+\n+// A erroneous variant of `run-pass/unboxed_closures-infer-recursive-fn.rs`\n+// where we attempt to perform mutation in the recursive function. This fails to compile\n+// because it winds up requiring `FnMut` which enforces linearity.\n+\n+struct YCombinator<F,A,R> {\n+    func: F,\n+    marker: CovariantType<(A,R)>,\n+}\n+\n+impl<F,A,R> YCombinator<F,A,R> {\n+    fn new(f: F) -> YCombinator<F,A,R> {\n+        YCombinator { func: f, marker: CovariantType }\n+    }\n+}\n+\n+impl<A,R,F : FnMut(&mut FnMut(A) -> R, A) -> R> FnMut<(A,)> for YCombinator<F,A,R> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call_mut(&mut self, (arg,): (A,)) -> R {\n+        (self.func)(self, arg)\n+            //~^ ERROR cannot borrow `*self` as mutable more than once at a time\n+    }\n+}\n+\n+fn main() {\n+    let mut counter = 0;\n+    let factorial = |recur: &mut FnMut(u32) -> u32, arg: u32| -> u32 {\n+        counter += 1;\n+        if arg == 0 {1} else {arg * recur(arg-1)}\n+    };\n+    let mut factorial: YCombinator<_,u32,u32> = YCombinator::new(factorial);\n+    let mut r = factorial(10);\n+    assert_eq!(3628800, r);\n+}"}, {"sha": "09b8c8f4454b5ea3e11a9e1ba9134b1063fb18ea", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut-calling-fnmut.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we are able to infer a suitable kind for this closure\n+// that is just called (`FnMut`).\n+\n+fn main() {\n+    let mut counter = 0;\n+\n+    {\n+        // Here this must be inferred to FnMut so that it can mutate counter:\n+        let mut tick1 = || counter += 1;\n+\n+        // In turn, tick2 must be inferred to FnMut so that it can call tick1:\n+        let mut tick2 = || { tick1(); tick1(); };\n+\n+        tick2();\n+    }\n+\n+    assert_eq!(counter, 2);\n+}\n+"}, {"sha": "1f9b821178c46f43eac85ce007b66afc76a87761", "filename": "src/test/run-pass/unboxed-closures-infer-recursive-fn.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a39a0d266705d594ff31b8e386bc8c1e54ab019/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-recursive-fn.rs?ref=5a39a0d266705d594ff31b8e386bc8c1e54ab019", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core,unboxed_closures)]\n+\n+use std::marker::CovariantType;\n+\n+// Test that we are able to infer a suitable kind for a \"recursive\"\n+// closure.  As far as I can tell, coding up a recursive closure\n+// requires the good ol' [Y Combinator].\n+//\n+// [Y Combinator]: http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator\n+\n+struct YCombinator<F,A,R> {\n+    func: F,\n+    marker: CovariantType<(A,R)>,\n+}\n+\n+impl<F,A,R> YCombinator<F,A,R> {\n+    fn new(f: F) -> YCombinator<F,A,R> {\n+        YCombinator { func: f, marker: CovariantType }\n+    }\n+}\n+\n+impl<A,R,F : Fn(&Fn(A) -> R, A) -> R> Fn<(A,)> for YCombinator<F,A,R> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call(&self, (arg,): (A,)) -> R {\n+        (self.func)(self, arg)\n+    }\n+}\n+\n+fn main() {\n+    let factorial = |recur: &Fn(u32) -> u32, arg: u32| -> u32 {\n+        if arg == 0 {1} else {arg * recur(arg-1)}\n+    };\n+    let factorial: YCombinator<_,u32,u32> = YCombinator::new(factorial);\n+    let r = factorial(10);\n+    assert_eq!(3628800, r);\n+}"}]}