{"sha": "46084a1e71c7e8733eb51c62699b565f96795fd5", "node_id": "C_kwDOAAsO6NoAKDQ2MDg0YTFlNzFjN2U4NzMzZWI1MWM2MjY5OWI1NjVmOTY3OTVmZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-25T13:57:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-25T13:57:29Z"}, "message": "Auto merge of #14015 - vasilev-alex:lifetime-rename, r=Veykril\n\nDon't include lifetime or label apostrophe when renaming\n\nCloses #13907", "tree": {"sha": "a8a9cec0b064294df4852a942f0e96e05043ce35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a9cec0b064294df4852a942f0e96e05043ce35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46084a1e71c7e8733eb51c62699b565f96795fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46084a1e71c7e8733eb51c62699b565f96795fd5", "html_url": "https://github.com/rust-lang/rust/commit/46084a1e71c7e8733eb51c62699b565f96795fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46084a1e71c7e8733eb51c62699b565f96795fd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85736de3bcd5ecab337a022bcc43014917296388", "url": "https://api.github.com/repos/rust-lang/rust/commits/85736de3bcd5ecab337a022bcc43014917296388", "html_url": "https://github.com/rust-lang/rust/commit/85736de3bcd5ecab337a022bcc43014917296388"}, {"sha": "3c898dd9a10350a53bdfe94eb5ffb848addeb762", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c898dd9a10350a53bdfe94eb5ffb848addeb762", "html_url": "https://github.com/rust-lang/rust/commit/3c898dd9a10350a53bdfe94eb5ffb848addeb762"}], "stats": {"total": 75, "additions": 61, "deletions": 14}, "files": [{"sha": "6da650aeb6b91dadc2430d23c8d403241fde8624", "filename": "crates/ide-db/src/rename.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/46084a1e71c7e8733eb51c62699b565f96795fd5/crates%2Fide-db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46084a1e71c7e8733eb51c62699b565f96795fd5/crates%2Fide-db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Frename.rs?ref=46084a1e71c7e8733eb51c62699b565f96795fd5", "patch": "@@ -263,11 +263,10 @@ fn rename_reference(\n         Definition::GenericParam(hir::GenericParam::LifetimeParam(_)) | Definition::Label(_)\n     ) {\n         match ident_kind {\n-            IdentifierKind::Ident | IdentifierKind::Underscore => {\n-                cov_mark::hit!(rename_not_a_lifetime_ident_ref);\n+            IdentifierKind::Underscore => {\n                 bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name);\n             }\n-            IdentifierKind::Lifetime => cov_mark::hit!(rename_lifetime),\n+            _ => cov_mark::hit!(rename_lifetime),\n         }\n     } else {\n         match ident_kind {\n@@ -335,7 +334,15 @@ pub fn source_edit_from_references(\n             _ => false,\n         };\n         if !has_emitted_edit && !edited_ranges.contains(&range.start()) {\n-            edit.replace(range, new_name.to_string());\n+            let (range, new_name) = match name {\n+                ast::NameLike::Lifetime(_) => (\n+                    TextRange::new(range.start() + syntax::TextSize::from(1), range.end()),\n+                    new_name.strip_prefix('\\'').unwrap_or(new_name).to_owned(),\n+                ),\n+                _ => (range, new_name.to_owned()),\n+            };\n+\n+            edit.replace(range, new_name);\n             edited_ranges.push(range.start());\n         }\n     }\n@@ -501,7 +508,15 @@ fn source_edit_from_def(\n         }\n     }\n     if edit.is_empty() {\n-        edit.replace(range, new_name.to_string());\n+        let (range, new_name) = match def {\n+            Definition::GenericParam(hir::GenericParam::LifetimeParam(_))\n+            | Definition::Label(_) => (\n+                TextRange::new(range.start() + syntax::TextSize::from(1), range.end()),\n+                new_name.strip_prefix('\\'').unwrap_or(new_name).to_owned(),\n+            ),\n+            _ => (range, new_name.to_owned()),\n+        };\n+        edit.replace(range, new_name);\n     }\n     Ok((file_id, edit.finish()))\n }\n@@ -522,9 +537,6 @@ impl IdentifierKind {\n                 (SyntaxKind::LIFETIME_IDENT, _) if new_name != \"'static\" && new_name != \"'_\" => {\n                     Ok(IdentifierKind::Lifetime)\n                 }\n-                (SyntaxKind::LIFETIME_IDENT, _) => {\n-                    bail!(\"Invalid name `{}`: not a lifetime identifier\", new_name)\n-                }\n                 (_, Some(syntax_error)) => bail!(\"Invalid name `{}`: {}\", new_name, syntax_error),\n                 (_, None) => bail!(\"Invalid name `{}`: not an identifier\", new_name),\n             },"}, {"sha": "25d165d11137e0088253b90a41aa21fe2f440d3b", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/46084a1e71c7e8733eb51c62699b565f96795fd5/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46084a1e71c7e8733eb51c62699b565f96795fd5/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=46084a1e71c7e8733eb51c62699b565f96795fd5", "patch": "@@ -13,7 +13,7 @@ use ide_db::{\n };\n use itertools::Itertools;\n use stdx::{always, never};\n-use syntax::{ast, AstNode, SyntaxNode};\n+use syntax::{ast, AstNode, SyntaxNode, TextRange, TextSize};\n \n use text_edit::TextEdit;\n \n@@ -48,7 +48,13 @@ pub(crate) fn prepare_rename(\n                 frange.range.contains_inclusive(position.offset)\n                     && frange.file_id == position.file_id\n             );\n-            Ok(frange.range)\n+\n+            Ok(match name_like {\n+                ast::NameLike::Lifetime(_) => {\n+                    TextRange::new(frange.range.start() + TextSize::from(1), frange.range.end())\n+                }\n+                _ => frange.range,\n+            })\n         })\n         .reduce(|acc, cur| match (acc, cur) {\n             // ensure all ranges are the same\n@@ -407,7 +413,7 @@ mod tests {\n     #[test]\n     fn test_prepare_rename_namelikes() {\n         check_prepare(r\"fn name$0<'lifetime>() {}\", expect![[r#\"3..7: name\"#]]);\n-        check_prepare(r\"fn name<'lifetime$0>() {}\", expect![[r#\"8..17: 'lifetime\"#]]);\n+        check_prepare(r\"fn name<'lifetime$0>() {}\", expect![[r#\"9..17: lifetime\"#]]);\n         check_prepare(r\"fn name<'lifetime>() { name$0(); }\", expect![[r#\"23..27: name\"#]]);\n     }\n \n@@ -521,14 +527,18 @@ impl Foo {\n \n     #[test]\n     fn test_rename_to_invalid_identifier_lifetime2() {\n-        cov_mark::check!(rename_not_a_lifetime_ident_ref);\n         check(\n-            \"foo\",\n+            \"_\",\n             r#\"fn main<'a>(_: &'a$0 ()) {}\"#,\n-            \"error: Invalid name `foo`: not a lifetime identifier\",\n+            r#\"error: Invalid name `_`: not a lifetime identifier\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_rename_accepts_lifetime_without_apostrophe() {\n+        check(\"foo\", r#\"fn main<'a>(_: &'a$0 ()) {}\"#, r#\"fn main<'foo>(_: &'foo ()) {}\"#);\n+    }\n+\n     #[test]\n     fn test_rename_to_underscore_invalid() {\n         cov_mark::check!(rename_underscore_multiple);\n@@ -1831,6 +1841,31 @@ fn foo<'a>() -> &'a () {\n         )\n     }\n \n+    #[test]\n+    fn test_rename_label_new_name_without_apostrophe() {\n+        check(\n+            \"foo\",\n+            r#\"\n+fn main() {\n+    'outer$0: loop {\n+        'inner: loop {\n+            break 'outer;\n+        }\n+    }\n+}\n+        \"#,\n+            r#\"\n+fn main() {\n+    'foo: loop {\n+        'inner: loop {\n+            break 'foo;\n+        }\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_self_to_self() {\n         cov_mark::check!(rename_self_to_self);"}]}