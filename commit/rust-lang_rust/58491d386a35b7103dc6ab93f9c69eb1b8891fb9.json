{"sha": "58491d386a35b7103dc6ab93f9c69eb1b8891fb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NDkxZDM4NmEzNWI3MTAzZGM2YWI5M2Y5YzY5ZWIxYjg4OTFmYjk=", "commit": {"author": {"name": "Steven Engler", "email": "smengler3@gmail.com", "date": "2021-05-31T00:19:57Z"}, "committer": {"name": "Steven Engler", "email": "smengler3@gmail.com", "date": "2021-05-31T00:19:57Z"}, "message": "Update message for 'not_unsafe_ptr_arg_deref' lint", "tree": {"sha": "c7ace5764e07fdf01ba8bc74a9c863fb27e5a232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ace5764e07fdf01ba8bc74a9c863fb27e5a232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58491d386a35b7103dc6ab93f9c69eb1b8891fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58491d386a35b7103dc6ab93f9c69eb1b8891fb9", "html_url": "https://github.com/rust-lang/rust/commit/58491d386a35b7103dc6ab93f9c69eb1b8891fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58491d386a35b7103dc6ab93f9c69eb1b8891fb9/comments", "author": {"login": "stevenengler", "id": 3708797, "node_id": "MDQ6VXNlcjM3MDg3OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/3708797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenengler", "html_url": "https://github.com/stevenengler", "followers_url": "https://api.github.com/users/stevenengler/followers", "following_url": "https://api.github.com/users/stevenengler/following{/other_user}", "gists_url": "https://api.github.com/users/stevenengler/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenengler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenengler/subscriptions", "organizations_url": "https://api.github.com/users/stevenengler/orgs", "repos_url": "https://api.github.com/users/stevenengler/repos", "events_url": "https://api.github.com/users/stevenengler/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenengler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stevenengler", "id": 3708797, "node_id": "MDQ6VXNlcjM3MDg3OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/3708797?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stevenengler", "html_url": "https://github.com/stevenengler", "followers_url": "https://api.github.com/users/stevenengler/followers", "following_url": "https://api.github.com/users/stevenengler/following{/other_user}", "gists_url": "https://api.github.com/users/stevenengler/gists{/gist_id}", "starred_url": "https://api.github.com/users/stevenengler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stevenengler/subscriptions", "organizations_url": "https://api.github.com/users/stevenengler/orgs", "repos_url": "https://api.github.com/users/stevenengler/repos", "events_url": "https://api.github.com/users/stevenengler/events{/privacy}", "received_events_url": "https://api.github.com/users/stevenengler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1308aecaf7964f8587f5fb4a28641edd46b173d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1308aecaf7964f8587f5fb4a28641edd46b173d", "html_url": "https://github.com/rust-lang/rust/commit/d1308aecaf7964f8587f5fb4a28641edd46b173d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "af759a48e10ca117d2f41aa62732df586d0b0723", "filename": "clippy_lints/src/functions/not_unsafe_ptr_arg_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58491d386a35b7103dc6ab93f9c69eb1b8891fb9/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58491d386a35b7103dc6ab93f9c69eb1b8891fb9/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fnot_unsafe_ptr_arg_deref.rs?ref=58491d386a35b7103dc6ab93f9c69eb1b8891fb9", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx> DerefVisitor<'a, 'tcx> {\n                     self.cx,\n                     NOT_UNSAFE_PTR_ARG_DEREF,\n                     ptr.span,\n-                    \"this public function dereferences a raw pointer but is not marked `unsafe`\",\n+                    \"this public function might dereference a raw pointer but is not marked `unsafe`\",\n                 );\n             }\n         }"}, {"sha": "a2b8c2a384b03ac89d2593f0ccc22b6432d20357", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/58491d386a35b7103dc6ab93f9c69eb1b8891fb9/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58491d386a35b7103dc6ab93f9c69eb1b8891fb9/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=58491d386a35b7103dc6ab93f9c69eb1b8891fb9", "patch": "@@ -30,57 +30,57 @@ error: this function has too many arguments (8/7)\n LL |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:63:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n    |\n    = note: `-D clippy::not-unsafe-ptr-arg-deref` implied by `-D warnings`\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:64:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:65:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:76:30\n    |\n LL |     println!(\"{}\", unsafe { *p });\n    |                              ^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:77:31\n    |\n LL |     println!(\"{:?}\", unsafe { p.as_ref() });\n    |                               ^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:78:29\n    |\n LL |     unsafe { std::ptr::read(p) };\n    |                             ^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:87:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:88:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n-error: this public function dereferences a raw pointer but is not marked `unsafe`\n+error: this public function might dereference a raw pointer but is not marked `unsafe`\n   --> $DIR/functions.rs:89:33\n    |\n LL |         unsafe { std::ptr::read(p) };"}]}