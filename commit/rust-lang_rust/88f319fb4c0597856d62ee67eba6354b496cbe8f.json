{"sha": "88f319fb4c0597856d62ee67eba6354b496cbe8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZjMxOWZiNGMwNTk3ODU2ZDYyZWU2N2ViYTYzNTRiNDk2Y2JlOGY=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-28T03:49:06Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T14:25:21Z"}, "message": "Add failing tests for mutex and rwlock", "tree": {"sha": "180d8d6dfceb3ee36286227d8b2b649437033803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/180d8d6dfceb3ee36286227d8b2b649437033803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f319fb4c0597856d62ee67eba6354b496cbe8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f319fb4c0597856d62ee67eba6354b496cbe8f", "html_url": "https://github.com/rust-lang/rust/commit/88f319fb4c0597856d62ee67eba6354b496cbe8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f319fb4c0597856d62ee67eba6354b496cbe8f/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46679bc9eff4f7f7414bc162c0e6c00e7b91cc39", "url": "https://api.github.com/repos/rust-lang/rust/commits/46679bc9eff4f7f7414bc162c0e6c00e7b91cc39", "html_url": "https://github.com/rust-lang/rust/commit/46679bc9eff4f7f7414bc162c0e6c00e7b91cc39"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "061ae93d8f675f29a8445d1a04ddbba78ba3c94a", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88f319fb4c0597856d62ee67eba6354b496cbe8f/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f319fb4c0597856d62ee67eba6354b496cbe8f/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=88f319fb4c0597856d62ee67eba6354b496cbe8f", "patch": "@@ -268,6 +268,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             | \"pthread_mutex_init\"\n             | \"pthread_mutexattr_destroy\"\n             | \"pthread_mutex_lock\"\n+            | \"pthread_mutex_trylock\"\n             | \"pthread_mutex_unlock\"\n             | \"pthread_mutex_destroy\"\n             | \"pthread_rwlock_rdlock\""}, {"sha": "6a0b41d5f6a7902c948797e581ec7fc439475fad", "filename": "tests/run-pass/sync.rs", "status": "modified", "additions": 67, "deletions": 6, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/88f319fb4c0597856d62ee67eba6354b496cbe8f/tests%2Frun-pass%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f319fb4c0597856d62ee67eba6354b496cbe8f/tests%2Frun-pass%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsync.rs?ref=88f319fb4c0597856d62ee67eba6354b496cbe8f", "patch": "@@ -1,20 +1,81 @@\n // Just instantiate some data structures to make sure we got all their foreign items covered.\n // Requires full MIR on Windows.\n \n+#![feature(rustc_private)]\n+\n use std::sync;\n \n+extern crate libc;\n+\n fn main() {\n     let m = sync::Mutex::new(0);\n-    drop(m.lock());\n+    {\n+        let _guard = m.lock();\n+        let try_lock_error = m.try_lock().unwrap_err();\n+        if let sync::TryLockError::Poisoned(e) = try_lock_error {\n+            panic!(\"{}\", e);\n+        }\n+    }\n+    drop(m.try_lock().unwrap());\n     drop(m);\n \n     #[cfg(not(target_os = \"windows\"))] // TODO: implement RwLock on Windows\n     {\n         let rw = sync::RwLock::new(0);\n-        drop(rw.read());\n-        drop(rw.try_read());\n-        drop(rw.write());\n-        drop(rw.try_write());\n-        drop(rw);\n+        {\n+            let _read_guard = rw.read().unwrap();\n+            drop(rw.read().unwrap());\n+            drop(rw.try_read().unwrap());\n+            let try_lock_error = rw.try_write().unwrap_err();\n+            if let sync::TryLockError::Poisoned(e) = try_lock_error {\n+                panic!(\"{}\", e);\n+            }\n+        }\n+\n+        {\n+            let _write_guard = rw.write().unwrap();\n+            let try_lock_error = rw.try_read().unwrap_err();\n+            if let sync::TryLockError::Poisoned(e) = try_lock_error {\n+                panic!(\"{}\", e);\n+            }\n+            let try_lock_error = rw.try_write().unwrap_err();\n+            if let sync::TryLockError::Poisoned(e) = try_lock_error {\n+                panic!(\"{}\", e);\n+            }\n+        }\n+\n+        // need to go a layer deeper and test the behavior of libc functions, because\n+        // std::sys::unix::rwlock::RWLock keeps track of write_locked and num_readers\n+\n+        unsafe {\n+            let mut mutex: libc::pthread_mutex_t = std::mem::zeroed();\n+            assert_eq!(libc::pthread_mutex_init(&mut mutex as *mut _, std::ptr::null_mut()), 0);\n+            assert_eq!(libc::pthread_mutex_lock(&mut mutex as *mut _), 0);\n+            assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), libc::EBUSY);\n+            assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+            assert_eq!(libc::pthread_mutex_trylock(&mut mutex as *mut _), 0);\n+            assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n+            assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n+        }\n+\n+        unsafe {\n+            let mut rw: libc::pthread_rwlock_t = std::mem::zeroed();\n+            assert_eq!(libc::pthread_rwlock_init(&mut rw as *mut _, std::ptr::null_mut()), 0);\n+\n+            assert_eq!(libc::pthread_rwlock_rdlock(&mut rw as *mut _), 0);\n+            assert_eq!(libc::pthread_rwlock_rdlock(&mut rw as *mut _), 0);\n+            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n+            assert_eq!(libc::pthread_rwlock_tryrdlock(&mut rw as *mut _), 0);\n+            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n+            assert_eq!(libc::pthread_rwlock_trywrlock(&mut rw as *mut _), libc::EBUSY);\n+            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n+\n+            assert_eq!(libc::pthread_rwlock_wrlock(&mut rw as *mut _), 0);\n+            assert_eq!(libc::pthread_rwlock_tryrdlock(&mut rw as *mut _), libc::EBUSY);\n+            assert_eq!(libc::pthread_rwlock_trywrlock(&mut rw as *mut _), libc::EBUSY);\n+            assert_eq!(libc::pthread_rwlock_unlock(&mut rw as *mut _), 0);\n+\n+            assert_eq!(libc::pthread_rwlock_destroy(&mut rw as *mut _), 0);\n+        }\n     }\n }"}]}