{"sha": "26ecb30f550a46d52528a7d45d9327ebce938e81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZWNiMzBmNTUwYTQ2ZDUyNTI4YTdkNDVkOTMyN2ViY2U5MzhlODE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-09T15:36:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-10T23:32:09Z"}, "message": "test: update serialization tests to use new macro", "tree": {"sha": "7eed728593ecea0e917de1d4c85f713a33436263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eed728593ecea0e917de1d4c85f713a33436263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26ecb30f550a46d52528a7d45d9327ebce938e81", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26ecb30f550a46d52528a7d45d9327ebce938e81", "html_url": "https://github.com/rust-lang/rust/commit/26ecb30f550a46d52528a7d45d9327ebce938e81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26ecb30f550a46d52528a7d45d9327ebce938e81/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7", "html_url": "https://github.com/rust-lang/rust/commit/f3ab67ec5f75fc3376e5647dfb7e5b46a535dea7"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "bfc15acaa763c52ec9b24c41984f065cb19dd1d2", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/26ecb30f550a46d52528a7d45d9327ebce938e81/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ecb30f550a46d52528a7d45d9327ebce938e81/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=26ecb30f550a46d52528a7d45d9327ebce938e81", "patch": "@@ -22,7 +22,7 @@ use EBWriter = std::ebml::writer;\n use core::cmp::Eq;\n use core::io::Writer;\n use std::ebml;\n-use std::serialize::{Encodable, Decodable};\n+use std::serialize::{Decodable, Encodable};\n use std::time;\n \n fn test_ebml<A:\n@@ -39,8 +39,7 @@ fn test_ebml<A:\n     assert!(*a1 == a2);\n }\n \n-#[auto_encode]\n-#[auto_decode]\n+#[deriving(Decodable, Encodable)]\n enum Expr {\n     Val(uint),\n     Plus(@Expr, @Expr),\n@@ -107,32 +106,26 @@ impl cmp::Eq for CLike {\n     fn ne(&self, other: &CLike) -> bool { !self.eq(other) }\n }\n \n-#[auto_encode]\n-#[auto_decode]\n-#[deriving(Eq)]\n+#[deriving(Decodable, Encodable, Eq)]\n struct Spanned<T> {\n     lo: uint,\n     hi: uint,\n     node: T,\n }\n \n-#[auto_encode]\n-#[auto_decode]\n+#[deriving(Decodable, Encodable)]\n struct SomeStruct { v: ~[uint] }\n \n-#[auto_encode]\n-#[auto_decode]\n+#[deriving(Decodable, Encodable)]\n struct Point {x: uint, y: uint}\n \n-#[auto_encode]\n-#[auto_decode]\n+#[deriving(Decodable, Encodable)]\n enum Quark<T> {\n     Top(T),\n     Bottom(T)\n }\n \n-#[auto_encode]\n-#[auto_decode]\n+#[deriving(Decodable, Encodable)]\n enum CLike { A, B, C }\n \n pub fn main() {"}]}