{"sha": "996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NmRjOGQ1YzU1YTQ5NmJmYmRjOTlhOTM2ZmI2MDU1YmNiZTJmY2Q=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-31T23:33:38Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:29Z"}, "message": "Only store a LocalDefId in hir::ForeignItem.", "tree": {"sha": "2b92c207effac29986b51278ec11b7d5883cdf0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b92c207effac29986b51278ec11b7d5883cdf0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "html_url": "https://github.com/rust-lang/rust/commit/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "786a80e9ea7af4909f67207c542eb02727f74756", "url": "https://api.github.com/repos/rust-lang/rust/commits/786a80e9ea7af4909f67207c542eb02727f74756", "html_url": "https://github.com/rust-lang/rust/commit/786a80e9ea7af4909f67207c542eb02727f74756"}], "stats": {"total": 243, "additions": 133, "deletions": 110}, "files": [{"sha": "f88c73aee53c8bdd0a1387d1a7fa56e6cc0224ea", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -111,7 +111,7 @@ impl<'a> Visitor<'a> for ItemLowerer<'a, '_, '_> {\n         self.lctx.allocate_hir_id_counter(item.id);\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n             let hir_item = lctx.lower_foreign_item(item);\n-            let id = hir::ForeignItemId { hir_id: hir_item.hir_id };\n+            let id = hir_item.foreign_item_id();\n             lctx.foreign_items.insert(id, hir_item);\n             lctx.modules.get_mut(&lctx.current_module).unwrap().foreign_items.insert(id);\n         });\n@@ -711,7 +711,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem<'hir> {\n         let def_id = self.resolver.local_def_id(i.id);\n         hir::ForeignItem {\n-            hir_id: self.lower_node_id(i.id),\n+            def_id,\n             ident: i.ident,\n             attrs: self.lower_attrs(&i.attrs),\n             kind: match i.kind {\n@@ -746,7 +746,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n     fn lower_foreign_item_ref(&mut self, i: &ForeignItem) -> hir::ForeignItemRef<'hir> {\n         hir::ForeignItemRef {\n-            id: hir::ForeignItemId { hir_id: self.lower_node_id(i.id) },\n+            id: hir::ForeignItemId { def_id: self.lower_node_id(i.id).expect_owner() },\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),"}, {"sha": "a0950958455afc0a02cb8ed3d0d8ff05070049a7", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -2783,7 +2783,14 @@ pub enum AssocItemKind {\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n pub struct ForeignItemId {\n-    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n+}\n+\n+impl ForeignItemId {\n+    pub fn hir_id(&self) -> HirId {\n+        // Items are always HIR owners.\n+        HirId::make_owner(self.def_id)\n+    }\n }\n \n /// A reference from a foreign block to one of its items. This\n@@ -2801,17 +2808,27 @@ pub struct ForeignItemRef<'hir> {\n     pub vis: Visibility<'hir>,\n }\n \n-#[derive(Debug, HashStable_Generic)]\n+#[derive(Debug)]\n pub struct ForeignItem<'hir> {\n-    #[stable_hasher(project(name))]\n     pub ident: Ident,\n     pub attrs: &'hir [Attribute],\n     pub kind: ForeignItemKind<'hir>,\n-    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub span: Span,\n     pub vis: Visibility<'hir>,\n }\n \n+impl ForeignItem<'_> {\n+    pub fn hir_id(&self) -> HirId {\n+        // Items are always HIR owners.\n+        HirId::make_owner(self.def_id)\n+    }\n+\n+    pub fn foreign_item_id(&self) -> ForeignItemId {\n+        ForeignItemId { def_id: self.def_id }\n+    }\n+}\n+\n /// An item within an `extern` block.\n #[derive(Debug, HashStable_Generic)]\n pub enum ForeignItemKind<'hir> {\n@@ -2923,9 +2940,9 @@ impl<'hir> Node<'hir> {\n         match self {\n             Node::Item(Item { def_id, .. })\n             | Node::TraitItem(TraitItem { def_id, .. })\n-            | Node::ImplItem(ImplItem { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n-            Node::ForeignItem(ForeignItem { hir_id, .. })\n-            | Node::Field(StructField { hir_id, .. })\n+            | Node::ImplItem(ImplItem { def_id, .. })\n+            | Node::ForeignItem(ForeignItem { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n+            Node::Field(StructField { hir_id, .. })\n             | Node::AnonConst(AnonConst { hir_id, .. })\n             | Node::Expr(Expr { hir_id, .. })\n             | Node::Stmt(Stmt { hir_id, .. })\n@@ -2960,5 +2977,5 @@ mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Item<'static>, 200);\n     rustc_data_structures::static_assert_size!(super::TraitItem<'static>, 144);\n     rustc_data_structures::static_assert_size!(super::ImplItem<'static>, 168);\n-    rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 160);\n+    rustc_data_structures::static_assert_size!(super::ForeignItem<'static>, 152);\n }"}, {"sha": "c59464a0cb6fc0e0c622e36ac977ef7e8fa3a541", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -836,7 +836,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {\n }\n \n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem<'v>) {\n-    visitor.visit_id(foreign_item.hir_id);\n+    visitor.visit_id(foreign_item.hir_id());\n     visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_ident(foreign_item.ident);\n "}, {"sha": "091e1ed9971c249e29567452540c7f275af784c6", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -1,8 +1,8 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n \n use crate::hir::{\n-    BodyId, Expr, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem, TraitItemId,\n-    Ty, VisibilityKind,\n+    BodyId, Expr, ForeignItem, ForeignItemId, ImplItem, ImplItemId, Item, ItemId, Mod, TraitItem,\n+    TraitItemId, Ty, VisibilityKind,\n };\n use crate::hir_id::{HirId, ItemLocalId};\n use rustc_span::def_id::{DefPathHash, LocalDefId};\n@@ -62,11 +62,11 @@ impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ImplItemId {\n }\n \n impl<HirCtx: crate::HashStableContext> ToStableHashKey<HirCtx> for ForeignItemId {\n-    type KeyType = (DefPathHash, ItemLocalId);\n+    type KeyType = DefPathHash;\n \n     #[inline]\n-    fn to_stable_hash_key(&self, hcx: &HirCtx) -> (DefPathHash, ItemLocalId) {\n-        self.hir_id.to_stable_hash_key(hcx)\n+    fn to_stable_hash_key(&self, hcx: &HirCtx) -> DefPathHash {\n+        hcx.local_def_path_hash(self.def_id)\n     }\n }\n \n@@ -97,7 +97,7 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ItemId {\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ForeignItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_reference_to_item(self.hir_id, hasher)\n+        hcx.hash_reference_to_item(self.hir_id(), hasher)\n     }\n }\n \n@@ -176,6 +176,20 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItem<'_> {\n     }\n }\n \n+impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ForeignItem<'_> {\n+    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n+        let ForeignItem { def_id: _, ident, ref attrs, ref kind, span, ref vis } = *self;\n+\n+        hcx.hash_hir_item_like(|hcx| {\n+            ident.name.hash_stable(hcx, hasher);\n+            attrs.hash_stable(hcx, hasher);\n+            kind.hash_stable(hcx, hasher);\n+            span.hash_stable(hcx, hasher);\n+            vis.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n+\n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for Item<'_> {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         let Item { ident, ref attrs, def_id: _, ref kind, ref vis, span } = *self;"}, {"sha": "752431247f064be682a4a6078ab55762a322605d", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -462,7 +462,7 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, item: &hir::ForeignItem<'_>) {\n-        self.check_item(item.hir_id, item.span);\n+        self.check_item(item.hir_id(), item.span);\n     }\n }\n "}, {"sha": "71017fcde876ff706ec734f28e9311fca5ae590c", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -660,11 +660,10 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'_>) {\n-        let def_id = cx.tcx.hir().local_def_id(foreign_item.hir_id);\n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(foreign_item.def_id.to_def_id());\n         self.check_missing_docs_attrs(\n             cx,\n-            Some(foreign_item.hir_id),\n+            Some(foreign_item.hir_id()),\n             &foreign_item.attrs,\n             foreign_item.span,\n             article,\n@@ -1365,7 +1364,7 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n         self.perform_lint(\n             cx,\n             \"item\",\n-            foreign_item.hir_id,\n+            foreign_item.hir_id(),\n             &foreign_item.vis,\n             foreign_item.span,\n             true,\n@@ -2675,10 +2674,7 @@ impl ClashingExternDeclarations {\n     /// Insert a new foreign item into the seen set. If a symbol with the same name already exists\n     /// for the item, return its HirId without updating the set.\n     fn insert(&mut self, tcx: TyCtxt<'_>, fi: &hir::ForeignItem<'_>) -> Option<HirId> {\n-        let hid = fi.hir_id;\n-\n-        let local_did = tcx.hir().local_def_id(fi.hir_id);\n-        let did = local_did.to_def_id();\n+        let did = fi.def_id.to_def_id();\n         let instance = Instance::new(did, ty::List::identity_for_item(tcx, did));\n         let name = Symbol::intern(tcx.symbol_name(instance).name);\n         if let Some(&hir_id) = self.seen_decls.get(&name) {\n@@ -2687,24 +2683,23 @@ impl ClashingExternDeclarations {\n             // This lets us avoid emitting \"knock-on\" diagnostics.\n             Some(hir_id)\n         } else {\n-            self.seen_decls.insert(name, hid)\n+            self.seen_decls.insert(name, fi.hir_id())\n         }\n     }\n \n     /// Get the name of the symbol that's linked against for a given extern declaration. That is,\n     /// the name specified in a #[link_name = ...] attribute if one was specified, else, just the\n     /// symbol's name.\n     fn name_of_extern_decl(tcx: TyCtxt<'_>, fi: &hir::ForeignItem<'_>) -> SymbolName {\n-        let did = tcx.hir().local_def_id(fi.hir_id);\n         if let Some((overridden_link_name, overridden_link_name_span)) =\n-            tcx.codegen_fn_attrs(did).link_name.map(|overridden_link_name| {\n+            tcx.codegen_fn_attrs(fi.def_id).link_name.map(|overridden_link_name| {\n                 // FIXME: Instead of searching through the attributes again to get span\n                 // information, we could have codegen_fn_attrs also give span information back for\n                 // where the attribute was defined. However, until this is found to be a\n                 // bottleneck, this does just fine.\n                 (\n                     overridden_link_name,\n-                    tcx.get_attrs(did.to_def_id())\n+                    tcx.get_attrs(fi.def_id.to_def_id())\n                         .iter()\n                         .find(|at| tcx.sess.check_name(at, sym::link_name))\n                         .unwrap()\n@@ -2932,10 +2927,10 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n             let tcx = cx.tcx;\n             if let Some(existing_hid) = self.insert(tcx, this_fi) {\n                 let existing_decl_ty = tcx.type_of(tcx.hir().local_def_id(existing_hid));\n-                let this_decl_ty = tcx.type_of(tcx.hir().local_def_id(this_fi.hir_id));\n+                let this_decl_ty = tcx.type_of(this_fi.def_id);\n                 debug!(\n                     \"ClashingExternDeclarations: Comparing existing {:?}: {:?} to this {:?}: {:?}\",\n-                    existing_hid, existing_decl_ty, this_fi.hir_id, this_decl_ty\n+                    existing_hid, existing_decl_ty, this_fi.def_id, this_decl_ty\n                 );\n                 // Check that the declarations match.\n                 if !Self::structurally_same_type(\n@@ -2957,7 +2952,7 @@ impl<'tcx> LateLintPass<'tcx> for ClashingExternDeclarations {\n                     // Finally, emit the diagnostic.\n                     tcx.struct_span_lint_hir(\n                         CLASHING_EXTERN_DECLARATIONS,\n-                        this_fi.hir_id,\n+                        this_fi.hir_id(),\n                         get_relevant_span(this_fi),\n                         |lint| {\n                             let mut expected_str = DiagnosticStyledString::new();"}, {"sha": "c76f8eea201c87b9d6c211fce7ecc38357bb9ad3", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -155,8 +155,8 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n     }\n \n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n-        self.with_lint_attrs(it.hir_id, &it.attrs, |cx| {\n-            cx.with_param_env(it.hir_id, |cx| {\n+        self.with_lint_attrs(it.hir_id(), &it.attrs, |cx| {\n+            cx.with_param_env(it.hir_id(), |cx| {\n                 lint_callback!(cx, check_foreign_item, it);\n                 hir_visit::walk_foreign_item(cx, it);\n                 lint_callback!(cx, check_foreign_item_post, it);"}, {"sha": "a06e9e5dce6815e2d86ee378ae2efd5cc3767a78", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -583,7 +583,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n-        self.with_lint_attrs(it.hir_id, &it.attrs, |builder| {\n+        self.with_lint_attrs(it.hir_id(), &it.attrs, |builder| {\n             intravisit::walk_foreign_item(builder, it);\n         })\n     }"}, {"sha": "4d70e33c607df7fee88f008abb20210bc6b5eb08", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -1262,15 +1262,15 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n impl<'tcx> LateLintPass<'tcx> for ImproperCTypesDeclarations {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_>, it: &hir::ForeignItem<'_>) {\n         let mut vis = ImproperCTypesVisitor { cx, mode: CItemKind::Declaration };\n-        let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n+        let abi = cx.tcx.hir().get_foreign_abi(it.hir_id());\n \n         if !vis.is_internal_abi(abi) {\n             match it.kind {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n-                    vis.check_foreign_fn(it.hir_id, decl);\n+                    vis.check_foreign_fn(it.hir_id(), decl);\n                 }\n                 hir::ForeignItemKind::Static(ref ty, _) => {\n-                    vis.check_foreign_static(it.hir_id, ty.span);\n+                    vis.check_foreign_static(it.hir_id(), ty.span);\n                 }\n                 hir::ForeignItemKind::Type => (),\n             }"}, {"sha": "3d3071c18f2497c367d337966ed625a0bf87c3a1", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -4,25 +4,23 @@ use rustc_middle::middle::cstore::ForeignModule;\n use rustc_middle::ty::TyCtxt;\n \n crate fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n-    let mut collector = Collector { tcx, modules: Vec::new() };\n+    let mut collector = Collector { modules: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n     collector.modules\n }\n \n-struct Collector<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+struct Collector {\n     modules: Vec<ForeignModule>,\n }\n \n-impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n+impl ItemLikeVisitor<'tcx> for Collector {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         let items = match it.kind {\n             hir::ItemKind::ForeignMod { items, .. } => items,\n             _ => return,\n         };\n \n-        let foreign_items =\n-            items.iter().map(|it| self.tcx.hir().local_def_id(it.id.hir_id).to_def_id()).collect();\n+        let foreign_items = items.iter().map(|it| it.id.def_id.to_def_id()).collect();\n         self.modules.push(ForeignModule { foreign_items, def_id: it.def_id.to_def_id() });\n     }\n "}, {"sha": "905b0b37cf7880a9eaaf96b7d4970a5aeb36ca52", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -1411,8 +1411,7 @@ impl EncodeContext<'a, 'tcx> {\n             hir::ItemKind::ForeignMod { items, .. } => record!(self.tables.children[def_id] <-\n                 items\n                     .iter()\n-                    .map(|foreign_item| tcx.hir().local_def_id(\n-                        foreign_item.id.hir_id).local_def_index)\n+                    .map(|foreign_item| foreign_item.id.def_id.local_def_index)\n             ),\n             hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-\n                 self.tcx.adt_def(def_id).variants.iter().map(|v| {\n@@ -1859,8 +1858,7 @@ impl Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n     }\n     fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {\n         intravisit::walk_foreign_item(self, ni);\n-        let def_id = self.tcx.hir().local_def_id(ni.hir_id);\n-        self.encode_info_for_foreign_item(def_id.to_def_id(), ni);\n+        self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);\n     }\n     fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {\n         intravisit::walk_generics(self, generics);"}, {"sha": "11d820263352117e3c1496b29171ca43dfead98d", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -354,14 +354,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_foreign_item(&mut self, fi: &'hir ForeignItem<'hir>) {\n-        debug_assert_eq!(\n-            fi.hir_id.owner,\n-            self.definitions.opt_hir_id_to_local_def_id(fi.hir_id).unwrap()\n-        );\n-        self.with_dep_node_owner(fi.hir_id.owner, fi, |this, hash| {\n-            this.insert_with_hash(fi.span, fi.hir_id, Node::ForeignItem(fi), hash);\n+        self.with_dep_node_owner(fi.def_id, fi, |this, hash| {\n+            this.insert_with_hash(fi.span, fi.hir_id(), Node::ForeignItem(fi), hash);\n \n-            this.with_parent(fi.hir_id, |this| {\n+            this.with_parent(fi.hir_id(), |this| {\n                 intravisit::walk_foreign_item(this, fi);\n             });\n         });"}, {"sha": "c4f469ca7f4415cac12b81288feebab93471cca5", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -322,7 +322,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {\n-        match self.find(id.hir_id).unwrap() {\n+        match self.find(id.hir_id()).unwrap() {\n             Node::ForeignItem(item) => item,\n             _ => bug!(),\n         }"}, {"sha": "f5ab4273e713e27d6afe4340ae4c341e990c606d", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -1110,7 +1110,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n-            f_item.hir_id,\n+            f_item.hir_id(),\n             &f_item.attrs,\n             &f_item.span,\n             target,"}, {"sha": "d51b501f7ae3da9d4828444ceed8088a1a827c21", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -453,9 +453,13 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n         use hir::ForeignItemKind::{Fn, Static};\n         if matches!(foreign_item.kind, Static(..) | Fn(..))\n-            && has_allow_dead_code_or_lang_attr(self.tcx, foreign_item.hir_id, &foreign_item.attrs)\n+            && has_allow_dead_code_or_lang_attr(\n+                self.tcx,\n+                foreign_item.hir_id(),\n+                &foreign_item.attrs,\n+            )\n         {\n-            self.worklist.push(foreign_item.hir_id);\n+            self.worklist.push(foreign_item.hir_id());\n         }\n     }\n }\n@@ -542,8 +546,8 @@ impl DeadVisitor<'tcx> {\n     }\n \n     fn should_warn_about_foreign_item(&mut self, fi: &hir::ForeignItem<'_>) -> bool {\n-        !self.symbol_is_live(fi.hir_id)\n-            && !has_allow_dead_code_or_lang_attr(self.tcx, fi.hir_id, &fi.attrs)\n+        !self.symbol_is_live(fi.hir_id())\n+            && !has_allow_dead_code_or_lang_attr(self.tcx, fi.hir_id(), &fi.attrs)\n     }\n \n     // id := HIR id of an item's definition.\n@@ -649,7 +653,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n \n     fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem<'tcx>) {\n         if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(fi.hir_id, fi.span, fi.ident.name, \"used\");\n+            self.warn_dead_code(fi.hir_id(), fi.span, fi.ident.name, \"used\");\n         }\n         intravisit::walk_foreign_item(self, fi);\n     }"}, {"sha": "496973947ca90aef2ba4f89392ca93697e24fc69", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -39,7 +39,7 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n-        self.observe_item(foreign_item.attrs, foreign_item.hir_id);\n+        self.observe_item(foreign_item.attrs, foreign_item.hir_id());\n     }\n }\n "}, {"sha": "0f1ff71cc2f29ce2ea3d605be5b2d18d84e0fbf7", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n \n     fn visit_foreign_item(&mut self, i: &'hir hir::ForeignItem<'hir>) {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n-        inner_visitor.check(i.hir_id, |this| intravisit::walk_foreign_item(this, i));\n+        inner_visitor.check(i.hir_id(), |this| intravisit::walk_foreign_item(this, i));\n     }\n }\n "}, {"sha": "9e1a3c61628a4978158962efe0ad53b2c8852808", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -130,7 +130,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem<'v>) {\n-        self.record(\"ForeignItem\", Id::Node(i.hir_id), i);\n+        self.record(\"ForeignItem\", Id::Node(i.hir_id()), i);\n         hir_visit::walk_foreign_item(self, i)\n     }\n "}, {"sha": "0569e7fa3ab92f7aab6710c7c88f3b2aeb109900", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -459,7 +459,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n         self.annotate(\n-            i.hir_id,\n+            i.hir_id(),\n             &i.attrs,\n             i.span,\n             AnnotationKind::Required,\n@@ -594,7 +594,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {\n-        self.check_missing_stability(i.hir_id, i.span);\n+        self.check_missing_stability(i.hir_id(), i.span);\n         intravisit::walk_foreign_item(self, i);\n     }\n "}, {"sha": "a7327fb012f336c06b0bcdbaec96031fb1376303", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -685,7 +685,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n                     if foreign_item.vis.node.is_pub() {\n-                        self.update(foreign_item.id.hir_id, item_level);\n+                        self.update(foreign_item.id.hir_id(), item_level);\n                     }\n                 }\n             }\n@@ -800,9 +800,9 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             // Visit everything, but foreign items have their own levels.\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n-                    let foreign_item_level = self.get(foreign_item.id.hir_id);\n+                    let foreign_item_level = self.get(foreign_item.id.hir_id());\n                     if foreign_item_level.is_some() {\n-                        self.reach(foreign_item.id.hir_id, foreign_item_level)\n+                        self.reach(foreign_item.id.hir_id(), foreign_item_level)\n                             .generics()\n                             .predicates()\n                             .ty();\n@@ -1653,7 +1653,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n-        if self.access_levels.is_reachable(item.hir_id) {\n+        if self.access_levels.is_reachable(item.hir_id()) {\n             intravisit::walk_foreign_item(self, item)\n         }\n     }\n@@ -1982,8 +1982,8 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             // Subitems of foreign modules have their own publicity.\n             hir::ItemKind::ForeignMod { items, .. } => {\n                 for foreign_item in items {\n-                    let vis = tcx.visibility(tcx.hir().local_def_id(foreign_item.id.hir_id));\n-                    self.check(foreign_item.id.hir_id, vis).generics().predicates().ty();\n+                    let vis = tcx.visibility(foreign_item.id.def_id);\n+                    self.check(foreign_item.id.hir_id(), vis).generics().predicates().ty();\n                 }\n             }\n             // Subitems of structs and unions have their own publicity."}, {"sha": "625d7c831202b45ff32b15f273875ff2b83d383e", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -1449,14 +1449,14 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {\n-        let access = access_from!(self.save_ctxt, item, item.hir_id);\n+        let access = access_from!(self.save_ctxt, item, item.hir_id());\n \n         match item.kind {\n             hir::ForeignItemKind::Fn(decl, _, ref generics) => {\n                 if let Some(fn_data) = self.save_ctxt.get_extern_item_data(item) {\n                     down_cast_data!(fn_data, DefData, item.span);\n \n-                    self.process_generic_params(generics, &fn_data.qualname, item.hir_id);\n+                    self.process_generic_params(generics, &fn_data.qualname, item.hir_id());\n                     self.dumper.dump_def(&access, fn_data);\n                 }\n "}, {"sha": "b3f281bcabcec597f58f07fa6f25dfe60c29372c", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> SaveContext<'tcx> {\n     }\n \n     pub fn get_extern_item_data(&self, item: &hir::ForeignItem<'_>) -> Option<Data> {\n-        let def_id = self.tcx.hir().local_def_id(item.hir_id).to_def_id();\n+        let def_id = item.def_id.to_def_id();\n         let qualname = format!(\"::{}\", self.tcx.def_path_str(def_id));\n         match item.kind {\n             hir::ForeignItemKind::Fn(ref decl, arg_names, ref generics) => {\n@@ -156,7 +156,7 @@ impl<'tcx> SaveContext<'tcx> {\n                             unsafety: hir::Unsafety::Unsafe,\n                             // functions in extern block cannot be const\n                             constness: hir::Constness::NotConst,\n-                            abi: self.tcx.hir().get_foreign_abi(item.hir_id),\n+                            abi: self.tcx.hir().get_foreign_abi(item.hir_id()),\n                             // functions in extern block cannot be async\n                             asyncness: hir::IsAsync::NotAsync,\n                         },"}, {"sha": "33db189af37a6726ddc836b50721bac346ab9853", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -736,14 +736,14 @@ impl<'hir> Sig for hir::Variant<'hir> {\n \n impl<'hir> Sig for hir::ForeignItem<'hir> {\n     fn make(&self, offset: usize, _parent_id: Option<hir::HirId>, scx: &SaveContext<'_>) -> Result {\n-        let id = Some(self.hir_id);\n+        let id = Some(self.hir_id());\n         match self.kind {\n             hir::ForeignItemKind::Fn(decl, _, ref generics) => {\n                 let mut text = String::new();\n                 text.push_str(\"fn \");\n \n                 let mut sig =\n-                    name_and_generics(text, offset, generics, self.hir_id, self.ident, scx)?;\n+                    name_and_generics(text, offset, generics, self.hir_id(), self.ident, scx)?;\n \n                 sig.text.push('(');\n                 for i in decl.inputs {\n@@ -774,7 +774,7 @@ impl<'hir> Sig for hir::ForeignItem<'hir> {\n                 }\n                 let name = self.ident.to_string();\n                 let defs = vec![SigElement {\n-                    id: id_from_hir_id(self.hir_id, scx),\n+                    id: id_from_def_id(self.def_id.to_def_id()),\n                     start: offset + text.len(),\n                     end: offset + text.len() + name.len(),\n                 }];\n@@ -790,7 +790,7 @@ impl<'hir> Sig for hir::ForeignItem<'hir> {\n                 let mut text = \"type \".to_owned();\n                 let name = self.ident.to_string();\n                 let defs = vec![SigElement {\n-                    id: id_from_hir_id(self.hir_id, scx),\n+                    id: id_from_def_id(self.def_id.to_def_id()),\n                     start: offset + text.len(),\n                     end: offset + text.len() + name.len(),\n                 }];"}, {"sha": "b1af95a3ab92ce9117d947a0c67dcb0cc181627b", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -73,6 +73,6 @@ impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n     }\n \n     fn visit_foreign_item(&mut self, foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n-        self.process_attrs(foreign_item.hir_id);\n+        self.process_attrs(foreign_item.hir_id());\n     }\n }"}, {"sha": "7729df6af349dded4f5b1e2b0388ba709a44c3c8", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -776,7 +776,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                 }\n             } else {\n                 for item in items {\n-                    let def_id = tcx.hir().local_def_id(item.id.hir_id);\n+                    let def_id = item.id.def_id;\n                     let generics = tcx.generics_of(def_id);\n                     let own_counts = generics.own_counts();\n                     if generics.params.len() - own_counts.lifetimes != 0 {"}, {"sha": "dedf96863eaf62875ba086d3248cf86920df2cd1", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -9,7 +9,6 @@ use crate::require_same_types;\n \n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -21,7 +20,6 @@ use std::iter;\n fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     it: &hir::ForeignItem<'_>,\n-    def_id: DefId,\n     n_tps: usize,\n     sig: ty::PolyFnSig<'tcx>,\n ) {\n@@ -35,7 +33,7 @@ fn equate_intrinsic_type<'tcx>(\n         }\n     }\n \n-    let i_n_tps = tcx.generics_of(def_id).own_counts().types;\n+    let i_n_tps = tcx.generics_of(it.def_id).own_counts().types;\n     if i_n_tps != n_tps {\n         let span = match it.kind {\n             hir::ForeignItemKind::Fn(_, _, ref generics) => generics.span,\n@@ -51,8 +49,8 @@ fn equate_intrinsic_type<'tcx>(\n     }\n \n     let fty = tcx.mk_fn_ptr(sig);\n-    let cause = ObligationCause::new(it.span, it.hir_id, ObligationCauseCode::IntrinsicType);\n-    require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(def_id)), fty);\n+    let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n+    require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n }\n \n /// Returns `true` if the given intrinsic is unsafe to call or not.\n@@ -100,8 +98,7 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n /// and in `library/core/src/intrinsics.rs`.\n pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n-    let def_id = tcx.hir().local_def_id(it.hir_id).to_def_id();\n-    let intrinsic_name = tcx.item_name(def_id);\n+    let intrinsic_name = tcx.item_name(it.def_id.to_def_id());\n     let name_str = intrinsic_name.as_str();\n \n     let mk_va_list_ty = |mutbl| {\n@@ -370,7 +367,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     };\n     let sig = tcx.mk_fn_sig(inputs.into_iter(), output, false, unsafety, Abi::RustIntrinsic);\n     let sig = ty::Binder::bind(sig);\n-    equate_intrinsic_type(tcx, it, def_id, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, sig)\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n@@ -380,7 +377,6 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         tcx.mk_ty_param(n, name)\n     };\n \n-    let def_id = tcx.hir().local_def_id(it.hir_id).to_def_id();\n     let name = it.ident.name;\n \n     let (n_tps, inputs, output) = match name {\n@@ -464,5 +460,5 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         Abi::PlatformIntrinsic,\n     );\n     let sig = ty::Binder::dummy(sig);\n-    equate_intrinsic_type(tcx, it, def_id, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, sig)\n }"}, {"sha": "00c6550835b435bfd872ddfb53b7ef2df1223338", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -154,10 +154,10 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 let it = tcx.hir().foreign_item(it.id);\n                 match it.kind {\n                     hir::ForeignItemKind::Fn(ref decl, ..) => {\n-                        check_item_fn(tcx, it.hir_id, it.ident, it.span, decl)\n+                        check_item_fn(tcx, it.hir_id(), it.ident, it.span, decl)\n                     }\n                     hir::ForeignItemKind::Static(ref ty, ..) => {\n-                        check_item_type(tcx, it.hir_id, ty.span, true)\n+                        check_item_type(tcx, it.hir_id(), ty.span, true)\n                     }\n                     hir::ForeignItemKind::Type => (),\n                 }"}, {"sha": "753ccb9485f38333439dc5e3dc8e5489c6831166", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -728,12 +728,11 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n         hir::ItemKind::ForeignMod { items, .. } => {\n             for item in items {\n                 let item = tcx.hir().foreign_item(item.id);\n-                let def_id = tcx.hir().local_def_id(item.hir_id);\n-                tcx.ensure().generics_of(def_id);\n-                tcx.ensure().type_of(def_id);\n-                tcx.ensure().predicates_of(def_id);\n+                tcx.ensure().generics_of(item.def_id);\n+                tcx.ensure().type_of(item.def_id);\n+                tcx.ensure().predicates_of(item.def_id);\n                 if let hir::ForeignItemKind::Fn(..) = item.kind {\n-                    tcx.ensure().fn_sig(def_id);\n+                    tcx.ensure().fn_sig(item.def_id);\n                 }\n             }\n         }"}, {"sha": "f5355ea042bdf4a13dce6a5ad7e0d43316ae4e69", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n         if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n-            self.visit_node_helper(foreign_item.hir_id);\n+            self.visit_node_helper(foreign_item.hir_id());\n         }\n     }\n }"}, {"sha": "5d5baf78d33c3f064653d31015a1eaa276a31307", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -171,7 +171,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n \n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n         if let hir::ForeignItemKind::Fn(..) = foreign_item.kind {\n-            self.add_inferreds_for_item(foreign_item.hir_id);\n+            self.add_inferreds_for_item(foreign_item.hir_id());\n         }\n     }\n }"}, {"sha": "53e7bf2f492524ee39183c3f9cdad04109e7c8c4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -2239,10 +2239,10 @@ fn clean_use_statement(\n impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n-        cx.with_param_env(cx.tcx.hir().local_def_id(item.hir_id).to_def_id(), || {\n+        cx.with_param_env(item.def_id.to_def_id(), || {\n             let kind = match item.kind {\n                 hir::ForeignItemKind::Fn(ref decl, ref names, ref generics) => {\n-                    let abi = cx.tcx.hir().get_foreign_abi(item.hir_id);\n+                    let abi = cx.tcx.hir().get_foreign_abi(item.hir_id());\n                     let (generics, decl) = enter_impl_trait(cx, || {\n                         (generics.clean(cx), (&**decl, &names[..]).clean(cx))\n                     });\n@@ -2264,7 +2264,7 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n             };\n \n             Item::from_hir_id_and_parts(\n-                item.hir_id,\n+                item.hir_id(),\n                 Some(renamed.unwrap_or(item.ident.name)),\n                 kind,\n                 cx,"}, {"sha": "0b22db7db051049b8d6efb1a5a4063d2f7bddb07", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=996dc8d5c55a496bfbdc99a936fb6055bcbe2fcd", "patch": "@@ -1080,9 +1080,15 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n     }\n \n     fn visit_foreign_item(&mut self, item: &'hir hir::ForeignItem<'_>) {\n-        self.visit_testable(item.ident.to_string(), &item.attrs, item.hir_id, item.span, |this| {\n-            intravisit::walk_foreign_item(this, item);\n-        });\n+        self.visit_testable(\n+            item.ident.to_string(),\n+            &item.attrs,\n+            item.hir_id(),\n+            item.span,\n+            |this| {\n+                intravisit::walk_foreign_item(this, item);\n+            },\n+        );\n     }\n \n     fn visit_variant("}]}