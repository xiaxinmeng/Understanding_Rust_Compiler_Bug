{"sha": "c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTVlMzQ5OGMzYzY3ZWJiNmM5ZTgwMGYxYzYyNTQwYTU4MjYzN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-24T08:26:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-24T08:26:29Z"}, "message": "auto merge of #13531 : alexcrichton/rust/fix-some-ices, r=brson\n\nSee the commits for the affected issues.", "tree": {"sha": "d74994a4b5d4d214de9620e531785b7a0c15b539", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d74994a4b5d4d214de9620e531785b7a0c15b539"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "html_url": "https://github.com/rust-lang/rust/commit/c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "867898977d30a79ef19d5588c1632f48e75cb98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/867898977d30a79ef19d5588c1632f48e75cb98f", "html_url": "https://github.com/rust-lang/rust/commit/867898977d30a79ef19d5588c1632f48e75cb98f"}, {"sha": "b0d85e30b75fb7a2568dba9a535e8ea8e0291fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d85e30b75fb7a2568dba9a535e8ea8e0291fef", "html_url": "https://github.com/rust-lang/rust/commit/b0d85e30b75fb7a2568dba9a535e8ea8e0291fef"}], "stats": {"total": 132, "additions": 95, "deletions": 37}, "files": [{"sha": "f8ed6bdce95a6804296e4dc6aa61d381eebf5ab0", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -60,7 +60,7 @@ pub fn llvm_err(sess: &Session, msg: ~str) -> ! {\n         if cstr == ptr::null() {\n             sess.fatal(msg);\n         } else {\n-            let err = CString::new(cstr, false);\n+            let err = CString::new(cstr, true);\n             let err = str::from_utf8_lossy(err.as_bytes());\n             sess.fatal(msg + \": \" + err.as_slice());\n         }\n@@ -516,7 +516,10 @@ pub mod write {\n \n pub fn find_crate_id(attrs: &[ast::Attribute], out_filestem: &str) -> CrateId {\n     match attr::find_crateid(attrs) {\n-        None => from_str(out_filestem).unwrap(),\n+        None => from_str(out_filestem).unwrap_or_else(|| {\n+            let mut s = out_filestem.chars().filter(|c| c.is_XID_continue());\n+            from_str(s.collect::<~str>()).or(from_str(\"rust-out\")).unwrap()\n+        }),\n         Some(s) => s,\n     }\n }"}, {"sha": "bfa4a310cba00843e2cab2becb49113b1c5a7eb9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -493,7 +493,7 @@ pub fn stop_after_phase_5(sess: &Session) -> bool {\n fn write_out_deps(sess: &Session,\n                   input: &Input,\n                   outputs: &OutputFilenames,\n-                  krate: &ast::Crate) -> io::IoResult<()> {\n+                  krate: &ast::Crate) {\n     let id = link::find_crate_id(krate.attrs.as_slice(), outputs.out_filestem);\n \n     let mut out_filenames = Vec::new();\n@@ -522,28 +522,34 @@ fn write_out_deps(sess: &Session,\n             StrInput(..) => {\n                 sess.warn(\"can not write --dep-info without a filename \\\n                            when compiling stdin.\");\n-                return Ok(());\n+                return\n             },\n         },\n-        _ => return Ok(()),\n+        _ => return,\n     };\n \n-    // Build a list of files used to compile the output and\n-    // write Makefile-compatible dependency rules\n-    let files: Vec<~str> = sess.codemap().files.borrow()\n-                               .iter().filter_map(|fmap| {\n-                                    if fmap.is_real_file() {\n-                                        Some(fmap.name.clone())\n-                                    } else {\n-                                        None\n-                                    }\n-                                }).collect();\n-    let mut file = try!(io::File::create(&deps_filename));\n-    for path in out_filenames.iter() {\n-        try!(write!(&mut file as &mut Writer,\n-                      \"{}: {}\\n\\n\", path.display(), files.connect(\" \")));\n+    let result = (|| {\n+        // Build a list of files used to compile the output and\n+        // write Makefile-compatible dependency rules\n+        let files: Vec<~str> = sess.codemap().files.borrow()\n+                                   .iter().filter(|fmap| fmap.is_real_file())\n+                                   .map(|fmap| fmap.name.clone())\n+                                   .collect();\n+        let mut file = try!(io::File::create(&deps_filename));\n+        for path in out_filenames.iter() {\n+            try!(write!(&mut file as &mut Writer,\n+                          \"{}: {}\\n\\n\", path.display(), files.connect(\" \")));\n+        }\n+        Ok(())\n+    })();\n+\n+    match result {\n+        Ok(()) => {}\n+        Err(e) => {\n+            sess.fatal(format!(\"error writing dependencies to `{}`: {}\",\n+                               deps_filename.display(), e));\n+        }\n     }\n-    Ok(())\n }\n \n pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &Input,\n@@ -567,7 +573,7 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &Input,\n                                                                          krate, &id);\n             (outputs, expanded_crate, ast_map)\n         };\n-        write_out_deps(&sess, input, &outputs, &expanded_crate).unwrap();\n+        write_out_deps(&sess, input, &outputs, &expanded_crate);\n \n         if stop_after_phase_2(&sess) { return; }\n "}, {"sha": "021dda497655039d165990077012ed929f4fcf06", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -75,7 +75,7 @@ LLVMRustCreateTargetMachine(const char *triple,\n     const llvm::Target *TheTarget = TargetRegistry::lookupTarget(Trip.getTriple(),\n                                                                  Error);\n     if (TheTarget == NULL) {\n-        LLVMRustError = Error.c_str();\n+        LLVMRustSetLastError(Error.c_str());\n         return NULL;\n     }\n \n@@ -178,7 +178,7 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target,\n   raw_fd_ostream OS(path, ErrorInfo, raw_fd_ostream::F_Binary);\n #endif\n   if (ErrorInfo != \"\") {\n-    LLVMRustError = ErrorInfo.c_str();\n+    LLVMRustSetLastError(ErrorInfo.c_str());\n     return false;\n   }\n   formatted_raw_ostream FOS(OS);"}, {"sha": "ec33b750358bbb857f963157322136a7d8234cbb", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -23,18 +23,28 @@ using namespace llvm;\n using namespace llvm::sys;\n using namespace llvm::object;\n \n-const char *LLVMRustError;\n+static char *LastError;\n \n extern \"C\" LLVMMemoryBufferRef\n LLVMRustCreateMemoryBufferWithContentsOfFile(const char *Path) {\n   LLVMMemoryBufferRef MemBuf = NULL;\n-  LLVMCreateMemoryBufferWithContentsOfFile(Path, &MemBuf,\n-    const_cast<char **>(&LLVMRustError));\n+  char *err = NULL;\n+  LLVMCreateMemoryBufferWithContentsOfFile(Path, &MemBuf, &err);\n+  if (err != NULL) {\n+    LLVMRustSetLastError(err);\n+  }\n   return MemBuf;\n }\n \n-extern \"C\" const char *LLVMRustGetLastError(void) {\n-  return LLVMRustError;\n+extern \"C\" char *LLVMRustGetLastError(void) {\n+  char *ret = LastError;\n+  LastError = NULL;\n+  return ret;\n+}\n+\n+void LLVMRustSetLastError(const char *err) {\n+  free((void*) LastError);\n+  LastError = strdup(err);\n }\n \n extern \"C\" void\n@@ -609,14 +619,14 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     MemoryBuffer* buf = MemoryBuffer::getMemBufferCopy(StringRef(bc, len));\n     ErrorOr<Module *> Src = llvm::getLazyBitcodeModule(buf, Dst->getContext());\n     if (!Src) {\n-        LLVMRustError = Src.getError().message().c_str();\n+        LLVMRustSetLastError(Src.getError().message().c_str());\n         delete buf;\n         return false;\n     }\n \n     std::string Err;\n     if (Linker::LinkModules(Dst, *Src, Linker::DestroySource, &Err)) {\n-        LLVMRustError = Err.c_str();\n+        LLVMRustSetLastError(Err.c_str());\n         return false;\n     }\n     return true;\n@@ -629,13 +639,13 @@ LLVMRustLinkInExternalBitcode(LLVMModuleRef dst, char *bc, size_t len) {\n     std::string Err;\n     Module *Src = llvm::getLazyBitcodeModule(buf, Dst->getContext(), &Err);\n     if (!Src) {\n-        LLVMRustError = Err.c_str();\n+        LLVMRustSetLastError(Err.c_str());\n         delete buf;\n         return false;\n     }\n \n     if (Linker::LinkModules(Dst, Src, Linker::DestroySource, &Err)) {\n-        LLVMRustError = Err.c_str();\n+        LLVMRustSetLastError(Err.c_str());\n         return false;\n     }\n     return true;\n@@ -648,12 +658,12 @@ LLVMRustOpenArchive(char *path) {\n     std::unique_ptr<MemoryBuffer> buf;\n     error_code err = MemoryBuffer::getFile(path, buf);\n     if (err) {\n-        LLVMRustError = err.message().c_str();\n+        LLVMRustSetLastError(err.message().c_str());\n         return NULL;\n     }\n     Archive *ret = new Archive(buf.release(), err);\n     if (err) {\n-        LLVMRustError = err.message().c_str();\n+        LLVMRustSetLastError(err.message().c_str());\n         return NULL;\n     }\n     return ret;\n@@ -664,12 +674,12 @@ LLVMRustOpenArchive(char *path) {\n     OwningPtr<MemoryBuffer> buf;\n     error_code err = MemoryBuffer::getFile(path, buf);\n     if (err) {\n-        LLVMRustError = err.message().c_str();\n+        LLVMRustSetLastError(err.message().c_str());\n         return NULL;\n     }\n     Archive *ret = new Archive(buf.take(), err);\n     if (err) {\n-        LLVMRustError = err.message().c_str();\n+        LLVMRustSetLastError(err.message().c_str());\n         return NULL;\n     }\n     return ret;"}, {"sha": "5722eea48d7d83e56c9f27fcc888c0707ba70152", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -68,4 +68,4 @@\n #include <unistd.h>\n #endif\n \n-extern const char* LLVMRustError;\n+void LLVMRustSetLastError(const char*);"}, {"sha": "9f91618bda493598f75214de9e900f03319b6fb1", "filename": "src/test/run-make/error-writing-dependencies/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\t# Let's get a nice error message\n+\t$(RUSTC) foo.rs --dep-info foo/bar/baz 2>&1 | \\\n+\t\tgrep \"error writing dependencies\"\n+\t# Make sure the filename shows up\n+\t$(RUSTC) foo.rs --dep-info foo/bar/baz 2>&1 | grep \"baz\""}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make/error-writing-dependencies/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2Ffoo.rs?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "9d852bce6f6a0c7088321ffed8e43d6d024983cf", "filename": "src/test/run-make/weird-output-filenames/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fweird-output-filenames%2FMakefile?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs -o $(TMPDIR)/.foo\n+\trm $(TMPDIR)/.foo\n+\t$(RUSTC) foo.rs -o $(TMPDIR)/.foo.bar\n+\trm $(TMPDIR)/.foo.bar\n+\t$(RUSTC) foo.rs -o $(TMPDIR)/+foo+bar\n+\trm $(TMPDIR)/+foo+bar"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make/weird-output-filenames/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Fweird-output-filenames%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a5e3498c3c67ebb6c9e800f1c62540a582637b/src%2Ftest%2Frun-make%2Fweird-output-filenames%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fweird-output-filenames%2Ffoo.rs?ref=c0a5e3498c3c67ebb6c9e800f1c62540a582637b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}]}