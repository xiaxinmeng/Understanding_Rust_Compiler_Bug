{"sha": "45e14f8dc59310c8d647f7c76736650dfc8a3fb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZTE0ZjhkYzU5MzEwYzhkNjQ3ZjdjNzY3MzY2NTBkZmM4YTNmYjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-09T10:48:10Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-09T10:50:34Z"}, "message": "use custom test runner so that we can get proper test filtering", "tree": {"sha": "55588e15de862a8b87795072bb727b76cf8a652f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55588e15de862a8b87795072bb727b76cf8a652f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45e14f8dc59310c8d647f7c76736650dfc8a3fb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45e14f8dc59310c8d647f7c76736650dfc8a3fb5", "html_url": "https://github.com/rust-lang/rust/commit/45e14f8dc59310c8d647f7c76736650dfc8a3fb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45e14f8dc59310c8d647f7c76736650dfc8a3fb5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d136fdb701b8f9a9a4eed25ccae8c32668832010", "url": "https://api.github.com/repos/rust-lang/rust/commits/d136fdb701b8f9a9a4eed25ccae8c32668832010", "html_url": "https://github.com/rust-lang/rust/commit/d136fdb701b8f9a9a4eed25ccae8c32668832010"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "94b5f8fea79d90d364fe8d10629a8b32e5de76cc", "filename": "README.md", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/45e14f8dc59310c8d647f7c76736650dfc8a3fb5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/45e14f8dc59310c8d647f7c76736650dfc8a3fb5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=45e14f8dc59310c8d647f7c76736650dfc8a3fb5", "patch": "@@ -7,7 +7,7 @@ undergraduate research course at the [University of Saskatchewan][usask].\n \n ## Building Miri\n \n-I recommend that you install [rustup][rustup] to obtain Rust. Then all you have\n+We recommend that you install [rustup][rustup] to obtain Rust. Then all you have\n to do is:\n \n ```sh\n@@ -117,11 +117,12 @@ Miri will often require using a locally built rustc. This includes getting a\n trace of the execution, as distributed rustc has `debug!` and `trace!` disabled.\n \n The first-time setup for a local rustc looks as follows:\n-```\n+```sh\n git clone https://github.com/rust-lang/rust/ rustc\n cd rustc\n cp config.toml.example config.toml\n-# Now edit `config.toml` and set `debug-assertions = true`\n+# Now edit `config.toml` and set `debug-assertions = true` and `test-miri = true`.\n+# The latter is important to build libstd with the right flags for miri.\n ./x.py build src/rustc\n # You may have to change the architecture in the next command\n rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n@@ -130,9 +131,20 @@ rustup override set custom\n ```\n The `build` step can take 30 minutes and more.\n \n-Now you can `cargo build` Miri, and you can `cargo test` it.  But the key point\n-is, you can now run Miri with a trace of all execution steps:\n+Now you can `cargo build` Miri, and you can `cargo test --release` it.  `cargo\n+test --release FILTER` only runs those tests that contain `FILTER` in their\n+filename (including the base directory, e.g. `cargo test --release fail` will\n+run all compile-fail tests).  We recommend using `--release` to make test\n+running take less time.\n+\n+Notice that the \"fullmir\" tests only run if you have `MIRI_SYSROOT` set, the\n+test runner does not realized that your libstd comes with full MIR.  The\n+following will set it correctly:\n+```sh\n+MIRI_SYSROOT=$(rustc --print sysroot) cargo test --release\n+```\n \n+Moreover, you can now run Miri with a trace of all execution steps:\n ```sh\n MIRI_LOG=debug cargo run tests/run-pass/vecs.rs\n ```\n@@ -141,9 +153,8 @@ Setting `MIRI_LOG` like this will configure logging for miri itself as well as\n the `rustc::mir::interpret` and `rustc_mir::interpret` modules in rustc.  You\n can also do more targeted configuration, e.g. to debug the stacked borrows\n implementation:\n-\n ```sh\n-MIRI_LOG=miri::stacked_borrows=trace,rustc_mir::interpret=debug cargo run tests/run-pass/vecs.rs\n+MIRI_LOG=rustc_mir::interpret=debug,miri::stacked_borrows cargo run tests/run-pass/vecs.rs\n ```\n \n In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an"}, {"sha": "5771478cb557aea2379b427dc0f2b854d0265684", "filename": "tests/compiletest.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/45e14f8dc59310c8d647f7c76736650dfc8a3fb5/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45e14f8dc59310c8d647f7c76736650dfc8a3fb5/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=45e14f8dc59310c8d647f7c76736650dfc8a3fb5", "patch": "@@ -1,20 +1,13 @@\n-#![feature(slice_concat_ext)]\n-\n-extern crate compiletest_rs as compiletest;\n-extern crate colored;\n-\n-use colored::*;\n+#![feature(slice_concat_ext, custom_test_frameworks)]\n+#![test_runner(test_runner)]\n \n use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n+use std::env;\n \n-macro_rules! eprintln {\n-    ($($arg:tt)*) => {\n-        let stderr = std::io::stderr();\n-        writeln!(stderr.lock(), $($arg)*).unwrap();\n-    }\n-}\n+use compiletest_rs as compiletest;\n+use colored::*;\n \n fn miri_path() -> PathBuf {\n     if rustc_test_suite().is_some() {\n@@ -37,9 +30,21 @@ fn have_fullmir() -> bool {\n     std::env::var(\"MIRI_SYSROOT\").is_ok() || rustc_test_suite().is_some()\n }\n \n+fn mk_config(mode: &str) -> compiletest::Config {\n+    let mut config = compiletest::Config::default();\n+    config.mode = mode.parse().expect(\"Invalid mode\");\n+    config.rustc_path = miri_path();\n+    if rustc_test_suite().is_some() {\n+        config.run_lib_path = rustc_lib_path();\n+        config.compile_lib_path = rustc_lib_path();\n+    }\n+    config.filter = env::args().nth(1);\n+    config\n+}\n+\n fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n     if need_fullmir && !have_fullmir() {\n-        eprintln!(\"{}\", format!(\n+        eprintln!(\"{}\\n\", format!(\n             \"## Skipping compile-fail tests in {} against miri for target {} due to missing mir\",\n             path,\n             target\n@@ -65,23 +70,17 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n         flags.push(\"-Zmir-opt-level=1\".to_owned());\n     }\n \n-    let mut config = compiletest::Config::default().tempdir();\n-    config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n-    config.rustc_path = miri_path();\n-    if rustc_test_suite().is_some() {\n-        config.run_lib_path = rustc_lib_path();\n-        config.compile_lib_path = rustc_lib_path();\n-    }\n-    config.src_base = PathBuf::from(path.to_string());\n-    config.target_rustcflags = Some(flags.join(\" \"));\n+    let mut config = mk_config(\"compile-fail\");\n+    config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n-    compiletest::run_tests(&config);\n+    config.target_rustcflags = Some(flags.join(\" \"));\n+    compiletest::run_tests(&config.tempdir()); // FIXME: `tempdir` can be done by `mk_config` once `ConfigWithTemp` is exposed as type from compiletest\n }\n \n fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n     if need_fullmir && !have_fullmir() {\n-        eprintln!(\"{}\", format!(\n+        eprintln!(\"{}\\n\", format!(\n             \"## Skipping run-pass tests in {} against miri for target {} due to missing mir\",\n             path,\n             target\n@@ -104,18 +103,12 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n         flags.push(\"-Zmir-opt-level=3\".to_owned());\n     }\n \n-    let mut config = compiletest::Config::default().tempdir();\n-    config.mode = \"ui\".parse().expect(\"Invalid mode\");\n+    let mut config = mk_config(\"ui\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n-    config.rustc_path = miri_path();\n-    if rustc_test_suite().is_some() {\n-        config.run_lib_path = rustc_lib_path();\n-        config.compile_lib_path = rustc_lib_path();\n-    }\n     config.target_rustcflags = Some(flags.join(\" \"));\n-    compiletest::run_tests(&config);\n+    compiletest::run_tests(&config.tempdir()); // FIXME: `tempdir` can be done by `mk_config` once `ConfigWithTemp` is exposed as type from compiletest\n }\n \n fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n@@ -151,7 +144,6 @@ fn get_sysroot() -> PathBuf {\n \n fn get_host() -> String {\n     let rustc = rustc_test_suite().unwrap_or(PathBuf::from(\"rustc\"));\n-    println!(\"using rustc at {}\", rustc.display());\n     let host = std::process::Command::new(rustc)\n         .arg(\"-vV\")\n         .output()\n@@ -184,8 +176,7 @@ fn compile_fail_miri(opt: bool) {\n     compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true, opt);\n }\n \n-#[test]\n-fn test() {\n+fn test_runner(_tests: &[&()]) {\n     // We put everything into a single test to avoid the parallelism `cargo test`\n     // introduces.  We still get parallelism within our tests because `compiletest`\n     // uses `libtest` which runs jobs in parallel."}]}