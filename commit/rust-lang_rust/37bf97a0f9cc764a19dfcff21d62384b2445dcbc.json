{"sha": "37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YmY5N2EwZjljYzc2NGExOWRmY2ZmMjFkNjIzODRiMjQ0NWRjYmM=", "commit": {"author": {"name": "gentlefolk", "email": "cemacken@gmail.com", "date": "2014-02-10T03:29:21Z"}, "committer": {"name": "gentlefolk", "email": "cemacken@gmail.com", "date": "2014-02-17T23:34:46Z"}, "message": "Updated metadata::creader::resolve_crate_deps to use the correct span. Clarified error message when an external crate's dependency is missing. Closes #2404.", "tree": {"sha": "dc77facb8ce8bdc1a3b1f07bc3fcc756094a4b7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc77facb8ce8bdc1a3b1f07bc3fcc756094a4b7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "html_url": "https://github.com/rust-lang/rust/commit/37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/comments", "author": {"login": "cmacknz", "id": 3466215, "node_id": "MDQ6VXNlcjM0NjYyMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3466215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmacknz", "html_url": "https://github.com/cmacknz", "followers_url": "https://api.github.com/users/cmacknz/followers", "following_url": "https://api.github.com/users/cmacknz/following{/other_user}", "gists_url": "https://api.github.com/users/cmacknz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmacknz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmacknz/subscriptions", "organizations_url": "https://api.github.com/users/cmacknz/orgs", "repos_url": "https://api.github.com/users/cmacknz/repos", "events_url": "https://api.github.com/users/cmacknz/events{/privacy}", "received_events_url": "https://api.github.com/users/cmacknz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cmacknz", "id": 3466215, "node_id": "MDQ6VXNlcjM0NjYyMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3466215?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmacknz", "html_url": "https://github.com/cmacknz", "followers_url": "https://api.github.com/users/cmacknz/followers", "following_url": "https://api.github.com/users/cmacknz/following{/other_user}", "gists_url": "https://api.github.com/users/cmacknz/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmacknz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmacknz/subscriptions", "organizations_url": "https://api.github.com/users/cmacknz/orgs", "repos_url": "https://api.github.com/users/cmacknz/repos", "events_url": "https://api.github.com/users/cmacknz/events{/privacy}", "received_events_url": "https://api.github.com/users/cmacknz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d273f65e7dee2fb9a643a55d9337d2f75ee662", "url": "https://api.github.com/repos/rust-lang/rust/commits/57d273f65e7dee2fb9a643a55d9337d2f75ee662", "html_url": "https://github.com/rust-lang/rust/commit/57d273f65e7dee2fb9a643a55d9337d2f75ee662"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "df250937a57c20f222071617eb3317c41e15e210", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "patch": "@@ -24,7 +24,7 @@ use syntax::ast;\n use syntax::abi;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::{Span, DUMMY_SP};\n+use syntax::codemap::{Span};\n use syntax::diagnostic::SpanHandler;\n use syntax::ext::base::{CrateLoader, MacroCrate};\n use syntax::parse::token::{IdentInterner, InternedString};\n@@ -147,6 +147,7 @@ fn visit_view_item(e: &mut Env, i: &ast::ViewItem) {\n     match extract_crate_info(i) {\n         Some(info) => {\n             let cnum = resolve_crate(e,\n+                                     None,\n                                      info.ident.clone(),\n                                      info.name.clone(),\n                                      info.version.clone(),\n@@ -299,6 +300,7 @@ fn existing_match(e: &Env, name: &str, version: &str, hash: &str) -> Option<ast:\n }\n \n fn resolve_crate(e: &mut Env,\n+                 root_ident: Option<~str>,\n                  ident: ~str,\n                  name: ~str,\n                  version: ~str,\n@@ -319,7 +321,7 @@ fn resolve_crate(e: &mut Env,\n         };\n         let loader::Library {\n             dylib, rlib, metadata\n-        } = load_ctxt.load_library_crate();\n+        } = load_ctxt.load_library_crate(root_ident.clone());\n \n         let attrs = decoder::get_crate_attributes(metadata.as_slice());\n         let crateid = attr::find_crateid(attrs).unwrap();\n@@ -338,8 +340,17 @@ fn resolve_crate(e: &mut Env,\n         }\n         e.next_crate_num += 1;\n \n+        // Maintain a reference to the top most crate.\n+        let root_crate = match root_ident {\n+            Some(c) => c,\n+            None => load_ctxt.ident.clone()\n+        };\n+\n         // Now resolve the crates referenced by this crate\n-        let cnum_map = resolve_crate_deps(e, metadata.as_slice());\n+        let cnum_map = resolve_crate_deps(e,\n+                                          Some(root_crate),\n+                                          metadata.as_slice(),\n+                                          span);\n \n         let cmeta = @cstore::crate_metadata {\n             name: load_ctxt.name,\n@@ -364,7 +375,10 @@ fn resolve_crate(e: &mut Env,\n }\n \n // Go through the crate metadata and load any crates that it references\n-fn resolve_crate_deps(e: &mut Env, cdata: &[u8]) -> cstore::cnum_map {\n+fn resolve_crate_deps(e: &mut Env,\n+                      root_ident: Option<~str>,\n+                      cdata: &[u8], span : Span)\n+                   -> cstore::cnum_map {\n     debug!(\"resolving deps of external crate\");\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers\n@@ -387,15 +401,13 @@ fn resolve_crate_deps(e: &mut Env, cdata: &[u8]) -> cstore::cnum_map {\n           None => {\n             debug!(\"need to load it\");\n             // This is a new one so we've got to load it\n-            // FIXME (#2404): Need better error reporting than just a bogus\n-            // span.\n-            let fake_span = DUMMY_SP;\n             let local_cnum = resolve_crate(e,\n+                                           root_ident.clone(),\n                                            cname_str.get().to_str(),\n                                            cname_str.get().to_str(),\n                                            dep.vers.clone(),\n                                            dep.hash.clone(),\n-                                           fake_span);\n+                                           span);\n             cnum_map.insert(extrn_cnum, local_cnum);\n           }\n         }\n@@ -427,6 +439,7 @@ impl CrateLoader for Loader {\n     fn load_crate(&mut self, krate: &ast::ViewItem) -> MacroCrate {\n         let info = extract_crate_info(krate).unwrap();\n         let cnum = resolve_crate(&mut self.env,\n+                                 None,\n                                  info.ident.clone(),\n                                  info.name.clone(),\n                                  info.version.clone(),"}, {"sha": "5539347949a6c378aa36e418299d1dafae040fac", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "patch": "@@ -65,13 +65,17 @@ pub struct ArchiveMetadata {\n }\n \n impl Context {\n-    pub fn load_library_crate(&self) -> Library {\n+    pub fn load_library_crate(&self, root_ident: Option<~str>) -> Library {\n         match self.find_library_crate() {\n             Some(t) => t,\n             None => {\n-                self.sess.span_fatal(self.span,\n-                                     format!(\"can't find crate for `{}`\",\n-                                             self.ident));\n+                let message = match root_ident {\n+                    None => format!(\"can't find crate for `{}`\", self.ident),\n+                    Some(c) => format!(\"can't find crate for `{}` which `{}` depends on\",\n+                                       self.ident,\n+                                       c)\n+                };\n+                self.sess.span_fatal(self.span, message);\n             }\n         }\n     }"}, {"sha": "a470ee0a7c1bb92f66c53aa95c6d307b4d008b0a", "filename": "src/test/run-make/missing-crate-dependency/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FMakefile?ref=37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all: \n+\t$(RUSTC) --crate-type=rlib crateA.rs\n+\t$(RUSTC) --crate-type=rlib crateB.rs\n+\trm $(TMPDIR)/$(call RLIB_GLOB,crateA)\n+\t# Ensure crateC fails to compile since dependency crateA is missing\n+\t$(RUSTC) crateC.rs 2>&1 | \\\n+\t\tgrep \"error: can't find crate for \\`crateA\\` which \\`crateB\\` depends on\""}, {"sha": "4e111f29e8afa2c05c8356d5257a9bcb172a0a2f", "filename": "src/test/run-make/missing-crate-dependency/crateA.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateA.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateA.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateA.rs?ref=37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Base crate\n+pub fn func() {}"}, {"sha": "bf55017c6463f7c0d247777c560c1eb423aa8abd", "filename": "src/test/run-make/missing-crate-dependency/crateB.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateB.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateB.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateB.rs?ref=37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate crateA;"}, {"sha": "174d9382b76be37f56b466240ece1e7ea9ab0b7a", "filename": "src/test/run-make/missing-crate-dependency/crateC.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateC.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bf97a0f9cc764a19dfcff21d62384b2445dcbc/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateC.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmissing-crate-dependency%2FcrateC.rs?ref=37bf97a0f9cc764a19dfcff21d62384b2445dcbc", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate crateB;\n+\n+fn main() {}"}]}