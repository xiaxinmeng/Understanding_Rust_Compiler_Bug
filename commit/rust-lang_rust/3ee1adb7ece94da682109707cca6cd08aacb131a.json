{"sha": "3ee1adb7ece94da682109707cca6cd08aacb131a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZTFhZGI3ZWNlOTRkYTY4MjEwOTcwN2NjYTZjZDA4YWFjYjEzMWE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-11T21:47:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-11T23:55:08Z"}, "message": "libstd: teach workcache to check freshness.", "tree": {"sha": "cac14655f59b0dcf1950b820d924a3620b4920d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac14655f59b0dcf1950b820d924a3620b4920d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ee1adb7ece94da682109707cca6cd08aacb131a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee1adb7ece94da682109707cca6cd08aacb131a", "html_url": "https://github.com/rust-lang/rust/commit/3ee1adb7ece94da682109707cca6cd08aacb131a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ee1adb7ece94da682109707cca6cd08aacb131a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb09ee80d8c322e6d5c6c91af753bfc000b57d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb09ee80d8c322e6d5c6c91af753bfc000b57d1", "html_url": "https://github.com/rust-lang/rust/commit/bfb09ee80d8c322e6d5c6c91af753bfc000b57d1"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "1defca9b20592d8e4ca2f6816117ec3d9d60247f", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 59, "deletions": 18, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3ee1adb7ece94da682109707cca6cd08aacb131a/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ee1adb7ece94da682109707cca6cd08aacb131a/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=3ee1adb7ece94da682109707cca6cd08aacb131a", "patch": "@@ -118,17 +118,18 @@ struct Database {\n \n impl Database {\n     pure fn prepare(_fn_name: &str,\n-                    _declared_inputs: &const WorkMap) ->\n-        Option<(WorkMap, WorkMap, WorkMap, ~str)> {\n+                    _declared_inputs: &const WorkMap,\n+                    _declared_outputs: &const WorkMap) ->\n+        Option<(WorkMap, WorkMap, ~str)> {\n         // XXX: load\n         None\n     }\n     pure fn cache(_fn_name: &str,\n-             _declared_inputs: &WorkMap,\n-             _declared_outputs: &WorkMap,\n-             _discovered_inputs: &WorkMap,\n-             _discovered_outputs: &WorkMap,\n-             _result: &str) {\n+                  _declared_inputs: &WorkMap,\n+                  _declared_outputs: &WorkMap,\n+                  _discovered_inputs: &WorkMap,\n+                  _discovered_outputs: &WorkMap,\n+                  _result: &str) {\n         // XXX: store\n     }\n }\n@@ -138,11 +139,19 @@ struct Logger {\n     a: ()\n }\n \n+impl Logger {\n+    pure fn info(i: &str) {\n+        unsafe {\n+            io::println(~\"workcache: \" + i.to_owned());\n+        }\n+    }\n+}\n+\n struct Context {\n     db: @Database,\n     logger: @Logger,\n     cfg: @json::Object,\n-    freshness: LinearMap<~str,~fn(&str,&str)->bool>\n+    freshness: LinearMap<~str,@pure fn(&str,&str)->bool>\n }\n \n struct Prep {\n@@ -213,25 +222,57 @@ impl Prep {\n                                      val.to_owned());\n     }\n \n+    pure fn is_fresh(cat: &str, kind: &str,\n+                     name: &str, val: &str) -> bool {\n+        let k = kind.to_owned();\n+        let f = (self.ctxt.freshness.get(&k))(name, val);\n+        if f {\n+            self.ctxt.logger.info(fmt!(\"%s %s:%s is fresh\",\n+                                       cat, kind, name));\n+        } else {\n+            self.ctxt.logger.info(fmt!(\"%s %s:%s is not fresh\",\n+                                       cat, kind, name))\n+        }\n+        return f;\n+    }\n+\n+    pure fn all_fresh(cat: &str, map: WorkMap) -> bool {\n+        for map.each |k,v| {\n+            if ! self.is_fresh(cat, k.kind, k.name, *v) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n     fn exec<T:Send\n               Serializable<json::Serializer>\n               Deserializable<json::Deserializer>>(\n                   @mut self, blk: ~fn(&Exec) -> T) -> Work<T> {\n+\n         let cached = self.ctxt.db.prepare(self.fn_name,\n-                                          &self.declared_inputs);\n+                                          &self.declared_inputs,\n+                                          &self.declared_outputs);\n \n         match move cached {\n             None => (),\n-            Some((move _decl_out,\n-                  move _disc_in,\n-                  move _disc_out,\n+            Some((move disc_in,\n+                  move disc_out,\n                   move res)) => {\n-                // XXX: check deps for freshness, only return if fresh.\n-                let v : T = do io::with_str_reader(res) |rdr| {\n-                    let j = result::unwrap(json::from_reader(rdr));\n-                    deserialize(&json::Deserializer(move j))\n-                };\n-                return Work::new(self, move Left(move v));\n+\n+                if self.all_fresh(\"declared input\",\n+                                  self.declared_inputs) &&\n+                    self.all_fresh(\"declared output\",\n+                                   self.declared_outputs) &&\n+                    self.all_fresh(\"discovered input\", disc_in) &&\n+                    self.all_fresh(\"discovered output\", disc_out) {\n+\n+                    let v : T = do io::with_str_reader(res) |rdr| {\n+                        let j = result::unwrap(json::from_reader(rdr));\n+                        deserialize(&json::Deserializer(move j))\n+                    };\n+                    return Work::new(self, move Left(move v));\n+                }\n             }\n         }\n "}]}