{"sha": "7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZWJkYjYzOWFkZTcwM2EyYTlmNTVhODNkZjIxYTc5ZmJiZDlmNjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-26T17:00:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-26T17:00:57Z"}, "message": "remove Unique::from for shared pointer types", "tree": {"sha": "44d1b7e5888c8223846468ce5db737d49f3a54d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44d1b7e5888c8223846468ce5db737d49f3a54d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "html_url": "https://github.com/rust-lang/rust/commit/7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aebdb639ade703a2a9f55a83df21a79fbbd9f69/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec1f28f9614292c36b371d3758afffdd52cb9786", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1f28f9614292c36b371d3758afffdd52cb9786", "html_url": "https://github.com/rust-lang/rust/commit/ec1f28f9614292c36b371d3758afffdd52cb9786"}], "stats": {"total": 23, "additions": 3, "deletions": 20}, "files": [{"sha": "5569c293e2f6605e50ba1e0f7250188b19d4337a", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7aebdb639ade703a2a9f55a83df21a79fbbd9f69/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aebdb639ade703a2a9f55a83df21a79fbbd9f69/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "patch": "@@ -131,7 +131,7 @@ impl<K, V> BoxedNode<K, V> {\n     }\n \n     unsafe fn from_ptr(ptr: NonNull<LeafNode<K, V>>) -> Self {\n-        BoxedNode { ptr: Unique::from(ptr) }\n+        BoxedNode { ptr: Unique::new_unchecked(ptr.as_ptr()) }\n     }\n \n     fn as_ptr(&self) -> NonNull<LeafNode<K, V>> {"}, {"sha": "ca165b61e26a7da30b2c3e210992a2d8412e4d9a", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7aebdb639ade703a2a9f55a83df21a79fbbd9f69/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aebdb639ade703a2a9f55a83df21a79fbbd9f69/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "patch": "@@ -151,7 +151,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n \n             let memory = alloc.alloc(layout, init).unwrap_or_else(|_| handle_alloc_error(layout));\n             Self {\n-                ptr: memory.ptr.cast().into(),\n+                ptr: unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) },\n                 cap: Self::capacity_from_bytes(memory.size),\n                 alloc,\n             }\n@@ -469,7 +469,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     }\n \n     fn set_memory(&mut self, memory: MemoryBlock) {\n-        self.ptr = memory.ptr.cast().into();\n+        self.ptr = unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) };\n         self.cap = Self::capacity_from_bytes(memory.size);\n     }\n "}, {"sha": "d93dc1f32623187bb8ffe2fd8c51e171091526e1", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7aebdb639ade703a2a9f55a83df21a79fbbd9f69/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aebdb639ade703a2a9f55a83df21a79fbbd9f69/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=7aebdb639ade703a2a9f55a83df21a79fbbd9f69", "patch": "@@ -3,7 +3,6 @@ use crate::fmt;\n use crate::marker::{PhantomData, Unsize};\n use crate::mem;\n use crate::ops::{CoerceUnsized, DispatchFromDyn};\n-use crate::ptr::NonNull;\n \n // ignore-tidy-undocumented-unsafe\n \n@@ -171,19 +170,3 @@ impl<T: ?Sized> From<&mut T> for Unique<T> {\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n-\n-#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<&T> for Unique<T> {\n-    #[inline]\n-    fn from(reference: &T) -> Self {\n-        unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n-    }\n-}\n-\n-#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n-impl<T: ?Sized> From<NonNull<T>> for Unique<T> {\n-    #[inline]\n-    fn from(p: NonNull<T>) -> Self {\n-        unsafe { Unique::new_unchecked(p.as_ptr()) }\n-    }\n-}"}]}