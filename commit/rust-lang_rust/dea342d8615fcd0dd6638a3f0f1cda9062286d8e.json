{"sha": "dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "node_id": "C_kwDOAAsO6NoAKGRlYTM0MmQ4NjE1ZmNkMGRkNjYzOGEzZjBmMWNkYTkwNjIyODZkOGU", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-09T19:38:07Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-13T10:24:49Z"}, "message": "Make visiting traits generic over the Interner", "tree": {"sha": "ebb6257664d94705275e46f4c903d2af1dc5e616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebb6257664d94705275e46f4c903d2af1dc5e616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEvrRBFuOXsbT1OVTHfUwvbCISJTIFAmPqD/ERHGVnZ3lhbEBn\nbWFpbC5jb20ACgkQfUwvbCISJTL3UxAAoP8KpA9WzDulPLfdF9jhBkZGuz/y1AE6\n4b7l3JrVxw1qOBbVmPnxfXH09CTMOz918eUXWc4oR1Pes9kRq2HzwDb9RMX4RqjK\n7PwWRKx+pkj2EYOKmOWH3TQVBiD9G6dWRk8w+xhqGK2bb8z6Oskz7C6lAQ7NPUsG\nOsCTBcTAqGjx7vYuxP5qRYp6dwCBUBK6Hn/pgKZELEIRhENXPmYq9f47TaiuAWlm\ngC3ma2vqKJgRoRJ0sGr1Z0s7lptPXOJDYyE8PZf+lzT8V1O2s5V2cKKUk2hJsq5t\np/pI6lLbOSXRpVI3pjYqZEhqwsY4/3N7X/Bz783uF8hSGs1ZXx/5t9TVWRJI5bEa\n8npZ42UPB/tENFrKwrHYWkpFWxSwcdjDOZgJy0Ruh0TV2rzDTU9fwRr3sOTE2T9S\nK7UE/bpMn4U/i2fdK8TPkXo4Eb57Vy5jUUphm1n9tKZ2McUkpGTKkLUzsOnZrODu\nufaxfvSEZG/sqCQm6ORCc2/ohxeDcBN3LTdILLuSmXD+LWujVolY2n2h0HFtnwPJ\nbmUP5zqUM6u/TuPtKP2Wqdyx0naZ0sX65L/btA16BbxRCjvIWHAPPJcsm6md71xV\nNNRU2dSpZYavFVnVhfAyeJfzZeSYTHr4ASrLmu+NSw3/5aoOQq3NYWp+cyGdLEQU\nio8+RMeEcWA=\n=eB5M\n-----END PGP SIGNATURE-----", "payload": "tree ebb6257664d94705275e46f4c903d2af1dc5e616\nparent 0b7dda9afd0dcf85d6b2ccdc864eb9f73596efcc\nauthor Alan Egerton <eggyal@gmail.com> 1675971487 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1676283889 +0000\n\nMake visiting traits generic over the Interner\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "html_url": "https://github.com/rust-lang/rust/commit/dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7dda9afd0dcf85d6b2ccdc864eb9f73596efcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7dda9afd0dcf85d6b2ccdc864eb9f73596efcc", "html_url": "https://github.com/rust-lang/rust/commit/0b7dda9afd0dcf85d6b2ccdc864eb9f73596efcc"}], "stats": {"total": 226, "additions": 121, "deletions": 105}, "files": [{"sha": "581cb6421f734a804d294d17f1e8ad7ca33ee431", "filename": "compiler/rustc_const_eval/src/interpret/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Futil.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -21,7 +21,7 @@ where\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for UsedParamsNeedSubstVisitor<'tcx> {\n         type BreakTy = FoundParam;\n \n         fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "15a66ccc0f41206fd25c05e5349265e5620d7d3e", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -261,7 +261,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         selftys: Vec<(Span, Option<String>)>,\n     }\n \n-    impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueVisitor<'tcx> {\n         type BreakTy = Ty<'tcx>;\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1447,7 +1447,7 @@ fn opaque_type_cycle_error(\n                     opaques: Vec<DefId>,\n                     closures: Vec<DefId>,\n                 }\n-                impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for OpaqueTypeCollector {\n+                impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeCollector {\n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                         match *t.kind() {\n                             ty::Alias(ty::Opaque, ty::AliasTy { def_id: def, .. }) => {"}, {"sha": "16e7dcd0060da3edf4ca129dae518432cf294e5f", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -772,7 +772,7 @@ impl<'tcx> GATSubstCollector<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for GATSubstCollector<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for GATSubstCollector<'tcx> {\n     type BreakTy = !;\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -1435,7 +1435,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             struct CountParams {\n                 params: FxHashSet<u32>,\n             }\n-            impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for CountParams {\n+            impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for CountParams {\n                 type BreakTy = ();\n \n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "d0db8cabfddb27f8c7db1e584ca10da005f51691", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -552,7 +552,7 @@ fn fast_reject_auto_impl<'tcx>(tcx: TyCtxt<'tcx>, trait_def_id: DefId, self_ty:\n         seen: FxHashSet<DefId>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for DisableAutoTraitVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for DisableAutoTraitVisitor<'tcx> {\n         type BreakTy = ();\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             let tcx = self.tcx;"}, {"sha": "3f8d620fe6934f4ed57f84d988dbe0f02a30380b", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -1752,7 +1752,7 @@ fn is_late_bound_map(\n \n     use std::ops::ControlFlow;\n     use ty::Ty;\n-    impl<'tcx> TypeVisitor<'tcx> for ConstrainedCollectorPostAstConv {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ConstrainedCollectorPostAstConv {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<!> {\n             match t.kind() {\n                 ty::Param(param_ty) => {"}, {"sha": "072676c400d4ea6da11f8fb46194e709749f2e41", "filename": "compiler/rustc_hir_analysis/src/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fconstrained_generic_params.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -56,7 +56,7 @@ struct ParameterCollector {\n     include_nonconstraining: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ParameterCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match *t.kind() {\n             ty::Alias(ty::Projection, ..) if !self.include_nonconstraining => {"}, {"sha": "fb63bf224741a6cdbb87e8f268b9b30fa9da5fa2", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -101,7 +101,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         }\n     }\n \n-    impl<'tcx> ty::ir::TypeVisitor<'tcx> for OpaqueTypeLifetimeCollector<'tcx> {\n+    impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypeLifetimeCollector<'tcx> {\n         #[instrument(level = \"trace\", skip(self), ret)]\n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {"}, {"sha": "b1268c5f7923e6445821b892c9fe9bee30073a71", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::{InferOk, InferResult};\n use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::visit::TypeVisitable;\n-use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TypeSuperVisitable};\n+use rustc_middle::ty::{self, ir::TypeVisitor, Ty, TyCtxt, TypeSuperVisitable};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n@@ -232,7 +232,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 struct MentionsTy<'tcx> {\n                     expected_ty: Ty<'tcx>,\n                 }\n-                impl<'tcx> TypeVisitor<'tcx> for MentionsTy<'tcx> {\n+                impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for MentionsTy<'tcx> {\n                     type BreakTy = ();\n \n                     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "f434fb922893dad1ffac8c87c8d407d5071b6371", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -3,7 +3,9 @@ use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::ObligationCauseCode;\n-use rustc_middle::ty::{self, ir::TypeVisitor, DefIdTree, Ty, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{\n+    self, ir::TypeVisitor, DefIdTree, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n+};\n use rustc_span::{self, Span};\n use rustc_trait_selection::traits;\n \n@@ -247,7 +249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         t: T,\n     ) -> Option<ty::GenericArg<'tcx>> {\n         struct FindAmbiguousParameter<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, DefId);\n-        impl<'tcx> TypeVisitor<'tcx> for FindAmbiguousParameter<'_, 'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for FindAmbiguousParameter<'_, 'tcx> {\n             type BreakTy = ty::GenericArg<'tcx>;\n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n                 if let Some(origin) = self.0.type_var_origin(ty)"}, {"sha": "5ce416cac5c209bb7510bcdb0731b314254b2e5d", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -561,7 +561,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             struct RecursionChecker {\n                 def_id: LocalDefId,\n             }\n-            impl<'tcx> ty::ir::TypeVisitor<'tcx> for RecursionChecker {\n+            impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for RecursionChecker {\n                 type BreakTy = ();\n                 fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                     if let ty::Alias(ty::Opaque, ty::AliasTy { def_id, .. }) = *t.kind() {"}, {"sha": "9841c3141c9d8d729780a280b85a36986a22893c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -1491,7 +1491,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);"}, {"sha": "641477e907dfaa2e8b3d74cbaebcbffd2ce4bc8e", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n /// Collect all the trait objects in a type that could have received an implicit `'static` lifetime.\n pub struct TraitObjectVisitor(pub FxIndexSet<DefId>);\n \n-impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Dynamic(preds, re, _) if re.is_static() => {"}, {"sha": "d295881d5d7a0b6bf758a2ed792e95cead57e7d2", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for HighlightBuilder<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for HighlightBuilder<'tcx> {\n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if !r.has_name() && self.counter <= 3 {\n                     self.highlight.highlighting_region(r, self.counter);"}, {"sha": "644774c93c2a46aa8f1d0630ec856f27fc2607c9", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -792,7 +792,7 @@ struct ScopeInstantiator<'me, 'tcx> {\n     bound_region_scope: &'me mut BoundRegionScope<'tcx>,\n }\n \n-impl<'me, 'tcx> TypeVisitor<'tcx> for ScopeInstantiator<'me, 'tcx> {\n+impl<'me, 'tcx> TypeVisitor<TyCtxt<'tcx>> for ScopeInstantiator<'me, 'tcx> {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "5635e8adf34f8df74f1208270e98d7008cb02532", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -431,7 +431,7 @@ pub struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP: FnMut(ty::Region<'tcx>)> {\n     pub op: OP,\n }\n \n-impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n+impl<'tcx, OP> TypeVisitor<TyCtxt<'tcx>> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {"}, {"sha": "ad3c9449f08aa738556e42d797c20ec62faf786c", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'tcx> UnresolvedTypeOrConstFinder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n+impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for UnresolvedTypeOrConstFinder<'a, 'tcx> {\n     type BreakTy = (ty::Term<'tcx>, Option<Span>);\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let t = self.infcx.shallow_resolve(t);"}, {"sha": "7f3162a92a426578310e8aff2f16b3f59da58c8a", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -2,7 +2,7 @@ use crate::traits;\n use crate::traits::project::Normalized;\n use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use rustc_middle::ty::visit::{TypeVisitable, TypeVisitor};\n-use rustc_middle::ty::{self, ir};\n+use rustc_middle::ty::{self, ir, TyCtxt};\n \n use std::fmt;\n use std::ops::ControlFlow;\n@@ -72,7 +72,7 @@ impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for traits::Obligation<\n     }\n }\n \n-impl<'tcx, O: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.predicate.visit_with(visitor)?;\n         self.param_env.visit_with(visitor)"}, {"sha": "88c6ea7efb28195bbb4577b66361f25fc17d48a9", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -1144,7 +1144,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n         struct ProhibitOpaqueTypes;\n-        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for ProhibitOpaqueTypes {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for ProhibitOpaqueTypes {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "67057e1a97cc169c25a2fee2fbaebe555ed0623c", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -19,7 +19,7 @@ pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2:\n     s.bind_with(|_| synstructure::BindStyle::Move);\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::visit::ir::TypeVisitable<'tcx>),\n+        quote!(::rustc_middle::ty::visit::ir::TypeVisitable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n             fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<'tcx>>(\n                 &self,"}, {"sha": "8e673e458c8895d724b3eed5021a26d1fde273a5", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -86,7 +86,7 @@ macro_rules! TrivialTypeTraversalImpls {\n                 }\n             }\n \n-            impl<$tcx> $crate::ty::visit::ir::TypeVisitable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::visit::ir::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $ty {\n                 #[inline]\n                 fn visit_with<F: $crate::ty::visit::TypeVisitor<$tcx>>(\n                     &self,\n@@ -136,7 +136,7 @@ macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeVisitable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::visit::ir::TypeVisitable<$tcx> for $s\n+        impl<$($p),*> $crate::ty::visit::ir::TypeVisitable<$crate::ty::TyCtxt<$tcx>> for $s\n             $(where $($wc)*)*\n         {\n             fn visit_with<V: $crate::ty::visit::TypeVisitor<$tcx>>("}, {"sha": "334ff3b5b824d5c6ecd8ac6cdca129a393673a35", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -2751,7 +2751,7 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for UserTypeProjection {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for UserTypeProjection {\n     fn visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<Vs::BreakTy> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit."}, {"sha": "e7c5d44b22ed6213267c39f454534d65371cd5a9", "filename": "compiler/rustc_middle/src/mir/type_visitable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_visitable.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -2,7 +2,7 @@\n \n use super::*;\n \n-impl<'tcx, R: Idx, C: Idx> ir::TypeVisitable<'tcx> for BitMatrix<R, C> {\n+impl<'tcx, R: Idx, C: Idx> ir::TypeVisitable<TyCtxt<'tcx>> for BitMatrix<R, C> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }"}, {"sha": "512285b8e72a2f10ebb177dc17c0b56c1aba1167", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::intern::Interned;\n \n use crate::ty::{\n     ir::{self, TypeFoldable, TypeVisitable},\n-    FallibleTypeFolder, Ty, TypeFolder, TypeVisitor,\n+    FallibleTypeFolder, Ty, TyCtxt, TypeFolder, TypeVisitor,\n };\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n@@ -48,7 +48,7 @@ impl<'tcx> TypeFoldable<'tcx> for ExternalConstraints<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitable<'tcx> for ExternalConstraints<'tcx> {\n+impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(\n         &self,\n         visitor: &mut V,"}, {"sha": "6b6ee1c06eefeec96e67220502abc2d7ffb3690b", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -461,7 +461,7 @@ pub struct IsSuggestableVisitor<'tcx> {\n     infer_suggestable: bool,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for IsSuggestableVisitor<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for IsSuggestableVisitor<'tcx> {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "cb5e0209f2e0246d83f91544d07cfcb0f0c78749", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -61,7 +61,7 @@ pub mod ir {\n     ///\n     /// To implement this conveniently, use the derive macro located in\n     /// `rustc_macros`.\n-    pub trait TypeFoldable<'tcx>: TypeVisitable<'tcx> {\n+    pub trait TypeFoldable<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n         /// The entry point for folding. To fold a value `t` with a folder `f`\n         /// call: `t.try_fold_with(f)`.\n         ///"}, {"sha": "e12907467d58e61a3f6715425bad7f5adb8bbf06", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -923,7 +923,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for Term<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Term<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.unpack().visit_with(visitor)\n     }\n@@ -1632,7 +1632,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n         self.reveal().visit_with(visitor)"}, {"sha": "cf8009b5c3532b4236d7a8318ec2f9b3d1e234f9", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -2493,7 +2493,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             }\n         }\n \n-        impl<'tcx> ty::visit::ir::TypeVisitor<'tcx> for RegionNameCollector<'tcx> {\n+        impl<'tcx> ty::visit::ir::TypeVisitor<TyCtxt<'tcx>> for RegionNameCollector<'tcx> {\n             type BreakTy = ();\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "3e811c303aecbf006908d0c6c649f2d605184e64", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -369,7 +369,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n@@ -384,7 +384,9 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx>\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for (T, U) {\n+impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>>\n+    for (T, U)\n+{\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n         self.1.visit_with(visitor)\n@@ -407,7 +409,7 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n }\n \n impl<'tcx, A: TypeVisitable<'tcx>, B: TypeVisitable<'tcx>, C: TypeVisitable<'tcx>>\n-    ir::TypeVisitable<'tcx> for (A, B, C)\n+    ir::TypeVisitable<TyCtxt<'tcx>> for (A, B, C)\n {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.0.visit_with(visitor)?;\n@@ -482,7 +484,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Rc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Rc<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Rc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -528,7 +530,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Arc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Arc<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Arc<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -540,7 +542,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Box<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Box<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Box<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         (**self).visit_with(visitor)\n     }\n@@ -552,13 +554,13 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Vec<T> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Vec<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Vec<T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for &[T] {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &[T] {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -570,7 +572,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Box<[T]> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for Box<[T]> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Box<[T]> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -582,7 +584,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for ty::Binder<'tcx, T>\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_binder(self)\n     }\n@@ -597,7 +599,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n@@ -627,7 +629,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(*self)\n     }\n@@ -683,7 +685,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n@@ -733,7 +735,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_region(*self)\n     }\n@@ -748,7 +750,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n@@ -760,7 +762,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_predicate(*self)\n     }\n@@ -776,7 +778,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.kind().visit_with(visitor)\n     }\n@@ -794,7 +796,7 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> ir::TypeFoldable<'tcx> for IndexVec<I,\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> ir::TypeVisitable<'tcx> for IndexVec<I, T> {\n+impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> ir::TypeVisitable<TyCtxt<'tcx>> for IndexVec<I, T> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n@@ -806,7 +808,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_const(*self)\n     }\n@@ -827,7 +829,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.ty().visit_with(visitor)?;\n         self.kind().visit_with(visitor)\n@@ -840,19 +842,19 @@ impl<'tcx> ir::TypeFoldable<'tcx> for InferConst<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for InferConst<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         ControlFlow::Continue(())\n     }\n }\n \n-impl<'tcx> TypeSuperVisitable<'tcx> for ty::UnevaluatedConst<'tcx> {\n+impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::UnevaluatedConst<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.substs.visit_with(visitor)\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for TyAndLayout<'tcx, Ty<'tcx>> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for TyAndLayout<'tcx, Ty<'tcx>> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         visitor.visit_ty(self.ty)\n     }"}, {"sha": "bb9bec8e648ae269f128d69d945bf57a8b4fdf94", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -2040,7 +2040,7 @@ impl<'tcx> Ty<'tcx> {\n     pub fn contains(self, other: Ty<'tcx>) -> bool {\n         struct ContainsTyVisitor<'tcx>(Ty<'tcx>);\n \n-        impl<'tcx> TypeVisitor<'tcx> for ContainsTyVisitor<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTyVisitor<'tcx> {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -2058,7 +2058,7 @@ impl<'tcx> Ty<'tcx> {\n     pub fn contains_closure(self) -> bool {\n         struct ContainsClosureVisitor;\n \n-        impl<'tcx> TypeVisitor<'tcx> for ContainsClosureVisitor {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsClosureVisitor {\n             type BreakTy = ();\n \n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "e9de6992998664d04bb0d890b1afcbeefbe658d9", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -237,7 +237,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for GenericArg<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n@@ -535,7 +535,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     }\n }\n \n-impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<'tcx> for &'tcx ty::List<T> {\n+impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &'tcx ty::List<T> {\n     #[inline]\n     fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.iter().try_for_each(|t| t.visit_with(visitor))\n@@ -554,7 +554,7 @@ pub struct EarlyBinder<T>(pub T);\n \n /// For early binders, you should first call `subst` before using any visitors.\n impl<'tcx, T> !ir::TypeFoldable<'tcx> for ty::EarlyBinder<T> {}\n-impl<'tcx, T> !ir::TypeVisitable<'tcx> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n     pub fn as_ref(&self) -> EarlyBinder<&T> {"}, {"sha": "714d28e380659072fe3abe95c11c09971ca039a0", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -45,12 +45,12 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sso::SsoHashSet;\n use std::ops::ControlFlow;\n \n-pub trait TypeVisitable<'tcx> = ir::TypeVisitable<'tcx> + TypeVisitableExt<'tcx>;\n-pub trait TypeSuperVisitable<'tcx> = ir::TypeSuperVisitable<'tcx>;\n-pub trait TypeVisitor<'tcx> = ir::TypeVisitor<'tcx>;\n+pub trait TypeVisitable<'tcx> = ir::TypeVisitable<TyCtxt<'tcx>> + TypeVisitableExt<'tcx>;\n+pub trait TypeSuperVisitable<'tcx> = ir::TypeSuperVisitable<TyCtxt<'tcx>>;\n+pub trait TypeVisitor<'tcx> = ir::TypeVisitor<TyCtxt<'tcx>>;\n \n pub mod ir {\n-    use crate::ty::{self, Binder, Ty};\n+    use crate::ty::Interner;\n \n     use std::fmt;\n     use std::ops::ControlFlow;\n@@ -60,7 +60,7 @@ pub mod ir {\n     ///\n     /// To implement this conveniently, use the derive macro located in\n     /// `rustc_macros`.\n-    pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n+    pub trait TypeVisitable<I: Interner>: fmt::Debug + Clone {\n         /// The entry point for visiting. To visit a value `t` with a visitor `v`\n         /// call: `t.visit_with(v)`.\n         ///\n@@ -71,54 +71,66 @@ pub mod ir {\n         /// that calls a visitor method specifically for that type (such as\n         /// `V::visit_ty`). This is where control transfers from `TypeFoldable` to\n         /// `TypeVisitor`.\n-        fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n+        fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n     }\n \n-    pub trait TypeSuperVisitable<'tcx>: TypeVisitable<'tcx> {\n+    pub trait TypeSuperVisitable<I: Interner>: TypeVisitable<I> {\n         /// Provides a default visit for a type of interest. This should only be\n         /// called within `TypeVisitor` methods, when a non-custom traversal is\n         /// desired for the value of the type of interest passed to that method.\n         /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n         /// `ty.super_visit_with(self)`, but any other visiting should be done\n         /// with `xyz.visit_with(self)`.\n-        fn super_visit_with<V: TypeVisitor<'tcx>>(\n-            &self,\n-            visitor: &mut V,\n-        ) -> ControlFlow<V::BreakTy>;\n+        fn super_visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n     }\n \n     /// This trait is implemented for every visiting traversal. There is a visit\n     /// method defined for every type of interest. Each such method has a default\n     /// that recurses into the type's fields in a non-custom fashion.\n-    pub trait TypeVisitor<'tcx>: Sized {\n+    pub trait TypeVisitor<I: Interner>: Sized {\n         type BreakTy = !;\n \n-        fn visit_binder<T: TypeVisitable<'tcx>>(\n+        fn visit_binder<T: TypeVisitable<I>>(\n             &mut self,\n-            t: &Binder<'tcx, T>,\n-        ) -> ControlFlow<Self::BreakTy> {\n+            t: &I::Binder<T>,\n+        ) -> ControlFlow<Self::BreakTy>\n+        where\n+            I::Binder<T>: TypeSuperVisitable<I>,\n+        {\n             t.super_visit_with(self)\n         }\n \n-        fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_ty(&mut self, t: I::Ty) -> ControlFlow<Self::BreakTy>\n+        where\n+            I::Ty: TypeSuperVisitable<I>,\n+        {\n             t.super_visit_with(self)\n         }\n \n-        fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_region(&mut self, r: I::Region) -> ControlFlow<Self::BreakTy>\n+        where\n+            I::Region: TypeSuperVisitable<I>,\n+        {\n             r.super_visit_with(self)\n         }\n \n-        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_const(&mut self, c: I::Const) -> ControlFlow<Self::BreakTy>\n+        where\n+            I::Const: TypeSuperVisitable<I>,\n+        {\n             c.super_visit_with(self)\n         }\n \n-        fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        fn visit_predicate(&mut self, p: I::Predicate) -> ControlFlow<Self::BreakTy>\n+        where\n+            I::Predicate: TypeSuperVisitable<I>,\n+        {\n             p.super_visit_with(self)\n         }\n     }\n }\n \n-pub trait TypeVisitableExt<'tcx>: ir::TypeVisitable<'tcx> {\n+pub trait TypeVisitableExt<'tcx>: ir::TypeVisitable<TyCtxt<'tcx>> {\n     /// Returns `true` if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n     /// If `binder` is `ty::INNERMOST`, this indicates whether\n@@ -240,7 +252,7 @@ pub trait TypeVisitableExt<'tcx>: ir::TypeVisitable<'tcx> {\n     }\n }\n \n-impl<'tcx, T: ir::TypeVisitable<'tcx>> TypeVisitableExt<'tcx> for T {}\n+impl<'tcx, T: ir::TypeVisitable<TyCtxt<'tcx>>> TypeVisitableExt<'tcx> for T {}\n \n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n@@ -295,7 +307,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             callback: F,\n         }\n \n-        impl<'tcx, F> ir::TypeVisitor<'tcx> for RegionVisitor<F>\n+        impl<'tcx, F> ir::TypeVisitor<TyCtxt<'tcx>> for RegionVisitor<F>\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n@@ -397,7 +409,7 @@ impl<'tcx> ValidateBoundVars<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<'tcx> for ValidateBoundVars<'tcx> {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for ValidateBoundVars<'tcx> {\n     type BreakTy = ();\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -509,7 +521,7 @@ struct HasEscapingVarsVisitor {\n     outer_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> ir::TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasEscapingVarsVisitor {\n     type BreakTy = FoundEscapingVars;\n \n     fn visit_binder<T: TypeVisitable<'tcx>>(\n@@ -586,7 +598,7 @@ impl std::fmt::Debug for HasTypeFlagsVisitor {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n     #[inline]\n@@ -656,7 +668,7 @@ impl LateBoundRegionsCollector {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<'tcx> for LateBoundRegionsCollector {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for LateBoundRegionsCollector {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -718,7 +730,7 @@ impl MaxUniverse {\n     }\n }\n \n-impl<'tcx> ir::TypeVisitor<'tcx> for MaxUniverse {\n+impl<'tcx> ir::TypeVisitor<TyCtxt<'tcx>> for MaxUniverse {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if let ty::Placeholder(placeholder) = t.kind() {\n             self.max_universe = ty::UniverseIndex::from_u32("}, {"sha": "aba842817ef7a596c8d14a30b05b118ab330c014", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -296,7 +296,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n+impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if !c.has_non_region_param() {"}, {"sha": "9cff62e85146ee20dba36f84c2630fc798a704bc", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -174,7 +174,7 @@ where\n     }\n }\n \n-impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>\n+impl<'tcx, V> TypeVisitor<TyCtxt<'tcx>> for DefIdVisitorSkeleton<'_, 'tcx, V>\n where\n     V: DefIdVisitor<'tcx> + ?Sized,\n {"}, {"sha": "b52200e066f69b8dd0fa170a2bf6bcb74159074b", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         struct ContainsTerm<'tcx> {\n             term: ty::Term<'tcx>,\n         }\n-        impl<'tcx> TypeVisitor<'tcx> for ContainsTerm<'tcx> {\n+        impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ContainsTerm<'tcx> {\n             type BreakTy = ();\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n                 if t.needs_infer() {"}, {"sha": "a95694e514468e6ada6997f71c7fe949effc3264", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -627,7 +627,7 @@ enum OrphanCheckEarlyExit<'tcx> {\n     LocalTy(Ty<'tcx>),\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for OrphanChecker<'tcx> {\n     type BreakTy = OrphanCheckEarlyExit<'tcx>;\n     fn visit_region(&mut self, _r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         ControlFlow::Continue(())"}, {"sha": "dd9b5b534d7e2a491fe40186a8f17c4061f559e6", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -171,7 +171,7 @@ fn satisfied_from_param_env<'tcx>(\n         single_match: Option<Result<ty::Const<'tcx>, ()>>,\n     }\n \n-    impl<'a, 'tcx> TypeVisitor<'tcx> for Visitor<'a, 'tcx> {\n+    impl<'a, 'tcx> TypeVisitor<TyCtxt<'tcx>> for Visitor<'a, 'tcx> {\n         type BreakTy = ();\n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             debug!(\"is_const_evaluatable: candidate={:?}\", c);"}, {"sha": "c71b0e8574fea27f16e13195a42478690ce9437e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -2963,7 +2963,7 @@ impl ArgKind {\n \n struct HasNumericInferVisitor;\n \n-impl<'tcx> ty::ir::TypeVisitor<'tcx> for HasNumericInferVisitor {\n+impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for HasNumericInferVisitor {\n     type BreakTy = ();\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "067e63de911dc11b67c752daa452287dad7960e0", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -481,7 +481,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n         generics: &'tcx ty::Generics,\n         trait_item_def_id: DefId,\n     }\n-    impl<'tcx> ty::ir::TypeVisitor<'tcx> for ReferencesOnlyParentGenerics<'tcx> {\n+    impl<'tcx> ty::ir::TypeVisitor<TyCtxt<'tcx>> for ReferencesOnlyParentGenerics<'tcx> {\n         type BreakTy = ();\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             // If this is a parameter from the trait item's own generics, then bail"}, {"sha": "c12ba103c340c93c6826eb4b8a11b9c13c7141e1", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -836,7 +836,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n         supertraits: Option<Vec<DefId>>,\n     }\n \n-    impl<'tcx> TypeVisitor<'tcx> for IllegalSelfTypeVisitor<'tcx> {\n+    impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for IllegalSelfTypeVisitor<'tcx> {\n         type BreakTy = ();\n \n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "149f33472aec25ba2e8f9a53a96910300083149d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -115,7 +115,7 @@ struct MaxEscapingBoundVarVisitor {\n     escaping: usize,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for MaxEscapingBoundVarVisitor {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}, {"sha": "8402499b296d7db2db827ead0c90487c121208f2", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -80,7 +80,7 @@ impl<'tcx> Search<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for Search<'tcx> {\n     type BreakTy = Ty<'tcx>;\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "2f05e25825996f01cd4001ae013a91bd9466bad9", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -926,7 +926,7 @@ impl<'tcx> BoundVarsCollector<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for BoundVarsCollector<'tcx> {\n     fn visit_binder<T: TypeVisitable<'tcx>>(\n         &mut self,\n         t: &Binder<'tcx, T>,\n@@ -1175,7 +1175,7 @@ impl PlaceholdersCollector {\n     }\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n+impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         match t.kind() {\n             ty::Placeholder(p) if p.universe == self.universe_index => {"}, {"sha": "e9dc7351b58ef317b3047b81adfcb0d1effc60f8", "filename": "src/tools/clippy/clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n-use rustc_middle::ty::{self, visit::ir::TypeVisitor};\n+use rustc_middle::ty::{self, visit::ir::TypeVisitor, TyCtxt};\n use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::borrow::Cow;\n use std::ops::ControlFlow;\n@@ -136,7 +136,7 @@ impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b,\n \n struct ContainsRegion;\n \n-impl TypeVisitor<'_> for ContainsRegion {\n+impl TypeVisitor<TyCtxt<'_>> for ContainsRegion {\n     type BreakTy = ();\n \n     fn visit_region(&mut self, _: ty::Region<'_>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "c785d89e28012f880709f266a8e577759aad6945", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dea342d8615fcd0dd6638a3f0f1cda9062286d8e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "patch": "@@ -838,7 +838,7 @@ pub fn for_each_top_level_late_bound_region<B>(\n         index: u32,\n         f: F,\n     }\n-    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<'tcx> for V<F> {\n+    impl<'tcx, B, F: FnMut(BoundRegion) -> ControlFlow<B>> TypeVisitor<TyCtxt<'tcx>> for V<F> {\n         type BreakTy = B;\n         fn visit_region(&mut self, r: Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let RegionKind::ReLateBound(idx, bound) = r.kind() && idx.as_u32() == self.index {"}]}