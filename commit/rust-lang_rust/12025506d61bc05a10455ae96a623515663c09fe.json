{"sha": "12025506d61bc05a10455ae96a623515663c09fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMDI1NTA2ZDYxYmMwNWExMDQ1NWFlOTZhNjIzNTE1NjYzYzA5ZmU=", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-02-14T15:21:12Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-02-14T15:21:12Z"}, "message": "Do not lint when the closure is called using an iterator", "tree": {"sha": "d41856d4eff2b0045fcc4d05b88069cf76e7e998", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41856d4eff2b0045fcc4d05b88069cf76e7e998"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12025506d61bc05a10455ae96a623515663c09fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12025506d61bc05a10455ae96a623515663c09fe", "html_url": "https://github.com/rust-lang/rust/commit/12025506d61bc05a10455ae96a623515663c09fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12025506d61bc05a10455ae96a623515663c09fe/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f611ceef7d11c906cf063ac6acc2189d769eab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f611ceef7d11c906cf063ac6acc2189d769eab5", "html_url": "https://github.com/rust-lang/rust/commit/5f611ceef7d11c906cf063ac6acc2189d769eab5"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "b53f80fd8bc15801ea0238153a71444e4a657eab", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12025506d61bc05a10455ae96a623515663c09fe/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12025506d61bc05a10455ae96a623515663c09fe/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=12025506d61bc05a10455ae96a623515663c09fe", "patch": "@@ -1,4 +1,8 @@\n-use crate::utils::{differing_macro_contexts, snippet_block_with_applicability, span_lint, span_lint_and_sugg};\n+use crate::utils::{\n+    differing_macro_contexts, get_parent_expr, get_trait_def_id, implements_trait, paths,\n+    snippet_block_with_applicability, span_lint, span_lint_and_sugg,\n+};\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BlockCheckMode, Expr, ExprKind};\n@@ -52,6 +56,18 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if let ExprKind::Closure(_, _, eid, _, _) = expr.kind {\n+            // do not lint if the closure is called using an iterator (see #1141)\n+            if_chain! {\n+                if let Some(parent) = get_parent_expr(self.cx, expr);\n+                if let ExprKind::MethodCall(_, _, args, _) = parent.kind;\n+                let caller = self.cx.typeck_results().expr_ty(&args[0]);\n+                if let Some(iter_id) = get_trait_def_id(self.cx, &paths::ITERATOR);\n+                if implements_trait(self.cx, caller, iter_id, &[]);\n+                then {\n+                    return;\n+                }\n+            }\n+\n             let body = self.cx.tcx.hir().body(eid);\n             let ex = &body.value;\n             if matches!(ex.kind, ExprKind::Block(_, _)) && !body.value.span.from_expansion() {"}, {"sha": "2856943b9be8001a31c172480e16d35e6580abd9", "filename": "tests/ui/blocks_in_if_conditions_closure.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12025506d61bc05a10455ae96a623515663c09fe/tests%2Fui%2Fblocks_in_if_conditions_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12025506d61bc05a10455ae96a623515663c09fe/tests%2Fui%2Fblocks_in_if_conditions_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblocks_in_if_conditions_closure.rs?ref=12025506d61bc05a10455ae96a623515663c09fe", "patch": "@@ -44,4 +44,13 @@ fn macro_in_closure() {\n     }\n }\n \n-fn main() {}\n+#[rustfmt::skip]\n+fn main() {\n+    let mut range = 0..10;\n+    range.all(|i| {i < 10} );\n+\n+    let v = vec![1, 2, 3];\n+    if v.into_iter().any(|x| {x == 4}) {\n+        println!(\"contains 4!\");\n+    }\n+}"}]}