{"sha": "f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzY2NiZWYyYWYyNGQ1ZDgzZjgyZjFmYjUwYmQ5N2E5Yjc1ZTYwOWY=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-26T23:40:02Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-27T17:36:28Z"}, "message": "unit-arg - pr comments", "tree": {"sha": "de0cfab5c052f6ac30259464e7b2b9fe9cd41a08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0cfab5c052f6ac30259464e7b2b9fe9cd41a08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "html_url": "https://github.com/rust-lang/rust/commit/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ecc2ac864739cff6aed2609021e2467dedb117a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ecc2ac864739cff6aed2609021e2467dedb117a", "html_url": "https://github.com/rust-lang/rust/commit/2ecc2ac864739cff6aed2609021e2467dedb117a"}], "stats": {"total": 141, "additions": 88, "deletions": 53}, "files": [{"sha": "16e48d919164f9e7d4a5668875e4bd4b8b2c2e3d", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "patch": "@@ -29,10 +29,10 @@ use rustc_typeck::hir_ty_to_ty;\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, is_type_diagnostic_item,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n     last_path_segment, match_def_path, match_path, method_chain_args, multispan_sugg, numeric_literal::NumericLiteral,\n     qpath_res, sext, snippet, snippet_opt, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n-    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n+    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, trim_multiline, unsext,\n };\n \n declare_clippy_lint! {\n@@ -802,6 +802,7 @@ impl<'tcx> LateLintPass<'tcx> for UnitArg {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     let (singular, plural) = if args_to_recover.len() > 1 {\n@@ -856,18 +857,38 @@ fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Exp\n                 .filter(|arg| !is_empty_block(arg))\n                 .filter_map(|arg| snippet_opt(cx, arg.span))\n                 .collect();\n+            let indent = indent_of(cx, expr.span).unwrap_or(0);\n \n-            if let Some(mut sugg) = snippet_opt(cx, expr.span) {\n-                arg_snippets.iter().for_each(|arg| {\n-                    sugg = sugg.replacen(arg, \"()\", 1);\n-                });\n-                sugg = format!(\"{}{}{}\", arg_snippets_without_empty_blocks.join(\"; \"), \"; \", sugg);\n+            if let Some(expr_str) = snippet_opt(cx, expr.span) {\n+                let expr_with_replacements = arg_snippets\n+                    .iter()\n+                    .fold(expr_str, |acc, arg| acc.replacen(arg, \"()\", 1));\n+\n+                // expr is not in a block statement or result expression position, wrap in a block\n                 let parent_node = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(expr.hir_id));\n-                if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n-                    // expr is not in a block statement or result expression position, wrap in a block\n-                    sugg = format!(\"{{ {} }}\", sugg);\n+                let wrap_in_block =\n+                    !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_)));\n+\n+                let stmts_indent = if wrap_in_block { indent + 4 } else { indent };\n+                let mut stmts_and_call = arg_snippets_without_empty_blocks.clone();\n+                stmts_and_call.push(expr_with_replacements);\n+                let mut stmts_and_call_str = stmts_and_call\n+                    .into_iter()\n+                    .enumerate()\n+                    .map(|(i, v)| {\n+                        let with_indent_prefix = if i > 0 { \" \".repeat(stmts_indent) + &v } else { v };\n+                        trim_multiline(with_indent_prefix.into(), true, Some(stmts_indent)).into_owned()\n+                    })\n+                    .collect::<Vec<String>>()\n+                    .join(\";\\n\");\n+\n+                if wrap_in_block {\n+                    stmts_and_call_str = \" \".repeat(stmts_indent) + &stmts_and_call_str;\n+                    stmts_and_call_str = format!(\"{{\\n{}\\n{}}}\", &stmts_and_call_str, \" \".repeat(indent));\n                 }\n \n+                let sugg = stmts_and_call_str;\n+\n                 if arg_snippets_without_empty_blocks.is_empty() {\n                     db.multipart_suggestion(\n                         &format!(\"use {}unit literal{} instead\", singular, plural),"}, {"sha": "d20b33c4a1d10c21a18bc872e30bbdbd7831a925", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "patch": "@@ -662,7 +662,7 @@ pub fn expr_block<'a, T: LintContext>(\n \n /// Trim indentation from a multiline string with possibility of ignoring the\n /// first line.\n-fn trim_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n+pub fn trim_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n     let s_space = trim_multiline_inner(s, ignore_first, indent, ' ');\n     let s_tab = trim_multiline_inner(s_space, ignore_first, indent, '\\t');\n     trim_multiline_inner(s_tab, ignore_first, indent, ' ')"}, {"sha": "fec115ff29d6699cd82adafbf5d34dbcc1e25d3a", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::unit_arg)]\n-#![allow(clippy::no_effect, unused_must_use, unused_variables, clippy::unused_unit)]\n+#![allow(\n+    clippy::no_effect,\n+    unused_must_use,\n+    unused_variables,\n+    clippy::unused_unit,\n+    clippy::or_fun_call\n+)]\n \n use std::fmt::Debug;\n "}, {"sha": "90fee3aab23b0c96cd3b8cff521f208ad8cff55d", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:23:5\n+  --> $DIR/unit_arg.rs:29:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -15,22 +15,24 @@ help: or move the expression in front of the call and replace it with the unit l\n    |\n LL |     {\n LL |         1;\n-LL |     }; foo(());\n+LL |     };\n+LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:26:5\n+  --> $DIR/unit_arg.rs:32:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n    |\n help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-LL |     foo(1); foo(());\n-   |     ^^^^^^^^^^^^^^^\n+LL |     foo(1);\n+LL |     foo(());\n+   |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:27:5\n+  --> $DIR/unit_arg.rs:33:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -47,11 +49,12 @@ help: or move the expression in front of the call and replace it with the unit l\n LL |     {\n LL |         foo(1);\n LL |         foo(2);\n-LL |     }; foo(());\n+LL |     };\n+LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:32:5\n+  --> $DIR/unit_arg.rs:38:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -66,22 +69,25 @@ help: or move the expression in front of the call and replace it with the unit l\n    |\n LL |     {\n LL |         1;\n-LL |     }; b.bar(());\n+LL |     };\n+LL |     b.bar(());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:35:5\n+  --> $DIR/unit_arg.rs:41:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: move the expressions in front of the call and replace them with the unit literal `()`\n    |\n-LL |     foo(0); foo(1); taking_multiple_units((), ());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     foo(0);\n+LL |     foo(1);\n+LL |     taking_multiple_units((), ());\n+   |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:36:5\n+  --> $DIR/unit_arg.rs:42:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -95,14 +101,16 @@ LL |         foo(2)\n    |\n help: or move the expressions in front of the call and replace them with the unit literal `()`\n    |\n-LL |     foo(0); {\n+LL |     foo(0);\n+LL |     {\n LL |         foo(1);\n LL |         foo(2);\n-LL |     }; taking_multiple_units((), ());\n+LL |     };\n+LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:40:5\n+  --> $DIR/unit_arg.rs:46:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -124,53 +132,50 @@ LL |             foo(3)\n help: or move the expressions in front of the call and replace them with the unit literal `()`\n    |\n LL |     {\n-LL |             foo(0);\n-LL |             foo(1);\n-LL |         }; {\n-LL |             foo(2);\n-LL |             foo(3);\n+LL |         foo(0);\n+LL |         foo(1);\n+LL |     };\n+LL |     {\n+LL |         foo(2);\n  ...\n \n-error: use of `or` followed by a function call\n-  --> $DIR/unit_arg.rs:51:10\n-   |\n-LL |     None.or(Some(foo(2)));\n-   |          ^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(foo(2)))`\n-   |\n-   = note: `-D clippy::or-fun-call` implied by `-D warnings`\n-\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:51:13\n+  --> $DIR/unit_arg.rs:57:13\n    |\n LL |     None.or(Some(foo(2)));\n    |             ^^^^^^^^^^^^\n    |\n help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-LL |     None.or({ foo(2); Some(()) });\n-   |             ^^^^^^^^^^^^^^^^^^^^\n+LL |     None.or({\n+LL |         foo(2);\n+LL |         Some(())\n+LL |     });\n+   |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:54:5\n+  --> $DIR/unit_arg.rs:60:5\n    |\n LL |     foo(foo(()))\n    |     ^^^^^^^^^^^^\n    |\n help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-LL |     foo(()); foo(())\n+LL |     foo(());\n+LL |     foo(())\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:87:5\n+  --> $DIR/unit_arg.rs:93:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^\n    |\n help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-LL |     foo(1); Some(())\n+LL |     foo(1);\n+LL |     Some(())\n    |\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "456b12a2c6b1654a7b18b2325603f740593ce8aa", "filename": "tests/ui/unit_arg_empty_blocks.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/tests%2Fui%2Funit_arg_empty_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f/tests%2Fui%2Funit_arg_empty_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg_empty_blocks.stderr?ref=f3ccbef2af24d5d83f82f1fb50bd97a9b75e609f", "patch": "@@ -24,8 +24,9 @@ LL |     taking_two_units({}, foo(0));\n    |\n help: move the expression in front of the call and replace it with the unit literal `()`\n    |\n-LL |     foo(0); taking_two_units((), ());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     foo(0);\n+LL |     taking_two_units((), ());\n+   |\n \n error: passing unit values to a function\n   --> $DIR/unit_arg_empty_blocks.rs:18:5\n@@ -35,8 +36,10 @@ LL |     taking_three_units({}, foo(0), foo(1));\n    |\n help: move the expressions in front of the call and replace them with the unit literal `()`\n    |\n-LL |     foo(0); foo(1); taking_three_units((), (), ());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     foo(0);\n+LL |     foo(1);\n+LL |     taking_three_units((), (), ());\n+   |\n \n error: aborting due to 4 previous errors\n "}]}