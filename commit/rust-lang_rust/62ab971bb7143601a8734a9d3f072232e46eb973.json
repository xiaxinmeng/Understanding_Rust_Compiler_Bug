{"sha": "62ab971bb7143601a8734a9d3f072232e46eb973", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYWI5NzFiYjcxNDM2MDFhODczNGE5ZDNmMDcyMjMyZTQ2ZWI5NzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-09T21:56:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-09T21:56:08Z"}, "message": "Rollup merge of #59348 - matthewjasper:cleanup-drop-shims, r=arielb1\n\nClean up and add tests for slice drop shims\n\nAdds a test for the MIR generated by `real_drop_in_place::<[T]>`. Also slightly reduces the number of statements and locals used in the shim.\n\nr? @RalfJung", "tree": {"sha": "9cda5398d2dc4e50cf8b167bfcd0618e879e5a34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cda5398d2dc4e50cf8b167bfcd0618e879e5a34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ab971bb7143601a8734a9d3f072232e46eb973", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc1KH4CRBK7hj4Ov3rIwAAdHIIACz9AcCmHJycG3X8STldCRTq\n7CVO77dqRAX5c4v46GzBWhWLhO4PF1YYHyAl9Boy6fX+azkF0cY0RDZRKpHKtbL1\n72XIEIlcXjaJ/cLlDQP4JPrGv8CxiApRfGr/TLGGgW+OvNUgFeItvtUyX+uHxOv6\naFVSaeQluQSi3aPMa1X+oxjSkEvMCUaCAsKRV9uhky+92nE6V46dGCo6vBqp0Qq6\nNo7B9LVY2O0hUD0aNSq3kiEsDktvqfGG57Nam0f5t2XIHrXSCJJhYhuUkTWLimcv\nHhugmIV234AFb4oWca8s4nnxCqo3MCIwdR3B7Evl290ieeYsfwbDSNZFEIg7+Fw=\n=X9Nq\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cda5398d2dc4e50cf8b167bfcd0618e879e5a34\nparent a784a80228c9eac3aa0fd86fc90887d5fa20c82e\nparent 6fff547828c13d311bc3e3034f190747b9367816\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557438968 +0200\ncommitter GitHub <noreply@github.com> 1557438968 +0200\n\nRollup merge of #59348 - matthewjasper:cleanup-drop-shims, r=arielb1\n\nClean up and add tests for slice drop shims\n\nAdds a test for the MIR generated by `real_drop_in_place::<[T]>`. Also slightly reduces the number of statements and locals used in the shim.\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ab971bb7143601a8734a9d3f072232e46eb973", "html_url": "https://github.com/rust-lang/rust/commit/62ab971bb7143601a8734a9d3f072232e46eb973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ab971bb7143601a8734a9d3f072232e46eb973/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a784a80228c9eac3aa0fd86fc90887d5fa20c82e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a784a80228c9eac3aa0fd86fc90887d5fa20c82e", "html_url": "https://github.com/rust-lang/rust/commit/a784a80228c9eac3aa0fd86fc90887d5fa20c82e"}, {"sha": "6fff547828c13d311bc3e3034f190747b9367816", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fff547828c13d311bc3e3034f190747b9367816", "html_url": "https://github.com/rust-lang/rust/commit/6fff547828c13d311bc3e3034f190747b9367816"}], "stats": {"total": 210, "additions": 153, "deletions": 57}, "files": [{"sha": "98ca7c32675c8b09e1ea0e1083090df7b9c326f7", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 65, "deletions": 57, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/62ab971bb7143601a8734a9d3f072232e46eb973/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ab971bb7143601a8734a9d3f072232e46eb973/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=62ab971bb7143601a8734a9d3f072232e46eb973", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n use crate::util::patch::MirPatch;\n \n-use std::u32;\n+use std::convert::TryInto;\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum DropFlagState {\n@@ -545,10 +545,9 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         self.elaborator.patch().new_block(result)\n     }\n \n-    /// create a loop that drops an array:\n-    ///\n-\n+    /// Create a loop that drops an array:\n     ///\n+    /// ```text\n     /// loop-block:\n     ///    can_go = cur == length_or_end\n     ///    if can_go then succ else drop-block\n@@ -561,15 +560,16 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     ///        cur = cur + 1\n     ///    }\n     ///    drop(ptr)\n-    fn drop_loop(&mut self,\n-                 succ: BasicBlock,\n-                 cur: Local,\n-                 length_or_end: &Place<'tcx>,\n-                 ety: Ty<'tcx>,\n-                 unwind: Unwind,\n-                 ptr_based: bool)\n-                 -> BasicBlock\n-    {\n+    /// ```\n+    fn drop_loop(\n+        &mut self,\n+        succ: BasicBlock,\n+        cur: Local,\n+        length_or_end: &Place<'tcx>,\n+        ety: Ty<'tcx>,\n+        unwind: Unwind,\n+        ptr_based: bool,\n+    ) -> BasicBlock {\n         let copy = |place: &Place<'tcx>| Operand::Copy(place.clone());\n         let move_ = |place: &Place<'tcx>| Operand::Move(place.clone());\n         let tcx = self.tcx();\n@@ -591,13 +591,13 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                     elem: ProjectionElem::Deref,\n                 }))\n              ),\n-             Rvalue::BinaryOp(BinOp::Offset, copy(&Place::Base(PlaceBase::Local(cur))), one))\n+             Rvalue::BinaryOp(BinOp::Offset, move_(&Place::Base(PlaceBase::Local(cur))), one))\n         } else {\n             (Rvalue::Ref(\n                  tcx.lifetimes.re_erased,\n                  BorrowKind::Mut { allow_two_phase_borrow: false },\n                  self.place.clone().index(cur)),\n-             Rvalue::BinaryOp(BinOp::Add, copy(&Place::Base(PlaceBase::Local(cur))), one))\n+             Rvalue::BinaryOp(BinOp::Add, move_(&Place::Base(PlaceBase::Local(cur))), one))\n         };\n \n         let drop_block = BasicBlockData {\n@@ -647,9 +647,9 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         // }\n \n         if let Some(size) = opt_size {\n-            assert!(size <= (u32::MAX as u64),\n-                    \"move out check doesn't implemented for array bigger then u32\");\n-            let size = size as u32;\n+            let size: u32 = size.try_into().unwrap_or_else(|_| {\n+                bug!(\"move out check isn't implemented for array sizes bigger than u32::MAX\");\n+            });\n             let fields: Vec<(Place<'tcx>, Option<D::Path>)> = (0..size).map(|i| {\n                 (self.place.clone().elem(ProjectionElem::ConstantIndex{\n                     offset: i,\n@@ -667,33 +667,42 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n \n         let move_ = |place: &Place<'tcx>| Operand::Move(place.clone());\n         let tcx = self.tcx();\n-        let size = &Place::Base(PlaceBase::Local(self.new_temp(tcx.types.usize)));\n-        let size_is_zero = &Place::Base(PlaceBase::Local(self.new_temp(tcx.types.bool)));\n+        let elem_size = &Place::Base(PlaceBase::Local(self.new_temp(tcx.types.usize)));\n+        let len = &Place::Base(PlaceBase::Local(self.new_temp(tcx.types.usize)));\n+\n+        static USIZE_SWITCH_ZERO: &[u128] = &[0];\n+\n         let base_block = BasicBlockData {\n             statements: vec![\n-                self.assign(size, Rvalue::NullaryOp(NullOp::SizeOf, ety)),\n-                self.assign(size_is_zero, Rvalue::BinaryOp(BinOp::Eq,\n-                                                           move_(size),\n-                                                           self.constant_usize(0)))\n+                self.assign(elem_size, Rvalue::NullaryOp(NullOp::SizeOf, ety)),\n+                self.assign(len, Rvalue::Len(self.place.clone())),\n             ],\n             is_cleanup: self.unwind.is_cleanup(),\n             terminator: Some(Terminator {\n                 source_info: self.source_info,\n-                kind: TerminatorKind::if_(\n-                    tcx,\n-                    move_(size_is_zero),\n-                    self.drop_loop_pair(ety, false),\n-                    self.drop_loop_pair(ety, true)\n-                )\n+                kind: TerminatorKind::SwitchInt {\n+                    discr: move_(elem_size),\n+                    switch_ty: tcx.types.usize,\n+                    values: From::from(USIZE_SWITCH_ZERO),\n+                    targets: vec![\n+                        self.drop_loop_pair(ety, false, len.clone()),\n+                        self.drop_loop_pair(ety, true, len.clone()),\n+                    ],\n+                },\n             })\n         };\n         self.elaborator.patch().new_block(base_block)\n     }\n \n-    // create a pair of drop-loops of `place`, which drops its contents\n-    // even in the case of 1 panic. If `ptr_based`, create a pointer loop,\n-    // otherwise create an index loop.\n-    fn drop_loop_pair(&mut self, ety: Ty<'tcx>, ptr_based: bool) -> BasicBlock {\n+    /// Ceates a pair of drop-loops of `place`, which drops its contents, even\n+    /// in the case of 1 panic. If `ptr_based`, creates a pointer loop,\n+    /// otherwise create an index loop.\n+    fn drop_loop_pair(\n+        &mut self,\n+        ety: Ty<'tcx>,\n+        ptr_based: bool,\n+        length: Place<'tcx>,\n+    ) -> BasicBlock {\n         debug!(\"drop_loop_pair({:?}, {:?})\", ety, ptr_based);\n         let tcx = self.tcx();\n         let iter_ty = if ptr_based {\n@@ -703,7 +712,6 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         };\n \n         let cur = self.new_temp(iter_ty);\n-        let length = Place::Base(PlaceBase::Local(self.new_temp(tcx.types.usize)));\n         let length_or_end = if ptr_based {\n             // FIXME check if we want to make it return a `Place` directly\n             // if all use sites want a `Place::Base` anyway.\n@@ -722,41 +730,41 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                            ptr_based)\n         });\n \n-        let succ = self.succ; // FIXME(#43234)\n         let loop_block = self.drop_loop(\n-            succ,\n+            self.succ,\n             cur,\n             &length_or_end,\n             ety,\n             unwind,\n             ptr_based);\n \n         let cur = Place::Base(PlaceBase::Local(cur));\n-        let zero = self.constant_usize(0);\n-        let mut drop_block_stmts = vec![];\n-        drop_block_stmts.push(self.assign(&length, Rvalue::Len(self.place.clone())));\n-        if ptr_based {\n+        let drop_block_stmts = if ptr_based {\n             let tmp_ty = tcx.mk_mut_ptr(self.place_ty(self.place));\n             let tmp = Place::Base(PlaceBase::Local(self.new_temp(tmp_ty)));\n             // tmp = &mut P;\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n-            drop_block_stmts.push(self.assign(&tmp, Rvalue::Ref(\n-                tcx.lifetimes.re_erased,\n-                BorrowKind::Mut { allow_two_phase_borrow: false },\n-                self.place.clone()\n-            )));\n-            drop_block_stmts.push(self.assign(&cur, Rvalue::Cast(\n-                CastKind::Misc, Operand::Move(tmp), iter_ty\n-            )));\n-            drop_block_stmts.push(self.assign(&length_or_end,\n-                Rvalue::BinaryOp(BinOp::Offset,\n-                     Operand::Copy(cur), Operand::Move(length)\n-            )));\n+            vec![\n+                self.assign(&tmp, Rvalue::Ref(\n+                    tcx.lifetimes.re_erased,\n+                    BorrowKind::Mut { allow_two_phase_borrow: false },\n+                    self.place.clone()\n+                )),\n+                self.assign(\n+                    &cur,\n+                    Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty),\n+                ),\n+                self.assign(\n+                    &length_or_end,\n+                    Rvalue::BinaryOp(BinOp::Offset, Operand::Copy(cur), Operand::Move(length)\n+                )),\n+            ]\n         } else {\n-            // index = 0 (length already pushed)\n-            drop_block_stmts.push(self.assign(&cur, Rvalue::Use(zero)));\n-        }\n+            // cur = 0 (length already pushed)\n+            let zero = self.constant_usize(0);\n+            vec![self.assign(&cur, Rvalue::Use(zero))]\n+        };\n         let drop_block = self.elaborator.patch().new_block(BasicBlockData {\n             statements: drop_block_stmts,\n             is_cleanup: unwind.is_cleanup(),\n@@ -768,7 +776,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n \n         // FIXME(#34708): handle partially-dropped array/slice elements.\n         let reset_block = self.drop_flag_reset_block(DropFlagMode::Deep, drop_block, unwind);\n-        self.drop_flag_test_block(reset_block, succ, unwind)\n+        self.drop_flag_test_block(reset_block, self.succ, unwind)\n     }\n \n     /// The slow-path - create an \"open\", elaborated drop for a type"}, {"sha": "754fad51b21e78faf35ffbdb57e6326efad9e46f", "filename": "src/test/mir-opt/slice-drop-shim.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/62ab971bb7143601a8734a9d3f072232e46eb973/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ab971bb7143601a8734a9d3f072232e46eb973/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice-drop-shim.rs?ref=62ab971bb7143601a8734a9d3f072232e46eb973", "patch": "@@ -0,0 +1,88 @@\n+fn main() {\n+    std::ptr::drop_in_place::<[String]> as unsafe fn(_);\n+}\n+\n+// END RUST SOURCE\n+\n+// START rustc.ptr-real_drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir\n+// let mut _2: usize;\n+// let mut _3: usize;\n+// let mut _4: usize;\n+// let mut _5: &mut std::string::String;\n+// let mut _6: bool;\n+// let mut _7: &mut std::string::String;\n+// let mut _8: bool;\n+// let mut _9: *mut std::string::String;\n+// let mut _10: *mut std::string::String;\n+// let mut _11: &mut std::string::String;\n+// let mut _12: bool;\n+// let mut _13: &mut std::string::String;\n+// let mut _14: bool;\n+// let mut _15: *mut [std::string::String];\n+// bb0: {\n+//     goto -> bb15;\n+// }\n+// bb1: {\n+//     return;\n+// }\n+// bb2 (cleanup): {\n+//     resume;\n+// }\n+// bb3 (cleanup): {\n+//     _5 = &mut (*_1)[_4];\n+//     _4 = Add(move _4, const 1usize);\n+//     drop((*_5)) -> bb4;\n+// }\n+// bb4 (cleanup): {\n+//     _6 = Eq(_4, _3);\n+//     switchInt(move _6) -> [false: bb3, otherwise: bb2];\n+// }\n+// bb5: {\n+//     _7 = &mut (*_1)[_4];\n+//     _4 = Add(move _4, const 1usize);\n+//     drop((*_7)) -> [return: bb6, unwind: bb4];\n+// }\n+// bb6: {\n+//     _8 = Eq(_4, _3);\n+//     switchInt(move _8) -> [false: bb5, otherwise: bb1];\n+// }\n+// bb7: {\n+//     _4 = const 0usize;\n+//     goto -> bb6;\n+// }\n+// bb8: {\n+//     goto -> bb7;\n+// }\n+// bb9 (cleanup): {\n+//     _11 = &mut (*_9);\n+//     _9 = Offset(move _9, const 1usize);\n+//     drop((*_11)) -> bb10;\n+// }\n+// bb10 (cleanup): {\n+//     _12 = Eq(_9, _10);\n+//     switchInt(move _12) -> [false: bb9, otherwise: bb2];\n+// }\n+// bb11: {\n+//     _13 = &mut (*_9);\n+//     _9 = Offset(move _9, const 1usize);\n+//     drop((*_13)) -> [return: bb12, unwind: bb10];\n+// }\n+// bb12: {\n+//     _14 = Eq(_9, _10);\n+//     switchInt(move _14) -> [false: bb11, otherwise: bb1];\n+// }\n+// bb13: {\n+//     _15 = &mut (*_1);\n+//     _9 = move _15 as *mut std::string::String (Misc);\n+//     _10 = Offset(_9, move _3);\n+//     goto -> bb12;\n+// }\n+// bb14: {\n+//     goto -> bb13;\n+// }\n+// bb15: {\n+//     _2 = SizeOf(std::string::String);\n+//     _3 = Len((*_1));\n+//     switchInt(move _2) -> [0usize: bb8, otherwise: bb14];\n+// }\n+// END rustc.ptr-real_drop_in_place.[std__string__String].AddMovesForPackedDrops.before.mir"}]}