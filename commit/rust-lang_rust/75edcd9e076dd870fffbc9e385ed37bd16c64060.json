{"sha": "75edcd9e076dd870fffbc9e385ed37bd16c64060", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZWRjZDllMDc2ZGQ4NzBmZmZiYzllMzg1ZWQzN2JkMTZjNjQwNjA=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-26T06:01:52Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-07-26T06:01:52Z"}, "message": "2229: Don't capture preicese paths on top of a union\n\n- Accessing fields of a union require unsafe block\n- As part of 2229 we don't allow precision where we need an unsafe block\nto capture.\n\nFixes: #87378\n\nr? @nikomatsakis", "tree": {"sha": "0c8082e46816a9138a4b8aa9a627f17036dbf506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c8082e46816a9138a4b8aa9a627f17036dbf506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75edcd9e076dd870fffbc9e385ed37bd16c64060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75edcd9e076dd870fffbc9e385ed37bd16c64060", "html_url": "https://github.com/rust-lang/rust/commit/75edcd9e076dd870fffbc9e385ed37bd16c64060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75edcd9e076dd870fffbc9e385ed37bd16c64060/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5782f01a5136b1f7539b23f67e832f0b994c215d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5782f01a5136b1f7539b23f67e832f0b994c215d", "html_url": "https://github.com/rust-lang/rust/commit/5782f01a5136b1f7539b23f67e832f0b994c215d"}], "stats": {"total": 136, "additions": 124, "deletions": 12}, "files": [{"sha": "013cb2a49b29c145d07145fcb9a0e4aa1d999e5c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/75edcd9e076dd870fffbc9e385ed37bd16c64060/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75edcd9e076dd870fffbc9e385ed37bd16c64060/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=75edcd9e076dd870fffbc9e385ed37bd16c64060", "patch": "@@ -1760,12 +1760,11 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n         self.borrow(assignee_place, diag_expr_id, ty::BorrowKind::MutBorrow);\n     }\n }\n-\n-/// Truncate projections so that following rules are obeyed by the captured `place`:\n+/// Truncate `place` so that an `unsafe` block isn't required to capture it.\n /// - No projections are applied to raw pointers, since these require unsafe blocks. We capture\n ///   them completely.\n-/// - No Index projections are captured, since arrays are captured completely.\n-fn restrict_capture_precision<'tcx>(mut place: Place<'tcx>) -> Place<'tcx> {\n+/// - No projections are applied on top of Union ADTs, since these require unsafe blocks.\n+fn restrict_precision_for_unsafe(mut place: Place<'tcx>) -> Place<'tcx> {\n     if place.projections.is_empty() {\n         // Nothing to do here\n         return place;\n@@ -1776,18 +1775,45 @@ fn restrict_capture_precision<'tcx>(mut place: Place<'tcx>) -> Place<'tcx> {\n         return place;\n     }\n \n-    let mut truncated_length = usize::MAX;\n+    if place.base_ty.is_union() {\n+        place.projections.truncate(0);\n+        return place;\n+    }\n \n     for (i, proj) in place.projections.iter().enumerate() {\n         if proj.ty.is_unsafe_ptr() {\n-            // Don't apply any projections on top of an unsafe ptr\n-            truncated_length = truncated_length.min(i + 1);\n+            // Don't apply any projections on top of an unsafe ptr.\n+            place.projections.truncate(i + 1);\n             break;\n         }\n+\n+        if proj.ty.is_union() {\n+            // Don't capture preicse fields of a union.\n+            place.projections.truncate(i + 1);\n+            break;\n+        }\n+    }\n+\n+    place\n+}\n+\n+/// Truncate projections so that following rules are obeyed by the captured `place`:\n+/// - No Index projections are captured, since arrays are captured completely.\n+/// - No unsafe block is required to capture `place`\n+/// Truncate projections so that following rules are obeyed by the captured `place`:\n+fn restrict_capture_precision<'tcx>(mut place: Place<'tcx>) -> Place<'tcx> {\n+    place = restrict_precision_for_unsafe(place);\n+\n+    if place.projections.is_empty() {\n+        // Nothing to do here\n+        return place;\n+    }\n+\n+    for (i, proj) in place.projections.iter().enumerate() {\n         match proj.kind {\n             ProjectionKind::Index => {\n                 // Arrays are completely captured, so we drop Index projections\n-                truncated_length = truncated_length.min(i);\n+                place.projections.truncate(i);\n                 break;\n             }\n             ProjectionKind::Deref => {}\n@@ -1796,10 +1822,6 @@ fn restrict_capture_precision<'tcx>(mut place: Place<'tcx>) -> Place<'tcx> {\n         }\n     }\n \n-    let length = place.projections.len().min(truncated_length);\n-\n-    place.projections.truncate(length);\n-\n     place\n }\n "}, {"sha": "75901a5718bae2074c5e152312c66efe4ecff673", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87378.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/75edcd9e076dd870fffbc9e385ed37bd16c64060/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87378.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75edcd9e076dd870fffbc9e385ed37bd16c64060/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87378.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87378.rs?ref=75edcd9e076dd870fffbc9e385ed37bd16c64060", "patch": "@@ -0,0 +1,26 @@\n+#![feature(rustc_attrs)]\n+\n+// edition:2021\n+\n+// Test that any precise capture on a union is truncated because it's unsafe to do so.\n+\n+union Union {\n+    value: u64,\n+}\n+\n+fn main() {\n+    let u = Union { value: 42 };\n+\n+    let c = #[rustc_capture_analysis]\n+    //~^ ERROR: attributes on expressions are experimental\n+    //~| NOTE: see issue #15701 <https://github.com/rust-lang/rust/issues/15701>\n+    || {\n+    //~^ ERROR: First Pass analysis includes:\n+    //~| ERROR: Min Capture analysis includes:\n+       unsafe { u.value }\n+        //~^ NOTE: Capturing u[(0, 0)] -> ImmBorrow\n+        //~| NOTE: Min Capture u[] -> ImmBorrow\n+    };\n+\n+    c();\n+}"}, {"sha": "16c3f7c976dd74e1662fa5198ebc60702e3879ed", "filename": "src/test/ui/closures/2229_closure_analysis/issue-87378.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/75edcd9e076dd870fffbc9e385ed37bd16c64060/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87378.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75edcd9e076dd870fffbc9e385ed37bd16c64060/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87378.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-87378.stderr?ref=75edcd9e076dd870fffbc9e385ed37bd16c64060", "patch": "@@ -0,0 +1,48 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/issue-87378.rs:14:13\n+   |\n+LL |     let c = #[rustc_capture_analysis]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: First Pass analysis includes:\n+  --> $DIR/issue-87378.rs:17:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |        unsafe { u.value }\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Capturing u[(0, 0)] -> ImmBorrow\n+  --> $DIR/issue-87378.rs:20:17\n+   |\n+LL |        unsafe { u.value }\n+   |                 ^^^^^^^\n+\n+error: Min Capture analysis includes:\n+  --> $DIR/issue-87378.rs:17:5\n+   |\n+LL | /     || {\n+LL | |\n+LL | |\n+LL | |        unsafe { u.value }\n+LL | |\n+LL | |\n+LL | |     };\n+   | |_____^\n+   |\n+note: Min Capture u[] -> ImmBorrow\n+  --> $DIR/issue-87378.rs:20:17\n+   |\n+LL |        unsafe { u.value }\n+   |                 ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c64475fda43de8fd82731f652ba528b2923133e2", "filename": "src/test/ui/closures/2229_closure_analysis/run_pass/issue-87378.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75edcd9e076dd870fffbc9e385ed37bd16c64060/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-87378.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75edcd9e076dd870fffbc9e385ed37bd16c64060/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-87378.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Frun_pass%2Fissue-87378.rs?ref=75edcd9e076dd870fffbc9e385ed37bd16c64060", "patch": "@@ -0,0 +1,16 @@\n+// edition:2021\n+// check-pass\n+\n+union Union {\n+    value: u64,\n+}\n+\n+fn main() {\n+    let u = Union { value: 42 };\n+\n+    let c = || {\n+       unsafe { u.value }\n+    };\n+\n+    c();\n+}"}]}