{"sha": "99b3c07b4e788d7120c2754f69613f760a6efd0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YjNjMDdiNGU3ODhkNzEyMGMyNzU0ZjY5NjEzZjc2MGE2ZWZkMGE=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2013-02-15T09:14:34Z"}, "committer": {"name": "Luqman Aden", "email": "laden@mozilla.com", "date": "2013-02-15T10:49:55Z"}, "message": "librustc: Get rid of `move`.", "tree": {"sha": "99a2f5d9373ec845ab149be45d5d9cb3b741d4cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99a2f5d9373ec845ab149be45d5d9cb3b741d4cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b3c07b4e788d7120c2754f69613f760a6efd0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b3c07b4e788d7120c2754f69613f760a6efd0a", "html_url": "https://github.com/rust-lang/rust/commit/99b3c07b4e788d7120c2754f69613f760a6efd0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b3c07b4e788d7120c2754f69613f760a6efd0a/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e61b243edffc01854e6e139ea3f5124ec58cf16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e61b243edffc01854e6e139ea3f5124ec58cf16c", "html_url": "https://github.com/rust-lang/rust/commit/e61b243edffc01854e6e139ea3f5124ec58cf16c"}], "stats": {"total": 170, "additions": 85, "deletions": 85}, "files": [{"sha": "894e846e11f684b002ae067ce5f9f93a61cf8930", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -156,7 +156,7 @@ pub mod jit {\n                     code: entry,\n                     env: ptr::null()\n                 };\n-                let func: fn(++argv: ~[~str]) = cast::transmute(move closure);\n+                let func: fn(++argv: ~[~str]) = cast::transmute(closure);\n \n                 func(~[/*bad*/copy sess.opts.binary]);\n             }\n@@ -559,11 +559,11 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n \n     let {name: opt_name, vers: opt_vers,\n          cmh_items: cmh_items} = provided_link_metas(sess, c);\n-    let name = crate_meta_name(sess, output, move opt_name);\n-    let vers = crate_meta_vers(sess, move opt_vers);\n+    let name = crate_meta_name(sess, output, opt_name);\n+    let vers = crate_meta_vers(sess, opt_vers);\n     let dep_hashes = cstore::get_dep_hashes(sess.cstore);\n     let extras_hash =\n-        crate_meta_extras_hash(symbol_hasher, move cmh_items,\n+        crate_meta_extras_hash(symbol_hasher, cmh_items,\n                                dep_hashes);\n \n     return {name: name, vers: vers, extras_hash: extras_hash};"}, {"sha": "08ba3515fd251bb665058071183b3abcf1417744", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -172,7 +172,7 @@ pub fn time<T>(do_it: bool, what: ~str, thunk: fn() -> T) -> T {\n     let end = std::time::precise_time_s();\n     io::stdout().write_str(fmt!(\"time: %3.3f s\\t%s\\n\",\n                                 end - start, what));\n-    move rv\n+    rv\n }\n \n pub enum compile_upto {\n@@ -257,7 +257,7 @@ pub fn compile_upto(sess: Session, cfg: ast::crate_cfg,\n     let (llmod, link_meta) = {\n \n         let ty_cx = ty::mk_ctxt(sess, def_map, ast_map, freevars,\n-                                region_map, rp_set, move lang_items, crate);\n+                                region_map, rp_set, lang_items, crate);\n \n         let (method_map, vtable_map) =\n             time(time_passes, ~\"typechecking\", ||"}, {"sha": "e18a7e7d1d85ab9905534852f3694ef535b47657", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -1481,7 +1481,7 @@ pub fn struct_element_types(struct_ty: TypeRef) -> ~[TypeRef] {\n             llvm::LLVMGetStructElementTypes(\n                 struct_ty, ptr::to_mut_unsafe_ptr(&mut buf[0]));\n         }\n-        return move buf;\n+        return buf;\n     }\n }\n "}, {"sha": "cc97c0060535a54c58bab6f53b6f0042206c48e2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -752,10 +752,10 @@ pub fn get_provided_trait_methods(intr: @ident_interner, cdata: cmd,\n             def_id: did\n         };\n \n-        vec::push(&mut result, move provided_trait_method_info);\n+        vec::push(&mut result, provided_trait_method_info);\n     }\n \n-    return move result;\n+    return result;\n }\n \n /// Returns the supertraits of the given trait.\n@@ -766,7 +766,7 @@ pub fn get_supertraits(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     for reader::tagged_docs(item_doc, tag_impl_trait) |trait_doc| {\n         results.push(doc_type(trait_doc, tcx, cdata));\n     }\n-    return dvec::unwrap(move results);\n+    return dvec::unwrap(results);\n }\n \n // If the item in question is a trait, returns its set of methods and\n@@ -847,7 +847,7 @@ pub fn get_static_methods_if_impl(intr: @ident_interner,\n         }\n     }\n \n-    return Some(dvec::unwrap(move static_impl_methods));\n+    return Some(dvec::unwrap(static_impl_methods));\n }\n \n pub fn get_item_attrs(cdata: cmd,"}, {"sha": "ad19eed6992f35f7e315c2d339ae967630b3e612", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -228,7 +228,7 @@ fn get_metadata_section(os: os,\n                            csz - vlen);\n                     do vec::raw::buf_as_slice(cvbuf1, csz-vlen) |bytes| {\n                         let inflated = flate::inflate_bytes(bytes);\n-                        found = move Some(@(move inflated));\n+                        found = Some(@(inflated));\n                     }\n                     if found != None {\n                         return found;"}, {"sha": "da58062f5537650cbfabee90f8647b4a966e94f3", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -1140,7 +1140,7 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n                 let ids = val_dsr.read_to_vec(|| {\n                     xcx.tr_id(val_dsr.read_int())\n                 });\n-                let dvec = @dvec::from_vec(move ids);\n+                let dvec = @dvec::from_vec(ids);\n                 dcx.maps.last_use_map.insert(id, dvec);\n             } else if tag == (c::tag_table_method_map as uint) {\n                 dcx.maps.method_map.insert("}, {"sha": "507f3059f32c8f14568d7f93ab050529d84016f9", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -632,7 +632,7 @@ fn check_loans_in_fn(fk: visit::fn_kind,\n                             _ => {} // Ignore this argument.\n                         }\n                     }\n-                    *self.fn_args = @move fn_args;\n+                    *self.fn_args = @fn_args;\n                 }\n             }\n "}, {"sha": "126a7f3033308879029c0ed6730bcf47d3d06b83", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -376,8 +376,8 @@ impl GatherLoanCtxt {\n           Some(_) => {\n               match loan::loan(self.bccx, cmt, scope_r, loan_kind) {\n                   Err(ref e) => { self.bccx.report((*e)); }\n-                  Ok(move loans) => {\n-                      self.add_loans(cmt, loan_kind, scope_r, move loans);\n+                  Ok(loans) => {\n+                      self.add_loans(cmt, loan_kind, scope_r, loans);\n                   }\n               }\n           }\n@@ -540,7 +540,7 @@ impl GatherLoanCtxt {\n             }\n         };\n \n-        self.add_loans_to_scope_id(scope_id, move loans);\n+        self.add_loans_to_scope_id(scope_id, loans);\n \n         if loan_kind.is_freeze() && !cmt.mutbl.is_immutable() {\n             self.bccx.stats.loaned_paths_imm += 1;\n@@ -566,7 +566,7 @@ impl GatherLoanCtxt {\n                 req_loans.push_all(loans);\n             }\n             None => {\n-                let dvec = @dvec::from_vec(move loans);\n+                let dvec = @dvec::from_vec(loans);\n                 let req_loan_map = self.req_maps.req_loan_map;\n                 req_loan_map.insert(scope_id, dvec);\n             }"}, {"sha": "40f5a001632861516da7230d2a1ed6f4d7e7ffc3", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -420,15 +420,15 @@ pub fn save_and_restore<T:Copy,U>(save_and_restore_t: &mut T,\n     let old_save_and_restore_t = *save_and_restore_t;\n     let u = f();\n     *save_and_restore_t = old_save_and_restore_t;\n-    move u\n+    u\n }\n \n pub fn save_and_restore_managed<T:Copy,U>(save_and_restore_t: @mut T,\n                                           f: &fn() -> U) -> U {\n     let old_save_and_restore_t = *save_and_restore_t;\n     let u = f();\n     *save_and_restore_t = old_save_and_restore_t;\n-    move u\n+    u\n }\n \n impl LoanKind {"}, {"sha": "70464d0084a3535f6526155d86e8089877050a78", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -1520,7 +1520,7 @@ impl Liveness {\n         self.cont_ln.insert(loop_node_id, cont_ln);\n         let r = f();\n         self.loop_scope.pop();\n-        move r\n+        r\n     }\n }\n "}, {"sha": "44b0da626b68d1e54a6c02021910905c277b4c6c", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -797,7 +797,7 @@ pub fn Resolver(session: Session,\n         intr: session.intr()\n     };\n \n-    move self\n+    self\n }\n \n /// The main resolver class.\n@@ -3255,7 +3255,7 @@ pub impl Resolver {\n         self.add_exports_for_module(&mut exports2, module_);\n         match copy module_.def_id {\n             Some(def_id) => {\n-                self.export_map2.insert(def_id.node, move exports2);\n+                self.export_map2.insert(def_id.node, exports2);\n                 debug!(\"(computing exports) writing exports for %d (some)\",\n                        def_id.node);\n             }"}, {"sha": "75c3c35039d3af21a87105ebc47608a5cff6a9f8", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -559,7 +559,7 @@ pub fn enter_opt(bcx: block, m: &[@Match/&r], opt: &Opt, col: uint,\n                                 Some(fp) => reordered_patterns.push(fp.pat)\n                             }\n                     }\n-                    Some(dvec::unwrap(move reordered_patterns))\n+                    Some(dvec::unwrap(reordered_patterns))\n                 } else {\n                     None\n                 }\n@@ -815,7 +815,7 @@ pub fn get_options(ccx: @crate_ctxt, m: &[@Match], col: uint) -> ~[Opt] {\n             _ => {}\n         }\n     }\n-    return dvec::unwrap(move found);\n+    return dvec::unwrap(found);\n }\n \n pub fn extract_variant_args(bcx: block,\n@@ -1657,7 +1657,7 @@ pub fn trans_match_inner(scope_cx: block,\n         arm_cxs.push(bcx);\n     }\n \n-    bcx = controlflow::join_blocks(scope_cx, dvec::unwrap(move arm_cxs));\n+    bcx = controlflow::join_blocks(scope_cx, dvec::unwrap(arm_cxs));\n     return bcx;\n \n     fn mk_fail(bcx: block, sp: span, +msg: ~str,"}, {"sha": "f38e56278c52180ea4c8269396d7cad9fb543471", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -1174,7 +1174,7 @@ pub fn new_block(cx: fn_ctxt, parent: Option<block>, +kind: block_kind,\n         });\n         let bcx = mk_block(llbb,\n                            parent,\n-                           move kind,\n+                           kind,\n                            is_lpad,\n                            opt_node_info,\n                            cx);"}, {"sha": "9f717682dae09d6f9429db71f62a3c94eb5f0527", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -274,11 +274,11 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     if words > 4 {\n         all_mem(cls);\n         let cls = cls;\n-        return move cls;\n+        return cls;\n     }\n     classify(ty, cls, 0, 0);\n     fixup(ty, cls);\n-    return move cls;\n+    return cls;\n }\n \n fn llreg_ty(cls: &[x86_64_reg_class]) -> TypeRef {"}, {"sha": "6ecfbb5762c559b19fca0cfdd7b170575b02e179", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -593,7 +593,7 @@ pub fn block_(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n         terminated: false,\n         unreachable: false,\n         parent: parent,\n-        kind: move kind,\n+        kind: kind,\n         is_lpad: is_lpad,\n         node_info: node_info,\n         fcx: fcx\n@@ -607,7 +607,7 @@ pub enum block = @block_;\n pub fn mk_block(llbb: BasicBlockRef, parent: Option<block>, -kind: block_kind,\n             is_lpad: bool, node_info: Option<node_info>, fcx: fn_ctxt)\n     -> block {\n-    block(@block_(llbb, parent, move kind, is_lpad, node_info, fcx))\n+    block(@block_(llbb, parent, kind, is_lpad, node_info, fcx))\n }\n \n // First two args are retptr, env"}, {"sha": "e2e5526eac08b0599a540040ccd80c6bd4fda6c7", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -152,7 +152,7 @@ enum debug_metadata {\n fn cast_safely<T: Copy, U>(val: T) -> U {\n     unsafe {\n         let val2 = val;\n-        return cast::transmute(move val2);\n+        return cast::transmute(val2);\n     }\n }\n "}, {"sha": "a30e0df8452a1b40a398cedcff2065575f87cee1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -320,7 +320,7 @@ pub pure fn get(t: t) -> t_box {\n     unsafe {\n         let t2 = cast::reinterpret_cast::<t, t_box>(&t);\n         let t3 = t2;\n-        cast::forget(move t2);\n+        cast::forget(t2);\n         t3\n     }\n }\n@@ -830,7 +830,7 @@ pub fn mk_ctxt(s: session::Session,\n         inferred_modes: HashMap(),\n         adjustments: HashMap(),\n         normalized_cache: new_ty_hash(),\n-        lang_items: move lang_items,\n+        lang_items: lang_items,\n         legacy_boxed_traits: HashMap(),\n         provided_methods: HashMap(),\n         provided_method_sources: HashMap(),\n@@ -909,10 +909,10 @@ fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: Option<ast::def_id>) -> t {\n       }\n     }\n \n-    let t = @{sty: move st, id: cx.next_id, flags: flags, o_def_id: o_def_id};\n+    let t = @{sty: st, id: cx.next_id, flags: flags, o_def_id: o_def_id};\n \n     let key = intern_key {sty: to_unsafe_ptr(&t.sty), o_def_id: o_def_id};\n-    cx.interner.insert(move key, t);\n+    cx.interner.insert(key, t);\n \n     cx.next_id += 1u;\n     unsafe { cast::reinterpret_cast(&t) }\n@@ -1178,7 +1178,7 @@ pub fn fold_sig(sig: &FnSig, fldop: fn(t) -> t) -> FnSig {\n     };\n \n     FnSig {\n-        inputs: move args,\n+        inputs: args,\n         output: fldop(sig.output)\n     }\n }\n@@ -3110,7 +3110,7 @@ pub fn expr_kind(tcx: ctxt,\n                 ast::def_local(*) |\n                 ast::def_self(*) => LvalueExpr,\n \n-                move def => {\n+                def => {\n                     tcx.sess.span_bug(expr.span, fmt!(\n                         \"Uncategorized def for expr %?: %?\",\n                         expr.id, def));\n@@ -3617,7 +3617,7 @@ pub fn trait_supertraits(cx: ctxt,\n     }\n \n     // Unwrap and return the result.\n-    return @dvec::unwrap(move result);\n+    return @dvec::unwrap(result);\n }\n \n pub fn trait_methods(cx: ctxt, id: ast::def_id) -> @~[method] {"}, {"sha": "3524636fe2b776b17019bb4fc7edd17cc07d8a3c", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -139,7 +139,7 @@ pub fn lookup(\n     let mme = lcx.do_lookup(self_ty);\n     debug!(\"method lookup for %s yielded %?\",\n            expr_repr(fcx.tcx(), expr), mme);\n-    return move mme;\n+    return mme;\n }\n \n pub struct LookupContext {\n@@ -204,26 +204,26 @@ pub impl LookupContext {\n                 check::DontDerefArgs => {\n                     match self.search_for_autoderefd_method(self_ty,\n                                                             autoderefs) {\n-                        Some(move mme) => { return Some(mme); }\n+                        Some(mme) => { return Some(mme); }\n                         None => {}\n                     }\n \n                     match self.search_for_autoptrd_method(self_ty,\n                                                           autoderefs) {\n-                        Some(move mme) => { return Some(move mme); }\n+                        Some(mme) => { return Some(mme); }\n                         None => {}\n                     }\n                 }\n                 check::DoDerefArgs => {\n                     match self.search_for_autoptrd_method(self_ty,\n                                                           autoderefs) {\n-                        Some(move mme) => { return Some(move mme); }\n+                        Some(mme) => { return Some(mme); }\n                         None => {}\n                     }\n \n                     match self.search_for_autoderefd_method(self_ty,\n                                                             autoderefs) {\n-                        Some(move mme) => { return Some(mme); }\n+                        Some(mme) => { return Some(mme); }\n                         None => {}\n                     }\n                 }\n@@ -457,7 +457,7 @@ pub impl LookupContext {\n                     self.create_rcvr_ty_and_substs_for_method(\n                         method.self_ty,\n                         rcvr_ty,\n-                        move init_substs,\n+                        init_substs,\n                         TransformTypeNormally);\n \n                 let cand = Candidate {\n@@ -525,12 +525,12 @@ pub impl LookupContext {\n         let (rcvr_ty, rcvr_substs) =\n             self.create_rcvr_ty_and_substs_for_method(method.self_ty,\n                                                       self_ty,\n-                                                      move rcvr_substs,\n+                                                      rcvr_substs,\n                                                       TransformTypeForObject);\n \n         self.inherent_candidates.push(Candidate {\n             rcvr_ty: rcvr_ty,\n-            rcvr_substs: move rcvr_substs,\n+            rcvr_substs: rcvr_substs,\n             explicit_self: method.self_ty,\n             num_method_tps: method.tps.len(),\n             self_mode: get_mode_from_self_type(method.self_ty),\n@@ -585,7 +585,7 @@ pub impl LookupContext {\n                     self.create_rcvr_ty_and_substs_for_method(\n                         method_self_ty,\n                         self_ty,\n-                        move rcvr_substs,\n+                        rcvr_substs,\n                         TransformTypeNormally);\n                 let origin = if trait_did == did {\n                     method_self(trait_did, index)\n@@ -595,7 +595,7 @@ pub impl LookupContext {\n                 };\n                 self.inherent_candidates.push(Candidate {\n                     rcvr_ty: rcvr_ty,\n-                    rcvr_substs: move rcvr_substs,\n+                    rcvr_substs: rcvr_substs,\n                     explicit_self: method_self_ty,\n                     num_method_tps: method_num_tps,\n                     self_mode: get_mode_from_self_type(method_self_ty),\n@@ -648,12 +648,12 @@ pub impl LookupContext {\n             self.create_rcvr_ty_and_substs_for_method(\n                 method.self_type,\n                 impl_ty,\n-                move impl_substs,\n+                impl_substs,\n                 TransformTypeNormally);\n \n         candidates.push(Candidate {\n             rcvr_ty: impl_ty,\n-            rcvr_substs: move impl_substs,\n+            rcvr_substs: impl_substs,\n             explicit_self: method.self_type,\n             num_method_tps: method.n_tps,\n             self_mode: get_mode_from_self_type(method.self_type),\n@@ -693,7 +693,7 @@ pub impl LookupContext {\n \n             candidates.push(Candidate {\n                 rcvr_ty: impl_ty,\n-                rcvr_substs: move impl_substs,\n+                rcvr_substs: impl_substs,\n                 explicit_self: provided_method_info.method_info.self_type,\n                 num_method_tps: provided_method_info.method_info.n_tps,\n                 self_mode: get_mode_from_self_type(\n@@ -722,10 +722,10 @@ pub impl LookupContext {\n             match self_decl {\n                 sty_static | sty_value | sty_by_ref |\n                 sty_box(_) | sty_uniq(_) => {\n-                    move self_substs\n+                    self_substs\n                 }\n                 sty_region(_) if self_substs.self_r.is_some() => {\n-                    move self_substs\n+                    self_substs\n                 }\n                 sty_region(_) => {\n                     substs {\n@@ -761,7 +761,7 @@ pub impl LookupContext {\n             self.consider_reborrow(self_ty, autoderefs);\n         match self.search_for_method(self_ty) {\n             None => None,\n-            Some(move mme) => {\n+            Some(mme) => {\n                 debug!(\"(searching for autoderef'd method) writing \\\n                        adjustment (%u) to %d\",\n                        autoderefs,\n@@ -945,7 +945,7 @@ pub impl LookupContext {\n             let autoref_ty = mk_autoref_ty(*mutbl, region);\n             match self.search_for_method(autoref_ty) {\n                 None => {}\n-                Some(move mme) => {\n+                Some(mme) => {\n                     self.fcx.write_adjustment(\n                         self.self_expr.id,\n                         @ty::AutoAdjustment {\n@@ -977,8 +977,8 @@ pub impl LookupContext {\n         debug!(\"searching inherent candidates\");\n         match self.consider_candidates(self_ty, &self.inherent_candidates) {\n             None => {}\n-            Some(move mme) => {\n-                return Some(move mme);\n+            Some(mme) => {\n+                return Some(mme);\n             }\n         }\n \n@@ -987,8 +987,8 @@ pub impl LookupContext {\n             None => {\n                 return None;\n             }\n-            Some(move mme) => {\n-                return Some(move mme);\n+            Some(mme) => {\n+                return Some(mme);\n             }\n         }\n     }"}, {"sha": "706f6d82c879b80a55bd9c3b0004889bb11eed3b", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -870,7 +870,7 @@ pub impl FnCtxt {\n         self.region_lb = lb;\n         let v = f();\n         self.region_lb = old_region_lb;\n-        move v\n+        v\n     }\n \n     fn region_var_if_parameterized(@mut self,"}, {"sha": "7594b2690a4a3e5fc433fccd3cf459e08b46c8e4", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -553,7 +553,7 @@ pub impl CoherenceChecker {\n \n         UniversalQuantificationResult {\n             monotype: monotype,\n-            type_variables: move type_parameters,\n+            type_variables: type_parameters,\n             bounds: polytype.bounds\n         }\n     }"}, {"sha": "17ed0c0a93f5be109e2612757a10d72c5dbc913d", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -320,7 +320,7 @@ pub fn ensure_supertraits(ccx: @mut CrateCtxt,\n         instantiated.push(InstantiatedTraitRef { def_id: did, tpt: tpt });\n     }\n     tcx.supertraits.insert(local_def(id),\n-                               @dvec::unwrap(move instantiated));\n+                               @dvec::unwrap(instantiated));\n }\n \n /**"}, {"sha": "89719564adaa61d8343ea5088252afd66cba355c", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -121,9 +121,9 @@ pub struct CombineFields {\n pub fn expected_found<C:Combine,T>(\n         self: &C, +a: T, +b: T) -> ty::expected_found<T> {\n     if self.a_is_expected() {\n-        ty::expected_found {expected: move a, found: move b}\n+        ty::expected_found {expected: a, found: b}\n     } else {\n-        ty::expected_found {expected: move b, found: move a}\n+        ty::expected_found {expected: b, found: a}\n     }\n }\n "}, {"sha": "e51fd14f6651195a097beb75e0df139753bf57a3", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -186,7 +186,7 @@ pub impl Glb: Combine {\n                                               new_vars, a_isr, a_vars, b_vars,\n                                               r));\n         debug!(\"sig1 = %s\", sig1.inf_str(self.infcx));\n-        return Ok(move sig1);\n+        return Ok(sig1);\n \n         fn generalize_region(self: &Glb,\n                              snapshot: uint,"}, {"sha": "fd4b2fdf32bf39886e2170706b3d38f37717a475", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -144,7 +144,7 @@ pub impl Lub: Combine {\n                 &sig0,\n                 |r, _in_fn| generalize_region(&self, snapshot, new_vars,\n                                               a_isr, r));\n-        return Ok(move sig1);\n+        return Ok(sig1);\n \n         fn generalize_region(self: &Lub,\n                              snapshot: uint,"}, {"sha": "01174d1620adab490cb41e56a23a28d8b63287d7", "filename": "src/librustc/middle/typeck/infer/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmacros.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -13,8 +13,8 @@\n macro_rules! if_ok(\n     ($inp: expr) => (\n         match $inp {\n-            Ok(move v) => { move v }\n-            Err(move e) => { return Err(e); }\n+            Ok(v) => { v }\n+            Err(e) => { return Err(e); }\n         }\n     )\n );"}, {"sha": "4f7507d4c5a2b7de235fc6dfd067a5926c527048", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -599,7 +599,7 @@ impl @mut InferCtxt {\n             self.ty_var_bindings.bindings.truncate(0);\n             self.int_var_bindings.bindings.truncate(0);\n             self.region_vars.commit();\n-            move r\n+            r\n         }\n     }\n \n@@ -613,7 +613,7 @@ impl @mut InferCtxt {\n               Ok(_) => (),\n               Err(_) => self.rollback_to(&snapshot)\n             }\n-            move r\n+            r\n         }\n     }\n \n@@ -624,7 +624,7 @@ impl @mut InferCtxt {\n             let snapshot = self.start_snapshot();\n             let r = self.try(f);\n             self.rollback_to(&snapshot);\n-            move r\n+            r\n         }\n     }\n }"}, {"sha": "cc5e860715d6d791fdea806170e57d90c63d0b90", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -899,7 +899,7 @@ pub impl RegionVarBindings {\n                 // replace the NoValue entry with ErrorValue.\n                 let mut values = self.values.take();\n                 values[*rid] = ErrorValue;\n-                self.values.put_back(move values);\n+                self.values.put_back(values);\n                 re_static\n             }\n \n@@ -999,9 +999,9 @@ pub impl RegionVarBindings {\n                     None => {}\n                     Some((ref r1, ref r2)) => {\n                         result_set =\n-                            consider_adding_edge(move result_set, &r, r1, r2);\n+                            consider_adding_edge(result_set, &r, r1, r2);\n                         result_set =\n-                            consider_adding_edge(move result_set, &r, r2, r1);\n+                            consider_adding_edge(result_set, &r, r2, r1);\n                     }\n                 }\n \n@@ -1018,13 +1018,13 @@ pub impl RegionVarBindings {\n                                 r1: &Region,\n                                 r2: &Region) -> ~[Region]\n         {\n-            let mut result_set = move result_set;\n+            let mut result_set = result_set;\n             if *r == *r1 { // Clearly, this is potentially inefficient.\n                 if !result_set.contains(r2) {\n                     result_set.push(*r2);\n                 }\n             }\n-            return move result_set;\n+            return result_set;\n         }\n     }\n \n@@ -1254,8 +1254,8 @@ impl RegionVarBindings {\n         }\n \n         let mut graph = Graph {\n-            nodes: move nodes,\n-            edges: move edges\n+            nodes: nodes,\n+            edges: edges\n         };\n \n         for uint::range(0, num_edges) |edge_idx| {\n@@ -1273,7 +1273,7 @@ impl RegionVarBindings {\n             }\n         }\n \n-        return (move graph);\n+        return (graph);\n \n         fn insert_edge(+graph: &mut Graph,\n                        node_id: RegionVid,"}, {"sha": "27355da4b9aeea129eaaf6edbd22135bb17ed816", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -69,7 +69,7 @@ fn setup_env(test_name: &str, source_string: &str) -> Env {\n         cfg, parse_sess);\n \n     let tcx = ty::mk_ctxt(sess, dm, amap, freevars, region_map,\n-                          region_paramd_items, move lang_items, crate);\n+                          region_paramd_items, lang_items, crate);\n \n     let infcx = infer::new_infer_ctxt(tcx);\n \n@@ -192,7 +192,7 @@ impl Env {\n                           onceness: ast::Many,\n                           region: ty::re_static,\n                           bounds: @~[]},\n-            sig: FnSig {inputs: move inputs,\n+            sig: FnSig {inputs: inputs,\n                         output: output_ty}\n         })\n     }"}, {"sha": "52a8e5488d8df036cde76d137c104e6f876d20db", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -326,7 +326,7 @@ pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n     let (p, ch) = stream();\n     let ch = SharedChan(ch);\n     let ch_capture = ch.clone();\n-    match do task::try |move f| {\n+    match do task::try || {\n         let ch = ch_capture.clone();\n         let ch_capture = ch.clone();\n         // The 'diagnostics emitter'. Every error, warning, etc. should\n@@ -375,7 +375,7 @@ pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n \n pub fn main() {\n     let args = os::args();\n-    do monitor |move args, demitter| {\n+    do monitor |demitter| {\n         run_compiler(&args, demitter);\n     }\n }"}, {"sha": "7b980b9de0db61fbf3897e71708c2abdf8e14304", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b3c07b4e788d7120c2754f69613f760a6efd0a/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=99b3c07b4e788d7120c2754f69613f760a6efd0a", "patch": "@@ -27,7 +27,7 @@ pub fn indent<R>(op: fn() -> R) -> R {\n     debug!(\">>\");\n     let r = op();\n     debug!(\"<< (Result = %?)\", r);\n-    move r\n+    r\n }\n \n pub struct _indenter {"}]}