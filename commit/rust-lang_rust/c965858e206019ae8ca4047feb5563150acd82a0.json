{"sha": "c965858e206019ae8ca4047feb5563150acd82a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NjU4NThlMjA2MDE5YWU4Y2E0MDQ3ZmViNTU2MzE1MGFjZDgyYTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-19T17:13:31Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-20T03:58:55Z"}, "message": "Rollup merge of #58539 - aaronstillwell:master, r=Mark-Simulacrum\n\nAdd alias methods to PathBuf for underlying OsString (#58234)\n\nImplemented the following methods on PathBuf which forward to the underlying OsString.\n\n- capacity\n- with_capacity\n- clear\n- reserve\n- reserve_exact\n- shrink_to_fit\n- shrink_to\n\nThese methods have been documented with reference to the original docs for `OsString`. @Mark-Simulacrum please let me know if you feel this does not suffice.\n\nFurther, I've not yet included tests for these definitions - please advise on how comprehensive tests need to be for methods such as these that simply alias other (already tested) methods.\n\n(This PR addresses issue #58234)", "tree": {"sha": "e45a343e2f924057df7686389c4314c6efb7aa8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e45a343e2f924057df7686389c4314c6efb7aa8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c965858e206019ae8ca4047feb5563150acd82a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxs0H8ACgkQ/vbIBR0O\nATyRxxAApVeY4zg51Ba+LRMm6+cDbRFGjbuMiHiXsxfa5tnmFVxUZwsLcOkrAcgx\n47pZ/9IVwfDLPZDuD7UGPODU4Rq35aI9lLux92WRQwvobMp0WjVSTU6NTwsDdscA\noxyGr7Err0mE9LRu5CghIAYHBndJ7LmJE+z52MMqJkPhQCKT1GPLLpeF5Roo94/3\n3E0cSH+6kxifVC3cB151OmS/58s7Gf4FQM78hZPLmP4qVeckOe4NUfR0X/E/1nVE\nT+WeICXgFS2fkejnL3dbM51v28mCRbz2MPm2+S0Qn5MP9x2/1P+HfcePyxxu9tVC\nWhR9bG/AEoQRSIzBJxq8bX9qR6pnAHI0i9q0pz8tX5KniC4CmlhNAdFrcOLQp+UB\nTK9gwxn8TnEq52EF9ydpP7GWb+o5v6+6Lo6EzazKoYR1GbcgryJ9maLtZZ8RJMzl\nH7SZWqvyS0tgnC+Y9Z5gmQaMb+9invp6SdMiiHOgLskCrFMPqwodkq7yIiajnA2E\nSyCdnN+3amvM3koIKXL4EaZLS8oMqBb7Xm9nEIJQjKm0kO4IUT6NrVHmWbHQxLRU\nTeSwy3kUE6+yOIaz/5kEXUGiy2SDyW8jMAUS7kNFm3sAMspzPMt72+FdQvgqrO/s\nlaLK2Wdieqw8ORwZuMR7LnZGkq/MgRodlYkRb/iMYkM2Dzbv6HA=\n=CwWa\n-----END PGP SIGNATURE-----", "payload": "tree e45a343e2f924057df7686389c4314c6efb7aa8d\nparent a68a1c758d288a9aabec5e1f2fdb6ae1e4c8ae19\nparent c9fbcc1f39f2c37a6d0a40ca8c2462d934a9fc60\nauthor kennytm <kennytm@gmail.com> 1550596411 +0800\ncommitter kennytm <kennytm@gmail.com> 1550635135 +0800\n\nRollup merge of #58539 - aaronstillwell:master, r=Mark-Simulacrum\n\nAdd alias methods to PathBuf for underlying OsString (#58234)\n\nImplemented the following methods on PathBuf which forward to the underlying OsString.\n\n- capacity\n- with_capacity\n- clear\n- reserve\n- reserve_exact\n- shrink_to_fit\n- shrink_to\n\nThese methods have been documented with reference to the original docs for `OsString`. @Mark-Simulacrum please let me know if you feel this does not suffice.\n\nFurther, I've not yet included tests for these definitions - please advise on how comprehensive tests need to be for methods such as these that simply alias other (already tested) methods.\n\n(This PR addresses issue #58234)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c965858e206019ae8ca4047feb5563150acd82a0", "html_url": "https://github.com/rust-lang/rust/commit/c965858e206019ae8ca4047feb5563150acd82a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c965858e206019ae8ca4047feb5563150acd82a0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a68a1c758d288a9aabec5e1f2fdb6ae1e4c8ae19", "url": "https://api.github.com/repos/rust-lang/rust/commits/a68a1c758d288a9aabec5e1f2fdb6ae1e4c8ae19", "html_url": "https://github.com/rust-lang/rust/commit/a68a1c758d288a9aabec5e1f2fdb6ae1e4c8ae19"}, {"sha": "c9fbcc1f39f2c37a6d0a40ca8c2462d934a9fc60", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9fbcc1f39f2c37a6d0a40ca8c2462d934a9fc60", "html_url": "https://github.com/rust-lang/rust/commit/c9fbcc1f39f2c37a6d0a40ca8c2462d934a9fc60"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "dcaa65a8fa78eab94f78346a931f452dbb3ae321", "filename": "src/libstd/path.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c965858e206019ae8ca4047feb5563150acd82a0/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c965858e206019ae8ca4047feb5563150acd82a0/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=c965858e206019ae8ca4047feb5563150acd82a0", "patch": "@@ -1145,6 +1145,33 @@ impl PathBuf {\n         PathBuf { inner: OsString::new() }\n     }\n \n+    /// Creates a new `PathBuf` with a given capacity used to create the\n+    /// internal [`OsString`]. See [`with_capacity`] defined on [`OsString`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(path_buf_capacity)]\n+    /// use std::path::PathBuf;\n+    ///\n+    /// let mut path = PathBuf::with_capacity(10);\n+    /// let capacity = path.capacity();\n+    ///\n+    /// // This push is done without reallocating\n+    /// path.push(r\"C:\\\");\n+    ///\n+    /// assert_eq!(capacity, path.capacity());\n+    /// ```\n+    ///\n+    /// [`with_capacity`]: ../ffi/struct.OsString.html#method.with_capacity\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn with_capacity(capacity: usize) -> PathBuf {\n+        PathBuf {\n+            inner: OsString::with_capacity(capacity)\n+        }\n+    }\n+\n     /// Coerces to a [`Path`] slice.\n     ///\n     /// [`Path`]: struct.Path.html\n@@ -1373,6 +1400,60 @@ impl PathBuf {\n         let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n         unsafe { Box::from_raw(rw) }\n     }\n+\n+    /// Invokes [`capacity`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`capacity`]: ../ffi/struct.OsString.html#method.capacity\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn capacity(&self) -> usize {\n+        self.inner.capacity()\n+    }\n+\n+    /// Invokes [`clear`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`clear`]: ../ffi/struct.OsString.html#method.clear\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn clear(&mut self) {\n+        self.inner.clear()\n+    }\n+\n+    /// Invokes [`reserve`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`reserve`]: ../ffi/struct.OsString.html#method.reserve\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn reserve(&mut self, additional: usize) {\n+        self.inner.reserve(additional)\n+    }\n+\n+    /// Invokes [`reserve_exact`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`reserve_exact`]: ../ffi/struct.OsString.html#method.reserve_exact\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn reserve_exact(&mut self, additional: usize) {\n+        self.inner.reserve_exact(additional)\n+    }\n+\n+    /// Invokes [`shrink_to_fit`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`shrink_to_fit`]: ../ffi/struct.OsString.html#method.shrink_to_fit\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn shrink_to_fit(&mut self) {\n+        self.inner.shrink_to_fit()\n+    }\n+\n+    /// Invokes [`shrink_to`] on the underlying instance of [`OsString`].\n+    ///\n+    /// [`shrink_to`]: ../ffi/struct.OsString.html#method.shrink_to\n+    /// [`OsString`]: ../ffi/struct.OsString.html\n+    #[unstable(feature = \"path_buf_capacity\", issue = \"58234\")]\n+    pub fn shrink_to(&mut self, min_capacity: usize) {\n+        self.inner.shrink_to(min_capacity)\n+    }\n }\n \n #[stable(feature = \"box_from_path\", since = \"1.17.0\")]"}]}