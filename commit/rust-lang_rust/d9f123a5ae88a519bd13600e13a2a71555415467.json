{"sha": "d9f123a5ae88a519bd13600e13a2a71555415467", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZjEyM2E1YWU4OGE1MTliZDEzNjAwZTEzYTJhNzE1NTU0MTU0Njc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-05T21:24:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T21:24:09Z"}, "message": "Rollup merge of #83489 - LeSeulArtichaut:deref-else, r=davidtwco\n\nProperly suggest deref in else block\n\nContinues #79755, fixes #79736\nr? `@davidtwco`", "tree": {"sha": "273a45ac6b18223802f50d859480b765cbc8ab66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/273a45ac6b18223802f50d859480b765cbc8ab66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9f123a5ae88a519bd13600e13a2a71555415467", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga3/6CRBK7hj4Ov3rIwAAdHIIAEDqpk7x9oXAUWJGNVnbw5an\nYg4TNnqh7uXt30eImJSqvEKTaLV/gyktCbyWdI3VWhCbLFG01CiDjWIAYL8+24VD\nbGJ/y4R/3gmqfOUiMd2pNRLsFithFoEPZH0cBU22oYIWmExfmDFHvSk8TuUMRTpa\nzcTs4ewQUSb0TmgbZSsy1j6BEhcP1PMvRLhpo8jGWf+Qwi/nLeHaptQpNkRrM/WZ\ncI0io9G0AShDry0FqtsXteY7BwIn7dwpFldQbOVMzAlI6E0wO8VaYIHDg8L7+4kF\nQ6ygEM8fvwn15KWdlNQfVi7AyfBnqZxqml8zSwTzqF73mOc9wJwHiMOK1/kR2/A=\n=r1kV\n-----END PGP SIGNATURE-----\n", "payload": "tree 273a45ac6b18223802f50d859480b765cbc8ab66\nparent e5eddedb803800c556b9358677a9c5118db473b6\nparent fb7cf0982b6cba2a77e40ef6b5919e7584a07a95\nauthor Yuki Okushi <jtitor@2k36.org> 1617657849 +0900\ncommitter GitHub <noreply@github.com> 1617657849 +0900\n\nRollup merge of #83489 - LeSeulArtichaut:deref-else, r=davidtwco\n\nProperly suggest deref in else block\n\nContinues #79755, fixes #79736\nr? `@davidtwco`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9f123a5ae88a519bd13600e13a2a71555415467", "html_url": "https://github.com/rust-lang/rust/commit/d9f123a5ae88a519bd13600e13a2a71555415467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9f123a5ae88a519bd13600e13a2a71555415467/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5eddedb803800c556b9358677a9c5118db473b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5eddedb803800c556b9358677a9c5118db473b6", "html_url": "https://github.com/rust-lang/rust/commit/e5eddedb803800c556b9358677a9c5118db473b6"}, {"sha": "fb7cf0982b6cba2a77e40ef6b5919e7584a07a95", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7cf0982b6cba2a77e40ef6b5919e7584a07a95", "html_url": "https://github.com/rust-lang/rust/commit/fb7cf0982b6cba2a77e40ef6b5919e7584a07a95"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "d879b6e97dcfb884098a9915144e3167bd50c90b", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9f123a5ae88a519bd13600e13a2a71555415467/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f123a5ae88a519bd13600e13a2a71555415467/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=d9f123a5ae88a519bd13600e13a2a71555415467", "patch": "@@ -366,6 +366,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    /// If the given `HirId` corresponds to a block with a trailing expression, return that expression\n+    crate fn maybe_get_block_expr(&self, hir_id: hir::HirId) -> Option<&'tcx hir::Expr<'tcx>> {\n+        match self.tcx.hir().find(hir_id)? {\n+            Node::Expr(hir::Expr { kind: hir::ExprKind::Block(block, ..), .. }) => block.expr,\n+            _ => None,\n+        }\n+    }\n+\n+    /// Returns whether the given expression is an `else if`.\n+    crate fn is_else_if_block(&self, expr: &hir::Expr<'_>) -> bool {\n+        if let hir::ExprKind::If(..) = expr.kind {\n+            let parent_id = self.tcx.hir().get_parent_node(expr.hir_id);\n+            if let Some(Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::If(_, _, Some(else_expr)),\n+                ..\n+            })) = self.tcx.hir().find(parent_id)\n+            {\n+                return else_expr.hir_id == expr.hir_id;\n+            }\n+        }\n+        false\n+    }\n+\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -652,6 +675,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 };\n                                 let suggestion = if is_struct_pat_shorthand_field {\n                                     format!(\"{}: *{}\", code, code)\n+                                } else if self.is_else_if_block(expr) {\n+                                    // Don't suggest nonsense like `else *if`\n+                                    return None;\n+                                } else if let Some(expr) = self.maybe_get_block_expr(expr.hir_id) {\n+                                    format!(\"*{}\", sm.span_to_snippet(expr.span).unwrap_or(code))\n                                 } else {\n                                     format!(\"*{}\", code)\n                                 };"}, {"sha": "4fd695585ba06d8190a0b28c008842412d12b123", "filename": "src/test/ui/deref-suggestion.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d9f123a5ae88a519bd13600e13a2a71555415467/src%2Ftest%2Fui%2Fderef-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9f123a5ae88a519bd13600e13a2a71555415467/src%2Ftest%2Fui%2Fderef-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.rs?ref=d9f123a5ae88a519bd13600e13a2a71555415467", "patch": "@@ -45,4 +45,30 @@ fn main() {\n     //~^ ERROR mismatched types\n     let r = R { i: i };\n     //~^ ERROR mismatched types\n+\n+\n+    let a = &1;\n+    let b = &2;\n+    let val: i32 = if true {\n+        a + 1\n+    } else {\n+        b\n+        //~^ ERROR mismatched types\n+    };\n+    let val: i32 = if true {\n+        let _ = 2;\n+        a + 1\n+    } else {\n+        let _ = 2;\n+        b\n+        //~^ ERROR mismatched types\n+    };\n+    let val = if true {\n+        *a\n+    } else if true {\n+    //~^ ERROR incompatible types\n+        b\n+    } else {\n+        &0\n+    };\n }"}, {"sha": "632a279d79623b92d8bd87c3cc50c707e08991ea", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d9f123a5ae88a519bd13600e13a2a71555415467/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9f123a5ae88a519bd13600e13a2a71555415467/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=d9f123a5ae88a519bd13600e13a2a71555415467", "patch": "@@ -89,6 +89,43 @@ LL |     let r = R { i: i };\n    |                    expected `u32`, found `&{integer}`\n    |                    help: consider dereferencing the borrow: `*i`\n \n-error: aborting due to 10 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:55:9\n+   |\n+LL |         b\n+   |         ^\n+   |         |\n+   |         expected `i32`, found `&{integer}`\n+   |         help: consider dereferencing the borrow: `*b`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:63:9\n+   |\n+LL |         b\n+   |         ^\n+   |         |\n+   |         expected `i32`, found `&{integer}`\n+   |         help: consider dereferencing the borrow: `*b`\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/deref-suggestion.rs:68:12\n+   |\n+LL |        let val = if true {\n+   |   _______________-\n+LL |  |         *a\n+   |  |         -- expected because of this\n+LL |  |     } else if true {\n+   |  |____________^\n+LL | ||\n+LL | ||         b\n+LL | ||     } else {\n+LL | ||         &0\n+LL | ||     };\n+   | ||     ^\n+   | ||_____|\n+   | |______`if` and `else` have incompatible types\n+   |        expected `i32`, found `&{integer}`\n+\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}