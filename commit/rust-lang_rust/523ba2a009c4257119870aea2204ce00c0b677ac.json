{"sha": "523ba2a009c4257119870aea2204ce00c0b677ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyM2JhMmEwMDljNDI1NzExOTg3MGFlYTIyMDRjZTAwYzBiNjc3YWM=", "commit": {"author": {"name": "ms2300", "email": "matt.sewall@gmail.com", "date": "2018-09-13T08:36:13Z"}, "committer": {"name": "ms2300", "email": "matt.sewall@gmail.com", "date": "2018-09-24T02:53:25Z"}, "message": "Full fix of get unwrap issue", "tree": {"sha": "829c9fba4069daa73348932743b46861353e1711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/829c9fba4069daa73348932743b46861353e1711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/523ba2a009c4257119870aea2204ce00c0b677ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/523ba2a009c4257119870aea2204ce00c0b677ac", "html_url": "https://github.com/rust-lang/rust/commit/523ba2a009c4257119870aea2204ce00c0b677ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/523ba2a009c4257119870aea2204ce00c0b677ac/comments", "author": {"login": "ms2300", "id": 15894971, "node_id": "MDQ6VXNlcjE1ODk0OTcx", "avatar_url": "https://avatars.githubusercontent.com/u/15894971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ms2300", "html_url": "https://github.com/ms2300", "followers_url": "https://api.github.com/users/ms2300/followers", "following_url": "https://api.github.com/users/ms2300/following{/other_user}", "gists_url": "https://api.github.com/users/ms2300/gists{/gist_id}", "starred_url": "https://api.github.com/users/ms2300/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ms2300/subscriptions", "organizations_url": "https://api.github.com/users/ms2300/orgs", "repos_url": "https://api.github.com/users/ms2300/repos", "events_url": "https://api.github.com/users/ms2300/events{/privacy}", "received_events_url": "https://api.github.com/users/ms2300/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ms2300", "id": 15894971, "node_id": "MDQ6VXNlcjE1ODk0OTcx", "avatar_url": "https://avatars.githubusercontent.com/u/15894971?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ms2300", "html_url": "https://github.com/ms2300", "followers_url": "https://api.github.com/users/ms2300/followers", "following_url": "https://api.github.com/users/ms2300/following{/other_user}", "gists_url": "https://api.github.com/users/ms2300/gists{/gist_id}", "starred_url": "https://api.github.com/users/ms2300/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ms2300/subscriptions", "organizations_url": "https://api.github.com/users/ms2300/orgs", "repos_url": "https://api.github.com/users/ms2300/repos", "events_url": "https://api.github.com/users/ms2300/events{/privacy}", "received_events_url": "https://api.github.com/users/ms2300/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8d233b060f60a37b7fae82a36f7226892ac4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8d233b060f60a37b7fae82a36f7226892ac4e7", "html_url": "https://github.com/rust-lang/rust/commit/de8d233b060f60a37b7fae82a36f7226892ac4e7"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "6bf57383a7a1b8f31e0c81a30bcdf10585f3c1c8", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/523ba2a009c4257119870aea2204ce00c0b677ac/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/523ba2a009c4257119870aea2204ce00c0b677ac/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=523ba2a009c4257119870aea2204ce00c0b677ac", "patch": "@@ -1404,22 +1404,33 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n     // Note: we don't want to lint `get_mut().unwrap` for HashMap or BTreeMap,\n     // because they do not implement `IndexMut`\n     let expr_ty = cx.tables.expr_ty(&get_args[0]);\n+    let get_args_str = if get_args.len() > 1 {\n+        snippet(cx, get_args[1].span, \"_\")\n+    } else {\n+        return; // not linting on a .get().unwrap() chain or variant\n+    };\n+    let needs_ref;\n     let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n+        needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"slice\"\n     } else if match_type(cx, expr_ty, &paths::VEC) {\n+        needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n     } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {\n+        needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"VecDeque\"\n     } else if !is_mut && match_type(cx, expr_ty, &paths::HASHMAP) {\n+        needs_ref = true;\n         \"HashMap\"\n     } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {\n+        needs_ref = true;\n         \"BTreeMap\"\n     } else {\n         return; // caller is not a type that we want to lint\n     };\n \n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n-    let borrow_str = if is_mut { \"&mut \" } else { \"&\" };\n+    let borrow_str = if !needs_ref { \"\" } else if is_mut { \"&mut \" } else { \"&\" };\n     span_lint_and_sugg(\n         cx,\n         GET_UNWRAP,\n@@ -1431,10 +1442,10 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n         ),\n         \"try this\",\n         format!(\n-            \"({}{}[{}])\",\n+            \"{}{}[{}]\",\n             borrow_str,\n             snippet(cx, get_args[0].span, \"_\"),\n-            snippet(cx, get_args[1].span, \"_\")\n+            get_args_str\n         ),\n     );\n }"}, {"sha": "669903da190c965c04c638432073b38af09f094b", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/523ba2a009c4257119870aea2204ce00c0b677ac/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/523ba2a009c4257119870aea2204ce00c0b677ac/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=523ba2a009c4257119870aea2204ce00c0b677ac", "patch": "@@ -2,75 +2,75 @@ error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more co\n   --> $DIR/get_unwrap.rs:27:17\n    |\n 27 |         let _ = boxed_slice.get(1).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&boxed_slice[1])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n    |\n    = note: `-D clippy::get-unwrap` implied by `-D warnings`\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:28:17\n    |\n 28 |         let _ = some_slice.get(0).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_slice[0])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:29:17\n    |\n 29 |         let _ = some_vec.get(0).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_vec[0])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:30:17\n    |\n 30 |         let _ = some_vecdeque.get(0).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_vecdeque[0])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:31:17\n    |\n 31 |         let _ = some_hashmap.get(&1).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_hashmap[&1])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:32:17\n    |\n 32 |         let _ = some_btreemap.get(&1).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_btreemap[&1])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:37:10\n    |\n 37 |         *boxed_slice.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut boxed_slice[0])`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut boxed_slice[0]`\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:38:10\n    |\n 38 |         *some_slice.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_slice[0])`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_slice[0]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:39:10\n    |\n 39 |         *some_vec.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_vec[0])`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vec[0]`\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:40:10\n    |\n 40 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_vecdeque[0])`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:48:17\n    |\n 48 |         let _ = some_vec.get(0..1).unwrap().to_vec();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&some_vec[0..1])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n   --> $DIR/get_unwrap.rs:49:17\n    |\n 49 |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&mut some_vec[0..1])`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: aborting due to 12 previous errors\n "}]}