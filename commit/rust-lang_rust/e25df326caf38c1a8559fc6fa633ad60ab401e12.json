{"sha": "e25df326caf38c1a8559fc6fa633ad60ab401e12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNWRmMzI2Y2FmMzhjMWE4NTU5ZmM2ZmE2MzNhZDYwYWI0MDFlMTI=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-03-11T14:53:22Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-03-11T14:53:22Z"}, "message": "consistent naming for duration_float methods and additional f32 methods", "tree": {"sha": "d8c1d75301904f558a8b1d182ca4bbc4ecd5ea9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8c1d75301904f558a8b1d182ca4bbc4ecd5ea9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e25df326caf38c1a8559fc6fa633ad60ab401e12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e25df326caf38c1a8559fc6fa633ad60ab401e12", "html_url": "https://github.com/rust-lang/rust/commit/e25df326caf38c1a8559fc6fa633ad60ab401e12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e25df326caf38c1a8559fc6fa633ad60ab401e12/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf3c9a78aa6544631a09fb7f1705d51a5c91158a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3c9a78aa6544631a09fb7f1705d51a5c91158a", "html_url": "https://github.com/rust-lang/rust/commit/cf3c9a78aa6544631a09fb7f1705d51a5c91158a"}], "stats": {"total": 130, "additions": 121, "deletions": 9}, "files": [{"sha": "c8f23fd90bd7abf3c0864021a9210271b7b9781f", "filename": "src/libcore/time.rs", "status": "modified", "additions": 121, "deletions": 9, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e25df326caf38c1a8559fc6fa633ad60ab401e12/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25df326caf38c1a8559fc6fa633ad60ab401e12/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=e25df326caf38c1a8559fc6fa633ad60ab401e12", "patch": "@@ -22,6 +22,7 @@ const NANOS_PER_MICRO: u32 = 1_000;\n const MILLIS_PER_SEC: u64 = 1_000;\n const MICROS_PER_SEC: u64 = 1_000_000;\n const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n+const MAX_NANOS_F32: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f32;\n \n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n@@ -510,15 +511,34 @@ impl Duration {\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n-    /// assert_eq!(dur.as_float_secs(), 2.7);\n+    /// assert_eq!(dur.as_secs_f64(), 2.7);\n     /// ```\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n-    pub const fn as_float_secs(&self) -> f64 {\n+    pub const fn as_secs_f64(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n     }\n \n-    /// Creates a new `Duration` from the specified number of seconds.\n+    /// Returns the number of seconds contained by this `Duration` as `f32`.\n+    ///\n+    /// The returned value does include the fractional (nanosecond) part of the duration.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.as_secs_f32(), 2.7);\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub const fn as_secs_f32(&self) -> f32 {\n+        (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n+    }\n+\n+    /// Creates a new `Duration` from the specified number of seconds represented\n+    /// as `f64`.\n     ///\n     /// # Panics\n     /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n@@ -528,12 +548,12 @@ impl Duration {\n     /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n-    /// let dur = Duration::from_float_secs(2.7);\n+    /// let dur = Duration::from_secs_f64(2.7);\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n-    pub fn from_float_secs(secs: f64) -> Duration {\n+    pub fn from_secs_f64(secs: f64) -> Duration {\n         let nanos =  secs * (NANOS_PER_SEC as f64);\n         if !nanos.is_finite() {\n             panic!(\"got non-finite value when converting float to duration\");\n@@ -551,6 +571,40 @@ impl Duration {\n         }\n     }\n \n+    /// Creates a new `Duration` from the specified number of seconds represented\n+    /// as `f32`.\n+    ///\n+    /// # Panics\n+    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::from_secs_f32(2.7);\n+    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn from_secs_f32(secs: f32) -> Duration {\n+        let nanos =  secs * (NANOS_PER_SEC as f32);\n+        if !nanos.is_finite() {\n+            panic!(\"got non-finite value when converting float to duration\");\n+        }\n+        if nanos >= MAX_NANOS_F32 {\n+            panic!(\"overflow when converting float to duration\");\n+        }\n+        if nanos < 0.0 {\n+            panic!(\"underflow when converting float to duration\");\n+        }\n+        let nanos =  nanos as u128;\n+        Duration {\n+            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+        }\n+    }\n+\n     /// Multiplies `Duration` by `f64`.\n     ///\n     /// # Panics\n@@ -568,7 +622,27 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn mul_f64(self, rhs: f64) -> Duration {\n-        Duration::from_float_secs(rhs * self.as_float_secs())\n+        Duration::from_secs_f64(rhs * self.as_secs_f64())\n+    }\n+\n+    /// Multiplies `Duration` by `f32`.\n+    ///\n+    /// # Panics\n+    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_000));\n+    /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847_800, 0));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn mul_f32(self, rhs: f32) -> Duration {\n+        Duration::from_secs_f32(rhs * self.as_secs_f32())\n     }\n \n     /// Divide `Duration` by `f64`.\n@@ -589,7 +663,28 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn div_f64(self, rhs: f64) -> Duration {\n-        Duration::from_float_secs(self.as_float_secs() / rhs)\n+        Duration::from_secs_f64(self.as_secs_f64() / rhs)\n+    }\n+\n+    /// Divide `Duration` by `f32`.\n+    ///\n+    /// # Panics\n+    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_611));\n+    /// // note that truncation is used, not rounding\n+    /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn div_f32(self, rhs: f32) -> Duration {\n+        Duration::from_secs_f32(self.as_secs_f32() / rhs)\n     }\n \n     /// Divide `Duration` by `Duration` and return `f64`.\n@@ -605,8 +700,25 @@ impl Duration {\n     /// ```\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n-    pub fn div_duration(self, rhs: Duration) -> f64 {\n-        self.as_float_secs() / rhs.as_float_secs()\n+    pub fn div_duration_f64(self, rhs: Duration) -> f64 {\n+        self.as_secs_f64() / rhs.as_secs_f64()\n+    }\n+\n+    /// Divide `Duration` by `Duration` and return `f32`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur1 = Duration::new(2, 700_000_000);\n+    /// let dur2 = Duration::new(5, 400_000_000);\n+    /// assert_eq!(dur1.div_duration(dur2), 0.5);\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn div_duration_f32(self, rhs: Duration) -> f32 {\n+        self.as_secs_f32() / rhs.as_secs_f32()\n     }\n }\n "}]}