{"sha": "ef5a64e2cf8e4ee5b31c9e040867fd107692c835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNWE2NGUyY2Y4ZTRlZTViMzFjOWUwNDA4NjdmZDEwNzY5MmM4MzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T06:25:37Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-09T06:25:37Z"}, "message": "Add quad-counting system.", "tree": {"sha": "e7854531404e3dca60aef8fa9e37f53198c2a5c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7854531404e3dca60aef8fa9e37f53198c2a5c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5a64e2cf8e4ee5b31c9e040867fd107692c835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5a64e2cf8e4ee5b31c9e040867fd107692c835", "html_url": "https://github.com/rust-lang/rust/commit/ef5a64e2cf8e4ee5b31c9e040867fd107692c835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5a64e2cf8e4ee5b31c9e040867fd107692c835/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c266f9377c4aa29bd7b69e6ed221ce407bc030", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c266f9377c4aa29bd7b69e6ed221ce407bc030", "html_url": "https://github.com/rust-lang/rust/commit/71c266f9377c4aa29bd7b69e6ed221ce407bc030"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "b37f5d936dbf60776d130dc41c2d102319e88407", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef5a64e2cf8e4ee5b31c9e040867fd107692c835/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ef5a64e2cf8e4ee5b31c9e040867fd107692c835/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=ef5a64e2cf8e4ee5b31c9e040867fd107692c835", "patch": "@@ -61,11 +61,13 @@ let (sess:Session.sess) =\n     Session.sess_failed = false;\n     Session.sess_spans = Hashtbl.create 0;\n     Session.sess_report_timing = false;\n+    Session.sess_report_quads = false;\n     Session.sess_report_gc = false;\n     Session.sess_report_deps = false;\n     Session.sess_next_crate_id = 0;\n     Session.sess_fuzz_item_count = 5;\n     Session.sess_timings = Hashtbl.create 0;\n+    Session.sess_quad_counts = Hashtbl.create 0;\n     Session.sess_lib_dirs = Queue.create ();\n     Session.sess_crate_meta = Hashtbl.create 0;\n     Session.sess_node_id_counter = ref (Node 0);\n@@ -221,6 +223,8 @@ let argspecs =\n \n     (flag (fun _ -> sess.Session.sess_report_timing <- true)\n        \"-rtime\"        \"report timing of compiler phases\");\n+    (flag (fun _ -> sess.Session.sess_report_quads <- true)\n+       \"-rquads\"       \"report categories of quad emitted\");\n     (flag (fun _ -> sess.Session.sess_report_gc <- true)\n        \"-rgc\"          \"report gc behavior of compiler\");\n     (\"-rsig\", Arg.String dump_sig,"}, {"sha": "39848982ba94cffa9c0bf1de9dfaa2df571a7fc3", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef5a64e2cf8e4ee5b31c9e040867fd107692c835/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ef5a64e2cf8e4ee5b31c9e040867fd107692c835/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=ef5a64e2cf8e4ee5b31c9e040867fd107692c835", "patch": "@@ -46,12 +46,14 @@ type sess =\n   mutable sess_trace_gc: bool;\n   mutable sess_failed: bool;\n   mutable sess_report_timing: bool;\n+  mutable sess_report_quads: bool;\n   mutable sess_report_gc: bool;\n   mutable sess_report_deps: bool;\n   mutable sess_next_crate_id: int;\n   mutable sess_fuzz_item_count: int;\n \n   sess_timings: (string, float) Hashtbl.t;\n+  sess_quad_counts: (string, int ref) Hashtbl.t;\n   sess_spans: (node_id,span) Hashtbl.t;\n   sess_lib_dirs: filename Queue.t;\n   sess_crate_meta: (meta, crate_id) Hashtbl.t;"}, {"sha": "68d0aac6124ec5481cbd68542fd577820527ea65", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 75, "deletions": 9, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ef5a64e2cf8e4ee5b31c9e040867fd107692c835/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ef5a64e2cf8e4ee5b31c9e040867fd107692c835/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=ef5a64e2cf8e4ee5b31c9e040867fd107692c835", "patch": "@@ -163,8 +163,8 @@ let trans_visitor\n   let emitters = Stack.create () in\n   let push_new_emitter (vregs_ok:bool) (fnid:node_id option) =\n     let e = Il.new_emitter\n-         abi.Abi.abi_emit_target_specific\n-         vregs_ok fnid\n+      abi.Abi.abi_emit_target_specific\n+      vregs_ok fnid\n     in\n       Stack.push e emitters;\n   in\n@@ -179,13 +179,54 @@ let trans_visitor\n     Hashtbl.clear (emitter_size_cache())\n   in\n \n+  let quad_categories = Hashtbl.create 0 in\n+  let quad_category_stack = Stack.create () in\n+  let in_quad_category name thunk =\n+    if cx.ctxt_sess.Session.sess_report_quads\n+    then Stack.push name quad_category_stack;\n+    let x = thunk() in\n+      if cx.ctxt_sess.Session.sess_report_quads\n+      then ignore (Stack.pop quad_category_stack);\n+      x\n+  in\n+\n+  let credit name i =\n+    let c =\n+      htab_search_or_add quad_categories name\n+        (fun _ -> ref 0)\n+    in\n+      c := (!c) + i\n+  in\n+\n+  let in_native_quad_category name thunk =\n+    if cx.ctxt_sess.Session.sess_report_quads\n+    then\n+      let i = (emitter()).Il.emit_pc in\n+      let x = thunk() in\n+      let j = (emitter()).Il.emit_pc in\n+        credit name (j-i);\n+        x\n+    else\n+      thunk()\n+  in\n+\n   let emit q =\n     begin\n       match q with\n         Il.Jmp _ -> flush_emitter_size_cache();\n         | _ -> ()\n     end;\n-    Il.emit (emitter()) q\n+    Il.emit (emitter()) q;\n+    if cx.ctxt_sess.Session.sess_report_quads\n+    then\n+      begin\n+        let name =\n+          if Stack.is_empty quad_category_stack\n+          then \"other\"\n+          else Stack.top quad_category_stack\n+        in\n+          credit name 1\n+      end\n   in\n \n   let next_vreg _ = Il.next_vreg (emitter()) in\n@@ -2517,15 +2558,19 @@ let trans_visitor\n       (ret:Il.cell)\n       (args:Il.operand array)\n       : unit =\n-    abi.Abi.abi_emit_native_call (emitter())\n-      ret nabi_rust (upcall_fixup name) args;\n+    in_native_quad_category \"upcall\"\n+      (fun _ ->\n+         abi.Abi.abi_emit_native_call (emitter())\n+           ret nabi_rust (upcall_fixup name) args)\n \n   and trans_void_upcall\n       (name:string)\n       (args:Il.operand array)\n       : unit =\n-    abi.Abi.abi_emit_native_void_call (emitter())\n-      nabi_rust (upcall_fixup name) args;\n+    in_native_quad_category \"upcall\"\n+      (fun _ ->\n+         abi.Abi.abi_emit_native_void_call (emitter())\n+           nabi_rust (upcall_fixup name) args);\n \n   and trans_log_int (a:Ast.atom) : unit =\n     trans_void_upcall \"upcall_log_int\" [| (trans_atom a) |]\n@@ -4705,7 +4750,8 @@ let trans_visitor\n               annotate s;\n         end;\n       Stack.push stmt.id curr_stmt;\n-      trans_stmt_full stmt;\n+      (in_quad_category \"stmt\"\n+         (fun _ -> trans_stmt_full stmt));\n       begin\n         match stmt.node with\n             Ast.STMT_be _\n@@ -5834,6 +5880,24 @@ let trans_visitor\n     inner.Walk.visit_crate_pre crate\n   in\n \n+  let report_quads _ =\n+    if cx.ctxt_sess.Session.sess_report_quads\n+    then\n+      begin\n+        let cumulative = ref 0 in\n+          Printf.fprintf stdout \"quads:\\n\\n\";\n+          Array.iter\n+            begin\n+              fun name ->\n+                let t = Hashtbl.find quad_categories name in\n+                  Printf.fprintf stdout \"%20s: %d\\n\" name (!t);\n+                  cumulative := (!cumulative) + (!t)\n+            end\n+            (sorted_htab_keys quad_categories);\n+          Printf.fprintf stdout \"\\n%20s: %d\\n\" \"cumulative\" (!cumulative)\n+      end\n+  in\n+\n   let visit_crate_post crate =\n \n     inner.Walk.visit_crate_post crate;\n@@ -5921,7 +5985,9 @@ let trans_visitor\n \n       provide_existing_native cx SEG_data \"rust_crate\" cx.ctxt_crate_fixup;\n \n-      leave_file_for crate.id\n+      leave_file_for crate.id;\n+\n+      report_quads()\n   in\n \n     { inner with"}]}