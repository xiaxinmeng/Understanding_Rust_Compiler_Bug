{"sha": "9cc8da222b3893bc13bc13c8827e93f8ea246854", "node_id": "C_kwDOAAsO6NoAKDljYzhkYTIyMmIzODkzYmMxM2JjMTNjODgyN2U5M2Y4ZWEyNDY4NTQ", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-07T09:07:09Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-07T09:07:44Z"}, "message": "Fix adjacent code", "tree": {"sha": "bb3e505e1d8d5b5734a71a0423527c43b6dd7f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3e505e1d8d5b5734a71a0423527c43b6dd7f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cc8da222b3893bc13bc13c8827e93f8ea246854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8da222b3893bc13bc13c8827e93f8ea246854", "html_url": "https://github.com/rust-lang/rust/commit/9cc8da222b3893bc13bc13c8827e93f8ea246854", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cc8da222b3893bc13bc13c8827e93f8ea246854/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "037f698147eeb97699c06a270e8774d2f7a6fbbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/037f698147eeb97699c06a270e8774d2f7a6fbbc", "html_url": "https://github.com/rust-lang/rust/commit/037f698147eeb97699c06a270e8774d2f7a6fbbc"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "535c25e69f1bb1df546fbf84ebd8bd2d3984329c", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -49,7 +49,7 @@ fn mtime(path: impl AsRef<Path>) -> SystemTime {\n             .into_iter()\n             .flatten()\n             .flatten()\n-            .map(|entry| mtime(&entry.path()))\n+            .map(|entry| mtime(entry.path()))\n             .max()\n             .unwrap_or(SystemTime::UNIX_EPOCH)\n     } else {"}, {"sha": "8d1bfacd1dc304b2906c6a0d7c4aa5ae94530f35", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -128,7 +128,7 @@ fn generate_lint_files(\n     for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n         let content = gen_lint_group_list(&lint_group, lints.iter());\n         process_file(\n-            &format!(\"clippy_lints/src/lib.register_{lint_group}.rs\"),\n+            format!(\"clippy_lints/src/lib.register_{lint_group}.rs\"),\n             update_mode,\n             &content,\n         );"}, {"sha": "ebb0f14fef52805fd66531280163a13c5ba7a105", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -417,7 +417,7 @@ pub fn register_pre_expansion_lints(store: &mut rustc_lint::LintStore, sess: &Se\n \n     let msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n-            sess.err(&format!(\n+            sess.err(format!(\n                 \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n             ));\n             None\n@@ -433,7 +433,7 @@ fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n         .and_then(|v| parse_msrv(&v, None, None));\n     let clippy_msrv = conf.msrv.as_ref().and_then(|s| {\n         parse_msrv(s, None, None).or_else(|| {\n-            sess.err(&format!(\n+            sess.err(format!(\n                 \"error reading Clippy's configuration file. `{s}` is not a valid Rust version\"\n             ));\n             None\n@@ -444,7 +444,7 @@ fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n         if let Some(clippy_msrv) = clippy_msrv {\n             // if both files have an msrv, let's compare them and emit a warning if they differ\n             if clippy_msrv != cargo_msrv {\n-                sess.warn(&format!(\n+                sess.warn(format!(\n                     \"the MSRV in `clippy.toml` and `Cargo.toml` differ; using `{clippy_msrv}` from `clippy.toml`\"\n                 ));\n             }\n@@ -473,7 +473,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n     let TryConf { conf, errors, warnings } = utils::conf::read(&file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n-        sess.err(&format!(\n+        sess.err(format!(\n             \"error reading Clippy's configuration file `{}`: {}\",\n             file_name.display(),\n             format_error(error)"}, {"sha": "6c909e5ed73ea6b5faac116b6ca5bb657a3cc21f", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -266,7 +266,7 @@ impl<'de> Deserialize<'de> for MacroMatcher {\n                         .iter()\n                         .find(|b| b.0 == brace)\n                         .map(|(o, c)| ((*o).to_owned(), (*c).to_owned()))\n-                        .ok_or_else(|| de::Error::custom(&format!(\"expected one of `(`, `{{`, `[` found `{brace}`\")))?,\n+                        .ok_or_else(|| de::Error::custom(format!(\"expected one of `(`, `{{`, `[` found `{brace}`\")))?,\n                 })\n             }\n         }"}, {"sha": "cd8575c90e86caaad333ab8f76ecce98d82b3ae8", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -136,7 +136,7 @@ pub fn get_unique_inner_attr(sess: &Session, attrs: &[ast::Attribute], name: &'s\n                     .emit();\n             },\n             ast::AttrStyle::Outer => {\n-                sess.span_err(attr.span, &format!(\"`{name}` cannot be an outer attribute\"));\n+                sess.span_err(attr.span, format!(\"`{name}` cannot be an outer attribute\"));\n             },\n         }\n     }"}, {"sha": "5c8ffffc8c8a6b9524f2d105349688b1f73c6046", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -125,7 +125,7 @@ pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Opt\n         return Some(version);\n     } else if let Some(sess) = sess {\n         if let Some(span) = span {\n-            sess.span_err(span, &format!(\"`{msrv}` is not a valid Rust version\"));\n+            sess.span_err(span, format!(\"`{msrv}` is not a valid Rust version\"));\n         }\n     }\n     None"}, {"sha": "95b20d7f02427a9e4c5a6f319f3e90307cfd8724", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -345,7 +345,7 @@ impl Crate {\n                 clippy_args.push(opt);\n             }\n         } else {\n-            clippy_args.extend(&[\"-Wclippy::pedantic\", \"-Wclippy::cargo\"])\n+            clippy_args.extend([\"-Wclippy::pedantic\", \"-Wclippy::cargo\"])\n         }\n \n         if lint_filter.is_empty() {\n@@ -457,15 +457,11 @@ fn build_clippy() {\n /// Read a `lintcheck_crates.toml` file\n fn read_crates(toml_path: &Path) -> (Vec<CrateSource>, RecursiveOptions) {\n     let toml_content: String =\n-        std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n+        std::fs::read_to_string(toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n     let crate_list: SourceList =\n         toml::from_str(&toml_content).unwrap_or_else(|e| panic!(\"Failed to parse {}: \\n{}\", toml_path.display(), e));\n     // parse the hashmap of the toml file into a list of crates\n-    let tomlcrates: Vec<TomlCrate> = crate_list\n-        .crates\n-        .into_iter()\n-        .map(|(_cratename, tomlcrate)| tomlcrate)\n-        .collect();\n+    let tomlcrates: Vec<TomlCrate> = crate_list.crates.into_values().collect();\n \n     // flatten TomlCrates into CrateSources (one TomlCrates may represent several versions of a crate =>\n     // multiple Cratesources)\n@@ -602,10 +598,10 @@ fn main() {\n     ) {\n         let shared_target_dir = \"target/lintcheck/shared_target_dir\";\n         // if we get an Err here, the shared target dir probably does simply not exist\n-        if let Ok(metadata) = std::fs::metadata(&shared_target_dir) {\n+        if let Ok(metadata) = std::fs::metadata(shared_target_dir) {\n             if metadata.is_dir() {\n                 println!(\"Clippy is newer than lint check logs, clearing lintcheck shared target dir...\");\n-                std::fs::remove_dir_all(&shared_target_dir)\n+                std::fs::remove_dir_all(shared_target_dir)\n                     .expect(\"failed to remove target/lintcheck/shared_target_dir\");\n             }\n         }\n@@ -779,7 +775,7 @@ fn read_stats_from_file(file_path: &Path) -> HashMap<String, usize> {\n fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, usize>, lint_filter: &Vec<String>) {\n     let same_in_both_hashmaps = old_stats\n         .iter()\n-        .filter(|(old_key, old_val)| new_stats.get::<&String>(&old_key) == Some(old_val))\n+        .filter(|(old_key, old_val)| new_stats.get::<&String>(old_key) == Some(old_val))\n         .map(|(k, v)| (k.to_string(), *v))\n         .collect::<Vec<(String, usize)>>();\n \n@@ -797,24 +793,24 @@ fn print_stats(old_stats: HashMap<String, usize>, new_stats: HashMap<&String, us\n     // list all new counts  (key is in new stats but not in old stats)\n     new_stats_deduped\n         .iter()\n-        .filter(|(new_key, _)| old_stats_deduped.get::<str>(&new_key).is_none())\n+        .filter(|(new_key, _)| old_stats_deduped.get::<str>(new_key).is_none())\n         .for_each(|(new_key, new_value)| {\n             println!(\"{} 0 => {}\", new_key, new_value);\n         });\n \n     // list all changed counts (key is in both maps but value differs)\n     new_stats_deduped\n         .iter()\n-        .filter(|(new_key, _new_val)| old_stats_deduped.get::<str>(&new_key).is_some())\n+        .filter(|(new_key, _new_val)| old_stats_deduped.get::<str>(new_key).is_some())\n         .for_each(|(new_key, new_val)| {\n-            let old_val = old_stats_deduped.get::<str>(&new_key).unwrap();\n+            let old_val = old_stats_deduped.get::<str>(new_key).unwrap();\n             println!(\"{} {} => {}\", new_key, old_val, new_val);\n         });\n \n     // list all gone counts (key is in old status but not in new stats)\n     old_stats_deduped\n         .iter()\n-        .filter(|(old_key, _)| new_stats_deduped.get::<&String>(&old_key).is_none())\n+        .filter(|(old_key, _)| new_stats_deduped.get::<&String>(old_key).is_none())\n         .filter(|(old_key, _)| lint_filter.is_empty() || lint_filter.contains(old_key))\n         .for_each(|(old_key, old_value)| {\n             println!(\"{} {} => 0\", old_key, old_value);\n@@ -832,12 +828,12 @@ fn create_dirs(krate_download_dir: &Path, extract_dir: &Path) {\n             panic!(\"cannot create lintcheck target dir\");\n         }\n     });\n-    std::fs::create_dir(&krate_download_dir).unwrap_or_else(|err| {\n+    std::fs::create_dir(krate_download_dir).unwrap_or_else(|err| {\n         if err.kind() != ErrorKind::AlreadyExists {\n             panic!(\"cannot create crate download dir\");\n         }\n     });\n-    std::fs::create_dir(&extract_dir).unwrap_or_else(|err| {\n+    std::fs::create_dir(extract_dir).unwrap_or_else(|err| {\n         if err.kind() != ErrorKind::AlreadyExists {\n             panic!(\"cannot create crate extraction dir\");\n         }\n@@ -863,7 +859,7 @@ fn lintcheck_test() {\n         \"lintcheck/test_sources.toml\",\n     ];\n     let status = std::process::Command::new(\"cargo\")\n-        .args(&args)\n+        .args(args)\n         .current_dir(\"..\") // repo root\n         .status();\n     //.output();"}, {"sha": "c10ee969c014620b996dafa32d94367d10db825a", "filename": "tests/compile-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -283,7 +283,7 @@ fn run_ui_cargo() {\n                 env::set_current_dir(&src_path)?;\n \n                 let cargo_toml_path = case.path().join(\"Cargo.toml\");\n-                let cargo_content = fs::read(&cargo_toml_path)?;\n+                let cargo_content = fs::read(cargo_toml_path)?;\n                 let cargo_parsed: toml::Value = toml::from_str(\n                     std::str::from_utf8(&cargo_content).expect(\"`Cargo.toml` is not a valid utf-8 file!\"),\n                 )"}, {"sha": "a6d8d0307ce536900c51a6986b034afc2690fa74", "filename": "tests/versioncheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cc8da222b3893bc13bc13c8827e93f8ea246854/tests%2Fversioncheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cc8da222b3893bc13bc13c8827e93f8ea246854/tests%2Fversioncheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fversioncheck.rs?ref=9cc8da222b3893bc13bc13c8827e93f8ea246854", "patch": "@@ -48,7 +48,7 @@ fn check_that_clippy_has_the_same_major_version_as_rustc() {\n     // `RUSTC_REAL` if Clippy is build in the Rust repo with `./x.py`.\n     let rustc = std::env::var(\"RUSTC_REAL\").unwrap_or_else(|_| \"rustc\".to_string());\n     let rustc_version = String::from_utf8(\n-        std::process::Command::new(&rustc)\n+        std::process::Command::new(rustc)\n             .arg(\"--version\")\n             .output()\n             .expect(\"failed to run `rustc --version`\")"}]}