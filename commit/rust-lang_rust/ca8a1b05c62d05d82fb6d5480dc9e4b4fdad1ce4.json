{"sha": "ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOGExYjA1YzYyZDA1ZDgyZmI2ZDU0ODBkYzllNGI0ZmRhZDFjZTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-29T02:14:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-29T02:14:21Z"}, "message": "Rollup merge of #79464 - GuillaumeGomez:doc-keyword-ident, r=jyn514\n\nExtend doc keyword feature by allowing any ident\n\nPart of #51315.\n\nAs suggested by ``@danielhenrymantilla`` in [this comment](https://github.com/rust-lang/rust/issues/51315#issuecomment-733879934), this PR extends `#[doc(keyword = \"...\")]` to allow any ident to be used as keyword. The final goal is to allow (proc-)macro crates' owners to write documentation of the keywords they might introduce.\n\nr? ``@jyn514``", "tree": {"sha": "6383f8334a0365e06e6c08a8778d8ab313761c72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6383f8334a0365e06e6c08a8778d8ab313761c72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwwP9CRBK7hj4Ov3rIwAAdHIIAG7cVtXJ2gmCbLF3aChz23lT\nTamvczNRJuaxDGUHx2njfPAXN5r4cRrTXgupV5HrxhgMwjVLujdts74QBQlOf0+G\nrj14USyGMdvhfRQrWCUnMkyk5XxwPZ6Em2+H01p42ZbPnNDXQC3/QCTjmKu32qTI\nCp9U8DmKIbWgOBnzGZWcp/TDonC15morxUvGIyplw57BkolY6lUHvncGHdlptGBs\nRF9rOB9SVHrhAUuHbKEs4t5PzOlyw3QL2HZxjr5DCMY5pfVqgbDNlhH0hCQzKnka\nt1c5jWTcikdW4NTqeyg0fvo3WI86nNh6+5fT4D145aP+DLNwhZGnqSFH32q0B5I=\n=0Bp+\n-----END PGP SIGNATURE-----\n", "payload": "tree 6383f8334a0365e06e6c08a8778d8ab313761c72\nparent d5d60364786f88bcea9d940ec056bb020c12aa5b\nparent 482b3accdd2390b1cd0ffee850fe1c21468b6798\nauthor Dylan DPC <dylan.dpc@gmail.com> 1606616061 +0100\ncommitter GitHub <noreply@github.com> 1606616061 +0100\n\nRollup merge of #79464 - GuillaumeGomez:doc-keyword-ident, r=jyn514\n\nExtend doc keyword feature by allowing any ident\n\nPart of #51315.\n\nAs suggested by ``@danielhenrymantilla`` in [this comment](https://github.com/rust-lang/rust/issues/51315#issuecomment-733879934), this PR extends `#[doc(keyword = \"...\")]` to allow any ident to be used as keyword. The final goal is to allow (proc-)macro crates' owners to write documentation of the keywords they might introduce.\n\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "html_url": "https://github.com/rust-lang/rust/commit/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d60364786f88bcea9d940ec056bb020c12aa5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d60364786f88bcea9d940ec056bb020c12aa5b", "html_url": "https://github.com/rust-lang/rust/commit/d5d60364786f88bcea9d940ec056bb020c12aa5b"}, {"sha": "482b3accdd2390b1cd0ffee850fe1c21468b6798", "url": "https://api.github.com/repos/rust-lang/rust/commits/482b3accdd2390b1cd0ffee850fe1c21468b6798", "html_url": "https://github.com/rust-lang/rust/commit/482b3accdd2390b1cd0ffee850fe1c21468b6798"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "523628b70582fc67934402d775ba794061f50f46", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "patch": "@@ -1590,11 +1590,6 @@ impl Symbol {\n         self == kw::Try\n     }\n \n-    /// Used for sanity checking rustdoc keyword sections.\n-    pub fn is_doc_keyword(self) -> bool {\n-        self <= kw::Union\n-    }\n-\n     /// A keyword or reserved identifier that can be used as a path segment.\n     pub fn is_path_segment_keyword(self) -> bool {\n         self == kw::Super"}, {"sha": "221c818736ea283a37186a8e0def167fa7567956", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "patch": "@@ -162,18 +162,30 @@ impl Clean<ExternalCrate> for CrateNum {\n                 .collect()\n         };\n \n+        let get_span =\n+            |attr: &ast::NestedMetaItem| Some(attr.meta_item()?.name_value_literal()?.span);\n+\n         let as_keyword = |res: Res| {\n             if let Res::Def(DefKind::Mod, def_id) = res {\n                 let attrs = cx.tcx.get_attrs(def_id).clean(cx);\n                 let mut keyword = None;\n                 for attr in attrs.lists(sym::doc) {\n-                    if let Some(v) = attr.value_str() {\n-                        if attr.has_name(sym::keyword) {\n-                            if v.is_doc_keyword() {\n-                                keyword = Some(v.to_string());\n-                                break;\n+                    if attr.has_name(sym::keyword) {\n+                        if let Some(v) = attr.value_str() {\n+                            let k = v.to_string();\n+                            if !rustc_lexer::is_ident(&k) {\n+                                let sp = get_span(&attr).unwrap_or_else(|| attr.span());\n+                                cx.tcx\n+                                    .sess\n+                                    .struct_span_err(\n+                                        sp,\n+                                        &format!(\"`{}` is not a valid identifier\", v),\n+                                    )\n+                                    .emit();\n+                            } else {\n+                                keyword = Some(k);\n                             }\n-                            // FIXME: should warn on unknown keywords?\n+                            break;\n                         }\n                     }\n                 }"}, {"sha": "ce2abc69bbd28be4fb43b29e4bdf31ff64eb7378", "filename": "src/test/rustdoc-ui/invalid-keyword.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.rs?ref=ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "patch": "@@ -0,0 +1,4 @@\n+#![feature(doc_keyword)]\n+\n+#[doc(keyword = \"foo df\")] //~ ERROR\n+mod foo {}"}, {"sha": "8658e3825782d84c2dea4363436fda570a860190", "filename": "src/test/rustdoc-ui/invalid-keyword.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-keyword.stderr?ref=ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "patch": "@@ -0,0 +1,8 @@\n+error: `foo df` is not a valid identifier\n+  --> $DIR/invalid-keyword.rs:3:17\n+   |\n+LL | #[doc(keyword = \"foo df\")]\n+   |                 ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "25e8b7912e772c7f7ddfa87b56009e914219cdd0", "filename": "src/test/rustdoc/keyword.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Ftest%2Frustdoc%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4/src%2Ftest%2Frustdoc%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fkeyword.rs?ref=ca8a1b05c62d05d82fb6d5480dc9e4b4fdad1ce4", "patch": "@@ -14,3 +14,8 @@\n #[doc(keyword = \"match\")]\n /// this is a test!\n mod foo{}\n+\n+// @has foo/keyword.foo.html '//section[@id=\"main\"]//div[@class=\"docblock\"]//p' 'hello'\n+#[doc(keyword = \"foo\")]\n+/// hello\n+mod bar {}"}]}