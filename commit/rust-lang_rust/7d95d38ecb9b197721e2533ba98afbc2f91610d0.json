{"sha": "7d95d38ecb9b197721e2533ba98afbc2f91610d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOTVkMzhlY2I5YjE5NzcyMWUyNTMzYmE5OGFmYmMyZjkxNjEwZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-29T15:35:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-29T15:35:28Z"}, "message": "fix join lines selection", "tree": {"sha": "51cf2370f95dedc1d7434be1b708e4afa0c7bf7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51cf2370f95dedc1d7434be1b708e4afa0c7bf7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d95d38ecb9b197721e2533ba98afbc2f91610d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d95d38ecb9b197721e2533ba98afbc2f91610d0", "html_url": "https://github.com/rust-lang/rust/commit/7d95d38ecb9b197721e2533ba98afbc2f91610d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d95d38ecb9b197721e2533ba98afbc2f91610d0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ea0ca7e5fb5d3e123dc38927b158c798b689ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ea0ca7e5fb5d3e123dc38927b158c798b689ad", "html_url": "https://github.com/rust-lang/rust/commit/09ea0ca7e5fb5d3e123dc38927b158c798b689ad"}], "stats": {"total": 112, "additions": 54, "deletions": 58}, "files": [{"sha": "5893efaf6ac56ca0757b5a8e56691786fc51ad26", "filename": "crates/libanalysis/tests/tests.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibanalysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibanalysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Ftests%2Ftests.rs?ref=7d95d38ecb9b197721e2533ba98afbc2f91610d0", "patch": "@@ -41,23 +41,21 @@ fn test_resolve_module() {\n     world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n     world.change_file(FileId(2), Some(\"\".to_string()));\n \n-    let snap = world.snapshot(FileMap(&[\n+    let snap = world.analysis(FileMap(&[\n         (1, \"/lib.rs\"),\n         (2, \"/foo.rs\"),\n     ]));\n-    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into())\n-        .unwrap();\n+    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into());\n     assert_eq_dbg(\n         r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n         &symbols,\n     );\n \n-    let snap = world.snapshot(FileMap(&[\n+    let snap = world.analysis(FileMap(&[\n         (1, \"/lib.rs\"),\n         (2, \"/foo/mod.rs\")\n     ]));\n-    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into())\n-        .unwrap();\n+    let symbols = snap.approximately_resolve_symbol(FileId(1), 4.into());\n     assert_eq_dbg(\n         r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n         &symbols,\n@@ -69,11 +67,17 @@ fn test_unresolved_module_diagnostic() {\n     let mut world = WorldState::new();\n     world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n \n-    let snap = world.snapshot(FileMap(&[(1, \"/lib.rs\")]));\n-    let diagnostics = snap.diagnostics(FileId(1)).unwrap();\n+    let snap = world.analysis(FileMap(&[(1, \"/lib.rs\")]));\n+    let diagnostics = snap.diagnostics(FileId(1));\n     assert_eq_dbg(\n-        r#\"[(Diagnostic { range: [4; 7), msg: \"unresolved module\" },\n-             Some(QuickFix { fs_ops: [CreateFile { anchor: FileId(1), path: \"../foo.rs\" }] }))]\"#,\n+        r#\"[Diagnostic {\n+            message: \"unresolved module\",\n+            range: [4; 7),\n+            fix: Some(SourceChange {\n+                label: \"create module\",\n+                source_file_edits: [],\n+                file_system_edits: [CreateFile { anchor: FileId(1), path: \"../foo.rs\" }],\n+                cursor_position: None }) }]\"#,\n         &diagnostics,\n     );\n }\n@@ -83,8 +87,8 @@ fn test_unresolved_module_diagnostic_no_diag_for_inline_mode() {\n     let mut world = WorldState::new();\n     world.change_file(FileId(1), Some(\"mod foo {}\".to_string()));\n \n-    let snap = world.snapshot(FileMap(&[(1, \"/lib.rs\")]));\n-    let diagnostics = snap.diagnostics(FileId(1)).unwrap();\n+    let snap = world.analysis(FileMap(&[(1, \"/lib.rs\")]));\n+    let diagnostics = snap.diagnostics(FileId(1));\n     assert_eq_dbg(\n         r#\"[]\"#,\n         &diagnostics,\n@@ -97,7 +101,7 @@ fn test_resolve_parent_module() {\n     world.change_file(FileId(1), Some(\"mod foo;\".to_string()));\n     world.change_file(FileId(2), Some(\"\".to_string()));\n \n-    let snap = world.snapshot(FileMap(&[\n+    let snap = world.analysis(FileMap(&[\n         (1, \"/lib.rs\"),\n         (2, \"/foo.rs\"),\n     ]));"}, {"sha": "522b605ed5501e743506bcd8ccc22ca1444d7ec4", "filename": "crates/libeditor/src/code_actions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcode_actions.rs?ref=7d95d38ecb9b197721e2533ba98afbc2f91610d0", "patch": "@@ -13,7 +13,6 @@ use libsyntax2::{\n \n use {EditBuilder, Edit, find_node_at_offset};\n \n-// TODO: rename to FileEdit\n #[derive(Debug)]\n pub struct LocalEdit {\n     pub edit: Edit,"}, {"sha": "09cf2bd006b28bf5fce43d29b346cb47432e4652", "filename": "crates/libeditor/src/edit.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibeditor%2Fsrc%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibeditor%2Fsrc%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fedit.rs?ref=7d95d38ecb9b197721e2533ba98afbc2f91610d0", "patch": "@@ -1,5 +1,8 @@\n use {TextRange, TextUnit};\n-use libsyntax2::AtomEdit;\n+use libsyntax2::{\n+    AtomEdit,\n+    text_utils::contains_offset_nonstrict,\n+};\n \n #[derive(Debug, Clone)]\n pub struct Edit {\n@@ -15,19 +18,15 @@ impl EditBuilder {\n     pub fn new() -> EditBuilder {\n         EditBuilder { atoms: Vec::new() }\n     }\n-\n     pub fn replace(&mut self, range: TextRange, replace_with: String) {\n         self.atoms.push(AtomEdit::replace(range, replace_with))\n     }\n-\n     pub fn delete(&mut self, range: TextRange) {\n         self.atoms.push(AtomEdit::delete(range))\n     }\n-\n     pub fn insert(&mut self, offset: TextUnit, text: String) {\n         self.atoms.push(AtomEdit::insert(offset, text))\n     }\n-\n     pub fn finish(self) -> Edit {\n         let mut atoms = self.atoms;\n         atoms.sort_by_key(|a| a.delete.start());\n@@ -36,6 +35,9 @@ impl EditBuilder {\n         }\n         Edit { atoms }\n     }\n+    pub fn invalidates_offset(&self, offset: TextUnit) -> bool {\n+        self.atoms.iter().any(|atom| contains_offset_nonstrict(atom.delete, offset))\n+    }\n }\n \n impl Edit {"}, {"sha": "826b16181d994a614fbb1583cc1500ce5f43c35f", "filename": "crates/libeditor/src/typing.rs", "status": "modified", "additions": 30, "deletions": 39, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d95d38ecb9b197721e2533ba98afbc2f91610d0/crates%2Flibeditor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Ftyping.rs?ref=7d95d38ecb9b197721e2533ba98afbc2f91610d0", "patch": "@@ -45,10 +45,11 @@ pub fn join_lines(file: &File, range: TextRange) -> LocalEdit {\n         for (pos, _) in text[range].bytes().enumerate().filter(|&(_, b)| b == b'\\n') {\n             let pos: TextUnit = (pos as u32).into();\n             let off = node.range().start() + range.start() + pos;\n-            remove_newline(&mut edit, node, text.as_str(), off);\n+            if !edit.invalidates_offset(off) {\n+                remove_newline(&mut edit, node, text.as_str(), off);\n+            }\n         }\n     }\n-    eprintln!(\"{:?}\", edit);\n \n     LocalEdit {\n         edit: edit.finish(),\n@@ -239,17 +240,17 @@ fn foo() {\n }\");\n     }\n \n-    #[test]\n-    fn test_join_lines_selection() {\n-        fn do_check(before: &str, after: &str) {\n-            let (sel, before) = extract_range(before);\n-            let file = File::parse(&before);\n-            let result = join_lines(&file, sel);\n-            let actual = result.edit.apply(&before);\n-            assert_eq_text!(after, &actual);\n-        }\n+    fn check_join_lines_sel(before: &str, after: &str) {\n+        let (sel, before) = extract_range(before);\n+        let file = File::parse(&before);\n+        let result = join_lines(&file, sel);\n+        let actual = result.edit.apply(&before);\n+        assert_eq_text!(after, &actual);\n+    }\n \n-        do_check(r\"\n+    #[test]\n+    fn test_join_lines_selection_fn_args() {\n+        check_join_lines_sel(r\"\n fn foo() {\n     <|>foo(1,\n         2,\n@@ -261,15 +262,22 @@ fn foo() {\n     foo(1, 2, 3)\n }\n     \");\n+    }\n \n-        do_check(r\"\n+    #[test]\n+    fn test_join_lines_selection_struct() {\n+        check_join_lines_sel(r\"\n struct Foo <|>{\n     f: u32,\n }<|>\n     \", r\"\n struct Foo { f: u32 }\n     \");\n-        do_check(r\"\n+    }\n+\n+    #[test]\n+    fn test_join_lines_selection_dot_chain() {\n+        check_join_lines_sel(r\"\n fn foo() {\n     join(<|>type_params.type_params()\n             .filter_map(|it| it.name())\n@@ -278,39 +286,22 @@ fn foo() {\n fn foo() {\n     join(type_params.type_params().filter_map(|it| it.name()).map(|it| it.text()))\n }\");\n+    }\n \n-        do_check(r\"\n-pub fn handle_find_matching_brace(\n-    world: ServerWorld,\n-    params: req::FindMatchingBraceParams,\n-) -> Result<Vec<Position>> {\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let file = world.analysis().file_syntax(file_id);\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let res = params.offsets\n-        .into_iter()\n-        .map_conv_with(&line_index)\n+    #[test]\n+    fn test_join_lines_selection_lambda_block_body() {\n+        check_join_lines_sel(r\"\n+pub fn handle_find_matching_brace() {\n+    params.offsets\n         .map(|offset| <|>{\n             world.analysis().matching_brace(&file, offset).unwrap_or(offset)\n         }<|>)\n-        .map_conv_with(&line_index)\n         .collect();\n-    Ok(res)\n }\", r\"\n-pub fn handle_find_matching_brace(\n-    world: ServerWorld,\n-    params: req::FindMatchingBraceParams,\n-) -> Result<Vec<Position>> {\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let file = world.analysis().file_syntax(file_id);\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let res = params.offsets\n-        .into_iter()\n-        .map_conv_with(&line_index)\n+pub fn handle_find_matching_brace() {\n+    params.offsets\n         .map(|offset| world.analysis().matching_brace(&file, offset).unwrap_or(offset))\n-        .map_conv_with(&line_index)\n         .collect();\n-    Ok(res)\n }\");\n     }\n "}]}