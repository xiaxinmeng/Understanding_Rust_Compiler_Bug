{"sha": "18d970164524ae3f51f97b30080d061f2007c046", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZDk3MDE2NDUyNGFlM2Y1MWY5N2IzMDA4MGQwNjFmMjAwN2MwNDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-19T20:12:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-19T20:12:58Z"}, "message": "Add an extra note to `late_bound_lifetime_arguments` error/lint", "tree": {"sha": "f8528cb513aaf3c6024db6d30eb5f5f485ae88df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8528cb513aaf3c6024db6d30eb5f5f485ae88df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d970164524ae3f51f97b30080d061f2007c046", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d970164524ae3f51f97b30080d061f2007c046", "html_url": "https://github.com/rust-lang/rust/commit/18d970164524ae3f51f97b30080d061f2007c046", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d970164524ae3f51f97b30080d061f2007c046/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344f01cf1322d61bad109b503d0e6a1b55d6ed31", "url": "https://api.github.com/repos/rust-lang/rust/commits/344f01cf1322d61bad109b503d0e6a1b55d6ed31", "html_url": "https://github.com/rust-lang/rust/commit/344f01cf1322d61bad109b503d0e6a1b55d6ed31"}], "stats": {"total": 164, "additions": 140, "deletions": 24}, "files": [{"sha": "2a11b19f8556141551ae97de7932ddc83da358d5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d970164524ae3f51f97b30080d061f2007c046/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d970164524ae3f51f97b30080d061f2007c046/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=18d970164524ae3f51f97b30080d061f2007c046", "patch": "@@ -719,7 +719,7 @@ pub struct Generics {\n     pub type_param_to_index: BTreeMap<DefIndex, u32>,\n \n     pub has_self: bool,\n-    pub has_late_bound_regions: bool,\n+    pub has_late_bound_regions: Option<Span>,\n }\n \n impl Generics {"}, {"sha": "b086c427ba59f7420b68b1f3a98e9c82e1ff33ac", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/18d970164524ae3f51f97b30080d061f2007c046/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d970164524ae3f51f97b30080d061f2007c046/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=18d970164524ae3f51f97b30080d061f2007c046", "patch": "@@ -121,7 +121,7 @@ use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, InternedString, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n-use syntax_pos::{self, BytePos, Span};\n+use syntax_pos::{self, BytePos, Span, MultiSpan};\n \n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -4689,20 +4689,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Prohibit explicit lifetime arguments if late bound lifetime parameters are present.\n         let has_late_bound_lifetime_defs =\n-            segment.map_or(false, |(_, generics)| generics.has_late_bound_regions);\n-        if has_late_bound_lifetime_defs && !lifetimes.is_empty() {\n+            segment.map_or(None, |(_, generics)| generics.has_late_bound_regions);\n+        if let (Some(span_late), false) = (has_late_bound_lifetime_defs, lifetimes.is_empty()) {\n             // Report this as a lint only if no error was reported previously.\n+            let primary_msg = \"cannot specify lifetime arguments explicitly \\\n+                               if late bound lifetime parameters are present\";\n+            let note_msg = \"the late bound lifetime parameter is introduced here\";\n             if !is_method_call && (lifetimes.len() > lifetime_defs.len() ||\n                                    lifetimes.len() < required_len && !infer_lifetimes) {\n-                self.tcx.sess.span_err(lifetimes[0].span,\n-                                       \"cannot specify lifetime arguments explicitly \\\n-                                        if late bound lifetime parameters are present\");\n+                let mut err = self.tcx.sess.struct_span_err(lifetimes[0].span, primary_msg);\n+                err.span_note(span_late, note_msg);\n+                err.emit();\n                 *segment = None;\n             } else {\n+                let mut multispan = MultiSpan::from_span(lifetimes[0].span);\n+                multispan.push_span_label(span_late, note_msg.to_string());\n                 self.tcx.sess.add_lint(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n-                                       lifetimes[0].id, lifetimes[0].span,\n-                                       format!(\"cannot specify lifetime arguments explicitly \\\n-                                                if late bound lifetime parameters are present\"));\n+                                       lifetimes[0].id, multispan, primary_msg.to_string());\n             }\n             return;\n         }"}, {"sha": "143079b0a082347bc2f3bf0e25ecd4cc14f97039", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18d970164524ae3f51f97b30080d061f2007c046/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d970164524ae3f51f97b30080d061f2007c046/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=18d970164524ae3f51f97b30080d061f2007c046", "patch": "@@ -774,11 +774,11 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     node: hir_map::Node<'tcx>)\n-                                    -> bool {\n+                                    -> Option<Span> {\n     struct LateBoundRegionsDetector<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         binder_depth: u32,\n-        has_late_bound_regions: bool,\n+        has_late_bound_regions: Option<Span>,\n     }\n \n     impl<'a, 'tcx> Visitor<'tcx> for LateBoundRegionsDetector<'a, 'tcx> {\n@@ -787,7 +787,7 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n \n         fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-            if self.has_late_bound_regions { return }\n+            if self.has_late_bound_regions.is_some() { return }\n             match ty.node {\n                 hir::TyBareFn(..) => {\n                     self.binder_depth += 1;\n@@ -801,35 +801,35 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         fn visit_poly_trait_ref(&mut self,\n                                 tr: &'tcx hir::PolyTraitRef,\n                                 m: hir::TraitBoundModifier) {\n-            if self.has_late_bound_regions { return }\n+            if self.has_late_bound_regions.is_some() { return }\n             self.binder_depth += 1;\n             intravisit::walk_poly_trait_ref(self, tr, m);\n             self.binder_depth -= 1;\n         }\n \n         fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n-            if self.has_late_bound_regions { return }\n+            if self.has_late_bound_regions.is_some() { return }\n \n             match self.tcx.named_region_map.defs.get(&lt.id).cloned() {\n                 Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n                 Some(rl::Region::LateBound(debruijn, _)) |\n                 Some(rl::Region::LateBoundAnon(debruijn, _))\n                     if debruijn.depth < self.binder_depth => {}\n-                _ => self.has_late_bound_regions = true,\n+                _ => self.has_late_bound_regions = Some(lt.span),\n             }\n         }\n     }\n \n     fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         generics: &'tcx hir::Generics,\n                                         decl: &'tcx hir::FnDecl)\n-                                        -> bool {\n+                                        -> Option<Span> {\n         let mut visitor = LateBoundRegionsDetector {\n-            tcx, binder_depth: 1, has_late_bound_regions: false\n+            tcx, binder_depth: 1, has_late_bound_regions: None\n         };\n         for lifetime in &generics.lifetimes {\n             if tcx.named_region_map.late_bound.contains(&lifetime.lifetime.id) {\n-                return true;\n+                return Some(lifetime.lifetime.span);\n             }\n         }\n         visitor.visit_fn_decl(decl);\n@@ -840,24 +840,24 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         hir_map::NodeTraitItem(item) => match item.node {\n             hir::TraitItemKind::Method(ref sig, _) =>\n                 has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n-            _ => false,\n+            _ => None,\n         },\n         hir_map::NodeImplItem(item) => match item.node {\n             hir::ImplItemKind::Method(ref sig, _) =>\n                 has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n-            _ => false,\n+            _ => None,\n         },\n         hir_map::NodeForeignItem(item) => match item.node {\n             hir::ForeignItemFn(ref fn_decl, _, ref generics) =>\n                 has_late_bound_regions(tcx, generics, fn_decl),\n-            _ => false,\n+            _ => None,\n         },\n         hir_map::NodeItem(item) => match item.node {\n             hir::ItemFn(ref fn_decl, .., ref generics, _) =>\n                 has_late_bound_regions(tcx, generics, fn_decl),\n-            _ => false,\n+            _ => None,\n         },\n-        _ => false\n+        _ => None\n     }\n }\n "}, {"sha": "f9a4f712e571cc57b53053d5e5579c52b9c7c7de", "filename": "src/test/ui/method-call-lifetime-args-lint.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-lifetime-args-lint.rs?ref=18d970164524ae3f51f97b30080d061f2007c046", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(late_bound_lifetime_arguments)]\n+#![allow(unused)]\n+\n+struct S;\n+\n+impl S {\n+    fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+    fn late_implicit(self, _: &u8, _: &u8) {}\n+}\n+\n+fn method_call() {\n+    S.late::<'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+\n+    S.late_implicit::<'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+}\n+\n+fn main() {}"}, {"sha": "e319b54aa2cae253b018f3b761b80ffc9737e37d", "filename": "src/test/ui/method-call-lifetime-args-lint.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-lifetime-args-lint.stderr?ref=18d970164524ae3f51f97b30080d061f2007c046", "patch": "@@ -0,0 +1,31 @@\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/method-call-lifetime-args-lint.rs:22:14\n+   |\n+17 |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+   |             -- the late bound lifetime parameter is introduced here\n+...\n+22 |     S.late::<'static>(&0, &0);\n+   |              ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/method-call-lifetime-args-lint.rs:11:9\n+   |\n+11 | #![deny(late_bound_lifetime_arguments)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/method-call-lifetime-args-lint.rs:26:23\n+   |\n+18 |     fn late_implicit(self, _: &u8, _: &u8) {}\n+   |                               - the late bound lifetime parameter is introduced here\n+...\n+26 |     S.late_implicit::<'static>(&0, &0);\n+   |                       ^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7ce3ebb8beec46abfcf5c62434d926fe101d8fc3", "filename": "src/test/ui/method-call-lifetime-args.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-lifetime-args.rs?ref=18d970164524ae3f51f97b30080d061f2007c046", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl S {\n+    fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+    fn late_implicit(self, _: &u8, _: &u8) {}\n+}\n+\n+fn ufcs() {\n+    S::late::<'static>(S, &0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late_implicit::<'static>(S, &0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+}\n+\n+fn main() {}"}, {"sha": "a6c1b8efe279179bdc3baf8c1435b8680b2ab0a5", "filename": "src/test/ui/method-call-lifetime-args.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18d970164524ae3f51f97b30080d061f2007c046/src%2Ftest%2Fui%2Fmethod-call-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-lifetime-args.stderr?ref=18d970164524ae3f51f97b30080d061f2007c046", "patch": "@@ -0,0 +1,26 @@\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/method-call-lifetime-args.rs:19:15\n+   |\n+19 |     S::late::<'static>(S, &0, &0);\n+   |               ^^^^^^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/method-call-lifetime-args.rs:14:13\n+   |\n+14 |     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+   |             ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/method-call-lifetime-args.rs:21:24\n+   |\n+21 |     S::late_implicit::<'static>(S, &0, &0);\n+   |                        ^^^^^^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/method-call-lifetime-args.rs:15:31\n+   |\n+15 |     fn late_implicit(self, _: &u8, _: &u8) {}\n+   |                               ^\n+\n+error: aborting due to 2 previous errors\n+"}]}