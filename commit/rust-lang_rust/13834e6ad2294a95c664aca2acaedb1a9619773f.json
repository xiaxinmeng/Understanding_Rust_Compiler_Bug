{"sha": "13834e6ad2294a95c664aca2acaedb1a9619773f", "node_id": "C_kwDOAAsO6NoAKDEzODM0ZTZhZDIyOTRhOTVjNjY0YWNhMmFjYWVkYjFhOTYxOTc3M2Y", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-28T05:33:45Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-28T05:33:45Z"}, "message": "fmt", "tree": {"sha": "615772ed24f953ebcfc8a5e95ef9d84a183b5f65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615772ed24f953ebcfc8a5e95ef9d84a183b5f65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13834e6ad2294a95c664aca2acaedb1a9619773f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13834e6ad2294a95c664aca2acaedb1a9619773f", "html_url": "https://github.com/rust-lang/rust/commit/13834e6ad2294a95c664aca2acaedb1a9619773f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13834e6ad2294a95c664aca2acaedb1a9619773f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17155c8dca9386e865fd92a259694246a5120ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/17155c8dca9386e865fd92a259694246a5120ed8", "html_url": "https://github.com/rust-lang/rust/commit/17155c8dca9386e865fd92a259694246a5120ed8"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "c7de06f0815a4023f55620b01d1c3988ef60ef3c", "filename": "clippy_lints/src/match_result_ok.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13834e6ad2294a95c664aca2acaedb1a9619773f/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13834e6ad2294a95c664aca2acaedb1a9619773f/clippy_lints%2Fsrc%2Fmatch_result_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_result_ok.rs?ref=13834e6ad2294a95c664aca2acaedb1a9619773f", "patch": "@@ -47,13 +47,14 @@ declare_lint_pass!(MatchResultOk => [MATCH_RESULT_OK]);\n \n impl<'tcx> LateLintPass<'tcx> for MatchResultOk {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        let (let_pat, let_expr, ifwhile) = if let Some(higher::IfLet { let_pat, let_expr, .. }) = higher::IfLet::hir(cx, expr) {\n-            (let_pat, let_expr, \"if\")\n-        } else if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n-            (let_pat, let_expr, \"while\")\n-        } else {\n-            return\n-        };\n+        let (let_pat, let_expr, ifwhile) =\n+            if let Some(higher::IfLet { let_pat, let_expr, .. }) = higher::IfLet::hir(cx, expr) {\n+                (let_pat, let_expr, \"if\")\n+            } else if let Some(higher::WhileLet { let_pat, let_expr, .. }) = higher::WhileLet::hir(expr) {\n+                (let_pat, let_expr, \"while\")\n+            } else {\n+                return;\n+            };\n \n         if_chain! {\n             if let ExprKind::MethodCall(_, ok_span, [ref result_types_0, ..], _) = let_expr.kind; //check is expr.ok() has type Result<T,E>.ok(, _)"}]}