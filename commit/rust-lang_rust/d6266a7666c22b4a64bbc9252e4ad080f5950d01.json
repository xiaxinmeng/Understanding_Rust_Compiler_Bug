{"sha": "d6266a7666c22b4a64bbc9252e4ad080f5950d01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjY2YTc2NjZjMjJiNGE2NGJiYzkyNTJlNGFkMDgwZjU5NTBkMDE=", "commit": {"author": {"name": "lcnr/Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2019-06-03T10:59:17Z"}, "committer": {"name": "lcnr/Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2019-06-03T10:59:17Z"}, "message": "add support for unchecked math", "tree": {"sha": "3c458e1cf8a848c5b965883b972b680d36744770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c458e1cf8a848c5b965883b972b680d36744770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6266a7666c22b4a64bbc9252e4ad080f5950d01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6266a7666c22b4a64bbc9252e4ad080f5950d01", "html_url": "https://github.com/rust-lang/rust/commit/d6266a7666c22b4a64bbc9252e4ad080f5950d01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6266a7666c22b4a64bbc9252e4ad080f5950d01/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d461555e443a07bc75564b8322dc461efe7cea7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d461555e443a07bc75564b8322dc461efe7cea7c", "html_url": "https://github.com/rust-lang/rust/commit/d461555e443a07bc75564b8322dc461efe7cea7c"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "102e9e38612e065e227f73d36588be9a2249fcf7", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6266a7666c22b4a64bbc9252e4ad080f5950d01/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6266a7666c22b4a64bbc9252e4ad080f5950d01/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=d6266a7666c22b4a64bbc9252e4ad080f5950d01", "patch": "@@ -265,6 +265,12 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         neg(x) => LLVMBuildNeg,\n         fneg(x) => LLVMBuildFNeg,\n         not(x) => LLVMBuildNot,\n+        unchecked_sadd(x, y) => LLVMBuildNSWAdd,\n+        unchecked_uadd(x, y) => LLVMBuildNUWAdd,\n+        unchecked_ssub(x, y) => LLVMBuildNSWSub,\n+        unchecked_usub(x, y) => LLVMBuildNUWSub,\n+        unchecked_smul(x, y) => LLVMBuildNSWMul,\n+        unchecked_umul(x, y) => LLVMBuildNUWMul,\n     }\n \n     fn fadd_fast(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {"}, {"sha": "a71243c7c826b9e6361814f376de9bcb7f377269", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d6266a7666c22b4a64bbc9252e4ad080f5950d01/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6266a7666c22b4a64bbc9252e4ad080f5950d01/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=d6266a7666c22b4a64bbc9252e4ad080f5950d01", "patch": "@@ -1002,6 +1002,36 @@ extern \"C\" {\n                          RHS: &'a Value,\n                          Name: *const c_char)\n                          -> &'a Value;\n+    pub fn LLVMBuildNSWAdd(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNUWAdd(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNSWSub(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNUWSub(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNSWMul(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n+    pub fn LLVMBuildNUWMul(B: &Builder<'a>,\n+                           LHS: &'a Value,\n+                           RHS: &'a Value,\n+                           Name: *const c_char)\n+                           -> &'a Value;\n     pub fn LLVMBuildAnd(B: &Builder<'a>,\n                         LHS: &'a Value,\n                         RHS: &'a Value,"}, {"sha": "a11d1ba9231cc52dbd72949656b8db240cbe7ca9", "filename": "src/librustc_codegen_ssa/traits/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6266a7666c22b4a64bbc9252e4ad080f5950d01/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6266a7666c22b4a64bbc9252e4ad080f5950d01/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbuilder.rs?ref=d6266a7666c22b4a64bbc9252e4ad080f5950d01", "patch": "@@ -88,6 +88,12 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn shl(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn lshr(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn ashr(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_sadd(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_uadd(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_ssub(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_usub(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_smul(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n+    fn unchecked_umul(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn and(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn or(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;\n     fn xor(&mut self, lhs: Self::Value, rhs: Self::Value) -> Self::Value;"}]}