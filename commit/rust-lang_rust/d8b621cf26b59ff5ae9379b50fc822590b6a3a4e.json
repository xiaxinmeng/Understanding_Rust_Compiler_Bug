{"sha": "d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjYyMWNmMjZiNTlmZjVhZTkzNzliNTBmYzgyMjU5MGI2YTNhNGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-12T18:35:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-12T18:35:06Z"}, "message": "Merge #1832\n\n1832: start cleaning up the resolution r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "381f2d4a92db5cdfd35c9e76d5c6b11bcb247c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/381f2d4a92db5cdfd35c9e76d5c6b11bcb247c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdeo/aCRBK7hj4Ov3rIwAAdHIIAE7J5HQnszUeia50SDBC5VGo\nCh+ZFLXeUAROlEE79pRilmiGNhYw3F7fQu1fzNrd8qKJTB23paNKFVt2x02MTNWz\nPBwi8ei9Vb4mU5QQk3Kwll5yGJYIRqq20/Ldpmb1tP5TgcbtYEDQR9xe9Ubx+ci8\neDP2ZSLAyg+1qH9Sizf1shjFfxAPI6+eygOpTcz65hfR/oQHYblGbBT+7FPFKIi4\nSM0VT62E7Z+gJE1dZd2HtaM7yeSAvq3gU+YbHxKtQ4CPNaIjIw0mrkfgQZW4R3qi\nRfE4AyThtapXyauPa13Qm83jslR1oHRV9fFMABqtSvu7sxtnAH7/ik4jdVIobjM=\n=cifw\n-----END PGP SIGNATURE-----\n", "payload": "tree 381f2d4a92db5cdfd35c9e76d5c6b11bcb247c41\nparent 5c09c5949a94012b5ae95735dc8c086efd5039e4\nparent 63e1e63a9160d28597a8d77fd83c43a2c90d3f6b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568313306 +0000\ncommitter GitHub <noreply@github.com> 1568313306 +0000\n\nMerge #1832\n\n1832: start cleaning up the resolution r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "html_url": "https://github.com/rust-lang/rust/commit/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c09c5949a94012b5ae95735dc8c086efd5039e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c09c5949a94012b5ae95735dc8c086efd5039e4", "html_url": "https://github.com/rust-lang/rust/commit/5c09c5949a94012b5ae95735dc8c086efd5039e4"}, {"sha": "63e1e63a9160d28597a8d77fd83c43a2c90d3f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e1e63a9160d28597a8d77fd83c43a2c90d3f6b", "html_url": "https://github.com/rust-lang/rust/commit/63e1e63a9160d28597a8d77fd83c43a2c90d3f6b"}], "stats": {"total": 108, "additions": 59, "deletions": 49}, "files": [{"sha": "c985dbdadfa1b2d702aa3ea126725f17e7cb2aa7", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     name,\n     path::{PathKind, PathSegment},\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n-    Function, ModuleDef, Name, Path, PerNs, Resolution,\n+    Function, Name, Path,\n };\n \n use super::{Expr, ExprId, RecordLitField};\n@@ -119,11 +119,10 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n \n         let resolver = self.func.resolver(db);\n-        let std_result_enum =\n-            match resolver.resolve_path_segments(db, &std_result_path).into_fully_resolved() {\n-                PerNs { types: Some(Resolution::Def(ModuleDef::Enum(e))), .. } => e,\n-                _ => return,\n-            };\n+        let std_result_enum = match resolver.resolve_known_enum(db, &std_result_path) {\n+            Some(it) => it,\n+            _ => return,\n+        };\n \n         let std_result_ctor = TypeCtor::Adt(AdtDef::Enum(std_result_enum));\n         let params = match &mismatch.expected {"}, {"sha": "1ed150f5a3dea8d7e5adab20ccf6a85e627b6e40", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "patch": "@@ -15,7 +15,7 @@ use crate::{\n     name::{Name, SELF_PARAM, SELF_TYPE},\n     nameres::{CrateDefMap, CrateModuleId, PerNs},\n     path::Path,\n-    MacroDef, ModuleDef, Trait,\n+    Enum, MacroDef, ModuleDef, Struct, Trait,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -39,6 +39,8 @@ pub(crate) struct ExprScope {\n #[derive(Debug, Clone)]\n pub(crate) struct PathResult {\n     /// The actual path resolution\n+    // FIXME: `PerNs<Resolution>` type doesn't make sense, as not every\n+    // Resolution variant can appear in every namespace\n     resolution: PerNs<Resolution>,\n     /// The first index in the path that we\n     /// were unable to resolve.\n@@ -113,6 +115,9 @@ pub(crate) enum Scope {\n pub enum Resolution {\n     /// An item\n     Def(ModuleDef),\n+\n+    // FIXME: there's no way we can syntactically confuse a local with generic\n+    // param, so these two should not be members of the single enum\n     /// A local binding (only value namespace)\n     LocalBinding(PatId),\n     /// A generic parameter\n@@ -121,6 +126,37 @@ pub enum Resolution {\n }\n \n impl Resolver {\n+    /// Resolve known trait from std, like `std::futures::Future`\n+    pub(crate) fn resolve_known_trait(&self, db: &impl HirDatabase, path: &Path) -> Option<Trait> {\n+        let res = self.resolve_path_segments(db, path).into_fully_resolved().take_types()?;\n+        match res {\n+            Resolution::Def(ModuleDef::Trait(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Resolve known struct from std, like `std::boxed::Box`\n+    pub(crate) fn resolve_known_struct(\n+        &self,\n+        db: &impl HirDatabase,\n+        path: &Path,\n+    ) -> Option<Struct> {\n+        let res = self.resolve_path_segments(db, path).into_fully_resolved().take_types()?;\n+        match res {\n+            Resolution::Def(ModuleDef::Struct(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n+    /// Resolve known enum from std, like `std::result::Result`\n+    pub(crate) fn resolve_known_enum(&self, db: &impl HirDatabase, path: &Path) -> Option<Enum> {\n+        let res = self.resolve_path_segments(db, path).into_fully_resolved().take_types()?;\n+        match res {\n+            Resolution::Def(ModuleDef::Enum(it)) => Some(it),\n+            _ => None,\n+        }\n+    }\n+\n     pub(crate) fn resolve_name(&self, db: &impl HirDatabase, name: &Name) -> PerNs<Resolution> {\n         let mut resolution = PerNs::none();\n         for scope in self.scopes.iter().rev() {"}, {"sha": "65b304b4333230c17a98cf14fbaf6784eff37ac4", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "patch": "@@ -29,7 +29,7 @@ use crate::{\n     path::{PathKind, PathSegment},\n     ty::method_resolution::implements_trait,\n     AsName, AstId, Const, Crate, DefWithBody, Either, Enum, Function, HasBody, HirFileId, MacroDef,\n-    Module, ModuleDef, Name, Path, PerNs, Resolution, Resolver, Static, Struct, Trait, Ty,\n+    Module, Name, Path, PerNs, Resolver, Static, Struct, Trait, Ty,\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n@@ -426,11 +426,10 @@ impl SourceAnalyzer {\n             ],\n         };\n \n-        let std_future_trait =\n-            match self.resolver.resolve_path_segments(db, &std_future_path).into_fully_resolved() {\n-                PerNs { types: Some(Resolution::Def(ModuleDef::Trait(trait_))), .. } => trait_,\n-                _ => return false,\n-            };\n+        let std_future_trait = match self.resolver.resolve_known_trait(db, &std_future_path) {\n+            Some(it) => it,\n+            _ => return false,\n+        };\n \n         let krate = match self.resolver.krate() {\n             Some(krate) => krate,"}, {"sha": "3970c49e32e008d1fa647f4062d1d41c06ea354d", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "patch": "@@ -34,7 +34,7 @@ use super::{\n };\n use crate::{\n     adt::VariantDef,\n-    code_model::{ModuleDef::Trait, TypeAlias},\n+    code_model::TypeAlias,\n     db::HirDatabase,\n     diagnostics::DiagnosticSink,\n     expr::{\n@@ -43,12 +43,9 @@ use crate::{\n     },\n     generics::{GenericParams, HasGenericParams},\n     name,\n-    nameres::{Namespace, PerNs},\n+    nameres::Namespace,\n     path::{GenericArg, GenericArgs, PathKind, PathSegment},\n-    resolve::{\n-        Resolution::{self, Def},\n-        Resolver,\n-    },\n+    resolve::{Resolution, Resolver},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n     AdtDef, ConstData, DefWithBody, FnData, Function, HasBody, ImplItem, ModuleDef, Name, Path,\n@@ -1460,12 +1457,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             ],\n         };\n \n-        match self.resolver.resolve_path_segments(self.db, &into_iter_path).into_fully_resolved() {\n-            PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, &name::ITEM)?)\n-            }\n-            _ => None,\n-        }\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &into_iter_path)?;\n+        trait_.associated_type_by_name(self.db, &name::ITEM)\n     }\n \n     fn resolve_ops_try_ok(&self) -> Option<TypeAlias> {\n@@ -1478,12 +1471,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             ],\n         };\n \n-        match self.resolver.resolve_path_segments(self.db, &ops_try_path).into_fully_resolved() {\n-            PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, &name::OK)?)\n-            }\n-            _ => None,\n-        }\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &ops_try_path)?;\n+        trait_.associated_type_by_name(self.db, &name::OK)\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAlias> {\n@@ -1496,16 +1485,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             ],\n         };\n \n-        match self\n-            .resolver\n-            .resolve_path_segments(self.db, &future_future_path)\n-            .into_fully_resolved()\n-        {\n-            PerNs { types: Some(Def(Trait(trait_))), .. } => {\n-                Some(trait_.associated_type_by_name(self.db, &name::OUTPUT)?)\n-            }\n-            _ => None,\n-        }\n+        let trait_ = self.resolver.resolve_known_trait(self.db, &future_future_path)?;\n+        trait_.associated_type_by_name(self.db, &name::OUTPUT)\n     }\n \n     fn resolve_boxed_box(&self) -> Option<AdtDef> {\n@@ -1517,13 +1498,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 PathSegment { name: name::BOX_TYPE, args_and_bindings: None },\n             ],\n         };\n-\n-        match self.resolver.resolve_path_segments(self.db, &boxed_box_path).into_fully_resolved() {\n-            PerNs { types: Some(Def(ModuleDef::Struct(struct_))), .. } => {\n-                Some(AdtDef::Struct(struct_))\n-            }\n-            _ => None,\n-        }\n+        let struct_ = self.resolver.resolve_known_struct(self.db, &boxed_box_path)?;\n+        Some(AdtDef::Struct(struct_))\n     }\n }\n "}, {"sha": "e67525a748e352145b77227e6b945a79a2b24ac8", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b621cf26b59ff5ae9379b50fc822590b6a3a4e/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=d8b621cf26b59ff5ae9379b50fc822590b6a3a4e", "patch": "@@ -86,7 +86,7 @@ impl Ty {\n         }\n     }\n \n-    pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Self {\n+    pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Ty {\n         // Resolve the path (in type namespace)\n         let (resolution, remaining_index) = resolver.resolve_path_segments(db, path).into_inner();\n         let resolution = resolution.take_types();"}]}