{"sha": "f5fcac99787d42a707f51a893725afa17f35277e", "node_id": "C_kwDOAAsO6NoAKGY1ZmNhYzk5Nzg3ZDQyYTcwN2Y1MWE4OTM3MjVhZmExN2YzNTI3N2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-23T04:55:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T04:55:28Z"}, "message": "Rollup merge of #100861 - RalfJung:const-ice, r=oli-obk\n\nfix ICE with extra-const-ub-checks\n\nFixes https://github.com/rust-lang/rust/issues/100771", "tree": {"sha": "32be96ea1dd8de452797a180675fd6e37b30e1b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32be96ea1dd8de452797a180675fd6e37b30e1b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5fcac99787d42a707f51a893725afa17f35277e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBF3ACRBK7hj4Ov3rIwAAhcwIADWHYbGeS/CyZYfGelLi10X+\nV5IyT1ugS1xogvPTO2qHVPwMpceoJXkr5tp7+b9QcllYGUkM+I260OJsraL+hcs4\nPJtWSod3hnR0p+FdvL6sxtX/dmtmi52f0gjk+hDY0cGc3Yiw/WPcQPR/62QnR11B\nQti5UKWAGic2n/A+i4mJZc/hvA55kOgQwsHuUcCBKreK3zzjx7DwyXMLnYt8fDdW\nkrik456R/RCMn8awjNuZ6goSOHCSMTug7m8sckBQZiZ5XtNMR0VJl0q6c0CuQyMr\nM3y6zrKo8pzdC3MDRVEMjoc1eaSnoZV9dW5adJEEBYMBwaeBxW67Ycql97AEO2k=\n=UsMF\n-----END PGP SIGNATURE-----\n", "payload": "tree 32be96ea1dd8de452797a180675fd6e37b30e1b5\nparent 21d8f484d7f20c3482c322dd332b297cdc15cbfc\nparent d7ee421870f8937fe351b4143036c2730129757a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661230528 +0200\ncommitter GitHub <noreply@github.com> 1661230528 +0200\n\nRollup merge of #100861 - RalfJung:const-ice, r=oli-obk\n\nfix ICE with extra-const-ub-checks\n\nFixes https://github.com/rust-lang/rust/issues/100771\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5fcac99787d42a707f51a893725afa17f35277e", "html_url": "https://github.com/rust-lang/rust/commit/f5fcac99787d42a707f51a893725afa17f35277e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5fcac99787d42a707f51a893725afa17f35277e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d8f484d7f20c3482c322dd332b297cdc15cbfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d8f484d7f20c3482c322dd332b297cdc15cbfc", "html_url": "https://github.com/rust-lang/rust/commit/21d8f484d7f20c3482c322dd332b297cdc15cbfc"}, {"sha": "d7ee421870f8937fe351b4143036c2730129757a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ee421870f8937fe351b4143036c2730129757a", "html_url": "https://github.com/rust-lang/rust/commit/d7ee421870f8937fe351b4143036c2730129757a"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "5cfa63bd105c48ca0e2da0efc6e54b8c6f8b82fb", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5fcac99787d42a707f51a893725afa17f35277e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fcac99787d42a707f51a893725afa17f35277e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=f5fcac99787d42a707f51a893725afa17f35277e", "patch": "@@ -81,7 +81,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n }\n \n /// The `InterpCx` is only meant to be used to do field and index projections into constants for\n-/// `simd_shuffle` and const patterns in match arms.\n+/// `simd_shuffle` and const patterns in match arms. It never performs alignment checks.\n ///\n /// The function containing the `match` that is currently being analyzed may have generic bounds\n /// that inform us about the generic bounds of the constant. E.g., using an associated constant\n@@ -98,7 +98,11 @@ pub(super) fn mk_eval_cx<'mir, 'tcx>(\n         tcx,\n         root_span,\n         param_env,\n-        CompileTimeInterpreter::new(tcx.const_eval_limit(), can_access_statics),\n+        CompileTimeInterpreter::new(\n+            tcx.const_eval_limit(),\n+            can_access_statics,\n+            /*check_alignment:*/ false,\n+        ),\n     )\n }\n \n@@ -203,7 +207,13 @@ pub(crate) fn turn_into_const_value<'tcx>(\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n     let is_static = tcx.is_static(def_id);\n-    let ecx = mk_eval_cx(tcx, tcx.def_span(key.value.instance.def_id()), key.param_env, is_static);\n+    // This is just accessing an already computed constant, so no need to check alginment here.\n+    let ecx = mk_eval_cx(\n+        tcx,\n+        tcx.def_span(key.value.instance.def_id()),\n+        key.param_env,\n+        /*can_access_statics:*/ is_static,\n+    );\n \n     let mplace = ecx.raw_const_to_mplace(constant).expect(\n         \"can only fail if layout computation failed, \\\n@@ -300,7 +310,11 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         key.param_env,\n         // Statics (and promoteds inside statics) may access other statics, because unlike consts\n         // they do not have to behave \"as if\" they were evaluated at runtime.\n-        CompileTimeInterpreter::new(tcx.const_eval_limit(), /*can_access_statics:*/ is_static),\n+        CompileTimeInterpreter::new(\n+            tcx.const_eval_limit(),\n+            /*can_access_statics:*/ is_static,\n+            /*check_alignment:*/ tcx.sess.opts.unstable_opts.extra_const_ub_checks,\n+        ),\n     );\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);"}, {"sha": "f24b19089c113e1e651b3532bad116826c641686", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f5fcac99787d42a707f51a893725afa17f35277e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fcac99787d42a707f51a893725afa17f35277e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=f5fcac99787d42a707f51a893725afa17f35277e", "patch": "@@ -101,14 +101,22 @@ pub struct CompileTimeInterpreter<'mir, 'tcx> {\n     /// * Pointers to allocations inside of statics can never leak outside, to a non-static global.\n     /// This boolean here controls the second part.\n     pub(super) can_access_statics: bool,\n+\n+    /// Whether to check alignment during evaluation.\n+    check_alignment: bool,\n }\n \n impl<'mir, 'tcx> CompileTimeInterpreter<'mir, 'tcx> {\n-    pub(crate) fn new(const_eval_limit: Limit, can_access_statics: bool) -> Self {\n+    pub(crate) fn new(\n+        const_eval_limit: Limit,\n+        can_access_statics: bool,\n+        check_alignment: bool,\n+    ) -> Self {\n         CompileTimeInterpreter {\n             steps_remaining: const_eval_limit.0,\n             stack: Vec::new(),\n             can_access_statics,\n+            check_alignment,\n         }\n     }\n }\n@@ -238,7 +246,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n \n     #[inline(always)]\n     fn enforce_alignment(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n-        ecx.tcx.sess.opts.unstable_opts.extra_const_ub_checks\n+        ecx.machine.check_alignment\n     }\n \n     #[inline(always)]"}, {"sha": "37ffa19ccd6b9d7097c431545641129fdac547b6", "filename": "compiler/rustc_const_eval/src/might_permit_raw_init.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f5fcac99787d42a707f51a893725afa17f35277e/compiler%2Frustc_const_eval%2Fsrc%2Fmight_permit_raw_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fcac99787d42a707f51a893725afa17f35277e/compiler%2Frustc_const_eval%2Fsrc%2Fmight_permit_raw_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fmight_permit_raw_init.rs?ref=f5fcac99787d42a707f51a893725afa17f35277e", "patch": "@@ -13,7 +13,11 @@ pub fn might_permit_raw_init<'tcx>(\n     let strict = tcx.sess.opts.unstable_opts.strict_init_checks;\n \n     if strict {\n-        let machine = CompileTimeInterpreter::new(Limit::new(0), false);\n+        let machine = CompileTimeInterpreter::new(\n+            Limit::new(0),\n+            /*can_access_statics:*/ false,\n+            /*check_alignment:*/ true,\n+        );\n \n         let mut cx = InterpCx::new(tcx, rustc_span::DUMMY_SP, ParamEnv::reveal_all(), machine);\n "}, {"sha": "a3296032841fdf278a2f7576618e3e1011d31ceb", "filename": "src/test/ui/consts/extra-const-ub/issue-100771.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f5fcac99787d42a707f51a893725afa17f35277e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fissue-100771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5fcac99787d42a707f51a893725afa17f35277e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fissue-100771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fissue-100771.rs?ref=f5fcac99787d42a707f51a893725afa17f35277e", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+// compile-flags: -Zextra-const-ub-checks\n+\n+#[derive(PartialEq, Eq, Copy, Clone)]\n+#[repr(packed)]\n+struct Foo {\n+    field: (i64, u32, u32, u32),\n+}\n+\n+const FOO: Foo = Foo {\n+    field: (5, 6, 7, 8),\n+};\n+\n+fn main() {\n+    match FOO {\n+        Foo { field: (5, 6, 7, 8) } => {},\n+        FOO => unreachable!(),\n+        _ => unreachable!(),\n+    }\n+}"}]}