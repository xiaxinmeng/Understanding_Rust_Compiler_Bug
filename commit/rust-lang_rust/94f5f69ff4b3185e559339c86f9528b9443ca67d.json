{"sha": "94f5f69ff4b3185e559339c86f9528b9443ca67d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjVmNjlmZjRiMzE4NWU1NTkzMzljODZmOTUyOGI5NDQzY2E2N2Q=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-11T16:33:50Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-12T18:20:31Z"}, "message": "Use Chalk built-in representation for array types", "tree": {"sha": "07cbcae1995f3bb8706cb065812bef7eb10d870b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07cbcae1995f3bb8706cb065812bef7eb10d870b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f5f69ff4b3185e559339c86f9528b9443ca67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f5f69ff4b3185e559339c86f9528b9443ca67d", "html_url": "https://github.com/rust-lang/rust/commit/94f5f69ff4b3185e559339c86f9528b9443ca67d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f5f69ff4b3185e559339c86f9528b9443ca67d/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a4166501d8990d3a489e89af3d92002540c288c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4166501d8990d3a489e89af3d92002540c288c", "html_url": "https://github.com/rust-lang/rust/commit/2a4166501d8990d3a489e89af3d92002540c288c"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "7dc9ee7598d762370fd1039995bcdb61df87d25c", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/94f5f69ff4b3185e559339c86f9528b9443ca67d/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f5f69ff4b3185e559339c86f9528b9443ca67d/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=94f5f69ff4b3185e559339c86f9528b9443ca67d", "patch": "@@ -29,6 +29,7 @@ impl ToChalk for Ty {\n         match self {\n             Ty::Apply(apply_ty) => match apply_ty.ctor {\n                 TypeCtor::Ref(m) => ref_to_chalk(db, m, apply_ty.parameters),\n+                TypeCtor::Array => array_to_chalk(db, apply_ty.parameters),\n                 TypeCtor::FnPtr { num_args: _ } => {\n                     let substitution = apply_ty.parameters.to_chalk(db).shifted_in(&Interner);\n                     chalk_ir::TyData::Function(chalk_ir::Fn { num_binders: 0, substitution })\n@@ -67,7 +68,7 @@ impl ToChalk for Ty {\n                 );\n                 let bounded_ty = chalk_ir::DynTy {\n                     bounds: make_binders(where_clauses, 1),\n-                    lifetime: LIFETIME_PLACEHOLDER.to_lifetime(&Interner),\n+                    lifetime: FAKE_PLACEHOLDER.to_lifetime(&Interner),\n                 };\n                 chalk_ir::TyData::Dyn(bounded_ty).intern(&Interner)\n             }\n@@ -92,6 +93,7 @@ impl ToChalk for Ty {\n             chalk_ir::TyData::Apply(apply_ty) => match apply_ty.name {\n                 TypeName::Error => Ty::Unknown,\n                 TypeName::Ref(m) => ref_from_chalk(db, m, apply_ty.substitution),\n+                TypeName::Array => array_from_chalk(db, apply_ty.substitution),\n                 _ => {\n                     let ctor = from_chalk(db, apply_ty.name);\n                     let parameters = from_chalk(db, apply_ty.substitution);\n@@ -138,7 +140,7 @@ impl ToChalk for Ty {\n     }\n }\n \n-const LIFETIME_PLACEHOLDER: PlaceholderIndex =\n+const FAKE_PLACEHOLDER: PlaceholderIndex =\n     PlaceholderIndex { ui: UniverseIndex::ROOT, idx: usize::MAX };\n \n /// We currently don't model lifetimes, but Chalk does. So, we have to insert a\n@@ -149,7 +151,7 @@ fn ref_to_chalk(\n     subst: Substs,\n ) -> chalk_ir::Ty<Interner> {\n     let arg = subst[0].clone().to_chalk(db);\n-    let lifetime = LIFETIME_PLACEHOLDER.to_lifetime(&Interner);\n+    let lifetime = FAKE_PLACEHOLDER.to_lifetime(&Interner);\n     chalk_ir::ApplicationTy {\n         name: TypeName::Ref(mutability.to_chalk(db)),\n         substitution: chalk_ir::Substitution::from_iter(\n@@ -173,6 +175,35 @@ fn ref_from_chalk(\n     Ty::apply(TypeCtor::Ref(from_chalk(db, mutability)), Substs(tys))\n }\n \n+/// We currently don't model constants, but Chalk does. So, we have to insert a\n+/// fake constant here, because Chalks built-in logic may expect it to be there.\n+fn array_to_chalk(db: &dyn HirDatabase, subst: Substs) -> chalk_ir::Ty<Interner> {\n+    let arg = subst[0].clone().to_chalk(db);\n+    let usize_ty = chalk_ir::ApplicationTy {\n+        name: TypeName::Scalar(Scalar::Uint(chalk_ir::UintTy::Usize)),\n+        substitution: chalk_ir::Substitution::empty(&Interner),\n+    }\n+    .intern(&Interner);\n+    let const_ = FAKE_PLACEHOLDER.to_const(&Interner, usize_ty);\n+    chalk_ir::ApplicationTy {\n+        name: TypeName::Array,\n+        substitution: chalk_ir::Substitution::from_iter(\n+            &Interner,\n+            vec![arg.cast(&Interner), const_.cast(&Interner)],\n+        ),\n+    }\n+    .intern(&Interner)\n+}\n+\n+/// Here we remove the const from the type we got from Chalk.\n+fn array_from_chalk(db: &dyn HirDatabase, subst: chalk_ir::Substitution<Interner>) -> Ty {\n+    let tys = subst\n+        .iter(&Interner)\n+        .filter_map(|p| Some(from_chalk(db, p.ty(&Interner)?.clone())))\n+        .collect();\n+    Ty::apply(TypeCtor::Array, Substs(tys))\n+}\n+\n impl ToChalk for Substs {\n     type Chalk = chalk_ir::Substitution<Interner>;\n \n@@ -263,6 +294,7 @@ impl ToChalk for TypeCtor {\n             TypeCtor::Tuple { cardinality } => TypeName::Tuple(cardinality.into()),\n             TypeCtor::RawPtr(mutability) => TypeName::Raw(mutability.to_chalk(db)),\n             TypeCtor::Slice => TypeName::Slice,\n+            TypeCtor::Array => TypeName::Array,\n             TypeCtor::Ref(mutability) => TypeName::Ref(mutability.to_chalk(db)),\n             TypeCtor::Str => TypeName::Str,\n             TypeCtor::FnDef(callable_def) => {\n@@ -272,10 +304,7 @@ impl ToChalk for TypeCtor {\n             TypeCtor::Never => TypeName::Never,\n \n             // FIXME convert these\n-            TypeCtor::Adt(_)\n-            | TypeCtor::Array\n-            | TypeCtor::FnPtr { .. }\n-            | TypeCtor::Closure { .. } => {\n+            TypeCtor::Adt(_) | TypeCtor::FnPtr { .. } | TypeCtor::Closure { .. } => {\n                 // other TypeCtors get interned and turned into a chalk StructId\n                 let struct_id = db.intern_type_ctor(self).into();\n                 TypeName::Adt(struct_id)"}]}