{"sha": "4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNWM0YWEwMDIwM2I2YTVhYTIzNTJkMTZjM2Q4ZTRmYjFhZDIzZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-12T15:03:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-12T15:03:00Z"}, "message": "Auto merge of #79370 - jyn514:tidy-error, r=GuillaumeGomez\n\nDon't abort rustdoc tests if `tidy` isn't installed\n\nFollow-up to https://github.com/rust-lang/rust/pull/78752.\n\nBefore:\n\n```\nCheck compiletest suite=rustdoc mode=rustdoc (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\n\nrunning 396 tests\n..................................................2020-11-23T12:12:37.735649Z ERROR compiletest::runtest: fatal error, panic: \"failed to run tidy - is it installed? - No such file or directory (os error 2)\"\nF................................................. 100/396\n.................................................................................................... 200/396\n.................................................................................................... 300/396\n...............................i...............2020-11-23T12:15:00.271271Z ERROR compiletest::runtest: fatal error, panic: \"failed to run tidy - is it installed? - No such file or directory (os error 2)\"\nF................................................\n```\n\nAfter:\n\n```\nCheck compiletest suite=rustdoc mode=rustdoc (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)\n\nrunning 4 tests\n.FFF\nfailures:\n\n---- [rustdoc] rustdoc/fn-pointer-arg-name.rs stdout ----\n\nerror: htmldocck failed!\nstatus: exit code: 1\ncommand: \"/usr/bin/python\" \"/home/joshua/rustc/src/etc/htmldocck.py\" \"/home/joshua/rustc/build/x86_64-unknown-linux-gnu/test/rustdoc/fn-pointer-arg-name\" \"/home/joshua/rustc/src/test/rustdoc/fn-pointer-arg-name.rs\"\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n4: `@has` check failed\n\t`XPATH PATTERN` did not match\n\t// `@has` - '//*[`@class=\"rust` fn\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n\nEncountered 1 errors\n\n------------------------------------------\n\ninfo: generating a diff against nightly rustdoc\nfailed to run tidy - is it installed? - Permission denied (os error 13)\nfailed to run tidy - is it installed? - Permission denied (os error 13)\n # a diff without running `tidy`\n```\n\nr? `@GuillaumeGomez`", "tree": {"sha": "986c308c1e46b5c1fdf916faceb42998cc66d8be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/986c308c1e46b5c1fdf916faceb42998cc66d8be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "html_url": "https://github.com/rust-lang/rust/commit/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2088aa603d2cd3f43c20795872de9cd6ec7735", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2088aa603d2cd3f43c20795872de9cd6ec7735", "html_url": "https://github.com/rust-lang/rust/commit/3f2088aa603d2cd3f43c20795872de9cd6ec7735"}, {"sha": "f9b97a8e458b73b7e670a940877f91f9ce0b9ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b97a8e458b73b7e670a940877f91f9ce0b9ce3", "html_url": "https://github.com/rust-lang/rust/commit/f9b97a8e458b73b7e670a940877f91f9ce0b9ce3"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "55d25fa7c52c247faa9f1a345be784c40cbff266", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "patch": "@@ -327,6 +327,9 @@ pub struct Config {\n     /// created in `/<build_base>/rustfix_missing_coverage.txt`\n     pub rustfix_coverage: bool,\n \n+    /// whether to run `tidy` when a rustdoc test fails\n+    pub has_tidy: bool,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,"}, {"sha": "c63bbaf70d3c14cced5e2d7080eba585da930d3f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "patch": "@@ -14,7 +14,7 @@ use std::ffi::OsString;\n use std::fs;\n use std::io::{self, ErrorKind};\n use std::path::{Path, PathBuf};\n-use std::process::Command;\n+use std::process::{Command, Stdio};\n use std::time::SystemTime;\n use test::ColorConfig;\n use tracing::*;\n@@ -43,6 +43,10 @@ fn main() {\n         panic!(\"Can't find Valgrind to run Valgrind tests\");\n     }\n \n+    if !config.has_tidy && config.mode == Mode::Rustdoc {\n+        eprintln!(\"warning: `tidy` is not installed; generated diffs will be harder to read\");\n+    }\n+\n     log_config(&config);\n     run_tests(config);\n }\n@@ -189,6 +193,11 @@ pub fn parse_config(args: Vec<String>) -> Config {\n \n     let src_base = opt_path(matches, \"src-base\");\n     let run_ignored = matches.opt_present(\"ignored\");\n+    let has_tidy = Command::new(\"tidy\")\n+        .arg(\"--version\")\n+        .stdout(Stdio::null())\n+        .status()\n+        .map_or(false, |status| status.success());\n     Config {\n         bless: matches.opt_present(\"bless\"),\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n@@ -244,6 +253,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         remote_test_client: matches.opt_str(\"remote-test-client\").map(PathBuf::from),\n         compare_mode: matches.opt_str(\"compare-mode\").map(CompareMode::parse),\n         rustfix_coverage: matches.opt_present(\"rustfix-coverage\"),\n+        has_tidy,\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),"}, {"sha": "7af0d91271b0cf79749af094bdb8a2f8b346ebdc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4c5c4aa00203b6a5aa2352d16c3d8e4fb1ad23ee", "patch": "@@ -2394,7 +2394,8 @@ impl<'test> TestCx<'test> {\n \n         let proc_res = new_rustdoc.document(&compare_dir);\n         if !proc_res.status.success() {\n-            proc_res.fatal(Some(\"failed to run nightly rustdoc\"), || ());\n+            eprintln!(\"failed to run nightly rustdoc\");\n+            return;\n         }\n \n         #[rustfmt::skip]\n@@ -2408,28 +2409,22 @@ impl<'test> TestCx<'test> {\n             \"-modify\",\n         ];\n         let tidy_dir = |dir| {\n-            let tidy = |file: &_| {\n-                Command::new(\"tidy\")\n-                    .args(&tidy_args)\n-                    .arg(file)\n-                    .spawn()\n-                    .unwrap_or_else(|err| {\n-                        self.fatal(&format!(\"failed to run tidy - is it installed? - {}\", err))\n-                    })\n-                    .wait()\n-                    .unwrap()\n-            };\n             for entry in walkdir::WalkDir::new(dir) {\n                 let entry = entry.expect(\"failed to read file\");\n                 if entry.file_type().is_file()\n                     && entry.path().extension().and_then(|p| p.to_str()) == Some(\"html\".into())\n                 {\n-                    tidy(entry.path());\n+                    let status =\n+                        Command::new(\"tidy\").args(&tidy_args).arg(entry.path()).status().unwrap();\n+                    // `tidy` returns 1 if it modified the file.\n+                    assert!(status.success() || status.code() == Some(1));\n                 }\n             }\n         };\n-        tidy_dir(out_dir);\n-        tidy_dir(&compare_dir);\n+        if self.config.has_tidy {\n+            tidy_dir(out_dir);\n+            tidy_dir(&compare_dir);\n+        }\n \n         let pager = {\n             let output = Command::new(\"git\").args(&[\"config\", \"--get\", \"core.pager\"]).output().ok();\n@@ -2442,7 +2437,8 @@ impl<'test> TestCx<'test> {\n             })\n         };\n         let mut diff = Command::new(\"diff\");\n-        diff.args(&[\"-u\", \"-r\"]).args(&[&compare_dir, out_dir]);\n+        // diff recursively, showing context, and excluding .css files\n+        diff.args(&[\"-u\", \"-r\", \"-x\", \"*.css\"]).args(&[&compare_dir, out_dir]);\n \n         let output = if let Some(pager) = pager {\n             let diff_pid = diff.stdout(Stdio::piped()).spawn().expect(\"failed to run `diff`\");"}]}