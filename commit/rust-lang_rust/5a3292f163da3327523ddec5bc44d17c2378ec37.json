{"sha": "5a3292f163da3327523ddec5bc44d17c2378ec37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMzI5MmYxNjNkYTMzMjc1MjNkZGVjNWJjNDRkMTdjMjM3OGVjMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T12:48:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T12:48:20Z"}, "message": "Auto merge of #54021 - kennytm:rollup, r=kennytm\n\nRollup of 17 pull requests\n\nSuccessful merges:\n\n - #53299 (Updated core/macros.rs to note it works in a no_std environment.)\n - #53376 (Cross reference io::copy and fs::copy in docs.)\n - #53455 (Individual docs for {from,to}_*_bytes)\n - #53550 (librustc_lint: In recursion warning, change 'recurring' to 'recursing')\n - #53860 (Migrate (some) of run-pass/ to ui)\n - #53874 (Implement Unpin for Box, Rc, and Arc)\n - #53895 (tidy: Cleanups and clippy warning fixes)\n - #53946 (Clarify `ManuallyDrop` docs)\n - #53948 (Minimized clippy test from when NLL disabled two-phase borrows)\n - #53959 (Add .git extension to submodule paths missing it)\n - #53966 (A few cleanups and minor improvements to mir/dataflow)\n - #53967 (propagate build.python into cmake)\n - #53979 (Remove `#[repr(transparent)]` from atomics)\n - #53991 (Add unchecked_shl/shr check for intrinsics to fix miri's test suit)\n - #53992 (migrate run-pass/borrowck to ui/run-pass)\n - #53994 (migrate run-pass/*/ to ui/run-pass)\n - #54023 (update clippy submodule)", "tree": {"sha": "f6cba61434ccd1e0c0d92ea41929faeeb00436cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6cba61434ccd1e0c0d92ea41929faeeb00436cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a3292f163da3327523ddec5bc44d17c2378ec37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3292f163da3327523ddec5bc44d17c2378ec37", "html_url": "https://github.com/rust-lang/rust/commit/5a3292f163da3327523ddec5bc44d17c2378ec37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a3292f163da3327523ddec5bc44d17c2378ec37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7366752a6164dd8e004f32c1a40f0e04a61bcbb2", "html_url": "https://github.com/rust-lang/rust/commit/7366752a6164dd8e004f32c1a40f0e04a61bcbb2"}, {"sha": "87fbf544135d1ba8812c0589ba947394e53730a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87fbf544135d1ba8812c0589ba947394e53730a8", "html_url": "https://github.com/rust-lang/rust/commit/87fbf544135d1ba8812c0589ba947394e53730a8"}], "stats": {"total": 5994, "additions": 5510, "deletions": 484}, "files": [{"sha": "038237aa179a9b421aab40eb989f03d1679a073f", "filename": ".gitmodules", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -28,7 +28,7 @@\n \turl = https://github.com/rust-lang-nursery/rls.git\n [submodule \"src/libcompiler_builtins\"]\n \tpath = src/libcompiler_builtins\n-\turl = https://github.com/rust-lang-nursery/compiler-builtins\n+\turl = https://github.com/rust-lang-nursery/compiler-builtins.git\n [submodule \"src/tools/clippy\"]\n \tpath = src/tools/clippy\n \turl = https://github.com/rust-lang-nursery/rust-clippy.git\n@@ -43,24 +43,25 @@\n \turl = https://github.com/alexcrichton/dlmalloc-rs.git\n [submodule \"src/doc/rust-by-example\"]\n \tpath = src/doc/rust-by-example\n-\turl = https://github.com/rust-lang/rust-by-example\n+\turl = https://github.com/rust-lang/rust-by-example.git\n [submodule \"src/llvm-emscripten\"]\n \tpath = src/llvm-emscripten\n-\turl = https://github.com/rust-lang/llvm\n+\turl = https://github.com/rust-lang/llvm.git\n [submodule \"src/stdsimd\"]\n \tpath = src/stdsimd\n-\turl = https://github.com/rust-lang-nursery/stdsimd\n+\turl = https://github.com/rust-lang-nursery/stdsimd.git\n [submodule \"src/tools/lld\"]\n \tpath = src/tools/lld\n \turl = https://github.com/rust-lang/lld.git\n [submodule \"src/libbacktrace\"]\n \tpath = src/libbacktrace\n-\turl = https://github.com/rust-lang-nursery/libbacktrace\n+\turl = https://github.com/rust-lang-nursery/libbacktrace.git\n [submodule \"src/tools/lldb\"]\n \tpath = src/tools/lldb\n-\turl = https://github.com/rust-lang-nursery/lldb/\n+\turl = https://github.com/rust-lang-nursery/lldb.git\n \tbranch = rust-release-80-v1\n [submodule \"src/tools/clang\"]\n \tpath = src/tools/clang\n-\turl = https://github.com/rust-lang-nursery/clang/\n+\turl = https://github.com/rust-lang-nursery/clang.git\n \tbranch = rust-release-80-v1\n+  \n\\ No newline at end of file"}, {"sha": "fc2dfcfd8604c215d546ca5f3f7d8193ff103f7a", "filename": "src/Cargo.lock", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -296,12 +296,14 @@ version = \"0.0.212\"\n dependencies = [\n  \"cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.2.0\",\n+ \"clippy_dev 0.0.1\",\n  \"clippy_lints 0.0.212\",\n  \"compiletest_rs 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n+ \"rustc_tools_util 0.1.0\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -311,6 +313,16 @@ dependencies = [\n name = \"clippy-mini-macro-test\"\n version = \"0.2.0\"\n \n+[[package]]\n+name = \"clippy_dev\"\n+version = \"0.0.1\"\n+dependencies = [\n+ \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"clippy_lints\"\n version = \"0.0.212\"\n@@ -2361,6 +2373,10 @@ dependencies = [\n  \"serialize 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_tools_util\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"rustc_traits\"\n version = \"0.0.0\""}, {"sha": "caf38d766f54effb2e96b65b7c9d92b24d80b265", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -239,6 +239,10 @@ impl Step for Llvm {\n             cfg.define(\"LLVM_NATIVE_BUILD\", builder.llvm_out(builder.config.build).join(\"build\"));\n         }\n \n+        if let Some(ref python) = builder.config.python {\n+            cfg.define(\"PYTHON_EXECUTABLE\", python);\n+        }\n+\n         configure_cmake(builder, target, &mut cfg, false);\n \n         // FIXME: we don't actually need to build all LLVM tools and all LLVM"}, {"sha": "de76ddf33c17e6f84c6c159e3913be7df63f3cb7", "filename": "src/doc/rustc/src/lints/listing/warn-by-default.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Fwarn-by-default.md?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -603,11 +603,11 @@ fn foo() {\n This will produce:\n \n ```text\n-warning: function cannot return without recurring\n+warning: function cannot return without recursing\n  --> src/main.rs:1:1\n   |\n 1 | fn foo() {\n-  | ^^^^^^^^ cannot return without recurring\n+  | ^^^^^^^^ cannot return without recursing\n 2 |     foo();\n   |     ----- recursive call site\n   |"}, {"sha": "29ba433bec7f52ed8a9791baf2a0c176e14c8856", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -749,6 +749,31 @@ impl<T: ?Sized> AsMut<T> for Box<T> {\n     }\n }\n \n+/* Nota bene\n+ *\n+ *  We could have chosen not to add this impl, and instead have written a\n+ *  function of Pin<Box<T>> to Pin<T>. Such a function would not be sound,\n+ *  because Box<T> implements Unpin even when T does not, as a result of\n+ *  this impl.\n+ *\n+ *  We chose this API instead of the alternative for a few reasons:\n+ *      - Logically, it is helpful to understand pinning in regard to the\n+ *        memory region being pointed to. For this reason none of the\n+ *        standard library pointer types support projecting through a pin\n+ *        (Box<T> is the only pointer type in std for which this would be\n+ *        safe.)\n+ *      - It is in practice very useful to have Box<T> be unconditionally\n+ *        Unpin because of trait objects, for which the structural auto\n+ *        trait functionality does not apply (e.g. Box<dyn Foo> would\n+ *        otherwise not be Unpin).\n+ *\n+ *  Another type with the same semantics as Box but only a conditional\n+ *  implementation of `Unpin` (where `T: Unpin`) would be valid/safe, and\n+ *  could have a method to project a Pin<T> from it.\n+ */\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> Unpin for Box<T> { }\n+\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n impl<T> Generator for Box<T>\n     where T: Generator + ?Sized"}, {"sha": "2d65aaecbd0cb2349ea37101e3cfe12146e947f1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -252,7 +252,7 @@ use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::abort;\n use core::marker;\n-use core::marker::{Unsize, PhantomData};\n+use core::marker::{Unpin, Unsize, PhantomData};\n use core::mem::{self, align_of_val, forget, size_of_val};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n@@ -1830,3 +1830,6 @@ impl<T: ?Sized> AsRef<T> for Rc<T> {\n         &**self\n     }\n }\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> Unpin for Rc<T> { }"}, {"sha": "ff45daef514371ac6004036b0960640d53729b8f", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -27,7 +27,7 @@ use core::mem::{self, align_of_val, size_of_val};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, NonNull};\n-use core::marker::{Unsize, PhantomData};\n+use core::marker::{Unpin, Unsize, PhantomData};\n use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n use core::convert::From;\n@@ -1943,3 +1943,6 @@ impl<T: ?Sized> AsRef<T> for Arc<T> {\n         &**self\n     }\n }\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> Unpin for Arc<T> { }"}, {"sha": "a0c87f13e5d5a4debd4b5ad1728f3ffb2a320c3e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -349,6 +349,26 @@ macro_rules! try {\n /// write!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n /// assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n /// ```\n+///\n+/// Note: This macro can be used in `no_std` setups as well\n+/// In a `no_std` setup you are responsible for the\n+/// implementation details of the components.\n+///\n+/// ```no_run\n+/// # extern crate core;\n+/// use core::fmt::Write;\n+///\n+/// struct Example;\n+///\n+/// impl Write for Example {\n+///     fn write_str(&mut self, _s: &str) -> core::fmt::Result {\n+///          unimplemented!();\n+///     }\n+/// }\n+///\n+/// let mut m = Example{};\n+/// write!(&mut m, \"Hello World\").expect(\"Not written\");\n+/// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! write {"}, {"sha": "1803adee3c18e04de03142700875c3d38e544502", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -971,14 +971,16 @@ impl<T> ManuallyDrop<T> {\n         ManuallyDrop { value }\n     }\n \n-    /// Extract the value from the ManuallyDrop container.\n+    /// Extract the value from the `ManuallyDrop` container.\n+    ///\n+    /// This allows the value to be dropped again.\n     ///\n     /// # Examples\n     ///\n     /// ```rust\n     /// use std::mem::ManuallyDrop;\n     /// let x = ManuallyDrop::new(Box::new(()));\n-    /// let _: Box<()> = ManuallyDrop::into_inner(x);\n+    /// let _: Box<()> = ManuallyDrop::into_inner(x); // This drops the `Box`.\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n@@ -990,11 +992,15 @@ impl<T> ManuallyDrop<T> {\n impl<T: ?Sized> ManuallyDrop<T> {\n     /// Manually drops the contained value.\n     ///\n+    /// If you have ownership of the value, you can use [`ManuallyDrop::into_inner`] instead.\n+    ///\n     /// # Safety\n     ///\n     /// This function runs the destructor of the contained value and thus the wrapped value\n     /// now represents uninitialized data. It is up to the user of this method to ensure the\n     /// uninitialized data is not actually used.\n+    ///\n+    /// [`ManuallyDrop::into_inner`]: #method.into_inner\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n     #[inline]\n     pub unsafe fn drop(slot: &mut ManuallyDrop<T>) {"}, {"sha": "5ae984a4b155b11f25ce5e6577db92ef119983cf", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 314, "deletions": 251, "changes": 565, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -192,7 +192,7 @@ mod wrapping;\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n      $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n-     $reversed:expr) => {\n+     $reversed:expr, $le_bytes:expr, $be_bytes:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -2063,23 +2063,25 @@ $EndFeature, \"\n             self.to_be().to_ne_bytes()\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// big-endian (network) byte order.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let bytes = 0x12_34_56_78_i32.to_be_bytes();\n-        /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_be().to_ne_bytes()\n+        doc_comment! {\n+            concat!(\"Return the memory representation of this integer as a byte array in\n+big-endian (network) byte order.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n+assert_eq!(bytes, \", $be_bytes, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                self.to_be().to_ne_bytes()\n+            }\n         }\n \n         /// no docs here\n@@ -2090,23 +2092,25 @@ $EndFeature, \"\n             self.to_le().to_ne_bytes()\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// little-endian byte order.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let bytes =  0x12_34_56_78_i32.to_le_bytes();\n-        /// assert_eq!(bytes, [0x78, 0x56, 0x34, 0x12]);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_le().to_ne_bytes()\n+doc_comment! {\n+            concat!(\"Return the memory representation of this integer as a byte array in\n+little-endian byte order.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n+assert_eq!(bytes, \", $le_bytes, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                self.to_le().to_ne_bytes()\n+            }\n         }\n \n         /// no docs here\n@@ -2117,30 +2121,37 @@ $EndFeature, \"\n             unsafe { mem::transmute(self) }\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// native byte order.\n-        ///\n-        /// As the target platform's native endianness is used, portable code\n-        /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\n-        /// instead.\n-        ///\n-        /// [`to_be_bytes`]: #method.to_be_bytes\n-        /// [`to_le_bytes`]: #method.to_le_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let bytes = i32::min_value().to_be().to_ne_bytes();\n-        /// assert_eq!(bytes, [0x80, 0, 0, 0]);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            unsafe { mem::transmute(self) }\n+        doc_comment! {\n+            concat!(\"\n+Return the memory representation of this integer as a byte array in\n+native byte order.\n+\n+As the target platform's native endianness is used, portable code\n+should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\n+instead.\n+\n+[`to_be_bytes`]: #method.to_be_bytes\n+[`to_le_bytes`]: #method.to_le_bytes\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let bytes = \", $swap_op, stringify!($SelfT), \".to_ne_bytes();\n+assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n+        \", $be_bytes, \"\n+    } else {\n+        \", $le_bytes, \"\n+    });\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                unsafe { mem::transmute(self) }\n+            }\n         }\n \n         /// no docs here\n@@ -2151,23 +2162,25 @@ $EndFeature, \"\n             Self::from_be(Self::from_ne_bytes(bytes))\n         }\n \n-        /// Create an integer value from its representation as a byte array in\n-        /// big endian.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let int = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n-        /// assert_eq!(int, 0x12_34_56_78);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_be(Self::from_ne_bytes(bytes))\n+doc_comment! {\n+            concat!(\"Create an integer value from its representation as a byte array in\n+big endian.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let value = \", stringify!($SelfT), \"::from_be_bytes(\", $be_bytes, \");\n+assert_eq!(value, \", $swap_op, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                Self::from_be(Self::from_ne_bytes(bytes))\n+            }\n         }\n \n         /// no docs here\n@@ -2178,23 +2191,26 @@ $EndFeature, \"\n             Self::from_le(Self::from_ne_bytes(bytes))\n         }\n \n-        /// Create an integer value from its representation as a byte array in\n-        /// little endian.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let int = i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]);\n-        /// assert_eq!(int, 0x78_56_34_12);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_le(Self::from_ne_bytes(bytes))\n+doc_comment! {\n+            concat!(\"\n+Create an integer value from its representation as a byte array in\n+little endian.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let value = \", stringify!($SelfT), \"::from_le_bytes(\", $le_bytes, \");\n+assert_eq!(value, \", $swap_op, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                Self::from_le(Self::from_ne_bytes(bytes))\n+            }\n         }\n \n         /// no docs here\n@@ -2205,87 +2221,101 @@ $EndFeature, \"\n             unsafe { mem::transmute(bytes) }\n         }\n \n-        /// Create an integer value from its memory representation as a byte\n-        /// array in native endianness.\n-        ///\n-        /// As the target platform's native endianness is used, portable code\n-        /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n-        /// appropriate instead.\n-        ///\n-        /// [`from_be_bytes`]: #method.from_be_bytes\n-        /// [`from_le_bytes`]: #method.from_le_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let int = i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0]));\n-        /// assert_eq!(int, i32::min_value());\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            unsafe { mem::transmute(bytes) }\n+        doc_comment! {\n+            concat!(\"Create an integer value from its memory representation as a byte\n+array in native endianness.\n+\n+As the target platform's native endianness is used, portable code\n+likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n+appropriate instead.\n+\n+[`from_be_bytes`]: #method.from_be_bytes\n+[`from_le_bytes`]: #method.from_le_bytes\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let value = \", stringify!($SelfT), \"::from_ne_bytes(if cfg!(target_endian = \\\"big\\\") {\n+        \", $be_bytes, \"\n+    } else {\n+        \", $le_bytes, \"\n+    });\n+assert_eq!(value, \", $swap_op, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                unsafe { mem::transmute(bytes) }\n+            }\n         }\n     }\n }\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\" }\n+    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n+        \"[0x12]\", \"[0x12]\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n     int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n-        \"0x2c48\" }\n+        \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n     int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n-        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\" }\n+        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n+        \"[0x12, 0x34, 0x56, 0x78]\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n     int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\", 12,\n          \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n-         \"0x6a2c48091e6a2c48\" }\n+         \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n         170141183460469231731687303715884105727, \"\", \"\", 16,\n         \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\"\n-    }\n+        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+        \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+          0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n-        \"0x3412\", \"0x2c48\" }\n+        \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n-        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\" }\n+        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n+        \"[0x12, 0x34, 0x56, 0x78]\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n         12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n-         \"0x6a2c48091e6a2c48\" }\n+         \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n }\n \n // Emits the correct `cttz` call, depending on the size of the type.\n@@ -2305,7 +2335,7 @@ macro_rules! uint_cttz_call {\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n-        $reversed:expr ) => {\n+        $reversed:expr, $le_bytes:expr, $be_bytes:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -3960,23 +3990,25 @@ $EndFeature, \"\n             self.to_be().to_ne_bytes()\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// big-endian (network) byte order.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let bytes =  0x12_34_56_78_i32.to_be_bytes();\n-        /// assert_eq!(bytes, [0x12, 0x34, 0x56, 0x78]);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_be().to_ne_bytes()\n+                doc_comment! {\n+            concat!(\"Return the memory representation of this integer as a byte array in\n+big-endian (network) byte order.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n+assert_eq!(bytes, \", $be_bytes, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                self.to_be().to_ne_bytes()\n+            }\n         }\n \n         /// no docs here\n@@ -3987,23 +4019,25 @@ $EndFeature, \"\n             self.to_le().to_ne_bytes()\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// little-endian byte order.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let bytes =  0x12_34_56_78_i32.to_le_bytes();\n-        /// assert_eq!(bytes, [0x78, 0x56, 0x34, 0x12]);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            self.to_le().to_ne_bytes()\n+        doc_comment! {\n+            concat!(\"Return the memory representation of this integer as a byte array in\n+little-endian byte order.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n+assert_eq!(bytes, \", $le_bytes, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                self.to_le().to_ne_bytes()\n+            }\n         }\n \n         /// no docs here\n@@ -4014,30 +4048,37 @@ $EndFeature, \"\n             unsafe { mem::transmute(self) }\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// native byte order.\n-        ///\n-        /// As the target platform's native endianness is used, portable code\n-        /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\n-        /// instead.\n-        ///\n-        /// [`to_be_bytes`]: #method.to_be_bytes\n-        /// [`to_le_bytes`]: #method.to_le_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let bytes = i32::min_value().to_be().to_ne_bytes();\n-        /// assert_eq!(bytes, [0x80, 0, 0, 0]);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n-            unsafe { mem::transmute(self) }\n+        doc_comment! {\n+            concat!(\"\n+Return the memory representation of this integer as a byte array in\n+native byte order.\n+\n+As the target platform's native endianness is used, portable code\n+should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\n+instead.\n+\n+[`to_be_bytes`]: #method.to_be_bytes\n+[`to_le_bytes`]: #method.to_le_bytes\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let bytes = \", $swap_op, stringify!($SelfT), \".to_ne_bytes();\n+assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n+        \", $be_bytes, \"\n+    } else {\n+        \", $le_bytes, \"\n+    });\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+                unsafe { mem::transmute(self) }\n+            }\n         }\n \n         /// no docs here\n@@ -4048,23 +4089,25 @@ $EndFeature, \"\n             Self::from_be(Self::from_ne_bytes(bytes))\n         }\n \n-        /// Create an integer value from its representation as a byte array in\n-        /// big endian.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let int = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);\n-        /// assert_eq!(int, 0x12_34_56_78);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_be(Self::from_ne_bytes(bytes))\n+        doc_comment! {\n+            concat!(\"Create an integer value from its representation as a byte array in\n+big endian.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let value = \", stringify!($SelfT), \"::from_be_bytes(\", $be_bytes, \");\n+assert_eq!(value, \", $swap_op, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                Self::from_be(Self::from_ne_bytes(bytes))\n+            }\n         }\n \n         /// no docs here\n@@ -4075,23 +4118,26 @@ $EndFeature, \"\n             Self::from_le(Self::from_ne_bytes(bytes))\n         }\n \n-        /// Create an integer value from its representation as a byte array in\n-        /// little endian.\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let int = i32::from_le_bytes([0x12, 0x34, 0x56, 0x78]);\n-        /// assert_eq!(int, 0x78_56_34_12);\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            Self::from_le(Self::from_ne_bytes(bytes))\n+        doc_comment! {\n+            concat!(\"\n+Create an integer value from its representation as a byte array in\n+little endian.\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let value = \", stringify!($SelfT), \"::from_le_bytes(\", $le_bytes, \");\n+assert_eq!(value, \", $swap_op, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                Self::from_le(Self::from_ne_bytes(bytes))\n+            }\n         }\n \n         /// no docs here\n@@ -4102,37 +4148,44 @@ $EndFeature, \"\n             unsafe { mem::transmute(bytes) }\n         }\n \n-        /// Create an integer value from its memory representation as a byte\n-        /// array in native endianness.\n-        ///\n-        /// As the target platform's native endianness is used, portable code\n-        /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n-        /// appropriate instead.\n-        ///\n-        /// [`from_be_bytes`]: #method.from_be_bytes\n-        /// [`from_le_bytes`]: #method.from_le_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(int_to_from_bytes)]\n-        ///\n-        /// let int = i32::from_be(i32::from_ne_bytes([0x80, 0, 0, 0]));\n-        /// assert_eq!(int, i32::min_value());\n-        /// ```\n-        #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n-        #[rustc_const_unstable(feature = \"const_int_conversion\")]\n-        #[inline]\n-        #[cfg(not(stage0))]\n-        pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n-            unsafe { mem::transmute(bytes) }\n+        doc_comment! {\n+            concat!(\"Create an integer value from its memory representation as a byte\n+array in native endianness.\n+\n+As the target platform's native endianness is used, portable code\n+likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as\n+appropriate instead.\n+\n+[`from_be_bytes`]: #method.from_be_bytes\n+[`from_le_bytes`]: #method.from_le_bytes\n+\n+# Examples\n+\n+```\n+#![feature(int_to_from_bytes)]\n+\n+let value = \", stringify!($SelfT), \"::from_ne_bytes(if cfg!(target_endian = \\\"big\\\") {\n+        \", $be_bytes, \"\n+    } else {\n+        \", $le_bytes, \"\n+    });\n+assert_eq!(value, \", $swap_op, \");\n+```\"),\n+            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[inline]\n+            #[cfg(not(stage0))]\n+            pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                unsafe { mem::transmute(bytes) }\n+            }\n         }\n     }\n }\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\" }\n+    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n+        \"[0x12]\" }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -4658,45 +4711,55 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\" }\n+    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+        \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n     uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-        \"0x78563412\", \"0x1e6a2c48\" }\n+        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n     uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n-        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n+        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n+        \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n }\n \n #[lang = \"u128\"]\n impl u128 {\n     uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n         \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n-        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\" }\n+        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+        \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+          0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\" }\n+    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n+        \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n     uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-        \"0x78563412\", \"0x1e6a2c48\" }\n+        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n     uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n-        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n+        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n+        \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n }\n \n /// A classification of floating point numbers."}, {"sha": "602f8d4ee718e90edf0d471ca178077f4ab0de6a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -124,7 +124,6 @@ pub fn spin_loop_hint() {\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[repr(transparent)]\n pub struct AtomicBool {\n     v: UnsafeCell<u8>,\n }\n@@ -148,7 +147,6 @@ unsafe impl Sync for AtomicBool {}\n /// This type has the same in-memory representation as a `*mut T`.\n #[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[repr(transparent)]\n pub struct AtomicPtr<T> {\n     p: UnsafeCell<*mut T>,\n }\n@@ -1101,7 +1099,6 @@ macro_rules! atomic_int {\n         ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n-        #[repr(transparent)]\n         pub struct $atomic_type {\n             v: UnsafeCell<$int_type>,\n         }"}, {"sha": "b662b825013937a055422d7792e2c652d9e5603c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -901,7 +901,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         // considers this to be an error for two reasons, (a) it is\n         // easier to implement, and (b) it seems rare to actually want\n         // to have behaviour like the above, rather than\n-        // e.g. accidentally recurring after an assert.\n+        // e.g. accidentally recursing after an assert.\n \n         let cfg = cfg::CFG::new(cx.tcx, &body);\n \n@@ -961,8 +961,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n             let sp = cx.tcx.sess.source_map().def_span(sp);\n             let mut db = cx.struct_span_lint(UNCONDITIONAL_RECURSION,\n                                              sp,\n-                                             \"function cannot return without recurring\");\n-            db.span_label(sp, \"cannot return without recurring\");\n+                                             \"function cannot return without recursing\");\n+            db.span_label(sp, \"cannot return without recursing\");\n             // offer some help to the programmer.\n             for call in &self_call_spans {\n                 db.span_label(*call, \"recursive call site\");\n@@ -1090,7 +1090,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n                             // a default method definition.\n                             Ok(Some(traits::VtableParam(_))) => {\n                                 let on_self = trait_ref.self_ty().is_self();\n-                                // We can only be recurring in a default\n+                                // We can only be recursing in a default\n                                 // method if we're being called literally\n                                 // on the `Self` type.\n                                 on_self && callee_id == method.def_id"}, {"sha": "1d35bb85a21a199243561b508383932342d28e78", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -265,15 +265,12 @@ impl<'a, 'tcx, MWF, P> dot::GraphWalk<'a> for Graph<'a, 'tcx, MWF, P>\n \n     fn edges(&self) -> dot::Edges<Edge> {\n         let mir = self.mbcx.mir();\n-        // base initial capacity on assumption every block has at\n-        // least one outgoing edge (Which should be true for all\n-        // blocks but one, the exit-block).\n-        let mut edges = Vec::with_capacity(mir.basic_blocks().len());\n-        for bb in mir.basic_blocks().indices() {\n-            let outgoing = outgoing(mir, bb);\n-            edges.extend(outgoing.into_iter());\n-        }\n-        edges.into_cow()\n+\n+        mir.basic_blocks()\n+           .indices()\n+           .flat_map(|bb| outgoing(mir, bb))\n+           .collect::<Vec<_>>()\n+           .into_cow()\n     }\n \n     fn source(&self, edge: &Edge) -> Node {"}, {"sha": "cb551df910627c4d6e8ed8b044177d0bd9974237", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -168,9 +168,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n         // region, then setting that gen-bit will override any\n         // potential kill introduced here.\n         if let Some(indices) = self.borrows_out_of_scope_at_location.get(&location) {\n-            for index in indices {\n-                sets.kill(&index);\n-            }\n+            sets.kill_all(indices);\n         }\n     }\n "}, {"sha": "d6874e290d4f6cb7398fff416d826d55c70338ab", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -250,8 +250,7 @@ impl<'b, 'a: 'b, 'tcx: 'a, BD> PropagationContext<'b, 'a, 'tcx, BD> where BD: Bi\n     }\n }\n \n-fn dataflow_path(context: &str, prepost: &str, path: &str) -> PathBuf {\n-    format!(\"{}_{}\", context, prepost);\n+fn dataflow_path(context: &str, path: &str) -> PathBuf {\n     let mut path = PathBuf::from(path);\n     let new_file_name = {\n         let orig_file_name = path.file_name().unwrap().to_str().unwrap();\n@@ -267,7 +266,7 @@ impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n     {\n         if let Some(ref path_str) = self.print_preflow_to {\n-            let path = dataflow_path(BD::name(), \"preflow\", path_str);\n+            let path = dataflow_path(BD::name(), path_str);\n             graphviz::print_borrowck_graph_to(self, &path, p)\n         } else {\n             Ok(())\n@@ -278,9 +277,9 @@ impl<'a, 'tcx: 'a, BD> DataflowBuilder<'a, 'tcx, BD> where BD: BitDenotation\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n     {\n         if let Some(ref path_str) = self.print_postflow_to {\n-            let path = dataflow_path(BD::name(), \"postflow\", path_str);\n+            let path = dataflow_path(BD::name(), path_str);\n             graphviz::print_borrowck_graph_to(self, &path, p)\n-        } else{\n+        } else {\n             Ok(())\n         }\n     }"}, {"sha": "dde2e819fd204b233b5c3ac859b9ea7394986676", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -201,7 +201,7 @@ impl<'a, 'gcx, 'tcx> MoveDataBuilder<'a, 'gcx, 'tcx> {\n             \"done dumping moves\"\n         });\n \n-        if self.errors.len() > 0 {\n+        if !self.errors.is_empty() {\n             Err((self.data, self.errors))\n         } else {\n             Ok(self.data)"}, {"sha": "48085c2145418ed1a2e6e01e94da1db1e1144dcc", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -105,8 +105,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             | \"overflowing_add\"\n             | \"overflowing_sub\"\n             | \"overflowing_mul\"\n-            | \"unchecked_shl\"\n-            | \"unchecked_shr\"\n             | \"add_with_overflow\"\n             | \"sub_with_overflow\"\n             | \"mul_with_overflow\" => {\n@@ -116,8 +114,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     \"overflowing_add\" => (BinOp::Add, true),\n                     \"overflowing_sub\" => (BinOp::Sub, true),\n                     \"overflowing_mul\" => (BinOp::Mul, true),\n-                    \"unchecked_shl\" => (BinOp::Shl, true),\n-                    \"unchecked_shr\" => (BinOp::Shr, true),\n                     \"add_with_overflow\" => (BinOp::Add, false),\n                     \"sub_with_overflow\" => (BinOp::Sub, false),\n                     \"mul_with_overflow\" => (BinOp::Mul, false),\n@@ -129,6 +125,24 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                     self.binop_with_overflow(bin_op, lhs, rhs, dest)?;\n                 }\n             }\n+            \"unchecked_shl\" | \"unchecked_shr\" => {\n+                let l = self.read_value(args[0])?;\n+                let r = self.read_value(args[1])?;\n+                let bin_op = match intrinsic_name {\n+                    \"unchecked_shl\" => BinOp::Shl,\n+                    \"unchecked_shr\" => BinOp::Shr,\n+                    _ => bug!(\"Already checked for int ops\")\n+                };\n+                let (val, overflowed) = self.binary_op_val(bin_op, l, r)?;\n+                if overflowed {\n+                    let layout = self.layout_of(substs.type_at(0))?;\n+                    let r_val =  r.to_scalar()?.to_bits(layout.size)?;\n+                    return err!(Intrinsic(\n+                        format!(\"Overflowing shift by {} in {}\", r_val, intrinsic_name),\n+                    ));\n+                }\n+                self.write_scalar(val, dest)?;\n+            }\n             \"transmute\" => {\n                 // Go through an allocation, to make sure the completely different layouts\n                 // do not pose a problem.  (When the user transmutes through a union,"}, {"sha": "f14d55cb2d34f1ea8c443b8a197846307d3c0360", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -1566,6 +1566,12 @@ pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>\n /// On success, the total number of bytes copied is returned and it is equal to\n /// the length of the `to` file as reported by `metadata`.\n ///\n+/// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n+/// working with [`File`]s, see the [`io::copy`] function.\n+///\n+/// [`io::copy`]: ../io/fn.copy.html\n+/// [`File`]: ./struct.File.html\n+///\n /// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `open` function in Unix"}, {"sha": "371e5b21c13b26c117b915b4ec04d22d8ad764b1", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -23,6 +23,11 @@ use mem;\n /// On success, the total number of bytes that were copied from\n /// `reader` to `writer` is returned.\n ///\n+/// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n+/// working with filesystem paths, see the [`fs::copy`] function.\n+///\n+/// [`fs::copy`]: ../fs/fn.copy.html\n+///\n /// # Errors\n ///\n /// This function will return an error immediately if any call to `read` or"}, {"sha": "6e7f35d1fda7e218ae0064e015c8d89b784b43fc", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.ast.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.ast.stderr?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -0,0 +1,133 @@\n+error[E0503]: cannot use `self.cx` because it was mutably borrowed\n+  --> $DIR/two-phase-surprise-no-conflict.rs:40:13\n+   |\n+LL |         let _mut_borrow = &mut *self;\n+   |                                ----- borrow of `*self` occurs here\n+LL |         let _access = self.cx;\n+   |             ^^^^^^^ use of borrowed `*self`\n+\n+error[E0502]: cannot borrow `*self.cx_mut` as immutable because `*self` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:79:33\n+   |\n+LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n+   |                 ----            ^^^^^^^^^^^                - mutable borrow ends here\n+   |                 |               |\n+   |                 |               immutable borrow occurs here\n+   |                 mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because `*reg` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:131:52\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&reg.sess_mut)));\n+   |     ---                                            ^^^^^^^^^^^^  - mutable borrow ends here\n+   |     |                                              |\n+   |     mutable borrow occurs here                     immutable borrow occurs here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because `*reg` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:135:51\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new(&reg.sess_mut)));\n+   |     ---                                           ^^^^^^^^^^^^  - mutable borrow ends here\n+   |     |                                             |\n+   |     mutable borrow occurs here                    immutable borrow occurs here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because `*reg` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:139:50\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new(&reg.sess_mut)));\n+   |     ---                                          ^^^^^^^^^^^^  - mutable borrow ends here\n+   |     |                                            |\n+   |     mutable borrow occurs here                   immutable borrow occurs here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because `*reg` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:143:41\n+   |\n+LL |     reg.register_ref(&TrivialPass::new(&reg.sess_mut));\n+   |     ---                                 ^^^^^^^^^^^^ - mutable borrow ends here\n+   |     |                                   |\n+   |     mutable borrow occurs here          immutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:151:56\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n+   |     ---                                                ^^^^^^^^^^^^  - first borrow ends here\n+   |     |                                                  |\n+   |     first mutable borrow occurs here                   second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:156:59\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     ---                                                   ^^^^^^^^^^^^  - first borrow ends here\n+   |     |                                                     |\n+   |     first mutable borrow occurs here                      second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:161:58\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     ---                                                  ^^^^^^^^^^^^  - first borrow ends here\n+   |     |                                                    |\n+   |     first mutable borrow occurs here                     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:166:49\n+   |\n+LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n+   |     ---                                         ^^^^^^^^^^^^ - first borrow ends here\n+   |     |                                           |\n+   |     first mutable borrow occurs here            second mutable borrow occurs here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because `*reg` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:178:51\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ---                                           ^^^^^^^^^^^^  - mutable borrow ends here\n+   |     |                                             |\n+   |     mutable borrow occurs here                    immutable borrow occurs here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because `*reg` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:183:50\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ---                                          ^^^^^^^^^^^^  - mutable borrow ends here\n+   |     |                                            |\n+   |     mutable borrow occurs here                   immutable borrow occurs here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because `*reg` is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:188:41\n+   |\n+LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n+   |     ---                                 ^^^^^^^^^^^^ - mutable borrow ends here\n+   |     |                                   |\n+   |     mutable borrow occurs here          immutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:200:59\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ---                                                   ^^^^^^^^^^^^  - first borrow ends here\n+   |     |                                                     |\n+   |     first mutable borrow occurs here                      second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:206:58\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ---                                                  ^^^^^^^^^^^^  - first borrow ends here\n+   |     |                                                    |\n+   |     first mutable borrow occurs here                     second mutable borrow occurs here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:212:49\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     ---                                         ^^^^^^^^^^^^ - first borrow ends here\n+   |     |                                           |\n+   |     first mutable borrow occurs here            second mutable borrow occurs here\n+\n+error: aborting due to 16 previous errors\n+\n+Some errors occurred: E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "1fcd902134113a6484b0cf019c547710543c4e5c", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.nll.stderr", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.nll.stderr?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -0,0 +1,165 @@\n+error[E0503]: cannot use `self.cx` because it was mutably borrowed\n+  --> $DIR/two-phase-surprise-no-conflict.rs:40:23\n+   |\n+LL |         let _mut_borrow = &mut *self;\n+   |                           ---------- borrow of `*self` occurs here\n+LL |         let _access = self.cx;\n+   |                       ^^^^^^^ use of borrowed `*self`\n+...\n+LL |         _mut_borrow;\n+   |         ----------- borrow later used here\n+\n+error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:79:17\n+   |\n+LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n+   |                 ^^^^^^^^^^^^^^^^-----------^^^^^^^^^^^^^^^^^\n+   |                 |               |\n+   |                 |               immutable borrow occurs here\n+   |                 mutable borrow occurs here\n+   |                 borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:151:51\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n+   |     ----------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                             |\n+   |     |                                             second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:156:54\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                                |\n+   |     |                                                second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:161:53\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                               |\n+   |     |                                               second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:166:44\n+   |\n+LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n+   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n+   |     |                                      |\n+   |     |                                      second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:178:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |                                            |\n+   |     |                                            immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:183:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^^\n+   |     |                                           |\n+   |     |                                           immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n+  --> $DIR/two-phase-surprise-no-conflict.rs:122:21\n+   |\n+LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n+   |                     ^^\n+\n+error[E0502]: cannot borrow `*reg` as mutable because it is also borrowed as immutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:188:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^^\n+   |     |                                  |\n+   |     |                                  immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:200:5\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |                                                |\n+   |     |                                                first mutable borrow occurs here\n+   |     second mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:200:54\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                                |\n+   |     |                                                second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:206:5\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^^\n+   |     |                                               |\n+   |     |                                               first mutable borrow occurs here\n+   |     second mutable borrow occurs here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 122:21...\n+  --> $DIR/two-phase-surprise-no-conflict.rs:122:21\n+   |\n+LL | fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n+   |                     ^^\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:206:53\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                               |\n+   |     |                                               second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `*reg` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:212:5\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------^^\n+   |     |                                      |\n+   |     |                                      first mutable borrow occurs here\n+   |     second mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:212:44\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n+   |     |                                      |\n+   |     |                                      second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error: aborting due to 15 previous errors\n+\n+Some errors occurred: E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "f4fc7e54f80e8d4da91689db6b0b008a38dcc091", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.no2pb.stderr", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.no2pb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.no2pb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.no2pb.stderr?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -0,0 +1,175 @@\n+error[E0503]: cannot use `self.cx` because it was mutably borrowed\n+  --> $DIR/two-phase-surprise-no-conflict.rs:40:23\n+   |\n+LL |         let _mut_borrow = &mut *self;\n+   |                           ---------- borrow of `*self` occurs here\n+LL |         let _access = self.cx;\n+   |                       ^^^^^^^ use of borrowed `*self`\n+...\n+LL |         _mut_borrow;\n+   |         ----------- borrow later used here\n+\n+error[E0502]: cannot borrow `*self.cx` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:64:33\n+   |\n+LL |                 self.hash_expr(&self.cx.body(eid).value);\n+   |                 ----------------^^^^^^^-----------------\n+   |                 |               |\n+   |                 |               immutable borrow occurs here\n+   |                 mutable borrow occurs here\n+   |                 borrow later used here\n+\n+error[E0502]: cannot borrow `*self.cx_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:79:33\n+   |\n+LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n+   |                 ----------------^^^^^^^^^^^-----------------\n+   |                 |               |\n+   |                 |               immutable borrow occurs here\n+   |                 mutable borrow occurs here\n+   |                 borrow later used here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:131:51\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&reg.sess_mut)));\n+   |     ----------------------------------------------^^^^^^^^^^^^^---\n+   |     |                                             |\n+   |     |                                             immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:135:50\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new(&reg.sess_mut)));\n+   |     ---------------------------------------------^^^^^^^^^^^^^---\n+   |     |                                            |\n+   |     |                                            immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:139:49\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new(&reg.sess_mut)));\n+   |     --------------------------------------------^^^^^^^^^^^^^---\n+   |     |                                           |\n+   |     |                                           immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:143:40\n+   |\n+LL |     reg.register_ref(&TrivialPass::new(&reg.sess_mut));\n+   |     -----------------------------------^^^^^^^^^^^^^--\n+   |     |                                  |\n+   |     |                                  immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:151:51\n+   |\n+LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n+   |     ----------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                             |\n+   |     |                                             second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:156:54\n+   |\n+LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                                |\n+   |     |                                                second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:161:53\n+   |\n+LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                               |\n+   |     |                                               second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:166:44\n+   |\n+LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n+   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n+   |     |                                      |\n+   |     |                                      second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:178:50\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     ---------------------------------------------^^^^^^^^^^^^^---\n+   |     |                                            |\n+   |     |                                            immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:183:49\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n+   |     --------------------------------------------^^^^^^^^^^^^^---\n+   |     |                                           |\n+   |     |                                           immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0502]: cannot borrow `reg.sess_mut` as immutable because it is also borrowed as mutable\n+  --> $DIR/two-phase-surprise-no-conflict.rs:188:40\n+   |\n+LL |     reg.register_ref(&CapturePass::new(&reg.sess_mut));\n+   |     -----------------------------------^^^^^^^^^^^^^--\n+   |     |                                  |\n+   |     |                                  immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:200:54\n+   |\n+LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                                |\n+   |     |                                                second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:206:53\n+   |\n+LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |                                               |\n+   |     |                                               second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n+  --> $DIR/two-phase-surprise-no-conflict.rs:212:44\n+   |\n+LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n+   |     |                                      |\n+   |     |                                      second mutable borrow occurs here\n+   |     first mutable borrow occurs here\n+   |     borrow later used here\n+\n+error: aborting due to 17 previous errors\n+\n+Some errors occurred: E0499, E0502, E0503.\n+For more information about an error, try `rustc --explain E0499`."}, {"sha": "36bf44afb15be7691b3be84bcc173b4b6361a827", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.rs", "status": "added", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -0,0 +1,219 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is a test adapted from a minimization of the code from\n+// rust-lang/rust#52934, where an accidental disabling of\n+// two-phase-borrows (in the initial 2018 edition integration) broke\n+// Clippy, but the scenarios where it was breaking were subtle enough\n+// that we decided it warranted its own unit test, and pnkfelix\n+// decided to use that test as an opportunity to illustrate the cases.\n+\n+// revisions: ast no2pb nll\n+//[ast]compile-flags: -Z borrowck=ast\n+//[no2pb]compile-flags: -Z borrowck=mir\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+\n+// (Since we are manually toggling NLL variations on and off, don't\n+// bother with compare-mode=nll)\n+// ignore-compare-mode-nll\n+\n+#[derive(Copy, Clone)]\n+struct BodyId;\n+enum Expr { Closure(BodyId), Others }\n+struct Body { value: Expr }\n+\n+struct Map { body: Body, }\n+impl Map { fn body(&self, _: BodyId) -> &Body { unimplemented!() } }\n+\n+struct SpanlessHash<'a> { cx: &'a Map, cx_mut: &'a mut Map }\n+\n+impl <'a> SpanlessHash<'a> {\n+    fn demo(&mut self) {\n+        let _mut_borrow = &mut *self;\n+        let _access = self.cx;\n+        //[ast]~^ ERROR cannot use `self.cx` because it was mutably borrowed [E0503]\n+        //[no2pb]~^^ ERROR cannot use `self.cx` because it was mutably borrowed [E0503]\n+        //[nll]~^^^ ERROR cannot use `self.cx` because it was mutably borrowed [E0503]\n+        _mut_borrow;\n+    }\n+\n+    fn hash_expr(&mut self, e: &Expr) {\n+        match *e {\n+            Expr::Closure(eid) => {\n+                // Accepted by AST-borrowck for erroneous reasons\n+                // (rust-lang/rust#38899).\n+                //\n+                // Not okay without two-phase borrows: the implicit\n+                // `&mut self` of the receiver is evaluated first, and\n+                // that conflicts with the `self.cx`` access during\n+                // argument evaluation, as demonstrated in `fn demo`\n+                // above.\n+                //\n+                // Okay if we have two-phase borrows. Note that even\n+                // if `self.cx.body(..)` holds onto a reference into\n+                // `self.cx`, `self.cx` is an immutable-borrow, so\n+                // nothing in the activation for `self.hash_expr(..)`\n+                // can interfere with that immutable borrow.\n+                self.hash_expr(&self.cx.body(eid).value);\n+                //[no2pb]~^ ERROR cannot borrow `*self.cx`\n+            },\n+            _ => {}\n+        }\n+    }\n+\n+    fn hash_expr_mut(&mut self, e: &Expr) {\n+        match *e {\n+            Expr::Closure(eid) => {\n+                // Not okay: the call to `self.cx_mut.body(eid)` might\n+                // hold on to some mutably borrowed state in\n+                // `self.cx_mut`, which would then interfere with the\n+                // eventual activation of the `self` mutable borrow\n+                // for `self.hash_expr(..)`\n+                self.hash_expr(&self.cx_mut.body(eid).value);\n+                //[ast]~^ ERROR cannot borrow `*self.cx_mut`\n+                //[no2pb]~^^ ERROR cannot borrow `*self.cx_mut`\n+                //[nll]~^^^ ERROR cannot borrow `*self`\n+            },\n+            _ => {}\n+        }\n+    }\n+}\n+\n+struct Session;\n+struct Config;\n+trait LateLintPass<'a> { }\n+\n+struct TrivialPass;\n+impl TrivialPass {\n+    fn new(_: &Session) -> Self { TrivialPass }\n+    fn new_mut(_: &mut Session) -> Self { TrivialPass }\n+}\n+\n+struct CapturePass<'a> { s: &'a Session }\n+impl<'a> CapturePass<'a> {\n+    fn new(s: &'a Session) -> Self { CapturePass { s } }\n+    fn new_mut(s: &'a mut Session) -> Self { CapturePass { s } }\n+}\n+\n+impl<'a> LateLintPass<'a> for TrivialPass { }\n+impl<'a, 'b> LateLintPass<'a> for CapturePass<'b> { }\n+\n+struct Registry<'a> { sess_mut: &'a mut Session }\n+impl<'a> Registry<'a> {\n+    fn register_static(&mut self, _: Box<dyn LateLintPass + 'static>) { }\n+\n+    // Note: there isn't an interesting distinction between these\n+    // different methods explored by any of the cases in the test\n+    // below. pnkfelix just happened to write these cases out while\n+    // exploring variations on `dyn for <'a> Trait<'a> + 'static`, and\n+    // then decided to keep these particular ones in.\n+    fn register_bound(&mut self, _: Box<dyn LateLintPass + 'a>) { }\n+    fn register_univ(&mut self, _: Box<dyn for <'b> LateLintPass<'b> + 'a>) { }\n+    fn register_ref(&mut self, _: &dyn LateLintPass) { }\n+}\n+\n+fn register_plugins<'a>(mk_reg: impl Fn() -> &'a mut Registry<'a>) {\n+    // Not okay without two-phase borrows: The implicit `&mut reg` of\n+    // the receiver is evaluaated first, and that conflicts with the\n+    // `reg.sess_mut` access during argument evaluation.\n+    //\n+    // Okay if we have two-phase borrows: inner borrows do not survive\n+    // to the actual method invocation, because `TrivialPass::new`\n+    // cannot (according to its type) keep them alive.\n+    let reg = mk_reg();\n+    reg.register_static(Box::new(TrivialPass::new(&reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    let reg = mk_reg();\n+    reg.register_bound(Box::new(TrivialPass::new(&reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    let reg = mk_reg();\n+    reg.register_univ(Box::new(TrivialPass::new(&reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    let reg = mk_reg();\n+    reg.register_ref(&TrivialPass::new(&reg.sess_mut));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+\n+    // These are not okay: the inner mutable borrows immediately\n+    // conflict with the outer borrow/reservation, even with support\n+    // for two-phase borrows.\n+    let reg = mk_reg();\n+    reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `reg.sess_mut`\n+    let reg = mk_reg();\n+    reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `reg.sess_mut`\n+    let reg = mk_reg();\n+    reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `reg.sess_mut`\n+    let reg = mk_reg();\n+    reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `reg.sess_mut`\n+\n+    // These are not okay: the inner borrows may reach the actual\n+    // method invocation, because `CapturePass::new` might (according\n+    // to its type) keep them alive.\n+    //\n+    // (Also, we don't test `register_static` on CapturePass because\n+    // that will fail to get past lifetime inference.)\n+    let reg = mk_reg();\n+    reg.register_bound(Box::new(CapturePass::new(&reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `*reg` as mutable\n+    let reg = mk_reg();\n+    reg.register_univ(Box::new(CapturePass::new(&reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `*reg` as mutable\n+    let reg = mk_reg();\n+    reg.register_ref(&CapturePass::new(&reg.sess_mut));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `*reg` as mutable\n+\n+    // These are not okay: the inner mutable borrows immediately\n+    // conflict with the outer borrow/reservation, even with support\n+    // for two-phase borrows.\n+    //\n+    // (Again, we don't test `register_static` on CapturePass because\n+    // that will fail to get past lifetime inference.)\n+    let reg = mk_reg();\n+    reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `reg.sess_mut` as mutable more than once at a time\n+    //[nll]~^^^^ ERROR cannot borrow `*reg` as mutable more than once at a time\n+    let reg = mk_reg();\n+    reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `reg.sess_mut` as mutable more than once at a time\n+    //[nll]~^^^^ ERROR cannot borrow `*reg` as mutable more than once at a time\n+    let reg = mk_reg();\n+    reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n+    //[ast]~^ ERROR cannot borrow `reg.sess_mut`\n+    //[no2pb]~^^ ERROR cannot borrow `reg.sess_mut`\n+    //[nll]~^^^ ERROR cannot borrow `reg.sess_mut` as mutable more than once at a time\n+    //[nll]~^^^^ ERROR cannot borrow `*reg` as mutable more than once at a time\n+}\n+\n+fn main() { }"}, {"sha": "cbf855633fd2d06c5beacfd4a4d1744cd2f1b899", "filename": "src/test/ui/consts/const-int-unchecked.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+const SHR: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n+//^~ ERROR: Overflowing shift by 8 in unchecked_shr\n+const SHL: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n+//^~ ERROR: Overflowing shift by 8 in unchecked_shl\n+\n+fn main() {\n+}"}, {"sha": "b8fd0facbc1ae53262bc5a3411eb9022a7ea7d24", "filename": "src/test/ui/consts/const-int-unchecked.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-unchecked.stderr?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -0,0 +1,20 @@\n+error: this constant cannot be used\n+  --> $DIR/const-int-unchecked.rs:15:1\n+   |\n+LL | const SHR: u8 = unsafe { intrinsics::unchecked_shr(5_u8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                          |\n+   |                          Overflowing shift by 8 in unchecked_shr\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: this constant cannot be used\n+  --> $DIR/const-int-unchecked.rs:17:1\n+   |\n+LL | const SHL: u8 = unsafe { intrinsics::unchecked_shl(5_u8, 8) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------^^^\n+   |                          |\n+   |                          Overflowing shift by 8 in unchecked_shl\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "01c02ff8a48d460c0f5e76404296db32e009b4c2", "filename": "src/test/ui/issues/issue-8727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -15,7 +15,7 @@ fn generic<T>() {\n     generic::<Option<T>>();\n }\n //~^^^ ERROR reached the recursion limit while instantiating `generic::<std::option::Option<\n-//~| WARN function cannot return without recurring\n+//~| WARN function cannot return without recursing\n \n \n "}, {"sha": "bcf644debbc39ade276ef19abe8bcbd589650937", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -1,8 +1,8 @@\n-warning: function cannot return without recurring\n+warning: function cannot return without recursing\n   --> $DIR/issue-8727.rs:14:1\n    |\n LL | fn generic<T>() {\n-   | ^^^^^^^^^^^^^^^ cannot return without recurring\n+   | ^^^^^^^^^^^^^^^ cannot return without recursing\n LL |     generic::<Option<T>>();\n    |     ---------------------- recursive call site\n    |"}, {"sha": "7ca9b6874e76b52a0f04da36c8a0bde8028c3863", "filename": "src/test/ui/lint/lint-unconditional-recursion.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -11,7 +11,7 @@\n #![deny(unconditional_recursion)]\n \n #![allow(dead_code)]\n-fn foo() { //~ ERROR function cannot return without recurring\n+fn foo() { //~ ERROR function cannot return without recursing\n     foo();\n }\n \n@@ -21,7 +21,7 @@ fn bar() {\n     }\n }\n \n-fn baz() { //~ ERROR function cannot return without recurring\n+fn baz() { //~ ERROR function cannot return without recursing\n     if true {\n         baz()\n     } else {\n@@ -33,7 +33,7 @@ fn qux() {\n     loop {}\n }\n \n-fn quz() -> bool { //~ ERROR function cannot return without recurring\n+fn quz() -> bool { //~ ERROR function cannot return without recursing\n     if true {\n         while quz() {}\n         true\n@@ -44,13 +44,13 @@ fn quz() -> bool { //~ ERROR function cannot return without recurring\n \n // Trait method calls.\n trait Foo {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         self.bar()\n     }\n }\n \n impl Foo for Box<Foo+'static> {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         loop {\n             self.bar()\n         }\n@@ -59,7 +59,7 @@ impl Foo for Box<Foo+'static> {\n \n // Trait method call with integer fallback after method resolution.\n impl Foo for i32 {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         0.bar()\n     }\n }\n@@ -72,13 +72,13 @@ impl Foo for u32 {\n \n // Trait method calls via paths.\n trait Foo2 {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         Foo2::bar(self)\n     }\n }\n \n impl Foo2 for Box<Foo2+'static> {\n-    fn bar(&self) { //~ ERROR function cannot return without recurring\n+    fn bar(&self) { //~ ERROR function cannot return without recursing\n         loop {\n             Foo2::bar(self)\n         }\n@@ -88,19 +88,19 @@ impl Foo2 for Box<Foo2+'static> {\n struct Baz;\n impl Baz {\n     // Inherent method call.\n-    fn qux(&self) { //~ ERROR function cannot return without recurring\n+    fn qux(&self) { //~ ERROR function cannot return without recursing\n         self.qux();\n     }\n \n     // Inherent method call via path.\n-    fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n+    fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recursing\n         Baz::as_ref(self)\n     }\n }\n \n // Trait method calls to impls via paths.\n impl Default for Baz {\n-    fn default() -> Baz { //~ ERROR function cannot return without recurring\n+    fn default() -> Baz { //~ ERROR function cannot return without recursing\n         let x = Default::default();\n         x\n     }\n@@ -109,14 +109,14 @@ impl Default for Baz {\n // Overloaded operators.\n impl std::ops::Deref for Baz {\n     type Target = ();\n-    fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n+    fn deref(&self) -> &() { //~ ERROR function cannot return without recursing\n         &**self\n     }\n }\n \n impl std::ops::Index<usize> for Baz {\n     type Output = Baz;\n-    fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n+    fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recursing\n         &self[x]\n     }\n }\n@@ -125,7 +125,7 @@ impl std::ops::Index<usize> for Baz {\n struct Quux;\n impl std::ops::Deref for Quux {\n     type Target = Baz;\n-    fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n+    fn deref(&self) -> &Baz { //~ ERROR function cannot return without recursing\n         self.as_ref()\n     }\n }"}, {"sha": "d0fbdd18ed39d346ce64fa679fb88989a11c5e1d", "filename": "src/test/ui/lint/lint-unconditional-recursion.stderr", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unconditional-recursion.stderr?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -1,8 +1,8 @@\n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:14:1\n    |\n-LL | fn foo() { //~ ERROR function cannot return without recurring\n-   | ^^^^^^^^ cannot return without recurring\n+LL | fn foo() { //~ ERROR function cannot return without recursing\n+   | ^^^^^^^^ cannot return without recursing\n LL |     foo();\n    |     ----- recursive call site\n    |\n@@ -13,11 +13,11 @@ LL | #![deny(unconditional_recursion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:24:1\n    |\n-LL | fn baz() { //~ ERROR function cannot return without recurring\n-   | ^^^^^^^^ cannot return without recurring\n+LL | fn baz() { //~ ERROR function cannot return without recursing\n+   | ^^^^^^^^ cannot return without recursing\n LL |     if true {\n LL |         baz()\n    |         ----- recursive call site\n@@ -27,11 +27,11 @@ LL |         baz()\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:36:1\n    |\n-LL | fn quz() -> bool { //~ ERROR function cannot return without recurring\n-   | ^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL | fn quz() -> bool { //~ ERROR function cannot return without recursing\n+   | ^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |     if true {\n LL |         while quz() {}\n    |               ----- recursive call site\n@@ -41,113 +41,113 @@ LL |         loop { quz(); }\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:47:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         self.bar()\n    |         ---------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:53:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         loop {\n LL |             self.bar()\n    |             ---------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:62:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         0.bar()\n    |         ------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:75:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         Foo2::bar(self)\n    |         --------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:81:5\n    |\n-LL |     fn bar(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn bar(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         loop {\n LL |             Foo2::bar(self)\n    |             --------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:91:5\n    |\n-LL |     fn qux(&self) { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn qux(&self) { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^ cannot return without recursing\n LL |         self.qux();\n    |         ---------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:96:5\n    |\n-LL |     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn as_ref(&self) -> &Self { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         Baz::as_ref(self)\n    |         ----------------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:103:5\n    |\n-LL |     fn default() -> Baz { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn default() -> Baz { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         let x = Default::default();\n    |                 ------------------ recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:112:5\n    |\n-LL |     fn deref(&self) -> &() { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn deref(&self) -> &() { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         &**self\n    |          ------ recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:119:5\n    |\n-LL |     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn index(&self, x: usize) -> &Baz { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         &self[x]\n    |          ------- recursive call site\n    |\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: function cannot return without recurring\n+error: function cannot return without recursing\n   --> $DIR/lint-unconditional-recursion.rs:128:5\n    |\n-LL |     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recurring\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recurring\n+LL |     fn deref(&self) -> &Baz { //~ ERROR function cannot return without recursing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n LL |         self.as_ref()\n    |         ---- recursive call site\n    |"}, {"sha": "a3f05a01c5ad0d47bbbd13d37ddcea50e5a09aac", "filename": "src/test/ui/run-pass/allocator/auxiliary/custom-as-global.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom-as-global.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/allocator/auxiliary/custom-as-global.rs"}, {"sha": "b17464e04190f459bfebe1101c1360e3c714b71b", "filename": "src/test/ui/run-pass/allocator/auxiliary/custom.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fcustom.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/allocator/auxiliary/custom.rs"}, {"sha": "e75a432710df2fe79d4e7ded0c2e888135d6fc10", "filename": "src/test/ui/run-pass/allocator/auxiliary/helper.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fhelper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fhelper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fauxiliary%2Fhelper.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/allocator/auxiliary/helper.rs"}, {"sha": "9617f7d4685d7b89a824ba221b64a091c49b9692", "filename": "src/test/ui/run-pass/allocator/custom.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fcustom.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // aux-build:helper.rs\n // no-prefer-dynamic\n ", "previous_filename": "src/test/run-pass/allocator/custom.rs"}, {"sha": "8b9e1e329f7b90245e25985c80e1ad993225a39e", "filename": "src/test/ui/run-pass/allocator/xcrate-use.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fxcrate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fxcrate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fxcrate-use.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // aux-build:custom.rs\n // aux-build:helper.rs\n // no-prefer-dynamic", "previous_filename": "src/test/run-pass/allocator/xcrate-use.rs"}, {"sha": "2e52f28d3117a20f61beecc0bf8e097d5cf64cd8", "filename": "src/test/ui/run-pass/allocator/xcrate-use2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fxcrate-use2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fallocator%2Fxcrate-use2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // aux-build:custom.rs\n // aux-build:custom-as-global.rs\n // aux-build:helper.rs", "previous_filename": "src/test/run-pass/allocator/xcrate-use2.rs"}, {"sha": "4029a270c8d18c397743328b204018a7bdbe9c97", "filename": "src/test/ui/run-pass/array-slice-vec/arr_cycle.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farr_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farr_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farr_cycle.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::cell::Cell;\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/arr_cycle.rs"}, {"sha": "c026a47c4f9ec03fb923fccfde61d69451fa3775", "filename": "src/test/ui/run-pass/array-slice-vec/array_const_index-1.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Farray_const_index-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(stable_features)]\n+\n #![feature(const_indexing)]\n \n fn main() {", "previous_filename": "src/test/run-pass/array_const_index-1.rs"}, {"sha": "5d6cc5f686e7fbfefab0aad3437f6c4d20be7bea", "filename": "src/test/ui/run-pass/array-slice-vec/box-of-array-of-drop-1.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(overflowing_literals)]\n+\n // Test that we cleanup a fixed size Box<[D; k]> properly when D has a\n // destructor.\n ", "previous_filename": "src/test/run-pass/box-of-array-of-drop-1.rs"}, {"sha": "d2dedc4602aaea020b8ec165c431ded13cdbeacd", "filename": "src/test/ui/run-pass/array-slice-vec/box-of-array-of-drop-2.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fbox-of-array-of-drop-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(overflowing_literals)]\n+\n // Test that we cleanup dynamic sized Box<[D]> properly when D has a\n // destructor.\n ", "previous_filename": "src/test/run-pass/box-of-array-of-drop-2.rs"}, {"sha": "d78bc0b0072d3f4ffc0efeb71aa7bc8147271e35", "filename": "src/test/ui/run-pass/array-slice-vec/cast-in-array-size.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcast-in-array-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcast-in-array-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcast-in-array-size.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n // issues #10618 and #16382\n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/cast-in-array-size.rs"}, {"sha": "3d2fc8195eb287cca5bf60075fdef2cc09230aff", "filename": "src/test/ui/run-pass/array-slice-vec/check-static-mut-slices.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-mut-slices.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Checks that mutable static items can have mutable slices\n \n ", "previous_filename": "src/test/run-pass/check-static-mut-slices.rs"}, {"sha": "6627095c32bccbbb498dc233899f80b5167abbb5", "filename": "src/test/ui/run-pass/array-slice-vec/check-static-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcheck-static-slice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Check that the various ways of getting to a reference to a vec (both sized\n // and unsized) work properly.\n ", "previous_filename": "src/test/run-pass/check-static-slice.rs"}, {"sha": "917683e4eeb93b3439b48b6d1c6d46807738926b", "filename": "src/test/ui/run-pass/array-slice-vec/copy-out-of-array-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcopy-out-of-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcopy-out-of-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fcopy-out-of-array-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Ensure that we can copy out of a fixed-size array.\n //\n // (Compare with compile-fail/move-out-of-array-1.rs)", "previous_filename": "src/test/run-pass/copy-out-of-array-1.rs"}, {"sha": "17620f62be6a06686658f5555fc5ac2e7db6c7d9", "filename": "src/test/ui/run-pass/array-slice-vec/destructure-array-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fdestructure-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fdestructure-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fdestructure-array-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Ensure that we can do a destructuring bind of a fixed-size array,\n // even when the element type has a destructor.\n ", "previous_filename": "src/test/run-pass/destructure-array-1.rs"}, {"sha": "7411d5743212d0b84caca106892db79b6b8a3155", "filename": "src/test/ui/run-pass/array-slice-vec/empty-mutable-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fempty-mutable-vec.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n #![allow(unused_mut)]", "previous_filename": "src/test/run-pass/empty-mutable-vec.rs"}, {"sha": "768229aafbf57c37d89dea5f08f3a0fdc746bc41", "filename": "src/test/ui/run-pass/array-slice-vec/estr-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Festr-slice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let x = \"hello\";", "previous_filename": "src/test/run-pass/estr-slice.rs"}, {"sha": "7f54801910b73d0f5ec8ea1c624338f348080396", "filename": "src/test/ui/run-pass/array-slice-vec/evec-slice.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fevec-slice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_assignment)]\n+// run-pass\n \n pub fn main() {\n     let x : &[isize] = &[1,2,3,4,5];", "previous_filename": "src/test/run-pass/evec-slice.rs"}, {"sha": "09492e37e28b84e882e543f2b6744678c46fd8b5", "filename": "src/test/ui/run-pass/array-slice-vec/fixed_length_copy.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Ffixed_length_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Ffixed_length_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Ffixed_length_copy.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let arr = [1,2,3];", "previous_filename": "src/test/run-pass/fixed_length_copy.rs"}, {"sha": "27b4e68e771c8b2bc7beeaac80d429ab5040b990", "filename": "src/test/ui/run-pass/array-slice-vec/huge-largest-array.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fhuge-largest-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fhuge-largest-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fhuge-largest-array.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n use std::mem::size_of;\n ", "previous_filename": "src/test/run-pass/huge-largest-array.rs"}, {"sha": "2f3efef56369d832a6f4df060d08ad39f930bbfc", "filename": "src/test/ui/run-pass/array-slice-vec/ivec-pass-by-value.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fivec-pass-by-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fivec-pass-by-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fivec-pass-by-value.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n fn f(_a: Vec<isize> ) { }\n pub fn main() { f(vec![1, 2, 3, 4, 5]); }", "previous_filename": "src/test/run-pass/ivec-pass-by-value.rs"}, {"sha": "49dc348952ba16ca8be98dd8a453503379c2f363", "filename": "src/test/ui/run-pass/array-slice-vec/mutability-inherits-through-fixed-length-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutability-inherits-through-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutability-inherits-through-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutability-inherits-through-fixed-length-vec.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n fn test1() {\n     let mut ints = [0; 32];", "previous_filename": "src/test/run-pass/mutability-inherits-through-fixed-length-vec.rs"}, {"sha": "dc2548ad53c4d9398b9c2966c54d409480c5b468", "filename": "src/test/ui/run-pass/array-slice-vec/mutable-alias-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fmutable-alias-vec.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n fn grow(v: &mut Vec<isize> ) {\n     v.push(1);\n }", "previous_filename": "src/test/run-pass/mutable-alias-vec.rs"}, {"sha": "62bcc5f72543fa3d2c6f261d7b483bd565a47b65", "filename": "src/test/ui/run-pass/array-slice-vec/nested-vec-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test that using the `vec!` macro nested within itself works\n \n fn main() {", "previous_filename": "src/test/run-pass/nested-vec-1.rs"}, {"sha": "4af2350cc369b0d051e54b68c71058f71e85b4d9", "filename": "src/test/ui/run-pass/array-slice-vec/nested-vec-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test that using the `vec!` macro nested within itself works\n // when the contents implement Drop\n ", "previous_filename": "src/test/run-pass/nested-vec-2.rs"}, {"sha": "dc3146a2b351760c5b9ed4ca849f8698066b3f7b", "filename": "src/test/ui/run-pass/array-slice-vec/nested-vec-3.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnested-vec-3.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(overflowing_literals)]\n+\n // ignore-emscripten no threads support\n \n // Test that using the `vec!` macro nested within itself works when", "previous_filename": "src/test/run-pass/nested-vec-3.rs"}, {"sha": "268fa5c4b59ac22c2a295cb56c1f6e3716ccae04", "filename": "src/test/ui/run-pass/array-slice-vec/new-style-fixed-length-vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnew-style-fixed-length-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnew-style-fixed-length-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fnew-style-fixed-length-vec.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n static FOO: [isize; 3] = [1, 2, 3];\n \n pub fn main() {", "previous_filename": "src/test/run-pass/new-style-fixed-length-vec.rs"}, {"sha": "76302b92ed0349f109549c1f0fe2f8ce8014e5dc", "filename": "src/test/ui/run-pass/array-slice-vec/rcvr-borrowed-to-slice.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frcvr-borrowed-to-slice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n+#![allow(non_camel_case_types)]\n \n trait sum {\n     fn sum_(self) -> isize;", "previous_filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs"}, {"sha": "d706be4c3367634b2c31d8a39381fab44761822e", "filename": "src/test/ui/run-pass/array-slice-vec/repeated-vector-syntax.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Frepeated-vector-syntax.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n pub fn main() {\n     let x = [ [true]; 512 ];\n     let y = [ 0; 1 ];", "previous_filename": "src/test/run-pass/repeated-vector-syntax.rs"}, {"sha": "dda4ce9f227b1195738aa5f759a19c3b52cf6070", "filename": "src/test/ui/run-pass/array-slice-vec/show-boxed-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fshow-boxed-slice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #[derive(Debug)]\n struct Foo(Box<[u8]>);\n ", "previous_filename": "src/test/run-pass/show-boxed-slice.rs"}, {"sha": "1f71ceac04f9dc09842f8d888f9be06a1d8f1a73", "filename": "src/test/ui/run-pass/array-slice-vec/slice-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test slicing expressions on slices and Vecs.\n \n ", "previous_filename": "src/test/run-pass/slice-2.rs"}, {"sha": "671246f6a63a2f6078ea34849d49ce772e62fdc4", "filename": "src/test/ui/run-pass/array-slice-vec/slice-of-zero-size-elements.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-of-zero-size-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-of-zero-size-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-of-zero-size-elements.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(stable_features)]\n+\n // compile-flags: -C debug-assertions\n \n #![feature(iter_to_slice)]", "previous_filename": "src/test/run-pass/slice-of-zero-size-elements.rs"}, {"sha": "b9d816acaa2284ee5858cbef3b3f8bafc8b85a94", "filename": "src/test/ui/run-pass/array-slice-vec/slice-panic-1.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // ignore-emscripten no threads support\n \n // Test that if a slicing expr[..] fails, the correct cleanups happen.", "previous_filename": "src/test/run-pass/slice-panic-1.rs"}, {"sha": "787d10b042f8c035a8fc34c2336f8e34dc77f6e8", "filename": "src/test/ui/run-pass/array-slice-vec/slice-panic-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice-panic-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // ignore-emscripten no threads support\n \n // Test that if a slicing expr[..] fails, the correct cleanups happen.", "previous_filename": "src/test/run-pass/slice-panic-2.rs"}, {"sha": "6c43d8832302845cff196efca3f2f08ab8ff793f", "filename": "src/test/ui/run-pass/array-slice-vec/slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test slicing sugar.\n \n extern crate core;", "previous_filename": "src/test/run-pass/slice.rs"}, {"sha": "081b06bea5c17fcfa141a2342c4abd1ecdd0b002", "filename": "src/test/ui/run-pass/array-slice-vec/slice_binary_search.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice_binary_search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice_binary_search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fslice_binary_search.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test binary_search_by_key lifetime. Issue #34683\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/slice_binary_search.rs"}, {"sha": "5cf52006f3c2cda65009c259978e53a8317c75e2", "filename": "src/test/ui/run-pass/array-slice-vec/variance-vec-covariant.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvariance-vec-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvariance-vec-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvariance-vec-covariant.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // Test that vec is now covariant in its argument type.\n \n #![allow(dead_code)]", "previous_filename": "src/test/run-pass/variance-vec-covariant.rs"}, {"sha": "7c734d8d6a2bb2035cde8c177d4a054919200740", "filename": "src/test/ui/run-pass/array-slice-vec/vec-concat.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-concat.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::vec;\n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-concat.rs"}, {"sha": "6421b69d22e3fa2f2a3bdb20422417ff949705f9", "filename": "src/test/ui/run-pass/array-slice-vec/vec-dst.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-dst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-dst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-dst.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(box_syntax)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-dst.rs"}, {"sha": "a7b867941323fe7a0b051a7ce173b5372167dccc", "filename": "src/test/ui/run-pass/array-slice-vec/vec-fixed-length.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-fixed-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-fixed-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-fixed-length.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n use std::mem::size_of;\n ", "previous_filename": "src/test/run-pass/vec-fixed-length.rs"}, {"sha": "e783a799c056201bcaab8a24f34a3b535d8406d9", "filename": "src/test/ui/run-pass/array-slice-vec/vec-growth.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-growth.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-growth.rs"}, {"sha": "dc7241a0e05c040a930ca4db33937a16e5b35a30", "filename": "src/test/ui/run-pass/array-slice-vec/vec-late-init.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-late-init.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let mut later: Vec<isize> ;", "previous_filename": "src/test/run-pass/vec-late-init.rs"}, {"sha": "509167413b6f4b67825567f0c579c8c5b4c18013", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-no-std.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-no-std.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // ignore-emscripten no no_std executables\n \n #![feature(lang_items, start, libc, alloc)]", "previous_filename": "src/test/run-pass/vec-macro-no-std.rs"}, {"sha": "36c8b7cffabec47f85fcc44c6cb06686ba27b20a", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-repeat.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-repeat.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-macro-repeat.rs"}, {"sha": "8ccf22e62887cd2942e55e86ee9003b9bed7e598", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-rvalue-scope.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-rvalue-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-rvalue-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-rvalue-scope.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n fn one() -> i32 { 1 }\n ", "previous_filename": "src/test/run-pass/vec-macro-rvalue-scope.rs"}, {"sha": "b5d1459300aeb2ba720b24fafd11fb932180ff70", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-with-brackets.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-brackets.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n macro_rules! vec [", "previous_filename": "src/test/run-pass/vec-macro-with-brackets.rs"}, {"sha": "046d634b19d467a1025b0875d667d804402a5d3f", "filename": "src/test/ui/run-pass/array-slice-vec/vec-macro-with-trailing-comma.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-macro-with-trailing-comma.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-macro-with-trailing-comma.rs"}, {"sha": "b5cefb48ce79660dc33209cab9ad09b803c180f0", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-autoslice.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-autoslice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(illegal_floating_point_literal_pattern)] // FIXME #41620\n+\n pub fn main() {\n     let x = [1, 2, 3];\n     match x {", "previous_filename": "src/test/run-pass/vec-matching-autoslice.rs"}, {"sha": "7bfecdd2c7f3cb21554f30478033ab90407d602c", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-fixed.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fixed.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n fn a() {", "previous_filename": "src/test/run-pass/vec-matching-fixed.rs"}, {"sha": "b1aa7f1b70c86d0c644e9a61611244cf9f9aacd3", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-fold.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-fold.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n use std::fmt::Debug;", "previous_filename": "src/test/run-pass/vec-matching-fold.rs"}, {"sha": "e727e56c0f8e8e2f04250ab5ff85990754b0ac53", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching-legal-tail-element-borrow.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching-legal-tail-element-borrow.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs"}, {"sha": "8d1ef6f755a356439997869754a2ab58a0f85284", "filename": "src/test/ui/run-pass/array-slice-vec/vec-matching.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-matching.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n fn a() {", "previous_filename": "src/test/run-pass/vec-matching.rs"}, {"sha": "360568048c0899345e8970950c608d7df509ff4c", "filename": "src/test/ui/run-pass/array-slice-vec/vec-push.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-push.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,4 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n pub fn main() { let mut v = vec![1, 2, 3]; v.push(1); }", "previous_filename": "src/test/run-pass/vec-push.rs"}, {"sha": "650de32fe6146c469bfee741e7ed612abb9ee5bb", "filename": "src/test/ui/run-pass/array-slice-vec/vec-repeat-with-cast.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-repeat-with-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-repeat-with-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-repeat-with-cast.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n pub fn main() { let _a = [0; 1 as usize]; }", "previous_filename": "src/test/run-pass/vec-repeat-with-cast.rs"}, {"sha": "189d5a38ae3cac9584234de0aafafbbd48c43a1b", "filename": "src/test/ui/run-pass/array-slice-vec/vec-slice-drop.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice-drop.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n+#![allow(non_camel_case_types)]\n+\n use std::cell::Cell;\n \n // Make sure that destructors get run on slice literals", "previous_filename": "src/test/run-pass/vec-slice-drop.rs"}, {"sha": "8ad662f0c6348ab9d472c105dbcbeec37e023900", "filename": "src/test/ui/run-pass/array-slice-vec/vec-slice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-slice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     let  v = vec![1,2,3,4,5];", "previous_filename": "src/test/run-pass/vec-slice.rs"}, {"sha": "46a882a2ae1b4fac1134b8022fa92b6715ab60c0", "filename": "src/test/ui/run-pass/array-slice-vec/vec-tail-matching.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-tail-matching.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n #![feature(slice_patterns)]\n \n struct Foo {", "previous_filename": "src/test/run-pass/vec-tail-matching.rs"}, {"sha": "4facc0e6892e6d67f6ecf52947756689ebb04ef1", "filename": "src/test/ui/run-pass/array-slice-vec/vec-to_str.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-to_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-to_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec-to_str.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n pub fn main() {\n     assert_eq!(format!(\"{:?}\", vec![0, 1]), \"[0, 1]\".to_string());", "previous_filename": "src/test/run-pass/vec-to_str.rs"}, {"sha": "34a8e125a5ceb9530a26dbef02276d47c6fcfe22", "filename": "src/test/ui/run-pass/array-slice-vec/vec.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/vec.rs"}, {"sha": "3222b0e789d0c96120ceb069ad5fc9f22c432d13", "filename": "src/test/ui/run-pass/array-slice-vec/vec_cycle.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::cell::Cell;\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/vec_cycle.rs"}, {"sha": "355f9d3e40ed6d345ddb8dcf0a1a86528868db51", "filename": "src/test/ui/run-pass/array-slice-vec/vec_cycle_wrapped.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle_wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle_wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvec_cycle_wrapped.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n use std::cell::Cell;\n \n #[derive(Debug)]", "previous_filename": "src/test/run-pass/vec_cycle_wrapped.rs"}, {"sha": "0b09545c0aa64cc4401e2277a1818b80d6ba474d", "filename": "src/test/ui/run-pass/array-slice-vec/vector-no-ann-2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Farray-slice-vec%2Fvector-no-ann-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n #![feature(box_syntax)]", "previous_filename": "src/test/run-pass/vector-no-ann-2.rs"}, {"sha": "3ef8e6c2478c8ccc3629ab374dbdc02e51f1cd6d", "filename": "src/test/ui/run-pass/associated-consts/associated-const-const-eval.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-const-eval.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const NUM: usize;", "previous_filename": "src/test/run-pass/associated-const-const-eval.rs"}, {"sha": "c0f1d93c25398b6a0bcb2c712cf570befe201d3e", "filename": "src/test/ui/run-pass/associated-consts/associated-const-cross-crate-const-eval.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-const-eval.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-const-cc-lib.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-cross-crate-const-eval.rs"}, {"sha": "7d85c7021ab63152de965815cd3d8e7182da2dd6", "filename": "src/test/ui/run-pass/associated-consts/associated-const-cross-crate-defaults.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate-defaults.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-const-cc-lib.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-cross-crate-defaults.rs"}, {"sha": "0f1bde4b4db746c9c6485da3eecd0cf82bcdd062", "filename": "src/test/ui/run-pass/associated-consts/associated-const-cross-crate.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-cross-crate.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-const-cc-lib.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-cross-crate.rs"}, {"sha": "089bf07b9c78488e32df6931dcddc98d143d62d0", "filename": "src/test/ui/run-pass/associated-consts/associated-const-in-global-const.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-in-global-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-in-global-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-in-global-const.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo;\n ", "previous_filename": "src/test/run-pass/associated-const-in-global-const.rs"}, {"sha": "60b794015f9c550c67a1bd2e323405196f4ae5e8", "filename": "src/test/ui/run-pass/associated-consts/associated-const-inherent-impl.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-inherent-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-inherent-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-inherent-impl.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo;\n ", "previous_filename": "src/test/run-pass/associated-const-inherent-impl.rs"}, {"sha": "de9edfc679e99a2c07b0d70add30eb74a584fd91", "filename": "src/test/ui/run-pass/associated-consts/associated-const-marks-live-code.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-marks-live-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-marks-live-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-marks-live-code.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n #![deny(dead_code)]\n ", "previous_filename": "src/test/run-pass/associated-const-marks-live-code.rs"}, {"sha": "9fbce1cebf3181642b1b23aad4bd25bb976cb0fa", "filename": "src/test/ui/run-pass/associated-consts/associated-const-match-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-match-patterns.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:empty-struct.rs\n \n ", "previous_filename": "src/test/run-pass/associated-const-match-patterns.rs"}, {"sha": "c62e073a6a711fa97afcab5c951d46404de46d81", "filename": "src/test/ui/run-pass/associated-consts/associated-const-outer-ty-refs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-outer-ty-refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-outer-ty-refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-outer-ty-refs.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n trait Lattice {\n     const BOTTOM: Self;\n }", "previous_filename": "src/test/run-pass/associated-const-outer-ty-refs.rs"}, {"sha": "0e225d7117e6c2989cf4a80387b9a2cb4887a526", "filename": "src/test/ui/run-pass/associated-consts/associated-const-overwrite-default.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-overwrite-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-overwrite-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-overwrite-default.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32 = 2;", "previous_filename": "src/test/run-pass/associated-const-overwrite-default.rs"}, {"sha": "8c11ae69ded769f5b26e963413bf5e2e99e3dd4a", "filename": "src/test/ui/run-pass/associated-consts/associated-const-public-impl.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-public-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-public-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-public-impl.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n mod bar1 {\n     pub use self::bar2::Foo;", "previous_filename": "src/test/run-pass/associated-const-public-impl.rs"}, {"sha": "eeff27753235e621f62b6d0d7f4cbe7f0be7c2ae", "filename": "src/test/ui/run-pass/associated-consts/associated-const-range-match-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-range-match-patterns.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo;\n ", "previous_filename": "src/test/run-pass/associated-const-range-match-patterns.rs"}, {"sha": "ed02644c6a11901e8baed132372eac35df6804c0", "filename": "src/test/ui/run-pass/associated-consts/associated-const-resolution-order.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-resolution-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-resolution-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-resolution-order.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct MyType;\n ", "previous_filename": "src/test/run-pass/associated-const-resolution-order.rs"}, {"sha": "52d9574edde284e8b487f4879e05a8b2aadf0d9b", "filename": "src/test/ui/run-pass/associated-consts/associated-const-self-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-self-type.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait MyInt {\n     const ONE: Self;", "previous_filename": "src/test/run-pass/associated-const-self-type.rs"}, {"sha": "37407b6bf9f9863abdaf343eec8542297cc0028b", "filename": "src/test/ui/run-pass/associated-consts/associated-const-type-parameters.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-type-parameters.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const X: i32;", "previous_filename": "src/test/run-pass/associated-const-type-parameters.rs"}, {"sha": "6269222fb8e9e249bf727bdc951279a52dd55aa9", "filename": "src/test/ui/run-pass/associated-consts/associated-const-ufcs-infer-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-ufcs-infer-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-ufcs-infer-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-ufcs-infer-trait.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32;", "previous_filename": "src/test/run-pass/associated-const-ufcs-infer-trait.rs"}, {"sha": "623949b2418c1aceb7829f3f9e09dd67000c88dd", "filename": "src/test/ui/run-pass/associated-consts/associated-const-use-default.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-default.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32 = 1;", "previous_filename": "src/test/run-pass/associated-const-use-default.rs"}, {"sha": "80848e5653fb544aafb0e1487d7fa151b9fe173a", "filename": "src/test/ui/run-pass/associated-consts/associated-const-use-impl-of-same-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-impl-of-same-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-impl-of-same-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const-use-impl-of-same-trait.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n // The main purpose of this test is to ensure that different impls of the same\n // trait can refer to each other without setting off the static recursion check", "previous_filename": "src/test/run-pass/associated-const-use-impl-of-same-trait.rs"}, {"sha": "c20025c385ac49589eba89f22c0efda8b0f99ed4", "filename": "src/test/ui/run-pass/associated-consts/associated-const.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fassociated-const.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Foo {\n     const ID: i32;", "previous_filename": "src/test/run-pass/associated-const.rs"}, {"sha": "e4cada40db3c99c800dd8f90c9eac5656167e380", "filename": "src/test/ui/run-pass/associated-consts/auxiliary/associated-const-cc-lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fassociated-const-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fassociated-const-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fassociated-const-cc-lib.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/auxiliary/associated-const-cc-lib.rs"}, {"sha": "734e57a774d87935a50b08162effe599960a69e0", "filename": "src/test/ui/run-pass/associated-consts/auxiliary/empty-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fempty-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fempty-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-consts%2Fauxiliary%2Fempty-struct.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/auxiliary/empty-struct.rs"}, {"sha": "3628f9ce183f8ebe0ec9b0aad9ae48d45b7df80c", "filename": "src/test/ui/run-pass/associated-types/associated-types-basic.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-basic.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n trait Foo {\n     type T;\n }", "previous_filename": "src/test/run-pass/associated-types-basic.rs"}, {"sha": "63ac60e62d91fd68c12c41966f51ed6558b35c44", "filename": "src/test/ui/run-pass/associated-types/associated-types-binding-in-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-trait.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test a case where the associated type binding (to `bool`, in this\n // case) is derived from the trait definition. Issue #21636.\n ", "previous_filename": "src/test/run-pass/associated-types-binding-in-trait.rs"}, {"sha": "7b735520efb2d6f49368322d327426d90a2d75ab", "filename": "src/test/ui/run-pass/associated-types/associated-types-binding-in-where-clause.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-binding-in-where-clause.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constraints on associated types in a where clause.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs"}, {"sha": "56ce378da65fbb09e075f7ab98f12e8c7d585206", "filename": "src/test/ui/run-pass/associated-types/associated-types-bound.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-bound.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constrai32s on associated types in a where clause.\n \n ", "previous_filename": "src/test/run-pass/associated-types-bound.rs"}, {"sha": "a8c7caa9361bdd6e20d33d9baea1ca2295f69e99", "filename": "src/test/ui/run-pass/associated-types/associated-types-cc.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-cc.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // aux-build:associated-types-cc-lib.rs\n \n // Test that we are able to reference cross-crate traits that employ", "previous_filename": "src/test/run-pass/associated-types-cc.rs"}, {"sha": "a795ee2c5ef05441f2ab0e1469b9690ee8fc7627", "filename": "src/test/ui/run-pass/associated-types/associated-types-conditional-dispatch.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-conditional-dispatch.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we evaluate projection predicates to winnow out\n // candidates during trait selection and method resolution (#20296).\n // If we don't properly winnow out candidates based on the output type", "previous_filename": "src/test/run-pass/associated-types-conditional-dispatch.rs"}, {"sha": "3581a6c43888db613df9d4c60945fc1aa5d245c4", "filename": "src/test/ui/run-pass/associated-types/associated-types-constant-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-constant-type.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait SignedUnsigned {\n     type Opposite;", "previous_filename": "src/test/run-pass/associated-types-constant-type.rs"}, {"sha": "4b8ceda9b811cac578fd92d9c251572545fde306", "filename": "src/test/ui/run-pass/associated-types/associated-types-doubleendediterator-object.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-doubleendediterator-object.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {", "previous_filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs"}, {"sha": "e6175dc34ecc53f2e9838613c6b101319bf930e1", "filename": "src/test/ui/run-pass/associated-types/associated-types-duplicate-binding-in-env-hrtb.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env-hrtb.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that we do not report ambiguities when equivalent predicates\n // (modulo bound lifetime names) appears in the environment\n // twice. Issue #21965.", "previous_filename": "src/test/run-pass/associated-types-duplicate-binding-in-env-hrtb.rs"}, {"sha": "6836d2860b51913f663c06392c8dc30b29d4f7f7", "filename": "src/test/ui/run-pass/associated-types/associated-types-duplicate-binding-in-env.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-duplicate-binding-in-env.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that we do not report ambiguities when the same predicate\n // appears in the environment twice. Issue #21965.\n ", "previous_filename": "src/test/run-pass/associated-types-duplicate-binding-in-env.rs"}, {"sha": "d21195c3d3a6cc6055320bd4a7baf72ea5619950", "filename": "src/test/ui/run-pass/associated-types/associated-types-enum-field-named.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-named.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated types appearing in struct-like enum variants.\n \n ", "previous_filename": "src/test/run-pass/associated-types-enum-field-named.rs"}, {"sha": "9a91a998201fe1255b179f7f02edcdca8f6aea3c", "filename": "src/test/ui/run-pass/associated-types/associated-types-enum-field-numbered.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-enum-field-numbered.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated types appearing in tuple-like enum variants.\n \n ", "previous_filename": "src/test/run-pass/associated-types-enum-field-numbered.rs"}, {"sha": "75fe2093da99ff76b56c05e80d444dd3b4c03d16", "filename": "src/test/ui/run-pass/associated-types/associated-types-eq-obj.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-eq-obj.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constraints on associated types inside of an object type\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-eq-obj.rs"}, {"sha": "aca7674892586131bc7a2f9d1b15b47db6c79236", "filename": "src/test/ui/run-pass/associated-types/associated-types-impl-redirect.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-impl-redirect.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test how resolving a projection interacts with inference.  In this\n // case, we were eagerly unifying the type variable for the iterator\n // type with `I` from the where clause, ignoring the in-scope `impl`", "previous_filename": "src/test/run-pass/associated-types-impl-redirect.rs"}, {"sha": "a80350a596e5d41c17bacb1426dfcb517a33ac32", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-bound-type-arg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-bound-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-bound-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-bound-type-arg.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test the case where we resolve `C::Result` and the trait bound\n // itself includes a `Self::Item` shorthand.\n //", "previous_filename": "src/test/run-pass/associated-types-in-bound-type-arg.rs"}, {"sha": "846dfcd2141c4fc2bafec41e68947420e36fdfb2", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-default-method.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-default-method.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-default-method.rs"}, {"sha": "555c74dd70a71cb72db18114245c44c9278bf620", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-fn.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-fn.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-fn.rs"}, {"sha": "d27c1dd296e498de5806a26c7b61e8aab99a14b9", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-impl-generics.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-impl-generics.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-impl-generics.rs"}, {"sha": "f68ab8cd610cccec88f4208553a5172f00209ec0", "filename": "src/test/ui/run-pass/associated-types/associated-types-in-inherent-method.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-in-inherent-method.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-in-inherent-method.rs"}, {"sha": "e2a87382fba9f8d8c3c92b8d0320b458b499b123", "filename": "src/test/ui/run-pass/associated-types/associated-types-issue-20220.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20220.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test references to `Self::Item` in the trait. Issue #20220.\n \n ", "previous_filename": "src/test/run-pass/associated-types-issue-20220.rs"}, {"sha": "54f1d2e81260b240ba9bc483a7f3ea193085b181", "filename": "src/test/ui/run-pass/associated-types/associated-types-issue-20371.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-20371.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n ", "previous_filename": "src/test/run-pass/associated-types-issue-20371.rs"}, {"sha": "259661dc058cd8acc27ecf6ce4cec54b7a35ef88", "filename": "src/test/ui/run-pass/associated-types/associated-types-issue-21212.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-issue-21212.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for #21212: an overflow occurred during trait\n // checking where normalizing `Self::Input` led to normalizing the\n // where clauses in the environment which in turn required normalizing", "previous_filename": "src/test/run-pass/associated-types-issue-21212.rs"}, {"sha": "eab66a9412917eaf48d85058fdfe07e199c352a2", "filename": "src/test/ui/run-pass/associated-types/associated-types-iterator-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-iterator-binding.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn pairwise_sub<T:DoubleEndedIterator<Item=isize>>(mut t: T) -> isize {\n     let mut result = 0;", "previous_filename": "src/test/run-pass/associated-types-iterator-binding.rs"}, {"sha": "73d075313ad5f395e72311a4e4a33026c9dcfb46", "filename": "src/test/ui/run-pass/associated-types/associated-types-method.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-method.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that methods whose impl-trait-ref contains associated types\n // are supported.\n ", "previous_filename": "src/test/run-pass/associated-types-method.rs"}, {"sha": "a877a3cfa9ddad2677bf60167eb4b7e83c76260c", "filename": "src/test/ui/run-pass/associated-types/associated-types-nested-projections.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-nested-projections.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we can resolve nested projection types. Issue #20666.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-nested-projections.rs"}, {"sha": "d989e08e8083c066db697b52fc3a143d8474383b", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-in-bounds-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-binding.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we normalize associated types that appear in a bound that\n // contains a binding. Issue #21664.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-in-bounds-binding.rs"}, {"sha": "3d3540bbf72bfb3552e5a196bdb59a5eb573afc8", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-in-bounds-ufcs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs"}, {"sha": "79d23c3999e6bcb60a441c2ce82be62ea8390a4c", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-in-bounds.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-in-bounds.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs"}, {"sha": "03d712b110dc2a0ff15b7c6c9e0d9488f27d3544", "filename": "src/test/ui/run-pass/associated-types/associated-types-normalize-unifield-struct.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-normalize-unifield-struct.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for issue #21010: Normalize associated types in\n // various special paths in the `type_is_immediate` function.\n ", "previous_filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs"}, {"sha": "f21bbddc4ddc5489a797f63456ca1322c0d9e9f5", "filename": "src/test/ui/run-pass/associated-types/associated-types-project-from-type-param-via-bound-in-where.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-project-from-type-param-via-bound-in-where.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-project-from-type-param-via-bound-in-where.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-project-from-type-param-via-bound-in-where.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Various uses of `T::Item` syntax where the bound that supplies\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.", "previous_filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where.rs"}, {"sha": "57c7f557ffaf147f19dd50641a2467bac6de1926", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-bound-in-supertraits.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-bound-in-supertraits.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we correctly handle projection bounds appearing in the\n // supertrait list (and in conjunction with overloaded operators). In\n // this case, the `Result=Self` binding in the supertrait listing of", "previous_filename": "src/test/run-pass/associated-types-projection-bound-in-supertraits.rs"}, {"sha": "964eb886236058839b743f6d5460b91d7dd9ceae", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-from-known-type-in-impl.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-from-known-type-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-from-known-type-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-from-known-type-in-impl.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test where the impl self type uses a projection from a constant type.\n \n ", "previous_filename": "src/test/run-pass/associated-types-projection-from-known-type-in-impl.rs"}, {"sha": "8b98325598c8a8fc996841e3e38743f3f0247aef", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-in-object-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-object-type.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Corrected regression test for #20831. The original did not compile.\n // When fixed, it revealed another problem concerning projections that\n // appear in associated type bindings in object types, which were not", "previous_filename": "src/test/run-pass/associated-types-projection-in-object-type.rs"}, {"sha": "001faef7f4816b9184744e2bdea4e390538b23d9", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-in-supertrait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-supertrait.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we are handle to correctly handle a projection type\n // that appears in a supertrait bound. Issue #20559.\n ", "previous_filename": "src/test/run-pass/associated-types-projection-in-supertrait.rs"}, {"sha": "c2379e0f07829c4030196600c715ae89edcf2f58", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-in-where-clause.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-in-where-clause.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test a where clause that uses a non-normalized projection type.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-projection-in-where-clause.rs"}, {"sha": "f6951b48ae79525169c6fe5e204433417188438e", "filename": "src/test/ui/run-pass/associated-types/associated-types-projection-to-unrelated-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check that we do not get an error when you use `<Self as Get>::Value` in\n // the trait definition if there is no default method and for every impl,\n // `Self` does implement `Get`.", "previous_filename": "src/test/run-pass/associated-types-projection-to-unrelated-trait.rs"}, {"sha": "b3d5c3539894095dc6072d0154bc02b34de71b82", "filename": "src/test/ui/run-pass/associated-types/associated-types-qualified-path-with-trait-with-type-parameters.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n trait Foo<T> {", "previous_filename": "src/test/run-pass/associated-types-qualified-path-with-trait-with-type-parameters.rs"}, {"sha": "e45766adc2ca2cc09768088f170cf9e3bd59d881", "filename": "src/test/ui/run-pass/associated-types/associated-types-ref-from-struct.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-from-struct.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated type references in structure fields.\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/associated-types-ref-from-struct.rs"}, {"sha": "02e1d74db47d41363e0d0b28bc15dda7dfa185a0", "filename": "src/test/ui/run-pass/associated-types/associated-types-ref-in-struct-literal.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-ref-in-struct-literal.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test associated type references in a struct literal. Issue #20535.\n \n ", "previous_filename": "src/test/run-pass/associated-types-ref-in-struct-literal.rs"}, {"sha": "b4038a21828c6adbac3eaf615cb84e478955d3fb", "filename": "src/test/ui/run-pass/associated-types/associated-types-region-erasure-issue-20582.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-region-erasure-issue-20582.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for #20582. This test caused an ICE related to\n // inconsistent region erasure in codegen.\n ", "previous_filename": "src/test/run-pass/associated-types-region-erasure-issue-20582.rs"}, {"sha": "b77f3fcd295fbc06d5e0226ad16a73ba0d18bada", "filename": "src/test/ui/run-pass/associated-types/associated-types-resolve-lifetime.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-resolve-lifetime.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n trait Get<T> {", "previous_filename": "src/test/run-pass/associated-types-resolve-lifetime.rs"}, {"sha": "18b05987715a4083ac725299f6f3c4ddf5d9201c", "filename": "src/test/ui/run-pass/associated-types/associated-types-return.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-return.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test equality constraints on associated types in a where clause.\n \n ", "previous_filename": "src/test/run-pass/associated-types-return.rs"}, {"sha": "8e9b2367fcd0917e0d05ca1b3b8f8d2f5a4ccbd5", "filename": "src/test/ui/run-pass/associated-types/associated-types-simple.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-simple.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n trait Get {\n     type Value;", "previous_filename": "src/test/run-pass/associated-types-simple.rs"}, {"sha": "c486e3463515e3268ac91131d35c07ce0e590273", "filename": "src/test/ui/run-pass/associated-types/associated-types-stream.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-stream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-stream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-stream.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test references to the trait `Stream` in the bounds for associated\n // types defined on `Stream`. Issue #20551.\n ", "previous_filename": "src/test/run-pass/associated-types-stream.rs"}, {"sha": "384ec8ef44f0e0db2e5ae872da43c9ed7e0bdbef", "filename": "src/test/ui/run-pass/associated-types/associated-types-struct-field-named.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-named.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-named.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-named.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n ", "previous_filename": "src/test/run-pass/associated-types-struct-field-named.rs"}, {"sha": "54d0c8839a37847e9389765e0051ce9e667f8abd", "filename": "src/test/ui/run-pass/associated-types/associated-types-struct-field-numbered.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-struct-field-numbered.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we correctly normalize the type of a struct field\n // which has an associated type.\n ", "previous_filename": "src/test/run-pass/associated-types-struct-field-numbered.rs"}, {"sha": "3b148c5e1065468c1c4c43edc18b4bbf2f284286", "filename": "src/test/ui/run-pass/associated-types/associated-types-sugar-path.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-sugar-path.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test paths to associated types using the type-parameter-only sugar.\n \n use std::ops::Deref;", "previous_filename": "src/test/run-pass/associated-types-sugar-path.rs"}, {"sha": "5f24a44c14b5c709c06a252e525f40246a18c3c1", "filename": "src/test/ui/run-pass/associated-types/associated-types-where-clause-impl-ambiguity.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test how resolving a projection interacts with inference.  In this\n // case, we were eagerly unifying the type variable for the iterator\n // type with `I` from the where clause, ignoring the in-scope `impl`", "previous_filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs"}, {"sha": "175e8730cbcd3f8ccbed893ace5b4d98dd8d1641", "filename": "src/test/ui/run-pass/associated-types/auxiliary/associated-types-cc-lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fauxiliary%2Fassociated-types-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fauxiliary%2Fassociated-types-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fassociated-types%2Fauxiliary%2Fassociated-types-cc-lib.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/auxiliary/associated-types-cc-lib.rs"}, {"sha": "d984531b8bbf4b375ccbc7beaebe6c033471ff56", "filename": "src/test/ui/run-pass/autoref-autoderef/auto-ref-bounded-ty-param.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-bounded-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-bounded-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-bounded-ty-param.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n trait Foo {\n     fn f(&self);\n }", "previous_filename": "src/test/run-pass/auto-ref-bounded-ty-param.rs"}, {"sha": "6e665b0765680a48409760113f796b0b7e0f8e00", "filename": "src/test/ui/run-pass/autoref-autoderef/auto-ref-sliceable.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref-sliceable.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n trait Pushable<T> {", "previous_filename": "src/test/run-pass/auto-ref-sliceable.rs"}, {"sha": "afc79cce35e0e1f1b9f95b3bbcb670cff10c1ab8", "filename": "src/test/ui/run-pass/autoref-autoderef/auto-ref.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fauto-ref.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n struct Foo {\n     x: isize,\n }", "previous_filename": "src/test/run-pass/auto-ref.rs"}, {"sha": "0ce3ef7fd7b3e9710dd866eae54694322e762def", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-and-borrow-method-receiver.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-and-borrow-method-receiver.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct Foo {", "previous_filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs"}, {"sha": "8116a311eb458a5695819f1ad53418e5ced29ca0", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-on-trait.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-on-trait.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-on-trait.rs"}, {"sha": "2b14839500397781d2d9912b6e43045ed0be569f", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-priority.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-priority.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-priority.rs"}, {"sha": "14c57b075195ae2666c3ad62955d989fbdbffb35", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice-but-not-thrice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs"}, {"sha": "5185d0ee749a4b266df04821cd08ff36bf39fe5b", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method-twice.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method-twice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method-twice.rs"}, {"sha": "398ccde889483ca79f9cf24237df003ab3de76b7", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-method.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-method.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n #![feature(box_syntax)]\n \n trait double {", "previous_filename": "src/test/run-pass/autoderef-method.rs"}, {"sha": "cfbc7744a4cf36adbf01c449d5e8698f9b87a13b", "filename": "src/test/ui/run-pass/autoref-autoderef/autoderef-privacy.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoderef-privacy.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Check we do not select a private method or field when computing autoderefs\n \n #![allow(unused)]", "previous_filename": "src/test/run-pass/autoderef-privacy.rs"}, {"sha": "e32738e8f152a2ba294a7ac15cc93c411b4606d9", "filename": "src/test/ui/run-pass/autoref-autoderef/autoref-intermediate-types-issue-3585.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fautoref-autoderef%2Fautoref-intermediate-types-issue-3585.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n trait Foo {", "previous_filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs"}, {"sha": "c21399fd2998e0364e32f8bdfae95bf0332a2eff", "filename": "src/test/ui/run-pass/bench/issue-32062.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbench%2Fissue-32062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbench%2Fissue-32062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbench%2Fissue-32062.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n // pretty-expanded FIXME #23616\n \n fn main() {", "previous_filename": "src/test/run-pass/bench/issue-32062.rs"}, {"sha": "866784e517c7d4d1429665ea51237b7f45c1fbc2", "filename": "src/test/ui/run-pass/binding/allow_irrefutable_let_patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fallow_irrefutable_let_patterns.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(irrefutable_let_patterns)]\n \n // must-compile-successfully-irrefutable_let_patterns_with_gate", "previous_filename": "src/test/run-pass/allow_irrefutable_let_patterns.rs"}, {"sha": "24f037742708d3614033efbea2ce52222f8e4f3e", "filename": "src/test/ui/run-pass/binding/bind-field-short-with-modifiers.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fbind-field-short-with-modifiers.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n \n pub fn main() {\n     struct Foo { x: isize, y: isize }", "previous_filename": "src/test/run-pass/bind-field-short-with-modifiers.rs"}, {"sha": "6a23d159047ac584e109003493aeacf70a749f13", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn foo(s: &String) -> bool {\n     match &**s {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs"}, {"sha": "cb40b3a00991a7b4ecfce3b8125ddadec337a64e", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-3.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-3.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn foo<'r>(s: &'r usize) -> bool {\n     match s {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs"}, {"sha": "5f906903ed2519203a1464b5c20b0f01e79c5569", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-infallible.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-infallible.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs"}, {"sha": "1372a7a078935688dea0740fad818b42c37b714f", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern-option.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern-option.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn select<'r>(x: &'r Option<isize>, y: &'r Option<isize>) -> &'r Option<isize> {\n     match (x, y) {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs"}, {"sha": "f363bef36d642d3d8a2c6c05c8bc7e6c7916cde2", "filename": "src/test/ui/run-pass/binding/borrowed-ptr-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fborrowed-ptr-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn foo<T:Clone>(x: &T) -> T{\n     match x {", "previous_filename": "src/test/run-pass/borrowed-ptr-pattern.rs"}, {"sha": "c230442eecc58aca9f1b574a6008b0a731157b05", "filename": "src/test/ui/run-pass/binding/empty-types-in-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fempty-types-in-patterns.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n #![feature(slice_patterns)]", "previous_filename": "src/test/run-pass/empty-types-in-patterns.rs"}, {"sha": "26e852eff2350b02ac41b733759412ce7e653bbb", "filename": "src/test/ui/run-pass/binding/exhaustive-bool-match-sanity.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexhaustive-bool-match-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexhaustive-bool-match-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexhaustive-bool-match-sanity.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Issue #33540\n // We previously used to generate a 3-armed boolean `SwitchInt` in the\n // MIR of the function `foo` below. #33583 changed rustc to", "previous_filename": "src/test/run-pass/exhaustive-bool-match-sanity.rs"}, {"sha": "3325aa7b3df8f4e3649c3e8b3c20fe487154f8b4", "filename": "src/test/ui/run-pass/binding/expr-match-generic-unique1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: Box<T>, eq: F) where F: FnOnce(Box<T>, Box<T>) -> bool {", "previous_filename": "src/test/run-pass/expr-match-generic-unique1.rs"}, {"sha": "8daa33e6227314b0e026c9adc8537bb5f3e25008", "filename": "src/test/ui/run-pass/binding/expr-match-generic-unique2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic-unique2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn test_generic<T: Clone, F>(expected: T, eq: F) where F: FnOnce(T, T) -> bool {", "previous_filename": "src/test/run-pass/expr-match-generic-unique2.rs"}, {"sha": "11c907b9b2da109552c6d470656bd5186a4b471d", "filename": "src/test/ui/run-pass/binding/expr-match-generic.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-generic.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n type compare<T> = extern \"Rust\" fn(T, T) -> bool;\n ", "previous_filename": "src/test/run-pass/expr-match-generic.rs"}, {"sha": "f283fdddb6a1b9b2b7065a485b16a8962718c6fb", "filename": "src/test/ui/run-pass/binding/expr-match-panic-all.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic-all.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n ", "previous_filename": "src/test/run-pass/expr-match-panic-all.rs"}, {"sha": "c6f8ae7bca684d64102c48bda16adcff089d2a68", "filename": "src/test/ui/run-pass/binding/expr-match-panic.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-panic.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn test_simple() {", "previous_filename": "src/test/run-pass/expr-match-panic.rs"}, {"sha": "b67b9fa3ddac861ea334ca3c042f54e67a81e7f7", "filename": "src/test/ui/run-pass/binding/expr-match-unique.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match-unique.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n // Tests for match as expressions resulting in boxed types", "previous_filename": "src/test/run-pass/expr-match-unique.rs"}, {"sha": "83d44e42b3272bfdf285b578950cbe18fc637a77", "filename": "src/test/ui/run-pass/binding/expr-match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fexpr-match.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n ", "previous_filename": "src/test/run-pass/expr-match.rs"}, {"sha": "c0e68f99ad0e70fb5fd147fef2aa5eba7a698704", "filename": "src/test/ui/run-pass/binding/fat-arrow-match.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffat-arrow-match.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n enum color {\n     red,", "previous_filename": "src/test/run-pass/fat-arrow-match.rs"}, {"sha": "7926234161f52a91a2bcd66082d1aafb3042393b", "filename": "src/test/ui/run-pass/binding/fn-pattern-expected-type-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n pub fn main() {\n     let v : &[(isize,isize)] = &[ (1, 2), (3, 4), (5, 6) ];\n     for &(x, y) in v {", "previous_filename": "src/test/run-pass/fn-pattern-expected-type-2.rs"}, {"sha": "a868267f37169baf730a1d4cf25ea4b3df936dc4", "filename": "src/test/ui/run-pass/binding/fn-pattern-expected-type.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffn-pattern-expected-type.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let f = |(x, y): (isize, isize)| {", "previous_filename": "src/test/run-pass/fn-pattern-expected-type.rs"}, {"sha": "d766feeb72c907962df9eb30d2efe0034e4f72eb", "filename": "src/test/ui/run-pass/binding/func-arg-incomplete-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-incomplete-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we do not leak when the arg pattern must drop part of the\n // argument (in this case, the `y` field).\n ", "previous_filename": "src/test/run-pass/func-arg-incomplete-pattern.rs"}, {"sha": "7e87f14e2c5300ffa43ff1a8a4b1d95728539944", "filename": "src/test/ui/run-pass/binding/func-arg-ref-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-ref-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // exec-env:RUST_POISON_ON_FREE=1\n \n // Test argument patterns where we create refs to the inside of", "previous_filename": "src/test/run-pass/func-arg-ref-pattern.rs"}, {"sha": "18a1909b51e0b29f1165ddce78e58033f329bfa9", "filename": "src/test/ui/run-pass/binding/func-arg-wild-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-wild-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-wild-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Ffunc-arg-wild-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that we can compile code that uses a `_` in function argument\n // patterns.\n ", "previous_filename": "src/test/run-pass/func-arg-wild-pattern.rs"}, {"sha": "9147bf14cadbcb0140200754da73575ab75db604", "filename": "src/test/ui/run-pass/binding/if-let.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fif-let.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = Some(3);", "previous_filename": "src/test/run-pass/if-let.rs"}, {"sha": "9e9fc8b4249092f72cdee6521016f8665d343e14", "filename": "src/test/ui/run-pass/binding/inconsistent-lifetime-mismatch.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finconsistent-lifetime-mismatch.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n fn foo(_: &[&str]) {}", "previous_filename": "src/test/run-pass/inconsistent-lifetime-mismatch.rs"}, {"sha": "3be0991aea6a1b04e61a5fca740509e8880b25b3", "filename": "src/test/ui/run-pass/binding/inferred-suffix-in-pattern-range.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Finferred-suffix-in-pattern-range.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = 2;", "previous_filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs"}, {"sha": "9cd62f9a90106126d0db74703994b0ead6d7374a", "filename": "src/test/ui/run-pass/binding/irrefutable-slice-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Firrefutable-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Firrefutable-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Firrefutable-slice-patterns.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // #47096\n \n #![feature(slice_patterns)]", "previous_filename": "src/test/run-pass/irrefutable-slice-patterns.rs"}, {"sha": "99fc172892c2d2873b1c0d830d2763ca11458015", "filename": "src/test/ui/run-pass/binding/let-assignability.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-assignability.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn f() {", "previous_filename": "src/test/run-pass/let-assignability.rs"}, {"sha": "1c1b1a397692732f35525d8b4bae284a827a2d12", "filename": "src/test/ui/run-pass/binding/let-destruct-ref.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-destruct-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-destruct-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-destruct-ref.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = 3_usize;", "previous_filename": "src/test/run-pass/let-destruct-ref.rs"}, {"sha": "d432dbe86b91d482002334a670af2a4701de0b4d", "filename": "src/test/ui/run-pass/binding/let-var-hygiene.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Flet-var-hygiene.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // shouldn't affect evaluation of $ex:\n \n macro_rules! bad_macro {", "previous_filename": "src/test/run-pass/let-var-hygiene.rs"}, {"sha": "c5111073ca8b2b5b41718fe4053f2f88f5e4af40", "filename": "src/test/ui/run-pass/binding/match-arm-statics.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: -g\n \n #[derive(PartialEq, Eq)]", "previous_filename": "src/test/run-pass/match-arm-statics.rs"}, {"sha": "16954f85752aeb11b6549768d423bce9878aa884", "filename": "src/test/ui/run-pass/binding/match-beginning-vert.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-beginning-vert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-beginning-vert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-beginning-vert.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n enum Foo {\n     A,\n     B,", "previous_filename": "src/test/run-pass/match-beginning-vert.rs"}, {"sha": "0871ff836cca55a7ffb8946705b743955491b4b8", "filename": "src/test/ui/run-pass/binding/match-borrowed_str.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-borrowed_str.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![allow(unnecessary_allocation)]\n+// run-pass\n \n fn f1(ref_string: &str) -> String {\n     match ref_string {", "previous_filename": "src/test/run-pass/match-borrowed_str.rs"}, {"sha": "8f9a8d2cfcca1cdb9ba99ceca883a2067effee7a", "filename": "src/test/ui/run-pass/binding/match-bot-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // n.b. This was only ever failing with optimization disabled.\n \n fn a() -> isize { match return 1 { 2 => 3, _ => panic!() } }", "previous_filename": "src/test/run-pass/match-bot-2.rs"}, {"sha": "d91d95b826a16a3398165fe09f047869418384a7", "filename": "src/test/ui/run-pass/binding/match-bot.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-bot.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let i: isize =", "previous_filename": "src/test/run-pass/match-bot.rs"}, {"sha": "728d4a241fefef63c27a508dd249dbf41023c7ac", "filename": "src/test/ui/run-pass/binding/match-byte-array-patterns.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-byte-array-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-byte-array-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-byte-array-patterns.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(slice_patterns)]\n \n fn main() {", "previous_filename": "src/test/run-pass/match-byte-array-patterns.rs"}, {"sha": "9ddf3b421d5e8867927913cc6ce94031e9275be9", "filename": "src/test/ui/run-pass/binding/match-enum-struct-0.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-0.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // regression test for issue #5625\n \n ", "previous_filename": "src/test/run-pass/match-enum-struct-0.rs"}, {"sha": "46d9c19bf849a774578f3ecfc5ed9a59f10d42c4", "filename": "src/test/ui/run-pass/binding/match-enum-struct-1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-enum-struct-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n enum E {\n     Foo{f : isize},", "previous_filename": "src/test/run-pass/match-enum-struct-1.rs"}, {"sha": "68edbea34717255c75248845fd0b3cd1fff6f748", "filename": "src/test/ui/run-pass/binding/match-implicit-copy-unique.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-implicit-copy-unique.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n #![feature(box_syntax)]\n \n struct Pair { a: Box<isize>, b: Box<isize> }", "previous_filename": "src/test/run-pass/match-implicit-copy-unique.rs"}, {"sha": "5c4c7c048ef7302c26adbcf65b81393be50c7dad", "filename": "src/test/ui/run-pass/binding/match-in-macro.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-in-macro.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n enum Foo {\n     B { b1: isize, bb1: isize},", "previous_filename": "src/test/run-pass/match-in-macro.rs"}, {"sha": "94ea8edd70f41c21f269db3c187198cb32cb88a9", "filename": "src/test/ui/run-pass/binding/match-join.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-join.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn foo<T>(y: Option<T>) {\n     let mut x: isize;\n     let mut rs: Vec<isize> = Vec::new();", "previous_filename": "src/test/run-pass/match-join.rs"}, {"sha": "f649ce0ee0e021c600546e25bfde9a7938b5c34a", "filename": "src/test/ui/run-pass/binding/match-larger-const.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-larger-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-larger-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-larger-const.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #[derive(Eq, PartialEq)]\n pub struct Data([u8; 4]);\n ", "previous_filename": "src/test/run-pass/match-larger-const.rs"}, {"sha": "f016ca8e43ce512bfc8ba911b9b6182c96ee9eca", "filename": "src/test/ui/run-pass/binding/match-naked-record-expr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record-expr.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct X { x: isize }", "previous_filename": "src/test/run-pass/match-naked-record-expr.rs"}, {"sha": "550ace8b64958848a14cedc4fdd9d457f38fe4c7", "filename": "src/test/ui/run-pass/binding/match-naked-record.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-naked-record.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct X { x: isize }", "previous_filename": "src/test/run-pass/match-naked-record.rs"}, {"sha": "06d7095a9248f006bd94f0658a13c4b8277a3f18", "filename": "src/test/ui/run-pass/binding/match-path.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-path.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/match-path.rs"}, {"sha": "e6242a0ee587c9b318579ec3a839a941f66f3663", "filename": "src/test/ui/run-pass/binding/match-pattern-bindings.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-bindings.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn main() {\n     let value = Some(1);", "previous_filename": "src/test/run-pass/match-pattern-bindings.rs"}, {"sha": "8e6129d60b5860b5779ea98a203ca9e6795a2a07", "filename": "src/test/ui/run-pass/binding/match-pattern-lit.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-lit.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn altlit(f: isize) -> isize {", "previous_filename": "src/test/run-pass/match-pattern-lit.rs"}, {"sha": "2486fa782e0f9dcd01d70b18578bb861f644b38e", "filename": "src/test/ui/run-pass/binding/match-pattern-no-type-params.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-no-type-params.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n+\n enum maybe<T> { nothing, just(T), }\n \n fn foo(x: maybe<isize>) {", "previous_filename": "src/test/run-pass/match-pattern-no-type-params.rs"}, {"sha": "d15256612692b23c7f50e4379da97970e5964a8c", "filename": "src/test/ui/run-pass/binding/match-pattern-simple.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pattern-simple.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/match-pattern-simple.rs"}, {"sha": "06a011c0fa277df43b2ba7174faa4c036754ad3d", "filename": "src/test/ui/run-pass/binding/match-phi.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-phi.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n-\n-#![allow(dead_assignment)]\n+#![allow(non_camel_case_types)]\n #![allow(unused_variables)]\n \n enum thing { a, b, c, }", "previous_filename": "src/test/run-pass/match-phi.rs"}, {"sha": "577e5c97e42a75e68a41835f5e3fffa6f785e80b", "filename": "src/test/ui/run-pass/binding/match-pipe-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-pipe-binding.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: -Z borrowck=compare\n \n fn test1() {", "previous_filename": "src/test/run-pass/match-pipe-binding.rs"}, {"sha": "7178d1837c7abfa9b80e30b0073351f7325c8706", "filename": "src/test/ui/run-pass/binding/match-range-infer.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-infer.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that type inference for range patterns works correctly (is bi-directional).\n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-range-infer.rs"}, {"sha": "5be8db5fc86baa5e36120fa11d55104722483d4a", "filename": "src/test/ui/run-pass/binding/match-range-static.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range-static.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n+#![allow(non_upper_case_globals)]\n \n const s: isize = 1;\n const e: isize = 42;", "previous_filename": "src/test/run-pass/match-range-static.rs"}, {"sha": "a9687943e99373994caf2195b713ff0f6a403fa4", "filename": "src/test/ui/run-pass/binding/match-range.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-range.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(illegal_floating_point_literal_pattern)] // FIXME #41620\n #![feature(exclusive_range_pattern)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-range.rs"}, {"sha": "89b12976355bf3c59a92496856c998904951b01a", "filename": "src/test/ui/run-pass/binding/match-reassign.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-reassign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-reassign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-reassign.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for #23698: The reassignment checker only cared\n // about the last assignment in a match arm body\n ", "previous_filename": "src/test/run-pass/match-reassign.rs"}, {"sha": "2da75d941b4c380037361f3c670808085ca02455", "filename": "src/test/ui/run-pass/binding/match-ref-binding-in-guard-3256.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-in-guard-3256.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n use std::sync::Mutex;\n ", "previous_filename": "src/test/run-pass/match-ref-binding-in-guard-3256.rs"}, {"sha": "a3d26024732d2625c21f59d366c7e5faba303441", "filename": "src/test/ui/run-pass/binding/match-ref-binding-mut-option.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut-option.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let mut v = Some(22);", "previous_filename": "src/test/run-pass/match-ref-binding-mut-option.rs"}, {"sha": "c1f09502542ab44d0575a6c5f8a3b671e8ca43d0", "filename": "src/test/ui/run-pass/binding/match-ref-binding-mut.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding-mut.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n \n struct Rec {\n     f: isize", "previous_filename": "src/test/run-pass/match-ref-binding-mut.rs"}, {"sha": "bc36b8102ce0421c04f9d78a7a84a514d972477c", "filename": "src/test/ui/run-pass/binding/match-ref-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-binding.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n fn destructure(x: Option<isize>) -> isize {\n     match x {", "previous_filename": "src/test/run-pass/match-ref-binding.rs"}, {"sha": "7ef1933001504c5af944172582e7c4f5484319c6", "filename": "src/test/ui/run-pass/binding/match-ref-unsized.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-ref-unsized.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Binding unsized expressions to ref patterns\n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-ref-unsized.rs"}, {"sha": "0d75c81b1e6db7a5bcfa7614b390c523a765ff86", "filename": "src/test/ui/run-pass/binding/match-static-const-rename.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-static-const-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-static-const-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-static-const-rename.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Issue #7526: lowercase static constants in patterns look like bindings\n \n // This is similar to compile-fail/match-static-const-lc, except it", "previous_filename": "src/test/run-pass/match-static-const-rename.rs"}, {"sha": "0722a6f0b32ef380d0da0774e4bfcde11cc4f081", "filename": "src/test/ui/run-pass/binding/match-str.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-str.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Issue #53\n+#![allow(non_camel_case_types)]\n \n \n pub fn main() {", "previous_filename": "src/test/run-pass/match-str.rs"}, {"sha": "facfaae54051631320d9727241a4be85c42729f9", "filename": "src/test/ui/run-pass/binding/match-struct-0.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-struct-0.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Foo{\n     f : isize,", "previous_filename": "src/test/run-pass/match-struct-0.rs"}, {"sha": "aeeb7dd4bc9eda33e49c3bdeb283d6a4fca80055", "filename": "src/test/ui/run-pass/binding/match-tag.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-tag.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n ", "previous_filename": "src/test/run-pass/match-tag.rs"}, {"sha": "a543527586f88e9e3f7f0da3b38e335bb1176bff", "filename": "src/test/ui/run-pass/binding/match-unique-bind.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unique-bind.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n ", "previous_filename": "src/test/run-pass/match-unique-bind.rs"}, {"sha": "2e2f0f0b7ea45039b8b8ea537f5b5ea6e0d14592", "filename": "src/test/ui/run-pass/binding/match-unsized.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-unsized.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn main() {\n     let data: &'static str = \"Hello, World!\";\n     match data {", "previous_filename": "src/test/run-pass/match-unsized.rs"}, {"sha": "a24a38af22f1e159ce57270017987991b4a056ab", "filename": "src/test/ui/run-pass/binding/match-value-binding-in-guard-3291.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-value-binding-in-guard-3291.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n #![feature(box_syntax)]", "previous_filename": "src/test/run-pass/match-value-binding-in-guard-3291.rs"}, {"sha": "5d4347559f788841d49ba3d24c0476a1487d2fde", "filename": "src/test/ui/run-pass/binding/match-var-hygiene.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-var-hygiene.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // shouldn't affect evaluation of $ex.\n macro_rules! bad_macro { ($ex:expr) => (\n     {match 9 {_x => $ex}}", "previous_filename": "src/test/run-pass/match-var-hygiene.rs"}, {"sha": "4c7289245568d92f3eb458b152960d3ec3f7a5c5", "filename": "src/test/ui/run-pass/binding/match-vec-alternatives.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-alternatives.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(slice_patterns)]\n \n fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) -> &'static str {", "previous_filename": "src/test/run-pass/match-vec-alternatives.rs"}, {"sha": "308a4938b3aa59870b076a114e17a2876f20ff26", "filename": "src/test/ui/run-pass/binding/match-vec-rvalue.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-vec-rvalue.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Tests that matching rvalues with drops does not crash.\n \n ", "previous_filename": "src/test/run-pass/match-vec-rvalue.rs"}, {"sha": "fe7aa288d52b8a2d26dbf181ee19475955f762d8", "filename": "src/test/ui/run-pass/binding/match-with-ret-arm.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmatch-with-ret-arm.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n pub fn main() {\n     // sometimes we have had trouble finding\n     // the right type for f, as we unified", "previous_filename": "src/test/run-pass/match-with-ret-arm.rs"}, {"sha": "6ecd84d8c58bfc7738457ba2452e771884bd21e1", "filename": "src/test/ui/run-pass/binding/multi-let.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmulti-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmulti-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmulti-let.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = 10;", "previous_filename": "src/test/run-pass/multi-let.rs"}, {"sha": "1e28b77f2ce0fb8266927fd04920557e95497ab2", "filename": "src/test/ui/run-pass/binding/mut-in-ident-patterns.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fmut-in-ident-patterns.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n+#![allow(non_shorthand_field_patterns)]\n \n trait Foo {\n     fn foo(&self, mut x: isize) -> isize {", "previous_filename": "src/test/run-pass/mut-in-ident-patterns.rs"}, {"sha": "8456e63d4c7ba80c4aa5cb25615bf873d81b9724", "filename": "src/test/ui/run-pass/binding/nested-exhaustive-match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-exhaustive-match.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n struct Foo { foo: bool, bar: Option<isize>, baz: isize }", "previous_filename": "src/test/run-pass/nested-exhaustive-match.rs"}, {"sha": "e1012f3b384c9cee8cd560de5b10daea27dcb730", "filename": "src/test/ui/run-pass/binding/nested-matchs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-matchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-matchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-matchs.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn baz() -> ! { panic!(); }\n \n fn foo() {", "previous_filename": "src/test/run-pass/nested-matchs.rs"}, {"sha": "5bf558a4871297e6a6fdddaa6e38617b1c2d8cab", "filename": "src/test/ui/run-pass/binding/nested-pattern.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnested-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n // a bug was causing this to complain about leaked memory on exit\n ", "previous_filename": "src/test/run-pass/nested-pattern.rs"}, {"sha": "39b2f2da6244543fe1bec4e60cdeb28511077705", "filename": "src/test/ui/run-pass/binding/nil-pattern.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnil-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnil-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnil-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n pub fn main() { let x = (); match x { () => { } } }", "previous_filename": "src/test/run-pass/nil-pattern.rs"}, {"sha": "892464dd1dbf99af2e054b2e3ad6ae3c502283f9", "filename": "src/test/ui/run-pass/binding/nullary-or-pattern.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnullary-or-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnullary-or-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fnullary-or-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n enum blah { a, b, }\n ", "previous_filename": "src/test/run-pass/nullary-or-pattern.rs"}, {"sha": "90ef3c2b7eafda5158349be24cbf72b5a7e77015", "filename": "src/test/ui/run-pass/binding/optional_comma_in_match_arm.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Foptional_comma_in_match_arm.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // ignore-pretty issue #37199\n+#![allow(while_true)]\n \n fn main() {\n     let x = 1;", "previous_filename": "src/test/run-pass/optional_comma_in_match_arm.rs"}, {"sha": "a9b3e27865246a3e4a4bdb2db5636d695a19fc84", "filename": "src/test/ui/run-pass/binding/or-pattern.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2For-pattern.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n enum blah { a(isize, isize, usize), b(isize, isize), c, }\n ", "previous_filename": "src/test/run-pass/or-pattern.rs"}, {"sha": "7bb929325ad689add626afd26aa31db8d1043752", "filename": "src/test/ui/run-pass/binding/order-drop-with-match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Forder-drop-with-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Forder-drop-with-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Forder-drop-with-match.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n // Test to make sure the destructors run in the right order.\n // Each destructor sets it's tag in the corresponding entry", "previous_filename": "src/test/run-pass/order-drop-with-match.rs"}, {"sha": "44666eda3ca7158768ef6fde970efc05a3c4dfb0", "filename": "src/test/ui/run-pass/binding/pat-ranges.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-ranges.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Parsing of range patterns\n \n const NUM1: i32 = 10;", "previous_filename": "src/test/run-pass/pat-ranges.rs"}, {"sha": "dc8a7ff7a07d6c16f65bc3b06455e995e6a0545e", "filename": "src/test/ui/run-pass/binding/pat-tuple-1.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-1.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-1.rs"}, {"sha": "0428e32c43b41bbcaee2fcf0ca60666f6683cffb", "filename": "src/test/ui/run-pass/binding/pat-tuple-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1,);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-2.rs"}, {"sha": "60b933e4ce448289e928b401829cdc2863d3c2f9", "filename": "src/test/ui/run-pass/binding/pat-tuple-3.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-3.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3);\n     let branch = match x {", "previous_filename": "src/test/run-pass/pat-tuple-3.rs"}, {"sha": "cd19f2c67a12266ac3e64af5aa34b4b7625caa45", "filename": "src/test/ui/run-pass/binding/pat-tuple-4.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-4.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-4.rs"}, {"sha": "0ac4c24c4eef268d970a039901808752a0648c9b", "filename": "src/test/ui/run-pass/binding/pat-tuple-5.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-5.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     struct S;\n     struct Z;", "previous_filename": "src/test/run-pass/pat-tuple-5.rs"}, {"sha": "b3cd0e1b5431da2c4963e63b2d0aaccdfa000de5", "filename": "src/test/ui/run-pass/binding/pat-tuple-6.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-6.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n fn tuple() {\n     let x = (1, 2, 3, 4, 5);\n     match x {", "previous_filename": "src/test/run-pass/pat-tuple-6.rs"}, {"sha": "c6730f14bc4c36b9396dce05d79593f80bcedd26", "filename": "src/test/ui/run-pass/binding/pat-tuple-7.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpat-tuple-7.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(pattern_parentheses)]\n \n fn main() {", "previous_filename": "src/test/run-pass/pat-tuple-7.rs"}, {"sha": "2ee697fe2ff05018c6aad06fe904b078cdbd59f9", "filename": "src/test/ui/run-pass/binding/pattern-bound-var-in-for-each.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-bound-var-in-for-each.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Tests that codegen_path checks whether a\n // pattern-bound var is an upvar (when codegenning\n // the for-each body)", "previous_filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs"}, {"sha": "9a5a420a80ba0b54708ea53fee883c744e060f70", "filename": "src/test/ui/run-pass/binding/pattern-in-closure.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-in-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-in-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fpattern-in-closure.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_shorthand_field_patterns)]\n+\n struct Foo {\n     x: isize,\n     y: isize", "previous_filename": "src/test/run-pass/pattern-in-closure.rs"}, {"sha": "350a64781cdb00000ffd15b0c5be235c794bc788", "filename": "src/test/ui/run-pass/binding/range-inclusive-pattern-precedence.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Frange-inclusive-pattern-precedence.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_patterns, pattern_parentheses)]\n \n const VALUE: usize = 21;", "previous_filename": "src/test/run-pass/range-inclusive-pattern-precedence.rs"}, {"sha": "13c16790e09b460291772466a4a1836ccf60e815", "filename": "src/test/ui/run-pass/binding/simple-generic-match.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fsimple-generic-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fsimple-generic-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fsimple-generic-match.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/simple-generic-match.rs"}, {"sha": "1fc597b636ecfbfcdb9f6defbc5addf1c74af553", "filename": "src/test/ui/run-pass/binding/use-uninit-match.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n fn foo<T>(o: myoption<T>) -> isize {", "previous_filename": "src/test/run-pass/use-uninit-match.rs"}, {"sha": "8eb44fd76e1d28b118e151c4d9eca9bf06a9967c", "filename": "src/test/ui/run-pass/binding/use-uninit-match2.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fuse-uninit-match2.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(non_camel_case_types)]\n \n \n fn foo<T>(o: myoption<T>) -> isize {", "previous_filename": "src/test/run-pass/use-uninit-match2.rs"}, {"sha": "db71d97a19d46e4e76d084460c41c9d905e6089e", "filename": "src/test/ui/run-pass/binding/zero_sized_subslice_match.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fzero_sized_subslice_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fzero_sized_subslice_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fbinding%2Fzero_sized_subslice_match.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(slice_patterns)]\n \n fn main() {", "previous_filename": "src/test/run-pass/zero_sized_subslice_match.rs"}, {"sha": "248e34bde09caa3a955d5c8361dfea0239f3a56f", "filename": "src/test/ui/run-pass/borrowck/borrowck-assign-to-subfield.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-assign-to-subfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-assign-to-subfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-assign-to-subfield.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n pub fn main() {", "previous_filename": "src/test/run-pass/borrowck/borrowck-assign-to-subfield.rs"}, {"sha": "fa79ac84c865266ca82e59263b993b6c3bd9e9db", "filename": "src/test/ui/run-pass/borrowck/borrowck-assignment-to-static-mut.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test taken from #45641 (https://github.com/rust-lang/rust/issues/45641)\n \n // revisions: ast mir", "previous_filename": "src/test/run-pass/borrowck/borrowck-assignment-to-static-mut.rs"}, {"sha": "86875a038daae85ba3516e1c4ce5329c4e46aa3f", "filename": "src/test/ui/run-pass/borrowck/borrowck-binding-mutbl.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-binding-mutbl.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+\n struct F { f: Vec<isize> }\n \n fn impure(_v: &[isize]) {", "previous_filename": "src/test/run-pass/borrowck/borrowck-binding-mutbl.rs"}, {"sha": "b85a9baf5a0a359caac3251968af4a01d29936ee", "filename": "src/test/ui/run-pass/borrowck/borrowck-borrow-from-expr-block.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-borrow-from-expr-block.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n fn borrow<F>(x: &isize, f: F) where F: FnOnce(&isize) {", "previous_filename": "src/test/run-pass/borrowck/borrowck-borrow-from-expr-block.rs"}, {"sha": "72634651d9593de40f20c0aaa004fb66a3517a3a", "filename": "src/test/ui/run-pass/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-mut-base-ptr-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-borrow-of-mut-base-ptr-safe.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that freezing an `&mut` pointer while referent is\n // frozen is legal.\n //", "previous_filename": "src/test/run-pass/borrowck/borrowck-borrow-of-mut-base-ptr-safe.rs"}, {"sha": "8c6d92c9962635509927885fc12e86248d0452db", "filename": "src/test/ui/run-pass/borrowck/borrowck-closures-two-imm.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-closures-two-imm.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Tests that two closures can simultaneously have immutable\n // access to the variable, whether that immutable access be used\n // for direct reads or for taking immutable ref. Also check", "previous_filename": "src/test/run-pass/borrowck/borrowck-closures-two-imm.rs"}, {"sha": "a3d6f129f183e1585d02e89941ff306a8c786d4b", "filename": "src/test/ui/run-pass/borrowck/borrowck-field-sensitivity.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-field-sensitivity.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n #![feature(box_syntax)]", "previous_filename": "src/test/run-pass/borrowck/borrowck-field-sensitivity.rs"}, {"sha": "baefdf657ea3627ee36969b9a854686b27ada423", "filename": "src/test/ui/run-pass/borrowck/borrowck-fixed-length-vecs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-fixed-length-vecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-fixed-length-vecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-fixed-length-vecs.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let x = [22];", "previous_filename": "src/test/run-pass/borrowck/borrowck-fixed-length-vecs.rs"}, {"sha": "0ddb71d1d158772547eca5994eb69a81d879771c", "filename": "src/test/ui/run-pass/borrowck/borrowck-freeze-frozen-mut.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-freeze-frozen-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-freeze-frozen-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-freeze-frozen-mut.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test that a `&mut` inside of an `&` is freezable.\n \n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-freeze-frozen-mut.rs"}, {"sha": "4ec7e0a58983ea8205740ee28ddc05146481f9cb", "filename": "src/test/ui/run-pass/borrowck/borrowck-lend-args.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-lend-args.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-lend-args.rs"}, {"sha": "3f81c2e5619e0035ce4c16ca9dd7ca8afad6ce63", "filename": "src/test/ui/run-pass/borrowck/borrowck-macro-interaction-issue-6304.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-macro-interaction-issue-6304.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n+#![allow(unconditional_recursion)]\n+\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-macro-interaction-issue-6304.rs"}, {"sha": "180a6ad8f87f48e7bdbd49d25a83ff23cfb11966", "filename": "src/test/ui/run-pass/borrowck/borrowck-move-by-capture-ok.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n pub fn main() {", "previous_filename": "src/test/run-pass/borrowck/borrowck-move-by-capture-ok.rs"}, {"sha": "4650ce8d2c42f069c94e9b256425794612e25f94", "filename": "src/test/ui/run-pass/borrowck/borrowck-multiple-borrows-interior-boxes.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-multiple-borrows-interior-boxes.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Test case from #39963.\n \n #![feature(nll)]", "previous_filename": "src/test/run-pass/borrowck/borrowck-multiple-borrows-interior-boxes.rs"}, {"sha": "87dd1f1de537e1853dcb6cf9d64b4862dc9bf6e6", "filename": "src/test/ui/run-pass/borrowck/borrowck-mut-uniq.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-mut-uniq.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(box_syntax)]\n \n use std::mem::swap;", "previous_filename": "src/test/run-pass/borrowck/borrowck-mut-uniq.rs"}, {"sha": "b616cf25382183790b856ac9d5c1df36b4f37fee", "filename": "src/test/ui/run-pass/borrowck/borrowck-mut-vec-as-imm-slice.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-mut-vec-as-imm-slice.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n \n fn want_slice(v: &[isize]) -> isize {", "previous_filename": "src/test/run-pass/borrowck/borrowck-mut-vec-as-imm-slice.rs"}, {"sha": "3b9c4aed03ec10c43ff0810ff4965a9f628b10a7", "filename": "src/test/ui/run-pass/borrowck/borrowck-pat-enum.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-pat-enum.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // ignore-pretty issue #37199\n \n fn match_ref(v: Option<isize>) -> isize {", "previous_filename": "src/test/run-pass/borrowck/borrowck-pat-enum.rs"}, {"sha": "1ce7a00d4235da74a03c8cbf4a078d7d163e74e9", "filename": "src/test/ui/run-pass/borrowck/borrowck-pat-reassign-no-binding.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-pat-reassign-no-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-pat-reassign-no-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-pat-reassign-no-binding.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n pub fn main() {\n     let mut x = None;", "previous_filename": "src/test/run-pass/borrowck/borrowck-pat-reassign-no-binding.rs"}, {"sha": "936e5565eed6f66f21a7c3c530af7aed52b36c7e", "filename": "src/test/ui/run-pass/borrowck/borrowck-rvalues-mutable.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-rvalues-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-rvalues-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-rvalues-mutable.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n struct Counter {\n     value: usize", "previous_filename": "src/test/run-pass/borrowck/borrowck-rvalues-mutable.rs"}, {"sha": "dd832b9eee08cc38d48ede87987099eb97efc0f5", "filename": "src/test/ui/run-pass/borrowck/borrowck-scope-of-deref-issue-4666.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-scope-of-deref-issue-4666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-scope-of-deref-issue-4666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-scope-of-deref-issue-4666.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Tests that the scope of the pointer returned from `get()` is\n // limited to the deref operation itself, and does not infect the\n // block as a whole.", "previous_filename": "src/test/run-pass/borrowck/borrowck-scope-of-deref-issue-4666.rs"}, {"sha": "e7c1699f7b4131a003540e6575311a2833c43e1e", "filename": "src/test/ui/run-pass/borrowck/borrowck-slice-pattern-element-loan.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-slice-pattern-element-loan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-slice-pattern-element-loan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-slice-pattern-element-loan.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n //compile-flags: -Z borrowck=mir\n \n #![feature(slice_patterns)]", "previous_filename": "src/test/run-pass/borrowck/borrowck-slice-pattern-element-loan.rs"}, {"sha": "809948d5423d693a24acfce2ce1a11c114838437", "filename": "src/test/ui/run-pass/borrowck/borrowck-static-item-in-fn.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-static-item-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-static-item-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-static-item-in-fn.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // Regression test for issue #7740\n \n // pretty-expanded FIXME #23616", "previous_filename": "src/test/run-pass/borrowck/borrowck-static-item-in-fn.rs"}, {"sha": "cf7a976628e8df0db1d34aa853a5fbfee6f39ec4", "filename": "src/test/ui/run-pass/borrowck/borrowck-trait-lifetime.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-trait-lifetime.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // This test verifies that casting from the same lifetime on a value\n // to the same lifetime on a trait succeeds. See issue #10766.\n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-trait-lifetime.rs"}, {"sha": "f9b650e0e82808789cda98a3280a4d0329178001", "filename": "src/test/ui/run-pass/borrowck/borrowck-uniq-via-ref.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-uniq-via-ref.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n \n // pretty-expanded FIXME #23616\n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-uniq-via-ref.rs"}, {"sha": "0a8d30753362768d63abb2cfc1cd5542bcdb2b8f", "filename": "src/test/ui/run-pass/borrowck/borrowck-univariant-enum.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-univariant-enum.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+// run-pass\n+#![allow(non_camel_case_types)]\n \n use std::cell::Cell;\n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-univariant-enum.rs"}, {"sha": "aba46ad609f7693709adc15267ecdeeb20947348", "filename": "src/test/ui/run-pass/borrowck/borrowck-unsafe-static-mutable-borrows.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir\n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-unsafe-static-mutable-borrows.rs"}, {"sha": "15eaf83b50847dc990010c685365fb5007da4bec", "filename": "src/test/ui/run-pass/borrowck/borrowck-unused-mut-locals.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-unused-mut-locals.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n #![feature(nll)]\n #![deny(unused_mut)]\n ", "previous_filename": "src/test/run-pass/borrowck/borrowck-unused-mut-locals.rs"}, {"sha": "10809c1bb0be6c528f8418a9f81dd49cb2319ffa", "filename": "src/test/ui/run-pass/borrowck/borrowck-use-mut-borrow.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Fborrowck-use-mut-borrow.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // pretty-expanded FIXME #23616\n \n #![feature(box_syntax)]", "previous_filename": "src/test/run-pass/borrowck/borrowck-use-mut-borrow.rs"}, {"sha": "561a5b3c1151bff069b4d8ff1cc8cc4b7f0ec958", "filename": "src/test/ui/run-pass/borrowck/two-phase-baseline.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-baseline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-baseline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-baseline.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // compile-flags: -Z borrowck=mir -Z two-phase-borrows\n \n // This is the \"goto example\" for why we want two phase borrows.", "previous_filename": "src/test/run-pass/borrowck/two-phase-baseline.rs"}, {"sha": "ce601bc9a3c231160b7febdeb93918fb2d818206", "filename": "src/test/ui/run-pass/borrowck/two-phase-bin-ops.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-bin-ops.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // revisions: lxl nll\n \n #![cfg_attr(nll, feature(nll))]", "previous_filename": "src/test/run-pass/borrowck/two-phase-bin-ops.rs"}, {"sha": "6d06d0c7941be04ad64c78aa27fa8deec4c45c15", "filename": "src/test/ui/run-pass/borrowck/two-phase-control-flow-split-before-activation.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-control-flow-split-before-activation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-control-flow-split-before-activation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fborrowck%2Ftwo-phase-control-flow-split-before-activation.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-pass\n // revisions: lxl nll\n //[lxl]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n ", "previous_filename": "src/test/run-pass/borrowck/two-phase-control-flow-split-before-activation.rs"}, {"sha": "b5b4390657b4f18d648421a75cf7286dbd28dd72", "filename": "src/test/ui/run-pass/cfg/auxiliary/cfg_inner_static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcfg_inner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcfg_inner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcfg_inner_static.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/auxiliary/cfg_inner_static.rs"}, {"sha": "0028b51f9d1ee8d6cfc0b56c2944336c70e78afa", "filename": "src/test/ui/run-pass/cfg/auxiliary/crate-attributes-using-cfg_attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a3292f163da3327523ddec5bc44d17c2378ec37/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fcfg%2Fauxiliary%2Fcrate-attributes-using-cfg_attr.rs?ref=5a3292f163da3327523ddec5bc44d17c2378ec37", "previous_filename": "src/test/run-pass/auxiliary/crate-attributes-using-cfg_attr.rs"}]}