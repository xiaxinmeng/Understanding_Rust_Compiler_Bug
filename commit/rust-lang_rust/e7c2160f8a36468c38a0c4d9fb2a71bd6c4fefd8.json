{"sha": "e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YzIxNjBmOGEzNjQ2OGMzOGEwYzRkOWZiMmE3MWJkNmM0ZmVmZDg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-17T17:32:17Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-04-03T16:57:13Z"}, "message": "Fix mutex's docs inconsistency", "tree": {"sha": "7077d049afc596b2de4da07ee0755912810b3a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7077d049afc596b2de4da07ee0755912810b3a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8", "html_url": "https://github.com/rust-lang/rust/commit/e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf69238b82661f5fcb6488e31ef27977f5d2cb81", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf69238b82661f5fcb6488e31ef27977f5d2cb81", "html_url": "https://github.com/rust-lang/rust/commit/cf69238b82661f5fcb6488e31ef27977f5d2cb81"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "f2c178a1ad503f6e21f62ac574b41bb759a40316", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=e7c2160f8a36468c38a0c4d9fb2a71bd6c4fefd8", "patch": "@@ -30,7 +30,7 @@ use sys_common::poison::{self, TryLockError, TryLockResult, LockResult};\n ///\n /// The mutexes in this module implement a strategy called \"poisoning\" where a\n /// mutex is considered poisoned whenever a thread panics while holding the\n-/// lock. Once a mutex is poisoned, all other threads are unable to access the\n+/// mutex. Once a mutex is poisoned, all other threads are unable to access the\n /// data by default as it is likely tainted (some invariant is not being\n /// upheld).\n ///\n@@ -115,7 +115,7 @@ pub struct Mutex<T: ?Sized> {\n     // Note that this mutex is in a *box*, not inlined into the struct itself.\n     // Once a native mutex has been used once, its address can never change (it\n     // can't be moved). This mutex type can be safely moved at any time, so to\n-    // ensure that the native mutex is used correctly we box the inner lock to\n+    // ensure that the native mutex is used correctly we box the inner mutex to\n     // give it a constant address.\n     inner: Box<sys::Mutex>,\n     poison: poison::Flag,\n@@ -183,7 +183,7 @@ impl<T: ?Sized> Mutex<T> {\n     /// Acquires a mutex, blocking the current thread until it is able to do so.\n     ///\n     /// This function will block the local thread until it is available to acquire\n-    /// the mutex. Upon returning, the thread is the only thread with the mutex\n+    /// the mutex. Upon returning, the thread is the only thread with the lock\n     /// held. An RAII guard is returned to allow scoped unlock of the lock. When\n     /// the guard goes out of scope, the mutex will be unlocked.\n     ///\n@@ -267,9 +267,9 @@ impl<T: ?Sized> Mutex<T> {\n         }\n     }\n \n-    /// Determines whether the lock is poisoned.\n+    /// Determines whether the mutex is poisoned.\n     ///\n-    /// If another thread is active, the lock can still become poisoned at any\n+    /// If another thread is active, the mutex can still become poisoned at any\n     /// time. You should not trust a `false` value for program correctness\n     /// without additional synchronization.\n     ///\n@@ -312,7 +312,7 @@ impl<T: ?Sized> Mutex<T> {\n     #[stable(feature = \"mutex_into_inner\", since = \"1.6.0\")]\n     pub fn into_inner(self) -> LockResult<T> where T: Sized {\n         // We know statically that there are no outstanding references to\n-        // `self` so there's no need to lock the inner lock.\n+        // `self` so there's no need to lock the inner mutex.\n         //\n         // To get the inner value, we'd like to call `data.into_inner()`,\n         // but because `Mutex` impl-s `Drop`, we can't move out of it, so\n@@ -353,7 +353,7 @@ impl<T: ?Sized> Mutex<T> {\n     #[stable(feature = \"mutex_get_mut\", since = \"1.6.0\")]\n     pub fn get_mut(&mut self) -> LockResult<&mut T> {\n         // We know statically that there are no other references to `self`, so\n-        // there's no need to lock the inner lock.\n+        // there's no need to lock the inner mutex.\n         let data = unsafe { &mut *self.data.get() };\n         poison::map_result(self.poison.borrow(), |_| data )\n     }"}]}