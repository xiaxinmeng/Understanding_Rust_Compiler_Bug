{"sha": "f13ccefb5b35af3dbb40a7bbdd64a3216d949664", "node_id": "C_kwDOAAsO6NoAKGYxM2NjZWZiNWIzNWFmM2RiYjQwYTdiYmRkNjRhMzIxNmQ5NDk2NjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-03T10:30:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-03T10:30:20Z"}, "message": "Auto merge of #108448 - ishitatsuyuki:binary-heap, r=Mark-Simulacrum\n\nbinary_heap: Optimize Extend implementation.\n\nThis PR makes the `Extend` implementation for `BinaryHeap` no longer rely on specialization, so that it always use the bulk rebuild optimization that was previously only available for the `Vec` specialization.", "tree": {"sha": "c3005d6d4c3c06c4ecb644b51a4c4b9b20f20ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3005d6d4c3c06c4ecb644b51a4c4b9b20f20ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f13ccefb5b35af3dbb40a7bbdd64a3216d949664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f13ccefb5b35af3dbb40a7bbdd64a3216d949664", "html_url": "https://github.com/rust-lang/rust/commit/f13ccefb5b35af3dbb40a7bbdd64a3216d949664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f13ccefb5b35af3dbb40a7bbdd64a3216d949664/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa", "html_url": "https://github.com/rust-lang/rust/commit/932c173ca1b7a79c1005e2d72ddfa505a7bf2cfa"}, {"sha": "116bb4dfb21085ec8e6c45551cc69ff59a3598cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/116bb4dfb21085ec8e6c45551cc69ff59a3598cd", "html_url": "https://github.com/rust-lang/rust/commit/116bb4dfb21085ec8e6c45551cc69ff59a3598cd"}], "stats": {"total": 70, "additions": 19, "deletions": 51}, "files": [{"sha": "bc86125c7c33c17515a12b1b72034489198d178b", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 19, "deletions": 51, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f13ccefb5b35af3dbb40a7bbdd64a3216d949664/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f13ccefb5b35af3dbb40a7bbdd64a3216d949664/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=f13ccefb5b35af3dbb40a7bbdd64a3216d949664", "patch": "@@ -154,8 +154,6 @@ use crate::collections::TryReserveError;\n use crate::slice;\n use crate::vec::{self, AsVecIntoIter, Vec};\n \n-use super::SpecExtend;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -400,6 +398,17 @@ impl<T: fmt::Debug> fmt::Debug for BinaryHeap<T> {\n     }\n }\n \n+struct RebuildOnDrop<'a, T: Ord> {\n+    heap: &'a mut BinaryHeap<T>,\n+    rebuild_from: usize,\n+}\n+\n+impl<'a, T: Ord> Drop for RebuildOnDrop<'a, T> {\n+    fn drop(&mut self) {\n+        self.heap.rebuild_tail(self.rebuild_from);\n+    }\n+}\n+\n impl<T: Ord> BinaryHeap<T> {\n     /// Creates an empty `BinaryHeap` as a max-heap.\n     ///\n@@ -850,30 +859,19 @@ impl<T: Ord> BinaryHeap<T> {\n     where\n         F: FnMut(&T) -> bool,\n     {\n-        struct RebuildOnDrop<'a, T: Ord> {\n-            heap: &'a mut BinaryHeap<T>,\n-            first_removed: usize,\n-        }\n-\n-        let mut guard = RebuildOnDrop { first_removed: self.len(), heap: self };\n-\n+        // rebuild_start will be updated to the first touched element below, and the rebuild will\n+        // only be done for the tail.\n+        let mut guard = RebuildOnDrop { rebuild_from: self.len(), heap: self };\n         let mut i = 0;\n+\n         guard.heap.data.retain(|e| {\n             let keep = f(e);\n-            if !keep && i < guard.first_removed {\n-                guard.first_removed = i;\n+            if !keep && i < guard.rebuild_from {\n+                guard.rebuild_from = i;\n             }\n             i += 1;\n             keep\n         });\n-\n-        impl<'a, T: Ord> Drop for RebuildOnDrop<'a, T> {\n-            fn drop(&mut self) {\n-                // data[..first_removed] is untouched, so we only need to\n-                // rebuild the tail:\n-                self.heap.rebuild_tail(self.first_removed);\n-            }\n-        }\n     }\n }\n \n@@ -1728,7 +1726,8 @@ impl<'a, T> IntoIterator for &'a BinaryHeap<T> {\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     #[inline]\n     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        <Self as SpecExtend<I>>::spec_extend(self, iter);\n+        let guard = RebuildOnDrop { rebuild_from: self.len(), heap: self };\n+        guard.heap.data.extend(iter);\n     }\n \n     #[inline]\n@@ -1742,37 +1741,6 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n     }\n }\n \n-impl<T: Ord, I: IntoIterator<Item = T>> SpecExtend<I> for BinaryHeap<T> {\n-    default fn spec_extend(&mut self, iter: I) {\n-        self.extend_desugared(iter.into_iter());\n-    }\n-}\n-\n-impl<T: Ord> SpecExtend<Vec<T>> for BinaryHeap<T> {\n-    fn spec_extend(&mut self, ref mut other: Vec<T>) {\n-        let start = self.data.len();\n-        self.data.append(other);\n-        self.rebuild_tail(start);\n-    }\n-}\n-\n-impl<T: Ord> SpecExtend<BinaryHeap<T>> for BinaryHeap<T> {\n-    fn spec_extend(&mut self, ref mut other: BinaryHeap<T>) {\n-        self.append(other);\n-    }\n-}\n-\n-impl<T: Ord> BinaryHeap<T> {\n-    fn extend_desugared<I: IntoIterator<Item = T>>(&mut self, iter: I) {\n-        let iterator = iter.into_iter();\n-        let (lower, _) = iterator.size_hint();\n-\n-        self.reserve(lower);\n-\n-        iterator.for_each(move |elem| self.push(elem));\n-    }\n-}\n-\n #[stable(feature = \"extend_ref\", since = \"1.2.0\")]\n impl<'a, T: 'a + Ord + Copy> Extend<&'a T> for BinaryHeap<T> {\n     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {"}]}