{"sha": "9065c7ced619dfee3184eecf36d568cd8cfa284f", "node_id": "C_kwDOAAsO6NoAKDkwNjVjN2NlZDYxOWRmZWUzMTg0ZWVjZjM2ZDU2OGNkOGNmYTI4NGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-25T23:33:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-27T20:37:07Z"}, "message": "Add some comments.", "tree": {"sha": "1ea83f14afc707bb171e853c81939d7595d813e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea83f14afc707bb171e853c81939d7595d813e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9065c7ced619dfee3184eecf36d568cd8cfa284f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9065c7ced619dfee3184eecf36d568cd8cfa284f", "html_url": "https://github.com/rust-lang/rust/commit/9065c7ced619dfee3184eecf36d568cd8cfa284f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9065c7ced619dfee3184eecf36d568cd8cfa284f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c17893d498d30f8a86a97bbc1227852d5e926cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c17893d498d30f8a86a97bbc1227852d5e926cd", "html_url": "https://github.com/rust-lang/rust/commit/0c17893d498d30f8a86a97bbc1227852d5e926cd"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "d36e357f58feb09c012374a979b7615e21af15c8", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9065c7ced619dfee3184eecf36d568cd8cfa284f/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9065c7ced619dfee3184eecf36d568cd8cfa284f/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=9065c7ced619dfee3184eecf36d568cd8cfa284f", "patch": "@@ -125,6 +125,11 @@ impl<I, T> IterExt<T> for I\n where\n     I: IntoIterator<Item = T>,\n {\n+    // This default collects into a `SmallVec` and then allocates by copying\n+    // from it. The specializations below for types like `Vec` are more\n+    // efficient, copying directly without the intermediate collecting step.\n+    // This default could be made more efficient, like\n+    // `DroplessArena::alloc_from_iter`, but it's not hot enough to bother.\n     #[inline]\n     default fn alloc_from_iter(self, arena: &TypedArena<T>) -> &mut [T] {\n         let vec: SmallVec<[_; 8]> = self.into_iter().collect();\n@@ -139,7 +144,7 @@ impl<T, const N: usize> IterExt<T> for std::array::IntoIter<T, N> {\n         if len == 0 {\n             return &mut [];\n         }\n-        // Move the content to the arena by copying and then forgetting it\n+        // Move the content to the arena by copying and then forgetting it.\n         unsafe {\n             let start_ptr = arena.alloc_raw_slice(len);\n             self.as_slice().as_ptr().copy_to_nonoverlapping(start_ptr, len);\n@@ -156,7 +161,7 @@ impl<T> IterExt<T> for Vec<T> {\n         if len == 0 {\n             return &mut [];\n         }\n-        // Move the content to the arena by copying and then forgetting it\n+        // Move the content to the arena by copying and then forgetting it.\n         unsafe {\n             let start_ptr = arena.alloc_raw_slice(len);\n             self.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n@@ -173,7 +178,7 @@ impl<A: smallvec::Array> IterExt<A::Item> for SmallVec<A> {\n         if len == 0 {\n             return &mut [];\n         }\n-        // Move the content to the arena by copying and then forgetting it\n+        // Move the content to the arena by copying and then forgetting it.\n         unsafe {\n             let start_ptr = arena.alloc_raw_slice(len);\n             self.as_ptr().copy_to_nonoverlapping(start_ptr, len);\n@@ -520,10 +525,19 @@ impl DroplessArena {\n     }\n }\n \n-// Declare an `Arena` containing one dropless arena and many typed arenas (the\n-// types of the typed arenas are specified by the arguments). The dropless\n-// arena will be used for any types that impl `Copy`, and also for any of the\n-// specified types that satisfy `!mem::needs_drop`.\n+/// Declare an `Arena` containing one dropless arena and many typed arenas (the\n+/// types of the typed arenas are specified by the arguments).\n+///\n+/// There are three cases of interest.\n+/// - Types that are `Copy`: these need not be specified in the arguments. They\n+///   will use the `DroplessArena`.\n+/// - Types that are `!Copy` and `!Drop`: these must be specified in the\n+///   arguments. An empty `TypedArena` will be created for each one, but the\n+///   `DroplessArena` will always be used and the `TypedArena` will stay empty.\n+///   This is odd but harmless, because an empty arena allocates no memory.\n+/// - Types that are `!Copy` and `Drop`: these must be specified in the\n+///   arguments. The `TypedArena` will be used for them.\n+///\n #[rustc_macro_transparency = \"semitransparent\"]\n pub macro declare_arena([$($a:tt $name:ident: $ty:ty,)*]) {\n     #[derive(Default)]"}]}