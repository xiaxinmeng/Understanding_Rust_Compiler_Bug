{"sha": "4491309cb01cc917ef455c41b0dcf9cf5900aa35", "node_id": "C_kwDOAAsO6NoAKDQ0OTEzMDljYjAxY2M5MTdlZjQ1NWM0MWIwZGNmOWNmNTkwMGFhMzU", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-10-16T17:31:42Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-10-16T17:31:42Z"}, "message": "Mark more mask functions inline", "tree": {"sha": "10588e150435dfcf98376b8c3478ab4b3ed25839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10588e150435dfcf98376b8c3478ab4b3ed25839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4491309cb01cc917ef455c41b0dcf9cf5900aa35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4491309cb01cc917ef455c41b0dcf9cf5900aa35", "html_url": "https://github.com/rust-lang/rust/commit/4491309cb01cc917ef455c41b0dcf9cf5900aa35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4491309cb01cc917ef455c41b0dcf9cf5900aa35/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5ebfb6a26d384bc21db6796095890c1f13f19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c5ebfb6a26d384bc21db6796095890c1f13f19c", "html_url": "https://github.com/rust-lang/rust/commit/2c5ebfb6a26d384bc21db6796095890c1f13f19c"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "7fd50fed4478c24b33ef9a049204e86764c75ff1", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=4491309cb01cc917ef455c41b0dcf9cf5900aa35", "patch": "@@ -55,13 +55,15 @@ pub unsafe trait MaskElement: SimdElement + Sealed {}\n macro_rules! impl_element {\n     { $ty:ty } => {\n         impl Sealed for $ty {\n+            #[inline]\n             fn valid<const LANES: usize>(value: Simd<Self, LANES>) -> bool\n             where\n                 LaneCount<LANES>: SupportedLaneCount,\n             {\n                 (value.simd_eq(Simd::splat(0 as _)) | value.simd_eq(Simd::splat(-1 as _))).all()\n             }\n \n+            #[inline]\n             fn eq(self, other: Self) -> bool { self == other }\n \n             const TRUE: Self = -1;\n@@ -104,6 +106,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn clone(&self) -> Self {\n         *self\n     }\n@@ -115,11 +118,13 @@ where\n     LaneCount<LANES>: SupportedLaneCount,\n {\n     /// Construct a mask by setting all lanes to the given value.\n+    #[inline]\n     pub fn splat(value: bool) -> Self {\n         Self(mask_impl::Mask::splat(value))\n     }\n \n     /// Converts an array of bools to a SIMD mask.\n+    #[inline]\n     pub fn from_array(array: [bool; LANES]) -> Self {\n         // SAFETY: Rust's bool has a layout of 1 byte (u8) with a value of\n         //     true:    0b_0000_0001\n@@ -136,6 +141,7 @@ where\n     }\n \n     /// Converts a SIMD mask to an array of bools.\n+    #[inline]\n     pub fn to_array(self) -> [bool; LANES] {\n         // This follows mostly the same logic as from_array.\n         // SAFETY: Rust's bool has a layout of 1 byte (u8) with a value of\n@@ -263,6 +269,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn from(array: [bool; LANES]) -> Self {\n         Self::from_array(array)\n     }\n@@ -273,6 +280,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn from(vector: Mask<T, LANES>) -> Self {\n         vector.to_array()\n     }\n@@ -655,6 +663,7 @@ macro_rules! impl_from {\n         where\n             LaneCount<LANES>: SupportedLaneCount,\n         {\n+            #[inline]\n             fn from(value: Mask<$from, LANES>) -> Self {\n                 value.cast()\n             }"}, {"sha": "20465ba9b07ec72381c89fbfff087f94d0ec2069", "filename": "crates/core_simd/src/masks/bitmask.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fbitmask.rs?ref=4491309cb01cc917ef455c41b0dcf9cf5900aa35", "patch": "@@ -26,6 +26,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn clone(&self) -> Self {\n         *self\n     }\n@@ -36,6 +37,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.0.as_ref() == other.0.as_ref()\n     }\n@@ -46,6 +48,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n         self.0.as_ref().partial_cmp(other.0.as_ref())\n     }\n@@ -63,6 +66,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n         self.0.as_ref().cmp(other.0.as_ref())\n     }"}, {"sha": "bcedd2df2253ad6625d7649bd42a994df7ef1252", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=4491309cb01cc917ef455c41b0dcf9cf5900aa35", "patch": "@@ -37,6 +37,7 @@ where\n     T: MaskElement + PartialEq,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.0.eq(&other.0)\n     }\n@@ -47,6 +48,7 @@ where\n     T: MaskElement + PartialOrd,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n         self.0.partial_cmp(&other.0)\n     }\n@@ -64,6 +66,7 @@ where\n     T: MaskElement + Ord,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n         self.0.cmp(&other.0)\n     }\n@@ -262,6 +265,7 @@ where\n     T: MaskElement,\n     LaneCount<LANES>: SupportedLaneCount,\n {\n+    #[inline]\n     fn from(value: Mask<T, LANES>) -> Self {\n         value.0\n     }"}, {"sha": "46914dfe0d9b47a27f050afb1115d38646f23b96", "filename": "crates/core_simd/src/masks/to_bitmask.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4491309cb01cc917ef455c41b0dcf9cf5900aa35/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs?ref=4491309cb01cc917ef455c41b0dcf9cf5900aa35", "patch": "@@ -48,10 +48,12 @@ macro_rules! impl_integer_intrinsic {\n         impl<T: MaskElement> ToBitMask for Mask<T, $lanes> {\n             type BitMask = $int;\n \n+            #[inline]\n             fn to_bitmask(self) -> $int {\n                 self.0.to_bitmask_integer()\n             }\n \n+            #[inline]\n             fn from_bitmask(bitmask: $int) -> Self {\n                 Self(mask_impl::Mask::from_bitmask_integer(bitmask))\n             }\n@@ -83,10 +85,12 @@ where\n {\n     const BYTES: usize = bitmask_len(LANES);\n \n+    #[inline]\n     fn to_bitmask_array(self) -> [u8; Self::BYTES] {\n         self.0.to_bitmask_array()\n     }\n \n+    #[inline]\n     fn from_bitmask_array(bitmask: [u8; Self::BYTES]) -> Self {\n         Mask(mask_impl::Mask::from_bitmask_array(bitmask))\n     }"}]}