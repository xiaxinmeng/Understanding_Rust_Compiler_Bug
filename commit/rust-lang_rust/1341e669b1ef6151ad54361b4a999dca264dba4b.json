{"sha": "1341e669b1ef6151ad54361b4a999dca264dba4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDFlNjY5YjFlZjYxNTFhZDU0MzYxYjRhOTk5ZGNhMjY0ZGJhNGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-10T13:24:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-10T14:00:05Z"}, "message": "skip trivial `T: Sized` predicates", "tree": {"sha": "2c3aa51927f805640d155ed8a1af42191087a3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c3aa51927f805640d155ed8a1af42191087a3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1341e669b1ef6151ad54361b4a999dca264dba4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1341e669b1ef6151ad54361b4a999dca264dba4b", "html_url": "https://github.com/rust-lang/rust/commit/1341e669b1ef6151ad54361b4a999dca264dba4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1341e669b1ef6151ad54361b4a999dca264dba4b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77dfcc79fe3e7e1a10ae4dccfd4b2e5e0e49195", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77dfcc79fe3e7e1a10ae4dccfd4b2e5e0e49195", "html_url": "https://github.com/rust-lang/rust/commit/a77dfcc79fe3e7e1a10ae4dccfd4b2e5e0e49195"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "e1b3b3c436dab3eae8f9346306eda22f03e1abe0", "filename": "src/librustc/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1341e669b1ef6151ad54361b4a999dca264dba4b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1341e669b1ef6151ad54361b4a999dca264dba4b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=1341e669b1ef6151ad54361b4a999dca264dba4b", "patch": "@@ -27,9 +27,23 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for ProvePredicate<'tcx> {\n     type QueryResult = ();\n \n     fn try_fast_path(\n-        _tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-        _key: &ParamEnvAnd<'tcx, Self>,\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        key: &ParamEnvAnd<'tcx, Self>,\n     ) -> Option<Self::QueryResult> {\n+        // Proving Sized, very often on \"obviously sized\" types like\n+        // `&T`, accounts for about 60% percentage of the predicates\n+        // we have to prove. No need to canonicalize and all that for\n+        // such cases.\n+        if let Predicate::Trait(trait_ref) = key.value.predicate {\n+            if let Some(sized_def_id) = tcx.lang_items().sized_trait() {\n+                if trait_ref.def_id() == sized_def_id {\n+                    if trait_ref.skip_binder().self_ty().is_trivially_sized(tcx) {\n+                        return Some(());\n+                    }\n+                }\n+            }\n+        }\n+\n         None\n     }\n "}, {"sha": "6adafb8602c9ac810353a888949c586e88c2cc82", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1341e669b1ef6151ad54361b4a999dca264dba4b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1341e669b1ef6151ad54361b4a999dca264dba4b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1341e669b1ef6151ad54361b4a999dca264dba4b", "patch": "@@ -1852,6 +1852,41 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             _ => bug!(\"cannot convert type `{:?}` to a closure kind\", self),\n         }\n     }\n+\n+    /// Fast path helper for testing if a type is `Sized`.\n+    ///\n+    /// Returning true means the type is known to be sized. Returning\n+    /// `false` means nothing -- could be sized, might not be.\n+    pub fn is_trivially_sized(&self, tcx: TyCtxt<'_, '_, 'tcx>) -> bool {\n+        match self.sty {\n+            ty::TyInfer(ty::IntVar(_)) | ty::TyInfer(ty::FloatVar(_)) |\n+            ty::TyUint(_) | ty::TyInt(_) | ty::TyBool | ty::TyFloat(_) |\n+            ty::TyFnDef(..) | ty::TyFnPtr(_) | ty::TyRawPtr(..) |\n+            ty::TyChar | ty::TyRef(..) | ty::TyGenerator(..) |\n+            ty::TyGeneratorWitness(..) | ty::TyArray(..) | ty::TyClosure(..) |\n+            ty::TyNever | ty::TyError =>\n+                true,\n+\n+            ty::TyStr | ty::TySlice(_) | ty::TyDynamic(..) | ty::TyForeign(..) =>\n+                false,\n+\n+            ty::TyTuple(tys) =>\n+                tys.iter().all(|ty| ty.is_trivially_sized(tcx)),\n+\n+            ty::TyAdt(def, _substs) =>\n+                def.sized_constraint(tcx).is_empty(),\n+\n+            ty::TyProjection(_) | ty::TyParam(_) | ty::TyAnon(..) => false,\n+\n+            ty::TyInfer(ty::TyVar(_)) => false,\n+\n+            ty::TyInfer(ty::CanonicalTy(_)) |\n+            ty::TyInfer(ty::FreshTy(_)) |\n+            ty::TyInfer(ty::FreshIntTy(_)) |\n+            ty::TyInfer(ty::FreshFloatTy(_)) =>\n+                bug!(\"is_trivially_sized applied to unexpected type: {:?}\", self),\n+        }\n+    }\n }\n \n /// Typed constant value."}]}