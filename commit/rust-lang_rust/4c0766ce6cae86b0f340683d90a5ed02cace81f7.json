{"sha": "4c0766ce6cae86b0f340683d90a5ed02cace81f7", "node_id": "C_kwDOAAsO6NoAKDRjMDc2NmNlNmNhZTg2YjBmMzQwNjgzZDkwYTVlZDAyY2FjZTgxZjc", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-13T09:03:28Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-13T09:03:28Z"}, "message": "Move error reporting out of emit_cgu\n\nError reporting requires a Session, which isn't available on background\nthreads.", "tree": {"sha": "d56690bfa1da3b9e4d59bf855f6a9b675165a2a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d56690bfa1da3b9e4d59bf855f6a9b675165a2a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c0766ce6cae86b0f340683d90a5ed02cace81f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0766ce6cae86b0f340683d90a5ed02cace81f7", "html_url": "https://github.com/rust-lang/rust/commit/4c0766ce6cae86b0f340683d90a5ed02cace81f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c0766ce6cae86b0f340683d90a5ed02cace81f7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0", "html_url": "https://github.com/rust-lang/rust/commit/c2f0b3a1bf5ed437df3e276960f64bf3c47222e0"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "817ce7f7e6d3a6ecdd77b6da9aa89a30a01fa2c2", "filename": "src/driver/aot.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4c0766ce6cae86b0f340683d90a5ed02cace81f7/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c0766ce6cae86b0f340683d90a5ed02cace81f7/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=4c0766ce6cae86b0f340683d90a5ed02cace81f7", "patch": "@@ -33,7 +33,7 @@ impl<HCX> HashStable<HCX> for ModuleCodegenResult {\n }\n \n pub(crate) struct OngoingCodegen {\n-    modules: Vec<ModuleCodegenResult>,\n+    modules: Vec<Result<ModuleCodegenResult, String>>,\n     allocator_module: Option<CompiledModule>,\n     metadata_module: Option<CompiledModule>,\n     metadata: EncodedMetadata,\n@@ -50,6 +50,10 @@ impl OngoingCodegen {\n         let mut modules = vec![];\n \n         for module_codegen_result in self.modules {\n+            let module_codegen_result = match module_codegen_result {\n+                Ok(module_codegen_result) => module_codegen_result,\n+                Err(err) => sess.fatal(&err),\n+            };\n             let ModuleCodegenResult { module_regular, module_global_asm, existing_work_product } =\n                 module_codegen_result;\n \n@@ -117,7 +121,7 @@ fn emit_cgu(\n     debug: Option<DebugContext<'_>>,\n     unwind_context: UnwindContext,\n     global_asm_object_file: Option<PathBuf>,\n-) -> ModuleCodegenResult {\n+) -> Result<ModuleCodegenResult, String> {\n     let mut product = module.finish();\n \n     if let Some(mut debug) = debug {\n@@ -126,9 +130,9 @@ fn emit_cgu(\n \n     unwind_context.emit(&mut product);\n \n-    let module_regular = emit_module(tcx, product.object, ModuleKind::Regular, name.clone());\n+    let module_regular = emit_module(tcx, product.object, ModuleKind::Regular, name.clone())?;\n \n-    ModuleCodegenResult {\n+    Ok(ModuleCodegenResult {\n         module_regular,\n         module_global_asm: global_asm_object_file.map(|global_asm_object_file| CompiledModule {\n             name: format!(\"{name}.asm\"),\n@@ -138,31 +142,34 @@ fn emit_cgu(\n             bytecode: None,\n         }),\n         existing_work_product: None,\n-    }\n+    })\n }\n \n fn emit_module(\n     tcx: TyCtxt<'_>,\n     object: cranelift_object::object::write::Object<'_>,\n     kind: ModuleKind,\n     name: String,\n-) -> CompiledModule {\n+) -> Result<CompiledModule, String> {\n     let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n     let mut file = match File::create(&tmp_file) {\n         Ok(file) => file,\n-        Err(err) => tcx.sess.fatal(&format!(\"error creating object file: {}\", err)),\n+        Err(err) => return Err(format!(\"error creating object file: {}\", err)),\n     };\n \n     if let Err(err) = object.write_stream(&mut file) {\n-        tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n+        return Err(format!(\"error writing object file: {}\", err));\n     }\n \n     tcx.sess.prof.artifact_size(\"object_file\", &*name, file.metadata().unwrap().len());\n \n-    CompiledModule { name, kind, object: Some(tmp_file), dwarf_object: None, bytecode: None }\n+    Ok(CompiledModule { name, kind, object: Some(tmp_file), dwarf_object: None, bytecode: None })\n }\n \n-fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCodegenResult {\n+fn reuse_workproduct_for_cgu(\n+    tcx: TyCtxt<'_>,\n+    cgu: &CodegenUnit<'_>,\n+) -> Result<ModuleCodegenResult, String> {\n     let work_product = cgu.previous_work_product(tcx);\n     let obj_out_regular =\n         tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n@@ -172,7 +179,7 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n     );\n \n     if let Err(err) = rustc_fs_util::link_or_copy(&source_file_regular, &obj_out_regular) {\n-        tcx.sess.err(&format!(\n+        return Err(format!(\n             \"unable to copy {} to {}: {}\",\n             source_file_regular.display(),\n             obj_out_regular.display(),\n@@ -185,7 +192,7 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n         let source_file_global_asm = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, asm_o);\n         if let Err(err) = rustc_fs_util::link_or_copy(&source_file_global_asm, &obj_out_global_asm)\n         {\n-            tcx.sess.err(&format!(\n+            return Err(format!(\n                 \"unable to copy {} to {}: {}\",\n                 source_file_regular.display(),\n                 obj_out_regular.display(),\n@@ -197,7 +204,7 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n         false\n     };\n \n-    ModuleCodegenResult {\n+    Ok(ModuleCodegenResult {\n         module_regular: CompiledModule {\n             name: cgu.name().to_string(),\n             kind: ModuleKind::Regular,\n@@ -217,7 +224,7 @@ fn reuse_workproduct_for_cgu(tcx: TyCtxt<'_>, cgu: &CodegenUnit<'_>) -> ModuleCo\n             None\n         },\n         existing_work_product: Some((cgu.work_product_id(), work_product)),\n-    }\n+    })\n }\n \n fn module_codegen(\n@@ -227,7 +234,7 @@ fn module_codegen(\n         Arc<GlobalAsmConfig>,\n         rustc_span::Symbol,\n     ),\n-) -> ModuleCodegenResult {\n+) -> Result<ModuleCodegenResult, String> {\n     let cgu = tcx.codegen_unit(cgu_name);\n     let mono_items = cgu.items_in_deterministic_order(tcx);\n \n@@ -279,7 +286,7 @@ fn module_codegen(\n \n     let debug_context = cx.debug_context;\n     let unwind_context = cx.unwind_context;\n-    let codegen_result = tcx.sess.time(\"write object file\", || {\n+    tcx.sess.time(\"write object file\", || {\n         emit_cgu(\n             tcx,\n             cgu.name().as_str().to_string(),\n@@ -288,9 +295,7 @@ fn module_codegen(\n             unwind_context,\n             global_asm_object_file,\n         )\n-    });\n-\n-    codegen_result\n+    })\n }\n \n pub(crate) fn run_aot(\n@@ -356,7 +361,10 @@ pub(crate) fn run_aot(\n         let mut product = allocator_module.finish();\n         allocator_unwind_context.emit(&mut product);\n \n-        Some(emit_module(tcx, product.object, ModuleKind::Allocator, \"allocator_shim\".to_owned()))\n+        match emit_module(tcx, product.object, ModuleKind::Allocator, \"allocator_shim\".to_owned()) {\n+            Ok(allocator_module) => Some(allocator_module),\n+            Err(err) => tcx.sess.fatal(err),\n+        }\n     } else {\n         None\n     };"}]}