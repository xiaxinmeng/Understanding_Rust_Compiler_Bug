{"sha": "5f881b48cb058236494ccc2f6d54cf617ae21a7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmODgxYjQ4Y2IwNTgyMzY0OTRjY2MyZjZkNTRjZjYxN2FlMjFhN2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T00:41:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-13T00:41:20Z"}, "message": "Remove filemap box typedef from codemap", "tree": {"sha": "89b01b2ca865ad8554dafd75b6c22344f773b413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89b01b2ca865ad8554dafd75b6c22344f773b413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f881b48cb058236494ccc2f6d54cf617ae21a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f881b48cb058236494ccc2f6d54cf617ae21a7f", "html_url": "https://github.com/rust-lang/rust/commit/5f881b48cb058236494ccc2f6d54cf617ae21a7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f881b48cb058236494ccc2f6d54cf617ae21a7f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c680849638b548e7202ebe4cbce2c86fd65519a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c680849638b548e7202ebe4cbce2c86fd65519a", "html_url": "https://github.com/rust-lang/rust/commit/4c680849638b548e7202ebe4cbce2c86fd65519a"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "f9dbfb5496dfe3a7f992b7ee3873897fc4b530c2", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=5f881b48cb058236494ccc2f6d54cf617ae21a7f", "patch": "@@ -58,21 +58,19 @@ enum file_substr {\n     fss_external({filename: ~str, line: uint, col: uint})\n }\n \n-struct filemap_ {\n+struct filemap {\n     name: filename, substr: file_substr, src: @~str,\n     start_pos: file_pos, mut lines: ~[file_pos]\n }\n \n-type filemap = @filemap_;\n-\n struct CodeMap_ {\n-    files: DVec<filemap>\n+    files: DVec<@filemap>\n }\n \n type CodeMap = @CodeMap_;\n \n struct loc {\n-    file: filemap, line: uint, col: uint\n+    file: @filemap, line: uint, col: uint\n }\n \n fn new_codemap() -> CodeMap { @CodeMap_ {files: DVec()} }\n@@ -81,7 +79,7 @@ fn new_filemap_w_substr(+filename: filename, +substr: file_substr,\n                         src: @~str,\n                         start_pos_ch: uint, start_pos_byte: uint)\n    -> filemap {\n-    return @filemap_ {\n+    return filemap {\n         name: filename, substr: substr, src: src,\n         start_pos: file_pos {ch: start_pos_ch, byte: start_pos_byte},\n         mut lines: ~[file_pos {ch: start_pos_ch, byte: start_pos_byte}]\n@@ -101,14 +99,14 @@ fn mk_substr_filename(cm: CodeMap, sp: span) -> ~str\n     return fmt!(\"<%s:%u:%u>\", pos.file.name, pos.line, pos.col);\n }\n \n-fn next_line(file: filemap, chpos: uint, byte_pos: uint) {\n+fn next_line(file: @filemap, chpos: uint, byte_pos: uint) {\n     file.lines.push(file_pos {ch: chpos, byte: byte_pos + file.start_pos.byte});\n }\n \n type lookup_fn = pure fn(file_pos) -> uint;\n \n fn lookup_line(map: CodeMap, pos: uint, lookup: lookup_fn)\n-    -> {fm: filemap, line: uint}\n+    -> {fm: @filemap, line: uint}\n {\n     let len = map.files.len();\n     let mut a = 0u;\n@@ -146,7 +144,7 @@ fn lookup_byte_pos(map: CodeMap, pos: uint) -> loc {\n }\n \n fn lookup_char_pos_adj(map: CodeMap, pos: uint)\n-    -> {filename: ~str, line: uint, col: uint, file: Option<filemap>}\n+    -> {filename: ~str, line: uint, col: uint, file: Option<@filemap>}\n {\n     let loc = lookup_char_pos(map, pos);\n     match (loc.file.substr) {\n@@ -222,7 +220,7 @@ fn span_to_str(sp: span, cm: CodeMap) -> ~str {\n }\n \n struct file_lines {\n-    file: filemap,\n+    file: @filemap,\n     lines: ~[uint]\n }\n \n@@ -241,7 +239,7 @@ fn span_to_lines(sp: span, cm: codemap::CodeMap) -> @file_lines {\n     return @file_lines {file: lo.file, lines: lines};\n }\n \n-fn get_line(fm: filemap, line: int) -> ~str unsafe {\n+fn get_line(fm: @filemap, line: int) -> ~str unsafe {\n     let begin: uint = fm.lines[line].byte - fm.start_pos.byte;\n     let end = match str::find_char_from(*fm.src, '\\n', begin) {\n       Some(e) => e,\n@@ -251,7 +249,7 @@ fn get_line(fm: filemap, line: int) -> ~str unsafe {\n }\n \n fn lookup_byte_offset(cm: codemap::CodeMap, chpos: uint)\n-    -> {fm: filemap, pos: uint} {\n+    -> {fm: @filemap, pos: uint} {\n     pure fn lookup(pos: file_pos) -> uint { return pos.ch; }\n     let {fm, line} = lookup_line(cm, chpos, lookup);\n     let line_offset = fm.lines[line].byte - fm.start_pos.byte;\n@@ -273,7 +271,7 @@ fn get_snippet(cm: codemap::CodeMap, fidx: uint, lo: uint, hi: uint) -> ~str\n     return str::slice(*fm.src, lo, hi)\n }\n \n-fn get_filemap(cm: CodeMap, filename: ~str) -> filemap {\n+fn get_filemap(cm: CodeMap, filename: ~str) -> @filemap {\n     for cm.files.each |fm| { if fm.name == filename { return *fm; } }\n     //XXjdm the following triggers a mismatched type bug\n     //      (or expected function, found _|_)"}, {"sha": "3181a6044007cd78b356224e48149a1a41c95987", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=5f881b48cb058236494ccc2f6d54cf617ae21a7f", "patch": "@@ -1,5 +1,5 @@\n use base::*;\n-use codemap::{span, loc, filemap_};\n+use codemap::{span, loc, filemap};\n use print::pprust;\n use build::{mk_base_vec_e,mk_uint,mk_u8,mk_uniq_str};\n \n@@ -34,7 +34,7 @@ fn expand_col(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n fn expand_file(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::Some(0u), ~\"file\");\n-    let loc { file: @filemap_ { name: filename, _ }, _ } =\n+    let loc { file: @filemap { name: filename, _ }, _ } =\n         codemap::lookup_char_pos(cx.codemap(), sp.lo);\n     return mk_uniq_str(cx, sp, filename);\n }"}, {"sha": "94e9b1d023865c5a2fe77bdc9dd28d6b8ff86a27", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=5f881b48cb058236494ccc2f6d54cf617ae21a7f", "patch": "@@ -172,7 +172,7 @@ fn new_parser_etc_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                                   +name: ~str, +ss: codemap::file_substr,\n                                   source: @~str) -> (Parser, string_reader) {\n     let ftype = parser::SOURCE_FILE;\n-    let filemap = codemap::new_filemap_w_substr\n+    let filemap = @codemap::new_filemap_w_substr\n         (name, ss, source, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n@@ -197,7 +197,7 @@ fn new_parser_etc_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n       result::Err(e) => sess.span_diagnostic.handler().fatal(e)\n     }\n     let src = @result::unwrap(res);\n-    let filemap = codemap::new_filemap(path.to_str(), src,\n+    let filemap = @codemap::new_filemap(path.to_str(), src,\n                                        sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,"}, {"sha": "c691d9985492b9aec5fa4a6822efd3bcdfa92ba1", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=5f881b48cb058236494ccc2f6d54cf617ae21a7f", "patch": "@@ -288,7 +288,7 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n     let src = @str::from_bytes(srdr.read_whole_stream());\n     let itr = parse::token::mk_fake_ident_interner();\n     let rdr = lexer::new_low_level_string_reader\n-        (span_diagnostic, codemap::new_filemap(path, src, 0u, 0u), itr);\n+        (span_diagnostic, @codemap::new_filemap(path, src, 0u, 0u), itr);\n \n     let mut comments: ~[cmnt] = ~[];\n     let mut literals: ~[lit] = ~[];"}, {"sha": "a56f2576ab1a00d0e16d89d3373986627a9b14ba", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f881b48cb058236494ccc2f6d54cf617ae21a7f/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=5f881b48cb058236494ccc2f6d54cf617ae21a7f", "patch": "@@ -25,15 +25,15 @@ type string_reader = @{\n     mut pos: uint,\n     mut curr: char,\n     mut chpos: uint,\n-    filemap: codemap::filemap,\n+    filemap: @codemap::filemap,\n     interner: @token::ident_interner,\n     /* cached: */\n     mut peek_tok: token::Token,\n     mut peek_span: span\n };\n \n fn new_string_reader(span_diagnostic: span_handler,\n-                     filemap: codemap::filemap,\n+                     filemap: @codemap::filemap,\n                      itr: @token::ident_interner) -> string_reader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap, itr);\n     string_advance_token(r); /* fill in peek_* */\n@@ -42,7 +42,7 @@ fn new_string_reader(span_diagnostic: span_handler,\n \n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n fn new_low_level_string_reader(span_diagnostic: span_handler,\n-                               filemap: codemap::filemap,\n+                               filemap: @codemap::filemap,\n                                itr: @token::ident_interner)\n     -> string_reader {\n     let r = @{span_diagnostic: span_diagnostic, src: filemap.src,"}]}