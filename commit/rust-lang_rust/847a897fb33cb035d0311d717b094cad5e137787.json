{"sha": "847a897fb33cb035d0311d717b094cad5e137787", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0N2E4OTdmYjMzY2IwMzVkMDMxMWQ3MTdiMDk0Y2FkNWUxMzc3ODc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-10T17:13:34Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-10T17:13:34Z"}, "message": "fix some comments.", "tree": {"sha": "456c0c1be1a962a4ed681f22167d5f308412cb29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456c0c1be1a962a4ed681f22167d5f308412cb29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/847a897fb33cb035d0311d717b094cad5e137787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/847a897fb33cb035d0311d717b094cad5e137787", "html_url": "https://github.com/rust-lang/rust/commit/847a897fb33cb035d0311d717b094cad5e137787", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/847a897fb33cb035d0311d717b094cad5e137787/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47016f9ce514fd5975a4412259ce3022b877ad3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/47016f9ce514fd5975a4412259ce3022b877ad3d", "html_url": "https://github.com/rust-lang/rust/commit/47016f9ce514fd5975a4412259ce3022b877ad3d"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "ac96375095e143a8bfd10635f74ee8bd011133ee", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/847a897fb33cb035d0311d717b094cad5e137787/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/847a897fb33cb035d0311d717b094cad5e137787/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=847a897fb33cb035d0311d717b094cad5e137787", "patch": "@@ -1067,8 +1067,8 @@ impl<'a> MethodDef<'a> {\n             .collect::<Vec<ast::Ident>>();\n \n         // The `vi_idents` will be bound, solely in the catch-all, to\n-        // a series of let statements mapping each self_arg to an isize\n-        // corresponding to its discriminant value.\n+        // a series of let statements mapping each self_arg to an int\n+        // value corresponding to its discriminant.\n         let vi_idents: Vec<ast::Ident> = self_arg_names.iter()\n             .map(|name| { let vi_suffix = format!(\"{}_vi\", &name[..]);\n                           cx.ident_of(&vi_suffix[..]) })\n@@ -1186,18 +1186,19 @@ impl<'a> MethodDef<'a> {\n             // Build a series of let statements mapping each self_arg\n             // to its discriminant value. If this is a C-style enum\n             // with a specific repr type, then casts the values to\n-            // that type.  Otherwise casts to `isize`.\n+            // that type.  Otherwise casts to `i32` (the default repr\n+            // type).\n             //\n             // i.e. for `enum E<T> { A, B(1), C(T, T) }`, and a deriving\n             // with three Self args, builds three statements:\n             //\n             // ```\n             // let __self0_vi = unsafe {\n-            //     std::intrinsics::discriminant_value(&self) } as isize;\n+            //     std::intrinsics::discriminant_value(&self) } as i32;\n             // let __self1_vi = unsafe {\n-            //     std::intrinsics::discriminant_value(&__arg1) } as isize;\n+            //     std::intrinsics::discriminant_value(&__arg1) } as i32;\n             // let __self2_vi = unsafe {\n-            //     std::intrinsics::discriminant_value(&__arg2) } as isize;\n+            //     std::intrinsics::discriminant_value(&__arg2) } as i32;\n             // ```\n             let mut index_let_stmts: Vec<P<ast::Stmt>> = Vec::new();\n "}]}