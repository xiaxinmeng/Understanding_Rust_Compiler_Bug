{"sha": "a73b7bb3f6af134c781cba1126350749c5a91144", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3M2I3YmIzZjZhZjEzNGM3ODFjYmExMTI2MzUwNzQ5YzVhOTExNDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T07:04:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-14T07:04:39Z"}, "message": "Move expansion to Expander", "tree": {"sha": "cfa7734b56b24c4028262aa02823378ad6c8c425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa7734b56b24c4028262aa02823378ad6c8c425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a73b7bb3f6af134c781cba1126350749c5a91144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a73b7bb3f6af134c781cba1126350749c5a91144", "html_url": "https://github.com/rust-lang/rust/commit/a73b7bb3f6af134c781cba1126350749c5a91144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a73b7bb3f6af134c781cba1126350749c5a91144/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c720b256f5d73434250072cc65fead746250d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c720b256f5d73434250072cc65fead746250d87", "html_url": "https://github.com/rust-lang/rust/commit/5c720b256f5d73434250072cc65fead746250d87"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "65fefd912e051eb65f1f74d222da8ab00b6eadb7", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a73b7bb3f6af134c781cba1126350749c5a91144/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73b7bb3f6af134c781cba1126350749c5a91144/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=a73b7bb3f6af134c781cba1126350749c5a91144", "patch": "@@ -3,9 +3,12 @@ mod lower;\n \n use std::{ops::Index, sync::Arc};\n \n-use hir_expand::{either::Either, hygiene::Hygiene, HirFileId, MacroDefId, Source};\n+use hir_expand::{\n+    either::Either, hygiene::Hygiene, AstId, HirFileId, MacroCallLoc, MacroDefId, MacroFileKind,\n+    Source,\n+};\n use ra_arena::{map::ArenaMap, Arena};\n-use ra_syntax::{ast, AstPtr};\n+use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -37,6 +40,35 @@ impl Expander {\n         }\n     }\n \n+    fn expand(\n+        &mut self,\n+        db: &impl DefDatabase2,\n+        macro_call: ast::MacroCall,\n+    ) -> Option<(Mark, ast::Expr)> {\n+        let ast_id = AstId::new(\n+            self.current_file_id,\n+            db.ast_id_map(self.current_file_id).ast_id(&macro_call),\n+        );\n+\n+        if let Some(path) = macro_call.path().and_then(|path| self.parse_path(path)) {\n+            if let Some(def) = self.resolve_path_as_macro(db, &path) {\n+                let call_id = db.intern_macro(MacroCallLoc { def, ast_id });\n+                let file_id = call_id.as_file(MacroFileKind::Expr);\n+                if let Some(node) = db.parse_or_expand(file_id) {\n+                    if let Some(expr) = ast::Expr::cast(node) {\n+                        log::debug!(\"macro expansion {:#?}\", expr.syntax());\n+                        let mark = self.enter(db, file_id);\n+                        return Some((mark, expr));\n+                    }\n+                }\n+            }\n+        }\n+\n+        // FIXME: Instead of just dropping the error from expansion\n+        // report it\n+        None\n+    }\n+\n     fn enter(&mut self, db: &impl DefDatabase2, file_id: HirFileId) -> Mark {\n         let mark = Mark { file_id: self.current_file_id };\n         self.hygiene = Hygiene::new(db, file_id);"}, {"sha": "c45500195769324e53580cb8dc58b4b8ba433610", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a73b7bb3f6af134c781cba1126350749c5a91144/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a73b7bb3f6af134c781cba1126350749c5a91144/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=a73b7bb3f6af134c781cba1126350749c5a91144", "patch": "@@ -3,7 +3,6 @@\n use hir_expand::{\n     either::Either,\n     name::{self, AsName, Name},\n-    AstId, MacroCallLoc, MacroFileKind,\n };\n use ra_arena::Arena;\n use ra_syntax::{\n@@ -433,31 +432,14 @@ where\n             // FIXME implement HIR for these:\n             ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n             ast::Expr::RangeExpr(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            ast::Expr::MacroCall(e) => {\n-                let ast_id = AstId::new(\n-                    self.expander.current_file_id,\n-                    self.db.ast_id_map(self.expander.current_file_id).ast_id(&e),\n-                );\n-\n-                if let Some(path) = e.path().and_then(|path| self.expander.parse_path(path)) {\n-                    if let Some(def) = self.expander.resolve_path_as_macro(self.db, &path) {\n-                        let call_id = self.db.intern_macro(MacroCallLoc { def, ast_id });\n-                        let file_id = call_id.as_file(MacroFileKind::Expr);\n-                        if let Some(node) = self.db.parse_or_expand(file_id) {\n-                            if let Some(expr) = ast::Expr::cast(node) {\n-                                log::debug!(\"macro expansion {:#?}\", expr.syntax());\n-                                let mark = self.expander.enter(self.db, file_id);\n-                                let id = self.collect_expr(expr);\n-                                self.expander.exit(self.db, mark);\n-                                return id;\n-                            }\n-                        }\n-                    }\n+            ast::Expr::MacroCall(e) => match self.expander.expand(self.db, e) {\n+                Some((mark, expansion)) => {\n+                    let id = self.collect_expr(expansion);\n+                    self.expander.exit(self.db, mark);\n+                    id\n                 }\n-                // FIXME: Instead of just dropping the error from expansion\n-                // report it\n-                self.alloc_expr(Expr::Missing, syntax_ptr)\n-            }\n+                None => self.alloc_expr(Expr::Missing, syntax_ptr),\n+            },\n         }\n     }\n "}]}