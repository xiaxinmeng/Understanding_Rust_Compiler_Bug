{"sha": "fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNGEzNzc1OWJlMDZjMmI5NmMxMzNjZmMwZjg1YjdjZjJjZTAwYjQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-22T15:58:25Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-30T18:22:25Z"}, "message": "Rvalue::Len", "tree": {"sha": "e0e5740c13d5e235d73b17cb47895c5704ac92ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0e5740c13d5e235d73b17cb47895c5704ac92ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "html_url": "https://github.com/rust-lang/rust/commit/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12282a8ebc2404add07224a74b872cecf6d602da", "url": "https://api.github.com/repos/rust-lang/rust/commits/12282a8ebc2404add07224a74b872cecf6d602da", "html_url": "https://github.com/rust-lang/rust/commit/12282a8ebc2404add07224a74b872cecf6d602da"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "c0ea7644f9037b3134da3536535a86b364285da7", "filename": "src/base.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "patch": "@@ -474,7 +474,15 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                         to.write_cvalue(fx, operand);\n                     }\n                 }\n-                Rvalue::Len(lval) => unimpl!(\"rval len {:?}\", lval),\n+                Rvalue::Len(place) => {\n+                    let place = trans_place(fx, place);\n+                    let size = match place {\n+                        CPlace::Addr(_, size, _) => size.unwrap(),\n+                        CPlace::Var(_, _) => unreachable!(),\n+                    };\n+                    let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+                    lval.write_cvalue(fx, CValue::ByVal(size, usize_layout));\n+                }\n                 Rvalue::NullaryOp(NullOp::Box, ty) => unimplemented!(\"rval box {:?}\", ty),\n                 Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n                     assert!("}, {"sha": "9bd3e823fcb3498c3d4f309e863143c48eda27eb", "filename": "src/common.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=fa4a37759be06c2b96c133cfc0f85b7cf2ce00b4", "patch": "@@ -433,23 +433,20 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n         index: Value,\n     ) -> CPlace<'tcx> {\n-        let addr = self.expect_addr();\n-        let layout = self.layout();\n-        if layout.is_unsized() {\n-            unimpl!(\"unsized place_field\");\n-        }\n-\n-        match layout.ty.sty {\n+        match self.layout().ty.sty {\n             ty::Array(elem_ty, _) => {\n                 let elem_layout = fx.layout_of(elem_ty);\n+\n                 let offset = fx\n                     .bcx\n                     .ins()\n                     .imul_imm(index, elem_layout.size.bytes() as i64);\n+\n+                let addr = self.expect_addr();\n                 CPlace::Addr(fx.bcx.ins().iadd(addr, offset), None, elem_layout)\n             }\n-            ty::Slice(_elem_ty) => unimplemented!(\"place_index(TySlice)\"),\n-            _ => bug!(\"place_index({:?})\", layout.ty),\n+            ty::Slice(_elem_ty) => unimpl!(\"place_index(TySlice)\"),\n+            _ => bug!(\"place_index({:?})\", self.layout().ty),\n         }\n     }\n "}]}