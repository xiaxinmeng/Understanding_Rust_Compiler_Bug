{"sha": "befa5c98c956bd499f741c582b96bf8d49fe7dbc", "node_id": "C_kwDOAAsO6NoAKGJlZmE1Yzk4Yzk1NmJkNDk5Zjc0MWM1ODJiOTZiZjhkNDlmZTdkYmM", "commit": {"author": {"name": "Weihang Lo", "email": "me@weihanglo.tw", "date": "2023-03-13T17:46:38Z"}, "committer": {"name": "Weihang Lo", "email": "me@weihanglo.tw", "date": "2023-04-16T18:32:20Z"}, "message": "chore: remove `rustc-workspace-hack`\n\nCo-authored-by: Scott Schafer <schaferjscott@gmail.com>\nCo-authored-by: Eric Huss <eric@huss.org>", "tree": {"sha": "66d44f912db55a7c4fe6bf1459dd182b06414809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d44f912db55a7c4fe6bf1459dd182b06414809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/befa5c98c956bd499f741c582b96bf8d49fe7dbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEfYTqB0fBJAwqFtKm19vxiYJegucFAmQ8PzQACgkQ19vxiYJe\ngudVLw//cyzCHuWJeUzpiB3Z326DKwyTw24PF7rIRhXmWROpUsQuz6gQ0o9HBvLZ\nJh551xOuYa8jUjRYeMr0oXi5Avsr7dtGewnf4QcVcgIVZ3bQbSRj/ArYyUbyZxQ9\nCE3N0ry+8Fr8Jbew0R8F44Hcsr8ShfwyO5GIBUnMLXzQMa1QDjKKwPpS+LfUFg7D\nxZR0B7NjoW9t5T7ULvUpQJd1McJ8fno918ylnQZ9D3Y4B1Al5fpoBYt+tIILTFAI\nv7Nkce6/jPbv+UM2JdYpbeG2Y1YgqODvaDVtKYg7BB8jjUTpqU3G/IoXeEdbMOQQ\nwb9xpQfZhq5ccrBYtC9w1J1mKALAUcPtTB4rfkrSPgckj8ExBCreV8gtW/vUeB1F\n9SuOHKZgnQ1odx7lIO9jgopGDGrXDad/SEVyZ1K7ndGO4l12iUcW76HIG4r8rP3c\n1VJ8JiV6bklBQzT3PZFMPrmO83cBtsdDdftAbqUtAHmwwk7Zi9PhdVrx7h6Amj4Q\nI2M5MrphDp1Zy51syJJA7BWg8xJCVGhMkLcAyFxHkFX7AGLeUjTiM3Is2FLE/7Ju\nuuSEAVDZUdhHJo76LeRtT14a7MYUU/qFCV4HiqLBQsaYfiTesi8n8FFjPc5Nco2P\nhsuYMUR2jdpVpBJ1aXlnSOK6zSazB0336YiGlq8z2qRKgKksui4=\n=yv8f\n-----END PGP SIGNATURE-----", "payload": "tree 66d44f912db55a7c4fe6bf1459dd182b06414809\nparent 1cfaa3431e9d8633472316c714962de960db0842\nauthor Weihang Lo <me@weihanglo.tw> 1678729598 +0000\ncommitter Weihang Lo <me@weihanglo.tw> 1681669940 +0100\n\nchore: remove `rustc-workspace-hack`\n\nCo-authored-by: Scott Schafer <schaferjscott@gmail.com>\nCo-authored-by: Eric Huss <eric@huss.org>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/befa5c98c956bd499f741c582b96bf8d49fe7dbc", "html_url": "https://github.com/rust-lang/rust/commit/befa5c98c956bd499f741c582b96bf8d49fe7dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/befa5c98c956bd499f741c582b96bf8d49fe7dbc/comments", "author": {"login": "weihanglo", "id": 14314532, "node_id": "MDQ6VXNlcjE0MzE0NTMy", "avatar_url": "https://avatars.githubusercontent.com/u/14314532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weihanglo", "html_url": "https://github.com/weihanglo", "followers_url": "https://api.github.com/users/weihanglo/followers", "following_url": "https://api.github.com/users/weihanglo/following{/other_user}", "gists_url": "https://api.github.com/users/weihanglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/weihanglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weihanglo/subscriptions", "organizations_url": "https://api.github.com/users/weihanglo/orgs", "repos_url": "https://api.github.com/users/weihanglo/repos", "events_url": "https://api.github.com/users/weihanglo/events{/privacy}", "received_events_url": "https://api.github.com/users/weihanglo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weihanglo", "id": 14314532, "node_id": "MDQ6VXNlcjE0MzE0NTMy", "avatar_url": "https://avatars.githubusercontent.com/u/14314532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weihanglo", "html_url": "https://github.com/weihanglo", "followers_url": "https://api.github.com/users/weihanglo/followers", "following_url": "https://api.github.com/users/weihanglo/following{/other_user}", "gists_url": "https://api.github.com/users/weihanglo/gists{/gist_id}", "starred_url": "https://api.github.com/users/weihanglo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weihanglo/subscriptions", "organizations_url": "https://api.github.com/users/weihanglo/orgs", "repos_url": "https://api.github.com/users/weihanglo/repos", "events_url": "https://api.github.com/users/weihanglo/events{/privacy}", "received_events_url": "https://api.github.com/users/weihanglo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cfaa3431e9d8633472316c714962de960db0842", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfaa3431e9d8633472316c714962de960db0842", "html_url": "https://github.com/rust-lang/rust/commit/1cfaa3431e9d8633472316c714962de960db0842"}], "stats": {"total": 195, "additions": 4, "deletions": 191}, "files": [{"sha": "358b2f2e924c31681a0e373d42c741998b53ffee", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/befa5c98c956bd499f741c582b96bf8d49fe7dbc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/befa5c98c956bd499f741c582b96bf8d49fe7dbc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=befa5c98c956bd499f741c582b96bf8d49fe7dbc", "patch": "@@ -2773,7 +2773,6 @@ dependencies = [\n name = \"rls\"\n version = \"2.0.0\"\n dependencies = [\n- \"rustc-workspace-hack\",\n  \"serde\",\n  \"serde_json\",\n ]\n@@ -2885,11 +2884,8 @@ dependencies = [\n [[package]]\n name = \"rustc-workspace-hack\"\n version = \"1.0.0\"\n-dependencies = [\n- \"libc\",\n- \"regex\",\n- \"serde_json\",\n-]\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \n [[package]]\n name = \"rustc_abi\""}, {"sha": "a497d7321e02cb212d3df83261f4d025786e1446", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/befa5c98c956bd499f741c582b96bf8d49fe7dbc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/befa5c98c956bd499f741c582b96bf8d49fe7dbc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=befa5c98c956bd499f741c582b96bf8d49fe7dbc", "patch": "@@ -100,10 +100,6 @@ miniz_oxide.debug = 0\n object.debug = 0\n \n [patch.crates-io]\n-# See comments in `src/tools/rustc-workspace-hack/README.md` for what's going on\n-# here\n-rustc-workspace-hack = { path = 'src/tools/rustc-workspace-hack' }\n-\n # See comments in `library/rustc-std-workspace-core/README.md` for what's going on\n # here\n rustc-std-workspace-core = { path = 'library/rustc-std-workspace-core' }"}, {"sha": "bfdb029951f2919587185315d1487e9cb1cff68b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/befa5c98c956bd499f741c582b96bf8d49fe7dbc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befa5c98c956bd499f741c582b96bf8d49fe7dbc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=befa5c98c956bd499f741c582b96bf8d49fe7dbc", "patch": "@@ -238,8 +238,6 @@ pub struct Build {\n     ci_env: CiEnv,\n     delayed_failures: RefCell<Vec<String>>,\n     prerelease_version: Cell<Option<u32>>,\n-    tool_artifacts:\n-        RefCell<HashMap<TargetSelection, HashMap<String, (&'static str, PathBuf, Vec<String>)>>>,\n \n     #[cfg(feature = \"build-metrics\")]\n     metrics: metrics::BuildMetrics,\n@@ -458,7 +456,6 @@ impl Build {\n             ci_env: CiEnv::current(),\n             delayed_failures: RefCell::new(Vec::new()),\n             prerelease_version: Cell::new(None),\n-            tool_artifacts: Default::default(),\n \n             #[cfg(feature = \"build-metrics\")]\n             metrics: metrics::BuildMetrics::init(),"}, {"sha": "842aa91ad5a5443748ca1c96ff4d3e0d5d0a1a6d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 129, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/befa5c98c956bd499f741c582b96bf8d49fe7dbc/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/befa5c98c956bd499f741c582b96bf8d49fe7dbc/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=befa5c98c956bd499f741c582b96bf8d49fe7dbc", "patch": "@@ -1,4 +1,3 @@\n-use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::path::PathBuf;\n@@ -120,136 +119,10 @@ impl Step for ToolBuild {\n             &self.target,\n         );\n         builder.info(&msg);\n-        let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |msg| {\n-            // Only care about big things like the RLS/Cargo for now\n-            match tool {\n-                \"rls\" | \"clippy-driver\" | \"miri\" | \"rustfmt\" => {}\n-\n-                _ => return,\n-            }\n-            let (id, features, filenames) = match msg {\n-                compile::CargoMessage::CompilerArtifact {\n-                    package_id,\n-                    features,\n-                    filenames,\n-                    target: _,\n-                } => (package_id, features, filenames),\n-                _ => return,\n-            };\n-            let features = features.iter().map(|s| s.to_string()).collect::<Vec<_>>();\n-\n-            for path in filenames {\n-                let val = (tool, PathBuf::from(&*path), features.clone());\n-                // we're only interested in deduplicating rlibs for now\n-                if val.1.extension().and_then(|s| s.to_str()) != Some(\"rlib\") {\n-                    continue;\n-                }\n-\n-                // Don't worry about compiles that turn out to be host\n-                // dependencies or build scripts. To skip these we look for\n-                // anything that goes in `.../release/deps` but *doesn't* go in\n-                // `$target/release/deps`. This ensure that outputs in\n-                // `$target/release` are still considered candidates for\n-                // deduplication.\n-                if let Some(parent) = val.1.parent() {\n-                    if parent.ends_with(\"release/deps\") {\n-                        let maybe_target = parent\n-                            .parent()\n-                            .and_then(|p| p.parent())\n-                            .and_then(|p| p.file_name())\n-                            .and_then(|p| p.to_str())\n-                            .unwrap();\n-                        if maybe_target != &*target.triple {\n-                            continue;\n-                        }\n-                    }\n-                }\n-\n-                // Record that we've built an artifact for `id`, and if one was\n-                // already listed then we need to see if we reused the same\n-                // artifact or produced a duplicate.\n-                let mut artifacts = builder.tool_artifacts.borrow_mut();\n-                let prev_artifacts = artifacts.entry(target).or_default();\n-                let prev = match prev_artifacts.get(&*id) {\n-                    Some(prev) => prev,\n-                    None => {\n-                        prev_artifacts.insert(id.to_string(), val);\n-                        continue;\n-                    }\n-                };\n-                if prev.1 == val.1 {\n-                    return; // same path, same artifact\n-                }\n-\n-                // If the paths are different and one of them *isn't* inside of\n-                // `release/deps`, then it means it's probably in\n-                // `$target/release`, or it's some final artifact like\n-                // `libcargo.rlib`. In these situations Cargo probably just\n-                // copied it up from `$target/release/deps/libcargo-xxxx.rlib`,\n-                // so if the features are equal we can just skip it.\n-                let prev_no_hash = prev.1.parent().unwrap().ends_with(\"release/deps\");\n-                let val_no_hash = val.1.parent().unwrap().ends_with(\"release/deps\");\n-                if prev.2 == val.2 || !prev_no_hash || !val_no_hash {\n-                    return;\n-                }\n-\n-                // ... and otherwise this looks like we duplicated some sort of\n-                // compilation, so record it to generate an error later.\n-                duplicates.push((id.to_string(), val, prev.clone()));\n-            }\n+        let is_expected = compile::stream_cargo(builder, cargo, vec![], &mut |_msg| {\n+            return;\n         });\n \n-        if is_expected && !duplicates.is_empty() {\n-            eprintln!(\n-                \"duplicate artifacts found when compiling a tool, this \\\n-                      typically means that something was recompiled because \\\n-                      a transitive dependency has different features activated \\\n-                      than in a previous build:\\n\"\n-            );\n-            let (same, different): (Vec<_>, Vec<_>) =\n-                duplicates.into_iter().partition(|(_, cur, prev)| cur.2 == prev.2);\n-            if !same.is_empty() {\n-                eprintln!(\n-                    \"the following dependencies are duplicated although they \\\n-                      have the same features enabled:\"\n-                );\n-                for (id, cur, prev) in same {\n-                    eprintln!(\"  {}\", id);\n-                    // same features\n-                    eprintln!(\"    `{}` ({:?})\\n    `{}` ({:?})\", cur.0, cur.1, prev.0, prev.1);\n-                }\n-            }\n-            if !different.is_empty() {\n-                eprintln!(\"the following dependencies have different features:\");\n-                for (id, cur, prev) in different {\n-                    eprintln!(\"  {}\", id);\n-                    let cur_features: HashSet<_> = cur.2.into_iter().collect();\n-                    let prev_features: HashSet<_> = prev.2.into_iter().collect();\n-                    eprintln!(\n-                        \"    `{}` additionally enabled features {:?} at {:?}\",\n-                        cur.0,\n-                        &cur_features - &prev_features,\n-                        cur.1\n-                    );\n-                    eprintln!(\n-                        \"    `{}` additionally enabled features {:?} at {:?}\",\n-                        prev.0,\n-                        &prev_features - &cur_features,\n-                        prev.1\n-                    );\n-                }\n-            }\n-            eprintln!();\n-            eprintln!(\n-                \"to fix this you will probably want to edit the local \\\n-                      src/tools/rustc-workspace-hack/Cargo.toml crate, as \\\n-                      that will update the dependency graph to ensure that \\\n-                      these crates all share the same feature set\"\n-            );\n-            panic!(\"tools should not compile multiple copies of the same crate\");\n-        }\n-\n         builder.save_toolstate(\n             tool,\n             if is_expected { ToolState::TestFail } else { ToolState::BuildFail },"}, {"sha": "b84647eb332726dbf83ded3f567796055ba9a650", "filename": "src/tools/rls/Cargo.toml", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/befa5c98c956bd499f741c582b96bf8d49fe7dbc/src%2Ftools%2Frls%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/befa5c98c956bd499f741c582b96bf8d49fe7dbc/src%2Ftools%2Frls%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls%2FCargo.toml?ref=befa5c98c956bd499f741c582b96bf8d49fe7dbc", "patch": "@@ -7,7 +7,3 @@ license = \"Apache-2.0/MIT\"\n [dependencies]\n serde = { version = \"1.0.143\", features = [\"derive\"] }\n serde_json = \"1.0.83\"\n-# A noop dependency that changes in the Rust repository, it's a bit of a hack.\n-# See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n-# for more information.\n-rustc-workspace-hack = \"1.0.0\""}, {"sha": "5d5d57fc9ef165ffeb292c2502b0a41f95160e55", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1cfaa3431e9d8633472316c714962de960db0842/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1cfaa3431e9d8633472316c714962de960db0842/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=1cfaa3431e9d8633472316c714962de960db0842", "patch": "@@ -1,19 +0,0 @@\n-[package]\n-name = \"rustc-workspace-hack\"\n-version = \"1.0.0\"\n-license = 'MIT OR Apache-2.0'\n-description = \"\"\"\n-Hack for the compiler's own build system\n-\"\"\"\n-edition = \"2021\"\n-\n-[lib]\n-path = \"lib.rs\"\n-\n-# For documentation about what this is and why in the world these dependencies\n-# are appearing, see `README.md`.\n-[dependencies]\n-libc = { version = \"0.2\", features = [\"extra_traits\"] }\n-serde_json = { version = \"1.0.31\", features = [\"unbounded_depth\"] }\n-# Ensure default features of regex, which are disabled in some scenarios.\n-regex = { version = \"1.5.6\" }"}, {"sha": "3c61470358ba7df40406b8d05a0d152bae0c8ec8", "filename": "src/tools/rustc-workspace-hack/README.md", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1cfaa3431e9d8633472316c714962de960db0842/src%2Ftools%2Frustc-workspace-hack%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cfaa3431e9d8633472316c714962de960db0842/src%2Ftools%2Frustc-workspace-hack%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FREADME.md?ref=1cfaa3431e9d8633472316c714962de960db0842", "patch": "@@ -1,25 +0,0 @@\n-# `rustc-workspace-hack`\n-\n-This crate is a bit of a hack to make workspaces in rustc work a bit better.\n-The rationale for this existence is a bit subtle, but the general idea is that\n-we want commands like `./x.py build src/tools/{clippy,cargo}` to share as\n-many dependencies as possible.\n-\n-Each invocation is a different invocation of Cargo, however. Each time Cargo\n-runs a build it will re-resolve the dependency graph, notably selecting\n-different features sometimes for each build.\n-\n-For example, let's say there's a very deep dependency like `winapi` in each of\n-these builds. For Cargo, `winapi` has 33 features enabled. In Clippy, however,\n-`winapi` has 22 features enabled. This means that building Cargo and then the\n-Clippy will actually build winapi twice, which in turn will build duplicates\n-of everything that depends on `winapi`. This is bad!\n-\n-The goal of this crate is to solve this problem and ensure that the resolved\n-dependency graph for all of these tools is the same in the various subsets of\n-each tool, notably enabling the same features of transitive dependencies.\n-\n-All tools vendored here depend on the `rustc-workspace-hack` crate on crates.io.\n-When on crates.io this crate is an empty crate that is just a noop. We override\n-it, however, in this workspace to this crate here, which means we can control\n-crates in the dependency graph for each of these tools."}, {"sha": "44425d9c15fcf75c46461b3b6672ad45bf4daeaa", "filename": "src/tools/rustc-workspace-hack/lib.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cfaa3431e9d8633472316c714962de960db0842/src%2Ftools%2Frustc-workspace-hack%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfaa3431e9d8633472316c714962de960db0842/src%2Ftools%2Frustc-workspace-hack%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2Flib.rs?ref=1cfaa3431e9d8633472316c714962de960db0842", "patch": "@@ -1 +0,0 @@\n-// intentionally left blank"}]}