{"sha": "938c8c18c406fc650c7c2c895aca3fb320ecbf18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzOGM4YzE4YzQwNmZjNjUwYzdjMmM4OTVhY2EzZmIzMjBlY2JmMTg=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-02-28T15:38:51Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-03-04T18:40:01Z"}, "message": "This doesn't seem necessary?", "tree": {"sha": "fc44782f9a419dbb8e9339888365a2a7114eeb7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc44782f9a419dbb8e9339888365a2a7114eeb7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/938c8c18c406fc650c7c2c895aca3fb320ecbf18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/938c8c18c406fc650c7c2c895aca3fb320ecbf18", "html_url": "https://github.com/rust-lang/rust/commit/938c8c18c406fc650c7c2c895aca3fb320ecbf18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/938c8c18c406fc650c7c2c895aca3fb320ecbf18/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d78f19ebbdeb597cd15293e5f90dc9c106949048", "url": "https://api.github.com/repos/rust-lang/rust/commits/d78f19ebbdeb597cd15293e5f90dc9c106949048", "html_url": "https://github.com/rust-lang/rust/commit/d78f19ebbdeb597cd15293e5f90dc9c106949048"}], "stats": {"total": 54, "additions": 17, "deletions": 37}, "files": [{"sha": "6c9ee5287820175f60113776e36b78750393c4ef", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=938c8c18c406fc650c7c2c895aca3fb320ecbf18", "patch": "@@ -507,12 +507,6 @@ impl attr::AttrMetaMethods for Attribute {\n     fn meta_item_list<'a>(&'a self) -> Option<&'a [P<ast::MetaItem>]> { None }\n     fn span(&self) -> codemap::Span { unimplemented!() }\n }\n-impl<'a> attr::AttrMetaMethods for &'a Attribute {\n-    fn name(&self) -> InternedString { (**self).name() }\n-    fn value_str(&self) -> Option<InternedString> { (**self).value_str() }\n-    fn meta_item_list(&self) -> Option<&[P<ast::MetaItem>]> { None }\n-    fn span(&self) -> codemap::Span { unimplemented!() }\n-}\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct TyParam {"}, {"sha": "ceec80402c01e817a27b4bd6995bfb208f3eebf9", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=938c8c18c406fc650c7c2c895aca3fb320ecbf18", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n use clean::*;\n-use std::collections::HashMap;\n-use std::mem::{replace, swap};\n \n pub trait DocFolder : Sized {\n     fn fold_item(&mut self, item: Item) -> Option<Item> {\n@@ -20,42 +18,36 @@ pub trait DocFolder : Sized {\n     /// don't override!\n     fn fold_item_recur(&mut self, item: Item) -> Option<Item> {\n         let Item { attrs, name, source, visibility, def_id, inner, stability, deprecation } = item;\n-        let inner = inner;\n         let inner = match inner {\n             StructItem(mut i) => {\n-                let mut foo = Vec::new(); swap(&mut foo, &mut i.fields);\n-                let num_fields = foo.len();\n-                i.fields.extend(foo.into_iter().filter_map(|x| self.fold_item(x)));\n+                let num_fields = i.fields.len();\n+                i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                 i.fields_stripped |= num_fields != i.fields.len();\n                 StructItem(i)\n             },\n             ModuleItem(i) => {\n                 ModuleItem(self.fold_mod(i))\n             },\n             EnumItem(mut i) => {\n-                let mut foo = Vec::new(); swap(&mut foo, &mut i.variants);\n-                let num_variants = foo.len();\n-                i.variants.extend(foo.into_iter().filter_map(|x| self.fold_item(x)));\n+                let num_variants = i.variants.len();\n+                i.variants = i.variants.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                 i.variants_stripped |= num_variants != i.variants.len();\n                 EnumItem(i)\n             },\n             TraitItem(mut i) => {\n-                let mut foo = Vec::new(); swap(&mut foo, &mut i.items);\n-                i.items.extend(foo.into_iter().filter_map(|x| self.fold_item(x)));\n+                i.items = i.items.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                 TraitItem(i)\n             },\n             ImplItem(mut i) => {\n-                let mut foo = Vec::new(); swap(&mut foo, &mut i.items);\n-                i.items.extend(foo.into_iter().filter_map(|x| self.fold_item(x)));\n+                i.items = i.items.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                 ImplItem(i)\n             },\n             VariantItem(i) => {\n                 let i2 = i.clone(); // this clone is small\n                 match i.kind {\n                     StructVariant(mut j) => {\n-                        let mut foo = Vec::new(); swap(&mut foo, &mut j.fields);\n-                        let num_fields = foo.len();\n-                        j.fields.extend(foo.into_iter().filter_map(|x| self.fold_item(x)));\n+                        let num_fields = j.fields.len();\n+                        j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n                         j.fields_stripped |= num_fields != j.fields.len();\n                         VariantItem(Variant {kind: StructVariant(j), ..i2})\n                     },\n@@ -78,17 +70,13 @@ pub trait DocFolder : Sized {\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {\n-        c.module = match replace(&mut c.module, None) {\n-            Some(module) => self.fold_item(module), None => None\n-        };\n-\n-        let external_traits = replace(&mut c.external_traits, HashMap::new());\n-        c.external_traits = external_traits.into_iter().map(|(k, mut v)| {\n-            let items = replace(&mut v.items, Vec::new());\n-            v.items = items.into_iter().filter_map(|i| self.fold_item(i))\n-                           .collect();\n+        c.module = c.module.and_then(|module| {\n+            self.fold_item(module)\n+        });\n+        c.external_traits = c.external_traits.into_iter().map(|(k, mut v)| {\n+            v.items = v.items.into_iter().filter_map(|i| self.fold_item(i)).collect();\n             (k, v)\n         }).collect();\n-        return c;\n+        c\n     }\n }"}, {"sha": "2cb2b299e401709173db83d8856ce3c28a35c464", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=938c8c18c406fc650c7c2c895aca3fb320ecbf18", "patch": "@@ -374,7 +374,7 @@ fn init_ids() -> HashMap<String, usize> {\n      \"deref-methods\",\n      \"implementations\",\n      \"derived_implementations\"\n-     ].into_iter().map(|id| (String::from(*id), 1)).collect::<HashMap<_, _>>()\n+     ].into_iter().map(|id| (String::from(*id), 1)).collect()\n }\n \n /// This method resets the local table of used ID attributes. This is typically"}, {"sha": "6f6a72fa9fe7d8ff114a461109ae43f928dd94e1", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938c8c18c406fc650c7c2c895aca3fb320ecbf18/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=938c8c18c406fc650c7c2c895aca3fb320ecbf18", "patch": "@@ -243,8 +243,7 @@ impl<'a> fold::DocFolder for ImplStripper<'a> {\n pub fn unindent_comments(krate: clean::Crate) -> plugins::PluginResult {\n     struct CommentCleaner;\n     impl fold::DocFolder for CommentCleaner {\n-        fn fold_item(&mut self, i: Item) -> Option<Item> {\n-            let mut i = i;\n+        fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n             let mut avec: Vec<clean::Attribute> = Vec::new();\n             for attr in &i.attrs {\n                 match attr {\n@@ -268,9 +267,8 @@ pub fn unindent_comments(krate: clean::Crate) -> plugins::PluginResult {\n pub fn collapse_docs(krate: clean::Crate) -> plugins::PluginResult {\n     struct Collapser;\n     impl fold::DocFolder for Collapser {\n-        fn fold_item(&mut self, i: Item) -> Option<Item> {\n+        fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n             let mut docstr = String::new();\n-            let mut i = i;\n             for attr in &i.attrs {\n                 if let clean::NameValue(ref x, ref s) = *attr {\n                     if \"doc\" == *x {"}]}