{"sha": "dd51b36fb261513a0886d98c16be7fcc43c66272", "node_id": "C_kwDOAAsO6NoAKGRkNTFiMzZmYjI2MTUxM2EwODg2ZDk4YzE2YmU3ZmNjNDNjNjYyNzI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-20T01:52:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-23T17:23:35Z"}, "message": "Add normalize hack back", "tree": {"sha": "d0cc53067b0c48efc6c91acc712105ce0832863e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0cc53067b0c48efc6c91acc712105ce0832863e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd51b36fb261513a0886d98c16be7fcc43c66272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd51b36fb261513a0886d98c16be7fcc43c66272", "html_url": "https://github.com/rust-lang/rust/commit/dd51b36fb261513a0886d98c16be7fcc43c66272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd51b36fb261513a0886d98c16be7fcc43c66272/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "html_url": "https://github.com/rust-lang/rust/commit/9be2f35a4c1ed1b04aa4a6945b64763f599259ff"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "b25b4bd4fe363ad145507a327d05fc500cc72a05", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd51b36fb261513a0886d98c16be7fcc43c66272/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd51b36fb261513a0886d98c16be7fcc43c66272/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=dd51b36fb261513a0886d98c16be7fcc43c66272", "patch": "@@ -574,8 +574,8 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n /// it.\n pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n-    a: ty::Const<'tcx>,\n-    b: ty::Const<'tcx>,\n+    mut a: ty::Const<'tcx>,\n+    mut b: ty::Const<'tcx>,\n ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n     debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n@@ -596,6 +596,17 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         );\n     }\n \n+    // HACK(const_generics): We still need to eagerly evaluate consts when\n+    // relating them because during `normalize_param_env_or_error`,\n+    // we may relate an evaluated constant in a obligation against\n+    // an unnormalized (i.e. unevaluated) const in the param-env.\n+    // FIXME(generic_const_exprs): Once we always lazily unify unevaluated constants\n+    // these `eval` calls can be removed.\n+    if !relation.tcx().features().generic_const_exprs {\n+        a = a.eval(tcx, relation.param_env());\n+        b = b.eval(tcx, relation.param_env());\n+    }\n+\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types."}, {"sha": "a7bbe4db992904d8e0da039f536606398b4185a0", "filename": "src/test/ui/consts/unnormalized-param-env.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dd51b36fb261513a0886d98c16be7fcc43c66272/src%2Ftest%2Fui%2Fconsts%2Funnormalized-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd51b36fb261513a0886d98c16be7fcc43c66272/src%2Ftest%2Fui%2Fconsts%2Funnormalized-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funnormalized-param-env.rs?ref=dd51b36fb261513a0886d98c16be7fcc43c66272", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+pub trait CSpace<const N: usize> {\n+    type Traj;\n+}\n+\n+pub struct Const<const R: usize>;\n+\n+pub trait Obstacle<CS, const N: usize> {\n+    fn trajectory_free<FT, S1>(&self, t: &FT)\n+    where\n+        CS::Traj: Sized,\n+        CS: CSpace<N>;\n+}\n+\n+// -----\n+\n+const N: usize = 4;\n+\n+struct ObstacleSpace2df32;\n+\n+impl<CS> Obstacle<CS, N> for ObstacleSpace2df32 {\n+    fn trajectory_free<TF, S1>(&self, t: &TF)\n+    where\n+        CS::Traj: Sized,\n+        CS: CSpace<N>,\n+    {\n+    }\n+}\n+\n+fn main() {}"}]}