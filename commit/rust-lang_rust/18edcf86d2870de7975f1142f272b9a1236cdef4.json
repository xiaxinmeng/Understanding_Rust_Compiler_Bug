{"sha": "18edcf86d2870de7975f1142f272b9a1236cdef4", "node_id": "C_kwDOAAsO6NoAKDE4ZWRjZjg2ZDI4NzBkZTc5NzVmMTE0MmYyNzJiOWExMjM2Y2RlZjQ", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-09-14T01:08:14Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-10-07T02:44:51Z"}, "message": "Reduce blur size, fix example width bug, add better error handling for I/O issues\n\nRemove repository url\n\nFix formatting\n\nFix file_span in print_src\n\nFormatting", "tree": {"sha": "e63b1d290f27385f53a717c36f503df7074472a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e63b1d290f27385f53a717c36f503df7074472a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18edcf86d2870de7975f1142f272b9a1236cdef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18edcf86d2870de7975f1142f272b9a1236cdef4", "html_url": "https://github.com/rust-lang/rust/commit/18edcf86d2870de7975f1142f272b9a1236cdef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18edcf86d2870de7975f1142f272b9a1236cdef4/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55bb51786e56a0096a550cf3f26b6c1aed83c872", "url": "https://api.github.com/repos/rust-lang/rust/commits/55bb51786e56a0096a550cf3f26b6c1aed83c872", "html_url": "https://github.com/rust-lang/rust/commit/55bb51786e56a0096a550cf3f26b6c1aed83c872"}], "stats": {"total": 97, "additions": 68, "deletions": 29}, "files": [{"sha": "b99d2fe5aa0d17584ca78cbba5e80ddf75f129d2", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18edcf86d2870de7975f1142f272b9a1236cdef4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18edcf86d2870de7975f1142f272b9a1236cdef4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=18edcf86d2870de7975f1142f272b9a1236cdef4", "patch": "@@ -124,7 +124,6 @@ crate struct SharedContext<'tcx> {\n     crate span_correspondance_map: FxHashMap<rustc_span::Span, LinkFromSrc>,\n     /// The [`Cache`] used during rendering.\n     crate cache: Cache,\n-    pub(super) repository_url: Option<String>,\n }\n \n impl SharedContext<'_> {\n@@ -141,11 +140,7 @@ impl SharedContext<'_> {\n     /// Returns the `collapsed_doc_value` of the given item if this is the main crate, otherwise\n     /// returns the `doc_value`.\n     crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n-        if self.collapsed {\n-            item.collapsed_doc_value()\n-        } else {\n-            item.doc_value()\n-        }\n+        if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n     }\n \n     crate fn edition(&self) -> Edition {\n@@ -351,7 +346,6 @@ impl<'tcx> Context<'tcx> {\n         let hiline = span.hi(self.sess()).line;\n         let lines =\n             if loline == hiline { loline.to_string() } else { format!(\"{}-{}\", loline, hiline) };\n-\n         Some(format!(\n             \"{root}src/{krate}/{path}#{lines}\",\n             root = Escape(&root),\n@@ -395,7 +389,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             generate_redirect_map,\n             show_type_layout,\n             generate_link_to_definition,\n-            repository_url,\n             ..\n         } = options;\n \n@@ -487,7 +480,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             templates,\n             span_correspondance_map: matches,\n             cache,\n-            repository_url,\n         };\n \n         // Add the default themes to the `Vec` of stylepaths"}, {"sha": "24eb4e88c3bde81e6cd7679843138b04ad00d5b8", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/18edcf86d2870de7975f1142f272b9a1236cdef4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18edcf86d2870de7975f1142f272b9a1236cdef4/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=18edcf86d2870de7975f1142f272b9a1236cdef4", "patch": "@@ -40,6 +40,7 @@ use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt;\n use std::fs;\n+use std::iter::Peekable;\n use std::path::PathBuf;\n use std::str;\n use std::string::ToString;\n@@ -53,7 +54,10 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::symbol::{kw, sym, Symbol};\n+use rustc_span::{\n+    symbol::{kw, sym, Symbol},\n+    BytePos, FileName, RealFileName,\n+};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n@@ -590,7 +594,7 @@ fn document_full_inner(\n \n     match &*item.kind {\n         clean::ItemKind::FunctionItem(f) | clean::ItemKind::MethodItem(f, _) => {\n-            render_call_locations(w, cx, &f.call_locations);\n+            render_call_locations(w, cx, &f.call_locations, item);\n         }\n         _ => {}\n     }\n@@ -2458,6 +2462,7 @@ fn render_call_locations(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     call_locations: &Option<FnCallLocations>,\n+    item: &clean::Item,\n ) {\n     let call_locations = match call_locations.as_ref() {\n         Some(call_locations) if call_locations.len() > 0 => call_locations,\n@@ -2488,11 +2493,17 @@ fn render_call_locations(\n     };\n \n     // Generate the HTML for a single example, being the title and code block\n-    let write_example = |w: &mut Buffer, (path, call_data): (&PathBuf, &CallData)| {\n-        // FIXME(wcrichto): is there a better way to handle an I/O error than a panic?\n-        //  When would such an error arise?\n-        let contents =\n-            fs::read_to_string(&path).expect(&format!(\"Failed to read file: {}\", path.display()));\n+    let tcx = cx.tcx();\n+    let write_example = |w: &mut Buffer, (path, call_data): (&PathBuf, &CallData)| -> bool {\n+        let contents = match fs::read_to_string(&path) {\n+            Ok(contents) => contents,\n+            Err(err) => {\n+                let span = item.span(tcx).inner();\n+                tcx.sess\n+                    .span_err(span, &format!(\"failed to read file {}: {}\", path.display(), err));\n+                return false;\n+            }\n+        };\n \n         // To reduce file sizes, we only want to embed the source code needed to understand the example, not\n         // the entire file. So we find the smallest byte range that covers all items enclosing examples.\n@@ -2522,23 +2533,42 @@ fn render_call_locations(\n         let edition = cx.shared.edition();\n         write!(\n             w,\n-            r#\"<div class=\"scraped-example\" data-code=\"{code}\" data-locs=\"{locations}\">\n+            r#\"<div class=\"scraped-example\" data-locs=\"{locations}\">\n                 <div class=\"scraped-example-title\">{title}</div>\n                  <div class=\"code-wrapper\">\"#,\n             title = example_url(call_data),\n-            // The code and locations are encoded as data attributes, so they can be read\n+            // The locations are encoded as a data attribute, so they can be read\n             // later by the JS for interactions.\n-            code = contents_subset.replace(\"\\\"\", \"&quot;\"),\n             locations = serde_json::to_string(&line_ranges).unwrap(),\n         );\n         write!(w, r#\"<span class=\"prev\">&pr;</span> <span class=\"next\">&sc;</span>\"#);\n         write!(w, r#\"<span class=\"expand\">&varr;</span>\"#);\n \n-        // FIXME(wcrichto): where should file_span and root_path come from?\n-        let file_span = rustc_span::DUMMY_SP;\n-        let root_path = \"\".to_string();\n+        // Look for the example file in the source map if it exists, otherwise return a dummy span\n+        let file_span = (|| {\n+            let source_map = tcx.sess.source_map();\n+            let crate_src = tcx.sess.local_crate_source_file.as_ref()?;\n+            let abs_crate_src = crate_src.canonicalize().ok()?;\n+            let crate_root = abs_crate_src.parent()?.parent()?;\n+            let rel_path = path.strip_prefix(crate_root).ok()?;\n+            let files = source_map.files();\n+            let file = files.iter().find(|file| match &file.name {\n+                FileName::Real(RealFileName::LocalPath(other_path)) => rel_path == other_path,\n+                _ => false,\n+            })?;\n+            Some(rustc_span::Span::with_root_ctxt(\n+                file.start_pos + BytePos(min_byte),\n+                file.start_pos + BytePos(max_byte),\n+            ))\n+        })()\n+        .unwrap_or(rustc_span::DUMMY_SP);\n+\n+        // The root path is the inverse of Context::current\n+        let root_path = vec![\"../\"; cx.current.len() - 1].join(\"\");\n+\n         let mut decoration_info = FxHashMap::default();\n         decoration_info.insert(\"highlight\", byte_ranges);\n+\n         sources::print_src(\n             w,\n             contents_subset,\n@@ -2550,6 +2580,8 @@ fn render_call_locations(\n             Some(decoration_info),\n         );\n         write!(w, \"</div></div>\");\n+\n+        true\n     };\n \n     // The call locations are output in sequence, so that sequence needs to be determined.\n@@ -2570,7 +2602,15 @@ fn render_call_locations(\n \n     // Write just one example that's visible by default in the method's description.\n     let mut it = ordered_locations.into_iter().peekable();\n-    write_example(w, it.next().unwrap());\n+    let write_and_skip_failure = |w: &mut Buffer, it: &mut Peekable<_>| {\n+        while let Some(example) = it.next() {\n+            if write_example(&mut *w, example) {\n+                break;\n+            }\n+        }\n+    };\n+\n+    write_and_skip_failure(w, &mut it);\n \n     // Then add the remaining examples in a hidden section.\n     if it.peek().is_some() {\n@@ -2582,13 +2622,15 @@ fn render_call_locations(\n                   </summary>\n                   <div class=\"more-scraped-examples\">\n                     <div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div>\n-                    <div>\n+                    <div class=\"more-scraped-examples-inner\">\n \"#\n         );\n \n         // Only generate inline code for MAX_FULL_EXAMPLES number of examples. Otherwise we could\n         // make the page arbitrarily huge!\n-        (&mut it).take(MAX_FULL_EXAMPLES).for_each(|ex| write_example(w, ex));\n+        for _ in 0..MAX_FULL_EXAMPLES {\n+            write_and_skip_failure(w, &mut it);\n+        }\n \n         // For the remaining examples, generate a <ul /> containing links to the source files.\n         if it.peek().is_some() {"}, {"sha": "a9f7113c8816622ba7a4c6814be1bc801602254b", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18edcf86d2870de7975f1142f272b9a1236cdef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/18edcf86d2870de7975f1142f272b9a1236cdef4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=18edcf86d2870de7975f1142f272b9a1236cdef4", "patch": "@@ -2020,7 +2020,7 @@ details.undocumented[open] > summary::before {\n .scraped-example:not(.expanded) .code-wrapper:before {\n \tcontent: \" \";\n \twidth: 100%;\n-\theight: 20px;\n+\theight: 10px;\n \tposition: absolute;\n \tz-index: 100;\n \ttop: 0;\n@@ -2030,7 +2030,7 @@ details.undocumented[open] > summary::before {\n .scraped-example:not(.expanded) .code-wrapper:after {\n \tcontent: \" \";\n \twidth: 100%;\n-\theight: 20px;\n+\theight: 10px;\n \tposition: absolute;\n \tz-index: 100;\n \tbottom: 0;\n@@ -2078,10 +2078,15 @@ details.undocumented[open] > summary::before {\n }\n \n .more-scraped-examples {\n-\tpadding-left: 10px;\n-\tmargin-left: 15px;\n+\tmargin-left: 25px;\n \tdisplay: flex;\n \tflex-direction: row;\n+\twidth: calc(100% - 25px);\n+}\n+\n+.more-scraped-examples-inner {\n+\t/* 20px is width of toggle-line + toggle-line-inner */\n+\twidth: calc(100% - 20px);\n }\n \n .toggle-line {"}]}