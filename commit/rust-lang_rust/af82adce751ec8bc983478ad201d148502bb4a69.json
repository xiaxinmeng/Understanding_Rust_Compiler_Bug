{"sha": "af82adce751ec8bc983478ad201d148502bb4a69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmODJhZGNlNzUxZWM4YmM5ODM0NzhhZDIwMWQxNDg1MDJiYjRhNjk=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-08-17T15:15:07Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-08-17T16:26:33Z"}, "message": "Make BigUint and BigInt Hash, fixes #16551", "tree": {"sha": "b6d8e14b477958f5488ff0cf6860d12dfdd55229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d8e14b477958f5488ff0cf6860d12dfdd55229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af82adce751ec8bc983478ad201d148502bb4a69", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af82adce751ec8bc983478ad201d148502bb4a69", "html_url": "https://github.com/rust-lang/rust/commit/af82adce751ec8bc983478ad201d148502bb4a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af82adce751ec8bc983478ad201d148502bb4a69/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f9fd87ec56b1e84d45c96abe388f555e28faed", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f9fd87ec56b1e84d45c96abe388f555e28faed", "html_url": "https://github.com/rust-lang/rust/commit/02f9fd87ec56b1e84d45c96abe388f555e28faed"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "48fc9fb4a38c6d0e4387f03e7c5bc3a00ac57985", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/af82adce751ec8bc983478ad201d148502bb4a69/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af82adce751ec8bc983478ad201d148502bb4a69/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=af82adce751ec8bc983478ad201d148502bb4a69", "patch": "@@ -59,7 +59,7 @@\n use Integer;\n use rand::Rng;\n \n-use std::{cmp, fmt};\n+use std::{cmp, fmt, hash};\n use std::default::Default;\n use std::from_str::FromStr;\n use std::num::CheckedDiv;\n@@ -150,6 +150,22 @@ impl Default for BigUint {\n     fn default() -> BigUint { Zero::zero() }\n }\n \n+impl<S: hash::Writer> hash::Hash<S> for BigUint {\n+    fn hash(&self, state: &mut S) {\n+        // hash 0 in case it's all 0's\n+        0u32.hash(state);\n+\n+        let mut found_first_value = false;\n+        for elem in self.data.iter().rev() {\n+            // don't hash any leading 0's, they shouldn't affect the hash\n+            if found_first_value || *elem != 0 {\n+                found_first_value = true;\n+                elem.hash(state);\n+            }\n+        }\n+    }\n+}\n+\n impl fmt::Show for BigUint {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", self.to_str_radix(10))\n@@ -881,6 +897,13 @@ impl fmt::Show for BigInt {\n     }\n }\n \n+impl<S: hash::Writer> hash::Hash<S> for BigInt {\n+    fn hash(&self, state: &mut S) {\n+        (self.sign == Plus).hash(state);\n+        self.data.hash(state);\n+    }\n+}\n+\n impl FromStr for BigInt {\n     #[inline]\n     fn from_str(s: &str) -> Option<BigInt> {\n@@ -1409,6 +1432,7 @@ mod biguint_tests {\n     use std::num::CheckedDiv;\n     use std::rand::task_rng;\n     use std::u64;\n+    use std::hash::hash;\n \n     #[test]\n     fn test_from_slice() {\n@@ -1460,6 +1484,19 @@ mod biguint_tests {\n         }\n     }\n \n+    #[test]\n+    fn test_hash() {\n+        let a = BigUint::new(vec!());\n+        let b = BigUint::new(vec!(0));\n+        let c = BigUint::new(vec!(1));\n+        let d = BigUint::new(vec!(1,0,0,0,0,0));\n+        let e = BigUint::new(vec!(0,0,0,0,0,1));\n+        assert!(hash(&a) == hash(&b));\n+        assert!(hash(&b) != hash(&c));\n+        assert!(hash(&c) == hash(&d));\n+        assert!(hash(&d) != hash(&e));\n+    }\n+\n     #[test]\n     fn test_bitand() {\n         fn check(left: &[BigDigit],\n@@ -2257,6 +2294,7 @@ mod bigint_tests {\n     use std::num::{ToPrimitive, FromPrimitive};\n     use std::rand::task_rng;\n     use std::u64;\n+    use std::hash::hash;\n \n     #[test]\n     fn test_from_biguint() {\n@@ -2314,6 +2352,21 @@ mod bigint_tests {\n         }\n     }\n \n+    #[test]\n+    fn test_hash() {\n+        let a = BigInt::new(Zero, vec!());\n+        let b = BigInt::new(Zero, vec!(0));\n+        let c = BigInt::new(Plus, vec!(1));\n+        let d = BigInt::new(Plus, vec!(1,0,0,0,0,0));\n+        let e = BigInt::new(Plus, vec!(0,0,0,0,0,1));\n+        let f = BigInt::new(Minus, vec!(1));\n+        assert!(hash(&a) == hash(&b));\n+        assert!(hash(&b) != hash(&c));\n+        assert!(hash(&c) == hash(&d));\n+        assert!(hash(&d) != hash(&e));\n+        assert!(hash(&c) != hash(&f));\n+    }\n+\n     #[test]\n     fn test_convert_i64() {\n         fn check(b1: BigInt, i: i64) {"}, {"sha": "f12279b20e8ef5eae82e46f5c4686ae24020cecb", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af82adce751ec8bc983478ad201d148502bb4a69/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af82adce751ec8bc983478ad201d148502bb4a69/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=af82adce751ec8bc983478ad201d148502bb4a69", "patch": "@@ -43,6 +43,7 @@\n //! [newt]: https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n \n #![feature(macro_rules)]\n+#![feature(default_type_params)]\n \n #![crate_name = \"num\"]\n #![experimental]"}]}