{"sha": "19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDMwZmNkYjI4YzJhNGY1Nzc3NGI4MjdiMWExN2VlMTU2YjVjNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T12:53:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-11T12:53:21Z"}, "message": "Auto merge of #44440 - cuviper:min_global_align, r=japaric\n\nAdd `TargetOptions::min_global_align`, with s390x at 16-bit\n\nThe SystemZ `LALR` instruction provides PC-relative addressing for globals,\nbut only to *even* addresses, so other compilers make sure that such\nglobals are always 2-byte aligned.  In Clang, this is modeled with\n`TargetInfo::MinGlobalAlign`, and `TargetOptions::min_global_align` now\nserves the same purpose for rustc.\n\nIn Clang, the only targets that set this are SystemZ, Lanai, and NVPTX, and\nthe latter two don't have targets in rust master.\n\nFixes #44411.\nr? @eddyb", "tree": {"sha": "dc0a72f9dbfd1cc8b305d32e200604fda9523f7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc0a72f9dbfd1cc8b305d32e200604fda9523f7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "html_url": "https://github.com/rust-lang/rust/commit/19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d744e94c2d79573c40de0bfa23345a3a136efb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d744e94c2d79573c40de0bfa23345a3a136efb6", "html_url": "https://github.com/rust-lang/rust/commit/5d744e94c2d79573c40de0bfa23345a3a136efb6"}, {"sha": "c606e97cc6fb06130b1c8e79292fc1f3c8965a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c606e97cc6fb06130b1c8e79292fc1f3c8965a0c", "html_url": "https://github.com/rust-lang/rust/commit/c606e97cc6fb06130b1c8e79292fc1f3c8965a0c"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "301cf3f8c8208d0019ba55fbd43477ad9f9e1c36", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "patch": "@@ -425,6 +425,9 @@ pub struct TargetOptions {\n \n     /// Whether or not stack probes (__rust_probestack) are enabled\n     pub stack_probes: bool,\n+\n+    /// The minimum alignment for global symbols.\n+    pub min_global_align: Option<u64>,\n }\n \n impl Default for TargetOptions {\n@@ -486,6 +489,7 @@ impl Default for TargetOptions {\n             crt_static_default: false,\n             crt_static_respected: false,\n             stack_probes: false,\n+            min_global_align: None,\n         }\n     }\n }\n@@ -724,6 +728,7 @@ impl Target {\n         key!(crt_static_default, bool);\n         key!(crt_static_respected, bool);\n         key!(stack_probes, bool);\n+        key!(min_global_align, Option<u64>);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -914,6 +919,7 @@ impl ToJson for Target {\n         target_option_val!(crt_static_default);\n         target_option_val!(crt_static_respected);\n         target_option_val!(stack_probes);\n+        target_option_val!(min_global_align);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "aad9effacd440460898b21f105a3818b2b314ef9", "filename": "src/librustc_back/target/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fs390x_unknown_linux_gnu.rs?ref=19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "patch": "@@ -22,6 +22,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     // see #36994\n     base.exe_allocation_crate = None;\n+    base.min_global_align = Some(16);\n \n     Ok(Target {\n         llvm_target: \"s390x-unknown-linux-gnu\".to_string(),"}, {"sha": "bad8a8655d0938cc5625bc9e0dfed2c1de2a362d", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "patch": "@@ -26,6 +26,7 @@ use rustc::ty;\n \n use rustc::hir;\n \n+use std::cmp;\n use std::ffi::{CStr, CString};\n use syntax::ast;\n use syntax::attr;\n@@ -42,6 +43,25 @@ pub fn bitcast(val: ValueRef, ty: Type) -> ValueRef {\n     }\n }\n \n+fn set_global_alignment(ccx: &CrateContext,\n+                        gv: ValueRef,\n+                        mut align: machine::llalign) {\n+    // The target may require greater alignment for globals than the type does.\n+    // Note: GCC and Clang also allow `__attribute__((aligned))` on variables,\n+    // which can force it to be smaller.  Rust doesn't support this yet.\n+    if let Some(min) = ccx.sess().target.target.options.min_global_align {\n+        match ty::layout::Align::from_bits(min, min) {\n+            Ok(min) => align = cmp::max(align, min.abi() as machine::llalign),\n+            Err(err) => {\n+                ccx.sess().err(&format!(\"invalid minimum global alignment: {}\", err));\n+            }\n+        }\n+    }\n+    unsafe {\n+        llvm::LLVMSetAlignment(gv, align);\n+    }\n+}\n+\n pub fn addr_of_mut(ccx: &CrateContext,\n                    cv: ValueRef,\n                    align: machine::llalign,\n@@ -53,7 +73,7 @@ pub fn addr_of_mut(ccx: &CrateContext,\n             bug!(\"symbol `{}` is already defined\", name);\n         });\n         llvm::LLVMSetInitializer(gv, cv);\n-        llvm::LLVMSetAlignment(gv, align);\n+        set_global_alignment(ccx, gv, align);\n         llvm::LLVMRustSetLinkage(gv, llvm::Linkage::InternalLinkage);\n         SetUnnamedAddr(gv, true);\n         gv\n@@ -276,7 +296,7 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             ccx.statics_to_rauw().borrow_mut().push((g, new_g));\n             new_g\n         };\n-        llvm::LLVMSetAlignment(g, ccx.align_of(ty));\n+        set_global_alignment(ccx, g, ccx.align_of(ty));\n         llvm::LLVMSetInitializer(g, v);\n \n         // As an optimization, all shared statics which do not have interior"}, {"sha": "2eacc36f380d118dde1da95f10b21e7cfd120a15", "filename": "src/test/run-make/min-global-align/Makefile", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Ftest%2Frun-make%2Fmin-global-align%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Ftest%2Frun-make%2Fmin-global-align%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmin-global-align%2FMakefile?ref=19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "patch": "@@ -0,0 +1,22 @@\n+-include ../tools.mk\n+\n+# This tests ensure that global variables respect the target minimum alignment.\n+# The three bools `STATIC_BOOL`, `STATIC_MUT_BOOL`, and `CONST_BOOL` all have\n+# type-alignment of 1, but some targets require greater global alignment.\n+\n+SRC = min_global_align.rs\n+LL = $(TMPDIR)/min_global_align.ll\n+\n+all:\n+ifeq ($(UNAME),Linux)\n+# Most targets are happy with default alignment -- take i686 for example.\n+ifeq ($(filter x86,$(LLVM_COMPONENTS)),x86)\n+\t$(RUSTC) --target=i686-unknown-linux-gnu --emit=llvm-ir $(SRC)\n+\t[ \"$$(grep -c 'align 1' \"$(LL)\")\" -eq \"3\" ]\n+endif\n+# SystemZ requires even alignment for PC-relative addressing.\n+ifeq ($(filter systemz,$(LLVM_COMPONENTS)),systemz)\n+\t$(RUSTC) --target=s390x-unknown-linux-gnu --emit=llvm-ir $(SRC)\n+\t[ \"$$(grep -c 'align 2' \"$(LL)\")\" -eq \"3\" ]\n+endif\n+endif"}, {"sha": "3d4f9001a747455bdc77384538c7a26bc228ee2a", "filename": "src/test/run-make/min-global-align/min_global_align.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Ftest%2Frun-make%2Fmin-global-align%2Fmin_global_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d30fcdb28c2a4f57774b827b1a17ee156b5c56/src%2Ftest%2Frun-make%2Fmin-global-align%2Fmin_global_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmin-global-align%2Fmin_global_align.rs?ref=19d30fcdb28c2a4f57774b827b1a17ee156b5c56", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_core, lang_items)]\n+#![crate_type=\"rlib\"]\n+#![no_core]\n+\n+pub static STATIC_BOOL: bool = true;\n+\n+pub static mut STATIC_MUT_BOOL: bool = true;\n+\n+const CONST_BOOL: bool = true;\n+pub static CONST_BOOL_REF: &'static bool = &CONST_BOOL;\n+\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+#[lang = \"freeze\"]\n+trait Freeze {}\n+\n+#[lang = \"sync\"]\n+trait Sync {}\n+impl Sync for bool {}\n+impl Sync for &'static bool {}\n+\n+#[lang=\"drop_in_place\"]\n+pub unsafe fn drop_in_place<T: ?Sized>(_: *mut T) { }"}]}