{"sha": "2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjhiYWNkNjJjYTg5NzBhN2E1OTQwMWU3OGQwYzVhMzRmYzBmODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-20T05:09:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-20T05:09:24Z"}, "message": "Auto merge of #29943 - brson:inline-threshold, r=nrc\n\nCorresponds directly to llvm's inline-threshold.\n\nI want this so I can experiment out-of-tree with tweaking optimization settings, and this is the most important value that isn't exposed. I can't get it to work either via `-C llvm-args`.\n\ncc @rust-lang/compiler", "tree": {"sha": "b67451c50d22fc666391f9dce7286e55bca0f0e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67451c50d22fc666391f9dce7286e55bca0f0e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "html_url": "https://github.com/rust-lang/rust/commit/2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2228bacd62ca8970a7a59401e78d0c5a34fc0f87/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c69b10c33990c14a239cf53d25763013dc84a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c69b10c33990c14a239cf53d25763013dc84a4", "html_url": "https://github.com/rust-lang/rust/commit/e5c69b10c33990c14a239cf53d25763013dc84a4"}, {"sha": "5c88a1cd54f709823431cd5eac67fc24d3d59b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c88a1cd54f709823431cd5eac67fc24d3d59b30", "html_url": "https://github.com/rust-lang/rust/commit/5c88a1cd54f709823431cd5eac67fc24d3d59b30"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "4781992b9875d76a215ad67b5af1636ceb9da87f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2228bacd62ca8970a7a59401e78d0c5a34fc0f87/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2228bacd62ca8970a7a59401e78d0c5a34fc0f87/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "patch": "@@ -513,6 +513,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"optimize with possible levels 0-3\"),\n     debug_assertions: Option<bool> = (None, parse_opt_bool,\n         \"explicitly enable the cfg(debug_assertions) directive\"),\n+    inline_threshold: Option<usize> = (None, parse_opt_uint,\n+        \"set the inlining threshold for\"),\n }\n \n "}, {"sha": "5ac27d612279b7af835bcde5a484fbfeb7da301e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2228bacd62ca8970a7a59401e78d0c5a34fc0f87/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2228bacd62ca8970a7a59401e78d0c5a34fc0f87/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=2228bacd62ca8970a7a59401e78d0c5a34fc0f87", "patch": "@@ -263,6 +263,7 @@ pub struct ModuleConfig {\n     vectorize_loop: bool,\n     vectorize_slp: bool,\n     merge_functions: bool,\n+    inline_threshold: Option<usize>\n }\n \n unsafe impl Send for ModuleConfig { }\n@@ -288,6 +289,7 @@ impl ModuleConfig {\n             vectorize_loop: false,\n             vectorize_slp: false,\n             merge_functions: false,\n+            inline_threshold: None\n         }\n     }\n \n@@ -296,6 +298,7 @@ impl ModuleConfig {\n         self.no_prepopulate_passes = sess.opts.cg.no_prepopulate_passes;\n         self.no_builtins = trans.no_builtins;\n         self.time_passes = sess.time_passes();\n+        self.inline_threshold = sess.opts.cg.inline_threshold;\n \n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n@@ -1004,6 +1007,7 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n     let opt = config.opt_level.unwrap_or(llvm::CodeGenLevelNone);\n+    let inline_threshold = config.inline_threshold;\n \n     llvm::LLVMRustConfigurePassManagerBuilder(builder, opt,\n                                               config.merge_functions,\n@@ -1016,17 +1020,20 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n     // always-inline functions (but don't add lifetime intrinsics), at O1 we\n     // inline with lifetime intrinsics, and O2+ we add an inliner with a\n     // thresholds copied from clang.\n-    match opt {\n-        llvm::CodeGenLevelNone => {\n+    match (opt, inline_threshold) {\n+        (_, Some(t)) => {\n+            llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t as u32);\n+        }\n+        (llvm::CodeGenLevelNone, _) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n         }\n-        llvm::CodeGenLevelLess => {\n+        (llvm::CodeGenLevelLess, _) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n         }\n-        llvm::CodeGenLevelDefault => {\n+        (llvm::CodeGenLevelDefault, _) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n         }\n-        llvm::CodeGenLevelAggressive => {\n+        (llvm::CodeGenLevelAggressive, _) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n         }\n     }"}]}