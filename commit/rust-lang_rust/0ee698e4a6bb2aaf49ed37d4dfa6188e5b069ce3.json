{"sha": "0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZTY5OGU0YTZiYjJhYWY0OWVkMzdkNGRmYTYxODhlNWIwNjljZTM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T18:48:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T21:49:49Z"}, "message": "Rollup merge of #47668 - nikomatsakis:issue-47511, r=eddyb\n\ndo not ICE when return type includes unconstrained anon region\n\nIt turns out that this *can* happen after all, if the region is only\nused in projections from the input types.\n\nFixes https://github.com/rust-lang/rust/issues/47511\n\nr? @eddyb", "tree": {"sha": "4eea31fae149f4440d937586bf032f62f5b0cd3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eea31fae149f4440d937586bf032f62f5b0cd3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3", "html_url": "https://github.com/rust-lang/rust/commit/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "014931be8ef8cc6940e69dc3e9dc56febb6cd784", "url": "https://api.github.com/repos/rust-lang/rust/commits/014931be8ef8cc6940e69dc3e9dc56febb6cd784", "html_url": "https://github.com/rust-lang/rust/commit/014931be8ef8cc6940e69dc3e9dc56febb6cd784"}, {"sha": "215d66b998aaa844e2d43ce7cd459c7fa69e0d9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/215d66b998aaa844e2d43ce7cd459c7fa69e0d9f", "html_url": "https://github.com/rust-lang/rust/commit/215d66b998aaa844e2d43ce7cd459c7fa69e0d9f"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "86deed864057a0ca4a6a356678766b3df9e694a7", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3", "patch": "@@ -1206,22 +1206,27 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let output = bare_fn_ty.output();\n         let late_bound_in_ret = tcx.collect_referenced_late_bound_regions(&output);\n         for br in late_bound_in_ret.difference(&late_bound_in_args) {\n-            let br_name = match *br {\n-                ty::BrNamed(_, name) => name,\n-                _ => {\n-                    span_bug!(\n-                        decl.output.span(),\n-                        \"anonymous bound region {:?} in return but not args\",\n-                        br);\n-                }\n+            let lifetime_name = match *br {\n+                ty::BrNamed(_, name) => format!(\"lifetime `{}`,\", name),\n+                ty::BrAnon(_) | ty::BrFresh(_) | ty::BrEnv => format!(\"an anonymous lifetime\"),\n             };\n-            struct_span_err!(tcx.sess,\n-                             decl.output.span(),\n-                             E0581,\n-                             \"return type references lifetime `{}`, \\\n-                             which does not appear in the fn input types\",\n-                             br_name)\n-                .emit();\n+            let mut err = struct_span_err!(tcx.sess,\n+                                           decl.output.span(),\n+                                           E0581,\n+                                           \"return type references {} \\\n+                                            which is not constrained by the fn input types\",\n+                                           lifetime_name);\n+            if let ty::BrAnon(_) = *br {\n+                // The only way for an anonymous lifetime to wind up\n+                // in the return type but **also** be unconstrained is\n+                // if it only appears in \"associated types\" in the\n+                // input. See #47511 for an example. In this case,\n+                // though we can easily give a hint that ought to be\n+                // relevant.\n+                err.note(\"lifetimes appearing in an associated type \\\n+                          are not considered constrained\");\n+            }\n+            err.emit();\n         }\n \n         bare_fn_ty"}, {"sha": "df4ff301bc9ce1995027a646e8730738eeb4b031", "filename": "src/test/ui/issue-47511.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3/src%2Ftest%2Fui%2Fissue-47511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3/src%2Ftest%2Fui%2Fissue-47511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47511.rs?ref=0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #47511: anonymous lifetimes can appear\n+// unconstrained in a return type, but only if they appear just once\n+// in the input, as the input to a projection.\n+\n+fn f(_: X) -> X {\n+    //~^ ERROR return type references an anonymous lifetime\n+    unimplemented!()\n+}\n+\n+fn g<'a>(_: X<'a>) -> X<'a> {\n+    //~^ ERROR return type references lifetime `'a`, which is not constrained\n+    unimplemented!()\n+}\n+\n+type X<'a> = <&'a () as Trait>::Value;\n+\n+trait Trait {\n+    type Value;\n+}\n+\n+impl<'a> Trait for &'a () {\n+    type Value = ();\n+}\n+\n+fn main() {}"}, {"sha": "fabd6b6c25396d26aae3ecb3ed8a2be267570b02", "filename": "src/test/ui/issue-47511.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3/src%2Ftest%2Fui%2Fissue-47511.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3/src%2Ftest%2Fui%2Fissue-47511.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47511.stderr?ref=0ee698e4a6bb2aaf49ed37d4dfa6188e5b069ce3", "patch": "@@ -0,0 +1,16 @@\n+error[E0581]: return type references an anonymous lifetime which is not constrained by the fn input types\n+  --> $DIR/issue-47511.rs:15:15\n+   |\n+15 | fn f(_: X) -> X {\n+   |               ^\n+   |\n+   = note: lifetimes appearing in an associated type are not considered constrained\n+\n+error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n+  --> $DIR/issue-47511.rs:20:23\n+   |\n+20 | fn g<'a>(_: X<'a>) -> X<'a> {\n+   |                       ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}