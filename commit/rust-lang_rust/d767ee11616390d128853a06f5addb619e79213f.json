{"sha": "d767ee11616390d128853a06f5addb619e79213f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NjdlZTExNjE2MzkwZDEyODg1M2EwNmY1YWRkYjYxOWU3OTIxM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T19:39:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-15T19:39:54Z"}, "message": "Auto merge of #53400 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #52453 (improve diagnostics for tests with custom return values)\n - #53271 (use ? to simplify `TransitiveRelation.maybe_map`)\n - #53279 (Extend documentation of `rustc_on_unimplemented`)\n - #53342 (fix error for unsized packed struct field)\n - #53344 (Add doc examples for std::alloc::{alloc,alloc_zeroed}.)\n - #53368 (Ignore test that fails on stage1)\n - #53388 (Fix links' color)\n - #53396 (Fix since of Iterator::flatten to be a proper semver)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c1176878b7142f1f3987fe3906b3e4b08f8b8cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1176878b7142f1f3987fe3906b3e4b08f8b8cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d767ee11616390d128853a06f5addb619e79213f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d767ee11616390d128853a06f5addb619e79213f", "html_url": "https://github.com/rust-lang/rust/commit/d767ee11616390d128853a06f5addb619e79213f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d767ee11616390d128853a06f5addb619e79213f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d679b57a3a234a75926f1ffc5fe088c7ad97daf0", "html_url": "https://github.com/rust-lang/rust/commit/d679b57a3a234a75926f1ffc5fe088c7ad97daf0"}, {"sha": "b9a51ce2f6200ffe690ab80bca817f11f3eda5e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a51ce2f6200ffe690ab80bca817f11f3eda5e7", "html_url": "https://github.com/rust-lang/rust/commit/b9a51ce2f6200ffe690ab80bca817f11f3eda5e7"}], "stats": {"total": 262, "additions": 205, "deletions": 57}, "files": [{"sha": "a8308eb403896a277e766c80bef7545d9ea54521", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -1226,6 +1226,11 @@ name = \"mac\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"macro-utils\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"maplit\"\n version = \"1.0.1\"\n@@ -1303,10 +1308,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"minifier\"\n-version = \"0.0.14\"\n+version = \"0.0.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"regex 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"macro-utils 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2451,7 +2456,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"minifier 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"minifier 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -3218,14 +3223,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum log_settings 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"19af41f0565d7c19b2058153ad0b42d4d5ce89ec4dbf06ed6741114a8b63e7cd\"\n \"checksum lzma-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d1eaa027402541975218bb0eec67d6b0412f6233af96e0d096d31dbdfd22e614\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n+\"checksum macro-utils 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2c4deaccc2ead6a28c16c0ba82f07d52b6475397415ce40876e559b0b0ea510\"\n \"checksum maplit 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08cbb6b4fef96b6d77bfc40ec491b1690c779e77b05cd9f07f787ed376fd4c43\"\n \"checksum markup5ever 0.7.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfedc97d5a503e96816d10fedcd5b42f760b2e525ce2f7ec71f6a41780548475\"\n \"checksum matches 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"835511bab37c34c47da5cb44844bea2cfde0236db0b506f90ea4224482c9774a\"\n \"checksum mdbook 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b5a8d7e341ceee5db3882a06078d42661ddcfa2b3687319cc5da76ec4e782f\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n-\"checksum minifier 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78cb57f9a385530d60f2d67f6e108050b478b7a0ffd0bb9c350803e1356535dd\"\n+\"checksum minifier 0.0.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9908ed7c62f990c21ab41fdca53a864a3ada0da69d8729c4de727b397e27bc11\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n \"checksum miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9224c91f82b3c47cf53dcf78dfaa20d6888fbcc5d272d5f2fcdf8a697f3c987d\"\n \"checksum new_debug_unreachable 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0cdc457076c78ab54d5e0d6fa7c47981757f1e34dc39ff92787f217dede586c4\""}, {"sha": "f787f629756f32b38fc41418eed8540fe5ce9a76", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -8,7 +8,9 @@ The tracking issue for this feature is: [#29628]\n \n The `on_unimplemented` feature provides the `#[rustc_on_unimplemented]`\n attribute, which allows trait definitions to add specialized notes to error\n-messages when an implementation was expected but not found.\n+messages when an implementation was expected but not found. You can refer\n+to the trait's generic arguments by name and to the resolved type using\n+`Self`.\n \n For example:\n \n@@ -41,7 +43,98 @@ error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied\n    |\n    = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n    = note: required by `iterate_chars`\n+```\n+\n+`on_unimplemented` also supports advanced filtering for better targeting\n+of messages, as well as modifying specific parts of the error message. You\n+target the text of:\n+\n+ - the main error message (`message`)\n+ - the label (`label`)\n+ - an extra note (`note`)\n+\n+For example, the following attribute\n+\n+```rust,compile_fail\n+#[rustc_on_unimplemented(\n+    message=\"message\",\n+    label=\"label\",\n+    note=\"note\"\n+)]\n+trait MyIterator<A> {\n+    fn next(&mut self) -> A;\n+}\n+```\n+\n+Would generate the following output:\n+\n+```text\n+error[E0277]: message\n+  --> <anon>:14:5\n+   |\n+14 |     iterate_chars(&[1, 2, 3][..]);\n+   |     ^^^^^^^^^^^^^ label\n+   |\n+   = note: note\n+   = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n+   = note: required by `iterate_chars`\n+```\n+\n+To allow more targeted error messages, it is possible to filter the\n+application of these fields based on a variety of attributes when using\n+`on`:\n \n-error: aborting due to previous error\n+ - `crate_local`: whether the code causing the trait bound to not be\n+   fulfilled is part of the user's crate. This is used to avoid suggesting\n+   code changes that would require modifying a dependency.\n+ - Any of the generic arguments that can be substituted in the text can be\n+   referred by name as well for filtering, like `Rhs=\"i32\"`, except for\n+   `Self`.\n+ - `_Self`: to filter only on a particular calculated trait resolution, like\n+   `Self=\"std::iter::Iterator<char>\"`. This is needed because `Self` is a\n+   keyword which cannot appear in attributes.\n+ - `direct`: user-specified rather than derived obligation.\n+ - `from_method`: usable both as boolean (whether the flag is present, like\n+   `crate_local`) or matching against a particular method. Currently used\n+   for `try`.\n+ - `from_desugaring`: usable both as boolean (whether the flag is present)\n+   or matching against a particular desugaring.\n+\n+For example, the `Iterator` trait can be annotated in the following way:\n+\n+```rust,compile_fail\n+#[rustc_on_unimplemented(\n+    on(\n+        _Self=\"&str\",\n+        note=\"call `.chars()` or `.as_bytes()` on `{Self}\"\n+    ),\n+    message=\"`{Self}` is not an iterator\",\n+    label=\"`{Self}` is not an iterator\",\n+    note=\"maybe try calling `.iter()` or a similar method\"\n+)]\n+pub trait Iterator {}\n ```\n \n+Which would produce the following outputs:\n+\n+```text\n+error[E0277]: `Foo` is not an iterator\n+ --> src/main.rs:4:16\n+  |\n+4 |     for foo in Foo {}\n+  |                ^^^ `Foo` is not an iterator\n+  |\n+  = note: maybe try calling `.iter()` or a similar method\n+  = help: the trait `std::iter::Iterator` is not implemented for `Foo`\n+  = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `&str` is not an iterator\n+ --> src/main.rs:5:16\n+  |\n+5 |     for foo in \"\" {}\n+  |                ^^ `&str` is not an iterator\n+  |\n+  = note: call `.chars()` or `.bytes() on `&str`\n+  = help: the trait `std::iter::Iterator` is not implemented for `&str`\n+  = note: required by `std::iter::IntoIterator::into_iter`\n+```"}, {"sha": "c69b2fb5e1c2a3e27619f5994f767d8f49d036db", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -56,6 +56,22 @@ pub struct Global;\n /// # Safety\n ///\n /// See [`GlobalAlloc::alloc`].\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::alloc::{alloc, dealloc, Layout};\n+///\n+/// unsafe {\n+///     let layout = Layout::new::<u16>();\n+///     let ptr = alloc(layout);\n+///\n+///     *(ptr as *mut u16) = 42;\n+///     assert_eq!(*(ptr as *mut u16), 42);\n+///\n+///     dealloc(ptr, layout);\n+/// }\n+/// ```\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[inline]\n pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n@@ -110,6 +126,21 @@ pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8\n /// # Safety\n ///\n /// See [`GlobalAlloc::alloc_zeroed`].\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::alloc::{alloc_zeroed, dealloc, Layout};\n+///\n+/// unsafe {\n+///     let layout = Layout::new::<u16>();\n+///     let ptr = alloc_zeroed(layout);\n+///\n+///     assert_eq!(*(ptr as *mut u16), 0);\n+///\n+///     dealloc(ptr, layout);\n+/// }\n+/// ```\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[inline]\n pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {"}, {"sha": "3918529105334b23ff2aa614beb704f37b2106df", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -1110,7 +1110,7 @@ pub trait Iterator {\n     ///\n     /// [`flat_map()`]: #method.flat_map\n     #[inline]\n-    #[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n+    #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n     fn flatten(self) -> Flatten<Self>\n     where Self: Sized, Self::Item: IntoIterator {\n         Flatten { inner: flatten_compat(self) }"}, {"sha": "ef3f4ced4f9b2306fbaea947ab63acf690a3c584", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -2577,13 +2577,13 @@ impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n /// [`flatten`]: trait.Iterator.html#method.flatten\n /// [`Iterator`]: trait.Iterator.html\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n-#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub struct Flatten<I: Iterator>\n where I::Item: IntoIterator {\n     inner: FlattenCompat<I, <I::Item as IntoIterator>::IntoIter>,\n }\n \n-#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> fmt::Debug for Flatten<I>\n     where I: Iterator + fmt::Debug, U: Iterator + fmt::Debug,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n@@ -2593,15 +2593,15 @@ impl<I, U> fmt::Debug for Flatten<I>\n     }\n }\n \n-#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> Clone for Flatten<I>\n     where I: Iterator + Clone, U: Iterator + Clone,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n {\n     fn clone(&self) -> Self { Flatten { inner: self.inner.clone() } }\n }\n \n-#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> Iterator for Flatten<I>\n     where I: Iterator, U: Iterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n@@ -2629,7 +2629,7 @@ impl<I, U> Iterator for Flatten<I>\n     }\n }\n \n-#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> DoubleEndedIterator for Flatten<I>\n     where I: DoubleEndedIterator, U: DoubleEndedIterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n@@ -2652,7 +2652,7 @@ impl<I, U> DoubleEndedIterator for Flatten<I>\n     }\n }\n \n-#[stable(feature = \"iterator_flatten\", since = \"1.29\")]\n+#[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> FusedIterator for Flatten<I>\n     where I: FusedIterator, U: Iterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}"}, {"sha": "99b2f3e59feb66253d2f4bbffe67a5a6fc2af0bc", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -1472,11 +1472,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::StructInitializerSized => {\n                 err.note(\"structs must have a statically known size to be initialized\");\n             }\n-            ObligationCauseCode::FieldSized(ref item) => {\n+            ObligationCauseCode::FieldSized { adt_kind: ref item, last } => {\n                 match *item {\n                     AdtKind::Struct => {\n-                        err.note(\"only the last field of a struct may have a dynamically \\\n-                                  sized type\");\n+                        if last {\n+                            err.note(\"the last field of a packed struct may only have a \\\n+                                      dynamically sized type if it does not need drop to be run\");\n+                        } else {\n+                            err.note(\"only the last field of a struct may have a dynamically \\\n+                                      sized type\");\n+                        }\n                     }\n                     AdtKind::Union => {\n                         err.note(\"no field of a union may have a dynamically sized type\");"}, {"sha": "08434b5f24ef9d2e19503a06fb4ae76bb5a89f78", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -192,8 +192,8 @@ pub enum ObligationCauseCode<'tcx> {\n     /// [T,..n] --> T must be Copy\n     RepeatVec,\n \n-    /// Types of fields (other than the last) in a struct must be sized.\n-    FieldSized(AdtKind),\n+    /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n+    FieldSized { adt_kind: AdtKind, last: bool },\n \n     /// Constant expressions must be sized.\n     ConstSized,"}, {"sha": "544e3f03c03b1c3d936999c31b0ffc8a4b5d5c39", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -206,7 +206,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::SizedReturnType => Some(super::SizedReturnType),\n             super::SizedYieldType => Some(super::SizedYieldType),\n             super::RepeatVec => Some(super::RepeatVec),\n-            super::FieldSized(item) => Some(super::FieldSized(item)),\n+            super::FieldSized { adt_kind, last } => Some(super::FieldSized { adt_kind, last }),\n             super::ConstSized => Some(super::ConstSized),\n             super::SharedStatic => Some(super::SharedStatic),\n             super::BuiltinDerivedObligation(ref cause) => {"}, {"sha": "2acc29acb0caafd0325520d054fd1c18969d3127", "filename": "src/librustc_data_structures/transitive_relation.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc_data_structures%2Ftransitive_relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ftransitive_relation.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -97,12 +97,7 @@ impl<T: Clone + Debug + Eq + Hash> TransitiveRelation<T> {\n     {\n         let mut result = TransitiveRelation::new();\n         for edge in &self.edges {\n-            f(&self.elements[edge.source.0]).and_then(|source| {\n-                f(&self.elements[edge.target.0]).and_then(|target| {\n-                    result.add(source, target);\n-                    Some(())\n-                })\n-            })?;\n+            result.add(f(&self.elements[edge.source.0])?, f(&self.elements[edge.target.0])?);\n         }\n         Some(result)\n     }"}, {"sha": "4b609779540f02f674e9645dab463195e7e4874e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -258,25 +258,35 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     ty.needs_drop(fcx_tcx, fcx_tcx.param_env(def_id))\n                 }\n             };\n-            let unsized_len = if\n+            let all_sized =\n                 all_sized ||\n                 variant.fields.is_empty() ||\n-                needs_drop_copy()\n-            {\n+                needs_drop_copy();\n+            let unsized_len = if all_sized {\n                 0\n             } else {\n                 1\n             };\n-            for field in &variant.fields[..variant.fields.len() - unsized_len] {\n+            for (idx, field) in variant.fields[..variant.fields.len() - unsized_len]\n+                .iter()\n+                .enumerate()\n+            {\n+                let last = idx == variant.fields.len() - 1;\n                 fcx.register_bound(\n                     field.ty,\n                     fcx.tcx.require_lang_item(lang_items::SizedTraitLangItem),\n-                    traits::ObligationCause::new(field.span,\n-                                                    fcx.body_id,\n-                                                    traits::FieldSized(match item.node.adt_kind() {\n-                                                    Some(i) => i,\n-                                                    None => bug!(),\n-                                                    })));\n+                    traits::ObligationCause::new(\n+                        field.span,\n+                        fcx.body_id,\n+                        traits::FieldSized {\n+                            adt_kind: match item.node.adt_kind() {\n+                                Some(i) => i,\n+                                None => bug!(),\n+                            },\n+                            last\n+                        }\n+                    )\n+                );\n             }\n \n             // All field types must be well-formed."}, {"sha": "e163fc68cbda73b4d20917f0fb9086be1eb4554d", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -9,5 +9,5 @@ path = \"lib.rs\"\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n-minifier = \"0.0.14\"\n+minifier = \"0.0.19\"\n tempfile = \"3\""}, {"sha": "2ed7f7a926a4808a02843d7bbc87d6cff5073f7c", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -165,8 +165,8 @@ a {\n \tcolor: #ddd;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow), .docblock-short\n-a:not(.srclink):not(.test-arrow), .stability a {\n+.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock-short a:not(.srclink):not(.test-arrow), .stability a {\n \tcolor: #D2991D;\n }\n "}, {"sha": "f7cb51163ecfc2153f861b1e61aa3e1ad0ef8369", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -165,8 +165,8 @@ a {\n \tcolor: #000;\n }\n \n-.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow), .docblock-short\n-a:not(.srclink):not(.test-arrow), .stability a {\n+.docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n+.docblock-short a:not(.srclink):not(.test-arrow), .stability a {\n \tcolor: #3873AD;\n }\n "}, {"sha": "060ea1ea9b1329634d2ab6281b467c302563a1d9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -324,7 +324,14 @@ pub fn test_main_static(tests: &[TestDescAndFn]) {\n /// test is considered a failure. By default, invokes `report()`\n /// and checks for a `0` result.\n pub fn assert_test_result<T: Termination>(result: T) {\n-    assert_eq!(result.report(), 0);\n+    let code = result.report();\n+    assert_eq!(\n+        code,\n+        0,\n+        \"the test returned a termination value with a non-zero status code ({}) \\\n+         which indicates a failure\",\n+        code\n+    );\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "c9a29ac2199c0a4ecc773a4b02adca17281d2ba6", "filename": "src/test/ui/issues/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27060-2.stderr?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -7,7 +7,7 @@ LL |     data: T, //~ ERROR the size for values of type\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n-   = note: only the last field of a struct may have a dynamically sized type\n+   = note: the last field of a packed struct may only have a dynamically sized type if it does not need drop to be run\n \n error: aborting due to previous error\n "}, {"sha": "7290d18beb74e9388990b29fe87aaa62a6b25570", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -10,6 +10,7 @@\n \n // normalize-stderr-test: \"The system cannot find the file specified\\.\" -> \"No such file or directory\"\n // ignore-tidy-linelength\n+// ignore-stage1\n \n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time."}, {"sha": "efb2c248813d7bd13237b65eaacb8aa43d8d0bbc", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d767ee11616390d128853a06f5addb619e79213f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d767ee11616390d128853a06f5addb619e79213f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=d767ee11616390d128853a06f5addb619e79213f", "patch": "@@ -1,55 +1,55 @@\n error[E0665]: `Default` cannot be derived for enums, only structs\n-  --> $DIR/macros-nonfatal-errors.rs:20:10\n+  --> $DIR/macros-nonfatal-errors.rs:21:10\n    |\n LL | #[derive(Default)] //~ ERROR\n    |          ^^^^^^^\n \n error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:24:10\n+  --> $DIR/macros-nonfatal-errors.rs:25:10\n    |\n LL |     asm!(invalid); //~ ERROR\n    |          ^^^^^^^\n \n error: concat_idents! requires ident args.\n-  --> $DIR/macros-nonfatal-errors.rs:26:5\n+  --> $DIR/macros-nonfatal-errors.rs:27:5\n    |\n LL |     concat_idents!(\"not\", \"idents\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:28:17\n+  --> $DIR/macros-nonfatal-errors.rs:29:17\n    |\n LL |     option_env!(invalid); //~ ERROR\n    |                 ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:29:10\n+  --> $DIR/macros-nonfatal-errors.rs:30:10\n    |\n LL |     env!(invalid); //~ ERROR\n    |          ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:30:10\n+  --> $DIR/macros-nonfatal-errors.rs:31:10\n    |\n LL |     env!(foo, abr, baz); //~ ERROR\n    |          ^^^\n \n error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n-  --> $DIR/macros-nonfatal-errors.rs:31:5\n+  --> $DIR/macros-nonfatal-errors.rs:32:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0658]: non-ident macro paths are experimental (see issue #35896)\n-  --> $DIR/macros-nonfatal-errors.rs:33:5\n+  --> $DIR/macros-nonfatal-errors.rs:34:5\n    |\n LL |     foo::blah!(); //~ ERROR\n    |     ^^^^^^^^^\n    |\n    = help: add #![feature(use_extern_macros)] to the crate attributes to enable\n \n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:35:13\n+  --> $DIR/macros-nonfatal-errors.rs:36:13\n    |\n LL |     format!(invalid); //~ ERROR\n    |             ^^^^^^^\n@@ -59,37 +59,37 @@ LL |     format!(\"{}\", invalid); //~ ERROR\n    |             ^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:37:14\n+  --> $DIR/macros-nonfatal-errors.rs:38:14\n    |\n LL |     include!(invalid); //~ ERROR\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:39:18\n+  --> $DIR/macros-nonfatal-errors.rs:40:18\n    |\n LL |     include_str!(invalid); //~ ERROR\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: No such file or directory (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:40:5\n+  --> $DIR/macros-nonfatal-errors.rs:41:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:41:20\n+  --> $DIR/macros-nonfatal-errors.rs:42:20\n    |\n LL |     include_bytes!(invalid); //~ ERROR\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: No such file or directory (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:42:5\n+  --> $DIR/macros-nonfatal-errors.rs:43:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:44:5\n+  --> $DIR/macros-nonfatal-errors.rs:45:5\n    |\n LL |     trace_macros!(invalid); //~ ERROR\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}]}