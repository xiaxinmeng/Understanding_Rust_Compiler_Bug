{"sha": "ba6857d801b6217a190e92e43cacd8468ff2d72a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjg1N2Q4MDFiNjIxN2ExOTBlOTJlNDNjYWNkODQ2OGZmMmQ3MmE=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-26T12:28:11Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-26T13:11:51Z"}, "message": "Document the trait keyword", "tree": {"sha": "1ade061a781b0bfa20b73a16aa81353bd9a87b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ade061a781b0bfa20b73a16aa81353bd9a87b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba6857d801b6217a190e92e43cacd8468ff2d72a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6857d801b6217a190e92e43cacd8468ff2d72a", "html_url": "https://github.com/rust-lang/rust/commit/ba6857d801b6217a190e92e43cacd8468ff2d72a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba6857d801b6217a190e92e43cacd8468ff2d72a/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e093b6525079cb71d4158f97480ac6f6ce311eac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e093b6525079cb71d4158f97480ac6f6ce311eac", "html_url": "https://github.com/rust-lang/rust/commit/e093b6525079cb71d4158f97480ac6f6ce311eac"}], "stats": {"total": 175, "additions": 172, "deletions": 3}, "files": [{"sha": "7bedb6fd6238b744801ab4e74d78754b7822f6c4", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 172, "deletions": 3, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/ba6857d801b6217a190e92e43cacd8468ff2d72a/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba6857d801b6217a190e92e43cacd8468ff2d72a/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=ba6857d801b6217a190e92e43cacd8468ff2d72a", "patch": "@@ -1353,11 +1353,180 @@ mod super_keyword {}\n \n #[doc(keyword = \"trait\")]\n //\n-/// A common interface for a class of types.\n+/// A common interface for a group of types.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// A `trait` is an interface that types can implement. It is said they\n+/// \"implement\" the trait or \"conform\" to the trait.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// This interface is made up of three varieties of items:\n+///\n+/// - functions\n+/// - types\n+/// - constants\n+///\n+/// Traits may also contain additional type parameters. Those type parameters\n+/// or the trait itself can be constrained by other traits.\n+///\n+/// See the [Reference][Ref-Traits] for a lot more information on traits.\n+///\n+/// # Examples\n+///\n+/// Traits are declared using the `trait` keyword. Types can implement them\n+/// using [`impl`] `Trait` [`for`] `Type`:\n+///\n+/// ```rust\n+/// trait Zero {\n+///     const ZERO: Self;\n+///     fn is_zero(&self) -> bool;\n+/// }\n+///\n+/// impl Zero for i32 {\n+///     const ZERO: Self = 0;\n+///\n+///     fn is_zero(&self) -> bool {\n+///         *self == Self::ZERO\n+///     }\n+/// }\n+///\n+/// assert_eq!(i32::ZERO, 0);\n+/// assert!(i32::ZERO.is_zero());\n+/// assert!(!4.is_zero());\n+/// ```\n+///\n+/// With an associated type:\n+///\n+/// ```rust\n+/// trait Builder {\n+///     type Built;\n+///\n+///     fn build(&self) -> Self::Built;\n+/// }\n+/// ```\n+///\n+/// Traits can be generic, with constraints or without:\n+///\n+/// ```rust\n+/// trait MaybeFrom<T> {\n+///     fn maybe_from(value: T) -> Option<Self>\n+///     where\n+///         Self: Sized;\n+/// }\n+/// ```\n+///\n+/// Traits can build upon the requirements of other traits. In the example\n+/// below `Iterator` is a **supertrait** and `ThreeIterator` is a **subtrait**:\n+///\n+/// ```rust\n+/// trait ThreeIterator: std::iter::Iterator {\n+///     fn next_three(&mut self) -> Option<[Self::Item; 3]>;\n+/// }\n+/// ```\n+///\n+/// Traits can be used in functions, as parameters:\n+///\n+/// ```rust\n+/// # #![allow(dead_code)]\n+/// fn debug_iter<I: Iterator>(it: I) where I::Item: std::fmt::Debug {\n+///     for elem in it {\n+///         println!(\"{:#?}\", elem);\n+///     }\n+/// }\n+///\n+/// // u8_len_1, u8_len_2 and u8_len_3 are equivalent\n+///\n+/// fn u8_len_1(val: impl Into<Vec<u8>>) -> usize {\n+///     val.into().len()\n+/// }\n+///\n+/// fn u8_len_2<T: Into<Vec<u8>>>(val: T) -> usize {\n+///     val.into().len()\n+/// }\n+///\n+/// fn u8_len_3<T>(val: T) -> usize\n+/// where\n+///     T: Into<Vec<u8>>,\n+/// {\n+///     val.into().len()\n+/// }\n+/// ```\n+///\n+/// Or as return types:\n+///\n+/// ```rust\n+/// # #![allow(dead_code)]\n+/// fn from_zero_to(v: u8) -> impl Iterator<Item = u8> {\n+///     (0..v).into_iter()\n+/// }\n+/// ```\n+///\n+/// The use of the [`impl`] keyword in this position allows the function writer\n+/// to hide the concrete type as an implementation detail which can change\n+/// without breaking user's code.\n+///\n+/// # Trait objects\n+///\n+/// A *trait object* is an opaque value of another type that implements a set of\n+/// traits. A trait object implements all specified traits as well as their\n+/// supertraits (if any).\n+///\n+/// The syntax is the following: `dyn BaseTrait + AutoTrait1 + ... AutoTraitN`.\n+/// Only one `BaseTrait` can be used so this will not compile:\n+///\n+/// ```rust,compile_fail,E0225\n+/// trait A {}\n+/// trait B {}\n+///\n+/// let _: Box<dyn A + B>;\n+/// ```\n+///\n+/// Neither will this, which is a syntax error:\n+///\n+/// ```rust,compile_fail\n+/// trait A {}\n+/// trait B {}\n+///\n+/// let _: Box<dyn A + dyn B>;\n+/// ```\n+///\n+/// On the other hand, this is correct:\n+///\n+/// ```rust\n+/// trait A {}\n+///\n+/// let _: Box<dyn A + Send + Sync>;\n+/// ```\n+///\n+/// The [Reference][Ref-Trait-Objects] has more information about trait objects,\n+/// their limitations and the differences between editions.\n+///\n+/// # Unsafe traits\n+///\n+/// Some traits may be unsafe to implement. Using the [`unsafe`] keyword in\n+/// front of the trait's declaration is used to mark this:\n+///\n+/// ```rust\n+/// unsafe trait UnsafeTrait {}\n+///\n+/// unsafe impl UnsafeTrait for i32 {}\n+/// ```\n+///\n+/// # Differences between the 2015 and 2018 editions\n+///\n+/// In the 2015 edition parameters pattern where not needed for traits:\n+///\n+/// ```rust,edition2015\n+/// trait Tr {\n+///     fn f(i32);\n+/// }\n+/// ```\n+///\n+/// This behavior is no longer valid in edition 2018.\n+///\n+/// [`for`]: keyword.for.html\n+/// [`impl`]: keyword.impl.html\n+/// [`unsafe`]: keyword.unsafe.html\n+/// [Ref-Traits]: ../reference/items/traits.html\n+/// [Ref-Trait-Objects]: ../reference/types/trait-object.html\n mod trait_keyword {}\n \n #[doc(keyword = \"true\")]"}]}