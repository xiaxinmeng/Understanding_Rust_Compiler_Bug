{"sha": "46a934a1dc789b9441e5fb5cd043287baddcc5c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YTkzNGExZGM3ODliOTQ0MWU1ZmI1Y2QwNDMyODdiYWRkY2M1Yzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-12T23:27:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-12T23:27:23Z"}, "message": "Auto merge of #83022 - m-ou-se:mem-replace-no-swap, r=nagisa\n\nDon't implement mem::replace with mem::swap.\n\n`swap` is a complicated operation, so this changes the implementation of `replace` to use `read` and `write` instead.\n\nSee https://github.com/rust-lang/rust/pull/83019.\n\nI wrote there:\n\n> Implementing the simpler operation (replace) with the much more complicated operation (swap) doesn't make a whole lot of sense. `replace` is just read+write, and the primitive for moving out of a `&mut`. `swap` is for doing that to *two* `&mut` at the same time, which is both more niche and more complicated (as shown by `swap_nonoverlapping_bytes`).\n\nThis could be especially interesting for `Option<VeryLargeStruct>::take()`, since swapping such a large structure with `swap_nonoverlapping_bytes` is going to be much less efficient than `ptr::write()`'ing a `None`.\n\nBut also for small values where `swap` just reads/writes using temporary variable, this makes a `replace` or `take` operation simpler:\n![image](https://user-images.githubusercontent.com/783247/110839393-c7e6bd80-82a3-11eb-97b7-28acb14deffd.png)", "tree": {"sha": "e05f0ddb8a326faa2f523509471bf1564fb59988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05f0ddb8a326faa2f523509471bf1564fb59988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46a934a1dc789b9441e5fb5cd043287baddcc5c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46a934a1dc789b9441e5fb5cd043287baddcc5c7", "html_url": "https://github.com/rust-lang/rust/commit/46a934a1dc789b9441e5fb5cd043287baddcc5c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46a934a1dc789b9441e5fb5cd043287baddcc5c7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e19a221e63dcffdef87e12eadf1f36a8b90295", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e19a221e63dcffdef87e12eadf1f36a8b90295", "html_url": "https://github.com/rust-lang/rust/commit/b3e19a221e63dcffdef87e12eadf1f36a8b90295"}, {"sha": "bf27819f37fb7cbe5fb67972d874ab285b741538", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf27819f37fb7cbe5fb67972d874ab285b741538", "html_url": "https://github.com/rust-lang/rust/commit/bf27819f37fb7cbe5fb67972d874ab285b741538"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "84edbd30a5dc104db8ee73fcb014e8441a51e14d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46a934a1dc789b9441e5fb5cd043287baddcc5c7/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a934a1dc789b9441e5fb5cd043287baddcc5c7/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=46a934a1dc789b9441e5fb5cd043287baddcc5c7", "patch": "@@ -812,9 +812,15 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n-pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n-    swap(dest, &mut src);\n-    src\n+pub fn replace<T>(dest: &mut T, src: T) -> T {\n+    // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n+    // such that the old value is not duplicated. Nothing is dropped and\n+    // nothing here can panic.\n+    unsafe {\n+        let result = ptr::read(dest);\n+        ptr::write(dest, src);\n+        result\n+    }\n }\n \n /// Disposes of a value."}]}