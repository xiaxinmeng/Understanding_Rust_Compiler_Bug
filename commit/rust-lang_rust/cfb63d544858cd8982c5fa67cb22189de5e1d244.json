{"sha": "cfb63d544858cd8982c5fa67cb22189de5e1d244", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjYzZDU0NDg1OGNkODk4MmM1ZmE2N2NiMjIxODlkZTVlMWQyNDQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-23T19:33:44Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-21T14:27:26Z"}, "message": "rustc: fix fallout of merging ast::ViewItem into ast::Item.", "tree": {"sha": "9fac92951da3b25b19ae330445b247ee0049671d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fac92951da3b25b19ae330445b247ee0049671d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb63d544858cd8982c5fa67cb22189de5e1d244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb63d544858cd8982c5fa67cb22189de5e1d244", "html_url": "https://github.com/rust-lang/rust/commit/cfb63d544858cd8982c5fa67cb22189de5e1d244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb63d544858cd8982c5fa67cb22189de5e1d244/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e389ab18a28b71479be6f24776845cc021767193", "url": "https://api.github.com/repos/rust-lang/rust/commits/e389ab18a28b71479be6f24776845cc021767193", "html_url": "https://github.com/rust-lang/rust/commit/e389ab18a28b71479be6f24776845cc021767193"}], "stats": {"total": 231, "additions": 99, "deletions": 132}, "files": [{"sha": "ff6f67b186973481aefb263ad38893ac80d9665e", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -1202,17 +1202,17 @@ impl LintPass for UnusedImportBraces {\n         lint_array!(UNUSED_IMPORT_BRACES)\n     }\n \n-    fn check_view_item(&mut self, cx: &Context, view_item: &ast::ViewItem) {\n-        match view_item.node {\n-            ast::ViewItemUse(ref view_path) => {\n+    fn check_item(&mut self, cx: &Context, item: &ast::Item) {\n+        match item.node {\n+            ast::ItemUse(ref view_path) => {\n                 match view_path.node {\n-                    ast::ViewPathList(_, ref items, _) => {\n+                    ast::ViewPathList(_, ref items) => {\n                         if items.len() == 1 {\n                             match items[0].node {\n                                 ast::PathListIdent {ref name, ..} => {\n                                     let m = format!(\"braces around {} is unnecessary\",\n                                                     token::get_ident(*name).get());\n-                                    cx.span_lint(UNUSED_IMPORT_BRACES, view_item.span,\n+                                    cx.span_lint(UNUSED_IMPORT_BRACES, item.span,\n                                                  &m[]);\n                                 },\n                                 _ => ()\n@@ -1709,22 +1709,6 @@ impl LintPass for Stability {\n         }\n     }\n \n-    fn check_view_item(&mut self, cx: &Context, item: &ast::ViewItem) {\n-        // compiler-generated `extern crate` statements have a dummy span.\n-        if item.span == DUMMY_SP { return }\n-\n-        let id = match item.node {\n-            ast::ViewItemExternCrate(_, _, id) => id,\n-            ast::ViewItemUse(..) => return,\n-        };\n-        let cnum = match cx.tcx.sess.cstore.find_extern_mod_stmt_cnum(id) {\n-            Some(cnum) => cnum,\n-            None => return,\n-        };\n-        let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n-        self.lint(cx, id, item.span);\n-    }\n-\n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         if self.is_internal(cx, e.span) { return; }\n \n@@ -1776,6 +1760,17 @@ impl LintPass for Stability {\n         if self.is_internal(cx, item.span) { return }\n \n         match item.node {\n+            ast::ItemExternCrate(_) => {\n+                // compiler-generated `extern crate` items have a dummy span.\n+                if item.span == DUMMY_SP { return }\n+\n+                let cnum = match cx.tcx.sess.cstore.find_extern_mod_stmt_cnum(item.id) {\n+                    Some(cnum) => cnum,\n+                    None => return,\n+                };\n+                let id = ast::DefId { krate: cnum, node: ast::CRATE_NODE_ID };\n+                self.lint(cx, id, item.span);\n+            }\n             ast::ItemTrait(_, _, ref supertraits, _) => {\n                 for t in supertraits.iter() {\n                     if let ast::TraitTyParamBound(ref t, _) = *t {"}, {"sha": "4e675b32632e728d68be6dad69994a8f41ab3706", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -603,14 +603,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n         })\n     }\n \n-    fn visit_view_item(&mut self, i: &ast::ViewItem) {\n-        self.with_lint_attrs(&i.attrs[], |cx| {\n-            run_lints!(cx, check_view_item, i);\n-            cx.visit_ids(|v| v.visit_view_item(i));\n-            visit::walk_view_item(cx, i);\n-        })\n-    }\n-\n     fn visit_pat(&mut self, p: &ast::Pat) {\n         run_lints!(self, check_pat, p);\n         visit::walk_pat(self, p);"}, {"sha": "a4a3f485af1d1034cfe4acc8d460ed8e00c31df4", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -128,7 +128,6 @@ pub trait LintPass {\n     fn check_crate(&mut self, _: &Context, _: &ast::Crate) { }\n     fn check_ident(&mut self, _: &Context, _: Span, _: ast::Ident) { }\n     fn check_mod(&mut self, _: &Context, _: &ast::Mod, _: Span, _: ast::NodeId) { }\n-    fn check_view_item(&mut self, _: &Context, _: &ast::ViewItem) { }\n     fn check_foreign_item(&mut self, _: &Context, _: &ast::ForeignItem) { }\n     fn check_item(&mut self, _: &Context, _: &ast::Item) { }\n     fn check_local(&mut self, _: &Context, _: &ast::Local) { }"}, {"sha": "7b71120ba64a6ea9807cb4f53dad5b3b7cc07904", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -40,10 +40,6 @@ pub struct CrateReader<'a> {\n }\n \n impl<'a, 'v> visit::Visitor<'v> for CrateReader<'a> {\n-    fn visit_view_item(&mut self, a: &ast::ViewItem) {\n-        self.process_view_item(a);\n-        visit::walk_view_item(self, a);\n-    }\n     fn visit_item(&mut self, a: &ast::Item) {\n         self.process_item(a);\n         visit::walk_item(self, a);\n@@ -64,9 +60,8 @@ fn dump_crates(cstore: &CStore) {\n     })\n }\n \n-fn should_link(i: &ast::ViewItem) -> bool {\n+fn should_link(i: &ast::Item) -> bool {\n     !attr::contains_name(&i.attrs[], \"no_link\")\n-\n }\n \n struct CrateInfo {\n@@ -181,29 +176,10 @@ impl<'a> CrateReader<'a> {\n         }\n     }\n \n-    fn process_view_item(&mut self, i: &ast::ViewItem) {\n-        if !should_link(i) {\n-            return;\n-        }\n-\n-        match self.extract_crate_info(i) {\n-            Some(info) => {\n-                let (cnum, _, _) = self.resolve_crate(&None,\n-                                                      &info.ident[],\n-                                                      &info.name[],\n-                                                      None,\n-                                                      i.span,\n-                                                      PathKind::Crate);\n-                self.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n-            }\n-            None => ()\n-        }\n-    }\n-\n-    fn extract_crate_info(&self, i: &ast::ViewItem) -> Option<CrateInfo> {\n+    fn extract_crate_info(&self, i: &ast::Item) -> Option<CrateInfo> {\n         match i.node {\n-            ast::ViewItemExternCrate(ident, ref path_opt, id) => {\n-                let ident = token::get_ident(ident);\n+            ast::ItemExternCrate(ref path_opt) => {\n+                let ident = token::get_ident(i.ident);\n                 debug!(\"resolving extern crate stmt. ident: {} path_opt: {:?}\",\n                        ident, path_opt);\n                 let name = match *path_opt {\n@@ -218,16 +194,34 @@ impl<'a> CrateReader<'a> {\n                 Some(CrateInfo {\n                     ident: ident.get().to_string(),\n                     name: name,\n-                    id: id,\n+                    id: i.id,\n                     should_link: should_link(i),\n                 })\n             }\n             _ => None\n         }\n     }\n \n-    fn process_item(&self, i: &ast::Item) {\n+    fn process_item(&mut self, i: &ast::Item) {\n         match i.node {\n+            ast::ItemExternCrate(_) => {\n+                if !should_link(i) {\n+                    return;\n+                }\n+\n+                match self.extract_crate_info(i) {\n+                    Some(info) => {\n+                        let (cnum, _, _) = self.resolve_crate(&None,\n+                                                              &info.ident[],\n+                                                              &info.name[],\n+                                                              None,\n+                                                              i.span,\n+                                                              PathKind::Crate);\n+                        self.sess.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n+                    }\n+                    None => ()\n+                }\n+            }\n             ast::ItemForeignMod(ref fm) => {\n                 if fm.abi == abi::Rust || fm.abi == abi::RustIntrinsic {\n                     return;\n@@ -533,7 +527,7 @@ impl<'a> CrateReader<'a> {\n \n #[derive(Copy)]\n pub enum CrateOrString<'a> {\n-    Krate(&'a ast::ViewItem),\n+    Krate(&'a ast::Item),\n     Str(&'a str)\n }\n "}, {"sha": "d0989160488f2da416d39fef8a5fc143cab3092c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -1456,8 +1456,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             rbml_w.end_tag();\n         }\n       }\n-      ast::ItemMac(..) => {\n-        // macros are encoded separately\n+      ast::ItemExternCrate(_) | ast::ItemUse(_) |ast::ItemMac(..) => {\n+        // these are encoded separately\n       }\n     }\n }"}, {"sha": "ae5449f0ba65766513279b8360d68b13520b5f09", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -332,8 +332,6 @@ impl Folder for NestedItemsDropper {\n                 }\n             }).collect();\n             let blk_sans_items = P(ast::Block {\n-                view_items: Vec::new(), // I don't know if we need the view_items\n-                                        // here, but it doesn't break tests!\n                 stmts: stmts_sans_items,\n                 expr: expr,\n                 id: id,"}, {"sha": "b93cde4bf646448b4c315279e1823cf1be0aaa49", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -297,6 +297,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     // These are normal, nothing reachable about these\n                     // inherently and their children are already in the\n                     // worklist, as determined by the privacy pass\n+                    ast::ItemExternCrate(_) | ast::ItemUse(_) |\n                     ast::ItemTy(..) | ast::ItemStatic(_, _, _) |\n                     ast::ItemMod(..) | ast::ItemForeignMod(..) |\n                     ast::ItemImpl(..) | ast::ItemTrait(..) |"}, {"sha": "a3ede8b6a05de3fb0ffddff91862ef93a3ab623c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -94,6 +94,8 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     // Fn lifetimes get added in visit_fn below:\n                     visit::walk_item(this, item);\n                 }\n+                ast::ItemExternCrate(_) |\n+                ast::ItemUse(_) |\n                 ast::ItemMod(..) |\n                 ast::ItemMac(..) |\n                 ast::ItemForeignMod(..) |"}, {"sha": "c420d1f15b43b1213691b3c7735ddb1635ef80b8", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -73,8 +73,10 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n     // We need to error on `#[macro_use] extern crate` when it isn't at the\n     // crate root, because `$crate` won't work properly. Identify these by\n     // spans, because the crate map isn't set up yet.\n-    for vi in krate.module.view_items.iter() {\n-        loader.span_whitelist.insert(vi.span);\n+    for item in krate.module.items.iter() {\n+        if let ast::ItemExternCrate(_) = item.node {\n+            loader.span_whitelist.insert(item.span);\n+        }\n     }\n \n     visit::walk_crate(&mut loader, krate);\n@@ -91,18 +93,21 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n \n // note that macros aren't expanded yet, and therefore macros can't add plugins.\n impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n-    fn visit_view_item(&mut self, vi: &ast::ViewItem) {\n+    fn visit_item(&mut self, item: &ast::Item) {\n         // We're only interested in `extern crate`.\n-        match vi.node {\n-            ast::ViewItemExternCrate(..) => (),\n-            _ => return,\n+        match item.node {\n+            ast::ItemExternCrate(_) => {}\n+            _ => {\n+                visit::walk_item(self, item);\n+                return;\n+            }\n         }\n \n         // Parse the attributes relating to macro / plugin loading.\n         let mut plugin_attr = None;\n         let mut macro_selection = Some(HashSet::new());  // None => load all\n         let mut reexport = HashSet::new();\n-        for attr in vi.attrs.iter() {\n+        for attr in item.attrs.iter() {\n             let mut used = true;\n             match attr.name().get() {\n                 \"phase\" => {\n@@ -155,7 +160,10 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             }\n         }\n \n-        self.load_plugin(CrateOrString::Krate(vi), plugin_attr, macro_selection, Some(reexport))\n+        self.load_plugin(CrateOrString::Krate(item),\n+                         plugin_attr,\n+                         macro_selection,\n+                         Some(reexport))\n     }\n \n     fn visit_mac(&mut self, _: &ast::Mac) {"}, {"sha": "414dbb9626347598b19b54c2cdaef306cfb9baf3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 37, "deletions": 59, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb63d544858cd8982c5fa67cb22189de5e1d244/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=cfb63d544858cd8982c5fa67cb22189de5e1d244", "patch": "@@ -830,6 +830,38 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n+        match item.node {\n+            ast::ItemUse(ref vpath) => {\n+                match vpath.node {\n+                    ast::ViewPathSimple(..) | ast::ViewPathGlob(..) => {}\n+                    ast::ViewPathList(ref prefix, ref list) => {\n+                        for pid in list.iter() {\n+                            match pid.node {\n+                                ast::PathListIdent { id, name } => {\n+                                    debug!(\"privacy - ident item {}\", id);\n+                                    let seg = ast::PathSegment {\n+                                        identifier: name,\n+                                        parameters: ast::PathParameters::none(),\n+                                    };\n+                                    let segs = vec![seg];\n+                                    let path = ast::Path {\n+                                        global: false,\n+                                        span: pid.span,\n+                                        segments: segs,\n+                                    };\n+                                    self.check_path(pid.span, id, &path);\n+                                }\n+                                ast::PathListMod { id } => {\n+                                    debug!(\"privacy - mod item {}\", id);\n+                                    self.check_path(pid.span, id, prefix);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n         let orig_curitem = replace(&mut self.curitem, item.id);\n         visit::walk_item(self, item);\n         self.curitem = orig_curitem;\n@@ -926,42 +958,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n         visit::walk_expr(self, expr);\n     }\n \n-    fn visit_view_item(&mut self, a: &ast::ViewItem) {\n-        match a.node {\n-            ast::ViewItemExternCrate(..) => {}\n-            ast::ViewItemUse(ref vpath) => {\n-                match vpath.node {\n-                    ast::ViewPathSimple(..) | ast::ViewPathGlob(..) => {}\n-                    ast::ViewPathList(ref prefix, ref list, _) => {\n-                        for pid in list.iter() {\n-                            match pid.node {\n-                                ast::PathListIdent { id, name } => {\n-                                    debug!(\"privacy - ident item {}\", id);\n-                                    let seg = ast::PathSegment {\n-                                        identifier: name,\n-                                        parameters: ast::PathParameters::none(),\n-                                    };\n-                                    let segs = vec![seg];\n-                                    let path = ast::Path {\n-                                        global: false,\n-                                        span: pid.span,\n-                                        segments: segs,\n-                                    };\n-                                    self.check_path(pid.span, id, &path);\n-                                }\n-                                ast::PathListMod { id } => {\n-                                    debug!(\"privacy - mod item {}\", id);\n-                                    self.check_path(pid.span, id, prefix);\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        visit::walk_view_item(self, a);\n-    }\n-\n     fn visit_pat(&mut self, pattern: &ast::Pat) {\n         // Foreign functions do not have their patterns mapped in the def_map,\n         // and there's nothing really relevant there anyway, so don't bother\n@@ -1069,23 +1065,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for SanePrivacyVisitor<'a, 'tcx> {\n         visit::walk_fn(self, fk, fd, b, s);\n         self.in_fn = orig_in_fn;\n     }\n-\n-    fn visit_view_item(&mut self, i: &ast::ViewItem) {\n-        match i.vis {\n-            ast::Inherited => {}\n-            ast::Public => {\n-                if self.in_fn {\n-                    self.tcx.sess.span_err(i.span, \"unnecessary `pub`, imports \\\n-                                                    in functions are never \\\n-                                                    reachable\");\n-                } else if let ast::ViewItemExternCrate(..) = i.node {\n-                    self.tcx.sess.span_err(i.span, \"`pub` visibility \\\n-                                                    is not allowed\");\n-                }\n-            }\n-        }\n-        visit::walk_view_item(self, i);\n-    }\n }\n \n impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n@@ -1162,7 +1141,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n \n             ast::ItemConst(..) | ast::ItemStatic(..) | ast::ItemStruct(..) |\n             ast::ItemFn(..) | ast::ItemMod(..) | ast::ItemTy(..) |\n-            ast::ItemMac(..) => {}\n+            ast::ItemExternCrate(_) | ast::ItemUse(_) | ast::ItemMac(..) => {}\n         }\n     }\n \n@@ -1219,6 +1198,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n+            ast::ItemExternCrate(_) | ast::ItemUse(_) |\n             ast::ItemStatic(..) | ast::ItemConst(..) |\n             ast::ItemFn(..) | ast::ItemMod(..) | ast::ItemTy(..) |\n             ast::ItemMac(..) => {}\n@@ -1521,11 +1501,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n \n     // we don't need to introspect into these at all: an\n-    // expression/block context can't possibly contain exported\n-    // things, and neither do view_items. (Making them no-ops stops us\n-    // from traversing the whole AST without having to be super\n-    // careful about our `walk_...` calls above.)\n-    fn visit_view_item(&mut self, _: &ast::ViewItem) {}\n+    // expression/block context can't possibly contain exported things.\n+    // (Making them no-ops stops us from traversing the whole AST without\n+    // having to be super careful about our `walk_...` calls above.)\n     fn visit_block(&mut self, _: &ast::Block) {}\n     fn visit_expr(&mut self, _: &ast::Expr) {}\n }"}]}