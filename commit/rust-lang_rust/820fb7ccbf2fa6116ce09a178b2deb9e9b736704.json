{"sha": "820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMGZiN2NjYmYyZmE2MTE2Y2UwOWExNzhiMmRlYjllOWI3MzY3MDQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T23:07:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T23:07:52Z"}, "message": "Rollup merge of #65353 - Xanewok:sa-empty-tables, r=nikomatsakis\n\nsave-analysis: Don't ICE when resolving qualified type paths in struct members\n\nPreviously, we failed since we use `qpath_res` via typeck tables - when using those we need to pass in a HirId that's local to the definition path the tables are rooted at (otherwise we risk frame of reference mismatch and an assertion against invalid lookup).\n\nIn this case we can't get typeck tables for struct definition because it has no body, however the struct member type node is rooted under the struct definition and so we can't really do anything about it in terms of traversal.\n\nInstead, we try to \"nest\" the tables as always but change the default behaviour to use empty typeck tables rather than silently trying to use the current ones. This does work as we expect and for prior art, we use the same approach in the [privacy](https://github.com/rust-lang/rust/blob/7bc94cc3c2ccef8b4d393910bb978a6487db1202/src/librustc_privacy/lib.rs#L332-L341) [pass](https://github.com/rust-lang/rust/blob/7bc94cc3c2ccef8b4d393910bb978a6487db1202/src/librustc_privacy/lib.rs#L1007-L1028).\n\nFixes #64659.\nFixes #64821.\n\nr? @nikomatsakis (since this changes the default behaviour introduced in https://github.com/rust-lang/rust/commit/d7d3f197f62d7d0a1a612b7243f4617428cae53f)", "tree": {"sha": "f75bad767136c3242eb147088206383c1d1a2f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f75bad767136c3242eb147088206383c1d1a2f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdplFICRBK7hj4Ov3rIwAAdHIIAIjxwQObEzXZTQLSzEqfya5w\nmFf8fBV7fgJCdop07/lSPp4OEYDmCqR27pfadB0A1f17H4TPYMLTbFro8Sr6S5xn\nxZ5qb+rnGIw4bFlprRIzmBITxXxSYyr2a2sN2CJjgg1VE60G8OmkbSx7VVayChxP\nAGXWm/Bvr/YfTvnDkMLD5niSpZPCkoMH0qTv7KinRVABtAOAD2XlyrDU+Nmc31sV\nJcahp5fb7pg/31OgBNP2kpScnCVhs2qRCTsiQu7h1/I7fIuVW5waMBAMZ9qIDITD\nilVkUmwNMm+plmX7p6JWw7lcczcHtr4mTatRHwRvW+QySKXbhgbKxjacVUvs+rk=\n=dz9p\n-----END PGP SIGNATURE-----\n", "payload": "tree f75bad767136c3242eb147088206383c1d1a2f55\nparent 42b35968fb9ef19c2177ee05aa06af81db698c78\nparent eefc1697c5d3ba52c2af46994ed158e4457171b8\nauthor Tyler Mandry <tmandry@gmail.com> 1571180872 -0700\ncommitter GitHub <noreply@github.com> 1571180872 -0700\n\nRollup merge of #65353 - Xanewok:sa-empty-tables, r=nikomatsakis\n\nsave-analysis: Don't ICE when resolving qualified type paths in struct members\n\nPreviously, we failed since we use `qpath_res` via typeck tables - when using those we need to pass in a HirId that's local to the definition path the tables are rooted at (otherwise we risk frame of reference mismatch and an assertion against invalid lookup).\n\nIn this case we can't get typeck tables for struct definition because it has no body, however the struct member type node is rooted under the struct definition and so we can't really do anything about it in terms of traversal.\n\nInstead, we try to \"nest\" the tables as always but change the default behaviour to use empty typeck tables rather than silently trying to use the current ones. This does work as we expect and for prior art, we use the same approach in the [privacy](https://github.com/rust-lang/rust/blob/7bc94cc3c2ccef8b4d393910bb978a6487db1202/src/librustc_privacy/lib.rs#L332-L341) [pass](https://github.com/rust-lang/rust/blob/7bc94cc3c2ccef8b4d393910bb978a6487db1202/src/librustc_privacy/lib.rs#L1007-L1028).\n\nFixes #64659.\nFixes #64821.\n\nr? @nikomatsakis (since this changes the default behaviour introduced in https://github.com/rust-lang/rust/commit/d7d3f197f62d7d0a1a612b7243f4617428cae53f)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "html_url": "https://github.com/rust-lang/rust/commit/820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/820fb7ccbf2fa6116ce09a178b2deb9e9b736704/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42b35968fb9ef19c2177ee05aa06af81db698c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/42b35968fb9ef19c2177ee05aa06af81db698c78", "html_url": "https://github.com/rust-lang/rust/commit/42b35968fb9ef19c2177ee05aa06af81db698c78"}, {"sha": "eefc1697c5d3ba52c2af46994ed158e4457171b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eefc1697c5d3ba52c2af46994ed158e4457171b8", "html_url": "https://github.com/rust-lang/rust/commit/eefc1697c5d3ba52c2af46994ed158e4457171b8"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "502ae337b52768b3b68ea2978d98229fd6b07d18", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/820fb7ccbf2fa6116ce09a178b2deb9e9b736704/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820fb7ccbf2fa6116ce09a178b2deb9e9b736704/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "patch": "@@ -115,15 +115,17 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         F: FnOnce(&mut Self),\n     {\n         let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n-        if self.tcx.has_typeck_tables(item_def_id) {\n-            let tables = self.tcx.typeck_tables_of(item_def_id);\n-            let old_tables = self.save_ctxt.tables;\n-            self.save_ctxt.tables = tables;\n-            f(self);\n-            self.save_ctxt.tables = old_tables;\n+\n+        let tables = if self.tcx.has_typeck_tables(item_def_id) {\n+            self.tcx.typeck_tables_of(item_def_id)\n         } else {\n-            f(self);\n-        }\n+            self.save_ctxt.empty_tables\n+        };\n+\n+        let old_tables = self.save_ctxt.tables;\n+        self.save_ctxt.tables = tables;\n+        f(self);\n+        self.save_ctxt.tables = old_tables;\n     }\n \n     fn span_from_span(&self, span: Span) -> SpanData {\n@@ -530,12 +532,14 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             );\n         }\n \n-        for field in def.fields() {\n-            self.process_struct_field_def(field, item.id);\n-            self.visit_ty(&field.ty);\n-        }\n+        self.nest_tables(item.id, |v| {\n+            for field in def.fields() {\n+                v.process_struct_field_def(field, item.id);\n+                v.visit_ty(&field.ty);\n+            }\n \n-        self.process_generic_params(ty_params, &qualname, item.id);\n+            v.process_generic_params(ty_params, &qualname, item.id);\n+        });\n     }\n \n     fn process_enum("}, {"sha": "1cfb84bb511e4b4ca5c8c16d73235790f35b4db8", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/820fb7ccbf2fa6116ce09a178b2deb9e9b736704/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820fb7ccbf2fa6116ce09a178b2deb9e9b736704/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "patch": "@@ -48,6 +48,9 @@ use log::{debug, error, info};\n pub struct SaveContext<'l, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n+    /// Used as a fallback when nesting the typeck tables during item processing\n+    /// (if these are not available for that item, e.g. don't own a body)\n+    empty_tables: &'l ty::TypeckTables<'tcx>,\n     access_levels: &'l AccessLevels,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n@@ -1114,6 +1117,7 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n         let save_ctxt = SaveContext {\n             tcx,\n             tables: &ty::TypeckTables::empty(None),\n+            empty_tables: &ty::TypeckTables::empty(None),\n             access_levels: &access_levels,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),"}, {"sha": "a3d88a203778fbc8cda94e16648c117f48a582b2", "filename": "src/test/ui/save-analysis/issue-64659.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/820fb7ccbf2fa6116ce09a178b2deb9e9b736704/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-64659.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820fb7ccbf2fa6116ce09a178b2deb9e9b736704/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-64659.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-64659.rs?ref=820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// compile-flags: -Zsave-analysis\n+\n+trait Trait { type Assoc; }\n+\n+fn main() {\n+    struct Data<T: Trait> {\n+        x: T::Assoc,\n+    }\n+}"}]}