{"sha": "e73d189e4e2ad55fcea595a14f9adea0960c65a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3M2QxODllNGUyYWQ1NWZjZWE1OTVhMTRmOWFkZWEwOTYwYzY1YTE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-08-25T00:53:20Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-09T21:16:49Z"}, "message": "Use slice patterns to match projection base", "tree": {"sha": "ce621cff756536af0695cb5bd0d437e661d71dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce621cff756536af0695cb5bd0d437e661d71dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e73d189e4e2ad55fcea595a14f9adea0960c65a1", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl12wUEACgkQiMlBzaHU\nZDJ4xQ//dgAZ+AoHhUVN9fZDaXSjXbm+RCacxeDoOF9n+SzWW91KJm1O5ZyjVdWt\nxHNiSz9hJ1BNXVuWn+IzCWGf5HI3xOn5Uc/yxzjLF/6wy8q9cRi3H8dTDkJFMgi2\nJoROOU3BMh3QFWFIo6TrdwkhBCVYnDzxRK66HvS5RoXbyA3bbLJ7FSvxstgP1eF+\n7X0cfuDzuSiNJ1804B6Td6QHXYg409mybO7UKRbYhFSxl2/miX59hrA9KkdWGVlS\nC+QS4gZIIEKzV6rBBOSGBvID7cwbVmgnaGgsO1Ne1ljfeRY8FwSfAYh4koli/HsA\nog9D7OTAdboChKurn0n7M0UM0ubnPvrjPPDO0H7eKY6DU0jWHKfs8QlnMULclwWM\n4GrCM7n5RscraDxoq0jl45ROX+AzF+Gsq7/XHmmFhEjbVTMEwg2mG35qd9qMJD/p\n2K5KMER4fpo5AlyeZdNEFI9Xtbq23QIlqgObCmz0KmtWoTyAn1QUTR8+giES/L8u\nEfOLXHcexqfrrZCldUkcFYhhZbW0RBhnvt0NUMXemnaz4zA0mn3BdmKyVTXGLAZZ\nu40jrlcljuTwJtsm0Z4Cq2iAmXJcfieMItzoN9KwneAdx0BGI2NXE8EzTNaoPHDH\nWeoCqr/eUOcIF5HUdRM3VnU27a/KLcKQ3vpPwt9Q1KVDbfZXG1c=\n=Tl23\n-----END PGP SIGNATURE-----", "payload": "tree ce621cff756536af0695cb5bd0d437e661d71dd3\nparent b04e6c734451acc8b97657a906dda535874c82cf\nauthor Santiago Pastorino <spastorino@gmail.com> 1566694400 -0400\ncommitter Santiago Pastorino <spastorino@gmail.com> 1568063809 -0300\n\nUse slice patterns to match projection base\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e73d189e4e2ad55fcea595a14f9adea0960c65a1", "html_url": "https://github.com/rust-lang/rust/commit/e73d189e4e2ad55fcea595a14f9adea0960c65a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e73d189e4e2ad55fcea595a14f9adea0960c65a1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04e6c734451acc8b97657a906dda535874c82cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04e6c734451acc8b97657a906dda535874c82cf", "html_url": "https://github.com/rust-lang/rust/commit/b04e6c734451acc8b97657a906dda535874c82cf"}], "stats": {"total": 185, "additions": 67, "deletions": 118}, "files": [{"sha": "9f3df7cc58f60799b695cd9798bc028987d84b9e", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -720,12 +720,9 @@ macro_rules! make_mir_visitor {\n                                 projection: & $($mutability)? [PlaceElem<'tcx>],\n                                 context: PlaceContext,\n                                 location: Location) {\n-                if !projection.is_empty() {\n-                    let proj_len = projection.len();\n-                    let proj_base = & $($mutability)? projection[..proj_len - 1];\n+                if let [proj_base @ .., elem] = projection {\n                     self.visit_projection(base, proj_base, context, location);\n \n-                    let elem = & $($mutability)? projection[proj_len - 1];\n                     match elem {\n                         ProjectionElem::Field(_field, ty) => {\n                             self.visit_ty(ty, TyContext::Location(location));"}, {"sha": "d192f2ffb6fba8bddd54076d55752fb9f30e2998", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -105,10 +105,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n     ) {\n         let cx = self.fx.cx;\n \n-        if let [.., elem] = place_ref.projection {\n-            // FIXME(spastorino) include this in the pattern when stabilized\n-            let proj_base = &place_ref.projection[..place_ref.projection.len() - 1];\n-\n+        if let [proj_base @ .., elem] = place_ref.projection {\n             // Allow uses of projections that are ZSTs or from scalar fields.\n             let is_consume = match context {\n                 PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) |"}, {"sha": "ef9fc36b0f173425aebcda1d1976b136ede48bee", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -514,10 +514,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             },\n             mir::PlaceRef {\n                 base,\n-                projection: [.., mir::ProjectionElem::Deref],\n+                projection: [proj_base @ .., mir::ProjectionElem::Deref],\n             } => {\n-                let proj_base = &place_ref.projection[..place_ref.projection.len() - 1];\n-\n                 // Load the pointer from its location.\n                 self.codegen_consume(bx, &mir::PlaceRef {\n                     base,\n@@ -526,10 +524,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             mir::PlaceRef {\n                 base,\n-                projection: [.., elem],\n+                projection: [proj_base @ .., elem],\n             } => {\n-                let proj_base = &place_ref.projection[..place_ref.projection.len() - 1];\n-\n                 // FIXME turn this recursion into iteration\n                 let cg_base = self.codegen_place(bx, &mir::PlaceRef {\n                     base,"}, {"sha": "aeee961d2d35457b0cf30671a61ec7fd9b34529a", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -179,10 +179,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n             PlaceRef {\n                 base,\n-                projection: [.., elem],\n+                projection: [proj_base @ .., elem],\n             } => {\n-                let proj_base = &place.projection[..place.projection.len() - 1];\n-\n                 match elem {\n                     ProjectionElem::Deref => {\n                         let upvar_field_projection =\n@@ -363,11 +361,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.describe_field_from_ty(&static_.ty, field, None),\n             PlaceRef {\n                 base,\n-                projection: [.., elem],\n+                projection: [proj_base @ .., elem],\n             } => match elem {\n                 ProjectionElem::Deref => {\n-                    let proj_base = &place.projection[..place.projection.len() - 1];\n-\n                     self.describe_field(PlaceRef {\n                         base,\n                         projection: proj_base,\n@@ -384,8 +380,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {\n-                    let proj_base = &place.projection[..place.projection.len() - 1];\n-\n                     self.describe_field(PlaceRef {\n                         base,\n                         projection: proj_base,"}, {"sha": "2305984a017d0d3515525f6d978d597c2ccb995e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -2187,10 +2187,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n             PlaceRef {\n                 base: _,\n-                projection: [.., elem],\n+                projection: [proj_base @ .., elem],\n             } => {\n-                let proj_base = &place.projection[..place.projection.len() - 1];\n-\n                 match elem {\n                     ProjectionElem::Deref => {\n                         let base_ty ="}, {"sha": "cdba1aafdacb0500ccc32654ea765a48fe8c3fc3", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -305,11 +305,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let upvar_field = self.prefixes(move_place.as_ref(), PrefixSet::All)\n             .find_map(|p| self.is_upvar_field_projection(p));\n \n-        let deref_base = match deref_target_place.projection {\n-            box [.., ProjectionElem::Deref] => {\n-                let proj_base =\n-                    &deref_target_place.projection[..deref_target_place.projection.len() - 1];\n-\n+        let deref_base = match &deref_target_place.projection {\n+            box [proj_base @ .., ProjectionElem::Deref] => {\n                 PlaceRef {\n                     base: &deref_target_place.base,\n                     projection: proj_base,"}, {"sha": "12dc2cd1f91c36da67cf00aae88ba0d3b3e583e6", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -65,10 +65,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             PlaceRef {\n                 base: _,\n-                projection: [.., ProjectionElem::Field(upvar_index, _)],\n+                projection: [proj_base @ .., ProjectionElem::Field(upvar_index, _)],\n             } => {\n-                let proj_base = &the_place_err.projection[..the_place_err.projection.len() - 1];\n-\n                 debug_assert!(is_closure_or_generator(\n                     Place::ty_from(&the_place_err.base, proj_base, self.body, self.infcx.tcx).ty\n                 ));\n@@ -329,10 +327,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             // Also suggest adding mut for upvars\n             PlaceRef {\n                 base,\n-                projection: [.., ProjectionElem::Field(upvar_index, _)],\n+                projection: [proj_base @ .., ProjectionElem::Field(upvar_index, _)],\n             } => {\n-                let proj_base = &the_place_err.projection[..the_place_err.projection.len() - 1];\n-\n                 debug_assert!(is_closure_or_generator(\n                     Place::ty_from(base, proj_base, self.body, self.infcx.tcx).ty\n                 ));"}, {"sha": "819678dfaf2551441836b44a0a1402d9c69cd93d", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -88,10 +88,8 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                 }\n                 PlaceRef {\n                     base: _,\n-                    projection: [.., elem],\n+                    projection: [proj_base @ .., elem],\n                 } => {\n-                    let proj_base = &cursor.projection[..cursor.projection.len() - 1];\n-\n                     match elem {\n                         ProjectionElem::Field(_ /*field*/, _ /*ty*/) => {\n                             // FIXME: add union handling"}, {"sha": "a4427287c4f80003207c4734206cf5a0e23af9f8", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -436,8 +436,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n \n         // Check if we are assigning into a field of a union, if so, lookup the place\n         // of the union so it is marked as initialized again.\n-        if let [.., ProjectionElem::Field(_, _)] = place.projection {\n-            let proj_base = &place.projection[..place.projection.len() - 1];\n+        if let [proj_base @ .., ProjectionElem::Field(_, _)] = place.projection {\n             if let ty::Adt(def, _) =\n                 Place::ty_from(place.base, proj_base, self.builder.body, self.builder.tcx).ty.sty\n             {"}, {"sha": "2b8e66e3dec1b7dd3bab3d76a5eca521a0692468", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -90,20 +90,11 @@ impl OptimizationFinder<'b, 'tcx> {\n impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         if let Rvalue::Ref(_, _, Place {\n-            base: _,\n-            projection: box [.., elem],\n+            base,\n+            projection: box [proj_base @ .., ProjectionElem::Deref],\n         }) = rvalue {\n-            if *elem == ProjectionElem::Deref {\n-                // FIXME remove this once we can use slices patterns\n-                if let Rvalue::Ref(_, _, Place {\n-                    base,\n-                    projection,\n-                }) = rvalue {\n-                    let proj_base = &projection[..projection.len() - 1];\n-                    if Place::ty_from(base, proj_base, self.body, self.tcx).ty.is_region_ptr() {\n-                        self.optimizations.and_stars.insert(location);\n-                    }\n-                }\n+            if Place::ty_from(base, proj_base, self.body, self.tcx).ty.is_region_ptr() {\n+                self.optimizations.and_stars.insert(location);\n             }\n         }\n "}, {"sha": "e05b0c96620565e58713494f7c1abf0ba84e5e9d", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 46, "deletions": 53, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -187,27 +187,28 @@ trait Qualif {\n         cx: &ConstCx<'_, 'tcx>,\n         place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n-        let elem = &place.projection[place.projection.len() - 1];\n-        let proj_base = &place.projection[..place.projection.len() - 1];\n+        if let [proj_base @ .., elem] = place.projection {\n+            let base_qualif = Self::in_place(cx, PlaceRef {\n+                base: place.base,\n+                projection: proj_base,\n+            });\n+            let qualif = base_qualif && Self::mask_for_ty(\n+                cx,\n+                Place::ty_from(place.base, proj_base, cx.body, cx.tcx)\n+                    .projection_ty(cx.tcx, elem)\n+                    .ty,\n+            );\n+            match elem {\n+                ProjectionElem::Deref |\n+                ProjectionElem::Subslice { .. } |\n+                ProjectionElem::Field(..) |\n+                ProjectionElem::ConstantIndex { .. } |\n+                ProjectionElem::Downcast(..) => qualif,\n \n-        let base_qualif = Self::in_place(cx, PlaceRef {\n-            base: place.base,\n-            projection: proj_base,\n-        });\n-        let qualif = base_qualif && Self::mask_for_ty(\n-            cx,\n-            Place::ty_from(place.base, proj_base, cx.body, cx.tcx)\n-                .projection_ty(cx.tcx, elem)\n-                .ty,\n-        );\n-        match elem {\n-            ProjectionElem::Deref |\n-            ProjectionElem::Subslice { .. } |\n-            ProjectionElem::Field(..) |\n-            ProjectionElem::ConstantIndex { .. } |\n-            ProjectionElem::Downcast(..) => qualif,\n-\n-            ProjectionElem::Index(local) => qualif || Self::in_local(cx, *local),\n+                ProjectionElem::Index(local) => qualif || Self::in_local(cx, *local),\n+            }\n+        } else {\n+            bug!(\"This should be called if projection is not empty\");\n         }\n     }\n \n@@ -290,10 +291,7 @@ trait Qualif {\n \n             Rvalue::Ref(_, _, ref place) => {\n                 // Special-case reborrows to be more like a copy of the reference.\n-                if !place.projection.is_empty() {\n-                    let elem = &place.projection[place.projection.len() - 1];\n-                    let proj_base = &place.projection[..place.projection.len() - 1];\n-\n+                if let box [proj_base @ .., elem] = &place.projection {\n                     if ProjectionElem::Deref == *elem {\n                         let base_ty = Place::ty_from(&place.base, proj_base, cx.body, cx.tcx).ty;\n                         if let ty::Ref(..) = base_ty.sty {\n@@ -457,31 +455,32 @@ impl Qualif for IsNotPromotable {\n         cx: &ConstCx<'_, 'tcx>,\n         place: PlaceRef<'_, 'tcx>,\n     ) -> bool {\n-        let elem = &place.projection[place.projection.len() - 1];\n-        let proj_base = &place.projection[..place.projection.len() - 1];\n-\n-        match elem {\n-            ProjectionElem::Deref |\n-            ProjectionElem::Downcast(..) => return true,\n-\n-            ProjectionElem::ConstantIndex {..} |\n-            ProjectionElem::Subslice {..} |\n-            ProjectionElem::Index(_) => {}\n+        if let [proj_base @ .., elem] = place.projection {\n+            match elem {\n+                ProjectionElem::Deref |\n+                ProjectionElem::Downcast(..) => return true,\n \n-            ProjectionElem::Field(..) => {\n-                if cx.mode == Mode::NonConstFn {\n-                    let base_ty = Place::ty_from(place.base, proj_base, cx.body, cx.tcx).ty;\n-                    if let Some(def) = base_ty.ty_adt_def() {\n-                        // No promotion of union field accesses.\n-                        if def.is_union() {\n-                            return true;\n+                ProjectionElem::ConstantIndex {..} |\n+                ProjectionElem::Subslice {..} |\n+                ProjectionElem::Index(_) => {}\n+\n+                ProjectionElem::Field(..) => {\n+                    if cx.mode == Mode::NonConstFn {\n+                        let base_ty = Place::ty_from(place.base, proj_base, cx.body, cx.tcx).ty;\n+                        if let Some(def) = base_ty.ty_adt_def() {\n+                            // No promotion of union field accesses.\n+                            if def.is_union() {\n+                                return true;\n+                            }\n                         }\n                     }\n                 }\n             }\n-        }\n \n-        Self::in_projection_structurally(cx, place)\n+            Self::in_projection_structurally(cx, place)\n+        } else {\n+            bug!(\"This should be called if projection is not empty\");\n+        }\n     }\n \n     fn in_rvalue(cx: &ConstCx<'_, 'tcx>, rvalue: &Rvalue<'tcx>) -> bool {\n@@ -866,14 +865,12 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 // projections are transparent for assignments\n                 // we qualify the entire destination at once, even if just a field would have\n                 // stricter qualification\n-                (base, proj @ [.., _]) => {\n-                    let proj_base = &proj[..proj.len() - 1];\n-\n+                (base, [proj_base @ .., _]) => {\n                     // Catch more errors in the destination. `visit_place` also checks various\n                     // projection rules like union field access and raw pointer deref\n                     let context = PlaceContext::MutatingUse(MutatingUseContext::Store);\n                     self.visit_place_base(base, context, location);\n-                    self.visit_projection(base, proj, context, location);\n+                    self.visit_projection(base, dest_projection, context, location);\n                     dest_projection = proj_base;\n                 },\n                 (&PlaceBase::Static(box Static {\n@@ -1096,10 +1093,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         );\n         self.super_projection(place_base, proj, context, location);\n \n-        if !proj.is_empty() {\n-            let elem = &proj[proj.len() - 1];\n-            let proj_base = &proj[..proj.len() - 1];\n-\n+        if let [proj_base @ .., elem] = proj {\n             match elem {\n                 ProjectionElem::Deref => {\n                     if context.is_mutating_use() {\n@@ -1187,9 +1181,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n         if let Rvalue::Ref(_, kind, ref place) = *rvalue {\n             // Special-case reborrows.\n             let mut reborrow_place = None;\n-            if let box [.., elem] = &place.projection {\n+            if let box [proj_base @ .., elem] = &place.projection {\n                 if *elem == ProjectionElem::Deref {\n-                    let proj_base = &place.projection[..place.projection.len() - 1];\n                     let base_ty = Place::ty_from(&place.base, proj_base, self.body, self.tcx).ty;\n                     if let ty::Ref(..) = base_ty.sty {\n                         reborrow_place = Some(proj_base);"}, {"sha": "2f900f2638f48314e08d38961fe74f963b0bc9b8", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73d189e4e2ad55fcea595a14f9adea0960c65a1/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=e73d189e4e2ad55fcea595a14f9adea0960c65a1", "patch": "@@ -61,9 +61,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n                     rvalue: &Rvalue<'tcx>,\n                     location: Location) {\n         if let Rvalue::Use(Operand::Move(ref src_place)) = rvalue {\n-            if let box [.., elem] = &src_place.projection {\n-                let proj_base = &src_place.projection[..src_place.projection.len() - 1];\n-\n+            if let box [proj_base @ .., elem] = &src_place.projection {\n                 if let ProjectionElem::ConstantIndex{offset: _,\n                                                      min_length: _,\n                                                      from_end: false} = elem {\n@@ -102,10 +100,7 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n                proj: &[PlaceElem<'tcx>],\n                item_ty: &'tcx ty::TyS<'tcx>,\n                size: u32) {\n-        if !proj.is_empty() {\n-            let elem = &proj[proj.len() - 1];\n-            let proj_base = &proj[..proj.len() - 1];\n-\n+        if let [proj_base @ .., elem] = proj {\n             match elem {\n                 // uniforms statements like_10 = move _2[:-1];\n                 ProjectionElem::Subslice{from, to} => {\n@@ -314,11 +309,9 @@ impl RestoreSubsliceArrayMoveOut {\n                         _,\n                         box Rvalue::Use(Operand::Move(Place {\n                             base,\n-                            projection,\n+                            projection: box [proj_base @ .., _],\n                         })),\n-                        ) = &statement.kind {\n-                        let proj_base = &projection[..projection.len() - 1];\n-\n+                    ) = &statement.kind {\n                         return Some((*offset, PlaceRef {\n                             base,\n                             projection: proj_base,"}]}