{"sha": "c9e3cb678d556926c491d977550fbd805892d4af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZTNjYjY3OGQ1NTY5MjZjNDkxZDk3NzU1MGZiZDgwNTg5MmQ0YWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-10T12:44:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:25Z"}, "message": "test -- add new tests specifically examining closure borrows", "tree": {"sha": "cd0d71605230181eb9ad34b13fb2c35898ba01d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0d71605230181eb9ad34b13fb2c35898ba01d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e3cb678d556926c491d977550fbd805892d4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e3cb678d556926c491d977550fbd805892d4af", "html_url": "https://github.com/rust-lang/rust/commit/c9e3cb678d556926c491d977550fbd805892d4af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e3cb678d556926c491d977550fbd805892d4af/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3805c5416e0df7c6a3214e980a145a34119f4ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3805c5416e0df7c6a3214e980a145a34119f4ad5", "html_url": "https://github.com/rust-lang/rust/commit/3805c5416e0df7c6a3214e980a145a34119f4ad5"}], "stats": {"total": 296, "additions": 296, "deletions": 0}, "files": [{"sha": "006f475b29d4ec87663a09888dfc50b0a284e9a0", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=c9e3cb678d556926c491d977550fbd805892d4af", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that two closures cannot simultaneously have mutable\n+// and immutable access to the variable. Issue #6801.\n+\n+fn get(x: &int) -> int {\n+    *x\n+}\n+\n+fn set(x: &mut int) {\n+    *x = 4;\n+}\n+\n+fn a() {\n+    let mut x = 3;\n+    let c1 = || x = 4;\n+    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+}\n+\n+fn b() {\n+    let mut x = 3;\n+    let c1 = || set(&mut x);\n+    let c2 = || get(&x); //~ ERROR cannot borrow `x`\n+}\n+\n+fn c() {\n+    let mut x = 3;\n+    let c1 = || set(&mut x);\n+    let c2 = || x * 5; //~ ERROR cannot borrow `x`\n+}\n+\n+fn d() {\n+    let mut x = 3;\n+    let c2 = || x * 5;\n+    x = 5; //~ ERROR cannot assign\n+}\n+\n+fn e() {\n+    let mut x = 3;\n+    let c1 = || get(&x);\n+    x = 5; //~ ERROR cannot assign\n+}\n+\n+fn f() {\n+    let mut x = ~3;\n+    let c1 = || get(&*x);\n+    *x = 5; //~ ERROR cannot assign\n+}\n+\n+fn g() {\n+    struct Foo {\n+        f: ~int\n+    }\n+\n+    let mut x = ~Foo { f: ~3 };\n+    let c1 = || get(&*x.f);\n+    *x.f = 5; //~ ERROR cannot assign to `*x.f`\n+}\n+\n+fn h() {\n+    struct Foo {\n+        f: ~int\n+    }\n+\n+    let mut x = ~Foo { f: ~3 };\n+    let c1 = || get(&*x.f);\n+    let c2 = || *x.f = 5; //~ ERROR cannot borrow `x` as mutable\n+}\n+\n+fn main() {\n+}"}, {"sha": "cdfb569762de35a68af839830fb700b0a3e37e23", "filename": "src/test/compile-fail/borrowck-closures-mut-of-imm.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-of-imm.rs?ref=c9e3cb678d556926c491d977550fbd805892d4af", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that two closures cannot simultaneously have mutable\n+// and immutable access to the variable. Issue #6801.\n+\n+fn get(x: &int) -> int {\n+    *x\n+}\n+\n+fn set(x: &mut int) {\n+    *x = 4;\n+}\n+\n+fn a(x: &int) {\n+    let c1 = || set(&mut *x);\n+    //~^ ERROR cannot borrow\n+    let c2 = || set(&mut *x);\n+    //~^ ERROR closure requires unique access to `x`\n+    //~^^ ERROR cannot borrow\n+}\n+\n+fn main() {\n+}"}, {"sha": "570249aed443b5c7d5f2fdf5cd2679bec11ea801", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=c9e3cb678d556926c491d977550fbd805892d4af", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that two closures cannot simultaneously have mutable\n+// access to the variable, whether that mutable access be used\n+// for direct assignment or for taking mutable ref. Issue #6801.\n+\n+fn a() {\n+    let mut x = 3;\n+    let c1 = || x = 4;\n+    let c2 = || x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n+}\n+\n+fn set(x: &mut int) {\n+    *x = 4;\n+}\n+\n+fn b() {\n+    let mut x = 3;\n+    let c1 = || set(&mut x);\n+    let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+}\n+\n+fn c() {\n+    let mut x = 3;\n+    let c1 = || x = 5;\n+    let c2 = || set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n+}\n+\n+fn d() {\n+    let mut x = 3;\n+    let c1 = || x = 5;\n+    let c2 = || { let _y = || set(&mut x); }; // (nested closure)\n+    //~^ ERROR cannot borrow `x` as mutable more than once\n+}\n+\n+fn g() {\n+    struct Foo {\n+        f: ~int\n+    }\n+\n+    let mut x = ~Foo { f: ~3 };\n+    let c1 = || set(&mut *x.f);\n+    let c2 = || set(&mut *x.f);\n+    //~^ ERROR cannot borrow `x` as mutable more than once\n+}\n+\n+fn main() {\n+}"}, {"sha": "80d942e58d15c7e36129d47ae6babed1bab99e03", "filename": "src/test/compile-fail/borrowck-closures-unique.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-unique.rs?ref=c9e3cb678d556926c491d977550fbd805892d4af", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that a closure which requires mutable access to the referent\n+// of an `&mut` requires a \"unique\" borrow -- that is, the variable to\n+// be borrowed (here, `x`) will not be borrowed *mutably*, but\n+//  may be *immutable*, but we cannot allow\n+// multiple borrows.\n+\n+fn get(x: &int) -> int {\n+    *x\n+}\n+\n+fn set(x: &mut int) -> int {\n+    *x\n+}\n+\n+fn a(x: &mut int) {\n+    let c1 = || get(x);\n+    let c2 = || get(x);\n+}\n+\n+fn b(x: &mut int) {\n+    let c1 = || get(x);\n+    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+}\n+\n+fn c(x: &mut int) {\n+    let c1 = || get(x);\n+    let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+}\n+\n+fn d(x: &mut int) {\n+    let c1 = || set(x);\n+    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+}\n+\n+fn e(x: &mut int) {\n+    let c1: || = || x = fail!(); //~ ERROR closure cannot assign to immutable argument `x`\n+}\n+\n+fn main() {\n+}"}, {"sha": "38c13b1fce94f086947eac155299e33d06b7f5c8", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=c9e3cb678d556926c491d977550fbd805892d4af", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that a closure which mutates a local variable\n+// cannot also be supplied a borrowed version of that\n+// variable's contents. Issue #11192.\n+\n+struct Foo {\n+  x: int\n+}\n+\n+impl Drop for Foo {\n+  fn drop(&mut self) {\n+    println!(\"drop {}\", self.x);\n+  }\n+}\n+\n+fn main() {\n+  let mut ptr = ~Foo { x: 0 };\n+  let test = |foo: &Foo| {\n+    ptr = ~Foo { x: ptr.x + 1 };\n+  };\n+  test(ptr); //~ ERROR cannot borrow `*ptr`\n+}"}, {"sha": "3bd12b030411e17b3340f4e502b18bdf06633338", "filename": "src/test/run-pass/borrowck-closures-two-imm.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e3cb678d556926c491d977550fbd805892d4af/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-closures-two-imm.rs?ref=c9e3cb678d556926c491d977550fbd805892d4af", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests that two closures can simultaneously have immutable\n+// access to the variable, whether that immutable access be used\n+// for direct reads or for taking immutable ref. Also check\n+// that the main function can read the variable too while\n+// the closures are in scope. Issue #6801.\n+\n+fn a() -> int {\n+    let mut x = 3;\n+    x += 1;\n+    let c1 = || x * 4;\n+    let c2 = || x * 5;\n+    c1() * c2() * x\n+}\n+\n+fn get(x: &int) -> int {\n+    *x * 4\n+}\n+\n+fn b() -> int {\n+    let mut x = 3;\n+    x += 1;\n+    let c1 = || get(&x);\n+    let c2 = || get(&x);\n+    c1() * c2() * x\n+}\n+\n+fn c() -> int {\n+    let mut x = 3;\n+    x += 1;\n+    let c1 = || x * 5;\n+    let c2 = || get(&x);\n+    c1() * c2() * x\n+}\n+\n+pub fn main() {\n+    assert_eq!(a(), 1280);\n+    assert_eq!(b(), 1024);\n+    assert_eq!(c(), 1280);\n+}"}]}