{"sha": "fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjBhOGJlMGQ3NGE3MDI2MjY3YWY1YzlhMGNkMjUxZWVhYmE3YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-30T16:41:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-30T16:41:05Z"}, "message": "Auto merge of #81453 - jumbatm:clashing-extern-decl-perf, r=nagisa\n\nclashing_extern_declarations: Use symbol interning to avoid string alloc.\n\nUse symbol interning as a hack to avoid allocating a string for every symbol name we store in the seen set. This hopefully addresses the minor perf regression described in https://github.com/rust-lang/rust/pull/80009#issuecomment-763526902.\n\nr? `@nagisa`", "tree": {"sha": "b6b045350dba330fe1bf7cf3d13687720346e0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6b045350dba330fe1bf7cf3d13687720346e0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "html_url": "https://github.com/rust-lang/rust/commit/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7", "html_url": "https://github.com/rust-lang/rust/commit/7ce1b3b24491cbe10669cbe2b5733c2fe7cfe5b7"}, {"sha": "a1a78304658d8caadb6e2f145be3eca659b49c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1a78304658d8caadb6e2f145be3eca659b49c17", "html_url": "https://github.com/rust-lang/rust/commit/a1a78304658d8caadb6e2f145be3eca659b49c17"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d0e44550ee6e7a1675dd8192b417484ed03d131f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "patch": "@@ -2607,7 +2607,7 @@ pub struct ClashingExternDeclarations {\n     /// the symbol should be reported as a clashing declaration.\n     // FIXME: Technically, we could just store a &'tcx str here without issue; however, the\n     // `impl_lint_pass` macro doesn't currently support lints parametric over a lifetime.\n-    seen_decls: FxHashMap<String, HirId>,\n+    seen_decls: FxHashMap<Symbol, HirId>,\n }\n \n /// Differentiate between whether the name for an extern decl came from the link_name attribute or\n@@ -2641,14 +2641,14 @@ impl ClashingExternDeclarations {\n         let local_did = tcx.hir().local_def_id(fi.hir_id);\n         let did = local_did.to_def_id();\n         let instance = Instance::new(did, ty::List::identity_for_item(tcx, did));\n-        let name = tcx.symbol_name(instance).name;\n-        if let Some(&hir_id) = self.seen_decls.get(name) {\n+        let name = Symbol::intern(tcx.symbol_name(instance).name);\n+        if let Some(&hir_id) = self.seen_decls.get(&name) {\n             // Avoid updating the map with the new entry when we do find a collision. We want to\n             // make sure we're always pointing to the first definition as the previous declaration.\n             // This lets us avoid emitting \"knock-on\" diagnostics.\n             Some(hir_id)\n         } else {\n-            self.seen_decls.insert(name.to_owned(), hid)\n+            self.seen_decls.insert(name, hid)\n         }\n     }\n "}]}