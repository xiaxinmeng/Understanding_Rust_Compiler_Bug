{"sha": "8c416c31975764c97812aa33eaa10c74d521d47e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNDE2YzMxOTc1NzY0Yzk3ODEyYWEzM2VhYTEwYzc0ZDUyMWQ0N2U=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-26T08:49:55Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-26T09:57:15Z"}, "message": "Prevent incorrect cast_lossless suggestion in const_fn\n\n`::from` is not a const fn, so applying the suggestion of\n`cast_lossless` would fail to compile. The fix is to skip the lint if\nthe cast is found inside a const fn.", "tree": {"sha": "625d2efd078310d7bc68f5a137998da7482febd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/625d2efd078310d7bc68f5a137998da7482febd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c416c31975764c97812aa33eaa10c74d521d47e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxMLvwACgkQtvoGpuDi\nZlvwrhAAoqcyUw5kw95RbyBy/X1VTf27U7Tpq+DIAxMBNutdltJP6w4cU++0NRUM\nUCHUsOkBv6pq9KKBYSArUKcRuTCVQ7M6iXaLG7WAD32dHrvCYFmDtIAxV17203m9\njquwOU1tqibgiTLO70xx1z7a8RwUtI6APszlLH3HrnNWYeLYEgTMAqX9ZOZxqaDt\nYq1DwT17y2Z+hOoC/0pg1P/oTq+1h5DxvQkGKcr06A7p752PY84lgImH2KRlitq0\nm/4JVOoY5F5jwaQHx9rSL4An8q0OdlUsAtIO1cUtrChaXkA++klXSEW4opOK6QDw\nz9C0eyMD5Fp+b5iheIMY3W0nmTSW3ya4llFf1nRioXmFR2vMp/Os2LGupu1eWtSs\nz7d7eDqfwhzDLgTFfp3P1hZqRrS94z/7XSzDtS9gYZQhziVz1DJ6H34evRSElo87\nKH/ob2lu2RfZwJr/2eyac/AvQEGeEcW6Ovh9tohy0r/IWSpZuWBNabJkFsOmfxWM\nRnKQ6FXTF3TbUR1fgaGEFQ4mBYlYQjQDHzBLYQNisndjElcmf2Z2t8x15soJVIzD\nLh1IxlEviRZSKEzBCi62MUemXRodQoWOwj5xA2nP1L/IluDzBFgTIrIi2zlq/Zrj\n5KCF6Zhqx57ODTYIx9R5MykZTC1c4Yl6XjNPRcZlOn4hJFoQlSo=\n=dKtg\n-----END PGP SIGNATURE-----", "payload": "tree 625d2efd078310d7bc68f5a137998da7482febd4\nparent f1753522d8f3bb2d218266b4760f7a99f027f5ca\nauthor Philipp Hansch <dev@phansch.net> 1548492595 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1548496635 +0100\n\nPrevent incorrect cast_lossless suggestion in const_fn\n\n`::from` is not a const fn, so applying the suggestion of\n`cast_lossless` would fail to compile. The fix is to skip the lint if\nthe cast is found inside a const fn.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c416c31975764c97812aa33eaa10c74d521d47e", "html_url": "https://github.com/rust-lang/rust/commit/8c416c31975764c97812aa33eaa10c74d521d47e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c416c31975764c97812aa33eaa10c74d521d47e/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1753522d8f3bb2d218266b4760f7a99f027f5ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1753522d8f3bb2d218266b4760f7a99f027f5ca", "html_url": "https://github.com/rust-lang/rust/commit/f1753522d8f3bb2d218266b4760f7a99f027f5ca"}], "stats": {"total": 108, "additions": 72, "deletions": 36}, "files": [{"sha": "9df0896068ad631d9a590394bba17e5d6d2668bd", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c416c31975764c97812aa33eaa10c74d521d47e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c416c31975764c97812aa33eaa10c74d521d47e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8c416c31975764c97812aa33eaa10c74d521d47e", "patch": "@@ -82,6 +82,10 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: NodeId) -> bool {\n             node: ItemKind::Static(..),\n             ..\n         }) => true,\n+        Node::Item(&Item {\n+            node: ItemKind::Fn(_, header, ..),\n+            ..\n+        }) => header.constness == Constness::Const,\n         _ => false,\n     }\n }"}, {"sha": "cc3b007ee5d08595594a9247d89f62f41b40c7ed", "filename": "tests/ui/cast_lossless_float.fixed", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.fixed?ref=8c416c31975764c97812aa33eaa10c74d521d47e", "patch": "@@ -1,7 +1,8 @@\n // run-rustfix\n \n-#[warn(clippy::cast_lossless)]\n-#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n     f32::from(1i8);\n@@ -15,3 +16,10 @@ fn main() {\n     f64::from(1i32);\n     f64::from(1u32);\n }\n+\n+// The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: f32) -> f64 {\n+    input as f64\n+}"}, {"sha": "6684afa0ede3e7761e4c02a562f4e5beb70bdfb9", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=8c416c31975764c97812aa33eaa10c74d521d47e", "patch": "@@ -1,7 +1,8 @@\n // run-rustfix\n \n-#[warn(clippy::cast_lossless)]\n-#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n     1i8 as f32;\n@@ -15,3 +16,10 @@ fn main() {\n     1i32 as f64;\n     1u32 as f64;\n }\n+\n+// The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: f32) -> f64 {\n+    input as f64\n+}"}, {"sha": "691ce72399efa6b7b483ab5dfee95a4993d422b7", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=8c416c31975764c97812aa33eaa10c74d521d47e", "patch": "@@ -1,61 +1,61 @@\n error: casting i8 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:7:5\n+  --> $DIR/cast_lossless_float.rs:8:5\n    |\n LL |     1i8 as f32;\n    |     ^^^^^^^^^^ help: try: `f32::from(1i8)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting i8 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:8:5\n+  --> $DIR/cast_lossless_float.rs:9:5\n    |\n LL |     1i8 as f64;\n    |     ^^^^^^^^^^ help: try: `f64::from(1i8)`\n \n error: casting u8 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:9:5\n+  --> $DIR/cast_lossless_float.rs:10:5\n    |\n LL |     1u8 as f32;\n    |     ^^^^^^^^^^ help: try: `f32::from(1u8)`\n \n error: casting u8 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:10:5\n+  --> $DIR/cast_lossless_float.rs:11:5\n    |\n LL |     1u8 as f64;\n    |     ^^^^^^^^^^ help: try: `f64::from(1u8)`\n \n error: casting i16 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:11:5\n+  --> $DIR/cast_lossless_float.rs:12:5\n    |\n LL |     1i16 as f32;\n    |     ^^^^^^^^^^^ help: try: `f32::from(1i16)`\n \n error: casting i16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:12:5\n+  --> $DIR/cast_lossless_float.rs:13:5\n    |\n LL |     1i16 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1i16)`\n \n error: casting u16 to f32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:13:5\n+  --> $DIR/cast_lossless_float.rs:14:5\n    |\n LL |     1u16 as f32;\n    |     ^^^^^^^^^^^ help: try: `f32::from(1u16)`\n \n error: casting u16 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:14:5\n+  --> $DIR/cast_lossless_float.rs:15:5\n    |\n LL |     1u16 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u16)`\n \n error: casting i32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:15:5\n+  --> $DIR/cast_lossless_float.rs:16:5\n    |\n LL |     1i32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1i32)`\n \n error: casting u32 to f64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_float.rs:16:5\n+  --> $DIR/cast_lossless_float.rs:17:5\n    |\n LL |     1u32 as f64;\n    |     ^^^^^^^^^^^ help: try: `f64::from(1u32)`"}, {"sha": "6c384e7d38cf7a266ab6f8114adb00ec69a8ad84", "filename": "tests/ui/cast_lossless_integer.fixed", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_integer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_integer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.fixed?ref=8c416c31975764c97812aa33eaa10c74d521d47e", "patch": "@@ -1,7 +1,8 @@\n // run-rustfix\n \n-#[warn(clippy::cast_lossless)]\n-#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n fn main() {\n     // Test clippy::cast_lossless with casts to integer types\n     i16::from(1i8);\n@@ -23,3 +24,10 @@ fn main() {\n     i64::from(1u32);\n     u64::from(1u32);\n }\n+\n+// The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: u16) -> u32 {\n+    input as u32\n+}"}, {"sha": "35970bca88c861e1c012eeebcf3b1e5784e3df9c", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=8c416c31975764c97812aa33eaa10c74d521d47e", "patch": "@@ -1,7 +1,8 @@\n // run-rustfix\n \n-#[warn(clippy::cast_lossless)]\n-#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(clippy::no_effect, clippy::unnecessary_operation, dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n fn main() {\n     // Test clippy::cast_lossless with casts to integer types\n     1i8 as i16;\n@@ -23,3 +24,10 @@ fn main() {\n     1u32 as i64;\n     1u32 as u64;\n }\n+\n+// The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: u16) -> u32 {\n+    input as u32\n+}"}, {"sha": "ff98ec84a14857520f3846346c2298bed946e140", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c416c31975764c97812aa33eaa10c74d521d47e/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=8c416c31975764c97812aa33eaa10c74d521d47e", "patch": "@@ -1,109 +1,109 @@\n error: casting i8 to i16 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:7:5\n+  --> $DIR/cast_lossless_integer.rs:8:5\n    |\n LL |     1i8 as i16;\n    |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting i8 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:8:5\n+  --> $DIR/cast_lossless_integer.rs:9:5\n    |\n LL |     1i8 as i32;\n    |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n \n error: casting i8 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:9:5\n+  --> $DIR/cast_lossless_integer.rs:10:5\n    |\n LL |     1i8 as i64;\n    |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n \n error: casting u8 to i16 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:10:5\n+  --> $DIR/cast_lossless_integer.rs:11:5\n    |\n LL |     1u8 as i16;\n    |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n \n error: casting u8 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:11:5\n+  --> $DIR/cast_lossless_integer.rs:12:5\n    |\n LL |     1u8 as i32;\n    |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n \n error: casting u8 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:12:5\n+  --> $DIR/cast_lossless_integer.rs:13:5\n    |\n LL |     1u8 as i64;\n    |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n \n error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:13:5\n+  --> $DIR/cast_lossless_integer.rs:14:5\n    |\n LL |     1u8 as u16;\n    |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n \n error: casting u8 to u32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:14:5\n+  --> $DIR/cast_lossless_integer.rs:15:5\n    |\n LL |     1u8 as u32;\n    |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n \n error: casting u8 to u64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:15:5\n+  --> $DIR/cast_lossless_integer.rs:16:5\n    |\n LL |     1u8 as u64;\n    |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n \n error: casting i16 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:16:5\n+  --> $DIR/cast_lossless_integer.rs:17:5\n    |\n LL |     1i16 as i32;\n    |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n \n error: casting i16 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:17:5\n+  --> $DIR/cast_lossless_integer.rs:18:5\n    |\n LL |     1i16 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n \n error: casting u16 to i32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:18:5\n+  --> $DIR/cast_lossless_integer.rs:19:5\n    |\n LL |     1u16 as i32;\n    |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n \n error: casting u16 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:19:5\n+  --> $DIR/cast_lossless_integer.rs:20:5\n    |\n LL |     1u16 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n \n error: casting u16 to u32 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:20:5\n+  --> $DIR/cast_lossless_integer.rs:21:5\n    |\n LL |     1u16 as u32;\n    |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n \n error: casting u16 to u64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:21:5\n+  --> $DIR/cast_lossless_integer.rs:22:5\n    |\n LL |     1u16 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n \n error: casting i32 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:22:5\n+  --> $DIR/cast_lossless_integer.rs:23:5\n    |\n LL |     1i32 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n \n error: casting u32 to i64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:23:5\n+  --> $DIR/cast_lossless_integer.rs:24:5\n    |\n LL |     1u32 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n \n error: casting u32 to u64 may become silently lossy if types change\n-  --> $DIR/cast_lossless_integer.rs:24:5\n+  --> $DIR/cast_lossless_integer.rs:25:5\n    |\n LL |     1u32 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`"}]}