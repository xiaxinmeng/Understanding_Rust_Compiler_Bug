{"sha": "8360a40a8a2ff2098eed561dd89c577349dbbb76", "node_id": "C_kwDOAAsO6NoAKDgzNjBhNDBhOGEyZmYyMDk4ZWVkNTYxZGQ4OWM1NzczNDlkYmJiNzY", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-09-08T19:28:00Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-12-28T11:53:47Z"}, "message": "Migrate named_anon_conflict.rs", "tree": {"sha": "06112d8f43aec7b1def49a9f5797d7b5049ff3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06112d8f43aec7b1def49a9f5797d7b5049ff3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8360a40a8a2ff2098eed561dd89c577349dbbb76", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmOsLksACgkQspeR1Nh4\n40VOpA//ZPnYfdymoGuCiy42k2nIDkpjMTxy/8rbRxcZF4KFdmwME/YTbvTbdgIY\nw/RA2SD69/dVk6WrRZdCL/0D0SFZcqltluXL0FSSGavqMvb4su4IhQmlvQ1RXX2h\nusG3lmMQUAvfxpslFkUNfrrocd/LLBcCD8DGVvkyDtws0ZNBZUcesxQW8KMh8XWO\nkqVZY4BNS9zELlGYKC008PiYhSmQO/f5a3ps+ZXIz9AXfnRPm4gfUmWWz7BCVUON\ni98GAqPWz555JNbyNudU3Rchj9UVwElXmBV4u45AenWhwCL+1JDk6DAiFJ9yXbAq\nv9NCmjlzPmAPSAG4/1/j2CWotgeOKXXKsqyGC/eZmxKTdYShVYLFbk7uV+PRovco\nrZJmK/umMu8T8Xw6eI+cqmDHaiMmZMS+BB+nqdaKeZqvCq1Esaf6Zd4wk+NYXIbc\npjABbUwy6pC4x9Rl8qtEzBGaxssLswE9IQQq8Yd38fN9DfOYjTo+WFgZGUdUwD5l\nrfKPx+8XqWYyhSq5nt4WAetxowDdOvatnA7ThIiaWAsCCBJ8HzQeS0kvw1gA2AUM\ng5QO6XHpDbzjv1uMWYqf9qJQdqs8aAk0gTRKI58qYwaFqRzoHAujrz1hlRQ+rxmg\nXLJMh8XFoWDe1NCBVBplfb9V42Z6oZVauTON7xO35FRdmK6eG4g=\n=ULlf\n-----END PGP SIGNATURE-----", "payload": "tree 06112d8f43aec7b1def49a9f5797d7b5049ff3d2\nparent 9b889e53e78a186a861a8407c225f9d8e0d436f5\nauthor Nikita Tomashevich <quant3234@gmail.com> 1662665280 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1672228427 +0300\n\nMigrate named_anon_conflict.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8360a40a8a2ff2098eed561dd89c577349dbbb76", "html_url": "https://github.com/rust-lang/rust/commit/8360a40a8a2ff2098eed561dd89c577349dbbb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8360a40a8a2ff2098eed561dd89c577349dbbb76/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b889e53e78a186a861a8407c225f9d8e0d436f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b889e53e78a186a861a8407c225f9d8e0d436f5", "html_url": "https://github.com/rust-lang/rust/commit/9b889e53e78a186a861a8407c225f9d8e0d436f5"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "40ca2c1cd1626394af34a4d4158f418c3915a164", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8360a40a8a2ff2098eed561dd89c577349dbbb76/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8360a40a8a2ff2098eed561dd89c577349dbbb76/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=8360a40a8a2ff2098eed561dd89c577349dbbb76", "patch": "@@ -172,3 +172,14 @@ infer_msl_unmet_req = because this has an unmet lifetime requirement\n infer_msl_trait_note = this has an implicit `'static` lifetime requirement\n infer_msl_trait_sugg = consider relaxing the implicit `'static` requirement\n infer_suggest_add_let_for_letchains = consider adding `let`\n+\n+infer_explicit_lifetime_required = explicit lifetime required in {$ident_kind ->\n+    [ident] the type of `{$simple_ident}`\n+    *[param_type] parameter type\n+}\n+    .label = lifetime `{$named}` required\n+\n+infer_explicit_lifetime_required_sugg = add explicit lifetime `{$named}` to {$ident_kind ->\n+    [ident] the type of `{$simple_ident}`\n+    *[param_type] type\n+}"}, {"sha": "99112397c7f689a4d1008cb379e862bbfdffc805", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8360a40a8a2ff2098eed561dd89c577349dbbb76/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8360a40a8a2ff2098eed561dd89c577349dbbb76/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=8360a40a8a2ff2098eed561dd89c577349dbbb76", "patch": "@@ -357,8 +357,8 @@ impl AddToDiagnostic for LifetimeMismatchLabels {\n pub struct AddLifetimeParamsSuggestion<'a> {\n     pub tcx: TyCtxt<'a>,\n     pub sub: Region<'a>,\n-    pub ty_sup: &'a Ty<'a>,\n-    pub ty_sub: &'a Ty<'a>,\n+    pub ty_sup: &'a hir::Ty<'a>,\n+    pub ty_sub: &'a hir::Ty<'a>,\n     pub add_note: bool,\n }\n \n@@ -520,3 +520,23 @@ pub struct MismatchedStaticLifetime<'a> {\n     #[subdiagnostic]\n     pub implicit_static_lifetimes: Vec<ImplicitStaticLifetimeSubdiag>,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(infer::explicit_lifetime_required, code = \"E0621\")]\n+pub struct ExplicitLifetimeRequired<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub ident_kind: &'static str,\n+    pub simple_ident: String,\n+    pub named: String,\n+\n+    #[suggestion(\n+        infer::explicit_lifetime_required_sugg,\n+        code = \"{new_ty}\",\n+        applicability = \"unspecified\"\n+    )]\n+    pub new_ty_span: Span,\n+    #[skip_arg]\n+    pub new_ty: Ty<'a>,\n+}"}, {"sha": "d7751158902b8bfc90446396f1a7895f1f919ef6", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8360a40a8a2ff2098eed561dd89c577349dbbb76/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8360a40a8a2ff2098eed561dd89c577349dbbb76/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=8360a40a8a2ff2098eed561dd89c577349dbbb76", "patch": "@@ -1,8 +1,11 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n-use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use crate::{\n+    errors::ExplicitLifetimeRequired,\n+    infer::error_reporting::nice_region_error::find_anon_type::find_anon_type,\n+};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n use rustc_middle::ty;\n use rustc_span::symbol::kw;\n \n@@ -87,30 +90,17 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None;\n         }\n \n-        let (error_var, span_label_var) = match param.pat.simple_ident() {\n-            Some(simple_ident) => (\n-                format!(\"the type of `{}`\", simple_ident),\n-                format!(\"the type of `{}`\", simple_ident),\n-            ),\n-            None => (\"parameter type\".to_owned(), \"type\".to_owned()),\n+        let simple_ident = param.pat.simple_ident();\n+        let (ident_kind, simple_ident) = match simple_ident {\n+            Some(ident) => (\"ident\", ident.to_string()),\n+            None => (\"param_type\", String::new()),\n         };\n \n-        let mut diag = struct_span_err!(\n-            self.tcx().sess,\n-            span,\n-            E0621,\n-            \"explicit lifetime required in {}\",\n-            error_var\n-        );\n-\n-        diag.span_label(span, format!(\"lifetime `{}` required\", named));\n-        diag.span_suggestion(\n-            new_ty_span,\n-            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-            new_ty,\n-            Applicability::Unspecified,\n-        );\n+        let named = named.to_string();\n \n-        Some(diag)\n+        let err =\n+            ExplicitLifetimeRequired { span, ident_kind, simple_ident, named, new_ty_span, new_ty };\n+        let err = self.tcx().sess.parse_sess.create_err(err);\n+        Some(err)\n     }\n }"}]}