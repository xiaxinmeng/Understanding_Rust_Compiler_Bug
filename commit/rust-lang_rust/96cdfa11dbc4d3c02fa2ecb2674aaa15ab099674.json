{"sha": "96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Y2RmYTExZGJjNGQzYzAyZmEyZWNiMjY3NGFhYTE1YWIwOTk2NzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-14T05:34:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:16:42Z"}, "message": "correct translation of neg. numbers in 64-bit architectures", "tree": {"sha": "1a9d1faf2ad4f102a9541216dc92505c81b2a8be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a9d1faf2ad4f102a9541216dc92505c81b2a8be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "html_url": "https://github.com/rust-lang/rust/commit/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cabfb3a395995083468b29d8cc061cd1d9ef6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cabfb3a395995083468b29d8cc061cd1d9ef6bf", "html_url": "https://github.com/rust-lang/rust/commit/5cabfb3a395995083468b29d8cc061cd1d9ef6bf"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "60225b35a520c113ac6c94476bbc27b53474ba23", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "patch": "@@ -2142,15 +2142,15 @@ fn trans_crate_lit(cx: @crate_ctxt, lit: ast::lit) -> ValueRef {\n           ast::ty_i32. { t = T_i32(); }\n           ast::ty_i64. { t = T_i64(); }\n         }\n-        ret C_integral(t, i as uint, s);\n+        ret C_integral(t, i as u64, s);\n       }\n       ast::lit_float(fs) { ret C_float(cx, fs); }\n       ast::lit_mach_float(tm, s) {\n         let t = cx.float_type;\n         alt tm { ast::ty_f32. { t = T_f32(); } ast::ty_f64. { t = T_f64(); } }\n         ret C_floating(s, t);\n       }\n-      ast::lit_char(c) { ret C_integral(T_char(), c as uint, False); }\n+      ast::lit_char(c) { ret C_integral(T_char(), c as u64, False); }\n       ast::lit_bool(b) { ret C_bool(b); }\n       ast::lit_nil. { ret C_nil(); }\n       ast::lit_str(s) {"}, {"sha": "276a7460f8cfc7bb21808f6dc5b7aa26c66f6196", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=96cdfa11dbc4d3c02fa2ecb2674aaa15ab099674", "patch": "@@ -724,14 +724,8 @@ fn T_opaque_chan_ptr() -> TypeRef { ret T_ptr(T_i8()); }\n // LLVM constant constructors.\n fn C_null(t: TypeRef) -> ValueRef { ret llvm::LLVMConstNull(t); }\n \n-fn C_integral(t: TypeRef, u: uint, sign_extend: Bool) -> ValueRef {\n-    // FIXME: We can't use LLVM::ULongLong with our existing minimal native\n-    // API, which only knows word-sized args.\n-    //\n-    // ret llvm::LLVMConstInt(.int_type, t as LLVM::ULongLong, False);\n-    //\n-\n-    ret llvm::LLVMRustConstSmallInt(t, u, sign_extend);\n+fn C_integral(t: TypeRef, u: u64, sign_extend: Bool) -> ValueRef {\n+    ret llvm::LLVMConstInt(t, u, sign_extend);\n }\n \n fn C_float(cx: @crate_ctxt, s: str) -> ValueRef {\n@@ -747,28 +741,28 @@ fn C_floating(s: str, t: TypeRef) -> ValueRef {\n fn C_nil() -> ValueRef {\n     // NB: See comment above in T_void().\n \n-    ret C_integral(T_i1(), 0u, False);\n+    ret C_integral(T_i1(), 0u64, False);\n }\n \n fn C_bool(b: bool) -> ValueRef {\n     if b {\n-        ret C_integral(T_bool(), 1u, False);\n-    } else { ret C_integral(T_bool(), 0u, False); }\n+        ret C_integral(T_bool(), 1u64, False);\n+    } else { ret C_integral(T_bool(), 0u64, False); }\n }\n \n fn C_i32(i: i32) -> ValueRef {\n-    ret C_integral(T_i32(), i as uint, True);\n+    ret C_integral(T_i32(), i as u64, True);\n }\n \n fn C_int(cx: @crate_ctxt, i: int) -> ValueRef {\n-    ret C_integral(cx.int_type, i as uint, True);\n+    ret C_integral(cx.int_type, i as u64, True);\n }\n \n fn C_uint(cx: @crate_ctxt, i: uint) -> ValueRef {\n-    ret C_integral(cx.int_type, i, False);\n+    ret C_integral(cx.int_type, i as u64, False);\n }\n \n-fn C_u8(i: uint) -> ValueRef { ret C_integral(T_i8(), i, False); }\n+fn C_u8(i: uint) -> ValueRef { ret C_integral(T_i8(), i as u64, False); }\n \n \n // This is a 'c-like' raw string, which differs from"}]}