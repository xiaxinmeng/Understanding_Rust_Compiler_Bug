{"sha": "ac46091e82d7af37dc03c2a31b736eeb44408c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDYwOTFlODJkN2FmMzdkYzAzYzJhMzFiNzM2ZWViNDQ0MDhjN2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-04T09:15:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-04T09:15:23Z"}, "message": "Auto merge of #41733 - nikomatsakis:incr-comp-remove-ast-ty-to-ty-cache, r=eddyb\n\nRemove ast-ty-to-ty cache\n\nAs discussed on IRC, this basically just removes the cache, and rewrites rustdoc and save-analysis so call into the astconv code. It *might* make sense for this to be a more fine-grained query, but that would (at least) require us to be using `HirId` and not `NodeId`.\n\n(Perhaps I should open a FIXME?)\n\nI didn't measure perf impact (yet?). I did observe that the cache seems to hit *rarely* -- and only in between items (I experimented with a cache \"per def-id\", but that had zero hits). In other words, every single hit on the cache is a dependency bug, since it is \"shuttling\" information between items without dependency edges.\n\nr? @eddyb", "tree": {"sha": "41bcfa71c105724a45d6089b9cdd706acd5474de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41bcfa71c105724a45d6089b9cdd706acd5474de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac46091e82d7af37dc03c2a31b736eeb44408c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac46091e82d7af37dc03c2a31b736eeb44408c7a", "html_url": "https://github.com/rust-lang/rust/commit/ac46091e82d7af37dc03c2a31b736eeb44408c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac46091e82d7af37dc03c2a31b736eeb44408c7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "html_url": "https://github.com/rust-lang/rust/commit/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad"}, {"sha": "3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9", "html_url": "https://github.com/rust-lang/rust/commit/3f2dd4d24a1fae4a985ab360028b42ca1e9c61e9"}], "stats": {"total": 103, "additions": 43, "deletions": 60}, "files": [{"sha": "5fa0829f2f8d1ffdf00eef6ad3493075d1b561c2", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -723,6 +723,7 @@ dependencies = [\n  \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_typeck 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -793,6 +794,7 @@ dependencies = [\n  \"rustc_metadata 0.0.0\",\n  \"rustc_resolve 0.0.0\",\n  \"rustc_trans 0.0.0\",\n+ \"rustc_typeck 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "42528aac633cb33c93ab974adcd88f7482f0047e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -566,9 +566,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// error reporting, and so is lazily initialised and generally\n     /// shouldn't taint the common path (hence the RefCell).\n     pub all_traits: RefCell<Option<Vec<DefId>>>,\n-\n-    /// HIR Ty -> Ty lowering cache.\n-    pub ast_ty_to_ty_cache: RefCell<NodeMap<Ty<'tcx>>>,\n }\n \n impl<'tcx> GlobalCtxt<'tcx> {\n@@ -786,7 +783,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             derive_macros: RefCell::new(NodeMap()),\n             stability_interner: RefCell::new(FxHashSet()),\n             all_traits: RefCell::new(None),\n-            ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n        }, f)\n     }\n "}, {"sha": "702c4b691c9860568c61cb20b145b81250fea92d", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -11,6 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n log = \"0.3\"\n rustc = { path = \"../librustc\" }\n+rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rls-data = \"0.1\""}, {"sha": "763414c1a555fb2250b958da9899e51b333e79fd", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -122,7 +122,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             f(self);\n             self.save_ctxt.tables = old_tables;\n         } else {\n-            f(self)\n+            f(self);\n         }\n     }\n "}, {"sha": "fd6898d19d84fce59cea36b0ffbaff53e5f56aaa", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -27,6 +27,7 @@\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n extern crate rustc_serialize;\n+extern crate rustc_typeck;\n extern crate syntax_pos;\n \n extern crate rls_data;\n@@ -50,6 +51,7 @@ use rustc::hir::def_id::DefId;\n use rustc::session::config::CrateType::CrateTypeExecutable;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n+use rustc_typeck::hir_ty_to_ty;\n \n use std::env;\n use std::fs::File;\n@@ -606,11 +608,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 Def::Local(def_id)\n             }\n \n-            Node::NodeTy(&hir::Ty { node: hir::TyPath(ref qpath), .. }) => {\n-                match *qpath {\n-                    hir::QPath::Resolved(_, ref path) => path.def,\n-                    hir::QPath::TypeRelative(..) => {\n-                        if let Some(ty) = self.tcx.ast_ty_to_ty_cache.borrow().get(&id) {\n+            Node::NodeTy(ty) => {\n+                if let hir::Ty { node: hir::TyPath(ref qpath), .. } = *ty {\n+                    match *qpath {\n+                        hir::QPath::Resolved(_, ref path) => path.def,\n+                        hir::QPath::TypeRelative(..) => {\n+                            let ty = hir_ty_to_ty(self.tcx, ty);\n                             if let ty::TyProjection(proj) = ty.sty {\n                                 for item in self.tcx.associated_items(proj.trait_ref.def_id) {\n                                     if item.kind == ty::AssociatedKind::Type {\n@@ -620,9 +623,11 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                                     }\n                                 }\n                             }\n+                            Def::Err\n                         }\n-                        Def::Err\n                     }\n+                } else {\n+                    Def::Err\n                 }\n             }\n "}, {"sha": "33b0aa3dbfffe3bcb2df7c0ebc34f4562de967c4", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -25,9 +25,8 @@ use rustc::ty::wf::object_region_bounds;\n use rustc_back::slice;\n use require_c_abi_if_variadic;\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n-use util::nodemap::{NodeMap, FxHashSet};\n+use util::nodemap::FxHashSet;\n \n-use std::cell::RefCell;\n use std::iter;\n use syntax::{abi, ast};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -37,9 +36,6 @@ use syntax_pos::Span;\n pub trait AstConv<'gcx, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'a, 'gcx, 'tcx>;\n \n-    /// A cache used for the result of `ast_ty_to_ty_cache`\n-    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>>;\n-\n     /// Returns the set of bounds in scope for the type parameter with\n     /// the given id.\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n@@ -1074,11 +1070,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let tcx = self.tcx();\n \n-        let cache = self.ast_ty_to_ty_cache();\n-        if let Some(ty) = cache.borrow().get(&ast_ty.id) {\n-            return ty;\n-        }\n-\n         let result_ty = match ast_ty.node {\n             hir::TySlice(ref ty) => {\n                 tcx.mk_slice(self.ast_ty_to_ty(&ty))\n@@ -1240,8 +1231,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n         };\n \n-        cache.borrow_mut().insert(ast_ty.id, result_ty);\n-\n         result_ty\n     }\n "}, {"sha": "b0b57aee5b2537c1652ef0e7dc7b72e26f7795cd", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -965,10 +965,6 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n         }\n     }\n \n-    pub fn is_empty(&self) -> bool {\n-        self.pushed == 0\n-    }\n-\n     /// Return the \"expected type\" with which this coercion was\n     /// constructed.  This represents the \"downward propagated\" type\n     /// that was given to us at the start of typing whatever construct"}, {"sha": "e22c198fdb4dd4ae945d1ac3e165ed8f8a0c762d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -451,8 +451,6 @@ impl<'gcx, 'tcx> EnclosingBreakables<'gcx, 'tcx> {\n }\n \n pub struct FnCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n-    ast_ty_to_ty_cache: RefCell<NodeMap<Ty<'tcx>>>,\n-\n     body_id: ast::NodeId,\n \n     // Number of errors that had been reported when we started\n@@ -1516,10 +1514,6 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }\n \n-    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>> {\n-        &self.ast_ty_to_ty_cache\n-    }\n-\n     fn get_free_substs(&self) -> Option<&Substs<'tcx>> {\n         Some(&self.parameter_environment.free_substs)\n     }\n@@ -1621,7 +1615,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n         FnCtxt {\n-            ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n             body_id: body_id,\n             err_count_on_creation: inh.tcx.sess.err_count(),\n             ret_coercion: None,"}, {"sha": "49440037af57572f5f6f81fb7d244a32f820dd14", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -43,7 +43,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_liberated_fn_sigs();\n         wbcx.visit_fru_field_types();\n         wbcx.visit_anon_types();\n-        wbcx.visit_type_nodes();\n         wbcx.visit_cast_types();\n         wbcx.visit_lints();\n         wbcx.visit_free_region_map();\n@@ -442,13 +441,6 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn visit_type_nodes(&self) {\n-        for (&id, ty) in self.fcx.ast_ty_to_ty_cache.borrow().iter() {\n-            let ty = self.resolve(ty, &id);\n-            self.fcx.tcx.ast_ty_to_ty_cache.borrow_mut().insert(id, ty);\n-        }\n-    }\n-\n     fn resolve<T>(&self, x: &T, span: &Locatable) -> T::Lifted\n         where T: TypeFoldable<'tcx> + ty::Lift<'gcx>\n     {"}, {"sha": "f44f74830cbb99849d144c48585feaa882a2e818", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -64,11 +64,10 @@ use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n-use util::nodemap::{NodeMap, FxHashMap};\n+use util::nodemap::FxHashMap;\n \n use rustc_const_math::ConstInt;\n \n-use std::cell::RefCell;\n use std::collections::BTreeMap;\n \n use syntax::{abi, ast};\n@@ -116,7 +115,7 @@ pub fn provide(providers: &mut Providers) {\n /// `ItemCtxt` is parameterized by a `DefId` that it uses to satisfy\n /// `get_type_parameter_bounds` requests, drawing the information from\n /// the AST (`hir::Generics`), recursively.\n-struct ItemCtxt<'a,'tcx:'a> {\n+pub struct ItemCtxt<'a,'tcx:'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     item_def_id: DefId,\n }\n@@ -180,7 +179,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n // Utility types and common code for the above passes.\n \n impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n-    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)\n            -> ItemCtxt<'a,'tcx> {\n         ItemCtxt {\n             tcx: tcx,\n@@ -190,18 +189,14 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n }\n \n impl<'a,'tcx> ItemCtxt<'a,'tcx> {\n-    fn to_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> {\n+    pub fn to_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> {\n         AstConv::ast_ty_to_ty(self, ast_ty)\n     }\n }\n \n impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'tcx, 'tcx> { self.tcx }\n \n-    fn ast_ty_to_ty_cache(&self) -> &RefCell<NodeMap<Ty<'tcx>>> {\n-        &self.tcx.ast_ty_to_ty_cache\n-    }\n-\n     fn get_type_parameter_bounds(&self,\n                                  span: Span,\n                                  def_id: DefId)"}, {"sha": "8bfa38f765ebd501665fdea2f3830c822a5e9ef5", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -122,14 +122,14 @@ use std::iter;\n // registered before they are used.\n pub mod diagnostics;\n \n-pub mod check;\n-pub mod check_unused;\n+mod check;\n+mod check_unused;\n mod astconv;\n-pub mod collect;\n+mod collect;\n mod constrained_type_params;\n mod impl_wf_check;\n-pub mod coherence;\n-pub mod variance;\n+mod coherence;\n+mod variance;\n \n pub struct TypeAndSubsts<'tcx> {\n     pub substs: &'tcx Substs<'tcx>,\n@@ -337,4 +337,16 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     }\n }\n \n+/// A quasi-deprecated helper used in rustdoc and save-analysis to get\n+/// the type from a HIR node.\n+pub fn hir_ty_to_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_ty: &hir::Ty) -> Ty<'tcx> {\n+    // In case there are any projections etc, find the \"environment\"\n+    // def-id that will be used to determine the traits/predicates in\n+    // scope.  This is derived from the enclosing item-like thing.\n+    let env_node_id = tcx.hir.get_parent(hir_ty.id);\n+    let env_def_id = tcx.hir.local_def_id(env_node_id);\n+    let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id);\n+    item_cx.to_ty(hir_ty)\n+}\n+\n __build_diagnostic_array! { librustc_typeck, DIAGNOSTICS }"}, {"sha": "0e8a6606ae79f387aca5d2d7941e2225a98e75af", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -21,6 +21,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_resolve = { path = \"../librustc_resolve\" }\n+rustc_typeck = { path = \"../librustc_typeck\" }\n rustc_trans = { path = \"../librustc_trans\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "24d056035ceec541da0eea065acee215154dbd58", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -36,6 +36,7 @@ use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtKind};\n use rustc::middle::stability;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_typeck::hir_ty_to_ty;\n \n use rustc::hir;\n \n@@ -1779,10 +1780,9 @@ impl Clean<Type> for hir::Ty {\n             }\n             TyPath(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n                 let mut def = Def::Err;\n-                if let Some(ty) = cx.tcx.ast_ty_to_ty_cache.borrow().get(&self.id) {\n-                    if let ty::TyProjection(proj) = ty.sty {\n-                        def = Def::Trait(proj.trait_ref.def_id);\n-                    }\n+                let ty = hir_ty_to_ty(cx.tcx, self);\n+                if let ty::TyProjection(proj) = ty.sty {\n+                    def = Def::Trait(proj.trait_ref.def_id);\n                 }\n                 let trait_path = hir::Path {\n                     span: self.span,"}, {"sha": "d4be1aba62d23587e2ebbd7e044be862d08c929e", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac46091e82d7af37dc03c2a31b736eeb44408c7a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ac46091e82d7af37dc03c2a31b736eeb44408c7a", "patch": "@@ -41,6 +41,7 @@ extern crate rustc_resolve;\n extern crate rustc_lint;\n extern crate rustc_back;\n extern crate rustc_metadata;\n+extern crate rustc_typeck;\n extern crate serialize;\n #[macro_use] extern crate syntax;\n extern crate syntax_pos;"}]}