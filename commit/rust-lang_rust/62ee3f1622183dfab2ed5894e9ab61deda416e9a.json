{"sha": "62ee3f1622183dfab2ed5894e9ab61deda416e9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZWUzZjE2MjIxODNkZmFiMmVkNTg5NGU5YWI2MWRlZGE0MTZlOWE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T04:26:38Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:05Z"}, "message": "rustc: fix fallout", "tree": {"sha": "5591a15da29083aa813e207ca58358a5fb0d57d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5591a15da29083aa813e207ca58358a5fb0d57d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ee3f1622183dfab2ed5894e9ab61deda416e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ee3f1622183dfab2ed5894e9ab61deda416e9a", "html_url": "https://github.com/rust-lang/rust/commit/62ee3f1622183dfab2ed5894e9ab61deda416e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ee3f1622183dfab2ed5894e9ab61deda416e9a/comments", "author": null, "committer": null, "parents": [{"sha": "6b19a02080b816d0f416872e63f9b2dd90165c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b19a02080b816d0f416872e63f9b2dd90165c0f", "html_url": "https://github.com/rust-lang/rust/commit/6b19a02080b816d0f416872e63f9b2dd90165c0f"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "122171e469108639178925a2e70b62b716bb075c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -28,6 +28,7 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(unboxed_closures)]\n #![feature(old_orphan_check)]\n+#![feature(associated_types)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "17663a127a881ed7c62dc9daf3553697a6ce9539", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -364,7 +364,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n     }\n }\n \n-fn encode_path<PI: Iterator<PathElem>>(rbml_w: &mut Encoder, path: PI) {\n+fn encode_path<PI: Iterator<Item=PathElem>>(rbml_w: &mut Encoder, path: PI) {\n     let path = path.collect::<Vec<_>>();\n     rbml_w.start_tag(tag_path);\n     rbml_w.wr_tagged_u32(tag_path_len, path.len() as u32);"}, {"sha": "a7b28a6323eaff7e09d43f18e6180bbad77b1003", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn pats_all<'b, I: Iterator<&'b P<ast::Pat>>>(&mut self,\n+    fn pats_all<'b, I: Iterator<Item=&'b P<ast::Pat>>>(&mut self,\n                                           pats: I,\n                                           pred: CFGIndex) -> CFGIndex {\n         //! Handles case where all of the patterns must match.\n@@ -501,7 +501,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn call<'b, I: Iterator<&'b ast::Expr>>(&mut self,\n+    fn call<'b, I: Iterator<Item=&'b ast::Expr>>(&mut self,\n             call_expr: &ast::Expr,\n             pred: CFGIndex,\n             func_or_rcvr: &ast::Expr,\n@@ -521,7 +521,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         }\n     }\n \n-    fn exprs<'b, I: Iterator<&'b ast::Expr>>(&mut self,\n+    fn exprs<'b, I: Iterator<Item=&'b ast::Expr>>(&mut self,\n                                              exprs: I,\n                                              pred: CFGIndex) -> CFGIndex {\n         //! Constructs graph for `exprs` evaluated in order\n@@ -535,7 +535,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         opt_expr.iter().fold(pred, |p, e| self.expr(&**e, p))\n     }\n \n-    fn straightline<'b, I: Iterator<&'b ast::Expr>>(&mut self,\n+    fn straightline<'b, I: Iterator<Item=&'b ast::Expr>>(&mut self,\n                     expr: &ast::Expr,\n                     pred: CFGIndex,\n                     subexprs: I) -> CFGIndex {"}, {"sha": "4151f5fa627ee8568fae470d18c5b9e3f7d468e4", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -92,7 +92,7 @@ impl<'a> fmt::Show for Matrix<'a> {\n }\n \n impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> {\n-    fn from_iter<T: Iterator<Vec<&'a Pat>>>(iterator: T) -> Matrix<'a> {\n+    fn from_iter<T: Iterator<Item=Vec<&'a Pat>>>(iterator: T) -> Matrix<'a> {\n         Matrix(iterator.collect())\n     }\n }"}, {"sha": "96b2a62326b17f13b62ee280c50f9f95ec002d44", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -81,7 +81,7 @@ pub fn join(a: constness, b: constness) -> constness {\n     }\n }\n \n-pub fn join_all<It: Iterator<constness>>(cs: It) -> constness {\n+pub fn join_all<It: Iterator<Item=constness>>(cs: It) -> constness {\n     cs.fold(integral_const, |a, b| join(a, b))\n }\n "}, {"sha": "e8efdda3888a71aee027fde148870e56112920fa", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -305,7 +305,9 @@ pub struct DepthFirstTraversal<'g, N:'g, E:'g> {\n     visited: BitvSet\n }\n \n-impl<'g, N, E> Iterator<&'g N> for DepthFirstTraversal<'g, N, E> {\n+impl<'g, N, E> Iterator for DepthFirstTraversal<'g, N, E> {\n+    type Item = &'g N;\n+\n     fn next(&mut self) -> Option<&'g N> {\n         while let Some(idx) = self.stack.pop() {\n             if !self.visited.insert(idx.node_id()) {"}, {"sha": "e7971a82119ecfa8b2a515b92b7e5e904b8a5127", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -494,7 +494,9 @@ impl<'a,T> EnumeratedItems<'a,T> {\n     }\n }\n \n-impl<'a,T> Iterator<(ParamSpace, uint, &'a T)> for EnumeratedItems<'a,T> {\n+impl<'a,T> Iterator for EnumeratedItems<'a,T> {\n+    type Item = (ParamSpace, uint, &'a T);\n+\n     fn next(&mut self) -> Option<(ParamSpace, uint, &'a T)> {\n         let spaces = ParamSpace::all();\n         if self.space_index < spaces.len() {"}, {"sha": "bd901ff431a84d001fc67e0ce307f5c1cae3eb06", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -297,7 +297,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                                 stack: Option<&TraitObligationStack<'o, 'tcx>>,\n                                                 mut predicates: I)\n                                                 -> EvaluationResult<'tcx>\n-        where I : Iterator<&'a PredicateObligation<'tcx>>, 'tcx:'a\n+        where I : Iterator<Item=&'a PredicateObligation<'tcx>>, 'tcx:'a\n     {\n         let mut result = EvaluatedToOk;\n         for obligation in predicates {\n@@ -2315,9 +2315,9 @@ impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {\n     }\n }\n \n-impl<'o, 'tcx> Iterator<&'o TraitObligationStack<'o,'tcx>>\n-           for Option<&'o TraitObligationStack<'o, 'tcx>>\n-{\n+impl<'o, 'tcx> Iterator for Option<&'o TraitObligationStack<'o, 'tcx>> {\n+    type Item = &'o TraitObligationStack<'o,'tcx>;\n+\n     fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {\n         match *self {\n             Some(o) => {"}, {"sha": "e4578f74763298c4740e35b0bbb71782f319e49c", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -133,7 +133,9 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx> Iterator<ty::Predicate<'tcx>> for Elaborator<'cx, 'tcx> {\n+impl<'cx, 'tcx> Iterator for Elaborator<'cx, 'tcx> {\n+    type Item = ty::Predicate<'tcx>;\n+\n     fn next(&mut self) -> Option<ty::Predicate<'tcx>> {\n         loop {\n             // Extract next item from top-most stack frame, if any.\n@@ -197,7 +199,9 @@ pub fn transitive_bounds<'cx, 'tcx>(tcx: &'cx ty::ctxt<'tcx>,\n     elaborate_trait_refs(tcx, bounds).filter_to_traits()\n }\n \n-impl<'cx, 'tcx> Iterator<ty::PolyTraitRef<'tcx>> for Supertraits<'cx, 'tcx> {\n+impl<'cx, 'tcx> Iterator for Supertraits<'cx, 'tcx> {\n+    type Item = ty::PolyTraitRef<'tcx>;\n+\n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n         loop {\n             match self.elaborator.next() {"}, {"sha": "f786ef8afee99df3451a81b5c0511e5aaa221d0b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -3716,10 +3716,10 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n                                    -> Representability {\n \n     // Iterate until something non-representable is found\n-    fn find_nonrepresentable<'tcx, It: Iterator<Ty<'tcx>>>(cx: &ctxt<'tcx>, sp: Span,\n-                                                           seen: &mut Vec<Ty<'tcx>>,\n-                                                           iter: It)\n-                                                           -> Representability {\n+    fn find_nonrepresentable<'tcx, It: Iterator<Item=Ty<'tcx>>>(cx: &ctxt<'tcx>, sp: Span,\n+                                                                seen: &mut Vec<Ty<'tcx>>,\n+                                                                iter: It)\n+                                                                -> Representability {\n         iter.fold(Representable,\n                   |r, ty| cmp::max(r, is_type_structurally_recursive(cx, sp, seen, ty)))\n     }"}, {"sha": "12df36c10fc097780d0ac72398112bafca607ce7", "filename": "src/librustc/middle/ty_walk.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -94,7 +94,9 @@ impl<'tcx> TypeWalker<'tcx> {\n     }\n }\n \n-impl<'tcx> Iterator<Ty<'tcx>> for TypeWalker<'tcx> {\n+impl<'tcx> Iterator for TypeWalker<'tcx> {\n+    type Item = Ty<'tcx>;\n+\n     fn next(&mut self) -> Option<Ty<'tcx>> {\n         debug!(\"next(): stack={}\", self.stack);\n         match self.stack.pop() {"}, {"sha": "14ea2d3d33a267fba12fc72cad6b67a40226e9c2", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ee3f1622183dfab2ed5894e9ab61deda416e9a/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=62ee3f1622183dfab2ed5894e9ab61deda416e9a", "patch": "@@ -53,7 +53,9 @@ impl SearchPaths {\n     }\n }\n \n-impl<'a> Iterator<&'a Path> for Iter<'a> {\n+impl<'a> Iterator for Iter<'a> {\n+    type Item = &'a Path;\n+\n     fn next(&mut self) -> Option<&'a Path> {\n         loop {\n             match self.iter.next() {"}]}