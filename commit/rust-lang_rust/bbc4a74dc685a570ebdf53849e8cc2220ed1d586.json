{"sha": "bbc4a74dc685a570ebdf53849e8cc2220ed1d586", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYzRhNzRkYzY4NWE1NzBlYmRmNTM4NDllOGNjMjIyMGVkMWQ1ODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T00:49:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T01:30:58Z"}, "message": "rt: Fix shape alignment of 64-bit ints on x86. Issue #2303", "tree": {"sha": "8faa33cdd2944106cdd6d9b94ca8dac962a9833f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8faa33cdd2944106cdd6d9b94ca8dac962a9833f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc4a74dc685a570ebdf53849e8cc2220ed1d586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc4a74dc685a570ebdf53849e8cc2220ed1d586", "html_url": "https://github.com/rust-lang/rust/commit/bbc4a74dc685a570ebdf53849e8cc2220ed1d586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc4a74dc685a570ebdf53849e8cc2220ed1d586/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e15640adacd1f0cab8617d62f445024915e5214", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e15640adacd1f0cab8617d62f445024915e5214", "html_url": "https://github.com/rust-lang/rust/commit/8e15640adacd1f0cab8617d62f445024915e5214"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "64b1cd2deb89aadc98e84623d911a2333a798f4d", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbc4a74dc685a570ebdf53849e8cc2220ed1d586/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/bbc4a74dc685a570ebdf53849e8cc2220ed1d586/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=bbc4a74dc685a570ebdf53849e8cc2220ed1d586", "patch": "@@ -123,6 +123,18 @@ rust_alignof<double>() {\n     return 4;\n }\n \n+// Issue #2303\n+// On 32-bit x86 the alignment of 64-bit ints in structures is 4 bytes\n+// Which is different from the preferred 8-byte alignment reported\n+// by __alignof__ (at least on gcc).\n+#ifdef __i386__\n+template<>\n+inline size_t\n+rust_alignof<uint64_t>() {\n+    return 4;\n+}\n+#endif\n+\n \n // Utility classes\n "}, {"sha": "d1c464faa7d3f440d3e0cf7083c67513cf92ef39", "filename": "src/test/run-pass/rec-align-32-bit.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bbc4a74dc685a570ebdf53849e8cc2220ed1d586/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc4a74dc685a570ebdf53849e8cc2220ed1d586/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-32-bit.rs?ref=bbc4a74dc685a570ebdf53849e8cc2220ed1d586", "patch": "@@ -0,0 +1,45 @@\n+// xfail-pretty\n+// Issue #2303\n+\n+// This is the type with the questionable alignment\n+type inner = {\n+    c64: u64\n+};\n+\n+// This is the type that contains the type with the\n+// questionable alignment, for testing\n+type outer = {\n+    c8: u8,\n+    t: inner\n+};\n+\n+#[cfg(target_arch = \"x86\")]\n+fn main() {\n+\n+    let x = {c8: 22u8, t: {c64: 44u64}};\n+\n+    // Send it through the shape code\n+    let y = #fmt[\"%?\", x];\n+\n+    #debug(\"align inner = %?\", sys::align_of::<inner>()); // 8\n+    #debug(\"size outer = %?\", sys::size_of::<outer>());   // 12\n+    #debug(\"y = %s\", y);                                  // (22, (0))\n+\n+    // per clang/gcc the alignment of `inner` is 4 on x86.\n+    // we say it's 8\n+    //assert sys::align_of::<inner>() == 4u; // fails\n+\n+    // per clang/gcc the size of `outer` should be 12\n+    // because `inner`s alignment was 4.\n+    // LLVM packs the struct the way clang likes, despite\n+    // our intents regarding the alignment of `inner` and\n+    // we end up with the same size `outer` as clang\n+    assert sys::size_of::<outer>() == 12u; // passes\n+\n+    // But now our shape code doesn't find the inner struct\n+    // We print (22, (0))\n+    assert y == \"(22, (44))\"; // fails\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+fn main() { }"}]}