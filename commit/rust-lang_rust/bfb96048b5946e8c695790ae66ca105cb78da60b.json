{"sha": "bfb96048b5946e8c695790ae66ca105cb78da60b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjk2MDQ4YjU5NDZlOGM2OTU3OTBhZTY2Y2ExMDVjYjc4ZGE2MGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-20T15:52:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-20T15:52:57Z"}, "message": "Auto merge of #69145 - matthewjasper:mir-typeck-static-ty, r=nikomatsakis\n\nFix MIR typeck soundness holes\n\n* Check types of static items\n* Always check lifetime bounds of `Copy` impls\n\nr? @nikomatsakis\ncloses #69114", "tree": {"sha": "d296d6d28b4b62fc51b0caae381994090254c90d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d296d6d28b4b62fc51b0caae381994090254c90d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb96048b5946e8c695790ae66ca105cb78da60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb96048b5946e8c695790ae66ca105cb78da60b", "html_url": "https://github.com/rust-lang/rust/commit/bfb96048b5946e8c695790ae66ca105cb78da60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb96048b5946e8c695790ae66ca105cb78da60b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93711d063b2e369d7095ddd4c76c33c886411730", "url": "https://api.github.com/repos/rust-lang/rust/commits/93711d063b2e369d7095ddd4c76c33c886411730", "html_url": "https://github.com/rust-lang/rust/commit/93711d063b2e369d7095ddd4c76c33c886411730"}, {"sha": "ddc25456c5945457ba86cb60994ce9872bd98edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc25456c5945457ba86cb60994ce9872bd98edd", "html_url": "https://github.com/rust-lang/rust/commit/ddc25456c5945457ba86cb60994ce9872bd98edd"}], "stats": {"total": 177, "additions": 148, "deletions": 29}, "files": [{"sha": "f4e1bce462f55bee6345d6b817d892cd4e2a471e", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 41, "deletions": 29, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -313,6 +313,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                 );\n             }\n         } else {\n+            let tcx = self.tcx();\n             if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = constant.literal.val {\n                 if let Some(promoted) = promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n@@ -362,10 +363,23 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         );\n                     }\n                 }\n+            } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {\n+                let unnormalized_ty = tcx.type_of(static_def_id);\n+                let locations = location.to_locations();\n+                let normalized_ty = self.cx.normalize(unnormalized_ty, locations);\n+                let literal_ty = constant.literal.ty.builtin_deref(true).unwrap().ty;\n+\n+                if let Err(terr) = self.cx.eq_types(\n+                    normalized_ty,\n+                    literal_ty,\n+                    locations,\n+                    ConstraintCategory::Boring,\n+                ) {\n+                    span_mirbug!(self, constant, \"bad static type {:?} ({:?})\", constant, terr);\n+                }\n             }\n-            if let ty::FnDef(def_id, substs) = constant.literal.ty.kind {\n-                let tcx = self.tcx();\n \n+            if let ty::FnDef(def_id, substs) = constant.literal.ty.kind {\n                 let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n                 self.cx.normalize_and_prove_instantiated_predicates(\n                     instantiated_predicates,\n@@ -470,33 +484,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         let mut place_ty = PlaceTy::from_ty(self.body.local_decls[place.local].ty);\n \n-        if place.projection.is_empty() {\n-            if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n-                let tcx = self.tcx();\n-                let trait_ref = ty::TraitRef {\n-                    def_id: tcx.lang_items().copy_trait().unwrap(),\n-                    substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n-                };\n-\n-                // To have a `Copy` operand, the type `T` of the\n-                // value must be `Copy`. Note that we prove that `T: Copy`,\n-                // rather than using the `is_copy_modulo_regions`\n-                // test. This is important because\n-                // `is_copy_modulo_regions` ignores the resulting region\n-                // obligations and assumes they pass. This can result in\n-                // bounds from `Copy` impls being unsoundly ignored (e.g.,\n-                // #29149). Note that we decide to use `Copy` before knowing\n-                // whether the bounds fully apply: in effect, the rule is\n-                // that if a value of some type could implement `Copy`, then\n-                // it must.\n-                self.cx.prove_trait_ref(\n-                    trait_ref,\n-                    location.to_locations(),\n-                    ConstraintCategory::CopyBound,\n-                );\n-            }\n-        }\n-\n         for elem in place.projection.iter() {\n             if place_ty.variant_index.is_none() {\n                 if place_ty.ty.references_error() {\n@@ -507,6 +494,31 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             place_ty = self.sanitize_projection(place_ty, elem, place, location)\n         }\n \n+        if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n+            let tcx = self.tcx();\n+            let trait_ref = ty::TraitRef {\n+                def_id: tcx.lang_items().copy_trait().unwrap(),\n+                substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n+            };\n+\n+            // To have a `Copy` operand, the type `T` of the\n+            // value must be `Copy`. Note that we prove that `T: Copy`,\n+            // rather than using the `is_copy_modulo_regions`\n+            // test. This is important because\n+            // `is_copy_modulo_regions` ignores the resulting region\n+            // obligations and assumes they pass. This can result in\n+            // bounds from `Copy` impls being unsoundly ignored (e.g.,\n+            // #29149). Note that we decide to use `Copy` before knowing\n+            // whether the bounds fully apply: in effect, the rule is\n+            // that if a value of some type could implement `Copy`, then\n+            // it must.\n+            self.cx.prove_trait_ref(\n+                trait_ref,\n+                location.to_locations(),\n+                ConstraintCategory::CopyBound,\n+            );\n+        }\n+\n         place_ty\n     }\n "}, {"sha": "96c8719468f27c3f49ed40ee7ded108f435a690d", "filename": "src/test/ui/nll/do-not-ignore-lifetime-bounds-in-copy-proj.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -0,0 +1,12 @@\n+// Test that the 'static bound from the Copy impl is respected. Regression test for #29149.\n+\n+#[derive(Clone)]\n+struct Foo<'a>(&'a u32);\n+impl Copy for Foo<'static> {}\n+\n+fn main() {\n+    let s = 2;\n+    let a = (Foo(&s),); //~ ERROR `s` does not live long enough [E0597]\n+    drop(a.0);\n+    drop(a.0);\n+}"}, {"sha": "65be3b37e0e3bed31239ba5bc20258d2b006527a", "filename": "src/test/ui/nll/do-not-ignore-lifetime-bounds-in-copy-proj.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdo-not-ignore-lifetime-bounds-in-copy-proj.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -0,0 +1,14 @@\n+error[E0597]: `s` does not live long enough\n+  --> $DIR/do-not-ignore-lifetime-bounds-in-copy-proj.rs:9:18\n+   |\n+LL |     let a = (Foo(&s),);\n+   |                  ^^ borrowed value does not live long enough\n+LL |     drop(a.0);\n+   |          --- copying this value requires that `s` is borrowed for `'static`\n+LL |     drop(a.0);\n+LL | }\n+   | - `s` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "ce37da053e371b217091f16e6250f9c7cbc20a1a", "filename": "src/test/ui/nll/issue-69114-static-mut-ty.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-mut-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-mut-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-mut-ty.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -0,0 +1,30 @@\n+// Check that borrowck ensures that `static mut` items have the expected type.\n+\n+static FOO: u8 = 42;\n+static mut BAR: &'static u8 = &FOO;\n+static mut BAR_ELIDED: &u8 = &FOO;\n+\n+fn main() {\n+    unsafe {\n+        println!(\"{} {}\", BAR, BAR_ELIDED);\n+        set_bar();\n+        set_bar_elided();\n+        println!(\"{} {}\", BAR, BAR_ELIDED);\n+    }\n+}\n+\n+fn set_bar() {\n+    let n = 42;\n+    unsafe {\n+        BAR = &n;\n+        //~^ ERROR does not live long enough\n+    }\n+}\n+\n+fn set_bar_elided() {\n+    let n = 42;\n+    unsafe {\n+        BAR_ELIDED = &n;\n+        //~^ ERROR does not live long enough\n+    }\n+}"}, {"sha": "5e55cb502caa9c235d696fa1760a7d94223ec94a", "filename": "src/test/ui/nll/issue-69114-static-mut-ty.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-mut-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-mut-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-mut-ty.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -0,0 +1,27 @@\n+error[E0597]: `n` does not live long enough\n+  --> $DIR/issue-69114-static-mut-ty.rs:19:15\n+   |\n+LL |         BAR = &n;\n+   |         ------^^\n+   |         |     |\n+   |         |     borrowed value does not live long enough\n+   |         assignment requires that `n` is borrowed for `'static`\n+...\n+LL | }\n+   | - `n` dropped here while still borrowed\n+\n+error[E0597]: `n` does not live long enough\n+  --> $DIR/issue-69114-static-mut-ty.rs:27:22\n+   |\n+LL |         BAR_ELIDED = &n;\n+   |         -------------^^\n+   |         |            |\n+   |         |            borrowed value does not live long enough\n+   |         assignment requires that `n` is borrowed for `'static`\n+...\n+LL | }\n+   | - `n` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "3318433a1c56f5598db7a991db6551b9d4a4b09a", "filename": "src/test/ui/nll/issue-69114-static-ty.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-ty.rs?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -0,0 +1,9 @@\n+// Check that borrowck ensures that `static` items have the expected type.\n+\n+static FOO: &'static (dyn Fn(&'static u8) + Send + Sync) = &drop;\n+\n+fn main() {\n+    let n = 42;\n+    FOO(&n);\n+    //~^ ERROR does not live long enough\n+}"}, {"sha": "0815e74b5537d9a2bafa634329286a9aa5f7cde0", "filename": "src/test/ui/nll/issue-69114-static-ty.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfb96048b5946e8c695790ae66ca105cb78da60b/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-69114-static-ty.stderr?ref=bfb96048b5946e8c695790ae66ca105cb78da60b", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `n` does not live long enough\n+  --> $DIR/issue-69114-static-ty.rs:7:9\n+   |\n+LL |     FOO(&n);\n+   |     ----^^-\n+   |     |   |\n+   |     |   borrowed value does not live long enough\n+   |     argument requires that `n` is borrowed for `'static`\n+LL |\n+LL | }\n+   | - `n` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}