{"sha": "002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMmM3MGYyZDQ2ZTgwZmNiMDJlZTQyMTRkOWE0ZDQwNDFlZTAxMWM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-29T16:49:11Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-04T22:55:07Z"}, "message": "Introduce an arena type which may be used to allocate a list of types with destructors", "tree": {"sha": "dc1fb5a3608ac0d328d3225c4cbf555e47d57ad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc1fb5a3608ac0d328d3225c4cbf555e47d57ad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "html_url": "https://github.com/rust-lang/rust/commit/002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53f2165c544cceeafb308b80ace656ed328c1dc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f2165c544cceeafb308b80ace656ed328c1dc2", "html_url": "https://github.com/rust-lang/rust/commit/53f2165c544cceeafb308b80ace656ed328c1dc2"}], "stats": {"total": 188, "additions": 167, "deletions": 21}, "files": [{"sha": "23493d5c93f22d0cb362bb92f189a762185c4030", "filename": "src/librustc/arena.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -0,0 +1,94 @@\n+use arena::{TypedArena, DroplessArena};\n+\n+#[macro_export]\n+macro_rules! arena_types {\n+    ($macro:path, $args:tt, $tcx:lifetime) => (\n+        $macro!($args, [\n+            [] vtable_method: Option<(\n+                rustc::hir::def_id::DefId,\n+                rustc::ty::subst::SubstsRef<$tcx>\n+            )>,\n+            [decode] specialization_graph: rustc::traits::specialization_graph::Graph,\n+        ], $tcx);\n+    )\n+}\n+\n+macro_rules! declare_arena {\n+    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+        #[derive(Default)]\n+        pub struct Arena<$tcx> {\n+            dropless: DroplessArena,\n+            $($name: TypedArena<$ty>,)*\n+        }\n+    }\n+}\n+\n+macro_rules! impl_specialized_decodable {\n+    ([decode] $ty:ty, $tcx:lifetime) => {\n+        impl<$tcx> serialize::UseSpecializedDecodable for &$tcx $ty {}\n+    };\n+    ([] $ty:ty, $tcx:lifetime) => {};\n+}\n+\n+macro_rules! impl_arena_allocatable {\n+    ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+        $(\n+            impl_specialized_decodable!($a $ty, $tcx);\n+\n+            impl<$tcx> ArenaAllocatable<$tcx> for $ty {\n+                #[inline]\n+                fn arena<'a>(arena: &'a Arena<$tcx>) -> Option<&'a TypedArena<Self>> {\n+                    Some(&arena.$name)\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+arena_types!(declare_arena, [], 'tcx);\n+\n+arena_types!(impl_arena_allocatable, [], 'tcx);\n+\n+pub trait ArenaAllocatable<'tcx>: Sized {\n+    /// Returns a specific arena to allocate from if the type requires destructors.\n+    /// Otherwise it will return `None` to be allocated from the dropless arena.\n+    fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>>;\n+}\n+\n+impl<'tcx, T: Copy> ArenaAllocatable<'tcx> for T {\n+    #[inline]\n+    default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a TypedArena<Self>> {\n+        None\n+    }\n+}\n+\n+impl<'tcx> Arena<'tcx> {\n+    #[inline]\n+    pub fn alloc<T: ArenaAllocatable<'tcx>>(&self, value: T) -> &mut T {\n+        match T::arena(self) {\n+            Some(arena) => {\n+                arena.alloc(value)\n+            }\n+            None => {\n+                self.dropless.alloc(value)\n+            }\n+        }\n+    }\n+\n+    pub fn alloc_from_iter<\n+        T: ArenaAllocatable<'tcx>,\n+        I: IntoIterator<Item = T>\n+    >(\n+        &self,\n+        iter: I\n+    ) -> &mut [T] {\n+        match T::arena(self) {\n+            Some(arena) => {\n+                arena.alloc_from_iter(iter)\n+            }\n+            None => {\n+                self.dropless.alloc_from_iter(iter)\n+            }\n+        }\n+    }\n+}"}, {"sha": "ab44efa5decb9ba9718e438c018960247323c5fb", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -103,6 +103,8 @@ pub mod diagnostics;\n #[macro_use]\n pub mod query;\n \n+#[macro_use]\n+pub mod arena;\n pub mod cfg;\n pub mod dep_graph;\n pub mod hir;"}, {"sha": "a62a293954422c8612102a390a7d93d85ded9421", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -516,7 +516,7 @@ rustc_queries! {\n \n     Other {\n         query vtable_methods(key: ty::PolyTraitRef<'tcx>)\n-                            -> Lrc<Vec<Option<(DefId, SubstsRef<'tcx>)>>> {\n+                            -> &'tcx [Option<(DefId, SubstsRef<'tcx>)>] {\n             no_force\n             desc { |tcx| \"finding all methods for trait {}\", tcx.def_path_str(key.def_id()) }\n         }\n@@ -539,8 +539,7 @@ rustc_queries! {\n         query trait_impls_of(key: DefId) -> Lrc<ty::trait_def::TraitImpls> {\n             desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(key) }\n         }\n-        query specialization_graph_of(_: DefId)\n-            -> Lrc<specialization_graph::Graph> {}\n+        query specialization_graph_of(_: DefId) -> &'tcx specialization_graph::Graph {}\n         query is_object_safe(key: DefId) -> bool {\n             desc { |tcx| \"determine object safety of trait `{}`\", tcx.def_path_str(key) }\n         }"}, {"sha": "d91c08b070a1a62399ec7e27686b893116524a77", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -26,7 +26,6 @@ use crate::infer::{InferCtxt, SuppressRegionErrors};\n use crate::infer::outlives::env::OutlivesEnvironment;\n use crate::middle::region;\n use crate::mir::interpret::ErrorHandled;\n-use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -984,11 +983,11 @@ fn substitute_normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx\n fn vtable_methods<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n-    -> Lrc<Vec<Option<(DefId, SubstsRef<'tcx>)>>>\n+    -> &'tcx [Option<(DefId, SubstsRef<'tcx>)>]\n {\n     debug!(\"vtable_methods({:?})\", trait_ref);\n \n-    Lrc::new(\n+    tcx.arena.alloc_from_iter(\n         supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n             let trait_methods = tcx.associated_items(trait_ref.def_id())\n                 .filter(|item| item.kind == ty::AssociatedKind::Method);\n@@ -1039,7 +1038,7 @@ fn vtable_methods<'a, 'tcx>(\n \n                 Some((def_id, substs))\n             })\n-        }).collect()\n+        })\n     )\n }\n "}, {"sha": "384a5862cde0cda4d1305d6a7c26dc0458f26038", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -16,7 +16,6 @@ use crate::infer::{InferCtxt, InferOk};\n use crate::lint;\n use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause, TraitEngine};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use syntax_pos::DUMMY_SP;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::ty::{self, TyCtxt, TypeFoldable};\n@@ -289,7 +288,7 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n pub(super) fn specialization_graph_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_id: DefId,\n-) -> Lrc<specialization_graph::Graph> {\n+) -> &'tcx specialization_graph::Graph {\n     let mut sg = specialization_graph::Graph::new();\n \n     let mut trait_impls = tcx.all_impls(trait_id);\n@@ -383,7 +382,7 @@ pub(super) fn specialization_graph_provider<'a, 'tcx>(\n         }\n     }\n \n-    Lrc::new(sg)\n+    tcx.arena.alloc(sg)\n }\n \n /// Recovers the \"impl X for Y\" signature from `impl_def_id` and returns it as a"}, {"sha": "dae1518d722db2d1d4b466c5cc4624844bd3d6e4", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -7,7 +7,6 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n use crate::traits;\n use crate::ty::{self, TyCtxt, TypeFoldable};\n use crate::ty::fast_reject::{self, SimplifiedType};\n-use rustc_data_structures::sync::Lrc;\n use syntax::ast::Ident;\n use crate::util::captures::Captures;\n use crate::util::nodemap::{DefIdMap, FxHashMap};\n@@ -439,13 +438,13 @@ impl<'a, 'gcx, 'tcx> Node {\n     }\n }\n \n-pub struct Ancestors {\n+pub struct Ancestors<'tcx> {\n     trait_def_id: DefId,\n-    specialization_graph: Lrc<Graph>,\n+    specialization_graph: &'tcx Graph,\n     current_source: Option<Node>,\n }\n \n-impl Iterator for Ancestors {\n+impl Iterator for Ancestors<'_> {\n     type Item = Node;\n     fn next(&mut self) -> Option<Node> {\n         let cur = self.current_source.take();\n@@ -476,7 +475,7 @@ impl<T> NodeItem<T> {\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> Ancestors {\n+impl<'a, 'gcx, 'tcx> Ancestors<'gcx> {\n     /// Search the items from the given ancestors, returning each definition\n     /// with the given name and the given kind.\n     // FIXME(#35870): avoid closures being unexported due to `impl Trait`.\n@@ -509,10 +508,10 @@ impl<'a, 'gcx, 'tcx> Ancestors {\n \n /// Walk up the specialization ancestors of a given impl, starting with that\n /// impl itself.\n-pub fn ancestors(tcx: TyCtxt<'_, '_, '_>,\n+pub fn ancestors(tcx: TyCtxt<'_, 'tcx, '_>,\n                  trait_def_id: DefId,\n                  start_from_impl: DefId)\n-                 -> Ancestors {\n+                 -> Ancestors<'tcx> {\n     let specialization_graph = tcx.specialization_graph_of(trait_def_id);\n     Ancestors {\n         trait_def_id,"}, {"sha": "038cd9812e75c8b7e9aba12c33a4cb29e50ee839", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -6,6 +6,7 @@\n // The functionality in here is shared between persisting to crate metadata and\n // persisting to incr. comp. caches.\n \n+use crate::arena::ArenaAllocatable;\n use crate::hir::def_id::{DefId, CrateNum};\n use crate::infer::canonical::{CanonicalVarInfo, CanonicalVarInfos};\n use rustc_data_structures::fx::FxHashMap;\n@@ -130,6 +131,26 @@ pub trait TyDecoder<'a, 'tcx: 'a>: Decoder {\n     }\n }\n \n+#[inline]\n+pub fn decode_arena_allocable<'a, 'tcx, D, T: ArenaAllocatable<'tcx> + Decodable>(\n+    decoder: &mut D\n+) -> Result<&'tcx T, D::Error>\n+    where D: TyDecoder<'a, 'tcx>,\n+          'tcx: 'a,\n+{\n+    Ok(decoder.tcx().arena.alloc(Decodable::decode(decoder)?))\n+}\n+\n+#[inline]\n+pub fn decode_arena_allocable_slice<'a, 'tcx, D, T: ArenaAllocatable<'tcx> + Decodable>(\n+    decoder: &mut D\n+) -> Result<&'tcx [T], D::Error>\n+    where D: TyDecoder<'a, 'tcx>,\n+          'tcx: 'a,\n+{\n+    Ok(decoder.tcx().arena.alloc_from_iter(<Vec<T> as Decodable>::decode(decoder)?))\n+}\n+\n #[inline]\n pub fn decode_cnum<'a, 'tcx, D>(decoder: &mut D) -> Result<CrateNum, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -273,6 +294,35 @@ macro_rules! __impl_decoder_methods {\n     }\n }\n \n+#[macro_export]\n+macro_rules! impl_arena_allocatable_decoder {\n+    ([$DecoderName:ident [$($typaram:tt),*]], [[decode] $name:ident: $ty:ty], $tcx:lifetime) => {\n+        impl<$($typaram),*> SpecializedDecoder<&$tcx $ty> for $DecoderName<$($typaram),*> {\n+            #[inline]\n+            fn specialized_decode(&mut self) -> Result<&$tcx $ty, Self::Error> {\n+                decode_arena_allocable(self)\n+            }\n+        }\n+\n+        impl<$($typaram),*> SpecializedDecoder<&$tcx [$ty]> for $DecoderName<$($typaram),*> {\n+            #[inline]\n+            fn specialized_decode(&mut self) -> Result<&$tcx [$ty], Self::Error> {\n+                decode_arena_allocable_slice(self)\n+            }\n+        }\n+    };\n+    ([$DecoderName:ident [$($typaram:tt),*]], [[] $name:ident: $ty:ty], $tcx:lifetime) => {};\n+}\n+\n+#[macro_export]\n+macro_rules! impl_arena_allocatable_decoders {\n+    ($args:tt, [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n+        $(\n+            impl_arena_allocatable_decoder!($args, [$a $name: $ty], $tcx);\n+        )*\n+    }\n+}\n+\n #[macro_export]\n macro_rules! implement_ty_decoder {\n     ($DecoderName:ident <$($typaram:tt),*>) => {\n@@ -322,6 +372,8 @@ macro_rules! implement_ty_decoder {\n             // the caller to pick any lifetime for 'tcx, including 'static,\n             // by using the unspecialized proxies to them.\n \n+            arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n+\n             impl<$($typaram),*> SpecializedDecoder<CrateNum>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> {"}, {"sha": "7dc4dee3fbf9164901f569377af4552690911141", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -1,5 +1,6 @@\n //! Type context book-keeping.\n \n+use crate::arena::Arena;\n use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepNode, DepConstructor};\n use crate::session::Session;\n@@ -1003,6 +1004,7 @@ impl<'gcx> Deref for TyCtxt<'_, 'gcx, '_> {\n }\n \n pub struct GlobalCtxt<'tcx> {\n+    pub arena: WorkerLocal<Arena<'tcx>>,\n     global_arenas: &'tcx WorkerLocal<GlobalArenas<'tcx>>,\n     global_interners: CtxtInterners<'tcx>,\n \n@@ -1262,6 +1264,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         GlobalCtxt {\n             sess: s,\n             cstore,\n+            arena: WorkerLocal::new(|_| Arena::default()),\n             global_arenas: &arenas.global,\n             global_interners: interners,\n             dep_graph,"}, {"sha": "58f21893de143699069bfad6bcf6572c7fcfdc7e", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> TraitDef {\n \n     pub fn ancestors(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                      of_impl: DefId)\n-                     -> specialization_graph::Ancestors {\n+                     -> specialization_graph::Ancestors<'gcx> {\n         specialization_graph::ancestors(tcx, self.def_id, of_impl)\n     }\n }"}, {"sha": "5cfe7c496f54bc9e7270e06a42c30d8ff1217411", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -1,4 +1,3 @@\n-use rustc_data_structures::sync::Lrc;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, EvalResult, PointerArithmetic};\n@@ -35,7 +34,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n \n             self.tcx.vtable_methods(trait_ref)\n         } else {\n-            Lrc::new(Vec::new())\n+            &[]\n         };\n \n         let layout = self.layout_of(ty)?;"}, {"sha": "234435f40a0640358d478af112e04ad9292f002e", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002c70f2d46e80fcb02ee4214d9a4d4041ee011c/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=002c70f2d46e80fcb02ee4214d9a4d4041ee011c", "patch": "@@ -911,4 +911,4 @@ impl<T: UseSpecializedDecodable> Decodable for T {\n impl<'a, T: ?Sized + Encodable> UseSpecializedEncodable for &'a T {}\n impl<T: ?Sized + Encodable> UseSpecializedEncodable for Box<T> {}\n impl<T: Decodable> UseSpecializedDecodable for Box<T> {}\n-\n+impl<'a, T: ?Sized + Decodable> UseSpecializedDecodable for &'a [T] {}"}]}