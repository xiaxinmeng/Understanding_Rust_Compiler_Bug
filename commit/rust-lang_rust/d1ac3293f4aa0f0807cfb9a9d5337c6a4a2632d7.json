{"sha": "d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYWMzMjkzZjRhYTBmMDgwN2NmYjlhOWQ1MzM3YzZhNGEyNjMyZDc=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-17T00:52:36Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-17T00:57:38Z"}, "message": "Properly resolve completion edits for empty input", "tree": {"sha": "649b41f2e08e74e67b35475d4a6a431e36161061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649b41f2e08e74e67b35475d4a6a431e36161061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7", "html_url": "https://github.com/rust-lang/rust/commit/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09c11054a1b4886fdfd8f0bbb119aae0f264af1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/09c11054a1b4886fdfd8f0bbb119aae0f264af1a", "html_url": "https://github.com/rust-lang/rust/commit/09c11054a1b4886fdfd8f0bbb119aae0f264af1a"}], "stats": {"total": 81, "additions": 46, "deletions": 35}, "files": [{"sha": "5c04d5c41a5bf3503342e29da1ea9862188d4f37", "filename": "crates/completion/src/completions/flyimport.rs", "status": "modified", "additions": 42, "deletions": 31, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7", "patch": "@@ -85,7 +85,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     let user_input_lowercased = potential_import_name.to_lowercase();\n     let import_assets = import_assets(ctx, potential_import_name)?;\n     let import_scope = ImportScope::find_insert_use_container(\n-        position_for_import(ctx, import_assets.import_candidate())?,\n+        position_for_import(ctx, Some(import_assets.import_candidate()))?,\n         &ctx.sema,\n     )?;\n     let mut all_mod_paths = import_assets\n@@ -122,14 +122,20 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     Some(())\n }\n \n-fn position_for_import<'a>(\n+pub(crate) fn position_for_import<'a>(\n     ctx: &'a CompletionContext,\n-    import_candidate: &ImportCandidate,\n+    import_candidate: Option<&ImportCandidate>,\n ) -> Option<&'a SyntaxNode> {\n     Some(match import_candidate {\n-        ImportCandidate::Path(_) => ctx.name_ref_syntax.as_ref()?.syntax(),\n-        ImportCandidate::TraitAssocItem(_) => ctx.path_qual.as_ref()?.syntax(),\n-        ImportCandidate::TraitMethod(_) => ctx.dot_receiver.as_ref()?.syntax(),\n+        Some(ImportCandidate::Path(_)) => ctx.name_ref_syntax.as_ref()?.syntax(),\n+        Some(ImportCandidate::TraitAssocItem(_)) => ctx.path_qual.as_ref()?.syntax(),\n+        Some(ImportCandidate::TraitMethod(_)) => ctx.dot_receiver.as_ref()?.syntax(),\n+        None => ctx\n+            .name_ref_syntax\n+            .as_ref()\n+            .map(|name_ref| name_ref.syntax())\n+            .or_else(|| ctx.path_qual.as_ref().map(|path| path.syntax()))\n+            .or_else(|| ctx.dot_receiver.as_ref().map(|expr| expr.syntax()))?,\n     })\n }\n \n@@ -565,7 +571,8 @@ fn main() {\n \n     #[test]\n     fn blanket_trait_impl_import() {\n-        check(\n+        check_edit(\n+            \"another_function\",\n             r#\"\n //- /lib.rs crate:dep\n pub mod test_mod {\n@@ -583,38 +590,42 @@ fn main() {\n     dep::test_mod::TestStruct::ano$0\n }\n \"#,\n-            expect![[r#\"\n-                fn another_function() (dep::test_mod::TestTrait) fn another_function()\n-            \"#]],\n+            r#\"\n+use dep::test_mod::TestTrait;\n+\n+fn main() {\n+    dep::test_mod::TestStruct::another_function()$0\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn zero_input_assoc_item_completion() {\n         check(\n             r#\"\n-        //- /lib.rs crate:dep\n-        pub mod test_mod {\n-            pub trait TestTrait {\n-                const SPECIAL_CONST: u8;\n-                type HumbleType;\n-                fn weird_function();\n-                fn random_method(&self);\n-            }\n-            pub struct TestStruct {}\n-            impl TestTrait for TestStruct {\n-                const SPECIAL_CONST: u8 = 42;\n-                type HumbleType = ();\n-                fn weird_function() {}\n-                fn random_method(&self) {}\n-            }\n-        }\n+//- /lib.rs crate:dep\n+pub mod test_mod {\n+    pub trait TestTrait {\n+        const SPECIAL_CONST: u8;\n+        type HumbleType;\n+        fn weird_function();\n+        fn random_method(&self);\n+    }\n+    pub struct TestStruct {}\n+    impl TestTrait for TestStruct {\n+        const SPECIAL_CONST: u8 = 42;\n+        type HumbleType = ();\n+        fn weird_function() {}\n+        fn random_method(&self) {}\n+    }\n+}\n \n-        //- /main.rs crate:main deps:dep\n-        fn main() {\n-            let test_struct = dep::test_mod::TestStruct {};\n-            test_struct.$0\n-        }\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    let test_struct = dep::test_mod::TestStruct {};\n+    test_struct.$0\n+}\n         \"#,\n             expect![[r#\"\n                         me random_method() (dep::test_mod::TestTrait) fn random_method(&self)"}, {"sha": "2c4e5452497f25fc8ecf6e017071f423ff9cd7c4", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=d1ac3293f4aa0f0807cfb9a9d5337c6a4a2632d7", "patch": "@@ -11,10 +11,10 @@ mod render;\n \n mod completions;\n \n+use completions::flyimport::position_for_import;\n use ide_db::{\n     base_db::FilePosition, helpers::insert_use::ImportScope, imports_locator, RootDatabase,\n };\n-use syntax::AstNode;\n use text_edit::TextEdit;\n \n use crate::{completions::Completions, context::CompletionContext, item::CompletionKind};\n@@ -142,10 +142,10 @@ pub fn resolve_completion_edits(\n     import_for_trait_assoc_item: bool,\n ) -> Option<Vec<TextEdit>> {\n     let ctx = CompletionContext::new(db, position, config)?;\n-    let anchor = ctx.name_ref_syntax.as_ref()?;\n-    let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n+    let position_for_import = position_for_import(&ctx, None)?;\n+    let import_scope = ImportScope::find_insert_use_container(position_for_import, &ctx.sema)?;\n \n-    let current_module = ctx.sema.scope(anchor.syntax()).module()?;\n+    let current_module = ctx.sema.scope(position_for_import).module()?;\n     let current_crate = current_module.krate();\n \n     let import_path = imports_locator::find_exact_imports(&ctx.sema, current_crate, imported_name)"}]}