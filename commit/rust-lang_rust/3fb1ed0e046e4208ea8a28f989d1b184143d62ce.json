{"sha": "3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYjFlZDBlMDQ2ZTQyMDhlYThhMjhmOTg5ZDFiMTg0MTQzZDYyY2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-21T05:10:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-22T15:48:34Z"}, "message": "rustc: Remove all usage of manual deref()\n\nFavor using '*' instead", "tree": {"sha": "d6fbeef71f581f189caba5d6d479d56e19f5cf8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6fbeef71f581f189caba5d6d479d56e19f5cf8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "html_url": "https://github.com/rust-lang/rust/commit/3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f0b1ad1fb314199b6db61df753d6757dee3b77", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f0b1ad1fb314199b6db61df753d6757dee3b77", "html_url": "https://github.com/rust-lang/rust/commit/76f0b1ad1fb314199b6db61df753d6757dee3b77"}], "stats": {"total": 129, "additions": 61, "deletions": 68}, "files": [{"sha": "fb0de959489881881974e86792974fcbf5f5b6bb", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -543,8 +543,8 @@ fn write_out_deps(sess: &Session,\n     // write Makefile-compatible dependency rules\n     let files: Vec<~str> = sess.codemap().files.borrow()\n                                .iter().filter_map(|fmap| {\n-                                    if fmap.deref().is_real_file() {\n-                                        Some(fmap.deref().name.clone())\n+                                    if fmap.is_real_file() {\n+                                        Some(fmap.name.clone())\n                                     } else {\n                                         None\n                                     }\n@@ -682,7 +682,7 @@ pub fn pretty_print_input(sess: Session,\n     };\n \n     let src_name = source_name(input);\n-    let src = sess.codemap().get_filemap(src_name).deref().src.as_bytes().to_owned();\n+    let src = sess.codemap().get_filemap(src_name).src.as_bytes().to_owned();\n     let mut rdr = MemReader::new(src);\n \n     match ppm {"}, {"sha": "db62e6bedf08221e98e06f393b25a66da16dd103", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -1045,8 +1045,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         ebml_w.tag(c::tag_table_capture_map, |ebml_w| {\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val, |ebml_w| {\n-                ebml_w.emit_from_vec(cap_vars.deref().as_slice(),\n-                                        |ebml_w, cap_var| {\n+                ebml_w.emit_from_vec(cap_vars.as_slice(), |ebml_w, cap_var| {\n                     cap_var.encode(ebml_w);\n                 })\n             })"}, {"sha": "eaef50307ef3eed00ecb3d3a20664e436aca2fef", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -710,7 +710,7 @@ impl<'a> CheckLoanCtxt<'a> {\n     fn check_captured_variables(&self,\n                                 closure_id: ast::NodeId,\n                                 span: Span) {\n-        for cap_var in self.bccx.capture_map.get(&closure_id).deref().iter() {\n+        for cap_var in self.bccx.capture_map.get(&closure_id).iter() {\n             let var_id = ast_util::def_id_of_def(cap_var.def).node;\n             let var_path = @LpVar(var_id);\n             self.check_if_path_is_moved(closure_id, span,"}, {"sha": "d07d6a066b0eaee352569452b4a1bfbc510bc9de", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -47,7 +47,7 @@ pub fn gather_move_from_pat(bccx: &BorrowckCtxt,\n pub fn gather_captures(bccx: &BorrowckCtxt,\n                        move_data: &MoveData,\n                        closure_expr: &ast::Expr) {\n-    for captured_var in bccx.capture_map.get(&closure_expr.id).deref().iter() {\n+    for captured_var in bccx.capture_map.get(&closure_expr.id).iter() {\n         match captured_var.mode {\n             moves::CapMove => {\n                 let cmt = bccx.cat_captured_var(closure_expr.id,"}, {"sha": "be86d387b206ee1fff712903375424c0d5cdee82", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -452,7 +452,7 @@ impl<'a> GatherLoanCtxt<'a> {\n \n     fn guarantee_captures(&mut self,\n                           closure_expr: &ast::Expr) {\n-        for captured_var in self.bccx.capture_map.get(&closure_expr.id).deref().iter() {\n+        for captured_var in self.bccx.capture_map.get(&closure_expr.id).iter() {\n             match captured_var.mode {\n                 moves::CapCopy | moves::CapMove => { continue; }\n                 moves::CapRef => { }"}, {"sha": "e1b3419877756e77582c8ed44c59fc7f44f610b3", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -490,7 +490,7 @@ pub fn lit_to_const(lit: &Lit) -> const_val {\n     match lit.node {\n         LitStr(ref s, _) => const_str((*s).clone()),\n         LitBinary(ref data) => {\n-            const_binary(Rc::new(data.deref().iter().map(|x| *x).collect()))\n+            const_binary(Rc::new(data.iter().map(|x| *x).collect()))\n         }\n         LitChar(n) => const_uint(n as u64),\n         LitInt(n, _) => const_int(n),"}, {"sha": "b4314026ab6d72a6e12439ee8ea169ac84cf2a4c", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -291,7 +291,6 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n                 }\n               }\n             };\n-            let type_param_defs = type_param_defs.deref();\n             if ts.len() != type_param_defs.len() {\n                 // Fail earlier to make debugging easier\n                 fail!(\"internal error: in kind::check_expr, length \\"}, {"sha": "42b7260a4ae275dce66d413adf86da76f4b8c128", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -472,7 +472,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         // in better error messages than just pointing at the closure\n         // construction site.\n         let mut call_caps = Vec::new();\n-        for cv in ir.capture_map.get(&expr.id).deref().iter() {\n+        for cv in ir.capture_map.get(&expr.id).iter() {\n             match moves::moved_variable_node_id_from_def(cv.def) {\n               Some(rv) => {\n                 let cv_ln = ir.add_live_node(FreeVarNode(cv.span));\n@@ -979,7 +979,7 @@ impl<'a> Liveness<'a> {\n                         this.ir.tcx.sess.span_bug(expr.span, \"no registered caps\");\n                      }\n                  };\n-                 caps.deref().iter().rev().fold(succ, |succ, cap| {\n+                 caps.iter().rev().fold(succ, |succ, cap| {\n                      this.init_from_succ(cap.ln, succ);\n                      let var = this.variable(cap.var_nid, expr.span);\n                      this.acc(cap.ln, var, ACC_READ | ACC_USE);"}, {"sha": "c6819dbc91946389e6b03bfd6a36e5022e916d0b", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -141,7 +141,7 @@ impl<T:Subst> Subst for Rc<T> {\n     fn subst_spanned(&self, tcx: &ty::ctxt,\n                      substs: &ty::substs,\n                      span: Option<Span>) -> Rc<T> {\n-        Rc::new(self.deref().subst_spanned(tcx, substs, span))\n+        Rc::new((**self).subst_spanned(tcx, substs, span))\n     }\n }\n "}, {"sha": "fb8f6d4df29d5830c6a784bfe1a41eb37c8b9fbe", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -394,11 +394,11 @@ pub fn trans_expr_fn<'a>(\n \n     let cap_vars = ccx.maps.capture_map.borrow().get_copy(&id);\n     let ClosureResult {llbox, cdata_ty, bcx} =\n-        build_closure(bcx, cap_vars.deref().as_slice(), sigil);\n+        build_closure(bcx, cap_vars.as_slice(), sigil);\n     trans_closure(ccx, decl, body, llfn,\n                   bcx.fcx.param_substs, id,\n                   [], ty::ty_fn_ret(fty),\n-                  |bcx| load_environment(bcx, cdata_ty, cap_vars.deref().as_slice(), sigil));\n+                  |bcx| load_environment(bcx, cdata_ty, cap_vars.as_slice(), sigil));\n     fill_fn_pair(bcx, dest_addr, llfn, llbox);\n \n     bcx"}, {"sha": "b5b68a521a87f3b0c60efebb741d1c18dd9e1376", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -937,7 +937,7 @@ pub fn filename_and_line_num_from_span(bcx: &Block, span: Span)\n                                        -> (ValueRef, ValueRef) {\n     let loc = bcx.sess().codemap().lookup_char_pos(span.lo);\n     let filename_cstr = C_cstr(bcx.ccx(),\n-                               token::intern_and_get_ident(loc.file.deref().name));\n+                               token::intern_and_get_ident(loc.file.name));\n     let filename = build::PointerCast(bcx, filename_cstr, Type::i8p(bcx.ccx()));\n     let line = C_int(bcx.ccx(), loc.line as int);\n     (filename, line)"}, {"sha": "fcc645a01d4f1b972fabbdadf8c32ee2c26d9852", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -77,7 +77,7 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: ast::Lit)\n         ast::LitBool(b) => C_bool(cx, b),\n         ast::LitNil => C_nil(cx),\n         ast::LitStr(ref s, _) => C_str_slice(cx, (*s).clone()),\n-        ast::LitBinary(ref data) => C_binary_slice(cx, data.deref().as_slice()),\n+        ast::LitBinary(ref data) => C_binary_slice(cx, data.as_slice()),\n     }\n }\n "}, {"sha": "8e55319013b8295202ad9b2fd911ca9fc7ed951c", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -334,7 +334,7 @@ pub fn trans_fail<'a>(\n     let v_fail_str = C_cstr(ccx, fail_str);\n     let _icx = push_ctxt(\"trans_fail_value\");\n     let loc = bcx.sess().codemap().lookup_char_pos(sp.lo);\n-    let v_filename = C_cstr(ccx, token::intern_and_get_ident(loc.file.deref().name));\n+    let v_filename = C_cstr(ccx, token::intern_and_get_ident(loc.file.name));\n     let v_line = loc.line as int;\n     let v_str = PointerCast(bcx, v_fail_str, Type::i8p(ccx));\n     let v_filename = PointerCast(bcx, v_filename, Type::i8p(ccx));"}, {"sha": "9f5959e05deec025ebce2cb4bfc75fd57d0f7bb4", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -610,7 +610,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n     }\n \n     let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.deref().name);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     let function_type_metadata = unsafe {\n         let fn_signature = get_function_signature(cx, fn_ast_id, fn_decl, param_substs, span);\n@@ -930,7 +930,7 @@ fn declare_local(bcx: &Block,\n                  span: Span) {\n     let cx: &CrateContext = bcx.ccx();\n \n-    let filename = span_start(cx, span).file.deref().name.clone();\n+    let filename = span_start(cx, span).file.name.clone();\n     let file_metadata = file_metadata(cx, filename);\n \n     let name = token::get_ident(variable_ident);\n@@ -1181,7 +1181,7 @@ fn prepare_struct_metadata(cx: &CrateContext,\n \n     let (containing_scope, definition_span) = get_namespace_and_span_for_item(cx, def_id);\n \n-    let file_name = span_start(cx, definition_span).file.deref().name.clone();\n+    let file_name = span_start(cx, definition_span).file.name.clone();\n     let file_metadata = file_metadata(cx, file_name);\n \n     let struct_metadata_stub = create_struct_stub(cx,\n@@ -1276,7 +1276,7 @@ fn prepare_tuple_metadata(cx: &CrateContext,\n     let tuple_llvm_type = type_of::type_of(cx, tuple_type);\n \n     let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.deref().name);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     UnfinishedMetadata {\n         cache_id: cache_id_for_type(tuple_type),\n@@ -1436,7 +1436,7 @@ fn prepare_enum_metadata(cx: &CrateContext,\n \n     let (containing_scope, definition_span) = get_namespace_and_span_for_item(cx, enum_def_id);\n     let loc = span_start(cx, definition_span);\n-    let file_metadata = file_metadata(cx, loc.file.deref().name);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     // For empty enums there is an early exit. Just describe it as an empty struct with the\n     // appropriate type name\n@@ -1775,7 +1775,7 @@ fn boxed_type_metadata(cx: &CrateContext,\n     ];\n \n     let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.deref().name);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     return composite_type_metadata(\n         cx,\n@@ -1876,7 +1876,7 @@ fn vec_metadata(cx: &CrateContext,\n     assert!(member_descriptions.len() == member_llvm_types.len());\n \n     let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.deref().name);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     composite_type_metadata(\n         cx,\n@@ -1927,7 +1927,7 @@ fn vec_slice_metadata(cx: &CrateContext,\n     assert!(member_descriptions.len() == member_llvm_types.len());\n \n     let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.deref().name);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     return composite_type_metadata(\n         cx,\n@@ -1953,7 +1953,7 @@ fn subroutine_type_metadata(cx: &CrateContext,\n                             span: Span)\n                          -> DICompositeType {\n     let loc = span_start(cx, span);\n-    let file_metadata = file_metadata(cx, loc.file.deref().name);\n+    let file_metadata = file_metadata(cx, loc.file.name);\n \n     let mut signature_metadata: Vec<DIType> =\n         Vec::with_capacity(signature.inputs.len() + 1);\n@@ -1999,7 +1999,7 @@ fn trait_metadata(cx: &CrateContext,\n \n     let (containing_scope, definition_span) = get_namespace_and_span_for_item(cx, def_id);\n \n-    let file_name = span_start(cx, definition_span).file.deref().name.clone();\n+    let file_name = span_start(cx, definition_span).file.name.clone();\n     let file_metadata = file_metadata(cx, file_name);\n \n     let trait_llvm_type = type_of::type_of(cx, trait_type);\n@@ -2297,7 +2297,7 @@ fn populate_scope_map(cx: &CrateContext,\n                                    &mut HashMap<ast::NodeId, DIScope>|) {\n         // Create a new lexical scope and push it onto the stack\n         let loc = cx.sess().codemap().lookup_char_pos(scope_span.lo);\n-        let file_metadata = file_metadata(cx, loc.file.deref().name);\n+        let file_metadata = file_metadata(cx, loc.file.name);\n         let parent_scope = scope_stack.last().unwrap().scope_metadata;\n \n         let scope_metadata = unsafe {\n@@ -2414,7 +2414,7 @@ fn populate_scope_map(cx: &CrateContext,\n                     if need_new_scope {\n                         // Create a new lexical scope and push it onto the stack\n                         let loc = cx.sess().codemap().lookup_char_pos(pat.span.lo);\n-                        let file_metadata = file_metadata(cx, loc.file.deref().name);\n+                        let file_metadata = file_metadata(cx, loc.file.name);\n                         let parent_scope = scope_stack.last().unwrap().scope_metadata;\n \n                         let scope_metadata = unsafe {"}, {"sha": "96d0da905b2704dad64baf78717eae04b0bd00ed", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -1009,13 +1009,13 @@ pub struct Generics {\n \n impl Generics {\n     pub fn has_type_params(&self) -> bool {\n-        !self.type_param_defs.deref().is_empty()\n+        !self.type_param_defs.is_empty()\n     }\n     pub fn type_param_defs<'a>(&'a self) -> &'a [TypeParameterDef] {\n-        self.type_param_defs.deref().as_slice()\n+        self.type_param_defs.as_slice()\n     }\n     pub fn region_param_defs<'a>(&'a self) -> &'a [RegionParameterDef] {\n-        self.region_param_defs.deref().as_slice()\n+        self.region_param_defs.as_slice()\n     }\n }\n "}, {"sha": "9b623f1e78e84edd72fb0e7fe9da158172d74df1", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -1110,7 +1110,7 @@ impl<'a> LookupContext<'a> {\n         let m_regions =\n             self.fcx.infcx().region_vars_for_defs(\n                 self.span,\n-                candidate.method_ty.generics.region_param_defs.deref().as_slice());\n+                candidate.method_ty.generics.region_param_defs.as_slice());\n         for &r in m_regions.iter() {\n             all_regions.push(r);\n         }"}, {"sha": "d4fd8d4392731ac0baf2d68100fb11d668c3d693", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -565,7 +565,7 @@ pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) {\n                 fn_tpt.generics.type_param_defs(),\n                 [],\n                 [],\n-                fn_tpt.generics.region_param_defs.deref().as_slice(),\n+                fn_tpt.generics.region_param_defs.as_slice(),\n                 body.id);\n \n         check_bare_fn(ccx, decl, body, it.id, fn_tpt.ty, param_env);\n@@ -3698,7 +3698,7 @@ pub fn instantiate_path(fcx: &FnCtxt,\n                         nsupplied = num_supplied_regions));\n         }\n \n-        fcx.infcx().region_vars_for_defs(span, tpt.generics.region_param_defs.deref().as_slice())\n+        fcx.infcx().region_vars_for_defs(span, tpt.generics.region_param_defs.as_slice())\n     };\n     let regions = ty::NonerasedRegions(regions);\n "}, {"sha": "29f481f9c04df1d6a5c8df307e5dc8aec6070a8e", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -666,12 +666,11 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n             debug!(\"vtable resolution on parameter bounds for method call {}\",\n                    ex.repr(fcx.tcx()));\n             let type_param_defs = ty::method_call_type_param_defs(cx.tcx, method.origin);\n-            if has_trait_bounds(type_param_defs.deref().as_slice()) {\n+            if has_trait_bounds(type_param_defs.as_slice()) {\n                 let substs = fcx.method_ty_substs(ex.id);\n                 let vcx = fcx.vtable_context();\n                 let vtbls = lookup_vtables(&vcx, ex.span,\n-                                           type_param_defs.deref()\n-                                                          .as_slice(),\n+                                           type_param_defs.as_slice(),\n                                            &substs, is_early);\n                 if !is_early {\n                     insert_vtables(fcx, ex.id, vtbls);\n@@ -780,7 +779,7 @@ pub fn resolve_impl(tcx: &ty::ctxt,\n pub fn trans_resolve_method(tcx: &ty::ctxt, id: ast::NodeId,\n                             substs: &ty::substs) -> Option<vtable_res> {\n     let generics = ty::lookup_item_type(tcx, ast_util::local_def(id)).generics;\n-    let type_param_defs = generics.type_param_defs.deref();\n+    let type_param_defs = &*generics.type_param_defs;\n     if has_trait_bounds(type_param_defs.as_slice()) {\n         let vcx = VtableContext {\n             infcx: &infer::new_infer_ctxt(tcx),"}, {"sha": "fe066ddeda911a1f321aadf5dcf090c31829535c", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -338,8 +338,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n         let mut new_type_param_defs = Vec::new();\n         let substd_type_param_defs =\n             trait_ty_generics.type_param_defs.subst(tcx, &substs);\n-        new_type_param_defs.push_all(substd_type_param_defs.deref()\n-                                                           .as_slice());\n+        new_type_param_defs.push_all(substd_type_param_defs.as_slice());\n \n         // add in the \"self\" type parameter\n         let self_trait_def = get_trait_def(ccx, local_def(trait_id));\n@@ -356,8 +355,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n \n         // add in the type parameters from the method\n         let substd_type_param_defs = m.generics.type_param_defs.subst(tcx, &substs);\n-        new_type_param_defs.push_all(substd_type_param_defs.deref()\n-                                                           .as_slice());\n+        new_type_param_defs.push_all(substd_type_param_defs.as_slice());\n \n         debug!(\"static method {} type_param_defs={} ty={}, substs={}\",\n                m.def_id.repr(tcx),"}, {"sha": "b0554c21bf92e9200f3b1b983373b5d5f909bde3", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -1181,7 +1181,7 @@ impl ToSource for syntax::codemap::Span {\n fn lit_to_str(lit: &ast::Lit) -> ~str {\n     match lit.node {\n         ast::LitStr(ref st, _) => st.get().to_owned(),\n-        ast::LitBinary(ref data) => format!(\"{:?}\", data.deref().as_slice()),\n+        ast::LitBinary(ref data) => format!(\"{:?}\", data.as_slice()),\n         ast::LitChar(c) => ~\"'\" + std::char::from_u32(c).unwrap().to_str() + \"'\",\n         ast::LitInt(i, _t) => i.to_str(),\n         ast::LitUint(u, _t) => u.to_str(),"}, {"sha": "bc28c5e109e2bd2f298f4ca22175fa51bad36ea5", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -113,7 +113,7 @@ mod test {\n         fn call(&mut self) {\n             let task = match *self {\n                 MyCallback(ref rc, n) => {\n-                    let mut slot = rc.deref().borrow_mut();\n+                    let mut slot = rc.borrow_mut();\n                     match *slot.get() {\n                         (ref mut task, ref mut val) => {\n                             *val = n;\n@@ -140,7 +140,7 @@ mod test {\n     fn sleep(chan: &Chan) -> uint {\n         let task: ~Task = Local::take();\n         task.deschedule(1, |task| {\n-            let mut slot = chan.deref().borrow_mut();\n+            let mut slot = chan.borrow_mut();\n             match *slot.get() {\n                 (ref mut slot, _) => {\n                     assert!(slot.is_none());\n@@ -150,7 +150,7 @@ mod test {\n             Ok(())\n         });\n \n-        let slot = chan.deref().borrow();\n+        let slot = chan.borrow();\n         match *slot.get() { (_, n) => n }\n     }\n "}, {"sha": "ca8c564f9f51f5d8e33c09e588a4efdec1852ffa", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -387,7 +387,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n impl<S:Encoder,T:Encodable<S>> Encodable<S> for Rc<T> {\n     #[inline]\n     fn encode(&self, s: &mut S) {\n-        self.deref().encode(s)\n+        (**self).encode(s)\n     }\n }\n "}, {"sha": "dc7d5c5b9c787a68172ca5f0b1109dfc0af4ce39", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -66,7 +66,6 @@\n use container::Container;\n use io::Writer;\n use iter::Iterator;\n-use ops::Deref;\n use option::{Option, Some, None};\n use rc::Rc;\n use str::{Str, StrSlice};\n@@ -247,7 +246,7 @@ impl<S: Writer, T: Hash<S>> Hash<S> for @T {\n impl<S: Writer, T: Hash<S>> Hash<S> for Rc<T> {\n     #[inline]\n     fn hash(&self, state: &mut S) {\n-        self.deref().hash(state);\n+        (**self).hash(state);\n     }\n }\n "}, {"sha": "23363a9784575b50ad90cf3beab15bc3db1e4d79", "filename": "src/libstd/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -650,7 +650,7 @@ mod tests {\n         #[unsafe_destructor]\n         impl ::ops::Drop for R {\n            fn drop(&mut self) {\n-                let ii = self.i.deref();\n+                let ii = &*self.i;\n                 ii.set(ii.get() + 1);\n             }\n         }\n@@ -667,7 +667,7 @@ mod tests {\n             let opt = Some(x);\n             let _y = opt.unwrap();\n         }\n-        assert_eq!(i.deref().get(), 1);\n+        assert_eq!(i.get(), 1);\n     }\n \n     #[test]"}, {"sha": "8dd06cb923226308732c93fe02b8f5fa28c1b1e6", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -122,24 +122,23 @@ impl<T> Clone for Rc<T> {\n \n impl<T: Eq> Eq for Rc<T> {\n     #[inline(always)]\n-    fn eq(&self, other: &Rc<T>) -> bool { *self.deref() == *other.deref() }\n-\n+    fn eq(&self, other: &Rc<T>) -> bool { **self == **other }\n     #[inline(always)]\n-    fn ne(&self, other: &Rc<T>) -> bool { *self.deref() != *other.deref() }\n+    fn ne(&self, other: &Rc<T>) -> bool { **self != **other }\n }\n \n impl<T: Ord> Ord for Rc<T> {\n     #[inline(always)]\n-    fn lt(&self, other: &Rc<T>) -> bool { *self.deref() < *other.deref() }\n+    fn lt(&self, other: &Rc<T>) -> bool { **self < **other }\n \n     #[inline(always)]\n-    fn le(&self, other: &Rc<T>) -> bool { *self.deref() <= *other.deref() }\n+    fn le(&self, other: &Rc<T>) -> bool { **self <= **other }\n \n     #[inline(always)]\n-    fn gt(&self, other: &Rc<T>) -> bool { *self.deref() > *other.deref() }\n+    fn gt(&self, other: &Rc<T>) -> bool { **self > **other }\n \n     #[inline(always)]\n-    fn ge(&self, other: &Rc<T>) -> bool { *self.deref() >= *other.deref() }\n+    fn ge(&self, other: &Rc<T>) -> bool { **self >= **other }\n }\n \n /// Weak reference to a reference-counted box\n@@ -236,21 +235,21 @@ mod tests {\n     #[test]\n     fn test_simple() {\n         let x = Rc::new(5);\n-        assert_eq!(*x.deref(), 5);\n+        assert_eq!(*x, 5);\n     }\n \n     #[test]\n     fn test_simple_clone() {\n         let x = Rc::new(5);\n         let y = x.clone();\n-        assert_eq!(*x.deref(), 5);\n-        assert_eq!(*y.deref(), 5);\n+        assert_eq!(*x, 5);\n+        assert_eq!(*y, 5);\n     }\n \n     #[test]\n     fn test_destructor() {\n         let x = Rc::new(~5);\n-        assert_eq!(**x.deref(), 5);\n+        assert_eq!(**x, 5);\n     }\n \n     #[test]\n@@ -273,7 +272,7 @@ mod tests {\n         // see issue #11532\n         use gc::Gc;\n         let a = Rc::new(RefCell::new(Gc::new(1)));\n-        assert!(a.deref().try_borrow_mut().is_some());\n+        assert!(a.try_borrow_mut().is_some());\n     }\n \n     #[test]\n@@ -284,7 +283,7 @@ mod tests {\n \n         let a = Rc::new(Cycle { x: RefCell::new(None) });\n         let b = a.clone().downgrade();\n-        *a.deref().x.borrow_mut() = Some(b);\n+        *a.x.borrow_mut() = Some(b);\n \n         // hopefully we don't double-free (or leak)...\n     }"}, {"sha": "5c84cbe00a9962c2e0e2d243f6b4f7d017137377", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -40,7 +40,7 @@ fn main()\n     //~^ ERROR cannot pack type `~B`, which does not fulfill `Send`\n     let v = Rc::new(RefCell::new(a));\n     let w = v.clone();\n-    let b = v.deref();\n+    let b = &*v;\n     let mut b = b.borrow_mut();\n     b.v.set(w.clone());\n }"}, {"sha": "4e1a9b665d045d10cc1fa7efff87bc247b88e275", "filename": "src/test/run-pass/self-re-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb1ed0e046e4208ea8a28f989d1b184143d62ce/src%2Ftest%2Frun-pass%2Fself-re-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-re-assign.rs?ref=3fb1ed0e046e4208ea8a28f989d1b184143d62ce", "patch": "@@ -20,5 +20,5 @@ pub fn main() {\n \n    let mut x = Rc::new(3);\n    x = x;\n-   assert!(*x.deref() == 3);\n+   assert!(*x == 3);\n }"}]}