{"sha": "092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmM4MjFlZjI0ZGJkNWY5MGUyZjZlZGUxODA5NTEwOGQyZjBmOGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-23T03:26:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-23T03:26:13Z"}, "message": "Rollup merge of #70249 - lcnr:issue70125, r=eddyb\n\nhandle ConstKind::Unresolved after monomorphizing\n\nfixes #70125\n\nr? @bjorn3", "tree": {"sha": "c0907060442066e86c42cd9f023df607c48f8d7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0907060442066e86c42cd9f023df607c48f8d7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeeCxVCRBK7hj4Ov3rIwAAdHIIAGH6DDGDdeiYiRSbyzjNCF4+\ntjuAfXbNHhvzJnPIO7f9i7NiShqAYm8ykQY0eG059vl+xP7A9l3deVtqQ7+WJZ9k\n4/IGWCsJtR/LfMlUuztoRKnsJFXOSzDV7WfWKDchyhQyBqqjfjRyBRtTG6x30mMy\nVBKhyusBmprTV6phdxmwmjcGH5UdEoeMIXlSHeSDvYbwCqwdU+ETDXgKrv1mKzeV\n1HLqHQOF1okD+as72PixcM7odoIQEUhD8z3TWm+8Q4Q/NUdIcTmC3S6etIZa8QGU\nTvgQ2UHtG9pC3HMVFEQq7uMy+kNYoAmJQ8YPAtcO/ja9hpIFQsVXZxJ8xf5d4+w=\n=Fdaa\n-----END PGP SIGNATURE-----\n", "payload": "tree c0907060442066e86c42cd9f023df607c48f8d7c\nparent 8dda61792bc662073bee1cea6002705b1b5e0bc5\nparent 853377817d18140745df9097d6eb0663c61f4c0b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584933973 +0100\ncommitter GitHub <noreply@github.com> 1584933973 +0100\n\nRollup merge of #70249 - lcnr:issue70125, r=eddyb\n\nhandle ConstKind::Unresolved after monomorphizing\n\nfixes #70125\n\nr? @bjorn3\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "html_url": "https://github.com/rust-lang/rust/commit/092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dda61792bc662073bee1cea6002705b1b5e0bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dda61792bc662073bee1cea6002705b1b5e0bc5", "html_url": "https://github.com/rust-lang/rust/commit/8dda61792bc662073bee1cea6002705b1b5e0bc5"}, {"sha": "853377817d18140745df9097d6eb0663c61f4c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/853377817d18140745df9097d6eb0663c61f4c0b", "html_url": "https://github.com/rust-lang/rust/commit/853377817d18140745df9097d6eb0663c61f4c0b"}], "stats": {"total": 94, "additions": 70, "deletions": 24}, "files": [{"sha": "74a9646a0c0afd9429eaf356cafae14c3fb4a222", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "patch": "@@ -40,31 +40,26 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n-        match constant.literal.val {\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n-                let substs = self.monomorphize(&substs);\n-                self.cx\n-                    .tcx()\n-                    .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n-                    .map_err(|err| {\n-                        if promoted.is_none() {\n-                            self.cx\n-                                .tcx()\n-                                .sess\n-                                .span_err(constant.span, \"erroneous constant encountered\");\n-                        }\n-                        err\n-                    })\n-            }\n+        match self.monomorphize(&constant.literal).val {\n+            ty::ConstKind::Unevaluated(def_id, substs, promoted) => self\n+                .cx\n+                .tcx()\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n+                .map_err(|err| {\n+                    if promoted.is_none() {\n+                        self.cx\n+                            .tcx()\n+                            .sess\n+                            .span_err(constant.span, \"erroneous constant encountered\");\n+                    }\n+                    err\n+                }),\n             ty::ConstKind::Value(value) => Ok(value),\n-            _ => {\n-                let const_ = self.monomorphize(&constant.literal);\n-                if let ty::ConstKind::Value(value) = const_.val {\n-                    Ok(value)\n-                } else {\n-                    span_bug!(constant.span, \"encountered bad ConstKind in codegen: {:?}\", const_);\n-                }\n-            }\n+            err => span_bug!(\n+                constant.span,\n+                \"encountered bad ConstKind after monomorphizing: {:?}\",\n+                err\n+            ),\n         }\n     }\n "}, {"sha": "8b933c078ff26661ec85da6787ccefac8f9e3493", "filename": "src/test/ui/const-generics/issues/issue-70125-1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.rs?ref=092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+const L: usize = 4;\n+\n+pub trait Print<const N: usize> {\n+    fn print(&self) -> usize {\n+        N\n+    }\n+}\n+\n+pub struct Printer;\n+impl Print<L> for Printer {}\n+\n+fn main() {\n+    let p = Printer;\n+    assert_eq!(p.print(), 4);\n+}"}, {"sha": "f28f58cf5ce4dbc3db9fd441ea0650d24344d7ce", "filename": "src/test/ui/const-generics/issues/issue-70125-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-1.stderr?ref=092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-70125-1.rs:2:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "ea7a68c2f93d9d2075015552ea9156b61d227366", "filename": "src/test/ui/const-generics/issues/issue-70125-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.rs?ref=092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    <()>::foo();\n+}\n+\n+trait Foo<const X: usize> {\n+    fn foo() -> usize {\n+        X\n+    }\n+}\n+\n+impl Foo<{3}> for () {}"}, {"sha": "664aa7ba45161f4bb54a45d86720ffd46bee8ee5", "filename": "src/test/ui/const-generics/issues/issue-70125-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092c821ef24dbd5f90e2f6ede18095108d2f0f8c/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125-2.stderr?ref=092c821ef24dbd5f90e2f6ede18095108d2f0f8c", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-70125-2.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}