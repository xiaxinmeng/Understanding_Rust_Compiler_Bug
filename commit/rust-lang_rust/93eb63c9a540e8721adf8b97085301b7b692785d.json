{"sha": "93eb63c9a540e8721adf8b97085301b7b692785d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZWI2M2M5YTU0MGU4NzIxYWRmOGI5NzA4NTMwMWI3YjY5Mjc4NWQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T23:30:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-10T18:34:26Z"}, "message": "syntax: Rename variants of `SyntaxExtension` for consistency", "tree": {"sha": "1a3de5190432b25dafa54a4569df08be9ae8bd3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3de5190432b25dafa54a4569df08be9ae8bd3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93eb63c9a540e8721adf8b97085301b7b692785d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93eb63c9a540e8721adf8b97085301b7b692785d", "html_url": "https://github.com/rust-lang/rust/commit/93eb63c9a540e8721adf8b97085301b7b692785d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93eb63c9a540e8721adf8b97085301b7b692785d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0468eb63ad96e1dd4b10cd099ceca87f56417b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0468eb63ad96e1dd4b10cd099ceca87f56417b1c", "html_url": "https://github.com/rust-lang/rust/commit/0468eb63ad96e1dd4b10cd099ceca87f56417b1c"}], "stats": {"total": 135, "additions": 65, "deletions": 70}, "files": [{"sha": "7ffba41e2569a4f32e3077e4622ffc9e17596fa2", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -614,7 +614,7 @@ impl<'a> CrateLoader<'a> {\n             match decl {\n                 ProcMacro::CustomDerive { trait_name, attributes, client } => {\n                     let attrs = attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n-                    (trait_name, SyntaxExtension::ProcMacroDerive(\n+                    (trait_name, SyntaxExtension::Derive(\n                         Box::new(ProcMacroDerive {\n                             client,\n                             attrs: attrs.clone(),\n@@ -624,13 +624,13 @@ impl<'a> CrateLoader<'a> {\n                     ))\n                 }\n                 ProcMacro::Attr { name, client } => {\n-                    (name, SyntaxExtension::AttrProcMacro(\n+                    (name, SyntaxExtension::Attr(\n                         Box::new(AttrProcMacro { client }),\n                         root.edition,\n                     ))\n                 }\n                 ProcMacro::Bang { name, client } => {\n-                    (name, SyntaxExtension::ProcMacro {\n+                    (name, SyntaxExtension::Bang {\n                         expander: Box::new(BangProcMacro { client }),\n                         allow_internal_unstable: None,\n                         edition: root.edition,"}, {"sha": "35faa1df82b845f3a4ef0cf18b1a86cae2d174b3", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -430,7 +430,7 @@ impl cstore::CStore {\n             use syntax_ext::proc_macro_impl::BangProcMacro;\n \n             let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n-            let ext = SyntaxExtension::ProcMacro {\n+            let ext = SyntaxExtension::Bang {\n                 expander: Box::new(BangProcMacro { client }),\n                 allow_internal_unstable: Some(vec![sym::proc_macro_def_site].into()),\n                 edition: data.root.edition,"}, {"sha": "dd5e42684c4276581471ff68738e55078e4c8e44", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n \n-use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n+use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension};\n use syntax::ext::base::MacroExpanderFn;\n use syntax::ext::hygiene::Transparency;\n use syntax::symbol::{Symbol, sym};\n@@ -89,7 +89,7 @@ impl<'a> Registry<'a> {\n         if name == sym::macro_rules {\n             panic!(\"user-defined macros may not be named `macro_rules`\");\n         }\n-        if let NormalTT { def_info: ref mut def_info @ None, .. } = extension {\n+        if let SyntaxExtension::LegacyBang { def_info: ref mut def_info @ None, .. } = extension {\n             *def_info = Some((ast::CRATE_NODE_ID, self.krate_span));\n         }\n         self.syntax_exts.push((name, extension));\n@@ -98,10 +98,10 @@ impl<'a> Registry<'a> {\n     /// Register a macro of the usual kind.\n     ///\n     /// This is a convenience wrapper for `register_syntax_extension`.\n-    /// It builds for you a `NormalTT` that calls `expander`,\n+    /// It builds for you a `SyntaxExtension::LegacyBang` that calls `expander`,\n     /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        self.register_syntax_extension(Symbol::intern(name), NormalTT {\n+        self.register_syntax_extension(Symbol::intern(name), SyntaxExtension::LegacyBang {\n             expander: Box::new(expander),\n             def_info: None,\n             transparency: Transparency::SemiTransparent,"}, {"sha": "2369bddf4f75fca13ae27304aa474f65e4dc9c21", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -242,7 +242,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn check_unused_macros(&self) {\n         for did in self.unused_macros.iter() {\n             let id_span = match *self.macro_map[did] {\n-                SyntaxExtension::NormalTT { def_info, .. } => def_info,\n+                SyntaxExtension::LegacyBang { def_info, .. } => def_info,\n                 _ => None,\n             };\n             if let Some((id, span)) = id_span {\n@@ -586,7 +586,7 @@ impl<'a> Resolver<'a> {\n                         match self.resolve_macro_to_res(derive, MacroKind::Derive,\n                                                         &parent_scope, true, force) {\n                             Ok((_, ext)) => {\n-                                if let SyntaxExtension::ProcMacroDerive(_, helpers, _) = &*ext {\n+                                if let SyntaxExtension::Derive(_, helpers, _) = &*ext {\n                                     if helpers.contains(&ident.name) {\n                                         let binding =\n                                             (Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),"}, {"sha": "5a5540e7e38556096e7f0206aa626d407de3d59f", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -471,7 +471,7 @@ fn build_macro(cx: &DocContext<'_>, did: DefId, name: ast::Name) -> clean::ItemE\n         }\n         LoadedMacro::ProcMacro(ext) => {\n             let helpers = match &*ext {\n-                &SyntaxExtension::ProcMacroDerive(_, ref syms, ..) => { syms.clean(cx) }\n+                &SyntaxExtension::Derive(_, ref syms, ..) => { syms.clean(cx) }\n                 _ => Vec::new(),\n             };\n "}, {"sha": "7fbfc3e1fc0f4a1030de025ee972c1a7582da564", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -433,7 +433,7 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n             if let Res::Def(DefKind::Macro(MacroKind::ProcMacroStub), _) = res {\n                 // skip proc-macro stubs, they'll cause `get_macro` to crash\n             } else {\n-                if let SyntaxExtension::NormalTT { .. } = *resolver.get_macro(res) {\n+                if let SyntaxExtension::LegacyBang { .. } = *resolver.get_macro(res) {\n                     return Some(res.map_id(|_| panic!(\"unexpected id\")));\n                 }\n             }"}, {"sha": "38b7dee40c447f52a09ba554340a4d79cb6481b6", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -1,5 +1,3 @@\n-pub use SyntaxExtension::*;\n-\n use crate::ast::{self, Attribute, Name, PatKind};\n use crate::attr::HasAttrs;\n use crate::source_map::{SourceMap, Spanned, respan};\n@@ -553,7 +551,7 @@ impl MacroKind {\n /// An enum representing the different kinds of syntax extensions.\n pub enum SyntaxExtension {\n     /// A token-based function-like macro.\n-    ProcMacro {\n+    Bang {\n         /// An expander with signature TokenStream -> TokenStream.\n         expander: Box<dyn ProcMacro + sync::Sync + sync::Send>,\n         /// Whitelist of unstable features that are treated as stable inside this macro.\n@@ -563,7 +561,7 @@ pub enum SyntaxExtension {\n     },\n \n     /// An AST-based function-like macro.\n-    NormalTT {\n+    LegacyBang {\n         /// An expander with signature TokenStream -> AST.\n         expander: Box<dyn TTMacroExpander + sync::Sync + sync::Send>,\n         /// Some info about the macro's definition point.\n@@ -583,7 +581,7 @@ pub enum SyntaxExtension {\n     },\n \n     /// A token-based attribute macro.\n-    AttrProcMacro(\n+    Attr(\n         /// An expander with signature (TokenStream, TokenStream) -> TokenStream.\n         /// The first TokenSteam is the attribute itself, the second is the annotated item.\n         /// The produced TokenSteam replaces the input TokenSteam.\n@@ -593,7 +591,7 @@ pub enum SyntaxExtension {\n     ),\n \n     /// An AST-based attribute macro.\n-    MultiModifier(\n+    LegacyAttr(\n         /// An expander with signature (AST, AST) -> AST.\n         /// The first AST fragment is the attribute itself, the second is the annotated item.\n         /// The produced AST fragment replaces the input AST fragment.\n@@ -608,7 +606,7 @@ pub enum SyntaxExtension {\n     },\n \n     /// A token-based derive macro.\n-    ProcMacroDerive(\n+    Derive(\n         /// An expander with signature TokenStream -> TokenStream (not yet).\n         /// The produced TokenSteam is appended to the input TokenSteam.\n         Box<dyn MultiItemModifier + sync::Sync + sync::Send>,\n@@ -619,7 +617,7 @@ pub enum SyntaxExtension {\n     ),\n \n     /// An AST-based derive macro.\n-    BuiltinDerive(\n+    LegacyDerive(\n         /// An expander with signature AST -> AST.\n         /// The produced AST fragment is appended to the input AST fragment.\n         Box<dyn MultiItemModifier + sync::Sync + sync::Send>,\n@@ -630,41 +628,38 @@ impl SyntaxExtension {\n     /// Returns which kind of macro calls this syntax extension.\n     pub fn kind(&self) -> MacroKind {\n         match *self {\n-            SyntaxExtension::NormalTT { .. } |\n-            SyntaxExtension::ProcMacro { .. } =>\n-                MacroKind::Bang,\n-            SyntaxExtension::NonMacroAttr { .. } |\n-            SyntaxExtension::MultiModifier(..) |\n-            SyntaxExtension::AttrProcMacro(..) =>\n-                MacroKind::Attr,\n-            SyntaxExtension::ProcMacroDerive(..) |\n-            SyntaxExtension::BuiltinDerive(..) =>\n-                MacroKind::Derive,\n+            SyntaxExtension::Bang { .. } |\n+            SyntaxExtension::LegacyBang { .. } => MacroKind::Bang,\n+            SyntaxExtension::Attr(..) |\n+            SyntaxExtension::LegacyAttr(..) |\n+            SyntaxExtension::NonMacroAttr { .. } => MacroKind::Attr,\n+            SyntaxExtension::Derive(..) |\n+            SyntaxExtension::LegacyDerive(..) => MacroKind::Derive,\n         }\n     }\n \n     pub fn default_transparency(&self) -> Transparency {\n         match *self {\n-            SyntaxExtension::NormalTT { transparency, .. } => transparency,\n-            SyntaxExtension::ProcMacro { .. } |\n-            SyntaxExtension::AttrProcMacro(..) |\n-            SyntaxExtension::ProcMacroDerive(..) |\n+            SyntaxExtension::LegacyBang { transparency, .. } => transparency,\n+            SyntaxExtension::Bang { .. } |\n+            SyntaxExtension::Attr(..) |\n+            SyntaxExtension::Derive(..) |\n             SyntaxExtension::NonMacroAttr { .. } => Transparency::Opaque,\n-            SyntaxExtension::MultiModifier(..) |\n-            SyntaxExtension::BuiltinDerive(..) => Transparency::SemiTransparent,\n+            SyntaxExtension::LegacyAttr(..) |\n+            SyntaxExtension::LegacyDerive(..) => Transparency::SemiTransparent,\n         }\n     }\n \n     pub fn edition(&self, default_edition: Edition) -> Edition {\n         match *self {\n-            SyntaxExtension::NormalTT { edition, .. } |\n-            SyntaxExtension::ProcMacro { edition, .. } |\n-            SyntaxExtension::AttrProcMacro(.., edition) |\n-            SyntaxExtension::ProcMacroDerive(.., edition) => edition,\n+            SyntaxExtension::Bang { edition, .. } |\n+            SyntaxExtension::LegacyBang { edition, .. } |\n+            SyntaxExtension::Attr(.., edition) |\n+            SyntaxExtension::Derive(.., edition) => edition,\n             // Unstable legacy stuff\n             SyntaxExtension::NonMacroAttr { .. } |\n-            SyntaxExtension::MultiModifier(..) |\n-            SyntaxExtension::BuiltinDerive(..) => default_edition,\n+            SyntaxExtension::LegacyAttr(..) |\n+            SyntaxExtension::LegacyDerive(..) => default_edition,\n         }\n     }\n }"}, {"sha": "084d4fd3820172258374abbf414471d5a82fb624", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         let item = match self.cx.resolver.resolve_macro_path(\n                                 path, MacroKind::Derive, Mark::root(), Vec::new(), false) {\n                             Ok(ext) => match *ext {\n-                                BuiltinDerive(..) => item_with_markers.clone(),\n+                                SyntaxExtension::LegacyDerive(..) => item_with_markers.clone(),\n                                 _ => item.clone(),\n                             },\n                             _ => item.clone(),\n@@ -548,7 +548,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             _ => unreachable!(),\n         };\n \n-        if let NonMacroAttr { mark_used: false } = *ext {} else {\n+        if let SyntaxExtension::NonMacroAttr { mark_used: false } = *ext {} else {\n             // Macro attrs are always used when expanded,\n             // non-macro attrs are considered used when the field says so.\n             attr::mark_used(&attr);\n@@ -564,18 +564,18 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         });\n \n         match *ext {\n-            NonMacroAttr { .. } => {\n+            SyntaxExtension::NonMacroAttr { .. } => {\n                 attr::mark_known(&attr);\n                 item.visit_attrs(|attrs| attrs.push(attr));\n                 Some(invoc.fragment_kind.expect_from_annotatables(iter::once(item)))\n             }\n-            MultiModifier(ref mac) => {\n+            SyntaxExtension::LegacyAttr(ref mac) => {\n                 let meta = attr.parse_meta(self.cx.parse_sess)\n                                .map_err(|mut e| { e.emit(); }).ok()?;\n                 let item = mac.expand(self.cx, attr.span, &meta, item);\n                 Some(invoc.fragment_kind.expect_from_annotatables(item))\n             }\n-            AttrProcMacro(ref mac, ..) => {\n+            SyntaxExtension::Attr(ref mac, ..) => {\n                 self.gate_proc_macro_attr_item(attr.span, &item);\n                 let item_tok = TokenTree::token(token::Interpolated(Lrc::new(match item {\n                     Annotatable::Item(item) => token::NtItem(item),\n@@ -592,7 +592,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 self.gate_proc_macro_expansion(attr.span, &res);\n                 res\n             }\n-            ProcMacroDerive(..) | BuiltinDerive(..) => {\n+            SyntaxExtension::Derive(..) | SyntaxExtension::LegacyDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive macro\", attr.path));\n                 self.cx.trace_macros_diag();\n                 invoc.fragment_kind.dummy(attr.span)\n@@ -747,7 +747,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         let opt_expanded = match *ext {\n-            NormalTT {\n+            SyntaxExtension::LegacyBang {\n                 ref expander,\n                 def_info,\n                 ref allow_internal_unstable,\n@@ -774,20 +774,22 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 }\n             }\n \n-            MultiModifier(..) | AttrProcMacro(..) | SyntaxExtension::NonMacroAttr { .. } => {\n+            SyntaxExtension::Attr(..) |\n+            SyntaxExtension::LegacyAttr(..) |\n+            SyntaxExtension::NonMacroAttr { .. } => {\n                 self.cx.span_err(path.span,\n                                  &format!(\"`{}` can only be used in attributes\", path));\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)\n             }\n \n-            ProcMacroDerive(..) | BuiltinDerive(..) => {\n+            SyntaxExtension::Derive(..) | SyntaxExtension::LegacyDerive(..) => {\n                 self.cx.span_err(path.span, &format!(\"`{}` is a derive macro\", path));\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)\n             }\n \n-            SyntaxExtension::ProcMacro { ref expander, ref allow_internal_unstable, edition } => {\n+            SyntaxExtension::Bang { ref expander, ref allow_internal_unstable, edition } => {\n                 if ident.name != kw::Invalid {\n                     let msg =\n                         format!(\"macro {}! expects no ident argument, given '{}'\", path, ident);\n@@ -885,9 +887,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         };\n \n         match ext {\n-            ProcMacroDerive(expander, ..) | BuiltinDerive(expander) => {\n+            SyntaxExtension::Derive(expander, ..) | SyntaxExtension::LegacyDerive(expander) => {\n                 let meta = match ext {\n-                    ProcMacroDerive(..) => ast::MetaItem { // FIXME(jseyfried) avoid this\n+                    SyntaxExtension::Derive(..) => ast::MetaItem { // FIXME(jseyfried) avoid this\n                         path: Path::from_ident(Ident::invalid()),\n                         span: DUMMY_SP,\n                         node: ast::MetaItemKind::Word,"}, {"sha": "5dbf21867afa6df02811e60f539ef32559878ec2", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -1,7 +1,6 @@\n use crate::{ast, attr};\n use crate::edition::Edition;\n-use crate::ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n-use crate::ext::base::{NormalTT, TTMacroExpander};\n+use crate::ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension, TTMacroExpander};\n use crate::ext::expand::{AstFragment, AstFragmentKind};\n use crate::ext::hygiene::Transparency;\n use crate::ext::tt::macro_parser::{Success, Error, Failure};\n@@ -425,7 +424,7 @@ pub fn compile(\n         }\n     });\n \n-    NormalTT {\n+    SyntaxExtension::LegacyBang {\n         expander,\n         def_info: Some((def.id, def.span)),\n         transparency,"}, {"sha": "cf54eacc3d46c8d715218c557f79a9c603750881", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -71,7 +71,7 @@ macro_rules! derive_traits {\n             $(\n                 resolver.add_builtin(\n                     ast::Ident::with_empty_ctxt(Symbol::intern($name)),\n-                    Lrc::new(SyntaxExtension::BuiltinDerive(Box::new(BuiltinDerive($func))))\n+                    Lrc::new(SyntaxExtension::LegacyDerive(Box::new(BuiltinDerive($func))))\n                 );\n             )*\n         }"}, {"sha": "7c4085aa09653326dafcf09902b055d346a5f7c6", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -41,7 +41,8 @@ pub mod proc_macro_impl;\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n-use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension, MultiModifier};\n+\n+use syntax::ext::base::{MacroExpanderFn, NamedSyntaxExtension, SyntaxExtension};\n use syntax::ext::hygiene::Transparency;\n use syntax::edition::Edition;\n use syntax::symbol::{sym, Symbol};\n@@ -57,7 +58,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $(\n             register(Symbol::intern(stringify!($name)),\n-                     NormalTT {\n+                     SyntaxExtension::LegacyBang {\n                         expander: Box::new($f as MacroExpanderFn),\n                         def_info: None,\n                         transparency: Transparency::SemiTransparent,\n@@ -95,13 +96,13 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n         assert: assert::expand_assert,\n     }\n \n-    register(sym::test_case, MultiModifier(Box::new(test_case::expand)));\n-    register(sym::test, MultiModifier(Box::new(test::expand_test)));\n-    register(sym::bench, MultiModifier(Box::new(test::expand_bench)));\n+    register(sym::test_case, SyntaxExtension::LegacyAttr(Box::new(test_case::expand)));\n+    register(sym::test, SyntaxExtension::LegacyAttr(Box::new(test::expand_test)));\n+    register(sym::bench, SyntaxExtension::LegacyAttr(Box::new(test::expand_bench)));\n \n     // format_args uses `unstable` things internally.\n     register(Symbol::intern(\"format_args\"),\n-             NormalTT {\n+             SyntaxExtension::LegacyBang {\n                 expander: Box::new(format::expand_format_args),\n                 def_info: None,\n                 transparency: Transparency::SemiTransparent,\n@@ -112,7 +113,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                 edition,\n             });\n     register(sym::format_args_nl,\n-             NormalTT {\n+             SyntaxExtension::LegacyBang {\n                  expander: Box::new(format::expand_format_args_nl),\n                  def_info: None,\n                  transparency: Transparency::SemiTransparent,"}, {"sha": "330459fc08f551cfdb9b099c46009898458cd1fd", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin-args.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eb63c9a540e8721adf8b97085301b7b692785d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs?ref=93eb63c9a540e8721adf8b97085301b7b692785d", "patch": "@@ -10,12 +10,10 @@ extern crate rustc_plugin;\n \n use std::borrow::ToOwned;\n use syntax::ast;\n-use syntax::ext::hygiene;\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::base::{TTMacroExpander, ExtCtxt, MacResult, MacEager, NormalTT};\n+use syntax::ext::base::{SyntaxExtension, TTMacroExpander, ExtCtxt, MacResult, MacEager};\n use syntax::ext::hygiene::Transparency;\n use syntax::print::pprust;\n-use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use syntax::tokenstream::TokenStream;\n@@ -30,7 +28,7 @@ impl TTMacroExpander for Expander {\n                    ecx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    _: TokenStream,\n-                   _: Option<Span>) -> Box<MacResult+'cx> {\n+                   _: Option<Span>) -> Box<dyn MacResult+'cx> {\n         let args = self.args.iter().map(|i| pprust::meta_list_item_to_string(i))\n             .collect::<Vec<_>>().join(\", \");\n         MacEager::expr(ecx.expr_str(sp, Symbol::intern(&args)))\n@@ -41,7 +39,7 @@ impl TTMacroExpander for Expander {\n pub fn plugin_registrar(reg: &mut Registry) {\n     let args = reg.args().to_owned();\n     reg.register_syntax_extension(Symbol::intern(\"plugin_args\"),\n-        NormalTT {\n+        SyntaxExtension::LegacyBang {\n             expander: Box::new(Expander { args: args, }),\n             def_info: None,\n             transparency: Transparency::SemiTransparent,"}]}