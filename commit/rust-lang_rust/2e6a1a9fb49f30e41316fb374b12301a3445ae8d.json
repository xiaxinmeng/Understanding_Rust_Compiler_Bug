{"sha": "2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNmExYTlmYjQ5ZjMwZTQxMzE2ZmIzNzRiMTIzMDFhMzQ0NWFlOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T16:15:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T16:15:17Z"}, "message": "Auto merge of #45489 - oli-obk:json_diagnostics, r=petrochenkov\n\nFix a quadradic duplication in json for multi-suggestions\n\nr? @petrochenkov", "tree": {"sha": "862d68e4d973e86a543a089b99ce776df8b1b945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/862d68e4d973e86a543a089b99ce776df8b1b945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "html_url": "https://github.com/rust-lang/rust/commit/2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dce604a8fe85c22beb53d99c609d88e3a0ca9320", "url": "https://api.github.com/repos/rust-lang/rust/commits/dce604a8fe85c22beb53d99c609d88e3a0ca9320", "html_url": "https://github.com/rust-lang/rust/commit/dce604a8fe85c22beb53d99c609d88e3a0ca9320"}, {"sha": "014100df49a9f6926a52ecd4576b99e11a42033b", "url": "https://api.github.com/repos/rust-lang/rust/commits/014100df49a9f6926a52ecd4576b99e11a42033b", "html_url": "https://github.com/rust-lang/rust/commit/014100df49a9f6926a52ecd4576b99e11a42033b"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "b8151819bffed683f4589ea1798e9170b20b2790", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "patch": "@@ -153,17 +153,15 @@ impl Diagnostic {\n     fn from_diagnostic_builder(db: &DiagnosticBuilder,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n-        let sugg = db.suggestions.iter().flat_map(|sugg| {\n-            je.render(sugg).into_iter().map(move |rendered| {\n-                Diagnostic {\n-                    message: sugg.msg.clone(),\n-                    code: None,\n-                    level: \"help\",\n-                    spans: DiagnosticSpan::from_suggestion(sugg, je),\n-                    children: vec![],\n-                    rendered: Some(rendered),\n-                }\n-            })\n+        let sugg = db.suggestions.iter().map(|sugg| {\n+            Diagnostic {\n+                message: sugg.msg.clone(),\n+                code: None,\n+                level: \"help\",\n+                spans: DiagnosticSpan::from_suggestion(sugg, je),\n+                children: vec![],\n+                rendered: None,\n+            }\n         });\n         Diagnostic {\n             message: db.message(),\n@@ -356,9 +354,3 @@ impl DiagnosticCode {\n         })\n     }\n }\n-\n-impl JsonEmitter {\n-    fn render(&self, suggestion: &CodeSuggestion) -> Vec<String> {\n-        suggestion.splice_lines(&*self.cm).iter().map(|line| line.0.to_owned()).collect()\n-    }\n-}"}, {"sha": "eb28e36dc076e540783104ff4123cca59012e9da", "filename": "src/test/compile-fail/issue-27842.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27842.rs?ref=2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let _ = tup[0];\n     //~^ ERROR cannot index into a value of type\n     //~| HELP to access tuple elements, use\n-    //~| SUGGESTION let _ = tup.0\n+    //~| SUGGESTION tup.0\n \n     // the case where we show just a general hint\n     let i = 0_usize;"}, {"sha": "701334d889045d6951500e08f12117c7feeb3908", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "patch": "@@ -1 +1 @@\n-{\"message\":\"unnecessary parentheses around assigned value\",\"code\":null,\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":976,\"byte_end\":989,\"line_start\":22,\"line_end\":22,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":null,\"expansion\":null}],\"children\":[{\"message\":\"#[warn(unused_parens)] on by default\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":976,\"byte_end\":989,\"line_start\":22,\"line_end\":22,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":\"1 / (2 + 3)\",\"expansion\":null}],\"children\":[],\"rendered\":\"    let _a = 1 / (2 + 3);\"}],\"rendered\":null}\n+{\"message\":\"unnecessary parentheses around assigned value\",\"code\":null,\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":976,\"byte_end\":989,\"line_start\":22,\"line_end\":22,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":null,\"expansion\":null}],\"children\":[{\"message\":\"#[warn(unused_parens)] on by default\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_json_suggestion.rs\",\"byte_start\":976,\"byte_end\":989,\"line_start\":22,\"line_end\":22,\"column_start\":14,\"column_end\":27,\"is_primary\":true,\"text\":[{\"text\":\"    let _a = (1 / (2 + 3));\",\"highlight_start\":14,\"highlight_end\":27}],\"label\":null,\"suggested_replacement\":\"1 / (2 + 3)\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":null}"}, {"sha": "20c24d6405042e15cb128b08d3ef2efd2c080af0", "filename": "src/test/ui/lint/use_suggestion_json.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.rs?ref=2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --error-format json\n+\n+// The output for humans should just highlight the whole span without showing\n+// the suggested replacement, but we also want to test that suggested\n+// replacement only removes one set of parentheses, rather than na\u00efvely\n+// stripping away any starting or ending parenthesis characters\u2014hence this\n+// test of the JSON error format.\n+\n+fn main() {\n+    let x: Iter;\n+}"}, {"sha": "2ebe212b93ddb7f0a9db59e5c5103587af86d9a2", "filename": "src/test/ui/lint/use_suggestion_json.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse_suggestion_json.stderr?ref=2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "patch": "@@ -0,0 +1,2 @@\n+{\"message\":\"cannot find type `Iter` in this scope\",\"code\":{\"code\":\"E0412\",\"explanation\":\"/nThe type name used is not in scope./n/nErroneous code examples:/n/n```compile_fail,E0412/nimpl Something {} // error: type name `Something` is not in scope/n/n// or:/n/ntrait Foo {/n    fn bar(N); // error: type name `N` is not in scope/n}/n/n// or:/n/nfn foo(x: T) {} // type name `T` is not in scope/n```/n/nTo fix this error, please verify you didn't misspell the type name, you did/ndeclare it or imported it into the scope. Examples:/n/n```/nstruct Something;/n/nimpl Something {} // ok!/n/n// or:/n/ntrait Foo {/n    type N;/n/n    fn bar(_: Self::N); // ok!/n}/n/n// or:/n/nfn foo<T>(x: T) {} // ok!/n```/n/nAnother case that causes this error is when a type is imported into a parent/nmodule. To fix this, you can follow the suggestion and use File directly or/n`use super::File;` which will import the types from the parent namespace. An/nexample that causes this error is below:/n/n```compile_fail,E0412/nuse std::fs::File;/n/nmod foo {/n    fn some_function(f: File) {}/n}/n```/n/n```/nuse std::fs::File;/n/nmod foo {/n    // either/n    use super::File;/n    // or/n    // use std::fs::File;/n    fn foo(f: File) {}/n}/n# fn main() {} // don't insert it for us; that'll break imports/n```/n\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":862,\"byte_end\":866,\"line_start\":20,\"line_end\":20,\"column_start\":12,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"    let x: Iter;\",\"highlight_start\":12,\"highlight_end\":16}],\"label\":\"not found in this scope\",\"suggested_replacement\":null,\"expansion\":null}],\"children\":[{\"message\":\"possible candidates are found in other modules, you can import them into scope\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::binary_heap::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::btree_map::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::btree_set::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::hash_map::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::hash_set::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::linked_list::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::collections::vec_deque::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::option::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::path::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::result::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::slice::Iter;/n/n\",\"expansion\":null},{\"file_name\":\"$DIR/use_suggestion_json.rs\",\"byte_start\":839,\"byte_end\":839,\"line_start\":19,\"line_end\":19,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"fn main() {\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":\"use std::sync::mpsc::Iter;/n/n\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":null}\n+{\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":null}"}, {"sha": "8e9cd1a12faacf79d96fa2f1bb6b909cf3e9d7f6", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6a1a9fb49f30e41316fb374b12301a3445ae8d/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "patch": "@@ -36,6 +36,7 @@ struct DiagnosticSpan {\n     column_end: usize,\n     is_primary: bool,\n     label: Option<String>,\n+    suggested_replacement: Option<String>,\n     expansion: Option<Box<DiagnosticSpanMacroExpansion>>,\n }\n \n@@ -164,15 +165,15 @@ fn push_expected_errors(expected_errors: &mut Vec<Error>,\n     }\n \n     // If the message has a suggestion, register that.\n-    if let Some(ref rendered) = diagnostic.rendered {\n-        let start_line = primary_spans.iter().map(|s| s.line_start).min().expect(\"\\\n-            every suggestion should have at least one span\");\n-        for (index, line) in rendered.lines().enumerate() {\n-            expected_errors.push(Error {\n-                line_num: start_line + index,\n-                kind: Some(ErrorKind::Suggestion),\n-                msg: line.to_string(),\n-            });\n+    for span in primary_spans {\n+        if let Some(ref suggested_replacement) = span.suggested_replacement {\n+            for (index, line) in suggested_replacement.lines().enumerate() {\n+                expected_errors.push(Error {\n+                    line_num: span.line_start + index,\n+                    kind: Some(ErrorKind::Suggestion),\n+                    msg: line.to_string(),\n+                });\n+            }\n         }\n     }\n "}]}