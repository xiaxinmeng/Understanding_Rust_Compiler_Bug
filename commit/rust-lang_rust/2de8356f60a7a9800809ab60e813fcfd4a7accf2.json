{"sha": "2de8356f60a7a9800809ab60e813fcfd4a7accf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZTgzNTZmNjBhN2E5ODAwODA5YWI2MGU4MTNmY2ZkNGE3YWNjZjI=", "commit": {"author": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-05T01:44:07Z"}, "committer": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-29T14:03:30Z"}, "message": "style: applying Rust style", "tree": {"sha": "7e195f465b4af0f77dfe22d811cc34a6ea932d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e195f465b4af0f77dfe22d811cc34a6ea932d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2de8356f60a7a9800809ab60e813fcfd4a7accf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2de8356f60a7a9800809ab60e813fcfd4a7accf2", "html_url": "https://github.com/rust-lang/rust/commit/2de8356f60a7a9800809ab60e813fcfd4a7accf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2de8356f60a7a9800809ab60e813fcfd4a7accf2/comments", "author": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6002b280f119a12631da0d1bb7e6adad53cefc95", "url": "https://api.github.com/repos/rust-lang/rust/commits/6002b280f119a12631da0d1bb7e6adad53cefc95", "html_url": "https://github.com/rust-lang/rust/commit/6002b280f119a12631da0d1bb7e6adad53cefc95"}], "stats": {"total": 154, "additions": 74, "deletions": 80}, "files": [{"sha": "73d15d3064789356264705c5ed125704bdacd2ea", "filename": "library/alloc/src/vec/cow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fcow.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,7 +1,7 @@\n use crate::borrow::Cow;\n-use core::iter::{FromIterator};\n+use core::iter::FromIterator;\n \n-use super::{Vec};\n+use super::Vec;\n \n #[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]\n impl<'a, T: Clone> From<&'a [T]> for Cow<'a, [T]> {\n@@ -26,10 +26,10 @@ impl<'a, T: Clone> From<&'a Vec<T>> for Cow<'a, [T]> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> FromIterator<T> for Cow<'a, [T]>\n-    where\n-        T: Clone,\n+where\n+    T: Clone,\n {\n     fn from_iter<I: IntoIterator<Item = T>>(it: I) -> Cow<'a, [T]> {\n         Cow::Owned(FromIterator::from_iter(it))\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "fb32d144f872c001b2f4c0ad4a626b248a27d8c1", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,13 +1,11 @@\n use crate::alloc::{Allocator, Global};\n-use core::iter::{\n-    FusedIterator, TrustedLen,\n-};\n+use core::fmt;\n+use core::iter::{FusedIterator, TrustedLen};\n use core::mem::{self};\n use core::ptr::{self, NonNull};\n use core::slice::{self};\n-use core::fmt;\n \n-use super::{Vec};\n+use super::Vec;\n \n /// A draining iterator for `Vec<T>`.\n ///"}, {"sha": "3c37c92ae44b0cbdbe68a8c0cea948afbaa352ef", "filename": "library/alloc/src/vec/drain_filter.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,8 +1,8 @@\n+use crate::alloc::{Allocator, Global};\n use core::ptr::{self};\n use core::slice::{self};\n-use crate::alloc::{Allocator, Global};\n \n-use super::{Vec};\n+use super::Vec;\n \n /// An iterator which uses a closure to determine if an element should be removed.\n ///\n@@ -45,8 +45,8 @@ pub struct DrainFilter<\n }\n \n impl<T, F, A: Allocator> DrainFilter<'_, T, F, A>\n-    where\n-        F: FnMut(&mut T) -> bool,\n+where\n+    F: FnMut(&mut T) -> bool,\n {\n     /// Returns a reference to the underlying allocator.\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n@@ -58,8 +58,8 @@ impl<T, F, A: Allocator> DrainFilter<'_, T, F, A>\n \n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n impl<T, F, A: Allocator> Iterator for DrainFilter<'_, T, F, A>\n-    where\n-        F: FnMut(&mut T) -> bool,\n+where\n+    F: FnMut(&mut T) -> bool,\n {\n     type Item = T;\n \n@@ -96,20 +96,20 @@ impl<T, F, A: Allocator> Iterator for DrainFilter<'_, T, F, A>\n \n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n impl<T, F, A: Allocator> Drop for DrainFilter<'_, T, F, A>\n-    where\n-        F: FnMut(&mut T) -> bool,\n+where\n+    F: FnMut(&mut T) -> bool,\n {\n     fn drop(&mut self) {\n         struct BackshiftOnDrop<'a, 'b, T, F, A: Allocator>\n-            where\n-                F: FnMut(&mut T) -> bool,\n+        where\n+            F: FnMut(&mut T) -> bool,\n         {\n             drain: &'b mut DrainFilter<'a, T, F, A>,\n         }\n \n         impl<'a, 'b, T, F, A: Allocator> Drop for BackshiftOnDrop<'a, 'b, T, F, A>\n-            where\n-                F: FnMut(&mut T) -> bool,\n+        where\n+            F: FnMut(&mut T) -> bool,\n         {\n             fn drop(&mut self) {\n                 unsafe {\n@@ -140,4 +140,4 @@ impl<T, F, A: Allocator> Drop for DrainFilter<'_, T, F, A>\n             backshift.drain.for_each(drop);\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "354d25c2389fbd515a541ff274de48200b4a6f66", "filename": "library/alloc/src/vec/in_place_drop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fin_place_drop.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -3,9 +3,9 @@ use core::slice::{self};\n \n // A helper struct for in-place iteration that drops the destination slice of iteration,\n // i.e. the head. The source slice (the tail) is dropped by IntoIter.\n-pub (super) struct InPlaceDrop<T> {\n-    pub (super) inner: *mut T,\n-    pub (super) dst: *mut T,\n+pub(super) struct InPlaceDrop<T> {\n+    pub(super) inner: *mut T,\n+    pub(super) dst: *mut T,\n }\n \n impl<T> InPlaceDrop<T> {"}, {"sha": "1788690d96b8f0afaf930d4951ef1461a00237c3", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,14 +1,12 @@\n use crate::alloc::{Allocator, Global};\n use crate::raw_vec::RawVec;\n+use core::fmt;\n+use core::intrinsics::arith_offset;\n+use core::iter::{FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccess};\n use core::marker::PhantomData;\n-use core::intrinsics::{arith_offset};\n use core::mem::{self};\n-use core::fmt;\n use core::ptr::{self, NonNull};\n use core::slice::{self};\n-use core::iter::{\n-    FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccess,\n-};\n \n /// An iterator that moves out of a vector.\n ///\n@@ -156,8 +154,8 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     }\n \n     unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item\n-        where\n-            Self: TrustedRandomAccess,\n+    where\n+        Self: TrustedRandomAccess,\n     {\n         // SAFETY: the caller must guarantee that `i` is in bounds of the\n         // `Vec<T>`, so `i` cannot overflow an `isize`, and the `self.ptr.add(i)`\n@@ -211,8 +209,8 @@ unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n // T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n // and thus we can't implement drop-handling\n unsafe impl<T, A: Allocator> TrustedRandomAccess for IntoIter<T, A>\n-    where\n-        T: Copy,\n+where\n+    T: Copy,\n {\n     fn may_have_side_effect() -> bool {\n         false"}, {"sha": "b5739970b6ea469306eef375d3fe223f49363f10", "filename": "library/alloc/src/vec/is_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -68,4 +68,4 @@ unsafe impl<T: ?Sized> IsZero for Option<Box<T>> {\n     fn is_zero(&self) -> bool {\n         self.is_none()\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2a83eb33fe3eca2979cc530f5684bf5741944ff9", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -58,7 +58,7 @@ use core::convert::TryFrom;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::intrinsics::{arith_offset, assume};\n-use core::iter::{FromIterator};\n+use core::iter::FromIterator;\n use core::marker::PhantomData;\n use core::mem::{self, ManuallyDrop, MaybeUninit};\n use core::ops::{self, Index, IndexMut, Range, RangeBounds};\n@@ -88,9 +88,9 @@ mod drain;\n \n mod cow;\n \n+pub(crate) use self::into_iter::AsIntoIter;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::into_iter::IntoIter;\n-pub (crate) use self::into_iter::AsIntoIter;\n \n mod into_iter;\n "}, {"sha": "ff90b6caf4601d92818dd2f5065602ec2bfc73a6", "filename": "library/alloc/src/vec/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fpartial_eq.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,7 +1,7 @@\n-use crate::alloc::{Allocator};\n+use crate::alloc::Allocator;\n use crate::borrow::Cow;\n \n-use super::{Vec};\n+use super::Vec;\n \n macro_rules! __impl_slice_eq1 {\n     ([$($vars:tt)*] $lhs:ty, $rhs:ty $(where $ty:ty: $bound:ident)?, #[$stability:meta]) => {"}, {"sha": "8c0e95559fa15e83fc4a07fea4951a533a233ed5", "filename": "library/alloc/src/vec/source_iter_marker.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsource_iter_marker.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,10 +1,8 @@\n-use core::iter::{\n-    InPlaceIterable, SourceIter,\n-};\n+use core::iter::{InPlaceIterable, SourceIter};\n use core::mem::{self, ManuallyDrop};\n use core::ptr::{self};\n \n-use super::{Vec, InPlaceDrop, AsIntoIter, SpecFromIter, SpecFromIterNested};\n+use super::{AsIntoIter, InPlaceDrop, SpecFromIter, SpecFromIterNested, Vec};\n \n /// Specialization marker for collecting an iterator pipeline into a Vec while reusing the\n /// source allocation, i.e. executing the pipeline in place.\n@@ -13,7 +11,7 @@ use super::{Vec, InPlaceDrop, AsIntoIter, SpecFromIter, SpecFromIterNested};\n /// which is to be reused. But it is not sufficient for the specialization to be valid. See\n /// additional bounds on the impl.\n #[rustc_unsafe_specialization_marker]\n-pub (super) trait SourceIterMarker: SourceIter<Source: AsIntoIter> {}\n+pub(super) trait SourceIterMarker: SourceIter<Source: AsIntoIter> {}\n \n // The std-internal SourceIter/InPlaceIterable traits are only implemented by chains of\n // Adapter<Adapter<Adapter<IntoIter>>> (all owned by core/std). Additional bounds\n@@ -24,8 +22,8 @@ pub (super) trait SourceIterMarker: SourceIter<Source: AsIntoIter> {}\n impl<T> SourceIterMarker for T where T: SourceIter<Source: AsIntoIter> + InPlaceIterable {}\n \n impl<T, I> SpecFromIter<T, I> for Vec<T>\n-    where\n-        I: Iterator<Item = T> + SourceIterMarker,\n+where\n+    I: Iterator<Item = T> + SourceIterMarker,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // Additional requirements which cannot expressed via trait bounds. We rely on const eval\n@@ -35,9 +33,9 @@ impl<T, I> SpecFromIter<T, I> for Vec<T>\n         // c) alignments match as required by Alloc contract\n         if mem::size_of::<T>() == 0\n             || mem::size_of::<T>()\n-            != mem::size_of::<<<I as SourceIter>::Source as AsIntoIter>::Item>()\n+                != mem::size_of::<<<I as SourceIter>::Source as AsIntoIter>::Item>()\n             || mem::align_of::<T>()\n-            != mem::align_of::<<<I as SourceIter>::Source as AsIntoIter>::Item>()\n+                != mem::align_of::<<<I as SourceIter>::Source as AsIntoIter>::Item>()\n         {\n             // fallback to more generic implementations\n             return SpecFromIterNested::from_iter(iterator);"}, {"sha": "b6186a7ebaf730ba1dba44df5f04f61587bbda0d", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,27 +1,27 @@\n-use crate::alloc::{Allocator};\n-use core::iter::{TrustedLen};\n-use core::slice::{self};\n+use crate::alloc::Allocator;\n+use core::iter::TrustedLen;\n use core::ptr::{self};\n+use core::slice::{self};\n \n-use super::{Vec, IntoIter, SetLenOnDrop};\n+use super::{IntoIter, SetLenOnDrop, Vec};\n \n // Specialization trait used for Vec::extend\n pub(super) trait SpecExtend<T, I> {\n     fn spec_extend(&mut self, iter: I);\n }\n \n impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n-    where\n-        I: Iterator<Item = T>,\n+where\n+    I: Iterator<Item = T>,\n {\n     default fn spec_extend(&mut self, iter: I) {\n         self.extend_desugared(iter)\n     }\n }\n \n impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n-    where\n-        I: TrustedLen<Item = T>,\n+where\n+    I: TrustedLen<Item = T>,\n {\n     default fn spec_extend(&mut self, iterator: I) {\n         // This is the case for a TrustedLen iterator.\n@@ -62,18 +62,18 @@ impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n }\n \n impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>\n-    where\n-        I: Iterator<Item = &'a T>,\n-        T: Clone,\n+where\n+    I: Iterator<Item = &'a T>,\n+    T: Clone,\n {\n     default fn spec_extend(&mut self, iterator: I) {\n         self.spec_extend(iterator.cloned())\n     }\n }\n \n impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>\n-    where\n-        T: Copy,\n+where\n+    T: Copy,\n {\n     fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n         let slice = iterator.as_slice();"}, {"sha": "de610174783c4b51b2e61493d26ca696faaaa1b3", "filename": "library/alloc/src/vec/spec_from_elem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_elem.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,8 +1,8 @@\n-use crate::alloc::{Allocator};\n+use crate::alloc::Allocator;\n use crate::raw_vec::RawVec;\n use core::ptr::{self};\n \n-use super::{Vec, IsZero, ExtendElement};\n+use super::{ExtendElement, IsZero, Vec};\n \n // Specialization trait used for Vec::from_elem\n pub(super) trait SpecFromElem: Sized {\n@@ -57,4 +57,4 @@ impl<T: Clone + IsZero> SpecFromElem for T {\n         v.extend_with(n, ExtendElement(elem));\n         v\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4349d1582102d7654cd2801213db0eeb4982805d", "filename": "library/alloc/src/vec/spec_from_iter.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,9 +1,9 @@\n use crate::alloc::Global;\n-use core::mem::{ManuallyDrop};\n+use core::mem::ManuallyDrop;\n use core::ptr::{self};\n use core::slice::{self};\n \n-use super::{Vec, IntoIter, SpecFromIterNested, SpecExtend};\n+use super::{IntoIter, SpecExtend, SpecFromIterNested, Vec};\n \n /// Specialization trait used for Vec::from_iter\n ///\n@@ -30,8 +30,8 @@ pub(super) trait SpecFromIter<T, I> {\n }\n \n impl<T, I> SpecFromIter<T, I> for Vec<T>\n-    where\n-        I: Iterator<Item = T>,\n+where\n+    I: Iterator<Item = T>,\n {\n     default fn from_iter(iterator: I) -> Self {\n         SpecFromIterNested::from_iter(iterator)\n@@ -68,9 +68,9 @@ impl<T> SpecFromIter<T, IntoIter<T>> for Vec<T> {\n }\n \n impl<'a, T: 'a, I> SpecFromIter<&'a T, I> for Vec<T>\n-    where\n-        I: Iterator<Item = &'a T>,\n-        T: Clone,\n+where\n+    I: Iterator<Item = &'a T>,\n+    T: Clone,\n {\n     default fn from_iter(iterator: I) -> Self {\n         SpecFromIter::from_iter(iterator.cloned())"}, {"sha": "6abd4ff2a3f0a8c2812ae49b364a2c895a89db76", "filename": "library/alloc/src/vec/spec_from_iter_nested.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_from_iter_nested.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -1,7 +1,7 @@\n+use core::iter::TrustedLen;\n use core::ptr::{self};\n-use core::iter::{TrustedLen};\n \n-use super::{Vec, SpecExtend};\n+use super::{SpecExtend, Vec};\n \n /// Another specialization trait for Vec::from_iter\n /// necessary to manually prioritize overlapping specializations\n@@ -11,8 +11,8 @@ pub(super) trait SpecFromIterNested<T, I> {\n }\n \n impl<T, I> SpecFromIterNested<T, I> for Vec<T>\n-    where\n-        I: Iterator<Item = T>,\n+where\n+    I: Iterator<Item = T>,\n {\n     default fn from_iter(mut iterator: I) -> Self {\n         // Unroll the first iteration, as the vector is going to be\n@@ -40,8 +40,8 @@ impl<T, I> SpecFromIterNested<T, I> for Vec<T>\n }\n \n impl<T, I> SpecFromIterNested<T, I> for Vec<T>\n-    where\n-        I: TrustedLen<Item = T>,\n+where\n+    I: TrustedLen<Item = T>,\n {\n     fn from_iter(iterator: I) -> Self {\n         let mut vector = match iterator.size_hint() {"}, {"sha": "0a27b5b62ecf509830473fda17af573a1e2e51c2", "filename": "library/alloc/src/vec/splice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de8356f60a7a9800809ab60e813fcfd4a7accf2/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fsplice.rs?ref=2de8356f60a7a9800809ab60e813fcfd4a7accf2", "patch": "@@ -2,7 +2,7 @@ use crate::alloc::{Allocator, Global};\n use core::ptr::{self};\n use core::slice::{self};\n \n-use super::{Vec, Drain};\n+use super::{Drain, Vec};\n \n /// A splicing iterator for `Vec`.\n ///\n@@ -130,4 +130,4 @@ impl<T, A: Allocator> Drain<'_, T, A> {\n         }\n         self.tail_start = new_tail_start;\n     }\n-}\n\\ No newline at end of file\n+}"}]}