{"sha": "1d1010cac090e1b2d79500e32144a2e87c39e13e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTAxMGNhYzA5MGUxYjJkNzk1MDBlMzIxNDRhMmU4N2MzOWUxM2U=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-11T00:31:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-11T00:31:48Z"}, "message": "Move rt:: logging namespace to ::rt:: and implement RUST_LOG=? and RUST_LOG=::help as synonyms that dump the crate logging map. Also warn when some logging specs don't match.", "tree": {"sha": "6699ea13884643c4b4a4a601eebb571864c19562", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6699ea13884643c4b4a4a601eebb571864c19562"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d1010cac090e1b2d79500e32144a2e87c39e13e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1010cac090e1b2d79500e32144a2e87c39e13e", "html_url": "https://github.com/rust-lang/rust/commit/1d1010cac090e1b2d79500e32144a2e87c39e13e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d1010cac090e1b2d79500e32144a2e87c39e13e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8876e2c29e0509b530648156e919b355b49c2dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8876e2c29e0509b530648156e919b355b49c2dd8", "html_url": "https://github.com/rust-lang/rust/commit/8876e2c29e0509b530648156e919b355b49c2dd8"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "6d092eea6181e9039137b79c407c5d3be323733b", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d1010cac090e1b2d79500e32144a2e87c39e13e/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1d1010cac090e1b2d79500e32144a2e87c39e13e/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=1d1010cac090e1b2d79500e32144a2e87c39e13e", "patch": "@@ -120,6 +120,6 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n //"}, {"sha": "e2577b576bf4fca4275daaf7262defc82e80e36c", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 56, "deletions": 18, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1d1010cac090e1b2d79500e32144a2e87c39e13e/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1d1010cac090e1b2d79500e32144a2e87c39e13e/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=1d1010cac090e1b2d79500e32144a2e87c39e13e", "patch": "@@ -176,7 +176,7 @@ size_t parse_logging_spec(char* spec, log_directive* dirs) {\n }\n \n void update_module_map(const mod_entry* map, log_directive* dirs,\n-                       size_t n_dirs) {\n+                       size_t n_dirs, size_t *n_matches) {\n     for (const mod_entry* cur = map; cur->name; cur++) {\n         size_t level = default_log_level, longest_match = 0;\n         for (size_t d = 0; d < n_dirs; d++) {\n@@ -187,18 +187,28 @@ void update_module_map(const mod_entry* map, log_directive* dirs,\n             }\n         }\n         *cur->state = level;\n+        (*n_matches)++;\n     }\n }\n \n void update_crate_map(const cratemap* map, log_directive* dirs,\n-                      size_t n_dirs) {\n+                      size_t n_dirs, size_t *n_matches) {\n     // First update log levels for this crate\n-    update_module_map(map->entries, dirs, n_dirs);\n+    update_module_map(map->entries, dirs, n_dirs, n_matches);\n     // Then recurse on linked crates\n     // FIXME this does double work in diamond-shaped deps. could keep\n     //   a set of visited addresses, if it turns out to be actually slow\n     for (size_t i = 0; map->children[i]; i++) {\n-        update_crate_map(map->children[i], dirs, n_dirs);\n+        update_crate_map(map->children[i], dirs, n_dirs, n_matches);\n+    }\n+}\n+\n+void print_crate_log_map(const cratemap* map) {\n+    for (const mod_entry* cur = map->entries; cur->name; cur++) {\n+        printf(\"  %s\\n\", cur->name);\n+    }\n+    for (size_t i = 0; map->children[i]; i++) {\n+        print_crate_log_map(map->children[i]);\n     }\n }\n \n@@ -218,33 +228,61 @@ size_t log_rt_kern;\n size_t log_rt_backtrace;\n \n static const mod_entry _rt_module_map[] =\n-    {{\"rt::mem\", &log_rt_mem},\n-     {\"rt::comm\", &log_rt_comm},\n-     {\"rt::task\", &log_rt_task},\n-     {\"rt::dom\", &log_rt_dom},\n-     {\"rt::trace\", &log_rt_trace},\n-     {\"rt::cache\", &log_rt_cache},\n-     {\"rt::upcall\", &log_rt_upcall},\n-     {\"rt::timer\", &log_rt_timer},\n-     {\"rt::gc\", &log_rt_gc},\n-     {\"rt::stdlib\", &log_rt_stdlib},\n-     {\"rt::kern\", &log_rt_kern},\n-     {\"rt::backtrace\", &log_rt_backtrace},\n+    {{\"::rt::mem\", &log_rt_mem},\n+     {\"::rt::comm\", &log_rt_comm},\n+     {\"::rt::task\", &log_rt_task},\n+     {\"::rt::dom\", &log_rt_dom},\n+     {\"::rt::trace\", &log_rt_trace},\n+     {\"::rt::cache\", &log_rt_cache},\n+     {\"::rt::upcall\", &log_rt_upcall},\n+     {\"::rt::timer\", &log_rt_timer},\n+     {\"::rt::gc\", &log_rt_gc},\n+     {\"::rt::stdlib\", &log_rt_stdlib},\n+     {\"::rt::kern\", &log_rt_kern},\n+     {\"::rt::backtrace\", &log_rt_backtrace},\n      {NULL, NULL}};\n \n void update_log_settings(void* crate_map, char* settings) {\n     char* buffer = NULL;\n     log_directive dirs[256];\n     size_t n_dirs = 0;\n+\n     if (settings) {\n+\n+        if (strcmp(settings, \"::help\") == 0 ||\n+            strcmp(settings, \"?\") == 0) {\n+            printf(\"\\nCrate log map:\\n\\n\");\n+            print_crate_log_map((const cratemap*)crate_map);\n+            printf(\"\\n\");\n+            exit(1);\n+        }\n+\n         size_t buflen = strlen(settings) + 1;\n         buffer = (char*)malloc(buflen);\n         strncpy(buffer, settings, buflen);\n         n_dirs = parse_logging_spec(buffer, &dirs[0]);\n     }\n \n-    update_module_map(_rt_module_map, &dirs[0], n_dirs);\n-    update_crate_map((const cratemap*)crate_map, &dirs[0], n_dirs);\n+    size_t n_matches = 0;\n+    update_module_map(_rt_module_map, &dirs[0], n_dirs, &n_matches);\n+    update_crate_map((const cratemap*)crate_map, &dirs[0],\n+                     n_dirs, &n_matches);\n+\n+    if (n_matches < n_dirs) {\n+        printf(\"warning: got %d RUST_LOG specs, enabled %d flags.\",\n+               n_dirs, n_matches);\n+    }\n \n     free(buffer);\n }\n+\n+//\n+// Local Variables:\n+// mode: C++\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}]}