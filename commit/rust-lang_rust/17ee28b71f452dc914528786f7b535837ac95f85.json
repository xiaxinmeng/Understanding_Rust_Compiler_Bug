{"sha": "17ee28b71f452dc914528786f7b535837ac95f85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZWUyOGI3MWY0NTJkYzkxNDUyODc4NmY3YjUzNTgzN2FjOTVmODU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-14T00:30:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T00:30:38Z"}, "message": "Rollup merge of #77795 - bjorn3:codegen_backend_interface_refactor, r=oli-obk\n\nCodegen backend interface refactor\n\nThis moves several things away from the codegen backend to rustc_interface. There are a few behavioral changes where previously the incremental cache (incorrectly) wouldn't get finalized, but now it does. See the individual commit messages.", "tree": {"sha": "6c36a0778a5cc315da9e1415d413670c8fc5109b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c36a0778a5cc315da9e1415d413670c8fc5109b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17ee28b71f452dc914528786f7b535837ac95f85", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhkauCRBK7hj4Ov3rIwAAdHIIAD6qQ7/KVoO1097amd0T0DZi\nx6A7w5Ng1vr6krCsfbjlCGtSTd4JLtJVtvkvv7kX+C9po4FlaWUAABYv+8cPY5Ct\noBBT6mXelmxVTxJAEo5Oqf54b1G2VSJ5z1CKsogGclzRLcTlDKEMAvl4YAS+FLKm\n9jVdIuuweNBuSpyeVuqbidLpsAtgFisjDW/Bwxv6GQA9h4m4NbwIYxBNbxhhUDuV\nOJznuXGPN2RhjUpORa42FPp5qqWmtffURj8zaFFwswkZRd4lTZF0o8OanRZAoQBA\nS6uy9GWKL88rNYh33uzBSr/gzIt5ZWr47dJfYPtbdGUUWpiKTq1CQu1com6ej3k=\n=Ucx/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c36a0778a5cc315da9e1415d413670c8fc5109b\nparent 9c365a256158bdd029465cfe1644417d606bd3f0\nparent b620e49ccafa567bc0733b251586de60fa826441\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602635438 +0200\ncommitter GitHub <noreply@github.com> 1602635438 +0200\n\nRollup merge of #77795 - bjorn3:codegen_backend_interface_refactor, r=oli-obk\n\nCodegen backend interface refactor\n\nThis moves several things away from the codegen backend to rustc_interface. There are a few behavioral changes where previously the incremental cache (incorrectly) wouldn't get finalized, but now it does. See the individual commit messages.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17ee28b71f452dc914528786f7b535837ac95f85", "html_url": "https://github.com/rust-lang/rust/commit/17ee28b71f452dc914528786f7b535837ac95f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17ee28b71f452dc914528786f7b535837ac95f85/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c365a256158bdd029465cfe1644417d606bd3f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c365a256158bdd029465cfe1644417d606bd3f0", "html_url": "https://github.com/rust-lang/rust/commit/9c365a256158bdd029465cfe1644417d606bd3f0"}, {"sha": "b620e49ccafa567bc0733b251586de60fa826441", "url": "https://api.github.com/repos/rust-lang/rust/commits/b620e49ccafa567bc0733b251586de60fa826441", "html_url": "https://github.com/rust-lang/rust/commit/b620e49ccafa567bc0733b251586de60fa826441"}], "stats": {"total": 215, "additions": 96, "deletions": 119}, "files": [{"sha": "f1fa9864616a84079b2a1aac16bb7da3fdf6cae6", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -6,7 +6,7 @@ use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::query::Providers;\n@@ -367,23 +367,7 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n-    use rustc_codegen_ssa::target_features::{all_known_features, supported_target_features};\n-    providers.supported_target_features = |tcx, cnum| {\n-        assert_eq!(cnum, LOCAL_CRATE);\n-        if tcx.sess.opts.actually_rustdoc {\n-            // rustdoc needs to be able to document functions that use all the features, so\n-            // provide them all.\n-            all_known_features().map(|(a, b)| (a.to_string(), b)).collect()\n-        } else {\n-            supported_target_features(tcx.sess).iter().map(|&(a, b)| (a.to_string(), b)).collect()\n-        }\n-    };\n-\n-    provide_extern(providers);\n-}\n-\n-pub fn provide_extern(providers: &mut Providers) {\n+pub fn provide_both(providers: &mut Providers) {\n     providers.wasm_import_module_map = |tcx, cnum| {\n         // Build up a map from DefId to a `NativeLib` structure, where\n         // `NativeLib` internally contains information about"}, {"sha": "5974b59d39e4290c6ec4f27f79cd70bcee4c51ed", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 12, "deletions": 43, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -23,18 +23,17 @@ use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{ErrorReported, FatalError, Handler};\n-use rustc_middle::dep_graph::{DepGraph, WorkProduct};\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_serialize::json;\n-use rustc_session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n+use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n use std::any::Any;\n use std::ffi::CStr;\n-use std::fs;\n use std::sync::Arc;\n \n mod back {\n@@ -252,11 +251,11 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn provide(&self, providers: &mut ty::query::Providers) {\n-        attributes::provide(providers);\n+        attributes::provide_both(providers);\n     }\n \n     fn provide_extern(&self, providers: &mut ty::query::Providers) {\n-        attributes::provide_extern(providers);\n+        attributes::provide_both(providers);\n     }\n \n     fn codegen_crate<'tcx>(\n@@ -277,47 +276,27 @@ impl CodegenBackend for LlvmCodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n-        dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported> {\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n         let (codegen_results, work_products) = ongoing_codegen\n             .downcast::<rustc_codegen_ssa::back::write::OngoingCodegen<LlvmCodegenBackend>>()\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")\n             .join(sess);\n-        if sess.opts.debugging_opts.incremental_info {\n-            rustc_codegen_ssa::back::write::dump_incremental_data(&codegen_results);\n-        }\n \n-        sess.time(\"serialize_work_products\", move || {\n-            rustc_incremental::save_work_product_index(sess, &dep_graph, work_products)\n+        sess.time(\"llvm_dump_timing_file\", || {\n+            if sess.opts.debugging_opts.llvm_time_trace {\n+                llvm_util::time_trace_profiler_finish(\"llvm_timings.json\");\n+            }\n         });\n \n-        sess.compile_status()?;\n-\n-        Ok(Box::new(codegen_results))\n+        Ok((codegen_results, work_products))\n     }\n \n     fn link(\n         &self,\n         sess: &Session,\n-        codegen_results: Box<dyn Any>,\n+        codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n-        let codegen_results = codegen_results\n-            .downcast::<CodegenResults>()\n-            .expect(\"Expected CodegenResults, found Box<Any>\");\n-\n-        if sess.opts.debugging_opts.no_link {\n-            // FIXME: use a binary format to encode the `.rlink` file\n-            let rlink_data = json::encode(&codegen_results).map_err(|err| {\n-                sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n-            })?;\n-            let rlink_file = outputs.with_extension(config::RLINK_EXT);\n-            fs::write(&rlink_file, rlink_data).map_err(|err| {\n-                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n-            })?;\n-            return Ok(());\n-        }\n-\n         // Run the linker on any artifacts that resulted from the LLVM run.\n         // This should produce either a finished executable or library.\n         sess.time(\"link_crate\", || {\n@@ -334,16 +313,6 @@ impl CodegenBackend for LlvmCodegenBackend {\n             );\n         });\n \n-        // Now that we won't touch anything in the incremental compilation directory\n-        // any more, we can finalize it (which involves renaming it)\n-        rustc_incremental::finalize_session_directory(sess, codegen_results.crate_hash);\n-\n-        sess.time(\"llvm_dump_timing_file\", || {\n-            if sess.opts.debugging_opts.llvm_time_trace {\n-                llvm_util::time_trace_profiler_finish(\"llvm_timings.json\");\n-            }\n-        });\n-\n         Ok(())\n     }\n }"}, {"sha": "3a7676d30bba007e66b0bd75a0addd1d34821e35", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::profiling::TimingGuard;\n use rustc_data_structures::profiling::VerboseTimingGuard;\n-use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::emitter::Emitter;\n use rustc_errors::{DiagnosticId, FatalError, Handler, Level};\n@@ -414,7 +413,6 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let sess = tcx.sess;\n \n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let no_builtins = tcx.sess.contains_name(&tcx.hir().krate().item.attrs, sym::no_builtins);\n     let is_compiler_builtins =\n         tcx.sess.contains_name(&tcx.hir().krate().item.attrs, sym::compiler_builtins);\n@@ -463,7 +461,6 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     OngoingCodegen {\n         backend,\n         crate_name,\n-        crate_hash,\n         metadata,\n         windows_subsystem,\n         linker_info,\n@@ -658,15 +655,6 @@ fn produce_final_output_artifacts(\n     // These are used in linking steps and will be cleaned up afterward.\n }\n \n-pub fn dump_incremental_data(_codegen_results: &CodegenResults) {\n-    // FIXME(mw): This does not work at the moment because the situation has\n-    //            become more complicated due to incremental LTO. Now a CGU\n-    //            can have more than two caching states.\n-    // println!(\"[incremental] Re-using {} out of {} modules\",\n-    //           codegen_results.modules.iter().filter(|m| m.pre_existing).count(),\n-    //           codegen_results.modules.len());\n-}\n-\n pub enum WorkItem<B: WriteBackendMethods> {\n     /// Optimize a newly codegened, totally unoptimized module.\n     Optimize(ModuleCodegen<B::Module>),\n@@ -1720,7 +1708,6 @@ impl SharedEmitterMain {\n pub struct OngoingCodegen<B: ExtraBackendMethods> {\n     pub backend: B,\n     pub crate_name: Symbol,\n-    pub crate_hash: Svh,\n     pub metadata: EncodedMetadata,\n     pub windows_subsystem: Option<String>,\n     pub linker_info: LinkerInfo,\n@@ -1766,7 +1753,6 @@ impl<B: ExtraBackendMethods> OngoingCodegen<B> {\n         (\n             CodegenResults {\n                 crate_name: self.crate_name,\n-                crate_hash: self.crate_hash,\n                 metadata: self.metadata,\n                 windows_subsystem: self.windows_subsystem,\n                 linker_info: self.linker_info,"}, {"sha": "70b92b234e94c10803ab30e6514348481197d53d", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -21,7 +21,6 @@ extern crate tracing;\n extern crate rustc_middle;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n@@ -134,7 +133,6 @@ pub struct CodegenResults {\n     pub modules: Vec<CompiledModule>,\n     pub allocator_module: Option<CompiledModule>,\n     pub metadata_module: Option<CompiledModule>,\n-    pub crate_hash: Svh,\n     pub metadata: rustc_middle::middle::cstore::EncodedMetadata,\n     pub windows_subsystem: Option<String>,\n     pub linker_info: back::linker::LinkerInfo,\n@@ -144,6 +142,7 @@ pub struct CodegenResults {\n pub fn provide(providers: &mut Providers) {\n     crate::back::symbol_export::provide(providers);\n     crate::base::provide_both(providers);\n+    crate::target_features::provide(providers);\n }\n \n pub fn provide_extern(providers: &mut Providers) {"}, {"sha": "24cd27cf3cf89198a6f8bbd95312c6ae85392772", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -1,3 +1,5 @@\n+use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_middle::ty::query::Providers;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n@@ -148,3 +150,16 @@ pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Opt\n         _ => &[],\n     }\n }\n+\n+pub(crate) fn provide(providers: &mut Providers) {\n+    providers.supported_target_features = |tcx, cnum| {\n+        assert_eq!(cnum, LOCAL_CRATE);\n+        if tcx.sess.opts.actually_rustdoc {\n+            // rustdoc needs to be able to document functions that use all the features, so\n+            // whitelist them all\n+            all_known_features().map(|(a, b)| (a.to_string(), b)).collect()\n+        } else {\n+            supported_target_features(tcx.sess).iter().map(|&(a, b)| (a.to_string(), b)).collect()\n+        }\n+    };\n+}"}, {"sha": "3fb189e19844deb826543d23def23cd0c57e7101", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -1,10 +1,11 @@\n use super::write::WriteBackendMethods;\n use super::CodegenObject;\n-use crate::ModuleCodegen;\n+use crate::{CodegenResults, ModuleCodegen};\n \n use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::ErrorReported;\n-use rustc_middle::dep_graph::DepGraph;\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc_middle::ty::layout::{HasTyCtxt, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n@@ -80,8 +81,7 @@ pub trait CodegenBackend {\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         sess: &Session,\n-        dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported>;\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported>;\n \n     /// This is called on the returned `Box<dyn Any>` from `join_codegen`\n     ///\n@@ -91,7 +91,7 @@ pub trait CodegenBackend {\n     fn link(\n         &self,\n         sess: &Session,\n-        codegen_results: Box<dyn Any>,\n+        codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported>;\n }"}, {"sha": "c7fb6a55d5ae04bdc7e4a057fa6de66a2ecc977a", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -642,7 +642,7 @@ impl RustcDefaultCalls {\n             let codegen_results: CodegenResults = json::decode(&rlink_data).unwrap_or_else(|err| {\n                 sess.fatal(&format!(\"failed to decode rlink: {}\", err));\n             });\n-            compiler.codegen_backend().link(&sess, Box::new(codegen_results), &outputs)\n+            compiler.codegen_backend().link(&sess, codegen_results, &outputs)\n         } else {\n             sess.fatal(\"rlink must be a file\")\n         }"}, {"sha": "1de7350a3e21c5d333320954f26871221f04ca2d", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -3,6 +3,7 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n+use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::LOCAL_CRATE;\n@@ -13,7 +14,8 @@ use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::steal::Steal;\n use rustc_middle::ty::{GlobalCtxt, ResolverOutputs, TyCtxt};\n-use rustc_session::config::{OutputFilenames, OutputType};\n+use rustc_serialize::json;\n+use rustc_session::config::{self, OutputFilenames, OutputType};\n use rustc_session::{output::find_crate_name, Session};\n use rustc_span::symbol::sym;\n use std::any::Any;\n@@ -331,6 +333,7 @@ impl<'tcx> Queries<'tcx> {\n     pub fn linker(&'tcx self) -> Result<Linker> {\n         let dep_graph = self.dep_graph()?;\n         let prepare_outputs = self.prepare_outputs()?;\n+        let crate_hash = self.global_ctxt()?.peek_mut().enter(|tcx| tcx.crate_hash(LOCAL_CRATE));\n         let ongoing_codegen = self.ongoing_codegen()?;\n \n         let sess = self.session().clone();\n@@ -340,6 +343,7 @@ impl<'tcx> Queries<'tcx> {\n             sess,\n             dep_graph: dep_graph.peek().clone(),\n             prepare_outputs: prepare_outputs.take(),\n+            crate_hash,\n             ongoing_codegen: ongoing_codegen.take(),\n             codegen_backend,\n         })\n@@ -350,18 +354,31 @@ pub struct Linker {\n     sess: Lrc<Session>,\n     dep_graph: DepGraph,\n     prepare_outputs: OutputFilenames,\n+    crate_hash: Svh,\n     ongoing_codegen: Box<dyn Any>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n }\n \n impl Linker {\n     pub fn link(self) -> Result<()> {\n-        let codegen_results =\n-            self.codegen_backend.join_codegen(self.ongoing_codegen, &self.sess, &self.dep_graph)?;\n-        let prof = self.sess.prof.clone();\n+        let (codegen_results, work_products) =\n+            self.codegen_backend.join_codegen(self.ongoing_codegen, &self.sess)?;\n+\n+        self.sess.compile_status()?;\n+\n+        let sess = &self.sess;\n         let dep_graph = self.dep_graph;\n+        sess.time(\"serialize_work_products\", || {\n+            rustc_incremental::save_work_product_index(&sess, &dep_graph, work_products)\n+        });\n+\n+        let prof = self.sess.prof.clone();\n         prof.generic_activity(\"drop_dep_graph\").run(move || drop(dep_graph));\n \n+        // Now that we won't touch anything in the incremental compilation directory\n+        // any more, we can finalize it (which involves renaming it)\n+        rustc_incremental::finalize_session_directory(&self.sess, self.crate_hash);\n+\n         if !self\n             .sess\n             .opts\n@@ -371,6 +388,19 @@ impl Linker {\n         {\n             return Ok(());\n         }\n+\n+        if sess.opts.debugging_opts.no_link {\n+            // FIXME: use a binary format to encode the `.rlink` file\n+            let rlink_data = json::encode(&codegen_results).map_err(|err| {\n+                sess.fatal(&format!(\"failed to encode rlink: {}\", err));\n+            })?;\n+            let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n+            std::fs::write(&rlink_file, rlink_data).map_err(|err| {\n+                sess.fatal(&format!(\"failed to write file {}: {}\", rlink_file.display(), err));\n+            })?;\n+            return Ok(());\n+        }\n+\n         self.codegen_backend.link(&self.sess, codegen_results, &self.prepare_outputs)\n     }\n }"}, {"sha": "0e1bef6f68d53c8da40cce74c2fbe1bd07bf2e5a", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/17ee28b71f452dc914528786f7b535837ac95f85/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ee28b71f452dc914528786f7b535837ac95f85/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=17ee28b71f452dc914528786f7b535837ac95f85", "patch": "@@ -3,7 +3,6 @@\n extern crate rustc_codegen_ssa;\n extern crate rustc_errors;\n extern crate rustc_middle;\n-#[macro_use]\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_hir;\n@@ -12,17 +11,19 @@ extern crate rustc_span;\n extern crate rustc_symbol_mangling;\n extern crate rustc_target;\n \n+use rustc_codegen_ssa::back::linker::LinkerInfo;\n use rustc_codegen_ssa::traits::CodegenBackend;\n-use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_codegen_ssa::{CodegenResults, CrateInfo};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::ErrorReported;\n use rustc_middle::dep_graph::DepGraph;\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::OutputFilenames;\n use rustc_session::Session;\n-use rustc_span::symbol::Symbol;\n use rustc_target::spec::Target;\n use std::any::Any;\n use std::path::Path;\n@@ -31,14 +32,11 @@ pub struct NoLlvmMetadataLoader;\n \n impl MetadataLoader for NoLlvmMetadataLoader {\n     fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        let buf =\n-            std::fs::read(filename).map_err(|e| format!(\"metadata file open err: {:?}\", e))?;\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n-        Ok(rustc_erase_owner!(buf.map_owner_box()))\n+        unreachable!(\"some_crate.rs shouldn't depend on any external crates\");\n     }\n \n     fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        self.get_rlib_metadata(target, filename)\n+        unreachable!(\"some_crate.rs shouldn't depend on any external crates\");\n     }\n }\n \n@@ -49,53 +47,49 @@ impl CodegenBackend for TheBackend {\n         Box::new(NoLlvmMetadataLoader)\n     }\n \n-    fn provide(&self, providers: &mut Providers) {\n-        rustc_symbol_mangling::provide(providers);\n-\n-        providers.supported_target_features = |tcx, _cnum| {\n-            Default::default() // Just a dummy\n-        };\n-        providers.is_reachable_non_generic = |_tcx, _defid| true;\n-        providers.exported_symbols = |_tcx, _crate| &[];\n-    }\n-\n-    fn provide_extern(&self, providers: &mut Providers) {\n-        providers.is_reachable_non_generic = |_tcx, _defid| true;\n-    }\n+    fn provide(&self, providers: &mut Providers) {}\n+    fn provide_extern(&self, providers: &mut Providers) {}\n \n     fn codegen_crate<'a, 'tcx>(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        _metadata: EncodedMetadata,\n+        metadata: EncodedMetadata,\n         _need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n         use rustc_hir::def_id::LOCAL_CRATE;\n \n-        Box::new(tcx.crate_name(LOCAL_CRATE) as Symbol)\n+        Box::new(CodegenResults {\n+            crate_name: tcx.crate_name(LOCAL_CRATE),\n+            modules: vec![],\n+            allocator_module: None,\n+            metadata_module: None,\n+            metadata,\n+            windows_subsystem: None,\n+            linker_info: LinkerInfo::new(tcx),\n+            crate_info: CrateInfo::new(tcx),\n+        })\n     }\n \n     fn join_codegen(\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n         _sess: &Session,\n-        _dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported> {\n-        let crate_name = ongoing_codegen\n-            .downcast::<Symbol>()\n-            .expect(\"in join_codegen: ongoing_codegen is not a Symbol\");\n-        Ok(crate_name)\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+        let codegen_results = ongoing_codegen\n+            .downcast::<CodegenResults>()\n+            .expect(\"in join_codegen: ongoing_codegen is not a CodegenResults\");\n+        Ok((*codegen_results, FxHashMap::default()))\n     }\n \n     fn link(\n         &self,\n         sess: &Session,\n-        codegen_results: Box<dyn Any>,\n+        codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n         use rustc_session::{config::CrateType, output::out_filename};\n         use std::io::Write;\n-        let crate_name =\n-            codegen_results.downcast::<Symbol>().expect(\"in link: codegen_results is not a Symbol\");\n+        let crate_name = codegen_results.crate_name;\n         for &crate_type in sess.opts.crate_types.iter() {\n             if crate_type != CrateType::Rlib {\n                 sess.fatal(&format!(\"Crate type is {:?}\", crate_type));"}]}