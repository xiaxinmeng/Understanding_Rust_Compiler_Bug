{"sha": "50fc24d8a172a853b5dfe40702d6550e3b8562ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZmMyNGQ4YTE3MmE4NTNiNWRmZTQwNzAyZDY1NTBlM2I4NTYyYmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-25T17:37:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-25T17:37:02Z"}, "message": "Auto merge of #72717 - poliorcetics:try-from-int-to-nzint, r=dtolnay\n\nAdd TryFrom<{int}> for NonZero{int}\n\nAdds `TryFrom<{int}> for NonZero{int}`.\n\nIt uses the existing `NonZero{int}::new()` and `Option::ok_or()` functions, meaning the checks are not repeated.\n\nI also added tests, I tried to follow the convention I saw in the test file.\n\nI also used `#[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")]`, but I have no idea if the feature/version are correctly named or even correct.", "tree": {"sha": "76deb7c9dc12ef5ae3500c5292d23161da098de4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76deb7c9dc12ef5ae3500c5292d23161da098de4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50fc24d8a172a853b5dfe40702d6550e3b8562ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50fc24d8a172a853b5dfe40702d6550e3b8562ba", "html_url": "https://github.com/rust-lang/rust/commit/50fc24d8a172a853b5dfe40702d6550e3b8562ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50fc24d8a172a853b5dfe40702d6550e3b8562ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9", "html_url": "https://github.com/rust-lang/rust/commit/9f3c96b869b48ecd0bb556c6ad9cd603b4dacfb9"}, {"sha": "6c8d8d6a6055d19dc33cc8b33b082d17583a0e47", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8d8d6a6055d19dc33cc8b33b082d17583a0e47", "html_url": "https://github.com/rust-lang/rust/commit/6c8d8d6a6055d19dc33cc8b33b082d17583a0e47"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "46ba0a279b7fff00462f9cb88309ab1a5f826f12", "filename": "src/libcore/convert/num.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50fc24d8a172a853b5dfe40702d6550e3b8562ba/src%2Flibcore%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fc24d8a172a853b5dfe40702d6550e3b8562ba/src%2Flibcore%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fnum.rs?ref=50fc24d8a172a853b5dfe40702d6550e3b8562ba", "patch": "@@ -445,3 +445,42 @@ nzint_impl_from! { NonZeroU16, NonZeroI128, #[stable(feature = \"nz_int_conv\", si\n nzint_impl_from! { NonZeroU32, NonZeroI64, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n nzint_impl_from! { NonZeroU32, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n nzint_impl_from! { NonZeroU64, NonZeroI128, #[stable(feature = \"nz_int_conv\", since = \"1.41.0\")] }\n+\n+macro_rules! nzint_impl_try_from_int {\n+    ($Int: ty, $NonZeroInt: ty, #[$attr:meta], $doc: expr) => {\n+        #[$attr]\n+        #[doc = $doc]\n+        impl TryFrom<$Int> for $NonZeroInt {\n+            type Error = TryFromIntError;\n+\n+            #[inline]\n+            fn try_from(value: $Int) -> Result<Self, Self::Error> {\n+                Self::new(value).ok_or(TryFromIntError(()))\n+            }\n+        }\n+    };\n+    ($Int: ty, $NonZeroInt: ty, #[$attr:meta]) => {\n+        nzint_impl_try_from_int!($Int,\n+                                 $NonZeroInt,\n+                                 #[$attr],\n+                                 concat!(\"Attempts to convert `\",\n+                                         stringify!($Int),\n+                                         \"` to `\",\n+                                         stringify!($NonZeroInt),\n+                                         \"`.\"));\n+    }\n+}\n+\n+// Int -> Non-zero Int\n+nzint_impl_try_from_int! { u8, NonZeroU8, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { u16, NonZeroU16, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { u32, NonZeroU32, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { u64, NonZeroU64, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { u128, NonZeroU128, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { usize, NonZeroUsize, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { i8, NonZeroI8, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { i16, NonZeroI16, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { i32, NonZeroI32, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { i64, NonZeroI64, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { i128, NonZeroI128, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }\n+nzint_impl_try_from_int! { isize, NonZeroIsize, #[stable(feature = \"nzint_try_from_int_conv\", since = \"1.46.0\")] }"}, {"sha": "48aec6d718d3d3c0c7ac472c9b895cc159d3dea1", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/50fc24d8a172a853b5dfe40702d6550e3b8562ba/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fc24d8a172a853b5dfe40702d6550e3b8562ba/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=50fc24d8a172a853b5dfe40702d6550e3b8562ba", "patch": "@@ -1,3 +1,4 @@\n+use core::convert::TryFrom;\n use core::num::{IntErrorKind, NonZeroI32, NonZeroI8, NonZeroU32, NonZeroU8};\n use core::option::Option::{self, None, Some};\n use std::mem::size_of;\n@@ -176,3 +177,21 @@ fn test_nonzero_bitor_assign() {\n     target |= 0;\n     assert_eq!(target.get(), 0b1011_1111);\n }\n+\n+#[test]\n+fn test_nonzero_from_int_on_success() {\n+    assert_eq!(NonZeroU8::try_from(5), Ok(NonZeroU8::new(5).unwrap()));\n+    assert_eq!(NonZeroU32::try_from(5), Ok(NonZeroU32::new(5).unwrap()));\n+\n+    assert_eq!(NonZeroI8::try_from(-5), Ok(NonZeroI8::new(-5).unwrap()));\n+    assert_eq!(NonZeroI32::try_from(-5), Ok(NonZeroI32::new(-5).unwrap()));\n+}\n+\n+#[test]\n+fn test_nonzero_from_int_on_err() {\n+    assert!(NonZeroU8::try_from(0).is_err());\n+    assert!(NonZeroU32::try_from(0).is_err());\n+\n+    assert!(NonZeroI8::try_from(0).is_err());\n+    assert!(NonZeroI32::try_from(0).is_err());\n+}"}]}