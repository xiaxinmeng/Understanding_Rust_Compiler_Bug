{"sha": "8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNGYyZDExNWFjNWIzMzk1YzRmOWI4YjliZjg5YjYzYzM1ZThiMTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-08-15T17:20:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-15T17:20:22Z"}, "message": "Rollup merge of #53279 - estebank:on-unimplemented-doc, r=GuillaumeGomez\n\nExtend documentation of `rustc_on_unimplemented`", "tree": {"sha": "26de7b4ecd8b6fea305d0d50f14e15567f10dd34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26de7b4ecd8b6fea305d0d50f14e15567f10dd34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbdGDWCRBK7hj4Ov3rIwAAdHIIABEi+dosbz6sUxVyjqXYQfvN\nEca83/vVT9jb/hMGofRmCPyHE+ZylF+gfsFTfaVMmLs55PBe0wFcWwmP0XopVVDR\n0HAAw7j7fwESVAmMdV2DyMrqnEztnKzf7IkY4Bv1nxc6uIEEObcSDf3DOeHlTB+T\nJ1VcIxHgysuwwlDSfg0/9s89PnCuq2CA/esDMC/4eQVKtytxDe/VLvDxq+begWgR\n1aiBpNABkAjwn+eB/DWwAuazixghr1kqc53/RL9ofTmydd0ccjiQ3w69Bufefd3L\n3bERUqvLE0lRdFB2D3dUMilnR6PQMJRsOsHSrhOUbJMO6nJvUlFFnXQ+YVCwadc=\n=x1Y5\n-----END PGP SIGNATURE-----\n", "payload": "tree 26de7b4ecd8b6fea305d0d50f14e15567f10dd34\nparent b941c8e7fb5f4bea759ef0937c82fce3a1fd1220\nparent d35e2677fc11155d9ba197400b6bd9a3f022ed5c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1534353622 +0200\ncommitter GitHub <noreply@github.com> 1534353622 +0200\n\nRollup merge of #53279 - estebank:on-unimplemented-doc, r=GuillaumeGomez\n\nExtend documentation of `rustc_on_unimplemented`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14", "html_url": "https://github.com/rust-lang/rust/commit/8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b941c8e7fb5f4bea759ef0937c82fce3a1fd1220", "url": "https://api.github.com/repos/rust-lang/rust/commits/b941c8e7fb5f4bea759ef0937c82fce3a1fd1220", "html_url": "https://github.com/rust-lang/rust/commit/b941c8e7fb5f4bea759ef0937c82fce3a1fd1220"}, {"sha": "d35e2677fc11155d9ba197400b6bd9a3f022ed5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d35e2677fc11155d9ba197400b6bd9a3f022ed5c", "html_url": "https://github.com/rust-lang/rust/commit/d35e2677fc11155d9ba197400b6bd9a3f022ed5c"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "f787f629756f32b38fc41418eed8540fe5ce9a76", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=8e4f2d115ac5b3395c4f9b8b9bf89b63c35e8b14", "patch": "@@ -8,7 +8,9 @@ The tracking issue for this feature is: [#29628]\n \n The `on_unimplemented` feature provides the `#[rustc_on_unimplemented]`\n attribute, which allows trait definitions to add specialized notes to error\n-messages when an implementation was expected but not found.\n+messages when an implementation was expected but not found. You can refer\n+to the trait's generic arguments by name and to the resolved type using\n+`Self`.\n \n For example:\n \n@@ -41,7 +43,98 @@ error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied\n    |\n    = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n    = note: required by `iterate_chars`\n+```\n+\n+`on_unimplemented` also supports advanced filtering for better targeting\n+of messages, as well as modifying specific parts of the error message. You\n+target the text of:\n+\n+ - the main error message (`message`)\n+ - the label (`label`)\n+ - an extra note (`note`)\n+\n+For example, the following attribute\n+\n+```rust,compile_fail\n+#[rustc_on_unimplemented(\n+    message=\"message\",\n+    label=\"label\",\n+    note=\"note\"\n+)]\n+trait MyIterator<A> {\n+    fn next(&mut self) -> A;\n+}\n+```\n+\n+Would generate the following output:\n+\n+```text\n+error[E0277]: message\n+  --> <anon>:14:5\n+   |\n+14 |     iterate_chars(&[1, 2, 3][..]);\n+   |     ^^^^^^^^^^^^^ label\n+   |\n+   = note: note\n+   = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n+   = note: required by `iterate_chars`\n+```\n+\n+To allow more targeted error messages, it is possible to filter the\n+application of these fields based on a variety of attributes when using\n+`on`:\n \n-error: aborting due to previous error\n+ - `crate_local`: whether the code causing the trait bound to not be\n+   fulfilled is part of the user's crate. This is used to avoid suggesting\n+   code changes that would require modifying a dependency.\n+ - Any of the generic arguments that can be substituted in the text can be\n+   referred by name as well for filtering, like `Rhs=\"i32\"`, except for\n+   `Self`.\n+ - `_Self`: to filter only on a particular calculated trait resolution, like\n+   `Self=\"std::iter::Iterator<char>\"`. This is needed because `Self` is a\n+   keyword which cannot appear in attributes.\n+ - `direct`: user-specified rather than derived obligation.\n+ - `from_method`: usable both as boolean (whether the flag is present, like\n+   `crate_local`) or matching against a particular method. Currently used\n+   for `try`.\n+ - `from_desugaring`: usable both as boolean (whether the flag is present)\n+   or matching against a particular desugaring.\n+\n+For example, the `Iterator` trait can be annotated in the following way:\n+\n+```rust,compile_fail\n+#[rustc_on_unimplemented(\n+    on(\n+        _Self=\"&str\",\n+        note=\"call `.chars()` or `.as_bytes()` on `{Self}\"\n+    ),\n+    message=\"`{Self}` is not an iterator\",\n+    label=\"`{Self}` is not an iterator\",\n+    note=\"maybe try calling `.iter()` or a similar method\"\n+)]\n+pub trait Iterator {}\n ```\n \n+Which would produce the following outputs:\n+\n+```text\n+error[E0277]: `Foo` is not an iterator\n+ --> src/main.rs:4:16\n+  |\n+4 |     for foo in Foo {}\n+  |                ^^^ `Foo` is not an iterator\n+  |\n+  = note: maybe try calling `.iter()` or a similar method\n+  = help: the trait `std::iter::Iterator` is not implemented for `Foo`\n+  = note: required by `std::iter::IntoIterator::into_iter`\n+\n+error[E0277]: `&str` is not an iterator\n+ --> src/main.rs:5:16\n+  |\n+5 |     for foo in \"\" {}\n+  |                ^^ `&str` is not an iterator\n+  |\n+  = note: call `.chars()` or `.bytes() on `&str`\n+  = help: the trait `std::iter::Iterator` is not implemented for `&str`\n+  = note: required by `std::iter::IntoIterator::into_iter`\n+```"}]}