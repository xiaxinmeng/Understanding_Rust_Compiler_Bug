{"sha": "82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjFmOWE1YjRjY2QxZWFlMWFjNmYwMGQ5OGY5ZmI2MWI5NDk0NmQ=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-09-20T07:28:57Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-11-01T22:16:22Z"}, "message": "Add new tests and update existing for object-safe custom receivers", "tree": {"sha": "1badb24598b38ab454074c90e03200ed575e1241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1badb24598b38ab454074c90e03200ed575e1241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "html_url": "https://github.com/rust-lang/rust/commit/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47", "html_url": "https://github.com/rust-lang/rust/commit/a0f23f8405c25b8547654b40ad5fa05fbe4c4b47"}], "stats": {"total": 258, "additions": 240, "deletions": 18}, "files": [{"sha": "3abe806c9a9d367762fddcb8dc4a3f6dc70deafb", "filename": "src/test/run-pass/arbitrary_self_types_pointers_and_wrappers.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Frun-pass%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Frun-pass%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "patch": "@@ -0,0 +1,79 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(arbitrary_self_types, unsize, coerce_unsized, coerce_sized)]\n+#![feature(rustc_attrs)]\n+\n+use std::{\n+    ops::{Deref, CoerceUnsized, CoerceSized},\n+    marker::Unsize,\n+    fmt::Debug,\n+};\n+\n+struct Ptr<T: ?Sized>(Box<T>);\n+\n+impl<T: ?Sized> Deref for Ptr<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.0\n+    }\n+}\n+\n+impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n+impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceSized<Ptr<T>> for Ptr<U> {}\n+\n+struct Wrapper<T: ?Sized>(T);\n+\n+impl<T: ?Sized> Deref for Wrapper<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}\n+\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n+impl<T: CoerceUnsized<U>, U: CoerceSized<T>> CoerceSized<Wrapper<T>> for Wrapper<U> {}\n+\n+\n+trait Trait {\n+    // This method can't be called on trait objects, since the receiver would be unsized,\n+    // but should not cause an object safety error\n+    // fn wrapper(self: Wrapper<Self>) -> i32;\n+    fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;\n+    fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32;\n+    fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32;\n+}\n+\n+impl Trait for i32 {\n+    // fn wrapper(self: Wrapper<Self>) -> i32 {\n+    //     *self\n+    // }\n+    fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32 {\n+        **self\n+    }\n+    fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32 {\n+        **self\n+    }\n+    fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32 {\n+        ***self\n+    }\n+}\n+\n+fn main() {\n+    let pw = Ptr(Box::new(Wrapper(5))) as Ptr<Wrapper<dyn Trait>>;\n+    assert_eq!(pw.ptr_wrapper(), 5);\n+\n+    let wp = Wrapper(Ptr(Box::new(6))) as Wrapper<Ptr<dyn Trait>>;\n+    assert_eq!(wp.wrapper_ptr(), 6);\n+\n+    let wpw = Wrapper(Ptr(Box::new(Wrapper(7)))) as Wrapper<Ptr<Wrapper<dyn Trait>>>;\n+    assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n+}"}, {"sha": "80a7ce9691126a4aa3892b61a0d8a463548797d5", "filename": "src/test/run-pass/arbitrary_self_types_stdlib_pointers.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farbitrary_self_types_stdlib_pointers.rs?ref=82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(arbitrary_self_types)]\n+#![feature(pin)]\n+#![feature(rustc_attrs)]\n+\n+use std::{\n+    rc::Rc,\n+    sync::Arc,\n+    pin::Pin,\n+};\n+\n+trait Trait {\n+    fn by_rc(self: Rc<Self>) -> i64;\n+    fn by_arc(self: Arc<Self>) -> i64;\n+    fn by_pin_mut(self: Pin<&mut Self>) -> i64;\n+    fn by_pin_box(self: Pin<Box<Self>>) -> i64;\n+}\n+\n+impl Trait for i64 {\n+    fn by_rc(self: Rc<Self>) -> i64 {\n+        *self\n+    }\n+    fn by_arc(self: Arc<Self>) -> i64 {\n+        *self\n+    }\n+    fn by_pin_mut(self: Pin<&mut Self>) -> i64 {\n+        *self\n+    }\n+    fn by_pin_box(self: Pin<Box<Self>>) -> i64 {\n+        *self\n+    }\n+}\n+\n+fn main() {\n+    let rc = Rc::new(1i64) as Rc<dyn Trait>;\n+    assert_eq!(1, rc.by_rc());\n+\n+    let arc = Arc::new(2i64) as Arc<dyn Trait>;\n+    assert_eq!(2, arc.by_arc());\n+\n+    let mut value = 3i64;\n+    let pin_mut = Pin::new(&mut value) as Pin<&mut dyn Trait>;\n+    assert_eq!(3, pin_mut.by_pin_mut());\n+\n+    let pin_box = Into::<Pin<Box<i64>>>::into(Box::new(4i64)) as Pin<Box<dyn Trait>>;\n+    assert_eq!(4, pin_box.by_pin_box());\n+}"}, {"sha": "4dc481174a45d4ac94a5690a256b5df4bd3f1435", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.rs?ref=82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "patch": "@@ -12,38 +12,38 @@\n use std::rc::Rc;\n \n trait Foo {\n-    fn foo(self: Rc<Self>) -> usize;\n+    fn foo(self: &Rc<Self>) -> usize;\n }\n \n trait Bar {\n-    fn foo(self: Rc<Self>) -> usize where Self: Sized;\n-    fn bar(self: Box<Self>) -> usize;\n+    fn foo(self: &Rc<Self>) -> usize where Self: Sized;\n+    fn bar(self: Rc<Self>) -> usize;\n }\n \n impl Foo for usize {\n-    fn foo(self: Rc<Self>) -> usize {\n-        *self\n+    fn foo(self: &Rc<Self>) -> usize {\n+        **self\n     }\n }\n \n impl Bar for usize {\n-    fn foo(self: Rc<Self>) -> usize {\n-        *self\n+    fn foo(self: &Rc<Self>) -> usize {\n+        **self\n     }\n \n-    fn bar(self: Box<Self>) -> usize {\n+    fn bar(self: Rc<Self>) -> usize {\n         *self\n     }\n }\n \n fn make_foo() {\n-    let x = Box::new(5usize) as Box<Foo>;\n+    let x = Rc::new(5usize) as Rc<Foo>;\n     //~^ ERROR E0038\n     //~| ERROR E0038\n }\n \n fn make_bar() {\n-    let x = Box::new(5usize) as Box<Bar>;\n+    let x = Rc::new(5usize) as Rc<Bar>;\n     x.bar();\n }\n "}, {"sha": "715fc86517bee8eb0d0cf8069d5fbc753d4ec8ef", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr?ref=82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "patch": "@@ -1,19 +1,19 @@\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/arbitrary-self-types-not-object-safe.rs:40:33\n+  --> $DIR/arbitrary-self-types-not-object-safe.rs:40:32\n    |\n-LL |     let x = Box::new(5usize) as Box<Foo>;\n-   |                                 ^^^^^^^^ the trait `Foo` cannot be made into an object\n+LL |     let x = Rc::new(5usize) as Rc<Foo>;\n+   |                                ^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo` has a non-standard `self` type\n+   = note: method `foo` has an uncoercible receiver type\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:40:13\n    |\n-LL |     let x = Box::new(5usize) as Box<Foo>;\n-   |             ^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+LL |     let x = Rc::new(5usize) as Rc<Foo>;\n+   |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = note: method `foo` has a non-standard `self` type\n-   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<usize>`\n+   = note: method `foo` has an uncoercible receiver type\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "27d65b880fa15a296088aab5f12845ea49ab631d", "filename": "src/test/ui/invalid_coerce_sized_impls.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Finvalid_coerce_sized_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Finvalid_coerce_sized_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_coerce_sized_impls.rs?ref=82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsize, coerce_sized, coerce_unsized)]\n+\n+use std::{\n+    ops::{CoerceSized, CoerceUnsized},\n+    marker::{Unsize, PhantomData},\n+};\n+\n+struct WrapperWithExtraField<T>(T, i32);\n+\n+impl<T, U> CoerceUnsized<WrapperWithExtraField<U>> for WrapperWithExtraField<T>\n+where\n+    T: CoerceUnsized<U>,\n+{}\n+\n+impl<T, U> CoerceSized<WrapperWithExtraField<T>> for WrapperWithExtraField<U>\n+where\n+    T: CoerceUnsized<U>,\n+    U: CoerceSized<T>,\n+{} //~^^^^ ERROR [E0378]\n+\n+\n+struct MultiplePointers<T: ?Sized>{\n+    ptr1: *const T,\n+    ptr2: *const T,\n+}\n+\n+// No CoerceUnsized impl\n+\n+impl<T: ?Sized, U: ?Sized> CoerceSized<MultiplePointers<T>> for MultiplePointers<U>\n+where\n+    T: Unsize<U>,\n+{} //~^^^ ERROR [E0378]\n+\n+\n+struct NothingToCoerce<T: ?Sized> {\n+    data: PhantomData<T>,\n+}\n+\n+// No CoerceUnsized impl\n+\n+impl<T: ?Sized, U: ?Sized> CoerceSized<NothingToCoerce<U>> for NothingToCoerce<T> {}\n+//~^ ERROR [E0378]\n+\n+fn main() {}"}, {"sha": "70fb464d426ed35034cb84574b5d1bf68c62fef5", "filename": "src/test/ui/invalid_coerce_sized_impls.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Finvalid_coerce_sized_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d/src%2Ftest%2Fui%2Finvalid_coerce_sized_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_coerce_sized_impls.stderr?ref=82f1f9a5b4ccd1eae1ac6f00d98f9fb61b94946d", "patch": "@@ -0,0 +1,33 @@\n+error[E0378]: the trait `CoerceSized` may only be implemented for structs containing the field being coerced, `PhantomData` fields, and nothing else\n+  --> $DIR/invalid_coerce_sized_impls.rs:25:1\n+   |\n+LL | / impl<T, U> CoerceSized<WrapperWithExtraField<T>> for WrapperWithExtraField<U>\n+LL | | where\n+LL | |     T: CoerceUnsized<U>,\n+LL | |     U: CoerceSized<T>,\n+LL | | {} //~^^^^ ERROR [E0378]\n+   | |__^\n+   |\n+   = note: extra field `1` of type `i32` is not allowed\n+\n+error[E0378]: implementing the `CoerceSized` trait requires multiple coercions\n+  --> $DIR/invalid_coerce_sized_impls.rs:39:1\n+   |\n+LL | / impl<T: ?Sized, U: ?Sized> CoerceSized<MultiplePointers<T>> for MultiplePointers<U>\n+LL | | where\n+LL | |     T: Unsize<U>,\n+LL | | {} //~^^^ ERROR [E0378]\n+   | |__^\n+   |\n+   = note: the trait `CoerceSized` may only be implemented for a coercion between structures with a single field being coerced\n+   = note: currently, 2 fields need coercions: ptr1 (*const U to *const T), ptr2 (*const U to *const T)\n+\n+error[E0378]: the trait `CoerceSized` may only be implemented for a coercion between structures with a single field being coerced, none found\n+  --> $DIR/invalid_coerce_sized_impls.rs:51:1\n+   |\n+LL | impl<T: ?Sized, U: ?Sized> CoerceSized<NothingToCoerce<U>> for NothingToCoerce<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0378`."}]}