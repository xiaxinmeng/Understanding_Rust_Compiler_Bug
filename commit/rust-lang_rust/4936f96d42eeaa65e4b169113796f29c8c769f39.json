{"sha": "4936f96d42eeaa65e4b169113796f29c8c769f39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MzZmOTZkNDJlZWFhNjVlNGIxNjkxMTM3OTZmMjljOGM3NjlmMzk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2019-10-25T12:07:08Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2019-10-25T12:09:32Z"}, "message": "Add [T]::as_ptr_range() and [T]::as_mut_ptr_range().\n\nSee https://github.com/rust-lang/rfcs/pull/2791 for motivation.", "tree": {"sha": "3b51f5188292a862c89bf914bfb19c05d5cfea2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b51f5188292a862c89bf914bfb19c05d5cfea2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4936f96d42eeaa65e4b169113796f29c8c769f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4936f96d42eeaa65e4b169113796f29c8c769f39", "html_url": "https://github.com/rust-lang/rust/commit/4936f96d42eeaa65e4b169113796f29c8c769f39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4936f96d42eeaa65e4b169113796f29c8c769f39/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85943fd7c88ddf870b03afdd6cd6782721c348e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/85943fd7c88ddf870b03afdd6cd6782721c348e1", "html_url": "https://github.com/rust-lang/rust/commit/85943fd7c88ddf870b03afdd6cd6782721c348e1"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "0770b0c6f901616bed135386b1409727706ec23e", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 60, "deletions": 1, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4936f96d42eeaa65e4b169113796f29c8c769f39/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4936f96d42eeaa65e4b169113796f29c8c769f39/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=4936f96d42eeaa65e4b169113796f29c8c769f39", "patch": "@@ -28,7 +28,7 @@ use crate::fmt;\n use crate::intrinsics::{assume, exact_div, unchecked_sub, is_aligned_and_not_null};\n use crate::isize;\n use crate::iter::*;\n-use crate::ops::{FnMut, self};\n+use crate::ops::{FnMut, Range, self};\n use crate::option::Option;\n use crate::option::Option::{None, Some};\n use crate::result::Result;\n@@ -407,6 +407,65 @@ impl<T> [T] {\n         self as *mut [T] as *mut T\n     }\n \n+    /// Returns the two raw pointers spanning the slice.\n+    ///\n+    /// The returned range is half-open, which means that the end pointer\n+    /// points *one past* the last element of the slice. This way, an empty\n+    /// slice is represented by two equal pointers, and the difference between\n+    /// the two pointers represents the size of the size.\n+    ///\n+    /// See [`as_ptr`] for warnings on using these pointers. The end pointer\n+    /// requires extra caution, as it does not point to a valid element in the\n+    /// slice.\n+    ///\n+    /// This function is useful for interacting with foreign interfaces which\n+    /// use two pointers to refer to a range of elements in memory, as is\n+    /// common in C++.\n+    ///\n+    /// It can also be useful to check if a reference or pointer to an element\n+    /// refers to an element of this slice:\n+    ///\n+    /// ```\n+    /// let a = [1,2,3];\n+    /// let x = &a[1];\n+    /// let y = &5;\n+    /// assert!(a.as_ptr_range().contains(x));\n+    /// assert!(!a.as_ptr_range().contains(y));\n+    /// ```\n+    ///\n+    /// [`as_ptr`]: #method.as_ptr\n+    #[unstable(feature = \"slice_ptr_range\", issue = \"0\")]\n+    #[inline]\n+    pub fn as_ptr_range(&self) -> Range<*const T> {\n+        let start = self.as_ptr();\n+        let end = unsafe { start.add(self.len()) };\n+        start..end\n+    }\n+\n+    /// Returns the two unsafe mutable pointers spanning the slice.\n+    ///\n+    /// The returned range is half-open, which means that the end pointer\n+    /// points *one past* the last element of the slice. This way, an empty\n+    /// slice is represented by two equal pointers, and the difference between\n+    /// the two pointers represents the size of the size.\n+    ///\n+    /// See [`as_mut_ptr`] for warnings on using these pointers. The end\n+    /// pointer requires extra caution, as it does not point to a valid element\n+    /// in the slice.\n+    ///\n+    /// This function is useful for interacting with foreign interfaces which\n+    /// use two pointers to refer to a range of elements in memory, as is\n+    /// common in C++.\n+    ///\n+    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    #[unstable(feature = \"slice_ptr_range\", issue = \"0\")]\n+    #[inline]\n+    pub fn as_mut_ptr_range(&mut self) -> Range<*mut T> {\n+        let start = self.as_mut_ptr();\n+        let end = unsafe { start.add(self.len()) };\n+        start..end\n+    }\n+\n     /// Swaps two elements in the slice.\n     ///\n     /// # Arguments"}]}