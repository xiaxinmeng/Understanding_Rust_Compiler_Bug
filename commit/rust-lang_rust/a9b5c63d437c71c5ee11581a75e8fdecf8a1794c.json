{"sha": "a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjVjNjNkNDM3YzcxYzVlZTExNTgxYTc1ZThmZGVjZjhhMTc5NGM=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-20T04:26:49Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:04:46Z"}, "message": "Move eh_unwind_resume into CrateContext\n\nAlso improves cache quality.", "tree": {"sha": "f07fca74113e5e2decdbb954740594f9f6e0dfea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f07fca74113e5e2decdbb954740594f9f6e0dfea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "html_url": "https://github.com/rust-lang/rust/commit/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a811f608349ee5044ffcdcd2c8190b913d0668e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a811f608349ee5044ffcdcd2c8190b913d0668e4", "html_url": "https://github.com/rust-lang/rust/commit/a811f608349ee5044ffcdcd2c8190b913d0668e4"}], "stats": {"total": 81, "additions": 37, "deletions": 44}, "files": [{"sha": "9409ac5f8e1c76623284eba44dc1e5fe29f0043b", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> DropValue<'tcx> {\n                 bcx.resume(llretval);\n             } else {\n                 let exc_ptr = bcx.extract_value(llretval, 0);\n-                bcx.call(fcx.eh_unwind_resume().reify(fcx.ccx), &[exc_ptr], None);\n+                bcx.call(bcx.ccx.eh_unwind_resume(), &[exc_ptr], None);\n                 bcx.unreachable();\n             }\n         }"}, {"sha": "71e17f1ea74051376c83ab4df19be3b06b1e9fac", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "patch": "@@ -21,10 +21,8 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::map::DefPathData;\n use rustc::util::common::MemoizationMap;\n use middle::lang_items::LangItem;\n-use abi::Abi;\n use base;\n use builder::Builder;\n-use callee::Callee;\n use consts;\n use declare;\n use machine;\n@@ -285,37 +283,6 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         BlockAndBuilder::new(self.new_block(name), self)\n     }\n \n-    // Returns a ValueRef of the \"eh_unwind_resume\" lang item if one is defined,\n-    // otherwise declares it as an external function.\n-    pub fn eh_unwind_resume(&self) -> Callee<'tcx> {\n-        use attributes;\n-        let ccx = self.ccx;\n-        let tcx = ccx.tcx();\n-        assert!(ccx.sess().target.target.options.custom_unwind_resume);\n-        if let Some(def_id) = tcx.lang_items.eh_unwind_resume() {\n-            return Callee::def(ccx, def_id, tcx.intern_substs(&[]));\n-        }\n-\n-        let ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n-            unsafety: hir::Unsafety::Unsafe,\n-            abi: Abi::C,\n-            sig: ty::Binder(tcx.mk_fn_sig(\n-                iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n-                tcx.types.never,\n-                false\n-            )),\n-        }));\n-\n-        let unwresume = ccx.eh_unwind_resume();\n-        if let Some(llfn) = unwresume.get() {\n-            return Callee::ptr(llfn, ty);\n-        }\n-        let llfn = declare::declare_fn(ccx, \"rust_eh_unwind_resume\", ty);\n-        attributes::unwind(llfn, true);\n-        unwresume.set(Some(llfn));\n-        Callee::ptr(llfn, ty)\n-    }\n-\n     pub fn alloca(&self, ty: Type, name: &str) -> ValueRef {\n         self.alloca_builder.dynamic_alloca(ty, name)\n     }"}, {"sha": "0f56aa70bd97903d0c79d13b09ab303e59f569ad", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "patch": "@@ -12,6 +12,7 @@ use llvm;\n use llvm::{ContextRef, ModuleRef, ValueRef};\n use rustc::dep_graph::{DepGraph, DepNode, DepTrackingMap, DepTrackingMapConfig, WorkProduct};\n use middle::cstore::LinkMeta;\n+use rustc::hir;\n use rustc::hir::def::ExportMap;\n use rustc::hir::def_id::DefId;\n use rustc::traits;\n@@ -38,12 +39,13 @@ use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n use std::marker::PhantomData;\n use std::ptr;\n+use std::iter;\n use std::rc::Rc;\n use std::str;\n use syntax::ast;\n use syntax::symbol::InternedString;\n use syntax_pos::DUMMY_SP;\n-use abi::FnType;\n+use abi::{Abi, FnType};\n \n pub struct Stats {\n     pub n_glues_created: Cell<usize>,\n@@ -827,10 +829,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local().dbg_cx\n     }\n \n-    pub fn eh_unwind_resume<'a>(&'a self) -> &'a Cell<Option<ValueRef>> {\n-        &self.local().eh_unwind_resume\n-    }\n-\n     pub fn rust_try_fn<'a>(&'a self) -> &'a Cell<Option<ValueRef>> {\n         &self.local().rust_try_fn\n     }\n@@ -951,6 +949,38 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         }\n     }\n \n+    // Returns a ValueRef of the \"eh_unwind_resume\" lang item if one is defined,\n+    // otherwise declares it as an external function.\n+    pub fn eh_unwind_resume(&self) -> ValueRef {\n+        use attributes;\n+        let unwresume = &self.local().eh_unwind_resume;\n+        if let Some(llfn) = unwresume.get() {\n+            return llfn;\n+        }\n+\n+        let tcx = self.tcx();\n+        assert!(self.sess().target.target.options.custom_unwind_resume);\n+        if let Some(def_id) = tcx.lang_items.eh_unwind_resume() {\n+            let llfn = Callee::def(self, def_id, tcx.intern_substs(&[])).reify(self);\n+            unwresume.set(Some(llfn));\n+            return llfn;\n+        }\n+\n+        let ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {\n+            unsafety: hir::Unsafety::Unsafe,\n+            abi: Abi::C,\n+            sig: ty::Binder(tcx.mk_fn_sig(\n+                iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n+                tcx.types.never,\n+                false\n+            )),\n+        }));\n+\n+        let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", ty);\n+        attributes::unwind(llfn, true);\n+        unwresume.set(Some(llfn));\n+        llfn\n+    }\n }\n \n pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'tcx>);"}, {"sha": "5ad52b3d252cb1c29089560b4f651257f850c7d5", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b5c63d437c71c5ee11581a75e8fdecf8a1794c/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=a9b5c63d437c71c5ee11581a75e8fdecf8a1794c", "patch": "@@ -125,11 +125,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                         bcx.resume(lp);\n                     } else {\n                         let exc_ptr = bcx.extract_value(lp, 0);\n-                        bcx.call(\n-                            bcx.fcx().eh_unwind_resume().reify(bcx.ccx),\n-                            &[exc_ptr],\n-                            cleanup_bundle,\n-                        );\n+                        bcx.call(bcx.ccx.eh_unwind_resume(), &[exc_ptr], cleanup_bundle);\n                         bcx.unreachable();\n                     }\n                 }"}]}