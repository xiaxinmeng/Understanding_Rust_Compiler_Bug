{"sha": "e2f1a9a55868abd2150ae4f05c79d4970774d59d", "node_id": "C_kwDOAAsO6NoAKGUyZjFhOWE1NTg2OGFiZDIxNTBhZTRmMDVjNzlkNDk3MDc3NGQ1OWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-17T11:33:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-04-17T11:33:39Z"}, "message": "feat: Attempt to format expand_macro output with rustfmt if possible", "tree": {"sha": "38a6fee673a582582f86e6c2f4bbb2ae2508de67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38a6fee673a582582f86e6c2f4bbb2ae2508de67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2f1a9a55868abd2150ae4f05c79d4970774d59d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2f1a9a55868abd2150ae4f05c79d4970774d59d", "html_url": "https://github.com/rust-lang/rust/commit/e2f1a9a55868abd2150ae4f05c79d4970774d59d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2f1a9a55868abd2150ae4f05c79d4970774d59d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53afd2a707138230dee582fa1d5c3075cab2b6b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/53afd2a707138230dee582fa1d5c3075cab2b6b7", "html_url": "https://github.com/rust-lang/rust/commit/53afd2a707138230dee582fa1d5c3075cab2b6b7"}], "stats": {"total": 84, "additions": 76, "deletions": 8}, "files": [{"sha": "78ad6dc07db873092e68c22859bdbdfb224804af", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1a9a55868abd2150ae4f05c79d4970774d59d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1a9a55868abd2150ae4f05c79d4970774d59d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e2f1a9a55868abd2150ae4f05c79d4970774d59d", "patch": "@@ -611,6 +611,7 @@ dependencies = [\n  \"syntax\",\n  \"test_utils\",\n  \"text_edit\",\n+ \"toolchain\",\n  \"tracing\",\n  \"url\",\n ]"}, {"sha": "02eb46333be846d6118eaee20f4020f417b7a145", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1a9a55868abd2150ae4f05c79d4970774d59d/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1a9a55868abd2150ae4f05c79d4970774d59d/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=e2f1a9a55868abd2150ae4f05c79d4970774d59d", "patch": "@@ -32,6 +32,7 @@ ide_assists = { path = \"../ide_assists\", version = \"0.0.0\" }\n ide_diagnostics = { path = \"../ide_diagnostics\", version = \"0.0.0\" }\n ide_ssr = { path = \"../ide_ssr\", version = \"0.0.0\" }\n ide_completion = { path = \"../ide_completion\", version = \"0.0.0\" }\n+toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n \n # ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "41984a55c6fbc27c8e53e3f5466c43f897027c0c", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1a9a55868abd2150ae4f05c79d4970774d59d/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1a9a55868abd2150ae4f05c79d4970774d59d/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=e2f1a9a55868abd2150ae4f05c79d4970774d59d", "patch": "@@ -1,7 +1,7 @@\n use hir::Semantics;\n use ide_db::{\n-    helpers::pick_best_token, syntax_helpers::insert_whitespace_into_node::insert_ws_into,\n-    RootDatabase,\n+    base_db::FileId, helpers::pick_best_token,\n+    syntax_helpers::insert_whitespace_into_node::insert_ws_into, RootDatabase,\n };\n use syntax::{ast, ted, AstNode, NodeOrToken, SyntaxKind, SyntaxNode, T};\n \n@@ -58,10 +58,9 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n             .take_while(|it| it != &token)\n             .filter(|it| it.kind() == T![,])\n             .count();\n-        Some(ExpandedMacro {\n-            name,\n-            expansion: expansions.get(idx).cloned().map(insert_ws_into)?.to_string(),\n-        })\n+        let expansion =\n+            format(db, SyntaxKind::MACRO_ITEMS, position.file_id, expansions.get(idx).cloned()?);\n+        Some(ExpandedMacro { name, expansion })\n     });\n \n     if derive.is_some() {\n@@ -72,25 +71,29 @@ pub(crate) fn expand_macro(db: &RootDatabase, position: FilePosition) -> Option<\n     // currently we only recursively expand one of the two types\n     let mut expanded = None;\n     let mut name = None;\n+    let mut kind = SyntaxKind::ERROR;\n     for node in tok.ancestors() {\n         if let Some(item) = ast::Item::cast(node.clone()) {\n             if let Some(def) = sema.resolve_attr_macro_call(&item) {\n                 name = Some(def.name(db).to_string());\n                 expanded = expand_attr_macro_recur(&sema, &item);\n+                kind = SyntaxKind::MACRO_ITEMS;\n                 break;\n             }\n         }\n         if let Some(mac) = ast::MacroCall::cast(node) {\n             name = Some(mac.path()?.segment()?.name_ref()?.to_string());\n             expanded = expand_macro_recur(&sema, &mac);\n+            kind = mac.syntax().parent().map(|it| it.kind()).unwrap_or(SyntaxKind::MACRO_ITEMS);\n             break;\n         }\n     }\n \n     // FIXME:\n     // macro expansion may lose all white space information\n     // But we hope someday we can use ra_fmt for that\n-    let expansion = insert_ws_into(expanded?).to_string();\n+    let expansion = format(db, kind, position.file_id, expanded?);\n+\n     Some(ExpandedMacro { name: name.unwrap_or_else(|| \"???\".to_owned()), expansion })\n }\n \n@@ -130,6 +133,70 @@ fn expand<T: AstNode>(\n     Some(expanded)\n }\n \n+fn format(db: &RootDatabase, kind: SyntaxKind, file_id: FileId, expanded: SyntaxNode) -> String {\n+    let expansion = insert_ws_into(expanded).to_string();\n+\n+    _format(db, kind, file_id, &expansion).unwrap_or(expansion)\n+}\n+\n+#[cfg(test)]\n+fn _format(\n+    _db: &RootDatabase,\n+    _kind: SyntaxKind,\n+    _file_id: FileId,\n+    _expansion: &str,\n+) -> Option<String> {\n+    None\n+}\n+\n+#[cfg(not(test))]\n+fn _format(\n+    db: &RootDatabase,\n+    kind: SyntaxKind,\n+    file_id: FileId,\n+    expansion: &str,\n+) -> Option<String> {\n+    use ide_db::base_db::{FileLoader, SourceDatabase};\n+    // hack until we get hygiene working (same character amount to preserve formatting as much as possible)\n+    const DOLLAR_CRATE_REPLACE: &str = &\"__r_a_\";\n+    let expansion = expansion.replace(\"$crate\", DOLLAR_CRATE_REPLACE);\n+    let (prefix, suffix) = match kind {\n+        SyntaxKind::MACRO_PAT => (\"fn __(\", \": u32);\"),\n+        SyntaxKind::MACRO_EXPR | SyntaxKind::MACRO_STMTS => (\"fn __() {\", \"}\"),\n+        SyntaxKind::MACRO_TYPE => (\"type __ =\", \";\"),\n+        _ => (\"\", \"\"),\n+    };\n+    let expansion = format!(\"{prefix}{expansion}{suffix}\");\n+\n+    let &crate_id = db.relevant_crates(file_id).iter().next()?;\n+    let edition = db.crate_graph()[crate_id].edition;\n+\n+    let mut cmd = std::process::Command::new(toolchain::rustfmt());\n+    cmd.arg(\"--edition\");\n+    cmd.arg(edition.to_string());\n+\n+    let mut rustfmt = cmd\n+        .stdin(std::process::Stdio::piped())\n+        .stdout(std::process::Stdio::piped())\n+        .stderr(std::process::Stdio::piped())\n+        .spawn()\n+        .ok()?;\n+\n+    std::io::Write::write_all(&mut rustfmt.stdin.as_mut()?, expansion.as_bytes()).ok()?;\n+\n+    let output = rustfmt.wait_with_output().ok()?;\n+    let captured_stdout = String::from_utf8(output.stdout).ok()?;\n+\n+    if output.status.success() && !captured_stdout.trim().is_empty() {\n+        let foo = captured_stdout.replace(DOLLAR_CRATE_REPLACE, \"$crate\");\n+        let trim_indent = stdx::trim_indent(foo.trim().strip_prefix(prefix)?.strip_suffix(suffix)?);\n+        tracing::debug!(\"expand_macro: formatting succeeded\");\n+        Some(trim_indent)\n+    } else {\n+        None\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}, {"sha": "1fb3b5ec3f38b233270fd8e65d24e521d23434b5", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2f1a9a55868abd2150ae4f05c79d4970774d59d/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2f1a9a55868abd2150ae4f05c79d4970774d59d/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=e2f1a9a55868abd2150ae4f05c79d4970774d59d", "patch": "@@ -340,7 +340,6 @@ impl TryToNav for hir::Macro {\n             Either::Left(it) => it,\n             Either::Right(it) => it,\n         };\n-        tracing::debug!(\"nav target {:#?}\", name_owner.syntax());\n         let mut res = NavigationTarget::from_named(\n             db,\n             src.as_ref().with_value(name_owner),"}]}