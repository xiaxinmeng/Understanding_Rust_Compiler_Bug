{"sha": "c1fe071cfd6371f39a6c9b0e9a896e068257ee35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZmUwNzFjZmQ2MzcxZjM5YTZjOWIwZTlhODk2ZTA2ODI1N2VlMzU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-06T12:01:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-06T12:01:20Z"}, "message": "Rollup merge of #35281 - apasel422:repr, r=GuillaumeGomez\n\nClean up `std::raw` docs\n\nThere is no longer a `Repr` trait, so mentioning a missing impl of it was potentially confusing.\n\nr? @steveklabnik", "tree": {"sha": "d2e749a408a84feae5101e17aa158c3b0db97014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2e749a408a84feae5101e17aa158c3b0db97014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1fe071cfd6371f39a6c9b0e9a896e068257ee35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1fe071cfd6371f39a6c9b0e9a896e068257ee35", "html_url": "https://github.com/rust-lang/rust/commit/c1fe071cfd6371f39a6c9b0e9a896e068257ee35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1fe071cfd6371f39a6c9b0e9a896e068257ee35/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f7b265042c5dc023f24aaf65db60d030c8dbc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/68f7b265042c5dc023f24aaf65db60d030c8dbc2", "html_url": "https://github.com/rust-lang/rust/commit/68f7b265042c5dc023f24aaf65db60d030c8dbc2"}, {"sha": "da2b7a65b9d51948d0640474f6c7c0d729ef674e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da2b7a65b9d51948d0640474f6c7c0d729ef674e", "html_url": "https://github.com/rust-lang/rust/commit/da2b7a65b9d51948d0640474f6c7c0d729ef674e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a7d0d3899b181d2dd3add95f7bbb46c2bb83ced3", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1fe071cfd6371f39a6c9b0e9a896e068257ee35/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1fe071cfd6371f39a6c9b0e9a896e068257ee35/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=c1fe071cfd6371f39a6c9b0e9a896e068257ee35", "patch": "@@ -34,12 +34,13 @@\n /// only designed to be used by unsafe code that needs to manipulate\n /// the low-level details.\n ///\n-/// There is no `Repr` implementation for `TraitObject` because there\n-/// is no way to refer to all trait objects generically, so the only\n+/// There is no way to refer to all trait objects generically, so the only\n /// way to create values of this type is with functions like\n-/// `std::mem::transmute`. Similarly, the only way to create a true\n+/// [`std::mem::transmute`][transmute]. Similarly, the only way to create a true\n /// trait object from a `TraitObject` value is with `transmute`.\n ///\n+/// [transmute]: ../intrinsics/fn.transmute.html\n+///\n /// Synthesizing a trait object with mismatched types\u2014one where the\n /// vtable does not correspond to the type of the value to which the\n /// data pointer points\u2014is highly likely to lead to undefined\n@@ -50,13 +51,13 @@\n /// ```\n /// #![feature(raw)]\n ///\n-/// use std::mem;\n-/// use std::raw;\n+/// use std::{mem, raw};\n ///\n /// // an example trait\n /// trait Foo {\n ///     fn bar(&self) -> i32;\n /// }\n+///\n /// impl Foo for i32 {\n ///     fn bar(&self) -> i32 {\n ///          *self + 1\n@@ -74,19 +75,18 @@\n /// // the data pointer is the address of `value`\n /// assert_eq!(raw_object.data as *const i32, &value as *const _);\n ///\n-///\n /// let other_value: i32 = 456;\n ///\n /// // construct a new object, pointing to a different `i32`, being\n /// // careful to use the `i32` vtable from `object`\n /// let synthesized: &Foo = unsafe {\n ///      mem::transmute(raw::TraitObject {\n ///          data: &other_value as *const _ as *mut (),\n-///          vtable: raw_object.vtable\n+///          vtable: raw_object.vtable,\n ///      })\n /// };\n ///\n-/// // it should work just like we constructed a trait object out of\n+/// // it should work just as if we had constructed a trait object out of\n /// // `other_value` directly\n /// assert_eq!(synthesized.bar(), 457);\n /// ```"}]}