{"sha": "3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNmEyOWI0ZWNmZGI3ZjY0MWNhNjk5ZmNkNjZhMDliNGJhYWFlNmE=", "commit": {"author": {"name": "Ilija Tovilo", "email": "ilija.tovilo@me.com", "date": "2019-07-31T19:00:35Z"}, "committer": {"name": "Ilija Tovilo", "email": "ilija.tovilo@me.com", "date": "2019-08-08T20:39:15Z"}, "message": "Use associated_type_bounds where applicable - closes #61738", "tree": {"sha": "9d577f11fb6f00c835bf70b13d8a90e7934719e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d577f11fb6f00c835bf70b13d8a90e7934719e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEzbqtco3jAIy93eipPxI9Ct1EgZgFAl1MiHYACgkQPxI9Ct1E\ngZiCjw//b+hueGpc5ZR9Tox8XW4tFFa1DX69S/DGyrYBOIfzjvx4fn1D45lCoOvt\njDVYNRDye8YpXWfpUZqfUgSvDXHNQoXVAprzobUEPyfz8XFx4TqfLyHILv3LXzqG\nSNDmDyqAYbUA8wZnZudz2oVvn5Bpu3JdKcF5kUSEo2urQ1ivpy3U8dQxKJsmhmJ2\nrcKQvpS/AHqxY1F1YsJq2FvesYlCNdUoC7XAzIW11n1NvrNJtVuHhqR7KOHCfTWH\n4aKLWlPt5DZFSr+GSQCvWjMGSbHgtqr2zJfconooqaWN53H0V94VG/lAh2VvwC4a\nglQ1qouePAK4CsZwJ4TaDcM1OMt9yJ379xR3L6lFx17ncFqTT8ESZBduVpzGwwP+\nVL7lCKf1ih7PGT3D6KeXZiyP0a8VWitD4FSJJVe7EaS3MTbSRhVRPC2Evnr9atUA\nb7Z4fBVXYpM4DyxtoSvbrcknRrVS3SuP1V87eNRixJmhkRpRFDNoZ69H0Wcy219P\nt6Bv9MjPN2k+VG29S4OsBjyjK+TT5nIZx/fYzKDh31eMOKPT4sWRyz3r+zFrFAIj\njZ/6XRSBSUnu4UYnZMQcbr5jySXfwlFNhaRq0edYaYrFtnXwvZjLhuEgztcsc6j1\nGSxoLJ6WkyQMJHG0RLvmgDdOwHIhtEOxcCbYIKdWLtEdJQ/GwKU=\n=9cKw\n-----END PGP SIGNATURE-----", "payload": "tree 9d577f11fb6f00c835bf70b13d8a90e7934719e1\nparent d4abb08be6c3a06a14e285396f5e3ef367584f77\nauthor Ilija Tovilo <ilija.tovilo@me.com> 1564599635 +0200\ncommitter Ilija Tovilo <ilija.tovilo@me.com> 1565296755 +0200\n\nUse associated_type_bounds where applicable - closes #61738\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "html_url": "https://github.com/rust-lang/rust/commit/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/comments", "author": {"login": "iluuu1994", "id": 1752683, "node_id": "MDQ6VXNlcjE3NTI2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1752683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iluuu1994", "html_url": "https://github.com/iluuu1994", "followers_url": "https://api.github.com/users/iluuu1994/followers", "following_url": "https://api.github.com/users/iluuu1994/following{/other_user}", "gists_url": "https://api.github.com/users/iluuu1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/iluuu1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iluuu1994/subscriptions", "organizations_url": "https://api.github.com/users/iluuu1994/orgs", "repos_url": "https://api.github.com/users/iluuu1994/repos", "events_url": "https://api.github.com/users/iluuu1994/events{/privacy}", "received_events_url": "https://api.github.com/users/iluuu1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iluuu1994", "id": 1752683, "node_id": "MDQ6VXNlcjE3NTI2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1752683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iluuu1994", "html_url": "https://github.com/iluuu1994", "followers_url": "https://api.github.com/users/iluuu1994/followers", "following_url": "https://api.github.com/users/iluuu1994/following{/other_user}", "gists_url": "https://api.github.com/users/iluuu1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/iluuu1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iluuu1994/subscriptions", "organizations_url": "https://api.github.com/users/iluuu1994/orgs", "repos_url": "https://api.github.com/users/iluuu1994/repos", "events_url": "https://api.github.com/users/iluuu1994/events{/privacy}", "received_events_url": "https://api.github.com/users/iluuu1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4abb08be6c3a06a14e285396f5e3ef367584f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4abb08be6c3a06a14e285396f5e3ef367584f77", "html_url": "https://github.com/rust-lang/rust/commit/d4abb08be6c3a06a14e285396f5e3ef367584f77"}], "stats": {"total": 293, "additions": 169, "deletions": 124}, "files": [{"sha": "a9c5bce4c25fc212a1b821b3b56bec87c736373a", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -329,8 +329,8 @@ impl<'a, B: ?Sized> PartialOrd for Cow<'a, B>\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: ?Sized> fmt::Debug for Cow<'_, B>\n-    where B: fmt::Debug + ToOwned,\n-          <B as ToOwned>::Owned: fmt::Debug\n+where\n+    B: fmt::Debug + ToOwned<Owned: fmt::Debug>,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n@@ -342,8 +342,8 @@ impl<B: ?Sized> fmt::Debug for Cow<'_, B>\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: ?Sized> fmt::Display for Cow<'_, B>\n-    where B: fmt::Display + ToOwned,\n-          <B as ToOwned>::Owned: fmt::Display\n+where\n+    B: fmt::Display + ToOwned<Owned: fmt::Display>,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n@@ -355,8 +355,8 @@ impl<B: ?Sized> fmt::Display for Cow<'_, B>\n \n #[stable(feature = \"default\", since = \"1.11.0\")]\n impl<B: ?Sized> Default for Cow<'_, B>\n-    where B: ToOwned,\n-          <B as ToOwned>::Owned: Default\n+where\n+    B: ToOwned<Owned: Default>,\n {\n     /// Creates an owned Cow<'a, B> with the default value for the contained owned value.\n     fn default() -> Self {"}, {"sha": "a1936b36ac6bf9b4f4c72d8b4dde734f81f09dfa", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -122,6 +122,7 @@\n #![feature(alloc_layout_extra)]\n #![feature(try_trait)]\n #![feature(mem_take)]\n+#![feature(associated_type_bounds)]\n \n // Allow testing this library\n "}, {"sha": "4332b2e90fdaf0493deb3f1489137632fa2ede6e", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -1638,10 +1638,12 @@ mod pattern {\n         }\n     }\n \n-    fn cmp_search_to_vec<'a, P: Pattern<'a>>(rev: bool, pat: P, haystack: &'a str,\n-                                             right: Vec<SearchStep>)\n-    where P::Searcher: ReverseSearcher<'a>\n-    {\n+    fn cmp_search_to_vec<'a>(\n+        rev: bool,\n+        pat: impl Pattern<'a, Searcher: ReverseSearcher<'a>>,\n+        haystack: &'a str,\n+        right: Vec<SearchStep>\n+    ) {\n         let mut searcher = pat.into_searcher(haystack);\n         let mut v = vec![];\n         loop {"}, {"sha": "641621f492baf33bcc9cef66454ff352f065dca1", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -513,7 +513,7 @@ impl<T: ?Sized, U: ?Sized> AsRef<U> for &mut T where T: AsRef<U>\n \n // FIXME (#45742): replace the above impls for &/&mut with the following more general one:\n // // As lifts over Deref\n-// impl<D: ?Sized + Deref, U: ?Sized> AsRef<U> for D where D::Target: AsRef<U> {\n+// impl<D: ?Sized + Deref<Target: AsRef<U>>, U: ?Sized> AsRef<U> for D {\n //     fn as_ref(&self) -> &U {\n //         self.deref().as_ref()\n //     }\n@@ -530,7 +530,7 @@ impl<T: ?Sized, U: ?Sized> AsMut<U> for &mut T where T: AsMut<U>\n \n // FIXME (#45742): replace the above impl for &mut with the following more general one:\n // // AsMut lifts over DerefMut\n-// impl<D: ?Sized + Deref, U: ?Sized> AsMut<U> for D where D::Target: AsMut<U> {\n+// impl<D: ?Sized + Deref<Target: AsMut<U>>, U: ?Sized> AsMut<U> for D {\n //     fn as_mut(&mut self) -> &mut U {\n //         self.deref_mut().as_mut()\n //     }"}, {"sha": "f14ed38b9b0f27c4c5a39bd8450b466a4d07cc3d", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -111,8 +111,7 @@ impl<F: ?Sized + Future + Unpin> Future for &mut F {\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<P> Future for Pin<P>\n where\n-    P: Unpin + ops::DerefMut,\n-    P::Target: Future,\n+    P: Unpin + ops::DerefMut<Target: Future>,\n {\n     type Output = <<P as ops::Deref>::Target as Future>::Output;\n "}, {"sha": "d8d41a2a31ef6e0b5904d6ce8e6d0625257461f5", "filename": "src/libcore/iter/adapters/flatten.rs", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fflatten.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -24,15 +24,17 @@ impl<I: Iterator, U: IntoIterator, F: FnMut(I::Item) -> U> FlatMap<I, U, F> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: Clone, U: Clone + IntoIterator, F: Clone> Clone for FlatMap<I, U, F>\n-    where <U as IntoIterator>::IntoIter: Clone\n+impl<I: Clone, U, F: Clone> Clone for FlatMap<I, U, F>\n+where\n+    U: Clone + IntoIterator<IntoIter: Clone>,\n {\n     fn clone(&self) -> Self { FlatMap { inner: self.inner.clone() } }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n-impl<I: fmt::Debug, U: IntoIterator, F> fmt::Debug for FlatMap<I, U, F>\n-    where U::IntoIter: fmt::Debug\n+impl<I: fmt::Debug, U, F> fmt::Debug for FlatMap<I, U, F>\n+where\n+    U: IntoIterator<IntoIter: fmt::Debug>,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"FlatMap\").field(\"inner\", &self.inner).finish()\n@@ -68,9 +70,10 @@ impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: DoubleEndedIterator, U, F> DoubleEndedIterator for FlatMap<I, U, F>\n-    where F: FnMut(I::Item) -> U,\n-          U: IntoIterator,\n-          U::IntoIter: DoubleEndedIterator\n+where\n+    F: FnMut(I::Item) -> U,\n+    U: IntoIterator,\n+    U::IntoIter: DoubleEndedIterator,\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<U::Item> { self.inner.next_back() }\n@@ -105,20 +108,23 @@ impl<I, U, F> FusedIterator for FlatMap<I, U, F>\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub struct Flatten<I: Iterator>\n-where I::Item: IntoIterator {\n+where\n+    I::Item: IntoIterator,\n+{\n     inner: FlattenCompat<I, <I::Item as IntoIterator>::IntoIter>,\n }\n-impl<I: Iterator> Flatten<I>\n-where I::Item: IntoIterator {\n+\n+impl<I: Iterator<Item: IntoIterator>> Flatten<I> {\n     pub(in super::super) fn new(iter: I) -> Flatten<I> {\n         Flatten { inner: FlattenCompat::new(iter) }\n     }\n }\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> fmt::Debug for Flatten<I>\n-    where I: Iterator + fmt::Debug, U: Iterator + fmt::Debug,\n-          I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n+where\n+    I: fmt::Debug + Iterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n+    U: fmt::Debug + Iterator,\n {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"Flatten\").field(\"inner\", &self.inner).finish()\n@@ -127,16 +133,18 @@ impl<I, U> fmt::Debug for Flatten<I>\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> Clone for Flatten<I>\n-    where I: Iterator + Clone, U: Iterator + Clone,\n-          I::Item: IntoIterator<IntoIter = U, Item = U::Item>,\n+where\n+    I: Clone + Iterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n+    U: Clone + Iterator,\n {\n     fn clone(&self) -> Self { Flatten { inner: self.inner.clone() } }\n }\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> Iterator for Flatten<I>\n-    where I: Iterator, U: Iterator,\n-          I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n+where\n+    I: Iterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n+    U: Iterator,\n {\n     type Item = U::Item;\n \n@@ -163,8 +171,9 @@ impl<I, U> Iterator for Flatten<I>\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> DoubleEndedIterator for Flatten<I>\n-    where I: DoubleEndedIterator, U: DoubleEndedIterator,\n-          I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n+where\n+    I: DoubleEndedIterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n+    U: DoubleEndedIterator,\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<U::Item> { self.inner.next_back() }\n@@ -186,8 +195,10 @@ impl<I, U> DoubleEndedIterator for Flatten<I>\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n impl<I, U> FusedIterator for Flatten<I>\n-    where I: FusedIterator, U: Iterator,\n-          I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}\n+where\n+    I: FusedIterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n+    U: Iterator,\n+{}\n \n /// Real logic of both `Flatten` and `FlatMap` which simply delegate to\n /// this type.\n@@ -205,8 +216,9 @@ impl<I, U> FlattenCompat<I, U> {\n }\n \n impl<I, U> Iterator for FlattenCompat<I, U>\n-    where I: Iterator, U: Iterator,\n-          I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n+where\n+    I: Iterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n+    U: Iterator,\n {\n     type Item = U::Item;\n \n@@ -274,8 +286,9 @@ impl<I, U> Iterator for FlattenCompat<I, U>\n }\n \n impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>\n-    where I: DoubleEndedIterator, U: DoubleEndedIterator,\n-          I::Item: IntoIterator<IntoIter = U, Item = U::Item>\n+where\n+    I: DoubleEndedIterator<Item: IntoIterator<IntoIter = U, Item = U::Item>>,\n+    U: DoubleEndedIterator,\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<U::Item> {"}, {"sha": "9f15de33425f40edaf16fb3fec7e5f010405217a", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -195,8 +195,8 @@ pub trait FromIterator<A>: Sized {\n ///\n /// ```rust\n /// fn collect_as_strings<T>(collection: T) -> Vec<String>\n-///     where T: IntoIterator,\n-///           T::Item: std::fmt::Debug,\n+/// where\n+///     T: IntoIterator<Item: std::fmt::Debug>,\n /// {\n ///     collection\n ///         .into_iter()"}, {"sha": "678ff7687921b804e1c334635f43b1e41c00ac80", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -132,6 +132,7 @@\n #![feature(maybe_uninit_slice, maybe_uninit_array)]\n #![feature(external_doc)]\n #![feature(mem_take)]\n+#![feature(associated_type_bounds)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "243209d022b49b9e58ccd9126ec524d751b42a1d", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -439,10 +439,7 @@ where\n     }\n }\n \n-impl<P: Deref> Pin<P>\n-where\n-    P::Target: Unpin,\n-{\n+impl<P: Deref<Target: Unpin>> Pin<P> {\n     /// Construct a new `Pin<P>` around a pointer to some data of a type that\n     /// implements [`Unpin`].\n     ///\n@@ -730,10 +727,7 @@ impl<P: Deref> Deref for Pin<P> {\n }\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]\n-impl<P: DerefMut> DerefMut for Pin<P>\n-where\n-    P::Target: Unpin\n-{\n+impl<P: DerefMut<Target: Unpin>> DerefMut for Pin<P> {\n     fn deref_mut(&mut self) -> &mut P::Target {\n         Pin::get_mut(Pin::as_mut(self))\n     }"}, {"sha": "f20cb7bfbc3bdd21305dd035f3d69678619ef1c2", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 74, "deletions": 42, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -851,8 +851,9 @@ unsafe impl TrustedRandomAccess for Bytes<'_> {\n /// wrapper types of the form X<'a, P>\n macro_rules! derive_pattern_clone {\n     (clone $t:ident with |$s:ident| $e:expr) => {\n-        impl<'a, P: Pattern<'a>> Clone for $t<'a, P>\n-            where P::Searcher: Clone\n+        impl<'a, P> Clone for $t<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: Clone>,\n         {\n             fn clone(&self) -> Self {\n                 let $s = self;\n@@ -928,8 +929,9 @@ macro_rules! generate_pattern_iterators {\n         pub struct $forward_iterator<'a, P: Pattern<'a>>($internal_iterator<'a, P>);\n \n         $(#[$common_stability_attribute])*\n-        impl<'a, P: Pattern<'a>> fmt::Debug for $forward_iterator<'a, P>\n-            where P::Searcher: fmt::Debug\n+        impl<'a, P> fmt::Debug for $forward_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: fmt::Debug>,\n         {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_tuple(stringify!($forward_iterator))\n@@ -949,8 +951,9 @@ macro_rules! generate_pattern_iterators {\n         }\n \n         $(#[$common_stability_attribute])*\n-        impl<'a, P: Pattern<'a>> Clone for $forward_iterator<'a, P>\n-            where P::Searcher: Clone\n+        impl<'a, P> Clone for $forward_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: Clone>,\n         {\n             fn clone(&self) -> Self {\n                 $forward_iterator(self.0.clone())\n@@ -962,8 +965,9 @@ macro_rules! generate_pattern_iterators {\n         pub struct $reverse_iterator<'a, P: Pattern<'a>>($internal_iterator<'a, P>);\n \n         $(#[$common_stability_attribute])*\n-        impl<'a, P: Pattern<'a>> fmt::Debug for $reverse_iterator<'a, P>\n-            where P::Searcher: fmt::Debug\n+        impl<'a, P> fmt::Debug for $reverse_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: fmt::Debug>,\n         {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 f.debug_tuple(stringify!($reverse_iterator))\n@@ -973,8 +977,9 @@ macro_rules! generate_pattern_iterators {\n         }\n \n         $(#[$common_stability_attribute])*\n-        impl<'a, P: Pattern<'a>> Iterator for $reverse_iterator<'a, P>\n-            where P::Searcher: ReverseSearcher<'a>\n+        impl<'a, P> Iterator for $reverse_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n         {\n             type Item = $iterty;\n \n@@ -985,8 +990,9 @@ macro_rules! generate_pattern_iterators {\n         }\n \n         $(#[$common_stability_attribute])*\n-        impl<'a, P: Pattern<'a>> Clone for $reverse_iterator<'a, P>\n-            where P::Searcher: Clone\n+        impl<'a, P> Clone for $reverse_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: Clone>,\n         {\n             fn clone(&self) -> Self {\n                 $reverse_iterator(self.0.clone())\n@@ -997,8 +1003,10 @@ macro_rules! generate_pattern_iterators {\n         impl<'a, P: Pattern<'a>> FusedIterator for $forward_iterator<'a, P> {}\n \n         #[stable(feature = \"fused\", since = \"1.26.0\")]\n-        impl<'a, P: Pattern<'a>> FusedIterator for $reverse_iterator<'a, P>\n-            where P::Searcher: ReverseSearcher<'a> {}\n+        impl<'a, P> FusedIterator for $reverse_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n+        {}\n \n         generate_pattern_iterators!($($t)* with $(#[$common_stability_attribute])*,\n                                                 $forward_iterator,\n@@ -1010,8 +1018,9 @@ macro_rules! generate_pattern_iterators {\n                            $reverse_iterator:ident, $iterty:ty\n     } => {\n         $(#[$common_stability_attribute])*\n-        impl<'a, P: Pattern<'a>> DoubleEndedIterator for $forward_iterator<'a, P>\n-            where P::Searcher: DoubleEndedSearcher<'a>\n+        impl<'a, P> DoubleEndedIterator for $forward_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,\n         {\n             #[inline]\n             fn next_back(&mut self) -> Option<$iterty> {\n@@ -1020,8 +1029,9 @@ macro_rules! generate_pattern_iterators {\n         }\n \n         $(#[$common_stability_attribute])*\n-        impl<'a, P: Pattern<'a>> DoubleEndedIterator for $reverse_iterator<'a, P>\n-            where P::Searcher: DoubleEndedSearcher<'a>\n+        impl<'a, P> DoubleEndedIterator for $reverse_iterator<'a, P>\n+        where\n+            P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,\n         {\n             #[inline]\n             fn next_back(&mut self) -> Option<$iterty> {\n@@ -1049,7 +1059,10 @@ struct SplitInternal<'a, P: Pattern<'a>> {\n     finished: bool,\n }\n \n-impl<'a, P: Pattern<'a>> fmt::Debug for SplitInternal<'a, P> where P::Searcher: fmt::Debug {\n+impl<'a, P> fmt::Debug for SplitInternal<'a, P>\n+where\n+    P: Pattern<'a, Searcher: fmt::Debug>,\n+{\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitInternal\")\n             .field(\"start\", &self.start)\n@@ -1166,7 +1179,10 @@ struct SplitNInternal<'a, P: Pattern<'a>> {\n     count: usize,\n }\n \n-impl<'a, P: Pattern<'a>> fmt::Debug for SplitNInternal<'a, P> where P::Searcher: fmt::Debug {\n+impl<'a, P> fmt::Debug for SplitNInternal<'a, P>\n+where\n+    P: Pattern<'a, Searcher: fmt::Debug>,\n+{\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_struct(\"SplitNInternal\")\n             .field(\"iter\", &self.iter)\n@@ -1222,7 +1238,10 @@ derive_pattern_clone!{\n \n struct MatchIndicesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n-impl<'a, P: Pattern<'a>> fmt::Debug for MatchIndicesInternal<'a, P> where P::Searcher: fmt::Debug {\n+impl<'a, P> fmt::Debug for MatchIndicesInternal<'a, P>\n+where\n+    P: Pattern<'a, Searcher: fmt::Debug>,\n+{\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"MatchIndicesInternal\")\n             .field(&self.0)\n@@ -1273,7 +1292,10 @@ derive_pattern_clone!{\n \n struct MatchesInternal<'a, P: Pattern<'a>>(P::Searcher);\n \n-impl<'a, P: Pattern<'a>> fmt::Debug for MatchesInternal<'a, P> where P::Searcher: fmt::Debug {\n+impl<'a, P> fmt::Debug for MatchesInternal<'a, P>\n+where\n+    P: Pattern<'a, Searcher: fmt::Debug>,\n+{\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"MatchesInternal\")\n             .field(&self.0)\n@@ -2882,8 +2904,9 @@ impl str {\n     /// assert!(!bananas.ends_with(\"nana\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn ends_with<'a, P>(&'a self, pat: P) -> bool\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         pat.is_suffix_of(self)\n     }\n@@ -2975,8 +2998,9 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn rfind<'a, P>(&'a self, pat: P) -> Option<usize>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         pat.into_searcher(self).next_match_back().map(|(i, _)| i)\n     }\n@@ -3142,8 +3166,9 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn rsplit<'a, P>(&'a self, pat: P) -> RSplit<'a, P>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         RSplit(self.split(pat).0)\n     }\n@@ -3233,8 +3258,9 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn rsplit_terminator<'a, P>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         RSplitTerminator(self.split_terminator(pat).0)\n     }\n@@ -3333,8 +3359,9 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> RSplitN<'a, P>\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn rsplitn<'a, P>(&'a self, n: usize, pat: P) -> RSplitN<'a, P>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         RSplitN(self.splitn(n, pat).0)\n     }\n@@ -3406,8 +3433,9 @@ impl str {\n     /// ```\n     #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n     #[inline]\n-    pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn rmatches<'a, P>(&'a self, pat: P) -> RMatches<'a, P>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         RMatches(self.matches(pat).0)\n     }\n@@ -3491,8 +3519,9 @@ impl str {\n     /// ```\n     #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n     #[inline]\n-    pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn rmatch_indices<'a, P>(&'a self, pat: P) -> RMatchIndices<'a, P>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         RMatchIndices(self.match_indices(pat).0)\n     }\n@@ -3700,8 +3729,9 @@ impl str {\n     #[must_use = \"this returns the trimmed string as a new slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n-        where P::Searcher: DoubleEndedSearcher<'a>\n+    pub fn trim_matches<'a, P>(&'a self, pat: P) -> &'a str\n+    where\n+        P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,\n     {\n         let mut i = 0;\n         let mut j = 0;\n@@ -3792,8 +3822,9 @@ impl str {\n     #[must_use = \"this returns the trimmed string as a new slice, \\\n                   without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n-    pub fn trim_end_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn trim_end_matches<'a, P>(&'a self, pat: P) -> &'a str\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         let mut j = 0;\n         let mut matcher = pat.into_searcher(self);\n@@ -3880,8 +3911,9 @@ impl str {\n         reason = \"superseded by `trim_end_matches`\",\n         suggestion = \"trim_end_matches\",\n     )]\n-    pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n-        where P::Searcher: ReverseSearcher<'a>\n+    pub fn trim_right_matches<'a, P>(&'a self, pat: P) -> &'a str\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n     {\n         self.trim_end_matches(pat)\n     }"}, {"sha": "8d4cd51e4608c3364c76e2f7a8ce527bb3310baf", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -61,6 +61,7 @@\n #![feature(proc_macro_hygiene)]\n #![feature(log_syntax)]\n #![feature(mem_take)]\n+#![feature(associated_type_bounds)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "d4ae366262cbfa4d6dca2bc18b0911270c57fcba", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -3901,7 +3901,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // each predicate must be preceded by the obligations required\n         // to normalize it.\n         // for example, if we have:\n-        //    impl<U: Iterator, V: Iterator<Item=U>> Foo for V where U::Item: Copy\n+        //    impl<U: Iterator<Item: Copy>, V: Iterator<Item = U>> Foo for V\n         // the impl will have the following predicates:\n         //    <V as Iterator>::Item = U,\n         //    U: Iterator, U: Sized,"}, {"sha": "05b698eb4c4ea95547e56700a983dd21cfd2b58b", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -980,17 +980,15 @@ EnumTypeFoldableImpl! {\n         (chalk_engine::DelayedLiteral::Negative)(a),\n         (chalk_engine::DelayedLiteral::Positive)(a, b),\n     } where\n-        C: chalk_engine::context::Context + Clone,\n-        C::CanonicalConstrainedSubst: TypeFoldable<'tcx>,\n+        C: chalk_engine::context::Context<CanonicalConstrainedSubst: TypeFoldable<'tcx>> + Clone,\n }\n \n EnumTypeFoldableImpl! {\n     impl<'tcx, C> TypeFoldable<'tcx> for chalk_engine::Literal<C> {\n         (chalk_engine::Literal::Negative)(a),\n         (chalk_engine::Literal::Positive)(a),\n     } where\n-        C: chalk_engine::context::Context + Clone,\n-        C::GoalInEnvironment: Clone + TypeFoldable<'tcx>,\n+        C: chalk_engine::context::Context<GoalInEnvironment: Clone + TypeFoldable<'tcx>> + Clone,\n }\n \n CloneTypeFoldableAndLiftImpls! {"}, {"sha": "ef74d9e5b2899e7eca0af9d4a324aaf8417a3e23", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -2663,8 +2663,8 @@ impl<'tcx> TyCtxt<'tcx> {\n                         unsafety: hir::Unsafety,\n                         abi: abi::Abi)\n         -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output\n-        where I: Iterator,\n-              I::Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>\n+    where\n+        I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,\n     {\n         inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {\n             inputs_and_output: self.intern_type_list(xs),"}, {"sha": "a9d1fd1fffc92ab54ad558ed245a96f7d2551ee9", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -2027,9 +2027,9 @@ impl ty::query::TyCtxtAt<'tcx> {\n \n impl<'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n where\n-    C: LayoutOf<Ty = Ty<'tcx>> + HasTyCtxt<'tcx>,\n-    C::TyLayout: MaybeResult<TyLayout<'tcx>>,\n-    C: HasParamEnv<'tcx>,\n+    C: LayoutOf<Ty = Ty<'tcx>, TyLayout: MaybeResult<TyLayout<'tcx>>>\n+        + HasTyCtxt<'tcx>\n+        + HasParamEnv<'tcx>,\n {\n     fn for_variant(this: TyLayout<'tcx>, cx: &C, variant_index: VariantIdx) -> TyLayout<'tcx> {\n         let details = match this.variants {"}, {"sha": "40bcd028db58d7dee925473916a904041387b14b", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -1055,9 +1055,8 @@ fn encode_query_results<'a, 'tcx, Q, E>(\n     query_result_index: &mut EncodedQueryResultIndex,\n ) -> Result<(), E::Error>\n where\n-    Q: super::config::QueryDescription<'tcx>,\n+    Q: super::config::QueryDescription<'tcx, Value: Encodable>,\n     E: 'a + TyEncoder,\n-    Q::Value: Encodable,\n {\n     let desc = &format!(\"encode_query_results for {}\",\n         ::std::any::type_name::<Q>());"}, {"sha": "340cc772e5f07a774fbf0fac914e5371ddcab704", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -50,8 +50,8 @@ impl Command {\n     }\n \n     pub fn args<I>(&mut self, args: I) -> &mut Command\n-        where I: IntoIterator,\n-              I::Item: AsRef<OsStr>,\n+    where\n+        I: IntoIterator<Item: AsRef<OsStr>>,\n     {\n         for arg in args {\n             self._arg(arg.as_ref());"}, {"sha": "0e3c3a77b28f4009641ee3091dae815c9ad45ee1", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -11,6 +11,7 @@\n #![feature(nll)]\n #![feature(trusted_len)]\n #![feature(mem_take)]\n+#![feature(associated_type_bounds)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "9f103437d368e0208d115719129eb0832a2decbc", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -23,6 +23,7 @@\n #![feature(core_intrinsics)]\n #![feature(integer_atomics)]\n #![feature(test)]\n+#![feature(associated_type_bounds)]\n \n #![cfg_attr(unix, feature(libc))]\n "}, {"sha": "b835b1706b85f5cf3651a94bc6f4c489517d4a4e", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -847,7 +847,9 @@ pub trait ToHandleMut {\n }\n \n impl<O, H> OwningHandle<O, H>\n-    where O: StableAddress, O::Target: ToHandle<Handle = H>, H: Deref,\n+where\n+    O: StableAddress<Target: ToHandle<Handle = H>>,\n+    H: Deref,\n {\n     /// Creates a new `OwningHandle` for a type that implements `ToHandle`. For types\n     /// that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts\n@@ -858,7 +860,9 @@ impl<O, H> OwningHandle<O, H>\n }\n \n impl<O, H> OwningHandle<O, H>\n-    where O: StableAddress, O::Target: ToHandleMut<HandleMut = H>, H: DerefMut,\n+where\n+    O: StableAddress<Target: ToHandleMut<HandleMut = H>>,\n+    H: DerefMut,\n {\n     /// Creates a new mutable `OwningHandle` for a type that implements `ToHandleMut`.\n     pub fn new_mut(o: O) -> Self {"}, {"sha": "7fe2a890a5371da6f0598a9e9437515877e846f4", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -589,10 +589,8 @@ impl<E:Idx> GenKillSet<E> {\n         self.gen_set.insert(e);\n         self.kill_set.remove(e);\n     }\n-    fn gen_all<I>(&mut self, i: I)\n-        where I: IntoIterator,\n-              I::Item: Borrow<E>\n-    {\n+\n+    fn gen_all(&mut self, i: impl IntoIterator<Item: Borrow<E>>) {\n         for j in i {\n             self.gen(*j.borrow());\n         }\n@@ -603,10 +601,7 @@ impl<E:Idx> GenKillSet<E> {\n         self.kill_set.insert(e);\n     }\n \n-    fn kill_all<I>(&mut self, i: I)\n-        where I: IntoIterator,\n-              I::Item: Borrow<E>\n-    {\n+    fn kill_all(&mut self, i: impl IntoIterator<Item: Borrow<E>>) {\n         for j in i {\n             self.kill(*j.borrow());\n         }"}, {"sha": "cccf7b9545bdbda40ae08f6975a07e74b725d342", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -23,6 +23,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(trusted_len)]\n #![feature(try_blocks)]\n #![feature(mem_take)]\n+#![feature(associated_type_bounds)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "d981740780e6f60efa21d3c89c8a6dcc9b3f00a2", "filename": "src/libserialize/collection_impls.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibserialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibserialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fcollection_impls.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -9,10 +9,7 @@ use std::sync::Arc;\n \n use smallvec::{Array, SmallVec};\n \n-impl<A> Encodable for SmallVec<A>\n-    where A: Array,\n-          A::Item: Encodable\n-{\n+impl<A: Array<Item: Encodable>> Encodable for SmallVec<A> {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_seq(self.len(), |s| {\n             for (i, e) in self.iter().enumerate() {\n@@ -23,10 +20,7 @@ impl<A> Encodable for SmallVec<A>\n     }\n }\n \n-impl<A> Decodable for SmallVec<A>\n-    where A: Array,\n-          A::Item: Decodable\n-{\n+impl<A: Array<Item: Decodable>> Decodable for SmallVec<A> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<SmallVec<A>, D::Error> {\n         d.read_seq(|d, len| {\n             let mut vec = SmallVec::with_capacity(len);"}, {"sha": "67a48ca4af9020faeaec9ce0e0ed617f6ef61fac", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -13,6 +13,7 @@ Core encoding and decoding interfaces.\n #![feature(specialization)]\n #![feature(never_type)]\n #![feature(nll)]\n+#![feature(associated_type_bounds)]\n #![cfg_attr(test, feature(test))]\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable};"}, {"sha": "75dd0d429c214ce927d13e90cb20bf1e34dc3c0a", "filename": "src/libstd/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=3a6a29b4ecfdb7f641ca699fcd66a09b4baaae6a", "patch": "@@ -522,7 +522,11 @@ impl<T: ?Sized> Drop for User<T> where T: UserSafe {\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<UserRef<U>> for UserRef<T> {}\n \n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-impl<T, I: SliceIndex<[T]>> Index<I> for UserRef<[T]> where [T]: UserSafe, I::Output: UserSafe {\n+impl<T, I> Index<I> for UserRef<[T]>\n+where\n+    [T]: UserSafe,\n+    I: SliceIndex<[T], Output: UserSafe>,\n+{\n     type Output = UserRef<I::Output>;\n \n     #[inline]\n@@ -538,7 +542,11 @@ impl<T, I: SliceIndex<[T]>> Index<I> for UserRef<[T]> where [T]: UserSafe, I::Ou\n }\n \n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-impl<T, I: SliceIndex<[T]>> IndexMut<I> for UserRef<[T]> where [T]: UserSafe, I::Output: UserSafe {\n+impl<T, I> IndexMut<I> for UserRef<[T]>\n+where\n+    [T]: UserSafe,\n+    I: SliceIndex<[T], Output: UserSafe>,\n+{\n     #[inline]\n     fn index_mut(&mut self, index: I) -> &mut UserRef<I::Output> {\n         unsafe {"}]}