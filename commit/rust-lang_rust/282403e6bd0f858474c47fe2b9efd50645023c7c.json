{"sha": "282403e6bd0f858474c47fe2b9efd50645023c7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MjQwM2U2YmQwZjg1ODQ3NGM0N2ZlMmI5ZWZkNTA2NDUwMjNjN2M=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-19T09:46:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-19T13:14:59Z"}, "message": "clarify const_prop ICE protection comment", "tree": {"sha": "a601c35f9a22b0dc702bc9b6a24b3276c27d72d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a601c35f9a22b0dc702bc9b6a24b3276c27d72d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/282403e6bd0f858474c47fe2b9efd50645023c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/282403e6bd0f858474c47fe2b9efd50645023c7c", "html_url": "https://github.com/rust-lang/rust/commit/282403e6bd0f858474c47fe2b9efd50645023c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/282403e6bd0f858474c47fe2b9efd50645023c7c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5b8c118a38e8f3319813de56386bf43751582d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b8c118a38e8f3319813de56386bf43751582d7", "html_url": "https://github.com/rust-lang/rust/commit/e5b8c118a38e8f3319813de56386bf43751582d7"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "223330a3ecb4446f76e4b1a9c2cfbb5e12fe4287", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/282403e6bd0f858474c47fe2b9efd50645023c7c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282403e6bd0f858474c47fe2b9efd50645023c7c/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=282403e6bd0f858474c47fe2b9efd50645023c7c", "patch": "@@ -518,27 +518,29 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n             }\n \n-            // Work around: avoid ICE in miri.\n-            // FIXME(wesleywiser) we don't currently handle the case where we try to make a ref\n-            // from a function argument that hasn't been assigned to in this function. The main\n-            // issue is if an arg is a fat-pointer, miri `expects()` to be able to read the value\n-            // of that pointer to get size info. However, since this is `ConstProp`, that argument\n-            // doesn't actually have a backing value and so this causes an ICE.\n+            // Work around: avoid ICE in miri. FIXME(wesleywiser)\n+            // The Miri engine ICEs when taking a reference to an uninitialized unsized\n+            // local. There's nothing it can do here: taking a reference needs an allocation\n+            // which needs to know the size. Normally that's okay as during execution\n+            // (e.g. for CTFE) it can never happen. But here in const_prop\n+            // we leave function arguments uninitialized, so if one of these is unsized\n+            // and has a reference taken, we get an ICE.\n             Rvalue::Ref(_, _, Place { base: PlaceBase::Local(local), projection: box [] }) => {\n                 trace!(\"checking Ref({:?})\", place);\n                 let alive =\n                     if let LocalValue::Live(_) = self.ecx.frame().locals[*local].value {\n                         true\n                     } else { false };\n \n+                // local 0 is the return place; locals 1..=arg_count are the arguments.\n                 if local.as_usize() <= self.ecx.frame().body.arg_count && !alive {\n                     trace!(\"skipping Ref({:?})\", place);\n                     return None;\n                 }\n             }\n \n-            // Work around: avoid extra unnecessary locals.\n-            // FIXME(wesleywiser): const eval will turn this into a `const Scalar(<ZST>)` that\n+            // Work around: avoid extra unnecessary locals. FIXME(wesleywiser)\n+            // Const eval will turn this into a `const Scalar(<ZST>)` that\n             // `SimplifyLocals` doesn't know it can remove.\n             Rvalue::Aggregate(_, operands) if operands.len() == 0 => {\n                 return None;"}]}