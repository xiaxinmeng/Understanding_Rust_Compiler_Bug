{"sha": "6e1879eaf1cb5e727eb134a3e27018f7535852eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMTg3OWVhZjFjYjVlNzI3ZWIxMzRhM2UyNzAxOGY3NTM1ODUyZWI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-29T23:57:31Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-30T20:02:22Z"}, "message": "Adjustments from review", "tree": {"sha": "a8632df24a86e053376fe60024c2f2e21612a77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8632df24a86e053376fe60024c2f2e21612a77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1879eaf1cb5e727eb134a3e27018f7535852eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1879eaf1cb5e727eb134a3e27018f7535852eb", "html_url": "https://github.com/rust-lang/rust/commit/6e1879eaf1cb5e727eb134a3e27018f7535852eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1879eaf1cb5e727eb134a3e27018f7535852eb/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91d810b9b36d6bb163970cd0e8bbf4692f704bb", "html_url": "https://github.com/rust-lang/rust/commit/e91d810b9b36d6bb163970cd0e8bbf4692f704bb"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "375ba38f29aabd7e8b3a063f61b572b07bfb99a2", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e1879eaf1cb5e727eb134a3e27018f7535852eb/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1879eaf1cb5e727eb134a3e27018f7535852eb/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=6e1879eaf1cb5e727eb134a3e27018f7535852eb", "patch": "@@ -831,7 +831,7 @@ pub trait CloneSliceExt<T> for Sized? {\n     /// assert_eq!(Some(vec![1i, 3, 2]), perms.next());\n     /// assert_eq!(Some(vec![3i, 1, 2]), perms.next());\n     /// ```\n-    #[stable]\n+    #[unstable]\n     fn permutations(&self) -> Permutations<T>;\n \n     /// Copies as many elements from `src` as it can into `self` (the\n@@ -950,7 +950,7 @@ pub trait OrdSliceExt<T> for Sized? {\n     /// let b: &mut [_] = &mut [1i, 0, 2];\n     /// assert!(v == b);\n     /// ```\n-    #[stable]\n+    #[unstable = \"uncertain if this merits inclusion in std\"]\n     fn next_permutation(&mut self) -> bool;\n \n     /// Mutates the slice to the previous lexicographic permutation.\n@@ -969,7 +969,7 @@ pub trait OrdSliceExt<T> for Sized? {\n     /// let b: &mut [_] = &mut [0i, 1, 2];\n     /// assert!(v == b);\n     /// ```\n-    #[stable]\n+    #[unstable = \"uncertain if this merits inclusion in std\"]\n     fn prev_permutation(&mut self) -> bool;\n }\n \n@@ -1165,7 +1165,7 @@ impl Iterator<(uint, uint)> for ElementSwaps {\n /// swap applied.\n ///\n /// Generates even and odd permutations alternately.\n-#[stable]\n+#[unstable]\n pub struct Permutations<T> {\n     swaps: ElementSwaps,\n     v: Vec<T>,"}, {"sha": "2d71705d80d387b0261d0c579fdff1a4505b75f2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e1879eaf1cb5e727eb134a3e27018f7535852eb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1879eaf1cb5e727eb134a3e27018f7535852eb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6e1879eaf1cb5e727eb134a3e27018f7535852eb", "patch": "@@ -261,7 +261,7 @@ impl<T> Vec<T> {\n     /// owned by the returned `Vec<T>`. The elements of the buffer are copied into the vector\n     /// without cloning, as if `ptr::read()` were called on them.\n     #[inline]\n-    #[stable]\n+    #[unstable = \"may be better expressed via composition\"]\n     pub unsafe fn from_raw_buf(ptr: *const T, elts: uint) -> Vec<T> {\n         let mut dst = Vec::with_capacity(elts);\n         dst.set_len(elts);"}, {"sha": "a185ec56a00e7e9750960c3238f3b2e172235fa6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e1879eaf1cb5e727eb134a3e27018f7535852eb/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1879eaf1cb5e727eb134a3e27018f7535852eb/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=6e1879eaf1cb5e727eb134a3e27018f7535852eb", "patch": "@@ -691,13 +691,14 @@ pub trait IteratorExt<A>: Iterator<A> {\n impl<A, I> IteratorExt<A> for I where I: Iterator<A> {}\n \n /// Extention trait for iterators of pairs.\n+#[unstable = \"newly added trait, likely to be merged with IteratorExt\"]\n pub trait IteratorPairExt<A, B>: Iterator<(A, B)> {\n     /// Converts an iterator of pairs into a pair of containers.\n     ///\n     /// Loops through the entire iterator, collecting the first component of\n     /// each item into one new container, and the second component into another.\n     fn unzip<FromA, FromB>(mut self) -> (FromA, FromB) where\n-        FromA: FromIterator<A> + Extend<A>, FromB: FromIterator<B> + Extend<B>\n+        FromA: Default + Extend<A>, FromB: Default + Extend<B>\n     {\n         struct SizeHint<A>(uint, Option<uint>);\n         impl<A> Iterator<A> for SizeHint<A> {\n@@ -708,8 +709,11 @@ pub trait IteratorPairExt<A, B>: Iterator<(A, B)> {\n         }\n \n         let (lo, hi) = self.size_hint();\n-        let mut ts: FromA = FromIterator::from_iter(SizeHint(lo, hi));\n-        let mut us: FromB = FromIterator::from_iter(SizeHint(lo, hi));\n+        let mut ts: FromA = Default::default();\n+        let mut us: FromB = Default::default();\n+\n+        ts.extend(SizeHint(lo, hi));\n+        us.extend(SizeHint(lo, hi));\n \n         for (t, u) in self {\n             ts.extend(Some(t).into_iter());"}]}