{"sha": "61a05ef8d6a0f5b506dc0d29ef04036238a474a9", "node_id": "C_kwDOAAsO6NoAKDYxYTA1ZWY4ZDZhMGY1YjUwNmRjMGQyOWVmMDQwMzYyMzhhNDc0YTk", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-17T15:09:00Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-17T15:15:17Z"}, "message": "Extract obligation resolution to function", "tree": {"sha": "7250ad5d30224cbed9d034d72918090912124385", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7250ad5d30224cbed9d034d72918090912124385"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a05ef8d6a0f5b506dc0d29ef04036238a474a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmIzUIUACgkQgTGiTgx5\n76/n8RAAmLe02Ly4zQG0HJ6Rw3g4lQDqpYdOBckXQDAVxa5InivsOc3Z8iXN9Xw/\noUIzvH/Z85WuP6Xfg6YkGtojOAezDErOs1bw0sBTAtBtKDWy2inf+n+7GaKMqp/b\n+oFDQbQrJH/2hkpiGFVW2t1XBAey0D78BVE9oGInGgnyVn5EmBNV/P+8OJR/zQJO\n3Qe6z9nd53uavuJUlPG8djp74jlgMXKabxtLV0W8XBcQWM2HPDmJuYPlMKCqmQSB\n22B7qi3L0FX3bKkA3Z/JUeWqIoujfQpyVlzVqvflljpKof2JaqavGlEZJHX874p3\nybu/+e+nnbPHDh+NAwh/eyEwjH7ViXFNcqGvwr3eFhVxeVmesbePBlfMgst/9EhG\nY0kE4AV9VGh2vbRT51C0KmINZWTXjJmeAjrZXAXRjnWdUN+cOMMCkZlabITwNz3U\nlHJO40fa4uwq3x/gxgOtk+cLUXna7+6niuULi8qMCvnHPUJz3SURWIE0RDYGygEf\n2f4vQ0j4VuKoxlARL6Tqd+uyZSRWjR6Kbz2hOGxFgm/+5OOxLSg+j0ryEyZwYTXo\nf96Rbp0cT0WmbsB5n+EZeQ2ErqxBWXtt4elq7OhOtluz9XU8JlCqXfUOgoCDNq9C\neIpLoc1lqn8AkHmgCw52Gi8ZdCaJnGUObd9pqsUhguJcrKayxag=\n=sKLP\n-----END PGP SIGNATURE-----", "payload": "tree 7250ad5d30224cbed9d034d72918090912124385\nparent 64dfd3b2340a42f5fda5802d50c9739d38533102\nauthor Santiago Pastorino <spastorino@gmail.com> 1647529740 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1647530117 -0300\n\nExtract obligation resolution to function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a05ef8d6a0f5b506dc0d29ef04036238a474a9", "html_url": "https://github.com/rust-lang/rust/commit/61a05ef8d6a0f5b506dc0d29ef04036238a474a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a05ef8d6a0f5b506dc0d29ef04036238a474a9/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64dfd3b2340a42f5fda5802d50c9739d38533102", "url": "https://api.github.com/repos/rust-lang/rust/commits/64dfd3b2340a42f5fda5802d50c9739d38533102", "html_url": "https://github.com/rust-lang/rust/commit/64dfd3b2340a42f5fda5802d50c9739d38533102"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "595337b2e91d843930021a615949f49b9734cc10", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 46, "deletions": 30, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/61a05ef8d6a0f5b506dc0d29ef04036238a474a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a05ef8d6a0f5b506dc0d29ef04036238a474a9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=61a05ef8d6a0f5b506dc0d29ef04036238a474a9", "patch": "@@ -17,7 +17,7 @@ use crate::traits::{\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::CRATE_HIR_ID;\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::{util, TraitEngine};\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{self, TreatParams};\n@@ -361,46 +361,62 @@ fn negative_impl_exists<'cx, 'tcx>(\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n     let infcx = &selcx.infcx().fork();\n-    let tcx = infcx.tcx;\n \n-    let super_obligations = util::elaborate_predicates(tcx, iter::once(o.predicate));\n+    if resolve_negative_obligation(infcx, param_env, region_context, o) {\n+        return true;\n+    }\n \n-    for o in iter::once(o.clone()).chain(super_obligations) {\n-        if let Some(o) = o.flip_polarity(tcx) {\n-            let mut fulfillment_cx = FulfillmentContext::new();\n-            fulfillment_cx.register_predicate_obligation(infcx, o);\n+    for o in util::elaborate_predicates(infcx.tcx, iter::once(o.predicate)) {\n+        if resolve_negative_obligation(infcx, param_env, region_context, &o) {\n+            return true;\n+        }\n+    }\n \n-            let errors = fulfillment_cx.select_all_or_error(infcx);\n+    false\n+}\n \n-            if !errors.is_empty() {\n-                continue;\n-            }\n+#[instrument(level = \"debug\", skip(infcx))]\n+fn resolve_negative_obligation<'cx, 'tcx>(\n+    infcx: &InferCtxt<'cx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    region_context: DefId,\n+    o: &PredicateObligation<'tcx>,\n+) -> bool {\n+    let tcx = infcx.tcx;\n \n-            let mut outlives_env = OutlivesEnvironment::new(param_env);\n-            // FIXME -- add \"assumed to be well formed\" types into the `outlives_env`\n+    if let Some(o) = o.flip_polarity(tcx) {\n+        let mut fulfillment_cx = FulfillmentContext::new();\n+        fulfillment_cx.register_predicate_obligation(infcx, o);\n \n-            // \"Save\" the accumulated implied bounds into the outlives environment\n-            // (due to the FIXME above, there aren't any, but this step is still needed).\n-            // The \"body id\" is given as `CRATE_HIR_ID`, which is the same body-id used\n-            // by the \"dummy\" causes elsewhere (body-id is only relevant when checking\n-            // function bodies with closures).\n-            outlives_env.save_implied_bounds(CRATE_HIR_ID);\n+        let errors = fulfillment_cx.select_all_or_error(infcx);\n \n-            infcx.process_registered_region_obligations(\n-                outlives_env.region_bound_pairs_map(),\n-                Some(tcx.lifetimes.re_root_empty),\n-                param_env,\n-            );\n+        if !errors.is_empty() {\n+            return false;\n+        }\n \n-            let errors =\n-                infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+        let mut outlives_env = OutlivesEnvironment::new(param_env);\n+        // FIXME -- add \"assumed to be well formed\" types into the `outlives_env`\n \n-            if !errors.is_empty() {\n-                continue;\n-            }\n+        // \"Save\" the accumulated implied bounds into the outlives environment\n+        // (due to the FIXME above, there aren't any, but this step is still needed).\n+        // The \"body id\" is given as `CRATE_HIR_ID`, which is the same body-id used\n+        // by the \"dummy\" causes elsewhere (body-id is only relevant when checking\n+        // function bodies with closures).\n+        outlives_env.save_implied_bounds(CRATE_HIR_ID);\n \n-            return true;\n+        infcx.process_registered_region_obligations(\n+            outlives_env.region_bound_pairs_map(),\n+            Some(tcx.lifetimes.re_root_empty),\n+            param_env,\n+        );\n+\n+        let errors = infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+\n+        if !errors.is_empty() {\n+            return false;\n         }\n+\n+        return true;\n     }\n \n     false"}]}