{"sha": "5ca7cd960b908944a2f3f66a1d0ee5df98b78959", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTdjZDk2MGI5MDg5NDRhMmYzZjY2YTFkMGVlNWRmOThiNzg5NTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-12T20:31:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-12T20:31:51Z"}, "message": "Merge #5331\n\n5331: Fix #4966 r=flodiebold a=flodiebold\n\nWe add a level of binders when converting our function pointer to Chalk's; we need to remove it again on the way back.\r\n\r\nFixes #4966.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "5f4b29e4d2dbfc02e178a4d33731319e510468bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4b29e4d2dbfc02e178a4d33731319e510468bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca7cd960b908944a2f3f66a1d0ee5df98b78959", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfC3M3CRBK7hj4Ov3rIwAAdHIIAD5N6Ifz+UkGtfgx3aWAsGjZ\nRPSlJazMEE+usWioVw4sNHEmQLlUnildUFL4tiu/OfiMOQFycjwbshhCulEL280u\nWTP6i1sGUATxvFRdayYC9z+92decoVSJ3BWOsK4Hmuijw/8Ok+Z3YjU5Gmg5jGqG\n92siP4uEKAWVKpxWDt2Fdc4gTBszrrtYL8PplSt2gm1RmPTB8iN7h27LbCo1Evmj\nYh4wSbdAPA6GE0jOw6tMevzLnaFQyifMhxibaZ1CBteieqWLHiK3kt6L2FAm6LX5\nd5rBjsoSPUZhxc2GpXyXLRxiF3LCOTbHWKv/12ydheUa5/Wqf0wo0iZ8CS9BYT8=\n=vCCo\n-----END PGP SIGNATURE-----\n", "payload": "tree 5f4b29e4d2dbfc02e178a4d33731319e510468bb\nparent 39e049d2a1d7e0adbd9546f9e8124843443b31ce\nparent 8a72e40ca91cc51a93b8145582feaccb7254abb6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594585911 +0000\ncommitter GitHub <noreply@github.com> 1594585911 +0000\n\nMerge #5331\n\n5331: Fix #4966 r=flodiebold a=flodiebold\n\nWe add a level of binders when converting our function pointer to Chalk's; we need to remove it again on the way back.\r\n\r\nFixes #4966.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca7cd960b908944a2f3f66a1d0ee5df98b78959", "html_url": "https://github.com/rust-lang/rust/commit/5ca7cd960b908944a2f3f66a1d0ee5df98b78959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca7cd960b908944a2f3f66a1d0ee5df98b78959/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39e049d2a1d7e0adbd9546f9e8124843443b31ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/39e049d2a1d7e0adbd9546f9e8124843443b31ce", "html_url": "https://github.com/rust-lang/rust/commit/39e049d2a1d7e0adbd9546f9e8124843443b31ce"}, {"sha": "8a72e40ca91cc51a93b8145582feaccb7254abb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a72e40ca91cc51a93b8145582feaccb7254abb6", "html_url": "https://github.com/rust-lang/rust/commit/8a72e40ca91cc51a93b8145582feaccb7254abb6"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "4367621fc8dcaa86441a5c21d4d2980706a6123d", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5ca7cd960b908944a2f3f66a1d0ee5df98b78959/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca7cd960b908944a2f3f66a1d0ee5df98b78959/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=5ca7cd960b908944a2f3f66a1d0ee5df98b78959", "patch": "@@ -779,3 +779,60 @@ pub trait Service<Request> {\n     \"###\n     );\n }\n+\n+#[test]\n+fn issue_4966() {\n+    assert_snapshot!(\n+        infer(r#\"\n+pub trait IntoIterator {\n+    type Item;\n+}\n+\n+struct Repeat<A> { element: A }\n+\n+struct Map<F> { f: F }\n+\n+struct Vec<T> {}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+}\n+\n+impl<T> Deref for Vec<T> {\n+    type Target = [T];\n+}\n+\n+fn from_iter<A, T: IntoIterator<Item = A>>(iter: T) -> Vec<A> {}\n+\n+fn main() {\n+    let inner = Map { f: |_: &f64| 0.0 };\n+\n+    let repeat = Repeat { element: inner };\n+\n+    let vec = from_iter(repeat);\n+\n+    vec.foo_bar();\n+}\n+\"#),\n+        @r###\"\n+    270..274 'iter': T\n+    289..291 '{}': ()\n+    303..447 '{     ...r(); }': ()\n+    313..318 'inner': Map<|&f64| -> f64>\n+    321..345 'Map { ... 0.0 }': Map<|&f64| -> f64>\n+    330..343 '|_: &f64| 0.0': |&f64| -> f64\n+    331..332 '_': &f64\n+    340..343 '0.0': f64\n+    356..362 'repeat': Repeat<Map<|&f64| -> f64>>\n+    365..390 'Repeat...nner }': Repeat<Map<|&f64| -> f64>>\n+    383..388 'inner': Map<|&f64| -> f64>\n+    401..404 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+    407..416 'from_iter': fn from_iter<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>, Repeat<Map<|&f64| -> f64>>>(Repeat<Map<|&f64| -> f64>>) -> Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+    407..424 'from_i...epeat)': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+    417..423 'repeat': Repeat<Map<|&f64| -> f64>>\n+    431..434 'vec': Vec<IntoIterator::Item<Repeat<Map<|&f64| -> f64>>>>\n+    431..444 'vec.foo_bar()': {unknown}\n+    \"###\n+    );\n+}"}, {"sha": "06453ef820810eba1520232df03f10d6a8476c7a", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ca7cd960b908944a2f3f66a1d0ee5df98b78959/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca7cd960b908944a2f3f66a1d0ee5df98b78959/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=5ca7cd960b908944a2f3f66a1d0ee5df98b78959", "patch": "@@ -117,8 +117,12 @@ impl ToChalk for Ty {\n                 let parameters = from_chalk(db, opaque_ty.substitution);\n                 Ty::Opaque(OpaqueTy { opaque_ty_id: impl_trait_id, parameters })\n             }\n-            chalk_ir::TyData::Function(chalk_ir::Fn { num_binders: _, substitution }) => {\n-                let parameters: Substs = from_chalk(db, substitution);\n+            chalk_ir::TyData::Function(chalk_ir::Fn { num_binders, substitution }) => {\n+                assert_eq!(num_binders, 0);\n+                let parameters: Substs = from_chalk(\n+                    db,\n+                    substitution.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n+                );\n                 Ty::Apply(ApplicationTy {\n                     ctor: TypeCtor::FnPtr { num_args: (parameters.len() - 1) as u16 },\n                     parameters,"}]}