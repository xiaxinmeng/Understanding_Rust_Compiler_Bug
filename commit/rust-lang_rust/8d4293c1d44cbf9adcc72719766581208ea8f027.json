{"sha": "8d4293c1d44cbf9adcc72719766581208ea8f027", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNDI5M2MxZDQ0Y2JmOWFkY2M3MjcxOTc2NjU4MTIwOGVhOGYwMjc=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-12T23:54:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-12T23:54:36Z"}, "message": "Rollup merge of #87070 - ehuss:simplify-future-report, r=oli-obk\n\nSimplify future incompatible reporting.\n\nThis simplifies the implementation of the future incompatible reporting system. Instead of having a separate field in the future_incompatible definition, this reuses the `FutureIncompatibilityReason` enum. It also drops the \"date\" field. Cargo does not use the date field, and there isn't much of a need for this to be structured, and I am skeptical that the date can be predicted reliably. The date or release version can be listed in the lint text if desired.", "tree": {"sha": "5bc828d53ee95645e5cdcadc22d7a0fa915cf74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bc828d53ee95645e5cdcadc22d7a0fa915cf74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4293c1d44cbf9adcc72719766581208ea8f027", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7NY8CRBK7hj4Ov3rIwAAv/EIAAuY0C7APcDD/UVA8OJzhbEG\nyNZ2o1qzlAAFEHgDKN9tA7+yR0XaMOk8a13sXA9ivR+f/fiuOrDpnlQd6M4hwz0/\nD/SCblCRSkD7T9XIkCbb9Vn9ecN6ovThGNe6JEdPIRGUl1cqM/hnQCN7emgW5Y/t\ndQwjrXjZuwOqCl/6xj+G5hyxX1ZFdk9dFD97vveyUAxEcbbZ004Ei558RzpPpcRR\ng5VuODe76ny/ry3kQitNoEEP1dY9jQickYnRqxfxAkdX/qe3vwsGI08VKWAcA1LA\nFTNkd+Y+gYLULe9IaLGqtQZAMaJWQSPyIV2CB2XQntxkGGdEWIh5QR3SdYHRnFI=\n=KBxo\n-----END PGP SIGNATURE-----\n", "payload": "tree 5bc828d53ee95645e5cdcadc22d7a0fa915cf74e\nparent 47a418420ef73aa7765221ee493ee429fd96097b\nparent 4d1daf86833392f9b819938c3ce0848c3adede50\nauthor Yuki Okushi <jtitor@2k36.org> 1626134076 +0900\ncommitter GitHub <noreply@github.com> 1626134076 +0900\n\nRollup merge of #87070 - ehuss:simplify-future-report, r=oli-obk\n\nSimplify future incompatible reporting.\n\nThis simplifies the implementation of the future incompatible reporting system. Instead of having a separate field in the future_incompatible definition, this reuses the `FutureIncompatibilityReason` enum. It also drops the \"date\" field. Cargo does not use the date field, and there isn't much of a need for this to be structured, and I am skeptical that the date can be predicted reliably. The date or release version can be listed in the lint text if desired.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4293c1d44cbf9adcc72719766581208ea8f027", "html_url": "https://github.com/rust-lang/rust/commit/8d4293c1d44cbf9adcc72719766581208ea8f027", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4293c1d44cbf9adcc72719766581208ea8f027/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a418420ef73aa7765221ee493ee429fd96097b", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a418420ef73aa7765221ee493ee429fd96097b", "html_url": "https://github.com/rust-lang/rust/commit/47a418420ef73aa7765221ee493ee429fd96097b"}, {"sha": "4d1daf86833392f9b819938c3ce0848c3adede50", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1daf86833392f9b819938c3ce0848c3adede50", "html_url": "https://github.com/rust-lang/rust/commit/4d1daf86833392f9b819938c3ce0848c3adede50"}], "stats": {"total": 69, "additions": 21, "deletions": 48}, "files": [{"sha": "becc1c6db5bbb9c3337c18dee51a0506d7959784", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=8d4293c1d44cbf9adcc72719766581208ea8f027", "patch": "@@ -9,7 +9,6 @@\n \n use Destination::*;\n \n-use rustc_lint_defs::FutureBreakage;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{MultiSpan, SourceFile, Span};\n \n@@ -193,7 +192,7 @@ pub trait Emitter {\n     /// other formats can, and will, simply ignore it.\n     fn emit_artifact_notification(&mut self, _path: &Path, _artifact_type: &str) {}\n \n-    fn emit_future_breakage_report(&mut self, _diags: Vec<(FutureBreakage, Diagnostic)>) {}\n+    fn emit_future_breakage_report(&mut self, _diags: Vec<Diagnostic>) {}\n \n     /// Emit list of unused externs\n     fn emit_unused_externs(&mut self, _lint_level: &str, _unused_externs: &[&str]) {}"}, {"sha": "1b6cd04cca642e213efdf22273ddb62a5cfa0d25", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=8d4293c1d44cbf9adcc72719766581208ea8f027", "patch": "@@ -16,7 +16,7 @@ use crate::registry::Registry;\n use crate::DiagnosticId;\n use crate::ToolMetadata;\n use crate::{CodeSuggestion, SubDiagnostic};\n-use rustc_lint_defs::{Applicability, FutureBreakage};\n+use rustc_lint_defs::Applicability;\n \n use rustc_data_structures::sync::Lrc;\n use rustc_span::hygiene::ExpnData;\n@@ -134,17 +134,14 @@ impl Emitter for JsonEmitter {\n         }\n     }\n \n-    fn emit_future_breakage_report(&mut self, diags: Vec<(FutureBreakage, crate::Diagnostic)>) {\n+    fn emit_future_breakage_report(&mut self, diags: Vec<crate::Diagnostic>) {\n         let data: Vec<FutureBreakageItem> = diags\n             .into_iter()\n-            .map(|(breakage, mut diag)| {\n+            .map(|mut diag| {\n                 if diag.level == crate::Level::Allow {\n                     diag.level = crate::Level::Warning;\n                 }\n-                FutureBreakageItem {\n-                    future_breakage_date: breakage.date,\n-                    diagnostic: Diagnostic::from_errors_diagnostic(&diag, self),\n-                }\n+                FutureBreakageItem { diagnostic: Diagnostic::from_errors_diagnostic(&diag, self) }\n             })\n             .collect();\n         let report = FutureIncompatReport { future_incompat_report: data };\n@@ -326,7 +323,6 @@ struct ArtifactNotification<'a> {\n \n #[derive(Encodable)]\n struct FutureBreakageItem {\n-    future_breakage_date: Option<&'static str>,\n     diagnostic: Diagnostic,\n }\n "}, {"sha": "993a7c2c162c6b7936f5496c1e295e50cc050160", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=8d4293c1d44cbf9adcc72719766581208ea8f027", "patch": "@@ -23,7 +23,6 @@ use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n-use rustc_lint_defs::FutureBreakage;\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_serialize::json::Json;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n@@ -790,7 +789,7 @@ impl Handler {\n         self.inner.borrow_mut().emit_artifact_notification(path, artifact_type)\n     }\n \n-    pub fn emit_future_breakage_report(&self, diags: Vec<(FutureBreakage, Diagnostic)>) {\n+    pub fn emit_future_breakage_report(&self, diags: Vec<Diagnostic>) {\n         self.inner.borrow_mut().emitter.emit_future_breakage_report(diags)\n     }\n "}, {"sha": "5b1cd0bcb3ffe72b34ebeca9b8ae714e064f6c7c", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=8d4293c1d44cbf9adcc72719766581208ea8f027", "patch": "@@ -6,7 +6,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::{declare_lint, declare_lint_pass, FutureBreakage, FutureIncompatibilityReason};\n+use crate::{declare_lint, declare_lint_pass, FutureIncompatibilityReason};\n use rustc_span::edition::Edition;\n \n declare_lint! {\n@@ -3176,9 +3176,7 @@ declare_lint! {\n     \"detects usage of old versions of certain proc-macro crates\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\",\n-        future_breakage: Some(FutureBreakage {\n-            date: None\n-        })\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n }\n "}, {"sha": "001198226d9a3a1ee18fce8e3d866402c17d961b", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=8d4293c1d44cbf9adcc72719766581208ea8f027", "patch": "@@ -152,10 +152,6 @@ pub struct FutureIncompatibleInfo {\n     /// Set to false for lints that already include a more detailed\n     /// explanation.\n     pub explain_reason: bool,\n-    /// Information about a future breakage, which will\n-    /// be emitted in JSON messages to be displayed by Cargo\n-    /// for upstream deps\n-    pub future_breakage: Option<FutureBreakage>,\n }\n \n /// The reason for future incompatibility\n@@ -164,6 +160,9 @@ pub enum FutureIncompatibilityReason {\n     /// This will be an error in a future release\n     /// for all editions\n     FutureReleaseError,\n+    /// This will be an error in a future release, and\n+    /// Cargo should create a report even for dependencies\n+    FutureReleaseErrorReportNow,\n     /// Previously accepted code that will become an\n     /// error in the provided edition\n     EditionError(Edition),\n@@ -182,18 +181,12 @@ impl FutureIncompatibilityReason {\n     }\n }\n \n-#[derive(Copy, Clone, Debug)]\n-pub struct FutureBreakage {\n-    pub date: Option<&'static str>,\n-}\n-\n impl FutureIncompatibleInfo {\n     pub const fn default_fields_for_macro() -> Self {\n         FutureIncompatibleInfo {\n             reference: \"\",\n             reason: FutureIncompatibilityReason::FutureReleaseError,\n             explain_reason: true,\n-            future_breakage: None,\n         }\n     }\n }"}, {"sha": "484e30027e521ce3961368584152b64a474a02c2", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=8d4293c1d44cbf9adcc72719766581208ea8f027", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    FutureIncompatibilityReason, Level, Lint, LintId,\n+    FutureIncompatibilityReason, FutureIncompatibleInfo, Level, Lint, LintId,\n };\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n@@ -223,8 +223,13 @@ pub fn struct_lint_level<'s, 'd>(\n         let lint_id = LintId::of(lint);\n         let future_incompatible = lint.future_incompatible;\n \n-        let has_future_breakage =\n-            future_incompatible.map_or(false, |incompat| incompat.future_breakage.is_some());\n+        let has_future_breakage = matches!(\n+            future_incompatible,\n+            Some(FutureIncompatibleInfo {\n+                reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n+                ..\n+            })\n+        );\n \n         let mut err = match (level, span) {\n             (Level::Allow, span) => {"}, {"sha": "f3ce78d2d78f89042f146dd66cc99d449c04355a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4293c1d44cbf9adcc72719766581208ea8f027/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=8d4293c1d44cbf9adcc72719766581208ea8f027", "patch": "@@ -20,8 +20,7 @@ use rustc_errors::annotate_snippet_emitter_writer::AnnotateSnippetEmitterWriter;\n use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticId, ErrorReported};\n-use rustc_lint_defs::FutureBreakage;\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n@@ -317,23 +316,7 @@ impl Session {\n         if diags.is_empty() {\n             return;\n         }\n-        // If any future-breakage lints were registered, this lint store\n-        // should be available\n-        let lint_store = self.lint_store.get().expect(\"`lint_store` not initialized!\");\n-        let diags_and_breakage: Vec<(FutureBreakage, Diagnostic)> = diags\n-            .into_iter()\n-            .map(|diag| {\n-                let lint_name = match &diag.code {\n-                    Some(DiagnosticId::Lint { name, has_future_breakage: true, .. }) => name,\n-                    _ => panic!(\"Unexpected code in diagnostic {:?}\", diag),\n-                };\n-                let lint = lint_store.name_to_lint(&lint_name);\n-                let future_breakage =\n-                    lint.lint.future_incompatible.unwrap().future_breakage.unwrap();\n-                (future_breakage, diag)\n-            })\n-            .collect();\n-        self.parse_sess.span_diagnostic.emit_future_breakage_report(diags_and_breakage);\n+        self.parse_sess.span_diagnostic.emit_future_breakage_report(diags);\n     }\n \n     pub fn local_stable_crate_id(&self) -> StableCrateId {"}]}