{"sha": "cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzBlZDAyMTljNGU0OTYxYjllN2EzMzQxOWQ3MTZhNWRkZjBlNWQ=", "commit": {"author": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2020-02-11T21:37:16Z"}, "committer": {"name": "Andreas Jonson", "email": "andjo403@users.noreply.github.com", "date": "2020-02-13T07:02:18Z"}, "message": "add selfprofiling for new llvm passmanager", "tree": {"sha": "392f88ed9b79248cd49a71737e3691d322888932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/392f88ed9b79248cd49a71737e3691d322888932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "html_url": "https://github.com/rust-lang/rust/commit/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/comments", "author": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andjo403", "id": 844398, "node_id": "MDQ6VXNlcjg0NDM5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/844398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andjo403", "html_url": "https://github.com/andjo403", "followers_url": "https://api.github.com/users/andjo403/followers", "following_url": "https://api.github.com/users/andjo403/following{/other_user}", "gists_url": "https://api.github.com/users/andjo403/gists{/gist_id}", "starred_url": "https://api.github.com/users/andjo403/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andjo403/subscriptions", "organizations_url": "https://api.github.com/users/andjo403/orgs", "repos_url": "https://api.github.com/users/andjo403/repos", "events_url": "https://api.github.com/users/andjo403/events{/privacy}", "received_events_url": "https://api.github.com/users/andjo403/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba18875557aabffe386a2534a1aa6118efb6ab88", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba18875557aabffe386a2534a1aa6118efb6ab88", "html_url": "https://github.com/rust-lang/rust/commit/ba18875557aabffe386a2534a1aa6118efb6ab88"}], "stats": {"total": 169, "additions": 165, "deletions": 4}, "files": [{"sha": "f44644cffa62ab2f4e8e15d7114a385c885521de", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -3559,6 +3559,7 @@ dependencies = [\n  \"flate2\",\n  \"libc\",\n  \"log\",\n+ \"measureme\",\n  \"rustc\",\n  \"rustc-demangle\",\n  \"rustc_attr\","}, {"sha": "c5e862ffc179fa6e82fb8f616a70490a7039565d", "filename": "src/librustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2FCargo.toml?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -14,6 +14,7 @@ doctest = false\n bitflags = \"1.0\"\n flate2 = \"1.0\"\n libc = \"0.2\"\n+measureme = \"0.7.1\"\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc-demangle = \"0.1\""}, {"sha": "d7297ed41769c20dc3ad001cbf23e9884494bb3e", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -593,7 +593,7 @@ pub(crate) fn run_pass_manager(\n             } else {\n                 opt_level\n             };\n-            write::optimize_with_new_llvm_pass_manager(module, config, opt_level, opt_stage);\n+            write::optimize_with_new_llvm_pass_manager(cgcx, module, config, opt_level, opt_stage);\n             debug!(\"lto done\");\n             return;\n         }"}, {"sha": "d56ddac699b09eebed19433ea07c35b15b3fda6c", "filename": "src/librustc_codegen_llvm/back/profiling.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fback%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fback%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fprofiling.rs?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -0,0 +1,58 @@\n+use measureme::{event_id::SEPARATOR_BYTE, EventId, StringComponent, StringId};\n+use rustc_data_structures::profiling::{SelfProfiler, TimingGuard};\n+use std::ffi::{c_void, CStr};\n+use std::os::raw::c_char;\n+use std::sync::Arc;\n+\n+fn llvm_args_to_string_id(profiler: &SelfProfiler, pass_name: &str, ir_name: &str) -> EventId {\n+    let pass_name = profiler.get_or_alloc_cached_string(pass_name);\n+    let mut components = vec![StringComponent::Ref(pass_name)];\n+    // handle that LazyCallGraph::SCC is a comma separated list within parentheses\n+    let parentheses: &[_] = &['(', ')'];\n+    let trimed = ir_name.trim_matches(parentheses);\n+    for part in trimed.split(\", \") {\n+        let demangled_ir_name = rustc_demangle::demangle(part).to_string();\n+        let ir_name = profiler.get_or_alloc_cached_string(demangled_ir_name);\n+        components.push(StringComponent::Value(SEPARATOR_BYTE));\n+        components.push(StringComponent::Ref(ir_name));\n+    }\n+    EventId::from_label(profiler.alloc_string(components.as_slice()))\n+}\n+\n+pub struct LlvmSelfProfiler<'a> {\n+    profiler: Arc<SelfProfiler>,\n+    stack: Vec<TimingGuard<'a>>,\n+    llvm_pass_event_kind: StringId,\n+}\n+\n+impl<'a> LlvmSelfProfiler<'a> {\n+    pub fn new(profiler: Arc<SelfProfiler>) -> Self {\n+        let llvm_pass_event_kind = profiler.alloc_string(\"LLVM Pass\");\n+        Self { profiler, stack: Vec::default(), llvm_pass_event_kind }\n+    }\n+\n+    fn before_pass_callback(&'a mut self, pass_name: &str, ir_name: &str) {\n+        let event_id = llvm_args_to_string_id(&self.profiler, pass_name, ir_name);\n+\n+        self.stack.push(TimingGuard::start(&self.profiler, self.llvm_pass_event_kind, event_id));\n+    }\n+    fn after_pass_callback(&mut self) {\n+        self.stack.pop();\n+    }\n+}\n+\n+pub unsafe extern \"C\" fn selfprofile_before_pass_callback(\n+    llvm_self_profiler: *mut c_void,\n+    pass_name: *const c_char,\n+    ir_name: *const c_char,\n+) {\n+    let llvm_self_profiler = &mut *(llvm_self_profiler as *mut LlvmSelfProfiler<'_>);\n+    let pass_name = CStr::from_ptr(pass_name).to_str().expect(\"valid UTF-8\");\n+    let ir_name = CStr::from_ptr(ir_name).to_str().expect(\"valid UTF-8\");\n+    llvm_self_profiler.before_pass_callback(pass_name, ir_name);\n+}\n+\n+pub unsafe extern \"C\" fn selfprofile_after_pass_callback(llvm_self_profiler: *mut c_void) {\n+    let llvm_self_profiler = &mut *(llvm_self_profiler as *mut LlvmSelfProfiler<'_>);\n+    llvm_self_profiler.after_pass_callback();\n+}"}, {"sha": "a215ef81bc9ebe7bc27c220e1bcfc29e1682061f", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -1,6 +1,9 @@\n use crate::attributes;\n use crate::back::bytecode;\n use crate::back::lto::ThinBuffer;\n+use crate::back::profiling::{\n+    selfprofile_after_pass_callback, selfprofile_before_pass_callback, LlvmSelfProfiler,\n+};\n use crate::base;\n use crate::common;\n use crate::consts;\n@@ -348,6 +351,7 @@ pub(crate) fn should_use_new_llvm_pass_manager(config: &ModuleConfig) -> bool {\n }\n \n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n+    cgcx: &CodegenContext<LlvmCodegenBackend>,\n     module: &ModuleCodegen<ModuleLlvm>,\n     config: &ModuleConfig,\n     opt_level: config::OptLevel,\n@@ -372,6 +376,13 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         None\n     };\n \n+    let llvm_selfprofiler = if cgcx.prof.llvm_recording_enabled() {\n+        let mut llvm_profiler = LlvmSelfProfiler::new(cgcx.prof.get_self_profiler().unwrap());\n+        &mut llvm_profiler as *mut _ as *mut c_void\n+    } else {\n+        std::ptr::null_mut()\n+    };\n+\n     // FIXME: NewPM doesn't provide a facility to pass custom InlineParams.\n     // We would have to add upstream support for this first, before we can support\n     // config.inline_threshold and our more aggressive default thresholds.\n@@ -394,6 +405,9 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         sanitizer_options.as_ref(),\n         pgo_gen_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n+        llvm_selfprofiler,\n+        selfprofile_before_pass_callback,\n+        selfprofile_after_pass_callback,\n     );\n }\n \n@@ -428,10 +442,15 @@ pub(crate) unsafe fn optimize(\n                 _ if cgcx.opts.cg.linker_plugin_lto.enabled() => llvm::OptStage::PreLinkThinLTO,\n                 _ => llvm::OptStage::PreLinkNoLTO,\n             };\n-            optimize_with_new_llvm_pass_manager(module, config, opt_level, opt_stage);\n+            optimize_with_new_llvm_pass_manager(cgcx, module, config, opt_level, opt_stage);\n             return Ok(());\n         }\n \n+        if cgcx.prof.llvm_recording_enabled() {\n+            diag_handler\n+                .warn(\"`-Z self-profile-events = llvm` requires `-Z new-llvm-pass-manager`\");\n+        }\n+\n         // Create the two optimizing pass managers. These mirror what clang\n         // does, and are by populated by LLVM's default PassManagerBuilder.\n         // Each manager has a different set of passes, but they also share"}, {"sha": "b1085ba1703301628340d2fab55127ff5e32cab4", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -44,6 +44,7 @@ mod back {\n     pub mod archive;\n     pub mod bytecode;\n     pub mod lto;\n+    mod profiling;\n     pub mod write;\n }\n "}, {"sha": "808094eca91d5583fb2c0d234ca85527a8e8b415", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -709,6 +709,10 @@ extern \"C\" {\n     pub type ModuleBuffer;\n }\n \n+pub type SelfProfileBeforePassCallback =\n+    unsafe extern \"C\" fn(*mut c_void, *const c_char, *const c_char);\n+pub type SelfProfileAfterPassCallback = unsafe extern \"C\" fn(*mut c_void);\n+\n extern \"C\" {\n     pub fn LLVMRustInstallFatalErrorHandler();\n \n@@ -1945,6 +1949,9 @@ extern \"C\" {\n         SanitizerOptions: Option<&SanitizerOptions>,\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n+        llvm_selfprofiler: *mut c_void,\n+        begin_callback: SelfProfileBeforePassCallback,\n+        end_callback: SelfProfileAfterPassCallback,\n     );\n     pub fn LLVMRustPrintModule(\n         M: &'a Module,"}, {"sha": "1d0ac4f4907d197f52ac202f33c48e41af79002b", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -127,6 +127,7 @@ bitflags::bitflags! {\n \n         const QUERY_KEYS         = 1 << 5;\n         const FUNCTION_ARGS      = 1 << 6;\n+        const LLVM               = 1 << 7;\n \n         const DEFAULT = Self::GENERIC_ACTIVITIES.bits |\n                         Self::QUERY_PROVIDERS.bits |\n@@ -150,6 +151,7 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"query-keys\", EventFilter::QUERY_KEYS),\n     (\"function-args\", EventFilter::FUNCTION_ARGS),\n     (\"args\", EventFilter::ARGS),\n+    (\"llvm\", EventFilter::LLVM),\n ];\n \n /// Something that uniquely identifies a query invocation.\n@@ -364,6 +366,15 @@ impl SelfProfilerRef {\n     pub fn enabled(&self) -> bool {\n         self.profiler.is_some()\n     }\n+\n+    #[inline]\n+    pub fn llvm_recording_enabled(&self) -> bool {\n+        self.event_filter_mask.contains(EventFilter::LLVM)\n+    }\n+    #[inline]\n+    pub fn get_self_profiler(&self) -> Option<Arc<SelfProfiler>> {\n+        self.profiler.clone()\n+    }\n }\n \n pub struct SelfProfiler {"}, {"sha": "d3163fa356436ec87155d105ac27ac4467812591", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -940,7 +940,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"specifies which kinds of events get recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n-                     query-blocked, incr-cache-load, query-keys\"),\n+                     query-blocked, incr-cache-load, query-keys, function-args, args, llvm\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emits a section containing stack size metadata\"),\n     plt: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "2c283149be8bc13fe843c262ee98376d255ae6d5", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=cec0ed0219c4e4961b9e7a33419d716a5ddf0e5d", "patch": "@@ -640,6 +640,62 @@ LLVMRustWriteOutputFile(LLVMTargetMachineRef Target, LLVMPassManagerRef PMR,\n   return LLVMRustResult::Success;\n }\n \n+extern \"C\" typedef void (*LLVMRustSelfProfileBeforePassCallback)(void*, // LlvmSelfProfiler\n+                                                      const char*,      // pass name\n+                                                      const char*);     // IR name\n+extern \"C\" typedef void (*LLVMRustSelfProfileAfterPassCallback)(void*); // LlvmSelfProfiler\n+\n+#if LLVM_VERSION_GE(9, 0)\n+\n+std::string LLVMRustwrappedIrGetName(const llvm::Any &WrappedIr) {\n+  if (any_isa<const Module *>(WrappedIr))\n+    return any_cast<const Module *>(WrappedIr)->getName().str();\n+  if (any_isa<const Function *>(WrappedIr))\n+    return any_cast<const Function *>(WrappedIr)->getName().str();\n+  if (any_isa<const Loop *>(WrappedIr))\n+    return any_cast<const Loop *>(WrappedIr)->getName().str();\n+  if (any_isa<const LazyCallGraph::SCC *>(WrappedIr))\n+    return any_cast<const LazyCallGraph::SCC *>(WrappedIr)->getName();\n+  return \"<UNKNOWN>\";\n+}\n+\n+\n+void LLVMSelfProfileInitializeCallbacks(\n+    PassInstrumentationCallbacks& PIC, void* LlvmSelfProfiler,\n+    LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n+    LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n+  PIC.registerBeforePassCallback([LlvmSelfProfiler, BeforePassCallback](\n+                                     StringRef Pass, llvm::Any Ir) {\n+    std::string PassName = Pass.str();\n+    std::string IrName = LLVMRustwrappedIrGetName(Ir);\n+    BeforePassCallback(LlvmSelfProfiler, PassName.c_str(), IrName.c_str());\n+    return true;\n+  });\n+\n+  PIC.registerAfterPassCallback(\n+      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, llvm::Any Ir) {\n+        AfterPassCallback(LlvmSelfProfiler);\n+      });\n+\n+  PIC.registerAfterPassInvalidatedCallback(\n+      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass) {\n+        AfterPassCallback(LlvmSelfProfiler);\n+      });\n+\n+  PIC.registerBeforeAnalysisCallback([LlvmSelfProfiler, BeforePassCallback](\n+                                         StringRef Pass, llvm::Any Ir) {\n+    std::string PassName = Pass.str();\n+    std::string IrName = LLVMRustwrappedIrGetName(Ir);\n+    BeforePassCallback(LlvmSelfProfiler, PassName.c_str(), IrName.c_str());\n+  });\n+\n+  PIC.registerAfterAnalysisCallback(\n+      [LlvmSelfProfiler, AfterPassCallback](StringRef Pass, llvm::Any Ir) {\n+        AfterPassCallback(LlvmSelfProfiler);\n+      });\n+}\n+#endif\n+\n enum class LLVMRustOptStage {\n   PreLinkNoLTO,\n   PreLinkThinLTO,\n@@ -666,7 +722,10 @@ LLVMRustOptimizeWithNewPassManager(\n     bool MergeFunctions, bool UnrollLoops, bool SLPVectorize, bool LoopVectorize,\n     bool DisableSimplifyLibCalls,\n     LLVMRustSanitizerOptions *SanitizerOptions,\n-    const char *PGOGenPath, const char *PGOUsePath) {\n+    const char *PGOGenPath, const char *PGOUsePath,\n+    void* LlvmSelfProfiler,\n+    LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n+    LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n #if LLVM_VERSION_GE(9, 0)\n   Module *TheModule = unwrap(ModuleRef);\n   TargetMachine *TM = unwrap(TMRef);\n@@ -685,6 +744,10 @@ LLVMRustOptimizeWithNewPassManager(\n   StandardInstrumentations SI;\n   SI.registerCallbacks(PIC);\n \n+  if (LlvmSelfProfiler){\n+    LLVMSelfProfileInitializeCallbacks(PIC,LlvmSelfProfiler,BeforePassCallback,AfterPassCallback);\n+  }\n+\n   Optional<PGOOptions> PGOOpt;\n   if (PGOGenPath) {\n     assert(!PGOUsePath);"}]}