{"sha": "d847d53e36571c8f7925b72cedf66bb203976148", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NDdkNTNlMzY1NzFjOGY3OTI1YjcyY2VkZjY2YmIyMDM5NzYxNDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-26T19:08:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-26T19:22:08Z"}, "message": "Start simplifying editing API", "tree": {"sha": "3fd5903b67b498a39660b2dafdc929f33d41900e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd5903b67b498a39660b2dafdc929f33d41900e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d847d53e36571c8f7925b72cedf66bb203976148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d847d53e36571c8f7925b72cedf66bb203976148", "html_url": "https://github.com/rust-lang/rust/commit/d847d53e36571c8f7925b72cedf66bb203976148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d847d53e36571c8f7925b72cedf66bb203976148/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4b42400544a652a053a34263967689d47f554b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4b42400544a652a053a34263967689d47f554b", "html_url": "https://github.com/rust-lang/rust/commit/1a4b42400544a652a053a34263967689d47f554b"}], "stats": {"total": 201, "additions": 114, "deletions": 87}, "files": [{"sha": "69b78e7de9e369f361b6630216c0b1abcbc87765", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -761,7 +761,7 @@ dependencies = [\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.0.2\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -897,7 +897,7 @@ dependencies = [\n  \"format-buf 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"once_cell 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_db 0.1.0\",\n  \"ra_fmt 0.1.0\",\n  \"ra_hir 0.1.0\",\n@@ -968,7 +968,7 @@ dependencies = [\n  \"insta 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lalrpop-intern 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"once_cell 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n@@ -1065,7 +1065,7 @@ dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jemalloc-ctl 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jemallocator 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"once_cell 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1085,7 +1085,9 @@ dependencies = [\n name = \"ra_syntax\"\n version = \"0.1.0\"\n dependencies = [\n+ \"arrayvec 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_parser 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rowan 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1854,7 +1856,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum num-traits 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ba9a427cfca2be13aa6f6403b0b7e7368fe982bfa16fccc450ce74c46cd9b32\"\n \"checksum num_cpus 1.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n \"checksum number_prefix 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbf9993e59c894e3c08aa1c2712914e9e6bf1fcbfc6bef283e2183df345a4fee\"\n-\"checksum once_cell 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bd38c1bb51148ca239ec38ef1bb4f7570d432861f03e91774d53b01c2ba2132f\"\n+\"checksum once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"891f486f630e5c5a4916c7e16c4b24a53e78c860b646e9f8e005e4f16847bfed\"\n \"checksum ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063\"\n \"checksum parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f842b1982eb6c2fe34036a4fbfb06dd185a3f5c8edfaacdf7d1ea10b07de6252\"\n \"checksum parking_lot_core 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b876b1b9e7ac6e1a74a6da34d25c42e17e8862aa409cbbbdcfc8d86c6f3bc62b\""}, {"sha": "682455bce7bdc670c9460d009568fb1c10a0185f", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -100,12 +100,11 @@ fn strip_docstring(item: ast::ImplItem) -> ast::ImplItem {\n }\n \n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n-    let mut ast_editor = AstEditor::new(fn_def.clone());\n     if fn_def.body().is_none() {\n-        let body = make::block_from_expr(make::expr_unimplemented());\n-        ast_editor.set_body(&body);\n+        fn_def.with_body(make::block_from_expr(make::expr_unimplemented()))\n+    } else {\n+        fn_def\n     }\n-    ast_editor.ast().to_owned()\n }\n \n /// Given an `ast::ImplBlock`, resolves the target trait (the one being\n@@ -332,5 +331,4 @@ impl Foo for S {\n }\",\n         )\n     }\n-\n }"}, {"sha": "a91c170b925dd3011c806813ba56f6034f51bf94", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -448,7 +448,6 @@ fn make_assist_add_in_tree_list(\n         fmt_segments_raw(target, &mut buf);\n         edit.insert(offset, buf);\n     } else {\n-\n     }\n }\n "}, {"sha": "72c8c478a743d0dc3d1836220aafaad59fd6c2f8", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 1, "deletions": 71, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -6,7 +6,7 @@ use rustc_hash::FxHashMap;\n use ra_fmt::leading_indent;\n use ra_syntax::{\n     algo,\n-    ast::{self, TypeBoundsOwner},\n+    ast::{self, make::tokens, TypeBoundsOwner},\n     AstNode, Direction, InsertPosition, SyntaxElement,\n     SyntaxKind::*,\n     T,\n@@ -229,26 +229,6 @@ impl AstEditor<ast::ImplItem> {\n     }\n }\n \n-impl AstEditor<ast::FnDef> {\n-    pub fn set_body(&mut self, body: &ast::Block) {\n-        let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n-        let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.ast().body() {\n-            old_body.syntax().clone().into()\n-        } else if let Some(semi) = self.ast().semicolon_token() {\n-            to_insert.push(tokens::single_space().into());\n-            semi.into()\n-        } else {\n-            to_insert.push(tokens::single_space().into());\n-            to_insert.push(body.syntax().clone().into());\n-            self.ast = self.insert_children(InsertPosition::Last, to_insert.into_iter());\n-            return;\n-        };\n-        to_insert.push(body.syntax().clone().into());\n-        let replace_range = RangeInclusive::new(old_body_or_semi.clone(), old_body_or_semi);\n-        self.ast = self.replace_children(replace_range, to_insert.into_iter())\n-    }\n-}\n-\n impl AstEditor<ast::TypeParam> {\n     pub fn remove_bounds(&mut self) -> &mut Self {\n         let colon = match self.ast.colon_token() {\n@@ -263,53 +243,3 @@ impl AstEditor<ast::TypeParam> {\n         self\n     }\n }\n-\n-mod tokens {\n-    use once_cell::sync::Lazy;\n-    use ra_syntax::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken, T};\n-\n-    static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n-\n-    pub(crate) fn comma() -> SyntaxToken {\n-        SOURCE_FILE\n-            .tree()\n-            .syntax()\n-            .descendants_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == T![,])\n-            .unwrap()\n-    }\n-\n-    pub(crate) fn single_space() -> SyntaxToken {\n-        SOURCE_FILE\n-            .tree()\n-            .syntax()\n-            .descendants_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \" \")\n-            .unwrap()\n-    }\n-\n-    #[allow(unused)]\n-    pub(crate) fn single_newline() -> SyntaxToken {\n-        SOURCE_FILE\n-            .tree()\n-            .syntax()\n-            .descendants_with_tokens()\n-            .filter_map(|it| it.into_token())\n-            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\")\n-            .unwrap()\n-    }\n-\n-    pub(crate) struct WsBuilder(SourceFile);\n-\n-    impl WsBuilder {\n-        pub(crate) fn new(text: &str) -> WsBuilder {\n-            WsBuilder(SourceFile::parse(text).ok().unwrap())\n-        }\n-        pub(crate) fn ws(&self) -> SyntaxToken {\n-            self.0.syntax().first_child_or_token().unwrap().into_token().unwrap()\n-        }\n-    }\n-\n-}"}, {"sha": "3ca3320f7aa2ddf26082fc3c3daad002b9678a97", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -340,5 +340,4 @@ mod tests {\n         assert_eq!(assists.next().expect(\"expected assist\").0.label, \"introduce variable\");\n         assert_eq!(assists.next().expect(\"expected assist\").0.label, \"replace with match\");\n     }\n-\n }"}, {"sha": "5fedad69658a0343931908281fb2b92a09942876", "filename": "crates/ra_ide_api/src/line_index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -278,5 +278,4 @@ const C: char = \\\"\u30e1 \u30e1\\\";\n \n         assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextUnit::from_usize(15));\n     }\n-\n }"}, {"sha": "8cf58fe79580449d9e8ecbe6cb007dbc5f46050b", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -229,5 +229,4 @@ mod tests {\n         let runnables = analysis.runnables(pos.file_id).unwrap();\n         assert!(runnables.is_empty())\n     }\n-\n }"}, {"sha": "3659edf8ef544a72a2140e87421a2c7b441ce941", "filename": "crates/ra_lsp_server/src/markdown.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -70,5 +70,4 @@ let a = 1;\n             \"```rust\\nfn main(){}\\n```\\nSome comment.\\n```rust\\nlet a = 1;\\n```\"\n         );\n     }\n-\n }"}, {"sha": "6e9e212b76f341036f0acb1f2072dc2a5485251d", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -135,7 +135,6 @@ pub(crate) mod fragments {\n \n         m.complete(p, MACRO_STMTS);\n     }\n-\n }\n \n pub(crate) fn reparser("}, {"sha": "9bc85404a0049b4980e61155843e13ab164eee87", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -12,6 +12,8 @@ itertools = \"0.8.0\"\n rowan = \"0.6.1\"\n rustc_lexer = \"0.1.0\"\n rustc-hash = \"1.0.1\"\n+arrayvec = \"0.4.10\"\n+once_cell = \"1.2.0\"\n \n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations"}, {"sha": "fdffd8cb18a561feadddb5cd703dfef80e9bb445", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -5,6 +5,7 @@ mod traits;\n mod tokens;\n mod extensions;\n mod expr_extensions;\n+mod edit;\n pub mod make;\n \n use std::marker::PhantomData;"}, {"sha": "c65899812e62e0cf0bef7898d89cc10778e20e96", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -0,0 +1,52 @@\n+//! This module contains functions for editing syntax trees. As the trees are\n+//! immutable, all function here return a fresh copy of the tree, instead of\n+//! doing an in-place modification.\n+\n+use arrayvec::ArrayVec;\n+use std::ops::RangeInclusive;\n+\n+use crate::{\n+    algo,\n+    ast::{self, make, AstNode},\n+    InsertPosition, SyntaxElement,\n+};\n+\n+impl ast::FnDef {\n+    #[must_use]\n+    pub fn with_body(&self, body: ast::Block) -> ast::FnDef {\n+        let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n+        let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n+            old_body.syntax().clone().into()\n+        } else if let Some(semi) = self.semicolon_token() {\n+            to_insert.push(make::tokens::single_space().into());\n+            semi.into()\n+        } else {\n+            to_insert.push(make::tokens::single_space().into());\n+            to_insert.push(body.syntax().clone().into());\n+            return insert_children(self, InsertPosition::Last, to_insert.into_iter());\n+        };\n+        to_insert.push(body.syntax().clone().into());\n+        let replace_range = RangeInclusive::new(old_body_or_semi.clone(), old_body_or_semi);\n+        replace_children(self, replace_range, to_insert.into_iter())\n+    }\n+}\n+\n+#[must_use]\n+fn insert_children<N: AstNode>(\n+    parent: &N,\n+    position: InsertPosition<SyntaxElement>,\n+    mut to_insert: impl Iterator<Item = SyntaxElement>,\n+) -> N {\n+    let new_syntax = algo::insert_children(parent.syntax(), position, &mut to_insert);\n+    N::cast(new_syntax).unwrap()\n+}\n+\n+#[must_use]\n+fn replace_children<N: AstNode>(\n+    parent: &N,\n+    to_replace: RangeInclusive<SyntaxElement>,\n+    mut to_insert: impl Iterator<Item = SyntaxElement>,\n+) -> N {\n+    let new_syntax = algo::replace_children(parent.syntax(), to_replace, &mut to_insert);\n+    N::cast(new_syntax).unwrap()\n+}"}, {"sha": "287a40bee76a60712d446310d284e142db274def", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d847d53e36571c8f7925b72cedf66bb203976148/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=d847d53e36571c8f7925b72cedf66bb203976148", "patch": "@@ -133,3 +133,51 @@ fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let res = parse.tree().syntax().descendants().find_map(N::cast).unwrap();\n     res\n }\n+\n+pub mod tokens {\n+    use crate::{AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken, T};\n+    use once_cell::sync::Lazy;\n+\n+    static SOURCE_FILE: Lazy<Parse<SourceFile>> = Lazy::new(|| SourceFile::parse(\",\\n; ;\"));\n+\n+    pub fn comma() -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == T![,])\n+            .unwrap()\n+    }\n+\n+    pub fn single_space() -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \" \")\n+            .unwrap()\n+    }\n+\n+    pub fn single_newline() -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\")\n+            .unwrap()\n+    }\n+\n+    pub struct WsBuilder(SourceFile);\n+\n+    impl WsBuilder {\n+        pub fn new(text: &str) -> WsBuilder {\n+            WsBuilder(SourceFile::parse(text).ok().unwrap())\n+        }\n+        pub fn ws(&self) -> SyntaxToken {\n+            self.0.syntax().first_child_or_token().unwrap().into_token().unwrap()\n+        }\n+    }\n+}"}]}