{"sha": "7d4e8e150fd8d53668de016fecdd2e548a793107", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNGU4ZTE1MGZkOGQ1MzY2OGRlMDE2ZmVjZGQyZTU0OGE3OTMxMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-29T19:06:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-29T19:06:59Z"}, "message": "Auto merge of #4837 - flip1995:integration, r=phansch\n\nRIIR: Integration tests\n\nIn #4825 the `rust-lang/chalk` test failed because the output was too large. I didn't want to completely disabling the output, since showing the backtrace of an ICE directly in travis is pretty useful. Since finding strings in command outputs is easier in Rust, than in bash, I just RIIRed it.\n\nThis and also rewriting our tests in Rust may help with trying out new CI platforms (cc #4577)\n\nchangelog: none", "tree": {"sha": "68bdc949fb109105ae22922a68fb0bfa3c8ecae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68bdc949fb109105ae22922a68fb0bfa3c8ecae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d4e8e150fd8d53668de016fecdd2e548a793107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4e8e150fd8d53668de016fecdd2e548a793107", "html_url": "https://github.com/rust-lang/rust/commit/7d4e8e150fd8d53668de016fecdd2e548a793107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d4e8e150fd8d53668de016fecdd2e548a793107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059568faebf41fd90835eef54fecf1fc4cbc1bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/059568faebf41fd90835eef54fecf1fc4cbc1bc2", "html_url": "https://github.com/rust-lang/rust/commit/059568faebf41fd90835eef54fecf1fc4cbc1bc2"}, {"sha": "82066d2f0e7fefd00e32d2cea87debcc94e66bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/82066d2f0e7fefd00e32d2cea87debcc94e66bc4", "html_url": "https://github.com/rust-lang/rust/commit/82066d2f0e7fefd00e32d2cea87debcc94e66bc4"}], "stats": {"total": 127, "additions": 83, "deletions": 44}, "files": [{"sha": "a2a67e66e6144c1a9123867525e0889421c978b7", "filename": ".travis.yml", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d4e8e150fd8d53668de016fecdd2e548a793107/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7d4e8e150fd8d53668de016fecdd2e548a793107/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=7d4e8e150fd8d53668de016fecdd2e548a793107", "patch": "@@ -61,14 +61,12 @@ matrix:\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=rust-lang/cargo\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    # FIXME: Output too large\n-    # - env: INTEGRATION=rust-lang-nursery/chalk\n-    #   if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n+    - env: INTEGRATION=rust-lang/chalk\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=Geal/nom\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n-    # FIXME blocked on https://github.com/rust-lang/rust-clippy/issues/4727\n-    #- env: INTEGRATION=rust-lang/rustfmt\n-    #  if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n+    - env: INTEGRATION=rust-lang/rustfmt\n+      if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=hyperium/hyper\n       if: repo =~ /^rust-lang\\/rust-clippy$/ AND branch IN (auto, try)\n     - env: INTEGRATION=bluss/rust-itertools\n@@ -127,7 +125,7 @@ before_script:\n script:\n   - |\n     if [[ -n ${INTEGRATION} ]]; then\n-      ./ci/integration-tests.sh && sleep 5\n+      cargo test --test integration --features integration && sleep 5\n     else\n       ./ci/base-tests.sh && sleep 5\n     fi"}, {"sha": "dabc4a62e6d667e09579962acdbc1de35f392d0f", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d4e8e150fd8d53668de016fecdd2e548a793107/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7d4e8e150fd8d53668de016fecdd2e548a793107/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=7d4e8e150fd8d53668de016fecdd2e548a793107", "patch": "@@ -38,6 +38,8 @@ clippy_lints = { version = \"0.0.212\", path = \"clippy_lints\" }\n regex = \"1\"\n semver = \"0.9\"\n rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n+git2 = { version = \"0.10\", optional = true }\n+tempfile = { version = \"3.1.0\", optional = true }\n \n [dev-dependencies]\n cargo_metadata = \"0.9.0\"\n@@ -58,3 +60,4 @@ rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\"}\n \n [features]\n deny-warnings = []\n+integration = [\"git2\", \"tempfile\"]"}, {"sha": "f6540769bb0392c6402ef31470839bf201cc50c6", "filename": "ci/integration-tests.sh", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/059568faebf41fd90835eef54fecf1fc4cbc1bc2/ci%2Fintegration-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/059568faebf41fd90835eef54fecf1fc4cbc1bc2/ci%2Fintegration-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration-tests.sh?ref=059568faebf41fd90835eef54fecf1fc4cbc1bc2", "patch": "@@ -1,37 +0,0 @@\n-#!/usr/bin/env bash\n-set -ex\n-\n-if [[ -z \"$INTEGRATION\" ]]; then\n-    exit 0\n-fi\n-\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-rm ~/.cargo/bin/cargo-clippy\n-cargo install --force --debug --path .\n-\n-echo \"Running integration test for crate ${INTEGRATION}\"\n-\n-git clone --depth=1 \"https://github.com/${INTEGRATION}.git\" checkout\n-cd checkout\n-\n-# run clippy on a project, try to be verbose and trigger as many warnings\n-# as possible for greater coverage\n-# NOTE: we use `tee` to print any warnings and errors to stdout\n-#       to avoid build timeout in Travis\n-RUST_BACKTRACE=full \\\n-cargo clippy \\\n-    --all-targets \\\n-    --all-features \\\n-    -- \\\n-    --cap-lints warn \\\n-    -W clippy::pedantic \\\n-    -W clippy::nursery \\\n-    2>&1 | tee clippy_output\n-\n-cargo uninstall clippy\n-\n-if grep -q \"internal compiler error\\|query stack during panic\\|E0463\" clippy_output; then\n-    exit 1\n-fi"}, {"sha": "455965436d63a5ce99c4345f23524f25420d5016", "filename": "tests/integration.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/7d4e8e150fd8d53668de016fecdd2e548a793107/tests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4e8e150fd8d53668de016fecdd2e548a793107/tests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fintegration.rs?ref=7d4e8e150fd8d53668de016fecdd2e548a793107", "patch": "@@ -0,0 +1,75 @@\n+#![cfg(feature = \"integration\")]\n+\n+use git2::Repository;\n+use tempfile;\n+\n+use std::env;\n+use std::process::Command;\n+\n+#[cfg_attr(feature = \"integration\", test)]\n+fn integration_test() {\n+    let repo_name = env::var(\"INTEGRATION\").expect(\"`INTEGRATION` var not set\");\n+    let repo_url = format!(\"https://github.com/{}\", repo_name);\n+    let crate_name = repo_name\n+        .split('/')\n+        .nth(1)\n+        .expect(\"repo name should have format `<org>/<name>`\");\n+\n+    let repo_dir = tempfile::tempdir()\n+        .expect(\"couldn't create temp dir\")\n+        .path()\n+        .join(crate_name);\n+\n+    Repository::clone(&repo_url, &repo_dir).expect(\"clone of repo failed\");\n+\n+    let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+    let target_dir = std::path::Path::new(&root_dir).join(\"target\");\n+    let clippy_binary = target_dir.join(env!(\"PROFILE\")).join(\"cargo-clippy\");\n+\n+    let output = Command::new(clippy_binary)\n+        .current_dir(repo_dir)\n+        .env(\"RUST_BACKTRACE\", \"full\")\n+        .env(\"CARGO_TARGET_DIR\", target_dir)\n+        .args(&[\n+            \"clippy\",\n+            \"--all-targets\",\n+            \"--all-features\",\n+            \"--\",\n+            \"--cap-lints\",\n+            \"warn\",\n+            \"-Wclippy::pedantic\",\n+            \"-Wclippy::nursery\",\n+        ])\n+        .output()\n+        .expect(\"unable to run clippy\");\n+\n+    let stderr = String::from_utf8_lossy(&output.stderr);\n+    if stderr.contains(\"internal compiler error\") {\n+        let backtrace_start = stderr\n+            .find(\"thread 'rustc' panicked at\")\n+            .expect(\"start of backtrace not found\");\n+        let backtrace_end = stderr\n+            .rfind(\"error: internal compiler error\")\n+            .expect(\"end of backtrace not found\");\n+\n+        panic!(\n+            \"internal compiler error\\nBacktrace:\\n\\n{}\",\n+            &stderr[backtrace_start..backtrace_end]\n+        );\n+    } else if stderr.contains(\"query stack during panic\") {\n+        panic!(\"query stack during panic in the output\");\n+    } else if stderr.contains(\"E0463\") {\n+        panic!(\"error: E0463\");\n+    }\n+\n+    match output.status.code() {\n+        Some(code) => {\n+            if code == 0 {\n+                println!(\"Compilation successful\");\n+            } else {\n+                eprintln!(\"Compilation failed. Exit code: {}\", code);\n+            }\n+        },\n+        None => panic!(\"Process terminated by signal\"),\n+    }\n+}"}]}