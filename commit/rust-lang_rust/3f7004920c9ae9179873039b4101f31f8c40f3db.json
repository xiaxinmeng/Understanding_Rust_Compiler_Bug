{"sha": "3f7004920c9ae9179873039b4101f31f8c40f3db", "node_id": "C_kwDOAAsO6NoAKDNmNzAwNDkyMGM5YWU5MTc5ODczMDM5YjQxMDFmMzFmOGM0MGYzZGI", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2022-07-20T14:33:53Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2022-08-05T01:43:39Z"}, "message": "Move `fold` logic to `iter_fold` method and reuse it in `count` and `last`", "tree": {"sha": "60ecf92f1777befebb91fd27209d0ce614c8b610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60ecf92f1777befebb91fd27209d0ce614c8b610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f7004920c9ae9179873039b4101f31f8c40f3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7004920c9ae9179873039b4101f31f8c40f3db", "html_url": "https://github.com/rust-lang/rust/commit/3f7004920c9ae9179873039b4101f31f8c40f3db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f7004920c9ae9179873039b4101f31f8c40f3db/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc5f627827a82f4aa570f60cfbefe8357ba805b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc5f627827a82f4aa570f60cfbefe8357ba805b", "html_url": "https://github.com/rust-lang/rust/commit/cbc5f627827a82f4aa570f60cfbefe8357ba805b"}], "stats": {"total": 134, "additions": 118, "deletions": 16}, "files": [{"sha": "ba9767e5c4a0ab3e3035c5a397a089b5b1794348", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3f7004920c9ae9179873039b4101f31f8c40f3db/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7004920c9ae9179873039b4101f31f8c40f3db/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=3f7004920c9ae9179873039b4101f31f8c40f3db", "patch": "@@ -78,6 +78,16 @@ where\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n         self.inner.advance_by(n)\n     }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.inner.count()\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<Self::Item> {\n+        self.inner.last()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -229,6 +239,16 @@ where\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n         self.inner.advance_by(n)\n     }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        self.inner.count()\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<Self::Item> {\n+        self.inner.last()\n+    }\n }\n \n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n@@ -304,6 +324,35 @@ impl<I, U> FlattenCompat<I, U>\n where\n     I: Iterator<Item: IntoIterator<IntoIter = U>>,\n {\n+    /// Folds the inner iterators into an accumulator by applying an operation.\n+    ///\n+    /// Folds over the inner iterators, not over their elements. Is used by the `fold`, `count`,\n+    /// and `last` methods.\n+    #[inline]\n+    fn iter_fold<Acc, Fold>(self, mut acc: Acc, mut fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, U) -> Acc,\n+    {\n+        #[inline]\n+        fn flatten<T: IntoIterator, Acc>(\n+            fold: &mut impl FnMut(Acc, T::IntoIter) -> Acc,\n+        ) -> impl FnMut(Acc, T) -> Acc + '_ {\n+            move |acc, iter| fold(acc, iter.into_iter())\n+        }\n+\n+        if let Some(iter) = self.frontiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc = self.iter.fold(acc, flatten(&mut fold));\n+\n+        if let Some(iter) = self.backiter {\n+            acc = fold(acc, iter);\n+        }\n+\n+        acc\n+    }\n+\n     /// Folds over the inner iterators as long as the given function returns successfully,\n     /// always storing the most recent inner iterator in `self.frontiter`.\n     ///\n@@ -440,28 +489,18 @@ where\n     }\n \n     #[inline]\n-    fn fold<Acc, Fold>(self, mut init: Acc, mut fold: Fold) -> Acc\n+    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n     {\n         #[inline]\n-        fn flatten<T: IntoIterator, Acc>(\n-            fold: &mut impl FnMut(Acc, T::Item) -> Acc,\n-        ) -> impl FnMut(Acc, T) -> Acc + '_ {\n-            move |acc, x| x.into_iter().fold(acc, &mut *fold)\n+        fn flatten<U: Iterator, Acc>(\n+            mut fold: impl FnMut(Acc, U::Item) -> Acc,\n+        ) -> impl FnMut(Acc, U) -> Acc {\n+            move |acc, iter| iter.fold(acc, &mut fold)\n         }\n \n-        if let Some(front) = self.frontiter {\n-            init = front.fold(init, &mut fold);\n-        }\n-\n-        init = self.iter.fold(init, flatten(&mut fold));\n-\n-        if let Some(back) = self.backiter {\n-            init = back.fold(init, &mut fold);\n-        }\n-\n-        init\n+        self.iter_fold(init, flatten(fold))\n     }\n \n     #[inline]\n@@ -481,6 +520,27 @@ where\n             _ => Ok(()),\n         }\n     }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        #[inline]\n+        #[rustc_inherit_overflow_checks]\n+        fn count<U: Iterator>(acc: usize, iter: U) -> usize {\n+            acc + iter.count()\n+        }\n+\n+        self.iter_fold(0, count)\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<Self::Item> {\n+        #[inline]\n+        fn last<U: Iterator>(last: Option<U::Item>, iter: U) -> Option<U::Item> {\n+            iter.last().or(last)\n+        }\n+\n+        self.iter_fold(None, last)\n+    }\n }\n \n impl<I, U> DoubleEndedIterator for FlattenCompat<I, U>"}, {"sha": "690fd0c21974b55cd6f42449f4553a940404d52c", "filename": "library/core/tests/iter/adapters/flatten.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3f7004920c9ae9179873039b4101f31f8c40f3db/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f7004920c9ae9179873039b4101f31f8c40f3db/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fflatten.rs?ref=3f7004920c9ae9179873039b4101f31f8c40f3db", "patch": "@@ -168,3 +168,45 @@ fn test_trusted_len_flatten() {\n     assert_trusted_len(&iter);\n     assert_eq!(iter.size_hint(), (20, Some(20)));\n }\n+\n+#[test]\n+fn test_flatten_count() {\n+    let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n+\n+    assert_eq!(it.clone().count(), 40);\n+    it.advance_by(5).unwrap();\n+    assert_eq!(it.clone().count(), 35);\n+    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.clone().count(), 30);\n+    it.advance_by(10).unwrap();\n+    assert_eq!(it.clone().count(), 20);\n+    it.advance_back_by(8).unwrap();\n+    assert_eq!(it.clone().count(), 12);\n+    it.advance_by(4).unwrap();\n+    assert_eq!(it.clone().count(), 8);\n+    it.advance_back_by(5).unwrap();\n+    assert_eq!(it.clone().count(), 3);\n+    it.advance_by(3).unwrap();\n+    assert_eq!(it.clone().count(), 0);\n+}\n+\n+#[test]\n+fn test_flatten_last() {\n+    let mut it = once(0..10).chain(once(10..30)).chain(once(30..40)).flatten();\n+\n+    assert_eq!(it.clone().last(), Some(39));\n+    it.advance_by(5).unwrap(); // 5..40\n+    assert_eq!(it.clone().last(), Some(39));\n+    it.advance_back_by(5).unwrap(); // 5..35\n+    assert_eq!(it.clone().last(), Some(34));\n+    it.advance_by(10).unwrap(); // 15..35\n+    assert_eq!(it.clone().last(), Some(34));\n+    it.advance_back_by(8).unwrap(); // 15..27\n+    assert_eq!(it.clone().last(), Some(26));\n+    it.advance_by(4).unwrap(); // 19..27\n+    assert_eq!(it.clone().last(), Some(26));\n+    it.advance_back_by(5).unwrap(); // 19..22\n+    assert_eq!(it.clone().last(), Some(21));\n+    it.advance_by(3).unwrap(); // 22..22\n+    assert_eq!(it.clone().last(), None);\n+}"}]}