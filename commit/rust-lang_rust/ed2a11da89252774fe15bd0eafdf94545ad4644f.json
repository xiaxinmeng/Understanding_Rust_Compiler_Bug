{"sha": "ed2a11da89252774fe15bd0eafdf94545ad4644f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmExMWRhODkyNTI3NzRmZTE1YmQwZWFmZGY5NDU0NWFkNDY0NGY=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-12T20:37:52Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-12T20:51:59Z"}, "message": "require a method callee's type to outlive the call\n\nThis rather crucial requirement was not checked. In most cases, that\ndidn't cause any trouble because the argument types are required to\noutlive the call and are subtypes of a subformula of the callee type.\n\nHowever, binary ops are taken by ref only indirectly, without it being\nmarked in the argument types, which led to the argument types not being\nconstrained anywhere causing spurious errors (as these are basically\nunconstrainable, I don't think this change can break code). Of course,\nthe old way was also incorrent with contravariance, but that is still\nunsound for other reasons.\n\nThis also improves rustc::front to get RUST_LOG to *somewhat* work.\n\nFixes #28999", "tree": {"sha": "041e5ffc995a1c38dd8b0cc30a1bcd4cffb17af0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041e5ffc995a1c38dd8b0cc30a1bcd4cffb17af0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2a11da89252774fe15bd0eafdf94545ad4644f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2a11da89252774fe15bd0eafdf94545ad4644f", "html_url": "https://github.com/rust-lang/rust/commit/ed2a11da89252774fe15bd0eafdf94545ad4644f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2a11da89252774fe15bd0eafdf94545ad4644f/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "843e528fd0c09666cc5f2896258f88c25eaacb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/843e528fd0c09666cc5f2896258f88c25eaacb29", "html_url": "https://github.com/rust-lang/rust/commit/843e528fd0c09666cc5f2896258f88c25eaacb29"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "9591ed2f71dffdf0952ec1044d0085247e79b364", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed2a11da89252774fe15bd0eafdf94545ad4644f/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2a11da89252774fe15bd0eafdf94545ad4644f/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=ed2a11da89252774fe15bd0eafdf94545ad4644f", "patch": "@@ -527,6 +527,10 @@ impl<'ast> Map<'ast> {\n             NodeTraitItem(ti) => PathName(ti.name),\n             NodeVariant(v) => PathName(v.node.name),\n             NodeLifetime(lt) => PathName(lt.name),\n+            NodeTyParam(tp) => PathName(tp.name),\n+            NodeLocal(&Pat { node: PatIdent(_,l,_), .. }) => {\n+                PathName(l.node.name)\n+            },\n             _ => panic!(\"no path elem for {:?}\", node)\n         }\n     }\n@@ -987,4 +991,3 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         }\n     }\n }\n-"}, {"sha": "31e6c942dc697f75e5716f138d23f914cc8ef965", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed2a11da89252774fe15bd0eafdf94545ad4644f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2a11da89252774fe15bd0eafdf94545ad4644f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=ed2a11da89252774fe15bd0eafdf94545ad4644f", "patch": "@@ -592,6 +592,8 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n         };\n \n         substs_wf_in_scope(rcx, origin, &callee.substs, expr.span, expr_region);\n+        type_must_outlive(rcx, infer::ExprTypeIsNotInScope(callee.ty, expr.span),\n+                          callee.ty, expr_region);\n     }\n \n     // Check any autoderefs or autorefs that appear.\n@@ -664,6 +666,8 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n         }\n     }\n \n+    debug!(\"regionck::visit_expr(e={:?}, repeating_scope={}) - visiting subexprs\",\n+           expr, rcx.repeating_scope);\n     match expr.node {\n         hir::ExprPath(..) => {\n             rcx.fcx.opt_node_ty_substs(expr.id, |item_substs| {"}, {"sha": "87112ef171981df96d12cfe9f7e6aab9684a6189", "filename": "src/test/run-pass/issue-28999.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ed2a11da89252774fe15bd0eafdf94545ad4644f/src%2Ftest%2Frun-pass%2Fissue-28999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2a11da89252774fe15bd0eafdf94545ad4644f/src%2Ftest%2Frun-pass%2Fissue-28999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28999.rs?ref=ed2a11da89252774fe15bd0eafdf94545ad4644f", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Xyz<'a, V> {\n+    pub v: (V, &'a u32),\n+}\n+\n+pub fn eq<'a, 's, 't, V>(this: &'s Xyz<'a, V>, other: &'t Xyz<'a, V>) -> bool\n+        where V: PartialEq {\n+    this.v == other.v\n+}\n+\n+fn main() {}"}]}