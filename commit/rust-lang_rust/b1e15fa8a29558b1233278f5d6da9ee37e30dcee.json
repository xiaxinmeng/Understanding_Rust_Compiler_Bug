{"sha": "b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZTE1ZmE4YTI5NTU4YjEyMzMyNzhmNWQ2ZGE5ZWUzN2UzMGRjZWU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2020-12-29T17:31:22Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2021-02-15T13:27:16Z"}, "message": "Parameterize `DynMetadata` over its `dyn SomeTrait` type", "tree": {"sha": "35a96e5d42770335a0c90f298dfab11c5b5964cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a96e5d42770335a0c90f298dfab11c5b5964cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "html_url": "https://github.com/rust-lang/rust/commit/b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1e15fa8a29558b1233278f5d6da9ee37e30dcee/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696b239f72350ce2a647ede1a330039d0e0ecfa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/696b239f72350ce2a647ede1a330039d0e0ecfa9", "html_url": "https://github.com/rust-lang/rust/commit/696b239f72350ce2a647ede1a330039d0e0ecfa9"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "b534b5ac4d47d6d7cb7fd0ac17f86f110fd5c165", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b1e15fa8a29558b1233278f5d6da9ee37e30dcee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e15fa8a29558b1233278f5d6da9ee37e30dcee/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "patch": "@@ -2164,7 +2164,10 @@ impl<'tcx> TyS<'tcx> {\n             | ty::Tuple(..) => tcx.types.unit,\n \n             ty::Str | ty::Slice(_) => tcx.types.usize,\n-            ty::Dynamic(..) => tcx.type_of(tcx.lang_items().dyn_metadata().unwrap()),\n+            ty::Dynamic(..) => {\n+                let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n+                tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])\n+            },\n \n             ty::Projection(_)\n             | ty::Param(_)"}, {"sha": "948d7f0b0394423bbde2cd4ed4e6228c434b2f2b", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b1e15fa8a29558b1233278f5d6da9ee37e30dcee/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e15fa8a29558b1233278f5d6da9ee37e30dcee/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "patch": "@@ -1,7 +1,7 @@\n #![unstable(feature = \"ptr_metadata\", issue = /* FIXME */ \"none\")]\n \n use crate::fmt;\n-use crate::hash::Hash;\n+use crate::hash::{Hash, Hasher};\n use crate::ptr::NonNull;\n \n /// FIXME docs\n@@ -61,17 +61,60 @@ impl<T: ?Sized> Clone for PtrComponents<T> {\n \n /// The metadata for a `dyn SomeTrait` trait object type.\n #[lang = \"dyn_metadata\"]\n-#[derive(Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]\n-pub struct DynMetadata {\n+pub struct DynMetadata<Dyn: ?Sized> {\n     #[allow(unused)]\n     vtable_ptr: NonNull<()>,\n+    phantom: crate::marker::PhantomData<Dyn>,\n }\n \n-unsafe impl Send for DynMetadata {}\n-unsafe impl Sync for DynMetadata {}\n+unsafe impl<Dyn: ?Sized> Send for DynMetadata<Dyn> {}\n+unsafe impl<Dyn: ?Sized> Sync for DynMetadata<Dyn> {}\n \n-impl fmt::Debug for DynMetadata {\n+impl<Dyn: ?Sized> fmt::Debug for DynMetadata<Dyn> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.write_str(\"DynMetadata { \u2026 }\")\n     }\n }\n+\n+// Manual impls needed to avoid `Dyn: $Trait` bounds.\n+\n+impl<Dyn: ?Sized> Unpin for DynMetadata<Dyn> {}\n+\n+impl<Dyn: ?Sized> Copy for DynMetadata<Dyn> {}\n+\n+impl<Dyn: ?Sized> Clone for DynMetadata<Dyn> {\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<Dyn: ?Sized> Eq for DynMetadata<Dyn> {}\n+\n+impl<Dyn: ?Sized> PartialEq for DynMetadata<Dyn> {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool {\n+        self.vtable_ptr == other.vtable_ptr\n+    }\n+}\n+\n+impl<Dyn: ?Sized> Ord for DynMetadata<Dyn> {\n+    #[inline]\n+    fn cmp(&self, other: &Self) -> crate::cmp::Ordering {\n+        self.vtable_ptr.cmp(&other.vtable_ptr)\n+    }\n+}\n+\n+impl<Dyn: ?Sized> PartialOrd for DynMetadata<Dyn> {\n+    #[inline]\n+    fn partial_cmp(&self, other: &Self) -> Option<crate::cmp::Ordering> {\n+        Some(self.vtable_ptr.cmp(&other.vtable_ptr))\n+    }\n+}\n+\n+impl<Dyn: ?Sized> Hash for DynMetadata<Dyn> {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, hasher: &mut H) {\n+        self.vtable_ptr.hash(hasher)\n+    }\n+}"}, {"sha": "ff3db740dfdb7b9ce4d83caeb91a82fdb07bc0e8", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b1e15fa8a29558b1233278f5d6da9ee37e30dcee/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e15fa8a29558b1233278f5d6da9ee37e30dcee/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=b1e15fa8a29558b1233278f5d6da9ee37e30dcee", "patch": "@@ -1,6 +1,6 @@\n use core::cell::RefCell;\n use core::ptr::*;\n-use std::fmt::Display;\n+use std::fmt::{Debug, Display};\n \n #[test]\n fn test_const_from_raw_parts() {\n@@ -452,20 +452,25 @@ fn ptr_metadata() {\n         assert_eq!(metadata(dst_struct), 3_usize);\n     }\n \n-    let vtable_1: DynMetadata = metadata(&4_u32 as &dyn Display);\n-    let vtable_2: DynMetadata = metadata(&(true, 7_u32) as &(bool, dyn Display));\n-    let vtable_3: DynMetadata = metadata(&Pair(true, 7_u32) as &Pair<bool, dyn Display>);\n-    let vtable_4: DynMetadata = metadata(&4_u16 as &dyn Display);\n+    let vtable_1: DynMetadata<dyn Debug> = metadata(&4_u16 as &dyn Debug);\n+    let vtable_2: DynMetadata<dyn Display> = metadata(&4_u16 as &dyn Display);\n+    let vtable_3: DynMetadata<dyn Display> = metadata(&4_u32 as &dyn Display);\n+    let vtable_4: DynMetadata<dyn Display> = metadata(&(true, 7_u32) as &(bool, dyn Display));\n+    let vtable_5: DynMetadata<dyn Display> =\n+        metadata(&Pair(true, 7_u32) as &Pair<bool, dyn Display>);\n     unsafe {\n         let address_1: usize = std::mem::transmute(vtable_1);\n         let address_2: usize = std::mem::transmute(vtable_2);\n         let address_3: usize = std::mem::transmute(vtable_3);\n         let address_4: usize = std::mem::transmute(vtable_4);\n-        // Same erased type and same trait: same vtable pointer\n-        assert_eq!(address_1, address_2);\n-        assert_eq!(address_1, address_3);\n-        // Different erased type: different vtable pointer\n-        assert_ne!(address_1, address_4);\n+        let address_5: usize = std::mem::transmute(vtable_5);\n+        // Different trait => different vtable pointer\n+        assert_ne!(address_1, address_2);\n+        // Different erased type => different vtable pointer\n+        assert_ne!(address_2, address_3);\n+        // Same erased type and same trait => same vtable pointer\n+        assert_eq!(address_3, address_4);\n+        assert_eq!(address_3, address_5);\n     }\n }\n \n@@ -486,11 +491,11 @@ fn ptr_metadata_bounds() {\n \n     // For this reason, let\u2019s check here that bounds are satisfied:\n \n-    static_assert_expected_bounds_for_metadata::<()>();\n-    static_assert_expected_bounds_for_metadata::<usize>();\n-    static_assert_expected_bounds_for_metadata::<DynMetadata>();\n-    fn static_assert_associated_type<T: ?Sized>() {\n-        static_assert_expected_bounds_for_metadata::<<T as Pointee>::Metadata>()\n+    let _ = static_assert_expected_bounds_for_metadata::<()>;\n+    let _ = static_assert_expected_bounds_for_metadata::<usize>;\n+    let _ = static_assert_expected_bounds_for_metadata::<DynMetadata<dyn Display>>;\n+    fn _static_assert_associated_type<T: ?Sized>() {\n+        let _ = static_assert_expected_bounds_for_metadata::<<T as Pointee>::Metadata>;\n     }\n \n     fn static_assert_expected_bounds_for_metadata<Meta>()"}]}