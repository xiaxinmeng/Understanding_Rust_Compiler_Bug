{"sha": "a1d89266e5f96a2232c7202bf812dee1f845ae02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDg5MjY2ZTVmOTZhMjIzMmM3MjAyYmY4MTJkZWUxZjg0NWFlMDI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-07T10:01:18Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-12T09:29:53Z"}, "message": "Turn `HirLocalId` into a `newtype_index`", "tree": {"sha": "fd062f78e2a8ec0c792db4c3c3e50e31c87fd1ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd062f78e2a8ec0c792db4c3c3e50e31c87fd1ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d89266e5f96a2232c7202bf812dee1f845ae02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d89266e5f96a2232c7202bf812dee1f845ae02", "html_url": "https://github.com/rust-lang/rust/commit/a1d89266e5f96a2232c7202bf812dee1f845ae02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d89266e5f96a2232c7202bf812dee1f845ae02/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39a0969e64c06e7c6e5447b5633b02e4e4e931df", "url": "https://api.github.com/repos/rust-lang/rust/commits/39a0969e64c06e7c6e5447b5633b02e4e4e931df", "html_url": "https://github.com/rust-lang/rust/commit/39a0969e64c06e7c6e5447b5633b02e4e4e931df"}], "stats": {"total": 78, "additions": 36, "deletions": 42}, "files": [{"sha": "3ff2545f78dfa9bbe855d1dc392ac02e01aee531", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a1d89266e5f96a2232c7202bf812dee1f845ae02", "patch": "@@ -63,7 +63,7 @@\n use mir::interpret::GlobalId;\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use hir::map::DefPathHash;\n-use hir::{HirId, ItemLocalId};\n+use hir::HirId;\n \n use ich::{Fingerprint, StableHashingContext};\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n@@ -790,11 +790,11 @@ impl<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> DepNodeParams<'a, 'gcx, 'tcx> for HirId {\n     fn to_fingerprint(&self, tcx: TyCtxt<'_, '_, '_>) -> Fingerprint {\n         let HirId {\n             owner,\n-            local_id: ItemLocalId(local_id),\n+            local_id,\n         } = *self;\n \n         let def_path_hash = tcx.def_path_hash(DefId::local(owner));\n-        let local_id = Fingerprint::from_smaller_hash(local_id as u64);\n+        let local_id = Fingerprint::from_smaller_hash(local_id.as_u32().into());\n \n         def_path_hash.0.combine(local_id)\n     }"}, {"sha": "e532b50a28b6b9d339b89423a87fec8942d68ed9", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a1d89266e5f96a2232c7202bf812dee1f845ae02", "patch": "@@ -588,7 +588,7 @@ impl<'a> LoweringContext<'a> {\n             *local_id_counter += 1;\n             hir::HirId {\n                 owner: def_index,\n-                local_id: hir::ItemLocalId(local_id),\n+                local_id: hir::ItemLocalId::from_u32(local_id),\n             }\n         })\n     }\n@@ -616,7 +616,7 @@ impl<'a> LoweringContext<'a> {\n \n             hir::HirId {\n                 owner: def_index,\n-                local_id: hir::ItemLocalId(local_id),\n+                local_id: hir::ItemLocalId::from_u32(local_id),\n             }\n         })\n     }"}, {"sha": "ac4119dc372d34420bad44164effbf42135fdb48", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=a1d89266e5f96a2232c7202bf812dee1f845ae02", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n         if max != self.hir_ids_seen.len() - 1 {\n             // Collect the missing ItemLocalIds\n             let missing: Vec<_> = (0 .. max as u32 + 1)\n-              .filter(|&i| !self.hir_ids_seen.contains_key(&ItemLocalId(i)))\n+              .filter(|&i| !self.hir_ids_seen.contains_key(&ItemLocalId::from_u32(i)))\n               .collect();\n \n             // Try to map those to something more useful\n@@ -110,7 +110,7 @@ impl<'a, 'hir: 'a> HirIdValidator<'a, 'hir> {\n             for local_id in missing {\n                 let hir_id = HirId {\n                     owner: owner_def_index,\n-                    local_id: ItemLocalId(local_id as u32),\n+                    local_id: ItemLocalId::from_u32(local_id),\n                 };\n \n                 trace!(\"missing hir id {:#?}\", hir_id);"}, {"sha": "bfe1649380581e31c32f1a91cd4bb09c9aade814", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a1d89266e5f96a2232c7202bf812dee1f845ae02", "patch": "@@ -37,7 +37,6 @@ use syntax::util::parser::ExprPrecedence;\n use ty::AdtKind;\n use ty::query::Providers;\n \n-use rustc_data_structures::indexed_vec;\n use rustc_data_structures::sync::{ParallelIterator, par_iter, Send, Sync, scope};\n use rustc_data_structures::thin_vec::ThinVec;\n \n@@ -121,48 +120,36 @@ impl serialize::UseSpecializedDecodable for HirId {\n     }\n }\n \n-\n-/// An `ItemLocalId` uniquely identifies something within a given \"item-like\",\n-/// that is within a hir::Item, hir::TraitItem, or hir::ImplItem. There is no\n-/// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n-/// the node's position within the owning item in any way, but there is a\n-/// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n-/// integers starting at zero, so a mapping that maps all or most nodes within\n-/// an \"item-like\" to something else can be implement by a `Vec` instead of a\n-/// tree or hash map.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n-         RustcEncodable, RustcDecodable)]\n-pub struct ItemLocalId(pub u32);\n-\n-impl ItemLocalId {\n-    pub fn as_usize(&self) -> usize {\n-        self.0 as usize\n+// hack to ensure that we don't try to access the private parts of `NodeId` in this module\n+mod item_local_id_inner {\n+    use rustc_data_structures::indexed_vec::Idx;\n+    /// An `ItemLocalId` uniquely identifies something within a given \"item-like\",\n+    /// that is within a hir::Item, hir::TraitItem, or hir::ImplItem. There is no\n+    /// guarantee that the numerical value of a given `ItemLocalId` corresponds to\n+    /// the node's position within the owning item in any way, but there is a\n+    /// guarantee that the `LocalItemId`s within an owner occupy a dense range of\n+    /// integers starting at zero, so a mapping that maps all or most nodes within\n+    /// an \"item-like\" to something else can be implement by a `Vec` instead of a\n+    /// tree or hash map.\n+    newtype_index! {\n+        pub struct ItemLocalId { .. }\n     }\n }\n \n-impl indexed_vec::Idx for ItemLocalId {\n-    fn new(idx: usize) -> Self {\n-        debug_assert!((idx as u32) as usize == idx);\n-        ItemLocalId(idx as u32)\n-    }\n-\n-    fn index(self) -> usize {\n-        self.0 as usize\n-    }\n-}\n+pub use self::item_local_id_inner::ItemLocalId;\n \n /// The `HirId` corresponding to CRATE_NODE_ID and CRATE_DEF_INDEX\n pub const CRATE_HIR_ID: HirId = HirId {\n     owner: CRATE_DEF_INDEX,\n-    local_id: ItemLocalId(0)\n+    local_id: ItemLocalId::from_u32_const(0)\n };\n \n pub const DUMMY_HIR_ID: HirId = HirId {\n     owner: CRATE_DEF_INDEX,\n     local_id: DUMMY_ITEM_LOCAL_ID,\n };\n \n-pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId(!0);\n+pub const DUMMY_ITEM_LOCAL_ID: ItemLocalId = ItemLocalId::MAX;\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub struct Label {"}, {"sha": "ae0d78d2958adcae9176283272f4ef7d682c3bee", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=a1d89266e5f96a2232c7202bf812dee1f845ae02", "patch": "@@ -79,7 +79,14 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for CrateNum {\n     }\n }\n \n-impl_stable_hash_for!(tuple_struct hir::ItemLocalId { index });\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::ItemLocalId {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        self.as_u32().hash_stable(hcx, hasher);\n+    }\n+}\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>>\n for hir::ItemLocalId {\n@@ -800,7 +807,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod {\n             .iter()\n             .map(|id| {\n                 let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n-                debug_assert_eq!(local_id, hir::ItemLocalId(0));\n+                debug_assert_eq!(local_id, hir::ItemLocalId::from_u32(0));\n                 def_path_hash.0\n             }).fold(Fingerprint::ZERO, |a, b| {\n                 a.combine_commutative(b)"}, {"sha": "c7ba31e33957036a44205256c1864a95c8e9984e", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d89266e5f96a2232c7202bf812dee1f845ae02/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=a1d89266e5f96a2232c7202bf812dee1f845ae02", "patch": "@@ -425,7 +425,7 @@ impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n             pprust_hir::AnnNode::Item(item) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"node_id: {} hir local_id: {}\",\n-                                        item.id, item.hir_id.local_id.0))\n+                                        item.id, item.hir_id.local_id.as_u32()))\n             }\n             pprust_hir::AnnNode::SubItem(id) => {\n                 s.s.space()?;\n@@ -434,18 +434,18 @@ impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n             pprust_hir::AnnNode::Block(blk) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"block node_id: {} hir local_id: {}\",\n-                                        blk.id, blk.hir_id.local_id.0))\n+                                        blk.id, blk.hir_id.local_id.as_u32()))\n             }\n             pprust_hir::AnnNode::Expr(expr) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"node_id: {} hir local_id: {}\",\n-                                        expr.id, expr.hir_id.local_id.0))?;\n+                                        expr.id, expr.hir_id.local_id.as_u32()))?;\n                 s.pclose()\n             }\n             pprust_hir::AnnNode::Pat(pat) => {\n                 s.s.space()?;\n                 s.synth_comment(format!(\"pat node_id: {} hir local_id: {}\",\n-                                        pat.id, pat.hir_id.local_id.0))\n+                                        pat.id, pat.hir_id.local_id.as_u32()))\n             }\n         }\n     }"}]}