{"sha": "214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "node_id": "C_kwDOAAsO6NoAKDIxNGFkMmY1YjVmZjUyOTU0OGNlMTNkYWJjZGE4ZDU4NDFkZjBiZDc", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-18T23:15:12Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-11-18T23:23:18Z"}, "message": "rustdoc doctest: detect `fn main` after an unexpected semicolon\n\nThe basic problem with this is that rustdoc, when hunting for `fn main`, will stop\nparsing after it reaches a fatal error. This unexpected semicolon was a fatal error,\nso in `src/test/rustdoc-ui/failed-doctest-extra-semicolon-on-item.rs`, it would wrap\nthe doctest in an implied main function, turning it into this:\n\n    fn main() {\n        struct S {};\n        fn main() {\n            assert_eq!(0, 1);\n        }\n    }\n\nThis, as it turns out, is totally valid, and it executes no assertions, so *it passes,*\neven though the user wanted it to execute the assertion.\n\nThe Rust parser already has the ability to recover from these unexpected semicolons,\nbut to do so, it needs to use the `parse_mod` function, so this commit changes it to do that.", "tree": {"sha": "e3662f2f69eba4ec3e069e75357b08f1385d2e4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3662f2f69eba4ec3e069e75357b08f1385d2e4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "html_url": "https://github.com/rust-lang/rust/commit/214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/214ad2f5b5ff529548ce13dabcda8d5841df0bd7/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f580acc0ce233d5c4d1f9680d354fded88b824", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f580acc0ce233d5c4d1f9680d354fded88b824", "html_url": "https://github.com/rust-lang/rust/commit/b6f580acc0ce233d5c4d1f9680d354fded88b824"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "37db20aaefa8d327311e91bf9f6e7234af0f5f8f", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/214ad2f5b5ff529548ce13dabcda8d5841df0bd7/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214ad2f5b5ff529548ce13dabcda8d5841df0bd7/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast as ast;\n+use rustc_ast::{self as ast, token};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{ColorConfig, ErrorReported, FatalError};\n@@ -537,7 +537,6 @@ crate fn make_test(\n             use rustc_errors::emitter::{Emitter, EmitterWriter};\n             use rustc_errors::Handler;\n             use rustc_parse::maybe_new_parser_from_source_str;\n-            use rustc_parse::parser::ForceCollect;\n             use rustc_session::parse::ParseSess;\n             use rustc_span::source_map::FilePathMapping;\n \n@@ -573,9 +572,9 @@ crate fn make_test(\n                 }\n             };\n \n-            loop {\n-                match parser.parse_item(ForceCollect::No) {\n-                    Ok(Some(item)) => {\n+            match parser.parse_mod(&token::Eof) {\n+                Ok((_attrs, items, _span)) => {\n+                    for item in items {\n                         if !found_main {\n                             if let ast::ItemKind::Fn(..) = item.kind {\n                                 if item.ident.name == sym::main {\n@@ -607,11 +606,9 @@ crate fn make_test(\n                             break;\n                         }\n                     }\n-                    Ok(None) => break,\n-                    Err(mut e) => {\n-                        e.cancel();\n-                        break;\n-                    }\n+                }\n+                Err(mut e) => {\n+                    e.cancel();\n                 }\n             }\n "}, {"sha": "16d737106ea890e2dd8f348625f8a0554c00f9c0", "filename": "src/test/rustdoc-ui/failed-doctest-extra-semicolon-on-item.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/214ad2f5b5ff529548ce13dabcda8d5841df0bd7/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214ad2f5b5ff529548ce13dabcda8d5841df0bd7/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.rs?ref=214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "patch": "@@ -0,0 +1,18 @@\n+// FIXME: if/when the output of the test harness can be tested on its own, this test should be\n+// adapted to use that, and that normalize line can go away\n+\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// failure-status: 101\n+\n+/// <https://github.com/rust-lang/rust/issues/91014>\n+///\n+/// ```rust\n+/// struct S {}; // unexpected semicolon after struct def\n+///\n+/// fn main() {\n+///    assert_eq!(0, 1);\n+/// }\n+/// ```\n+mod m {}"}, {"sha": "61468b6c7457b3cdf3922f0fbc6eacdd64286898", "filename": "src/test/rustdoc-ui/failed-doctest-extra-semicolon-on-item.stdout", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/214ad2f5b5ff529548ce13dabcda8d5841df0bd7/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/214ad2f5b5ff529548ce13dabcda8d5841df0bd7/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-extra-semicolon-on-item.stdout?ref=214ad2f5b5ff529548ce13dabcda8d5841df0bd7", "patch": "@@ -0,0 +1,24 @@\n+\n+running 1 test\n+test $DIR/failed-doctest-extra-semicolon-on-item.rs - m (line 11) ... FAILED\n+\n+failures:\n+\n+---- $DIR/failed-doctest-extra-semicolon-on-item.rs - m (line 11) stdout ----\n+error: expected item, found `;`\n+  --> $DIR/failed-doctest-extra-semicolon-on-item.rs:12:12\n+   |\n+LL | struct S {}; // unexpected semicolon after struct def\n+   |            ^ help: remove this semicolon\n+   |\n+   = help: braced struct declarations are not followed by a semicolon\n+\n+error: aborting due to previous error\n+\n+Couldn't compile the test.\n+\n+failures:\n+    $DIR/failed-doctest-extra-semicolon-on-item.rs - m (line 11)\n+\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}]}