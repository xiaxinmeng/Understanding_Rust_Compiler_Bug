{"sha": "af727dfd3f86ab7f907fadccde013bfaa99fc48c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNzI3ZGZkM2Y4NmFiN2Y5MDdmYWRjY2RlMDEzYmZhYTk5ZmM0OGM=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-07-05T12:59:39Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-16T19:19:19Z"}, "message": "revert back to master state", "tree": {"sha": "11dec4e7148096f58e11d415245e024705601ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11dec4e7148096f58e11d415245e024705601ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af727dfd3f86ab7f907fadccde013bfaa99fc48c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af727dfd3f86ab7f907fadccde013bfaa99fc48c", "html_url": "https://github.com/rust-lang/rust/commit/af727dfd3f86ab7f907fadccde013bfaa99fc48c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af727dfd3f86ab7f907fadccde013bfaa99fc48c/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa5a5b5e8df41fc373858e9f4824e2cc51bc1b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa5a5b5e8df41fc373858e9f4824e2cc51bc1b2", "html_url": "https://github.com/rust-lang/rust/commit/7aa5a5b5e8df41fc373858e9f4824e2cc51bc1b2"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "992ea12ffa2b14c44dde94f4fdfc303ac356d791", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/af727dfd3f86ab7f907fadccde013bfaa99fc48c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af727dfd3f86ab7f907fadccde013bfaa99fc48c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=af727dfd3f86ab7f907fadccde013bfaa99fc48c", "patch": "@@ -4488,8 +4488,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         for UseError { mut err, candidates, node_id, better } in self.use_injections.drain(..) {\n             let (span, found_use) = UsePlacementFinder::check(krate, node_id);\n             if !candidates.is_empty() {\n-                let crate_in_paths = self.session.features_untracked().crate_in_paths;\n-                show_candidates(&mut err, span, &candidates, better, found_use, crate_in_paths);\n+                show_candidates(&mut err, span, &candidates, better, found_use);\n             }\n             err.emit();\n         }\n@@ -4703,8 +4702,7 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n                    span: Option<Span>,\n                    candidates: &[ImportSuggestion],\n                    better: bool,\n-                   found_use: bool,\n-                   crate_in_paths: bool) {\n+                   found_use: bool) {\n \n     // we want consistent results across executions, but candidates are produced\n     // by iterating through a hash map, so make sure they are ordered:\n@@ -4728,12 +4726,7 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n             } else {\n                 \"\\n\"\n             };\n-            let crate_prefix = if crate_in_paths {\n-                \"crate::\"\n-            } else {\n-                \"\"\n-            };\n-            *candidate = format!(\"use {}{};\\n{}\", crate_prefix, candidate, additional_newline);\n+            *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n         }\n \n         err.span_suggestions(span, &msg, path_strings);"}]}