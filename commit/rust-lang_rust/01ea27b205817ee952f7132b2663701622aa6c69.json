{"sha": "01ea27b205817ee952f7132b2663701622aa6c69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZWEyN2IyMDU4MTdlZTk1MmY3MTMyYjI2NjM3MDE2MjJhYTZjNjk=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-15T00:41:45Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-15T19:10:15Z"}, "message": "Step 1 of moving task startup to always be cdecl.", "tree": {"sha": "26339935bc03aea21b196bfd170774e937bbc278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26339935bc03aea21b196bfd170774e937bbc278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ea27b205817ee952f7132b2663701622aa6c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ea27b205817ee952f7132b2663701622aa6c69", "html_url": "https://github.com/rust-lang/rust/commit/01ea27b205817ee952f7132b2663701622aa6c69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ea27b205817ee952f7132b2663701622aa6c69/comments", "author": null, "committer": null, "parents": [{"sha": "766d54df9378b6e8d13f577af6c1f8a2995635e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/766d54df9378b6e8d13f577af6c1f8a2995635e1", "html_url": "https://github.com/rust-lang/rust/commit/766d54df9378b6e8d13f577af6c1f8a2995635e1"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "a01650dc1acdecbc0347398704bd624fa70085ad", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01ea27b205817ee952f7132b2663701622aa6c69/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ea27b205817ee952f7132b2663701622aa6c69/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=01ea27b205817ee952f7132b2663701622aa6c69", "patch": "@@ -5842,7 +5842,8 @@ fn mk_spawn_wrapper(&@block_ctxt cx, &@ast::expr func, &ty::t args_ty) ->\n     let str wrap_name =\n         mangle_internal_name_by_path_and_seq(cx.fcx.lcx.ccx, cx.fcx.lcx.path,\n                                              \"spawn_wrapper\");\n-    auto llfndecl = decl_fastcall_fn(llmod, wrap_name, wrapper_fn_type);\n+    auto llfndecl = decl_cdecl_fn(llmod, wrap_name, wrapper_fn_type);\n+\n     auto fcx = new_fn_ctxt(cx.fcx.lcx, cx.sp, llfndecl);\n     auto fbcx = new_top_block_ctxt(fcx);\n     // 3u to skip the three implicit args"}, {"sha": "c25b324f956113da60cb66e9c1a6862816c24a71", "filename": "src/rt/main.ll.in", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01ea27b205817ee952f7132b2663701622aa6c69/src%2Frt%2Fmain.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/01ea27b205817ee952f7132b2663701622aa6c69/src%2Frt%2Fmain.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmain.ll.in?ref=01ea27b205817ee952f7132b2663701622aa6c69", "patch": "@@ -10,13 +10,20 @@\n @_rust_crate_map_toplevel = external global %0\n \n declare fastcc void @_rust_main(i1* nocapture, %task*, %2* nocapture, %5*);\n-declare i32 @rust_start(i32, i32, i32, i32)\n+declare i32 @rust_start(i32, i32, i32, i32, i32)\n \n %tydesc = type { %tydesc**, i32, i32, void (i1*, %task*, i1*, %tydesc**, i8*)*, void (i1*, %task*, i1*, %tydesc**, i8*)*, void (i1*, %task*, i1*, %tydesc**, i8*)*, void (i1*, %task*, i1*, %tydesc**, i8*)*, void (i1*, %task*, i1*, %tydesc**, i8*)*, void (i1*, %task*, i1*, %tydesc**, i8*)*, void (i1*, %task*, i1*, %tydesc**, i8*)*, void (i1*, %task*, i1*, %tydesc**, i8*, i8*, i8)* }\n \n %task = type { i32, i32, i32, i32, i32, i32, i32, i32 }\n \n+define void @_rust_main_wrap(i1* nocapture, %task *, %2* nocapture, %5 *)\n+{\n+  tail call fastcc void @_rust_main(i1* %0, %task *%1, %2* nocapture %2, %5 *%3)\n+  ret void\n+}\n+\n define i32 @\"MAIN\"(i32, i32) {\n-  %3 = tail call i32 @rust_start(i32 ptrtoint (void (i1*, %task*, %2*, %5*)* @_rust_main to i32), i32 %0, i32 %1, i32 ptrtoint (%0* @_rust_crate_map_toplevel to i32))\n+;  %3 = tail call i32 @rust_start(i32 ptrtoint (void (i1*, %task*, %2*, %5*)* @_rust_main_wrap to i32), i32 %0, i32 %1, i32 ptrtoint (%0* @_rust_crate_map_toplevel to i32))\n+  %3 = tail call i32 @rust_start(i32 0, i32 %0, i32 %1, i32 ptrtoint (%0* @_rust_crate_map_toplevel to i32), i32 ptrtoint (void (i1*, %task*, %2*, %5*)* @_rust_main_wrap to i32))\n   ret i32 %3\n }"}, {"sha": "a8ac7c7ef9c68595e9b85f41f256368d1bf81301", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/01ea27b205817ee952f7132b2663701622aa6c69/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01ea27b205817ee952f7132b2663701622aa6c69/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=01ea27b205817ee952f7132b2663701622aa6c69", "patch": "@@ -71,13 +71,24 @@ command_line_args : public dom_owned<command_line_args>\n     }\n };\n \n+// THIS IS AN UGLY HACK TO MAKE rust_start STILL WORK WITH STAGE0 WHILE WE\n+// TRANSITION TO ALL-CDECL TASK STARTUP FUNCTIONS.\n+void FASTCALL\n+(*real_main)(uintptr_t a, uintptr_t b, uintptr_t c, uintptr_t d) = NULL;\n+\n+void CDECL fake_main(uintptr_t a, uintptr_t b, uintptr_t c, uintptr_t d)\n+{\n+    real_main(a, b, c, d);\n+}\n+\n /**\n  * Main entry point into the Rust runtime. Here we create a Rust service,\n  * initialize the kernel, create the root domain and run it.\n  */\n \n extern \"C\" CDECL int\n-rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n+rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map,\n+           uintptr_t main_fn_cdecl) {\n \n     update_log_settings(crate_map, getenv(\"RUST_LOG\"));\n     rust_srv *srv = new rust_srv();\n@@ -93,12 +104,9 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n         DLOG(dom, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n     }\n \n-    /*\n-    uintptr_t main_args[4] = {0, 0, 0, (uintptr_t)args->args};\n-    dom->root_task->start(main_fn,\n-                          (uintptr_t)&main_args, sizeof(main_args));\n-    */\n-    dom->root_task->start(main_fn,\n+    real_main = (typeof(real_main))main_fn;\n+    if(main_fn) { printf(\"using fastcall main\\n\"); }\n+    dom->root_task->start(main_fn ? (uintptr_t)fake_main : main_fn_cdecl,\n                           (uintptr_t)args->args, sizeof(args->args));\n \n     int ret = dom->start_main_loop();"}, {"sha": "bae6f221a954de5028e413c1dec90334786538e7", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01ea27b205817ee952f7132b2663701622aa6c69/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/01ea27b205817ee952f7132b2663701622aa6c69/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=01ea27b205817ee952f7132b2663701622aa6c69", "patch": "@@ -118,7 +118,7 @@ struct spawn_args {\n     rust_task *task;\n     uintptr_t a3;\n     uintptr_t a4;\n-    void (*FASTCALL f)(int *, rust_task *, \n+    void (*CDECL f)(int *, rust_task *, \n                        uintptr_t, uintptr_t);\n };\n "}]}