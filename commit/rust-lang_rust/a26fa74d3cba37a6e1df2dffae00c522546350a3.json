{"sha": "a26fa74d3cba37a6e1df2dffae00c522546350a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNmZhNzRkM2NiYTM3YTZlMWRmMmRmZmFlMDBjNTIyNTQ2MzUwYTM=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-02-08T18:48:10Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2021-02-08T19:00:30Z"}, "message": "Make `header` a vec of modifiers, make FunctionPointer consistent with Function and Method.", "tree": {"sha": "44e3e3f749b8cf84eaf1abdd3809bd10a7be2db6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e3e3f749b8cf84eaf1abdd3809bd10a7be2db6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a26fa74d3cba37a6e1df2dffae00c522546350a3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmAhim0ACgkQfsyTL4ss\ncx4sARAAw0oSlwZfg2Ux8Z7+lHaSF9DBrFOJhXs3pM9h/Fg0meqsh8+OsRIonPRa\nPKA3yfsfPUkovsXJpx7++g1GF4ZzOQQeHwrFdsOcOKi51NGFHj/4fZJNrN+74p1r\nRHgGAkNowWA3hx2wCR56d4S5qZ4hTurPCcorC9nvhr59usdnxDGC2px8OFrBEuKn\nXp1sqfHo9Oml9pV4CFVBhMMgewZShbc9wS66BeTFWGLo/SuSVUI9WTJCATip0CF7\nVDrTuaeYUYRJejzTqxBQ5Qv1HCSnN241fnNwEm+nNXXLqq0q80OPibjvvYcKRDEi\nG7mT+FgzB0W3AG5RczoIBzFnd047kwgbIWTId6ktNiYWAHvbpnFTfX37hB0hZe6Y\nsjwO6TN4qI3kCFVkXpEM/YEw3iS34gd+uuOFkfBxiIULUpCnjK5lwEUP+l3f7Q3U\nnxxl8CaSToHTXOV8qaF8TerKycT0FdWxlfQe5YvrF7safzYktOQOq8ER2q5xpOoH\nEqUlQpTU+YxjkBMebca8acCV4s16sHkWu6xsMFZIofAhpvfGIfRkQ5H2vmR5ieA7\n2CyVK6OHWNoR85kOOwgh/iUngaNSz41n01vzi51UZPea7wZwK0r1P4tlogiQmPkF\nkMa8W7tJvyoSGEblyxDkYfTZeqVj4lCJ3SDliQbD9atTkQkgouU=\n=JMvX\n-----END PGP SIGNATURE-----", "payload": "tree 44e3e3f749b8cf84eaf1abdd3809bd10a7be2db6\nparent 36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923\nauthor Rune Tynan <runetynan@gmail.com> 1612810090 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1612810830 -0500\n\nMake `header` a vec of modifiers, make FunctionPointer consistent with Function and Method.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a26fa74d3cba37a6e1df2dffae00c522546350a3", "html_url": "https://github.com/rust-lang/rust/commit/a26fa74d3cba37a6e1df2dffae00c522546350a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a26fa74d3cba37a6e1df2dffae00c522546350a3/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923", "url": "https://api.github.com/repos/rust-lang/rust/commits/36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923", "html_url": "https://github.com/rust-lang/rust/commit/36ecbc94eb6be90bc38b2d0fdd4bfac3f34d9923"}], "stats": {"total": 101, "additions": 85, "deletions": 16}, "files": [{"sha": "7572b8c6f4a8c761b9d14fede1f5fcaae3986b57", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=a26fa74d3cba37a6e1df2dffae00c522546350a3", "patch": "@@ -108,7 +108,7 @@ def check_type(ty):\n     elif ty[\"kind\"] == \"function_pointer\":\n         for param in ty[\"inner\"][\"generic_params\"]:\n             check_generic_param(param)\n-        check_decl(ty[\"inner\"][\"inner\"])\n+        check_decl(ty[\"inner\"][\"decl\"])\n     elif ty[\"kind\"] == \"qualified_path\":\n         check_type(ty[\"inner\"][\"self_type\"])\n         check_type(ty[\"inner\"][\"trait\"])"}, {"sha": "af44ab9868effb3913ae9872cd0e9c518279bdb3", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=a26fa74d3cba37a6e1df2dffae00c522546350a3", "patch": "@@ -225,15 +225,22 @@ crate fn from_ctor_kind(struct_type: CtorKind) -> StructType {\n     }\n }\n \n-fn stringify_header(header: &rustc_hir::FnHeader) -> String {\n-    let mut s = String::from(header.unsafety.prefix_str());\n-    if header.asyncness == rustc_hir::IsAsync::Async {\n-        s.push_str(\"async \")\n+crate fn from_fn_header(header: &rustc_hir::FnHeader) -> Vec<Modifiers> {\n+    let mut v = Vec::new();\n+\n+    if let rustc_hir::Unsafety::Unsafe = header.unsafety {\n+        v.push(Modifiers::Unsafe);\n+    }\n+\n+    if let rustc_hir::IsAsync::Async = header.asyncness {\n+        v.push(Modifiers::Async);\n     }\n-    if header.constness == rustc_hir::Constness::Const {\n-        s.push_str(\"const \")\n+\n+    if let rustc_hir::Constness::Const = header.constness {\n+        v.push(Modifiers::Const);\n     }\n-    s\n+\n+    v\n }\n \n impl From<clean::Function> for Function {\n@@ -242,7 +249,7 @@ impl From<clean::Function> for Function {\n         Function {\n             decl: decl.into(),\n             generics: generics.into(),\n-            header: stringify_header(&header),\n+            header: from_fn_header(&header),\n             abi: header.abi.to_string(),\n         }\n     }\n@@ -364,7 +371,11 @@ impl From<clean::BareFunctionDecl> for FunctionPointer {\n     fn from(bare_decl: clean::BareFunctionDecl) -> Self {\n         let clean::BareFunctionDecl { unsafety, generic_params, decl, abi } = bare_decl;\n         FunctionPointer {\n-            is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n+            header: if let rustc_hir::Unsafety::Unsafe = unsafety {\n+                vec![Modifiers::Unsafe]\n+            } else {\n+                vec![]\n+            },\n             generic_params: generic_params.into_iter().map(Into::into).collect(),\n             decl: decl.into(),\n             abi: abi.to_string(),\n@@ -439,7 +450,7 @@ crate fn from_function_method(function: clean::Function, has_body: bool) -> Meth\n     Method {\n         decl: decl.into(),\n         generics: generics.into(),\n-        header: stringify_header(&header),\n+        header: from_fn_header(&header),\n         abi: header.abi.to_string(),\n         has_body,\n     }"}, {"sha": "b31276c9dcb7fb49e5f35197f34573eb8e16054c", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=a26fa74d3cba37a6e1df2dffae00c522546350a3", "patch": "@@ -243,7 +243,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 3,\n+            format_version: 4,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "790f9d62d8a9c62f88829e99c8b07b82410769b6", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=a26fa74d3cba37a6e1df2dffae00c522546350a3", "patch": "@@ -281,19 +281,28 @@ pub enum StructType {\n     Unit,\n }\n \n+#[non_exhaustive]\n+#[serde(rename_all = \"snake_case\")]\n+#[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n+pub enum Modifiers {\n+    Const,\n+    Unsafe,\n+    Async,\n+}\n+\n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: String,\n+    pub header: Vec<Modifiers>,\n     pub abi: String,\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct Method {\n     pub decl: FnDecl,\n     pub generics: Generics,\n-    pub header: String,\n+    pub header: Vec<Modifiers>,\n     pub abi: String,\n     pub has_body: bool,\n }\n@@ -404,9 +413,9 @@ pub enum Type {\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n pub struct FunctionPointer {\n-    pub is_unsafe: bool,\n-    pub generic_params: Vec<GenericParamDef>,\n     pub decl: FnDecl,\n+    pub generic_params: Vec<GenericParamDef>,\n+    pub header: Vec<Modifiers>,\n     pub abi: String,\n }\n "}, {"sha": "a5038e0cd2aa86e6dfe72294514d0bd75ea974ff", "filename": "src/test/rustdoc-json/fn_pointer/header.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffn_pointer%2Fheader.rs?ref=a26fa74d3cba37a6e1df2dffae00c522546350a3", "patch": "@@ -0,0 +1,5 @@\n+// @has header.json \"$.index[*][?(@.name=='FnPointer')].inner.type.inner.header\" \"[]\"\n+pub type FnPointer = fn();\n+\n+// @has - \"$.index[*][?(@.name=='UnsafePointer')].inner.type.inner.header\" '[\"unsafe\"]'\n+pub type UnsafePointer = unsafe fn();"}, {"sha": "fb4f89db26733c7792ef42b16f3e14488ad85afd", "filename": "src/test/rustdoc-json/fns/header.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Fheader.rs?ref=a26fa74d3cba37a6e1df2dffae00c522546350a3", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+// @has header.json \"$.index[*][?(@.name=='nothing_fn')].inner.header\" \"[]\"\n+pub fn nothing_fn() {}\n+\n+// @has - \"$.index[*][?(@.name=='const_fn')].inner.header\" '[\"const\"]'\n+pub const fn const_fn() {}\n+\n+// @has - \"$.index[*][?(@.name=='async_fn')].inner.header\" '[\"async\"]'\n+pub async fn async_fn() {}\n+\n+// @count - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" 2\n+// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"async\"'\n+// @has - \"$.index[*][?(@.name=='async_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n+pub async unsafe fn async_unsafe_fn() {}\n+\n+// @count - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" 2\n+// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"const\"'\n+// @has - \"$.index[*][?(@.name=='const_unsafe_fn')].inner.header[*]\" '\"unsafe\"'\n+pub const unsafe fn const_unsafe_fn() {}"}, {"sha": "27a6ec047300d2c247073e32efac139eca57ff2c", "filename": "src/test/rustdoc-json/methods/header.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a26fa74d3cba37a6e1df2dffae00c522546350a3/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fmethods%2Fheader.rs?ref=a26fa74d3cba37a6e1df2dffae00c522546350a3", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    // @has header.json \"$.index[*][?(@.name=='nothing_meth')].inner.header\" \"[]\"\n+    pub fn nothing_meth() {}\n+\n+    // @has - \"$.index[*][?(@.name=='const_meth')].inner.header\" '[\"const\"]'\n+    pub const fn const_meth() {}\n+\n+    // @has - \"$.index[*][?(@.name=='async_meth')].inner.header\" '[\"async\"]'\n+    pub async fn async_meth() {}\n+\n+    // @count - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" 2\n+    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"async\"'\n+    // @has - \"$.index[*][?(@.name=='async_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n+    pub async unsafe fn async_unsafe_meth() {}\n+\n+    // @count - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" 2\n+    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"const\"'\n+    // @has - \"$.index[*][?(@.name=='const_unsafe_meth')].inner.header[*]\" '\"unsafe\"'\n+    pub const unsafe fn const_unsafe_meth() {}\n+}"}]}