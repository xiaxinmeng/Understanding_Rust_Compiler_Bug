{"sha": "d4db1beabf5b8837aa50b9f3991df47ac2cc575c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGIxYmVhYmY1Yjg4MzdhYTUwYjlmMzk5MWRmNDdhYzJjYzU3NWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T05:26:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T05:26:30Z"}, "message": "std: Separate weakening the I/O task from spawning it", "tree": {"sha": "ab504d24edbdb8f00cf13b0aa2dab46179ea1503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab504d24edbdb8f00cf13b0aa2dab46179ea1503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4db1beabf5b8837aa50b9f3991df47ac2cc575c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4db1beabf5b8837aa50b9f3991df47ac2cc575c", "html_url": "https://github.com/rust-lang/rust/commit/d4db1beabf5b8837aa50b9f3991df47ac2cc575c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4db1beabf5b8837aa50b9f3991df47ac2cc575c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95898b4cfcbc5b47730aa722f3818f8b9028cb63", "url": "https://api.github.com/repos/rust-lang/rust/commits/95898b4cfcbc5b47730aa722f3818f8b9028cb63", "html_url": "https://github.com/rust-lang/rust/commit/95898b4cfcbc5b47730aa722f3818f8b9028cb63"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "bdd84536c6a3bd01b18fef5c9ec8dc44184a48ef", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d4db1beabf5b8837aa50b9f3991df47ac2cc575c/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4db1beabf5b8837aa50b9f3991df47ac2cc575c/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=d4db1beabf5b8837aa50b9f3991df47ac2cc575c", "patch": "@@ -7,7 +7,7 @@ export get, get_monitor_task_gl;\n import ll = uv_ll;\n import hl = uv_hl;\n import get_gl = get;\n-import task::{spawn_sched, single_threaded};\n+import task::{run, single_threaded};\n import priv::{chan_from_global_ptr, weaken_task};\n import comm::{port, chan, methods, select2, listen};\n import either::{left, right};\n@@ -63,7 +63,7 @@ fn get_monitor_task_gl() -> hl::high_level_loop unsafe {\n         // As a weak task the runtime will notify us when to exit\n         weaken_task() {|weak_exit_po|\n             #debug(\"global monitor task is now weak\");\n-            let hl_loop = spawn_high_level_loop();\n+            let hl_loop = spawn_loop();\n             loop {\n                 #debug(\"in outer_loop...\");\n                 alt select2(weak_exit_po, msg_po) {\n@@ -93,18 +93,45 @@ fn get_monitor_task_gl() -> hl::high_level_loop unsafe {\n     }\n }\n \n-fn spawn_high_level_loop() -> hl::high_level_loop unsafe {\n+fn spawn_loop() -> hl::high_level_loop unsafe {\n+    let builder = task::builder();\n+    task::add_wrapper(builder) {|task_body|\n+        fn~(move task_body) {\n+            // The I/O loop task also needs to be weak so it doesn't keep\n+            // the runtime alive\n+            weaken_task {|weak_exit_po|\n+                #debug(\"global libuv task is now weak %?\", weak_exit_po);\n+                task_body();\n+\n+                // We don't wait for the exit message on weak_exit_po\n+                // because the monitor task will tell the uv loop when to\n+                // exit\n+\n+                #debug(\"global libuv task is leaving weakened state\");\n+            }\n+        }\n+    }\n+    spawn_high_level_loop(builder)\n+}\n+\n+fn spawn_high_level_loop(-builder: task::builder\n+                        ) -> hl::high_level_loop unsafe {\n+\n     let hll_po = port::<hl::high_level_loop>();\n     let hll_ch = hll_po.chan();\n \n-    spawn_sched(single_threaded) {||\n-        #debug(\"entering global libuv task\");\n-        weaken_task() {|weak_exit_po|\n-            #debug(\"global libuv task is now weak %?\", weak_exit_po);\n-            hl::run_high_level_loop(hll_ch);\n-            #debug(\"global libuv task is leaving weakened state\");\n-        };\n-        #debug(\"global libuv task exiting\");\n+    task::set_opts(builder, {\n+        sched: some({\n+            mode: single_threaded,\n+            native_stack_size: none\n+        })\n+        with task::get_opts(builder)\n+    });\n+\n+    run(builder) {||\n+        #debug(\"entering libuv task\");\n+        hl::run_high_level_loop(hll_ch);\n+        #debug(\"libuv task exiting\");\n     };\n \n     hll_po.recv()"}]}