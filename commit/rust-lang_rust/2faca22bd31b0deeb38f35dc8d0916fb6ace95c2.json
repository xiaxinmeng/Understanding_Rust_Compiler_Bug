{"sha": "2faca22bd31b0deeb38f35dc8d0916fb6ace95c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYWNhMjJiZDMxYjBkZWViMzhmMzVkYzhkMDkxNmZiNmFjZTk1YzI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-31T20:29:04Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-09-01T13:43:44Z"}, "message": "ICH: Fix codemap lookup caching.", "tree": {"sha": "d4a18b219bb3e00ca192062c34af66427d7c6317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4a18b219bb3e00ca192062c34af66427d7c6317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2", "html_url": "https://github.com/rust-lang/rust/commit/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a142d2ff025466a69662854255c959f60a31fd8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a142d2ff025466a69662854255c959f60a31fd8c", "html_url": "https://github.com/rust-lang/rust/commit/a142d2ff025466a69662854255c959f60a31fd8c"}], "stats": {"total": 94, "additions": 52, "deletions": 42}, "files": [{"sha": "e871dd5bcbffe7814133afcd68fe77742be048e6", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 52, "deletions": 42, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2faca22bd31b0deeb38f35dc8d0916fb6ace95c2/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=2faca22bd31b0deeb38f35dc8d0916fb6ace95c2", "patch": "@@ -43,72 +43,82 @@ pub struct StrictVersionHashVisitor<'a, 'hash: 'a, 'tcx: 'hash> {\n     codemap: CachingCodemapView<'tcx>,\n }\n \n+#[derive(Clone)]\n+struct CacheEntry {\n+    time_stamp: usize,\n+    line_number: usize,\n+    line_start: BytePos,\n+    line_end: BytePos,\n+    file: Rc<FileMap>,\n+}\n+\n struct CachingCodemapView<'tcx> {\n     codemap: &'tcx CodeMap,\n-    // Format: (line number, line-start, line-end, file)\n-    line_cache: [(usize, BytePos, BytePos, Rc<FileMap>); 4],\n-    eviction_index: usize,\n+    line_cache: [CacheEntry; 3],\n+    time_stamp: usize,\n }\n \n impl<'tcx> CachingCodemapView<'tcx> {\n     fn new<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CachingCodemapView<'tcx> {\n         let codemap = tcx.sess.codemap();\n         let first_file = codemap.files.borrow()[0].clone();\n+        let entry = CacheEntry {\n+            time_stamp: 0,\n+            line_number: 0,\n+            line_start: BytePos(0),\n+            line_end: BytePos(0),\n+            file: first_file,\n+        };\n \n         CachingCodemapView {\n             codemap: codemap,\n-            line_cache: [(0, BytePos(0), BytePos(0), first_file.clone()),\n-                         (0, BytePos(0), BytePos(0), first_file.clone()),\n-                         (0, BytePos(0), BytePos(0), first_file.clone()),\n-                         (0, BytePos(0), BytePos(0), first_file.clone())],\n-            eviction_index: 0,\n+            line_cache: [entry.clone(), entry.clone(), entry.clone()],\n+            time_stamp: 0,\n         }\n     }\n \n     fn byte_pos_to_line_and_col(&mut self,\n                                 pos: BytePos)\n                                 -> (Rc<FileMap>, usize, BytePos) {\n+        self.time_stamp += 1;\n+\n         // Check if the position is in one of the cached lines\n-        for &(line, start, end, ref file) in self.line_cache.iter() {\n-            if pos >= start && pos < end {\n-                return (file.clone(), line, pos - start);\n+        for cache_entry in self.line_cache.iter_mut() {\n+            if pos >= cache_entry.line_start && pos < cache_entry.line_end {\n+                cache_entry.time_stamp = self.time_stamp;\n+                return (cache_entry.file.clone(),\n+                        cache_entry.line_number,\n+                        pos - cache_entry.line_start);\n             }\n         }\n \n-        // Check whether we have a cached line in the correct file, so we can\n-        // overwrite it without having to look up the file again.\n-        for &mut (ref mut line,\n-                  ref mut start,\n-                  ref mut end,\n-                  ref file) in self.line_cache.iter_mut() {\n-            if pos >= file.start_pos && pos < file.end_pos {\n-                let line_index = file.lookup_line(pos).unwrap();\n-                let (line_start, line_end) = file.line_bounds(line_index);\n-\n-                // Update the cache entry in place\n-                *line = line_index + 1;\n-                *start = line_start;\n-                *end = line_end;\n-\n-                return (file.clone(), line_index + 1, pos - line_start);\n+        // No cache hit ...\n+        let mut oldest = 0;\n+        for index in 1 .. self.line_cache.len() {\n+            if self.line_cache[index].time_stamp < self.line_cache[oldest].time_stamp {\n+                oldest = index;\n             }\n         }\n \n-        // No cache hit ...\n-        let file_index = self.codemap.lookup_filemap_idx(pos);\n-        let file = self.codemap.files.borrow()[file_index].clone();\n-        let line_index = file.lookup_line(pos).unwrap();\n-        let (line_start, line_end) = file.line_bounds(line_index);\n-\n-        // Just overwrite some cache entry. If we got this far, all of them\n-        // point to the wrong file.\n-        self.line_cache[self.eviction_index] = (line_index + 1,\n-                                                line_start,\n-                                                line_end,\n-                                                file.clone());\n-        self.eviction_index = (self.eviction_index + 1) % self.line_cache.len();\n-\n-        return (file, line_index + 1, pos - line_start);\n+        let cache_entry = &mut self.line_cache[oldest];\n+\n+        // If the entry doesn't point to the correct file, fix it up\n+        if pos < cache_entry.file.start_pos || pos >= cache_entry.file.end_pos {\n+            let file_index = self.codemap.lookup_filemap_idx(pos);\n+            cache_entry.file = self.codemap.files.borrow()[file_index].clone();\n+        }\n+\n+        let line_index = cache_entry.file.lookup_line(pos).unwrap();\n+        let line_bounds = cache_entry.file.line_bounds(line_index);\n+\n+        cache_entry.line_number = line_index + 1;\n+        cache_entry.line_start = line_bounds.0;\n+        cache_entry.line_end = line_bounds.1;\n+        cache_entry.time_stamp = self.time_stamp;\n+\n+        return (cache_entry.file.clone(),\n+                cache_entry.line_number,\n+                pos - cache_entry.line_start);\n     }\n }\n "}]}