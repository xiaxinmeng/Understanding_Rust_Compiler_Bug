{"sha": "50fd860471f577e9bb7536e74eb181c055033183", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZmQ4NjA0NzFmNTc3ZTliYjc1MzZlNzRlYjE4MWMwNTUwMzMxODM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T10:08:24Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-09T10:15:25Z"}, "message": "Remove Vfs from project model", "tree": {"sha": "119dad471cff28b82d3d1f82bfdddcac638c684b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119dad471cff28b82d3d1f82bfdddcac638c684b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50fd860471f577e9bb7536e74eb181c055033183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50fd860471f577e9bb7536e74eb181c055033183", "html_url": "https://github.com/rust-lang/rust/commit/50fd860471f577e9bb7536e74eb181c055033183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50fd860471f577e9bb7536e74eb181c055033183/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c70871cca736afa44379e59f8573c60b0ccd0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c70871cca736afa44379e59f8573c60b0ccd0a", "html_url": "https://github.com/rust-lang/rust/commit/12c70871cca736afa44379e59f8573c60b0ccd0a"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "2c554ec10d08d884bde5b9479edfdd4a8e22845d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50fd860471f577e9bb7536e74eb181c055033183/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/50fd860471f577e9bb7536e74eb181c055033183/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=50fd860471f577e9bb7536e74eb181c055033183", "patch": "@@ -1055,7 +1055,6 @@ dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n- \"ra_vfs 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "f97d240fabb0ed35e5f9669cf73cad431f7dfe7b", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50fd860471f577e9bb7536e74eb181c055033183/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fd860471f577e9bb7536e74eb181c055033183/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=50fd860471f577e9bb7536e74eb181c055033183", "patch": "@@ -58,8 +58,12 @@ impl ServerWorldState {\n \n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();\n+        let mut load = |path: &std::path::Path| {\n+            let vfs_file = vfs.load(path);\n+            vfs_file.map(|f| FileId(f.0.into()))\n+        };\n         for ws in workspaces.iter() {\n-            crate_graph.extend(ws.to_crate_graph(&mut vfs));\n+            crate_graph.extend(ws.to_crate_graph(&mut load));\n         }\n         change.set_crate_graph(crate_graph);\n "}, {"sha": "9cdf2b3228a7213c986f4f17e93c65f8ed8f8680", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50fd860471f577e9bb7536e74eb181c055033183/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50fd860471f577e9bb7536e74eb181c055033183/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=50fd860471f577e9bb7536e74eb181c055033183", "patch": "@@ -18,7 +18,6 @@ cargo_metadata = \"0.7.0\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n-ra_vfs = { path = \"../ra_vfs\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "156af9e7a29fba76a393c4572855ae833662dd91", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50fd860471f577e9bb7536e74eb181c055033183/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50fd860471f577e9bb7536e74eb181c055033183/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=50fd860471f577e9bb7536e74eb181c055033183", "patch": "@@ -7,7 +7,6 @@ use failure::bail;\n use rustc_hash::FxHashMap;\n \n use ra_db::{CrateGraph, FileId};\n-use ra_vfs::Vfs;\n \n pub use crate::{\n     cargo_workspace::{CargoWorkspace, Package, Target, TargetKind},\n@@ -32,12 +31,11 @@ impl ProjectWorkspace {\n         Ok(res)\n     }\n \n-    pub fn to_crate_graph(&self, vfs: &mut Vfs) -> CrateGraph {\n+    pub fn to_crate_graph(&self, load: &mut dyn FnMut(&Path) -> Option<FileId>) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n         let mut sysroot_crates = FxHashMap::default();\n         for krate in self.sysroot.crates() {\n-            if let Some(file_id) = vfs.load(krate.root(&self.sysroot)) {\n-                let file_id = FileId(file_id.0.into());\n+            if let Some(file_id) = load(krate.root(&self.sysroot)) {\n                 sysroot_crates.insert(krate, crate_graph.add_crate_root(file_id));\n             }\n         }\n@@ -63,8 +61,7 @@ impl ProjectWorkspace {\n             let mut lib_tgt = None;\n             for tgt in pkg.targets(&self.cargo) {\n                 let root = tgt.root(&self.cargo);\n-                if let Some(file_id) = vfs.load(root) {\n-                    let file_id = FileId(file_id.0.into());\n+                if let Some(file_id) = load(root) {\n                     let crate_id = crate_graph.add_crate_root(file_id);\n                     if tgt.kind(&self.cargo) == TargetKind::Lib {\n                         lib_tgt = Some(crate_id);"}]}