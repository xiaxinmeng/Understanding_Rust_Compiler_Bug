{"sha": "a7726ce08680c8c0789286f799be13c5b0ad9a01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NzI2Y2UwODY4MGM4YzA3ODkyODZmNzk5YmUxM2M1YjBhZDlhMDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-15T00:28:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-18T10:42:45Z"}, "message": "resolve: Attempt to resolve unresolved paths in macro namespace", "tree": {"sha": "75c3dfaf07ed74bcc7ea9a0afc787f184dce6742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c3dfaf07ed74bcc7ea9a0afc787f184dce6742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7726ce08680c8c0789286f799be13c5b0ad9a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7726ce08680c8c0789286f799be13c5b0ad9a01", "html_url": "https://github.com/rust-lang/rust/commit/a7726ce08680c8c0789286f799be13c5b0ad9a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7726ce08680c8c0789286f799be13c5b0ad9a01/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3845a08a555fcc5f97e9f6b77e0727e756f31a01", "url": "https://api.github.com/repos/rust-lang/rust/commits/3845a08a555fcc5f97e9f6b77e0727e756f31a01", "html_url": "https://github.com/rust-lang/rust/commit/3845a08a555fcc5f97e9f6b77e0727e756f31a01"}], "stats": {"total": 122, "additions": 62, "deletions": 60}, "files": [{"sha": "9024d2ae36fe84908c816b7a44a130afa5e9d996", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -414,7 +414,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         match (res, source) {\n-            (Res::Def(DefKind::Macro(..), _), _) => {\n+            (Res::Def(DefKind::Macro(MacroKind::Bang), _), _) => {\n                 err.span_suggestion(\n                     span,\n                     \"use `!` to invoke the macro\",\n@@ -574,7 +574,7 @@ impl<'a> Resolver<'a> {\n                         for derive in &parent_scope.derives {\n                             let parent_scope = ParentScope { derives: Vec::new(), ..*parent_scope };\n                             if let Ok((Some(ext), _)) = this.resolve_macro_path(\n-                                derive, MacroKind::Derive, &parent_scope, true, true\n+                                derive, MacroKind::Derive, &parent_scope, false, false\n                             ) {\n                                 suggestions.extend(ext.helper_attrs.iter().map(|name| {\n                                     TypoSuggestion::from_res(*name, res)"}, {"sha": "4679c80ee1cd728fe836b4b166ec17a64fd10b16", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -3664,9 +3664,7 @@ impl<'a> Resolver<'a> {\n         crate_lint: CrateLint,\n     ) -> Option<PartialRes> {\n         let mut fin_res = None;\n-        // FIXME: can't resolve paths in macro namespace yet, macros are\n-        // processed by the little special hack below.\n-        for (i, ns) in [primary_ns, TypeNS, ValueNS, /*MacroNS*/].iter().cloned().enumerate() {\n+        for (i, ns) in [primary_ns, TypeNS, ValueNS].iter().cloned().enumerate() {\n             if i == 0 || ns != primary_ns {\n                 match self.resolve_qpath(id, qself, path, ns, span, global_by_default, crate_lint) {\n                     // If defer_to_typeck, then resolution > no resolution,\n@@ -3675,21 +3673,25 @@ impl<'a> Resolver<'a> {\n                                          defer_to_typeck =>\n                         return Some(partial_res),\n                     partial_res => if fin_res.is_none() { fin_res = partial_res },\n-                };\n+                }\n             }\n         }\n-        if primary_ns != MacroNS &&\n-           (self.macro_names.contains(&path[0].ident.modern()) ||\n-            self.builtin_macros.get(&path[0].ident.name).cloned()\n-                               .and_then(NameBinding::macro_kind) == Some(MacroKind::Bang) ||\n-            self.macro_use_prelude.get(&path[0].ident.name).cloned()\n-                                  .and_then(NameBinding::macro_kind) == Some(MacroKind::Bang)) {\n-            // Return some dummy definition, it's enough for error reporting.\n-            return Some(PartialRes::new(Res::Def(\n-                DefKind::Macro(MacroKind::Bang),\n-                DefId::local(CRATE_DEF_INDEX),\n-            )));\n+\n+        // `MacroNS`\n+        assert!(primary_ns != MacroNS);\n+        if qself.is_none() {\n+            let path_seg = |seg: &Segment| ast::PathSegment::from_ident(seg.ident);\n+            let path = Path { segments: path.iter().map(path_seg).collect(), span };\n+            let parent_scope =\n+                ParentScope { module: self.current_module, ..self.dummy_parent_scope() };\n+            for macro_kind in &[MacroKind::Bang, MacroKind::Attr, MacroKind::Derive] {\n+                if let Ok((_, res)) = self.resolve_macro_path(&path, *macro_kind,\n+                                                              &parent_scope, false, false) {\n+                    return Some(PartialRes::new(res));\n+                }\n+            }\n         }\n+\n         fin_res\n     }\n "}, {"sha": "5f36993af2f305106d09099a296d4536cc6e4f94", "filename": "src/test/ui/hygiene/rustc-macro-transparency.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.rs?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -26,6 +26,6 @@ fn main() {\n     Opaque; //~ ERROR cannot find value `Opaque` in this scope\n \n     transparent; // OK\n-    semitransparent; //~ ERROR cannot find value `semitransparent` in this scope\n-    opaque; //~ ERROR cannot find value `opaque` in this scope\n+    semitransparent; //~ ERROR expected value, found macro `semitransparent`\n+    opaque; //~ ERROR expected value, found macro `opaque`\n }"}, {"sha": "5eacfdf8dee139b380227cfcf3d9004154c0bf4b", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -4,18 +4,19 @@ error[E0425]: cannot find value `Opaque` in this scope\n LL |     Opaque;\n    |     ^^^^^^ help: a local variable with a similar name exists: `opaque`\n \n-error[E0425]: cannot find value `semitransparent` in this scope\n+error[E0423]: expected value, found macro `semitransparent`\n   --> $DIR/rustc-macro-transparency.rs:29:5\n    |\n LL |     semitransparent;\n-   |     ^^^^^^^^^^^^^^^ not found in this scope\n+   |     ^^^^^^^^^^^^^^^ help: use `!` to invoke the macro: `semitransparent!`\n \n-error[E0425]: cannot find value `opaque` in this scope\n+error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n LL |     opaque;\n-   |     ^^^^^^ not found in this scope\n+   |     ^^^^^^ help: use `!` to invoke the macro: `opaque!`\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0425`.\n+Some errors have detailed explanations: E0423, E0425.\n+For more information about an error, try `rustc --explain E0423`."}, {"sha": "2182506c7b71991c27192af037913757199ab55f", "filename": "src/test/ui/impl-trait/universal_wrong_bounds.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.rs?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -6,9 +6,8 @@ fn foo(f: impl Display + Clone) -> String {\n     wants_clone(f);\n }\n \n-fn wants_debug(g: impl Debug) { } //~ ERROR cannot find\n-fn wants_display(g: impl Debug) { } //~ ERROR cannot find\n+fn wants_debug(g: impl Debug) { } //~ ERROR expected trait, found derive macro `Debug`\n+fn wants_display(g: impl Debug) { } //~ ERROR expected trait, found derive macro `Debug`\n fn wants_clone(g: impl Clone) { }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "f530792955bc2e282ba7f05cb0f68c48089cae2e", "filename": "src/test/ui/impl-trait/universal_wrong_bounds.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -1,23 +1,23 @@\n-error[E0405]: cannot find trait `Debug` in this scope\n+error[E0404]: expected trait, found derive macro `Debug`\n   --> $DIR/universal_wrong_bounds.rs:9:24\n    |\n LL | fn wants_debug(g: impl Debug) { }\n-   |                        ^^^^^ not found in this scope\n-help: possible candidate is found in another module, you can import it into scope\n+   |                        ^^^^^ not a trait\n+help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use std::fmt::Debug;\n    |\n \n-error[E0405]: cannot find trait `Debug` in this scope\n+error[E0404]: expected trait, found derive macro `Debug`\n   --> $DIR/universal_wrong_bounds.rs:10:26\n    |\n LL | fn wants_display(g: impl Debug) { }\n-   |                          ^^^^^ not found in this scope\n-help: possible candidate is found in another module, you can import it into scope\n+   |                          ^^^^^ not a trait\n+help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use std::fmt::Debug;\n    |\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0405`.\n+For more information about this error, try `rustc --explain E0404`."}, {"sha": "1e67e9a815830b0c14ea7d97b3a74d5e775f9e2a", "filename": "src/test/ui/issues/issue-37534.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fissues%2Fissue-37534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fissues%2Fissue-37534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.rs?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -1,5 +1,5 @@\n struct Foo<T: ?Hash> { }\n-//~^ ERROR cannot find trait `Hash` in this scope\n+//~^ ERROR expected trait, found derive macro `Hash`\n //~^^ ERROR parameter `T` is never used\n //~^^^ WARN default bound relaxed for a type parameter, but this does nothing\n "}, {"sha": "3a0ab32dcc66be9064271551c331c7ef3f31360c", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -1,9 +1,9 @@\n-error[E0405]: cannot find trait `Hash` in this scope\n+error[E0404]: expected trait, found derive macro `Hash`\n   --> $DIR/issue-37534.rs:1:16\n    |\n LL | struct Foo<T: ?Hash> { }\n-   |                ^^^^ not found in this scope\n-help: possible candidate is found in another module, you can import it into scope\n+   |                ^^^^ not a trait\n+help: possible better candidate is found in another module, you can import it into scope\n    |\n LL | use std::hash::Hash;\n    |\n@@ -24,5 +24,5 @@ LL | struct Foo<T: ?Hash> { }\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0392, E0405.\n+Some errors have detailed explanations: E0392, E0404.\n For more information about an error, try `rustc --explain E0392`."}, {"sha": "c314967da4fb7c2dee7e71b348aa416844f05a32", "filename": "src/test/ui/no-implicit-prelude-nested.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.rs?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -9,7 +9,7 @@ mod foo {\n     mod baz {\n         struct Test;\n         impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n-        impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+        impl Clone for Test {} //~ ERROR expected trait, found derive macro `Clone`\n         impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n         impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n         impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope\n@@ -21,7 +21,7 @@ mod foo {\n \n     struct Test;\n     impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n-    impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+    impl Clone for Test {} //~ ERROR expected trait, found derive macro `Clone`\n     impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n     impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n     impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope\n@@ -36,7 +36,7 @@ fn qux() {\n     mod qux_inner {\n         struct Test;\n         impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n-        impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+        impl Clone for Test {} //~ ERROR expected trait, found derive macro `Clone`\n         impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n         impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n         impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope"}, {"sha": "8d695e45da457037d94b364f461c127cff749074", "filename": "src/test/ui/no-implicit-prelude-nested.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude-nested.stderr?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -8,12 +8,12 @@ help: possible candidate is found in another module, you can import it into scop\n LL |         use std::ops::Add;\n    |\n \n-error[E0405]: cannot find trait `Clone` in this scope\n+error[E0404]: expected trait, found derive macro `Clone`\n   --> $DIR/no-implicit-prelude-nested.rs:12:14\n    |\n LL |         impl Clone for Test {}\n-   |              ^^^^^ not found in this scope\n-help: possible candidates are found in other modules, you can import them into scope\n+   |              ^^^^^ not a trait\n+help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::clone::Clone;\n    |\n@@ -72,12 +72,12 @@ help: possible candidate is found in another module, you can import it into scop\n LL |     use std::ops::Add;\n    |\n \n-error[E0405]: cannot find trait `Clone` in this scope\n+error[E0404]: expected trait, found derive macro `Clone`\n   --> $DIR/no-implicit-prelude-nested.rs:24:10\n    |\n LL |     impl Clone for Test {}\n-   |          ^^^^^ not found in this scope\n-help: possible candidates are found in other modules, you can import them into scope\n+   |          ^^^^^ not a trait\n+help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL |     use std::clone::Clone;\n    |\n@@ -136,12 +136,12 @@ help: possible candidate is found in another module, you can import it into scop\n LL |         use std::ops::Add;\n    |\n \n-error[E0405]: cannot find trait `Clone` in this scope\n+error[E0404]: expected trait, found derive macro `Clone`\n   --> $DIR/no-implicit-prelude-nested.rs:39:14\n    |\n LL |         impl Clone for Test {}\n-   |              ^^^^^ not found in this scope\n-help: possible candidates are found in other modules, you can import them into scope\n+   |              ^^^^^ not a trait\n+help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL |         use std::clone::Clone;\n    |\n@@ -192,5 +192,5 @@ LL |         use std::prelude::v1::drop;\n \n error: aborting due to 18 previous errors\n \n-Some errors have detailed explanations: E0405, E0425.\n-For more information about an error, try `rustc --explain E0405`.\n+Some errors have detailed explanations: E0404, E0405, E0425.\n+For more information about an error, try `rustc --explain E0404`."}, {"sha": "4b0ca4d524e620d09af55140b5d79e3d27ac7764", "filename": "src/test/ui/no-implicit-prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude.rs?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -8,7 +8,7 @@\n \n struct Test;\n impl Add for Test {} //~ ERROR cannot find trait `Add` in this scope\n-impl Clone for Test {} //~ ERROR cannot find trait `Clone` in this scope\n+impl Clone for Test {} //~ ERROR expected trait, found derive macro `Clone`\n impl Iterator for Test {} //~ ERROR cannot find trait `Iterator` in this scope\n impl ToString for Test {} //~ ERROR cannot find trait `ToString` in this scope\n impl Writer for Test {} //~ ERROR cannot find trait `Writer` in this scope"}, {"sha": "6ae889df602d76459ff33d5a6b9c7e1abca084ac", "filename": "src/test/ui/no-implicit-prelude.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7726ce08680c8c0789286f799be13c5b0ad9a01/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-implicit-prelude.stderr?ref=a7726ce08680c8c0789286f799be13c5b0ad9a01", "patch": "@@ -8,12 +8,12 @@ help: possible candidate is found in another module, you can import it into scop\n LL | use std::ops::Add;\n    |\n \n-error[E0405]: cannot find trait `Clone` in this scope\n+error[E0404]: expected trait, found derive macro `Clone`\n   --> $DIR/no-implicit-prelude.rs:11:6\n    |\n LL | impl Clone for Test {}\n-   |      ^^^^^ not found in this scope\n-help: possible candidates are found in other modules, you can import them into scope\n+   |      ^^^^^ not a trait\n+help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use std::clone::Clone;\n    |\n@@ -64,5 +64,5 @@ LL | use std::prelude::v1::drop;\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0405, E0425.\n-For more information about an error, try `rustc --explain E0405`.\n+Some errors have detailed explanations: E0404, E0405, E0425.\n+For more information about an error, try `rustc --explain E0404`."}]}