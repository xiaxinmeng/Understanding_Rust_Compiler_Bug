{"sha": "e9f29a851917a706c01b6f51331894df1d15770b", "node_id": "C_kwDOAAsO6NoAKGU5ZjI5YTg1MTkxN2E3MDZjMDFiNmY1MTMzMTg5NGRmMWQxNTc3MGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T11:01:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-25T11:01:13Z"}, "message": "Auto merge of #89030 - nbdd0121:box2, r=jonas-schievink\n\nIntroduce `Rvalue::ShallowInitBox`\n\nPolished version of #88700.\n\nImplements MCP rust-lang/compiler-team#460, and should allow #43596 to go forward.\n\nIn short, creating an empty box is split from a nullary-op `NullOp::Box` into two steps, first a call to `exchange_malloc`, then a `Rvalue::ShallowInitBox` which transmutes `*mut u8` to a shallow-initialized `Box<T>`. This allows the `exchange_malloc` call to unwind. Details can be found in the MCP.\n\n`NullOp::Box` is not yet removed, purely to make reverting easier in case anything goes wrong as the result of this PR. If revert is needed a reversion of \"Use Rvalue::ShallowInitBox for box expression\" commit followed by a test bless should be sufficient.\n\nExperiments in #88700 showed a very slight compile-time perf regression due to (supposedly) slightly more time spent in LLVM. We could omit unwind edge generation (in non-`oom=panic` case) in box expression MIR construction to restore perf; but I don't think it's necessary since runtime perf isn't affected and perf difference is rather small.", "tree": {"sha": "ad20f5095b566e7ac8f95f4befb6e6a019eec304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad20f5095b566e7ac8f95f4befb6e6a019eec304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9f29a851917a706c01b6f51331894df1d15770b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f29a851917a706c01b6f51331894df1d15770b", "html_url": "https://github.com/rust-lang/rust/commit/e9f29a851917a706c01b6f51331894df1d15770b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9f29a851917a706c01b6f51331894df1d15770b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "218a96cae06ed1a47549a81c09c3655fbcae1363", "url": "https://api.github.com/repos/rust-lang/rust/commits/218a96cae06ed1a47549a81c09c3655fbcae1363", "html_url": "https://github.com/rust-lang/rust/commit/218a96cae06ed1a47549a81c09c3655fbcae1363"}, {"sha": "ab64580977ca6dabc07f5944898435708bfbb0c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab64580977ca6dabc07f5944898435708bfbb0c8", "html_url": "https://github.com/rust-lang/rust/commit/ab64580977ca6dabc07f5944898435708bfbb0c8"}], "stats": {"total": 695, "additions": 468, "deletions": 227}, "files": [{"sha": "efd34f4e0a58e38b6098f47333c0a22165ce2599", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -316,7 +316,8 @@ impl<'cx, 'tcx> InvalidationGenerator<'cx, 'tcx> {\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::UnaryOp(_ /*un_op*/, ref operand)\n-            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/) => {\n+            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/)\n+            | Rvalue::ShallowInitBox(ref operand, _ /*ty*/) => {\n                 self.consume_operand(location, operand)\n             }\n "}, {"sha": "72f4907a09f9849e4cf86f3ab54afd8b901629f7", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -1361,7 +1361,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::UnaryOp(_ /*un_op*/, ref operand)\n-            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/) => {\n+            | Rvalue::Cast(_ /*cast_kind*/, ref operand, _ /*ty*/)\n+            | Rvalue::ShallowInitBox(ref operand, _ /*ty*/) => {\n                 self.consume_operand(location, (operand, span), flow_state)\n             }\n "}, {"sha": "cf50fa38687b55a7ef58f6559dce62dba3154d90", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -2024,13 +2024,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n \n-            Rvalue::NullaryOp(_, ty) => {\n-                // Even with unsized locals cannot box an unsized value.\n-                if self.unsized_feature_enabled() {\n-                    let span = body.source_info(location).span;\n-                    self.ensure_place_sized(ty, span);\n-                }\n-\n+            Rvalue::NullaryOp(_, ty) | Rvalue::ShallowInitBox(_, ty) => {\n                 let trait_ref = ty::TraitRef {\n                     def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n                     substs: tcx.mk_substs_trait(ty, &[]),\n@@ -2363,6 +2357,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | Rvalue::AddressOf(..)\n             | Rvalue::Len(..)\n             | Rvalue::Cast(..)\n+            | Rvalue::ShallowInitBox(..)\n             | Rvalue::BinaryOp(..)\n             | Rvalue::CheckedBinaryOp(..)\n             | Rvalue::NullaryOp(..)"}, {"sha": "1b30edd293862b1d221cbfb4529c1b9f8883a52e", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -701,6 +701,13 @@ fn codegen_stmt<'tcx>(\n                     let len = codegen_array_len(fx, place);\n                     lval.write_cvalue(fx, CValue::by_val(len, usize_layout));\n                 }\n+                Rvalue::ShallowInitBox(ref operand, content_ty) => {\n+                    let content_ty = fx.monomorphize(content_ty);\n+                    let box_layout = fx.layout_of(fx.tcx.mk_box(content_ty));\n+                    let operand = codegen_operand(fx, operand);\n+                    let operand = operand.load_scalar(fx);\n+                    lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n+                }\n                 Rvalue::NullaryOp(NullOp::Box, content_ty) => {\n                     let usize_type = fx.clif_type(fx.tcx.types.usize).unwrap();\n                     let content_ty = fx.monomorphize(content_ty);"}, {"sha": "f087b9f7815da73a1b3bb79661b149a34124f000", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -550,6 +550,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     OperandRef::new_zst(&mut bx, self.cx.layout_of(self.monomorphize(ty)));\n                 (bx, operand)\n             }\n+            mir::Rvalue::ShallowInitBox(ref operand, content_ty) => {\n+                let operand = self.codegen_operand(&mut bx, operand);\n+                let lloperand = operand.immediate();\n+\n+                let content_ty = self.monomorphize(content_ty);\n+                let box_layout = bx.cx().layout_of(bx.tcx().mk_box(content_ty));\n+                let llty_ptr = bx.cx().backend_type(box_layout);\n+\n+                let val = bx.pointercast(lloperand, llty_ptr);\n+                let operand = OperandRef { val: OperandValue::Immediate(val), layout: box_layout };\n+                (bx, operand)\n+            }\n         }\n     }\n \n@@ -763,6 +775,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::AddressOf(..) |\n             mir::Rvalue::Len(..) |\n             mir::Rvalue::Cast(..) | // (*)\n+            mir::Rvalue::ShallowInitBox(..) | // (*)\n             mir::Rvalue::BinaryOp(..) |\n             mir::Rvalue::CheckedBinaryOp(..) |\n             mir::Rvalue::UnaryOp(..) |"}, {"sha": "bcce19b28db97444e189f25833a497dd45d9ae96", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -289,6 +289,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;\n             }\n \n+            ShallowInitBox(ref operand, _) => {\n+                let src = self.eval_operand(operand, None)?;\n+                let v = self.read_immediate(&src)?;\n+                self.write_immediate(*v, &dest)?;\n+            }\n+\n             Cast(cast_kind, ref operand, cast_ty) => {\n                 let src = self.eval_operand(operand, None)?;\n                 let cast_ty = self.subst_from_current_frame_and_normalize_erasing_regions(cast_ty);"}, {"sha": "57d92005a56497ce3e63a19efcc73c5c9843d067", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -650,6 +650,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n             Rvalue::NullaryOp(NullOp::Box, _) => self.check_op(ops::HeapAllocation),\n+            Rvalue::ShallowInitBox(_, _) => {}\n \n             Rvalue::UnaryOp(_, ref operand) => {\n                 let ty = operand.ty(self.body, self.tcx);\n@@ -912,6 +913,11 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     return;\n                 }\n \n+                if Some(callee) == tcx.lang_items().exchange_malloc_fn() {\n+                    self.check_op(ops::HeapAllocation);\n+                    return;\n+                }\n+\n                 // `async` blocks get lowered to `std::future::from_generator(/* a closure */)`.\n                 let is_async_block = Some(callee) == tcx.lang_items().from_generator_fn();\n                 if is_async_block {"}, {"sha": "5eb7d7a91cc76d5aeec900c92f91fae4e038c6f6", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -206,7 +206,8 @@ where\n         Rvalue::Use(operand)\n         | Rvalue::Repeat(operand, _)\n         | Rvalue::UnaryOp(_, operand)\n-        | Rvalue::Cast(_, operand, _) => in_operand::<Q, _>(cx, in_local, operand),\n+        | Rvalue::Cast(_, operand, _)\n+        | Rvalue::ShallowInitBox(operand, _) => in_operand::<Q, _>(cx, in_local, operand),\n \n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             in_operand::<Q, _>(cx, in_local, lhs) || in_operand::<Q, _>(cx, in_local, rhs)"}, {"sha": "9408dfa956b40c2d799f765514fbcbf4050fd19d", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -523,6 +523,8 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 NullOp::AlignOf => {}\n             },\n \n+            Rvalue::ShallowInitBox(_, _) => return Err(Unpromotable),\n+\n             Rvalue::UnaryOp(op, operand) => {\n                 match op {\n                     // These operations can never fail."}, {"sha": "2a36c01d221e1cda6d822aa27eec160ef1074d48", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -2200,6 +2200,12 @@ pub enum Rvalue<'tcx> {\n     /// that `Foo` has a destructor. These rvalues can be optimized\n     /// away after type-checking and before lowering.\n     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n+\n+    /// Transmutes a `*mut u8` into shallow-initialized `Box<T>`.\n+    ///\n+    /// This is different a normal transmute because dataflow analysis will treat the box\n+    /// as initialized but its content as uninitialized.\n+    ShallowInitBox(Operand<'tcx>, Ty<'tcx>),\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n@@ -2450,6 +2456,10 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     }),\n                 }\n             }\n+\n+            ShallowInitBox(ref place, ref ty) => {\n+                write!(fmt, \"ShallowInitBox({:?}, {:?})\", place, ty)\n+            }\n         }\n     }\n }"}, {"sha": "c3c5ebe705effa45fd518ad35dc0e00121124515", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -206,6 +206,7 @@ impl<'tcx> Rvalue<'tcx> {\n                     tcx.mk_generator(did, substs, movability)\n                 }\n             },\n+            Rvalue::ShallowInitBox(_, ty) => tcx.mk_box(ty),\n         }\n     }\n \n@@ -214,7 +215,9 @@ impl<'tcx> Rvalue<'tcx> {\n     /// whether its only shallowly initialized (`Rvalue::Box`).\n     pub fn initialization_state(&self) -> RvalueInitializationState {\n         match *self {\n-            Rvalue::NullaryOp(NullOp::Box, _) => RvalueInitializationState::Shallow,\n+            Rvalue::NullaryOp(NullOp::Box, _) | Rvalue::ShallowInitBox(_, _) => {\n+                RvalueInitializationState::Shallow\n+            }\n             _ => RvalueInitializationState::Deep,\n         }\n     }"}, {"sha": "b7201f7acf392dac6567e4d4ba7d6e69298b467c", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -210,6 +210,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 });\n                 Aggregate(kind, fields.fold_with(folder))\n             }\n+            ShallowInitBox(op, ty) => ShallowInitBox(op.fold_with(folder), ty.fold_with(folder)),\n         }\n     }\n \n@@ -255,6 +256,10 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                 }\n                 fields.visit_with(visitor)\n             }\n+            ShallowInitBox(ref op, ty) => {\n+                op.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n         }\n     }\n }"}, {"sha": "fda7ebe1a49c15c2697ae150b964124af43a019e", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -753,6 +753,11 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(operand, location);\n                         }\n                     }\n+\n+                    Rvalue::ShallowInitBox(operand, ty) => {\n+                        self.visit_operand(operand, location);\n+                        self.visit_ty(ty, TyContext::Location(location));\n+                    }\n                 }\n             }\n "}, {"sha": "1464ea58ad02c6581fc0c298d015745e04340534", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -5,6 +5,7 @@ use rustc_index::vec::Idx;\n use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::middle::region;\n use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::Place;\n@@ -88,6 +89,56 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Box { value } => {\n                 let value = &this.thir[value];\n+                let tcx = this.tcx;\n+\n+                // `exchange_malloc` is unsafe but box is safe, so need a new scope.\n+                let synth_scope = this.new_source_scope(\n+                    expr_span,\n+                    LintLevel::Inherited,\n+                    Some(Safety::BuiltinUnsafe),\n+                );\n+                let synth_info = SourceInfo { span: expr_span, scope: synth_scope };\n+\n+                let size = this.temp(tcx.types.usize, expr_span);\n+                this.cfg.push_assign(\n+                    block,\n+                    synth_info,\n+                    size,\n+                    Rvalue::NullaryOp(NullOp::SizeOf, value.ty),\n+                );\n+\n+                let align = this.temp(tcx.types.usize, expr_span);\n+                this.cfg.push_assign(\n+                    block,\n+                    synth_info,\n+                    align,\n+                    Rvalue::NullaryOp(NullOp::AlignOf, value.ty),\n+                );\n+\n+                // malloc some memory of suitable size and align:\n+                let exchange_malloc = Operand::function_handle(\n+                    tcx,\n+                    tcx.require_lang_item(LangItem::ExchangeMalloc, Some(expr_span)),\n+                    ty::List::empty(),\n+                    expr_span,\n+                );\n+                let storage = this.temp(tcx.mk_mut_ptr(tcx.types.u8), expr_span);\n+                let success = this.cfg.start_new_block();\n+                this.cfg.terminate(\n+                    block,\n+                    synth_info,\n+                    TerminatorKind::Call {\n+                        func: exchange_malloc,\n+                        args: vec![Operand::Move(size), Operand::Move(align)],\n+                        destination: Some((Place::from(storage), success)),\n+                        cleanup: None,\n+                        from_hir_call: false,\n+                        fn_span: expr_span,\n+                    },\n+                );\n+                this.diverge_from(block);\n+                block = success;\n+\n                 // The `Box<T>` temporary created here is not a part of the HIR,\n                 // and therefore is not considered during generator auto-trait\n                 // determination. See the comment about `box` at `yield_in_scope`.\n@@ -101,8 +152,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     this.schedule_drop_storage_and_value(expr_span, scope, result);\n                 }\n \n-                // malloc some memory of suitable type (thus far, uninitialized):\n-                let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n+                // Transmute `*mut u8` to the box (thus far, uninitialized):\n+                let box_ = Rvalue::ShallowInitBox(Operand::Move(Place::from(storage)), value.ty);\n                 this.cfg.push_assign(block, source_info, Place::from(result), box_);\n \n                 // initialize the box contents:"}, {"sha": "158ba1b942528072c7416f70fe9cb434590e83a6", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -169,6 +169,7 @@ where\n             }\n \n             mir::Rvalue::Cast(..)\n+            | mir::Rvalue::ShallowInitBox(..)\n             | mir::Rvalue::Use(..)\n             | mir::Rvalue::ThreadLocalRef(..)\n             | mir::Rvalue::Repeat(..)"}, {"sha": "e404b49ecb93173f33ca1062399967f3f6a6075b", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -327,6 +327,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             Rvalue::Use(ref operand)\n             | Rvalue::Repeat(ref operand, _)\n             | Rvalue::Cast(_, ref operand, _)\n+            | Rvalue::ShallowInitBox(ref operand, _)\n             | Rvalue::UnaryOp(_, ref operand) => self.gather_operand(operand),\n             Rvalue::BinaryOp(ref _binop, box (ref lhs, ref rhs))\n             | Rvalue::CheckedBinaryOp(ref _binop, box (ref lhs, ref rhs)) => {"}, {"sha": "17790ec91c8a3fd17d19132ad21aba33e9255712", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -723,6 +723,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             | Rvalue::Repeat(..)\n             | Rvalue::Len(..)\n             | Rvalue::Cast(..)\n+            | Rvalue::ShallowInitBox(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::NullaryOp(..) => {}\n         }"}, {"sha": "790d9243fbaec874db7488ff817c615d5068cb1e", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -967,6 +967,7 @@ impl<'tcx> Visitor<'tcx> for BorrowCollector {\n             }\n \n             Rvalue::Cast(..)\n+            | Rvalue::ShallowInitBox(..)\n             | Rvalue::Use(..)\n             | Rvalue::Repeat(..)\n             | Rvalue::Len(..)"}, {"sha": "3002e7041b0247dacd18e868907799cbe39b37fa", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -204,6 +204,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n                         | Rvalue::AddressOf(_, _)\n                         | Rvalue::Cast(_, Operand::Constant(_), _)\n                         | Rvalue::NullaryOp(_, _)\n+                        | Rvalue::ShallowInitBox(_, _)\n                         | Rvalue::UnaryOp(_, Operand::Constant(_)) => return true,\n \n                         // These rvalues make things ambiguous\n@@ -301,6 +302,7 @@ fn find_determining_place<'tcx>(\n                     | Rvalue::ThreadLocalRef(_)\n                     | Rvalue::AddressOf(_, _)\n                     | Rvalue::NullaryOp(_, _)\n+                    | Rvalue::ShallowInitBox(_, _)\n                     | Rvalue::UnaryOp(_, Operand::Constant(_))\n                     | Rvalue::Cast(_, Operand::Constant(_), _)\n                     => return None,"}, {"sha": "4a5b0fcf03709ff944fe4e612327bbeaee3cb70e", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -307,7 +307,6 @@ unsafe impl Allocator for Global {\n }\n \n /// The allocator for unique pointers.\n-// This function must not unwind. If it does, MIR codegen will fail.\n #[cfg(all(not(no_global_oom_handling), not(test)))]\n #[lang = \"exchange_malloc\"]\n #[inline]"}, {"sha": "c6187879ab0a9cca0438a29de9cc8da6e9152ab9", "filename": "src/test/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 40, "deletions": 26, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -3,64 +3,78 @@\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/box_expr.rs:6:11: 6:11\n     let _1: std::boxed::Box<S>;          // in scope 0 at $DIR/box_expr.rs:7:9: 7:10\n-    let mut _2: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-    let _3: ();                          // in scope 0 at $DIR/box_expr.rs:8:5: 8:12\n-    let mut _4: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:8:10: 8:11\n+    let mut _2: usize;                   // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let mut _3: usize;                   // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let mut _5: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+    let _6: ();                          // in scope 0 at $DIR/box_expr.rs:8:5: 8:12\n+    let mut _7: std::boxed::Box<S>;      // in scope 0 at $DIR/box_expr.rs:8:10: 8:11\n     scope 1 {\n         debug x => _1;                   // in scope 1 at $DIR/box_expr.rs:7:9: 7:10\n     }\n+    scope 2 {\n+    }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/box_expr.rs:7:9: 7:10\n-        StorageLive(_2);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        _2 = Box(S);                     // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        (*_2) = S::new() -> [return: bb1, unwind: bb7]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+        _2 = SizeOf(S);                  // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n+        _3 = AlignOf(S);                 // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/box_expr.rs:7:13: 7:25\n                                          // mir::Constant\n-                                         // + span: $DIR/box_expr.rs:7:17: 7:23\n-                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n+                                         // + span: $DIR/box_expr.rs:7:13: 7:25\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        _1 = move _2;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n-        drop(_2) -> bb2;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        StorageLive(_5);                 // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        _5 = ShallowInitBox(move _4, S); // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        (*_5) = S::new() -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/box_expr.rs:7:17: 7:25\n+                                         // mir::Constant\n+                                         // + span: $DIR/box_expr.rs:7:17: 7:23\n+                                         // + literal: Const { ty: fn() -> S {S::new}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageDead(_2);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n-        StorageLive(_3);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n-        StorageLive(_4);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _4 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n-        _3 = std::mem::drop::<Box<S>>(move _4) -> [return: bb3, unwind: bb5]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        _1 = move _5;                    // scope 0 at $DIR/box_expr.rs:7:13: 7:25\n+        drop(_5) -> bb3;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb3: {\n+        StorageDead(_5);                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        StorageLive(_6);                 // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n+        StorageLive(_7);                 // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _7 = move _1;                    // scope 1 at $DIR/box_expr.rs:8:10: 8:11\n+        _6 = std::mem::drop::<Box<S>>(move _7) -> [return: bb4, unwind: bb6]; // scope 1 at $DIR/box_expr.rs:8:5: 8:12\n                                          // mir::Constant\n                                          // + span: $DIR/box_expr.rs:8:5: 8:9\n                                          // + literal: Const { ty: fn(std::boxed::Box<S>) {std::mem::drop::<std::boxed::Box<S>>}, val: Value(Scalar(<ZST>)) }\n     }\n \n-    bb3: {\n-        StorageDead(_4);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n-        StorageDead(_3);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n+    bb4: {\n+        StorageDead(_7);                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n+        StorageDead(_6);                 // scope 1 at $DIR/box_expr.rs:8:12: 8:13\n         _0 = const ();                   // scope 0 at $DIR/box_expr.rs:6:11: 9:2\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_1) -> bb5;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n-    bb4: {\n+    bb5: {\n         StorageDead(_1);                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n         return;                          // scope 0 at $DIR/box_expr.rs:9:2: 9:2\n     }\n \n-    bb5 (cleanup): {\n-        drop(_4) -> bb6;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n-    }\n-\n     bb6 (cleanup): {\n-        drop(_1) -> bb8;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n+        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:8:11: 8:12\n     }\n \n     bb7 (cleanup): {\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:9:1: 9:2\n     }\n \n     bb8 (cleanup): {\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:7:24: 7:25\n+    }\n+\n+    bb9 (cleanup): {\n         resume;                          // scope 0 at $DIR/box_expr.rs:6:1: 9:2\n     }\n }"}, {"sha": "342c987343eac911b82231fad01546734c2c1a35", "filename": "src/test/mir-opt/const_prop/boxes.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.main.ConstProp.diff?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -6,34 +6,51 @@\n       let _1: i32;                         // in scope 0 at $DIR/boxes.rs:12:9: 12:10\n       let mut _2: i32;                     // in scope 0 at $DIR/boxes.rs:12:13: 12:22\n       let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n-      let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _4: usize;                   // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _5: usize;                   // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _6: *mut u8;                 // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n+      let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/boxes.rs:12:14: 12:22\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/boxes.rs:12:9: 12:10\n       }\n+      scope 2 {\n+      }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/boxes.rs:12:9: 12:10\n           StorageLive(_2);                 // scope 0 at $DIR/boxes.rs:12:13: 12:22\n           StorageLive(_3);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageLive(_4);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          _4 = Box(i32);                   // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          (*_4) = const 42_i32;            // scope 0 at $DIR/boxes.rs:12:19: 12:21\n-          _3 = move _4;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n-          StorageDead(_4);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n+-         _4 = SizeOf(i32);                // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+-         _5 = AlignOf(i32);               // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+-         _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n++         _4 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n++         _5 = const 4_usize;              // scope 2 at $DIR/boxes.rs:12:14: 12:22\n++         _6 = alloc::alloc::exchange_malloc(const 4_usize, const 4_usize) -> bb1; // scope 2 at $DIR/boxes.rs:12:14: 12:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/boxes.rs:12:14: 12:22\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_7);                 // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          _7 = ShallowInitBox(move _6, i32); // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          (*_7) = const 42_i32;            // scope 0 at $DIR/boxes.rs:12:19: 12:21\n+          _3 = move _7;                    // scope 0 at $DIR/boxes.rs:12:14: 12:22\n+          StorageDead(_7);                 // scope 0 at $DIR/boxes.rs:12:21: 12:22\n           _2 = (*_3);                      // scope 0 at $DIR/boxes.rs:12:13: 12:22\n           _1 = Add(move _2, const 0_i32);  // scope 0 at $DIR/boxes.rs:12:13: 12:26\n           StorageDead(_2);                 // scope 0 at $DIR/boxes.rs:12:25: 12:26\n-          drop(_3) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n+          drop(_3) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/boxes.rs:12:26: 12:27\n       }\n   \n-      bb1: {\n+      bb2: {\n           StorageDead(_3);                 // scope 0 at $DIR/boxes.rs:12:26: 12:27\n           nop;                             // scope 0 at $DIR/boxes.rs:11:11: 13:2\n           StorageDead(_1);                 // scope 0 at $DIR/boxes.rs:13:1: 13:2\n           return;                          // scope 0 at $DIR/boxes.rs:13:2: 13:2\n       }\n   \n-      bb2 (cleanup): {\n+      bb3 (cleanup): {\n           resume;                          // scope 0 at $DIR/boxes.rs:11:1: 13:2\n       }\n   }"}, {"sha": "137a1de522b83d3723677aedfec2027f8dc3596d", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -4,23 +4,37 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n       let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-      let mut _2: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _3: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+     let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++     let mut _7: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n       }\n-+     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      scope 2 {\n+      }\n++     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageLive(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -30,32 +44,32 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb2: {\n +                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageDead(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n+-     bb3: {\n++     bb2: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n+-     bb4 (cleanup): {\n++     bb3 (cleanup): {\n           resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n--     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_2.1: std::alloc::Global)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-     bb5 (cleanup): {\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<std::vec::Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "26327d055746180cda3506513c1435fa719b1661", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -4,23 +4,37 @@\n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n       let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-      let mut _2: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-      let mut _3: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n-+     let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      let mut _2: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _3: usize;                   // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _6: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++     let mut _7: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n       }\n-+     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      scope 2 {\n+      }\n++     scope 3 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          _2 = Box(std::vec::Vec<u32>);    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n--         (*_2) = Vec::<u32>::new() -> [return: bb1, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageLive(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         _4 = &mut (*_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-into-box-place.rs:8:29: 8:43\n+                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_5) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // ty::Const\n +                                          // + ty: alloc::raw_vec::RawVec<u32>\n +                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n@@ -30,32 +44,32 @@\n -                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n -     }\n - \n--     bb1: {\n+-     bb2: {\n +                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:43\n +                                          // + user_ty: UserType(0)\n +                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n-+         ((*_4).1: usize) = const 0_usize; // scope 2 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-+         StorageDead(_4);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n-          _1 = move _2;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n-          StorageDead(_2);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         ((*_7).1: usize) = const 0_usize; // scope 3 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         StorageDead(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+          _1 = move _5;                    // scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          StorageDead(_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n           _0 = const ();                   // scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n--         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n-+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb3]; // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n       }\n   \n--     bb2: {\n-+     bb1: {\n+-     bb3: {\n++     bb2: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n           return;                          // scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n       }\n   \n--     bb3 (cleanup): {\n-+     bb2 (cleanup): {\n+-     bb4 (cleanup): {\n++     bb3 (cleanup): {\n           resume;                          // scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n -     }\n - \n--     bb4 (cleanup): {\n--         _3 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_2.1: std::alloc::Global)) -> bb3; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-     bb5 (cleanup): {\n+-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n -                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<std::vec::Vec<u32>, std::alloc::Global>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "dde49c77ae7f5fbdf3cc62fe427eb4ff97c77f62", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 69, "deletions": 55, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -3,106 +3,120 @@\n fn test() -> Option<Box<u32>> {\n     let mut _0: std::option::Option<std::boxed::Box<u32>>; // return place in scope 0 at $DIR/issue-62289.rs:8:14: 8:30\n     let mut _1: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-    let mut _2: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-    let mut _3: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-    let mut _4: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-    let mut _5: isize;                   // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _6: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _7: !;                       // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let mut _8: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-    let _9: u32;                         // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _2: usize;                   // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _3: usize;                   // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _4: *mut u8;                 // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _5: std::boxed::Box<u32>;    // in scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+    let mut _6: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+    let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+    let mut _8: isize;                   // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _9: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let mut _10: !;                      // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let mut _11: std::option::Option<std::convert::Infallible>; // in scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+    let _12: u32;                        // in scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     scope 1 {\n-        debug residual => _6;            // in scope 1 at $DIR/issue-62289.rs:9:19: 9:20\n-        scope 2 {\n+    }\n+    scope 2 {\n+        debug residual => _9;            // in scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n+        scope 3 {\n         }\n     }\n-    scope 3 {\n-        debug val => _9;                 // in scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n-        scope 4 {\n+    scope 4 {\n+        debug val => _12;                // in scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n+        scope 5 {\n         }\n     }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        StorageLive(_2);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        _2 = Box(u32);                   // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _4 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n-        _3 = <Option<u32> as Try>::branch(move _4) -> [return: bb1, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _2 = SizeOf(u32);                // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n+        _3 = AlignOf(u32);               // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n+        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at $DIR/issue-62289.rs:9:10: 9:21\n                                          // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::ops::ControlFlow<<std::option::Option<u32> as std::ops::Try>::Residual, <std::option::Option<u32> as std::ops::Try>::Output> {<std::option::Option<u32> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }\n+                                         // + span: $DIR/issue-62289.rs:9:10: 9:21\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_5);                 // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        _5 = ShallowInitBox(move _4, u32); // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_7);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _7 = Option::<u32>::None;        // scope 0 at $DIR/issue-62289.rs:9:15: 9:19\n+        _6 = <Option<u32> as Try>::branch(move _7) -> [return: bb2, unwind: bb12]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-62289.rs:9:15: 9:20\n+                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> std::ops::ControlFlow<<std::option::Option<u32> as std::ops::Try>::Residual, <std::option::Option<u32> as std::ops::Try>::Output> {<std::option::Option<u32> as std::ops::Try>::branch}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb2: {\n-        StorageLive(_9);                 // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        _9 = ((_3 as Continue).0: u32);  // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n-        (*_2) = _9;                      // scope 4 at $DIR/issue-62289.rs:9:15: 9:20\n-        StorageDead(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _1 = move _2;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n-        drop(_2) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_7);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _8 = discriminant(_6);           // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n     bb3: {\n-        unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageLive(_12);                // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        _12 = ((_6 as Continue).0: u32); // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        (*_5) = _12;                     // scope 5 at $DIR/issue-62289.rs:9:15: 9:20\n+        StorageDead(_12);                // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _1 = move _5;                    // scope 0 at $DIR/issue-62289.rs:9:10: 9:21\n+        drop(_5) -> [return: bb7, unwind: bb11]; // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb4: {\n-        StorageLive(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _6 = ((_3 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageLive(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _8 = _6;                         // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _8) -> [return: bb5, unwind: bb11]; // scope 2 at $DIR/issue-62289.rs:9:15: 9:20\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue-62289.rs:9:19: 9:20\n-                                         // + literal: Const { ty: fn(std::option::Option<std::convert::Infallible>) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n+        unreachable;                     // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n     bb5: {\n-        StorageDead(_8);                 // scope 2 at $DIR/issue-62289.rs:9:19: 9:20\n-        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        drop(_2) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageLive(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _9 = ((_6 as Break).0: std::option::Option<std::convert::Infallible>); // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageLive(_11);                // scope 3 at $DIR/issue-62289.rs:9:19: 9:20\n+        _11 = _9;                        // scope 3 at $DIR/issue-62289.rs:9:19: 9:20\n+        _0 = <Option<Box<u32>> as FromResidual<Option<Infallible>>>::from_residual(move _11) -> [return: bb6, unwind: bb12]; // scope 3 at $DIR/issue-62289.rs:9:15: 9:20\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue-62289.rs:9:19: 9:20\n+                                         // + literal: Const { ty: fn(std::option::Option<std::convert::Infallible>) -> std::option::Option<std::boxed::Box<u32>> {<std::option::Option<std::boxed::Box<u32>> as std::ops::FromResidual<std::option::Option<std::convert::Infallible>>>::from_residual}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n-        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n-        drop(_1) -> bb7;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_11);                // scope 3 at $DIR/issue-62289.rs:9:19: 9:20\n+        StorageDead(_9);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        drop(_5) -> bb9;                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n     }\n \n     bb7: {\n-        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        StorageDead(_5);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        _0 = Option::<Box<u32>>::Some(move _1); // scope 0 at $DIR/issue-62289.rs:9:5: 9:22\n+        drop(_1) -> bb8;                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n     bb8: {\n-        StorageDead(_2);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n         StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n-        StorageDead(_3);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n-        goto -> bb9;                     // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n     bb9: {\n-        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n+        StorageDead(_5);                 // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        StorageDead(_1);                 // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+        StorageDead(_6);                 // scope 0 at $DIR/issue-62289.rs:10:1: 10:2\n+        goto -> bb10;                    // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n-    bb10 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n+    bb10: {\n+        return;                          // scope 0 at $DIR/issue-62289.rs:10:2: 10:2\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+        drop(_1) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:21: 9:22\n     }\n \n     bb12 (cleanup): {\n+        drop(_5) -> bb13;                // scope 0 at $DIR/issue-62289.rs:9:20: 9:21\n+    }\n+\n+    bb13 (cleanup): {\n         resume;                          // scope 0 at $DIR/issue-62289.rs:8:1: 10:2\n     }\n }"}, {"sha": "d7d2cdf9b0c7577c76c0f828b9af23e2b7db1695", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_by_subslice.mir_map.0.mir", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_by_subslice.mir_map.0.mir?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -4,80 +4,108 @@ fn move_out_by_subslice() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:10:27: 10:27\n     let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n     let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-    let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-    let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-    let mut _5: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n     scope 1 {\n         debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n-        let _6: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n-        scope 2 {\n-            debug _y => _6;              // in scope 2 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        let _12: [std::boxed::Box<i32>; 2]; // in scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        scope 4 {\n+            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         }\n     }\n+    scope 2 {\n+    }\n+    scope 3 {\n+    }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-        _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:11:14: 11:19\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n-        StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-        _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:11:14: 11:19\n+        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n     }\n \n     bb2: {\n-        StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n-        _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:18: 11:19\n+        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:11:21: 11:26\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:11:21: 11:26\n+        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n     }\n \n     bb4: {\n+        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:11:25: 11:26\n+        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:11:13: 11:27\n+        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb5: {\n+        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    }\n+\n+    bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:11:9: 11:10\n-        StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n-        _6 = move _1[0..2];              // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n+        _12 = move _1[0..2];             // scope 1 at $DIR/uniform_array_move_out.rs:12:10: 12:17\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:10:27: 13:2\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb7: {\n+        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb6: {\n+    bb8: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:13:2: 13:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n+    bb9 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:13:1: 13:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb10 (cleanup): {\n+        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n+    bb11 (cleanup): {\n+        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:11:26: 11:27\n     }\n \n-    bb10 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:10:1: 13:2\n     }\n }"}, {"sha": "18bc1a17c1b50abe24a283d5b59c88e73a2b3c8e", "filename": "src/test/mir-opt/uniform_array_move_out.move_out_from_end.mir_map.0.mir", "status": "modified", "additions": 65, "deletions": 37, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funiform_array_move_out.move_out_from_end.mir_map.0.mir?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -4,80 +4,108 @@ fn move_out_from_end() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/uniform_array_move_out.rs:4:24: 4:24\n     let _1: [std::boxed::Box<i32>; 2];   // in scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n     let mut _2: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-    let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-    let mut _4: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-    let mut _5: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _3: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _4: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _5: *mut u8;                 // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _6: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+    let mut _7: std::boxed::Box<i32>;    // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _8: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _9: usize;                   // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _10: *mut u8;                // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+    let mut _11: std::boxed::Box<i32>;   // in scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n     scope 1 {\n         debug a => _1;                   // in scope 1 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n-        let _6: std::boxed::Box<i32>;    // in scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n-        scope 2 {\n-            debug _y => _6;              // in scope 2 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        let _12: std::boxed::Box<i32>;   // in scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        scope 4 {\n+            debug _y => _12;             // in scope 4 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         }\n     }\n+    scope 2 {\n+    }\n+    scope 3 {\n+    }\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n         StorageLive(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        StorageLive(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        _3 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        (*_3) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-        _2 = move _3;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n-        drop(_3) -> [return: bb1, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        _3 = SizeOf(i32);                // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _4 = AlignOf(i32);               // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb12]; // scope 2 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:5:14: 5:19\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n-        StorageLive(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        StorageLive(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        _5 = Box(i32);                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        (*_5) = const 2_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-        _4 = move _5;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n-        drop(_5) -> [return: bb2, unwind: bb8]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        StorageLive(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        _6 = ShallowInitBox(move _5, i32); // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        (*_6) = const 1_i32;             // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        _2 = move _6;                    // scope 0 at $DIR/uniform_array_move_out.rs:5:14: 5:19\n+        drop(_6) -> [return: bb2, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n     }\n \n     bb2: {\n-        StorageDead(_5);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n-        _1 = [move _2, move _4];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n-        drop(_4) -> [return: bb3, unwind: bb9]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        StorageDead(_6);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:18: 5:19\n+        StorageLive(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _8 = SizeOf(i32);                // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _9 = AlignOf(i32);               // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb3, unwind: bb11]; // scope 3 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/uniform_array_move_out.rs:5:21: 5:26\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb3: {\n-        StorageDead(_4);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n-        drop(_2) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        StorageLive(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        _11 = ShallowInitBox(move _10, i32); // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        (*_11) = const 2_i32;            // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        _7 = move _11;                   // scope 0 at $DIR/uniform_array_move_out.rs:5:21: 5:26\n+        drop(_11) -> [return: bb4, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n     }\n \n     bb4: {\n+        StorageDead(_11);                // scope 0 at $DIR/uniform_array_move_out.rs:5:25: 5:26\n+        _1 = [move _2, move _7];         // scope 0 at $DIR/uniform_array_move_out.rs:5:13: 5:27\n+        drop(_7) -> [return: bb5, unwind: bb11]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb5: {\n+        StorageDead(_7);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+        drop(_2) -> [return: bb6, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    }\n+\n+    bb6: {\n         StorageDead(_2);                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/uniform_array_move_out.rs:5:9: 5:10\n-        StorageLive(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n-        _6 = move _1[1 of 2];            // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        StorageLive(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n+        _12 = move _1[1 of 2];           // scope 1 at $DIR/uniform_array_move_out.rs:6:14: 6:16\n         _0 = const ();                   // scope 0 at $DIR/uniform_array_move_out.rs:4:24: 7:2\n-        drop(_6) -> [return: bb5, unwind: bb7]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_12) -> [return: bb7, unwind: bb9]; // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n-        drop(_1) -> [return: bb6, unwind: bb10]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb7: {\n+        StorageDead(_12);                // scope 1 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+        drop(_1) -> [return: bb8, unwind: bb12]; // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb6: {\n+    bb8: {\n         StorageDead(_1);                 // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n         return;                          // scope 0 at $DIR/uniform_array_move_out.rs:7:2: 7:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_1) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n+    bb9 (cleanup): {\n+        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:7:1: 7:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_4) -> bb9;                 // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb10 (cleanup): {\n+        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> bb10;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n+    bb11 (cleanup): {\n+        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:5:26: 5:27\n     }\n \n-    bb10 (cleanup): {\n+    bb12 (cleanup): {\n         resume;                          // scope 0 at $DIR/uniform_array_move_out.rs:4:1: 7:2\n     }\n }"}, {"sha": "32796c67229a7eb0892163503d37679d889e9002", "filename": "src/test/ui/consts/miri_unleashed/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -9,5 +9,5 @@ fn main() {}\n static TEST_BAD: &mut i32 = {\n     &mut *(box 0)\n     //~^ ERROR could not evaluate static initializer\n-    //~| NOTE heap allocations\n+    //~| NOTE calling non-const function `alloc::alloc::exchange_malloc`\n };"}, {"sha": "05d9858dc09f0a938351136a19bb1cab9d5fde8e", "filename": "src/test/ui/consts/miri_unleashed/box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fbox.stderr?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/box.rs:10:11\n    |\n LL |     &mut *(box 0)\n-   |           ^^^^^^^ \"heap allocations via `box` keyword\" needs an rfc before being allowed inside constants\n+   |           ^^^^^^^ calling non-const function `alloc::alloc::exchange_malloc`\n \n warning: skipping const checks\n    |"}, {"sha": "9e09251901583a1c09d8572a84c99b8fe1485c03", "filename": "src/test/ui/nll/issue-52663-trait-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-trait-object.stderr?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `tmp0` does not live long enough\n LL |         let tmp1 = &tmp0;\n    |                    ^^^^^ borrowed value does not live long enough\n LL |         box tmp1 as Box<dyn Foo + '_>\n-   |         ----------------------------- borrow later captured here by trait object\n+   |         ----------------------------- borrow later used here\n LL |     };\n    |     - `tmp0` dropped here while still borrowed\n "}, {"sha": "e2f2e2008bb2604543f1ba4814b0d92538d89fc1", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f29a851917a706c01b6f51331894df1d15770b/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=e9f29a851917a706c01b6f51331894df1d15770b", "patch": "@@ -194,6 +194,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n         },\n         Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => Ok(()),\n         Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n+        Rvalue::ShallowInitBox(_, _) => Ok(()),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}]}