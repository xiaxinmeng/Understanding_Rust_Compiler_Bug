{"sha": "42f3f069fa1963cdf19117e57a83089889a64f37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjNmMDY5ZmExOTYzY2RmMTkxMTdlNTdhODMwODk4ODlhNjRmMzc=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T20:48:49Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T20:48:49Z"}, "message": "changed NOTE to TODO", "tree": {"sha": "03ab58aaa291a3282cbb8691cd51c3542370dd8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ab58aaa291a3282cbb8691cd51c3542370dd8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f3f069fa1963cdf19117e57a83089889a64f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f3f069fa1963cdf19117e57a83089889a64f37", "html_url": "https://github.com/rust-lang/rust/commit/42f3f069fa1963cdf19117e57a83089889a64f37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f3f069fa1963cdf19117e57a83089889a64f37/comments", "author": null, "committer": null, "parents": [{"sha": "ce97bd4c8b841165bb22cb0be566a9b66931165a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce97bd4c8b841165bb22cb0be566a9b66931165a", "html_url": "https://github.com/rust-lang/rust/commit/ce97bd4c8b841165bb22cb0be566a9b66931165a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "dc766b2d7f88b9b67a92e5983016fa73909f84fe", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42f3f069fa1963cdf19117e57a83089889a64f37/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f3f069fa1963cdf19117e57a83089889a64f37/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=42f3f069fa1963cdf19117e57a83089889a64f37", "patch": "@@ -37,7 +37,7 @@ pub fn ip4_as_uv_ip4<T>(addr: IpAddr, f: &fn(*sockaddr_in) -> T) -> T {\n                 }\n             }\n         }\n-        _ => fail!() // NOTE ipv6\n+        _ => fail!() // TODO ipv6\n     }\n }\n \n@@ -279,7 +279,7 @@ impl UdpWatcher {\n                     }\n                 }\n             }\n-            _ => fail!() // NOTE ipv6\n+            _ => fail!() // TODO ipv6\n         }\n     }\n \n@@ -299,7 +299,7 @@ impl UdpWatcher {\n             return (*alloc_cb)(suggested_size as uint);\n         }\n \n-        /* NOTE the socket address should actually be a pointer to\n+        /* TODO the socket address should actually be a pointer to\n            either a sockaddr_in or sockaddr_in6.\n            In libuv, the udp_recv callback takes a struct *sockaddr */\n         extern fn recv_cb(handle: *uvll::uv_udp_t, nread: ssize_t, buf: Buf,\n@@ -336,7 +336,7 @@ impl UdpWatcher {\n                     }\n                 }\n             }\n-            _ => fail!() // NOTE ipv6\n+            _ => fail!() // TODO ipv6\n         }\n \n         extern fn send_cb(req: *uvll::uv_udp_send_t, status: c_int) {"}, {"sha": "1ae6cd8b17bb7bea0a7bee6a6ade83eb390672e8", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42f3f069fa1963cdf19117e57a83089889a64f37/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f3f069fa1963cdf19117e57a83089889a64f37/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=42f3f069fa1963cdf19117e57a83089889a64f37", "patch": "@@ -481,7 +481,7 @@ impl RtioUdpSocket for UvUdpSocket {\n             let task_cell = Cell::new(task);\n             let alloc: AllocCallback = |_| unsafe { slice_to_uv_buf(*buf_ptr) };\n             do self.recv_start(alloc) |watcher, nread, _buf, addr, flags, status| {\n-                let _ = flags; // NOTE add handling for partials?\n+                let _ = flags; // TODO add handling for partials?\n \n                 watcher.recv_stop();\n "}]}