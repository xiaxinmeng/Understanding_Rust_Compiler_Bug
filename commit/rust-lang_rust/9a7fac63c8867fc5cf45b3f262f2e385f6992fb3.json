{"sha": "9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhN2ZhYzYzYzg4NjdmYzVjZjQ1YjNmMjYyZjJlMzg1ZjY5OTJmYjM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T03:09:17Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T03:09:17Z"}, "message": "Remove `format_and_emit_report` from the API\n\nAlso changes the header/footer stuff", "tree": {"sha": "5b92f86d78aa4d6a4f2d60174c8d71792af6b392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b92f86d78aa4d6a4f2d60174c8d71792af6b392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "html_url": "https://github.com/rust-lang/rust/commit/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95d6b648293b417309d0857b2a93c0cace70c53d", "url": "https://api.github.com/repos/rust-lang/rust/commits/95d6b648293b417309d0857b2a93c0cace70c53d", "html_url": "https://github.com/rust-lang/rust/commit/95d6b648293b417309d0857b2a93c0cace70c53d"}], "stats": {"total": 187, "additions": 94, "deletions": 93}, "files": [{"sha": "737eaa9367014ce4ed523a562ac04bfa3513849a", "filename": "src/bin/main.rs", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![cfg(not(test))]\n+#![feature(extern_prelude)]\n \n extern crate env_logger;\n #[macro_use]\n@@ -27,8 +28,8 @@ use failure::err_msg;\n use getopts::{Matches, Options};\n \n use rustfmt::{\n-    emit_post_matter, emit_pre_matter, format_and_emit_report, load_config, CliOptions, Color,\n-    Config, EmitMode, ErrorKind, FileLines, FileName, Input, Summary, Verbosity,\n+    checkstyle_footer, checkstyle_header, format_input, load_config, use_colored_tty, CliOptions,\n+    Color, Config, EmitMode, ErrorKind, FileLines, FileName, Input, Summary, Verbosity,\n };\n \n fn main() {\n@@ -221,12 +222,12 @@ fn execute(opts: &Options) -> Result<(ExitCodeMode, Summary), failure::Error> {\n             }\n \n             let mut error_summary = Summary::default();\n-            emit_pre_matter(&config)?;\n+            emit_pre_matter(&config);\n             match format_and_emit_report(Input::Text(input), &config) {\n                 Ok(summary) => error_summary.add(summary),\n                 Err(_) => error_summary.add_operational_error(),\n             }\n-            emit_post_matter(&config)?;\n+            emit_post_matter(&config);\n \n             Ok((ExitCodeMode::Normal, error_summary))\n         }\n@@ -251,7 +252,7 @@ fn format(\n         }\n     }\n \n-    emit_pre_matter(&config)?;\n+    emit_pre_matter(&config);\n     let mut error_summary = Summary::default();\n \n     for file in files {\n@@ -289,7 +290,7 @@ fn format(\n             }\n         }\n     }\n-    emit_post_matter(&config)?;\n+    emit_post_matter(&config);\n \n     // If we were given a path via dump-minimal-config, output any options\n     // that were used during formatting as TOML.\n@@ -307,6 +308,49 @@ fn format(\n     Ok((exit_mode, error_summary))\n }\n \n+fn format_and_emit_report(input: Input, config: &Config) -> Result<Summary, failure::Error> {\n+    let out = &mut stdout();\n+\n+    match format_input(input, config, Some(out)) {\n+        Ok((summary, report)) => {\n+            if report.has_warnings() {\n+                match term::stderr() {\n+                    Some(ref t)\n+                        if use_colored_tty(config.color())\n+                            && t.supports_color()\n+                            && t.supports_attr(term::Attr::Bold) =>\n+                    {\n+                        match report.fancy_print(term::stderr().unwrap()) {\n+                            Ok(..) => (),\n+                            Err(..) => panic!(\"Unable to write to stderr: {}\", report),\n+                        }\n+                    }\n+                    _ => eprintln!(\"{}\", report),\n+                }\n+            }\n+\n+            Ok(summary)\n+        }\n+        Err((msg, mut summary)) => {\n+            eprintln!(\"Error writing files: {}\", msg);\n+            summary.add_operational_error();\n+            Ok(summary)\n+        }\n+    }\n+}\n+\n+fn emit_pre_matter(config: &Config) {\n+    if config.emit_mode() == EmitMode::Checkstyle {\n+        println!(\"{}\", checkstyle_header());\n+    }\n+}\n+\n+fn emit_post_matter(config: &Config) {\n+    if config.emit_mode() == EmitMode::Checkstyle {\n+        println!(\"{}\", checkstyle_footer());\n+    }\n+}\n+\n fn print_usage_to_stdout(opts: &Options, reason: &str) {\n     let sep = if reason.is_empty() {\n         String::new()"}, {"sha": "7e8f83eaad527c7404af629147b0e63503702d0e", "filename": "src/checkstyle.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "patch": "@@ -13,24 +13,16 @@ use std::path::Path;\n \n use rustfmt_diff::{DiffLine, Mismatch};\n \n-pub fn output_header<T>(out: &mut T) -> Result<(), io::Error>\n-where\n-    T: Write,\n-{\n+pub fn header() -> String {\n     let mut xml_heading = String::new();\n     xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n     xml_heading.push_str(\"\\n\");\n     xml_heading.push_str(\"<checkstyle version=\\\"4.3\\\">\");\n-    write!(out, \"{}\", xml_heading)\n+    xml_heading\n }\n \n-pub fn output_footer<T>(out: &mut T) -> Result<(), io::Error>\n-where\n-    T: Write,\n-{\n-    let mut xml_tail = String::new();\n-    xml_tail.push_str(\"</checkstyle>\\n\");\n-    write!(out, \"{}\", xml_tail)\n+pub fn footer() -> String {\n+    \"</checkstyle>\\n\".to_owned()\n }\n \n pub fn output_checkstyle_file<T>("}, {"sha": "96d9abc2a35653e6784c38abd155d343beb75585", "filename": "src/filemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "patch": "@@ -36,13 +36,13 @@ where\n     T: Write,\n {\n     if config.emit_mode() == EmitMode::Checkstyle {\n-        ::checkstyle::output_header(out)?;\n+        write!(out, \"{}\", ::checkstyle::header())?;\n     }\n     for &(ref filename, ref text) in file_map {\n         write_file(text, filename, out, config)?;\n     }\n     if config.emit_mode() == EmitMode::Checkstyle {\n-        ::checkstyle::output_footer(out)?;\n+        write!(out, \"{}\", ::checkstyle::footer())?;\n     }\n \n     Ok(())"}, {"sha": "545756576c9927bb9f3a0f0a3251ff951f57bd57", "filename": "src/git-rustfmt/main.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Fgit-rustfmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Fgit-rustfmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgit-rustfmt%2Fmain.rs?ref=9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "patch": "@@ -15,13 +15,14 @@ extern crate log;\n extern crate rustfmt_nightly as rustfmt;\n \n use std::env;\n+use std::io::stdout;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n-use rustfmt::{format_and_emit_report, load_config, CliOptions, Input};\n+use rustfmt::{format_input, load_config, CliOptions, Input};\n \n fn prune_files(files: Vec<&str>) -> Vec<&str> {\n     let prefixes: Vec<_> = files\n@@ -73,7 +74,14 @@ fn fmt_files(files: &[&str]) -> i32 {\n \n     let mut exit_code = 0;\n     for file in files {\n-        let summary = format_and_emit_report(Input::File(PathBuf::from(file)), &config).unwrap();\n+        let (summary, report) = format_input(\n+            Input::File(PathBuf::from(file)),\n+            &config,\n+            Some(&mut stdout()),\n+        ).unwrap();\n+        if report.has_warnings() {\n+            eprintln!(\"{}\", report);\n+        }\n         if !summary.has_no_errors() {\n             exit_code = 1;\n         }"}, {"sha": "e84d2021f41ed7704a2fe334cd312dbef1b56a39", "filename": "src/lib.rs", "status": "modified", "additions": 24, "deletions": 66, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "patch": "@@ -13,11 +13,11 @@\n #![allow(unused_attributes)]\n #![feature(type_ascription)]\n #![feature(unicode_internals)]\n+#![feature(extern_prelude)]\n \n #[macro_use]\n extern crate derive_new;\n extern crate diff;\n-#[macro_use]\n extern crate failure;\n extern crate itertools;\n #[cfg(test)]\n@@ -32,14 +32,13 @@ extern crate serde;\n extern crate serde_derive;\n extern crate serde_json;\n extern crate syntax;\n-extern crate term;\n extern crate toml;\n extern crate unicode_segmentation;\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n use std::fmt;\n-use std::io::{self, stdout, Write};\n+use std::io::{self, Write};\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -55,13 +54,14 @@ use comment::{CharClasses, FullCodeCharKind, LineClasses};\n use failure::Fail;\n use issues::{BadIssueSeeker, Issue};\n use shape::Indent;\n-use utils::use_colored_tty;\n use visitor::{FmtVisitor, SnippetProvider};\n \n+pub use checkstyle::{footer as checkstyle_footer, header as checkstyle_header};\n pub use config::summary::Summary;\n pub use config::{\n     load_config, CliOptions, Color, Config, EmitMode, FileLines, FileName, Verbosity,\n };\n+pub use utils::use_colored_tty;\n \n #[macro_use]\n mod utils;\n@@ -129,6 +129,8 @@ pub enum ErrorKind {\n     BadAttr,\n     #[fail(display = \"io error: {}\", _0)]\n     IoError(io::Error),\n+    #[fail(display = \"Version mismatch\")]\n+    VersionMismatch,\n }\n \n impl From<io::Error> for ErrorKind {\n@@ -168,7 +170,7 @@ impl FormattingError {\n             ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace | ErrorKind::IoError(_) => {\n                 \"internal error:\"\n             }\n-            ErrorKind::LicenseCheck | ErrorKind::BadAttr => \"error:\",\n+            ErrorKind::LicenseCheck | ErrorKind::BadAttr | ErrorKind::VersionMismatch => \"error:\",\n             ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => \"warning:\",\n         }\n     }\n@@ -203,7 +205,7 @@ impl FormattingError {\n }\n \n #[derive(Clone)]\n-struct FormatReport {\n+pub struct FormatReport {\n     // Maps stringified file paths to their associated formatting errors.\n     internal: Rc<RefCell<(FormatErrorMap, ReportedErrors)>>,\n }\n@@ -246,7 +248,8 @@ impl FormatReport {\n                 ErrorKind::BadIssue(_)\n                 | ErrorKind::LicenseCheck\n                 | ErrorKind::DeprecatedAttr\n-                | ErrorKind::BadAttr => {\n+                | ErrorKind::BadAttr\n+                | ErrorKind::VersionMismatch => {\n                     errs.has_check_errors = true;\n                 }\n                 _ => {}\n@@ -263,11 +266,11 @@ impl FormatReport {\n             .sum()\n     }\n \n-    fn has_warnings(&self) -> bool {\n+    pub fn has_warnings(&self) -> bool {\n         self.warning_count() > 0\n     }\n \n-    fn print_warnings_fancy(\n+    pub fn fancy_print(\n         &self,\n         mut t: Box<term::Terminal<Output = io::Stderr>>,\n     ) -> Result<(), term::Error> {\n@@ -749,12 +752,22 @@ fn format_code_block(code_snippet: &str, config: &Config) -> Option<String> {\n     Some(result)\n }\n \n+#[derive(Debug)]\n+pub enum Input {\n+    File(PathBuf),\n+    Text(String),\n+}\n+\n pub fn format_input<T: Write>(\n     input: Input,\n     config: &Config,\n     out: Option<&mut T>,\n-) -> Result<Summary, (ErrorKind, Summary)> {\n-    syntax::with_globals(|| format_input_inner(input, config, out)).map(|tup| tup.0)\n+) -> Result<(Summary, FormatReport), (ErrorKind, Summary)> {\n+    if !config.version_meets_requirement() {\n+        return Err((ErrorKind::VersionMismatch, Summary::default()));\n+    }\n+\n+    syntax::with_globals(|| format_input_inner(input, config, out)).map(|tup| (tup.0, tup.2))\n }\n \n fn format_input_inner<T: Write>(\n@@ -950,61 +963,6 @@ fn get_modified_lines(\n     Ok(ModifiedLines { chunks })\n }\n \n-#[derive(Debug)]\n-pub enum Input {\n-    File(PathBuf),\n-    Text(String),\n-}\n-\n-pub fn format_and_emit_report(input: Input, config: &Config) -> Result<Summary, failure::Error> {\n-    if !config.version_meets_requirement() {\n-        return Err(format_err!(\"Version mismatch\"));\n-    }\n-    let out = &mut stdout();\n-    match syntax::with_globals(|| format_input_inner(input, config, Some(out))) {\n-        Ok((summary, _, report)) => {\n-            if report.has_warnings() {\n-                match term::stderr() {\n-                    Some(ref t)\n-                        if use_colored_tty(config.color())\n-                            && t.supports_color()\n-                            && t.supports_attr(term::Attr::Bold) =>\n-                    {\n-                        match report.print_warnings_fancy(term::stderr().unwrap()) {\n-                            Ok(..) => (),\n-                            Err(..) => panic!(\"Unable to write to stderr: {}\", report),\n-                        }\n-                    }\n-                    _ => eprintln!(\"{}\", report),\n-                }\n-            }\n-\n-            Ok(summary)\n-        }\n-        Err((msg, mut summary)) => {\n-            eprintln!(\"Error writing files: {}\", msg);\n-            summary.add_operational_error();\n-            Ok(summary)\n-        }\n-    }\n-}\n-\n-pub fn emit_pre_matter(config: &Config) -> Result<(), ErrorKind> {\n-    if config.emit_mode() == EmitMode::Checkstyle {\n-        let mut out = &mut stdout();\n-        checkstyle::output_header(&mut out)?;\n-    }\n-    Ok(())\n-}\n-\n-pub fn emit_post_matter(config: &Config) -> Result<(), ErrorKind> {\n-    if config.emit_mode() == EmitMode::Checkstyle {\n-        let mut out = &mut stdout();\n-        checkstyle::output_footer(&mut out)?;\n-    }\n-    Ok(())\n-}\n-\n #[cfg(test)]\n mod unit_tests {\n     use super::{format_code_block, format_snippet, Config};"}, {"sha": "33d7febbd64b81c586b7cfb59d6769b0105c8039", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "patch": "@@ -13,7 +13,6 @@ use diff;\n use std::collections::VecDeque;\n use std::io;\n use std::io::Write;\n-use term;\n use utils::use_colored_tty;\n \n #[derive(Debug, PartialEq)]"}, {"sha": "d5c0533fde62aea128a3699197276c0e0a28f06a", "filename": "src/test/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a7fac63c8867fc5cf45b3f262f2e385f6992fb3/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=9a7fac63c8867fc5cf45b3f262f2e385f6992fb3", "patch": "@@ -245,7 +245,7 @@ fn stdin_formatting_smoke_test() {\n     let mut config = Config::default();\n     config.set().emit_mode(EmitMode::Stdout);\n     let mut buf: Vec<u8> = vec![];\n-    let error_summary = format_input(input, &config, Some(&mut buf)).unwrap();\n+    let (error_summary, _) = format_input(input, &config, Some(&mut buf)).unwrap();\n     assert!(error_summary.has_no_errors());\n     //eprintln!(\"{:?}\", );\n     assert_eq!(buf, \"fn main() {}\\n\".as_bytes());\n@@ -280,7 +280,7 @@ fn format_lines_errors_are_reported() {\n     let input = Input::Text(format!(\"fn {}() {{}}\", long_identifier));\n     let mut config = Config::default();\n     config.set().error_on_line_overflow(true);\n-    let error_summary = format_input::<io::Stdout>(input, &config, None).unwrap();\n+    let (error_summary, _) = format_input::<io::Stdout>(input, &config, None).unwrap();\n     assert!(error_summary.has_formatting_errors());\n }\n \n@@ -291,7 +291,7 @@ fn format_lines_errors_are_reported_with_tabs() {\n     let mut config = Config::default();\n     config.set().error_on_line_overflow(true);\n     config.set().hard_tabs(true);\n-    let error_summary = format_input::<io::Stdout>(input, &config, None).unwrap();\n+    let (error_summary, _) = format_input::<io::Stdout>(input, &config, None).unwrap();\n     assert!(error_summary.has_formatting_errors());\n }\n \n@@ -776,7 +776,7 @@ impl ConfigCodeBlock {\n         config.set().emit_mode(EmitMode::Stdout);\n         let mut buf: Vec<u8> = vec![];\n \n-        let error_summary = format_input(input, &config, Some(&mut buf)).unwrap();\n+        let (error_summary, _) = format_input(input, &config, Some(&mut buf)).unwrap();\n \n         !self.has_parsing_errors(error_summary)\n             && !self.formatted_has_diff(&String::from_utf8(buf).unwrap())"}]}