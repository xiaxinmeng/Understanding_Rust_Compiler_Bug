{"sha": "9c766db5ff9dad3ca13539c186f40f657380a831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNzY2ZGI1ZmY5ZGFkM2NhMTM1MzljMTg2ZjQwZjY1NzM4MGE4MzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T11:25:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T11:25:48Z"}, "message": "Remove ids module", "tree": {"sha": "f2e52047aa684cc4d8b253b3071cfa5a2d753ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2e52047aa684cc4d8b253b3071cfa5a2d753ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c766db5ff9dad3ca13539c186f40f657380a831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c766db5ff9dad3ca13539c186f40f657380a831", "html_url": "https://github.com/rust-lang/rust/commit/9c766db5ff9dad3ca13539c186f40f657380a831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c766db5ff9dad3ca13539c186f40f657380a831/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53506a755220557a558be4da244b70d79f5b0fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/53506a755220557a558be4da244b70d79f5b0fa9", "html_url": "https://github.com/rust-lang/rust/commit/53506a755220557a558be4da244b70d79f5b0fa9"}], "stats": {"total": 74, "additions": 33, "deletions": 41}, "files": [{"sha": "a9dab2d2500eb3fc05c27da81f13c012f668a44b", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=9c766db5ff9dad3ca13539c186f40f657380a831", "patch": "@@ -5,7 +5,6 @@ use std::sync::Arc;\n use ra_db::salsa;\n \n use crate::{\n-    ids,\n     ty::{\n         method_resolution::CrateImplBlocks,\n         traits::{AssocTyValue, Impl},\n@@ -71,11 +70,14 @@ pub trait HirDatabase: DefDatabase {\n \n     // Interned IDs for Chalk integration\n     #[salsa::interned]\n-    fn intern_type_ctor(&self, type_ctor: TypeCtor) -> ids::TypeCtorId;\n+    fn intern_type_ctor(&self, type_ctor: TypeCtor) -> crate::ty::TypeCtorId;\n     #[salsa::interned]\n-    fn intern_chalk_impl(&self, impl_: Impl) -> ids::GlobalImplId;\n+    fn intern_chalk_impl(&self, impl_: Impl) -> crate::ty::traits::GlobalImplId;\n     #[salsa::interned]\n-    fn intern_assoc_ty_value(&self, assoc_ty_value: AssocTyValue) -> ids::AssocTyValueId;\n+    fn intern_assoc_ty_value(\n+        &self,\n+        assoc_ty_value: AssocTyValue,\n+    ) -> crate::ty::traits::AssocTyValueId;\n \n     #[salsa::invoke(crate::ty::traits::chalk::associated_ty_data_query)]\n     fn associated_ty_data("}, {"sha": "67de8b243ec82d0f56d811148ed1acfc60a493ea", "filename": "crates/ra_hir/src/ids.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/53506a755220557a558be4da244b70d79f5b0fa9/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53506a755220557a558be4da244b70d79f5b0fa9/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=53506a755220557a558be4da244b70d79f5b0fa9", "patch": "@@ -1,26 +0,0 @@\n-//! hir makes heavy use of ids: integer (u32) handlers to various things. You\n-//! can think of id as a pointer (but without a lifetime) or a file descriptor\n-//! (but for hir objects).\n-//!\n-//! This module defines a bunch of ids we are using. The most important ones are\n-//! probably `HirFileId` and `DefId`.\n-\n-use ra_db::{impl_intern_key, salsa};\n-\n-/// This exists just for Chalk, because Chalk just has a single `StructId` where\n-/// we have different kinds of ADTs, primitive types and special type\n-/// constructors like tuples and function pointers.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TypeCtorId(salsa::InternId);\n-impl_intern_key!(TypeCtorId);\n-\n-/// This exists just for Chalk, because our ImplIds are only unique per module.\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct GlobalImplId(salsa::InternId);\n-impl_intern_key!(GlobalImplId);\n-\n-/// This exists just for Chalk, because it needs a unique ID for each associated\n-/// type value in an impl (even synthetic ones).\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct AssocTyValueId(salsa::InternId);\n-impl_intern_key!(AssocTyValueId);"}, {"sha": "8c589c7282ea30863e0df5d87692eed6613306d0", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=9c766db5ff9dad3ca13539c186f40f657380a831", "patch": "@@ -31,7 +31,6 @@ pub mod debug;\n pub mod db;\n pub mod source_binder;\n \n-mod ids;\n mod ty;\n mod impl_block;\n mod expr;"}, {"sha": "309bd2727d25724fda934ceb9ff1e654716d829f", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=9c766db5ff9dad3ca13539c186f40f657380a831", "patch": "@@ -18,6 +18,7 @@ use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n use hir_def::{generics::GenericParams, AdtId};\n+use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n     db::HirDatabase, expr::ExprId, util::make_mut_slice, Adt, Crate, DefWithBody, FloatTy,\n@@ -114,6 +115,13 @@ pub enum TypeCtor {\n     Closure { def: DefWithBody, expr: ExprId },\n }\n \n+/// This exists just for Chalk, because Chalk just has a single `StructId` where\n+/// we have different kinds of ADTs, primitive types and special type\n+/// constructors like tuples and function pointers.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct TypeCtorId(salsa::InternId);\n+impl_intern_key!(TypeCtorId);\n+\n impl TypeCtor {\n     pub fn num_ty_params(self, db: &impl HirDatabase) -> usize {\n         match self {"}, {"sha": "268fa09e4a26c5bef71b14d60e9ef732d066bb9f", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=9c766db5ff9dad3ca13539c186f40f657380a831", "patch": "@@ -3,7 +3,7 @@ use std::sync::{Arc, Mutex};\n \n use chalk_ir::{cast::Cast, family::ChalkIr};\n use log::debug;\n-use ra_db::salsa;\n+use ra_db::{impl_intern_key, salsa};\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n@@ -304,6 +304,10 @@ pub enum Impl {\n     /// Closure types implement the Fn traits synthetically.\n     ClosureFnTraitImpl(ClosureFnTraitImplData),\n }\n+/// This exists just for Chalk, because our ImplIds are only unique per module.\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct GlobalImplId(salsa::InternId);\n+impl_intern_key!(GlobalImplId);\n \n /// An associated type value. Usually this comes from a `type` declaration\n /// inside an impl block, but for built-in impls we have to synthesize it.\n@@ -315,3 +319,8 @@ pub enum AssocTyValue {\n     /// The output type of the Fn trait implementation.\n     ClosureFnTraitImplOutput(ClosureFnTraitImplData),\n }\n+/// This exists just for Chalk, because it needs a unique ID for each associated\n+/// type value in an impl (even synthetic ones).\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct AssocTyValueId(salsa::InternId);\n+impl_intern_key!(AssocTyValueId);"}, {"sha": "9efdc53c45fecfe6d046fb91710ee56bd27059e0", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c766db5ff9dad3ca13539c186f40f657380a831/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=9c766db5ff9dad3ca13539c186f40f657380a831", "patch": "@@ -847,38 +847,38 @@ fn id_to_chalk<T: InternKey>(salsa_id: T) -> chalk_ir::RawId {\n     chalk_ir::RawId { index: salsa_id.as_intern_id().as_u32() }\n }\n \n-impl From<chalk_ir::StructId> for crate::ids::TypeCtorId {\n+impl From<chalk_ir::StructId> for crate::ty::TypeCtorId {\n     fn from(struct_id: chalk_ir::StructId) -> Self {\n         id_from_chalk(struct_id.0)\n     }\n }\n \n-impl From<crate::ids::TypeCtorId> for chalk_ir::StructId {\n-    fn from(type_ctor_id: crate::ids::TypeCtorId) -> Self {\n+impl From<crate::ty::TypeCtorId> for chalk_ir::StructId {\n+    fn from(type_ctor_id: crate::ty::TypeCtorId) -> Self {\n         chalk_ir::StructId(id_to_chalk(type_ctor_id))\n     }\n }\n \n-impl From<chalk_ir::ImplId> for crate::ids::GlobalImplId {\n+impl From<chalk_ir::ImplId> for crate::ty::traits::GlobalImplId {\n     fn from(impl_id: chalk_ir::ImplId) -> Self {\n         id_from_chalk(impl_id.0)\n     }\n }\n \n-impl From<crate::ids::GlobalImplId> for chalk_ir::ImplId {\n-    fn from(impl_id: crate::ids::GlobalImplId) -> Self {\n+impl From<crate::ty::traits::GlobalImplId> for chalk_ir::ImplId {\n+    fn from(impl_id: crate::ty::traits::GlobalImplId) -> Self {\n         chalk_ir::ImplId(id_to_chalk(impl_id))\n     }\n }\n \n-impl From<chalk_rust_ir::AssociatedTyValueId> for crate::ids::AssocTyValueId {\n+impl From<chalk_rust_ir::AssociatedTyValueId> for crate::ty::traits::AssocTyValueId {\n     fn from(id: chalk_rust_ir::AssociatedTyValueId) -> Self {\n         id_from_chalk(id.0)\n     }\n }\n \n-impl From<crate::ids::AssocTyValueId> for chalk_rust_ir::AssociatedTyValueId {\n-    fn from(assoc_ty_value_id: crate::ids::AssocTyValueId) -> Self {\n+impl From<crate::ty::traits::AssocTyValueId> for chalk_rust_ir::AssociatedTyValueId {\n+    fn from(assoc_ty_value_id: crate::ty::traits::AssocTyValueId) -> Self {\n         chalk_rust_ir::AssociatedTyValueId(id_to_chalk(assoc_ty_value_id))\n     }\n }"}]}