{"sha": "0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b", "node_id": "C_kwDOAAsO6NoAKDBlYmI1Y2JhYjYyZTQyYjJlNzFmZjhiZmU2ZTMwYThhNTFiNTlkNGI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-05-15T09:56:31Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-05-15T10:47:37Z"}, "message": "Add test coverage of more varieties of panic temporaries", "tree": {"sha": "61deacbfe7282fb1b8d83d159c158cceb55347f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61deacbfe7282fb1b8d83d159c158cceb55347f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmRiDckACgkQ+boUO5X/\nbYKRehAAlpV+g5Y7vJ2RhaXcJvI4OjS5HZ2MYeFlZ9ciVK9+3Pb7NowIkKcS/aEX\nLRybG+n3QRaIa1UBd865PVecnKfad64Ty/ktqw4/bDQTJukYxL1uq8ZZtHgtRDDu\nQ564TAnh0yDfMTwYNT9bDCCKZgNKgtJOgj2SdCFAxPQbhGk+KcMQg1uCqisecL4J\nJ37uSW6eMVFD5eLjPCpYHvqsK4MeBnB4rXNMRYTKvoN2xI1e7vLrvPZIest7tzA8\nGLAQ2gN4s42Vt7hsb7bTzkZxpGW7Y0g5C1pQygHcxIEV21e9kX/wQ5HHFkfv5IIz\nV4w6ebwhSatcAI3srntAf5PIlxLuNi4PKjkoxuYQn0BXJv95Ggc7EhggXBKnnY/7\nrh8hCVYStP69uvB7D+KmtXRcvtDDX51ndPZFxxK9/wUJ662SSq0Y6wtSRr51PdTd\nQn7mnC6+Di6JjMB1Ps/x4Zr6u59zXxEuH7coIhLoAX599jfxWSA+XKU38UoP+oeB\n4rZSrCT75EGfeRtiPuSFzDWuX26TjIKl2pZ9LhPwoSlgNXwLiXfIAtBk3lVcmI6U\nyDGHSxQyplrsaZj2ptcr0plittxL2f96HVmLBEgoa66XM8FAlE27nckBwU7/PXn2\npzlNA0AoS+kHr5MCw9f9Mx2SL1u1YLjjMFgp4C6/cxiYz6nN/Bc=\n=wpCT\n-----END PGP SIGNATURE-----", "payload": "tree 61deacbfe7282fb1b8d83d159c158cceb55347f1\nparent 0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65\nauthor David Tolnay <dtolnay@gmail.com> 1684144591 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1684147657 -0700\n\nAdd test coverage of more varieties of panic temporaries\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b", "html_url": "https://github.com/rust-lang/rust/commit/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65", "html_url": "https://github.com/rust-lang/rust/commit/0bcfd2d96efe7a2cb5205c3af1b9eea17423fe65"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "d914df380629941c3f93731c07a394d4b944accc", "filename": "tests/ui/macros/panic-temporaries-2018.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b/tests%2Fui%2Fmacros%2Fpanic-temporaries-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b/tests%2Fui%2Fmacros%2Fpanic-temporaries-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries-2018.rs?ref=0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b", "patch": "@@ -0,0 +1,55 @@\n+// check-pass\n+// edition:2018\n+\n+#![allow(non_fmt_panics, unreachable_code)]\n+\n+use std::fmt::{self, Display};\n+use std::marker::PhantomData;\n+\n+struct NotSend {\n+    marker: PhantomData<*const u8>,\n+}\n+\n+const NOT_SEND: NotSend = NotSend { marker: PhantomData };\n+\n+impl Display for NotSend {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        formatter.write_str(\"this value does not implement Send\")\n+    }\n+}\n+\n+async fn f(_: u8) {}\n+\n+// Exercises this matcher in panic_2015:\n+// ($fmt:expr, $($arg:tt)+) => $crate::panicking::panic_fmt(...)\n+async fn panic_fmt() {\n+    // Panic returns `!`, so the await is never reached, and in particular the\n+    // temporaries inside the formatting machinery are not still alive at the\n+    // await point.\n+    let todo = \"...\";\n+    f(panic!(\"not yet implemented: {}\", todo)).await;\n+}\n+\n+// Exercises (\"{}\", $arg:expr) => $crate::panicking::panic_display(&$arg)\n+async fn panic_display() {\n+    f(panic!(\"{}\", NOT_SEND)).await;\n+}\n+\n+// Exercises ($msg:expr) => $crate::panicking::panic_str($msg)\n+async fn panic_str() {\n+    f(panic!((NOT_SEND, \"...\").1)).await;\n+}\n+\n+// Exercises ($msg:expr) => $crate::panicking::unreachable_display(&$msg)\n+async fn unreachable_display() {\n+    f(unreachable!(NOT_SEND)).await;\n+}\n+\n+fn require_send(_: impl Send) {}\n+\n+fn main() {\n+    require_send(panic_fmt());\n+    require_send(panic_display());\n+    require_send(panic_str());\n+    require_send(unreachable_display());\n+}"}, {"sha": "db65601fb73eef5147de874e9112d6f567990303", "filename": "tests/ui/macros/panic-temporaries.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs?ref=0ebb5cbab62e42b2e71ff8bfe6e30a8a51b59d4b", "patch": "@@ -3,17 +3,41 @@\n \n #![allow(unreachable_code)]\n \n+use std::fmt::{self, Display};\n+use std::marker::PhantomData;\n+\n+struct NotSend {\n+    marker: PhantomData<*const u8>,\n+}\n+\n+const NOT_SEND: NotSend = NotSend { marker: PhantomData };\n+\n+impl Display for NotSend {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        formatter.write_str(\"this value does not implement Send\")\n+    }\n+}\n+\n async fn f(_: u8) {}\n \n-async fn g() {\n-    // Todo returns `!`, so the await is never reached, and in particular the\n+// Exercises this matcher in panic_2021:\n+// ($($t:tt)+) => $crate::panicking::panic_fmt(...)\n+async fn panic_fmt() {\n+    // Panic returns `!`, so the await is never reached, and in particular the\n     // temporaries inside the formatting machinery are not still alive at the\n     // await point.\n-    f(todo!(\"...\")).await;\n+    let todo = \"...\";\n+    f(panic!(\"not yet implemented: {}\", todo)).await;\n+}\n+\n+// Exercises (\"{}\", $arg:expr) => $crate::panicking::panic_display(&$arg)\n+async fn panic_display() {\n+    f(panic!(\"{}\", NOT_SEND)).await;\n }\n \n fn require_send(_: impl Send) {}\n \n fn main() {\n-    require_send(g());\n+    require_send(panic_fmt());\n+    require_send(panic_display());\n }"}]}