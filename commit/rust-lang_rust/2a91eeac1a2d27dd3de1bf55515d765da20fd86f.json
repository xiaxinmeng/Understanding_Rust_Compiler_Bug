{"sha": "2a91eeac1a2d27dd3de1bf55515d765da20fd86f", "node_id": "C_kwDOAAsO6NoAKDJhOTFlZWFjMWEyZDI3ZGQzZGUxYmY1NTUxNWQ3NjVkYTIwZmQ4NmY", "commit": {"author": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "eduardosm-dev@e64.io", "date": "2022-04-13T13:50:23Z"}, "committer": {"name": "Eduardo S\u00e1nchez Mu\u00f1oz", "email": "eduardosm-dev@e64.io", "date": "2022-04-14T17:35:40Z"}, "message": "Implement `core::ptr::Unique` on top of `NonNull`\n\nRemoves the use `rustc_layout_scalar_valid_range_start` and some `unsafe` blocks.", "tree": {"sha": "66cd065949e12678bb71a09c6ac2ba4fe1d032c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66cd065949e12678bb71a09c6ac2ba4fe1d032c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a91eeac1a2d27dd3de1bf55515d765da20fd86f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a91eeac1a2d27dd3de1bf55515d765da20fd86f", "html_url": "https://github.com/rust-lang/rust/commit/2a91eeac1a2d27dd3de1bf55515d765da20fd86f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a91eeac1a2d27dd3de1bf55515d765da20fd86f/comments", "author": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eduardosm", "id": 761151, "node_id": "MDQ6VXNlcjc2MTE1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/761151?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eduardosm", "html_url": "https://github.com/eduardosm", "followers_url": "https://api.github.com/users/eduardosm/followers", "following_url": "https://api.github.com/users/eduardosm/following{/other_user}", "gists_url": "https://api.github.com/users/eduardosm/gists{/gist_id}", "starred_url": "https://api.github.com/users/eduardosm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eduardosm/subscriptions", "organizations_url": "https://api.github.com/users/eduardosm/orgs", "repos_url": "https://api.github.com/users/eduardosm/repos", "events_url": "https://api.github.com/users/eduardosm/events{/privacy}", "received_events_url": "https://api.github.com/users/eduardosm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7575f9670f3c837def3d186ae09366c75c7632e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7575f9670f3c837def3d186ae09366c75c7632e", "html_url": "https://github.com/rust-lang/rust/commit/e7575f9670f3c837def3d186ae09366c75c7632e"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "813f6ed58e7ff215c13d4b2492a8ce32c6e0ca63", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a91eeac1a2d27dd3de1bf55515d765da20fd86f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a91eeac1a2d27dd3de1bf55515d765da20fd86f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2a91eeac1a2d27dd3de1bf55515d765da20fd86f", "patch": "@@ -119,12 +119,14 @@\n #![feature(const_likely)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]\n #![feature(const_ops)]\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_pin)]\n #![feature(const_replace)]\n+#![feature(const_ptr_as_ref)]\n #![feature(const_ptr_is_null)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]"}, {"sha": "64616142b4188442863eab4ad527f4f9452cfcc3", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2a91eeac1a2d27dd3de1bf55515d765da20fd86f/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a91eeac1a2d27dd3de1bf55515d765da20fd86f/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=2a91eeac1a2d27dd3de1bf55515d765da20fd86f", "patch": "@@ -1,8 +1,8 @@\n use crate::convert::From;\n use crate::fmt;\n use crate::marker::{PhantomData, Unsize};\n-use crate::mem;\n use crate::ops::{CoerceUnsized, DispatchFromDyn};\n+use crate::ptr::NonNull;\n \n /// A wrapper around a raw non-null `*mut T` that indicates that the possessor\n /// of this wrapper owns the referent. Useful for building abstractions like\n@@ -32,9 +32,8 @@ use crate::ops::{CoerceUnsized, DispatchFromDyn};\n )]\n #[doc(hidden)]\n #[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(1)]\n pub struct Unique<T: ?Sized> {\n-    pointer: *const T,\n+    pointer: NonNull<T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n     // for dropck to understand that we logically own a `T`.\n     //\n@@ -71,9 +70,7 @@ impl<T: Sized> Unique<T> {\n     #[must_use]\n     #[inline]\n     pub const fn dangling() -> Self {\n-        // SAFETY: mem::align_of() returns a valid, non-null pointer. The\n-        // conditions to call new_unchecked() are thus respected.\n-        unsafe { Unique::new_unchecked(crate::ptr::invalid_mut::<T>(mem::align_of::<T>())) }\n+        Self::from(NonNull::dangling())\n     }\n }\n \n@@ -87,15 +84,14 @@ impl<T: ?Sized> Unique<T> {\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         // SAFETY: the caller must guarantee that `ptr` is non-null.\n-        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }\n+        unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }\n     }\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n     #[inline]\n     pub const fn new(ptr: *mut T) -> Option<Self> {\n-        if !ptr.is_null() {\n-            // SAFETY: The pointer has already been checked and is not null.\n-            Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n+        if let Some(pointer) = NonNull::new(ptr) {\n+            Some(Unique { pointer, _marker: PhantomData })\n         } else {\n             None\n         }\n@@ -105,7 +101,7 @@ impl<T: ?Sized> Unique<T> {\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n-        self.pointer as *mut T\n+        self.pointer.as_ptr()\n     }\n \n     /// Dereferences the content.\n@@ -118,7 +114,7 @@ impl<T: ?Sized> Unique<T> {\n     pub const unsafe fn as_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n-        unsafe { &*self.as_ptr() }\n+        unsafe { self.pointer.as_ref() }\n     }\n \n     /// Mutably dereferences the content.\n@@ -131,17 +127,14 @@ impl<T: ?Sized> Unique<T> {\n     pub const unsafe fn as_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n-        unsafe { &mut *self.as_ptr() }\n+        unsafe { self.pointer.as_mut() }\n     }\n \n     /// Casts to a pointer of another type.\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n-        // SAFETY: Unique::new_unchecked() creates a new unique and needs\n-        // the given pointer to not be null.\n-        // Since we are passing self as a pointer, it cannot be null.\n-        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }\n+        Unique::from(self.pointer.cast())\n     }\n }\n \n@@ -184,7 +177,17 @@ impl<T: ?Sized> const From<&mut T> for Unique<T> {\n     /// This conversion is infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n-        // SAFETY: A mutable reference cannot be null\n-        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n+        Self::from(NonNull::from(reference))\n+    }\n+}\n+\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n+impl<T: ?Sized> const From<NonNull<T>> for Unique<T> {\n+    /// Converts a `NonNull<T>` to a `Unique<T>`.\n+    ///\n+    /// This conversion is infallible since `NonNull` cannot be null.\n+    #[inline]\n+    fn from(pointer: NonNull<T>) -> Self {\n+        Unique { pointer, _marker: PhantomData }\n     }\n }"}]}