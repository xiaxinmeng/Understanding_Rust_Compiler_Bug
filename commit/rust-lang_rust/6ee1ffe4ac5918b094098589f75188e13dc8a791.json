{"sha": "6ee1ffe4ac5918b094098589f75188e13dc8a791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZTFmZmU0YWM1OTE4YjA5NDA5ODU4OWY3NTE4OGUxM2RjOGE3OTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-07T19:56:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-07T20:31:12Z"}, "message": "Rename encoder::ty_str to encoded_str", "tree": {"sha": "592402eb56c12a3d19f64d9c96aaa6918e8f9b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/592402eb56c12a3d19f64d9c96aaa6918e8f9b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee1ffe4ac5918b094098589f75188e13dc8a791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1ffe4ac5918b094098589f75188e13dc8a791", "html_url": "https://github.com/rust-lang/rust/commit/6ee1ffe4ac5918b094098589f75188e13dc8a791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee1ffe4ac5918b094098589f75188e13dc8a791/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de88739350873142d10ffed0ec1ab6600eac20b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/de88739350873142d10ffed0ec1ab6600eac20b8", "html_url": "https://github.com/rust-lang/rust/commit/de88739350873142d10ffed0ec1ab6600eac20b8"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "948263f4b3fa0b5dabbeb730bf20f058d73e26ce", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ee1ffe4ac5918b094098589f75188e13dc8a791/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee1ffe4ac5918b094098589f75188e13dc8a791/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=6ee1ffe4ac5918b094098589f75188e13dc8a791", "patch": "@@ -408,7 +408,7 @@ fn symbol_hash(ty::ctxt tcx, sha1 sha, &ty::t t,\n     // FIXME: This wants to be link_meta.meta_hash\n     sha.input_str(link_meta.name);\n     sha.input_str(\"-\");\n-    sha.input_str(encoder::ty_str(tcx, t));\n+    sha.input_str(encoder::encoded_ty(tcx, t));\n     auto hash = truncated_sha1_result(sha);\n     // Prefix with _ so that it never blends into adjacent digits\n "}, {"sha": "b505f5fb87b3474df03acd01ee4615ccd0816385", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ee1ffe4ac5918b094098589f75188e13dc8a791/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee1ffe4ac5918b094098589f75188e13dc8a791/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=6ee1ffe4ac5918b094098589f75188e13dc8a791", "patch": "@@ -17,7 +17,7 @@ import middle::ty::node_id_to_monotype;\n import front::attr;\n \n export encode_metadata;\n-export ty_str;\n+export encoded_ty;\n \n // Path table encoding\n fn encode_name(&ebml::writer ebml_w, &str name) {\n@@ -541,7 +541,7 @@ fn encode_metadata(&@crate_ctxt cx, &@crate crate) -> str {\n }\n \n // Get the encoded string for a type\n-fn ty_str(&ty::ctxt tcx, &ty::t t) -> str {\n+fn encoded_ty(&ty::ctxt tcx, &ty::t t) -> str {\n     auto cx = @rec(ds = def_to_str,\n                    tcx = tcx,\n                    abbrevs = metadata::tyencode::ac_no_abbrevs);"}, {"sha": "381b595435b7ea23e32cbd892ac7baa75578972e", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ee1ffe4ac5918b094098589f75188e13dc8a791/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee1ffe4ac5918b094098589f75188e13dc8a791/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=6ee1ffe4ac5918b094098589f75188e13dc8a791", "patch": "@@ -152,7 +152,7 @@ fn ty_to_str(&ctxt cx, &t typ) -> str {\n }\n \n fn ty_to_short_str(&ctxt cx, t typ) -> str {\n-    auto s = encoder::ty_str(cx, typ);\n+    auto s = encoder::encoded_ty(cx, typ);\n     if (str::byte_len(s) >= 32u) { s = str::substr(s, 0u, 32u); }\n     ret s;\n }"}]}