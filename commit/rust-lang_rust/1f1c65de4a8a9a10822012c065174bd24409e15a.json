{"sha": "1f1c65de4a8a9a10822012c065174bd24409e15a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMWM2NWRlNGE4YTlhMTA4MjIwMTJjMDY1MTc0YmQyNDQwOWUxNWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-10T16:35:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-10T16:35:34Z"}, "message": "Rollup merge of #50590 - estebank:off-by-one, r=nikomatsakis\n\nFix tuple struct field spans\n\nFix #50578. Will have a merge conflict with #50536.", "tree": {"sha": "35736637c19eed73cb76d85c90ff5041dfe4d6a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35736637c19eed73cb76d85c90ff5041dfe4d6a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f1c65de4a8a9a10822012c065174bd24409e15a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9HTWCRBK7hj4Ov3rIwAAdHIIAHw9CoKeK+Y7jI8voluqGMM+\n0m7dg9UCen/hzbVhy268bmg5vN4ALfpp01JesQ8uiCrQ1qjuEV+tRm1f1Rr2ouAi\nRx550VI7VkE67prIp9ighkSn9aeCI9r9UfDH1TPaxXX7LcI4B5GCFD1+n3LyJ9X3\nyXTsc7E9m91qE7P8VZBueDqnMqP+FUO3ilwimiHxh8WWniZBvJYSu1uNkXpGWyOh\nAGOIBWr6wR4y2X30bhy30s5buYpYOum0TwGP1ix3C20lqD+EWo1/4ns7LYIrsO0H\nO4/6qhtvh8wGTLkKNEMioIIWevaRIGMc1YSBNhmjbUNj264IOxa4OVvD1qqRQYQ=\n=d+bT\n-----END PGP SIGNATURE-----\n", "payload": "tree 35736637c19eed73cb76d85c90ff5041dfe4d6a8\nparent c798cbbb2cd5a0300954cdcb08f2daa0817898ff\nparent 85f57389bf42c3a3ab648f4662580c84d9bfdd4d\nauthor Alex Crichton <alex@alexcrichton.com> 1525970134 -0500\ncommitter GitHub <noreply@github.com> 1525970134 -0500\n\nRollup merge of #50590 - estebank:off-by-one, r=nikomatsakis\n\nFix tuple struct field spans\n\nFix #50578. Will have a merge conflict with #50536.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f1c65de4a8a9a10822012c065174bd24409e15a", "html_url": "https://github.com/rust-lang/rust/commit/1f1c65de4a8a9a10822012c065174bd24409e15a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f1c65de4a8a9a10822012c065174bd24409e15a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c798cbbb2cd5a0300954cdcb08f2daa0817898ff", "html_url": "https://github.com/rust-lang/rust/commit/c798cbbb2cd5a0300954cdcb08f2daa0817898ff"}, {"sha": "85f57389bf42c3a3ab648f4662580c84d9bfdd4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f57389bf42c3a3ab648f4662580c84d9bfdd4d", "html_url": "https://github.com/rust-lang/rust/commit/85f57389bf42c3a3ab648f4662580c84d9bfdd4d"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "49b30c6f460fe61ac544148ebc6ed7af03dfc5e9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -5741,7 +5741,7 @@ impl<'a> Parser<'a> {\n                 let vis = p.parse_visibility(true)?;\n                 let ty = p.parse_ty()?;\n                 Ok(StructField {\n-                    span: lo.to(p.span),\n+                    span: lo.to(ty.span),\n                     vis,\n                     ident: None,\n                     id: ast::DUMMY_NODE_ID,"}, {"sha": "fe3e294d9e32ad24112df7ce06fad8b75e9be7e5", "filename": "src/test/ui/issue-3008-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Fissue-3008-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Fissue-3008-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3008-1.stderr?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -5,7 +5,7 @@ LL | enum Bar {\n    | ^^^^^^^^ recursive type has infinite size\n ...\n LL |     BarSome(Bar)\n-   |             ---- recursive without indirection\n+   |             --- recursive without indirection\n    |\n    = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n "}, {"sha": "b7e359af64ad06ea0c0f78ffc4e7f9e0c204b186", "filename": "src/test/ui/issue-32326.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Fissue-32326.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Fissue-32326.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32326.stderr?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -4,7 +4,7 @@ error[E0072]: recursive type `Expr` has infinite size\n LL | enum Expr { //~ ERROR E0072\n    | ^^^^^^^^^ recursive type has infinite size\n LL |     Plus(Expr, Expr),\n-   |          ----- ----- recursive without indirection\n+   |          ----  ---- recursive without indirection\n    |          |\n    |          recursive without indirection\n    |"}, {"sha": "5071465b5f647569c5c5e754601658179bb411fe", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.rs?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -20,14 +20,14 @@ enum Foo<'a, T> {\n \n // Type U needs to outlive lifetime 'b\n struct Bar<'b, U> {\n-    field2: &'b U //~ ERROR 23:5: 23:18: the parameter type `U` may not live long enough [E0309]\n+    field2: &'b U //~ ERROR the parameter type `U` may not live long enough [E0309]\n }\n \n \n \n // Type K needs to outlive lifetime 'c.\n enum Ying<'c, K> {\n-    One(&'c Yang<K>) //~ ERROR 30:9: 30:21: the parameter type `K` may not live long enough [E0309]\n+    One(&'c Yang<K>) //~ ERROR the parameter type `K` may not live long enough [E0309]\n }\n \n struct Yang<V> {"}, {"sha": "604dd0b43c04a775346316858a92a415f0fbd987", "filename": "src/test/ui/rfc-2093-infer-outlives/enum.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fenum.stderr?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -3,28 +3,28 @@ error[E0309]: the parameter type `U` may not live long enough\n    |\n LL | struct Bar<'b, U> {\n    |                - help: consider adding an explicit lifetime bound `U: 'b`...\n-LL |     field2: &'b U //~ ERROR 23:5: 23:18: the parameter type `U` may not live long enough [E0309]\n+LL |     field2: &'b U //~ ERROR the parameter type `U` may not live long enough [E0309]\n    |     ^^^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'b U` does not outlive the data it points at\n   --> $DIR/enum.rs:23:5\n    |\n-LL |     field2: &'b U //~ ERROR 23:5: 23:18: the parameter type `U` may not live long enough [E0309]\n+LL |     field2: &'b U //~ ERROR the parameter type `U` may not live long enough [E0309]\n    |     ^^^^^^^^^^^^^\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/enum.rs:30:9\n    |\n LL | enum Ying<'c, K> {\n    |               - help: consider adding an explicit lifetime bound `K: 'c`...\n-LL |     One(&'c Yang<K>) //~ ERROR 30:9: 30:21: the parameter type `K` may not live long enough [E0309]\n-   |         ^^^^^^^^^^^^\n+LL |     One(&'c Yang<K>) //~ ERROR the parameter type `K` may not live long enough [E0309]\n+   |         ^^^^^^^^^^^\n    |\n note: ...so that the reference type `&'c Yang<K>` does not outlive the data it points at\n   --> $DIR/enum.rs:30:9\n    |\n-LL |     One(&'c Yang<K>) //~ ERROR 30:9: 30:21: the parameter type `K` may not live long enough [E0309]\n-   |         ^^^^^^^^^^^^\n+LL |     One(&'c Yang<K>) //~ ERROR the parameter type `K` may not live long enough [E0309]\n+   |         ^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2949a22747b8781639bdeba48e205aeebeea74d8", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -32,7 +32,7 @@ LL | #[derive(Copy)] //~ ERROR may not be implemented for this type\n    |          ^^^^\n LL | enum EFoo2<'a> {\n LL |     Bar(&'a mut bool),\n-   |         ------------- this field does not implement `Copy`\n+   |         ------------ this field does not implement `Copy`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ba80af6c7e037b7739310d06d14d04b020092b8d", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -22,7 +22,7 @@ error[E0277]: the trait bound `T: std::marker::Sized` is not satisfied\n   --> $DIR/union-sized-field.rs:23:11\n    |\n LL |     Value(T), //~ ERROR the trait bound `T: std::marker::Sized` is not satisfied\n-   |           ^^ `T` does not have a constant size known at compile-time\n+   |           ^ `T` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Sized` bound"}, {"sha": "0e18efbf9da3eda5b87c4e8d72e1e123bca283e8", "filename": "src/test/ui/unsized-enum2.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f1c65de4a8a9a10822012c065174bd24409e15a/src%2Ftest%2Fui%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.stderr?ref=1f1c65de4a8a9a10822012c065174bd24409e15a", "patch": "@@ -2,7 +2,7 @@ error[E0277]: the trait bound `W: std::marker::Sized` is not satisfied\n   --> $DIR/unsized-enum2.rs:33:8\n    |\n LL |     VA(W), //~ ERROR `W: std::marker::Sized` is not satisfied\n-   |        ^^ `W` does not have a constant size known at compile-time\n+   |        ^ `W` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `W`\n    = help: consider adding a `where W: std::marker::Sized` bound\n@@ -22,7 +22,7 @@ error[E0277]: the trait bound `Y: std::marker::Sized` is not satisfied\n   --> $DIR/unsized-enum2.rs:35:15\n    |\n LL |     VC(isize, Y), //~ ERROR `Y: std::marker::Sized` is not satisfied\n-   |               ^^ `Y` does not have a constant size known at compile-time\n+   |               ^ `Y` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Y`\n    = help: consider adding a `where Y: std::marker::Sized` bound\n@@ -42,7 +42,7 @@ error[E0277]: the trait bound `[u8]: std::marker::Sized` is not satisfied\n   --> $DIR/unsized-enum2.rs:39:8\n    |\n LL |     VE([u8]), //~ ERROR `[u8]: std::marker::Sized` is not satisfied\n-   |        ^^^^^ `[u8]` does not have a constant size known at compile-time\n+   |        ^^^^ `[u8]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: no field of an enum variant may have a dynamically sized type\n@@ -60,7 +60,7 @@ error[E0277]: the trait bound `[f32]: std::marker::Sized` is not satisfied\n   --> $DIR/unsized-enum2.rs:41:15\n    |\n LL |     VG(isize, [f32]), //~ ERROR `[f32]: std::marker::Sized` is not satisfied\n-   |               ^^^^^^ `[f32]` does not have a constant size known at compile-time\n+   |               ^^^^^ `[f32]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f32]`\n    = note: no field of an enum variant may have a dynamically sized type\n@@ -78,7 +78,7 @@ error[E0277]: the trait bound `Foo + 'static: std::marker::Sized` is not satisfi\n   --> $DIR/unsized-enum2.rs:51:8\n    |\n LL |     VM(Foo),  //~ ERROR `Foo + 'static: std::marker::Sized` is not satisfied\n-   |        ^^^^ `Foo + 'static` does not have a constant size known at compile-time\n+   |        ^^^ `Foo + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `Foo + 'static`\n    = note: no field of an enum variant may have a dynamically sized type\n@@ -96,7 +96,7 @@ error[E0277]: the trait bound `FooBar + 'static: std::marker::Sized` is not sati\n   --> $DIR/unsized-enum2.rs:53:15\n    |\n LL |     VO(isize, FooBar), //~ ERROR `FooBar + 'static: std::marker::Sized` is not satisfied\n-   |               ^^^^^^^ `FooBar + 'static` does not have a constant size known at compile-time\n+   |               ^^^^^^ `FooBar + 'static` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `FooBar + 'static`\n    = note: no field of an enum variant may have a dynamically sized type\n@@ -114,7 +114,7 @@ error[E0277]: the trait bound `[i8]: std::marker::Sized` is not satisfied\n   --> $DIR/unsized-enum2.rs:57:8\n    |\n LL |     VQ(<&'static [i8] as Deref>::Target), //~ ERROR `[i8]: std::marker::Sized` is not satisfied\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[i8]` does not have a constant size known at compile-time\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[i8]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[i8]`\n    = note: no field of an enum variant may have a dynamically sized type\n@@ -132,7 +132,7 @@ error[E0277]: the trait bound `[f64]: std::marker::Sized` is not satisfied\n   --> $DIR/unsized-enum2.rs:60:15\n    |\n LL |     VS(isize, <&'static [f64] as Deref>::Target),\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[f64]` does not have a constant size known at compile-time\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `[f64]` does not have a constant size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[f64]`\n    = note: no field of an enum variant may have a dynamically sized type\n@@ -150,7 +150,7 @@ error[E0277]: the trait bound `PathHelper1 + 'static: std::marker::Sized` is not\n   --> $DIR/unsized-enum2.rs:45:8\n    |\n LL |     VI(Path1), //~ ERROR `PathHelper1 + 'static: std::marker::Sized` is not satisfied\n-   |        ^^^^^^ `PathHelper1 + 'static` does not have a constant size known at compile-time\n+   |        ^^^^^ `PathHelper1 + 'static` does not have a constant size known at compile-time\n    |\n    = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `PathHelper1 + 'static`\n    = note: required because it appears within the type `Path1`\n@@ -170,7 +170,7 @@ error[E0277]: the trait bound `PathHelper3 + 'static: std::marker::Sized` is not\n   --> $DIR/unsized-enum2.rs:47:15\n    |\n LL |     VK(isize, Path3), //~ ERROR `PathHelper3 + 'static: std::marker::Sized` is not satisfied\n-   |               ^^^^^^ `PathHelper3 + 'static` does not have a constant size known at compile-time\n+   |               ^^^^^ `PathHelper3 + 'static` does not have a constant size known at compile-time\n    |\n    = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `PathHelper3 + 'static`\n    = note: required because it appears within the type `Path3`"}]}