{"sha": "1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NzlmYTg2ZjlmZDhjYzUzMzg0ZDJkYWJlNzc1YmNiZjAxMmE1YWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T15:53:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T15:53:16Z"}, "message": "Rollup merge of #74066 - thomcc:optimize-is-ascii, r=nagisa\n\nOptimize is_ascii for str and [u8].\n\nThis optimizes the `is_ascii` function for `[u8]` and `str`. I've been surprised this wasn't done for a while, so I just did it.\n\nBenchmarks comparing before/after look like:\n\n```\ntest ascii::long_readonly::is_ascii_slice_iter_all              ... bench:         174 ns/iter (+/- 79) = 40172 MB/s\ntest ascii::long_readonly::is_ascii_slice_libcore               ... bench:          16 ns/iter (+/- 5) = 436875 MB/s\ntest ascii::medium_readonly::is_ascii_slice_iter_all            ... bench:          12 ns/iter (+/- 3) = 2666 MB/s\ntest ascii::medium_readonly::is_ascii_slice_libcore             ... bench:           2 ns/iter (+/- 0) = 16000 MB/s\ntest ascii::short_readonly::is_ascii_slice_iter_all             ... bench:           3 ns/iter (+/- 0) = 2333 MB/s\ntest ascii::short_readonly::is_ascii_slice_libcore              ... bench:           4 ns/iter (+/- 0) = 1750 MB/s\n```\n\n(Taken on a x86_64 macbook 2.9 GHz Intel Core i9 with 6 cores)\n\nWhere `is_ascii_slice_iter_all` is the old version, and `is_ascii_slice_libcore` is the new.\n\nI tried to document the code well, so hopefully it's understandable. It has fairly exhaustive tests ensuring size/align doesn't get violated -- because `miri` doesn't really help a lot for this sort of code right now, I tried to `debug_assert` all the safety invariants I'm depending on. (Of course, none of them are required for correctness or soundness -- just allows us to test that this sort of pointer manipulation is sound and such).\n\nAnyway, thanks. Let me know if you have questions/desired changes.", "tree": {"sha": "44744e4fcffb6dd96a97cecb0c96357805f19275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44744e4fcffb6dd96a97cecb0c96357805f19275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCeBsCRBK7hj4Ov3rIwAAdHIIACKRlVKVvakXAJsSdtdPsgam\nBHkbroP8nPS4IAJ2bf+k035hxHMmp88Q3z68KnuWDIYWENXdAw2LbohXBvQLdg4m\nPE/THrD64dl5DIxyezOuTMh91fZTeyLPriJG2H9hy51zchAEsH4Q3loaj3vCulIN\ncWz0JHFRFSItKGCTNkpWj3ZMIyUjpPgWJU7+mdl2oLPy3VdBoNPyD8k5am+D/a+S\nfbK1lE2+bAjY7K+PdfcuRzePTPSVNkgPDPrtMtZoqC3mDO1IYJ0PzUuAJM5uVuYN\nt41f89adMPVRd5n89MztauI7kfP93hK7glS5bsB9Pdsu3sDDLstL+3IsxoRNEvw=\n=a/JO\n-----END PGP SIGNATURE-----\n", "payload": "tree 44744e4fcffb6dd96a97cecb0c96357805f19275\nparent 084ac77cf29e786df7251392bed0b6e6c7ea8786\nparent a150dcc872b4f003c4a0e4cd7bb0e7c51ec791b2\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594482796 -0700\ncommitter GitHub <noreply@github.com> 1594482796 -0700\n\nRollup merge of #74066 - thomcc:optimize-is-ascii, r=nagisa\n\nOptimize is_ascii for str and [u8].\n\nThis optimizes the `is_ascii` function for `[u8]` and `str`. I've been surprised this wasn't done for a while, so I just did it.\n\nBenchmarks comparing before/after look like:\n\n```\ntest ascii::long_readonly::is_ascii_slice_iter_all              ... bench:         174 ns/iter (+/- 79) = 40172 MB/s\ntest ascii::long_readonly::is_ascii_slice_libcore               ... bench:          16 ns/iter (+/- 5) = 436875 MB/s\ntest ascii::medium_readonly::is_ascii_slice_iter_all            ... bench:          12 ns/iter (+/- 3) = 2666 MB/s\ntest ascii::medium_readonly::is_ascii_slice_libcore             ... bench:           2 ns/iter (+/- 0) = 16000 MB/s\ntest ascii::short_readonly::is_ascii_slice_iter_all             ... bench:           3 ns/iter (+/- 0) = 2333 MB/s\ntest ascii::short_readonly::is_ascii_slice_libcore              ... bench:           4 ns/iter (+/- 0) = 1750 MB/s\n```\n\n(Taken on a x86_64 macbook 2.9 GHz Intel Core i9 with 6 cores)\n\nWhere `is_ascii_slice_iter_all` is the old version, and `is_ascii_slice_libcore` is the new.\n\nI tried to document the code well, so hopefully it's understandable. It has fairly exhaustive tests ensuring size/align doesn't get violated -- because `miri` doesn't really help a lot for this sort of code right now, I tried to `debug_assert` all the safety invariants I'm depending on. (Of course, none of them are required for correctness or soundness -- just allows us to test that this sort of pointer manipulation is sound and such).\n\nAnyway, thanks. Let me know if you have questions/desired changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "html_url": "https://github.com/rust-lang/rust/commit/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084ac77cf29e786df7251392bed0b6e6c7ea8786", "url": "https://api.github.com/repos/rust-lang/rust/commits/084ac77cf29e786df7251392bed0b6e6c7ea8786", "html_url": "https://github.com/rust-lang/rust/commit/084ac77cf29e786df7251392bed0b6e6c7ea8786"}, {"sha": "a150dcc872b4f003c4a0e4cd7bb0e7c51ec791b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a150dcc872b4f003c4a0e4cd7bb0e7c51ec791b2", "html_url": "https://github.com/rust-lang/rust/commit/a150dcc872b4f003c4a0e4cd7bb0e7c51ec791b2"}], "stats": {"total": 244, "additions": 242, "deletions": 2}, "files": [{"sha": "05dd7adff1fbbe4e495fe1de9089e5676bcf1743", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "patch": "@@ -1,3 +1,5 @@\n+mod is_ascii;\n+\n // Lower-case ASCII 'a' is the first byte that has its highest bit set\n // after wrap-adding 0x1F:\n //"}, {"sha": "729b0a04eb6ba092795405ffb85f302ae8b542d3", "filename": "src/libcore/benches/ascii/is_ascii.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii%2Fis_ascii.rs?ref=1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "patch": "@@ -0,0 +1,82 @@\n+use super::{LONG, MEDIUM, SHORT};\n+use test::black_box;\n+use test::Bencher;\n+\n+macro_rules! benches {\n+    ($( fn $name: ident($arg: ident: &[u8]) $body: block )+) => {\n+        benches!(mod short SHORT[..] $($name $arg $body)+);\n+        benches!(mod medium MEDIUM[..] $($name $arg $body)+);\n+        benches!(mod long LONG[..] $($name $arg $body)+);\n+        // Ensure we benchmark cases where the functions are called with strings\n+        // that are not perfectly aligned or have a length which is not a\n+        // multiple of size_of::<usize>() (or both)\n+        benches!(mod unaligned_head MEDIUM[1..] $($name $arg $body)+);\n+        benches!(mod unaligned_tail MEDIUM[..(MEDIUM.len() - 1)] $($name $arg $body)+);\n+        benches!(mod unaligned_both MEDIUM[1..(MEDIUM.len() - 1)] $($name $arg $body)+);\n+    };\n+\n+    (mod $mod_name: ident $input: ident [$range: expr] $($name: ident $arg: ident $body: block)+) => {\n+        mod $mod_name {\n+            use super::*;\n+            $(\n+                #[bench]\n+                fn $name(bencher: &mut Bencher) {\n+                    bencher.bytes = $input[$range].len() as u64;\n+                    let mut vec = $input.as_bytes().to_vec();\n+                    bencher.iter(|| {\n+                        let $arg: &[u8] = &black_box(&mut vec)[$range];\n+                        black_box($body)\n+                    })\n+                }\n+            )+\n+        }\n+    };\n+}\n+\n+benches! {\n+    fn case00_libcore(bytes: &[u8]) {\n+        bytes.is_ascii()\n+    }\n+\n+    fn case01_iter_all(bytes: &[u8]) {\n+        bytes.iter().all(|b| b.is_ascii())\n+    }\n+\n+    fn case02_align_to(bytes: &[u8]) {\n+        is_ascii_align_to(bytes)\n+    }\n+\n+    fn case03_align_to_unrolled(bytes: &[u8]) {\n+        is_ascii_align_to_unrolled(bytes)\n+    }\n+}\n+\n+// These are separate since it's easier to debug errors if they don't go through\n+// macro expansion first.\n+fn is_ascii_align_to(bytes: &[u8]) -> bool {\n+    if bytes.len() < core::mem::size_of::<usize>() {\n+        return bytes.iter().all(|b| b.is_ascii());\n+    }\n+    // SAFETY: transmuting a sequence of `u8` to `usize` is always fine\n+    let (head, body, tail) = unsafe { bytes.align_to::<usize>() };\n+    head.iter().all(|b| b.is_ascii())\n+        && body.iter().all(|w| !contains_nonascii(*w))\n+        && tail.iter().all(|b| b.is_ascii())\n+}\n+\n+fn is_ascii_align_to_unrolled(bytes: &[u8]) -> bool {\n+    if bytes.len() < core::mem::size_of::<usize>() {\n+        return bytes.iter().all(|b| b.is_ascii());\n+    }\n+    // SAFETY: transmuting a sequence of `u8` to `[usize; 2]` is always fine\n+    let (head, body, tail) = unsafe { bytes.align_to::<[usize; 2]>() };\n+    head.iter().all(|b| b.is_ascii())\n+        && body.iter().all(|w| !contains_nonascii(w[0] | w[1]))\n+        && tail.iter().all(|b| b.is_ascii())\n+}\n+\n+#[inline]\n+fn contains_nonascii(v: usize) -> bool {\n+    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    (NONASCII_MASK & v) != 0\n+}"}, {"sha": "bed8495993f438f81354070f61738873e368b781", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "patch": "@@ -2795,7 +2795,7 @@ impl [u8] {\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn is_ascii(&self) -> bool {\n-        self.iter().all(|b| b.is_ascii())\n+        is_ascii(self)\n     }\n \n     /// Checks that two slices are an ASCII case-insensitive match.\n@@ -2843,6 +2843,106 @@ impl [u8] {\n     }\n }\n \n+/// Returns `true` if any byte in the word `v` is nonascii (>= 128). Snarfed\n+/// from `../str/mod.rs`, which does something similar for utf8 validation.\n+#[inline]\n+fn contains_nonascii(v: usize) -> bool {\n+    const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;\n+    (NONASCII_MASK & v) != 0\n+}\n+\n+/// Optimized ASCII test that will use usize-at-a-time operations instead of\n+/// byte-at-a-time operations (when possible).\n+///\n+/// The algorithm we use here is pretty simple. If `s` is too short, we just\n+/// check each byte and be done with it. Otherwise:\n+///\n+/// - Read the first word with an unaligned load.\n+/// - Align the pointer, read subsequent words until end with aligned loads.\n+/// - If there's a tail, the last `usize` from `s` with an unaligned load.\n+///\n+/// If any of these loads produces something for which `contains_nonascii`\n+/// (above) returns true, then we know the answer is false.\n+#[inline]\n+fn is_ascii(s: &[u8]) -> bool {\n+    const USIZE_SIZE: usize = mem::size_of::<usize>();\n+\n+    let len = s.len();\n+    let align_offset = s.as_ptr().align_offset(USIZE_SIZE);\n+\n+    // If we wouldn't gain anything from the word-at-a-time implementation, fall\n+    // back to a scalar loop.\n+    //\n+    // We also do this for architectures where `size_of::<usize>()` isn't\n+    // sufficient alignment for `usize`, because it's a weird edge case.\n+    if len < USIZE_SIZE || len < align_offset || USIZE_SIZE < mem::align_of::<usize>() {\n+        return s.iter().all(|b| b.is_ascii());\n+    }\n+\n+    // We always read the first word unaligned, which means `align_offset` is\n+    // 0, we'd read the same value again for the aligned read.\n+    let offset_to_aligned = if align_offset == 0 { USIZE_SIZE } else { align_offset };\n+\n+    let start = s.as_ptr();\n+    // SAFETY: We verify `len < USIZE_SIZE` above.\n+    let first_word = unsafe { (start as *const usize).read_unaligned() };\n+\n+    if contains_nonascii(first_word) {\n+        return false;\n+    }\n+    // We checked this above, somewhat implicitly. Note that `offset_to_aligned`\n+    // is either `align_offset` or `USIZE_SIZE`, both of are explicitly checked\n+    // above.\n+    debug_assert!(offset_to_aligned <= len);\n+\n+    // word_ptr is the (properly aligned) usize ptr we use to read the middle chunk of the slice.\n+    let mut word_ptr = unsafe { start.add(offset_to_aligned) as *const usize };\n+\n+    // `byte_pos` is the byte index of `word_ptr`, used for loop end checks.\n+    let mut byte_pos = offset_to_aligned;\n+\n+    // Paranoia check about alignment, since we're about to do a bunch of\n+    // unaligned loads. In practice this should be impossible barring a bug in\n+    // `align_offset` though.\n+    debug_assert_eq!((word_ptr as usize) % mem::align_of::<usize>(), 0);\n+\n+    while byte_pos <= len - USIZE_SIZE {\n+        debug_assert!(\n+            // Sanity check that the read is in bounds\n+            (word_ptr as usize + USIZE_SIZE) <= (start.wrapping_add(len) as usize) &&\n+            // And that our assumptions about `byte_pos` hold.\n+            (word_ptr as usize) - (start as usize) == byte_pos\n+        );\n+\n+        // Safety: We know `word_ptr` is properly aligned (because of\n+        // `align_offset`), and we know that we have enough bytes between `word_ptr` and the end\n+        let word = unsafe { word_ptr.read() };\n+        if contains_nonascii(word) {\n+            return false;\n+        }\n+\n+        byte_pos += USIZE_SIZE;\n+        // SAFETY: We know that `byte_pos <= len - USIZE_SIZE`, which means that\n+        // after this `add`, `word_ptr` will be at most one-past-the-end.\n+        word_ptr = unsafe { word_ptr.add(1) };\n+    }\n+\n+    // If we have anything left over, it should be at-most 1 usize worth of bytes,\n+    // which we check with a read_unaligned.\n+    if byte_pos == len {\n+        return true;\n+    }\n+\n+    // Sanity check to ensure there really is only one `usize` left. This should\n+    // be guaranteed by our loop condition.\n+    debug_assert!(byte_pos < len && len - byte_pos < USIZE_SIZE);\n+\n+    // SAFETY: This relies on `len >= USIZE_SIZE`, which we check at the start.\n+    let last_word = unsafe { (start.add(len - USIZE_SIZE) as *const usize).read_unaligned() };\n+\n+    !contains_nonascii(last_word)\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, I> ops::Index<I> for [T]\n where"}, {"sha": "003ed7df36e2a44d07943c718542e9c25e29eedf", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "patch": "@@ -4348,7 +4348,7 @@ impl str {\n         // We can treat each byte as character here: all multibyte characters\n         // start with a byte that is not in the ascii range, so we will stop\n         // there already.\n-        self.bytes().all(|b| b.is_ascii())\n+        self.as_bytes().is_ascii()\n     }\n \n     /// Checks that two strings are an ASCII case-insensitive match."}, {"sha": "57f2de16b2b37522b78d8785b6b5fd6d5f9e7908", "filename": "src/libcore/tests/ascii.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1979fa86f9fd8cc53384d2dabe775bcbf012a5ad/src%2Flibcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fascii.rs?ref=1979fa86f9fd8cc53384d2dabe775bcbf012a5ad", "patch": "@@ -343,3 +343,59 @@ fn test_is_ascii_control() {\n         \" \",\n     );\n }\n+\n+// `is_ascii` does a good amount of pointer manipulation and has\n+// alignment-dependent computation. This is all sanity-checked via\n+// `debug_assert!`s, so we test various sizes/alignments thoroughly versus an\n+// \"obviously correct\" baseline function.\n+#[test]\n+fn test_is_ascii_align_size_thoroughly() {\n+    // The \"obviously-correct\" baseline mentioned above.\n+    fn is_ascii_baseline(s: &[u8]) -> bool {\n+        s.iter().all(|b| b.is_ascii())\n+    }\n+\n+    // Helper to repeat `l` copies of `b0` followed by `l` copies of `b1`.\n+    fn repeat_concat(b0: u8, b1: u8, l: usize) -> Vec<u8> {\n+        use core::iter::repeat;\n+        repeat(b0).take(l).chain(repeat(b1).take(l)).collect()\n+    }\n+\n+    // Miri is too slow for much of this, and in miri `align_offset` always\n+    // returns `usize::max_value()` anyway (at the moment), so we just test\n+    // lightly.\n+    let iter = if cfg!(miri) { 0..5 } else { 0..100 };\n+\n+    for i in iter {\n+        #[cfg(not(miri))]\n+        let cases = &[\n+            b\"a\".repeat(i),\n+            b\"\\0\".repeat(i),\n+            b\"\\x7f\".repeat(i),\n+            b\"\\x80\".repeat(i),\n+            b\"\\xff\".repeat(i),\n+            repeat_concat(b'a', 0x80u8, i),\n+            repeat_concat(0x80u8, b'a', i),\n+        ];\n+\n+        #[cfg(miri)]\n+        let cases = &[repeat_concat(b'a', 0x80u8, i)];\n+\n+        for case in cases {\n+            for pos in 0..=case.len() {\n+                // Potentially misaligned head\n+                let prefix = &case[pos..];\n+                assert_eq!(is_ascii_baseline(prefix), prefix.is_ascii(),);\n+\n+                // Potentially misaligned tail\n+                let suffix = &case[..case.len() - pos];\n+\n+                assert_eq!(is_ascii_baseline(suffix), suffix.is_ascii(),);\n+\n+                // Both head and tail are potentially misaligned\n+                let mid = &case[(pos / 2)..(case.len() - (pos / 2))];\n+                assert_eq!(is_ascii_baseline(mid), mid.is_ascii(),);\n+            }\n+        }\n+    }\n+}"}]}