{"sha": "6f5a0c7500fe3a7b1dd7a18f85daa419807759f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNWEwYzc1MDBmZTNhN2IxZGQ3YTE4Zjg1ZGFhNDE5ODA3NzU5ZjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T04:02:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-05T04:22:03Z"}, "message": "Add std::fs::normalize", "tree": {"sha": "0224859ae4b3ba817342fd56626cd2bfa4c76967", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0224859ae4b3ba817342fd56626cd2bfa4c76967"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3", "html_url": "https://github.com/rust-lang/rust/commit/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51ae30287bf8512cde8747d7ae6788ec5ac41395", "url": "https://api.github.com/repos/rust-lang/rust/commits/51ae30287bf8512cde8747d7ae6788ec5ac41395", "html_url": "https://github.com/rust-lang/rust/commit/51ae30287bf8512cde8747d7ae6788ec5ac41395"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "f9fcc67510e134d0ac8be648f6f4e8c18b3b616c", "filename": "src/lib/fs.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=6f5a0c7500fe3a7b1dd7a18f85daa419807759f3", "patch": "@@ -85,6 +85,84 @@ fn split(p: path) -> [path] {\n     ret split2;\n }\n \n+fn normalize(p: path) -> path {\n+    let s = split(p);\n+    let s = strip_dots(s);\n+    let s = rollup_doubledots(s);\n+\n+    let s = if check vec::is_not_empty(s) {\n+        connect_many(s)\n+    } else {\n+        \"\"\n+    };\n+    let s = reabsolute(p, s);\n+    let s = reterminate(p, s);\n+\n+    let s = if str::byte_len(s) == 0u {\n+        \".\"\n+    } else {\n+        s\n+    };\n+\n+    ret s;\n+\n+    fn strip_dots(s: [path]) -> [path] {\n+        vec::filter_map({ |elem|\n+            if elem == \".\" {\n+                option::none\n+            } else {\n+                option::some(elem)\n+            }\n+        }, s)\n+    }\n+\n+    fn rollup_doubledots(s: [path]) -> [path] {\n+        if vec::is_empty(s) {\n+            ret [];\n+        }\n+\n+        let t = [];\n+        let i = vec::len(s);\n+        let skip = 0;\n+        do {\n+            i -= 1u;\n+            if s[i] == \"..\" {\n+                skip += 1;\n+            } else {\n+                if skip == 0 {\n+                    t += [s[i]];\n+                } else {\n+                    skip -= 1;\n+                }\n+            }\n+        } while i != 0u;\n+        let t = vec::reversed(t);\n+        while skip > 0 {\n+            t += [\"..\"];\n+            skip -= 1;\n+        }\n+        ret t;\n+    }\n+\n+    fn reabsolute(orig: path, new: path) -> path {\n+        if path_is_absolute(orig) {\n+            path_sep() + new\n+        } else {\n+            new\n+        }\n+    }\n+\n+    fn reterminate(orig: path, new: path) -> path {\n+        let last = orig[str::byte_len(orig) - 1u];\n+        if last == os_fs::path_sep as u8\n+            || last == os_fs::path_sep as u8 {\n+            ret new + path_sep();\n+        } else {\n+            ret new;\n+        }\n+    }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "2a348cc7ccb234e650fd20d443157ad5d9017259", "filename": "src/test/stdtest/fs.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3/src%2Ftest%2Fstdtest%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f5a0c7500fe3a7b1dd7a18f85daa419807759f3/src%2Ftest%2Fstdtest%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ffs.rs?ref=6f5a0c7500fe3a7b1dd7a18f85daa419807759f3", "patch": "@@ -64,3 +64,80 @@ fn split4() {\n     let expected = [\"a\", \"b\", \"c\"];\n     assert actual == expected;\n }\n+\n+#[test]\n+fn normalize1() {\n+    let actual = fs::normalize(\"a/b/..\");\n+    let expected = \"a\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize2() {\n+    let actual = fs::normalize(\"/a/b/..\");\n+    let expected = \"/a\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize3() {\n+    let actual = fs::normalize(\"a/../b\");\n+    let expected = \"b\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize4() {\n+    let actual = fs::normalize(\"/a/../b\");\n+    let expected = \"/b\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize5() {\n+    let actual = fs::normalize(\"a/.\");\n+    let expected = \"a\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize6() {\n+    let actual = fs::normalize(\"a/./b/\");\n+    let expected = \"a/b/\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize7() {\n+    let actual = fs::normalize(\"a/..\");\n+    let expected = \".\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize8() {\n+    let actual = fs::normalize(\"../../..\");\n+    let expected = \"../../..\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize9() {\n+    let actual = fs::normalize(\"a/b/../../..\");\n+    let expected = \"..\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize10() {\n+    let actual = fs::normalize(\"/a/b/c/../d/./../../e/\");\n+    let expected = \"/a/e/\";\n+    assert actual == expected;\n+}\n+\n+#[test]\n+fn normalize11() {\n+    let actual = fs::normalize(\"/a/..\");\n+    let expected = \"/\";\n+    assert actual == expected;\n+}\n\\ No newline at end of file"}]}