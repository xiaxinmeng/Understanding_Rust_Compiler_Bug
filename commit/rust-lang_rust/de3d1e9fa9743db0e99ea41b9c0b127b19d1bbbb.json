{"sha": "de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlM2QxZTlmYTk3NDNkYjBlOTllYTQxYjljMGIxMjdiMTlkMWJiYmI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-26T20:44:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T20:44:03Z"}, "message": "Rollup merge of #70397 - JOE1994:write_wide_str, r=RalfJung\n\nadd 'fn write_u16s' to Memory\n\nAdded new function `Memory::write_u16s`. Needed in `MIRI` for implementing helper function to write wide_str to memory (for Windows).", "tree": {"sha": "73cc7e0620d17fd8c2cf255b1fe7ed30c0745272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73cc7e0620d17fd8c2cf255b1fe7ed30c0745272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefRQTCRBK7hj4Ov3rIwAAdHIIAGGs15rxqWY7YR4+9ej4rbib\n6pFfz0tLLsxj0LHDzqaXwnID4xoOlXAEa8+mvOjvhF3tC1z9uMikdcYTvkWdKDpI\n6yKGJ1qWU1CoTl3lclCQ2Qei4WFJPZBxMQ5AqjrFZpCQlSVW0jrDqOimX7v0GE+a\nNBbP9h9EsetM7Z4mEos/o00vIzXlJhTBA1OHaUlvnM7fqxVWdgoeZbAT0YFJ3RHI\nIG4jbq8zZmgEw8wAhqM/aujjAayvrMZ9FMwL7/GaPt+9LDAv9yYRtrdZcYA5y163\nUwk5+jpJEbVBxYvbmbWIGd8xa/73URpuGLeQI4zgsCVBJVQkVLr6Oy6UWeahsD8=\n=+Uoh\n-----END PGP SIGNATURE-----\n", "payload": "tree 73cc7e0620d17fd8c2cf255b1fe7ed30c0745272\nparent b15423e72e48125a40a3192c2d49a48e54b5c314\nparent 4538f8953b3395dd0eac5acae2f2782d89370aff\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585255443 +0100\ncommitter GitHub <noreply@github.com> 1585255443 +0100\n\nRollup merge of #70397 - JOE1994:write_wide_str, r=RalfJung\n\nadd 'fn write_u16s' to Memory\n\nAdded new function `Memory::write_u16s`. Needed in `MIRI` for implementing helper function to write wide_str to memory (for Windows).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb", "html_url": "https://github.com/rust-lang/rust/commit/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b15423e72e48125a40a3192c2d49a48e54b5c314", "url": "https://api.github.com/repos/rust-lang/rust/commits/b15423e72e48125a40a3192c2d49a48e54b5c314", "html_url": "https://github.com/rust-lang/rust/commit/b15423e72e48125a40a3192c2d49a48e54b5c314"}, {"sha": "4538f8953b3395dd0eac5acae2f2782d89370aff", "url": "https://api.github.com/repos/rust-lang/rust/commits/4538f8953b3395dd0eac5acae2f2782d89370aff", "html_url": "https://github.com/rust-lang/rust/commit/4538f8953b3395dd0eac5acae2f2782d89370aff"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "7b6de4b0726c1ccce907cf29b4ab8fb939bee9a9", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb", "patch": "@@ -833,17 +833,57 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         ptr: Scalar<M::PointerTag>,\n         src: impl IntoIterator<Item = u8>,\n     ) -> InterpResult<'tcx> {\n-        let src = src.into_iter();\n+        let mut src = src.into_iter();\n         let size = Size::from_bytes(src.size_hint().0);\n         // `write_bytes` checks that this lower bound `size` matches the upper bound and reality.\n         let ptr = match self.check_ptr_access(ptr, size, Align::from_bytes(1).unwrap())? {\n             Some(ptr) => ptr,\n-            None => return Ok(()), // zero-sized access\n+            None => {\n+                // zero-sized access\n+                src.next().expect_none(\"iterator said it was empty but returned an element\");\n+                return Ok(());\n+            }\n         };\n         let tcx = self.tcx.tcx;\n         self.get_raw_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n     }\n \n+    /// Writes the given stream of u16s into memory.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn write_u16s(\n+        &mut self,\n+        ptr: Scalar<M::PointerTag>,\n+        src: impl IntoIterator<Item = u16>,\n+    ) -> InterpResult<'tcx> {\n+        let mut src = src.into_iter();\n+        let (lower, upper) = src.size_hint();\n+        let len = upper.expect(\"can only write bounded iterators\");\n+        assert_eq!(lower, len, \"can only write iterators with a precise length\");\n+\n+        let size = Size::from_bytes(lower);\n+        let ptr = match self.check_ptr_access(ptr, size, Align::from_bytes(2).unwrap())? {\n+            Some(ptr) => ptr,\n+            None => {\n+                // zero-sized access\n+                src.next().expect_none(\"iterator said it was empty but returned an element\");\n+                return Ok(());\n+            }\n+        };\n+        let tcx = self.tcx.tcx;\n+        let allocation = self.get_raw_mut(ptr.alloc_id)?;\n+\n+        for idx in 0..len {\n+            let val = Scalar::from_u16(\n+                src.next().expect(\"iterator was shorter than it said it would be\"),\n+            );\n+            let offset_ptr = ptr.offset(Size::from_bytes(idx) * 2, &tcx)?; // `Size` multiplication\n+            allocation.write_scalar(&tcx, offset_ptr, val.into(), Size::from_bytes(2))?;\n+        }\n+        src.next().expect_none(\"iterator was longer than it said it would be\");\n+        Ok(())\n+    }\n+\n     /// Expects the caller to have checked bounds and alignment.\n     pub fn copy(\n         &mut self,"}, {"sha": "85e44adc30b86a14c76f50e6fd82ee7426d44f65", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=de3d1e9fa9743db0e99ea41b9c0b127b19d1bbbb", "patch": "@@ -24,6 +24,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(range_is_empty)]\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n+#![feature(option_expect_none)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}]}