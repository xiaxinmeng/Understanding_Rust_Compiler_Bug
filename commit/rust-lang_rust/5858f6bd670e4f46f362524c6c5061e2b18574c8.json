{"sha": "5858f6bd670e4f46f362524c6c5061e2b18574c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NThmNmJkNjcwZTRmNDZmMzYyNTI0YzZjNTA2MWUyYjE4NTc0Yzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-06T14:48:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-06T14:48:11Z"}, "message": "purge `-Z always-build-mir`, which is no longer relevant", "tree": {"sha": "077126a989196e347dde1acdcc9cf1b1cc4f592b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077126a989196e347dde1acdcc9cf1b1cc4f592b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5858f6bd670e4f46f362524c6c5061e2b18574c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5858f6bd670e4f46f362524c6c5061e2b18574c8", "html_url": "https://github.com/rust-lang/rust/commit/5858f6bd670e4f46f362524c6c5061e2b18574c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5858f6bd670e4f46f362524c6c5061e2b18574c8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e02ddff816f7d599f9a4b884fca25c1380d1aae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e02ddff816f7d599f9a4b884fca25c1380d1aae6", "html_url": "https://github.com/rust-lang/rust/commit/e02ddff816f7d599f9a4b884fca25c1380d1aae6"}], "stats": {"total": 29, "additions": 3, "deletions": 26}, "files": [{"sha": "cb8af120ca6d98ee4ef2ebb009e3bc9010305827", "filename": "mk/main.mk", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5858f6bd670e4f46f362524c6c5061e2b18574c8/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5858f6bd670e4f46f362524c6c5061e2b18574c8/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=5858f6bd670e4f46f362524c6c5061e2b18574c8", "patch": "@@ -175,18 +175,6 @@ ifdef CFG_DISABLE_STAGE0_LANDING_PADS\n   RUSTFLAGS_STAGE0 += -Z no-landing-pads\n endif\n \n-# Enable MIR to \"always build\" for crates where this works. This is\n-# just temporary while MIR is being actively built up -- it's just a\n-# poor man's unit testing infrastructure. Anyway we only want this for\n-# stage1/stage2.\n-define ADD_MIR_FLAG\n-RUSTFLAGS1_$(1) += -Z always-build-mir\n-RUSTFLAGS2_$(1) += -Z always-build-mir\n-endef\n-$(foreach crate,$(TARGET_CRATES),$(eval $(call ADD_MIR_FLAG,$(crate))))\n-$(foreach crate,$(RUSTC_CRATES),$(eval $(call ADD_MIR_FLAG,$(crate))))\n-$(foreach crate,$(HOST_CRATES),$(eval $(call ADD_MIR_FLAG,$(crate))))\n-\n # platform-specific auto-configuration\n include $(CFG_SRC_DIR)mk/platform.mk\n "}, {"sha": "7e8104d08d68381541a6125d19f424c13452ce5e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5858f6bd670e4f46f362524c6c5061e2b18574c8/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5858f6bd670e4f46f362524c6c5061e2b18574c8/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=5858f6bd670e4f46f362524c6c5061e2b18574c8", "patch": "@@ -101,7 +101,6 @@ pub struct Options {\n     pub parse_only: bool,\n     pub no_trans: bool,\n     pub treat_err_as_bug: bool,\n-    pub always_build_mir: bool,\n     pub no_analysis: bool,\n     pub debugging_opts: DebuggingOptions,\n     pub prints: Vec<PrintRequest>,\n@@ -211,7 +210,6 @@ pub fn basic_options() -> Options {\n         parse_only: false,\n         no_trans: false,\n         treat_err_as_bug: false,\n-        always_build_mir: false,\n         no_analysis: false,\n         debugging_opts: basic_debugging_options(),\n         prints: Vec::new(),\n@@ -578,8 +576,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"Run all passes except translation; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool,\n           \"Treat all errors that occur as bugs\"),\n-    always_build_mir: bool = (false, parse_bool,\n-          \"Always build MIR for all fns, even without a #[rustc_mir] annotation\"),\n     no_analysis: bool = (false, parse_bool,\n           \"Parse and expand the source, but run no analysis\"),\n     extra_plugins: Vec<String> = (Vec::new(), parse_list,\n@@ -895,7 +891,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let parse_only = debugging_opts.parse_only;\n     let no_trans = debugging_opts.no_trans;\n     let treat_err_as_bug = debugging_opts.treat_err_as_bug;\n-    let always_build_mir = debugging_opts.always_build_mir;\n     let no_analysis = debugging_opts.no_analysis;\n \n     if debugging_opts.debug_llvm {\n@@ -1049,7 +1044,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         parse_only: parse_only,\n         no_trans: no_trans,\n         treat_err_as_bug: treat_err_as_bug,\n-        always_build_mir: always_build_mir,\n         no_analysis: no_analysis,\n         debugging_opts: debugging_opts,\n         prints: prints,"}, {"sha": "ccac2ac61fa7e3c57b6900aac2c2db83a2a48f96", "filename": "src/librustc_mir/dump.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5858f6bd670e4f46f362524c6c5061e2b18574c8/src%2Flibrustc_mir%2Fdump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5858f6bd670e4f46f362524c6c5061e2b18574c8/src%2Flibrustc_mir%2Fdump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdump.rs?ref=5858f6bd670e4f46f362524c6c5061e2b18574c8", "patch": "@@ -54,19 +54,14 @@ impl<'a, 'tcx> OuterDump<'a, 'tcx> {\n     {\n         let mut built_mir = false;\n \n+        let mut closure_dump = InnerDump { tcx: self.tcx, attr: None };\n         for attr in attributes {\n             if attr.check_name(\"rustc_mir\") {\n-                let mut closure_dump = InnerDump { tcx: self.tcx, attr: Some(attr) };\n-                walk_op(&mut closure_dump);\n-                built_mir = true;\n+                closure_dump.attr = Some(attr);\n             }\n         }\n \n-        let always_build_mir = true;\n-        if !built_mir && always_build_mir {\n-            let mut closure_dump = InnerDump { tcx: self.tcx, attr: None };\n-            walk_op(&mut closure_dump);\n-        }\n+        walk_op(&mut closure_dump);\n     }\n }\n "}]}