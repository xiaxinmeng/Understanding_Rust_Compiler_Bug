{"sha": "7cd8128da3d81bdc8f6e9da19f09f236c1703800", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZDgxMjhkYTNkODFiZGM4ZjZlOWRhMTlmMDlmMjM2YzE3MDM4MDA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-12-30T15:36:08Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-15T21:52:33Z"}, "message": "Improve JS performance by storing length before comparing to it in loops", "tree": {"sha": "3329b88669766522ea49b0702c2155aa455b3feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3329b88669766522ea49b0702c2155aa455b3feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cd8128da3d81bdc8f6e9da19f09f236c1703800", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd8128da3d81bdc8f6e9da19f09f236c1703800", "html_url": "https://github.com/rust-lang/rust/commit/7cd8128da3d81bdc8f6e9da19f09f236c1703800", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cd8128da3d81bdc8f6e9da19f09f236c1703800/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887398ff688e2e3cf8a95e588d0b51420e08fb6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/887398ff688e2e3cf8a95e588d0b51420e08fb6b", "html_url": "https://github.com/rust-lang/rust/commit/887398ff688e2e3cf8a95e588d0b51420e08fb6b"}], "stats": {"total": 106, "additions": 50, "deletions": 56}, "files": [{"sha": "3a13b7bceb1f0c24192a1af6a88e6b6b7d066d12", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 45, "deletions": 53, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7cd8128da3d81bdc8f6e9da19f09f236c1703800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7cd8128da3d81bdc8f6e9da19f09f236c1703800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=7cd8128da3d81bdc8f6e9da19f09f236c1703800", "patch": "@@ -648,8 +648,7 @@ function defocusSearchBar() {\n          */\n         function execQuery(query, searchWords, filterCrates) {\n             function itemTypeFromName(typename) {\n-                var length = itemTypes.length;\n-                for (var i = 0; i < length; ++i) {\n+                for (var i = 0, len = itemTypes.length; i < len; ++i) {\n                     if (itemTypes[i] === typename) {\n                         return i;\n                     }\n@@ -667,8 +666,7 @@ function defocusSearchBar() {\n \n             function transformResults(results, isType) {\n                 var out = [];\n-                var length = results.length;\n-                for (var i = 0; i < length; ++i) {\n+                for (var i = 0, len = results.length; i < len; ++i) {\n                     if (results[i].id > -1) {\n                         var obj = searchIndex[results[i].id];\n                         obj.lev = results[i].lev;\n@@ -697,11 +695,11 @@ function defocusSearchBar() {\n                     }\n                 }\n                 results = ar;\n-                var i;\n-                var nresults = results.length;\n-                for (i = 0; i < nresults; ++i) {\n-                    results[i].word = searchWords[results[i].id];\n-                    results[i].item = searchIndex[results[i].id] || {};\n+                var i, len, result;\n+                for (i = 0, len = results.length; i < len; ++i) {\n+                    result = results[i];\n+                    result.word = searchWords[result.id];\n+                    result.item = searchIndex[result.id] || {};\n                 }\n                 // if there are no results then return to default and fail\n                 if (results.length === 0) {\n@@ -775,8 +773,7 @@ function defocusSearchBar() {\n                     return 0;\n                 });\n \n-                var length = results.length;\n-                for (i = 0; i < length; ++i) {\n+                for (i = 0, len = results.length; i < len; ++i) {\n                     var result = results[i];\n \n                     // this validation does not make sense when searching by types\n@@ -833,11 +830,10 @@ function defocusSearchBar() {\n                         var vlength = val.generics.length;\n                         for (var y = 0; y < vlength; ++y) {\n                             var lev = { pos: -1, lev: MAX_LEV_DISTANCE + 1};\n-                            var elength = elems.length;\n                             var firstGeneric = getObjectFromId(val.generics[y]).name;\n-                            for (var x = 0; x < elength; ++x) {\n+                            for (var x = 0, elength = elems.length; x < elength; ++x) {\n                                 var tmp_lev = levenshtein(getObjectFromId(elems[x]).name,\n-                                                          firstGeneric);\n+                                                                          firstGeneric);\n                                 if (tmp_lev < lev.lev) {\n                                     lev.lev = tmp_lev;\n                                     lev.pos = x;\n@@ -861,7 +857,7 @@ function defocusSearchBar() {\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                var x;\n+                var len, x, y, e_len, firstGeneric;\n                 if (obj[NAME] === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n@@ -870,10 +866,12 @@ function defocusSearchBar() {\n                                 var elems = obj[GENERICS_DATA].slice(0);\n                                 var allFound = true;\n \n-                                for (var y = 0; allFound === true && y < val.generics.length; ++y) {\n+                                len = val.generics.length;\n+                                for (y = 0; allFound === true && y < len; ++y) {\n                                     allFound = false;\n-                                    var firstGeneric = getObjectFromId(val.generics[y]).name;\n-                                    for (x = 0; allFound === false && x < elems.length; ++x) {\n+                                    firstGeneric = getObjectFromId(val.generics[y]).name;\n+                                    e_len = elems.length;\n+                                    for (x = 0; allFound === false && x < e_len; ++x) {\n                                         allFound = getObjectFromId(elems[x]).name === firstGeneric;\n                                     }\n                                     if (allFound === true) {\n@@ -903,12 +901,10 @@ function defocusSearchBar() {\n                 // Names didn't match so let's check if one of the generic types could.\n                 if (literalSearch === true) {\n                      if (obj.length > GENERICS_DATA && obj[GENERICS_DATA].length > 0) {\n-                        var length = obj[GENERICS_DATA].length;\n-                        for (x = 0; x < length; ++x) {\n-                            if (obj[GENERICS_DATA][x] === val.name) {\n-                                return true;\n-                            }\n-                        }\n+                        return onEach(obj[GENERICS_DATA],\n+                            function(name) {\n+                                return name === val.name;\n+                            });\n                     }\n                     return false;\n                 }\n@@ -965,7 +961,7 @@ function defocusSearchBar() {\n                     if (typeof ret[0] === \"string\") {\n                         ret = [ret];\n                     }\n-                    for (var x = 0; x < ret.length; ++x) {\n+                    for (var x = 0, len = ret.length; x < len; ++x) {\n                         var tmp = ret[x];\n                         if (typePassesFilter(typeFilter, tmp[1]) === false) {\n                             continue;\n@@ -1072,23 +1068,22 @@ function defocusSearchBar() {\n                 // aliases to be before the others in the displayed results.\n                 var aliases = [];\n                 var crateAliases = [];\n-                var i;\n                 if (filterCrates !== undefined) {\n                     if (ALIASES[filterCrates] && ALIASES[filterCrates][query.search]) {\n-                        for (i = 0; i < ALIASES[filterCrates][query.search].length; ++i) {\n-                            aliases.push(\n-                                createAliasFromItem(\n-                                    searchIndex[ALIASES[filterCrates][query.search][i]]));\n+                        var query_aliases = ALIASES[filterCrates][query.search];\n+                        var len = query_aliases.length;\n+                        for (var i = 0; i < len; ++i) {\n+                            aliases.push(createAliasFromItem(searchIndex[query_aliases[i]]));\n                         }\n                     }\n                 } else {\n                     Object.keys(ALIASES).forEach(function(crate) {\n                         if (ALIASES[crate][query.search]) {\n                             var pushTo = crate === window.currentCrate ? crateAliases : aliases;\n-                            for (i = 0; i < ALIASES[crate][query.search].length; ++i) {\n-                                pushTo.push(\n-                                    createAliasFromItem(\n-                                        searchIndex[ALIASES[crate][query.search][i]]));\n+                            var query_aliases = ALIASES[crate][query.search];\n+                            var len = query_aliases.length;\n+                            for (var i = 0; i < len; ++i) {\n+                                pushTo.push(createAliasFromItem(searchIndex[query_aliases[i]]));\n                             }\n                         }\n                     });\n@@ -1123,11 +1118,12 @@ function defocusSearchBar() {\n \n             // quoted values mean literal search\n             var nSearchWords = searchWords.length;\n-            var i;\n+            var i, it;\n             var ty;\n             var fullId;\n             var returned;\n             var in_args;\n+            var len;\n             if ((val.charAt(0) === \"\\\"\" || val.charAt(0) === \"'\") &&\n                 val.charAt(val.length - 1) === val.charAt(0))\n             {\n@@ -1175,7 +1171,7 @@ function defocusSearchBar() {\n                 var input = parts[0];\n                 // sort inputs so that order does not matter\n                 var inputs = input.split(\",\").map(trimmer).sort();\n-                for (i = 0; i < inputs.length; ++i) {\n+                for (i = 0, len = inputs.length; i < len; ++i) {\n                     inputs[i] = extractGenerics(inputs[i]);\n                 }\n                 var output = extractGenerics(parts[1]);\n@@ -1200,7 +1196,7 @@ function defocusSearchBar() {\n                             is_module = true;\n                         } else {\n                             var allFound = true;\n-                            for (var it = 0; allFound === true && it < inputs.length; it++) {\n+                            for (it = 0, len = inputs.length; allFound === true && it < len; it++) {\n                                 allFound = checkType(type, inputs[it], true);\n                             }\n                             in_args = allFound;\n@@ -1243,7 +1239,7 @@ function defocusSearchBar() {\n \n                 var paths = valLower.split(\"::\");\n                 var j;\n-                for (j = 0; j < paths.length; ++j) {\n+                for (j = 0, len = paths.length; j < len; ++j) {\n                     if (paths[j] === \"\") {\n                         paths.splice(j, 1);\n                         j -= 1;\n@@ -1365,7 +1361,7 @@ function defocusSearchBar() {\n          * @return {[boolean]}       [Whether the result is valid or not]\n          */\n         function validateResult(name, path, keys, parent) {\n-            for (var i = 0; i < keys.length; ++i) {\n+            for (var i = 0, len = keys.length; i < len; ++i) {\n                 // each check is for validation so we negate the conditions and invalidate\n                 if (!(\n                     // check for an exact name match\n@@ -1686,7 +1682,7 @@ function defocusSearchBar() {\n             function getSmallest(arrays, positions, notDuplicates) {\n                 var start = null;\n \n-                for (var it = 0; it < positions.length; ++it) {\n+                for (var it = 0, len = positions.length; it < len; ++it) {\n                     if (arrays[it].length > positions[it] &&\n                         (start === null || start > arrays[it][positions[it]].lev) &&\n                         !notDuplicates[arrays[it][positions[it]].fullPath]) {\n@@ -1701,7 +1697,7 @@ function defocusSearchBar() {\n                 var positions = [];\n                 var notDuplicates = {};\n \n-                for (var x = 0; x < arrays.length; ++x) {\n+                for (var x = 0, arrays_len = arrays.length; x < arrays_len; ++x) {\n                     positions.push(0);\n                 }\n                 while (ret.length < MAX_RESULTS) {\n@@ -1710,7 +1706,7 @@ function defocusSearchBar() {\n                     if (smallest === null) {\n                         break;\n                     }\n-                    for (x = 0; x < arrays.length && ret.length < MAX_RESULTS; ++x) {\n+                    for (x = 0; x < arrays_len && ret.length < MAX_RESULTS; ++x) {\n                         if (arrays[x].length > positions[x] &&\n                                 arrays[x][positions[x]].lev === smallest &&\n                                 !notDuplicates[arrays[x][positions[x]].fullPath]) {\n@@ -1730,7 +1726,7 @@ function defocusSearchBar() {\n                 \"others\": [],\n             };\n \n-            for (var i = 0; i < queries.length; ++i) {\n+            for (var i = 0, len = queries.length; i < len; ++i) {\n                 query = queries[i].trim();\n                 if (query.length !== 0) {\n                     var tmp = execQuery(getQuery(query), searchWords, filterCrates);\n@@ -1884,7 +1880,7 @@ function defocusSearchBar() {\n                             ALIASES[crate][alias_name] = [];\n                         }\n                         local_aliases = aliases[alias_name];\n-                        for (j = 0; j < local_aliases.length; ++j) {\n+                        for (j = 0, len = local_aliases.length; j < len; ++j) {\n                             ALIASES[crate][alias_name].push(local_aliases[j] + currentIndex);\n                         }\n                     }\n@@ -2052,8 +2048,7 @@ function defocusSearchBar() {\n             div.appendChild(h3);\n             var ul = document.createElement(\"ul\");\n \n-            var length = filtered.length;\n-            for (var i = 0; i < length; ++i) {\n+            for (var i = 0, len = filtered.length; i < len; ++i) {\n                 var item = filtered[i];\n                 var name = item[0];\n                 var desc = item[1]; // can be null\n@@ -2122,21 +2117,18 @@ function defocusSearchBar() {\n         }\n \n         var libs = Object.getOwnPropertyNames(imp);\n-        var llength = libs.length;\n-        for (var i = 0; i < llength; ++i) {\n+        for (var i = 0, llength = libs.length; i < llength; ++i) {\n             if (libs[i] === currentCrate) { continue; }\n             var structs = imp[libs[i]];\n \n-            var slength = structs.length;\n             struct_loop:\n-            for (var j = 0; j < slength; ++j) {\n+            for (var j = 0, slength = structs.length; j < slength; ++j) {\n                 var struct = structs[j];\n \n                 var list = struct.synthetic ? synthetic_implementors : implementors;\n \n                 if (struct.synthetic) {\n-                    var stlength = struct.types.length;\n-                    for (var k = 0; k < stlength; k++) {\n+                    for (var k = 0, stlength = struct.types.length; k < stlength; k++) {\n                         if (inlined_types.has(struct.types[k])) {\n                             continue struct_loop;\n                         }\n@@ -2853,7 +2845,7 @@ function defocusSearchBar() {\n             return 0;\n         });\n         var savedCrate = getSettingValue(\"saved-filter-crate\");\n-        for (var i = 0; i < crates_text.length; ++i) {\n+        for (var i = 0, len = crates_text.length; i < len; ++i) {\n             var option = document.createElement(\"option\");\n             option.value = crates_text[i];\n             option.innerText = crates_text[i];"}, {"sha": "a9cc0ffdf79b084ff923898b371419fc04f48678", "filename": "src/librustdoc/html/static/source-script.js", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7cd8128da3d81bdc8f6e9da19f09f236c1703800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/7cd8128da3d81bdc8f6e9da19f09f236c1703800/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsource-script.js?ref=7cd8128da3d81bdc8f6e9da19f09f236c1703800", "patch": "@@ -8,7 +8,7 @@ function getCurrentFilePath() {\n     var parts = window.location.pathname.split(\"/\");\n     var rootPathParts = window.rootPath.split(\"/\");\n \n-    for (var i = 0; i < rootPathParts.length; ++i) {\n+    for (var i = 0, len = rootPathParts.length; i < len; ++i) {\n         if (rootPathParts[i] === \"..\") {\n             parts.pop();\n         }\n@@ -35,12 +35,14 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n     };\n     name.innerText = elem[\"name\"];\n \n+    var i, len;\n+\n     var children = document.createElement(\"div\");\n     children.className = \"children\";\n     var folders = document.createElement(\"div\");\n     folders.className = \"folders\";\n     if (elem.dirs) {\n-        for (var i = 0; i < elem.dirs.length; ++i) {\n+        for (i = 0, len = elem.dirs.length; i < len; ++i) {\n             if (createDirEntry(elem.dirs[i], folders, fullPath, currentFile,\n                                hasFoundFile) === true) {\n                 addClass(name, \"expand\");\n@@ -53,7 +55,7 @@ function createDirEntry(elem, parent, fullPath, currentFile, hasFoundFile) {\n     var files = document.createElement(\"div\");\n     files.className = \"files\";\n     if (elem.files) {\n-        for (i = 0; i < elem.files.length; ++i) {\n+        for (i = 0, len = elem.files.length; i < len; ++i) {\n             var file = document.createElement(\"a\");\n             file.innerText = elem.files[i];\n             file.href = window.rootPath + \"src/\" + fullPath + elem.files[i] + \".html\";"}]}