{"sha": "e780daf372886ac3e30e6d4580a0505da3471d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ODBkYWYzNzI4ODZhYzNlMzBlNmQ0NTgwYTA1MDVkYTM0NzFkMDI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T11:52:38Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T11:52:38Z"}, "message": "hir: remove Visitor::visit_def_mention", "tree": {"sha": "3cd52d632dd1de893492622325113000341cea6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cd52d632dd1de893492622325113000341cea6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e780daf372886ac3e30e6d4580a0505da3471d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e780daf372886ac3e30e6d4580a0505da3471d02", "html_url": "https://github.com/rust-lang/rust/commit/e780daf372886ac3e30e6d4580a0505da3471d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e780daf372886ac3e30e6d4580a0505da3471d02/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "url": "https://api.github.com/repos/rust-lang/rust/commits/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d", "html_url": "https://github.com/rust-lang/rust/commit/42fbcb567c30aa79b2f6d5167b8364fa18d4d51d"}], "stats": {"total": 21, "additions": 1, "deletions": 20}, "files": [{"sha": "977830315e23e893c74ea3dc240800bfcad33817", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e780daf372886ac3e30e6d4580a0505da3471d02/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e780daf372886ac3e30e6d4580a0505da3471d02/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e780daf372886ac3e30e6d4580a0505da3471d02", "patch": "@@ -34,7 +34,6 @@\n use syntax::ast::{Ident, Name, Attribute};\n use syntax_pos::Span;\n use crate::hir::*;\n-use crate::hir::def::Def;\n use crate::hir::map::Map;\n use super::itemlikevisit::DeepVisitor;\n \n@@ -228,9 +227,6 @@ pub trait Visitor<'v> : Sized {\n     fn visit_id(&mut self, _hir_id: HirId) {\n         // Nothing to do.\n     }\n-    fn visit_def_mention(&mut self, _def: Def) {\n-        // Nothing to do.\n-    }\n     fn visit_name(&mut self, _span: Span, _name: Name) {\n         // Nothing to do.\n     }\n@@ -494,13 +490,10 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_generics(type_parameters)\n         }\n-        ItemKind::Existential(ExistTy {ref generics, ref bounds, impl_trait_fn}) => {\n+        ItemKind::Existential(ExistTy { ref generics, ref bounds, impl_trait_fn: _ }) => {\n             visitor.visit_id(item.hir_id);\n             walk_generics(visitor, generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n-            if let Some(impl_trait_fn) = impl_trait_fn {\n-                visitor.visit_def_mention(Def::Fn(impl_trait_fn))\n-            }\n         }\n         ItemKind::Enum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters);\n@@ -640,7 +633,6 @@ pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V, qpath: &'v QPath, id: Hir\n }\n \n pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n-    visitor.visit_def_mention(path.def);\n     for segment in &path.segments {\n         visitor.visit_path_segment(path.span, segment);\n     }\n@@ -698,7 +690,6 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_pat(subpattern)\n         }\n         PatKind::Binding(_, _hir_id, ident, ref optional_subpattern) => {\n-            // visitor.visit_def_mention(Def::Local(hir_id));\n             visitor.visit_ident(ident);\n             walk_list!(visitor, visit_pat, optional_subpattern);\n         }\n@@ -1064,22 +1055,12 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::Break(ref destination, ref opt_expr) => {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n-                /*\n-                if let Ok(node_id) = destination.target_id {\n-                    visitor.visit_def_mention(Def::Label(node_id))\n-                }\n-                */\n             }\n             walk_list!(visitor, visit_expr, opt_expr);\n         }\n         ExprKind::Continue(ref destination) => {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n-                /*\n-                if let Ok(node_id) = destination.target_id {\n-                    visitor.visit_def_mention(Def::Label(node_id))\n-                }\n-                */\n             }\n         }\n         ExprKind::Ret(ref optional_expression) => {"}]}