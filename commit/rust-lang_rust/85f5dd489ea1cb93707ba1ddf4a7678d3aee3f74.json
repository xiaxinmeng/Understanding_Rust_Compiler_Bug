{"sha": "85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZjVkZDQ4OWVhMWNiOTM3MDdiYTFkZGY0YTc2NzhkM2FlZTNmNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T10:40:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-20T10:40:25Z"}, "message": "Auto merge of #50052 - nnethercote:char_lit, r=Mark-Simulacrum\n\nAvoid allocating when parsing \\u{...} literals.\n\n`char_lit` uses an allocation in order to ignore '_' chars in \\u{...}\nliterals. This patch changes it to not do that by processing the chars\nmore directly.\n\nThis improves various rustc-perf benchmark measurements by up to 6%,\nparticularly regex, futures, clap, coercions, hyper, and encoding.\n\nrustc-perf results, on a stage 2 build with jemalloc disabled:\n\n<details>\n\n```\nregex-check\n\tavg: -5.4%\tmin: -6.5%\tmax: -2.7%\nfutures-check\n\tavg: -3.5%\tmin: -5.3%\tmax: -1.7%\nregex-opt\n\tavg: -2.0%\tmin: -5.1%\tmax: -0.2%\nregex\n\tavg: -2.3%\tmin: -5.0%\tmax: -0.6%\nfutures-opt\n\tavg: -3.0%\tmin: -4.8%\tmax: -1.1%\nfutures\n\tavg: -3.1%\tmin: -4.8%\tmax: -1.3%\nclap-rs-check\n\tavg: -1.8%\tmin: -3.5%\tmax: -0.9%\ncoercions-check\n\tavg: -2.0%\tmin: -3.3%\tmax: -1.0%\nhyper-check\n\tavg: -2.2%\tmin: -3.1%\tmax: -1.3%\nhyper\n\tavg: -1.3%\tmin: -2.4%\tmax: -0.3%\nhyper-opt\n\tavg: -0.9%\tmin: -2.3%\tmax: -0.1%\ncoercions\n\tavg: -1.1%\tmin: -2.2%\tmax: -0.4%\nencoding-check\n\tavg: -1.7%\tmin: -2.2%\tmax: -0.9%\nclap-rs-opt\n\tavg: -0.7%\tmin: -2.2%\tmax: 0.0%\ncoercions-opt\n\tavg: -1.2%\tmin: -2.1%\tmax: -0.3%\nclap-rs\n\tavg: -0.8%\tmin: -1.9%\tmax: -0.4%\nencoding-opt\n\tavg: -1.0%\tmin: -1.9%\tmax: -0.3%\nencoding\n\tavg: -1.1%\tmin: -1.9%\tmax: -0.4%\npiston-image-check\n\tavg: -0.7%\tmin: -1.3%\tmax: -0.3%\ninflate-opt\n\tavg: -0.3%\tmin: -0.9%\tmax: -0.0%\npiston-image\n\tavg: -0.3%\tmin: -0.8%\tmax: -0.1%\npiston-image-opt\n\tavg: -0.3%\tmin: -0.7%\tmax: -0.1%\nsyn-check\n\tavg: -0.3%\tmin: -0.6%\tmax: -0.1%\ndeep-vector\n\tavg: 0.1%\tmin: -0.1%\tmax: 0.5%\nsyn-opt\n\tavg: -0.1%\tmin: -0.4%\tmax: 0.0%\nhtml5ever\n\tavg: -0.2%\tmin: -0.4%\tmax: -0.0%\ndeep-vector-check\n\tavg: 0.0%\tmin: -0.3%\tmax: 0.3%\nsyn\n\tavg: -0.2%\tmin: -0.3%\tmax: -0.1%\nhtml5ever-check\n\tavg: -0.3%\tmin: -0.3%\tmax: -0.2%\nissue-46449-check\n\tavg: -0.1%\tmin: -0.2%\tmax: 0.2%\nhtml5ever-opt\n\tavg: -0.0%\tmin: -0.2%\tmax: 0.1%\ndeep-vector-opt\n\tavg: -0.0%\tmin: -0.2%\tmax: 0.1%\nissue-46449-opt\n\tavg: -0.0%\tmin: -0.2%\tmax: 0.1%\nunify-linearly-check\n\tavg: -0.0%\tmin: -0.2%\tmax: 0.1%\nhelloworld-check\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.2%\nparser-check\n\tavg: -0.0%\tmin: -0.2%\tmax: 0.0%\ninflate\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.1%\ntokio-webpush-simple-check\n\tavg: -0.1%\tmin: -0.1%\tmax: -0.0%\nregression-31157-check\n\tavg: 0.0%\tmin: -0.1%\tmax: 0.1%\nissue-46449\n\tavg: 0.0%\tmin: -0.1%\tmax: 0.1%\ntuple-stress-opt\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.1%\ntuple-stress-check\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.1%\ntuple-stress\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.1%\ndeeply-nested-check\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.1%\nregression-31157\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.1%\ndeeply-nested-opt\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.1%\nparser-opt\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.0%\nparser\n\tavg: 0.1%\tmin: 0.0%\tmax: 0.1%\ntokio-webpush-simple\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.1%\nregression-31157-opt\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.1%\nhelloworld-opt\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.1%\nunify-linearly-opt\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.1%\nunused-warnings-check\n\tavg: 0.0%\tmin: 0.0%\tmax: 0.1%\ntokio-webpush-simple-opt\n\tavg: -0.0%\tmin: -0.1%\tmax: 0.0%\nhelloworld\n\tavg: -0.0%\tmin: -0.0%\tmax: 0.1%\nunused-warnings\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.0%\ndeeply-nested\n\tavg: -0.0%\tmin: -0.0%\tmax: -0.0%\nunused-warnings-opt\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.0%\nunify-linearly\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.0%\ninflate-check\n\tavg: 0.0%\tmin: -0.0%\tmax: 0.0%\n```\n\n</details>", "tree": {"sha": "737fe703206e410d94ba4f04d33733dfe74d26bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/737fe703206e410d94ba4f04d33733dfe74d26bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74", "html_url": "https://github.com/rust-lang/rust/commit/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4443995c91648460a5483ca8b7886cd04197e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4443995c91648460a5483ca8b7886cd04197e2", "html_url": "https://github.com/rust-lang/rust/commit/1a4443995c91648460a5483ca8b7886cd04197e2"}, {"sha": "9f145022ef9390e6cfb0b2416744a393d62d3350", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f145022ef9390e6cfb0b2416744a393d62d3350", "html_url": "https://github.com/rust-lang/rust/commit/9f145022ef9390e6cfb0b2416744a393d62d3350"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "0397c3297db0a2e832295b1369432791c9bf123f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=85f5dd489ea1cb93707ba1ddf4a7678d3aee3f74", "patch": "@@ -271,8 +271,16 @@ pub fn char_lit(lit: &str, diag: Option<(Span, &Handler)>) -> (char, isize) {\n         'u' => {\n             assert_eq!(lit.as_bytes()[2], b'{');\n             let idx = lit.find('}').unwrap();\n-            let s = &lit[3..idx].chars().filter(|&c| c != '_').collect::<String>();\n-            let v = u32::from_str_radix(&s, 16).unwrap();\n+\n+            // All digits and '_' are ascii, so treat each byte as a char.\n+            let mut v: u32 = 0;\n+            for c in lit[3..idx].bytes() {\n+                let c = char::from(c);\n+                if c != '_' {\n+                    let x = c.to_digit(16).unwrap();\n+                    v = v.checked_mul(16).unwrap().checked_add(x).unwrap();\n+                }\n+            }\n             let c = char::from_u32(v).unwrap_or_else(|| {\n                 if let Some((span, diag)) = diag {\n                     let mut diag = diag.struct_span_err(span, \"invalid unicode character escape\");"}]}