{"sha": "d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMmQ4OGYwZGM1YmQxN2Y2MDE4NmZhNDlhYTQzYmM4MmM3ZmE3OWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-26T08:41:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-26T08:41:22Z"}, "message": "Merge #4154\n\n4154: Add `cargo test` to the list of Run commands r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "90f8186a9fba134e0661c811bf0fe09672508c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90f8186a9fba134e0661c811bf0fe09672508c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepUkyCRBK7hj4Ov3rIwAAdHIIAGnCysbvjnDH15XXuIGvSDBP\nIK/UOb0DYFeluR5BLA69ArSybI0uJ4aCrtmjH+rp2lUuqWahFgg76u2m7XKKPx/P\niTaF5Kw5zUOm9DGjtlfF5ZxyY3CJ0+BCczVMyoCAgJPznJBSd1+olz2lKTw+HGIr\n4y7bqs9Yu/P0NqDkjIuvU+rIT5KG1dp7s0AJetop3FD/Co3SIu9/fbRK+gjFLB7v\nBaGCuU9Sd6rEz6ezrEYSlXSYPPqUrgoHJ5dtNPf+4L/j0FYqurN/m0tYMkv7gQBx\npwQhgfzGRqu6dM2dh0qB+7mU4HQHqc8511j67LTQqUZ9foYj2IPQcRauZUZYAJA=\n=VXp0\n-----END PGP SIGNATURE-----\n", "payload": "tree 90f8186a9fba134e0661c811bf0fe09672508c0e\nparent fe99a29ad1226dd3f6801ea4bdb575506324be07\nparent 5ef0f44499321ff2e8de8daf35c3ea2015c89375\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587890482 +0000\ncommitter GitHub <noreply@github.com> 1587890482 +0000\n\nMerge #4154\n\n4154: Add `cargo test` to the list of Run commands r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b", "html_url": "https://github.com/rust-lang/rust/commit/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe99a29ad1226dd3f6801ea4bdb575506324be07", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe99a29ad1226dd3f6801ea4bdb575506324be07", "html_url": "https://github.com/rust-lang/rust/commit/fe99a29ad1226dd3f6801ea4bdb575506324be07"}, {"sha": "5ef0f44499321ff2e8de8daf35c3ea2015c89375", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef0f44499321ff2e8de8daf35c3ea2015c89375", "html_url": "https://github.com/rust-lang/rust/commit/5ef0f44499321ff2e8de8daf35c3ea2015c89375"}], "stats": {"total": 125, "additions": 63, "deletions": 62}, "files": [{"sha": "10c25666a0e91c73c4fa5bff5de5595fd307d600", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b", "patch": "@@ -9,6 +9,7 @@ use crate::{world::WorldSnapshot, Result};\n ///\n /// We use it to cook up the set of cli args we need to pass to Cargo to\n /// build/test/run the target.\n+#[derive(Clone)]\n pub(crate) struct CargoTargetSpec {\n     pub(crate) package: String,\n     pub(crate) target: String,"}, {"sha": "6caaf5f88d30c35de585e9406d9b002ae8830bc1", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b", "patch": "@@ -393,28 +393,37 @@ pub fn handle_runnables(\n         }\n         res.push(to_lsp_runnable(&world, file_id, runnable)?);\n     }\n-    let mut check_args = vec![\"check\".to_string()];\n-    let label;\n+    // Add `cargo check` and `cargo test` for the whole package\n     match CargoTargetSpec::for_file(&world, file_id)? {\n         Some(spec) => {\n-            label = format!(\"cargo check -p {}\", spec.package);\n-            spec.push_to(&mut check_args);\n+            for &cmd in [\"check\", \"test\"].iter() {\n+                res.push(req::Runnable {\n+                    range: Default::default(),\n+                    label: format!(\"cargo {} -p {}\", cmd, spec.package),\n+                    bin: \"cargo\".to_string(),\n+                    args: {\n+                        let mut args = vec![cmd.to_string()];\n+                        spec.clone().push_to(&mut args);\n+                        args\n+                    },\n+                    extra_args: Vec::new(),\n+                    env: FxHashMap::default(),\n+                    cwd: workspace_root.map(|root| root.to_owned()),\n+                })\n+            }\n         }\n         None => {\n-            label = \"cargo check --all\".to_string();\n-            check_args.push(\"--all\".to_string())\n+            res.push(req::Runnable {\n+                range: Default::default(),\n+                label: \"cargo check --workspace\".to_string(),\n+                bin: \"cargo\".to_string(),\n+                args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n+                extra_args: Vec::new(),\n+                env: FxHashMap::default(),\n+                cwd: workspace_root.map(|root| root.to_owned()),\n+            });\n         }\n     }\n-    // Always add `cargo check`.\n-    res.push(req::Runnable {\n-        range: Default::default(),\n-        label,\n-        bin: \"cargo\".to_string(),\n-        args: check_args,\n-        extra_args: Vec::new(),\n-        env: FxHashMap::default(),\n-        cwd: workspace_root.map(|root| root.to_owned()),\n-    });\n     Ok(res)\n }\n "}, {"sha": "f6245ddd47ac96039bd2268c1d47a243752577c1", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 37, "deletions": 46, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=d22d88f0dc5bd17f60186fa49aa43bc82c7fa79b", "patch": "@@ -87,24 +87,15 @@ fn foo() {\n             }\n           },\n           {\n-            \"args\": [\n-              \"check\",\n-              \"--all\"\n-            ],\n+            \"args\": [\"check\", \"--workspace\"],\n             \"extraArgs\": [],\n             \"bin\": \"cargo\",\n             \"env\": {},\n             \"cwd\": null,\n-            \"label\": \"cargo check --all\",\n+            \"label\": \"cargo check --workspace\",\n             \"range\": {\n-              \"end\": {\n-                \"character\": 0,\n-                \"line\": 0\n-              },\n-              \"start\": {\n-                \"character\": 0,\n-                \"line\": 0\n-              }\n+              \"end\": { \"character\": 0, \"line\": 0 },\n+              \"start\": { \"character\": 0, \"line\": 0 }\n             }\n           }\n         ]),\n@@ -145,42 +136,42 @@ fn main() {}\n     server.request::<Runnables>(\n         RunnablesParams { text_document: server.doc_id(\"foo/tests/spam.rs\"), position: None },\n         json!([\n-          {\n-            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n-            \"extraArgs\": [ \"test_eggs\", \"--exact\", \"--nocapture\" ],\n-            \"bin\": \"cargo\",\n-            \"env\": { \"RUST_BACKTRACE\": \"short\" },\n-            \"label\": \"test test_eggs\",\n-            \"range\": {\n-              \"end\": { \"character\": 17, \"line\": 1 },\n-              \"start\": { \"character\": 0, \"line\": 0 }\n+            {\n+              \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n+              \"extraArgs\": [ \"test_eggs\", \"--exact\", \"--nocapture\" ],\n+              \"bin\": \"cargo\",\n+              \"env\": { \"RUST_BACKTRACE\": \"short\" },\n+              \"label\": \"test test_eggs\",\n+              \"range\": {\n+                \"end\": { \"character\": 17, \"line\": 1 },\n+                \"start\": { \"character\": 0, \"line\": 0 }\n+              },\n+              \"cwd\": server.path().join(\"foo\")\n             },\n-            \"cwd\": server.path().join(\"foo\")\n-          },\n-          {\n-            \"args\": [\n-              \"check\",\n-              \"--package\",\n-              \"foo\",\n-              \"--test\",\n-              \"spam\"\n-            ],\n-            \"extraArgs\": [],\n-            \"bin\": \"cargo\",\n-            \"env\": {},\n-            \"cwd\": server.path().join(\"foo\"),\n-            \"label\": \"cargo check -p foo\",\n-            \"range\": {\n-              \"end\": {\n-                \"character\": 0,\n-                \"line\": 0\n+            {\n+              \"args\": [ \"check\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n+              \"extraArgs\": [],\n+              \"bin\": \"cargo\",\n+              \"env\": {},\n+              \"label\": \"cargo check -p foo\",\n+              \"range\": {\n+                \"end\": { \"character\": 0, \"line\": 0 },\n+                \"start\": { \"character\": 0, \"line\": 0 }\n               },\n-              \"start\": {\n-                \"character\": 0,\n-                \"line\": 0\n-              }\n+              \"cwd\": server.path().join(\"foo\")\n+            },\n+            {\n+              \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n+              \"extraArgs\": [],\n+              \"bin\": \"cargo\",\n+              \"env\": {},\n+              \"label\": \"cargo test -p foo\",\n+              \"range\": {\n+                \"end\": { \"character\": 0, \"line\": 0 },\n+                \"start\": { \"character\": 0, \"line\": 0 }\n+              },\n+              \"cwd\": server.path().join(\"foo\")\n             }\n-          }\n         ]),\n     );\n }"}]}