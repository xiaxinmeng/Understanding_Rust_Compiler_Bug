{"sha": "4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZDQ0YzgwZGIzYTMxYTUxNmQyNzYxZDBkOWY3YzBlMWUzODE1OTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-14T08:06:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T08:06:31Z"}, "message": "Merge #1843\n\n1843: Upgrade Chalk r=flodiebold a=flodiebold\n\n... and remove Ty::UnselectedProjection. It'll be handled differently.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "b9e0af636566398fd983bca29f3af20405c9da51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e0af636566398fd983bca29f3af20405c9da51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfJ+HCRBK7hj4Ov3rIwAAdHIIAIKnG9VDOfMdNPPsU1y7sqBj\nYeOT0JZXJS8XWEXzJHFBrV5QvPwnF7TLMtvD7M7ExewVsZsThdbUzzJ6VOFaAUGN\nR7zd4Akn0z6Aflj/e4rct1IYNIDPvOxh0QZqxB74DZ4cEFNZj118lN2F9oW/AiZR\nZnAOsuuuGWsbSC5GTSRhOCbFFHrkfVkSuFcypGMBVSy3EASVpi2C4/WA0w9Ik2Pr\n+ow1Wsy/ivBMUXQQuhHyjX+5dwc1hO+q1V36B7RkWd8YZdbtvSCR70fRi+x/vIFr\nQWa13BKH8J4sqqsnTiJhDpHOQ+h/uffNIAuko/ijcU3ucVbiBcL3zUk7rhomAcI=\n=hF+N\n-----END PGP SIGNATURE-----\n", "payload": "tree b9e0af636566398fd983bca29f3af20405c9da51\nparent b8c16ec002d48f4fb9d883d091114ccd1286ba47\nparent a61615c95537ec85b6b52505f42cbd9481adf89d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568448391 +0000\ncommitter GitHub <noreply@github.com> 1568448391 +0000\n\nMerge #1843\n\n1843: Upgrade Chalk r=flodiebold a=flodiebold\n\n... and remove Ty::UnselectedProjection. It'll be handled differently.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "html_url": "https://github.com/rust-lang/rust/commit/4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c16ec002d48f4fb9d883d091114ccd1286ba47", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c16ec002d48f4fb9d883d091114ccd1286ba47", "html_url": "https://github.com/rust-lang/rust/commit/b8c16ec002d48f4fb9d883d091114ccd1286ba47"}, {"sha": "a61615c95537ec85b6b52505f42cbd9481adf89d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a61615c95537ec85b6b52505f42cbd9481adf89d", "html_url": "https://github.com/rust-lang/rust/commit/a61615c95537ec85b6b52505f42cbd9481adf89d"}], "stats": {"total": 68, "additions": 5, "deletions": 63}, "files": [{"sha": "ae204c8ff5357e3032ae591d36baf5ddbb9ad1b4", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "patch": "@@ -122,7 +122,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n [[package]]\n name = \"chalk-engine\"\n version = \"0.9.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git#6a532fc2eb82275a5bda2785c7f5382d555f53f4\"\n+source = \"git+https://github.com/rust-lang/chalk.git#b4a6b655578ee35b1b3f6b8579636269cf3b0b1a\"\n dependencies = [\n  \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -132,7 +132,7 @@ dependencies = [\n [[package]]\n name = \"chalk-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git#6a532fc2eb82275a5bda2785c7f5382d555f53f4\"\n+source = \"git+https://github.com/rust-lang/chalk.git#b4a6b655578ee35b1b3f6b8579636269cf3b0b1a\"\n dependencies = [\n  \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git)\",\n  \"chalk-macros 0.1.1 (git+https://github.com/rust-lang/chalk.git)\",\n@@ -142,15 +142,15 @@ dependencies = [\n [[package]]\n name = \"chalk-macros\"\n version = \"0.1.1\"\n-source = \"git+https://github.com/rust-lang/chalk.git#6a532fc2eb82275a5bda2785c7f5382d555f53f4\"\n+source = \"git+https://github.com/rust-lang/chalk.git#b4a6b655578ee35b1b3f6b8579636269cf3b0b1a\"\n dependencies = [\n  \"lazy_static 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"chalk-rust-ir\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git#6a532fc2eb82275a5bda2785c7f5382d555f53f4\"\n+source = \"git+https://github.com/rust-lang/chalk.git#b4a6b655578ee35b1b3f6b8579636269cf3b0b1a\"\n dependencies = [\n  \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git)\",\n  \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git)\",\n@@ -160,7 +160,7 @@ dependencies = [\n [[package]]\n name = \"chalk-solve\"\n version = \"0.1.0\"\n-source = \"git+https://github.com/rust-lang/chalk.git#6a532fc2eb82275a5bda2785c7f5382d555f53f4\"\n+source = \"git+https://github.com/rust-lang/chalk.git#b4a6b655578ee35b1b3f6b8579636269cf3b0b1a\"\n dependencies = [\n  \"chalk-engine 0.9.0 (git+https://github.com/rust-lang/chalk.git)\",\n  \"chalk-ir 0.1.0 (git+https://github.com/rust-lang/chalk.git)\","}, {"sha": "a223e120a722bea40c36720db723478ef9d04d0c", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "patch": "@@ -142,22 +142,6 @@ impl TypeWalk for ProjectionTy {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct UnselectedProjectionTy {\n-    pub type_name: Name,\n-    pub parameters: Substs,\n-}\n-\n-impl TypeWalk for UnselectedProjectionTy {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.parameters.walk(f);\n-    }\n-\n-    fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n-        self.parameters.walk_mut(f);\n-    }\n-}\n-\n /// A type.\n ///\n /// See also the `TyKind` enum in rustc (librustc/ty/sty.rs), which represents\n@@ -176,13 +160,6 @@ pub enum Ty {\n     /// trait and all its parameters are fully known.\n     Projection(ProjectionTy),\n \n-    /// This is a variant of a projection in which the trait is\n-    /// **not** known.  It corresponds to a case where people write\n-    /// `T::Item` without specifying the trait. We would then try to\n-    /// figure out the trait by looking at all the traits that are in\n-    /// scope.\n-    UnselectedProjection(UnselectedProjectionTy),\n-\n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n     Param {\n         /// The index of the parameter (starting with parameters from the\n@@ -618,11 +595,6 @@ impl TypeWalk for Ty {\n                     t.walk(f);\n                 }\n             }\n-            Ty::UnselectedProjection(p_ty) => {\n-                for t in p_ty.parameters.iter() {\n-                    t.walk(f);\n-                }\n-            }\n             Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n                 for p in predicates.iter() {\n                     p.walk(f);\n@@ -641,9 +613,6 @@ impl TypeWalk for Ty {\n             Ty::Projection(p_ty) => {\n                 p_ty.parameters.walk_mut(f);\n             }\n-            Ty::UnselectedProjection(p_ty) => {\n-                p_ty.parameters.walk_mut(f);\n-            }\n             Ty::Dyn(predicates) | Ty::Opaque(predicates) => {\n                 let mut v: Vec<_> = predicates.iter().cloned().collect();\n                 for p in &mut v {\n@@ -774,25 +743,11 @@ impl HirDisplay for ProjectionTy {\n     }\n }\n \n-impl HirDisplay for UnselectedProjectionTy {\n-    fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n-        write!(f, \"{}\", self.parameters[0].display(f.db))?;\n-        if self.parameters.len() > 1 {\n-            write!(f, \"<\")?;\n-            f.write_joined(&self.parameters[1..], \", \")?;\n-            write!(f, \">\")?;\n-        }\n-        write!(f, \"::{}\", self.type_name)?;\n-        Ok(())\n-    }\n-}\n-\n impl HirDisplay for Ty {\n     fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n         match self {\n             Ty::Apply(a_ty) => a_ty.hir_fmt(f)?,\n             Ty::Projection(p_ty) => p_ty.hir_fmt(f)?,\n-            Ty::UnselectedProjection(p_ty) => p_ty.hir_fmt(f)?,\n             Ty::Param { name, .. } => write!(f, \"{}\", name)?,\n             Ty::Bound(idx) => write!(f, \"?{}\", idx)?,\n             Ty::Dyn(predicates) | Ty::Opaque(predicates) => {"}, {"sha": "bf57bb3b7057e0ab76b059a4badb154949777eac", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "patch": "@@ -429,10 +429,6 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let ty = self.resolve_ty_as_possible(&mut vec![], ty);\n         ty.fold(&mut |ty| match ty {\n             Ty::Projection(proj_ty) => self.normalize_projection_ty(proj_ty),\n-            Ty::UnselectedProjection(proj_ty) => {\n-                // FIXME use Chalk's unselected projection support\n-                Ty::UnselectedProjection(proj_ty)\n-            }\n             _ => ty,\n         })\n     }"}, {"sha": "c748e9d84a13aa33239b175290d7bd11f9165104", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed44c80db3a31a516d2761d0d9f7c0e1e381597/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=4ed44c80db3a31a516d2761d0d9f7c0e1e381597", "patch": "@@ -65,14 +65,6 @@ impl ToChalk for Ty {\n                 let parameters = proj_ty.parameters.to_chalk(db);\n                 chalk_ir::ProjectionTy { associated_ty_id, parameters }.cast()\n             }\n-            Ty::UnselectedProjection(proj_ty) => {\n-                let type_name = lalrpop_intern::intern(&proj_ty.type_name.to_string());\n-                let parameters = proj_ty.parameters.to_chalk(db);\n-                chalk_ir::Ty::UnselectedProjection(chalk_ir::UnselectedProjectionTy {\n-                    type_name,\n-                    parameters,\n-                })\n-            }\n             Ty::Param { idx, .. } => {\n                 PlaceholderIndex { ui: UniverseIndex::ROOT, idx: idx as usize }.to_ty()\n             }\n@@ -113,7 +105,6 @@ impl ToChalk for Ty {\n                 }\n             }\n             chalk_ir::Ty::Projection(_) => unimplemented!(),\n-            chalk_ir::Ty::UnselectedProjection(_) => unimplemented!(),\n             chalk_ir::Ty::ForAll(_) => unimplemented!(),\n             chalk_ir::Ty::BoundVar(idx) => Ty::Bound(idx as u32),\n             chalk_ir::Ty::InferenceVar(_iv) => panic!(\"unexpected chalk infer ty\"),"}]}