{"sha": "e0998847bee42134b0de48a82412503ca72a7fb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOTk4ODQ3YmVlNDIxMzRiMGRlNDhhODI0MTI1MDNjYTcyYTdmYjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-15T00:35:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-15T00:35:31Z"}, "message": "Teach fold about objs.", "tree": {"sha": "f0400a5f7e7c61418808ed6a5043d75a1301961a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0400a5f7e7c61418808ed6a5043d75a1301961a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0998847bee42134b0de48a82412503ca72a7fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0998847bee42134b0de48a82412503ca72a7fb9", "html_url": "https://github.com/rust-lang/rust/commit/e0998847bee42134b0de48a82412503ca72a7fb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0998847bee42134b0de48a82412503ca72a7fb9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b606ba81cf4f872e9aff4d4f8d23da6843ce0638", "url": "https://api.github.com/repos/rust-lang/rust/commits/b606ba81cf4f872e9aff4d4f8d23da6843ce0638", "html_url": "https://github.com/rust-lang/rust/commit/b606ba81cf4f872e9aff4d4f8d23da6843ce0638"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "90f6bed355f7f98b6025ddb2d93dc93e13ff0e0b", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e0998847bee42134b0de48a82412503ca72a7fb9/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0998847bee42134b0de48a82412503ca72a7fb9/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=e0998847bee42134b0de48a82412503ca72a7fb9", "patch": "@@ -191,6 +191,11 @@ type ast_fold[ENV] =\n          vec[ast.ty_param] ty_params,\n          def_id id) -> @item)                     fold_item_tag,\n \n+     (fn(&ENV e, &span sp, ident ident,\n+         &ast._obj ob,\n+         vec[ast.ty_param] ty_params,\n+         def_id id, ann a) -> @item)              fold_item_obj,\n+\n      // Additional nodes.\n      (fn(&ENV e, &span sp,\n          &ast.block_) -> block)                   fold_block,\n@@ -204,6 +209,10 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          &ast._mod m) -> @ast.crate)              fold_crate,\n \n+     (fn(&ENV e,\n+         vec[ast.obj_field] fields,\n+         vec[@ast.method] methods) -> ast._obj)   fold_obj,\n+\n      // Env updates.\n      (fn(&ENV e, @ast.crate c) -> ENV) update_env_for_crate,\n      (fn(&ENV e, @item i) -> ENV) update_env_for_item,\n@@ -596,6 +605,34 @@ fn fold_fn[ENV](&ENV env, ast_fold[ENV] fld, &ast._fn f) -> ast._fn {\n     ret fld.fold_fn(env, f.effect, inputs, output, body);\n }\n \n+\n+fn fold_obj_field[ENV](&ENV env, ast_fold[ENV] fld,\n+                       &ast.obj_field f) -> ast.obj_field {\n+    auto ty = fold_ty(env, fld, f.ty);\n+    ret rec(ty=ty with f);\n+}\n+\n+\n+fn fold_method[ENV](&ENV env, ast_fold[ENV] fld,\n+                    @ast.method m) -> @ast.method {\n+    auto meth = fold_fn(env, fld, m.node.meth);\n+    ret @rec(node=rec(meth=meth with m.node) with *m);\n+}\n+\n+\n+fn fold_obj[ENV](&ENV env, ast_fold[ENV] fld, &ast._obj ob) -> ast._obj {\n+\n+    let vec[ast.obj_field] fields = vec();\n+    let vec[@ast.method] meths = vec();\n+    for (ast.obj_field f in ob.fields) {\n+        fields += fold_obj_field(env, fld, f);\n+    }\n+    for (@ast.method m in ob.methods) {\n+        append[@ast.method](meths, fold_method(env, fld, m));\n+    }\n+    ret fld.fold_obj(env, fields, meths);\n+}\n+\n fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n \n     let ENV env_ = fld.update_env_for_item(env, i);\n@@ -641,6 +678,12 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n             ret fld.fold_item_tag(env_, i.span, ident, new_variants,\n                                   ty_params, id);\n         }\n+\n+        case (ast.item_obj(?ident, ?ob, ?tps, ?id, ?ann)) {\n+            let ast._obj ob_ = fold_obj[ENV](env_, fld, ob);\n+            ret fld.fold_item_obj(env_, i.span, ident, ob_, tps, id, ann);\n+        }\n+\n     }\n \n     fail;\n@@ -926,6 +969,12 @@ fn identity_fold_item_tag[ENV](&ENV e, &span sp, ident i,\n     ret @respan(sp, ast.item_tag(i, variants, ty_params, id));\n }\n \n+fn identity_fold_item_obj[ENV](&ENV e, &span sp, ident i,\n+                               &ast._obj ob, vec[ast.ty_param] ty_params,\n+                               def_id id, ann a) -> @item {\n+    ret @respan(sp, ast.item_obj(i, ob, ty_params, id, a));\n+}\n+\n \n // Additional identities.\n \n@@ -949,6 +998,12 @@ fn identity_fold_crate[ENV](&ENV e, &span sp, &ast._mod m) -> @ast.crate {\n     ret @respan(sp, rec(module=m));\n }\n \n+fn identity_fold_obj[ENV](&ENV e,\n+                          vec[ast.obj_field] fields,\n+                          vec[@ast.method] methods) -> ast._obj {\n+    ret rec(fields=fields, methods=methods);\n+}\n+\n \n // Env update identities.\n \n@@ -1056,11 +1111,13 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_,_),\n          fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_),\n+         fold_item_obj  = bind identity_fold_item_obj[ENV](_,_,_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n          fold_fn = bind identity_fold_fn[ENV](_,_,_,_,_),\n          fold_mod = bind identity_fold_mod[ENV](_,_),\n          fold_crate = bind identity_fold_crate[ENV](_,_,_),\n+         fold_obj = bind identity_fold_obj[ENV](_,_,_),\n \n          update_env_for_crate = bind identity_update_env_for_crate[ENV](_,_),\n          update_env_for_item = bind identity_update_env_for_item[ENV](_,_),"}]}