{"sha": "2e6528961c44a4f3841fd319af71f1d1a6af029c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNjUyODk2MWM0NGE0ZjM4NDFmZDMxOWFmNzFmMWQxYTZhZjAyOWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-09T21:56:20Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-09T22:02:13Z"}, "message": "builtin_macros: Add attribute macro `#[cfg_accessible(path)]`", "tree": {"sha": "2604b076be2dd037efa03824c1af7ffe9eedfc98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2604b076be2dd037efa03824c1af7ffe9eedfc98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e6528961c44a4f3841fd319af71f1d1a6af029c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6528961c44a4f3841fd319af71f1d1a6af029c", "html_url": "https://github.com/rust-lang/rust/commit/2e6528961c44a4f3841fd319af71f1d1a6af029c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e6528961c44a4f3841fd319af71f1d1a6af029c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552a8875bd5520c2e8c01ab05a12c304c730c5b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/552a8875bd5520c2e8c01ab05a12c304c730c5b9", "html_url": "https://github.com/rust-lang/rust/commit/552a8875bd5520c2e8c01ab05a12c304c730c5b9"}], "stats": {"total": 311, "additions": 311, "deletions": 0}, "files": [{"sha": "3b615a5246c29af4e85ea00c8633e530b4f21f6c", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -1383,6 +1383,18 @@ pub(crate) mod builtin {\n         /* compiler built-in */\n     }\n \n+    /// Keeps the item it's applied to if the passed path is accessible, and removes it otherwise.\n+    #[cfg(not(bootstrap))]\n+    #[unstable(\n+        feature = \"cfg_accessible\",\n+        issue = \"64797\",\n+        reason = \"`cfg_accessible` is not fully implemented\"\n+    )]\n+    #[rustc_builtin_macro]\n+    pub macro cfg_accessible($item:item) {\n+        /* compiler built-in */\n+    }\n+\n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c91370b2719929bef21884c043872fd08623fd9e", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -67,3 +67,12 @@ pub use crate::{\n pub use crate::macros::builtin::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n };\n+\n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"cfg_accessible\",\n+    issue = \"64797\",\n+    reason = \"`cfg_accessible` is not fully implemented\"\n+)]\n+#[doc(no_inline)]\n+pub use crate::macros::builtin::cfg_accessible;"}, {"sha": "3607a4d0d15b6238d09033a5fbec15b66671e43d", "filename": "src/librustc_builtin_macros/cfg_accessible.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_builtin_macros%2Fcfg_accessible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_builtin_macros%2Fcfg_accessible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fcfg_accessible.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,54 @@\n+//! Implementation of the `#[cfg_accessible(path)]` attribute macro.\n+\n+use rustc_ast::ast;\n+use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, MultiItemModifier};\n+use rustc_feature::AttributeTemplate;\n+use rustc_parse::validate_attr;\n+use rustc_span::symbol::sym;\n+use rustc_span::Span;\n+\n+crate struct Expander;\n+\n+fn validate_input<'a>(ecx: &mut ExtCtxt<'_>, mi: &'a ast::MetaItem) -> Option<&'a ast::Path> {\n+    match mi.meta_item_list() {\n+        None => {}\n+        Some([]) => ecx.span_err(mi.span, \"`cfg_accessible` path is not specified\"),\n+        Some([_, .., l]) => ecx.span_err(l.span(), \"multiple `cfg_accessible` paths are specified\"),\n+        Some([nmi]) => match nmi.meta_item() {\n+            None => ecx.span_err(nmi.span(), \"`cfg_accessible` path cannot be a literal\"),\n+            Some(mi) => {\n+                if !mi.is_word() {\n+                    ecx.span_err(mi.span, \"`cfg_accessible` path cannot accept arguments\");\n+                }\n+                return Some(&mi.path);\n+            }\n+        },\n+    }\n+    None\n+}\n+\n+impl MultiItemModifier for Expander {\n+    fn expand(\n+        &self,\n+        ecx: &mut ExtCtxt<'_>,\n+        _span: Span,\n+        meta_item: &ast::MetaItem,\n+        item: Annotatable,\n+    ) -> ExpandResult<Vec<Annotatable>, Annotatable> {\n+        let template = AttributeTemplate { list: Some(\"path\"), ..Default::default() };\n+        let attr = &ecx.attribute(meta_item.clone());\n+        validate_attr::check_builtin_attribute(ecx.parse_sess, attr, sym::cfg_accessible, template);\n+\n+        let path = match validate_input(ecx, meta_item) {\n+            Some(path) => path,\n+            None => return ExpandResult::Ready(Vec::new()),\n+        };\n+\n+        let failure_msg = \"cannot determine whether the path is accessible or not\";\n+        match ecx.resolver.cfg_accessible(ecx.current_expansion.id, path) {\n+            Ok(true) => ExpandResult::Ready(vec![item]),\n+            Ok(false) => ExpandResult::Ready(Vec::new()),\n+            Err(_) => ExpandResult::Retry(item, failure_msg.into()),\n+        }\n+    }\n+}"}, {"sha": "26a59c6b1bedb6be72ee9a87741d1360c83be0ca", "filename": "src/librustc_builtin_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_builtin_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_builtin_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Flib.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -22,6 +22,7 @@ use rustc_span::symbol::sym;\n mod asm;\n mod assert;\n mod cfg;\n+mod cfg_accessible;\n mod compile_error;\n mod concat;\n mod concat_idents;\n@@ -85,6 +86,7 @@ pub fn register_builtin_macros(resolver: &mut dyn Resolver, edition: Edition) {\n \n     register_attr! {\n         bench: test::expand_bench,\n+        cfg_accessible: cfg_accessible::Expander,\n         global_allocator: global_allocator::expand,\n         test: test::expand_test,\n         test_case: test::expand_test_case,"}, {"sha": "4839651ac844b11149672c6946390981b1dd71d0", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -897,6 +897,7 @@ pub trait Resolver {\n \n     fn has_derive_copy(&self, expn_id: ExpnId) -> bool;\n     fn add_derive_copy(&mut self, expn_id: ExpnId);\n+    fn cfg_accessible(&mut self, expn_id: ExpnId, path: &ast::Path) -> Result<bool, Indeterminate>;\n }\n \n #[derive(Clone)]"}, {"sha": "4e41ea82c47c99ee5dd26db75e246e0d47f12c67", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -339,6 +339,42 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn add_derive_copy(&mut self, expn_id: ExpnId) {\n         self.containers_deriving_copy.insert(expn_id);\n     }\n+\n+    // The function that implements the resolution logic of `#[cfg_accessible(path)]`.\n+    // Returns true if the path can certainly be resolved in one of three namespaces,\n+    // returns false if the path certainly cannot be resolved in any of the three namespaces.\n+    // Returns `Indeterminate` if we cannot give a certain answer yet.\n+    fn cfg_accessible(&mut self, expn_id: ExpnId, path: &ast::Path) -> Result<bool, Indeterminate> {\n+        let span = path.span;\n+        let path = &Segment::from_path(path);\n+        let parent_scope = self.invocation_parent_scopes[&expn_id];\n+\n+        let mut indeterminate = false;\n+        for ns in [TypeNS, ValueNS, MacroNS].iter().copied() {\n+            match self.resolve_path(path, Some(ns), &parent_scope, false, span, CrateLint::No) {\n+                PathResult::Module(ModuleOrUniformRoot::Module(_)) => return Ok(true),\n+                PathResult::NonModule(partial_res) if partial_res.unresolved_segments() == 0 => {\n+                    return Ok(true);\n+                }\n+                PathResult::Indeterminate => indeterminate = true,\n+                // FIXME: `resolve_path` is not ready to report partially resolved paths\n+                // correctly, so we just report an error if the path was reported as unresolved.\n+                // This needs to be fixed for `cfg_accessible` to be useful.\n+                PathResult::NonModule(..) | PathResult::Failed { .. } => {}\n+                PathResult::Module(_) => panic!(\"unexpected path resolution\"),\n+            }\n+        }\n+\n+        if indeterminate {\n+            return Err(Indeterminate);\n+        }\n+\n+        self.session\n+            .struct_span_err(span, \"not sure whether the path is accessible or not\")\n+            .span_note(span, \"`cfg_accessible` is not fully implemented\")\n+            .emit();\n+        Ok(false)\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "55284e73efcfa52b5c07b955d697d0370f2b751c", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -181,6 +181,7 @@ symbols! {\n         caller_location,\n         cdylib,\n         cfg,\n+        cfg_accessible,\n         cfg_attr,\n         cfg_attr_multi,\n         cfg_doctest,"}, {"sha": "9950a8132555f0769e31a03bb6090dfc4db56232", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -240,6 +240,7 @@\n #![feature(atomic_mut_ptr)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n+#![cfg_attr(not(bootstrap), feature(cfg_accessible))]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]"}, {"sha": "6712f5ba5808c4f14c361a34021cf92d8c33adf3", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -53,6 +53,15 @@ pub use core::prelude::v1::{\n     PartialEq, PartialOrd, RustcDecodable, RustcEncodable,\n };\n \n+#[cfg(not(bootstrap))]\n+#[unstable(\n+    feature = \"cfg_accessible\",\n+    issue = \"64797\",\n+    reason = \"`cfg_accessible` is not fully implemented\"\n+)]\n+#[doc(hidden)]\n+pub use core::prelude::v1::cfg_accessible;\n+\n // The file so far is equivalent to src/libcore/prelude/v1.rs,\n // and below to src/liballoc/prelude.rs.\n // Those files are duplicated rather than using glob imports"}, {"sha": "c51c908a4262e2cd49d6b32a8ef7fef9704c72aa", "filename": "src/test/ui/conditional-compilation/cfg_accessible-input-validation.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-input-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-input-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-input-validation.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,24 @@\n+#![feature(cfg_accessible)]\n+\n+#[cfg_accessible] //~ ERROR malformed `cfg_accessible` attribute input\n+struct S1;\n+\n+#[cfg_accessible = \"value\"] //~ ERROR malformed `cfg_accessible` attribute input\n+struct S2;\n+\n+#[cfg_accessible()] //~ ERROR `cfg_accessible` path is not specified\n+struct S3;\n+\n+#[cfg_accessible(std, core)] //~ ERROR multiple `cfg_accessible` paths are specified\n+struct S4;\n+\n+#[cfg_accessible(\"std\")] //~ ERROR `cfg_accessible` path cannot be a literal\n+struct S5;\n+\n+#[cfg_accessible(std = \"value\")] //~ ERROR `cfg_accessible` path cannot accept arguments\n+struct S6;\n+\n+#[cfg_accessible(std(value))] //~ ERROR `cfg_accessible` path cannot accept arguments\n+struct S7;\n+\n+fn main() {}"}, {"sha": "86706c766356ea651094422e992e72abaf14bd72", "filename": "src/test/ui/conditional-compilation/cfg_accessible-input-validation.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-input-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-input-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-input-validation.stderr?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,44 @@\n+error: malformed `cfg_accessible` attribute input\n+  --> $DIR/cfg_accessible-input-validation.rs:3:1\n+   |\n+LL | #[cfg_accessible]\n+   | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[cfg_accessible(path)]`\n+\n+error: malformed `cfg_accessible` attribute input\n+  --> $DIR/cfg_accessible-input-validation.rs:6:1\n+   |\n+LL | #[cfg_accessible = \"value\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[cfg_accessible(path)]`\n+\n+error: `cfg_accessible` path is not specified\n+  --> $DIR/cfg_accessible-input-validation.rs:9:1\n+   |\n+LL | #[cfg_accessible()]\n+   | ^^^^^^^^^^^^^^^^^^^\n+\n+error: multiple `cfg_accessible` paths are specified\n+  --> $DIR/cfg_accessible-input-validation.rs:12:23\n+   |\n+LL | #[cfg_accessible(std, core)]\n+   |                       ^^^^\n+\n+error: `cfg_accessible` path cannot be a literal\n+  --> $DIR/cfg_accessible-input-validation.rs:15:18\n+   |\n+LL | #[cfg_accessible(\"std\")]\n+   |                  ^^^^^\n+\n+error: `cfg_accessible` path cannot accept arguments\n+  --> $DIR/cfg_accessible-input-validation.rs:18:18\n+   |\n+LL | #[cfg_accessible(std = \"value\")]\n+   |                  ^^^^^^^^^^^^^\n+\n+error: `cfg_accessible` path cannot accept arguments\n+  --> $DIR/cfg_accessible-input-validation.rs:21:18\n+   |\n+LL | #[cfg_accessible(std(value))]\n+   |                  ^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "8bc93fa324378391446dee53883b51c7e4b39ecc", "filename": "src/test/ui/conditional-compilation/cfg_accessible-stuck.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-stuck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-stuck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-stuck.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,9 @@\n+#![feature(cfg_accessible)]\n+\n+#[cfg_accessible(Z)] //~ ERROR cannot determine whether the path is accessible or not\n+struct S;\n+\n+#[cfg_accessible(S)] //~ ERROR cannot determine whether the path is accessible or not\n+struct Z;\n+\n+fn main() {}"}, {"sha": "9641441a819b0cb0d2d38ff35d80698a5bb7e15e", "filename": "src/test/ui/conditional-compilation/cfg_accessible-stuck.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-stuck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-stuck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-stuck.stderr?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,14 @@\n+error: cannot determine whether the path is accessible or not\n+  --> $DIR/cfg_accessible-stuck.rs:6:1\n+   |\n+LL | #[cfg_accessible(S)]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot determine whether the path is accessible or not\n+  --> $DIR/cfg_accessible-stuck.rs:3:1\n+   |\n+LL | #[cfg_accessible(Z)]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e9247e67a2a26638675fa241f5f169604e879faa", "filename": "src/test/ui/conditional-compilation/cfg_accessible-unstable.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-unstable.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,2 @@\n+#[cfg_accessible(std)] //~ ERROR use of unstable library feature 'cfg_accessible'\n+fn main() {}"}, {"sha": "2f55b9559c78fdefa3dbe2da6db01e1cd1bbb7af", "filename": "src/test/ui/conditional-compilation/cfg_accessible-unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible-unstable.stderr?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: use of unstable library feature 'cfg_accessible': `cfg_accessible` is not fully implemented\n+  --> $DIR/cfg_accessible-unstable.rs:1:3\n+   |\n+LL | #[cfg_accessible(std)]\n+   |   ^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #64797 <https://github.com/rust-lang/rust/issues/64797> for more information\n+   = help: add `#![feature(cfg_accessible)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "07b0be5b1ae2606e37576b693db30c9ad125f09a", "filename": "src/test/ui/conditional-compilation/cfg_accessible.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.rs?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,43 @@\n+#![feature(cfg_accessible)]\n+\n+mod m {\n+    pub struct ExistingPublic;\n+    struct ExistingPrivate;\n+}\n+\n+#[cfg_accessible(m::ExistingPublic)]\n+struct ExistingPublic;\n+\n+// FIXME: Not implemented yet.\n+#[cfg_accessible(m::ExistingPrivate)] //~ ERROR not sure whether the path is accessible or not\n+struct ExistingPrivate;\n+\n+// FIXME: Not implemented yet.\n+#[cfg_accessible(m::NonExistent)] //~ ERROR not sure whether the path is accessible or not\n+struct ExistingPrivate;\n+\n+#[cfg_accessible(n::AccessibleExpanded)] // OK, `cfg_accessible` can wait and retry.\n+struct AccessibleExpanded;\n+\n+macro_rules! generate_accessible_expanded {\n+    () => {\n+        mod n {\n+            pub struct AccessibleExpanded;\n+        }\n+    };\n+}\n+\n+generate_accessible_expanded!();\n+\n+struct S {\n+    field: u8,\n+}\n+\n+// FIXME: Not implemented yet.\n+#[cfg_accessible(S::field)] //~ ERROR not sure whether the path is accessible or not\n+struct Field;\n+\n+fn main() {\n+    ExistingPublic;\n+    AccessibleExpanded;\n+}"}, {"sha": "167765cd66ee6d045cdce7d7bc23b88e7e7ea0a8", "filename": "src/test/ui/conditional-compilation/cfg_accessible.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e6528961c44a4f3841fd319af71f1d1a6af029c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg_accessible.stderr?ref=2e6528961c44a4f3841fd319af71f1d1a6af029c", "patch": "@@ -0,0 +1,38 @@\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible.rs:12:18\n+   |\n+LL | #[cfg_accessible(m::ExistingPrivate)]\n+   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n+note: `cfg_accessible` is not fully implemented\n+  --> $DIR/cfg_accessible.rs:12:18\n+   |\n+LL | #[cfg_accessible(m::ExistingPrivate)]\n+   |                  ^^^^^^^^^^^^^^^^^^\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible.rs:16:18\n+   |\n+LL | #[cfg_accessible(m::NonExistent)]\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+note: `cfg_accessible` is not fully implemented\n+  --> $DIR/cfg_accessible.rs:16:18\n+   |\n+LL | #[cfg_accessible(m::NonExistent)]\n+   |                  ^^^^^^^^^^^^^^\n+\n+error: not sure whether the path is accessible or not\n+  --> $DIR/cfg_accessible.rs:37:18\n+   |\n+LL | #[cfg_accessible(S::field)]\n+   |                  ^^^^^^^^\n+   |\n+note: `cfg_accessible` is not fully implemented\n+  --> $DIR/cfg_accessible.rs:37:18\n+   |\n+LL | #[cfg_accessible(S::field)]\n+   |                  ^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}