{"sha": "e8e47e08731599e95724680ffbc574455bfeb233", "node_id": "C_kwDOAAsO6NoAKGU4ZTQ3ZTA4NzMxNTk5ZTk1NzI0NjgwZmZiYzU3NDQ1NWJmZWIyMzM", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-11-13T12:10:36Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-11-21T14:24:51Z"}, "message": "Improve slug name error", "tree": {"sha": "92d025ba37a0f72c41eaee291ccb9100ca6e0140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92d025ba37a0f72c41eaee291ccb9100ca6e0140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8e47e08731599e95724680ffbc574455bfeb233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e47e08731599e95724680ffbc574455bfeb233", "html_url": "https://github.com/rust-lang/rust/commit/e8e47e08731599e95724680ffbc574455bfeb233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8e47e08731599e95724680ffbc574455bfeb233/comments", "author": {}, "committer": {}, "parents": [{"sha": "d494502f64ea1b3a3164a13ce20cd1eba89c8141", "url": "https://api.github.com/repos/rust-lang/rust/commits/d494502f64ea1b3a3164a13ce20cd1eba89c8141", "html_url": "https://github.com/rust-lang/rust/commit/d494502f64ea1b3a3164a13ce20cd1eba89c8141"}], "stats": {"total": 133, "additions": 80, "deletions": 53}, "files": [{"sha": "be9821c00f507abd5f96bc349ac8f8c27ccb3657", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 44, "deletions": 53, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/e8e47e08731599e95724680ffbc574455bfeb233/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e47e08731599e95724680ffbc574455bfeb233/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=e8e47e08731599e95724680ffbc574455bfeb233", "patch": "@@ -5,6 +5,7 @@ use crate::diagnostics::error::{span_err, DiagnosticDeriveError};\n use crate::diagnostics::utils::SetOnce;\n use proc_macro2::TokenStream;\n use quote::quote;\n+use syn::spanned::Spanned;\n use synstructure::Structure;\n \n /// The central struct for constructing the `into_diagnostic` method from an annotated struct.\n@@ -45,10 +46,19 @@ impl<'a> DiagnosticDerive<'a> {\n                         .emit();\n                     return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                 }\n+                Some(slug) if let Some( Mismatch { slug_name, crate_name, slug_prefix }) = Mismatch::check(slug) => {\n+                    span_err(slug.span().unwrap(), \"diagnostic slug and crate name do not match\")\n+                        .note(&format!(\n+                            \"slug is `{slug_name}` but the crate name is `{crate_name}`\"\n+                        ))\n+                        .help(&format!(\n+                            \"expected a slug starting with `{slug_prefix}_...`\"\n+                        ))\n+                        .emit();\n+                    return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n+                }\n                 Some(slug) => {\n-                    let check = make_check(slug);\n                     quote! {\n-                        #check\n                         let mut #diag = #handler.struct_diagnostic(rustc_errors::fluent::#slug);\n                     }\n                 }\n@@ -130,11 +140,19 @@ impl<'a> LintDiagnosticDerive<'a> {\n                         .emit();\n                     return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                 }\n+                Some(slug) if let Some( Mismatch { slug_name, crate_name, slug_prefix }) = Mismatch::check(slug) => {\n+                    span_err(slug.span().unwrap(), \"diagnostic slug and crate name do not match\")\n+                        .note(&format!(\n+                            \"slug is `{slug_name}` but the crate name is `{crate_name}`\"\n+                        ))\n+                        .help(&format!(\n+                            \"expected a slug starting with `{slug_prefix}_...`\"\n+                        ))\n+                        .emit();\n+                    return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n+                }\n                 Some(slug) => {\n-                    let check = make_check(slug);\n-\n                     quote! {\n-                        #check\n                         rustc_errors::fluent::#slug.into()\n                     }\n                 }\n@@ -161,53 +179,26 @@ impl<'a> LintDiagnosticDerive<'a> {\n     }\n }\n \n-/// Checks whether the slug starts with the crate name it's in.\n-fn make_check(slug: &syn::Path) -> TokenStream {\n-    quote! {\n-        const _: () = {\n-            const krate_str: &str = match option_env!(\"CARGO_CRATE_NAME\") {\n-                Some(c) => c,\n-                None => \"\",\n-            };\n-            const krate: &[u8] = krate_str.as_bytes();\n-\n-            if krate.len() > 6\n-                && krate[0] == b'r'\n-                && krate[1] == b'u'\n-                && krate[2] == b's'\n-                && krate[3] == b't'\n-                && krate[4] == b'c'\n-                && krate[5] == b'_'\n-            {\n-                let slug = stringify!(#slug).as_bytes();\n-\n-                let mut pos = 0;\n-                loop {\n-                    let b = slug[pos];\n-                    if krate.len() == pos + 6 {\n-                        if b != b'_' {\n-                            panic!(concat!(\n-                                \"slug \\\"\",\n-                                stringify!(#slug),\n-                                \"\\\" does not match the crate it is in\"\n-                            ));\n-                        }\n-                        break;\n-                    }\n-                    let a = krate[pos + 6];\n-\n-                    if a != b {\n-                        panic!(concat!(\n-                            \"slug \\\"\",\n-                            stringify!(#slug),\n-                            \"\\\" does not match the crate it is in\"\n-                        ));\n-                    }\n-                    pos += 1;\n-                }\n-            } else {\n-                // Crate does not start with \"rustc_\"\n-            }\n-        };\n+struct Mismatch {\n+    slug_name: String,\n+    crate_name: String,\n+    slug_prefix: String,\n+}\n+\n+impl Mismatch {\n+    /// Checks whether the slug starts with the crate name it's in.\n+    fn check(slug: &syn::Path) -> Option<Mismatch> {\n+        // If this is missing we're probably in a test, so bail.\n+        let crate_name = std::env::var(\"CARGO_CRATE_NAME\").ok()?;\n+\n+        // If we're not in a \"rustc_\" crate, bail.\n+        let Some((\"rustc\", slug_prefix)) = crate_name.split_once(\"_\") else { return None };\n+\n+        let slug_name = slug.segments.first()?.ident.to_string();\n+        if !slug_name.starts_with(slug_prefix) {\n+            Some(Mismatch { slug_name, slug_prefix: slug_prefix.to_string(), crate_name })\n+        } else {\n+            None\n+        }\n     }\n }"}, {"sha": "a2a01b666903838cb9ea72aa3fd5c1bce90097cf", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8e47e08731599e95724680ffbc574455bfeb233/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e47e08731599e95724680ffbc574455bfeb233/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=e8e47e08731599e95724680ffbc574455bfeb233", "patch": "@@ -1,4 +1,5 @@\n #![feature(allow_internal_unstable)]\n+#![feature(if_let_guard)]\n #![feature(never_type)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_span)]"}, {"sha": "a0a8114e0c5c53036f381ea00d1cf66a6c1e822f", "filename": "src/test/ui-fulldeps/session-diagnostic/enforce_slug_naming.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8e47e08731599e95724680ffbc574455bfeb233/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fenforce_slug_naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e47e08731599e95724680ffbc574455bfeb233/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fenforce_slug_naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fenforce_slug_naming.rs?ref=e8e47e08731599e95724680ffbc574455bfeb233", "patch": "@@ -0,0 +1,24 @@\n+// rustc-env:CARGO_CRATE_NAME=rustc_dummy\n+\n+#![feature(rustc_private)]\n+#![crate_type = \"lib\"]\n+\n+extern crate rustc_span;\n+use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n+\n+extern crate rustc_macros;\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n+\n+extern crate rustc_middle;\n+use rustc_middle::ty::Ty;\n+\n+extern crate rustc_errors;\n+use rustc_errors::{Applicability, MultiSpan};\n+\n+extern crate rustc_session;\n+\n+#[derive(Diagnostic)]\n+#[diag(compiletest_example, code = \"E0123\")]\n+//~^ ERROR diagnostic slug and crate name do not match\n+struct Hello {}"}, {"sha": "dcf4af5df50a7e7241ca3fda18473d2f7396c4ca", "filename": "src/test/ui-fulldeps/session-diagnostic/enforce_slug_naming.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8e47e08731599e95724680ffbc574455bfeb233/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fenforce_slug_naming.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8e47e08731599e95724680ffbc574455bfeb233/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fenforce_slug_naming.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fenforce_slug_naming.stderr?ref=e8e47e08731599e95724680ffbc574455bfeb233", "patch": "@@ -0,0 +1,11 @@\n+error: diagnostic slug and crate name do not match\n+  --> $DIR/enforce_slug_naming.rs:22:8\n+   |\n+LL | #[diag(compiletest_example, code = \"E0123\")]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: slug is `compiletest_example` but the crate name is `rustc_dummy`\n+   = help: expected a slug starting with `dummy_...`\n+\n+error: aborting due to previous error\n+"}]}