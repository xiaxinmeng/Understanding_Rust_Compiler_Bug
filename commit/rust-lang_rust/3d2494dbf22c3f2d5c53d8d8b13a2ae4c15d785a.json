{"sha": "3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a", "node_id": "C_kwDOAAsO6NoAKDNkMjQ5NGRiZjIyYzNmMmQ1YzUzZDhkOGIxM2EyYWU0YzE1ZDc4NWE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-10T22:13:21Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-11T20:59:50Z"}, "message": "Remove box syntax from Box<BareFunctionDecl> construction\n\nThe type has 144 bytes according to compiler internal rustdoc.", "tree": {"sha": "046c2809fae462c38da4924b5c04011435a4a153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/046c2809fae462c38da4924b5c04011435a4a153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a", "html_url": "https://github.com/rust-lang/rust/commit/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa637dacb78dd1a07c36df00fed2cd3e0f19d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74", "html_url": "https://github.com/rust-lang/rust/commit/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "cfcedc0e4c08d61dd20079acb6b8b722ec04d7cd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3d2494dbf22c3f2d5c53d8d8b13a2ae4c15d785a", "patch": "@@ -1490,7 +1490,7 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n                 let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n                 DynTrait(bounds, lifetime)\n             }\n-            TyKind::BareFn(barefn) => BareFunction(box barefn.clean(cx)),\n+            TyKind::BareFn(barefn) => BareFunction(Box::new(barefn.clean(cx))),\n             // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n             TyKind::Infer | TyKind::Err => Infer,\n             TyKind::Typeof(..) => panic!(\"unimplemented type {:?}\", self.kind),\n@@ -1555,12 +1555,12 @@ fn clean_ty<'tcx>(this: Ty<'tcx>, cx: &mut DocContext<'tcx>, def_id: Option<DefI\n             let ty = cx.tcx.lift(this).expect(\"FnPtr lift failed\");\n             let sig = ty.fn_sig(cx.tcx);\n             let decl = clean_fn_decl_from_did_and_sig(cx, None, sig);\n-            BareFunction(box BareFunctionDecl {\n+            BareFunction(Box::new(BareFunctionDecl {\n                 unsafety: sig.unsafety(),\n                 generic_params: Vec::new(),\n                 decl,\n                 abi: sig.abi(),\n-            })\n+            }))\n         }\n         ty::Adt(def, substs) => {\n             let did = def.did();"}]}