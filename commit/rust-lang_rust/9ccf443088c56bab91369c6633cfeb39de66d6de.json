{"sha": "9ccf443088c56bab91369c6633cfeb39de66d6de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljY2Y0NDMwODhjNTZiYWI5MTM2OWM2NjMzY2ZlYjM5ZGU2NmQ2ZGU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-14T20:30:22Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-14T20:30:22Z"}, "message": "ringbuf: Implement .size_hint() for iterators", "tree": {"sha": "6c77466fd5f7827d52fd15a5e67ba086b06ea763", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c77466fd5f7827d52fd15a5e67ba086b06ea763"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ccf443088c56bab91369c6633cfeb39de66d6de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccf443088c56bab91369c6633cfeb39de66d6de", "html_url": "https://github.com/rust-lang/rust/commit/9ccf443088c56bab91369c6633cfeb39de66d6de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ccf443088c56bab91369c6633cfeb39de66d6de/comments", "author": null, "committer": null, "parents": [{"sha": "0cb1ac0f9f7bf98ea8ab5ccbd6ef319decc41a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb1ac0f9f7bf98ea8ab5ccbd6ef319decc41a72", "html_url": "https://github.com/rust-lang/rust/commit/0cb1ac0f9f7bf98ea8ab5ccbd6ef319decc41a72"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "5d9f77b9c2699d565947aaef45699d1837d4ac13", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ccf443088c56bab91369c6633cfeb39de66d6de/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ccf443088c56bab91369c6633cfeb39de66d6de/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=9ccf443088c56bab91369c6633cfeb39de66d6de", "patch": "@@ -214,6 +214,11 @@ macro_rules! iterator {\n                 self.nelts -= 1;\n                 Some(self.elts[raw_index]. $getter ())\n             }\n+\n+            #[inline]\n+            fn size_hint(&self) -> (uint, Option<uint>) {\n+                (self.nelts, Some(self.nelts))\n+            }\n         }\n     }\n }\n@@ -578,6 +583,7 @@ mod tests {\n     fn test_iter() {\n         let mut d = RingBuf::new();\n         assert_eq!(d.iter().next(), None);\n+        assert_eq!(d.iter().size_hint(), (0, Some(0)));\n \n         for int::range(0,5) |i| {\n             d.push_back(i);\n@@ -588,6 +594,15 @@ mod tests {\n             d.push_front(i);\n         }\n         assert_eq!(d.iter().collect::<~[&int]>(), ~[&8,&7,&6,&0,&1,&2,&3,&4]);\n+\n+        let mut it = d.iter();\n+        let mut len = d.len();\n+        loop {\n+            match it.next() {\n+                None => break,\n+                _ => { len -= 1; assert_eq!(it.size_hint(), (len, Some(len))) }\n+            }\n+        }\n     }\n \n     #[test]"}]}