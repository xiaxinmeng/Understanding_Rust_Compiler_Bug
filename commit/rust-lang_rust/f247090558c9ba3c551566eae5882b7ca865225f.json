{"sha": "f247090558c9ba3c551566eae5882b7ca865225f", "node_id": "C_kwDOAAsO6NoAKGYyNDcwOTA1NThjOWJhM2M1NTE1NjZlYWU1ODgyYjdjYTg2NTIyNWY", "commit": {"author": {"name": "Andrei Listochkin", "email": "andrei.listochkin@ferrous-systems.com", "date": "2022-05-17T17:15:06Z"}, "committer": {"name": "Andrei Listochkin", "email": "andrei.listochkin@ferrous-systems.com", "date": "2022-05-17T17:15:06Z"}, "message": "prettier run", "tree": {"sha": "6ca857d2ce03f92f481fe19a1f57f170e7f33bb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca857d2ce03f92f481fe19a1f57f170e7f33bb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f247090558c9ba3c551566eae5882b7ca865225f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f247090558c9ba3c551566eae5882b7ca865225f", "html_url": "https://github.com/rust-lang/rust/commit/f247090558c9ba3c551566eae5882b7ca865225f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f247090558c9ba3c551566eae5882b7ca865225f/comments", "author": {"login": "listochkin", "id": 405222, "node_id": "MDQ6VXNlcjQwNTIyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/405222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/listochkin", "html_url": "https://github.com/listochkin", "followers_url": "https://api.github.com/users/listochkin/followers", "following_url": "https://api.github.com/users/listochkin/following{/other_user}", "gists_url": "https://api.github.com/users/listochkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/listochkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/listochkin/subscriptions", "organizations_url": "https://api.github.com/users/listochkin/orgs", "repos_url": "https://api.github.com/users/listochkin/repos", "events_url": "https://api.github.com/users/listochkin/events{/privacy}", "received_events_url": "https://api.github.com/users/listochkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "listochkin", "id": 405222, "node_id": "MDQ6VXNlcjQwNTIyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/405222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/listochkin", "html_url": "https://github.com/listochkin", "followers_url": "https://api.github.com/users/listochkin/followers", "following_url": "https://api.github.com/users/listochkin/following{/other_user}", "gists_url": "https://api.github.com/users/listochkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/listochkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/listochkin/subscriptions", "organizations_url": "https://api.github.com/users/listochkin/orgs", "repos_url": "https://api.github.com/users/listochkin/repos", "events_url": "https://api.github.com/users/listochkin/events{/privacy}", "received_events_url": "https://api.github.com/users/listochkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9f54f2380e8239586440eb8c7bf0aceb727322", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9f54f2380e8239586440eb8c7bf0aceb727322", "html_url": "https://github.com/rust-lang/rust/commit/8e9f54f2380e8239586440eb8c7bf0aceb727322"}], "stats": {"total": 1993, "additions": 1177, "deletions": 816}, "files": [{"sha": "684b5c6bd978a5737a97c36ca8ebe933bbb99379", "filename": "editors/code/.eslintrc.js", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2F.eslintrc.js", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2F.eslintrc.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2F.eslintrc.js?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,41 +1,36 @@\n module.exports = {\n-    \"env\": {\n-        \"es6\": true,\n-        \"node\": true\n+    env: {\n+        es6: true,\n+        node: true,\n     },\n-    \"extends\": [\"prettier\"],\n-    \"parser\": \"@typescript-eslint/parser\",\n-    \"parserOptions\": {\n-        \"project\": \"tsconfig.eslint.json\",\n-        \"tsconfigRootDir\": __dirname,\n-        \"sourceType\": \"module\"\n+    extends: [\"prettier\"],\n+    parser: \"@typescript-eslint/parser\",\n+    parserOptions: {\n+        project: \"tsconfig.eslint.json\",\n+        tsconfigRootDir: __dirname,\n+        sourceType: \"module\",\n     },\n-    \"plugins\": [\n-        \"@typescript-eslint\"\n-    ],\n-    \"rules\": {\n-        \"camelcase\": [\"error\"],\n-        \"eqeqeq\": [\"error\", \"always\", { \"null\": \"ignore\" }],\n+    plugins: [\"@typescript-eslint\"],\n+    rules: {\n+        camelcase: [\"error\"],\n+        eqeqeq: [\"error\", \"always\", { null: \"ignore\" }],\n         \"no-console\": [\"error\", { allow: [\"warn\", \"error\"] }],\n         \"prefer-const\": \"error\",\n         \"@typescript-eslint/member-delimiter-style\": [\n             \"error\",\n             {\n-                \"multiline\": {\n-                    \"delimiter\": \"semi\",\n-                    \"requireLast\": true\n+                multiline: {\n+                    delimiter: \"semi\",\n+                    requireLast: true,\n                 },\n-                \"singleline\": {\n-                    \"delimiter\": \"semi\",\n-                    \"requireLast\": false\n-                }\n-            }\n-        ],\n-        \"@typescript-eslint/semi\": [\n-            \"error\",\n-            \"always\"\n+                singleline: {\n+                    delimiter: \"semi\",\n+                    requireLast: false,\n+                },\n+            },\n         ],\n+        \"@typescript-eslint/semi\": [\"error\", \"always\"],\n         \"@typescript-eslint/no-unnecessary-type-assertion\": \"error\",\n-        \"@typescript-eslint/no-floating-promises\": \"error\"\n-    }\n+        \"@typescript-eslint/no-floating-promises\": \"error\",\n+    },\n };"}, {"sha": "b1ee0843e3e69d0d13c9e660aad3891c8d2bea5f", "filename": "editors/code/language-configuration.json", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Flanguage-configuration.json", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Flanguage-configuration.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Flanguage-configuration.json?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,18 +1,18 @@\n {\n     \"comments\": {\n         \"lineComment\": \"//\",\n-        \"blockComment\": [ \"/*\", \"*/\" ]\n+        \"blockComment\": [\"/*\", \"*/\"]\n     },\n     \"brackets\": [\n         [\"{\", \"}\"],\n         [\"[\", \"]\"],\n         [\"(\", \")\"]\n     ],\n     \"colorizedBracketPairs\": [\n-\t\t[\"{\", \"}\"],\n-\t\t[\"[\", \"]\"],\n-\t\t[\"(\", \")\"]\n-\t],\n+        [\"{\", \"}\"],\n+        [\"[\", \"]\"],\n+        [\"(\", \")\"]\n+    ],\n     \"autoClosingPairs\": [\n         { \"open\": \"{\", \"close\": \"}\" },\n         { \"open\": \"[\", \"close\": \"]\" },"}, {"sha": "279e7bafa0b68746b63b1d695ea243f40d585ea6", "filename": "editors/code/ra_syntax_tree.tmGrammar.json", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fra_syntax_tree.tmGrammar.json", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fra_syntax_tree.tmGrammar.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fra_syntax_tree.tmGrammar.json?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -25,7 +25,5 @@\n             \"name\": \"string\"\n         }\n     },\n-    \"fileTypes\": [\n-        \"rast\"\n-    ]\n+    \"fileTypes\": [\"rast\"]\n }"}, {"sha": "fca992299ef6785afa57e0bab8267c0987a2cb8c", "filename": "editors/code/src/ast_inspector.ts", "status": "modified", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fast_inspector.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,13 +1,13 @@\n-import * as vscode from 'vscode';\n+import * as vscode from \"vscode\";\n \n-import { Ctx, Disposable } from './ctx';\n-import { RustEditor, isRustEditor } from './util';\n+import { Ctx, Disposable } from \"./ctx\";\n+import { RustEditor, isRustEditor } from \"./util\";\n \n // FIXME: consider implementing this via the Tree View API?\n // https://code.visualstudio.com/api/extension-guides/tree-view\n export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, Disposable {\n     private readonly astDecorationType = vscode.window.createTextEditorDecorationType({\n-        borderColor: new vscode.ThemeColor('rust_analyzer.syntaxTreeBorder'),\n+        borderColor: new vscode.ThemeColor(\"rust_analyzer.syntaxTreeBorder\"),\n         borderStyle: \"solid\",\n         borderWidth: \"2px\",\n     });\n@@ -35,11 +35,23 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n     });\n \n     constructor(ctx: Ctx) {\n-        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: 'rust-analyzer' }, this));\n+        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: \"rust-analyzer\" }, this));\n         ctx.pushCleanup(vscode.languages.registerDefinitionProvider({ language: \"rust\" }, this));\n-        vscode.workspace.onDidCloseTextDocument(this.onDidCloseTextDocument, this, ctx.subscriptions);\n-        vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n-        vscode.window.onDidChangeVisibleTextEditors(this.onDidChangeVisibleTextEditors, this, ctx.subscriptions);\n+        vscode.workspace.onDidCloseTextDocument(\n+            this.onDidCloseTextDocument,\n+            this,\n+            ctx.subscriptions\n+        );\n+        vscode.workspace.onDidChangeTextDocument(\n+            this.onDidChangeTextDocument,\n+            this,\n+            ctx.subscriptions\n+        );\n+        vscode.window.onDidChangeVisibleTextEditors(\n+            this.onDidChangeVisibleTextEditors,\n+            this,\n+            ctx.subscriptions\n+        );\n \n         ctx.pushCleanup(this);\n     }\n@@ -48,7 +60,10 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n     }\n \n     private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n-        if (this.rustEditor && event.document.uri.toString() === this.rustEditor.document.uri.toString()) {\n+        if (\n+            this.rustEditor &&\n+            event.document.uri.toString() === this.rustEditor.document.uri.toString()\n+        ) {\n             this.rust2Ast.reset();\n         }\n     }\n@@ -68,7 +83,9 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n     }\n \n     private findAstTextEditor(): undefined | vscode.TextEditor {\n-        return vscode.window.visibleTextEditors.find(it => it.document.uri.scheme === 'rust-analyzer');\n+        return vscode.window.visibleTextEditors.find(\n+            (it) => it.document.uri.scheme === \"rust-analyzer\"\n+        );\n     }\n \n     private setRustEditor(newRustEditor: undefined | RustEditor) {\n@@ -80,30 +97,41 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n     }\n \n     // additional positional params are omitted\n-    provideDefinition(doc: vscode.TextDocument, pos: vscode.Position): vscode.ProviderResult<vscode.DefinitionLink[]> {\n-        if (!this.rustEditor || doc.uri.toString() !== this.rustEditor.document.uri.toString()) return;\n+    provideDefinition(\n+        doc: vscode.TextDocument,\n+        pos: vscode.Position\n+    ): vscode.ProviderResult<vscode.DefinitionLink[]> {\n+        if (!this.rustEditor || doc.uri.toString() !== this.rustEditor.document.uri.toString())\n+            return;\n \n         const astEditor = this.findAstTextEditor();\n         if (!astEditor) return;\n \n-        const rust2AstRanges = this.rust2Ast.get()?.find(([rustRange, _]) => rustRange.contains(pos));\n+        const rust2AstRanges = this.rust2Ast\n+            .get()\n+            ?.find(([rustRange, _]) => rustRange.contains(pos));\n         if (!rust2AstRanges) return;\n \n         const [rustFileRange, astFileRange] = rust2AstRanges;\n \n         astEditor.revealRange(astFileRange);\n         astEditor.selection = new vscode.Selection(astFileRange.start, astFileRange.end);\n \n-        return [{\n-            targetRange: astFileRange,\n-            targetUri: astEditor.document.uri,\n-            originSelectionRange: rustFileRange,\n-            targetSelectionRange: astFileRange,\n-        }];\n+        return [\n+            {\n+                targetRange: astFileRange,\n+                targetUri: astEditor.document.uri,\n+                originSelectionRange: rustFileRange,\n+                targetSelectionRange: astFileRange,\n+            },\n+        ];\n     }\n \n     // additional positional params are omitted\n-    provideHover(doc: vscode.TextDocument, hoverPosition: vscode.Position): vscode.ProviderResult<vscode.Hover> {\n+    provideHover(\n+        doc: vscode.TextDocument,\n+        hoverPosition: vscode.Position\n+    ): vscode.ProviderResult<vscode.Hover> {\n         if (!this.rustEditor) return;\n \n         const astFileLine = doc.lineAt(hoverPosition.line);\n@@ -127,13 +155,14 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n         return new vscode.Range(begin, end);\n     }\n \n-    private parseRustTextRange(doc: vscode.TextDocument, astLine: string): undefined | vscode.Range {\n+    private parseRustTextRange(\n+        doc: vscode.TextDocument,\n+        astLine: string\n+    ): undefined | vscode.Range {\n         const parsedRange = /(\\d+)\\.\\.(\\d+)/.exec(astLine);\n         if (!parsedRange) return;\n \n-        const [begin, end] = parsedRange\n-            .slice(1)\n-            .map(off => this.positionAt(doc, +off));\n+        const [begin, end] = parsedRange.slice(1).map((off) => this.positionAt(doc, +off));\n \n         return new vscode.Range(begin, end);\n     }\n@@ -173,7 +202,7 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n class Lazy<T> {\n     val: undefined | T;\n \n-    constructor(private readonly compute: () => undefined | T) { }\n+    constructor(private readonly compute: () => undefined | T) {}\n \n     get() {\n         return this.val ?? (this.val = this.compute());"}, {"sha": "c960e283d352712d52fe7dd19a8e3496343ea661", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 165, "deletions": 112, "changes": 277, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,39 +1,47 @@\n-import * as lc from 'vscode-languageclient/node';\n-import * as vscode from 'vscode';\n-import * as ra from '../src/lsp_ext';\n-import * as Is from 'vscode-languageclient/lib/common/utils/is';\n-import { assert } from './util';\n-import { WorkspaceEdit } from 'vscode';\n-import { Workspace } from './ctx';\n-import { updateConfig } from './config';\n-import { substituteVariablesInEnv } from './config';\n+import * as lc from \"vscode-languageclient/node\";\n+import * as vscode from \"vscode\";\n+import * as ra from \"../src/lsp_ext\";\n+import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n+import { assert } from \"./util\";\n+import { WorkspaceEdit } from \"vscode\";\n+import { Workspace } from \"./ctx\";\n+import { updateConfig } from \"./config\";\n+import { substituteVariablesInEnv } from \"./config\";\n \n export interface Env {\n     [name: string]: string;\n }\n \n function renderCommand(cmd: ra.CommandLink) {\n-    return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(JSON.stringify(cmd.arguments))} '${cmd.tooltip}')`;\n+    return `[${cmd.title}](command:${cmd.command}?${encodeURIComponent(\n+        JSON.stringify(cmd.arguments)\n+    )} '${cmd.tooltip}')`;\n }\n \n function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownString {\n-    const text = actions.map(group =>\n-        (group.title ? (group.title + \" \") : \"\") + group.commands.map(renderCommand).join(' | ')\n-    ).join('___');\n+    const text = actions\n+        .map(\n+            (group) =>\n+                (group.title ? group.title + \" \" : \"\") +\n+                group.commands.map(renderCommand).join(\" | \")\n+        )\n+        .join(\"___\");\n \n     const result = new vscode.MarkdownString(text);\n     result.isTrusted = true;\n     return result;\n }\n \n-export async function createClient(serverPath: string, workspace: Workspace, extraEnv: Env): Promise<lc.LanguageClient> {\n+export async function createClient(\n+    serverPath: string,\n+    workspace: Workspace,\n+    extraEnv: Env\n+): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n \n-    const newEnv = substituteVariablesInEnv(Object.assign(\n-        {}, process.env, extraEnv\n-    ));\n+    const newEnv = substituteVariablesInEnv(Object.assign({}, process.env, extraEnv));\n     const run: lc.Executable = {\n         command: serverPath,\n         options: { env: newEnv },\n@@ -43,137 +51,176 @@ export async function createClient(serverPath: string, workspace: Workspace, ext\n         debug: run,\n     };\n     const traceOutputChannel = vscode.window.createOutputChannel(\n-        'Rust Analyzer Language Server Trace',\n+        \"Rust Analyzer Language Server Trace\"\n     );\n \n     let initializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n \n     // Update outdated user configs\n-    await updateConfig(initializationOptions).catch(err => {\n+    await updateConfig(initializationOptions).catch((err) => {\n         void vscode.window.showErrorMessage(`Failed updating old config keys: ${err.message}`);\n     });\n \n     if (workspace.kind === \"Detached Files\") {\n-        initializationOptions = { \"detachedFiles\": workspace.files.map(file => file.uri.fsPath), ...initializationOptions };\n+        initializationOptions = {\n+            detachedFiles: workspace.files.map((file) => file.uri.fsPath),\n+            ...initializationOptions,\n+        };\n     }\n \n     const clientOptions: lc.LanguageClientOptions = {\n-        documentSelector: [{ scheme: 'file', language: 'rust' }],\n+        documentSelector: [{ scheme: \"file\", language: \"rust\" }],\n         initializationOptions,\n         diagnosticCollectionName: \"rustc\",\n         traceOutputChannel,\n         middleware: {\n-            async provideHover(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, _next: lc.ProvideHoverSignature) {\n+            async provideHover(\n+                document: vscode.TextDocument,\n+                position: vscode.Position,\n+                token: vscode.CancellationToken,\n+                _next: lc.ProvideHoverSignature\n+            ) {\n                 const editor = vscode.window.activeTextEditor;\n-                const positionOrRange = editor?.selection?.contains(position) ? client.code2ProtocolConverter.asRange(editor.selection) : client.code2ProtocolConverter.asPosition(position);\n-                return client.sendRequest(ra.hover, {\n-                    textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n-                    position: positionOrRange\n-                }, token).then(\n-                    (result) => {\n-                        const hover =\n-                            client.protocol2CodeConverter.asHover(result);\n-                        if (hover) {\n-                            const actions = (<any>result).actions;\n-                            if (actions) {\n-                                hover.contents.push(renderHoverActions(actions));\n+                const positionOrRange = editor?.selection?.contains(position)\n+                    ? client.code2ProtocolConverter.asRange(editor.selection)\n+                    : client.code2ProtocolConverter.asPosition(position);\n+                return client\n+                    .sendRequest(\n+                        ra.hover,\n+                        {\n+                            textDocument:\n+                                client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n+                            position: positionOrRange,\n+                        },\n+                        token\n+                    )\n+                    .then(\n+                        (result) => {\n+                            const hover = client.protocol2CodeConverter.asHover(result);\n+                            if (hover) {\n+                                const actions = (<any>result).actions;\n+                                if (actions) {\n+                                    hover.contents.push(renderHoverActions(actions));\n+                                }\n                             }\n+                            return hover;\n+                        },\n+                        (error) => {\n+                            client.handleFailedRequest(lc.HoverRequest.type, token, error, null);\n+                            return Promise.resolve(null);\n                         }\n-                        return hover;\n-                    },\n-                    (error) => {\n-                        client.handleFailedRequest(\n-                            lc.HoverRequest.type,\n-                            token,\n-                            error,\n-                            null\n-                        );\n-                        return Promise.resolve(null);\n-                    }\n-                );\n+                    );\n             },\n             // Using custom handling of CodeActions to support action groups and snippet edits.\n             // Note that this means we have to re-implement lazy edit resolving ourselves as well.\n-            async provideCodeActions(document: vscode.TextDocument, range: vscode.Range, context: vscode.CodeActionContext, token: vscode.CancellationToken, _next: lc.ProvideCodeActionsSignature) {\n+            async provideCodeActions(\n+                document: vscode.TextDocument,\n+                range: vscode.Range,\n+                context: vscode.CodeActionContext,\n+                token: vscode.CancellationToken,\n+                _next: lc.ProvideCodeActionsSignature\n+            ) {\n                 const params: lc.CodeActionParams = {\n                     textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(document),\n                     range: client.code2ProtocolConverter.asRange(range),\n-                    context: await client.code2ProtocolConverter.asCodeActionContext(context, token)\n+                    context: await client.code2ProtocolConverter.asCodeActionContext(\n+                        context,\n+                        token\n+                    ),\n                 };\n-                return client.sendRequest(lc.CodeActionRequest.type, params, token).then(async (values) => {\n-                    if (values === null) return undefined;\n-                    const result: (vscode.CodeAction | vscode.Command)[] = [];\n-                    const groups = new Map<string, { index: number; items: vscode.CodeAction[] }>();\n-                    for (const item of values) {\n-                        // In our case we expect to get code edits only from diagnostics\n-                        if (lc.CodeAction.is(item)) {\n-                            assert(!item.command, \"We don't expect to receive commands in CodeActions\");\n-                            const action = await client.protocol2CodeConverter.asCodeAction(item, token);\n-                            result.push(action);\n-                            continue;\n-                        }\n-                        assert(isCodeActionWithoutEditsAndCommands(item), \"We don't expect edits or commands here\");\n-                        const kind = client.protocol2CodeConverter.asCodeActionKind((item as any).kind);\n-                        const action = new vscode.CodeAction(item.title, kind);\n-                        const group = (item as any).group;\n-                        action.command = {\n-                            command: \"rust-analyzer.resolveCodeAction\",\n-                            title: item.title,\n-                            arguments: [item],\n-                        };\n-\n-                        // Set a dummy edit, so that VS Code doesn't try to resolve this.\n-                        action.edit = new WorkspaceEdit();\n-\n-                        if (group) {\n-                            let entry = groups.get(group);\n-                            if (!entry) {\n-                                entry = { index: result.length, items: [] };\n-                                groups.set(group, entry);\n+                return client.sendRequest(lc.CodeActionRequest.type, params, token).then(\n+                    async (values) => {\n+                        if (values === null) return undefined;\n+                        const result: (vscode.CodeAction | vscode.Command)[] = [];\n+                        const groups = new Map<\n+                            string,\n+                            { index: number; items: vscode.CodeAction[] }\n+                        >();\n+                        for (const item of values) {\n+                            // In our case we expect to get code edits only from diagnostics\n+                            if (lc.CodeAction.is(item)) {\n+                                assert(\n+                                    !item.command,\n+                                    \"We don't expect to receive commands in CodeActions\"\n+                                );\n+                                const action = await client.protocol2CodeConverter.asCodeAction(\n+                                    item,\n+                                    token\n+                                );\n                                 result.push(action);\n+                                continue;\n                             }\n-                            entry.items.push(action);\n-                        } else {\n-                            result.push(action);\n-                        }\n-                    }\n-                    for (const [group, { index, items }] of groups) {\n-                        if (items.length === 1) {\n-                            result[index] = items[0];\n-                        } else {\n-                            const action = new vscode.CodeAction(group);\n-                            action.kind = items[0].kind;\n+                            assert(\n+                                isCodeActionWithoutEditsAndCommands(item),\n+                                \"We don't expect edits or commands here\"\n+                            );\n+                            const kind = client.protocol2CodeConverter.asCodeActionKind(\n+                                (item as any).kind\n+                            );\n+                            const action = new vscode.CodeAction(item.title, kind);\n+                            const group = (item as any).group;\n                             action.command = {\n-                                command: \"rust-analyzer.applyActionGroup\",\n-                                title: \"\",\n-                                arguments: [items.map((item) => {\n-                                    return { label: item.title, arguments: item.command!.arguments![0] };\n-                                })],\n+                                command: \"rust-analyzer.resolveCodeAction\",\n+                                title: item.title,\n+                                arguments: [item],\n                             };\n \n                             // Set a dummy edit, so that VS Code doesn't try to resolve this.\n                             action.edit = new WorkspaceEdit();\n \n-                            result[index] = action;\n+                            if (group) {\n+                                let entry = groups.get(group);\n+                                if (!entry) {\n+                                    entry = { index: result.length, items: [] };\n+                                    groups.set(group, entry);\n+                                    result.push(action);\n+                                }\n+                                entry.items.push(action);\n+                            } else {\n+                                result.push(action);\n+                            }\n                         }\n-                    }\n-                    return result;\n-                },\n+                        for (const [group, { index, items }] of groups) {\n+                            if (items.length === 1) {\n+                                result[index] = items[0];\n+                            } else {\n+                                const action = new vscode.CodeAction(group);\n+                                action.kind = items[0].kind;\n+                                action.command = {\n+                                    command: \"rust-analyzer.applyActionGroup\",\n+                                    title: \"\",\n+                                    arguments: [\n+                                        items.map((item) => {\n+                                            return {\n+                                                label: item.title,\n+                                                arguments: item.command!.arguments![0],\n+                                            };\n+                                        }),\n+                                    ],\n+                                };\n+\n+                                // Set a dummy edit, so that VS Code doesn't try to resolve this.\n+                                action.edit = new WorkspaceEdit();\n+\n+                                result[index] = action;\n+                            }\n+                        }\n+                        return result;\n+                    },\n                     (_error) => undefined\n                 );\n-            }\n-\n+            },\n         },\n         markdown: {\n             supportHtml: true,\n-        }\n+        },\n     };\n \n     const client = new lc.LanguageClient(\n-        'rust-analyzer',\n-        'Rust Analyzer Language Server',\n+        \"rust-analyzer\",\n+        \"Rust Analyzer Language Server\",\n         serverOptions,\n-        clientOptions,\n+        clientOptions\n     );\n \n     // To turn on all proposed features use: client.registerProposedFeatures();\n@@ -196,20 +243,26 @@ class ExperimentalFeatures implements lc.StaticFeature {\n                 \"rust-analyzer.showReferences\",\n                 \"rust-analyzer.gotoLocation\",\n                 \"editor.action.triggerParameterHints\",\n-            ]\n+            ],\n         };\n         capabilities.experimental = caps;\n     }\n-    initialize(_capabilities: lc.ServerCapabilities<any>, _documentSelector: lc.DocumentSelector | undefined): void {\n-    }\n-    dispose(): void {\n-    }\n+    initialize(\n+        _capabilities: lc.ServerCapabilities<any>,\n+        _documentSelector: lc.DocumentSelector | undefined\n+    ): void {}\n+    dispose(): void {}\n }\n \n function isCodeActionWithoutEditsAndCommands(value: any): boolean {\n     const candidate: lc.CodeAction = value;\n-    return candidate && Is.string(candidate.title) &&\n-        (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, lc.Diagnostic.is)) &&\n+    return (\n+        candidate &&\n+        Is.string(candidate.title) &&\n+        (candidate.diagnostics === void 0 ||\n+            Is.typedArray(candidate.diagnostics, lc.Diagnostic.is)) &&\n         (candidate.kind === void 0 || Is.string(candidate.kind)) &&\n-        (candidate.edit === void 0 && candidate.command === void 0);\n+        candidate.edit === void 0 &&\n+        candidate.command === void 0\n+    );\n }"}, {"sha": "ae94ecac6d5b77bb000c51598f0c8dee640b293c", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 277, "deletions": 195, "changes": 472, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,81 +1,76 @@\n-import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n-import * as ra from './lsp_ext';\n-import * as path from 'path';\n-\n-import { Ctx, Cmd } from './ctx';\n-import { applySnippetWorkspaceEdit, applySnippetTextEdits } from './snippets';\n-import { spawnSync } from 'child_process';\n-import { RunnableQuickPick, selectRunnable, createTask, createArgs } from './run';\n-import { AstInspector } from './ast_inspector';\n-import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor } from './util';\n-import { startDebugSession, makeDebugConfig } from './debug';\n-import { LanguageClient } from 'vscode-languageclient/node';\n-\n-export * from './ast_inspector';\n-export * from './run';\n+import * as vscode from \"vscode\";\n+import * as lc from \"vscode-languageclient\";\n+import * as ra from \"./lsp_ext\";\n+import * as path from \"path\";\n+\n+import { Ctx, Cmd } from \"./ctx\";\n+import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n+import { spawnSync } from \"child_process\";\n+import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n+import { AstInspector } from \"./ast_inspector\";\n+import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor } from \"./util\";\n+import { startDebugSession, makeDebugConfig } from \"./debug\";\n+import { LanguageClient } from \"vscode-languageclient/node\";\n+\n+export * from \"./ast_inspector\";\n+export * from \"./run\";\n \n export function analyzerStatus(ctx: Ctx): Cmd {\n-    const tdcp = new class implements vscode.TextDocumentContentProvider {\n-        readonly uri = vscode.Uri.parse('rust-analyzer-status://status');\n+    const tdcp = new (class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse(\"rust-analyzer-status://status\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n         provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n-            if (!vscode.window.activeTextEditor) return '';\n+            if (!vscode.window.activeTextEditor) return \"\";\n \n             const params: ra.AnalyzerStatusParams = {};\n             const doc = ctx.activeRustEditor?.document;\n             if (doc != null) {\n-                params.textDocument = ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(doc);\n+                params.textDocument =\n+                    ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(doc);\n             }\n             return ctx.client.sendRequest(ra.analyzerStatus, params);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n-    }();\n+    })();\n \n     ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer-status',\n-            tdcp,\n-        ),\n+        vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-status\", tdcp)\n     );\n \n     return async () => {\n         const document = await vscode.workspace.openTextDocument(tdcp.uri);\n         tdcp.eventEmitter.fire(tdcp.uri);\n-        void await vscode.window.showTextDocument(document, {\n+        void (await vscode.window.showTextDocument(document, {\n             viewColumn: vscode.ViewColumn.Two,\n-            preserveFocus: true\n-        });\n+            preserveFocus: true,\n+        }));\n     };\n }\n \n export function memoryUsage(ctx: Ctx): Cmd {\n-    const tdcp = new class implements vscode.TextDocumentContentProvider {\n-        readonly uri = vscode.Uri.parse('rust-analyzer-memory://memory');\n+    const tdcp = new (class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse(\"rust-analyzer-memory://memory\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n         provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n-            if (!vscode.window.activeTextEditor) return '';\n+            if (!vscode.window.activeTextEditor) return \"\";\n \n             return ctx.client.sendRequest(ra.memoryUsage).then((mem: any) => {\n-                return 'Per-query memory usage:\\n' + mem + '\\n(note: database has been cleared)';\n+                return \"Per-query memory usage:\\n\" + mem + \"\\n(note: database has been cleared)\";\n             });\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n-    }();\n+    })();\n \n     ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer-memory',\n-            tdcp,\n-        ),\n+        vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-memory\", tdcp)\n     );\n \n     return async () => {\n@@ -101,15 +96,15 @@ export function matchingBrace(ctx: Ctx): Cmd {\n         if (!editor || !client) return;\n \n         const response = await client.sendRequest(ra.matchingBrace, {\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n-            positions: editor.selections.map(s =>\n-                client.code2ProtocolConverter.asPosition(s.active),\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                editor.document\n+            ),\n+            positions: editor.selections.map((s) =>\n+                client.code2ProtocolConverter.asPosition(s.active)\n             ),\n         });\n         editor.selections = editor.selections.map((sel, idx) => {\n-            const active = client.protocol2CodeConverter.asPosition(\n-                response[idx],\n-            );\n+            const active = client.protocol2CodeConverter.asPosition(response[idx]);\n             const anchor = sel.isEmpty ? active : sel.anchor;\n             return new vscode.Selection(anchor, active);\n         });\n@@ -125,7 +120,9 @@ export function joinLines(ctx: Ctx): Cmd {\n \n         const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n             ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                editor.document\n+            ),\n         });\n         await editor.edit(async (builder) => {\n             (await client.protocol2CodeConverter.asTextEdits(items)).forEach((edit: any) => {\n@@ -151,8 +148,10 @@ export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n \n         const lcEdits = await client.sendRequest(ra.moveItem, {\n             range: client.code2ProtocolConverter.asRange(editor.selection),\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n-            direction\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                editor.document\n+            ),\n+            direction,\n         });\n \n         if (!lcEdits) return;\n@@ -169,15 +168,17 @@ export function onEnter(ctx: Ctx): Cmd {\n \n         if (!editor || !client) return false;\n \n-        const lcEdits = await client.sendRequest(ra.onEnter, {\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n-            position: client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n-            ),\n-        }).catch((_error: any) => {\n-            // client.handleFailedRequest(OnEnterRequest.type, error, null);\n-            return null;\n-        });\n+        const lcEdits = await client\n+            .sendRequest(ra.onEnter, {\n+                textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                    editor.document\n+                ),\n+                position: client.code2ProtocolConverter.asPosition(editor.selection.active),\n+            })\n+            .catch((_error: any) => {\n+                // client.handleFailedRequest(OnEnterRequest.type, error, null);\n+                return null;\n+            });\n         if (!lcEdits) return false;\n \n         const edits = await client.protocol2CodeConverter.asTextEdits(lcEdits);\n@@ -188,7 +189,7 @@ export function onEnter(ctx: Ctx): Cmd {\n     return async () => {\n         if (await handleKeypress()) return;\n \n-        await vscode.commands.executeCommand('default:type', { text: '\\n' });\n+        await vscode.commands.executeCommand(\"default:type\", { text: \"\\n\" });\n     };\n }\n \n@@ -200,10 +201,10 @@ export function parentModule(ctx: Ctx): Cmd {\n         if (!(isRustDocument(editor.document) || isCargoTomlDocument(editor.document))) return;\n \n         const locations = await client.sendRequest(ra.parentModule, {\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n-            position: client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                editor.document\n             ),\n+            position: client.code2ProtocolConverter.asPosition(editor.selection.active),\n         });\n         if (!locations) return;\n \n@@ -220,7 +221,12 @@ export function parentModule(ctx: Ctx): Cmd {\n         } else {\n             const uri = editor.document.uri.toString();\n             const position = client.code2ProtocolConverter.asPosition(editor.selection.active);\n-            await showReferencesImpl(client, uri, position, locations.map(loc => lc.Location.create(loc.targetUri, loc.targetRange)));\n+            await showReferencesImpl(\n+                client,\n+                uri,\n+                position,\n+                locations.map((loc) => lc.Location.create(loc.targetUri, loc.targetRange))\n+            );\n         }\n     };\n }\n@@ -232,7 +238,9 @@ export function openCargoToml(ctx: Ctx): Cmd {\n         if (!editor || !client) return;\n \n         const response = await client.sendRequest(ra.openCargoToml, {\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                editor.document\n+            ),\n         });\n         if (!response) return;\n \n@@ -254,36 +262,51 @@ export function ssr(ctx: Ctx): Cmd {\n \n         const position = editor.selection.active;\n         const selections = editor.selections;\n-        const textDocument = ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document);\n+        const textDocument = ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+            editor.document\n+        );\n \n         const options: vscode.InputBoxOptions = {\n             value: \"() ==>> ()\",\n             prompt: \"Enter request, for example 'Foo($a) ==>> Foo::new($a)' \",\n             validateInput: async (x: string) => {\n                 try {\n                     await client.sendRequest(ra.ssr, {\n-                        query: x, parseOnly: true, textDocument, position, selections,\n+                        query: x,\n+                        parseOnly: true,\n+                        textDocument,\n+                        position,\n+                        selections,\n                     });\n                 } catch (e) {\n                     return e.toString();\n                 }\n                 return null;\n-            }\n+            },\n         };\n         const request = await vscode.window.showInputBox(options);\n         if (!request) return;\n \n-        await vscode.window.withProgress({\n-            location: vscode.ProgressLocation.Notification,\n-            title: \"Structured search replace in progress...\",\n-            cancellable: false,\n-        }, async (_progress, token) => {\n-            const edit = await client.sendRequest(ra.ssr, {\n-                query: request, parseOnly: false, textDocument, position, selections,\n-            });\n-\n-            await vscode.workspace.applyEdit(await client.protocol2CodeConverter.asWorkspaceEdit(edit, token));\n-        });\n+        await vscode.window.withProgress(\n+            {\n+                location: vscode.ProgressLocation.Notification,\n+                title: \"Structured search replace in progress...\",\n+                cancellable: false,\n+            },\n+            async (_progress, token) => {\n+                const edit = await client.sendRequest(ra.ssr, {\n+                    query: request,\n+                    parseOnly: false,\n+                    textDocument,\n+                    position,\n+                    selections,\n+                });\n+\n+                await vscode.workspace.applyEdit(\n+                    await client.protocol2CodeConverter.asWorkspaceEdit(edit, token)\n+                );\n+            }\n+        );\n     };\n }\n \n@@ -292,30 +315,38 @@ export function serverVersion(ctx: Ctx): Cmd {\n         const { stdout } = spawnSync(ctx.serverPath, [\"--version\"], { encoding: \"utf8\" });\n         const versionString = stdout.slice(`rust-analyzer `.length).trim();\n \n-        void vscode.window.showInformationMessage(\n-            `rust-analyzer version: ${versionString}`\n-        );\n+        void vscode.window.showInformationMessage(`rust-analyzer version: ${versionString}`);\n     };\n }\n \n export function toggleInlayHints(_ctx: Ctx): Cmd {\n     return async () => {\n-        const config = vscode.workspace.getConfiguration(\"editor.inlayHints\", { languageId: \"rust\" });\n+        const config = vscode.workspace.getConfiguration(\"editor.inlayHints\", {\n+            languageId: \"rust\",\n+        });\n         const value = !config.get(\"enabled\");\n-        await config.update('enabled', value, vscode.ConfigurationTarget.Global);\n+        await config.update(\"enabled\", value, vscode.ConfigurationTarget.Global);\n     };\n }\n \n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n export function syntaxTree(ctx: Ctx): Cmd {\n-    const tdcp = new class implements vscode.TextDocumentContentProvider {\n-        readonly uri = vscode.Uri.parse('rust-analyzer://syntaxtree/tree.rast');\n+    const tdcp = new (class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse(\"rust-analyzer://syntaxtree/tree.rast\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n         constructor() {\n-            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n-            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+            vscode.workspace.onDidChangeTextDocument(\n+                this.onDidChangeTextDocument,\n+                this,\n+                ctx.subscriptions\n+            );\n+            vscode.window.onDidChangeActiveTextEditor(\n+                this.onDidChangeActiveTextEditor,\n+                this,\n+                ctx.subscriptions\n+            );\n         }\n \n         private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n@@ -331,60 +362,72 @@ export function syntaxTree(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+        provideTextDocumentContent(\n+            uri: vscode.Uri,\n+            ct: vscode.CancellationToken\n+        ): vscode.ProviderResult<string> {\n             const rustEditor = ctx.activeRustEditor;\n-            if (!rustEditor) return '';\n+            if (!rustEditor) return \"\";\n \n             // When the range based query is enabled we take the range of the selection\n-            const range = uri.query === 'range=true' && !rustEditor.selection.isEmpty\n-                ? ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n-                : null;\n+            const range =\n+                uri.query === \"range=true\" && !rustEditor.selection.isEmpty\n+                    ? ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n+                    : null;\n \n-            const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range, };\n+            const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range };\n             return ctx.client.sendRequest(ra.syntaxTree, params, ct);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n-    };\n+    })();\n \n     void new AstInspector(ctx);\n \n-    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n-    ctx.pushCleanup(vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n-        brackets: [[\"[\", \")\"]],\n-    }));\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer\", tdcp));\n+    ctx.pushCleanup(\n+        vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n+            brackets: [[\"[\", \")\"]],\n+        })\n+    );\n \n     return async () => {\n         const editor = vscode.window.activeTextEditor;\n         const rangeEnabled = !!editor && !editor.selection.isEmpty;\n \n-        const uri = rangeEnabled\n-            ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n-            : tdcp.uri;\n+        const uri = rangeEnabled ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`) : tdcp.uri;\n \n         const document = await vscode.workspace.openTextDocument(uri);\n \n         tdcp.eventEmitter.fire(uri);\n \n-        void await vscode.window.showTextDocument(document, {\n+        void (await vscode.window.showTextDocument(document, {\n             viewColumn: vscode.ViewColumn.Two,\n-            preserveFocus: true\n-        });\n+            preserveFocus: true,\n+        }));\n     };\n }\n \n // Opens the virtual file that will show the HIR of the function containing the cursor position\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n export function viewHir(ctx: Ctx): Cmd {\n-    const tdcp = new class implements vscode.TextDocumentContentProvider {\n-        readonly uri = vscode.Uri.parse('rust-analyzer://viewHir/hir.txt');\n+    const tdcp = new (class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse(\"rust-analyzer://viewHir/hir.txt\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n         constructor() {\n-            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n-            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+            vscode.workspace.onDidChangeTextDocument(\n+                this.onDidChangeTextDocument,\n+                this,\n+                ctx.subscriptions\n+            );\n+            vscode.window.onDidChangeActiveTextEditor(\n+                this.onDidChangeActiveTextEditor,\n+                this,\n+                ctx.subscriptions\n+            );\n         }\n \n         private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n@@ -400,44 +443,55 @@ export function viewHir(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(_uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+        provideTextDocumentContent(\n+            _uri: vscode.Uri,\n+            ct: vscode.CancellationToken\n+        ): vscode.ProviderResult<string> {\n             const rustEditor = ctx.activeRustEditor;\n             const client = ctx.client;\n-            if (!rustEditor || !client) return '';\n+            if (!rustEditor || !client) return \"\";\n \n             const params = {\n-                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(rustEditor.document),\n-                position: client.code2ProtocolConverter.asPosition(\n-                    rustEditor.selection.active,\n+                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                    rustEditor.document\n                 ),\n+                position: client.code2ProtocolConverter.asPosition(rustEditor.selection.active),\n             };\n             return client.sendRequest(ra.viewHir, params, ct);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n-    };\n+    })();\n \n-    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer\", tdcp));\n \n     return async () => {\n         const document = await vscode.workspace.openTextDocument(tdcp.uri);\n         tdcp.eventEmitter.fire(tdcp.uri);\n-        void await vscode.window.showTextDocument(document, {\n+        void (await vscode.window.showTextDocument(document, {\n             viewColumn: vscode.ViewColumn.Two,\n-            preserveFocus: true\n-        });\n+            preserveFocus: true,\n+        }));\n     };\n }\n \n export function viewFileText(ctx: Ctx): Cmd {\n-    const tdcp = new class implements vscode.TextDocumentContentProvider {\n-        readonly uri = vscode.Uri.parse('rust-analyzer://viewFileText/file.rs');\n+    const tdcp = new (class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse(\"rust-analyzer://viewFileText/file.rs\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n         constructor() {\n-            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n-            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+            vscode.workspace.onDidChangeTextDocument(\n+                this.onDidChangeTextDocument,\n+                this,\n+                ctx.subscriptions\n+            );\n+            vscode.window.onDidChangeActiveTextEditor(\n+                this.onDidChangeActiveTextEditor,\n+                this,\n+                ctx.subscriptions\n+            );\n         }\n \n         private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n@@ -453,39 +507,52 @@ export function viewFileText(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(_uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+        provideTextDocumentContent(\n+            _uri: vscode.Uri,\n+            ct: vscode.CancellationToken\n+        ): vscode.ProviderResult<string> {\n             const rustEditor = ctx.activeRustEditor;\n             const client = ctx.client;\n-            if (!rustEditor || !client) return '';\n+            if (!rustEditor || !client) return \"\";\n \n-            const params = client.code2ProtocolConverter.asTextDocumentIdentifier(rustEditor.document);\n+            const params = client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                rustEditor.document\n+            );\n             return client.sendRequest(ra.viewFileText, params, ct);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n-    };\n+    })();\n \n-    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer\", tdcp));\n \n     return async () => {\n         const document = await vscode.workspace.openTextDocument(tdcp.uri);\n         tdcp.eventEmitter.fire(tdcp.uri);\n-        void await vscode.window.showTextDocument(document, {\n+        void (await vscode.window.showTextDocument(document, {\n             viewColumn: vscode.ViewColumn.Two,\n-            preserveFocus: true\n-        });\n+            preserveFocus: true,\n+        }));\n     };\n }\n \n export function viewItemTree(ctx: Ctx): Cmd {\n-    const tdcp = new class implements vscode.TextDocumentContentProvider {\n-        readonly uri = vscode.Uri.parse('rust-analyzer://viewItemTree/itemtree.rs');\n+    const tdcp = new (class implements vscode.TextDocumentContentProvider {\n+        readonly uri = vscode.Uri.parse(\"rust-analyzer://viewItemTree/itemtree.rs\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n         constructor() {\n-            vscode.workspace.onDidChangeTextDocument(this.onDidChangeTextDocument, this, ctx.subscriptions);\n-            vscode.window.onDidChangeActiveTextEditor(this.onDidChangeActiveTextEditor, this, ctx.subscriptions);\n+            vscode.workspace.onDidChangeTextDocument(\n+                this.onDidChangeTextDocument,\n+                this,\n+                ctx.subscriptions\n+            );\n+            vscode.window.onDidChangeActiveTextEditor(\n+                this.onDidChangeActiveTextEditor,\n+                this,\n+                ctx.subscriptions\n+            );\n         }\n \n         private onDidChangeTextDocument(event: vscode.TextDocumentChangeEvent) {\n@@ -501,43 +568,53 @@ export function viewItemTree(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(_uri: vscode.Uri, ct: vscode.CancellationToken): vscode.ProviderResult<string> {\n+        provideTextDocumentContent(\n+            _uri: vscode.Uri,\n+            ct: vscode.CancellationToken\n+        ): vscode.ProviderResult<string> {\n             const rustEditor = ctx.activeRustEditor;\n             const client = ctx.client;\n-            if (!rustEditor || !client) return '';\n+            if (!rustEditor || !client) return \"\";\n \n             const params = {\n-                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(rustEditor.document),\n+                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                    rustEditor.document\n+                ),\n             };\n             return client.sendRequest(ra.viewItemTree, params, ct);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n-    };\n+    })();\n \n-    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider('rust-analyzer', tdcp));\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer\", tdcp));\n \n     return async () => {\n         const document = await vscode.workspace.openTextDocument(tdcp.uri);\n         tdcp.eventEmitter.fire(tdcp.uri);\n-        void await vscode.window.showTextDocument(document, {\n+        void (await vscode.window.showTextDocument(document, {\n             viewColumn: vscode.ViewColumn.Two,\n-            preserveFocus: true\n-        });\n+            preserveFocus: true,\n+        }));\n     };\n }\n \n function crateGraph(ctx: Ctx, full: boolean): Cmd {\n     return async () => {\n         const nodeModulesPath = vscode.Uri.file(path.join(ctx.extensionPath, \"node_modules\"));\n \n-        const panel = vscode.window.createWebviewPanel(\"rust-analyzer.crate-graph\", \"rust-analyzer crate graph\", vscode.ViewColumn.Two, {\n-            enableScripts: true,\n-            retainContextWhenHidden: true,\n-            localResourceRoots: [nodeModulesPath]\n-        });\n+        const panel = vscode.window.createWebviewPanel(\n+            \"rust-analyzer.crate-graph\",\n+            \"rust-analyzer crate graph\",\n+            vscode.ViewColumn.Two,\n+            {\n+                enableScripts: true,\n+                retainContextWhenHidden: true,\n+                localResourceRoots: [nodeModulesPath],\n+            }\n+        );\n         const params = {\n             full: full,\n         };\n@@ -601,67 +678,65 @@ export function viewFullCrateGraph(ctx: Ctx): Cmd {\n export function expandMacro(ctx: Ctx): Cmd {\n     function codeFormat(expanded: ra.ExpandedMacro): string {\n         let result = `// Recursive expansion of ${expanded.name}! macro\\n`;\n-        result += '// ' + '='.repeat(result.length - 3);\n-        result += '\\n\\n';\n+        result += \"// \" + \"=\".repeat(result.length - 3);\n+        result += \"\\n\\n\";\n         result += expanded.expansion;\n \n         return result;\n     }\n \n-    const tdcp = new class implements vscode.TextDocumentContentProvider {\n-        uri = vscode.Uri.parse('rust-analyzer://expandMacro/[EXPANSION].rs');\n+    const tdcp = new (class implements vscode.TextDocumentContentProvider {\n+        uri = vscode.Uri.parse(\"rust-analyzer://expandMacro/[EXPANSION].rs\");\n         eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n         async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n             const editor = vscode.window.activeTextEditor;\n             const client = ctx.client;\n-            if (!editor || !client) return '';\n+            if (!editor || !client) return \"\";\n \n             const position = editor.selection.active;\n \n             const expanded = await client.sendRequest(ra.expandMacro, {\n-                textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n+                textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                    editor.document\n+                ),\n                 position,\n             });\n \n-            if (expanded == null) return 'Not available';\n+            if (expanded == null) return \"Not available\";\n \n             return codeFormat(expanded);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n-    }();\n+    })();\n \n-    ctx.pushCleanup(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer',\n-            tdcp,\n-        ),\n-    );\n+    ctx.pushCleanup(vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer\", tdcp));\n \n     return async () => {\n         const document = await vscode.workspace.openTextDocument(tdcp.uri);\n         tdcp.eventEmitter.fire(tdcp.uri);\n-        return vscode.window.showTextDocument(\n-            document,\n-            vscode.ViewColumn.Two,\n-            true,\n-        );\n+        return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true);\n     };\n }\n \n export function reloadWorkspace(ctx: Ctx): Cmd {\n     return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n }\n \n-async function showReferencesImpl(client: LanguageClient, uri: string, position: lc.Position, locations: lc.Location[]) {\n+async function showReferencesImpl(\n+    client: LanguageClient,\n+    uri: string,\n+    position: lc.Position,\n+    locations: lc.Location[]\n+) {\n     if (client) {\n         await vscode.commands.executeCommand(\n-            'editor.action.showReferences',\n+            \"editor.action.showReferences\",\n             vscode.Uri.parse(uri),\n             client.protocol2CodeConverter.asPosition(position),\n-            locations.map(client.protocol2CodeConverter.asLocation),\n+            locations.map(client.protocol2CodeConverter.asLocation)\n         );\n     }\n }\n@@ -677,8 +752,8 @@ export function applyActionGroup(_ctx: Ctx): Cmd {\n         const selectedAction = await vscode.window.showQuickPick(actions);\n         if (!selectedAction) return;\n         await vscode.commands.executeCommand(\n-            'rust-analyzer.resolveCodeAction',\n-            selectedAction.arguments,\n+            \"rust-analyzer.resolveCodeAction\",\n+            selectedAction.arguments\n         );\n     };\n }\n@@ -699,12 +774,11 @@ export function gotoLocation(ctx: Ctx): Cmd {\n \n export function openDocs(ctx: Ctx): Cmd {\n     return async () => {\n-\n         const client = ctx.client;\n         const editor = vscode.window.activeTextEditor;\n         if (!editor || !client) {\n             return;\n-        };\n+        }\n \n         const position = editor.selection.active;\n         const textDocument = { uri: editor.document.uri.toString() };\n@@ -715,7 +789,6 @@ export function openDocs(ctx: Ctx): Cmd {\n             await vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(doclink));\n         }\n     };\n-\n }\n \n export function resolveCodeAction(ctx: Ctx): Cmd {\n@@ -730,8 +803,13 @@ export function resolveCodeAction(ctx: Ctx): Cmd {\n         const edit = await client.protocol2CodeConverter.asWorkspaceEdit(itemEdit);\n         // filter out all text edits and recreate the WorkspaceEdit without them so we can apply\n         // snippet edits on our own\n-        const lcFileSystemEdit = { ...itemEdit, documentChanges: itemEdit.documentChanges?.filter(change => \"kind\" in change) };\n-        const fileSystemEdit = await client.protocol2CodeConverter.asWorkspaceEdit(lcFileSystemEdit);\n+        const lcFileSystemEdit = {\n+            ...itemEdit,\n+            documentChanges: itemEdit.documentChanges?.filter((change) => \"kind\" in change),\n+        };\n+        const fileSystemEdit = await client.protocol2CodeConverter.asWorkspaceEdit(\n+            lcFileSystemEdit\n+        );\n         await vscode.workspace.applyEdit(fileSystemEdit);\n         await applySnippetWorkspaceEdit(edit);\n         if (item.command != null) {\n@@ -753,7 +831,7 @@ export function run(ctx: Ctx): Cmd {\n         const item = await selectRunnable(ctx, prevRunnable);\n         if (!item) return;\n \n-        item.detail = 'rerun';\n+        item.detail = \"rerun\";\n         prevRunnable = item;\n         const task = await createTask(item.runnable, ctx.config);\n         return await vscode.tasks.executeTask(task);\n@@ -767,29 +845,33 @@ export function peekTests(ctx: Ctx): Cmd {\n         const editor = ctx.activeRustEditor;\n         if (!editor || !client) return;\n \n-        await vscode.window.withProgress({\n-            location: vscode.ProgressLocation.Notification,\n-            title: \"Looking for tests...\",\n-            cancellable: false,\n-        }, async (_progress, _token) => {\n-            const uri = editor.document.uri.toString();\n-            const position = client.code2ProtocolConverter.asPosition(\n-                editor.selection.active,\n-            );\n-\n-            const tests = await client.sendRequest(ra.relatedTests, {\n-                textDocument: { uri: uri },\n-                position: position,\n-            });\n-            const locations: lc.Location[] = tests.map(it =>\n-                lc.Location.create(it.runnable.location!.targetUri, it.runnable.location!.targetSelectionRange));\n-\n-            await showReferencesImpl(client, uri, position, locations);\n-        });\n+        await vscode.window.withProgress(\n+            {\n+                location: vscode.ProgressLocation.Notification,\n+                title: \"Looking for tests...\",\n+                cancellable: false,\n+            },\n+            async (_progress, _token) => {\n+                const uri = editor.document.uri.toString();\n+                const position = client.code2ProtocolConverter.asPosition(editor.selection.active);\n+\n+                const tests = await client.sendRequest(ra.relatedTests, {\n+                    textDocument: { uri: uri },\n+                    position: position,\n+                });\n+                const locations: lc.Location[] = tests.map((it) =>\n+                    lc.Location.create(\n+                        it.runnable.location!.targetUri,\n+                        it.runnable.location!.targetSelectionRange\n+                    )\n+                );\n+\n+                await showReferencesImpl(client, uri, position, locations);\n+            }\n+        );\n     };\n }\n \n-\n export function runSingle(ctx: Ctx): Cmd {\n     return async (runnable: ra.Runnable) => {\n         const editor = ctx.activeRustEditor;\n@@ -826,7 +908,7 @@ export function debug(ctx: Ctx): Cmd {\n         const item = await selectRunnable(ctx, prevDebuggee, true);\n         if (!item) return;\n \n-        item.detail = 'restart';\n+        item.detail = \"restart\";\n         prevDebuggee = item;\n         return await startDebugSession(ctx, item.runnable);\n     };"}, {"sha": "592ebe0ce33895262cd32ef9ece14b63714ff604", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 122, "deletions": 88, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,13 +1,16 @@\n-import path = require('path');\n-import * as vscode from 'vscode';\n-import { Env } from './client';\n+import path = require(\"path\");\n+import * as vscode from \"vscode\";\n+import { Env } from \"./client\";\n import { log } from \"./util\";\n \n export type UpdatesChannel = \"stable\" | \"nightly\";\n \n const NIGHTLY_TAG = \"nightly\";\n \n-export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string; env: Record<string, string> }[];\n+export type RunnableEnvCfg =\n+    | undefined\n+    | Record<string, string>\n+    | { mask?: string; env: Record<string, string> }[];\n \n export class Config {\n     readonly extensionId = \"rust-lang.rust-analyzer\";\n@@ -20,8 +23,7 @@ export class Config {\n         \"procMacro\",\n         \"files\",\n         \"lens\", // works as lens.*\n-    ]\n-        .map(opt => `${this.rootSection}.${opt}`);\n+    ].map((opt) => `${this.rootSection}.${opt}`);\n \n     readonly package: {\n         version: string;\n@@ -33,7 +35,11 @@ export class Config {\n \n     constructor(ctx: vscode.ExtensionContext) {\n         this.globalStorageUri = ctx.globalStorageUri;\n-        vscode.workspace.onDidChangeConfiguration(this.onDidChangeConfiguration, this, ctx.subscriptions);\n+        vscode.workspace.onDidChangeConfiguration(\n+            this.onDidChangeConfiguration,\n+            this,\n+            ctx.subscriptions\n+        );\n         this.refreshLogging();\n     }\n \n@@ -48,8 +54,8 @@ export class Config {\n     private async onDidChangeConfiguration(event: vscode.ConfigurationChangeEvent) {\n         this.refreshLogging();\n \n-        const requiresReloadOpt = this.requiresReloadOpts.find(\n-            opt => event.affectsConfiguration(opt)\n+        const requiresReloadOpt = this.requiresReloadOpts.find((opt) =>\n+            event.affectsConfiguration(opt)\n         );\n \n         if (!requiresReloadOpt) return;\n@@ -94,8 +100,12 @@ export class Config {\n     get serverPath() {\n         return this.get<null | string>(\"server.path\") ?? this.get<null | string>(\"serverPath\");\n     }\n-    get serverExtraEnv() { return this.get<Env | null>(\"server.extraEnv\") ?? {}; }\n-    get traceExtension() { return this.get<boolean>(\"trace.extension\"); }\n+    get serverExtraEnv() {\n+        return this.get<Env | null>(\"server.extraEnv\") ?? {};\n+    }\n+    get traceExtension() {\n+        return this.get<boolean>(\"trace.extension\");\n+    }\n \n     get cargoRunner() {\n         return this.get<string | undefined>(\"cargoRunner\");\n@@ -109,15 +119,16 @@ export class Config {\n         let sourceFileMap = this.get<Record<string, string> | \"auto\">(\"debug.sourceFileMap\");\n         if (sourceFileMap !== \"auto\") {\n             // \"/rustc/<id>\" used by suggestions only.\n-            const { [\"/rustc/<id>\"]: _, ...trimmed } = this.get<Record<string, string>>(\"debug.sourceFileMap\");\n+            const { [\"/rustc/<id>\"]: _, ...trimmed } =\n+                this.get<Record<string, string>>(\"debug.sourceFileMap\");\n             sourceFileMap = trimmed;\n         }\n \n         return {\n             engine: this.get<string>(\"debug.engine\"),\n             engineSettings: this.get<object>(\"debug.engineSettings\"),\n             openDebugPane: this.get<boolean>(\"debug.openDebugPane\"),\n-            sourceFileMap: sourceFileMap\n+            sourceFileMap: sourceFileMap,\n         };\n     }\n \n@@ -139,65 +150,84 @@ export class Config {\n \n export async function updateConfig(config: vscode.WorkspaceConfiguration) {\n     const renames = [\n-        [\"assist.allowMergingIntoGlobImports\", \"imports.merge.glob\",],\n-        [\"assist.exprFillDefault\", \"assist.expressionFillDefault\",],\n-        [\"assist.importEnforceGranularity\", \"imports.granularity.enforce\",],\n-        [\"assist.importGranularity\", \"imports.granularity.group\",],\n-        [\"assist.importMergeBehavior\", \"imports.granularity.group\",],\n-        [\"assist.importMergeBehaviour\", \"imports.granularity.group\",],\n-        [\"assist.importGroup\", \"imports.group.enable\",],\n-        [\"assist.importPrefix\", \"imports.prefix\",],\n-        [\"primeCaches.enable\", \"cachePriming.enable\",],\n-        [\"cache.warmup\", \"cachePriming.enable\",],\n-        [\"cargo.loadOutDirsFromCheck\", \"cargo.buildScripts.enable\",],\n-        [\"cargo.runBuildScripts\", \"cargo.buildScripts.enable\",],\n-        [\"cargo.runBuildScriptsCommand\", \"cargo.buildScripts.overrideCommand\",],\n-        [\"cargo.useRustcWrapperForBuildScripts\", \"cargo.buildScripts.useRustcWrapper\",],\n-        [\"completion.snippets\", \"completion.snippets.custom\",],\n-        [\"diagnostics.enableExperimental\", \"diagnostics.experimental.enable\",],\n-        [\"experimental.procAttrMacros\", \"procMacro.attributes.enable\",],\n-        [\"highlighting.strings\", \"semanticHighlighting.strings.enable\",],\n-        [\"highlightRelated.breakPoints\", \"highlightRelated.breakPoints.enable\",],\n-        [\"highlightRelated.exitPoints\", \"highlightRelated.exitPoints.enable\",],\n-        [\"highlightRelated.yieldPoints\", \"highlightRelated.yieldPoints.enable\",],\n-        [\"highlightRelated.references\", \"highlightRelated.references.enable\",],\n-        [\"hover.documentation\", \"hover.documentation.enable\",],\n-        [\"hover.linksInHover\", \"hover.links.enable\",],\n-        [\"hoverActions.linksInHover\", \"hover.links.enable\",],\n-        [\"hoverActions.debug\", \"hover.actions.debug.enable\",],\n-        [\"hoverActions.enable\", \"hover.actions.enable.enable\",],\n-        [\"hoverActions.gotoTypeDef\", \"hover.actions.gotoTypeDef.enable\",],\n-        [\"hoverActions.implementations\", \"hover.actions.implementations.enable\",],\n-        [\"hoverActions.references\", \"hover.actions.references.enable\",],\n-        [\"hoverActions.run\", \"hover.actions.run.enable\",],\n-        [\"inlayHints.chainingHints\", \"inlayHints.chainingHints.enable\",],\n-        [\"inlayHints.closureReturnTypeHints\", \"inlayHints.closureReturnTypeHints.enable\",],\n-        [\"inlayHints.hideNamedConstructorHints\", \"inlayHints.typeHints.hideNamedConstructor\",],\n-        [\"inlayHints.parameterHints\", \"inlayHints.parameterHints.enable\",],\n-        [\"inlayHints.reborrowHints\", \"inlayHints.reborrowHints.enable\",],\n-        [\"inlayHints.typeHints\", \"inlayHints.typeHints.enable\",],\n-        [\"lruCapacity\", \"lru.capacity\",],\n-        [\"runnables.cargoExtraArgs\", \"runnables.extraArgs\",],\n-        [\"runnables.overrideCargo\", \"runnables.command\",],\n-        [\"rustcSource\", \"rustc.source\",],\n-        [\"rustfmt.enableRangeFormatting\", \"rustfmt.rangeFormatting.enable\"]\n+        [\"assist.allowMergingIntoGlobImports\", \"imports.merge.glob\"],\n+        [\"assist.exprFillDefault\", \"assist.expressionFillDefault\"],\n+        [\"assist.importEnforceGranularity\", \"imports.granularity.enforce\"],\n+        [\"assist.importGranularity\", \"imports.granularity.group\"],\n+        [\"assist.importMergeBehavior\", \"imports.granularity.group\"],\n+        [\"assist.importMergeBehaviour\", \"imports.granularity.group\"],\n+        [\"assist.importGroup\", \"imports.group.enable\"],\n+        [\"assist.importPrefix\", \"imports.prefix\"],\n+        [\"primeCaches.enable\", \"cachePriming.enable\"],\n+        [\"cache.warmup\", \"cachePriming.enable\"],\n+        [\"cargo.loadOutDirsFromCheck\", \"cargo.buildScripts.enable\"],\n+        [\"cargo.runBuildScripts\", \"cargo.buildScripts.enable\"],\n+        [\"cargo.runBuildScriptsCommand\", \"cargo.buildScripts.overrideCommand\"],\n+        [\"cargo.useRustcWrapperForBuildScripts\", \"cargo.buildScripts.useRustcWrapper\"],\n+        [\"completion.snippets\", \"completion.snippets.custom\"],\n+        [\"diagnostics.enableExperimental\", \"diagnostics.experimental.enable\"],\n+        [\"experimental.procAttrMacros\", \"procMacro.attributes.enable\"],\n+        [\"highlighting.strings\", \"semanticHighlighting.strings.enable\"],\n+        [\"highlightRelated.breakPoints\", \"highlightRelated.breakPoints.enable\"],\n+        [\"highlightRelated.exitPoints\", \"highlightRelated.exitPoints.enable\"],\n+        [\"highlightRelated.yieldPoints\", \"highlightRelated.yieldPoints.enable\"],\n+        [\"highlightRelated.references\", \"highlightRelated.references.enable\"],\n+        [\"hover.documentation\", \"hover.documentation.enable\"],\n+        [\"hover.linksInHover\", \"hover.links.enable\"],\n+        [\"hoverActions.linksInHover\", \"hover.links.enable\"],\n+        [\"hoverActions.debug\", \"hover.actions.debug.enable\"],\n+        [\"hoverActions.enable\", \"hover.actions.enable.enable\"],\n+        [\"hoverActions.gotoTypeDef\", \"hover.actions.gotoTypeDef.enable\"],\n+        [\"hoverActions.implementations\", \"hover.actions.implementations.enable\"],\n+        [\"hoverActions.references\", \"hover.actions.references.enable\"],\n+        [\"hoverActions.run\", \"hover.actions.run.enable\"],\n+        [\"inlayHints.chainingHints\", \"inlayHints.chainingHints.enable\"],\n+        [\"inlayHints.closureReturnTypeHints\", \"inlayHints.closureReturnTypeHints.enable\"],\n+        [\"inlayHints.hideNamedConstructorHints\", \"inlayHints.typeHints.hideNamedConstructor\"],\n+        [\"inlayHints.parameterHints\", \"inlayHints.parameterHints.enable\"],\n+        [\"inlayHints.reborrowHints\", \"inlayHints.reborrowHints.enable\"],\n+        [\"inlayHints.typeHints\", \"inlayHints.typeHints.enable\"],\n+        [\"lruCapacity\", \"lru.capacity\"],\n+        [\"runnables.cargoExtraArgs\", \"runnables.extraArgs\"],\n+        [\"runnables.overrideCargo\", \"runnables.command\"],\n+        [\"rustcSource\", \"rustc.source\"],\n+        [\"rustfmt.enableRangeFormatting\", \"rustfmt.rangeFormatting.enable\"],\n     ];\n \n     for (const [oldKey, newKey] of renames) {\n         const inspect = config.inspect(oldKey);\n         if (inspect !== undefined) {\n             const valMatrix = [\n-                { val: inspect.globalValue, langVal: inspect.globalLanguageValue, target: vscode.ConfigurationTarget.Global },\n-                { val: inspect.workspaceFolderValue, langVal: inspect.workspaceFolderLanguageValue, target: vscode.ConfigurationTarget.WorkspaceFolder },\n-                { val: inspect.workspaceValue, langVal: inspect.workspaceLanguageValue, target: vscode.ConfigurationTarget.Workspace }\n+                {\n+                    val: inspect.globalValue,\n+                    langVal: inspect.globalLanguageValue,\n+                    target: vscode.ConfigurationTarget.Global,\n+                },\n+                {\n+                    val: inspect.workspaceFolderValue,\n+                    langVal: inspect.workspaceFolderLanguageValue,\n+                    target: vscode.ConfigurationTarget.WorkspaceFolder,\n+                },\n+                {\n+                    val: inspect.workspaceValue,\n+                    langVal: inspect.workspaceLanguageValue,\n+                    target: vscode.ConfigurationTarget.Workspace,\n+                },\n             ];\n             for (const { val, langVal, target } of valMatrix) {\n                 const pred = (val: unknown) => {\n                     // some of the updates we do only append \"enable\" or \"custom\"\n                     // that means on the next run we would find these again, but as objects with\n                     // these properties causing us to destroy the config\n                     // so filter those already updated ones out\n-                    return val !== undefined && !(typeof val === \"object\" && val !== null && (val.hasOwnProperty(\"enable\") || val.hasOwnProperty(\"custom\")));\n+                    return (\n+                        val !== undefined &&\n+                        !(\n+                            typeof val === \"object\" &&\n+                            val !== null &&\n+                            (val.hasOwnProperty(\"enable\") || val.hasOwnProperty(\"custom\"))\n+                        )\n+                    );\n                 };\n                 if (pred(val)) {\n                     await config.update(newKey, val, target, false);\n@@ -216,48 +246,50 @@ export function substituteVariablesInEnv(env: Env): Env {\n     const missingDeps = new Set<string>();\n     // vscode uses `env:ENV_NAME` for env vars resolution, and it's easier\n     // to follow the same convention for our dependency tracking\n-    const definedEnvKeys = new Set(Object.keys(env).map(key => `env:${key}`));\n-    const envWithDeps = Object.fromEntries(Object.entries(env).map(([key, value]) => {\n-        const deps = new Set<string>();\n-        const depRe = new RegExp(/\\${(?<depName>.+?)}/g);\n-        let match = undefined;\n-        while ((match = depRe.exec(value))) {\n-            const depName = match.groups!.depName;\n-            deps.add(depName);\n-            // `depName` at this point can have a form of `expression` or\n-            // `prefix:expression`\n-            if (!definedEnvKeys.has(depName)) {\n-                missingDeps.add(depName);\n+    const definedEnvKeys = new Set(Object.keys(env).map((key) => `env:${key}`));\n+    const envWithDeps = Object.fromEntries(\n+        Object.entries(env).map(([key, value]) => {\n+            const deps = new Set<string>();\n+            const depRe = new RegExp(/\\${(?<depName>.+?)}/g);\n+            let match = undefined;\n+            while ((match = depRe.exec(value))) {\n+                const depName = match.groups!.depName;\n+                deps.add(depName);\n+                // `depName` at this point can have a form of `expression` or\n+                // `prefix:expression`\n+                if (!definedEnvKeys.has(depName)) {\n+                    missingDeps.add(depName);\n+                }\n             }\n-        }\n-        return [`env:${key}`, { deps: [...deps], value }];\n-    }));\n+            return [`env:${key}`, { deps: [...deps], value }];\n+        })\n+    );\n \n     const resolved = new Set<string>();\n     for (const dep of missingDeps) {\n         const match = /(?<prefix>.*?):(?<body>.+)/.exec(dep);\n         if (match) {\n             const { prefix, body } = match.groups!;\n-            if (prefix === 'env') {\n+            if (prefix === \"env\") {\n                 const envName = body;\n                 envWithDeps[dep] = {\n-                    value: process.env[envName] ?? '',\n-                    deps: []\n+                    value: process.env[envName] ?? \"\",\n+                    deps: [],\n                 };\n                 resolved.add(dep);\n             } else {\n                 // we can't handle other prefixes at the moment\n                 // leave values as is, but still mark them as resolved\n                 envWithDeps[dep] = {\n-                    value: '${' + dep + '}',\n-                    deps: []\n+                    value: \"${\" + dep + \"}\",\n+                    deps: [],\n                 };\n                 resolved.add(dep);\n             }\n         } else {\n             envWithDeps[dep] = {\n                 value: computeVscodeVar(dep),\n-                deps: []\n+                deps: [],\n             };\n         }\n     }\n@@ -267,11 +299,13 @@ export function substituteVariablesInEnv(env: Env): Env {\n     do {\n         leftToResolveSize = toResolve.size;\n         for (const key of toResolve) {\n-            if (envWithDeps[key].deps.every(dep => resolved.has(dep))) {\n+            if (envWithDeps[key].deps.every((dep) => resolved.has(dep))) {\n                 envWithDeps[key].value = envWithDeps[key].value.replace(\n-                    /\\${(?<depName>.+?)}/g, (_wholeMatch, depName) => {\n+                    /\\${(?<depName>.+?)}/g,\n+                    (_wholeMatch, depName) => {\n                         return envWithDeps[depName].value;\n-                    });\n+                    }\n+                );\n                 resolved.add(key);\n                 toResolve.delete(key);\n             }\n@@ -302,16 +336,16 @@ function computeVscodeVar(varName: string): string {\n                 return folders[0].uri.fsPath;\n             } else {\n                 // no workspace opened\n-                return '';\n+                return \"\";\n             }\n         },\n \n         workspaceFolderBasename: () => {\n-            const workspaceFolder = computeVscodeVar('workspaceFolder');\n+            const workspaceFolder = computeVscodeVar(\"workspaceFolder\");\n             if (workspaceFolder) {\n                 return path.basename(workspaceFolder);\n             } else {\n-                return '';\n+                return \"\";\n             }\n         },\n \n@@ -323,13 +357,13 @@ function computeVscodeVar(varName: string): string {\n         // https://github.com/microsoft/vscode/blob/29eb316bb9f154b7870eb5204ec7f2e7cf649bec/src/vs/server/node/remoteTerminalChannel.ts#L56\n         execPath: () => process.env.VSCODE_EXEC_PATH ?? process.execPath,\n \n-        pathSeparator: () => path.sep\n+        pathSeparator: () => path.sep,\n     };\n \n     if (varName in supportedVariables) {\n         return supportedVariables[varName]();\n     } else {\n         // can't resolve, keep the expression as is\n-        return '${' + varName + '}';\n+        return \"${\" + varName + \"}\";\n     }\n }"}, {"sha": "fb2268f89f229b8e41ac1b33b612da0d2b43de31", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,37 +1,35 @@\n-import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient/node';\n-import * as ra from './lsp_ext';\n+import * as vscode from \"vscode\";\n+import * as lc from \"vscode-languageclient/node\";\n+import * as ra from \"./lsp_ext\";\n \n-import { Config } from './config';\n-import { createClient } from './client';\n-import { isRustEditor, RustEditor } from './util';\n-import { ServerStatusParams } from './lsp_ext';\n+import { Config } from \"./config\";\n+import { createClient } from \"./client\";\n+import { isRustEditor, RustEditor } from \"./util\";\n+import { ServerStatusParams } from \"./lsp_ext\";\n \n export type Workspace =\n-    {\n-        kind: 'Workspace Folder';\n-    }\n     | {\n-        kind: 'Detached Files';\n-        files: vscode.TextDocument[];\n-    };\n+          kind: \"Workspace Folder\";\n+      }\n+    | {\n+          kind: \"Detached Files\";\n+          files: vscode.TextDocument[];\n+      };\n \n export class Ctx {\n     private constructor(\n         readonly config: Config,\n         private readonly extCtx: vscode.ExtensionContext,\n         readonly client: lc.LanguageClient,\n         readonly serverPath: string,\n-        readonly statusBar: vscode.StatusBarItem,\n-    ) {\n-\n-    }\n+        readonly statusBar: vscode.StatusBarItem\n+    ) {}\n \n     static async create(\n         config: Config,\n         extCtx: vscode.ExtensionContext,\n         serverPath: string,\n-        workspace: Workspace,\n+        workspace: Workspace\n     ): Promise<Ctx> {\n         const client = await createClient(serverPath, workspace, config.serverExtraEnv);\n \n@@ -52,9 +50,7 @@ export class Ctx {\n \n     get activeRustEditor(): RustEditor | undefined {\n         const editor = vscode.window.activeTextEditor;\n-        return editor && isRustEditor(editor)\n-            ? editor\n-            : undefined;\n+        return editor && isRustEditor(editor) ? editor : undefined;\n     }\n \n     get visibleRustEditors(): RustEditor[] {"}, {"sha": "1f06c99576fadc577fadd3070cbdef03aaef66d7", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 54, "deletions": 23, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,14 +1,19 @@\n import * as os from \"os\";\n-import * as vscode from 'vscode';\n-import * as path from 'path';\n-import * as ra from './lsp_ext';\n+import * as vscode from \"vscode\";\n+import * as path from \"path\";\n+import * as ra from \"./lsp_ext\";\n \n-import { Cargo, getRustcId, getSysroot } from './toolchain';\n+import { Cargo, getRustcId, getSysroot } from \"./toolchain\";\n import { Ctx } from \"./ctx\";\n import { prepareEnv } from \"./run\";\n \n const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n-type DebugConfigProvider = (config: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+type DebugConfigProvider = (\n+    config: ra.Runnable,\n+    executable: string,\n+    env: Record<string, string>,\n+    sourceFileMap?: Record<string, string>\n+) => vscode.DebugConfiguration;\n \n export async function makeDebugConfig(ctx: Ctx, runnable: ra.Runnable): Promise<void> {\n     const scope = ctx.activeRustEditor?.document.uri;\n@@ -20,9 +25,13 @@ export async function makeDebugConfig(ctx: Ctx, runnable: ra.Runnable): Promise<\n     const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\", scope);\n     const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n \n-    const index = configurations.findIndex(c => c.name === debugConfig.name);\n+    const index = configurations.findIndex((c) => c.name === debugConfig.name);\n     if (index !== -1) {\n-        const answer = await vscode.window.showErrorMessage(`Launch configuration '${debugConfig.name}' already exists!`, 'Cancel', 'Update');\n+        const answer = await vscode.window.showErrorMessage(\n+            `Launch configuration '${debugConfig.name}' already exists!`,\n+            \"Cancel\",\n+            \"Update\"\n+        );\n         if (answer === \"Cancel\") return;\n \n         configurations[index] = debugConfig;\n@@ -40,7 +49,7 @@ export async function startDebugSession(ctx: Ctx, runnable: ra.Runnable): Promis\n     const wsLaunchSection = vscode.workspace.getConfiguration(\"launch\");\n     const configurations = wsLaunchSection.get<any[]>(\"configurations\") || [];\n \n-    const index = configurations.findIndex(c => c.name === runnable.label);\n+    const index = configurations.findIndex((c) => c.name === runnable.label);\n     if (-1 !== index) {\n         debugConfig = configurations[index];\n         message = \" (from launch.json)\";\n@@ -56,13 +65,16 @@ export async function startDebugSession(ctx: Ctx, runnable: ra.Runnable): Promis\n     return vscode.debug.startDebugging(undefined, debugConfig);\n }\n \n-async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<vscode.DebugConfiguration | undefined> {\n+async function getDebugConfiguration(\n+    ctx: Ctx,\n+    runnable: ra.Runnable\n+): Promise<vscode.DebugConfiguration | undefined> {\n     const editor = ctx.activeRustEditor;\n     if (!editor) return;\n \n     const knownEngines: Record<string, DebugConfigProvider> = {\n         \"vadimcn.vscode-lldb\": getLldbDebugConfig,\n-        \"ms-vscode.cpptools\": getCppvsDebugConfig\n+        \"ms-vscode.cpptools\": getCppvsDebugConfig,\n     };\n     const debugOptions = ctx.config.debug;\n \n@@ -77,8 +89,10 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     }\n \n     if (!debugEngine) {\n-        await vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n-            + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n+        await vscode.window.showErrorMessage(\n+            `Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)` +\n+                ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`\n+        );\n         return;\n     }\n \n@@ -91,15 +105,17 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     const workspaceFolders = vscode.workspace.workspaceFolders!;\n     const isMultiFolderWorkspace = workspaceFolders.length > 1;\n     const firstWorkspace = workspaceFolders[0];\n-    const workspace = !isMultiFolderWorkspace || !runnable.args.workspaceRoot ?\n-        firstWorkspace :\n-        workspaceFolders.find(w => runnable.args.workspaceRoot?.includes(w.uri.fsPath)) || firstWorkspace;\n+    const workspace =\n+        !isMultiFolderWorkspace || !runnable.args.workspaceRoot\n+            ? firstWorkspace\n+            : workspaceFolders.find((w) => runnable.args.workspaceRoot?.includes(w.uri.fsPath)) ||\n+              firstWorkspace;\n \n     const wsFolder = path.normalize(workspace.uri.fsPath);\n-    const workspaceQualifier = isMultiFolderWorkspace ? `:${workspace.name}` : '';\n+    const workspaceQualifier = isMultiFolderWorkspace ? `:${workspace.name}` : \"\";\n     function simplifyPath(p: string): string {\n         // see https://github.com/rust-analyzer/rust-analyzer/pull/5513#issuecomment-663458818 for why this is needed\n-        return path.normalize(p).replace(wsFolder, '${workspaceFolder' + workspaceQualifier + '}');\n+        return path.normalize(p).replace(wsFolder, \"${workspaceFolder\" + workspaceQualifier + \"}\");\n     }\n \n     const executable = await getDebugExecutable(runnable);\n@@ -114,7 +130,12 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n         sourceFileMap[`/rustc/${commitHash}/`] = rustlib;\n     }\n \n-    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, sourceFileMap);\n+    const debugConfig = knownEngines[debugEngine.id](\n+        runnable,\n+        simplifyPath(executable),\n+        env,\n+        sourceFileMap\n+    );\n     if (debugConfig.type in debugOptions.engineSettings) {\n         const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n         for (var key in settingsMap) {\n@@ -136,14 +157,19 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n }\n \n async function getDebugExecutable(runnable: ra.Runnable): Promise<string> {\n-    const cargo = new Cargo(runnable.args.workspaceRoot || '.', debugOutput);\n+    const cargo = new Cargo(runnable.args.workspaceRoot || \".\", debugOutput);\n     const executable = await cargo.executableFromArgs(runnable.args.cargoArgs);\n \n     // if we are here, there were no compilation errors.\n     return executable;\n }\n \n-function getLldbDebugConfig(runnable: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+function getLldbDebugConfig(\n+    runnable: ra.Runnable,\n+    executable: string,\n+    env: Record<string, string>,\n+    sourceFileMap?: Record<string, string>\n+): vscode.DebugConfiguration {\n     return {\n         type: \"lldb\",\n         request: \"launch\",\n@@ -153,13 +179,18 @@ function getLldbDebugConfig(runnable: ra.Runnable, executable: string, env: Reco\n         cwd: runnable.args.workspaceRoot,\n         sourceMap: sourceFileMap,\n         sourceLanguages: [\"rust\"],\n-        env\n+        env,\n     };\n }\n \n-function getCppvsDebugConfig(runnable: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+function getCppvsDebugConfig(\n+    runnable: ra.Runnable,\n+    executable: string,\n+    env: Record<string, string>,\n+    sourceFileMap?: Record<string, string>\n+): vscode.DebugConfiguration {\n     return {\n-        type: (os.platform() === \"win32\") ? \"cppvsdbg\" : \"cppdbg\",\n+        type: os.platform() === \"win32\" ? \"cppvsdbg\" : \"cppdbg\",\n         request: \"launch\",\n         name: runnable.label,\n         program: executable,"}, {"sha": "f80af78a74a15016cec2572ab392ec9748876752", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 55, "deletions": 19, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -7,7 +7,9 @@ import * as lc from \"vscode-languageclient\";\n export interface AnalyzerStatusParams {\n     textDocument?: lc.TextDocumentIdentifier;\n }\n-export const analyzerStatus = new lc.RequestType<AnalyzerStatusParams, string, void>(\"rust-analyzer/analyzerStatus\");\n+export const analyzerStatus = new lc.RequestType<AnalyzerStatusParams, string, void>(\n+    \"rust-analyzer/analyzerStatus\"\n+);\n export const memoryUsage = new lc.RequestType0<string, void>(\"rust-analyzer/memoryUsage\");\n export const shuffleCrateGraph = new lc.RequestType0<null, void>(\"rust-analyzer/shuffleCrateGraph\");\n \n@@ -16,7 +18,9 @@ export interface ServerStatusParams {\n     quiescent: boolean;\n     message?: string;\n }\n-export const serverStatus = new lc.NotificationType<ServerStatusParams>(\"experimental/serverStatus\");\n+export const serverStatus = new lc.NotificationType<ServerStatusParams>(\n+    \"experimental/serverStatus\"\n+);\n \n export const reloadWorkspace = new lc.RequestType0<null, void>(\"rust-analyzer/reloadWorkspace\");\n \n@@ -31,23 +35,33 @@ export interface SyntaxTreeParams {\n     textDocument: lc.TextDocumentIdentifier;\n     range: lc.Range | null;\n }\n-export const syntaxTree = new lc.RequestType<SyntaxTreeParams, string, void>(\"rust-analyzer/syntaxTree\");\n+export const syntaxTree = new lc.RequestType<SyntaxTreeParams, string, void>(\n+    \"rust-analyzer/syntaxTree\"\n+);\n \n-export const viewHir = new lc.RequestType<lc.TextDocumentPositionParams, string, void>(\"rust-analyzer/viewHir\");\n+export const viewHir = new lc.RequestType<lc.TextDocumentPositionParams, string, void>(\n+    \"rust-analyzer/viewHir\"\n+);\n \n-export const viewFileText = new lc.RequestType<lc.TextDocumentIdentifier, string, void>(\"rust-analyzer/viewFileText\");\n+export const viewFileText = new lc.RequestType<lc.TextDocumentIdentifier, string, void>(\n+    \"rust-analyzer/viewFileText\"\n+);\n \n export interface ViewItemTreeParams {\n     textDocument: lc.TextDocumentIdentifier;\n }\n \n-export const viewItemTree = new lc.RequestType<ViewItemTreeParams, string, void>(\"rust-analyzer/viewItemTree\");\n+export const viewItemTree = new lc.RequestType<ViewItemTreeParams, string, void>(\n+    \"rust-analyzer/viewItemTree\"\n+);\n \n export interface ViewCrateGraphParams {\n     full: boolean;\n }\n \n-export const viewCrateGraph = new lc.RequestType<ViewCrateGraphParams, string, void>(\"rust-analyzer/viewCrateGraph\");\n+export const viewCrateGraph = new lc.RequestType<ViewCrateGraphParams, string, void>(\n+    \"rust-analyzer/viewCrateGraph\"\n+);\n \n export interface ExpandMacroParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -57,23 +71,35 @@ export interface ExpandedMacro {\n     name: string;\n     expansion: string;\n }\n-export const expandMacro = new lc.RequestType<ExpandMacroParams, ExpandedMacro | null, void>(\"rust-analyzer/expandMacro\");\n+export const expandMacro = new lc.RequestType<ExpandMacroParams, ExpandedMacro | null, void>(\n+    \"rust-analyzer/expandMacro\"\n+);\n \n export interface MatchingBraceParams {\n     textDocument: lc.TextDocumentIdentifier;\n     positions: lc.Position[];\n }\n-export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], void>(\"experimental/matchingBrace\");\n+export const matchingBrace = new lc.RequestType<MatchingBraceParams, lc.Position[], void>(\n+    \"experimental/matchingBrace\"\n+);\n \n-export const parentModule = new lc.RequestType<lc.TextDocumentPositionParams, lc.LocationLink[] | null, void>(\"experimental/parentModule\");\n+export const parentModule = new lc.RequestType<\n+    lc.TextDocumentPositionParams,\n+    lc.LocationLink[] | null,\n+    void\n+>(\"experimental/parentModule\");\n \n export interface JoinLinesParams {\n     textDocument: lc.TextDocumentIdentifier;\n     ranges: lc.Range[];\n }\n-export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], void>(\"experimental/joinLines\");\n+export const joinLines = new lc.RequestType<JoinLinesParams, lc.TextEdit[], void>(\n+    \"experimental/joinLines\"\n+);\n \n-export const onEnter = new lc.RequestType<lc.TextDocumentPositionParams, lc.TextEdit[], void>(\"experimental/onEnter\");\n+export const onEnter = new lc.RequestType<lc.TextDocumentPositionParams, lc.TextEdit[], void>(\n+    \"experimental/onEnter\"\n+);\n \n export interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -93,13 +119,17 @@ export interface Runnable {\n         overrideCargo?: string;\n     };\n }\n-export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\"experimental/runnables\");\n+export const runnables = new lc.RequestType<RunnablesParams, Runnable[], void>(\n+    \"experimental/runnables\"\n+);\n \n export interface TestInfo {\n     runnable: Runnable;\n }\n \n-export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\"rust-analyzer/relatedTests\");\n+export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, TestInfo[], void>(\n+    \"rust-analyzer/relatedTests\"\n+);\n \n export interface SsrParams {\n     query: string;\n@@ -108,7 +138,7 @@ export interface SsrParams {\n     position: lc.Position;\n     selections: readonly lc.Range[];\n }\n-export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>('experimental/ssr');\n+export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, void>(\"experimental/ssr\");\n \n export interface CommandLink extends lc.Command {\n     /**\n@@ -122,15 +152,21 @@ export interface CommandLinkGroup {\n     commands: CommandLink[];\n }\n \n-export const openDocs = new lc.RequestType<lc.TextDocumentPositionParams, string | void, void>('experimental/externalDocs');\n+export const openDocs = new lc.RequestType<lc.TextDocumentPositionParams, string | void, void>(\n+    \"experimental/externalDocs\"\n+);\n \n-export const openCargoToml = new lc.RequestType<OpenCargoTomlParams, lc.Location, void>(\"experimental/openCargoToml\");\n+export const openCargoToml = new lc.RequestType<OpenCargoTomlParams, lc.Location, void>(\n+    \"experimental/openCargoToml\"\n+);\n \n export interface OpenCargoTomlParams {\n     textDocument: lc.TextDocumentIdentifier;\n }\n \n-export const moveItem = new lc.RequestType<MoveItemParams, lc.TextEdit[], void>(\"experimental/moveItem\");\n+export const moveItem = new lc.RequestType<MoveItemParams, lc.TextEdit[], void>(\n+    \"experimental/moveItem\"\n+);\n \n export interface MoveItemParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -140,5 +176,5 @@ export interface MoveItemParams {\n \n export const enum Direction {\n     Up = \"Up\",\n-    Down = \"Down\"\n+    Down = \"Down\",\n }"}, {"sha": "61824fae21fb151c0b1c7983973e4b2a7dc2b7bf", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 114, "deletions": 84, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,15 +1,15 @@\n-import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient/node';\n+import * as vscode from \"vscode\";\n+import * as lc from \"vscode-languageclient/node\";\n import * as os from \"os\";\n \n-import * as commands from './commands';\n-import { Ctx } from './ctx';\n-import { Config } from './config';\n-import { log, isValidExecutable, isRustDocument } from './util';\n-import { PersistentState } from './persistent_state';\n-import { activateTaskProvider } from './tasks';\n-import { setContextValue } from './util';\n-import { exec } from 'child_process';\n+import * as commands from \"./commands\";\n+import { Ctx } from \"./ctx\";\n+import { Config } from \"./config\";\n+import { log, isValidExecutable, isRustDocument } from \"./util\";\n+import { PersistentState } from \"./persistent_state\";\n+import { activateTaskProvider } from \"./tasks\";\n+import { setContextValue } from \"./util\";\n+import { exec } from \"child_process\";\n \n let ctx: Ctx | undefined;\n \n@@ -19,10 +19,12 @@ export interface RustAnalyzerExtensionApi {\n     client: lc.LanguageClient;\n }\n \n-export async function activate(context: vscode.ExtensionContext): Promise<RustAnalyzerExtensionApi> {\n+export async function activate(\n+    context: vscode.ExtensionContext\n+): Promise<RustAnalyzerExtensionApi> {\n     // VS Code doesn't show a notification when an extension fails to activate\n     // so we do it ourselves.\n-    return await tryActivate(context).catch(err => {\n+    return await tryActivate(context).catch((err) => {\n         void vscode.window.showErrorMessage(`Cannot activate rust-analyzer: ${err.message}`);\n         throw err;\n     });\n@@ -31,7 +33,7 @@ export async function activate(context: vscode.ExtensionContext): Promise<RustAn\n async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyzerExtensionApi> {\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n-    const serverPath = await bootstrap(context, config, state).catch(err => {\n+    const serverPath = await bootstrap(context, config, state).catch((err) => {\n         let message = \"bootstrap error. \";\n \n         message += 'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n@@ -42,9 +44,14 @@ async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyz\n     });\n \n     if ((vscode.workspace.workspaceFolders || []).length === 0) {\n-        const rustDocuments = vscode.workspace.textDocuments.filter(document => isRustDocument(document));\n+        const rustDocuments = vscode.workspace.textDocuments.filter((document) =>\n+            isRustDocument(document)\n+        );\n         if (rustDocuments.length > 0) {\n-            ctx = await Ctx.create(config, context, serverPath, { kind: 'Detached Files', files: rustDocuments });\n+            ctx = await Ctx.create(config, context, serverPath, {\n+                kind: \"Detached Files\",\n+                files: rustDocuments,\n+            });\n         } else {\n             throw new Error(\"no rust files are opened\");\n         }\n@@ -63,13 +70,16 @@ async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyz\n     ctx.pushCleanup(configureLanguage());\n \n     vscode.workspace.onDidChangeConfiguration(\n-        _ => ctx?.client?.sendNotification('workspace/didChangeConfiguration', { settings: \"\" }).catch(log.error),\n+        (_) =>\n+            ctx?.client\n+                ?.sendNotification(\"workspace/didChangeConfiguration\", { settings: \"\" })\n+                .catch(log.error),\n         null,\n-        ctx.subscriptions,\n+        ctx.subscriptions\n     );\n \n     return {\n-        client: ctx.client\n+        client: ctx.client,\n     };\n }\n \n@@ -88,9 +98,8 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     //        \"rust-analyzer is not available\"\n     //    ),\n     // )\n-    const defaultOnEnter = vscode.commands.registerCommand(\n-        'rust-analyzer.onEnter',\n-        () => vscode.commands.executeCommand('default:type', { text: '\\n' }),\n+    const defaultOnEnter = vscode.commands.registerCommand(\"rust-analyzer.onEnter\", () =>\n+        vscode.commands.executeCommand(\"default:type\", { text: \"\\n\" })\n     );\n     context.subscriptions.push(defaultOnEnter);\n \n@@ -99,8 +108,8 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     // Commands which invokes manually via command palette, shortcut, etc.\n \n     // Reloading is inspired by @DanTup maneuver: https://github.com/microsoft/vscode/issues/45774#issuecomment-373423895\n-    ctx.registerCommand('reload', _ => async () => {\n-        void vscode.window.showInformationMessage('Reloading rust-analyzer...');\n+    ctx.registerCommand(\"reload\", (_) => async () => {\n+        void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n         await deactivate();\n         while (context.subscriptions.length > 0) {\n             try {\n@@ -112,45 +121,45 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n         await activate(context).catch(log.error);\n     });\n \n-    ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n-    ctx.registerCommand('memoryUsage', commands.memoryUsage);\n-    ctx.registerCommand('shuffleCrateGraph', commands.shuffleCrateGraph);\n-    ctx.registerCommand('reloadWorkspace', commands.reloadWorkspace);\n-    ctx.registerCommand('matchingBrace', commands.matchingBrace);\n-    ctx.registerCommand('joinLines', commands.joinLines);\n-    ctx.registerCommand('parentModule', commands.parentModule);\n-    ctx.registerCommand('syntaxTree', commands.syntaxTree);\n-    ctx.registerCommand('viewHir', commands.viewHir);\n-    ctx.registerCommand('viewFileText', commands.viewFileText);\n-    ctx.registerCommand('viewItemTree', commands.viewItemTree);\n-    ctx.registerCommand('viewCrateGraph', commands.viewCrateGraph);\n-    ctx.registerCommand('viewFullCrateGraph', commands.viewFullCrateGraph);\n-    ctx.registerCommand('expandMacro', commands.expandMacro);\n-    ctx.registerCommand('run', commands.run);\n-    ctx.registerCommand('copyRunCommandLine', commands.copyRunCommandLine);\n-    ctx.registerCommand('debug', commands.debug);\n-    ctx.registerCommand('newDebugConfig', commands.newDebugConfig);\n-    ctx.registerCommand('openDocs', commands.openDocs);\n-    ctx.registerCommand('openCargoToml', commands.openCargoToml);\n-    ctx.registerCommand('peekTests', commands.peekTests);\n-    ctx.registerCommand('moveItemUp', commands.moveItemUp);\n-    ctx.registerCommand('moveItemDown', commands.moveItemDown);\n+    ctx.registerCommand(\"analyzerStatus\", commands.analyzerStatus);\n+    ctx.registerCommand(\"memoryUsage\", commands.memoryUsage);\n+    ctx.registerCommand(\"shuffleCrateGraph\", commands.shuffleCrateGraph);\n+    ctx.registerCommand(\"reloadWorkspace\", commands.reloadWorkspace);\n+    ctx.registerCommand(\"matchingBrace\", commands.matchingBrace);\n+    ctx.registerCommand(\"joinLines\", commands.joinLines);\n+    ctx.registerCommand(\"parentModule\", commands.parentModule);\n+    ctx.registerCommand(\"syntaxTree\", commands.syntaxTree);\n+    ctx.registerCommand(\"viewHir\", commands.viewHir);\n+    ctx.registerCommand(\"viewFileText\", commands.viewFileText);\n+    ctx.registerCommand(\"viewItemTree\", commands.viewItemTree);\n+    ctx.registerCommand(\"viewCrateGraph\", commands.viewCrateGraph);\n+    ctx.registerCommand(\"viewFullCrateGraph\", commands.viewFullCrateGraph);\n+    ctx.registerCommand(\"expandMacro\", commands.expandMacro);\n+    ctx.registerCommand(\"run\", commands.run);\n+    ctx.registerCommand(\"copyRunCommandLine\", commands.copyRunCommandLine);\n+    ctx.registerCommand(\"debug\", commands.debug);\n+    ctx.registerCommand(\"newDebugConfig\", commands.newDebugConfig);\n+    ctx.registerCommand(\"openDocs\", commands.openDocs);\n+    ctx.registerCommand(\"openCargoToml\", commands.openCargoToml);\n+    ctx.registerCommand(\"peekTests\", commands.peekTests);\n+    ctx.registerCommand(\"moveItemUp\", commands.moveItemUp);\n+    ctx.registerCommand(\"moveItemDown\", commands.moveItemDown);\n \n     defaultOnEnter.dispose();\n-    ctx.registerCommand('onEnter', commands.onEnter);\n+    ctx.registerCommand(\"onEnter\", commands.onEnter);\n \n-    ctx.registerCommand('ssr', commands.ssr);\n-    ctx.registerCommand('serverVersion', commands.serverVersion);\n-    ctx.registerCommand('toggleInlayHints', commands.toggleInlayHints);\n+    ctx.registerCommand(\"ssr\", commands.ssr);\n+    ctx.registerCommand(\"serverVersion\", commands.serverVersion);\n+    ctx.registerCommand(\"toggleInlayHints\", commands.toggleInlayHints);\n \n     // Internal commands which are invoked by the server.\n-    ctx.registerCommand('runSingle', commands.runSingle);\n-    ctx.registerCommand('debugSingle', commands.debugSingle);\n-    ctx.registerCommand('showReferences', commands.showReferences);\n-    ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n-    ctx.registerCommand('resolveCodeAction', commands.resolveCodeAction);\n-    ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n-    ctx.registerCommand('gotoLocation', commands.gotoLocation);\n+    ctx.registerCommand(\"runSingle\", commands.runSingle);\n+    ctx.registerCommand(\"debugSingle\", commands.debugSingle);\n+    ctx.registerCommand(\"showReferences\", commands.showReferences);\n+    ctx.registerCommand(\"applySnippetWorkspaceEdit\", commands.applySnippetWorkspaceEditCommand);\n+    ctx.registerCommand(\"resolveCodeAction\", commands.resolveCodeAction);\n+    ctx.registerCommand(\"applyActionGroup\", commands.applyActionGroup);\n+    ctx.registerCommand(\"gotoLocation\", commands.gotoLocation);\n }\n \n export async function deactivate() {\n@@ -159,12 +168,16 @@ export async function deactivate() {\n     ctx = undefined;\n }\n \n-async function bootstrap(context: vscode.ExtensionContext, config: Config, state: PersistentState): Promise<string> {\n+async function bootstrap(\n+    context: vscode.ExtensionContext,\n+    config: Config,\n+    state: PersistentState\n+): Promise<string> {\n     const path = await getServer(context, config, state);\n     if (!path) {\n         throw new Error(\n             \"Rust Analyzer Language Server is not available. \" +\n-            \"Please, ensure its [proper installation](https://rust-analyzer.github.io/manual.html#installation).\"\n+                \"Please, ensure its [proper installation](https://rust-analyzer.github.io/manual.html#installation).\"\n         );\n     }\n \n@@ -186,7 +199,7 @@ async function patchelf(dest: vscode.Uri): Promise<void> {\n     await vscode.window.withProgress(\n         {\n             location: vscode.ProgressLocation.Notification,\n-            title: \"Patching rust-analyzer for NixOS\"\n+            title: \"Patching rust-analyzer for NixOS\",\n         },\n         async (progress, _) => {\n             const expression = `\n@@ -207,14 +220,16 @@ async function patchelf(dest: vscode.Uri): Promise<void> {\n             try {\n                 progress.report({ message: \"Patching executable\", increment: 20 });\n                 await new Promise((resolve, reject) => {\n-                    const handle = exec(`nix-build -E - --argstr srcStr '${origFile.fsPath}' -o '${dest.fsPath}'`,\n+                    const handle = exec(\n+                        `nix-build -E - --argstr srcStr '${origFile.fsPath}' -o '${dest.fsPath}'`,\n                         (err, stdout, stderr) => {\n                             if (err != null) {\n                                 reject(Error(stderr));\n                             } else {\n                                 resolve(stdout);\n                             }\n-                        });\n+                        }\n+                    );\n                     handle.stdin?.write(expression);\n                     handle.stdin?.end();\n                 });\n@@ -225,25 +240,35 @@ async function patchelf(dest: vscode.Uri): Promise<void> {\n     );\n }\n \n-async function getServer(context: vscode.ExtensionContext, config: Config, state: PersistentState): Promise<string | undefined> {\n+async function getServer(\n+    context: vscode.ExtensionContext,\n+    config: Config,\n+    state: PersistentState\n+): Promise<string | undefined> {\n     const explicitPath = serverPath(config);\n     if (explicitPath) {\n         if (explicitPath.startsWith(\"~/\")) {\n             return os.homedir() + explicitPath.slice(\"~\".length);\n         }\n         return explicitPath;\n-    };\n+    }\n     if (config.package.releaseTag === null) return \"rust-analyzer\";\n \n     const ext = process.platform === \"win32\" ? \".exe\" : \"\";\n     const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n-    const bundledExists = await vscode.workspace.fs.stat(bundled).then(() => true, () => false);\n+    const bundledExists = await vscode.workspace.fs.stat(bundled).then(\n+        () => true,\n+        () => false\n+    );\n     if (bundledExists) {\n         let server = bundled;\n         if (await isNixOs()) {\n             await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n             const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer${ext}`);\n-            let exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n+            let exists = await vscode.workspace.fs.stat(dest).then(\n+                () => true,\n+                () => false\n+            );\n             if (exists && config.package.version !== state.serverVersion) {\n                 await vscode.workspace.fs.delete(dest);\n                 exists = false;\n@@ -261,11 +286,11 @@ async function getServer(context: vscode.ExtensionContext, config: Config, state\n     await state.updateServerVersion(undefined);\n     await vscode.window.showErrorMessage(\n         \"Unfortunately we don't ship binaries for your platform yet. \" +\n-        \"You need to manually clone the rust-analyzer repository and \" +\n-        \"run `cargo xtask install --server` to build the language server from sources. \" +\n-        \"If you feel that your platform should be supported, please create an issue \" +\n-        \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n-        \"will consider it.\"\n+            \"You need to manually clone the rust-analyzer repository and \" +\n+            \"run `cargo xtask install --server` to build the language server from sources. \" +\n+            \"If you feel that your platform should be supported, please create an issue \" +\n+            \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n+            \"will consider it.\"\n     );\n     return undefined;\n }\n@@ -276,8 +301,10 @@ function serverPath(config: Config): string | null {\n \n async function isNixOs(): Promise<boolean> {\n     try {\n-        const contents = (await vscode.workspace.fs.readFile(vscode.Uri.file(\"/etc/os-release\"))).toString();\n-        const idString = contents.split('\\n').find((a) => a.startsWith(\"ID=\")) || \"ID=linux\";\n+        const contents = (\n+            await vscode.workspace.fs.readFile(vscode.Uri.file(\"/etc/os-release\"))\n+        ).toString();\n+        const idString = contents.split(\"\\n\").find((a) => a.startsWith(\"ID=\")) || \"ID=linux\";\n         return idString.indexOf(\"nixos\") !== -1;\n     } catch {\n         return false;\n@@ -286,11 +313,14 @@ async function isNixOs(): Promise<boolean> {\n \n function warnAboutExtensionConflicts() {\n     if (vscode.extensions.getExtension(\"rust-lang.rust\")) {\n-        vscode.window.showWarningMessage(\n-            `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n-            \"plugins enabled. These are known to conflict and cause various functions of \" +\n-            \"both plugins to not work correctly. You should disable one of them.\", \"Got it\")\n-            .then(() => { }, console.error);\n+        vscode.window\n+            .showWarningMessage(\n+                `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n+                    \"plugins enabled. These are known to conflict and cause various functions of \" +\n+                    \"both plugins to not work correctly. You should disable one of them.\",\n+                \"Got it\"\n+            )\n+            .then(() => {}, console.error);\n     }\n }\n \n@@ -302,38 +332,38 @@ function warnAboutExtensionConflicts() {\n  */\n function configureLanguage(): vscode.Disposable {\n     const indentAction = vscode.IndentAction.None;\n-    return vscode.languages.setLanguageConfiguration('rust', {\n+    return vscode.languages.setLanguageConfiguration(\"rust\", {\n         onEnterRules: [\n             {\n                 // Doc single-line comment\n                 // e.g. ///|\n                 beforeText: /^\\s*\\/{3}.*$/,\n-                action: { indentAction, appendText: '/// ' },\n+                action: { indentAction, appendText: \"/// \" },\n             },\n             {\n                 // Parent doc single-line comment\n                 // e.g. //!|\n                 beforeText: /^\\s*\\/{2}\\!.*$/,\n-                action: { indentAction, appendText: '//! ' },\n+                action: { indentAction, appendText: \"//! \" },\n             },\n             {\n                 // Begins an auto-closed multi-line comment (standard or parent doc)\n                 // e.g. /** | */ or /*! | */\n                 beforeText: /^\\s*\\/\\*(\\*|\\!)(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n                 afterText: /^\\s*\\*\\/$/,\n-                action: { indentAction: vscode.IndentAction.IndentOutdent, appendText: ' * ' },\n+                action: { indentAction: vscode.IndentAction.IndentOutdent, appendText: \" * \" },\n             },\n             {\n                 // Begins a multi-line comment (standard or parent doc)\n                 // e.g. /** ...| or /*! ...|\n                 beforeText: /^\\s*\\/\\*(\\*|\\!)(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n-                action: { indentAction, appendText: ' * ' },\n+                action: { indentAction, appendText: \" * \" },\n             },\n             {\n                 // Continues a multi-line comment\n                 // e.g.  * ...|\n                 beforeText: /^(\\ \\ )*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n-                action: { indentAction, appendText: '* ' },\n+                action: { indentAction, appendText: \"* \" },\n             },\n             {\n                 // Dedents after closing a multi-line comment"}, {"sha": "8964a78dc321e131ee52051ac04c6a4d2c68fa83", "filename": "editors/code/src/persistent_state.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fpersistent_state.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fpersistent_state.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,5 +1,5 @@\n-import * as vscode from 'vscode';\n-import { log } from './util';\n+import * as vscode from \"vscode\";\n+import { log } from \"./util\";\n \n export class PersistentState {\n     constructor(private readonly globalState: vscode.Memento) {"}, {"sha": "b3dff3db5d3c38e7d6dcd82bb3ce5b48f96f1c8d", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,15 +1,22 @@\n-import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n-import * as ra from './lsp_ext';\n-import * as tasks from './tasks';\n-\n-import { Ctx } from './ctx';\n-import { makeDebugConfig } from './debug';\n-import { Config, RunnableEnvCfg } from './config';\n-\n-const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n-\n-export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick, debuggeeOnly = false, showButtons: boolean = true): Promise<RunnableQuickPick | undefined> {\n+import * as vscode from \"vscode\";\n+import * as lc from \"vscode-languageclient\";\n+import * as ra from \"./lsp_ext\";\n+import * as tasks from \"./tasks\";\n+\n+import { Ctx } from \"./ctx\";\n+import { makeDebugConfig } from \"./debug\";\n+import { Config, RunnableEnvCfg } from \"./config\";\n+\n+const quickPickButtons = [\n+    { iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" },\n+];\n+\n+export async function selectRunnable(\n+    ctx: Ctx,\n+    prevRunnable?: RunnableQuickPick,\n+    debuggeeOnly = false,\n+    showButtons: boolean = true\n+): Promise<RunnableQuickPick | undefined> {\n     const editor = ctx.activeRustEditor;\n     const client = ctx.client;\n     if (!editor || !client) return;\n@@ -20,23 +27,18 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n \n     const runnables = await client.sendRequest(ra.runnables, {\n         textDocument,\n-        position: client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n+        position: client.code2ProtocolConverter.asPosition(editor.selection.active),\n     });\n     const items: RunnableQuickPick[] = [];\n     if (prevRunnable) {\n         items.push(prevRunnable);\n     }\n     for (const r of runnables) {\n-        if (\n-            prevRunnable &&\n-            JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n-        ) {\n+        if (prevRunnable && JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)) {\n             continue;\n         }\n \n-        if (debuggeeOnly && (r.label.startsWith('doctest') || r.label.startsWith('cargo'))) {\n+        if (debuggeeOnly && (r.label.startsWith(\"doctest\") || r.label.startsWith(\"cargo\"))) {\n             continue;\n         }\n         items.push(new RunnableQuickPick(r));\n@@ -53,7 +55,7 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n         const disposables: vscode.Disposable[] = [];\n         const close = (result?: RunnableQuickPick) => {\n             resolve(result);\n-            disposables.forEach(d => d.dispose());\n+            disposables.forEach((d) => d.dispose());\n         };\n \n         const quickPick = vscode.window.createQuickPick<RunnableQuickPick>();\n@@ -71,7 +73,7 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n             }),\n             quickPick.onDidChangeActive((active) => {\n                 if (showButtons && active.length > 0) {\n-                    if (active[0].label.startsWith('cargo')) {\n+                    if (active[0].label.startsWith(\"cargo\")) {\n                         // save button makes no sense for `cargo test` or `cargo check`\n                         quickPick.buttons = [];\n                     } else if (quickPick.buttons.length === 0) {\n@@ -96,8 +98,11 @@ export class RunnableQuickPick implements vscode.QuickPickItem {\n     }\n }\n \n-export function prepareEnv(runnable: ra.Runnable, runnableEnvCfg: RunnableEnvCfg): Record<string, string> {\n-    const env: Record<string, string> = { \"RUST_BACKTRACE\": \"short\" };\n+export function prepareEnv(\n+    runnable: ra.Runnable,\n+    runnableEnvCfg: RunnableEnvCfg\n+): Record<string, string> {\n+    const env: Record<string, string> = { RUST_BACKTRACE: \"short\" };\n \n     if (runnable.args.expectTest) {\n         env[\"UPDATE_EXPECT\"] = \"1\";\n@@ -141,7 +146,14 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n \n     // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n     const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()\n-    const cargoTask = await tasks.buildCargoTask(target, definition, runnable.label, args, config.cargoRunner, true);\n+    const cargoTask = await tasks.buildCargoTask(\n+        target,\n+        definition,\n+        runnable.label,\n+        args,\n+        config.cargoRunner,\n+        true\n+    );\n \n     cargoTask.presentationOptions.clear = true;\n     // Sadly, this doesn't prevent focus stealing if the terminal is currently\n@@ -157,7 +169,7 @@ export function createArgs(runnable: ra.Runnable): string[] {\n         args.push(...runnable.args.cargoExtraArgs); // Append user-specified cargo options.\n     }\n     if (runnable.args.executableArgs.length > 0) {\n-        args.push('--', ...runnable.args.executableArgs);\n+        args.push(\"--\", ...runnable.args.executableArgs);\n     }\n     return args;\n }"}, {"sha": "14c2121d08a1704f86073d992aa7ba8fdc0f97b2", "filename": "editors/code/src/snippets.ts", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fsnippets.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Fsnippets.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fsnippets.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,6 +1,6 @@\n-import * as vscode from 'vscode';\n+import * as vscode from \"vscode\";\n \n-import { assert } from './util';\n+import { assert } from \"./util\";\n \n export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n     if (edit.entries().length === 1) {\n@@ -11,12 +11,16 @@ export async function applySnippetWorkspaceEdit(edit: vscode.WorkspaceEdit) {\n     }\n     for (const [uri, edits] of edit.entries()) {\n         const editor = await editorFromUri(uri);\n-        if (editor) await editor.edit((builder) => {\n-            for (const indel of edits) {\n-                assert(!parseSnippet(indel.newText), `bad ws edit: snippet received with multiple edits: ${JSON.stringify(edit)}`);\n-                builder.replace(indel.range, indel.newText);\n-            }\n-        });\n+        if (editor)\n+            await editor.edit((builder) => {\n+                for (const indel of edits) {\n+                    assert(\n+                        !parseSnippet(indel.newText),\n+                        `bad ws edit: snippet received with multiple edits: ${JSON.stringify(edit)}`\n+                    );\n+                    builder.replace(indel.range, indel.newText);\n+                }\n+            });\n     }\n }\n \n@@ -25,7 +29,9 @@ async function editorFromUri(uri: vscode.Uri): Promise<vscode.TextEditor | undef\n         // `vscode.window.visibleTextEditors` only contains editors whose contents are being displayed\n         await vscode.window.showTextDocument(uri, {});\n     }\n-    return vscode.window.visibleTextEditors.find((it) => it.document.uri.toString() === uri.toString());\n+    return vscode.window.visibleTextEditors.find(\n+        (it) => it.document.uri.toString() === uri.toString()\n+    );\n }\n \n export async function applySnippetTextEdits(editor: vscode.TextEditor, edits: vscode.TextEdit[]) {\n@@ -37,22 +43,26 @@ export async function applySnippetTextEdits(editor: vscode.TextEditor, edits: vs\n             if (parsed) {\n                 const [newText, [placeholderStart, placeholderLength]] = parsed;\n                 const prefix = newText.substr(0, placeholderStart);\n-                const lastNewline = prefix.lastIndexOf('\\n');\n+                const lastNewline = prefix.lastIndexOf(\"\\n\");\n \n                 const startLine = indel.range.start.line + lineDelta + countLines(prefix);\n-                const startColumn = lastNewline === -1 ?\n-                    indel.range.start.character + placeholderStart\n-                    : prefix.length - lastNewline - 1;\n+                const startColumn =\n+                    lastNewline === -1\n+                        ? indel.range.start.character + placeholderStart\n+                        : prefix.length - lastNewline - 1;\n                 const endColumn = startColumn + placeholderLength;\n-                selections.push(new vscode.Selection(\n-                    new vscode.Position(startLine, startColumn),\n-                    new vscode.Position(startLine, endColumn),\n-                ));\n+                selections.push(\n+                    new vscode.Selection(\n+                        new vscode.Position(startLine, startColumn),\n+                        new vscode.Position(startLine, endColumn)\n+                    )\n+                );\n                 builder.replace(indel.range, newText);\n             } else {\n                 builder.replace(indel.range, indel.newText);\n             }\n-            lineDelta += countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n+            lineDelta +=\n+                countLines(indel.newText) - (indel.range.end.line - indel.range.start.line);\n         }\n     });\n     if (selections.length > 0) editor.selections = selections;\n@@ -65,8 +75,7 @@ function parseSnippet(snip: string): [string, [number, number]] | undefined {\n     const m = snip.match(/\\$(0|\\{0:([^}]*)\\})/);\n     if (!m) return undefined;\n     const placeholder = m[2] ?? \"\";\n-    if (m.index == null)\n-        return undefined;\n+    if (m.index == null) return undefined;\n     const range: [number, number] = [m.index, placeholder.length];\n     const insert = snip.replace(m[0], placeholder);\n     return [insert, range];"}, {"sha": "8aa6bcee192018e081974c9a749b82897be5d838", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,12 +1,12 @@\n-import * as vscode from 'vscode';\n+import * as vscode from \"vscode\";\n import * as toolchain from \"./toolchain\";\n-import { Config } from './config';\n-import { log } from './util';\n+import { Config } from \"./config\";\n+import { log } from \"./util\";\n \n // This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n // our configuration should be compatible with it so use the same key.\n-export const TASK_TYPE = 'cargo';\n-export const TASK_SOURCE = 'rust';\n+export const TASK_TYPE = \"cargo\";\n+export const TASK_SOURCE = \"rust\";\n \n export interface CargoTaskDefinition extends vscode.TaskDefinition {\n     command?: string;\n@@ -30,17 +30,23 @@ class CargoTaskProvider implements vscode.TaskProvider {\n         // tasks.json - only tweaked.\n \n         const defs = [\n-            { command: 'build', group: vscode.TaskGroup.Build },\n-            { command: 'check', group: vscode.TaskGroup.Build },\n-            { command: 'test', group: vscode.TaskGroup.Test },\n-            { command: 'clean', group: vscode.TaskGroup.Clean },\n-            { command: 'run', group: undefined },\n+            { command: \"build\", group: vscode.TaskGroup.Build },\n+            { command: \"check\", group: vscode.TaskGroup.Build },\n+            { command: \"test\", group: vscode.TaskGroup.Test },\n+            { command: \"clean\", group: vscode.TaskGroup.Clean },\n+            { command: \"run\", group: undefined },\n         ];\n \n         const tasks: vscode.Task[] = [];\n         for (const workspaceTarget of vscode.workspace.workspaceFolders || []) {\n             for (const def of defs) {\n-                const vscodeTask = await buildCargoTask(workspaceTarget, { type: TASK_TYPE, command: def.command }, `cargo ${def.command}`, [def.command], this.config.cargoRunner);\n+                const vscodeTask = await buildCargoTask(\n+                    workspaceTarget,\n+                    { type: TASK_TYPE, command: def.command },\n+                    `cargo ${def.command}`,\n+                    [def.command],\n+                    this.config.cargoRunner\n+                );\n                 vscodeTask.group = def.group;\n                 tasks.push(vscodeTask);\n             }\n@@ -58,7 +64,13 @@ class CargoTaskProvider implements vscode.TaskProvider {\n \n         if (definition.type === TASK_TYPE && definition.command) {\n             const args = [definition.command].concat(definition.args ?? []);\n-            return await buildCargoTask(task.scope, definition, task.name, args, this.config.cargoRunner);\n+            return await buildCargoTask(\n+                task.scope,\n+                definition,\n+                task.name,\n+                args,\n+                this.config.cargoRunner\n+            );\n         }\n \n         return undefined;\n@@ -73,7 +85,6 @@ export async function buildCargoTask(\n     customRunner?: string,\n     throwOnError: boolean = false\n ): Promise<vscode.Task> {\n-\n     let exec: vscode.ProcessExecution | vscode.ShellExecution | undefined = undefined;\n \n     if (customRunner) {\n@@ -90,7 +101,6 @@ export async function buildCargoTask(\n                 }\n             }\n             // fallback to default processing\n-\n         } catch (e) {\n             if (throwOnError) throw `Cargo runner '${customRunner}' failed! ${e}`;\n             // fallback to default processing\n@@ -117,7 +127,7 @@ export async function buildCargoTask(\n         name,\n         TASK_SOURCE,\n         exec,\n-        ['$rustc']\n+        [\"$rustc\"]\n     );\n }\n "}, {"sha": "c23a9a8d9e3f87f2119bb5b78dbc2289a115f4a8", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,9 +1,9 @@\n-import * as cp from 'child_process';\n-import * as os from 'os';\n-import * as path from 'path';\n-import * as readline from 'readline';\n-import * as vscode from 'vscode';\n-import { execute, log, memoizeAsync } from './util';\n+import * as cp from \"child_process\";\n+import * as os from \"os\";\n+import * as path from \"path\";\n+import * as readline from \"readline\";\n+import * as vscode from \"vscode\";\n+import { execute, log, memoizeAsync } from \"./util\";\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -18,7 +18,7 @@ export interface ArtifactSpec {\n }\n \n export class Cargo {\n-    constructor(readonly rootFolder: string, readonly output: vscode.OutputChannel) { }\n+    constructor(readonly rootFolder: string, readonly output: vscode.OutputChannel) {}\n \n     // Made public for testing purposes\n     static artifactSpec(args: readonly string[]): ArtifactSpec {\n@@ -27,7 +27,9 @@ export class Cargo {\n         // arguments for a runnable from the quick pick should be updated.\n         // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_code_lens\n         switch (cargoArgs[0]) {\n-            case \"run\": cargoArgs[0] = \"build\"; break;\n+            case \"run\":\n+                cargoArgs[0] = \"build\";\n+                break;\n             case \"test\": {\n                 if (!cargoArgs.includes(\"--no-run\")) {\n                     cargoArgs.push(\"--no-run\");\n@@ -40,7 +42,7 @@ export class Cargo {\n         if (cargoArgs[0] === \"test\") {\n             // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n             // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n-            result.filter = (artifacts) => artifacts.filter(it => it.isTest);\n+            result.filter = (artifacts) => artifacts.filter((it) => it.isTest);\n         }\n \n         return result;\n@@ -50,24 +52,25 @@ export class Cargo {\n         const artifacts: CompilationArtifact[] = [];\n \n         try {\n-            await this.runCargo(spec.cargoArgs,\n-                message => {\n-                    if (message.reason === 'compiler-artifact' && message.executable) {\n-                        const isBinary = message.target.crate_types.includes('bin');\n-                        const isBuildScript = message.target.kind.includes('custom-build');\n+            await this.runCargo(\n+                spec.cargoArgs,\n+                (message) => {\n+                    if (message.reason === \"compiler-artifact\" && message.executable) {\n+                        const isBinary = message.target.crate_types.includes(\"bin\");\n+                        const isBuildScript = message.target.kind.includes(\"custom-build\");\n                         if ((isBinary && !isBuildScript) || message.profile.test) {\n                             artifacts.push({\n                                 fileName: message.executable,\n                                 name: message.target.name,\n                                 kind: message.target.kind[0],\n-                                isTest: message.profile.test\n+                                isTest: message.profile.test,\n                             });\n                         }\n-                    } else if (message.reason === 'compiler-message') {\n+                    } else if (message.reason === \"compiler-message\") {\n                         this.output.append(message.message.rendered);\n                     }\n                 },\n-                stderr => this.output.append(stderr),\n+                (stderr) => this.output.append(stderr)\n             );\n         } catch (err) {\n             this.output.show(true);\n@@ -81,9 +84,9 @@ export class Cargo {\n         const artifacts = await this.getArtifacts(Cargo.artifactSpec(args));\n \n         if (artifacts.length === 0) {\n-            throw new Error('No compilation artifacts');\n+            throw new Error(\"No compilation artifacts\");\n         } else if (artifacts.length > 1) {\n-            throw new Error('Multiple compilation artifacts are not supported.');\n+            throw new Error(\"Multiple compilation artifacts are not supported.\");\n         }\n \n         return artifacts[0].fileName;\n@@ -97,25 +100,23 @@ export class Cargo {\n         const path = await cargoPath();\n         return await new Promise((resolve, reject) => {\n             const cargo = cp.spawn(path, cargoArgs, {\n-                stdio: ['ignore', 'pipe', 'pipe'],\n-                cwd: this.rootFolder\n+                stdio: [\"ignore\", \"pipe\", \"pipe\"],\n+                cwd: this.rootFolder,\n             });\n \n-            cargo.on('error', err => reject(new Error(`could not launch cargo: ${err}`)));\n+            cargo.on(\"error\", (err) => reject(new Error(`could not launch cargo: ${err}`)));\n \n-            cargo.stderr.on('data', chunk => onStderrString(chunk.toString()));\n+            cargo.stderr.on(\"data\", (chunk) => onStderrString(chunk.toString()));\n \n             const rl = readline.createInterface({ input: cargo.stdout });\n-            rl.on('line', line => {\n+            rl.on(\"line\", (line) => {\n                 const message = JSON.parse(line);\n                 onStdoutJson(message);\n             });\n \n-            cargo.on('exit', (exitCode, _) => {\n-                if (exitCode === 0)\n-                    resolve(exitCode);\n-                else\n-                    reject(new Error(`exit code: ${exitCode}.`));\n+            cargo.on(\"exit\", (exitCode, _) => {\n+                if (exitCode === 0) resolve(exitCode);\n+                else reject(new Error(`exit code: ${exitCode}.`));\n             });\n         });\n     }\n@@ -158,7 +159,12 @@ export const getPathForExecutable = memoizeAsync(\n         try {\n             // hmm, `os.homedir()` seems to be infallible\n             // it is not mentioned in docs and cannot be infered by the type signature...\n-            const standardPath = vscode.Uri.joinPath(vscode.Uri.file(os.homedir()), \".cargo\", \"bin\", executableName);\n+            const standardPath = vscode.Uri.joinPath(\n+                vscode.Uri.file(os.homedir()),\n+                \".cargo\",\n+                \"bin\",\n+                executableName\n+            );\n \n             if (await isFileAtUri(standardPath)) return standardPath.fsPath;\n         } catch (err) {\n@@ -169,13 +175,11 @@ export const getPathForExecutable = memoizeAsync(\n );\n \n async function lookupInPath(exec: string): Promise<boolean> {\n-    const paths = process.env.PATH ?? \"\";;\n+    const paths = process.env.PATH ?? \"\";\n \n-    const candidates = paths.split(path.delimiter).flatMap(dirInPath => {\n+    const candidates = paths.split(path.delimiter).flatMap((dirInPath) => {\n         const candidate = path.join(dirInPath, exec);\n-        return os.type() === \"Windows_NT\"\n-            ? [candidate, `${candidate}.exe`]\n-            : [candidate];\n+        return os.type() === \"Windows_NT\" ? [candidate, `${candidate}.exe`] : [candidate];\n     });\n \n     for await (const isFile of candidates.map(isFileAtPath)) {"}, {"sha": "cd91932bb6020e5f4f3d1e6763e5c910c0e70955", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -13,7 +13,7 @@ export function assert(condition: boolean, explanation: string): asserts conditi\n     }\n }\n \n-export const log = new class {\n+export const log = new (class {\n     private enabled = true;\n     private readonly output = vscode.window.createOutputChannel(\"Rust Analyzer Client\");\n \n@@ -55,21 +55,20 @@ export const log = new class {\n             depth: 6, // heuristic\n         });\n     }\n-};\n+})();\n \n export async function sendRequestWithRetry<TParam, TRet>(\n     client: lc.LanguageClient,\n     reqType: lc.RequestType<TParam, TRet, unknown>,\n     param: TParam,\n-    token?: vscode.CancellationToken,\n+    token?: vscode.CancellationToken\n ): Promise<TRet> {\n     // The sequence is `10 * (2 ** (2 * n))` where n is 1, 2, 3...\n     for (const delay of [40, 160, 640, 2560, 10240, null]) {\n         try {\n             return await (token\n                 ? client.sendRequest(reqType, param, token)\n-                : client.sendRequest(reqType, param)\n-            );\n+                : client.sendRequest(reqType, param));\n         } catch (error) {\n             if (delay === null) {\n                 log.warn(\"LSP request timed out\", { method: reqType.method, param, error });\n@@ -86,11 +85,11 @@ export async function sendRequestWithRetry<TParam, TRet>(\n             await sleep(delay);\n         }\n     }\n-    throw 'unreachable';\n+    throw \"unreachable\";\n }\n \n export function sleep(ms: number) {\n-    return new Promise(resolve => setTimeout(resolve, ms));\n+    return new Promise((resolve) => setTimeout(resolve, ms));\n }\n \n export type RustDocument = vscode.TextDocument & { languageId: \"rust\" };\n@@ -101,12 +100,12 @@ export function isRustDocument(document: vscode.TextDocument): document is RustD\n     // by allowing only `file` schemes\n     // unfortunately extensions that use diff views not always set this\n     // to something different than 'file' (see ongoing bug: #4608)\n-    return document.languageId === 'rust' && document.uri.scheme === 'file';\n+    return document.languageId === \"rust\" && document.uri.scheme === \"file\";\n }\n \n export function isCargoTomlDocument(document: vscode.TextDocument): document is RustDocument {\n     // ideally `document.languageId` should be 'toml' but user maybe not have toml extension installed\n-    return document.uri.scheme === 'file' && document.fileName.endsWith('Cargo.toml');\n+    return document.uri.scheme === \"file\" && document.fileName.endsWith(\"Cargo.toml\");\n }\n \n export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n@@ -116,27 +115,29 @@ export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n export function isValidExecutable(path: string): boolean {\n     log.debug(\"Checking availability of a binary at\", path);\n \n-    const res = spawnSync(path, [\"--version\"], { encoding: 'utf8' });\n+    const res = spawnSync(path, [\"--version\"], { encoding: \"utf8\" });\n \n-    const printOutput = res.error && (res.error as any).code !== 'ENOENT' ? log.warn : log.debug;\n+    const printOutput = res.error && (res.error as any).code !== \"ENOENT\" ? log.warn : log.debug;\n     printOutput(path, \"--version:\", res);\n \n     return res.status === 0;\n }\n \n /** Sets ['when'](https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts) clause contexts */\n export function setContextValue(key: string, value: any): Thenable<void> {\n-    return vscode.commands.executeCommand('setContext', key, value);\n+    return vscode.commands.executeCommand(\"setContext\", key, value);\n }\n \n /**\n  * Returns a higher-order function that caches the results of invoking the\n  * underlying async function.\n  */\n-export function memoizeAsync<Ret, TThis, Param extends string>(func: (this: TThis, arg: Param) => Promise<Ret>) {\n+export function memoizeAsync<Ret, TThis, Param extends string>(\n+    func: (this: TThis, arg: Param) => Promise<Ret>\n+) {\n     const cache = new Map<string, Ret>();\n \n-    return async function(this: TThis, arg: Param) {\n+    return async function (this: TThis, arg: Param) {\n         const cached = cache.get(arg);\n         if (cached) return cached;\n "}, {"sha": "08632ec3b496404f0f3a0f2bc5703f0b8bac2a39", "filename": "editors/code/tests/runTests.ts", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2FrunTests.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2FrunTests.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2FrunTests.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,43 +1,43 @@\n-import * as path from 'path';\n-import * as fs from 'fs';\n+import * as path from \"path\";\n+import * as fs from \"fs\";\n \n-import { runTests } from '@vscode/test-electron';\n+import { runTests } from \"@vscode/test-electron\";\n \n async function main() {\n     // The folder containing the Extension Manifest package.json\n     // Passed to `--extensionDevelopmentPath`\n-    const extensionDevelopmentPath = path.resolve(__dirname, '../../');\n+    const extensionDevelopmentPath = path.resolve(__dirname, \"../../\");\n \n     // Minimum supported version.\n-    const jsonData = fs.readFileSync(path.join(extensionDevelopmentPath, 'package.json'));\n+    const jsonData = fs.readFileSync(path.join(extensionDevelopmentPath, \"package.json\"));\n     const json = JSON.parse(jsonData.toString());\n     let minimalVersion: string = json.engines.vscode;\n-    if (minimalVersion.startsWith('^')) minimalVersion = minimalVersion.slice(1);\n+    if (minimalVersion.startsWith(\"^\")) minimalVersion = minimalVersion.slice(1);\n \n     const launchArgs = [\"--disable-extensions\", extensionDevelopmentPath];\n \n     // All test suites (either unit tests or integration tests) should be in subfolders.\n-    const extensionTestsPath = path.resolve(__dirname, './unit/index');\n+    const extensionTestsPath = path.resolve(__dirname, \"./unit/index\");\n \n     // Run tests using the minimal supported version.\n     await runTests({\n         version: minimalVersion,\n         launchArgs,\n         extensionDevelopmentPath,\n-        extensionTestsPath\n+        extensionTestsPath,\n     });\n \n     // and the latest one\n     await runTests({\n-        version: 'stable',\n+        version: \"stable\",\n         launchArgs,\n         extensionDevelopmentPath,\n-        extensionTestsPath\n+        extensionTestsPath,\n     });\n }\n \n-main().catch(err => {\n+main().catch((err) => {\n     // eslint-disable-next-line no-console\n-    console.error('Failed to run tests', err);\n+    console.error(\"Failed to run tests\", err);\n     process.exit(1);\n });"}, {"sha": "2fa223bed4a6189cecf063101aa3fbfe67e9face", "filename": "editors/code/tests/unit/index.ts", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Findex.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,5 +1,5 @@\n-import { readdir } from 'fs/promises';\n-import * as path from 'path';\n+import { readdir } from \"fs/promises\";\n+import * as path from \"path\";\n \n class Test {\n     readonly name: string;\n@@ -59,7 +59,9 @@ export class Context {\n export async function run(): Promise<void> {\n     const context = new Context();\n \n-    const testFiles = (await readdir(path.resolve(__dirname))).filter(name => name.endsWith('.test.js'));\n+    const testFiles = (await readdir(path.resolve(__dirname))).filter((name) =>\n+        name.endsWith(\".test.js\")\n+    );\n     for (const testFile of testFiles) {\n         try {\n             const testModule = require(path.resolve(__dirname, testFile));"}, {"sha": "0531e064d2d80ac968c80619136892d5f6de397d", "filename": "editors/code/tests/unit/launch_config.test.ts", "status": "modified", "additions": 66, "deletions": 19, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,51 +1,98 @@\n-import * as assert from 'assert';\n-import { Cargo } from '../../src/toolchain';\n-import { Context } from '.';\n+import * as assert from \"assert\";\n+import { Cargo } from \"../../src/toolchain\";\n+import { Context } from \".\";\n \n export async function getTests(ctx: Context) {\n-    await ctx.suite('Launch configuration/Lens', suite => {\n-        suite.addTest('A binary', async () => {\n-            const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n+    await ctx.suite(\"Launch configuration/Lens\", (suite) => {\n+        suite.addTest(\"A binary\", async () => {\n+            const args = Cargo.artifactSpec([\n+                \"build\",\n+                \"--package\",\n+                \"pkg_name\",\n+                \"--bin\",\n+                \"pkg_name\",\n+            ]);\n \n-            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.cargoArgs, [\n+                \"build\",\n+                \"--package\",\n+                \"pkg_name\",\n+                \"--bin\",\n+                \"pkg_name\",\n+                \"--message-format=json\",\n+            ]);\n             assert.deepStrictEqual(args.filter, undefined);\n         });\n \n-        suite.addTest('One of Multiple Binaries', async () => {\n+        suite.addTest(\"One of Multiple Binaries\", async () => {\n             const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\"]);\n \n-            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.cargoArgs, [\n+                \"build\",\n+                \"--package\",\n+                \"pkg_name\",\n+                \"--bin\",\n+                \"bin1\",\n+                \"--message-format=json\",\n+            ]);\n             assert.deepStrictEqual(args.filter, undefined);\n         });\n \n-        suite.addTest('A test', async () => {\n+        suite.addTest(\"A test\", async () => {\n             const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\"]);\n \n-            assert.deepStrictEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.cargoArgs, [\n+                \"test\",\n+                \"--package\",\n+                \"pkg_name\",\n+                \"--lib\",\n+                \"--no-run\",\n+                \"--message-format=json\",\n+            ]);\n             assert.notDeepStrictEqual(args.filter, undefined);\n         });\n     });\n \n-    await ctx.suite('Launch configuration/QuickPick', suite => {\n-        suite.addTest('A binary', async () => {\n+    await ctx.suite(\"Launch configuration/QuickPick\", (suite) => {\n+        suite.addTest(\"A binary\", async () => {\n             const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n \n-            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.cargoArgs, [\n+                \"build\",\n+                \"--package\",\n+                \"pkg_name\",\n+                \"--bin\",\n+                \"pkg_name\",\n+                \"--message-format=json\",\n+            ]);\n             assert.deepStrictEqual(args.filter, undefined);\n         });\n \n-\n-        suite.addTest('One of Multiple Binaries', async () => {\n+        suite.addTest(\"One of Multiple Binaries\", async () => {\n             const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\"]);\n \n-            assert.deepStrictEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\", \"--message-format=json\"]);\n+            assert.deepStrictEqual(args.cargoArgs, [\n+                \"build\",\n+                \"--package\",\n+                \"pkg_name\",\n+                \"--bin\",\n+                \"bin2\",\n+                \"--message-format=json\",\n+            ]);\n             assert.deepStrictEqual(args.filter, undefined);\n         });\n \n-        suite.addTest('A test', async () => {\n+        suite.addTest(\"A test\", async () => {\n             const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\"]);\n \n-            assert.deepStrictEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--message-format=json\", \"--no-run\"]);\n+            assert.deepStrictEqual(args.cargoArgs, [\n+                \"test\",\n+                \"--package\",\n+                \"pkg_name\",\n+                \"--lib\",\n+                \"--message-format=json\",\n+                \"--no-run\",\n+            ]);\n             assert.notDeepStrictEqual(args.filter, undefined);\n         });\n     });"}, {"sha": "b7d59e399dd80e830b6bfa046026d59e729f2eb7", "filename": "editors/code/tests/unit/runnable_env.test.ts", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,8 +1,8 @@\n-import * as assert from 'assert';\n-import { prepareEnv } from '../../src/run';\n-import { RunnableEnvCfg } from '../../src/config';\n-import { Context } from '.';\n-import * as ra from '../../src/lsp_ext';\n+import * as assert from \"assert\";\n+import { prepareEnv } from \"../../src/run\";\n+import { RunnableEnvCfg } from \"../../src/config\";\n+import { Context } from \".\";\n+import * as ra from \"../../src/lsp_ext\";\n \n function makeRunnable(label: string): ra.Runnable {\n     return {\n@@ -11,8 +11,8 @@ function makeRunnable(label: string): ra.Runnable {\n         args: {\n             cargoArgs: [],\n             executableArgs: [],\n-            cargoExtraArgs: []\n-        }\n+            cargoExtraArgs: [],\n+        },\n     };\n }\n \n@@ -22,20 +22,20 @@ function fakePrepareEnv(runnableName: string, config: RunnableEnvCfg): Record<st\n }\n \n export async function getTests(ctx: Context) {\n-    await ctx.suite('Runnable env', suite => {\n-        suite.addTest('Global config works', async () => {\n-            const binEnv = fakePrepareEnv(\"run project_name\", { \"GLOBAL\": \"g\" });\n+    await ctx.suite(\"Runnable env\", (suite) => {\n+        suite.addTest(\"Global config works\", async () => {\n+            const binEnv = fakePrepareEnv(\"run project_name\", { GLOBAL: \"g\" });\n             assert.strictEqual(binEnv[\"GLOBAL\"], \"g\");\n \n-            const testEnv = fakePrepareEnv(\"test some::mod::test_name\", { \"GLOBAL\": \"g\" });\n+            const testEnv = fakePrepareEnv(\"test some::mod::test_name\", { GLOBAL: \"g\" });\n             assert.strictEqual(testEnv[\"GLOBAL\"], \"g\");\n         });\n \n-        suite.addTest('null mask works', async () => {\n+        suite.addTest(\"null mask works\", async () => {\n             const config = [\n                 {\n-                    env: { DATA: \"data\" }\n-                }\n+                    env: { DATA: \"data\" },\n+                },\n             ];\n             const binEnv = fakePrepareEnv(\"run project_name\", config);\n             assert.strictEqual(binEnv[\"DATA\"], \"data\");\n@@ -44,14 +44,14 @@ export async function getTests(ctx: Context) {\n             assert.strictEqual(testEnv[\"DATA\"], \"data\");\n         });\n \n-        suite.addTest('order works', async () => {\n+        suite.addTest(\"order works\", async () => {\n             const config = [\n                 {\n-                    env: { DATA: \"data\" }\n+                    env: { DATA: \"data\" },\n                 },\n                 {\n-                    env: { DATA: \"newdata\" }\n-                }\n+                    env: { DATA: \"newdata\" },\n+                },\n             ];\n             const binEnv = fakePrepareEnv(\"run project_name\", config);\n             assert.strictEqual(binEnv[\"DATA\"], \"newdata\");\n@@ -60,19 +60,19 @@ export async function getTests(ctx: Context) {\n             assert.strictEqual(testEnv[\"DATA\"], \"newdata\");\n         });\n \n-        suite.addTest('mask works', async () => {\n+        suite.addTest(\"mask works\", async () => {\n             const config = [\n                 {\n-                    env: { DATA: \"data\" }\n+                    env: { DATA: \"data\" },\n                 },\n                 {\n                     mask: \"^run\",\n-                    env: { DATA: \"rundata\" }\n+                    env: { DATA: \"rundata\" },\n                 },\n                 {\n                     mask: \"special_test$\",\n-                    env: { DATA: \"special_test\" }\n-                }\n+                    env: { DATA: \"special_test\" },\n+                },\n             ];\n             const binEnv = fakePrepareEnv(\"run project_name\", config);\n             assert.strictEqual(binEnv[\"DATA\"], \"rundata\");\n@@ -84,15 +84,15 @@ export async function getTests(ctx: Context) {\n             assert.strictEqual(specialTestEnv[\"DATA\"], \"special_test\");\n         });\n \n-        suite.addTest('exact test name works', async () => {\n+        suite.addTest(\"exact test name works\", async () => {\n             const config = [\n                 {\n-                    env: { DATA: \"data\" }\n+                    env: { DATA: \"data\" },\n                 },\n                 {\n                     mask: \"some::mod::test_name\",\n-                    env: { DATA: \"test special\" }\n-                }\n+                    env: { DATA: \"test special\" },\n+                },\n             ];\n             const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n             assert.strictEqual(testEnv[\"DATA\"], \"test special\");\n@@ -101,15 +101,15 @@ export async function getTests(ctx: Context) {\n             assert.strictEqual(specialTestEnv[\"DATA\"], \"data\");\n         });\n \n-        suite.addTest('test mod name works', async () => {\n+        suite.addTest(\"test mod name works\", async () => {\n             const config = [\n                 {\n-                    env: { DATA: \"data\" }\n+                    env: { DATA: \"data\" },\n                 },\n                 {\n                     mask: \"some::mod\",\n-                    env: { DATA: \"mod special\" }\n-                }\n+                    env: { DATA: \"mod special\" },\n+                },\n             ];\n             const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n             assert.strictEqual(testEnv[\"DATA\"], \"mod special\");"}, {"sha": "224cea5a232ccd6fd59ca2627c36618ba3988a5a", "filename": "editors/code/tests/unit/settings.test.ts", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Fsettings.test.ts?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,61 +1,61 @@\n-import * as assert from 'assert';\n-import { Context } from '.';\n-import { substituteVariablesInEnv } from '../../src/config';\n+import * as assert from \"assert\";\n+import { Context } from \".\";\n+import { substituteVariablesInEnv } from \"../../src/config\";\n \n export async function getTests(ctx: Context) {\n-    await ctx.suite('Server Env Settings', suite => {\n-        suite.addTest('Replacing Env Variables', async () => {\n+    await ctx.suite(\"Server Env Settings\", (suite) => {\n+        suite.addTest(\"Replacing Env Variables\", async () => {\n             const envJson = {\n                 USING_MY_VAR: \"${env:MY_VAR} test ${env:MY_VAR}\",\n-                MY_VAR: \"test\"\n+                MY_VAR: \"test\",\n             };\n             const expectedEnv = {\n                 USING_MY_VAR: \"test test test\",\n-                MY_VAR: \"test\"\n+                MY_VAR: \"test\",\n             };\n             const actualEnv = await substituteVariablesInEnv(envJson);\n             assert.deepStrictEqual(actualEnv, expectedEnv);\n         });\n \n-        suite.addTest('Circular dependencies remain as is', async () => {\n+        suite.addTest(\"Circular dependencies remain as is\", async () => {\n             const envJson = {\n                 A_USES_B: \"${env:B_USES_A}\",\n                 B_USES_A: \"${env:A_USES_B}\",\n                 C_USES_ITSELF: \"${env:C_USES_ITSELF}\",\n                 D_USES_C: \"${env:C_USES_ITSELF}\",\n                 E_IS_ISOLATED: \"test\",\n-                F_USES_E: \"${env:E_IS_ISOLATED}\"\n+                F_USES_E: \"${env:E_IS_ISOLATED}\",\n             };\n             const expectedEnv = {\n                 A_USES_B: \"${env:B_USES_A}\",\n                 B_USES_A: \"${env:A_USES_B}\",\n                 C_USES_ITSELF: \"${env:C_USES_ITSELF}\",\n                 D_USES_C: \"${env:C_USES_ITSELF}\",\n                 E_IS_ISOLATED: \"test\",\n-                F_USES_E: \"test\"\n+                F_USES_E: \"test\",\n             };\n             const actualEnv = await substituteVariablesInEnv(envJson);\n             assert.deepStrictEqual(actualEnv, expectedEnv);\n         });\n \n-        suite.addTest('Should support external variables', async () => {\n+        suite.addTest(\"Should support external variables\", async () => {\n             const envJson = {\n-                USING_EXTERNAL_VAR: \"${env:TEST_VARIABLE} test ${env:TEST_VARIABLE}\"\n+                USING_EXTERNAL_VAR: \"${env:TEST_VARIABLE} test ${env:TEST_VARIABLE}\",\n             };\n             const expectedEnv = {\n-                USING_EXTERNAL_VAR: \"test test test\"\n+                USING_EXTERNAL_VAR: \"test test test\",\n             };\n \n             const actualEnv = await substituteVariablesInEnv(envJson);\n             assert.deepStrictEqual(actualEnv, expectedEnv);\n         });\n \n-        suite.addTest('should support VSCode variables', async () => {\n+        suite.addTest(\"should support VSCode variables\", async () => {\n             const envJson = {\n-                USING_VSCODE_VAR: \"${workspaceFolderBasename}\"\n+                USING_VSCODE_VAR: \"${workspaceFolderBasename}\",\n             };\n             const actualEnv = await substituteVariablesInEnv(envJson);\n-            assert.deepStrictEqual(actualEnv.USING_VSCODE_VAR, 'code');\n+            assert.deepStrictEqual(actualEnv.USING_VSCODE_VAR, \"code\");\n         });\n     });\n }"}, {"sha": "5e2b33ca39f88e346748b2f7677b87f8653105c2", "filename": "editors/code/tsconfig.eslint.json", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftsconfig.eslint.json", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftsconfig.eslint.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftsconfig.eslint.json?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -1,11 +1,11 @@\n // Special typescript project file, used by eslint only.\n {\n-\t\"extends\": \"./tsconfig.json\",\n-\t\"include\": [\n-\t\t// repeated from base config's \"include\" setting\n-\t\t\"src\",\n-\t\t\"tests\",\n-\t\t// these are the eslint-only inclusions\n-\t\t\".eslintrc.js\",\n-\t]\n+    \"extends\": \"./tsconfig.json\",\n+    \"include\": [\n+        // repeated from base config's \"include\" setting\n+        \"src\",\n+        \"tests\",\n+        // these are the eslint-only inclusions\n+        \".eslintrc.js\"\n+    ]\n }"}, {"sha": "42e2846858a84345c5bd0d1d210b691dde911df4", "filename": "editors/code/tsconfig.json", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/f247090558c9ba3c551566eae5882b7ca865225f/editors%2Fcode%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftsconfig.json?ref=f247090558c9ba3c551566eae5882b7ca865225f", "patch": "@@ -3,9 +3,7 @@\n         \"module\": \"commonjs\",\n         \"target\": \"es2021\",\n         \"outDir\": \"out\",\n-        \"lib\": [\n-            \"es2021\"\n-        ],\n+        \"lib\": [\"es2021\"],\n         \"sourceMap\": true,\n         \"rootDir\": \".\",\n         \"strict\": true,\n@@ -16,12 +14,6 @@\n         \"noFallthroughCasesInSwitch\": true,\n         \"newLine\": \"LF\"\n     },\n-    \"exclude\": [\n-        \"node_modules\",\n-        \".vscode-test\"\n-    ],\n-    \"include\": [\n-        \"src\",\n-        \"tests\"\n-    ]\n+    \"exclude\": [\"node_modules\", \".vscode-test\"],\n+    \"include\": [\"src\", \"tests\"]\n }"}]}