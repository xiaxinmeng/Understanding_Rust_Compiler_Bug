{"sha": "42c95146294c7773ca03e91e945fd545c6ce1ba2", "node_id": "C_kwDOAAsO6NoAKDQyYzk1MTQ2Mjk0Yzc3NzNjYTAzZTkxZTk0NWZkNTQ1YzZjZTFiYTI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T11:37:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-05T11:44:18Z"}, "message": "Simplify construction of replacement map.", "tree": {"sha": "f636d386b8f773ddbcd7ad540c72ea2ea103fc24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f636d386b8f773ddbcd7ad540c72ea2ea103fc24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c95146294c7773ca03e91e945fd545c6ce1ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c95146294c7773ca03e91e945fd545c6ce1ba2", "html_url": "https://github.com/rust-lang/rust/commit/42c95146294c7773ca03e91e945fd545c6ce1ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c95146294c7773ca03e91e945fd545c6ce1ba2/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e465d647b1286e9127dab4df091315588b44dba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e465d647b1286e9127dab4df091315588b44dba9", "html_url": "https://github.com/rust-lang/rust/commit/e465d647b1286e9127dab4df091315588b44dba9"}], "stats": {"total": 356, "additions": 196, "deletions": 160}, "files": [{"sha": "90d07c81256f553cf4679339bdf7f42de0d85685", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -790,7 +790,7 @@ impl<V, T> TryFrom<ProjectionElem<V, T>> for TrackElem {\n }\n \n /// Invokes `f` on all direct fields of `ty`.\n-fn iter_fields<'tcx>(\n+pub fn iter_fields<'tcx>(\n     ty: Ty<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut f: impl FnMut(Option<VariantIdx>, Field, Ty<'tcx>),"}, {"sha": "3cfa0b16499a66f1dd3c631fc78dfb4a9ad02c2e", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 69, "deletions": 89, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -1,11 +1,12 @@\n use crate::MirPass;\n-use rustc_data_structures::fx::{FxIndexMap, IndexEntry};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n+use rustc_mir_dataflow::value_analysis::iter_fields;\n \n pub struct ScalarReplacementOfAggregates;\n \n@@ -125,6 +126,36 @@ fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n #[derive(Default, Debug)]\n struct ReplacementMap<'tcx> {\n     fields: FxIndexMap<PlaceRef<'tcx>, Local>,\n+    /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n+    /// and deinit statement and debuginfo.\n+    fragments: IndexVec<Local, Option<Vec<(&'tcx [PlaceElem<'tcx>], Local)>>>,\n+}\n+\n+impl<'tcx> ReplacementMap<'tcx> {\n+    fn gather_debug_info_fragments(\n+        &self,\n+        place: PlaceRef<'tcx>,\n+    ) -> Option<Vec<VarDebugInfoFragment<'tcx>>> {\n+        let mut fragments = Vec::new();\n+        let Some(parts) = &self.fragments[place.local] else { return None };\n+        for (proj, replacement_local) in parts {\n+            if proj.starts_with(place.projection) {\n+                fragments.push(VarDebugInfoFragment {\n+                    projection: proj[place.projection.len()..].to_vec(),\n+                    contents: Place::from(*replacement_local),\n+                });\n+            }\n+        }\n+        Some(fragments)\n+    }\n+\n+    fn place_fragments(\n+        &self,\n+        place: Place<'tcx>,\n+    ) -> Option<&Vec<(&'tcx [PlaceElem<'tcx>], Local)>> {\n+        let local = place.as_local()?;\n+        self.fragments[local].as_ref()\n+    }\n }\n \n /// Compute the replacement of flattened places into locals.\n@@ -136,53 +167,30 @@ fn compute_flattening<'tcx>(\n     body: &mut Body<'tcx>,\n     escaping: BitSet<Local>,\n ) -> ReplacementMap<'tcx> {\n-    let mut visitor = PreFlattenVisitor {\n-        tcx,\n-        escaping,\n-        local_decls: &mut body.local_decls,\n-        map: Default::default(),\n-    };\n-    for (block, bbdata) in body.basic_blocks.iter_enumerated() {\n-        visitor.visit_basic_block_data(block, bbdata);\n-    }\n-    return visitor.map;\n-\n-    struct PreFlattenVisitor<'tcx, 'll> {\n-        tcx: TyCtxt<'tcx>,\n-        local_decls: &'ll mut LocalDecls<'tcx>,\n-        escaping: BitSet<Local>,\n-        map: ReplacementMap<'tcx>,\n-    }\n+    let mut fields = FxIndexMap::default();\n+    let mut fragments = IndexVec::from_elem(None::<Vec<_>>, &body.local_decls);\n \n-    impl<'tcx, 'll> PreFlattenVisitor<'tcx, 'll> {\n-        fn create_place(&mut self, place: PlaceRef<'tcx>) {\n-            if self.escaping.contains(place.local) {\n-                return;\n-            }\n-\n-            match self.map.fields.entry(place) {\n-                IndexEntry::Occupied(_) => {}\n-                IndexEntry::Vacant(v) => {\n-                    let ty = place.ty(&*self.local_decls, self.tcx).ty;\n-                    let local = self.local_decls.push(LocalDecl {\n-                        ty,\n-                        user_ty: None,\n-                        ..self.local_decls[place.local].clone()\n-                    });\n-                    v.insert(local);\n-                }\n-            }\n-        }\n-    }\n-\n-    impl<'tcx, 'll> Visitor<'tcx> for PreFlattenVisitor<'tcx, 'll> {\n-        fn visit_place(&mut self, place: &Place<'tcx>, _: PlaceContext, _: Location) {\n-            if let &[PlaceElem::Field(..), ..] = &place.projection[..] {\n-                let pr = PlaceRef { local: place.local, projection: &place.projection[..1] };\n-                self.create_place(pr)\n-            }\n+    for local in body.local_decls.indices() {\n+        if escaping.contains(local) {\n+            continue;\n         }\n+        let decl = body.local_decls[local].clone();\n+        let ty = decl.ty;\n+        iter_fields(ty, tcx, |variant, field, field_ty| {\n+            if variant.is_some() {\n+                // Downcasts are currently not supported.\n+                return;\n+            };\n+            let new_local =\n+                body.local_decls.push(LocalDecl { ty: field_ty, user_ty: None, ..decl.clone() });\n+            let place = Place::from(local)\n+                .project_deeper(&[PlaceElem::Field(field, field_ty)], tcx)\n+                .as_ref();\n+            fields.insert(place, new_local);\n+            fragments[local].get_or_insert_default().push((place.projection, new_local));\n+        });\n     }\n+    ReplacementMap { fields, fragments }\n }\n \n /// Perform the replacement computed by `compute_flattening`.\n@@ -200,18 +208,11 @@ fn replace_flattened_locals<'tcx>(\n         return;\n     }\n \n-    let mut fragments = IndexVec::<_, Option<Vec<_>>>::from_elem(None, &body.local_decls);\n-    for (k, v) in &replacements.fields {\n-        fragments[k.local].get_or_insert_default().push((k.projection, *v));\n-    }\n-    debug!(?fragments);\n-\n     let mut visitor = ReplacementVisitor {\n         tcx,\n         local_decls: &body.local_decls,\n         replacements,\n         all_dead_locals,\n-        fragments: &fragments,\n         patch: MirPatch::new(body),\n     };\n     for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n@@ -237,30 +238,10 @@ struct ReplacementVisitor<'tcx, 'll> {\n     replacements: ReplacementMap<'tcx>,\n     /// This is used to check that we are not leaving references to replaced locals behind.\n     all_dead_locals: BitSet<Local>,\n-    /// Pre-computed list of all \"new\" locals for each \"old\" local. This is used to expand storage\n-    /// and deinit statement and debuginfo.\n-    fragments: &'ll IndexVec<Local, Option<Vec<(&'tcx [PlaceElem<'tcx>], Local)>>>,\n     patch: MirPatch<'tcx>,\n }\n \n impl<'tcx, 'll> ReplacementVisitor<'tcx, 'll> {\n-    fn gather_debug_info_fragments(\n-        &self,\n-        place: PlaceRef<'tcx>,\n-    ) -> Option<Vec<VarDebugInfoFragment<'tcx>>> {\n-        let mut fragments = Vec::new();\n-        let Some(parts) = &self.fragments[place.local] else { return None };\n-        for (proj, replacement_local) in parts {\n-            if proj.starts_with(place.projection) {\n-                fragments.push(VarDebugInfoFragment {\n-                    projection: proj[place.projection.len()..].to_vec(),\n-                    contents: Place::from(*replacement_local),\n-                });\n-            }\n-        }\n-        Some(fragments)\n-    }\n-\n     fn replace_place(&self, place: PlaceRef<'tcx>) -> Option<Place<'tcx>> {\n         if let &[PlaceElem::Field(..), ref rest @ ..] = place.projection {\n             let pr = PlaceRef { local: place.local, projection: &place.projection[..1] };\n@@ -270,25 +251,18 @@ impl<'tcx, 'll> ReplacementVisitor<'tcx, 'll> {\n             None\n         }\n     }\n-\n-    fn place_fragments(\n-        &self,\n-        place: Place<'tcx>,\n-    ) -> Option<&'ll Vec<(&'tcx [PlaceElem<'tcx>], Local)>> {\n-        let local = place.as_local()?;\n-        self.fragments[local].as_ref()\n-    }\n }\n \n impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n+    #[instrument(level = \"trace\", skip(self))]\n     fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n         match statement.kind {\n             StatementKind::StorageLive(l) => {\n-                if let Some(final_locals) = &self.fragments[l] {\n+                if let Some(final_locals) = &self.replacements.fragments[l] {\n                     for &(_, fl) in final_locals {\n                         self.patch.add_statement(location, StatementKind::StorageLive(fl));\n                     }\n@@ -297,7 +271,7 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n                 return;\n             }\n             StatementKind::StorageDead(l) => {\n-                if let Some(final_locals) = &self.fragments[l] {\n+                if let Some(final_locals) = &self.replacements.fragments[l] {\n                     for &(_, fl) in final_locals {\n                         self.patch.add_statement(location, StatementKind::StorageDead(fl));\n                     }\n@@ -306,7 +280,7 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n                 return;\n             }\n             StatementKind::Deinit(box place) => {\n-                if let Some(final_locals) = self.place_fragments(place) {\n+                if let Some(final_locals) = self.replacements.place_fragments(place) {\n                     for &(_, fl) in final_locals {\n                         self.patch\n                             .add_statement(location, StatementKind::Deinit(Box::new(fl.into())));\n@@ -317,7 +291,7 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n             }\n \n             StatementKind::Assign(box (place, Rvalue::Aggregate(_, ref operands))) => {\n-                if let Some(final_locals) = self.place_fragments(place) {\n+                if let Some(final_locals) = self.replacements.place_fragments(place) {\n                     for &(projection, fl) in final_locals {\n                         let &[PlaceElem::Field(index, _)] = projection else { bug!() };\n                         let index = index.as_usize();\n@@ -333,7 +307,7 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n             }\n \n             StatementKind::Assign(box (place, Rvalue::Use(Operand::Constant(_)))) => {\n-                if let Some(final_locals) = self.place_fragments(place) {\n+                if let Some(final_locals) = self.replacements.place_fragments(place) {\n                     for &(projection, fl) in final_locals {\n                         let rvalue =\n                             Rvalue::Use(Operand::Move(place.project_deeper(projection, self.tcx)));\n@@ -353,9 +327,12 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n                     Operand::Move(rplace) => (rplace, false),\n                     Operand::Constant(_) => bug!(),\n                 };\n-                if let Some(final_locals) = self.place_fragments(lhs) {\n+                if let Some(final_locals) = self.replacements.place_fragments(lhs) {\n                     for &(projection, fl) in final_locals {\n                         let rplace = rplace.project_deeper(projection, self.tcx);\n+                        debug!(?rplace);\n+                        let rplace = self.replace_place(rplace.as_ref()).unwrap_or(rplace);\n+                        debug!(?rplace);\n                         let rvalue = if copy {\n                             Rvalue::Use(Operand::Copy(rplace))\n                         } else {\n@@ -389,7 +366,9 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n             VarDebugInfoContents::Place(ref mut place) => {\n                 if let Some(repl) = self.replace_place(place.as_ref()) {\n                     *place = repl;\n-                } else if let Some(fragments) = self.gather_debug_info_fragments(place.as_ref()) {\n+                } else if let Some(fragments) =\n+                    self.replacements.gather_debug_info_fragments(place.as_ref())\n+                {\n                     let ty = place.ty(self.local_decls, self.tcx).ty;\n                     var_debug_info.value = VarDebugInfoContents::Composite { ty, fragments };\n                 }\n@@ -401,8 +380,9 @@ impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n                         if let Some(repl) = self.replace_place(fragment.contents.as_ref()) {\n                             fragment.contents = repl;\n                             true\n-                        } else if let Some(frg) =\n-                            self.gather_debug_info_fragments(fragment.contents.as_ref())\n+                        } else if let Some(frg) = self\n+                            .replacements\n+                            .gather_debug_info_fragments(fragment.contents.as_ref())\n                         {\n                             new_fragments.extend(frg.into_iter().map(|mut f| {\n                                 f.projection.splice(0..0, fragment.projection.iter().copied());"}, {"sha": "f1f53a481655ca6e3ec7685527f2c440acec5ff8", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -8,8 +8,8 @@\n       let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:15: +4:16\n       let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:19: +4:20\n       let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:+4:23: +4:24\n-      let mut _13: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n-      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n+      let mut _12: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:13: +13:16\n+      let mut _13: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:+13:19: +13:22\n       scope 1 {\n -         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n +         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:+1:9: +1:10\n@@ -29,19 +29,21 @@\n                       scope 5 {\n -                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n +                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n-                          let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _14: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _15: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _16: u32;    // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n                           scope 6 {\n-                              debug f => _10; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-                              let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                              debug f => (bool, bool, u32){ .0 => _14, .1 => _15, .2 => _16, }; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                              let _10: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                               scope 7 {\n-                                  debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-                                  let _15: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                  let _16: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  debug o => _10; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+                                  let _17: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  let _18: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                   scope 8 {\n-                                      debug p => Point{ .0 => _15, .1 => _16, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-                                      let _12: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+                                      debug p => Point{ .0 => _17, .1 => _18, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                      let _11: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       scope 9 {\n--                                         debug a => _12; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+-                                         debug a => _11; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n +                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       }\n                                   }\n@@ -67,17 +69,23 @@\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          _10 = (const true, const false, const 123_u32); // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n-          _11 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          _15 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          _16 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          StorageLive(_12);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n-          _12 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n-          StorageDead(_12);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageLive(_14);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          StorageLive(_15);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          StorageLive(_16);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          _14 = const true;                // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _15 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _16 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          StorageLive(_10);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n+          _10 = Option::<u16>::Some(const 99_u16); // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n+          _17 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          _18 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          StorageLive(_11);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n+          _11 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:22\n+          StorageDead(_11);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_10);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_14);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_15);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/const_debuginfo.rs:+14:2: +14:2"}, {"sha": "37fbcf9dd496a11275734740b35b11f59bf2999f", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -6,9 +6,10 @@\n       let mut _1: (i32, i32);              // in scope 0 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/mutable_variable_aggregate.rs:+1:9: +1:14\n-          let _2: (i32, i32);              // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          let _2: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+          let _3: i32;                     // in scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           scope 2 {\n-              debug y => _2;               // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+              debug y => (i32, i32){ .0 => _2, .1 => _3, }; // in scope 2 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n           }\n       }\n   \n@@ -18,9 +19,13 @@\n +         _1 = const (42_i32, 43_i32);     // scope 0 at $DIR/mutable_variable_aggregate.rs:+1:17: +1:25\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:+2:5: +2:13\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n--         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n-+         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+          StorageLive(_3);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:9: +3:10\n+-         _2 = (_1.0: i32);                // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n+-         _3 = (_1.1: i32);                // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _2 = const 42_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n++         _3 = const 99_i32;               // scope 1 at $DIR/mutable_variable_aggregate.rs:+3:13: +3:14\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate.rs:+4:2: +4:2\n       }"}, {"sha": "134f0c080bf8118d8a3c26ec452720bd09c7c72e", "filename": "tests/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -9,9 +9,10 @@\n           let _2: &mut (i32, i32);         // in scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n           scope 2 {\n               debug z => _2;               // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:9: +2:10\n-              let _3: (i32, i32);          // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              let _3: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+              let _4: i32;                 // in scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               scope 3 {\n-                  debug y => _3;           // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+                  debug y => (i32, i32){ .0 => _3, .1 => _4, }; // in scope 3 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n               }\n           }\n       }\n@@ -23,8 +24,11 @@\n           _2 = &mut _1;                    // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+2:13: +2:19\n           ((*_2).1: i32) = const 99_i32;   // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+3:5: +3:13\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n-          _3 = _1;                         // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:9: +4:10\n+          _3 = (_1.0: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n+          _4 = (_1.1: i32);                // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+4:13: +4:14\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n+          StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:1: +5:2\n           return;                          // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:+5:2: +5:2"}, {"sha": "4010dd6c6d0d8518a55625090c90d496455f41b9", "filename": "tests/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -10,13 +10,13 @@\n           let mut _5: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => (i32, i32){ .1 => _5, .0 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              debug x => (i32, i32){ .0 => _5, .1 => _6, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n               let _3: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n                   debug y => _3;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n                   let _4: i32;             // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   scope 4 {\n-                      debug z => _6;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n+                      debug z => _5;       // in scope 4 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n                   }\n               }\n           }\n@@ -31,17 +31,17 @@\n       }\n   \n       bb1: {\n-          StorageLive(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          _5 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          _6 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          _5 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          _6 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n           StorageLive(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n           _2 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          _5 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          _6 = move _2;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n           StorageDead(_2);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _3 = _5;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          _3 = _6;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_5);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "98cd020dade4ba0665d1836e53e3de6ef1d41030", "filename": "tests/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -11,6 +11,7 @@\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n +     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -51,11 +52,14 @@\n -         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n -         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n +         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n +         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _10 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n +         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-+         _8 = _10;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n +         nop;                             // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "b76e2d6d0f2942eab2aa6be17e4ff0e5b6a5f716", "filename": "tests/mir-opt/sroa.copies.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 45, "deletions": 24, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.copies.ScalarReplacementOfAggregates.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -5,44 +5,65 @@\n       debug x => _1;                       // in scope 0 at $DIR/sroa.rs:+0:11: +0:12\n       let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n       let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _5: u8;                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _6: &str;                        // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n       scope 1 {\n--         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-+         debug y => Foo{ .0 => _5, .2 => _6, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n+          debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n           let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n           scope 2 {\n               debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n               let _4: &str;                // in scope 2 at $DIR/sroa.rs:+3:9: +3:10\n               scope 3 {\n                   debug u => _4;           // in scope 3 at $DIR/sroa.rs:+3:9: +3:10\n+                  let _5: Foo;             // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _7: u8;              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _8: ();              // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _9: &str;            // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++                 let _10: std::option::Option<isize>; // in scope 3 at $DIR/sroa.rs:+4:9: +4:10\n+                  scope 4 {\n+-                     debug z => _5;       // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n++                     debug z => Foo{ .0 => _7, .1 => _8, .2 => _9, .3 => _10, }; // in scope 4 at $DIR/sroa.rs:+4:9: +4:10\n+                      let _6: ();          // in scope 4 at $DIR/sroa.rs:+5:9: +5:10\n+                      scope 5 {\n+                          debug a => _6;   // in scope 5 at $DIR/sroa.rs:+5:9: +5:10\n+                      }\n+                  }\n               }\n           }\n       }\n   \n       bb0: {\n--         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n--         _2 = _1;                         // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+         _5 = (_1.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         _6 = (_1.2: &str);               // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n+          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n+          _2 = _1;                         // scope 0 at $DIR/sroa.rs:+1:13: +1:14\n           StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n--         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n-+         _3 = _5;                         // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n+          _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n           StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n--         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-+         _4 = _6;                         // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +4:2\n-          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+4:1: +4:2\n-          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+4:1: +4:2\n--         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-+         nop;                             // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n-          return;                          // scope 0 at $DIR/sroa.rs:+4:2: +4:2\n+          _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n+-         StorageLive(_5);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n+-         _5 = _2;                         // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         StorageLive(_7);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         StorageLive(_8);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         StorageLive(_9);                 // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         StorageLive(_10);                // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         nop;                             // scope 3 at $DIR/sroa.rs:+4:9: +4:10\n++         _7 = (_2.0: u8);                 // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _8 = (_2.1: ());                 // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _9 = (_2.2: &str);               // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         _10 = (_2.3: std::option::Option<isize>); // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n++         nop;                             // scope 3 at $DIR/sroa.rs:+4:13: +4:14\n+          StorageLive(_6);                 // scope 4 at $DIR/sroa.rs:+5:9: +5:10\n+-         _6 = (_5.1: ());                 // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n++         _6 = _8;                         // scope 4 at $DIR/sroa.rs:+5:13: +5:16\n+          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +6:2\n+          StorageDead(_6);                 // scope 4 at $DIR/sroa.rs:+6:1: +6:2\n+-         StorageDead(_5);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_7);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_8);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_9);                 // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         StorageDead(_10);                // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n++         nop;                             // scope 3 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n       }\n   }\n   "}, {"sha": "f0d62220dd664aaf3a8ddd89bd991185ecd98497", "filename": "tests/mir-opt/sroa.ref_copies.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.ref_copies.ScalarReplacementOfAggregates.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -6,10 +6,12 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:24: +0:24\n       let _2: Foo;                         // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n +     let _5: u8;                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n-+     let _6: &str;                        // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _6: ();                          // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _7: &str;                        // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++     let _8: std::option::Option<isize>;  // in scope 0 at $DIR/sroa.rs:+1:9: +1:10\n       scope 1 {\n -         debug y => _2;                   // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n-+         debug y => Foo{ .0 => _5, .2 => _6, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n++         debug y => Foo{ .0 => _5, .1 => _6, .2 => _7, .3 => _8, }; // in scope 1 at $DIR/sroa.rs:+1:9: +1:10\n           let _3: u8;                      // in scope 1 at $DIR/sroa.rs:+2:9: +2:10\n           scope 2 {\n               debug t => _3;               // in scope 2 at $DIR/sroa.rs:+2:9: +2:10\n@@ -25,22 +27,28 @@\n -         _2 = (*_1);                      // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n +         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n +         StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n++         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n +         nop;                             // scope 0 at $DIR/sroa.rs:+1:9: +1:10\n +         _5 = ((*_1).0: u8);              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n-+         _6 = ((*_1).2: &str);            // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         _6 = ((*_1).1: ());              // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         _7 = ((*_1).2: &str);            // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n++         _8 = ((*_1).3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n +         nop;                             // scope 0 at $DIR/sroa.rs:+1:13: +1:15\n           StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+2:9: +2:10\n -         _3 = (_2.0: u8);                 // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n +         _3 = _5;                         // scope 1 at $DIR/sroa.rs:+2:13: +2:16\n           StorageLive(_4);                 // scope 2 at $DIR/sroa.rs:+3:9: +3:10\n -         _4 = (_2.2: &str);               // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n-+         _4 = _6;                         // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n++         _4 = _7;                         // scope 2 at $DIR/sroa.rs:+3:13: +3:16\n           _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:24: +4:2\n           StorageDead(_4);                 // scope 2 at $DIR/sroa.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+4:1: +4:2\n -         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n +         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n +         StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n++         StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n++         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n +         nop;                             // scope 0 at $DIR/sroa.rs:+4:1: +4:2\n           return;                          // scope 0 at $DIR/sroa.rs:+4:2: +4:2\n       }"}, {"sha": "471aac9f9d82d2b5103b14cacff71ba9f10ecfbe", "filename": "tests/mir-opt/sroa.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.rs?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -77,6 +77,8 @@ fn copies(x: Foo) {\n     let y = x;\n     let t = y.a;\n     let u = y.c;\n+    let z = y;\n+    let a = z.b;\n }\n \n fn ref_copies(x: &Foo) {"}, {"sha": "2c63d8b266dde9fffcfe0c1fb57c5fe98fcdb867", "filename": "tests/mir-opt/sroa.structs.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/42c95146294c7773ca03e91e945fd545c6ce1ba2/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff?ref=42c95146294c7773ca03e91e945fd545c6ce1ba2", "patch": "@@ -6,22 +6,26 @@\n       let mut _0: f32;                     // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:30\n       let mut _2: structs::U;              // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n       let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+6:18: +6:19\n-+     let mut _4: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++     let mut _4: usize;                   // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++     let mut _5: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n   \n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n +         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n +         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n           _3 = _1;                         // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n -         _2 = U { _foo: const 0_usize, a: move _3 }; // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n-+         _4 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         _4 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         _5 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n +         nop;                             // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n           StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:20: +6:21\n -         _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n -         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n-+         _0 = _4;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n++         _0 = _5;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n +         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n +         nop;                             // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n           return;                          // scope 0 at $DIR/sroa.rs:+7:2: +7:2\n       }"}]}