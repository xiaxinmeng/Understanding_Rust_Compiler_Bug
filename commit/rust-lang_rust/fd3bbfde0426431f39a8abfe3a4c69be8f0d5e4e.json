{"sha": "fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkM2JiZmRlMDQyNjQzMWYzOWE4YWJmZTNhNGM2OWJlOGYwZDVlNGU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-07T18:22:44Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-07T18:22:44Z"}, "message": "Merge remote-tracking branch 'origin/master'", "tree": {"sha": "67b4872beec1b5444a937062eabe5fdab16b3848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67b4872beec1b5444a937062eabe5fdab16b3848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAliaEHcACgkQpp+NIls6\n19n7Jw//c+GRUAgd7uoRghddc/8QPArl48y9uSMqEBgWP5JxMFgqKFv+tkqw1NhS\nLea0Oo4R546J8jRid7gpJB/astxJNOufpe/6yUi7q5j+kdr2NiRDiiHZiVa4JZGi\nE9BYE7UkE0up1Z15qFkT+GJNJR//wkraHAS3hX9wgdfB11FuYvTNXMnIcmnB+JE6\nuuVCS7i41JSTzVOc8laBHngn+Oc/4s/kv8PULlEVXwgdCJVKDCxq8EkTJOZDsy38\n9dwUo1OBoNN6W7XIesFy6jdZQzzefd3s07vi8XYsOMSMYcpfagNfdToCXXWeQduo\nDlX3rkgKoy1g3bLtho+yVmCT8F/qpBuf5U8NyooGg1RzPsKJuaW4Rm1iK9vIt4VT\nPa14tt9sBaO6ryDOFT8qehIGVg6ycHx8HAU6MRF3pKCczqEIMjwhJBSAYnjNLs0/\nAf8EcnQKG6yEreg3dvKOt9YhdKwcga9VnPnGG6OfVxwS9eXYSeYZR7E/o1hx1gLR\nYM21CdOSCo/umeupUXAs415jQgotrG+UsOkwslWdeQO0hVOpQtu1DRNhEUrrb+fe\nb3rpnunr/ZtI3JSBNHtBdL9igEnK6HBqqGG7cxghElygQUnB5ZDpxXo7uIYKgvkh\nOfStocc6699KmcozlNNdkqXnhv4MFZEcMCrAcZoS9Z2A76fr5wc=\n=mN8T\n-----END PGP SIGNATURE-----", "payload": "tree 67b4872beec1b5444a937062eabe5fdab16b3848\nparent 01ac19d3585ef90d9aeb70aab501c4fbda931fca\nparent 63cd99440907840a8264883a9d2d84690f463a51\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486491764 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486491764 +0100\n\nMerge remote-tracking branch 'origin/master'\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "html_url": "https://github.com/rust-lang/rust/commit/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01ac19d3585ef90d9aeb70aab501c4fbda931fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ac19d3585ef90d9aeb70aab501c4fbda931fca", "html_url": "https://github.com/rust-lang/rust/commit/01ac19d3585ef90d9aeb70aab501c4fbda931fca"}, {"sha": "63cd99440907840a8264883a9d2d84690f463a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/63cd99440907840a8264883a9d2d84690f463a51", "html_url": "https://github.com/rust-lang/rust/commit/63cd99440907840a8264883a9d2d84690f463a51"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "ac6fffd1e0dc3e4e862903607e28dcc80abac040", "filename": "src/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "patch": "@@ -746,7 +746,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n             }\n \n-            ty::TyTuple(fields) => Ok(fields[field_index]),\n+            ty::TyTuple(fields, _) => Ok(fields[field_index]),\n \n             ty::TyRef(_, ref tam) |\n             ty::TyRawPtr(ref tam) => self.get_fat_field(tam.ty, field_index),"}, {"sha": "fd90b33c82b7eb4a15e734afcbc754187f711f01", "filename": "src/step.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "patch": "@@ -157,6 +157,8 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n             let mir = this.ecx.load_mir(def_id)?;\n             this.ecx.globals.insert(cid, Global::uninitialized(mir.return_ty));\n             let cleanup = StackPopCleanup::MarkStatic(!immutable || mir.return_ty.type_contents(this.ecx.tcx).interior_unsafe());\n+            let name = ty::tls::with(|tcx| tcx.item_path_str(def_id));\n+            trace!(\"pushing stack frame for global: {}\", name);\n             this.ecx.push_stack_frame(def_id, span, mir, substs, Lvalue::Global(cid), cleanup, Vec::new())\n         });\n     }\n@@ -201,6 +203,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                 self.try(|this| {\n                     let ty = this.ecx.monomorphize(mir.return_ty, this.substs);\n                     this.ecx.globals.insert(cid, Global::uninitialized(ty));\n+                    trace!(\"pushing stack frame for {:?}\", index);\n                     this.ecx.push_stack_frame(this.def_id,\n                                               constant.span,\n                                               mir,"}, {"sha": "e8fe9865783cb25e43ed2284c498845de8313a4e", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=fd3bbfde0426431f39a8abfe3a4c69be8f0d5e4e", "patch": "@@ -520,7 +520,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         if let Some((last, last_ty)) = args.pop() {\n             let last_layout = self.type_layout(last_ty)?;\n             match (&last_ty.sty, last_layout) {\n-                (&ty::TyTuple(fields),\n+                (&ty::TyTuple(fields, _),\n                  &Layout::Univariant { ref variant, .. }) => {\n                     let offsets = variant.offsets.iter().map(|s| s.bytes());\n                     let last_ptr = match last {\n@@ -786,7 +786,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     drop,\n                 )?;\n             },\n-            ty::TyTuple(fields) => {\n+            ty::TyTuple(fields, _) => {\n                 let offsets = match *self.type_layout(ty)? {\n                     Layout::Univariant { ref variant, .. } => &variant.offsets,\n                     _ => bug!(\"tuples must be univariant\"),"}]}