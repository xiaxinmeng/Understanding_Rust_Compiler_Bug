{"sha": "369058eacde8ffdfeed9b362b10720799729a835", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OTA1OGVhY2RlOGZmZGZlZWQ5YjM2MmIxMDcyMDc5OTcyOWE4MzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T01:54:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-07T21:17:50Z"}, "message": "Point at coercion reason for if exprs without else clause\n\n```\nerror[E0317]: if may be missing an else clause\n  --> $DIR/if-without-else-as-fn-expr.rs:2:5\n   |\nLL |   fn foo(bar: usize) -> usize {\n   |                         ----- found `usize` because of this return type\nLL | /     if bar % 5 == 0 {\nLL | |         return 3;\nLL | |     }\n   | |_____^ expected (), found usize\n   |\n   = note: expected type `()`\n              found type `usize`\n   = note: `if` expressions without `else` must evaluate to `()`\n```", "tree": {"sha": "e5c9b2b287ffd8005fb5e876aabb660e1911d95f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5c9b2b287ffd8005fb5e876aabb660e1911d95f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/369058eacde8ffdfeed9b362b10720799729a835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/369058eacde8ffdfeed9b362b10720799729a835", "html_url": "https://github.com/rust-lang/rust/commit/369058eacde8ffdfeed9b362b10720799729a835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/369058eacde8ffdfeed9b362b10720799729a835/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dca0a1bef4141e75326caacc3cd59f3d5be8e", "html_url": "https://github.com/rust-lang/rust/commit/f22dca0a1bef4141e75326caacc3cd59f3d5be8e"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "be09af093e2ba26666cbbed62209d0ede61ed94b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/369058eacde8ffdfeed9b362b10720799729a835/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369058eacde8ffdfeed9b362b10720799729a835/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=369058eacde8ffdfeed9b362b10720799729a835", "patch": "@@ -3472,8 +3472,39 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // We won't diverge unless both branches do (or the condition does).\n             self.diverges.set(cond_diverges | then_diverges & else_diverges);\n         } else {\n+            // If this `if` expr is the parent's function return expr, the cause of the type\n+            // coercion is the return type, point at it. (#25228)\n+            let mut ret_reason = None;\n+            if let Node::Block(block) = self.tcx.hir().get_by_hir_id(\n+                self.tcx.hir().get_parent_node_by_hir_id(\n+                    self.tcx.hir().get_parent_node_by_hir_id(then_expr.hir_id),\n+                ),\n+            ) {\n+                // check that the body's parent is an fn\n+                let parent = self.tcx.hir().get_by_hir_id(\n+                    self.tcx.hir().get_parent_node_by_hir_id(\n+                        self.tcx.hir().get_parent_node_by_hir_id(block.hir_id),\n+                    ),\n+                );\n+                if let (Some(expr), Node::Item(hir::Item {\n+                    node: hir::ItemKind::Fn(..), ..\n+                })) = (&block.expr, parent) {\n+                    // check that the `if` expr without `else` is the fn body's expr\n+                    if expr.span == sp {\n+                        ret_reason = self.get_fn_decl(then_expr.hir_id).map(|(fn_decl, _)| (\n+                            fn_decl.output.span(),\n+                            format!(\"found `{}` because of this return type\", fn_decl.output),\n+                        ));\n+                    }\n+                }\n+            }\n             let else_cause = self.cause(sp, ObligationCauseCode::IfExpressionWithNoElse);\n-            coerce.coerce_forced_unit(self, &else_cause, &mut |_| (), true);\n+            coerce.coerce_forced_unit(self, &else_cause, &mut |err| {\n+                if let Some((sp, msg)) = &ret_reason {\n+                    err.span_label(*sp, msg.as_str());\n+                }\n+                err.note(\"`if` expressions without `else` must evaluate to `()`\");\n+            }, true);\n \n             // If the condition is false we can't diverge.\n             self.diverges.set(cond_diverges);"}, {"sha": "76ffb49697f53c2d53b5cf15f1adfda0512bab4b", "filename": "src/test/ui/if/if-without-else-as-fn-expr.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs?ref=369058eacde8ffdfeed9b362b10720799729a835", "patch": "@@ -0,0 +1,10 @@\n+fn foo(bar: usize) -> usize {\n+    if bar % 5 == 0 {\n+        return 3;\n+    }\n+    //~^^^ ERROR if may be missing an else clause\n+}\n+\n+fn main() {\n+    let _ = foo(1);\n+}"}, {"sha": "b8628ee291d251e88f1ae9cc4068643ef928003e", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=369058eacde8ffdfeed9b362b10720799729a835", "patch": "@@ -0,0 +1,17 @@\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/if-without-else-as-fn-expr.rs:2:5\n+   |\n+LL |   fn foo(bar: usize) -> usize {\n+   |                         ----- found `usize` because of this return type\n+LL | /     if bar % 5 == 0 {\n+LL | |         return 3;\n+LL | |     }\n+   | |_____^ expected (), found usize\n+   |\n+   = note: expected type `()`\n+              found type `usize`\n+   = note: `if` expressions without `else` must evaluate to `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0317`."}, {"sha": "6e720d59af5bdb755d01ca043df3fae59a626c7d", "filename": "src/test/ui/if/if-without-else-result.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-result.stderr?ref=369058eacde8ffdfeed9b362b10720799729a835", "patch": "@@ -6,6 +6,7 @@ LL |     let a = if true { true };\n    |\n    = note: expected type `()`\n               found type `bool`\n+   = note: `if` expressions without `else` must evaluate to `()`\n \n error: aborting due to previous error\n "}, {"sha": "fcda41d78cc2d86a73ab512b8ecc29848c30c95c", "filename": "src/test/ui/issues/issue-4201.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4201.stderr?ref=369058eacde8ffdfeed9b362b10720799729a835", "patch": "@@ -13,6 +13,7 @@ LL | |     };\n    |\n    = note: expected type `()`\n               found type `{integer}`\n+   = note: `if` expressions without `else` must evaluate to `()`\n \n error: aborting due to previous error\n "}, {"sha": "2747f9375f86bb3462fae65d1d4339c162444ac0", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/369058eacde8ffdfeed9b362b10720799729a835/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=369058eacde8ffdfeed9b362b10720799729a835", "patch": "@@ -6,6 +6,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: expected type `()`\n               found type `isize`\n+   = note: `if` expressions without `else` must evaluate to `()`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}]}