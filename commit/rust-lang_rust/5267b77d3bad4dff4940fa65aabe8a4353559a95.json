{"sha": "5267b77d3bad4dff4940fa65aabe8a4353559a95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNjdiNzdkM2JhZDRkZmY0OTQwZmE2NWFhYmU4YTQzNTM1NTlhOTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-12T19:10:36Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-12T19:10:36Z"}, "message": "Add more LLVM library bindings to rustc.", "tree": {"sha": "247c8e8b3d0b34fa43364c0f20a4a1d7eb5336fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247c8e8b3d0b34fa43364c0f20a4a1d7eb5336fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5267b77d3bad4dff4940fa65aabe8a4353559a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5267b77d3bad4dff4940fa65aabe8a4353559a95", "html_url": "https://github.com/rust-lang/rust/commit/5267b77d3bad4dff4940fa65aabe8a4353559a95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5267b77d3bad4dff4940fa65aabe8a4353559a95/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0d1fbae538fbb673fd1d03e0efcf89874ed88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0d1fbae538fbb673fd1d03e0efcf89874ed88d", "html_url": "https://github.com/rust-lang/rust/commit/bc0d1fbae538fbb673fd1d03e0efcf89874ed88d"}], "stats": {"total": 352, "additions": 350, "deletions": 2}, "files": [{"sha": "af6a689366f9b324c66ce25f0bab95fa6075b417", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 350, "deletions": 2, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/5267b77d3bad4dff4940fa65aabe8a4353559a95/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5267b77d3bad4dff4940fa65aabe8a4353559a95/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=5267b77d3bad4dff4940fa65aabe8a4353559a95", "patch": "@@ -20,6 +20,14 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   type PassManagerRef;\n   type UseRef;\n \n+  /* FIXME: These are enums in the C header. Represent them how, in rust? */\n+  type Linkage;\n+  type Attribute;\n+  type Visibility;\n+  type CallConv;\n+  type IntPredicate;\n+  type RealPredicate;\n+  type Opcode;\n \n   /* Create and destroy contexts. */\n   fn ContextCreate() -> ContextRef;\n@@ -29,7 +37,7 @@ native mod llvm = \"libLLVM-2.7.so\" {\n   fn GetMDKindID(sbuf Name, uint SLen) -> uint;\n \n   /* Create and destroy modules. */\n-  fn ModuleCreateWithName(sbuf ModuleID) -> ModuleRef;\n+  fn ModuleCreateWithNameInContext(sbuf ModuleID, ContextRef C) -> ModuleRef;\n   fn DisposeModule(ModuleRef M);\n \n   /** Data layout. See Module::getDataLayout. */\n@@ -274,4 +282,344 @@ native mod llvm = \"libLLVM-2.7.so\" {\n                     Bool HasSideEffects, Bool IsAlignStack) -> ValueRef;\n   fn BlockAddress(ValueRef F, BasicBlockRef BB) -> ValueRef;\n \n-}\n\\ No newline at end of file\n+\n+\n+  /* Operations on global variables, functions, and aliases (globals) */\n+  fn GetGlobalParent(ValueRef Global) -> ModuleRef;\n+  fn IsDeclaration(ValueRef Global) -> Bool;\n+  fn GetLinkage(ValueRef Global) -> Linkage;\n+  fn SetLinkage(ValueRef Global, Linkage Link);\n+  fn GetSection(ValueRef Global) -> sbuf;\n+  fn SetSection(ValueRef Global, sbuf Section);\n+  fn GetVisibility(ValueRef Global) -> Visibility;\n+  fn SetVisibility(ValueRef Global, Visibility Viz);\n+  fn GetAlignment(ValueRef Global) -> uint;\n+  fn SetAlignment(ValueRef Global, uint Bytes);\n+\n+\n+  /* Operations on global variables */\n+  fn AddGlobal(ModuleRef M, TypeRef Ty, sbuf Name) -> ValueRef;\n+  fn AddGlobalInAddressSpace(ModuleRef M, TypeRef Ty,\n+                             sbuf Name,\n+                             uint AddressSpace) -> ValueRef;\n+  fn GetNamedGlobal(ModuleRef M, sbuf Name) -> ValueRef;\n+  fn GetFirstGlobal(ModuleRef M) -> ValueRef;\n+  fn GetLastGlobal(ModuleRef M) -> ValueRef;\n+  fn GetNextGlobal(ValueRef GlobalVar) -> ValueRef;\n+  fn GetPreviousGlobal(ValueRef GlobalVar) -> ValueRef;\n+  fn DeleteGlobal(ValueRef GlobalVar);\n+  fn GetInitializer(ValueRef GlobalVar) -> ValueRef;\n+  fn SetInitializer(ValueRef GlobalVar, ValueRef ConstantVal);\n+  fn IsThreadLocal(ValueRef GlobalVar) -> Bool;\n+  fn SetThreadLocal(ValueRef GlobalVar, Bool IsThreadLocal);\n+  fn IsGlobalConstant(ValueRef GlobalVar) -> Bool;\n+  fn SetGlobalConstant(ValueRef GlobalVar, Bool IsConstant);\n+\n+  /* Operations on aliases */\n+  fn AddAlias(ModuleRef M, TypeRef Ty, ValueRef Aliasee,\n+              sbuf Name) -> ValueRef;\n+\n+  /* Operations on functions */\n+  fn AddFunction(ModuleRef M, sbuf Name,\n+                 TypeRef FunctionTy) -> ValueRef;\n+  fn GetNamedFunction(ModuleRef M, sbuf Name) -> ValueRef;\n+  fn GetFirstFunction(ModuleRef M) -> ValueRef;\n+  fn GetLastFunction(ModuleRef M) -> ValueRef;\n+  fn GetNextFunction(ValueRef Fn) -> ValueRef;\n+  fn GetPreviousFunction(ValueRef Fn) -> ValueRef;\n+  fn DeleteFunction(ValueRef Fn);\n+  fn GetIntrinsicID(ValueRef Fn) -> uint;\n+  fn GetFunctionCallConv(ValueRef Fn) -> uint;\n+  fn SetFunctionCallConv(ValueRef Fn, uint CC);\n+  fn GetGC(ValueRef Fn) -> sbuf;\n+  fn SetGC(ValueRef Fn, sbuf Name);\n+  fn AddFunctionAttr(ValueRef Fn, Attribute PA);\n+  fn GetFunctionAttr(ValueRef Fn) -> Attribute;\n+  fn RemoveFunctionAttr(ValueRef Fn, Attribute PA);\n+\n+  /* Operations on parameters */\n+  fn CountParams(ValueRef Fn) -> uint;\n+  fn GetParams(ValueRef Fn, vbuf Params);\n+  fn GetParam(ValueRef Fn, uint Index) -> ValueRef;\n+  fn GetParamParent(ValueRef Inst) -> ValueRef;\n+  fn GetFirstParam(ValueRef Fn) -> ValueRef;\n+  fn GetLastParam(ValueRef Fn) -> ValueRef;\n+  fn GetNextParam(ValueRef Arg) -> ValueRef;\n+  fn GetPreviousParam(ValueRef Arg) -> ValueRef;\n+  fn AddAttribute(ValueRef Arg, Attribute PA);\n+  fn RemoveAttribute(ValueRef Arg, Attribute PA);\n+  fn GetAttribute(ValueRef Arg) -> Attribute;\n+  fn SetParamAlignment(ValueRef Arg, uint align);\n+\n+  /* Operations on basic blocks */\n+  fn BasicBlockAsValue(BasicBlockRef BB) -> ValueRef;\n+  fn ValueIsBasicBlock(ValueRef Val) -> Bool;\n+  fn ValueAsBasicBlock(ValueRef Val) -> BasicBlockRef;\n+  fn GetBasicBlockParent(BasicBlockRef BB) -> ValueRef;\n+  fn CountBasicBlocks(ValueRef Fn) -> uint;\n+  fn GetBasicBlocks(ValueRef Fn, vbuf BasicBlocks);\n+  fn GetFirstBasicBlock(ValueRef Fn) -> BasicBlockRef;\n+  fn GetLastBasicBlock(ValueRef Fn) -> BasicBlockRef;\n+  fn GetNextBasicBlock(BasicBlockRef BB) -> BasicBlockRef;\n+  fn GetPreviousBasicBlock(BasicBlockRef BB) -> BasicBlockRef;\n+  fn GetEntryBasicBlock(ValueRef Fn) -> BasicBlockRef;\n+\n+  fn AppendBasicBlockInContext(ContextRef C, ValueRef Fn,\n+                               sbuf Name) -> BasicBlockRef;\n+  fn InsertBasicBlockInContext(ContextRef C, BasicBlockRef BB,\n+                               sbuf Name) -> BasicBlockRef;\n+\n+  fn AppendBasicBlock(ValueRef Fn, sbuf Name) -> BasicBlockRef;\n+  fn InsertBasicBlock(BasicBlockRef InsertBeforeBB,\n+                      sbuf Name) -> BasicBlockRef;\n+  fn DeleteBasicBlock(BasicBlockRef BB);\n+\n+  /* Operations on instructions */\n+  fn GetInstructionParent(ValueRef Inst) -> BasicBlockRef;\n+  fn GetFirstInstruction(BasicBlockRef BB) -> ValueRef;\n+  fn GetLastInstruction(BasicBlockRef BB) -> ValueRef;\n+  fn GetNextInstruction(ValueRef Inst) -> ValueRef;\n+  fn GetPreviousInstruction(ValueRef Inst) -> ValueRef;\n+\n+  /* Operations on call sites */\n+  fn SetInstructionCallConv(ValueRef Instr, uint CC);\n+  fn GetInstructionCallConv(ValueRef Instr) -> uint;\n+  fn AddInstrAttribute(ValueRef Instr, uint index, Attribute IA);\n+  fn RemoveInstrAttribute(ValueRef Instr, uint index, Attribute IA);\n+  fn SetInstrParamAlignment(ValueRef Instr, uint index, uint align);\n+\n+  /* Operations on call instructions (only) */\n+  fn IsTailCall(ValueRef CallInst) -> Bool;\n+  fn SetTailCall(ValueRef CallInst, Bool IsTailCall);\n+\n+  /* Operations on phi nodes */\n+  fn AddIncoming(ValueRef PhiNode, vbuf IncomingValues,\n+                 vbuf IncomingBlocks, uint Count);\n+  fn CountIncoming(ValueRef PhiNode) -> uint;\n+  fn GetIncomingValue(ValueRef PhiNode, uint Index) -> ValueRef;\n+  fn GetIncomingBlock(ValueRef PhiNode, uint Index) -> BasicBlockRef;\n+\n+  /* Instruction builders */\n+  fn CreateBuilderInContext(ContextRef C) -> BuilderRef;\n+  fn CreateBuilder() -> BuilderRef;\n+  fn PositionBuilder(BuilderRef Builder, BasicBlockRef Block,\n+                     ValueRef Instr);\n+  fn PositionBuilderBefore(BuilderRef Builder, ValueRef Instr);\n+  fn PositionBuilderAtEnd(BuilderRef Builder, BasicBlockRef Block);\n+  fn GetInsertBlock(BuilderRef Builder) -> BasicBlockRef;\n+  fn ClearInsertionPosition(BuilderRef Builder);\n+  fn InsertIntoBuilder(BuilderRef Builder, ValueRef Instr);\n+  fn InsertIntoBuilderWithName(BuilderRef Builder, ValueRef Instr,\n+                               sbuf Name);\n+  fn DisposeBuilder(BuilderRef Builder);\n+\n+  /* Metadata */\n+  fn SetCurrentDebugLocation(BuilderRef Builder, ValueRef L);\n+  fn GetCurrentDebugLocation(BuilderRef Builder) -> ValueRef;\n+  fn SetInstDebugLocation(BuilderRef Builder, ValueRef Inst);\n+\n+  /* Terminators */\n+  fn BuildRetVoid(BuilderRef B) -> ValueRef;\n+  fn BuildRet(BuilderRef B, ValueRef V) -> ValueRef;\n+  fn BuildAggregateRet(BuilderRef B, vbuf RetVals,\n+                       uint N) -> ValueRef;\n+  fn BuildBr(BuilderRef B, BasicBlockRef Dest) -> ValueRef;\n+  fn BuildCondBr(BuilderRef B, ValueRef If,\n+                 BasicBlockRef Then, BasicBlockRef Else) -> ValueRef;\n+  fn BuildSwitch(BuilderRef B, ValueRef V,\n+                 BasicBlockRef Else, uint NumCases) -> ValueRef;\n+  fn BuildIndirectBr(BuilderRef B, ValueRef Addr,\n+                     uint NumDests) -> ValueRef;\n+  fn BuildInvoke(BuilderRef B, ValueRef Fn,\n+                 vbuf Args, uint NumArgs,\n+                 BasicBlockRef Then, BasicBlockRef Catch,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildUnwind(BuilderRef B) -> ValueRef;\n+  fn BuildUnreachable(BuilderRef B) -> ValueRef;\n+\n+  /* Add a case to the switch instruction */\n+  fn AddCase(ValueRef Switch, ValueRef OnVal,\n+             BasicBlockRef Dest);\n+\n+  /* Add a destination to the indirectbr instruction */\n+  fn AddDestination(ValueRef IndirectBr, BasicBlockRef Dest);\n+\n+  /* Arithmetic */\n+  fn BuildAdd(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+              sbuf Name) -> ValueRef;\n+  fn BuildNSWAdd(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildNUWAdd(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildFAdd(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildSub(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+              sbuf Name) -> ValueRef;\n+  fn BuildNSWSub(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildNUWSub(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildFSub(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildMul(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+              sbuf Name) -> ValueRef;\n+  fn BuildNSWMul(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildNUWMul(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildFMul(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildUDiv(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildSDiv(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildExactSDiv(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+                    sbuf Name) -> ValueRef;\n+  fn BuildFDiv(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildURem(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildSRem(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildFRem(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildShl(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+              sbuf Name) -> ValueRef;\n+  fn BuildLShr(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildAShr(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildAnd(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+              sbuf Name) -> ValueRef;\n+  fn BuildOr(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+             sbuf Name) -> ValueRef;\n+  fn BuildXor(BuilderRef B, ValueRef LHS, ValueRef RHS,\n+              sbuf Name) -> ValueRef;\n+  fn BuildBinOp(BuilderRef B, Opcode Op,\n+                ValueRef LHS, ValueRef RHS,\n+                sbuf Name) -> ValueRef;\n+  fn BuildNeg(BuilderRef B, ValueRef V, sbuf Name) -> ValueRef;\n+  fn BuildNSWNeg(BuilderRef B, ValueRef V,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildNUWNeg(BuilderRef B, ValueRef V,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildFNeg(BuilderRef B, ValueRef V, sbuf Name) -> ValueRef;\n+  fn BuildNot(BuilderRef B, ValueRef V, sbuf Name) -> ValueRef;\n+\n+  /* Memory */\n+  fn BuildMalloc(BuilderRef B, TypeRef Ty, sbuf Name) -> ValueRef;\n+  fn BuildArrayMalloc(BuilderRef B, TypeRef Ty,\n+                      ValueRef Val, sbuf Name) -> ValueRef;\n+  fn BuildAlloca(BuilderRef B, TypeRef Ty, sbuf Name) -> ValueRef;\n+  fn BuildArrayAlloca(BuilderRef B, TypeRef Ty,\n+                      ValueRef Val, sbuf Name) -> ValueRef;\n+  fn BuildFree(BuilderRef B, ValueRef PointerVal) -> ValueRef;\n+  fn BuildLoad(BuilderRef B, ValueRef PointerVal,\n+               sbuf Name) -> ValueRef;\n+  fn BuildStore(BuilderRef B, ValueRef Val, ValueRef Ptr) -> ValueRef;\n+  fn BuildGEP(BuilderRef B, ValueRef Pointer,\n+              vbuf Indices, uint NumIndices,\n+              sbuf Name) -> ValueRef;\n+  fn BuildInBoundsGEP(BuilderRef B, ValueRef Pointer,\n+                      vbuf Indices, uint NumIndices,\n+                      sbuf Name) -> ValueRef;\n+  fn BuildStructGEP(BuilderRef B, ValueRef Pointer,\n+                    uint Idx, sbuf Name) -> ValueRef;\n+  fn BuildGlobalString(BuilderRef B, sbuf Str,\n+                       sbuf Name) -> ValueRef;\n+  fn BuildGlobalStringPtr(BuilderRef B, sbuf Str,\n+                          sbuf Name) -> ValueRef;\n+\n+  /* Casts */\n+  fn BuildTrunc(BuilderRef B, ValueRef Val,\n+                TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildZExt(BuilderRef B, ValueRef Val,\n+               TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildSExt(BuilderRef B, ValueRef Val,\n+               TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildFPToUI(BuilderRef B, ValueRef Val,\n+                 TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildFPToSI(BuilderRef B, ValueRef Val,\n+                 TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildUIToFP(BuilderRef B, ValueRef Val,\n+                 TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildSIToFP(BuilderRef B, ValueRef Val,\n+                 TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildFPTrunc(BuilderRef B, ValueRef Val,\n+                  TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildFPExt(BuilderRef B, ValueRef Val,\n+                TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildPtrToInt(BuilderRef B, ValueRef Val,\n+                   TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildIntToPtr(BuilderRef B, ValueRef Val,\n+                   TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildBitCast(BuilderRef B, ValueRef Val,\n+                  TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildZExtOrBitCast(BuilderRef B, ValueRef Val,\n+                        TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildSExtOrBitCast(BuilderRef B, ValueRef Val,\n+                        TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildTruncOrBitCast(BuilderRef B, ValueRef Val,\n+                         TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildCast(BuilderRef B, Opcode Op, ValueRef Val,\n+               TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildPointerCast(BuilderRef B, ValueRef Val,\n+                      TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildIntCast(BuilderRef B, ValueRef Val,\n+                  TypeRef DestTy, sbuf Name) -> ValueRef;\n+  fn BuildFPCast(BuilderRef B, ValueRef Val,\n+                 TypeRef DestTy, sbuf Name) -> ValueRef;\n+\n+  /* Comparisons */\n+  fn BuildICmp(BuilderRef B, IntPredicate Op,\n+               ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+  fn BuildFCmp(BuilderRef B, RealPredicate Op,\n+               ValueRef LHS, ValueRef RHS,\n+               sbuf Name) -> ValueRef;\n+\n+  /* Miscellaneous instructions */\n+  fn BuildPhi(BuilderRef B, TypeRef Ty, sbuf Name) -> ValueRef;\n+  fn BuildCall(BuilderRef B, ValueRef Fn,\n+               vbuf Args, uint NumArgs,\n+               sbuf Name) -> ValueRef;\n+  fn BuildSelect(BuilderRef B, ValueRef If,\n+                 ValueRef Then, ValueRef Else,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildVAArg(BuilderRef B, ValueRef List, TypeRef Ty,\n+                sbuf Name) -> ValueRef;\n+  fn BuildExtractElement(BuilderRef B, ValueRef VecVal,\n+                         ValueRef Index, sbuf Name) -> ValueRef;\n+  fn BuildInsertElement(BuilderRef B, ValueRef VecVal,\n+                        ValueRef EltVal, ValueRef Index,\n+                        sbuf Name) -> ValueRef;\n+  fn BuildShuffleVector(BuilderRef B, ValueRef V1,\n+                        ValueRef V2, ValueRef Mask,\n+                        sbuf Name) -> ValueRef;\n+  fn BuildExtractValue(BuilderRef B, ValueRef AggVal,\n+                       uint Index, sbuf Name) -> ValueRef;\n+  fn BuildInsertValue(BuilderRef B, ValueRef AggVal,\n+                      ValueRef EltVal, uint Index,\n+                      sbuf Name) -> ValueRef;\n+\n+  fn BuildIsNull(BuilderRef B, ValueRef Val,\n+                 sbuf Name) -> ValueRef;\n+  fn BuildIsNotNull(BuilderRef B, ValueRef Val,\n+                    sbuf Name) -> ValueRef;\n+  fn BuildPtrDiff(BuilderRef B, ValueRef LHS,\n+                  ValueRef RHS, sbuf Name) -> ValueRef;\n+\n+\n+\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:\n+//"}]}