{"sha": "1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "node_id": "C_kwDOAAsO6NoAKDFjYTllYjhlYzNiY2Y4ODYwZDA4YTRlOTJmMGViOGViYmYxMTJmYzQ", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-06-26T19:40:45Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-09T00:55:55Z"}, "message": "Remove ReEmpty", "tree": {"sha": "1dfc3c24565deb51caebc3acc00391267d444a5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dfc3c24565deb51caebc3acc00391267d444a5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "html_url": "https://github.com/rust-lang/rust/commit/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd0335a27f03c0b654c49d188e122c3a0776c6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0335a27f03c0b654c49d188e122c3a0776c6a3", "html_url": "https://github.com/rust-lang/rust/commit/dd0335a27f03c0b654c49d188e122c3a0776c6a3"}], "stats": {"total": 320, "additions": 64, "deletions": 256}, "files": [{"sha": "ce7c2841662b247d65772d348ca4295f621a7246", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -357,11 +357,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 ty::BoundRegionKind::BrAnon(_) => None,\n             },\n \n-            ty::ReLateBound(..)\n-            | ty::ReVar(..)\n-            | ty::RePlaceholder(..)\n-            | ty::ReEmpty(_)\n-            | ty::ReErased => None,\n+            ty::ReLateBound(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => None,\n         }\n     }\n "}, {"sha": "9d088642f7773eca6e2133cc4bff4eb0b19f5657", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -486,9 +486,9 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n             ty::ReErased => return r,\n \n             // The regions that we expect from borrow checking.\n-            ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReEmpty(ty::UniverseIndex::ROOT) => {}\n+            ty::ReEarlyBound(_) | ty::ReFree(_) => {}\n \n-            ty::ReEmpty(_) | ty::RePlaceholder(_) | ty::ReVar(_) => {\n+            ty::RePlaceholder(_) | ty::ReVar(_) => {\n                 // All of the regions in the type should either have been\n                 // erased by writeback, or mapped back to named regions by\n                 // borrow checking."}, {"sha": "f1b1c33a1054362acdacbb24dd567c8dc4c85942", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -347,13 +347,6 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n \n             match outlives_bound {\n                 OutlivesBound::RegionSubRegion(r1, r2) => {\n-                    // `where Type:` is lowered to `where Type: 'empty` so that\n-                    // we check `Type` is well formed, but there's no use for\n-                    // this bound here.\n-                    if r1.is_empty() {\n-                        return;\n-                    }\n-\n                     // The bound says that `r1 <= r2`; we store `r2: r1`.\n                     let r1 = self.universal_regions.to_region_vid(r1);\n                     let r2 = self.universal_regions.to_region_vid(r2);"}, {"sha": "8cf9ed53d39d085ae58a9d47f5130ec8330845a8", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -54,13 +54,6 @@ pub struct UniversalRegions<'tcx> {\n     /// The total number of universal region variables instantiated.\n     num_universals: usize,\n \n-    /// A special region variable created for the `'empty(U0)` region.\n-    /// Note that this is **not** a \"universal\" region, as it doesn't\n-    /// represent a universally bound placeholder or any such thing.\n-    /// But we do create it here in this type because it's a useful region\n-    /// to have around in a few limited cases.\n-    pub root_empty: RegionVid,\n-\n     /// The \"defining\" type for this function, with all universal\n     /// regions instantiated. For a closure or generator, this is the\n     /// closure type, but for a top-level function it's the `FnDef`.\n@@ -323,11 +316,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n \n     /// See `UniversalRegionIndices::to_region_vid`.\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n-        if let ty::ReEmpty(ty::UniverseIndex::ROOT) = *r {\n-            self.root_empty\n-        } else {\n-            self.indices.to_region_vid(r)\n-        }\n+        self.indices.to_region_vid(r)\n     }\n \n     /// As part of the NLL unit tests, you can annotate a function with\n@@ -501,16 +490,10 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             _ => None,\n         };\n \n-        let root_empty = self\n-            .infcx\n-            .next_nll_region_var(NllRegionVariableOrigin::Existential { from_forall: true })\n-            .to_region_vid();\n-\n         UniversalRegions {\n             indices,\n             fr_static,\n             fr_fn_body,\n-            root_empty,\n             first_extern_index,\n             first_local_index,\n             num_universals,"}, {"sha": "7e051835b4bdf13c0991f04aecb9f41042f19678", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -27,13 +27,6 @@ impl<'a> DescriptionCtx<'a> {\n                 me.kind = \"restatic\";\n             }\n \n-            ty::ReEmpty(ty::UniverseIndex::ROOT) => me.kind = \"reempty\",\n-\n-            ty::ReEmpty(ui) => {\n-                me.kind = \"reemptyuni\";\n-                me.arg = format!(\"{:?}\", ui);\n-            }\n-\n             ty::RePlaceholder(_) => return None,\n \n             // FIXME(#13998) RePlaceholder should probably print like"}, {"sha": "9488d0a6cbb68c766f5fbf57536263768f53603d", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -180,11 +180,7 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n         r: ty::Region<'tcx>,\n     ) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReFree(_)\n-            | ty::ReErased\n-            | ty::ReStatic\n-            | ty::ReEmpty(ty::UniverseIndex::ROOT)\n-            | ty::ReEarlyBound(..) => r,\n+            ty::ReFree(_) | ty::ReErased | ty::ReStatic | ty::ReEarlyBound(..) => r,\n \n             ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(\n                 CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(placeholder) },\n@@ -199,10 +195,6 @@ impl CanonicalizeMode for CanonicalizeQueryResponse {\n                 )\n             }\n \n-            ty::ReEmpty(ui) => {\n-                bug!(\"canonicalizing 'empty in universe {:?}\", ui) // FIXME\n-            }\n-\n             _ => {\n                 // Other than `'static` or `'empty`, the query\n                 // response should be executing in a fully\n@@ -381,7 +373,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             ty::ReStatic\n             | ty::ReEarlyBound(..)\n             | ty::ReFree(_)\n-            | ty::ReEmpty(_)\n             | ty::RePlaceholder(..)\n             | ty::ReErased => self.canonicalize_mode.canonicalize_free_region(self, r),\n         }"}, {"sha": "524383e381fee9b6c72fd2c577606ef2d905e19e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -688,7 +688,6 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n \n             ty::RePlaceholder(..)\n             | ty::ReVar(..)\n-            | ty::ReEmpty(_)\n             | ty::ReStatic\n             | ty::ReEarlyBound(..)\n             | ty::ReFree(..) => {\n@@ -900,7 +899,6 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n \n             ty::RePlaceholder(..)\n             | ty::ReVar(..)\n-            | ty::ReEmpty(_)\n             | ty::ReStatic\n             | ty::ReEarlyBound(..)\n             | ty::ReFree(..) => {"}, {"sha": "720d74b1ce613f4a893632c7279dbde2b702a5c3", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -96,11 +96,6 @@ pub(super) fn note_and_explain_region<'tcx>(\n             msg_span_from_free_region(tcx, region, alt_span)\n         }\n \n-        ty::ReEmpty(ty::UniverseIndex::ROOT) => (\"the empty lifetime\".to_owned(), alt_span),\n-\n-        // uh oh, hope no user ever sees THIS\n-        ty::ReEmpty(ui) => (format!(\"the empty lifetime in universe {:?}\", ui), alt_span),\n-\n         ty::RePlaceholder(_) => return,\n \n         // FIXME(#13998) RePlaceholder should probably print like\n@@ -139,8 +134,6 @@ fn msg_span_from_free_region<'tcx>(\n             (msg, Some(span))\n         }\n         ty::ReStatic => (\"the static lifetime\".to_owned(), alt_span),\n-        ty::ReEmpty(ty::UniverseIndex::ROOT) => (\"an empty lifetime\".to_owned(), alt_span),\n-        ty::ReEmpty(ui) => (format!(\"an empty lifetime in universe {:?}\", ui), alt_span),\n         _ => bug!(\"{:?}\", region),\n     }\n }\n@@ -250,17 +243,7 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n \n     // Explain the region we are capturing.\n     match *hidden_region {\n-        ty::ReEmpty(ty::UniverseIndex::ROOT) => {\n-            // All lifetimes shorter than the function body are `empty` in\n-            // lexical region resolution. The default explanation of \"an empty\n-            // lifetime\" isn't really accurate here.\n-            let message = format!(\n-                \"hidden type `{}` captures lifetime smaller than the function body\",\n-                hidden_ty\n-            );\n-            err.span_note(span, &message);\n-        }\n-        ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic | ty::ReEmpty(_) => {\n+        ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic => {\n             // Assuming regionck succeeded (*), we ought to always be\n             // capturing *some* region from the fn header, and hence it\n             // ought to be free. So under normal circumstances, we will go"}, {"sha": "fee15afc7b3aaa3077643900e3b3577a646e04fd", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -126,7 +126,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::ReFree(_)\n             | ty::ReVar(_)\n             | ty::RePlaceholder(..)\n-            | ty::ReEmpty(_)\n             | ty::ReErased => {\n                 // replace all free regions with 'erased\n                 self.tcx().lifetimes.re_erased"}, {"sha": "0ed57706790aec894f690ba969bd4058865766a5", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 4, "deletions": 64, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{ReEarlyBound, ReEmpty, ReErased, ReFree, ReStatic};\n+use rustc_middle::ty::{ReEarlyBound, ReErased, ReFree, ReStatic};\n use rustc_middle::ty::{ReLateBound, RePlaceholder, ReVar};\n use rustc_middle::ty::{Region, RegionVid};\n use rustc_span::Span;\n@@ -261,13 +261,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                                         cur_region\n                                     }\n \n-                                    ReEmpty(b_ui) => {\n-                                        // Empty regions are ordered according to the universe\n-                                        // they are associated with.\n-                                        let ui = a_universe.min(b_ui);\n-                                        self.tcx().mk_region(ReEmpty(ui))\n-                                    }\n-\n                                     RePlaceholder(placeholder) => {\n                                         // If the empty and placeholder regions are in the same universe,\n                                         // then the LUB is the Placeholder region (which is the cur_region).\n@@ -399,13 +392,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         a_region\n                     }\n \n-                    ReEmpty(a_ui) => {\n-                        // Empty regions are ordered according to the universe\n-                        // they are associated with.\n-                        let ui = a_ui.min(empty_ui);\n-                        self.tcx().mk_region(ReEmpty(ui))\n-                    }\n-\n                     RePlaceholder(placeholder) => {\n                         // If this empty region is from a universe that can\n                         // name the placeholder, then the placeholder is\n@@ -428,9 +414,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 // check below for a common case, here purely as an\n                 // optimization.\n                 let b_universe = self.var_infos[b_vid].universe;\n-                if let ReEmpty(a_universe) = *a_region && a_universe == b_universe {\n-                    return false;\n-                }\n \n                 let mut lub = self.lub_concrete_regions(a_region, cur_region);\n                 if lub == cur_region {\n@@ -470,7 +453,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 // they are associated with.\n                 a_ui.min(b_ui) == b_ui\n             }\n-            (VarValue::Value(a), VarValue::Empty(b_ui)) => {\n+            (VarValue::Value(a), VarValue::Empty(_)) => {\n                 match *a {\n                     ReLateBound(..) | ReErased => {\n                         bug!(\"cannot relate region: {:?}\", a);\n@@ -493,12 +476,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         false\n                     }\n \n-                    ReEmpty(a_ui) => {\n-                        // Empty regions are ordered according to the universe\n-                        // they are associated with.\n-                        a_ui.min(b_ui) == b_ui\n-                    }\n-\n                     RePlaceholder(_) => {\n                         // The LUB is either `a` or `'static`\n                         false\n@@ -526,12 +503,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         true\n                     }\n \n-                    ReEmpty(b_ui) => {\n-                        // Empty regions are ordered according to the universe\n-                        // they are associated with.\n-                        a_ui.min(b_ui) == b_ui\n-                    }\n-\n                     RePlaceholder(placeholder) => {\n                         // If this empty region is from a universe that can\n                         // name the placeholder, then the placeholder is\n@@ -599,37 +570,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 self.tcx().lifetimes.re_static\n             }\n \n-            (ReEmpty(_), ReEarlyBound(_) | ReFree(_)) => {\n-                // All empty regions are less than early-bound, free,\n-                // and scope regions.\n-                b\n-            }\n-\n-            (ReEarlyBound(_) | ReFree(_), ReEmpty(_)) => {\n-                // All empty regions are less than early-bound, free,\n-                // and scope regions.\n-                a\n-            }\n-\n-            (ReEmpty(a_ui), ReEmpty(b_ui)) => {\n-                // Empty regions are ordered according to the universe\n-                // they are associated with.\n-                let ui = a_ui.min(b_ui);\n-                self.tcx().mk_region(ReEmpty(ui))\n-            }\n-\n-            (ReEmpty(empty_ui), RePlaceholder(placeholder))\n-            | (RePlaceholder(placeholder), ReEmpty(empty_ui)) => {\n-                // If this empty region is from a universe that can\n-                // name the placeholder, then the placeholder is\n-                // larger; otherwise, the only ancestor is `'static`.\n-                if empty_ui.can_name(placeholder.universe) {\n-                    self.tcx().mk_region(RePlaceholder(placeholder))\n-                } else {\n-                    self.tcx().lifetimes.re_static\n-                }\n-            }\n-\n             (ReEarlyBound(_) | ReFree(_), ReEarlyBound(_) | ReFree(_)) => {\n                 self.region_rels.lub_free_regions(a, b)\n             }\n@@ -1088,9 +1028,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 ty::ReVar(rid) => match var_values.values[rid] {\n                     VarValue::ErrorValue => false,\n                     VarValue::Empty(_) => true,\n-                    VarValue::Value(min) => matches!(*min, ty::ReEmpty(_)),\n+                    VarValue::Value(_) => false,\n                 },\n-                _ => matches!(*min, ty::ReEmpty(_)),\n+                _ => false,\n             },\n \n             VerifyBound::AnyBound(bs) => {"}, {"sha": "764ef8fa4bb7853f028ccdda20209b4ed915bc3b", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -699,7 +699,6 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n             ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {\n                 ty::UniverseIndex::ROOT\n             }\n-            ty::ReEmpty(ui) => ui,\n             ty::RePlaceholder(placeholder) => placeholder.universe,\n             ty::ReVar(vid) => self.var_universe(vid),\n             ty::ReLateBound(..) => bug!(\"universe(): encountered bound region {:?}\", region),"}, {"sha": "9dbefe3377252b8eef640537fa4d064f50a9a3cd", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -1978,7 +1978,7 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n \n             ty::ReVar(_) | ty::ReErased => false,\n \n-            ty::ReStatic | ty::ReEmpty(_) => true,\n+            ty::ReStatic => true,\n         }\n     }\n \n@@ -2062,14 +2062,6 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                 p!(\"'static\");\n                 return Ok(self);\n             }\n-            ty::ReEmpty(ty::UniverseIndex::ROOT) => {\n-                p!(\"'<empty>\");\n-                return Ok(self);\n-            }\n-            ty::ReEmpty(ui) => {\n-                p!(write(\"'<empty:{:?}>\", ui));\n-                return Ok(self);\n-            }\n         }\n \n         p!(\"'_\");"}, {"sha": "a8d2ca4a24eb922a33672e041732537c88e22136", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -1511,7 +1511,6 @@ impl<'tcx> Region<'tcx> {\n             ty::ReStatic => true,\n             ty::ReVar(..) => false,\n             ty::RePlaceholder(placeholder) => placeholder.name.is_named(),\n-            ty::ReEmpty(_) => false,\n             ty::ReErased => false,\n         }\n     }\n@@ -1536,11 +1535,6 @@ impl<'tcx> Region<'tcx> {\n         matches!(*self, ty::RePlaceholder(..))\n     }\n \n-    #[inline]\n-    pub fn is_empty(self) -> bool {\n-        matches!(*self, ty::ReEmpty(..))\n-    }\n-\n     #[inline]\n     pub fn bound_at_or_above_binder(self, index: ty::DebruijnIndex) -> bool {\n         match *self {\n@@ -1572,7 +1566,7 @@ impl<'tcx> Region<'tcx> {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n                 flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;\n             }\n-            ty::ReEmpty(_) | ty::ReStatic => {\n+            ty::ReStatic => {\n                 flags = flags | TypeFlags::HAS_FREE_REGIONS;\n             }\n             ty::ReLateBound(..) => {"}, {"sha": "bd8126f617773bbd80fd9af58dbd3c6bffc30935", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -305,8 +305,7 @@ fn encode_region<'tcx>(\n         | RegionKind::ReFree(..)\n         | RegionKind::ReStatic\n         | RegionKind::ReVar(..)\n-        | RegionKind::RePlaceholder(..)\n-        | RegionKind::ReEmpty(..) => {\n+        | RegionKind::RePlaceholder(..) => {\n             bug!(\"encode_region: unexpected `{:?}`\", region.kind());\n         }\n     }"}, {"sha": "a6a098ce73f8d7ee1c5f0f42dd36f5f72840b858", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -485,10 +485,6 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n                 })\n                 .intern(interner)\n             }\n-            ty::ReEmpty(ui) => {\n-                chalk_ir::LifetimeData::Empty(chalk_ir::UniverseIndex { counter: ui.index() })\n-                    .intern(interner)\n-            }\n             ty::ReErased => chalk_ir::LifetimeData::Erased.intern(interner),\n         }\n     }\n@@ -510,8 +506,8 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                 name: ty::BoundRegionKind::BrAnon(p.idx as u32),\n             }),\n             chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n-            chalk_ir::LifetimeData::Empty(ui) => {\n-                ty::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n+            chalk_ir::LifetimeData::Empty(_) => {\n+                bug!(\"Chalk should not have been passed an empty lifetime.\")\n             }\n             chalk_ir::LifetimeData::Erased => return interner.tcx.lifetimes.re_erased,\n             chalk_ir::LifetimeData::Phantom(void, _) => match *void {},"}, {"sha": "e164aaed6b4b8d489296dbd1be6ea0b93c8fc08a", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -3,14 +3,14 @@\n use std::cmp::{Eq, Ord, Ordering, PartialEq, PartialOrd};\n use std::{fmt, hash};\n \n+use crate::DebruijnIndex;\n use crate::FloatTy;\n+use crate::HashStableContext;\n use crate::IntTy;\n use crate::Interner;\n use crate::TyDecoder;\n use crate::TyEncoder;\n use crate::UintTy;\n-use crate::UniverseIndex;\n-use crate::{DebruijnIndex, HashStableContext};\n \n use self::RegionKind::*;\n use self::TyKind::*;\n@@ -1023,14 +1023,6 @@ pub enum RegionKind<I: Interner> {\n     /// Should not exist outside of type inference.\n     RePlaceholder(I::PlaceholderRegion),\n \n-    /// Empty lifetime is for data that is never accessed.  We tag the\n-    /// empty lifetime with a universe -- the idea is that we don't\n-    /// want `exists<'a> { forall<'b> { 'b: 'a } }` to be satisfiable.\n-    /// Therefore, the `'empty` in a universe `U` is less than all\n-    /// regions visible from `U`, but not less than regions not visible\n-    /// from `U`.\n-    ReEmpty(UniverseIndex),\n-\n     /// Erased region, used by trait selection, in MIR and during codegen.\n     ReErased,\n }\n@@ -1046,8 +1038,7 @@ const fn regionkind_discriminant<I: Interner>(value: &RegionKind<I>) -> usize {\n         ReStatic => 3,\n         ReVar(_) => 4,\n         RePlaceholder(_) => 5,\n-        ReEmpty(_) => 6,\n-        ReErased => 7,\n+        ReErased => 6,\n     }\n }\n \n@@ -1072,7 +1063,6 @@ impl<I: Interner> Clone for RegionKind<I> {\n             ReStatic => ReStatic,\n             ReVar(a) => ReVar(a.clone()),\n             RePlaceholder(a) => RePlaceholder(a.clone()),\n-            ReEmpty(a) => ReEmpty(a.clone()),\n             ReErased => ReErased,\n         }\n     }\n@@ -1099,7 +1089,6 @@ impl<I: Interner> PartialEq for RegionKind<I> {\n                 (&RePlaceholder(ref __self_0), &RePlaceholder(ref __arg_1_0)) => {\n                     __self_0 == __arg_1_0\n                 }\n-                (&ReEmpty(ref __self_0), &ReEmpty(ref __arg_1_0)) => __self_0 == __arg_1_0,\n                 (&ReErased, &ReErased) => true,\n                 _ => true,\n             }\n@@ -1144,7 +1133,6 @@ impl<I: Interner> Ord for RegionKind<I> {\n                 (&RePlaceholder(ref __self_0), &RePlaceholder(ref __arg_1_0)) => {\n                     Ord::cmp(__self_0, __arg_1_0)\n                 }\n-                (&ReEmpty(ref __self_0), &ReEmpty(ref __arg_1_0)) => Ord::cmp(__self_0, __arg_1_0),\n                 (&ReErased, &ReErased) => Ordering::Equal,\n                 _ => Ordering::Equal,\n             }\n@@ -1182,10 +1170,6 @@ impl<I: Interner> hash::Hash for RegionKind<I> {\n                 hash::Hash::hash(&regionkind_discriminant(self), state);\n                 hash::Hash::hash(__self_0, state)\n             }\n-            (&ReEmpty(ref __self_0),) => {\n-                hash::Hash::hash(&regionkind_discriminant(self), state);\n-                hash::Hash::hash(__self_0, state)\n-            }\n             (&ReErased,) => {\n                 hash::Hash::hash(&regionkind_discriminant(self), state);\n             }\n@@ -1211,8 +1195,6 @@ impl<I: Interner> fmt::Debug for RegionKind<I> {\n \n             RePlaceholder(placeholder) => write!(f, \"RePlaceholder({:?})\", placeholder),\n \n-            ReEmpty(ui) => write!(f, \"ReEmpty({:?})\", ui),\n-\n             ReErased => write!(f, \"ReErased\"),\n         }\n     }\n@@ -1247,9 +1229,6 @@ where\n             RePlaceholder(a) => e.emit_enum_variant(disc, |e| {\n                 a.encode(e);\n             }),\n-            ReEmpty(a) => e.emit_enum_variant(disc, |e| {\n-                a.encode(e);\n-            }),\n             ReErased => e.emit_enum_variant(disc, |_| {}),\n         }\n     }\n@@ -1272,8 +1251,7 @@ where\n             3 => ReStatic,\n             4 => ReVar(Decodable::decode(d)),\n             5 => RePlaceholder(Decodable::decode(d)),\n-            6 => ReEmpty(Decodable::decode(d)),\n-            7 => ReErased,\n+            6 => ReErased,\n             _ => panic!(\n                 \"{}\",\n                 format!(\n@@ -1305,9 +1283,6 @@ where\n             ReErased | ReStatic => {\n                 // No variant fields to hash for these ...\n             }\n-            ReEmpty(universe) => {\n-                universe.hash_stable(hcx, hasher);\n-            }\n             ReLateBound(db, br) => {\n                 db.hash_stable(hcx, hasher);\n                 br.hash_stable(hcx, hasher);"}, {"sha": "3e8d023fb551cbfd65ec426708927478326d064a", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -161,12 +161,6 @@ fn is_free_region(region: Region<'_>) -> bool {\n         // ignore it.  We can't put it on the struct header anyway.\n         ty::ReLateBound(..) => false,\n \n-        // This can appear in `where Self: ` bounds (#64855):\n-        //\n-        //     struct Bar<T>(<Self as Foo>::Type) where Self: ;\n-        //     struct Baz<'a>(&'a Self) where Self: ;\n-        ty::ReEmpty(_) => false,\n-\n         // These regions don't appear in types from type declarations:\n         ty::ReErased | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReFree(..) => {\n             bug!(\"unexpected region in outlives inference: {:?}\", region);"}, {"sha": "840f0c978484ddbff0e7de70b9f161fe50e48769", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -411,11 +411,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // way early-bound regions do, so we skip them here.\n             }\n \n-            ty::ReFree(..)\n-            | ty::ReVar(..)\n-            | ty::RePlaceholder(..)\n-            | ty::ReEmpty(_)\n-            | ty::ReErased => {\n+            ty::ReFree(..) | ty::ReVar(..) | ty::RePlaceholder(..) | ty::ReErased => {\n                 // We don't expect to see anything but 'static or bound\n                 // regions when visiting member types or method types.\n                 bug!("}, {"sha": "a132a029fca2bae9fdc9d7513777a9d2db07f3b2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -241,7 +241,6 @@ pub(crate) fn clean_middle_region<'tcx>(region: ty::Region<'tcx>) -> Option<Life\n         | ty::ReFree(..)\n         | ty::ReVar(..)\n         | ty::RePlaceholder(..)\n-        | ty::ReEmpty(_)\n         | ty::ReErased => {\n             debug!(\"cannot clean region {:?}\", region);\n             None\n@@ -338,10 +337,6 @@ fn clean_region_outlives_predicate<'tcx>(\n ) -> Option<WherePredicate> {\n     let ty::OutlivesPredicate(a, b) = pred;\n \n-    if a.is_empty() && b.is_empty() {\n-        return None;\n-    }\n-\n     Some(WherePredicate::RegionPredicate {\n         lifetime: clean_middle_region(a).expect(\"failed to clean lifetime\"),\n         bounds: vec![GenericBound::Outlives(\n@@ -356,10 +351,6 @@ fn clean_type_outlives_predicate<'tcx>(\n ) -> Option<WherePredicate> {\n     let ty::OutlivesPredicate(ty, lt) = pred;\n \n-    if lt.is_empty() {\n-        return None;\n-    }\n-\n     Some(WherePredicate::BoundPredicate {\n         ty: clean_middle_ty(ty, cx, None),\n         bounds: vec![GenericBound::Outlives("}, {"sha": "0ab9d712d9f695daba0fb93b0d9f18000cbe52f2", "filename": "src/test/mir-opt/nll/named_lifetimes_basic.use_x.nll.0.mir", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed_lifetimes_basic.use_x.nll.0.mir?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -13,28 +13,27 @@\n | '_#2r | U0 | {bb0[0..=1], '_#2r}\n | '_#3r | U0 | {bb0[0..=1], '_#3r}\n | '_#4r | U0 | {bb0[0..=1], '_#4r}\n-| '_#5r | U0 | {}\n-| '_#6r | U0 | {bb0[0..=1], '_#1r}\n-| '_#7r | U0 | {bb0[0..=1], '_#2r}\n-| '_#8r | U0 | {bb0[0..=1], '_#1r}\n-| '_#9r | U0 | {bb0[0..=1], '_#3r}\n+| '_#5r | U0 | {bb0[0..=1], '_#1r}\n+| '_#6r | U0 | {bb0[0..=1], '_#2r}\n+| '_#7r | U0 | {bb0[0..=1], '_#1r}\n+| '_#8r | U0 | {bb0[0..=1], '_#3r}\n |\n | Inference Constraints\n | '_#0r live at {bb0[0..=1]}\n | '_#1r live at {bb0[0..=1]}\n | '_#2r live at {bb0[0..=1]}\n | '_#3r live at {bb0[0..=1]}\n | '_#4r live at {bb0[0..=1]}\n-| '_#1r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n-| '_#1r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n-| '_#2r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n-| '_#3r: '_#9r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n-| '_#6r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n-| '_#7r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n-| '_#8r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n-| '_#9r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n+| '_#1r: '_#5r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n+| '_#1r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n+| '_#2r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n+| '_#3r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n+| '_#5r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27) ($DIR/named-lifetimes-basic.rs:12:26: 12:27 (#0)\n+| '_#6r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43) ($DIR/named-lifetimes-basic.rs:12:42: 12:43 (#0)\n+| '_#7r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55) ($DIR/named-lifetimes-basic.rs:12:54: 12:55 (#0)\n+| '_#8r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67) ($DIR/named-lifetimes-basic.rs:12:66: 12:67 (#0)\n |\n-fn use_x(_1: &'_#6r mut i32, _2: &'_#7r u32, _3: &'_#8r u32, _4: &'_#9r u32) -> bool {\n+fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {\n     debug w => _1;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:+0:26: +0:27\n     debug x => _2;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:+0:42: +0:43\n     debug y => _3;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:+0:54: +0:55"}, {"sha": "36705d18e016155f80d5b1ba254751f8978362e0", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.32bit.mir", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.32bit.mir?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -7,19 +7,18 @@\n | Inferred Region Values\n | '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n | '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n-| '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=7], bb2[0..=2]}\n-| '_#4r | U0 | {bb1[1..=7], bb2[0..=2]}\n-| '_#5r | U0 | {bb1[4..=7], bb2[0..=2]}\n+| '_#2r | U0 | {bb1[0..=7], bb2[0..=2]}\n+| '_#3r | U0 | {bb1[1..=7], bb2[0..=2]}\n+| '_#4r | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n | '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n | '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#3r live at {bb1[0]}\n-| '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n+| '_#2r live at {bb1[0]}\n+| '_#3r live at {bb1[1..=3]}\n+| '_#4r live at {bb1[4..=7], bb2[0..=2]}\n+| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n+| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:+0:11: +0:11\n@@ -33,10 +32,10 @@ fn main() -> () {\n     let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n     scope 1 {\n         debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        let _2: &'_#4r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n+        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n         scope 2 {\n             debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-            let _6: &'_#5r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n+            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n             scope 3 {\n                 debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n             }\n@@ -56,7 +55,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:+2:13: +2:18\n+        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:+2:13: +2:18\n         FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:+3:13: +3:14"}, {"sha": "4f6256a67f46f4aa2cacd39c4acb9acab8117e66", "filename": "src/test/mir-opt/nll/region_subtyping_basic.main.nll.0.64bit.mir", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion_subtyping_basic.main.nll.0.64bit.mir?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -7,19 +7,18 @@\n | Inferred Region Values\n | '_#0r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#0r, '_#1r}\n | '_#1r | U0 | {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0], '_#1r}\n-| '_#2r | U0 | {}\n-| '_#3r | U0 | {bb1[0..=7], bb2[0..=2]}\n-| '_#4r | U0 | {bb1[1..=7], bb2[0..=2]}\n-| '_#5r | U0 | {bb1[4..=7], bb2[0..=2]}\n+| '_#2r | U0 | {bb1[0..=7], bb2[0..=2]}\n+| '_#3r | U0 | {bb1[1..=7], bb2[0..=2]}\n+| '_#4r | U0 | {bb1[4..=7], bb2[0..=2]}\n |\n | Inference Constraints\n | '_#0r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n | '_#1r live at {bb0[0..=8], bb1[0..=7], bb2[0..=3], bb3[0..=3], bb4[0..=1], bb5[0..=2], bb6[0..=5], bb7[0]}\n-| '_#3r live at {bb1[0]}\n-| '_#4r live at {bb1[1..=3]}\n-| '_#5r live at {bb1[4..=7], bb2[0..=2]}\n-| '_#3r: '_#4r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n-| '_#4r: '_#5r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n+| '_#2r live at {bb1[0]}\n+| '_#3r live at {bb1[1..=3]}\n+| '_#4r live at {bb1[4..=7], bb2[0..=2]}\n+| '_#2r: '_#3r due to Assignment at Single(bb1[0]) ($DIR/region-subtyping-basic.rs:18:13: 18:18 (#0)\n+| '_#3r: '_#4r due to Assignment at Single(bb1[3]) ($DIR/region-subtyping-basic.rs:19:13: 19:14 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:+0:11: +0:11\n@@ -33,10 +32,10 @@ fn main() -> () {\n     let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:+7:9: +7:18\n     scope 1 {\n         debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:+1:9: +1:14\n-        let _2: &'_#4r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n+        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n         scope 2 {\n             debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n-            let _6: &'_#5r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n+            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n             scope 3 {\n                 debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n             }\n@@ -56,7 +55,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        _2 = &'_#3r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:+2:13: +2:18\n+        _2 = &'_#2r _1[_3];              // bb1[0]: scope 1 at $DIR/region-subtyping-basic.rs:+2:13: +2:18\n         FakeRead(ForLet(None), _2);      // bb1[1]: scope 1 at $DIR/region-subtyping-basic.rs:+2:9: +2:10\n         StorageLive(_6);                 // bb1[2]: scope 2 at $DIR/region-subtyping-basic.rs:+3:9: +3:10\n         _6 = _2;                         // bb1[3]: scope 2 at $DIR/region-subtyping-basic.rs:+3:13: +3:14"}, {"sha": "8e10e70f192d20b91f6747f4af8a96a471e93f1d", "filename": "src/test/mir-opt/storage_ranges.main.nll.0.mir", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges.main.nll.0.mir?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -7,16 +7,15 @@\n | Inferred Region Values\n | '_#0r | U0 | {bb0[0..=22], '_#0r, '_#1r}\n | '_#1r | U0 | {bb0[0..=22], '_#1r}\n-| '_#2r | U0 | {}\n-| '_#3r | U0 | {bb0[10..=11]}\n-| '_#4r | U0 | {bb0[11]}\n+| '_#2r | U0 | {bb0[10..=11]}\n+| '_#3r | U0 | {bb0[11]}\n |\n | Inference Constraints\n | '_#0r live at {bb0[0..=22]}\n | '_#1r live at {bb0[0..=22]}\n-| '_#3r live at {bb0[10]}\n-| '_#4r live at {bb0[11]}\n-| '_#3r: '_#4r due to Assignment at Single(bb0[10]) ($DIR/storage_ranges.rs:6:17: 6:25 (#0)\n+| '_#2r live at {bb0[10]}\n+| '_#3r live at {bb0[11]}\n+| '_#2r: '_#3r due to Assignment at Single(bb0[10]) ($DIR/storage_ranges.rs:6:17: 6:25 (#0)\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/storage_ranges.rs:+0:11: +0:11"}, {"sha": "3ab7c66d11f2fbf1ac8efdc21e682d652ccd69a2", "filename": "src/test/ui/closures/print/closure-print-generic-verbose-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fprint%2Fclosure-print-generic-verbose-1.stderr?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `c`\n   --> $DIR/closure-print-generic-verbose-1.rs:17:5\n    |\n LL |     let c = to_fn_once(move|| {\n-   |         - move occurs because `c` has type `[f<T>::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern \"rust-call\" fn(()) upvar_tys=(Foo<&'_#10r str>, T)]`, which does not implement the `Copy` trait\n+   |         - move occurs because `c` has type `[f<T>::{closure#0} closure_kind_ty=i32 closure_sig_as_fn_ptr_ty=extern \"rust-call\" fn(()) upvar_tys=(Foo<&'_#9r str>, T)]`, which does not implement the `Copy` trait\n ...\n LL |     c();\n    |     --- `c` moved due to this call"}, {"sha": "296131111e83476e1ae170b6d9ca90342a0bdab1", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -46,7 +46,7 @@ LL | |     });\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type `Cell<&'_#10r u32>`, which makes the generic argument `&'_#10r u32` invariant\n+   = note: requirement occurs because of the type `Cell<&'_#9r u32>`, which makes the generic argument `&'_#9r u32` invariant\n    = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "96a1bd1f07b65bb8ac269526d5ee2dcff8b9905d", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -46,7 +46,7 @@ LL | |     });\n    | |______`cell_a` escapes the function body here\n    |        argument requires that `'a` must outlive `'static`\n    |\n-   = note: requirement occurs because of the type `Cell<&'_#11r u32>`, which makes the generic argument `&'_#11r u32` invariant\n+   = note: requirement occurs because of the type `Cell<&'_#10r u32>`, which makes the generic argument `&'_#10r u32` invariant\n    = note: the struct `Cell<T>` is invariant over the parameter `T`\n    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n "}, {"sha": "060037ed496910f714e114d130bf25b9f0af1f93", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=1ca9eb8ec3bcf8860d08a4e92f0eb8ebbf112fc4", "patch": "@@ -173,7 +173,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 (\n                     preds.iter().any(|t| cx.tcx.is_diagnostic_item(sym::Borrow, t.def_id())),\n                     !preds.is_empty() && {\n-                        let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_root_empty, ty);\n+                        let ty_empty_region = cx.tcx.mk_imm_ref(cx.tcx.lifetimes.re_erased, ty);\n                         preds.iter().all(|t| {\n                             let ty_params = t.trait_ref.substs.iter().skip(1).collect::<Vec<_>>();\n                             implements_trait(cx, ty_empty_region, t.def_id(), &ty_params)"}]}