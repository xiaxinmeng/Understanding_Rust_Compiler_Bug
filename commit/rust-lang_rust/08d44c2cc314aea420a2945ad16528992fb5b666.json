{"sha": "08d44c2cc314aea420a2945ad16528992fb5b666", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZDQ0YzJjYzMxNGFlYTQyMGEyOTQ1YWQxNjUyODk5MmZiNWI2NjY=", "commit": {"author": {"name": "S\u00f6ren Meier", "email": "soeren@s-me.ch", "date": "2021-06-05T17:02:38Z"}, "committer": {"name": "S\u00f6ren Meier", "email": "soeren@s-me.ch", "date": "2021-06-05T17:02:38Z"}, "message": "Implement `Cursor::{remaining, is_empty}`", "tree": {"sha": "820a08bdbff809a78b693f6aea3174f5e08cc5c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/820a08bdbff809a78b693f6aea3174f5e08cc5c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08d44c2cc314aea420a2945ad16528992fb5b666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08d44c2cc314aea420a2945ad16528992fb5b666", "html_url": "https://github.com/rust-lang/rust/commit/08d44c2cc314aea420a2945ad16528992fb5b666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08d44c2cc314aea420a2945ad16528992fb5b666/comments", "author": {"login": "soerenmeier", "id": 16178877, "node_id": "MDQ6VXNlcjE2MTc4ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/16178877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soerenmeier", "html_url": "https://github.com/soerenmeier", "followers_url": "https://api.github.com/users/soerenmeier/followers", "following_url": "https://api.github.com/users/soerenmeier/following{/other_user}", "gists_url": "https://api.github.com/users/soerenmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/soerenmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soerenmeier/subscriptions", "organizations_url": "https://api.github.com/users/soerenmeier/orgs", "repos_url": "https://api.github.com/users/soerenmeier/repos", "events_url": "https://api.github.com/users/soerenmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/soerenmeier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soerenmeier", "id": 16178877, "node_id": "MDQ6VXNlcjE2MTc4ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/16178877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soerenmeier", "html_url": "https://github.com/soerenmeier", "followers_url": "https://api.github.com/users/soerenmeier/followers", "following_url": "https://api.github.com/users/soerenmeier/following{/other_user}", "gists_url": "https://api.github.com/users/soerenmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/soerenmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soerenmeier/subscriptions", "organizations_url": "https://api.github.com/users/soerenmeier/orgs", "repos_url": "https://api.github.com/users/soerenmeier/repos", "events_url": "https://api.github.com/users/soerenmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/soerenmeier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea19239d9d6f49fdd76513a36386d7e83708e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea19239d9d6f49fdd76513a36386d7e83708e3f", "html_url": "https://github.com/rust-lang/rust/commit/5ea19239d9d6f49fdd76513a36386d7e83708e3f"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "c0cb75a0eaef2ffd2a4e0cb5eb691f3de31c586e", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/08d44c2cc314aea420a2945ad16528992fb5b666/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08d44c2cc314aea420a2945ad16528992fb5b666/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=08d44c2cc314aea420a2945ad16528992fb5b666", "patch": "@@ -205,6 +205,62 @@ impl<T> Cursor<T> {\n     }\n }\n \n+impl<T> Cursor<T>\n+where\n+    T: AsRef<[u8]>,\n+{\n+    /// Returns the remaining slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cursor_remaining)]\n+    /// use std::io::Cursor;\n+    ///\n+    /// let mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n+    ///\n+    /// assert_eq!(buff.remaining(), &[1, 2, 3, 4, 5]);\n+    ///\n+    /// buff.set_position(2);\n+    /// assert_eq!(buff.remaining(), &[3, 4, 5]);\n+    ///\n+    /// buff.set_position(4);\n+    /// assert_eq!(buff.remaining(), &[5]);\n+    ///\n+    /// buff.set_position(6);\n+    /// assert_eq!(buff.remaining(), &[]);\n+    /// ```\n+    #[unstable(feature = \"cursor_remaining\", issue = \"none\")]\n+    pub fn remaining(&self) -> &[u8] {\n+        let len = self.pos.min(self.inner.as_ref().len() as u64);\n+        &self.inner.as_ref()[(len as usize)..]\n+    }\n+\n+    /// Returns `true` if the remaining slice is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cursor_remaining)]\n+    /// use std::io::Cursor;\n+    ///\n+    /// let mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n+    ///\n+    /// buff.set_position(2);\n+    /// assert!(!buff.is_empty());\n+    ///\n+    /// buff.set_position(5);\n+    /// assert!(buff.is_empty());\n+    ///\n+    /// buff.set_position(10);\n+    /// assert!(buff.is_empty());\n+    /// ```\n+    #[unstable(feature = \"cursor_remaining\", issue = \"none\")]\n+    pub fn is_empty(&self) -> bool {\n+        self.pos >= self.inner.as_ref().len() as u64\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Clone for Cursor<T>\n where\n@@ -268,7 +324,7 @@ where\n     T: AsRef<[u8]>,\n {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let n = Read::read(&mut self.fill_buf()?, buf)?;\n+        let n = Read::read(&mut self.remaining(), buf)?;\n         self.pos += n as u64;\n         Ok(n)\n     }\n@@ -291,7 +347,7 @@ where\n \n     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n         let n = buf.len();\n-        Read::read_exact(&mut self.fill_buf()?, buf)?;\n+        Read::read_exact(&mut self.remaining(), buf)?;\n         self.pos += n as u64;\n         Ok(())\n     }\n@@ -308,8 +364,7 @@ where\n     T: AsRef<[u8]>,\n {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> {\n-        let amt = cmp::min(self.pos, self.inner.as_ref().len() as u64);\n-        Ok(&self.inner.as_ref()[(amt as usize)..])\n+        Ok(self.remaining())\n     }\n     fn consume(&mut self, amt: usize) {\n         self.pos += amt as u64;"}]}