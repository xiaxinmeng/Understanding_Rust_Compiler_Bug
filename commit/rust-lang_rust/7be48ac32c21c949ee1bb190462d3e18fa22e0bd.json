{"sha": "7be48ac32c21c949ee1bb190462d3e18fa22e0bd", "node_id": "C_kwDOAAsO6NoAKDdiZTQ4YWMzMmMyMWM5NDllZTFiYjE5MDQ2MmQzZTE4ZmEyMmUwYmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-05T15:52:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-05T15:52:07Z"}, "message": "Adjust replace_match_with_if_let applicability range", "tree": {"sha": "a87455d2ca6ef3331275eaa0ff9c9184ec11278b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87455d2ca6ef3331275eaa0ff9c9184ec11278b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7be48ac32c21c949ee1bb190462d3e18fa22e0bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7be48ac32c21c949ee1bb190462d3e18fa22e0bd", "html_url": "https://github.com/rust-lang/rust/commit/7be48ac32c21c949ee1bb190462d3e18fa22e0bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7be48ac32c21c949ee1bb190462d3e18fa22e0bd/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "html_url": "https://github.com/rust-lang/rust/commit/e6ba791dcecfb2d69e831e204f06f2d3bf86323a"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "5e31d38fbd6aeeade9602c8f3d4a0bdcf0b7c820", "filename": "crates/ide-assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7be48ac32c21c949ee1bb190462d3e18fa22e0bd/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7be48ac32c21c949ee1bb190462d3e18fa22e0bd/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=7be48ac32c21c949ee1bb190462d3e18fa22e0bd", "patch": "@@ -102,9 +102,11 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext<'\n         return None;\n     }\n \n+    let let_ = if pat_seen { \" let\" } else { \"\" };\n+\n     acc.add(\n         AssistId(\"replace_if_let_with_match\", AssistKind::RefactorRewrite),\n-        \"Replace if let with match\",\n+        format!(\"Replace if{let_} with match\"),\n         available_range,\n         move |edit| {\n             let match_expr = {\n@@ -210,8 +212,17 @@ fn make_else_arm(\n // ```\n pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let match_expr: ast::MatchExpr = ctx.find_node_at_offset()?;\n+    let match_arm_list = match_expr.match_arm_list()?;\n+    let available_range = TextRange::new(\n+        match_expr.syntax().text_range().start(),\n+        match_arm_list.syntax().text_range().start(),\n+    );\n+    let cursor_in_range = available_range.contains_range(ctx.selection_trimmed());\n+    if !cursor_in_range {\n+        return None;\n+    }\n \n-    let mut arms = match_expr.match_arm_list()?.arms();\n+    let mut arms = match_arm_list.arms();\n     let (first_arm, second_arm) = (arms.next()?, arms.next()?);\n     if arms.next().is_some() || first_arm.guard().is_some() || second_arm.guard().is_some() {\n         return None;\n@@ -226,10 +237,20 @@ pub(crate) fn replace_match_with_if_let(acc: &mut Assists, ctx: &AssistContext<'\n     )?;\n     let scrutinee = match_expr.expr()?;\n \n+    let let_ = match &if_let_pat {\n+        ast::Pat::LiteralPat(p)\n+            if p.literal()\n+                .map(|it| it.token().kind())\n+                .map_or(false, |it| it == T![true] || it == T![false]) =>\n+        {\n+            \"\"\n+        }\n+        _ => \" let\",\n+    };\n     let target = match_expr.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_match_with_if_let\", AssistKind::RefactorRewrite),\n-        \"Replace match with if let\",\n+        format!(\"Replace match with if{let_}\"),\n         target,\n         move |edit| {\n             fn make_block_expr(expr: ast::Expr) -> ast::BlockExpr {"}]}