{"sha": "41301c3b2371365b753c2ad6a74528a38f3815ce", "node_id": "C_kwDOAAsO6NoAKDQxMzAxYzNiMjM3MTM2NWI3NTNjMmFkNmE3NDUyOGEzOGYzODE1Y2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-17T02:58:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-17T02:58:29Z"}, "message": "Auto merge of #90966 - matthiaskrgr:rollup-4akzcrh, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #90733 (Build musl dist artifacts with debuginfo enabled)\n - #90787 (Add `#[inline]`s to `SortedIndexMultiMap`)\n - #90920 (:arrow_up: rust-analyzer)\n - #90933 (Fix await suggestion on non-future type)\n - #90935 (Alphabetize language features)\n - #90949 (update miri)\n - #90958 (Mark `<*const _>::align_offset` and `<*mut _>::align_offset` as `const fn`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e7496a9868e119357c401c3fc90b69c5db0f1412", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7496a9868e119357c401c3fc90b69c5db0f1412"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41301c3b2371365b753c2ad6a74528a38f3815ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41301c3b2371365b753c2ad6a74528a38f3815ce", "html_url": "https://github.com/rust-lang/rust/commit/41301c3b2371365b753c2ad6a74528a38f3815ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41301c3b2371365b753c2ad6a74528a38f3815ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d914f17ca71a33a89b2dc3436fca51b1a091559e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d914f17ca71a33a89b2dc3436fca51b1a091559e", "html_url": "https://github.com/rust-lang/rust/commit/d914f17ca71a33a89b2dc3436fca51b1a091559e"}, {"sha": "0c3a662ba97b292e253f340a7831542887457af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c3a662ba97b292e253f340a7831542887457af9", "html_url": "https://github.com/rust-lang/rust/commit/0c3a662ba97b292e253f340a7831542887457af9"}], "stats": {"total": 1722, "additions": 885, "deletions": 837}, "files": [{"sha": "61c7239c55ff497b8b190257f8cec9b48512c5c0", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -34,39 +34,47 @@ pub struct SortedIndexMultiMap<I: Idx, K, V> {\n }\n \n impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n+    #[inline]\n     pub fn new() -> Self {\n         SortedIndexMultiMap { items: IndexVec::new(), idx_sorted_by_item_key: Vec::new() }\n     }\n \n+    #[inline]\n     pub fn len(&self) -> usize {\n         self.items.len()\n     }\n \n+    #[inline]\n     pub fn is_empty(&self) -> bool {\n         self.items.is_empty()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order.\n+    #[inline]\n     pub fn into_iter(self) -> impl DoubleEndedIterator<Item = (K, V)> {\n         self.items.into_iter()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    #[inline]\n     pub fn into_iter_enumerated(self) -> impl DoubleEndedIterator<Item = (I, (K, V))> {\n         self.items.into_iter_enumerated()\n     }\n \n     /// Returns an iterator over the items in the map in insertion order.\n+    #[inline]\n     pub fn iter(&self) -> impl '_ + DoubleEndedIterator<Item = (&K, &V)> {\n         self.items.iter().map(|(ref k, ref v)| (k, v))\n     }\n \n     /// Returns an iterator over the items in the map in insertion order along with their indices.\n+    #[inline]\n     pub fn iter_enumerated(&self) -> impl '_ + DoubleEndedIterator<Item = (I, (&K, &V))> {\n         self.items.iter_enumerated().map(|(i, (ref k, ref v))| (i, (k, v)))\n     }\n \n     /// Returns the item in the map with the given index.\n+    #[inline]\n     pub fn get(&self, idx: I) -> Option<&(K, V)> {\n         self.items.get(idx)\n     }\n@@ -75,6 +83,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n+    #[inline]\n     pub fn get_by_key(&'a self, key: K) -> impl 'a + Iterator<Item = &'a V> {\n         self.get_by_key_enumerated(key).map(|(_, v)| v)\n     }\n@@ -84,6 +93,7 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n     ///\n     /// If there are multiple items that are equivalent to `key`, they will be yielded in\n     /// insertion order.\n+    #[inline]\n     pub fn get_by_key_enumerated(&'a self, key: K) -> impl '_ + Iterator<Item = (I, &V)> {\n         let lower_bound = self.idx_sorted_by_item_key.partition_point(|&i| self.items[i].0 < key);\n         self.idx_sorted_by_item_key[lower_bound..].iter().map_while(move |&i| {"}, {"sha": "6950fae898f212533bf7eb9d0592d153f9432136", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 226, "deletions": 220, "changes": 446, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -34,6 +34,9 @@ declare_features! (\n     /// These are used to test this portion of the compiler,\n     /// they don't actually mean anything.\n     (accepted, test_accepted_feature, \"1.0.0\", None, None),\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n+    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: for testing purposes\n@@ -43,266 +46,269 @@ declare_features! (\n     // feature-group-start: accepted features\n     // -------------------------------------------------------------------------\n \n+    /// Allows the sysV64 ABI to be specified on all platforms\n+    /// instead of just the platforms on which it is the C ABI.\n+    (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n+    /// Allows the definition of associated constants in `trait` or `impl` blocks.\n+    (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     /// Allows using associated `type`s in `trait`s.\n     (accepted, associated_types, \"1.0.0\", None, None),\n-    /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n-    (accepted, default_type_params, \"1.0.0\", None, None),\n-    // FIXME: explain `globs`.\n-    (accepted, globs, \"1.0.0\", None, None),\n-    /// Allows `macro_rules!` items.\n-    (accepted, macro_rules, \"1.0.0\", None, None),\n-    /// Allows use of `&foo[a..b]` as a slicing syntax.\n-    (accepted, slicing_syntax, \"1.0.0\", None, None),\n-    /// Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n-    (accepted, struct_variant, \"1.0.0\", None, None),\n-    /// Allows indexing tuples.\n-    (accepted, tuple_indexing, \"1.0.0\", None, None),\n-    /// Allows the use of `if let` expressions.\n-    (accepted, if_let, \"1.0.0\", None, None),\n-    /// Allows the use of `while let` expressions.\n-    (accepted, while_let, \"1.0.0\", None, None),\n-    /// Allows using `#![no_std]`.\n-    (accepted, no_std, \"1.6.0\", None, None),\n+    /// Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n+    (accepted, async_await, \"1.39.0\", Some(50547), None),\n+    /// Allows all literals in attribute lists and values of key-value pairs.\n+    (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n     /// Allows overloading augmented assignment operations like `a += b`.\n     (accepted, augmented_assignments, \"1.8.0\", Some(28235), None),\n+    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n+    (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n+    /// Allows bindings in the subpattern of a binding pattern.\n+    /// For example, you can write `x @ Some(y)`.\n+    (accepted, bindings_after_at, \"1.56.0\", Some(65490), None),\n     /// Allows empty structs and enum variants with braces.\n     (accepted, braced_empty_structs, \"1.8.0\", Some(29720), None),\n-    /// Allows `#[deprecated]` attribute.\n-    (accepted, deprecated, \"1.9.0\", Some(29935), None),\n-    /// Allows macros to appear in the type position.\n-    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n-    /// Allows use of the postfix `?` operator in expressions.\n-    (accepted, question_mark, \"1.13.0\", Some(31436), None),\n-    /// Allows `..` in tuple (struct) patterns.\n-    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n-    /// Allows some increased flexibility in the name resolution rules,\n-    /// especially around globs and shadowing (RFC 1560).\n-    (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n-    /// Allows using `Self` and associated types in struct expressions and patterns.\n-    (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n-    /// Allows elision of `'static` lifetimes in `static`s and `const`s.\n-    (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n-    /// Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n-    (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n-    /// Allows the definition recursive static items.\n-    (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n-    /// Allows `pub(restricted)` visibilities (RFC 1422).\n-    (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n-    /// Allows `#![windows_subsystem]`.\n-    (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n-    /// Allows `break {expr}` with a value inside `loop`s.\n-    (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n-    /// Allows numeric fields in struct expressions and patterns.\n-    (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n+    /// Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n+    (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n+    /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests.\n+    (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n+    /// Allows `cfg(target_feature = \"...\")`.\n+    (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n+    /// Allows `cfg(target_vendor = \"...\")`.\n+    (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n+    /// Allows implementing `Clone` for closures where possible (RFC 2132).\n+    (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n     /// Allows coercing non capturing closures to function pointers.\n     (accepted, closure_to_fn_coercion, \"1.19.0\", Some(39817), None),\n-    /// Allows attributes on struct literal fields.\n-    (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n-    /// Allows the definition of associated constants in `trait` or `impl` blocks.\n-    (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     /// Allows usage of the `compile_error!` macro.\n     (accepted, compile_error, \"1.20.0\", Some(40872), None),\n-    /// Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n-    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n-    /// Allows `Drop` types in constants (RFC 1440).\n-    (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n-    /// Allows the sysV64 ABI to be specified on all platforms\n-    /// instead of just the platforms on which it is the C ABI.\n-    (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),\n-    /// Allows `repr(align(16))` struct attribute (RFC 1358).\n-    (accepted, repr_align, \"1.25.0\", Some(33626), None),\n-    /// Allows '|' at beginning of match arms (RFC 1925).\n-    (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n-    /// Allows nested groups in `use` items (RFC 2128).\n-    (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n+    /// Allows `impl Trait` in function return types.\n+    (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n+    /// Allows calling constructor functions in `const fn`.\n+    (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n+    /// Allows calling `transmute` in const fn\n+    (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n+    /// Allows accessing fields of unions inside `const` functions.\n+    (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n+    /// Allows unsizing coercions in `const fn`.\n+    (accepted, const_fn_unsize, \"1.54.0\", Some(64992), None),\n+    /// Allows the use of `if` and `match` in constants.\n+    (accepted, const_if_match, \"1.46.0\", Some(49146), None),\n     /// Allows indexing into constant arrays.\n     (accepted, const_indexing, \"1.26.0\", Some(29947), None),\n-    /// Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n-    (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n-    /// Allows `..=` in patterns (RFC 1192).\n-    (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n-    /// Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n-    (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n-    /// Allows implementing `Clone` for closures where possible (RFC 2132).\n-    (accepted, clone_closures, \"1.26.0\", Some(44490), None),\n+    /// Allows let bindings, assignments and destructuring in `const` functions and constants.\n+    /// As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n+    /// at the same time as let bindings.\n+    (accepted, const_let, \"1.33.0\", Some(48821), None),\n+    /// Allows the use of `loop` and `while` in constants.\n+    (accepted, const_loop, \"1.46.0\", Some(52000), None),\n+    /// Allows panicking during const eval (producing compile-time errors).\n+    (accepted, const_panic, \"1.57.0\", Some(51999), None),\n+    /// Allows dereferencing raw pointers during const eval.\n+    (accepted, const_raw_ptr_deref, \"1.58.0\", Some(51911), None),\n     /// Allows implementing `Copy` for closures where possible (RFC 2132).\n     (accepted, copy_closures, \"1.26.0\", Some(44490), None),\n-    /// Allows `impl Trait` in function arguments.\n-    (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n-    /// Allows `impl Trait` in function return types.\n-    (accepted, conservative_impl_trait, \"1.26.0\", Some(34511), None),\n-    /// Allows using the `u128` and `i128` types.\n-    (accepted, i128_type, \"1.26.0\", Some(35118), None),\n-    /// Allows default match binding modes (RFC 2005).\n-    (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n-    /// Allows `'_` placeholder lifetimes.\n-    (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n-    /// Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n-    (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n-    /// Allows `cfg(target_feature = \"...\")`.\n-    (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n-    /// Allows `#[target_feature(...)]`.\n-    (accepted, target_feature, \"1.27.0\", None, None),\n-    /// Allows using `dyn Trait` as a syntax for trait objects.\n-    (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n-    /// Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n-    (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n-    /// Allows use of the `:lifetime` macro fragment specifier.\n-    (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n-    /// Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n-    (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n-    /// Allows the `#[global_allocator]` attribute.\n-    (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n-    /// Allows `#[repr(transparent)]` attribute on newtype structs.\n-    (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n-    /// Allows procedural macros in `proc-macro` crates.\n-    (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n-    /// Allows `foo.rs` as an alternative to `foo/mod.rs`.\n-    (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n-    /// Allows use of the `:vis` macro fragment specifier\n-    (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n-    /// Allows importing and reexporting macros with `use`,\n-    /// enables macro modularization in general.\n-    (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n-    /// Allows keywords to be escaped for use as identifiers.\n-    (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n-    /// Allows attributes scoped to tools.\n-    (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n-    /// Allows multi-segment paths in attributes and derives.\n-    (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n-    /// Allows all literals in attribute lists and values of key-value pairs.\n-    (accepted, attr_literals, \"1.30.0\", Some(34981), None),\n-    /// Allows inferring outlives requirements (RFC 2093).\n-    (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n-    /// Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n-    /// This defines the behavior of panics.\n-    (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n-    /// Allows `#[used]` to preserve symbols (see llvm.compiler.used).\n-    (accepted, used, \"1.30.0\", Some(40289), None),\n     /// Allows `crate` in paths.\n     (accepted, crate_in_paths, \"1.30.0\", Some(45477), None),\n+    /// Allows using assigning a default type to type parameters in algebraic data type definitions.\n+    (accepted, default_type_params, \"1.0.0\", None, None),\n+    /// Allows `#[deprecated]` attribute.\n+    (accepted, deprecated, \"1.9.0\", Some(29935), None),\n+    /// Allows `#[doc(alias = \"...\")]`.\n+    (accepted, doc_alias, \"1.48.0\", Some(50146), None),\n+    /// Allows `..` in tuple (struct) patterns.\n+    (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627), None),\n+    /// Allows `..=` in patterns (RFC 1192).\n+    (accepted, dotdoteq_in_patterns, \"1.26.0\", Some(28237), None),\n+    /// Allows `Drop` types in constants (RFC 1440).\n+    (accepted, drop_types_in_const, \"1.22.0\", Some(33156), None),\n+    /// Allows using `dyn Trait` as a syntax for trait objects.\n+    (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n+    /// Allows integer match exhaustiveness checking (RFC 2591).\n+    (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n+    /// Allows arbitrary expressions in key-value attributes at parse time.\n+    (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n     /// Allows resolving absolute paths as paths from other crates.\n     (accepted, extern_absolute_paths, \"1.30.0\", Some(44660), None),\n+    /// Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n+    (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n+    /// Allows `extern crate self as foo;`.\n+    /// This puts local crate root into extern prelude under name `foo`.\n+    (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n     /// Allows access to crate names passed via `--extern` through prelude.\n     (accepted, extern_prelude, \"1.30.0\", Some(44660), None),\n-    /// Allows parentheses in patterns.\n-    (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n-    /// Allows the definition of `const fn` functions.\n-    (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n-    /// Allows scoped lints.\n-    (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n+    /// Allows field shorthands (`x` meaning `x: x`) in struct literal expressions.\n+    (accepted, field_init_shorthand, \"1.17.0\", Some(37340), None),\n+    /// Allows `#[must_use]` on functions, and introduces must-use operators (RFC 1940).\n+    (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n+    /// Allows capturing variables in scope using format_args!\n+    (accepted, format_args_capture, \"1.58.0\", Some(67984), None),\n+    /// Allows attributes on lifetime/type formal parameters in generics (RFC 1327).\n+    (accepted, generic_param_attrs, \"1.27.0\", Some(48848), None),\n+    /// Allows the `#[global_allocator]` attribute.\n+    (accepted, global_allocator, \"1.28.0\", Some(27389), None),\n+    // FIXME: explain `globs`.\n+    (accepted, globs, \"1.0.0\", None, None),\n+    /// Allows using the `u128` and `i128` types.\n+    (accepted, i128_type, \"1.26.0\", Some(35118), None),\n+    /// Allows the use of `if let` expressions.\n+    (accepted, if_let, \"1.0.0\", None, None),\n+    /// Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n+    (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n     /// Allows lifetime elision in `impl` headers. For example:\n     /// + `impl<I:Iterator> Iterator for &mut Iterator`\n     /// + `impl Debug for Foo<'_>`\n     (accepted, impl_header_lifetime_elision, \"1.31.0\", Some(15872), None),\n-    /// Allows `extern crate foo as bar;`. This puts `bar` into extern prelude.\n-    (accepted, extern_crate_item_prelude, \"1.31.0\", Some(55599), None),\n-    /// Allows use of the `:literal` macro fragment specifier (RFC 1576).\n-    (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n-    /// Allows use of `?` as the Kleene \"at most one\" operator in macros.\n-    (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n-    /// Allows `Self` struct constructor (RFC 2302).\n-    (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n-    /// Allows `Self` in type definitions (RFC 2300).\n-    (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n-    /// Allows `use x::y;` to search `x` in the current scope.\n-    (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n-    /// Allows integer match exhaustiveness checking (RFC 2591).\n-    (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n-    /// Allows `use path as _;` and `extern crate c as _;`.\n-    (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n-    /// Allows `#[repr(packed(N))]` attribute on structs.\n-    (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n+    /// Allows using `a..=b` and `..=b` as inclusive range syntaxes.\n+    (accepted, inclusive_range_syntax, \"1.26.0\", Some(28237), None),\n+    /// Allows inferring outlives requirements (RFC 2093).\n+    (accepted, infer_outlives_requirements, \"1.30.0\", Some(44493), None),\n     /// Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n     (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n-    /// Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n-    (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n-    /// Allows let bindings, assignments and destructuring in `const` functions and constants.\n-    /// As long as control flow is not implemented in const eval, `&&` and `||` may not be used\n-    /// at the same time as let bindings.\n-    (accepted, const_let, \"1.33.0\", Some(48821), None),\n-    /// Allows `#[cfg_attr(predicate, multiple, attributes, here)]`.\n-    (accepted, cfg_attr_multi, \"1.33.0\", Some(54881), None),\n-    /// Allows top level or-patterns (`p | q`) in `if let` and `while let`.\n-    (accepted, if_while_or_patterns, \"1.33.0\", Some(48215), None),\n-    /// Allows `cfg(target_vendor = \"...\")`.\n-    (accepted, cfg_target_vendor, \"1.33.0\", Some(29718), None),\n-    /// Allows `extern crate self as foo;`.\n-    /// This puts local crate root into extern prelude under name `foo`.\n-    (accepted, extern_crate_self, \"1.34.0\", Some(56409), None),\n-    /// Allows arbitrary delimited token streams in non-macro attributes.\n-    (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n-    /// Allows paths to enum variants on type aliases including `Self`.\n-    (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n-    /// Allows using `#[repr(align(X))]` on enums with equivalent semantics\n-    /// to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n-    (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n-    /// Allows `const _: TYPE = VALUE`.\n-    (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n-    /// Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n-    (accepted, async_await, \"1.39.0\", Some(50547), None),\n-    /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n-    (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n-    /// Allows attributes in formal function parameters.\n-    (accepted, param_attrs, \"1.39.0\", Some(60406), None),\n+    /// Allows some increased flexibility in the name resolution rules,\n+    /// especially around globs and shadowing (RFC 1560).\n+    (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n+    /// Allows `break {expr}` with a value inside `loop`s.\n+    (accepted, loop_break_value, \"1.19.0\", Some(37339), None),\n+    /// Allows use of `?` as the Kleene \"at most one\" operator in macros.\n+    (accepted, macro_at_most_once_rep, \"1.32.0\", Some(48075), None),\n+    /// Allows macro attributes to observe output of `#[derive]`.\n+    (accepted, macro_attributes_in_derive_output, \"1.57.0\", Some(81119), None),\n+    /// Allows use of the `:lifetime` macro fragment specifier.\n+    (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n+    /// Allows use of the `:literal` macro fragment specifier (RFC 1576).\n+    (accepted, macro_literal_matcher, \"1.32.0\", Some(35625), None),\n+    /// Allows `macro_rules!` items.\n+    (accepted, macro_rules, \"1.0.0\", None, None),\n+    /// Allows use of the `:vis` macro fragment specifier\n+    (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n     /// Allows macro invocations in `extern {}` blocks.\n     (accepted, macros_in_extern, \"1.40.0\", Some(49476), None),\n+    /// Allows '|' at beginning of match arms (RFC 1925).\n+    (accepted, match_beginning_vert, \"1.25.0\", Some(44101), None),\n+    /// Allows default match binding modes (RFC 2005).\n+    (accepted, match_default_bindings, \"1.26.0\", Some(42640), None),\n+    /// Allows `impl Trait` with multiple unrelated lifetimes.\n+    (accepted, member_constraints, \"1.54.0\", Some(61997), None),\n+    /// Allows the definition of `const fn` functions.\n+    (accepted, min_const_fn, \"1.31.0\", Some(53555), None),\n+    /// The smallest useful subset of const generics.\n+    (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n+    /// Allows calling `const unsafe fn` inside `unsafe` blocks in `const fn` functions.\n+    (accepted, min_const_unsafe_fn, \"1.33.0\", Some(55607), None),\n+    /// Allows using `Self` and associated types in struct expressions and patterns.\n+    (accepted, more_struct_aliases, \"1.16.0\", Some(37544), None),\n+    /// Allows patterns with concurrent by-move and by-ref bindings.\n+    /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n+    (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n+    /// Allows using `#![no_std]`.\n+    (accepted, no_std, \"1.6.0\", None, None),\n+    /// Allows defining identifiers beyond ASCII.\n+    (accepted, non_ascii_idents, \"1.53.0\", Some(55467), None),\n     /// Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n     (accepted, non_exhaustive, \"1.40.0\", Some(44109), None),\n-    /// Allows calling constructor functions in `const fn`.\n-    (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n-    /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests.\n-    (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n+    /// Allows `foo.rs` as an alternative to `foo/mod.rs`.\n+    (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n+    /// Allows the use of or-patterns (e.g., `0 | 1`).\n+    (accepted, or_patterns, \"1.53.0\", Some(54883), None),\n+    /// Allows annotating functions conforming to `fn(&PanicInfo) -> !` with `#[panic_handler]`.\n+    /// This defines the behavior of panics.\n+    (accepted, panic_handler, \"1.30.0\", Some(44489), None),\n+    /// Allows attributes in formal function parameters.\n+    (accepted, param_attrs, \"1.39.0\", Some(60406), None),\n+    /// Allows parentheses in patterns.\n+    (accepted, pattern_parentheses, \"1.31.0\", Some(51087), None),\n+    /// Allows procedural macros in `proc-macro` crates.\n+    (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n+    /// Allows multi-segment paths in attributes and derives.\n+    (accepted, proc_macro_path_invoc, \"1.30.0\", Some(38356), None),\n+    /// Allows `pub(restricted)` visibilities (RFC 1422).\n+    (accepted, pub_restricted, \"1.18.0\", Some(32409), None),\n+    /// Allows use of the postfix `?` operator in expressions.\n+    (accepted, question_mark, \"1.13.0\", Some(31436), None),\n+    /// Allows keywords to be escaped for use as identifiers.\n+    (accepted, raw_identifiers, \"1.30.0\", Some(48589), None),\n     /// Allows relaxing the coherence rules such that\n     /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n     (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),\n-    /// Allows #[repr(transparent)] on univariant enums (RFC 2645).\n-    (accepted, transparent_enums, \"1.42.0\", Some(60405), None),\n+    /// Allows numeric fields in struct expressions and patterns.\n+    (accepted, relaxed_adts, \"1.19.0\", Some(35626), None),\n+    /// Lessens the requirements for structs to implement `Unsize`.\n+    (accepted, relaxed_struct_unsize, \"1.58.0\", Some(81793), None),\n+    /// Allows `repr(align(16))` struct attribute (RFC 1358).\n+    (accepted, repr_align, \"1.25.0\", Some(33626), None),\n+    /// Allows using `#[repr(align(X))]` on enums with equivalent semantics\n+    /// to wrapping an enum in a wrapper struct with `#[repr(align(X))]`.\n+    (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n+    /// Allows `#[repr(packed(N))]` attribute on structs.\n+    (accepted, repr_packed, \"1.33.0\", Some(33158), None),\n+    /// Allows `#[repr(transparent)]` attribute on newtype structs.\n+    (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n+    /// Allows code like `let x: &'static u32 = &42` to work (RFC 1414).\n+    (accepted, rvalue_static_promotion, \"1.21.0\", Some(38865), None),\n+    /// Allows `Self` in type definitions (RFC 2300).\n+    (accepted, self_in_typedefs, \"1.32.0\", Some(49303), None),\n+    /// Allows `Self` struct constructor (RFC 2302).\n+    (accepted, self_struct_ctor, \"1.32.0\", Some(51994), None),\n     /// Allows using subslice patterns, `[a, .., b]` and `[a, xs @ .., b]`.\n     (accepted, slice_patterns, \"1.42.0\", Some(62254), None),\n-    /// Allows the use of `if` and `match` in constants.\n-    (accepted, const_if_match, \"1.46.0\", Some(49146), None),\n-    /// Allows the use of `loop` and `while` in constants.\n-    (accepted, const_loop, \"1.46.0\", Some(52000), None),\n+    /// Allows use of `&foo[a..b]` as a slicing syntax.\n+    (accepted, slicing_syntax, \"1.0.0\", None, None),\n+    /// Allows elision of `'static` lifetimes in `static`s and `const`s.\n+    (accepted, static_in_const, \"1.17.0\", Some(35897), None),\n+    /// Allows the definition recursive static items.\n+    (accepted, static_recursion, \"1.17.0\", Some(29719), None),\n+    /// Allows attributes on struct literal fields.\n+    (accepted, struct_field_attributes, \"1.20.0\", Some(38814), None),\n+    /// Allows struct variants `Foo { baz: u8, .. }` in enums (RFC 418).\n+    (accepted, struct_variant, \"1.0.0\", None, None),\n+    /// Allows `#[target_feature(...)]`.\n+    (accepted, target_feature, \"1.27.0\", None, None),\n+    /// Allows `fn main()` with return types which implements `Termination` (RFC 1937).\n+    (accepted, termination_trait, \"1.26.0\", Some(43301), None),\n+    /// Allows `#[test]` functions where the return type implements `Termination` (RFC 1937).\n+    (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n+    /// Allows attributes scoped to tools.\n+    (accepted, tool_attributes, \"1.30.0\", Some(44690), None),\n+    /// Allows scoped lints.\n+    (accepted, tool_lints, \"1.31.0\", Some(44690), None),\n     /// Allows `#[track_caller]` to be used which provides\n     /// accurate caller location reporting during panic (RFC 2091).\n     (accepted, track_caller, \"1.46.0\", Some(47809), None),\n-    /// Allows `#[doc(alias = \"...\")]`.\n-    (accepted, doc_alias, \"1.48.0\", Some(50146), None),\n-    /// Allows patterns with concurrent by-move and by-ref bindings.\n-    /// For example, you can write `Foo(a, ref b)` where `a` is by-move and `b` is by-ref.\n-    (accepted, move_ref_pattern, \"1.49.0\", Some(68354), None),\n-    /// The smallest useful subset of const generics.\n-    (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n+    /// Allows #[repr(transparent)] on univariant enums (RFC 2645).\n+    (accepted, transparent_enums, \"1.42.0\", Some(60405), None),\n+    /// Allows indexing tuples.\n+    (accepted, tuple_indexing, \"1.0.0\", None, None),\n+    /// Allows paths to enum variants on type aliases including `Self`.\n+    (accepted, type_alias_enum_variants, \"1.37.0\", Some(49683), None),\n+    /// Allows macros to appear in the type position.\n+    (accepted, type_macros, \"1.13.0\", Some(27245), None),\n+    /// Allows `const _: TYPE = VALUE`.\n+    (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n+    /// Allows `use path as _;` and `extern crate c as _;`.\n+    (accepted, underscore_imports, \"1.33.0\", Some(48216), None),\n+    /// Allows `'_` placeholder lifetimes.\n+    (accepted, underscore_lifetimes, \"1.26.0\", Some(44524), None),\n+    /// Allows `use x::y;` to search `x` in the current scope.\n+    (accepted, uniform_paths, \"1.32.0\", Some(53130), None),\n+    /// Allows `impl Trait` in function arguments.\n+    (accepted, universal_impl_trait, \"1.26.0\", Some(34511), None),\n+    /// Allows arbitrary delimited token streams in non-macro attributes.\n+    (accepted, unrestricted_attribute_tokens, \"1.34.0\", Some(55208), None),\n     /// The `unsafe_op_in_unsafe_fn` lint (allowed by default): no longer treat an unsafe function as an unsafe block.\n     (accepted, unsafe_block_in_unsafe_fn, \"1.52.0\", Some(71668), None),\n-    /// Allows the use of or-patterns (e.g., `0 | 1`).\n-    (accepted, or_patterns, \"1.53.0\", Some(54883), None),\n-    /// Allows defining identifiers beyond ASCII.\n-    (accepted, non_ascii_idents, \"1.53.0\", Some(55467), None),\n-    /// Allows arbitrary expressions in key-value attributes at parse time.\n-    (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n-    /// Allows unsizing coercions in `const fn`.\n-    (accepted, const_fn_unsize, \"1.54.0\", Some(64992), None),\n-    /// Allows `impl Trait` with multiple unrelated lifetimes.\n-    (accepted, member_constraints, \"1.54.0\", Some(61997), None),\n-    /// Allows bindings in the subpattern of a binding pattern.\n-    /// For example, you can write `x @ Some(y)`.\n-    (accepted, bindings_after_at, \"1.56.0\", Some(65490), None),\n-    /// Allows calling `transmute` in const fn\n-    (accepted, const_fn_transmute, \"1.56.0\", Some(53605), None),\n-    /// Allows accessing fields of unions inside `const` functions.\n-    (accepted, const_fn_union, \"1.56.0\", Some(51909), None),\n-    /// Allows macro attributes to observe output of `#[derive]`.\n-    (accepted, macro_attributes_in_derive_output, \"1.57.0\", Some(81119), None),\n-    /// Allows panicking during const eval (producing compile-time errors).\n-    (accepted, const_panic, \"1.57.0\", Some(51999), None),\n-    /// Lessens the requirements for structs to implement `Unsize`.\n-    (accepted, relaxed_struct_unsize, \"1.58.0\", Some(81793), None),\n-    /// Allows dereferencing raw pointers during const eval.\n-    (accepted, const_raw_ptr_deref, \"1.58.0\", Some(51911), None),\n-    /// Allows capturing variables in scope using format_args!\n-    (accepted, format_args_capture, \"1.58.0\", Some(67984), None),\n+    /// Allows importing and reexporting macros with `use`,\n+    /// enables macro modularization in general.\n+    (accepted, use_extern_macros, \"1.30.0\", Some(35896), None),\n+    /// Allows nested groups in `use` items (RFC 2128).\n+    (accepted, use_nested_groups, \"1.25.0\", Some(44494), None),\n+    /// Allows `#[used]` to preserve symbols (see llvm.compiler.used).\n+    (accepted, used, \"1.30.0\", Some(40289), None),\n+    /// Allows the use of `while let` expressions.\n+    (accepted, while_let, \"1.0.0\", None, None),\n+    /// Allows `#![windows_subsystem]`.\n+    (accepted, windows_subsystem, \"1.18.0\", Some(37499), None),\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n+    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "608581306bef5be5e906a698b537dedc33f312ec", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 330, "deletions": 485, "changes": 815, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -122,130 +122,101 @@ impl Feature {\n #[rustfmt::skip]\n declare_features! (\n     // -------------------------------------------------------------------------\n-    // feature-group-start: internal feature gates\n+    // feature-group-start: internal feature gates (no tracking issue)\n     // -------------------------------------------------------------------------\n-\n     // no-tracking-issue-start\n \n-    /// Allows using `rustc_*` attributes (RFC 572).\n-    (active, rustc_attrs, \"1.0.0\", None, None),\n-\n-    /// Allows using compiler's own crates.\n-    (active, rustc_private, \"1.0.0\", Some(27812), None),\n-\n-    /// Allows using the `rust-intrinsic`'s \"ABI\".\n-    (active, intrinsics, \"1.0.0\", None, None),\n-\n-    /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n-    (active, lang_items, \"1.0.0\", None, None),\n-\n-    /// Allows using the `#[stable]` and `#[unstable]` attributes.\n-    (active, staged_api, \"1.0.0\", None, None),\n-\n-    /// Allows using `#[allow_internal_unstable]`. This is an\n+    /// Allows using the `thiscall` ABI.\n+    (active, abi_thiscall, \"1.19.0\", None, None),\n+    /// Allows using the `unadjusted` ABI; perma-unstable.\n+    (active, abi_unadjusted, \"1.16.0\", None, None),\n+    /// Allows using the `vectorcall` ABI.\n+    (active, abi_vectorcall, \"1.7.0\", None, None),\n+    /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n+    (active, allocator_internals, \"1.20.0\", None, None),\n+    /// Allows using `#[allow_internal_unsafe]`. This is an\n     /// attribute on `macro_rules!` and can't use the attribute handling\n     /// below (it has to be checked before expansion possibly makes\n     /// macros disappear).\n-    (active, allow_internal_unstable, \"1.0.0\", None, None),\n-\n-    /// Allows using `#[allow_internal_unsafe]`. This is an\n+    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n+    /// Allows using `#[allow_internal_unstable]`. This is an\n     /// attribute on `macro_rules!` and can't use the attribute handling\n     /// below (it has to be checked before expansion possibly makes\n     /// macros disappear).\n-    (active, allow_internal_unsafe, \"1.0.0\", None, None),\n-\n-    /// no-tracking-issue-end\n-\n-    /// Allows using `#[link_name=\"llvm.*\"]`.\n-    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n-\n-    /// Allows using the `box $expr` syntax.\n-    (active, box_syntax, \"1.0.0\", Some(49733), None),\n-\n-    /// Allows using `#[start]` on a function indicating that it is the program entrypoint.\n-    (active, start, \"1.0.0\", Some(29633), None),\n-\n-    /// Allows using the `#[fundamental]` attribute.\n-    (active, fundamental, \"1.0.0\", Some(29635), None),\n-\n-    /// Allows using the `rust-call` ABI.\n-    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n-\n-    /// Allows using the `#[linkage = \"..\"]` attribute.\n-    (active, linkage, \"1.0.0\", Some(29603), None),\n-\n-    /// Allows using `box` in patterns (RFC 469).\n-    (active, box_patterns, \"1.0.0\", Some(29641), None),\n-\n-    // no-tracking-issue-start\n-\n-    /// Allows using `#[prelude_import]` on glob `use` items.\n-    (active, prelude_import, \"1.2.0\", None, None),\n-\n-    // no-tracking-issue-end\n-\n-    // no-tracking-issue-start\n-\n-    /// Allows using `#[omit_gdb_pretty_printer_section]`.\n-    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n-\n-    /// Allows using the `vectorcall` ABI.\n-    (active, abi_vectorcall, \"1.7.0\", None, None),\n-\n-    // no-tracking-issue-end\n-\n-    /// Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n-    /// FIXME: Subsumed by trait `StructuralPartialEq`, cannot move to removed until a library\n-    /// feature with the same name exists.\n-    (active, structural_match, \"1.8.0\", Some(31434), None),\n-\n-    /// Allows using the `may_dangle` attribute (RFC 1327).\n-    (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n-\n-    /// Allows using the `#![panic_runtime]` attribute.\n-    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n-\n-    /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n-    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n-\n-    // no-tracking-issue-start\n-\n+    (active, allow_internal_unstable, \"1.0.0\", None, None),\n     /// Allows identifying the `compiler_builtins` crate.\n     (active, compiler_builtins, \"1.13.0\", None, None),\n-\n-    /// Allows using the `unadjusted` ABI; perma-unstable.\n-    (active, abi_unadjusted, \"1.16.0\", None, None),\n-\n+    /// Allows using the `rust-intrinsic`'s \"ABI\".\n+    (active, intrinsics, \"1.0.0\", None, None),\n+    /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n+    (active, lang_items, \"1.0.0\", None, None),\n+    /// Allows `#[repr(no_niche)]` (an implementation detail of `rustc`,\n+    /// it is not on path for eventual stabilization).\n+    (active, no_niche, \"1.42.0\", None, None),\n+    /// Allows using `#[omit_gdb_pretty_printer_section]`.\n+    (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n+    /// Allows using `#[prelude_import]` on glob `use` items.\n+    (active, prelude_import, \"1.2.0\", None, None),\n     /// Used to identify crates that contain the profiler runtime.\n     (active, profiler_runtime, \"1.18.0\", None, None),\n-\n-    /// Allows using the `thiscall` ABI.\n-    (active, abi_thiscall, \"1.19.0\", None, None),\n-\n-    /// Allows using `#![needs_allocator]`, an implementation detail of `#[global_allocator]`.\n-    (active, allocator_internals, \"1.20.0\", None, None),\n-\n+    /// Allows using `rustc_*` attributes (RFC 572).\n+    (active, rustc_attrs, \"1.0.0\", None, None),\n+    /// Allows using the `#[stable]` and `#[unstable]` attributes.\n+    (active, staged_api, \"1.0.0\", None, None),\n     /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n+    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n \n-    /// Allows `#[repr(no_niche)]` (an implementation detail of `rustc`,\n-    /// it is not on path for eventual stabilization).\n-    (active, no_niche, \"1.42.0\", None, None),\n+    // no-tracking-issue-end\n+    // -------------------------------------------------------------------------\n+    // feature-group-end: internal feature gates (no tracking issue)\n+    // -------------------------------------------------------------------------\n \n-    /// Allows using `#[rustc_allow_const_fn_unstable]`.\n-    /// This is an attribute on `const fn` for the same\n-    /// purpose as `#[allow_internal_unstable]`.\n-    (active, rustc_allow_const_fn_unstable, \"1.49.0\", Some(69399), None),\n+    // -------------------------------------------------------------------------\n+    // feature-group-start: internal feature gates\n+    // -------------------------------------------------------------------------\n \n     /// Allows features specific to auto traits.\n     /// Renamed from `optin_builtin_traits`.\n     (active, auto_traits, \"1.50.0\", Some(13231), None),\n-\n+    /// Allows using `box` in patterns (RFC 469).\n+    (active, box_patterns, \"1.0.0\", Some(29641), None),\n+    /// Allows using the `box $expr` syntax.\n+    (active, box_syntax, \"1.0.0\", Some(49733), None),\n     /// Allows `#[doc(notable_trait)]`.\n     /// Renamed from `doc_spotlight`.\n     (active, doc_notable_trait, \"1.52.0\", Some(45040), None),\n-\n-    // no-tracking-issue-end\n+    /// Allows using the `may_dangle` attribute (RFC 1327).\n+    (active, dropck_eyepatch, \"1.10.0\", Some(34761), None),\n+    /// Allows using the `#[fundamental]` attribute.\n+    (active, fundamental, \"1.0.0\", Some(29635), None),\n+    /// Allows using `#[link_name=\"llvm.*\"]`.\n+    (active, link_llvm_intrinsics, \"1.0.0\", Some(29602), None),\n+    /// Allows using the `#[linkage = \"..\"]` attribute.\n+    (active, linkage, \"1.0.0\", Some(29603), None),\n+    /// Allows declaring with `#![needs_panic_runtime]` that a panic runtime is needed.\n+    (active, needs_panic_runtime, \"1.10.0\", Some(32837), None),\n+    /// Allows using the `#![panic_runtime]` attribute.\n+    (active, panic_runtime, \"1.10.0\", Some(32837), None),\n+    /// Allows using `#[rustc_allow_const_fn_unstable]`.\n+    /// This is an attribute on `const fn` for the same\n+    /// purpose as `#[allow_internal_unstable]`.\n+    (active, rustc_allow_const_fn_unstable, \"1.49.0\", Some(69399), None),\n+    /// Allows using compiler's own crates.\n+    (active, rustc_private, \"1.0.0\", Some(27812), None),\n+    /// Allows using `#[start]` on a function indicating that it is the program entrypoint.\n+    (active, start, \"1.0.0\", Some(29633), None),\n+    /// Allows using `#[structural_match]` which indicates that a type is structurally matchable.\n+    /// FIXME: Subsumed by trait `StructuralPartialEq`, cannot move to removed until a library\n+    /// feature with the same name exists.\n+    (active, structural_match, \"1.8.0\", Some(31434), None),\n+    /// Allows using the `rust-call` ABI.\n+    (active, unboxed_closures, \"1.0.0\", Some(29625), None),\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n+    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: internal feature gates\n@@ -258,23 +229,26 @@ declare_features! (\n     // FIXME: Document these and merge with the list below.\n \n     // Unstable `#[target_feature]` directives.\n-    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n     (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, bpf_target_feature, \"1.54.0\", Some(44839), None),\n+    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n+    (active, ermsb_target_feature, \"1.49.0\", Some(44839), None),\n+    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n     (active, hexagon_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n     (active, mips_target_feature, \"1.27.0\", Some(44839), None),\n-    (active, avx512_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n+    (active, powerpc_target_feature, \"1.27.0\", Some(44839), None),\n+    (active, riscv_target_feature, \"1.45.0\", Some(44839), None),\n+    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n     (active, sse4a_target_feature, \"1.27.0\", Some(44839), None),\n     (active, tbm_target_feature, \"1.27.0\", Some(44839), None),\n     (active, wasm_target_feature, \"1.30.0\", Some(44839), None),\n-    (active, adx_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, cmpxchg16b_target_feature, \"1.32.0\", Some(44839), None),\n-    (active, movbe_target_feature, \"1.34.0\", Some(44839), None),\n-    (active, rtm_target_feature, \"1.35.0\", Some(44839), None),\n-    (active, f16c_target_feature, \"1.36.0\", Some(44839), None),\n-    (active, riscv_target_feature, \"1.45.0\", Some(44839), None),\n-    (active, ermsb_target_feature, \"1.49.0\", Some(44839), None),\n-    (active, bpf_target_feature, \"1.54.0\", Some(44839), None),\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n+    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates (target features)\n@@ -284,416 +258,287 @@ declare_features! (\n     // feature-group-start: actual feature gates\n     // -------------------------------------------------------------------------\n \n-    /// Allows using `#![plugin(myplugin)]`.\n-    (active, plugin, \"1.0.0\", Some(29597), None),\n-\n-    /// Allows using `#[thread_local]` on `static` items.\n-    (active, thread_local, \"1.0.0\", Some(29594), None),\n-\n-    /// Allows the use of SIMD types in functions declared in `extern` blocks.\n-    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n-\n-    /// Allows using non lexical lifetimes (RFC 2094).\n-    (active, nll, \"1.0.0\", Some(43234), None),\n-\n+    /// Allows using the `amdgpu-kernel` ABI.\n+    (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n+    /// Allows `extern \"avr-interrupt\" fn()` and `extern \"avr-non-blocking-interrupt\" fn()`.\n+    (active, abi_avr_interrupt, \"1.45.0\", Some(69664), None),\n+    /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n+    (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n+    /// Allows using the `efiapi` ABI.\n+    (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n+    /// Allows `extern \"msp430-interrupt\" fn()`.\n+    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n+    /// Allows `extern \"ptx-*\" fn()`.\n+    (active, abi_ptx, \"1.15.0\", Some(38788), None),\n+    /// Allows `extern \"x86-interrupt\" fn()`.\n+    (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n+    /// Allows additional const parameter types, such as `&'static str` or user defined types\n+    (incomplete, adt_const_params, \"1.56.0\", Some(44580), None),\n+    /// Allows defining an `#[alloc_error_handler]`.\n+    (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n+    /// Allows a test to fail without failing the whole suite.\n+    (active, allow_fail, \"1.19.0\", Some(46488), None),\n+    /// Allows explicit discriminants on non-unit enum variants.\n+    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n+    /// Allows trait methods with arbitrary self types.\n+    (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n+    /// Allows using `const` operands in inline assembly.\n+    (active, asm_const, \"1.58.0\", Some(72016), None),\n+    /// Enables experimental inline assembly support for additional architectures.\n+    (active, asm_experimental_arch, \"1.58.0\", Some(72016), None),\n+    /// Allows using `sym` operands in inline assembly.\n+    (active, asm_sym, \"1.58.0\", Some(72016), None),\n+    /// Allows the user of associated type bounds.\n+    (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n     /// Allows associated type defaults.\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n-\n-    /// Allows `#![no_core]`.\n-    (active, no_core, \"1.3.0\", Some(29639), None),\n-\n-    /// Allows default type parameters to influence type inference.\n-    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n-\n-    /// Allows `repr(simd)` and importing the various simd intrinsics.\n-    (active, repr_simd, \"1.4.0\", Some(27731), None),\n-\n-    /// Allows `extern \"platform-intrinsic\" { ... }`.\n-    (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n-\n-    /// Allows attributes on expressions and non-item statements.\n-    (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n-\n-    /// Allows the use of type ascription in expressions.\n-    (active, type_ascription, \"1.6.0\", Some(23416), None),\n-\n-    /// Allows `cfg(target_thread_local)`.\n-    (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n-\n-    /// Allows specialization of implementations (RFC 1210).\n-    (incomplete, specialization, \"1.7.0\", Some(31844), None),\n-\n-    /// A minimal, sound subset of specialization intended to be used by the\n-    /// standard library until the soundness issues with specialization\n-    /// are fixed.\n-    (active, min_specialization, \"1.7.0\", Some(31844), None),\n-\n-    /// Allows using `#[naked]` on functions.\n-    (active, naked_functions, \"1.9.0\", Some(32408), None),\n-\n+    /// Allows `async || body` closures.\n+    (active, async_closure, \"1.37.0\", Some(62290), None),\n+    /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n+    (active, c_unwind, \"1.52.0\", Some(74990), None),\n+    /// Allows using C-variadics.\n+    (active, c_variadic, \"1.34.0\", Some(44930), None),\n+    /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n+    (incomplete, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n+    /// Enables `#[cfg(panic = \"...\")]` config key.\n+    (active, cfg_panic, \"1.49.0\", Some(77443), None),\n+    /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n+    (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n+    /// Allows `cfg(target_abi = \"...\")`.\n+    (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n     /// Allows `cfg(target_has_atomic = \"...\")`.\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976), None),\n-\n-    /// Allows `X..Y` patterns.\n-    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n-\n-    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n-    (active, never_type, \"1.13.0\", Some(35121), None),\n-\n-    /// Allows exhaustive pattern matching on types that contain uninhabited types.\n-    (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n-\n-    /// Allows `union`s to implement `Drop`. Moreover, `union`s may now include fields\n-    /// that don't implement `Copy` as long as they don't have any drop glue.\n-    /// This is checked recursively. On encountering type variable where no progress can be made,\n-    /// `T: Copy` is used as a substitute for \"no drop glue\".\n-    ///\n-    /// NOTE: A limited form of `union U { ... }` was accepted in 1.19.0.\n-    (active, untagged_unions, \"1.13.0\", Some(55149), None),\n-\n-    /// Allows `#[link(..., cfg(..))]`.\n-    (active, link_cfg, \"1.14.0\", Some(37406), None),\n-\n-    /// Allows `extern \"ptx-*\" fn()`.\n-    (active, abi_ptx, \"1.15.0\", Some(38788), None),\n-\n-    /// Allows the `#[repr(i128)]` attribute for enums.\n-    (incomplete, repr128, \"1.16.0\", Some(56071), None),\n-\n-    /// Allows `#[link(kind=\"static-nobundle\"...)]`.\n-    (active, static_nobundle, \"1.16.0\", Some(37403), None),\n-\n-    /// Allows `extern \"msp430-interrupt\" fn()`.\n-    (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n-\n+    /// Allows `cfg(target_thread_local)`.\n+    (active, cfg_target_thread_local, \"1.7.0\", Some(29594), None),\n+    /// Allow conditional compilation depending on rust version\n+    (active, cfg_version, \"1.45.0\", Some(64796), None),\n+    /// Allows `#[track_caller]` on closures and generators.\n+    (active, closure_track_caller, \"1.57.0\", Some(87417), None),\n+    /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n+    (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n+    /// Allows `async {}` expressions in const contexts.\n+    (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n+    // Allows limiting the evaluation steps of const expressions\n+    (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n+    /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n+    (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n+    /// Allows basic arithmetic on floating point types in a `const fn`.\n+    (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n+    /// Allows using and casting function pointers in a `const fn`.\n+    (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n+    /// Allows trait bounds in `const fn`.\n+    (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n+    /// Allows `for _ in _` loops in const contexts.\n+    (active, const_for, \"1.56.0\", Some(87575), None),\n+    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n+    (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n+    /// Allows argument and return position `impl Trait` in a `const fn`.\n+    (active, const_impl_trait, \"1.48.0\", Some(77463), None),\n+    /// Allows using `&mut` in constant functions.\n+    (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n+    /// Be more precise when looking for live drops in a const context.\n+    (active, const_precise_live_drops, \"1.46.0\", Some(73255), None),\n+    /// Allows references to types with interior mutability within constants\n+    (active, const_refs_to_cell, \"1.51.0\", Some(80384), None),\n+    /// Allows `impl const Trait for T` syntax.\n+    (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n+    /// Allows the `?` operator in const contexts.\n+    (active, const_try, \"1.56.0\", Some(74935), None),\n+    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n+    /// Allows non-builtin attributes in inner attribute position.\n+    (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n+    /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n+    (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n     /// Allows declarative macros 2.0 (`macro`).\n     (active, decl_macro, \"1.17.0\", Some(39412), None),\n-\n-    /// Allows `extern \"x86-interrupt\" fn()`.\n-    (active, abi_x86_interrupt, \"1.17.0\", Some(40180), None),\n-\n-    /// Allows a test to fail without failing the whole suite.\n-    (active, allow_fail, \"1.19.0\", Some(46488), None),\n-\n-    /// Allows unsized tuple coercion.\n-    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n-\n-    /// Allows defining generators.\n-    (active, generators, \"1.21.0\", Some(43122), None),\n-\n+    /// Allows rustc to inject a default alloc_error_handler\n+    (active, default_alloc_error_handler, \"1.48.0\", Some(66741), None),\n+    /// Allows default type parameters to influence type inference.\n+    (active, default_type_parameter_fallback, \"1.3.0\", Some(27336), None),\n+    /// Allows `#[derive(Default)]` and `#[default]` on enums.\n+    (active, derive_default_enum, \"1.56.0\", Some(86985), None),\n+    /// Allows the use of destructuring assignments.\n+    (active, destructuring_assignment, \"1.49.0\", Some(71126), None),\n+    /// Tells rustdoc to automatically generate `#[doc(cfg(...))]`.\n+    (active, doc_auto_cfg, \"1.58.0\", Some(43781), None),\n     /// Allows `#[doc(cfg(...))]`.\n     (active, doc_cfg, \"1.21.0\", Some(43781), None),\n-\n+    /// Allows `#[doc(cfg_hide(...))]`.\n+    (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n+    /// Allows using `#[doc(keyword = \"...\")]`.\n+    (active, doc_keyword, \"1.28.0\", Some(51315), None),\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n-\n-    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n-\n+    /// Allows using doc(primitive) without a future-incompat warning\n+    (active, doc_primitive, \"1.56.0\", Some(88070), None),\n+    /// Allows `X..Y` patterns.\n+    (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n+    /// Allows exhaustive pattern matching on types that contain uninhabited types.\n+    (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n+    /// Allows explicit generic arguments specification with `impl Trait` present.\n+    (active, explicit_generic_args_with_impl_trait, \"1.56.0\", Some(83701), None),\n     /// Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n-\n-    /// Allows trait methods with arbitrary self types.\n-    (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n-\n-    /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n-    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n-\n-    /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n-    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n-\n-    /// Allows defining `trait X = A + B;` alias items.\n-    (active, trait_alias, \"1.24.0\", Some(41517), None),\n-\n-    /// Allows inferring `'static` outlives requirements (RFC 2093).\n-    (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n-\n-    /// Allows inconsistent bounds in where clauses.\n-    (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n-\n-    /// Allows `'a: { break 'a; }`.\n-    (active, label_break_value, \"1.28.0\", Some(48594), None),\n-\n-    /// Allows using `#[doc(keyword = \"...\")]`.\n-    (active, doc_keyword, \"1.28.0\", Some(51315), None),\n-\n-    /// Allows using `try {...}` expressions.\n-    (active, try_blocks, \"1.29.0\", Some(31436), None),\n-\n-    /// Allows defining an `#[alloc_error_handler]`.\n-    (active, alloc_error_handler, \"1.29.0\", Some(51540), None),\n-\n-    /// Allows using the `amdgpu-kernel` ABI.\n-    (active, abi_amdgpu_kernel, \"1.29.0\", Some(51575), None),\n-\n-    /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n-    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n-\n-    /// Allows macro attributes on expressions, statements and non-inline modules.\n-    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n-\n-    /// Allows unsized rvalues at arguments and parameters.\n-    (incomplete, unsized_locals, \"1.30.0\", Some(48055), None),\n-\n-    /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`.\n-    (active, custom_test_frameworks, \"1.30.0\", Some(50297), None),\n-\n-    /// Allows non-builtin attributes in inner attribute position.\n-    (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n-\n-    /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n-    (active, lint_reasons, \"1.31.0\", Some(54503), None),\n-\n-    /// Allows exhaustive integer pattern matching on `usize` and `isize`.\n-    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n-\n-    /// Allows using `#[ffi_returns_twice]` on foreign functions.\n-    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n-\n-    /// Allows using `#[optimize(X)]`.\n-    (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n-\n-    /// Allows using C-variadics.\n-    (active, c_variadic, \"1.34.0\", Some(44930), None),\n-\n-    /// Allows the user of associated type bounds.\n-    (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n-\n-    /// Allows `if/while p && let q = r && ...` chains.\n-    (incomplete, let_chains, \"1.37.0\", Some(53667), None),\n-\n-    /// Allows #[repr(transparent)] on unions (RFC 2645).\n-    (active, transparent_unions, \"1.37.0\", Some(60405), None),\n-\n-    /// Allows explicit discriminants on non-unit enum variants.\n-    (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n-\n-    /// Allows `async || body` closures.\n-    (active, async_closure, \"1.37.0\", Some(62290), None),\n-\n-    /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n-    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n-\n-    /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n-    (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n-\n-    /// Allows the use of raw-dylibs (RFC 2627).\n-    (incomplete, raw_dylib, \"1.40.0\", Some(58713), None),\n-\n-    /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n-    /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n-    /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden.\n-    (active, object_safe_for_dispatch, \"1.40.0\", Some(43561), None),\n-\n-    /// Allows using the `efiapi` ABI.\n-    (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n-\n-    /// Allows `&raw const $place_expr` and `&raw mut $place_expr` expressions.\n-    (active, raw_ref_op, \"1.41.0\", Some(64490), None),\n-\n-    /// Allows diverging expressions to fall back to `!` rather than `()`.\n-    (active, never_type_fallback, \"1.41.0\", Some(65992), None),\n-\n-    /// Allows using the `#[register_attr]` attribute.\n-    (active, register_attr, \"1.41.0\", Some(66080), None),\n-\n-    /// Allows using the `#[register_tool]` attribute.\n-    (active, register_tool, \"1.41.0\", Some(66079), None),\n-\n-    /// Allows the use of `#[cfg(sanitize = \"option\")]`; set when -Zsanitizer is used.\n-    (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n-\n-    /// Allows using `..X`, `..=X`, `...X`, and `X..` as a pattern.\n-    (active, half_open_range_patterns, \"1.41.0\", Some(67264), None),\n-\n-    /// Allows using `&mut` in constant functions.\n-    (active, const_mut_refs, \"1.41.0\", Some(57349), None),\n-\n-    /// Allows `impl const Trait for T` syntax.\n-    (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n-\n-    /// Allows the use of `no_sanitize` attribute.\n-    (active, no_sanitize, \"1.42.0\", Some(39699), None),\n-\n-    // Allows limiting the evaluation steps of const expressions\n-    (active, const_eval_limit, \"1.43.0\", Some(67217), None),\n-\n-    /// Allow negative trait implementations.\n-    (active, negative_impls, \"1.44.0\", Some(68318), None),\n-\n-    /// Allows the use of `#[target_feature]` on safe functions.\n-    (active, target_feature_11, \"1.45.0\", Some(69098), None),\n-\n-    /// Allow conditional compilation depending on rust version\n-    (active, cfg_version, \"1.45.0\", Some(64796), None),\n-\n-    /// Allows the use of `#[ffi_pure]` on foreign functions.\n-    (active, ffi_pure, \"1.45.0\", Some(58329), None),\n-\n     /// Allows the use of `#[ffi_const]` on foreign functions.\n     (active, ffi_const, \"1.45.0\", Some(58328), None),\n-\n-    /// Allows `extern \"avr-interrupt\" fn()` and `extern \"avr-non-blocking-interrupt\" fn()`.\n-    (active, abi_avr_interrupt, \"1.45.0\", Some(69664), None),\n-\n-    /// Be more precise when looking for live drops in a const context.\n-    (active, const_precise_live_drops, \"1.46.0\", Some(73255), None),\n-\n+    /// Allows the use of `#[ffi_pure]` on foreign functions.\n+    (active, ffi_pure, \"1.45.0\", Some(58329), None),\n+    /// Allows using `#[ffi_returns_twice]` on foreign functions.\n+    (active, ffi_returns_twice, \"1.34.0\", Some(58314), None),\n+    /// Allows using `#[repr(align(...))]` on function items\n+    (active, fn_align, \"1.53.0\", Some(82232), None),\n+    /// Allows defining generators.\n+    (active, generators, \"1.21.0\", Some(43122), None),\n+    /// Infer generic args for both consts and types.\n+    (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n+    /// Allows associated types to be generic, e.g., `type Foo<T>;` (RFC 1598).\n+    (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n+    /// Allows non-trivial generic constants which have to have wfness manually propagated to callers\n+    (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n+    /// Allows using `..X`, `..=X`, `...X`, and `X..` as a pattern.\n+    (active, half_open_range_patterns, \"1.41.0\", Some(67264), None),\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n-\n-    /// Allows basic arithmetic on floating point types in a `const fn`.\n-    (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n-\n-    /// Allows using and casting function pointers in a `const fn`.\n-    (active, const_fn_fn_ptr_basics, \"1.48.0\", Some(57563), None),\n-\n-    /// Allows to use the `#[cmse_nonsecure_entry]` attribute.\n-    (active, cmse_nonsecure_entry, \"1.48.0\", Some(75835), None),\n-\n-    /// Allows rustc to inject a default alloc_error_handler\n-    (active, default_alloc_error_handler, \"1.48.0\", Some(66741), None),\n-\n-    /// Allows argument and return position `impl Trait` in a `const fn`.\n-    (active, const_impl_trait, \"1.48.0\", Some(77463), None),\n-\n-    /// Allows `#[instruction_set(_)]` attribute\n-    (active, isa_attribute, \"1.48.0\", Some(74727), None),\n-\n+    /// Allows using imported `main` function\n+    (active, imported_main, \"1.53.0\", Some(28937), None),\n+    /// Allows in-band quantification of lifetime bindings (e.g., `fn foo(x: &'a u8) -> &'a u8`).\n+    (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n+    /// Allows inferring `'static` outlives requirements (RFC 2093).\n+    (active, infer_static_outlives_requirements, \"1.26.0\", Some(54185), None),\n+    /// Allows associated types in inherent impls.\n+    (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n     /// Allow anonymous constants from an inline `const` block\n     (incomplete, inline_const, \"1.49.0\", Some(76001), None),\n-\n-    /// Allows unsized fn parameters.\n-    (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n-\n-    /// Allows the use of destructuring assignments.\n-    (active, destructuring_assignment, \"1.49.0\", Some(71126), None),\n-\n-    /// Enables `#[cfg(panic = \"...\")]` config key.\n-    (active, cfg_panic, \"1.49.0\", Some(77443), None),\n-\n-    /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n-    (incomplete, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n-\n-    /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n-    (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n-\n-    /// Allows references to types with interior mutability within constants\n-    (active, const_refs_to_cell, \"1.51.0\", Some(80384), None),\n-\n     /// Allows using `pointer` and `reference` in intra-doc links\n     (active, intra_doc_pointers, \"1.51.0\", Some(80896), None),\n-\n-    /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n-    (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n-\n-    /// Allows associated types in inherent impls.\n-    (incomplete, inherent_associated_types, \"1.52.0\", Some(8995), None),\n-\n+    /// Allows `#[instruction_set(_)]` attribute\n+    (active, isa_attribute, \"1.48.0\", Some(74727), None),\n+    /// Allows `'a: { break 'a; }`.\n+    (active, label_break_value, \"1.28.0\", Some(48594), None),\n     // Allows setting the threshold for the `large_assignments` lint.\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n-\n-    /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n-    (active, c_unwind, \"1.52.0\", Some(74990), None),\n-\n-    /// Allows using `#[repr(align(...))]` on function items\n-    (active, fn_align, \"1.53.0\", Some(82232), None),\n-\n-    /// Allows `extern \"wasm\" fn`\n-    (active, wasm_abi, \"1.53.0\", Some(83788), None),\n-\n-    /// Allows function attribute `#[no_coverage]`, to bypass coverage\n-    /// instrumentation of that function.\n-    (active, no_coverage, \"1.53.0\", Some(84605), None),\n-\n-    /// Allows trait bounds in `const fn`.\n-    (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n-\n-    /// Allows `async {}` expressions in const contexts.\n-    (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n-\n-    /// Allows using imported `main` function\n-    (active, imported_main, \"1.53.0\", Some(28937), None),\n-\n+    /// Allows `if/while p && let q = r && ...` chains.\n+    (incomplete, let_chains, \"1.37.0\", Some(53667), None),\n+    /// Allows `let...else` statements.\n+    (active, let_else, \"1.56.0\", Some(87335), None),\n+    /// Allows `#[link(..., cfg(..))]`.\n+    (active, link_cfg, \"1.14.0\", Some(37406), None),\n+    /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n+    (active, lint_reasons, \"1.31.0\", Some(54503), None),\n+    /// Allows `#[marker]` on certain traits allowing overlapping implementations.\n+    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n+    /// A minimal, sound subset of specialization intended to be used by the\n+    /// standard library until the soundness issues with specialization\n+    /// are fixed.\n+    (active, min_specialization, \"1.7.0\", Some(31844), None),\n+    /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n+    (active, more_qualified_paths, \"1.54.0\", Some(86935), None),\n+    /// Allows the `#[must_not_suspend]` attribute.\n+    (active, must_not_suspend, \"1.57.0\", Some(83310), None),\n+    /// Allows using `#[naked]` on functions.\n+    (active, naked_functions, \"1.9.0\", Some(32408), None),\n     /// Allows specifying modifiers in the link attribute: `#[link(modifiers = \"...\")]`\n     (active, native_link_modifiers, \"1.53.0\", Some(81490), None),\n-\n+    /// Allows specifying the as-needed link modifier\n+    (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n     /// Allows specifying the bundle link modifier\n     (active, native_link_modifiers_bundle, \"1.53.0\", Some(81490), None),\n-\n     /// Allows specifying the verbatim link modifier\n     (active, native_link_modifiers_verbatim, \"1.53.0\", Some(81490), None),\n-\n     /// Allows specifying the whole-archive link modifier\n     (active, native_link_modifiers_whole_archive, \"1.53.0\", Some(81490), None),\n-\n-    /// Allows specifying the as-needed link modifier\n-    (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n-\n-    /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n-    (active, more_qualified_paths, \"1.54.0\", Some(86935), None),\n-\n-    /// Allows `cfg(target_abi = \"...\")`.\n-    (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n-\n-    /// Infer generic args for both consts and types.\n-    (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n-\n-    /// Allows `#[derive(Default)]` and `#[default]` on enums.\n-    (active, derive_default_enum, \"1.56.0\", Some(86985), None),\n-\n-    /// Allows `for _ in _` loops in const contexts.\n-    (active, const_for, \"1.56.0\", Some(87575), None),\n-\n-    /// Allows the `?` operator in const contexts.\n-    (active, const_try, \"1.56.0\", Some(74935), None),\n-\n+    /// Allow negative trait implementations.\n+    (active, negative_impls, \"1.44.0\", Some(68318), None),\n+    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n+    (active, never_type, \"1.13.0\", Some(35121), None),\n+    /// Allows diverging expressions to fall back to `!` rather than `()`.\n+    (active, never_type_fallback, \"1.41.0\", Some(65992), None),\n+    /// Allows using non lexical lifetimes (RFC 2094).\n+    (active, nll, \"1.0.0\", Some(43234), None),\n+    /// Allows `#![no_core]`.\n+    (active, no_core, \"1.3.0\", Some(29639), None),\n+    /// Allows function attribute `#[no_coverage]`, to bypass coverage\n+    /// instrumentation of that function.\n+    (active, no_coverage, \"1.53.0\", Some(84605), None),\n+    /// Allows the use of `no_sanitize` attribute.\n+    (active, no_sanitize, \"1.42.0\", Some(39699), None),\n+    /// Allows using the `non_exhaustive_omitted_patterns` lint.\n+    (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n+    /// Allows making `dyn Trait` well-formed even if `Trait` is not object safe.\n+    /// In that case, `dyn Trait: Trait` does not hold. Moreover, coercions and\n+    /// casts in safe Rust to `dyn Trait` for such a `Trait` is also forbidden.\n+    (active, object_safe_for_dispatch, \"1.40.0\", Some(43561), None),\n+    /// Allows using `#[optimize(X)]`.\n+    (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n+    /// Allows `extern \"platform-intrinsic\" { ... }`.\n+    (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n+    /// Allows using `#![plugin(myplugin)]`.\n+    (active, plugin, \"1.0.0\", Some(29597), None),\n+    /// Allows exhaustive integer pattern matching on `usize` and `isize`.\n+    (active, precise_pointer_size_matching, \"1.32.0\", Some(56354), None),\n+    /// Allows macro attributes on expressions, statements and non-inline modules.\n+    (active, proc_macro_hygiene, \"1.30.0\", Some(54727), None),\n+    /// Allows the use of raw-dylibs (RFC 2627).\n+    (incomplete, raw_dylib, \"1.40.0\", Some(58713), None),\n+    /// Allows `&raw const $place_expr` and `&raw mut $place_expr` expressions.\n+    (active, raw_ref_op, \"1.41.0\", Some(64490), None),\n+    /// Allows using the `#[register_attr]` attribute.\n+    (active, register_attr, \"1.41.0\", Some(66080), None),\n+    /// Allows using the `#[register_tool]` attribute.\n+    (active, register_tool, \"1.41.0\", Some(66079), None),\n+    /// Allows the `#[repr(i128)]` attribute for enums.\n+    (incomplete, repr128, \"1.16.0\", Some(56071), None),\n+    /// Allows `repr(simd)` and importing the various simd intrinsics.\n+    (active, repr_simd, \"1.4.0\", Some(27731), None),\n+    /// Allows the use of SIMD types in functions declared in `extern` blocks.\n+    (active, simd_ffi, \"1.0.0\", Some(27731), None),\n+    /// Allows specialization of implementations (RFC 1210).\n+    (incomplete, specialization, \"1.7.0\", Some(31844), None),\n+    /// Allows `#[link(kind=\"static-nobundle\"...)]`.\n+    (active, static_nobundle, \"1.16.0\", Some(37403), None),\n+    /// Allows attributes on expressions and non-item statements.\n+    (active, stmt_expr_attributes, \"1.6.0\", Some(15701), None),\n+    /// Allows the use of `#[target_feature]` on safe functions.\n+    (active, target_feature_11, \"1.45.0\", Some(69098), None),\n+    /// Allows using `#[thread_local]` on `static` items.\n+    (active, thread_local, \"1.0.0\", Some(29594), None),\n+    /// Allows defining `trait X = A + B;` alias items.\n+    (active, trait_alias, \"1.24.0\", Some(41517), None),\n     /// Allows upcasting trait objects via supertraits.\n     /// Trait upcasting is casting, e.g., `dyn Foo -> dyn Bar` where `Foo: Bar`.\n     (incomplete, trait_upcasting, \"1.56.0\", Some(65991), None),\n-\n-    /// Allows explicit generic arguments specification with `impl Trait` present.\n-    (active, explicit_generic_args_with_impl_trait, \"1.56.0\", Some(83701), None),\n-\n-    /// Allows using doc(primitive) without a future-incompat warning\n-    (active, doc_primitive, \"1.56.0\", Some(88070), None),\n-\n-    /// Allows non-trivial generic constants which have to have wfness manually propagated to callers\n-    (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n-\n-    /// Allows additional const parameter types, such as `&'static str` or user defined types\n-    (incomplete, adt_const_params, \"1.56.0\", Some(44580), None),\n-\n-    /// Allows `let...else` statements.\n-    (active, let_else, \"1.56.0\", Some(87335), None),\n-\n-    /// Allows the `#[must_not_suspend]` attribute.\n-    (active, must_not_suspend, \"1.57.0\", Some(83310), None),\n-\n-    /// Allows `#[track_caller]` on closures and generators.\n-    (active, closure_track_caller, \"1.57.0\", Some(87417), None),\n-\n-    /// Allows `#[doc(cfg_hide(...))]`.\n-    (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n-\n-    /// Allows using the `non_exhaustive_omitted_patterns` lint.\n-    (active, non_exhaustive_omitted_patterns_lint, \"1.57.0\", Some(89554), None),\n-\n+    /// Allows #[repr(transparent)] on unions (RFC 2645).\n+    (active, transparent_unions, \"1.37.0\", Some(60405), None),\n+    /// Allows inconsistent bounds in where clauses.\n+    (active, trivial_bounds, \"1.28.0\", Some(48214), None),\n+    /// Allows using `try {...}` expressions.\n+    (active, try_blocks, \"1.29.0\", Some(31436), None),\n+    /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n+    (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n+    /// Allows the use of type ascription in expressions.\n+    (active, type_ascription, \"1.6.0\", Some(23416), None),\n     /// Allows creation of instances of a struct by moving fields that have\n     /// not changed from prior instances of the same struct (RFC #2528)\n     (incomplete, type_changing_struct_update, \"1.58.0\", Some(86555), None),\n-\n-    /// Tells rustdoc to automatically generate `#[doc(cfg(...))]`.\n-    (active, doc_auto_cfg, \"1.58.0\", Some(43781), None),\n-\n-    /// Allows using `const` operands in inline assembly.\n-    (active, asm_const, \"1.58.0\", Some(72016), None),\n-\n-    /// Allows using `sym` operands in inline assembly.\n-    (active, asm_sym, \"1.58.0\", Some(72016), None),\n-\n-    /// Enables experimental inline assembly support for additional architectures.\n-    (active, asm_experimental_arch, \"1.58.0\", Some(72016), None),\n+    /// Allows unsized fn parameters.\n+    (active, unsized_fn_params, \"1.49.0\", Some(48055), None),\n+    /// Allows unsized rvalues at arguments and parameters.\n+    (incomplete, unsized_locals, \"1.30.0\", Some(48055), None),\n+    /// Allows unsized tuple coercion.\n+    (active, unsized_tuple_coercion, \"1.20.0\", Some(42877), None),\n+    /// Allows `union`s to implement `Drop`. Moreover, `union`s may now include fields\n+    /// that don't implement `Copy` as long as they don't have any drop glue.\n+    /// This is checked recursively. On encountering type variable where no progress can be made,\n+    /// `T: Copy` is used as a substitute for \"no drop glue\".\n+    ///\n+    /// NOTE: A limited form of `union U { ... }` was accepted in 1.19.0.\n+    (active, untagged_unions, \"1.13.0\", Some(55149), None),\n+    /// Allows `extern \"wasm\" fn`\n+    (active, wasm_abi, \"1.53.0\", Some(83788), None),\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n+    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates"}, {"sha": "4b40040a03671672ec3e6a8612f8d7fd7600f753", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 94, "deletions": 96, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -45,132 +45,130 @@ declare_features! (\n     // feature-group-start: removed features\n     // -------------------------------------------------------------------------\n \n-    (removed, import_shadowing, \"1.0.0\", None, None, None),\n-    (removed, managed_boxes, \"1.0.0\", None, None, None),\n-    /// Allows use of unary negate on unsigned integers, e.g., -e for e: u8\n-    (removed, negate_unsigned, \"1.0.0\", Some(29645), None, None),\n-    (removed, reflect, \"1.0.0\", Some(27749), None, None),\n-    /// A way to temporarily opt out of opt in copy. This will *never* be accepted.\n-    (removed, opt_out_copy, \"1.0.0\", None, None, None),\n-    (removed, quad_precision_float, \"1.0.0\", None, None, None),\n-    (removed, struct_inherit, \"1.0.0\", None, None, None),\n-    (removed, test_removed_feature, \"1.0.0\", None, None, None),\n-    (removed, visible_private_types, \"1.0.0\", None, None, None),\n-    (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n-    /// Allows using items which are missing stability attributes\n-    (removed, unmarked_api, \"1.0.0\", None, None, None),\n-    (removed, allocator, \"1.0.0\", None, None, None),\n-    (removed, simd, \"1.0.0\", Some(27731), None,\n-     Some(\"removed in favor of `#[repr(simd)]`\")),\n     (removed, advanced_slice_patterns, \"1.0.0\", Some(62254), None,\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n-    (removed, macro_reexport, \"1.0.0\", Some(29638), None,\n-     Some(\"subsumed by `pub use`\")),\n+    (removed, allocator, \"1.0.0\", None, None, None),\n+    (removed, await_macro, \"1.38.0\", Some(50547), None,\n+     Some(\"subsumed by `.await` syntax\")),\n+    /// Allows comparing raw pointers during const eval.\n+    (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n+     Some(\"cannot be allowed in const eval in any meaningful way\")),\n+    /// Allows non-trivial generic constants which have to be manually propagated upwards.\n+     (removed, const_evaluatable_checked, \"1.48.0\", Some(76560), None, Some(\"renamed to `generic_const_exprs`\")),\n+    /// Allows the definition of `const` functions with some advanced features.\n+    (removed, const_fn, \"1.54.0\", Some(57563), None,\n+     Some(\"split into finer-grained feature gates\")),\n+    /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n+    (removed, const_generics, \"1.34.0\", Some(44580), None,\n+     Some(\"removed in favor of `#![feature(adt_const_params)]` and `#![feature(generic_const_exprs)]`\")),\n+    /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n+    (removed, const_in_array_repeat_expressions,  \"1.37.0\", Some(49147), None,\n+     Some(\"removed due to causing promotable bugs\")),\n+    /// Allows casting raw pointers to `usize` during const eval.\n+    (removed, const_raw_ptr_to_usize_cast, \"1.55.0\", Some(51910), None,\n+     Some(\"at compile-time, pointers do not have an integer value, so these casts cannot be properly supported\")),\n+    /// Allows `T: ?const Trait` syntax in bounds.\n+    (removed, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None,\n+     Some(\"Removed in favor of `~const` bound in #![feature(const_trait_impl)]\")),\n     /// Allows using custom attributes (RFC 572).\n     (removed, custom_attribute, \"1.0.0\", Some(29642), None,\n      Some(\"removed in favor of `#![register_tool]` and `#![register_attr]`\")),\n-    /// Allows features specific to OIBIT (now called auto traits).\n-    /// Renamed to `auto_traits`.\n-    (removed, optin_builtin_traits, \"1.0.0\", Some(13231), None,\n-     Some(\"renamed to `auto_traits`\")),\n-    (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n-    (removed, needs_allocator, \"1.4.0\", Some(27389), None,\n-     Some(\"subsumed by `#![feature(allocator_internals)]`\")),\n-    /// Allows identifying crates that contain sanitizer runtimes.\n-    (removed, sanitizer_runtime, \"1.17.0\", None, None, None),\n+    /// Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n+    (removed, custom_derive, \"1.32.0\", Some(29644), None,\n+     Some(\"subsumed by `#[proc_macro_derive]`\")),\n     /// Allows `#[doc(spotlight)]`.\n     /// The attribute was renamed to `#[doc(notable_trait)]`\n     /// and the feature to `doc_notable_trait`.\n     (removed, doc_spotlight, \"1.22.0\", Some(45040), None,\n      Some(\"renamed to `doc_notable_trait`\")),\n-    (removed, proc_macro_mod, \"1.27.0\", Some(54727), None,\n-     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n-    (removed, proc_macro_expr, \"1.27.0\", Some(54727), None,\n-     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n-    (removed, proc_macro_non_items, \"1.27.0\", Some(54727), None,\n-     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n-    (removed, proc_macro_gen, \"1.27.0\", Some(54727), None,\n-     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n-    (removed, panic_implementation, \"1.28.0\", Some(44489), None,\n-     Some(\"subsumed by `#[panic_handler]`\")),\n-    /// Allows the use of `#[derive(Anything)]` as sugar for `#[derive_Anything]`.\n-    (removed, custom_derive, \"1.32.0\", Some(29644), None,\n-     Some(\"subsumed by `#[proc_macro_derive]`\")),\n-    /// Paths of the form: `extern::foo::bar`\n-    (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n-     Some(\"subsumed by `::foo::bar` paths\")),\n-    (removed, quote, \"1.33.0\", Some(29601), None, None),\n-    /// Allows const generic types (e.g. `struct Foo<const N: usize>(...);`).\n-    (removed, const_generics, \"1.34.0\", Some(44580), None,\n-     Some(\"removed in favor of `#![feature(adt_const_params)]` and `#![feature(generic_const_exprs)]`\")),\n-    /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n-    (removed, const_in_array_repeat_expressions,  \"1.37.0\", Some(49147), None,\n-     Some(\"removed due to causing promotable bugs\")),\n     /// Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n-    (removed, await_macro, \"1.38.0\", Some(50547), None,\n-     Some(\"subsumed by `.await` syntax\")),\n     /// Allows defining `existential type`s.\n     (removed, existential_type, \"1.38.0\", Some(63063), None,\n      Some(\"removed in favor of `#![feature(type_alias_impl_trait)]`\")),\n-    /// Allows using the macros:\n-    /// + `__diagnostic_used`\n-    /// + `__register_diagnostic`\n-    /// +`__build_diagnostic_array`\n-    (removed, rustc_diagnostic_macros, \"1.38.0\", None, None, None),\n-    /// Allows using `#[on_unimplemented(..)]` on traits.\n-    /// (Moved to `rustc_attrs`.)\n-    (removed, on_unimplemented, \"1.40.0\", None, None, None),\n-    /// Allows overlapping impls of marker traits.\n-    (removed, overlapping_marker_traits, \"1.42.0\", Some(29864), None,\n-     Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n-    /// Allows `T: ?const Trait` syntax in bounds.\n-    (removed, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None,\n-     Some(\"Removed in favor of `~const` bound in #![feature(const_trait_impl)]\")),\n-    /// Allows `#[no_debug]`.\n-    (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n+    /// Paths of the form: `extern::foo::bar`\n+    (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n+     Some(\"subsumed by `::foo::bar` paths\")),\n+    /// Allows `#[doc(include = \"some-file\")]`.\n+    (removed, external_doc, \"1.54.0\", Some(44732), None,\n+     Some(\"use #[doc = include_str!(\\\"filename\\\")] instead, which handles macro invocations\")),\n+    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n+    (removed, impl_trait_in_bindings, \"1.55.0\", Some(63065), None,\n+     Some(\"the implementation was not maintainable, the feature may get reintroduced once the current refactorings are done\")),\n+    (removed, import_shadowing, \"1.0.0\", None, None, None),\n     /// Lazily evaluate constants. This allows constants to depend on type parameters.\n     (removed, lazy_normalization_consts, \"1.46.0\", Some(72219), None, Some(\"superseded by `generic_const_exprs`\")),\n-    /// Allows comparing raw pointers during const eval.\n-    (removed, const_compare_raw_pointers, \"1.46.0\", Some(53020), None,\n-     Some(\"cannot be allowed in const eval in any meaningful way\")),\n-    /// Allows non-trivial generic constants which have to be manually propagated upwards.\n-    (removed, const_evaluatable_checked, \"1.48.0\", Some(76560), None, Some(\"renamed to `generic_const_exprs`\")),\n     /// Allows using the `#[link_args]` attribute.\n     (removed, link_args, \"1.53.0\", Some(29596), None,\n      Some(\"removed in favor of using `-C link-arg=ARG` on command line, \\\n            which is available from cargo build scripts with `cargo:rustc-link-arg` now\")),\n+    (removed, macro_reexport, \"1.0.0\", Some(29638), None,\n+     Some(\"subsumed by `pub use`\")),\n     /// Allows using `#[main]` to replace the entrypoint `#[lang = \"start\"]` calls.\n     (removed, main, \"1.53.0\", Some(29634), None, None),\n-    (removed, pub_macro_rules, \"1.53.0\", Some(78855), None,\n-     Some(\"removed due to being incomplete, in particular it does not work across crates\")),\n-    /// Allows the definition of `const` functions with some advanced features.\n-    (removed, const_fn, \"1.54.0\", Some(57563), None,\n-     Some(\"split into finer-grained feature gates\")),\n-    /// Allows using `#[plugin_registrar]` on functions.\n-    (removed, plugin_registrar, \"1.54.0\", Some(29597), None,\n-     Some(\"a __rustc_plugin_registrar symbol must now be defined instead\")),\n-\n-    /// Allows `#[doc(include = \"some-file\")]`.\n-    (removed, external_doc, \"1.54.0\", Some(44732), None,\n-     Some(\"use #[doc = include_str!(\\\"filename\\\")] instead, which handles macro invocations\")),\n-\n-     /// Allows casting raw pointers to `usize` during const eval.\n-    (removed, const_raw_ptr_to_usize_cast, \"1.55.0\", Some(51910), None,\n-     Some(\"at compile-time, pointers do not have an integer value, so these casts cannot be properly supported\")),\n-\n-    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n-    (removed, impl_trait_in_bindings, \"1.55.0\", Some(63065), None,\n-     Some(\"the implementation was not maintainable, the feature may get reintroduced once the current refactorings are done\")),\n-\n+    (removed, managed_boxes, \"1.0.0\", None, None, None),\n     /// Allows the use of type alias impl trait in function return positions\n     (removed, min_type_alias_impl_trait, \"1.56.0\", Some(63063), None,\n      Some(\"removed in favor of full type_alias_impl_trait\")),\n-\n+    (removed, needs_allocator, \"1.4.0\", Some(27389), None,\n+     Some(\"subsumed by `#![feature(allocator_internals)]`\")),\n+    /// Allows use of unary negate on unsigned integers, e.g., -e for e: u8\n+    (removed, negate_unsigned, \"1.0.0\", Some(29645), None, None),\n+    /// Allows `#[no_debug]`.\n+    (removed, no_debug, \"1.43.0\", Some(29721), None, Some(\"removed due to lack of demand\")),\n+    /// Allows using `#[on_unimplemented(..)]` on traits.\n+    /// (Moved to `rustc_attrs`.)\n+    (removed, on_unimplemented, \"1.40.0\", None, None, None),\n+    /// A way to temporarily opt out of opt in copy. This will *never* be accepted.\n+    (removed, opt_out_copy, \"1.0.0\", None, None, None),\n+    /// Allows features specific to OIBIT (now called auto traits).\n+    /// Renamed to `auto_traits`.\n+    (removed, optin_builtin_traits, \"1.0.0\", Some(13231), None,\n+     Some(\"renamed to `auto_traits`\")),\n+    /// Allows overlapping impls of marker traits.\n+    (removed, overlapping_marker_traits, \"1.42.0\", Some(29864), None,\n+     Some(\"removed in favor of `#![feature(marker_trait_attr)]`\")),\n+    (removed, panic_implementation, \"1.28.0\", Some(44489), None,\n+     Some(\"subsumed by `#[panic_handler]`\")),\n+    /// Allows using `#[plugin_registrar]` on functions.\n+    (removed, plugin_registrar, \"1.54.0\", Some(29597), None,\n+     Some(\"a __rustc_plugin_registrar symbol must now be defined instead\")),\n+    (removed, proc_macro_expr, \"1.27.0\", Some(54727), None,\n+     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n+    (removed, proc_macro_gen, \"1.27.0\", Some(54727), None,\n+     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n+    (removed, proc_macro_mod, \"1.27.0\", Some(54727), None,\n+     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n+    (removed, proc_macro_non_items, \"1.27.0\", Some(54727), None,\n+     Some(\"subsumed by `#![feature(proc_macro_hygiene)]`\")),\n+    (removed, pub_macro_rules, \"1.53.0\", Some(78855), None,\n+     Some(\"removed due to being incomplete, in particular it does not work across crates\")),\n+    (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n+    (removed, quad_precision_float, \"1.0.0\", None, None, None),\n+    (removed, quote, \"1.33.0\", Some(29601), None, None),\n+    (removed, reflect, \"1.0.0\", Some(27749), None, None),\n+    /// Allows using the macros:\n+    /// + `__diagnostic_used`\n+    /// + `__register_diagnostic`\n+    /// +`__build_diagnostic_array`\n+    (removed, rustc_diagnostic_macros, \"1.38.0\", None, None, None),\n+    /// Allows identifying crates that contain sanitizer runtimes.\n+    (removed, sanitizer_runtime, \"1.17.0\", None, None, None),\n+    (removed, simd, \"1.0.0\", Some(27731), None,\n+     Some(\"removed in favor of `#[repr(simd)]`\")),\n+    (removed, struct_inherit, \"1.0.0\", None, None, None),\n+    (removed, test_removed_feature, \"1.0.0\", None, None, None),\n+    /// Allows using items which are missing stability attributes\n+    (removed, unmarked_api, \"1.0.0\", None, None, None),\n+    (removed, unsafe_no_drop_flag, \"1.0.0\", None, None, None),\n     /// Allows `#[unwind(..)]`.\n     ///\n     /// Permits specifying whether a function should permit unwinding or abort on unwind.\n     (removed, unwind_attributes, \"1.56.0\", Some(58760), None, Some(\"use the C-unwind ABI instead\")),\n+    (removed, visible_private_types, \"1.0.0\", None, None, None),\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n+    // Features are listed in alphabetical order. Tidy will fail if you don't keep it this way.\n+    // !!!!    !!!!    !!!!    !!!!   !!!!    !!!!    !!!!    !!!!    !!!!    !!!!    !!!!\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features"}, {"sha": "c25ec1356e2300ea366eca972e26d392825d85e6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -1794,31 +1794,38 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             },\n             (_, Some(ty)) if ty::TyS::same_type(exp_found.expected, ty) => {\n-                let span = match cause.code {\n-                    // scrutinee's span\n-                    ObligationCauseCode::Pattern { span: Some(span), .. } => span,\n-                    _ => exp_span,\n-                };\n-                diag.span_suggestion_verbose(\n-                    span.shrink_to_hi(),\n-                    \"consider `await`ing on the `Future`\",\n-                    \".await\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n-            (Some(ty), _) if ty::TyS::same_type(ty, exp_found.found) => {\n-                let span = match cause.code {\n-                    // scrutinee's span\n-                    ObligationCauseCode::Pattern { span: Some(span), .. } => span,\n-                    _ => exp_span,\n-                };\n                 diag.span_suggestion_verbose(\n-                    span.shrink_to_hi(),\n+                    exp_span.shrink_to_hi(),\n                     \"consider `await`ing on the `Future`\",\n                     \".await\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n+            (Some(ty), _) if ty::TyS::same_type(ty, exp_found.found) => match cause.code {\n+                ObligationCauseCode::Pattern { span: Some(span), .. }\n+                | ObligationCauseCode::IfExpression(box IfExpressionCause { then: span, .. }) => {\n+                    diag.span_suggestion_verbose(\n+                        span.shrink_to_hi(),\n+                        \"consider `await`ing on the `Future`\",\n+                        \".await\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n+                    ref prior_arms,\n+                    ..\n+                }) => {\n+                    diag.multipart_suggestion_verbose(\n+                        \"consider `await`ing on the `Future`\",\n+                        prior_arms\n+                            .iter()\n+                            .map(|arm| (arm.shrink_to_hi(), \".await\".to_string()))\n+                            .collect(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {}\n+            },\n             _ => {}\n         }\n     }"}, {"sha": "344b483662abd72a8fca92b51dc22654194faf9b", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -879,15 +879,30 @@ impl<T: ?Sized> *const T {\n     /// # } }\n     /// ```\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n-    pub fn align_offset(self, align: usize) -> usize\n+    #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n+    pub const fn align_offset(self, align: usize) -> usize\n     where\n         T: Sized,\n     {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n-        // SAFETY: `align` has been checked to be a power of 2 above\n-        unsafe { align_offset(self, align) }\n+\n+        fn rt_impl<T>(p: *const T, align: usize) -> usize {\n+            // SAFETY: `align` has been checked to be a power of 2 above\n+            unsafe { align_offset(p, align) }\n+        }\n+\n+        const fn ctfe_impl<T>(_: *const T, _: usize) -> usize {\n+            usize::MAX\n+        }\n+\n+        // SAFETY:\n+        // It is permisseble for `align_offset` to always return `usize::MAX`,\n+        // algorithm correctness can not depend on `align_offset` returning non-max values.\n+        //\n+        // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n+        unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n     }\n }\n "}, {"sha": "f3b2bdfefe5dfdfd5747cccd0842eff82e891854", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -1142,15 +1142,30 @@ impl<T: ?Sized> *mut T {\n     /// # } }\n     /// ```\n     #[stable(feature = \"align_offset\", since = \"1.36.0\")]\n-    pub fn align_offset(self, align: usize) -> usize\n+    #[rustc_const_unstable(feature = \"const_align_offset\", issue = \"90962\")]\n+    pub const fn align_offset(self, align: usize) -> usize\n     where\n         T: Sized,\n     {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n-        // SAFETY: `align` has been checked to be a power of 2 above\n-        unsafe { align_offset(self, align) }\n+\n+        fn rt_impl<T>(p: *mut T, align: usize) -> usize {\n+            // SAFETY: `align` has been checked to be a power of 2 above\n+            unsafe { align_offset(p, align) }\n+        }\n+\n+        const fn ctfe_impl<T>(_: *mut T, _: usize) -> usize {\n+            usize::MAX\n+        }\n+\n+        // SAFETY:\n+        // It is permisseble for `align_offset` to always return `usize::MAX`,\n+        // algorithm correctness can not depend on `align_offset` returning non-max values.\n+        //\n+        // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n+        unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n     }\n }\n "}, {"sha": "61cc000dca55529ea82e1c7ded8fd7d0bedf2072", "filename": "src/ci/docker/host-x86_64/dist-arm-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-arm-linux%2FDockerfile?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -8,6 +8,7 @@ RUN sh /scripts/crosstool-ng-1.24.sh\n \n WORKDIR /build\n \n+COPY scripts/musl-patch-configure.diff /build/\n COPY scripts/musl-toolchain.sh /build/\n # We need to mitigate rust-lang/rust#34978 when compiling musl itself as well\n RUN CFLAGS=\"-Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=none\" \\"}, {"sha": "ef49904b53d6a62e9806fbc8ee2a0ba6514817d9", "filename": "src/ci/docker/host-x86_64/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -24,6 +24,7 @@ WORKDIR /build/\n COPY scripts/cmake.sh /scripts/\n RUN /scripts/cmake.sh\n \n+COPY scripts/musl-patch-configure.diff /build/\n COPY scripts/musl-toolchain.sh /build/\n # We need to mitigate rust-lang/rust#34978 when compiling musl itself as well\n RUN CFLAGS=\"-Wa,-mrelax-relocations=no -Wa,--compress-debug-sections=none -Wl,--compress-debug-sections=none\" \\"}, {"sha": "4d554a2852a0910c490a623b7afdda4a8cf381b0", "filename": "src/ci/docker/host-x86_64/test-various/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Ftest-various%2FDockerfile?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -22,6 +22,7 @@ RUN curl -sL https://nodejs.org/dist/v15.14.0/node-v15.14.0-linux-x64.tar.xz | \\\n   tar -xJ\n \n WORKDIR /build/\n+COPY scripts/musl-patch-configure.diff /build/\n COPY scripts/musl-toolchain.sh /build/\n RUN bash musl-toolchain.sh x86_64 && rm -rf build\n WORKDIR /"}, {"sha": "6e106b4504b996d49f2b1b880ed975943712f2b5", "filename": "src/ci/docker/scripts/musl-patch-configure.diff", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fscripts%2Fmusl-patch-configure.diff", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fscripts%2Fmusl-patch-configure.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl-patch-configure.diff?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -0,0 +1,13 @@\n+diff --git a/configure b/configure\n+index 86801281..ed2f7998 100755\n+--- a/configure\n++++ b/configure\n+@@ -398,7 +398,7 @@ test \"$debug\" = yes && CFLAGS_AUTO=-g\n+ #\n+ printf \"checking whether we should preprocess assembly to add debugging information... \"\n+ if fnmatch '-g*|*\\ -g*' \"$CFLAGS_AUTO $CFLAGS\" &&\n+-   test -f \"tools/add-cfi.$ARCH.awk\" &&\n++   test -f \"$srcdir/tools/add-cfi.$ARCH.awk\" &&\n+    printf \".file 1 \\\"srcfile.s\\\"\\n.line 1\\n.cfi_startproc\\n.cfi_endproc\" | $CC -g -x assembler -c -o /dev/null 2>/dev/null -\n+ then\n+   ADD_CFI=yes"}, {"sha": "3c17f316d1fe870e7ff11a5c565efe20b7a4f031", "filename": "src/ci/docker/scripts/musl-toolchain.sh", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -38,13 +38,20 @@ shift\n \n # Ancient binutils versions don't understand debug symbols produced by more recent tools.\n # Apparently applying `-fPIC` everywhere allows them to link successfully.\n-export CFLAGS=\"-fPIC $CFLAGS\"\n+# Enable debug info. If we don't do so, users can't debug into musl code,\n+# debuggers can't walk the stack, etc. Fixes #90103.\n+export CFLAGS=\"-fPIC -g1 $CFLAGS\"\n \n git clone https://github.com/richfelker/musl-cross-make # -b v0.9.9\n cd musl-cross-make\n # A few commits ahead of v0.9.9 to include the cowpatch fix:\n git checkout a54eb56f33f255dfca60be045f12a5cfaf5a72a9\n \n+# Fix the cfi detection script in musl's configure so cfi is generated\n+# when debug info is asked for.\n+mkdir patches/musl-1.1.24\n+cp ../musl-patch-configure.diff patches/musl-1.1.24/0001-fix-cfi-detection.diff\n+\n hide_output make -j$(nproc) TARGET=$TARGET MUSL_VER=1.1.24 LINUX_HEADERS_SITE=$LINUX_HEADERS_SITE\n hide_output make install TARGET=$TARGET MUSL_VER=1.1.24 LINUX_HEADERS_SITE=$LINUX_HEADERS_SITE OUTPUT=$OUTPUT\n "}, {"sha": "df74df79d9f47a0eda39ae622fad1490d0db252d", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -26,4 +26,32 @@ async fn suggest_await_in_async_fn_return() {\n     //~| SUGGESTION .await\n }\n \n+#[allow(unused)]\n+async fn suggest_await_on_if() {\n+    let _x = if true {\n+        dummy()\n+        //~^ HELP consider `await`ing on the `Future`\n+    } else {\n+        dummy().await\n+        //~^ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_on_previous_match_arms() {\n+    let _x = match 0usize {\n+        0 => dummy(), //~ HELP consider `await`ing on the `Future`\n+        1 => dummy(),\n+        2 => dummy().await,\n+        //~^ `match` arms have incompatible types [E0308]\n+    };\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_on_match_expr() {\n+    let _x = match dummy() { //~ HELP consider `await`ing on the `Future`\n+        () => {} //~ ERROR mismatched types [E0308]\n+    };\n+}\n+\n fn main() {}"}, {"sha": "aefe3096fd9b20a0b7d465da9545130fc2091dcb", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -38,6 +38,74 @@ help: consider using a semicolon here\n LL |     dummy();\n    |            +\n \n-error: aborting due to 2 previous errors\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/suggest-missing-await.rs:35:9\n+   |\n+LL |       let _x = if true {\n+   |  ______________-\n+LL | |         dummy()\n+   | |         ------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         dummy().await\n+   | |         ^^^^^^^^^^^^^ expected opaque type, found `()`\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+   = note:   expected type `impl Future`\n+           found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         dummy().await\n+   |                ++++++\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/suggest-missing-await.rs:45:14\n+   |\n+LL |       let _x = match 0usize {\n+   |  ______________-\n+LL | |         0 => dummy(),\n+   | |              ------- this is found to be of type `impl Future`\n+LL | |         1 => dummy(),\n+   | |              ------- this is found to be of type `impl Future`\n+LL | |         2 => dummy().await,\n+   | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL ~         0 => dummy().await,\n+LL ~         1 => dummy().await,\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:53:9\n+   |\n+LL |         () => {}\n+   |         ^^ expected opaque type, found `()`\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     let _x = match dummy().await {\n+   |                           ++++++\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "76a3329f51439ff2cacda4d26d478a9dc1682a06", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -1 +1 @@\n-Subproject commit a8b976eb350acec83280a0cd1ca3ac99faff67bc\n+Subproject commit 76a3329f51439ff2cacda4d26d478a9dc1682a06"}, {"sha": "73668334f05c3446b04116ccc3156240d2d8ab19", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -1 +1 @@\n-Subproject commit 2c0f433fd2e838ae181f87019b6f1fefe33c6f54\n+Subproject commit 73668334f05c3446b04116ccc3156240d2d8ab19"}, {"sha": "9b6037c6a4ba7b0c5105f6f51d1346016dcca472", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41301c3b2371365b753c2ad6a74528a38f3815ce/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=41301c3b2371365b753c2ad6a74528a38f3815ce", "patch": "@@ -7,7 +7,7 @@\n //! * Library features have at most one stability level.\n //! * Library features have at most one `since` value.\n //! * All unstable lang features have tests to ensure they are actually unstable.\n-//! * Language features in a group are sorted by `since` value.\n+//! * Language features in a group are sorted by feature name.\n \n use std::collections::HashMap;\n use std::fmt;\n@@ -258,7 +258,7 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n     let mut next_feature_omits_tracking_issue = false;\n \n     let mut in_feature_group = false;\n-    let mut prev_since = None;\n+    let mut prev_names = vec![];\n \n     contents\n         .lines()\n@@ -291,11 +291,11 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 }\n \n                 in_feature_group = true;\n-                prev_since = None;\n+                prev_names = vec![];\n                 return None;\n             } else if line.starts_with(FEATURE_GROUP_END_PREFIX) {\n                 in_feature_group = false;\n-                prev_since = None;\n+                prev_names = vec![];\n                 return None;\n             }\n \n@@ -325,16 +325,49 @@ fn collect_lang_features_in(base: &Path, file: &str, bad: &mut bool) -> Features\n                 }\n             };\n             if in_feature_group {\n-                if prev_since > since {\n+                if prev_names.last() > Some(&name) {\n+                    // This assumes the user adds the feature name at the end of the list, as we're\n+                    // not looking ahead.\n+                    let correct_index = match prev_names.binary_search(&name) {\n+                        Ok(_) => {\n+                            // This only occurs when the feature name has already been declared.\n+                            tidy_error!(\n+                                bad,\n+                                \"{}:{}: duplicate feature {}\",\n+                                path.display(),\n+                                line_number,\n+                                name,\n+                            );\n+                            // skip any additional checks for this line\n+                            return None;\n+                        }\n+                        Err(index) => index,\n+                    };\n+\n+                    let correct_placement = if correct_index == 0 {\n+                        \"at the beginning of the feature group\".to_owned()\n+                    } else if correct_index == prev_names.len() {\n+                        // I don't believe this is reachable given the above assumption, but it\n+                        // doesn't hurt to be safe.\n+                        \"at the end of the feature group\".to_owned()\n+                    } else {\n+                        format!(\n+                            \"between {} and {}\",\n+                            prev_names[correct_index - 1],\n+                            prev_names[correct_index],\n+                        )\n+                    };\n+\n                     tidy_error!(\n                         bad,\n-                        \"{}:{}: feature {} is not sorted by \\\"since\\\" (version number)\",\n+                        \"{}:{}: feature {} is not sorted by feature name (should be {})\",\n                         path.display(),\n                         line_number,\n                         name,\n+                        correct_placement,\n                     );\n                 }\n-                prev_since = since;\n+                prev_names.push(name);\n             }\n \n             let issue_str = parts.next().unwrap().trim();"}]}