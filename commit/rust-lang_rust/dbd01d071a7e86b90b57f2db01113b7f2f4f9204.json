{"sha": "dbd01d071a7e86b90b57f2db01113b7f2f4f9204", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZDAxZDA3MWE3ZTg2YjkwYjU3ZjJkYjAxMTEzYjdmMmY0ZjkyMDQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T04:07:25Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T04:07:25Z"}, "message": "Refactor some names.", "tree": {"sha": "f28fdc7f288d654e85abc6ab970d9b1acb56d1b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28fdc7f288d654e85abc6ab970d9b1acb56d1b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbd01d071a7e86b90b57f2db01113b7f2f4f9204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd01d071a7e86b90b57f2db01113b7f2f4f9204", "html_url": "https://github.com/rust-lang/rust/commit/dbd01d071a7e86b90b57f2db01113b7f2f4f9204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbd01d071a7e86b90b57f2db01113b7f2f4f9204/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62", "html_url": "https://github.com/rust-lang/rust/commit/40d0a1f67fcde5ea3b24edefc1a4121cbde0fe62"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "1bbc9c6668bce0f4eab11aede96d7e2ef3794f97", "filename": "src/interpreter.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dbd01d071a7e86b90b57f2db01113b7f2f4f9204/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd01d071a7e86b90b57f2db01113b7f2f4f9204/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=dbd01d071a7e86b90b57f2db01113b7f2f4f9204", "patch": "@@ -117,11 +117,11 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         }\n \n         'outer: while !self.stack.is_empty() {\n-            let mut current_block = self.current_frame().next_block;\n+            let mut current_block = self.frame().next_block;\n \n             loop {\n                 print_trace(&current_block, \":\", self.stack.len());\n-                let current_mir = self.current_frame().mir.clone(); // Cloning a reference.\n+                let current_mir = self.mir().clone(); // Cloning a reference.\n                 let block_data = current_mir.basic_block_data(current_block);\n \n                 for stmt in &block_data.statements {\n@@ -228,7 +228,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n             Call { ref func, ref args, ref destination, .. } => {\n                 let mut return_ptr = None;\n                 if let Some((ref lv, target)) = *destination {\n-                    self.current_frame_mut().next_block = target;\n+                    self.frame_mut().next_block = target;\n                     return_ptr = Some(try!(self.eval_lvalue(lv)));\n                 }\n \n@@ -292,7 +292,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n                                 try!(self.push_stack_frame(mir, return_ptr));\n \n                                 for (i, (src, size)) in arg_srcs.into_iter().enumerate() {\n-                                    let dest = self.current_frame().locals[i];\n+                                    let dest = self.frame().locals[i];\n                                     try!(self.memory.copy(src, dest, size));\n                                 }\n \n@@ -609,7 +609,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     }\n \n     fn operand_ty(&self, operand: &mir::Operand<'tcx>) -> ty::Ty<'tcx> {\n-        let ty = self.current_frame().mir.operand_ty(self.tcx, operand);\n+        let ty = self.mir().operand_ty(self.tcx, operand);\n         self.monomorphize(ty)\n     }\n \n@@ -639,7 +639,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     // TODO(tsion): Replace this inefficient hack with a wrapper like LvalueTy (e.g. LvalueRepr).\n     fn lvalue_repr(&self, lvalue: &mir::Lvalue<'tcx>) -> &'arena Repr {\n         use rustc::mir::tcx::LvalueTy;\n-        match self.current_frame().mir.lvalue_ty(self.tcx, lvalue) {\n+        match self.mir().lvalue_ty(self.tcx, lvalue) {\n             LvalueTy::Ty { ty } => self.ty_to_repr(ty),\n             LvalueTy::Downcast { ref adt_def, substs, variant_index } => {\n                 let field_tys = adt_def.variants[variant_index].fields.iter()\n@@ -652,11 +652,11 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     fn eval_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<Pointer> {\n         use rustc::mir::repr::Lvalue::*;\n         let ptr = match *lvalue {\n-            ReturnPointer => self.current_frame().return_ptr\n+            ReturnPointer => self.frame().return_ptr\n                 .expect(\"ReturnPointer used in a function with no return value\"),\n-            Arg(i) => self.current_frame().locals[i as usize],\n-            Var(i) => self.current_frame().locals[self.current_frame().var_offset + i as usize],\n-            Temp(i) => self.current_frame().locals[self.current_frame().temp_offset + i as usize],\n+            Arg(i) => self.frame().locals[i as usize],\n+            Var(i) => self.frame().locals[self.frame().var_offset + i as usize],\n+            Temp(i) => self.frame().locals[self.frame().temp_offset + i as usize],\n \n             Projection(ref proj) => {\n                 let base_ptr = try!(self.eval_lvalue(&proj.base));\n@@ -745,11 +745,11 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     }\n \n     fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> ty::Ty<'tcx> {\n-        self.current_frame().mir.lvalue_ty(self.tcx, lvalue).to_ty(self.tcx)\n+        self.mir().lvalue_ty(self.tcx, lvalue).to_ty(self.tcx)\n     }\n \n     fn monomorphize(&self, ty: ty::Ty<'tcx>) -> ty::Ty<'tcx> {\n-        let substituted = ty.subst(self.tcx, self.current_substs());\n+        let substituted = ty.subst(self.tcx, self.substs());\n         infer::normalize_associated_type(self.tcx, &substituted)\n     }\n \n@@ -893,15 +893,19 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         Ok(val)\n     }\n \n-    fn current_frame(&self) -> &Frame<'a, 'tcx> {\n+    fn frame(&self) -> &Frame<'a, 'tcx> {\n         self.stack.last().expect(\"no call frames exist\")\n     }\n \n-    fn current_frame_mut(&mut self) -> &mut Frame<'a, 'tcx> {\n+    fn frame_mut(&mut self) -> &mut Frame<'a, 'tcx> {\n         self.stack.last_mut().expect(\"no call frames exist\")\n     }\n \n-    fn current_substs(&self) -> &'tcx Substs<'tcx> {\n+    fn mir(&self) -> &mir::Mir<'tcx> {\n+        &self.frame().mir\n+    }\n+\n+    fn substs(&self) -> &'tcx Substs<'tcx> {\n         self.substs_stack.last().cloned().unwrap_or_else(|| self.tcx.mk_substs(Substs::empty()))\n     }\n "}, {"sha": "ab5f56920cfecd04e1e6f060611686b34771d20e", "filename": "src/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbd01d071a7e86b90b57f2db01113b7f2f4f9204/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbd01d071a7e86b90b57f2db01113b7f2f4f9204/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=dbd01d071a7e86b90b57f2db01113b7f2f4f9204", "patch": "@@ -23,19 +23,19 @@ pub struct Allocation {\n     // TODO(tsion): undef mask\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub struct Pointer {\n     pub alloc_id: AllocId,\n     pub offset: usize,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub struct FieldRepr {\n     pub offset: usize,\n     pub size: usize,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, Eq, PartialEq)]\n pub enum Repr {\n     /// Representation for a non-aggregate type such as a boolean, integer, character or pointer.\n     Primitive {"}]}