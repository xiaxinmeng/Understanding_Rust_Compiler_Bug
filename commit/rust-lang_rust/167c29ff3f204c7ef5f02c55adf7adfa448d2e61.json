{"sha": "167c29ff3f204c7ef5f02c55adf7adfa448d2e61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2N2MyOWZmM2YyMDRjN2VmNWYwMmM1NWFkZjdhZGZhNDQ4ZDJlNjE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T14:44:51Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-02T15:17:23Z"}, "message": "middle: typeck: infer: remove dead code", "tree": {"sha": "705b20c14d296a8592d1ceade94ab5db6b7e1b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705b20c14d296a8592d1ceade94ab5db6b7e1b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/167c29ff3f204c7ef5f02c55adf7adfa448d2e61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/167c29ff3f204c7ef5f02c55adf7adfa448d2e61", "html_url": "https://github.com/rust-lang/rust/commit/167c29ff3f204c7ef5f02c55adf7adfa448d2e61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/167c29ff3f204c7ef5f02c55adf7adfa448d2e61/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce47c91bfc27d41d8e674c4aed0e431c1eab75f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce47c91bfc27d41d8e674c4aed0e431c1eab75f6", "html_url": "https://github.com/rust-lang/rust/commit/ce47c91bfc27d41d8e674c4aed0e431c1eab75f6"}], "stats": {"total": 28, "additions": 0, "deletions": 28}, "files": [{"sha": "e01e34a0e5afd2802603e4d1d42f46ed8bc1322f", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/167c29ff3f204c7ef5f02c55adf7adfa448d2e61/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/167c29ff3f204c7ef5f02c55adf7adfa448d2e61/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=167c29ff3f204c7ef5f02c55adf7adfa448d2e61", "patch": "@@ -421,19 +421,6 @@ pub fn mk_coercety(cx: &InferCtxt,\n     })\n }\n \n-pub fn can_mk_coercety(cx: &InferCtxt, a: ty::t, b: ty::t) -> ures {\n-    debug!(\"can_mk_coercety({} -> {})\", a.inf_str(cx), b.inf_str(cx));\n-    indent(|| {\n-        cx.probe(|| {\n-            let trace = TypeTrace {\n-                origin: Misc(codemap::DUMMY_SP),\n-                values: Types(expected_found(true, a, b))\n-            };\n-            Coerce(cx.combine_fields(true, trace)).tys(a, b)\n-        })\n-    }).to_ures()\n-}\n-\n // See comment on the type `resolve_state` below\n pub fn resolve_type(cx: &InferCtxt,\n                     a: ty::t,\n@@ -631,10 +618,6 @@ impl<'a> InferCtxt<'a> {\n         result\n     }\n \n-    pub fn next_int_var(&self) -> ty::t {\n-        ty::mk_int_var(self.tcx, self.next_int_var_id())\n-    }\n-\n     pub fn next_float_var_id(&self) -> FloatVid {\n         let mut float_var_counter = self.float_var_counter.get();\n         let mut float_var_bindings = self.float_var_bindings.borrow_mut();\n@@ -644,21 +627,10 @@ impl<'a> InferCtxt<'a> {\n         result\n     }\n \n-    pub fn next_float_var(&self) -> ty::t {\n-        ty::mk_float_var(self.tcx, self.next_float_var_id())\n-    }\n-\n     pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region {\n         ty::ReInfer(ty::ReVar(self.region_vars.new_region_var(origin)))\n     }\n \n-    pub fn next_region_vars(&self,\n-                            origin: RegionVariableOrigin,\n-                            count: uint)\n-                            -> Vec<ty::Region> {\n-        Vec::from_fn(count, |_| self.next_region_var(origin))\n-    }\n-\n     pub fn region_vars_for_defs(&self,\n                                 span: Span,\n                                 defs: &[ty::RegionParameterDef])"}]}