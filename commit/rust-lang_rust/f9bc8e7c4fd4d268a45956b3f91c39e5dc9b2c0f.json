{"sha": "f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YmM4ZTdjNGZkNGQyNjhhNDU5NTZiM2Y5MWMzOWU1ZGM5YjJjMGY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-04T22:09:47Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-04T22:10:44Z"}, "message": "Make DEBUG_FORMAT = custom work\n\nFixes #45763, ht by @durka", "tree": {"sha": "ded8cb6956f38e217a6b2ccb07cf367706ed60ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded8cb6956f38e217a6b2ccb07cf367706ed60ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f", "html_url": "https://github.com/rust-lang/rust/commit/f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912a3a5752b1332097832753258545702e2f04e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/912a3a5752b1332097832753258545702e2f04e5", "html_url": "https://github.com/rust-lang/rust/commit/912a3a5752b1332097832753258545702e2f04e5"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "a733e9de5a1ab0df6fc58bbf055e4283ac4be063", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=f9bc8e7c4fd4d268a45956b3f91c39e5dc9b2c0f", "patch": "@@ -68,7 +68,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]) => (\n+     @debug_format [$debug_format:tt]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]\n         pub struct $type($($pub)* u32);\n \n@@ -100,7 +100,7 @@ macro_rules! newtype_index {\n     (@handle_debug\n      @derives      []\n      @type         [$type:ident]\n-     @debug_format [$debug_format:expr]) => (\n+     @debug_format [$debug_format:tt]) => (\n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n                 write!(fmt, $debug_format, self.0)\n@@ -112,13 +112,13 @@ macro_rules! newtype_index {\n     (@handle_debug\n      @derives      [Debug, $($derives:ident,)*]\n      @type         [$type:ident]\n-     @debug_format [$debug_format:expr]) => ();\n+     @debug_format [$debug_format:tt]) => ();\n \n     // It's not Debug, so just pop it off the front of the derives stack and check the rest.\n     (@handle_debug\n      @derives      [$_derive:ident, $($derives:ident,)*]\n      @type         [$type:ident]\n-     @debug_format [$debug_format:expr]) => (\n+     @debug_format [$debug_format:tt]) => (\n         newtype_index!(\n             @handle_debug\n             @derives      [$($derives,)*]\n@@ -129,7 +129,7 @@ macro_rules! newtype_index {\n     // Handle the case where someone wants to make the internal field public\n     (@type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    pub idx\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -143,7 +143,7 @@ macro_rules! newtype_index {\n     // The default case is that the internal field is private\n     (@type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @pub          []\n@@ -157,7 +157,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    derive [$($derives:ident),*]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -174,7 +174,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n@@ -192,7 +192,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -209,7 +209,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -225,7 +225,7 @@ macro_rules! newtype_index {\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [RustcDecodable, RustcEncodable,]\n@@ -241,7 +241,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $name:ident = $constant:expr) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n@@ -257,7 +257,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr) => (\n         newtype_index!(\n@@ -274,7 +274,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$_max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    MAX = $max:expr,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n@@ -291,8 +291,8 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$_debug_format:expr]\n-                   DEBUG_FORMAT = $debug_format:expr,\n+     @debug_format [$_debug_format:tt]\n+                   DEBUG_FORMAT = $debug_format:tt,\n                    $($tokens:tt)*) => (\n         newtype_index!(\n             @derives      [$($derives,)*]\n@@ -308,7 +308,7 @@ macro_rules! newtype_index {\n      @pub          [$($pub:tt)*]\n      @type         [$type:ident]\n      @max          [$max:expr]\n-     @debug_format [$debug_format:expr]\n+     @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => ("}]}