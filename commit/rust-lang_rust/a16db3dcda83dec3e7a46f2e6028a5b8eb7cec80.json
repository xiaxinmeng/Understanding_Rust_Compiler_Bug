{"sha": "a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNmRiM2RjZGE4M2RlYzNlN2E0NmYyZTYwMjhhNWI4ZWI3Y2VjODA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-17T06:20:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-17T06:20:48Z"}, "message": "Rollup merge of #82774 - JohnTitor:bad-diag-for-anon-params-with-ref, r=estebank\n\nFix bad diagnostics for anon params with ref and/or qualified paths\n\nFixes #82729\nIt's easier to review with hiding whitespace changes.", "tree": {"sha": "aa4aec9d3b87b15b3bb5379543114e79e369dabb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa4aec9d3b87b15b3bb5379543114e79e369dabb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgUZ/ACRBK7hj4Ov3rIwAAdHIIAEPw29PTnkkUJAe957r20Qtx\nMRPqb2p6vStLIl3+a9TkEKdwTS4adPuleo/sKvjB7KCefR4yavtbAyVVaZnI0vri\nqm+I7NDOhqfPyDIZovEJn/vGFDVpQIveIeqC5erpOFR22JrAzQxZF7xWxWryvNbG\nGN63FXCgP/a5QCVPHhFKySQFVNJiyupU/6o+RqWsDudpPFjtKD0rfA+Gzwrb3q8l\nQlfhG9wTX7C47sbp/CU0uDvTkRKa7FX/WU9hJ3Q5qYwQKvi00+FeIYijULzX+fJf\n++QslioxY7l1uDKPJm8VyGEe8xpIHiyChTDwL4IVfqrctfww7sQxU/nfJDbAXxs=\n=xVOf\n-----END PGP SIGNATURE-----\n", "payload": "tree aa4aec9d3b87b15b3bb5379543114e79e369dabb\nparent e655fb62216b6ba64a094b30f116d7988d19322d\nparent 55bdf7f188f1a6ded58b2e28bc2c783ee75b1a60\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1615962048 +0900\ncommitter GitHub <noreply@github.com> 1615962048 +0900\n\nRollup merge of #82774 - JohnTitor:bad-diag-for-anon-params-with-ref, r=estebank\n\nFix bad diagnostics for anon params with ref and/or qualified paths\n\nFixes #82729\nIt's easier to review with hiding whitespace changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "html_url": "https://github.com/rust-lang/rust/commit/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e655fb62216b6ba64a094b30f116d7988d19322d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e655fb62216b6ba64a094b30f116d7988d19322d", "html_url": "https://github.com/rust-lang/rust/commit/e655fb62216b6ba64a094b30f116d7988d19322d"}, {"sha": "55bdf7f188f1a6ded58b2e28bc2c783ee75b1a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/55bdf7f188f1a6ded58b2e28bc2c783ee75b1a60", "html_url": "https://github.com/rust-lang/rust/commit/55bdf7f188f1a6ded58b2e28bc2c783ee75b1a60"}], "stats": {"total": 208, "additions": 172, "deletions": 36}, "files": [{"sha": "77e85c06ff5aea1a4774930830c223ca0b7fa068", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 72, "deletions": 32, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "patch": "@@ -640,7 +640,7 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n                 Err(mut err) => {\n-                    // We could't parse generic parameters, unlikely to be a turbofish. Rely on\n+                    // We couldn't parse generic parameters, unlikely to be a turbofish. Rely on\n                     // generic parse error instead.\n                     err.cancel();\n                     *self = snapshot;\n@@ -1242,7 +1242,7 @@ impl<'a> Parser<'a> {\n         let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n         let expr = if self.token == token::OpenDelim(token::Brace) {\n             // Handle `await { <expr> }`.\n-            // This needs to be handled separatedly from the next arm to avoid\n+            // This needs to be handled separately from the next arm to avoid\n             // interpreting `await { <expr> }?` as `<expr>?.await`.\n             self.parse_block_expr(None, self.token.span, BlockCheckMode::Default, AttrVec::new())\n         } else {\n@@ -1613,42 +1613,82 @@ impl<'a> Parser<'a> {\n                 Applicability::HasPlaceholders,\n             );\n             return Some(ident);\n-        } else if let PatKind::Ident(_, ident, _) = pat.kind {\n-            if require_name\n-                && (self.token == token::Comma\n-                    || self.token == token::Lt\n-                    || self.token == token::CloseDelim(token::Paren))\n-            {\n-                // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n-                if first_param {\n-                    err.span_suggestion(\n-                        pat.span,\n-                        \"if this is a `self` type, give it a parameter name\",\n-                        format!(\"self: {}\", ident),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+        } else if require_name\n+            && (self.token == token::Comma\n+                || self.token == token::Lt\n+                || self.token == token::CloseDelim(token::Paren))\n+        {\n+            let rfc_note = \"anonymous parameters are removed in the 2018 edition (see RFC 1685)\";\n+\n+            let (ident, self_sugg, param_sugg, type_sugg) = match pat.kind {\n+                PatKind::Ident(_, ident, _) => (\n+                    ident,\n+                    format!(\"self: {}\", ident),\n+                    format!(\"{}: TypeName\", ident),\n+                    format!(\"_: {}\", ident),\n+                ),\n+                // Also catches `fn foo(&a)`.\n+                PatKind::Ref(ref pat, mutab)\n+                    if matches!(pat.clone().into_inner().kind, PatKind::Ident(..)) =>\n+                {\n+                    match pat.clone().into_inner().kind {\n+                        PatKind::Ident(_, ident, _) => {\n+                            let mutab = mutab.prefix_str();\n+                            (\n+                                ident,\n+                                format!(\"self: &{}{}\", mutab, ident),\n+                                format!(\"{}: &{}TypeName\", ident, mutab),\n+                                format!(\"_: &{}{}\", mutab, ident),\n+                            )\n+                        }\n+                        _ => unreachable!(),\n+                    }\n                 }\n-                // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n-                // `fn foo(HashMap: TypeName<u32>)`.\n-                if self.token != token::Lt {\n-                    err.span_suggestion(\n-                        pat.span,\n-                        \"if this is a parameter name, give it a type\",\n-                        format!(\"{}: TypeName\", ident),\n-                        Applicability::HasPlaceholders,\n-                    );\n+                _ => {\n+                    // Otherwise, try to get a type and emit a suggestion.\n+                    if let Some(ty) = pat.to_ty() {\n+                        err.span_suggestion_verbose(\n+                            pat.span,\n+                            \"explicitly ignore the parameter name\",\n+                            format!(\"_: {}\", pprust::ty_to_string(&ty)),\n+                            Applicability::MachineApplicable,\n+                        );\n+                        err.note(rfc_note);\n+                    }\n+\n+                    return None;\n                 }\n+            };\n+\n+            // `fn foo(a, b) {}`, `fn foo(a<x>, b<y>) {}` or `fn foo(usize, usize) {}`\n+            if first_param {\n                 err.span_suggestion(\n                     pat.span,\n-                    \"if this is a type, explicitly ignore the parameter name\",\n-                    format!(\"_: {}\", ident),\n-                    Applicability::MachineApplicable,\n+                    \"if this is a `self` type, give it a parameter name\",\n+                    self_sugg,\n+                    Applicability::MaybeIncorrect,\n                 );\n-                err.note(\"anonymous parameters are removed in the 2018 edition (see RFC 1685)\");\n-\n-                // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n-                return if self.token == token::Lt { None } else { Some(ident) };\n             }\n+            // Avoid suggesting that `fn foo(HashMap<u32>)` is fixed with a change to\n+            // `fn foo(HashMap: TypeName<u32>)`.\n+            if self.token != token::Lt {\n+                err.span_suggestion(\n+                    pat.span,\n+                    \"if this is a parameter name, give it a type\",\n+                    param_sugg,\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n+            err.span_suggestion(\n+                pat.span,\n+                \"if this is a type, explicitly ignore the parameter name\",\n+                type_sugg,\n+                Applicability::MachineApplicable,\n+            );\n+            err.note(rfc_note);\n+\n+            // Don't attempt to recover by using the `X` in `X<Y>` as the parameter name.\n+            return if self.token == token::Lt { None } else { Some(ident) };\n         }\n         None\n     }"}, {"sha": "95533cf3dfbf1710956a34018e10e59aa124d5dd", "filename": "src/test/ui/anon-params/anon-params-denied-2018.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.rs?ref=a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "patch": "@@ -5,6 +5,20 @@\n trait T {\n     fn foo(i32); //~ expected one of `:`, `@`, or `|`, found `)`\n \n+    // Also checks with `&`\n+    fn foo_with_ref(&mut i32);\n+    //~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n+\n+    fn foo_with_qualified_path(<Bar as T>::Baz);\n+    //~^ ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+\n+    fn foo_with_qualified_path_and_ref(&<Bar as T>::Baz);\n+    //~^ ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+\n+    fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n+    //~^ ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `,`\n+    //~| ERROR expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+\n     fn bar_with_default_impl(String, String) {}\n     //~^ ERROR expected one of `:`\n     //~| ERROR expected one of `:`"}, {"sha": "b53640cd65ba9cc9d50aad406b1cec4b35652381", "filename": "src/test/ui/anon-params/anon-params-denied-2018.stderr", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params%2Fanon-params-denied-2018.stderr?ref=a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "patch": "@@ -18,8 +18,76 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn foo(_: i32);\n    |            ^^^^^^\n \n+error: expected one of `:`, `@`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:9:29\n+   |\n+LL |     fn foo_with_ref(&mut i32);\n+   |                             ^ expected one of `:`, `@`, or `|`\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL |     fn foo_with_ref(self: &mut i32);\n+   |                     ^^^^^^^^^^^^^^\n+help: if this is a parameter name, give it a type\n+   |\n+LL |     fn foo_with_ref(i32: &mut TypeName);\n+   |                     ^^^^^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_ref(_: &mut i32);\n+   |                     ^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:12:47\n+   |\n+LL |     fn foo_with_qualified_path(<Bar as T>::Baz);\n+   |                                               ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_qualified_path(_: <Bar as T>::Baz);\n+   |                                ^^^^^^^^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:15:56\n+   |\n+LL |     fn foo_with_qualified_path_and_ref(&<Bar as T>::Baz);\n+   |                                                        ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_qualified_path_and_ref(_: &<Bar as T>::Baz);\n+   |                                        ^^^^^^^^^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `,`\n+  --> $DIR/anon-params-denied-2018.rs:18:57\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n+   |                                                         ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(_: <Bar as T>::Baz, <Bar as T>::Baz);\n+   |                                          ^^^^^^^^^^^^^^^^^^\n+\n+error: expected one of `(`, `...`, `..=`, `..`, `::`, `:`, `{`, or `|`, found `)`\n+  --> $DIR/anon-params-denied-2018.rs:18:74\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, <Bar as T>::Baz);\n+   |                                                                          ^ expected one of 8 possible tokens\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: explicitly ignore the parameter name\n+   |\n+LL |     fn foo_with_multiple_qualified_paths(<Bar as T>::Baz, _: <Bar as T>::Baz);\n+   |                                                           ^^^^^^^^^^^^^^^^^^\n+\n error: expected one of `:`, `@`, or `|`, found `,`\n-  --> $DIR/anon-params-denied-2018.rs:8:36\n+  --> $DIR/anon-params-denied-2018.rs:22:36\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                    ^ expected one of `:`, `@`, or `|`\n@@ -39,7 +107,7 @@ LL |     fn bar_with_default_impl(_: String, String) {}\n    |                              ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `)`\n-  --> $DIR/anon-params-denied-2018.rs:8:44\n+  --> $DIR/anon-params-denied-2018.rs:22:44\n    |\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                            ^ expected one of `:`, `@`, or `|`\n@@ -55,7 +123,7 @@ LL |     fn bar_with_default_impl(String, _: String) {}\n    |                                      ^^^^^^^^^\n \n error: expected one of `:`, `@`, or `|`, found `,`\n-  --> $DIR/anon-params-denied-2018.rs:13:22\n+  --> $DIR/anon-params-denied-2018.rs:27:22\n    |\n LL |     fn baz(a:usize, b, c: usize) -> usize {\n    |                      ^ expected one of `:`, `@`, or `|`\n@@ -70,5 +138,5 @@ help: if this is a type, explicitly ignore the parameter name\n LL |     fn baz(a:usize, _: b, c: usize) -> usize {\n    |                     ^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "4ffee657cabbeb64ad5252c647cc2ecf5ac42f50", "filename": "src/test/ui/parser/lifetime-in-pattern.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr?ref=a16db3dcda83dec3e7a46f2e6028a5b8eb7cec80", "patch": "@@ -9,6 +9,20 @@ error: expected one of `:`, `@`, or `|`, found `)`\n    |\n LL | fn test(&'a str) {\n    |                ^ expected one of `:`, `@`, or `|`\n+   |\n+   = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\n+help: if this is a `self` type, give it a parameter name\n+   |\n+LL | fn test(self: &str) {\n+   |         ^^^^^^^^^^\n+help: if this is a parameter name, give it a type\n+   |\n+LL | fn test(str: &TypeName) {\n+   |         ^^^^^^^^^^^^^^\n+help: if this is a type, explicitly ignore the parameter name\n+   |\n+LL | fn test(_: &str) {\n+   |         ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}