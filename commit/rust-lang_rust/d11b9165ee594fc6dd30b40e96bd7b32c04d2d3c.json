{"sha": "d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "node_id": "C_kwDOAAsO6NoAKGQxMWI5MTY1ZWU1OTRmYzZkZDMwYjQwZTk2YmQ3YjMyYzA0ZDJkM2M", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-22T13:57:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-04-08T10:29:15Z"}, "message": "resolve: Preserve reexport chains in `ModChild`ren\n\nThis may be potentially useful for\n- avoiding uses of `hir::ItemKind::Use`\n- preserving documentation comments on all reexports\n- preserving and checking stability/deprecation info on reexports\n- all kinds of diagnostics", "tree": {"sha": "9beaa838c939aa96ce142164ca9d30e02e847a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9beaa838c939aa96ce142164ca9d30e02e847a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "html_url": "https://github.com/rust-lang/rust/commit/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c49c4fba1168d8a776ef5207ec28000112191ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c49c4fba1168d8a776ef5207ec28000112191ae2", "html_url": "https://github.com/rust-lang/rust/commit/c49c4fba1168d8a776ef5207ec28000112191ae2"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "f9d32ffceef61fa6828f30d4b15f9b7f25020a78", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "patch": "@@ -991,7 +991,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             _ => false,\n         };\n \n-        ModChild { ident, res, vis, span, macro_rules }\n+        ModChild { ident, res, vis, span, macro_rules, reexport_chain: Default::default() }\n     }\n \n     /// Iterates over all named children of the given module,"}, {"sha": "dd1e254f405b65983b0e8be00f3fa889bfa8b1a5", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "patch": "@@ -119,6 +119,7 @@ macro_rules! arena_types {\n             [] external_constraints: rustc_middle::traits::solve::ExternalConstraintsData<'tcx>,\n             [decode] doc_link_resolutions: rustc_hir::def::DocLinkResMap,\n             [] closure_kind_origin: (rustc_span::Span, rustc_middle::hir::place::Place<'tcx>),\n+            [] mod_child: rustc_middle::metadata::ModChild,\n         ]);\n     )\n }"}, {"sha": "fabc6bce7317bd24fa259ea384cee7441abe8c57", "filename": "compiler/rustc_middle/src/metadata.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmetadata.rs?ref=d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "patch": "@@ -5,13 +5,34 @@ use rustc_macros::HashStable;\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n+use smallvec::SmallVec;\n+\n+/// A simplified version of `ImportKind` from resolve.\n+/// `DefId`s here correspond to `use` and `extern crate` items themselves, not their targets.\n+#[derive(Clone, Copy, Debug, TyEncodable, TyDecodable, HashStable)]\n+pub enum Reexport {\n+    Single(DefId),\n+    Glob(DefId),\n+    ExternCrate(DefId),\n+    MacroUse,\n+    MacroExport,\n+}\n+\n+impl Reexport {\n+    pub fn id(self) -> Option<DefId> {\n+        match self {\n+            Reexport::Single(id) | Reexport::Glob(id) | Reexport::ExternCrate(id) => Some(id),\n+            Reexport::MacroUse | Reexport::MacroExport => None,\n+        }\n+    }\n+}\n \n /// This structure is supposed to keep enough data to re-create `NameBinding`s for other crates\n /// during name resolution. Right now the bindings are not recreated entirely precisely so we may\n /// need to add more data in the future to correctly support macros 2.0, for example.\n /// Module child can be either a proper item or a reexport (including private imports).\n /// In case of reexport all the fields describe the reexport item itself, not what it refers to.\n-#[derive(Copy, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n+#[derive(Debug, TyEncodable, TyDecodable, HashStable)]\n pub struct ModChild {\n     /// Name of the item.\n     pub ident: Ident,\n@@ -24,4 +45,7 @@ pub struct ModChild {\n     pub span: Span,\n     /// A proper `macro_rules` item (not a reexport).\n     pub macro_rules: bool,\n+    /// Reexport chain linking this module child to its original reexported item.\n+    /// Empty if the module child is a proper item.\n+    pub reexport_chain: SmallVec<[Reexport; 2]>,\n }"}, {"sha": "24d98665a7b445809434f6a3bd442e707721b85b", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "patch": "@@ -235,7 +235,6 @@ trivial! {\n     rustc_hir::OwnerId,\n     rustc_hir::Upvar,\n     rustc_index::bit_set::FiniteBitSet<u32>,\n-    rustc_middle::metadata::ModChild,\n     rustc_middle::middle::dependency_format::Linkage,\n     rustc_middle::middle::exported_symbols::SymbolExportInfo,\n     rustc_middle::middle::resolve_bound_vars::ObjectLifetimeDefault,"}, {"sha": "1f2a90829ec729325796c5552b5051e6ecc054fc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "patch": "@@ -931,7 +931,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n     /// Builds the reduced graph for a single item in an external crate.\n     fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {\n         let parent = self.parent_scope.module;\n-        let ModChild { ident, res, vis, span, macro_rules } = child;\n+        let ModChild { ident, res, vis, span, macro_rules, .. } = child;\n         let res = res.expect_non_local();\n         let expansion = self.parent_scope.expansion;\n         // Record primary definitions."}, {"sha": "77bfcb659de106967088562a9cb9a1436f39fa0e", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "patch": "@@ -17,6 +17,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_hir::def::{self, DefKind, PartialRes};\n use rustc_middle::metadata::ModChild;\n+use rustc_middle::metadata::Reexport;\n use rustc_middle::span_bug;\n use rustc_middle::ty;\n use rustc_session::lint::builtin::{\n@@ -27,6 +28,7 @@ use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::LocalExpnId;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n+use smallvec::SmallVec;\n \n use std::cell::Cell;\n use std::{mem, ptr};\n@@ -190,6 +192,17 @@ impl<'a> Import<'a> {\n             ImportKind::MacroUse | ImportKind::MacroExport => None,\n         }\n     }\n+\n+    fn simplify(&self, r: &Resolver<'_, '_>) -> Reexport {\n+        let to_def_id = |id| r.local_def_id(id).to_def_id();\n+        match self.kind {\n+            ImportKind::Single { id, .. } => Reexport::Single(to_def_id(id)),\n+            ImportKind::Glob { id, .. } => Reexport::Glob(to_def_id(id)),\n+            ImportKind::ExternCrate { id, .. } => Reexport::ExternCrate(to_def_id(id)),\n+            ImportKind::MacroUse => Reexport::MacroUse,\n+            ImportKind::MacroExport => Reexport::MacroExport,\n+        }\n+    }\n }\n \n /// Records information about the resolution of a name in a namespace of a module.\n@@ -1252,12 +1265,20 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             module.for_each_child(self, |this, ident, _, binding| {\n                 if let Some(res) = this.is_reexport(binding) {\n+                    let mut reexport_chain = SmallVec::new();\n+                    let mut next_binding = binding;\n+                    while let NameBindingKind::Import { binding, import, .. } = next_binding.kind {\n+                        reexport_chain.push(import.simplify(this));\n+                        next_binding = binding;\n+                    }\n+\n                     reexports.push(ModChild {\n                         ident,\n                         res,\n                         vis: binding.vis,\n                         span: binding.span,\n                         macro_rules: false,\n+                        reexport_chain,\n                     });\n                 }\n             });"}, {"sha": "87f9483388f7befc41afd40d2bb3adecc3de8cf6", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d11b9165ee594fc6dd30b40e96bd7b32c04d2d3c", "patch": "@@ -558,7 +558,7 @@ fn build_module_items(\n     // If we're re-exporting a re-export it may actually re-export something in\n     // two namespaces, so the target may be listed twice. Make sure we only\n     // visit each node at most once.\n-    for &item in cx.tcx.module_children(did).iter() {\n+    for item in cx.tcx.module_children(did).iter() {\n         if item.vis.is_public() {\n             let res = item.res.expect_non_local();\n             if let Some(def_id) = res.opt_def_id()"}]}