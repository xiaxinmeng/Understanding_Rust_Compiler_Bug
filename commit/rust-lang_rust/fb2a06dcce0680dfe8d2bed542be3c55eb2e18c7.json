{"sha": "fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMmEwNmRjY2UwNjgwZGZlOGQyYmVkNTQyYmUzYzU1ZWIyZTE4Yzc=", "commit": {"author": {"name": "pro-grammer1", "email": "1df0d0d3-eed4-45fc-bc60-43a85079f3f9@anonaddy.me", "date": "2021-01-17T18:55:59Z"}, "committer": {"name": "pro-grammer1", "email": "1df0d0d3-eed4-45fc-bc60-43a85079f3f9@anonaddy.me", "date": "2021-01-17T18:55:59Z"}, "message": "Remove numeric literals from print_literal and write_literal tests", "tree": {"sha": "2d1443996517acb03ab6909f25c66ba8da6faab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d1443996517acb03ab6909f25c66ba8da6faab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "html_url": "https://github.com/rust-lang/rust/commit/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/comments", "author": {"login": "pro-grammer1", "id": 75092787, "node_id": "MDQ6VXNlcjc1MDkyNzg3", "avatar_url": "https://avatars.githubusercontent.com/u/75092787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pro-grammer1", "html_url": "https://github.com/pro-grammer1", "followers_url": "https://api.github.com/users/pro-grammer1/followers", "following_url": "https://api.github.com/users/pro-grammer1/following{/other_user}", "gists_url": "https://api.github.com/users/pro-grammer1/gists{/gist_id}", "starred_url": "https://api.github.com/users/pro-grammer1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pro-grammer1/subscriptions", "organizations_url": "https://api.github.com/users/pro-grammer1/orgs", "repos_url": "https://api.github.com/users/pro-grammer1/repos", "events_url": "https://api.github.com/users/pro-grammer1/events{/privacy}", "received_events_url": "https://api.github.com/users/pro-grammer1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pro-grammer1", "id": 75092787, "node_id": "MDQ6VXNlcjc1MDkyNzg3", "avatar_url": "https://avatars.githubusercontent.com/u/75092787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pro-grammer1", "html_url": "https://github.com/pro-grammer1", "followers_url": "https://api.github.com/users/pro-grammer1/followers", "following_url": "https://api.github.com/users/pro-grammer1/following{/other_user}", "gists_url": "https://api.github.com/users/pro-grammer1/gists{/gist_id}", "starred_url": "https://api.github.com/users/pro-grammer1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pro-grammer1/subscriptions", "organizations_url": "https://api.github.com/users/pro-grammer1/orgs", "repos_url": "https://api.github.com/users/pro-grammer1/repos", "events_url": "https://api.github.com/users/pro-grammer1/events{/privacy}", "received_events_url": "https://api.github.com/users/pro-grammer1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab155b14a27811c29e35bea76bfbf3845bc79fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab155b14a27811c29e35bea76bfbf3845bc79fdf", "html_url": "https://github.com/rust-lang/rust/commit/ab155b14a27811c29e35bea76bfbf3845bc79fdf"}], "stats": {"total": 104, "additions": 31, "deletions": 73}, "files": [{"sha": "503cb82c3e586e544e5b82bc382413a82a32d1d9", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "patch": "@@ -461,7 +461,7 @@ impl Write {\n                         span_lint(cx, lint, token_expr.span, \"literal with an empty format string\");\n                     }\n                     idx += 1;\n-                }\n+                },\n                 ExprKind::Assign(lhs, rhs, _) => {\n                     if_chain! {\n                         if let ExprKind::Lit(ref lit) = rhs.kind;"}, {"sha": "59469ec5891c8b45db0c7cdbbde844f9f3bc32a1", "filename": "tests/ui/crashes/ice-3891.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fcrashes%2Fice-3891.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fcrashes%2Fice-3891.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-3891.stderr?ref=fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "patch": "@@ -1,10 +1,10 @@\n-error: invalid suffix `x` for integer literal\n+error: invalid suffix `x` for number literal\n   --> $DIR/ice-3891.rs:2:5\n    |\n LL |     1x;\n    |     ^^ invalid suffix `x`\n    |\n-   = help: the suffix must be one of the integral types (`u32`, `isize`, etc)\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n \n error: aborting due to previous error\n "}, {"sha": "0c8aecc2d8c00f656e0a6db61f5d8fa13b4e7b65", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "patch": "@@ -19,12 +19,9 @@ fn main() {\n     println!(\"{number:>0width$}\", number = 1, width = 6);\n \n     // these should throw warnings\n-    println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     print!(\"Hello {}\", \"world\");\n     println!(\"Hello {} {}\", world, \"world\");\n     println!(\"Hello {}\", \"world\");\n-    println!(\"10 / 4 is {}\", 2.5);\n-    println!(\"2 + 1 = {}\", 3);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "692abdb305443e4f81fe99c24df2863e25c6cc2f", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "patch": "@@ -1,88 +1,70 @@\n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:22:71\n-   |\n-LL |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n-   |                                                                       ^\n-   |\n-   = note: `-D clippy::print-literal` implied by `-D warnings`\n-\n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:23:24\n+  --> $DIR/print_literal.rs:22:24\n    |\n LL |     print!(\"Hello {}\", \"world\");\n    |                        ^^^^^^^\n+   |\n+   = note: `-D clippy::print-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:24:36\n+  --> $DIR/print_literal.rs:23:36\n    |\n LL |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:25:26\n+  --> $DIR/print_literal.rs:24:26\n    |\n LL |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:26:30\n-   |\n-LL |     println!(\"10 / 4 is {}\", 2.5);\n-   |                              ^^^\n-\n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:27:28\n-   |\n-LL |     println!(\"2 + 1 = {}\", 3);\n-   |                            ^\n-\n-error: literal with an empty format string\n-  --> $DIR/print_literal.rs:32:25\n+  --> $DIR/print_literal.rs:29:25\n    |\n LL |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:32:34\n+  --> $DIR/print_literal.rs:29:34\n    |\n LL |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:25\n+  --> $DIR/print_literal.rs:30:25\n    |\n LL |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:34\n+  --> $DIR/print_literal.rs:30:34\n    |\n LL |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:36:35\n+  --> $DIR/print_literal.rs:33:35\n    |\n LL |     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n    |                                   ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:36:50\n+  --> $DIR/print_literal.rs:33:50\n    |\n LL |     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n    |                                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:35\n+  --> $DIR/print_literal.rs:34:35\n    |\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                   ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:50\n+  --> $DIR/print_literal.rs:34:50\n    |\n LL |     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                                  ^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "f5de7ea71d385e04db03dd713a318025dc48aa8f", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "patch": "@@ -24,12 +24,9 @@ fn main() {\n     writeln!(&mut v, \"{number:>0width$}\", number = 1, width = 6);\n \n     // these should throw warnings\n-    writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n     write!(&mut v, \"Hello {}\", \"world\");\n     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n     writeln!(&mut v, \"Hello {}\", \"world\");\n-    writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n-    writeln!(&mut v, \"2 + 1 = {}\", 3);\n \n     // positional args don't change the fact\n     // that we're using a literal -- this should"}, {"sha": "4dcaaa474a88b6b6af1ac070fc32f38841255ed4", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=fb2a06dcce0680dfe8d2bed542be3c55eb2e18c7", "patch": "@@ -1,88 +1,70 @@\n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:27:79\n-   |\n-LL |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n-   |                                                                               ^\n-   |\n-   = note: `-D clippy::write-literal` implied by `-D warnings`\n-\n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:28:32\n+  --> $DIR/write_literal.rs:27:32\n    |\n LL |     write!(&mut v, \"Hello {}\", \"world\");\n    |                                ^^^^^^^\n+   |\n+   = note: `-D clippy::write-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:29:44\n+  --> $DIR/write_literal.rs:28:44\n    |\n LL |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n    |                                            ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:30:34\n+  --> $DIR/write_literal.rs:29:34\n    |\n LL |     writeln!(&mut v, \"Hello {}\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:31:38\n-   |\n-LL |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n-   |                                      ^^^\n-\n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:32:36\n-   |\n-LL |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n-   |                                    ^\n-\n-error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:33\n+  --> $DIR/write_literal.rs:34:33\n    |\n LL |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:42\n+  --> $DIR/write_literal.rs:34:42\n    |\n LL |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:38:33\n+  --> $DIR/write_literal.rs:35:33\n    |\n LL |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:38:42\n+  --> $DIR/write_literal.rs:35:42\n    |\n LL |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:43\n+  --> $DIR/write_literal.rs:38:43\n    |\n LL |     writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n    |                                           ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:58\n+  --> $DIR/write_literal.rs:38:58\n    |\n LL |     writeln!(&mut v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n    |                                                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:42:43\n+  --> $DIR/write_literal.rs:39:43\n    |\n LL |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                           ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:42:58\n+  --> $DIR/write_literal.rs:39:58\n    |\n LL |     writeln!(&mut v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n    |                                                          ^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 11 previous errors\n "}]}