{"sha": "661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "node_id": "C_kwDOAAsO6NoAKDY2MWQ0ODhiZmQ3Y2Q0ODg4NDAwYTIzYjlmNmVhOWJiMTVjYWNhZjU", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-06-24T11:16:48Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-06-24T11:16:48Z"}, "message": "use true recursion", "tree": {"sha": "f7cb81a0c6efeb6caebd034d338b65b23ef0bab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7cb81a0c6efeb6caebd034d338b65b23ef0bab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "html_url": "https://github.com/rust-lang/rust/commit/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90abfe9ce27c81808e3f74861072df6734f6a45d", "url": "https://api.github.com/repos/rust-lang/rust/commits/90abfe9ce27c81808e3f74861072df6734f6a45d", "html_url": "https://github.com/rust-lang/rust/commit/90abfe9ce27c81808e3f74861072df6734f6a45d"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "5773ba8065c3b41ffe4a4aebbdb798ff974da36e", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "patch": "@@ -364,8 +364,8 @@ impl<'a, 'p, 'tcx> fmt::Debug for PatCtxt<'a, 'p, 'tcx> {\n /// A row of a matrix. Rows of len 1 are very common, which is why `SmallVec[_; 2]`\n /// works well.\n #[derive(Clone)]\n-struct PatStack<'p, 'tcx> {\n-    pats: SmallVec<[&'p DeconstructedPat<'p, 'tcx>; 2]>,\n+pub(crate) struct PatStack<'p, 'tcx> {\n+    pub(crate) pats: SmallVec<[&'p DeconstructedPat<'p, 'tcx>; 2]>,\n }\n \n impl<'p, 'tcx> PatStack<'p, 'tcx> {\n@@ -403,6 +403,21 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         })\n     }\n \n+    // Recursively expand all patterns into their subpatterns and push each `PatStack` to matrix.\n+    fn expand_and_extend<'a>(&'a self, matrix: &mut Matrix<'p, 'tcx>) {\n+        if !self.is_empty() && self.head().is_or_pat() {\n+            for pat in self.head().iter_fields() {\n+                let mut new_patstack = PatStack::from_pattern(pat);\n+                new_patstack.pats.extend_from_slice(&self.pats[1..]);\n+                if !new_patstack.is_empty() && new_patstack.head().is_or_pat() {\n+                    new_patstack.expand_and_extend(matrix);\n+                } else if !new_patstack.is_empty() {\n+                    matrix.push(new_patstack);\n+                }\n+            }\n+        }\n+    }\n+\n     /// This computes `S(self.head().ctor(), self)`. See top of the file for explanations.\n     ///\n     /// Structure patterns with a partial wild pattern (Foo { a: 42, .. }) have their missing\n@@ -436,7 +451,7 @@ impl<'p, 'tcx> fmt::Debug for PatStack<'p, 'tcx> {\n /// A 2D matrix.\n #[derive(Clone)]\n pub(super) struct Matrix<'p, 'tcx> {\n-    patterns: Vec<PatStack<'p, 'tcx>>,\n+    pub patterns: Vec<PatStack<'p, 'tcx>>,\n }\n \n impl<'p, 'tcx> Matrix<'p, 'tcx> {\n@@ -453,17 +468,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     /// expands it.\n     fn push(&mut self, row: PatStack<'p, 'tcx>) {\n         if !row.is_empty() && row.head().is_or_pat() {\n-            let pats = row.expand_or_pat();\n-            let mut no_inner_or = true;\n-            for pat in pats {\n-                if !pat.is_empty() && pat.head().is_or_pat() {\n-                    self.patterns.extend(pat.expand_or_pat());\n-                    no_inner_or = false;\n-                }\n-            }\n-            if no_inner_or {\n-                self.patterns.extend(row.expand_or_pat());\n-            }\n+            row.expand_and_extend(self);\n         } else {\n             self.patterns.push(row);\n         }"}]}