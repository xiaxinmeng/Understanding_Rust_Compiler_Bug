{"sha": "f59e49c9a6eba3acbd6625df8dfd26c0388744a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OWU0OWM5YTZlYmEzYWNiZDY2MjVkZjhkZmQyNmMwMzg4NzQ0YTQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-27T02:14:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-27T02:14:07Z"}, "message": "Twiddle visibility, start exposing only type-mangled names (64 bit truncated sha1 prefixes).", "tree": {"sha": "d1087e4773ff062e839ec125dd6c0bd9f2d94e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1087e4773ff062e839ec125dd6c0bd9f2d94e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f59e49c9a6eba3acbd6625df8dfd26c0388744a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f59e49c9a6eba3acbd6625df8dfd26c0388744a4", "html_url": "https://github.com/rust-lang/rust/commit/f59e49c9a6eba3acbd6625df8dfd26c0388744a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f59e49c9a6eba3acbd6625df8dfd26c0388744a4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26504871205d62ae0b501abb1dc0abc2f150bb3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/26504871205d62ae0b501abb1dc0abc2f150bb3f", "html_url": "https://github.com/rust-lang/rust/commit/26504871205d62ae0b501abb1dc0abc2f150bb3f"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "72ffb734f5672be16030ca59904d39ff2ff9d60c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f59e49c9a6eba3acbd6625df8dfd26c0388744a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f59e49c9a6eba3acbd6625df8dfd26c0388744a4/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f59e49c9a6eba3acbd6625df8dfd26c0388744a4", "patch": "@@ -170,7 +170,7 @@ fn mangle_name_by_type(@crate_ctxt cx, @ty.t t) -> str {\n     auto f = metadata.def_to_str;\n     cx.sha.input_str(metadata.ty_str(t, f));\n     ret sep() + \"rust\" + sep()\n-        + cx.sha.result_str() + sep()\n+        + _str.substr(cx.sha.result_str(), 0u, 16u) + sep()\n         + path_name(cx.path);\n }\n \n@@ -891,6 +891,13 @@ fn decl_fastcall_fn(ModuleRef llmod, str name, TypeRef llty) -> ValueRef {\n     ret decl_fn(llmod, name, lib.llvm.LLVMFastCallConv, llty);\n }\n \n+fn decl_private_fastcall_fn(ModuleRef llmod,\n+                            str name, TypeRef llty) -> ValueRef {\n+    auto llfn = decl_fn(llmod, name, lib.llvm.LLVMFastCallConv, llty);\n+    llvm.LLVMSetLinkage(llfn, lib.llvm.LLVMPrivateLinkage as llvm.Linkage);\n+    ret llfn;\n+}\n+\n fn decl_glue(ModuleRef llmod, type_names tn, str s) -> ValueRef {\n     ret decl_cdecl_fn(llmod, s, T_fn(vec(T_taskptr(tn)), T_void()));\n }\n@@ -1576,8 +1583,7 @@ fn declare_generic_glue(@crate_ctxt cx, @ty.t t, str name) -> ValueRef {\n     auto gcx = @rec(path=vec(\"glue\", name) with *cx);\n     auto fn_name = mangle_name_by_type(gcx, t);\n     fn_name = sanitize(fn_name);\n-    auto llfn = decl_fastcall_fn(cx.llmod, fn_name, llfnty);\n-    llvm.LLVMSetLinkage(llfn, lib.llvm.LLVMPrivateLinkage as llvm.Linkage);\n+    auto llfn = decl_private_fastcall_fn(cx.llmod, fn_name, llfnty);\n     ret llfn;\n }\n \n@@ -3231,8 +3237,8 @@ fn trans_for_each(@block_ctxt cx,\n                                           vec(rec(mode=ast.val, ty=decl_ty)),\n                                           plain_ty(ty.ty_nil), 0u);\n \n-    let ValueRef lliterbody = decl_fastcall_fn(cx.fcx.ccx.llmod,\n-                                               s, iter_body_llty);\n+    let ValueRef lliterbody = decl_private_fastcall_fn(cx.fcx.ccx.llmod,\n+                                                       s, iter_body_llty);\n \n     // FIXME: handle ty params properly.\n     let vec[ast.ty_param] ty_params = vec();\n@@ -3813,7 +3819,7 @@ fn trans_bind_thunk(@crate_ctxt cx,\n \n     let str s = mangle_name_by_seq(cx, \"thunk\");\n     let TypeRef llthunk_ty = get_pair_fn_ty(type_of(cx, incoming_fty));\n-    let ValueRef llthunk = decl_fastcall_fn(cx.llmod, s, llthunk_ty);\n+    let ValueRef llthunk = decl_private_fastcall_fn(cx.llmod, s, llthunk_ty);\n \n     auto fcx = new_fn_ctxt(cx, llthunk);\n     auto bcx = new_top_block_ctxt(fcx);\n@@ -5402,11 +5408,10 @@ fn trans_vtbl(@crate_ctxt cx, TypeRef self_ty,\n \n         let @crate_ctxt mcx = extend_path(cx, m.node.ident);\n         let str s = mangle_name_by_seq(mcx, \"method\");\n-        let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llfnty);\n+        let ValueRef llfn = decl_private_fastcall_fn(cx.llmod, s, llfnty);\n         cx.item_ids.insert(m.node.id, llfn);\n         cx.item_symbols.insert(m.node.id, s);\n \n-\n         trans_fn(mcx, m.node.meth, m.node.id, some[TypeRef](self_ty),\n                  ty_params, m.node.ann);\n         methods += vec(llfn);\n@@ -5713,7 +5718,7 @@ fn decl_fn_and_pair(@crate_ctxt cx,\n \n     // Declare the function itself.\n     let str s = mangle_name_by_seq(cx, flav);\n-    let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, llfty);\n+    let ValueRef llfn = decl_private_fastcall_fn(cx.llmod, s, llfty);\n \n     // Declare the global constant pair that points to it.\n     let str ps = mangle_name_by_type(cx, node_ann_type(cx, ann));\n@@ -5730,9 +5735,9 @@ fn register_fn_pair(@crate_ctxt cx, str ps, TypeRef llpairty, ValueRef llfn,\n \n     llvm.LLVMSetInitializer(gvar, pair);\n     llvm.LLVMSetGlobalConstant(gvar, True);\n-    llvm.LLVMSetLinkage(gvar,\n-                        lib.llvm.LLVMPrivateLinkage\n-                        as llvm.Linkage);\n+    llvm.LLVMSetVisibility(gvar,\n+                           lib.llvm.LLVMProtectedVisibility\n+                           as llvm.Visibility);\n \n     cx.item_ids.insert(id, llfn);\n     cx.item_symbols.insert(id, ps);\n@@ -5776,9 +5781,8 @@ fn decl_native_fn_and_pair(@crate_ctxt cx,\n     // Declare the wrapper.\n     auto wrapper_type = native_fn_wrapper_type(cx, num_ty_param, ann);\n     let str s = mangle_name_by_seq(cx, \"wrapper\");\n-    let ValueRef wrapper_fn = decl_fastcall_fn(cx.llmod, s, wrapper_type);\n-    llvm.LLVMSetLinkage(wrapper_fn, lib.llvm.LLVMPrivateLinkage\n-                        as llvm.Linkage);\n+    let ValueRef wrapper_fn = decl_private_fastcall_fn(cx.llmod, s,\n+                                                       wrapper_type);\n \n     // Declare the global constant pair that points to it.\n     auto wrapper_pair_type = T_fn_pair(cx.tn, wrapper_type);\n@@ -6267,9 +6271,8 @@ fn decl_bzero_glue(ModuleRef llmod) -> ValueRef {\n     ret decl_fastcall_fn(llmod, abi.bzero_glue_name(), ty);\n }\n \n-fn make_bzero_glue(ModuleRef llmod) -> ValueRef {\n+fn make_bzero_glue(ValueRef fun) -> ValueRef {\n     // We're not using the LLVM memset intrinsic. Same as with memcpy.\n-    auto fun = decl_bzero_glue(llmod);\n     auto initbb = llvm.LLVMAppendBasicBlock(fun, _str.buf(\"init\"));\n     auto hdrbb = llvm.LLVMAppendBasicBlock(fun, _str.buf(\"hdr\"));\n     auto loopbb = llvm.LLVMAppendBasicBlock(fun, _str.buf(\"loop\"));\n@@ -6548,6 +6551,7 @@ fn make_common_glue(str output) {\n     auto glues = make_glues(llmod, tn);\n     create_crate_constant(crate_ptr, glues);\n     make_memcpy_glue(glues.memcpy_glue);\n+    make_bzero_glue(glues.bzero_glue);\n \n     trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n "}]}