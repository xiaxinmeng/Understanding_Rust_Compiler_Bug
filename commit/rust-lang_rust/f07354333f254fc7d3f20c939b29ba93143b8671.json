{"sha": "f07354333f254fc7d3f20c939b29ba93143b8671", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNzM1NDMzM2YyNTRmYzdkM2YyMGM5MzliMjliYTkzMTQzYjg2NzE=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-31T09:38:12Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-02T09:39:16Z"}, "message": "Only use locate for borrowed strings", "tree": {"sha": "3bfab36b7b747ba8cf57e64271fd4b50c4d853e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bfab36b7b747ba8cf57e64271fd4b50c4d853e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f07354333f254fc7d3f20c939b29ba93143b8671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f07354333f254fc7d3f20c939b29ba93143b8671", "html_url": "https://github.com/rust-lang/rust/commit/f07354333f254fc7d3f20c939b29ba93143b8671", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f07354333f254fc7d3f20c939b29ba93143b8671/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "854b9d172798ff33472a0ffe2d76cd4605ceeada", "url": "https://api.github.com/repos/rust-lang/rust/commits/854b9d172798ff33472a0ffe2d76cd4605ceeada", "html_url": "https://github.com/rust-lang/rust/commit/854b9d172798ff33472a0ffe2d76cd4605ceeada"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "465aeecbd3eb92ebb53dd0d1f01aaaebcd6292a1", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f07354333f254fc7d3f20c939b29ba93143b8671/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f07354333f254fc7d3f20c939b29ba93143b8671/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f07354333f254fc7d3f20c939b29ba93143b8671", "patch": "@@ -1135,6 +1135,7 @@ crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n \n     let links = RefCell::new(vec![]);\n \n+    // FIXME: remove this function once pulldown_cmark can provide spans for link definitions.\n     let locate = |s: &str, fallback: Range<usize>| unsafe {\n         let s_start = s.as_ptr();\n         let s_end = s_start.add(s.len());\n@@ -1149,10 +1150,25 @@ crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n         }\n     };\n \n+    let span_for_link = |link: &CowStr<'_>, span: Range<usize>| {\n+        // For diagnostics, we want to underline the link's definition but `span` will point at\n+        // where the link is used. This is a problem for reference-style links, where the definition\n+        // is separate from the usage.\n+        match link {\n+            // `Borrowed` variant means the string (the link's destination) may come directly from\n+            // the markdown text and we can locate the original link destination.\n+            // NOTE: LinkReplacer also provides `Borrowed` but possibly from other sources,\n+            // so `locate()` can fall back to use `span`.\n+            CowStr::Borrowed(s) => locate(s, span),\n+\n+            // For anything else, we can only use the provided range.\n+            CowStr::Boxed(_) | CowStr::Inlined(_) => span,\n+        }\n+    };\n+\n     let mut push = |link: BrokenLink<'_>| {\n-        // FIXME: use `link.span` instead of `locate`\n-        // (doing it now includes the `[]` as well as the text)\n-        links.borrow_mut().push((link.reference.to_owned(), locate(link.reference, link.span)));\n+        let span = span_for_link(&CowStr::Borrowed(link.reference), link.span);\n+        links.borrow_mut().push((link.reference.to_owned(), span));\n         None\n     };\n     let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n@@ -1165,10 +1181,8 @@ crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n     for ev in iter {\n         if let Event::Start(Tag::Link(_, dest, _)) = ev.0 {\n             debug!(\"found link: {}\", dest);\n-            links.borrow_mut().push(match dest {\n-                CowStr::Borrowed(s) => (s.to_owned(), locate(s, ev.1)),\n-                s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), ev.1),\n-            });\n+            let span = span_for_link(&dest, ev.1);\n+            links.borrow_mut().push((dest.into_string(), span));\n         }\n     }\n "}]}