{"sha": "f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MGEwNzQ1NGIyZDFlZTQ0MjYyY2VlZDI3YTk0ZGQwNjc0Y2Y1ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T06:49:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-19T06:49:51Z"}, "message": "Auto merge of #7403 - Anthuang:redundant-method-names, r=Manishearth\n\nNew lint: [`self_named_constructor`]\n\nAdds the `self_named_constructor` lint for detecting when an implemented method has the same name as the type it is implemented for.\n\nchangelog: [`self_named_constructor`]\n\ncloses: #7142", "tree": {"sha": "d979f6ac43ecba516bcf23de461642f0ffec2d67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d979f6ac43ecba516bcf23de461642f0ffec2d67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "html_url": "https://github.com/rust-lang/rust/commit/f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46363df92600b7e1644d5b58031b3995323138d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/46363df92600b7e1644d5b58031b3995323138d8", "html_url": "https://github.com/rust-lang/rust/commit/46363df92600b7e1644d5b58031b3995323138d8"}, {"sha": "e9e10d209e5a8b73915e33fde277da6bd5982552", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e10d209e5a8b73915e33fde277da6bd5982552", "html_url": "https://github.com/rust-lang/rust/commit/e9e10d209e5a8b73915e33fde277da6bd5982552"}], "stats": {"total": 316, "additions": 252, "deletions": 64}, "files": [{"sha": "5e00dec2e775f064b31ffd75dd2054e7c4366294", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -2772,6 +2772,7 @@ Released 2018-09-13\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n [`self_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment\n+[`self_named_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructor\n [`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse"}, {"sha": "f8d877bcae0a5baec0eb26f9031734bb8a1192e4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -330,6 +330,7 @@ mod regex;\n mod repeat_once;\n mod returns;\n mod self_assignment;\n+mod self_named_constructor;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n@@ -900,6 +901,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         self_assignment::SELF_ASSIGNMENT,\n+        self_named_constructor::SELF_NAMED_CONSTRUCTOR,\n         semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED,\n         serde_api::SERDE_API_MISUSE,\n         shadow::SHADOW_REUSE,\n@@ -1406,6 +1408,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(returns::LET_AND_RETURN),\n         LintId::of(returns::NEEDLESS_RETURN),\n         LintId::of(self_assignment::SELF_ASSIGNMENT),\n+        LintId::of(self_named_constructor::SELF_NAMED_CONSTRUCTOR),\n         LintId::of(serde_api::SERDE_API_MISUSE),\n         LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n@@ -1559,6 +1562,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),\n         LintId::of(returns::LET_AND_RETURN),\n         LintId::of(returns::NEEDLESS_RETURN),\n+        LintId::of(self_named_constructor::SELF_NAMED_CONSTRUCTOR),\n         LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(tabs_in_doc_comments::TABS_IN_DOC_COMMENTS),\n         LintId::of(to_digit_is_some::TO_DIGIT_IS_SOME),\n@@ -2101,6 +2105,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let scripts = conf.allowed_scripts.clone();\n     store.register_early_pass(move || box disallowed_script_idents::DisallowedScriptIdents::new(&scripts));\n     store.register_late_pass(|| box strlen_on_c_strings::StrlenOnCStrings);\n+    store.register_late_pass(move || box self_named_constructor::SelfNamedConstructor);\n+\n }\n \n #[rustfmt::skip]"}, {"sha": "da991e1d90c8e0770532099329f557450cee558a", "filename": "clippy_lints/src/self_named_constructor.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/clippy_lints%2Fsrc%2Fself_named_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/clippy_lints%2Fsrc%2Fself_named_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructor.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -0,0 +1,91 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::return_ty;\n+use clippy_utils::ty::{contains_adt_constructor, contains_ty};\n+use rustc_hir::{Impl, ImplItem, ImplItemKind, ItemKind, Node};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns when constructors have the same name as their types.\n+    ///\n+    /// **Why is this bad?** Repeating the name of the type is redundant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// struct Foo {}\n+    ///\n+    /// impl Foo {\n+    ///     pub fn foo() -> Foo {\n+    ///         Foo {}\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// struct Foo {}\n+    ///\n+    /// impl Foo {\n+    ///     pub fn new() -> Foo {\n+    ///         Foo {}\n+    ///     }\n+    /// }\n+    /// ```\n+    pub SELF_NAMED_CONSTRUCTOR,\n+    style,\n+    \"method should not have the same name as the type it is implemented for\"\n+}\n+\n+declare_lint_pass!(SelfNamedConstructor => [SELF_NAMED_CONSTRUCTOR]);\n+\n+impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructor {\n+    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n+        match impl_item.kind {\n+            ImplItemKind::Fn(ref sig, _) => {\n+                if sig.decl.implicit_self.has_implicit_self() {\n+                    return;\n+                }\n+            },\n+            _ => return,\n+        }\n+\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n+        let item = cx.tcx.hir().expect_item(parent);\n+        let self_ty = cx.tcx.type_of(item.def_id);\n+        let ret_ty = return_ty(cx, impl_item.hir_id());\n+\n+        // Do not check trait impls\n+        if matches!(item.kind, ItemKind::Impl(Impl { of_trait: Some(_), .. })) {\n+            return;\n+        }\n+\n+        // Ensure method is constructor-like\n+        if let Some(self_adt) = self_ty.ty_adt_def() {\n+            if !contains_adt_constructor(ret_ty, self_adt) {\n+                return;\n+            }\n+        } else if !contains_ty(ret_ty, self_ty) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let Some(self_def) = self_ty.ty_adt_def();\n+            if let Some(self_local_did) = self_def.did.as_local();\n+            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n+            if let Some(Node::Item(x)) = cx.tcx.hir().find(self_id);\n+            let type_name = x.ident.name.as_str().to_lowercase();\n+            if impl_item.ident.name.as_str() == type_name || impl_item.ident.name.as_str().replace(\"_\", \"\") == type_name;\n+\n+            then {\n+                span_lint(\n+                    cx,\n+                    SELF_NAMED_CONSTRUCTOR,\n+                    impl_item.span,\n+                    &format!(\"constructor `{}` has the same name as the type\", impl_item.ident.name),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "8d9a1af8ff1180b50e824588b55bbcddc0cb93ea", "filename": "tests/ui/crashes/ice-6179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fcrashes%2Fice-6179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fcrashes%2Fice-6179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6179.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -7,7 +7,7 @@\n struct Foo {}\n \n impl Foo {\n-    fn foo() -> Self {\n+    fn new() -> Self {\n         impl Foo {\n             fn bar() {}\n         }"}, {"sha": "cc699b79e433ca39756717f16714487a05421da7", "filename": "tests/ui/issue_4266.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fissue_4266.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fissue_4266.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissue_4266.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -25,7 +25,9 @@ async fn all_to_one<'a>(a: &'a str, _b: &'a str) -> &'a str {\n struct Foo;\n impl Foo {\n     // ok\n-    pub async fn foo(&mut self) {}\n+    pub async fn new(&mut self) -> Self {\n+        Foo {}\n+    }\n }\n \n // rust-lang/rust#61115"}, {"sha": "d5724bf661c634ec89f3d83ac580a5c75facd6c6", "filename": "tests/ui/missing-doc-impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fmissing-doc-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fmissing-doc-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc-impl.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -59,7 +59,9 @@ pub trait E: Sized {\n }\n \n impl Foo {\n-    pub fn foo() {}\n+    pub fn new() -> Self {\n+        Foo { a: 0, b: 0 }\n+    }\n     fn bar() {}\n }\n "}, {"sha": "bda63d66a174af725e68b1f3b833cdb240e066e4", "filename": "tests/ui/missing-doc-impl.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fmissing-doc-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fmissing-doc-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc-impl.stderr?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -78,23 +78,25 @@ LL |     type AssociatedTypeDef = Self;\n error: missing documentation for an associated function\n   --> $DIR/missing-doc-impl.rs:62:5\n    |\n-LL |     pub fn foo() {}\n-   |     ^^^^^^^^^^^^^^^\n+LL | /     pub fn new() -> Self {\n+LL | |         Foo { a: 0, b: 0 }\n+LL | |     }\n+   | |_____^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:63:5\n+  --> $DIR/missing-doc-impl.rs:65:5\n    |\n LL |     fn bar() {}\n    |     ^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:67:5\n+  --> $DIR/missing-doc-impl.rs:69:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/missing-doc-impl.rs:71:5\n+  --> $DIR/missing-doc-impl.rs:73:5\n    |\n LL | /     fn foo2() -> u32 {\n LL | |         1"}, {"sha": "6d2cbb6ad96fa865870159854b8e1d053d6f0b75", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -84,7 +84,7 @@ mod with_drop {\n \n     impl A {\n         // This can not be const because the type implements `Drop`.\n-        pub fn a(self) -> B {\n+        pub fn b(self) -> B {\n             B\n         }\n     }"}, {"sha": "5917ffc3e12ea94efcc44ffbc7074ce0cbba7893", "filename": "tests/ui/needless_bool/fixable.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fneedless_bool%2Ffixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.fixed?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -6,7 +6,8 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n-    clippy::needless_return\n+    clippy::needless_return,\n+    clippy::self_named_constructor\n )]\n \n use std::cell::Cell;"}, {"sha": "d26dcb9fcc33e8a0353a86b0000867f776cbef77", "filename": "tests/ui/needless_bool/fixable.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fneedless_bool%2Ffixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -6,7 +6,8 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n-    clippy::needless_return\n+    clippy::needless_return,\n+    clippy::self_named_constructor\n )]\n \n use std::cell::Cell;"}, {"sha": "8026d643c44882c476a9d8a9cfd059aa4ab389e9", "filename": "tests/ui/needless_bool/fixable.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fneedless_bool%2Ffixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Ffixable.stderr?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -1,5 +1,5 @@\n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:39:5\n+  --> $DIR/fixable.rs:40:5\n    |\n LL | /     if x {\n LL | |         true\n@@ -11,7 +11,7 @@ LL | |     };\n    = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:44:5\n+  --> $DIR/fixable.rs:45:5\n    |\n LL | /     if x {\n LL | |         false\n@@ -21,7 +21,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:49:5\n+  --> $DIR/fixable.rs:50:5\n    |\n LL | /     if x && y {\n LL | |         false\n@@ -31,7 +31,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `!(x && y)`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:69:5\n+  --> $DIR/fixable.rs:70:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -41,7 +41,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:77:5\n+  --> $DIR/fixable.rs:78:5\n    |\n LL | /     if x {\n LL | |         return false;\n@@ -51,7 +51,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:85:5\n+  --> $DIR/fixable.rs:86:5\n    |\n LL | /     if x && y {\n LL | |         return true;\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return x && y`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:93:5\n+  --> $DIR/fixable.rs:94:5\n    |\n LL | /     if x && y {\n LL | |         return false;\n@@ -71,33 +71,33 @@ LL | |     };\n    | |_____^ help: you can reduce it to: `return !(x && y)`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:101:8\n+  --> $DIR/fixable.rs:102:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n    |\n    = note: `-D clippy::bool-comparison` implied by `-D warnings`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:105:8\n+  --> $DIR/fixable.rs:106:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: equality checks against true are unnecessary\n-  --> $DIR/fixable.rs:115:8\n+  --> $DIR/fixable.rs:116:8\n    |\n LL |     if x == true {};\n    |        ^^^^^^^^^ help: try simplifying it as shown: `x`\n \n error: equality checks against false can be replaced by a negation\n-  --> $DIR/fixable.rs:116:8\n+  --> $DIR/fixable.rs:117:8\n    |\n LL |     if x == false {};\n    |        ^^^^^^^^^^ help: try simplifying it as shown: `!x`\n \n error: this if-then-else expression returns a bool literal\n-  --> $DIR/fixable.rs:125:12\n+  --> $DIR/fixable.rs:126:12\n    |\n LL |       } else if returns_bool() {\n    |  ____________^"}, {"sha": "7658b86a8d6d4853d00907adcd6a07bbe3e39035", "filename": "tests/ui/self_named_constructor.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fself_named_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fself_named_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself_named_constructor.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -0,0 +1,59 @@\n+#![warn(clippy::self_named_constructor)]\n+\n+struct ShouldSpawn;\n+struct ShouldNotSpawn;\n+\n+impl ShouldSpawn {\n+    pub fn should_spawn() -> ShouldSpawn {\n+        ShouldSpawn\n+    }\n+\n+    fn should_not_spawn() -> ShouldNotSpawn {\n+        ShouldNotSpawn\n+    }\n+}\n+\n+impl ShouldNotSpawn {\n+    pub fn new() -> ShouldNotSpawn {\n+        ShouldNotSpawn\n+    }\n+}\n+\n+struct ShouldNotSpawnWithTrait;\n+\n+trait ShouldNotSpawnTrait {\n+    type Item;\n+}\n+\n+impl ShouldNotSpawnTrait for ShouldNotSpawnWithTrait {\n+    type Item = Self;\n+}\n+\n+impl ShouldNotSpawnWithTrait {\n+    pub fn should_not_spawn_with_trait() -> impl ShouldNotSpawnTrait<Item = Self> {\n+        ShouldNotSpawnWithTrait\n+    }\n+}\n+\n+// Same trait name and same type name should not spawn the lint\n+#[derive(Default)]\n+pub struct Default;\n+\n+trait TraitSameTypeName {\n+    fn should_not_spawn() -> Self;\n+}\n+impl TraitSameTypeName for ShouldNotSpawn {\n+    fn should_not_spawn() -> Self {\n+        ShouldNotSpawn\n+    }\n+}\n+\n+struct SelfMethodShouldNotSpawn;\n+\n+impl SelfMethodShouldNotSpawn {\n+    fn self_method_should_not_spawn(self) -> Self {\n+        SelfMethodShouldNotSpawn\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1e2c34ac2f7b92fb8eb048aab3e168fae8e2a57e", "filename": "tests/ui/self_named_constructor.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fself_named_constructor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fself_named_constructor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself_named_constructor.stderr?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -0,0 +1,12 @@\n+error: constructor `should_spawn` has the same name as the type\n+  --> $DIR/self_named_constructor.rs:7:5\n+   |\n+LL | /     pub fn should_spawn() -> ShouldSpawn {\n+LL | |         ShouldSpawn\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::self-named-constructor` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "df0fdaccb344a588981721eca88629d3348c6234", "filename": "tests/ui/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -6,7 +6,8 @@\n     clippy::unused_unit,\n     clippy::unnecessary_wraps,\n     clippy::or_fun_call,\n-    clippy::needless_question_mark\n+    clippy::needless_question_mark,\n+    clippy::self_named_constructor\n )]\n \n use std::fmt::Debug;"}, {"sha": "8155c4ae1107b23f57ac42a0439381850f975fdb", "filename": "tests/ui/unit_arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Funit_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Funit_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_arg.stderr?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -1,5 +1,5 @@\n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:55:5\n+  --> $DIR/unit_arg.rs:56:5\n    |\n LL | /     foo({\n LL | |         1;\n@@ -20,7 +20,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:58:5\n+  --> $DIR/unit_arg.rs:59:5\n    |\n LL |     foo(foo(1));\n    |     ^^^^^^^^^^^\n@@ -32,7 +32,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:59:5\n+  --> $DIR/unit_arg.rs:60:5\n    |\n LL | /     foo({\n LL | |         foo(1);\n@@ -54,7 +54,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:64:5\n+  --> $DIR/unit_arg.rs:65:5\n    |\n LL | /     b.bar({\n LL | |         1;\n@@ -74,7 +74,7 @@ LL |     b.bar(());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:67:5\n+  --> $DIR/unit_arg.rs:68:5\n    |\n LL |     taking_multiple_units(foo(0), foo(1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -87,7 +87,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:68:5\n+  --> $DIR/unit_arg.rs:69:5\n    |\n LL | /     taking_multiple_units(foo(0), {\n LL | |         foo(1);\n@@ -110,7 +110,7 @@ LL |     taking_multiple_units((), ());\n    |\n \n error: passing unit values to a function\n-  --> $DIR/unit_arg.rs:72:5\n+  --> $DIR/unit_arg.rs:73:5\n    |\n LL | /     taking_multiple_units(\n LL | |         {\n@@ -140,7 +140,7 @@ LL |         foo(2);\n  ...\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:83:13\n+  --> $DIR/unit_arg.rs:84:13\n    |\n LL |     None.or(Some(foo(2)));\n    |             ^^^^^^^^^^^^\n@@ -154,7 +154,7 @@ LL |     });\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:86:5\n+  --> $DIR/unit_arg.rs:87:5\n    |\n LL |     foo(foo(()));\n    |     ^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ LL |     foo(());\n    |\n \n error: passing a unit value to a function\n-  --> $DIR/unit_arg.rs:123:5\n+  --> $DIR/unit_arg.rs:124:5\n    |\n LL |     Some(foo(1))\n    |     ^^^^^^^^^^^^"}, {"sha": "23fc7632511c2e27449b1a442871e677e94eeacb", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -4,7 +4,12 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n+#![allow(\n+    clippy::should_implement_trait,\n+    clippy::upper_case_acronyms,\n+    clippy::from_over_into,\n+    clippy::self_named_constructor\n+)]\n \n #[macro_use]\n extern crate proc_macro_derive;"}, {"sha": "bb46a33992371cd62e5e2cb5c75d0afdcf5c9941", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -4,7 +4,12 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n+#![allow(\n+    clippy::should_implement_trait,\n+    clippy::upper_case_acronyms,\n+    clippy::from_over_into,\n+    clippy::self_named_constructor\n+)]\n \n #[macro_use]\n extern crate proc_macro_derive;"}, {"sha": "e14368a11aa746eddd1fffeeb88c3bc36c35982d", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70a07454b2d1ee44262ceed27a94dd0674cf5ea/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=f70a07454b2d1ee44262ceed27a94dd0674cf5ea", "patch": "@@ -1,169 +1,169 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:18:21\n+  --> $DIR/use_self.rs:23:21\n    |\n LL |         fn new() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:19:13\n+  --> $DIR/use_self.rs:24:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:21:22\n+  --> $DIR/use_self.rs:26:22\n    |\n LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:22:13\n+  --> $DIR/use_self.rs:27:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:27:25\n+  --> $DIR/use_self.rs:32:25\n    |\n LL |         fn default() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:28:13\n+  --> $DIR/use_self.rs:33:13\n    |\n LL |             Foo::new()\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:93:24\n+  --> $DIR/use_self.rs:98:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:93:55\n+  --> $DIR/use_self.rs:98:55\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                                                       ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:108:13\n+  --> $DIR/use_self.rs:113:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:143:29\n+  --> $DIR/use_self.rs:148:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:144:21\n+  --> $DIR/use_self.rs:149:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:155:21\n+  --> $DIR/use_self.rs:160:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:156:13\n+  --> $DIR/use_self.rs:161:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:173:21\n+  --> $DIR/use_self.rs:178:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:174:21\n+  --> $DIR/use_self.rs:179:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:175:21\n+  --> $DIR/use_self.rs:180:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:217:13\n+  --> $DIR/use_self.rs:222:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:218:13\n+  --> $DIR/use_self.rs:223:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:220:13\n+  --> $DIR/use_self.rs:225:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:239:13\n+  --> $DIR/use_self.rs:244:13\n    |\n LL |             TestStruct::from_something()\n    |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:253:25\n+  --> $DIR/use_self.rs:258:25\n    |\n LL |         async fn g() -> S {\n    |                         ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:254:13\n+  --> $DIR/use_self.rs:259:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:16\n+  --> $DIR/use_self.rs:263:16\n    |\n LL |             &p[S::A..S::B]\n    |                ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:22\n+  --> $DIR/use_self.rs:263:22\n    |\n LL |             &p[S::A..S::B]\n    |                      ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:281:29\n+  --> $DIR/use_self.rs:286:29\n    |\n LL |         fn foo(value: T) -> Foo<T> {\n    |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:282:13\n+  --> $DIR/use_self.rs:287:13\n    |\n LL |             Foo::<T> { value }\n    |             ^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:454:13\n+  --> $DIR/use_self.rs:459:13\n    |\n LL |             A::new::<submod::B>(submod::B {})\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:491:13\n+  --> $DIR/use_self.rs:496:13\n    |\n LL |             S2::new()\n    |             ^^ help: use the applicable keyword: `Self`"}]}