{"sha": "63fe441db8a441bc68c754c33a04f57f0f8a8b77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZmU0NDFkYjhhNDQxYmM2OGM3NTRjMzNhMDRmNTdmMGY4YThiNzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-08T12:48:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-08T12:48:32Z"}, "message": "Auto merge of #53088 - matthewjasper:closure-region-spans, r=nikomatsakis\n\n[NLL] Use span of the closure args in free region errors\n\nAlso adds a note when one of the free regions is BrEnv.\nIn a future PR I'll change these messages to say \"return requires\", which should improve them a bit more.\n\nr? @nikomatsakis", "tree": {"sha": "2039c5acbf5b0eca0a47052debfe762e12eb79b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2039c5acbf5b0eca0a47052debfe762e12eb79b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63fe441db8a441bc68c754c33a04f57f0f8a8b77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63fe441db8a441bc68c754c33a04f57f0f8a8b77", "html_url": "https://github.com/rust-lang/rust/commit/63fe441db8a441bc68c754c33a04f57f0f8a8b77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63fe441db8a441bc68c754c33a04f57f0f8a8b77/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebe8df41d70d8763e0a15aefe078b035d3519214", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe8df41d70d8763e0a15aefe078b035d3519214", "html_url": "https://github.com/rust-lang/rust/commit/ebe8df41d70d8763e0a15aefe078b035d3519214"}, {"sha": "b13e3f87709031be5c599ff23d73f981d04416fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13e3f87709031be5c599ff23d73f981d04416fd", "html_url": "https://github.com/rust-lang/rust/commit/b13e3f87709031be5c599ff23d73f981d04416fd"}], "stats": {"total": 175, "additions": 112, "deletions": 63}, "files": [{"sha": "8c2a5f19038bb37e28492da198cd0e569379889d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 71, "deletions": 14, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=63fe441db8a441bc68c754c33a04f57f0f8a8b77", "patch": "@@ -10,6 +10,7 @@\n \n use borrow_check::nll::region_infer::RegionInferenceContext;\n use borrow_check::nll::ToRegionVid;\n+use borrow_check::nll::universal_regions::DefiningTy;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n@@ -72,7 +73,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             })\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_output(\n-                    infcx.tcx, mir, fr, counter, diag)\n+                    infcx, mir, mir_def_id, fr, counter, diag)\n             })\n             .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr))\n     }\n@@ -107,13 +108,46 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 },\n \n                 ty::BoundRegion::BrEnv => {\n-                    let closure_span = tcx.hir.span_if_local(mir_def_id).unwrap();\n-                    let region_name = self.synthesize_region_name(counter);\n-                    diag.span_label(\n-                        closure_span,\n-                        format!(\"lifetime `{}` represents the closure body\", region_name),\n-                    );\n-                    Some(region_name)\n+                    let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+                    let def_ty = self.universal_regions.defining_ty;\n+\n+                    if let DefiningTy::Closure(def_id, substs) = def_ty {\n+                        let args_span = if let hir::ExprKind::Closure(_, _, _, span, _)\n+                            = tcx.hir.expect_expr(mir_node_id).node\n+                        {\n+                            span\n+                        } else {\n+                            bug!(\"Closure is not defined by a closure expr\");\n+                        };\n+                        let region_name = self.synthesize_region_name(counter);\n+                        diag.span_label(\n+                            args_span,\n+                            format!(\"lifetime `{}` represents this closure's body\", region_name),\n+                        );\n+\n+                        let closure_kind_ty = substs.closure_kind_ty(def_id, tcx);\n+                        let note = match closure_kind_ty.to_opt_closure_kind() {\n+                            Some(ty::ClosureKind::Fn) => {\n+                                \"closure implements `Fn`, so references to captured variables \\\n+                                 can't escape the closure\"\n+                            }\n+                            Some(ty::ClosureKind::FnMut) => {\n+                                \"closure implements `FnMut`, so references to captured variables \\\n+                                 can't escape the closure\"\n+                            }\n+                            Some(ty::ClosureKind::FnOnce) => {\n+                                bug!(\"BrEnv in a `FnOnce` closure\");\n+                            }\n+                            None => bug!(\"Closure kind not inferred in borrow check\"),\n+                        };\n+\n+                        diag.note(note);\n+\n+                        Some(region_name)\n+                    } else {\n+                        // Can't have BrEnv in functions, constants or generators.\n+                        bug!(\"BrEnv outside of closure.\");\n+                    }\n                 }\n \n                 ty::BoundRegion::BrAnon(_) | ty::BoundRegion::BrFresh(_) => None,\n@@ -543,28 +577,51 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// or be early bound (named, not in argument).\n     fn give_name_if_anonymous_region_appears_in_output(\n         &self,\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n+        infcx: &InferCtxt<'_, '_, 'tcx>,\n         mir: &Mir<'tcx>,\n+        mir_def_id: DefId,\n         fr: RegionVid,\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n+        let tcx = infcx.tcx;\n+\n         let return_ty = self.universal_regions.unnormalized_output_ty;\n         debug!(\n             \"give_name_if_anonymous_region_appears_in_output: return_ty = {:?}\",\n             return_ty\n         );\n-        if !tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n+        if !infcx.tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n             return None;\n         }\n \n-        let region_name = self.synthesize_region_name(counter);\n+        let type_name = with_highlight_region(fr, *counter, || {\n+            infcx.extract_type_name(&return_ty)\n+        });\n+\n+                let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n+\n+        let (return_span, mir_description) = if let hir::ExprKind::Closure(_, _, _, span, gen_move)\n+            = tcx.hir.expect_expr(mir_node_id).node\n+        {\n+            (\n+                tcx.sess.codemap().end_point(span),\n+                if gen_move.is_some() { \" of generator\" } else { \" of closure\" }\n+            )\n+        } else {\n+            // unreachable?\n+            (mir.span, \"\")\n+        };\n+\n         diag.span_label(\n-            mir.span,\n-            format!(\"lifetime `{}` appears in return type\", region_name),\n+            return_span,\n+            format!(\"return type{} is {}\", mir_description, type_name),\n         );\n \n-        Some(region_name)\n+        // This counter value will already have been used, so this function will increment it\n+        // so the next value will be used next and return the region name that would have been\n+        // used.\n+        Some(self.synthesize_region_name(counter))\n     }\n \n     /// Create a synthetic region named `'1`, incrementing the"}, {"sha": "3f9104373d6efb1e0fc69c458838fdda9743c3c6", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=63fe441db8a441bc68c754c33a04f57f0f8a8b77", "patch": "@@ -8,11 +8,10 @@ error: unsatisfied lifetime constraints\n   --> $DIR/E0621-does-not-trigger-for-closures.rs:25:26\n    |\n LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n-   |                ----------^^^^^-----------------\n-   |                |   |     |\n-   |                |   |     requires that `'1` must outlive `'2`\n-   |                |   has type `&'1 i32`\n-   |                lifetime `'2` appears in return type\n+   |                    --    ^^^^^ requires that `'1` must outlive `'2`\n+   |                    ||\n+   |                    |return type of closure is &'2 i32\n+   |                    has type `&'1 i32`\n \n error: aborting due to previous error\n "}, {"sha": "6c77bcb275724e4326b05a24f46d6b3edacecd82", "filename": "src/test/ui/issue-40510-1.nll.stderr", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-1.nll.stderr?ref=63fe441db8a441bc68c754c33a04f57f0f8a8b77", "patch": "@@ -1,17 +1,15 @@\n error: unsatisfied lifetime constraints\n   --> $DIR/issue-40510-1.rs:18:9\n    |\n-LL |        || {\n-   |   _____-\n-   |  |_____|\n-   | ||\n-LL | ||         &mut x\n-   | ||         ^^^^^^ return requires that `'1` must outlive `'2`\n-LL | ||     };\n-   | ||     -\n-   | ||_____|\n-   | |______lifetime `'1` represents the closure body\n-   |        lifetime `'2` appears in return type\n+LL |     || {\n+   |     --\n+   |     ||\n+   |     |return type of closure is &'2 mut std::boxed::Box<()>\n+   |     lifetime `'1` represents this closure's body\n+LL |         &mut x\n+   |         ^^^^^^ return requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}, {"sha": "8aeef86c2e86b08c2a78a7ef837ff85fc2b5ea17", "filename": "src/test/ui/issue-40510-3.nll.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40510-3.nll.stderr?ref=63fe441db8a441bc68c754c33a04f57f0f8a8b77", "patch": "@@ -1,20 +1,17 @@\n error: unsatisfied lifetime constraints\n   --> $DIR/issue-40510-3.rs:18:9\n    |\n-LL |         || {\n-   |    _____-\n-   |   |_____|\n-   |  ||\n-LL |  ||         || {\n-   |  ||_________^\n-LL | |||             x.push(())\n-LL | |||         }\n-   | |||_________^ requires that `'1` must outlive `'2`\n-LL |  ||     };\n-   |  ||     -\n-   |  ||_____|\n-   |  |______lifetime `'1` represents the closure body\n-   |         lifetime `'2` appears in return type\n+LL |       || {\n+   |       --\n+   |       ||\n+   |       |return type of closure is [closure@$DIR/issue-40510-3.rs:18:9: 20:10 x:&'2 mut std::vec::Vec<()>]\n+   |       lifetime `'1` represents this closure's body\n+LL | /         || {\n+LL | |             x.push(())\n+LL | |         }\n+   | |_________^ requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}, {"sha": "fb4bed76a717f7c050cd80a983da89ed210fcc93", "filename": "src/test/ui/issue-49824.nll.stderr", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-49824.nll.stderr?ref=63fe441db8a441bc68c754c33a04f57f0f8a8b77", "patch": "@@ -1,20 +1,17 @@\n error: unsatisfied lifetime constraints\n   --> $DIR/issue-49824.rs:22:9\n    |\n-LL |         || {\n-   |    _____-\n-   |   |_____|\n-   |  ||\n-LL |  ||         || {\n-   |  ||_________^\n-LL | |||             let _y = &mut x;\n-LL | |||         }\n-   | |||_________^ requires that `'1` must outlive `'2`\n-LL |  ||     };\n-   |  ||     -\n-   |  ||_____|\n-   |  |______lifetime `'1` represents the closure body\n-   |         lifetime `'2` appears in return type\n+LL |       || {\n+   |       --\n+   |       ||\n+   |       |return type of closure is [closure@$DIR/issue-49824.rs:22:9: 24:10 x:&'2 mut i32]\n+   |       lifetime `'1` represents this closure's body\n+LL | /         || {\n+LL | |             let _y = &mut x;\n+LL | |         }\n+   | |_________^ requires that `'1` must outlive `'2`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}, {"sha": "84d0730025a5c93a8a6d8b36bbafd36905be1e57", "filename": "src/test/ui/nll/issue-48238.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63fe441db8a441bc68c754c33a04f57f0f8a8b77/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-48238.stderr?ref=63fe441db8a441bc68c754c33a04f57f0f8a8b77", "patch": "@@ -2,11 +2,12 @@ error: unsatisfied lifetime constraints\n   --> $DIR/issue-48238.rs:21:13\n    |\n LL |     move || use_val(&orig); //~ ERROR\n-   |     --------^^^^^^^^^^^^^^\n-   |     |       |\n-   |     |       argument requires that `'1` must outlive `'2`\n-   |     lifetime `'1` represents the closure body\n-   |     lifetime `'2` appears in return type\n+   |     ------- ^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+   |     |     |\n+   |     |     return type of closure is &'2 u8\n+   |     lifetime `'1` represents this closure's body\n+   |\n+   = note: closure implements `Fn`, so references to captured variables can't escape the closure\n \n error: aborting due to previous error\n "}]}