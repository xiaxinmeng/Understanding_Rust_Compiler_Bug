{"sha": "193b9ae86b7ba498430866fb6090617194ba5ed7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5M2I5YWU4NmI3YmE0OTg0MzA4NjZmYjYwOTA2MTcxOTRiYTVlZDc=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-08-16T19:13:09Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-08-16T19:13:09Z"}, "message": "update to new error format E0409", "tree": {"sha": "dde902884e9402ab7e9e299d327f08f792fdc363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dde902884e9402ab7e9e299d327f08f792fdc363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/193b9ae86b7ba498430866fb6090617194ba5ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/193b9ae86b7ba498430866fb6090617194ba5ed7", "html_url": "https://github.com/rust-lang/rust/commit/193b9ae86b7ba498430866fb6090617194ba5ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/193b9ae86b7ba498430866fb6090617194ba5ed7/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "197be89f367d1240d5f9cd9c4efd77812775354e", "url": "https://api.github.com/repos/rust-lang/rust/commits/197be89f367d1240d5f9cd9c4efd77812775354e", "html_url": "https://github.com/rust-lang/rust/commit/197be89f367d1240d5f9cd9c4efd77812775354e"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "a736067be6b7d92e1c6aa457a44421df722eabe2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/193b9ae86b7ba498430866fb6090617194ba5ed7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193b9ae86b7ba498430866fb6090617194ba5ed7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=193b9ae86b7ba498430866fb6090617194ba5ed7", "patch": "@@ -117,7 +117,7 @@ enum ResolutionError<'a> {\n     /// error E0408: variable `{}` from pattern #{} is not bound in pattern #{}\n     VariableNotBoundInPattern(Name, usize, usize),\n     /// error E0409: variable is bound with different mode in pattern #{} than in pattern #1\n-    VariableBoundWithDifferentMode(Name, usize),\n+    VariableBoundWithDifferentMode(Name, usize, Span),\n     /// error E0411: use of `Self` outside of an impl or trait\n     SelfUsedOutsideImplOrTrait,\n     /// error E0412: use of undeclared\n@@ -270,14 +270,19 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                              from,\n                              to)\n         }\n-        ResolutionError::VariableBoundWithDifferentMode(variable_name, pattern_number) => {\n-            struct_span_err!(resolver.session,\n+        ResolutionError::VariableBoundWithDifferentMode(variable_name,\n+                                                        pattern_number,\n+                                                        first_binding_span) => {\n+            let mut err = struct_span_err!(resolver.session,\n                              span,\n                              E0409,\n                              \"variable `{}` is bound with different mode in pattern #{} than in \\\n                               pattern #1\",\n                              variable_name,\n-                             pattern_number)\n+                             pattern_number);\n+            err.span_label(span, &format!(\"bound in different ways\"));\n+            err.span_label(first_binding_span, &format!(\"first binding\"));\n+            err\n         }\n         ResolutionError::SelfUsedOutsideImplOrTrait => {\n             let mut err = struct_span_err!(resolver.session,\n@@ -2044,8 +2049,10 @@ impl<'a> Resolver<'a> {\n                         if binding_0.binding_mode != binding_i.binding_mode {\n                             resolve_error(self,\n                                           binding_i.span,\n-                                          ResolutionError::VariableBoundWithDifferentMode(key.name,\n-                                                                                          i + 1));\n+                                          ResolutionError::VariableBoundWithDifferentMode(\n+                                              key.name,\n+                                              i + 1,\n+                                              binding_0.span));\n                         }\n                     }\n                 }"}, {"sha": "e89cc9ea5cbf26b19a7df4503d1a9f318ced1980", "filename": "src/test/compile-fail/E0409.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/193b9ae86b7ba498430866fb6090617194ba5ed7/src%2Ftest%2Fcompile-fail%2FE0409.rs", "raw_url": "https://github.com/rust-lang/rust/raw/193b9ae86b7ba498430866fb6090617194ba5ed7/src%2Ftest%2Fcompile-fail%2FE0409.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0409.rs?ref=193b9ae86b7ba498430866fb6090617194ba5ed7", "patch": "@@ -13,7 +13,12 @@ fn main() {\n \n     match x {\n         (0, ref y) | (y, 0) => {} //~ ERROR E0409\n-                                  //~^ ERROR E0308\n+                                  //~^ NOTE bound in different ways\n+                                  //~| NOTE first binding\n+                                  //~| ERROR E0308\n+                                  //~| NOTE expected &{integer}, found integral variable\n+                                  //~| NOTE expected type `&{integer}`\n+                                  //~| NOTE    found type `{integer}`\n         _ => ()\n     }\n }"}]}