{"sha": "2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "node_id": "C_kwDOAAsO6NoAKDJlZGJjZjdjMjNkZjY4YmMwNGYzZTRhYWQ4OTBiMjhiOTU0N2JiZDQ", "commit": {"author": {"name": "Vladimir Michael Eatwell", "email": "dimir@fb.com", "date": "2022-07-20T08:00:43Z"}, "committer": {"name": "Vladimir Michael Eatwell", "email": "dimir@fb.com", "date": "2022-09-30T10:25:38Z"}, "message": "Standard library OS support for Apple WatchOS", "tree": {"sha": "ab046a87dc1262095b76b6299f232ee6d9f259b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab046a87dc1262095b76b6299f232ee6d9f259b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "html_url": "https://github.com/rust-lang/rust/commit/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/comments", "author": {"login": "vladimir-ea", "id": 85992906, "node_id": "MDQ6VXNlcjg1OTkyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/85992906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladimir-ea", "html_url": "https://github.com/vladimir-ea", "followers_url": "https://api.github.com/users/vladimir-ea/followers", "following_url": "https://api.github.com/users/vladimir-ea/following{/other_user}", "gists_url": "https://api.github.com/users/vladimir-ea/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladimir-ea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladimir-ea/subscriptions", "organizations_url": "https://api.github.com/users/vladimir-ea/orgs", "repos_url": "https://api.github.com/users/vladimir-ea/repos", "events_url": "https://api.github.com/users/vladimir-ea/events{/privacy}", "received_events_url": "https://api.github.com/users/vladimir-ea/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vladimir-ea", "id": 85992906, "node_id": "MDQ6VXNlcjg1OTkyOTA2", "avatar_url": "https://avatars.githubusercontent.com/u/85992906?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vladimir-ea", "html_url": "https://github.com/vladimir-ea", "followers_url": "https://api.github.com/users/vladimir-ea/followers", "following_url": "https://api.github.com/users/vladimir-ea/following{/other_user}", "gists_url": "https://api.github.com/users/vladimir-ea/gists{/gist_id}", "starred_url": "https://api.github.com/users/vladimir-ea/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vladimir-ea/subscriptions", "organizations_url": "https://api.github.com/users/vladimir-ea/orgs", "repos_url": "https://api.github.com/users/vladimir-ea/repos", "events_url": "https://api.github.com/users/vladimir-ea/events{/privacy}", "received_events_url": "https://api.github.com/users/vladimir-ea/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3aa4997d4817c5ea2b33ba20f6fe7c695e4f64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3aa4997d4817c5ea2b33ba20f6fe7c695e4f64c", "html_url": "https://github.com/rust-lang/rust/commit/b3aa4997d4817c5ea2b33ba20f6fe7c695e4f64c"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "42773805cdb6d84691cf122f1aeea5e4f27cc8f0", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "patch": "@@ -145,6 +145,8 @@ pub mod solaris;\n pub mod solid;\n #[cfg(target_os = \"vxworks\")]\n pub mod vxworks;\n+#[cfg(target_os = \"watchos\")]\n+pub(crate) mod watchos;\n \n #[cfg(any(unix, target_os = \"wasi\", doc))]\n pub mod fd;"}, {"sha": "f97fa0fb06f782acffec2219a91f63f9d90b4dd4", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "patch": "@@ -73,6 +73,8 @@ mod platform {\n     pub use crate::os::solaris::*;\n     #[cfg(target_os = \"vxworks\")]\n     pub use crate::os::vxworks::*;\n+    #[cfg(target_os = \"watchos\")]\n+    pub use crate::os::watchos::*;\n }\n \n pub mod ffi;"}, {"sha": "a14fe35a77c105e6ed9066354bc9a9c52f2317da", "filename": "library/std/src/os/watchos/fs.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Ffs.rs?ref=2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "patch": "@@ -0,0 +1,142 @@\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use crate::os::watchos::raw;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: crate::fs::Metadata\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[deprecated(\n+        since = \"1.8.0\",\n+        note = \"deprecated in favor of the accessor \\\n+                  methods of this trait\"\n+    )]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_birthtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_flags(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gen(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_lspare(&self) -> u32;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_birthtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime as i64\n+    }\n+    fn st_birthtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_birthtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+    fn st_gen(&self) -> u32 {\n+        self.as_inner().as_inner().st_gen as u32\n+    }\n+    fn st_flags(&self) -> u32 {\n+        self.as_inner().as_inner().st_flags as u32\n+    }\n+    fn st_lspare(&self) -> u32 {\n+        self.as_inner().as_inner().st_lspare as u32\n+    }\n+}"}, {"sha": "cd6454ebbf99bd79d842e2837a2ca11c077d196f", "filename": "library/std/src/os/watchos/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Fmod.rs?ref=2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "patch": "@@ -0,0 +1,6 @@\n+//! watchOS-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod fs;\n+pub mod raw;"}, {"sha": "630a533d9aaf223babe9ad95854b6fef65220523", "filename": "library/std/src/os/watchos/raw.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2edbcf7c23df68bc04f3e4aad890b28b9547bbd4/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwatchos%2Fraw.rs?ref=2edbcf7c23df68bc04f3e4aad890b28b9547bbd4", "patch": "@@ -0,0 +1,83 @@\n+//! watchOS-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![deprecated(\n+    since = \"1.8.0\",\n+    note = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_long;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = usize;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: u16,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: u16,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: u64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_birthtime: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_birthtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: i64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: i64,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_flags: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gen: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_lspare: i32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_qspare: [i64; 2],\n+}"}]}