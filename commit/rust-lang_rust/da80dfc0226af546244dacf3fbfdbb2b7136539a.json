{"sha": "da80dfc0226af546244dacf3fbfdbb2b7136539a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhODBkZmMwMjI2YWY1NDYyNDRkYWNmM2ZiZmRiYjJiNzEzNjUzOWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-11T19:01:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-11T19:01:39Z"}, "message": "Merge #8398\n\n8398: Fix inference with conditionally compiled tails r=flodiebold a=DJMcNab\n\nFixes #8378\n\nCo-authored-by: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>", "tree": {"sha": "d1c337ce069d3016a630fb48684a5410730f7d86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c337ce069d3016a630fb48684a5410730f7d86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da80dfc0226af546244dacf3fbfdbb2b7136539a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmtSTCRBK7hj4Ov3rIwAAfGsIAGwCfogxCpU9aTulAX03Xx9j\ne46DD1jYDLkxHIqrZe1STVduUufWvca9ehUkVzYVJvZQlLO0XchzWT9rfTVBoPMm\nw9DVcOIi27exwwZyrJ+6Ushn3Rucsg3MNr2Sk+C+wQ8hiMFZXn4X62c28Jb980ZJ\npRNzDoogELUnERyTdu89wPSvKCLbhxA5dJCX4VFh+DYIuRjrva/GeMA9mv5+Vbqo\nK4kjjAzigK1e88Qz/50Cfu5t12b21uk5lsX8Am/6whVNClkr2MLUk0dM/BasHPzl\n3JnEmHx2Pne/iVFqHaSQaAocGKiVm85B6IcawpPIHXYCLxd+3PZovrHa1i4biGM=\n=0ey5\n-----END PGP SIGNATURE-----\n", "payload": "tree d1c337ce069d3016a630fb48684a5410730f7d86\nparent e290891dd75f2ae2d156e8610fd037a84c1b853f\nparent 11c926fd97d5efb61a771455fc233afe33939569\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620759699 +0000\ncommitter GitHub <noreply@github.com> 1620759699 +0000\n\nMerge #8398\n\n8398: Fix inference with conditionally compiled tails r=flodiebold a=DJMcNab\n\nFixes #8378\n\nCo-authored-by: Daniel McNab <36049421+DJMcNab@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da80dfc0226af546244dacf3fbfdbb2b7136539a", "html_url": "https://github.com/rust-lang/rust/commit/da80dfc0226af546244dacf3fbfdbb2b7136539a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da80dfc0226af546244dacf3fbfdbb2b7136539a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e290891dd75f2ae2d156e8610fd037a84c1b853f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e290891dd75f2ae2d156e8610fd037a84c1b853f", "html_url": "https://github.com/rust-lang/rust/commit/e290891dd75f2ae2d156e8610fd037a84c1b853f"}, {"sha": "11c926fd97d5efb61a771455fc233afe33939569", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c926fd97d5efb61a771455fc233afe33939569", "html_url": "https://github.com/rust-lang/rust/commit/11c926fd97d5efb61a771455fc233afe33939569"}], "stats": {"total": 83, "additions": 71, "deletions": 12}, "files": [{"sha": "9f278d35b73a83ffdd9b8e102e7a7c0d0d4c6369", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=da80dfc0226af546244dacf3fbfdbb2b7136539a", "patch": "@@ -205,7 +205,7 @@ impl ExprCollector<'_> {\n         self.maybe_collect_expr(expr).unwrap_or_else(|| self.missing_expr())\n     }\n \n-    /// Returns `None` if the expression is `#[cfg]`d out.\n+    /// Returns `None` if and only if the expression is `#[cfg]`d out.\n     fn maybe_collect_expr(&mut self, expr: ast::Expr) -> Option<ExprId> {\n         let syntax_ptr = AstPtr::new(&expr);\n         self.check_cfg(&expr)?;\n@@ -668,7 +668,7 @@ impl ExprCollector<'_> {\n                 if self.check_cfg(&stmt).is_none() {\n                     return;\n                 }\n-\n+                let has_semi = stmt.semicolon_token().is_some();\n                 // Note that macro could be expended to multiple statements\n                 if let Some(ast::Expr::MacroCall(m)) = stmt.expr() {\n                     let macro_ptr = AstPtr::new(&m);\n@@ -685,18 +685,19 @@ impl ExprCollector<'_> {\n                                 statements.statements().for_each(|stmt| this.collect_stmt(stmt));\n                                 if let Some(expr) = statements.expr() {\n                                     let expr = this.collect_expr(expr);\n-                                    this.statements_in_scope.push(Statement::Expr(expr));\n+                                    this.statements_in_scope\n+                                        .push(Statement::Expr { expr, has_semi });\n                                 }\n                             }\n                             None => {\n                                 let expr = this.alloc_expr(Expr::Missing, syntax_ptr.clone());\n-                                this.statements_in_scope.push(Statement::Expr(expr));\n+                                this.statements_in_scope.push(Statement::Expr { expr, has_semi });\n                             }\n                         },\n                     );\n                 } else {\n                     let expr = self.collect_expr_opt(stmt.expr());\n-                    self.statements_in_scope.push(Statement::Expr(expr));\n+                    self.statements_in_scope.push(Statement::Expr { expr, has_semi });\n                 }\n             }\n             ast::Stmt::Item(item) => {\n@@ -725,8 +726,17 @@ impl ExprCollector<'_> {\n         let prev_statements = std::mem::take(&mut self.statements_in_scope);\n \n         block.statements().for_each(|s| self.collect_stmt(s));\n-\n-        let tail = block.tail_expr().map(|e| self.collect_expr(e));\n+        block.tail_expr().and_then(|e| {\n+            let expr = self.maybe_collect_expr(e)?;\n+            Some(self.statements_in_scope.push(Statement::Expr { expr, has_semi: false }))\n+        });\n+\n+        let mut tail = None;\n+        if let Some(Statement::Expr { expr, has_semi: false }) = self.statements_in_scope.last() {\n+            tail = Some(*expr);\n+            self.statements_in_scope.pop();\n+        }\n+        let tail = tail;\n         let statements = std::mem::replace(&mut self.statements_in_scope, prev_statements);\n         let syntax_node_ptr = AstPtr::new(&block.into());\n         let expr_id = self.alloc_expr("}, {"sha": "6764de3a75e4b4105938b182bec80000def974d2", "filename": "crates/hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Fscope.rs?ref=da80dfc0226af546244dacf3fbfdbb2b7136539a", "patch": "@@ -157,7 +157,7 @@ fn compute_block_scopes(\n                 scope = scopes.new_scope(scope);\n                 scopes.add_bindings(body, scope, *pat);\n             }\n-            Statement::Expr(expr) => {\n+            Statement::Expr { expr, .. } => {\n                 scopes.set_scope(*expr, scope);\n                 compute_expr_scopes(*expr, body, scopes, scope);\n             }"}, {"sha": "0c3b410802fe5be48e42dda6272620f579b9771c", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=da80dfc0226af546244dacf3fbfdbb2b7136539a", "patch": "@@ -242,7 +242,7 @@ pub struct RecordLitField {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Statement {\n     Let { pat: PatId, type_ref: Option<Interned<TypeRef>>, initializer: Option<ExprId> },\n-    Expr(ExprId),\n+    Expr { expr: ExprId, has_semi: bool },\n }\n \n impl Expr {\n@@ -265,7 +265,7 @@ impl Expr {\n                                 f(*expr);\n                             }\n                         }\n-                        Statement::Expr(e) => f(*e),\n+                        Statement::Expr { expr: expression, .. } => f(*expression),\n                     }\n                 }\n                 if let Some(expr) = tail {"}, {"sha": "47709c1e8fc2d53bb4e10cf86714e4891acd3c87", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=da80dfc0226af546244dacf3fbfdbb2b7136539a", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         if let Expr::Block { statements, tail, .. } = body_expr {\n             if let Some(t) = tail {\n                 self.validate_results_in_tail_expr(body.body_expr, *t, db);\n-            } else if let Some(Statement::Expr(id)) = statements.last() {\n+            } else if let Some(Statement::Expr { expr: id, .. }) = statements.last() {\n                 self.validate_missing_tail_expr(body.body_expr, *id, db);\n             }\n         }"}, {"sha": "9476e6297e91e974b0357076c9d19ab7b53dcc89", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=da80dfc0226af546244dacf3fbfdbb2b7136539a", "patch": "@@ -809,7 +809,7 @@ impl<'a> InferenceContext<'a> {\n                     let ty = self.resolve_ty_as_possible(ty);\n                     self.infer_pat(*pat, &ty, BindingMode::default());\n                 }\n-                Statement::Expr(expr) => {\n+                Statement::Expr { expr, .. } => {\n                     self.infer_expr(*expr, &Expectation::none());\n                 }\n             }"}, {"sha": "e23bd4da925d465af846582c330085c3cd1e7713", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da80dfc0226af546244dacf3fbfdbb2b7136539a/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=da80dfc0226af546244dacf3fbfdbb2b7136539a", "patch": "@@ -1050,3 +1050,52 @@ fn test() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn cfg_tail() {\n+    // https://github.com/rust-analyzer/rust-analyzer/issues/8378\n+    check_infer(\n+        r#\"\n+        fn fake_tail(){\n+            { \"first\" }\n+            #[cfg(never)] 9\n+        }\n+        fn multiple_fake(){\n+            { \"fake\" }\n+            { \"fake\" }\n+            { \"second\" }\n+            #[cfg(never)] { 11 }\n+            #[cfg(never)] 12;\n+            #[cfg(never)] 13\n+        }\n+        fn no_normal_tail(){\n+            { \"third\" }\n+            #[cfg(never)] 14;\n+            #[cfg(never)] 15;\n+        }\n+        fn no_actual_tail(){\n+            { \"fourth\" };\n+            #[cfg(never)] 14;\n+            #[cfg(never)] 15\n+        }\n+        \"#,\n+        expect![[r#\"\n+            14..53 '{     ...)] 9 }': &str\n+            20..31 '{ \"first\" }': &str\n+            22..29 '\"first\"': &str\n+            72..190 '{     ...] 13 }': &str\n+            78..88 '{ \"fake\" }': &str\n+            80..86 '\"fake\"': &str\n+            93..103 '{ \"fake\" }': &str\n+            95..101 '\"fake\"': &str\n+            108..120 '{ \"second\" }': &str\n+            110..118 '\"second\"': &str\n+            210..273 '{     ... 15; }': &str\n+            216..227 '{ \"third\" }': &str\n+            218..225 '\"third\"': &str\n+            293..357 '{     ...] 15 }': ()\n+            299..311 '{ \"fourth\" }': &str\n+            301..309 '\"fourth\"': &str\n+        \"#]],\n+    )\n+}"}]}