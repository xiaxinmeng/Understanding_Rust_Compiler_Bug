{"sha": "9988970e81ab877f8cba0bf0d0cc6df7aed52fb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ODg5NzBlODFhYjg3N2Y4Y2JhMGJmMGQwY2M2ZGY3YWVkNTJmYjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T22:20:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:31Z"}, "message": "librustc: De-`@mut` `NameBindings`", "tree": {"sha": "7167c0cefa17ce502089ebacaad8127cf7266488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7167c0cefa17ce502089ebacaad8127cf7266488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7", "html_url": "https://github.com/rust-lang/rust/commit/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35c8fecb329b9a432d43e20fb91442d66d8f339a", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c8fecb329b9a432d43e20fb91442d66d8f339a", "html_url": "https://github.com/rust-lang/rust/commit/35c8fecb329b9a432d43e20fb91442d66d8f339a"}], "stats": {"total": 50, "additions": 22, "deletions": 28}, "files": [{"sha": "b023f89ab71a150cccd4324f39f7ef6f18e6ecb8", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9988970e81ab877f8cba0bf0d0cc6df7aed52fb7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9988970e81ab877f8cba0bf0d0cc6df7aed52fb7", "patch": "@@ -113,7 +113,7 @@ enum NamespaceResult {\n     UnboundResult,\n     /// Means that resolve has determined that the name is bound in the Module\n     /// argument, and specified by the NameBindings argument.\n-    BoundResult(@Module, @mut NameBindings)\n+    BoundResult(@Module, @NameBindings)\n }\n \n impl NamespaceResult {\n@@ -328,13 +328,11 @@ impl ImportDirective {\n /// The item that an import resolves to.\n struct Target {\n     target_module: @Module,\n-    bindings: @mut NameBindings,\n+    bindings: @NameBindings,\n }\n \n impl Target {\n-    fn new(target_module: @Module,\n-               bindings: @mut NameBindings)\n-               -> Target {\n+    fn new(target_module: @Module, bindings: @NameBindings) -> Target {\n         Target {\n             target_module: target_module,\n             bindings: bindings\n@@ -420,7 +418,7 @@ struct Module {\n     kind: Cell<ModuleKind>,\n     is_public: bool,\n \n-    children: @mut HashMap<Name, @mut NameBindings>,\n+    children: @mut HashMap<Name, @NameBindings>,\n     imports: @mut ~[@ImportDirective],\n \n     // The external module children of this node that were declared with\n@@ -520,7 +518,7 @@ enum TraitReferenceType {\n \n impl NameBindings {\n     /// Creates a new module in this set of name bindings.\n-    fn define_module(&mut self,\n+    fn define_module(&self,\n                      parent_link: ParentLink,\n                      def_id: Option<DefId>,\n                      kind: ModuleKind,\n@@ -551,7 +549,7 @@ impl NameBindings {\n     }\n \n     /// Sets the kind of the module, creating a new one if necessary.\n-    fn set_module_kind(&mut self,\n+    fn set_module_kind(&self,\n                        parent_link: ParentLink,\n                        def_id: Option<DefId>,\n                        kind: ModuleKind,\n@@ -591,7 +589,7 @@ impl NameBindings {\n     }\n \n     /// Records a type definition.\n-    fn define_type(&mut self, def: Def, sp: Span, is_public: bool) {\n+    fn define_type(&self, def: Def, sp: Span, is_public: bool) {\n         // Merges the type with the existing type def or creates a new one.\n         match self.type_def.get() {\n             None => {\n@@ -614,7 +612,7 @@ impl NameBindings {\n     }\n \n     /// Records a value definition.\n-    fn define_value(&mut self, def: Def, sp: Span, is_public: bool) {\n+    fn define_value(&self, def: Def, sp: Span, is_public: bool) {\n         self.value_def.set(Some(ValueNsDef {\n             def: def,\n             value_span: Some(sp),\n@@ -635,7 +633,7 @@ impl NameBindings {\n      * Returns the module node. Fails if this node does not have a module\n      * definition.\n      */\n-    fn get_module(&mut self) -> @Module {\n+    fn get_module(&self) -> @Module {\n         match self.get_module_if_available() {\n             None => {\n                 fail!(\"get_module called on a node with no module \\\n@@ -774,7 +772,7 @@ fn namespace_error_to_str(ns: NamespaceError) -> &'static str {\n fn Resolver(session: Session,\n             lang_items: LanguageItems,\n             crate_span: Span) -> Resolver {\n-    let graph_root = @mut NameBindings();\n+    let graph_root = @NameBindings();\n \n     graph_root.define_module(NoParentLink,\n                              Some(DefId { crate: 0, node: 0 }),\n@@ -834,7 +832,7 @@ struct Resolver {\n \n     intr: @ident_interner,\n \n-    graph_root: @mut NameBindings,\n+    graph_root: @NameBindings,\n \n     method_map: @mut HashMap<Name, HashSet<DefId>>,\n     structs: HashSet<DefId>,\n@@ -985,7 +983,7 @@ impl Resolver {\n                      duplicate_checking_mode: DuplicateCheckingMode,\n                      // For printing errors\n                      sp: Span)\n-                     -> (@mut NameBindings, ReducedGraphParent) {\n+                     -> (@NameBindings, ReducedGraphParent) {\n         // If this is the immediate descendant of a module, then we add the\n         // child name directly. Otherwise, we create or reuse an anonymous\n         // module and add the child to that.\n@@ -1001,7 +999,7 @@ impl Resolver {\n         let new_parent = ModuleReducedGraphParent(module_);\n         match module_.children.find(&name.name) {\n             None => {\n-                let child = @mut NameBindings();\n+                let child = @NameBindings();\n                 module_.children.insert(name.name, child);\n                 return (child, new_parent);\n             }\n@@ -1591,7 +1589,7 @@ impl Resolver {\n     fn handle_external_def(&mut self,\n                            def: Def,\n                            vis: visibility,\n-                           child_name_bindings: @mut NameBindings,\n+                           child_name_bindings: @NameBindings,\n                            final_ident: &str,\n                            ident: Ident,\n                            new_parent: ReducedGraphParent) {\n@@ -2215,8 +2213,7 @@ impl Resolver {\n         return resolution_result;\n     }\n \n-    fn create_name_bindings_from_module(module: @Module)\n-                                            -> NameBindings {\n+    fn create_name_bindings_from_module(module: @Module) -> NameBindings {\n         NameBindings {\n             type_def: RefCell::new(Some(TypeNsDef {\n                 is_public: false,\n@@ -2372,7 +2369,7 @@ impl Resolver {\n                     None => {} // Continue.\n                     Some(module) => {\n                         let name_bindings =\n-                            @mut Resolver::create_name_bindings_from_module(\n+                            @Resolver::create_name_bindings_from_module(\n                                 module);\n                         type_result = BoundResult(containing_module,\n                                                   name_bindings);\n@@ -2535,8 +2532,7 @@ impl Resolver {\n             }\n         }\n \n-        let merge_import_resolution = |name,\n-                                       name_bindings: @mut NameBindings| {\n+        let merge_import_resolution = |name, name_bindings: @NameBindings| {\n             let dest_import_resolution;\n             match module_.import_resolutions.find(&name) {\n                 None => {\n@@ -2585,7 +2581,7 @@ impl Resolver {\n                 containing_module.external_module_children.borrow();\n             for (&name, module) in external_module_children.get().iter() {\n                 let name_bindings =\n-                    @mut Resolver::create_name_bindings_from_module(*module);\n+                    @Resolver::create_name_bindings_from_module(*module);\n                 merge_import_resolution(name, name_bindings);\n             }\n         }\n@@ -2889,8 +2885,7 @@ impl Resolver {\n                 None => {}\n                 Some(module) => {\n                     let name_bindings =\n-                        @mut Resolver::create_name_bindings_from_module(\n-                            module);\n+                        @Resolver::create_name_bindings_from_module(module);\n                     debug!(\"lower name bindings succeeded\");\n                     return Success((Target::new(module_, name_bindings), false));\n                 }\n@@ -2975,7 +2970,7 @@ impl Resolver {\n             module_, name, TypeNS, DontSearchThroughModules);\n         match resolve_result {\n             Success((target, _)) => {\n-                let bindings = &mut *target.bindings;\n+                let bindings = &*target.bindings;\n                 match bindings.type_def.get() {\n                     Some(type_def) => {\n                         match type_def.module_def {\n@@ -3166,8 +3161,7 @@ impl Resolver {\n                 None => {}\n                 Some(module) => {\n                     let name_bindings =\n-                        @mut Resolver::create_name_bindings_from_module(\n-                            module);\n+                        @Resolver::create_name_bindings_from_module(module);\n                     return Success((Target::new(module_, name_bindings), false));\n                 }\n             }\n@@ -3290,7 +3284,7 @@ impl Resolver {\n     fn add_exports_of_namebindings(&mut self,\n                                    exports2: &mut ~[Export2],\n                                    name: Name,\n-                                   namebindings: @mut NameBindings,\n+                                   namebindings: @NameBindings,\n                                    ns: Namespace,\n                                    reexport: bool) {\n         match namebindings.def_for_namespace(ns) {"}]}