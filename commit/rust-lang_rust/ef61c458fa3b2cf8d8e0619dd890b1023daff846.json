{"sha": "ef61c458fa3b2cf8d8e0619dd890b1023daff846", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNjFjNDU4ZmEzYjJjZjhkOGUwNjE5ZGQ4OTBiMTAyM2RhZmY4NDY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T18:11:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T18:11:34Z"}, "message": "Add more logging to copy/init paths.", "tree": {"sha": "ac4ca4d39a84f59c575f7035193d58b2d07c59f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4ca4d39a84f59c575f7035193d58b2d07c59f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef61c458fa3b2cf8d8e0619dd890b1023daff846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef61c458fa3b2cf8d8e0619dd890b1023daff846", "html_url": "https://github.com/rust-lang/rust/commit/ef61c458fa3b2cf8d8e0619dd890b1023daff846", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef61c458fa3b2cf8d8e0619dd890b1023daff846/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb3aad72c40e2ea3b7f309ed0ad162ac8f726310", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3aad72c40e2ea3b7f309ed0ad162ac8f726310", "html_url": "https://github.com/rust-lang/rust/commit/bb3aad72c40e2ea3b7f309ed0ad162ac8f726310"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "983a8a31bf3f7e401a52b6c1871c70f9a095cb2b", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ef61c458fa3b2cf8d8e0619dd890b1023daff846/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/ef61c458fa3b2cf8d8e0619dd890b1023daff846/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=ef61c458fa3b2cf8d8e0619dd890b1023daff846", "patch": "@@ -2873,6 +2873,11 @@ let trans_visitor\n       iflog\n         begin\n           fun _ ->\n+            log cx \"trans_copy_ty\";\n+            log cx \"   dst ty %a, src ty %a\"\n+              Ast.sprintf_ty dst_ty Ast.sprintf_ty src_ty;\n+            log cx \"   dst cell %s, src cell %s\"\n+              (cell_str dst) (cell_str src);\n             annotate\n               (Printf.sprintf \"%sweight copy: %a <- %a\"\n                  weight\n@@ -3121,19 +3126,27 @@ let trans_visitor\n       (src:Il.cell) (src_ty:Ast.ty)\n       : unit =\n     let dst_ty = slot_ty dst_slot in\n-    match (dst_slot.Ast.slot_mode, clone) with\n-        (Ast.MODE_alias, CLONE_none) ->\n-          mov dst (Il.Cell (alias (Il.Mem (need_mem_cell src))))\n+    let _ =\n+      iflog (fun _ ->\n+               log cx \"trans_init_slot_from_cell\";\n+               log cx \"   dst slot %a, src ty %a\"\n+                 Ast.sprintf_slot dst_slot Ast.sprintf_ty src_ty;\n+               log cx \"   dst cell %s, src cell %s\"\n+                 (cell_str dst) (cell_str src))\n+    in\n+      match (dst_slot.Ast.slot_mode, clone) with\n+          (Ast.MODE_alias, CLONE_none) ->\n+            mov dst (Il.Cell (alias (Il.Mem (need_mem_cell src))))\n \n-      | (Ast.MODE_local, CLONE_none) ->\n-          trans_copy_ty\n-            ty_params true\n-            dst dst_ty src src_ty None\n+        | (Ast.MODE_local, CLONE_none) ->\n+            trans_copy_ty\n+              ty_params true\n+              dst dst_ty src src_ty None\n \n-      | (Ast.MODE_alias, _) ->\n-          bug () \"attempting to clone into alias slot\"\n+        | (Ast.MODE_alias, _) ->\n+            bug () \"attempting to clone into alias slot\"\n \n-      | (_, CLONE_chan clone_task) ->\n+        | (_, CLONE_chan clone_task) ->\n             let clone =\n               if (type_contains_chan src_ty)\n               then CLONE_all clone_task\n@@ -3143,8 +3156,8 @@ let trans_visitor\n               trans_init_slot_from_cell ty_params\n                 clone dst dst_slot src src_ty\n \n-      | (_, CLONE_all clone_task) ->\n-          clone_ty ty_params clone_task dst src src_ty None\n+        | (_, CLONE_all clone_task) ->\n+            clone_ty ty_params clone_task dst src src_ty None\n \n \n   and trans_init_slot_from_atom\n@@ -3354,6 +3367,8 @@ let trans_visitor\n       (arg_slot:Ast.slot)\n       (arg:Ast.atom)\n       : unit =\n+    log cx \"trans_argN: arg slot %a, arg atom %a\"\n+      Ast.sprintf_slot arg_slot Ast.sprintf_atom arg;\n     trans_init_slot_from_atom clone arg_cell arg_slot arg\n \n   and code_of_cell (cell:Il.cell) : Il.code ="}]}