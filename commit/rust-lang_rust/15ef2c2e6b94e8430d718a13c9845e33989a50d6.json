{"sha": "15ef2c2e6b94e8430d718a13c9845e33989a50d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWYyYzJlNmI5NGU4NDMwZDcxOGExM2M5ODQ1ZTMzOTg5YTUwZDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-17T16:04:25Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-24T21:27:22Z"}, "message": "Convert `astconv` to request bounds through the `AstConv` interface\nrather than poking through the `TypeParameterDef` directly.", "tree": {"sha": "ea878c1f4227950b90da0f0469789f1470f3c3d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea878c1f4227950b90da0f0469789f1470f3c3d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ef2c2e6b94e8430d718a13c9845e33989a50d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ef2c2e6b94e8430d718a13c9845e33989a50d6", "html_url": "https://github.com/rust-lang/rust/commit/15ef2c2e6b94e8430d718a13c9845e33989a50d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ef2c2e6b94e8430d718a13c9845e33989a50d6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e033a231abf1b8933a51e4c93dc8aeb39b30020d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e033a231abf1b8933a51e4c93dc8aeb39b30020d", "html_url": "https://github.com/rust-lang/rust/commit/e033a231abf1b8933a51e4c93dc8aeb39b30020d"}], "stats": {"total": 62, "additions": 55, "deletions": 7}, "files": [{"sha": "275007bf797402bf349907222aa55d5b357f92f8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=15ef2c2e6b94e8430d718a13c9845e33989a50d6", "patch": "@@ -55,7 +55,7 @@ use middle::region;\n use middle::resolve_lifetime;\n use middle::infer;\n use middle::stability;\n-use middle::subst::{self, Subst, Substs, VecPerParamSpace};\n+use middle::subst::{self, ParamSpace, Subst, Substs, VecPerParamSpace};\n use middle::traits;\n use middle::ty;\n use middle::ty_fold::{self, TypeFoldable, TypeFolder};\n@@ -2996,6 +2996,13 @@ impl<'tcx> TyS<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    pub fn is_param(&self, space: ParamSpace, index: u32) -> bool {\n+        match self.sty {\n+            ty::ty_param(ref data) => data.space == space && data.idx == index,\n+            _ => false,\n+        }\n+    }\n }\n \n pub fn walk_ty<'tcx, F>(ty_root: Ty<'tcx>, mut f: F)"}, {"sha": "d0e194e15d202858457b909e7c4c494be946be1a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=15ef2c2e6b94e8430d718a13c9845e33989a50d6", "patch": "@@ -53,7 +53,7 @@ use middle::const_eval;\n use middle::def;\n use middle::resolve_lifetime as rl;\n use middle::privacy::{AllPublic, LastMod};\n-use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n+use middle::subst::{FnSpace, ParamSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::traits;\n use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n@@ -77,6 +77,8 @@ pub trait AstConv<'tcx> {\n \n     fn get_trait_def(&self, id: ast::DefId) -> Rc<ty::TraitDef<'tcx>>;\n \n+    fn get_type_parameter_bounds(&self, space: ParamSpace, index: u32) -> Vec<ty::PolyTraitRef<'tcx>>;\n+\n     /// Return an (optional) substitution to convert bound type parameters that\n     /// are in scope into free ones. This function should only return Some\n     /// within a fn body.\n@@ -1011,7 +1013,9 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n \n         // FIXME(#20300) -- search where clauses, not bounds\n         suitable_bounds =\n-            traits::transitive_bounds(tcx, &ty_param_def.bounds.trait_bounds)\n+            traits::transitive_bounds(tcx,\n+                                      &this.get_type_parameter_bounds(ty_param_def.space,\n+                                                                      ty_param_def.index))\n             .filter(|b| trait_defines_associated_type_named(this, b.def_id(), assoc_name))\n             .collect();\n     }"}, {"sha": "968d67aca9dde16d523d87cb0098cd30b1279019", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=15ef2c2e6b94e8430d718a13c9845e33989a50d6", "patch": "@@ -97,7 +97,7 @@ use middle::subst::{self, Subst, Substs, VecPerParamSpace, ParamSpace, TypeSpace\n use middle::traits;\n use middle::ty::{FnSig, GenericPredicates, VariantInfo, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n-use middle::ty::{self, HasProjectionTypes, RegionEscape, Ty};\n+use middle::ty::{self, HasProjectionTypes, RegionEscape, ToPolyTraitRef, Ty};\n use middle::ty::liberate_late_bound_regions;\n use middle::ty::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n@@ -1218,6 +1218,30 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         Some(&self.inh.param_env.free_substs)\n     }\n \n+    fn get_type_parameter_bounds(&self,\n+                                 space: ParamSpace,\n+                                 index: u32)\n+                                 -> Vec<ty::PolyTraitRef<'tcx>>\n+    {\n+        self.inh.param_env.caller_bounds\n+                          .iter()\n+                          .filter_map(|predicate| {\n+                              match *predicate {\n+                                  ty::Predicate::Trait(ref data) => {\n+                                      if data.0.self_ty().is_param(space, index) {\n+                                          Some(data.to_poly_trait_ref())\n+                                      } else {\n+                                          None\n+                                      }\n+                                  }\n+                                  _ => {\n+                                      None\n+                                  }\n+                              }\n+                          })\n+                          .collect()\n+    }\n+\n     fn ty_infer(&self, _span: Span) -> Ty<'tcx> {\n         self.infcx().next_ty_var()\n     }"}, {"sha": "6d65d05bf6f3bd41597dfb9e4dd36969a54e25b0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ef2c2e6b94e8430d718a13c9845e33989a50d6/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=15ef2c2e6b94e8430d718a13c9845e33989a50d6", "patch": "@@ -145,7 +145,6 @@ struct CrateCtxt<'a,'tcx:'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n }\n \n-#[allow(dead_code)] // just temporary, for generics\n struct ItemCtxt<'a,'tcx:'a> {\n     ccx: &'a CrateCtxt<'a,'tcx>,\n     generics: &'a ty::Generics<'tcx>,\n@@ -241,6 +240,19 @@ impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n         get_trait_def(self.ccx, id)\n     }\n \n+    fn get_type_parameter_bounds(&self,\n+                                 param: subst::ParamSpace,\n+                                 index: u32)\n+                                 -> Vec<ty::PolyTraitRef<'tcx>>\n+    {\n+        // TODO out of range indices can occur when you have something\n+        // like fn foo<T:U::X,U>() { }\n+        match self.generics.types.opt_get(param, index as usize) {\n+            Some(def) => def.bounds.trait_bounds.clone(),\n+            None => Vec::new(),\n+        }\n+    }\n+\n     fn ty_infer(&self, span: Span) -> Ty<'tcx> {\n         span_err!(self.tcx().sess, span, E0121,\n                   \"the type placeholder `_` is not allowed within types on item signatures\");\n@@ -1596,7 +1608,7 @@ fn ty_generics<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     // Now create the real type parameters.\n     for (i, param) in types.iter().enumerate() {\n-        let def = get_or_create_type_parameter_def(ccx, space, param, i as u32, where_clause);\n+        let def = get_or_create_type_parameter_def(ccx, &result, space, param, i as u32);\n         debug!(\"ty_generics: def for type param: {:?}, {:?}\", def, space);\n         result.types.push(space, def);\n     }\n@@ -1605,6 +1617,7 @@ fn ty_generics<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n }\n \n fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n+                                             generics_so_far: &ty::Generics<'tcx>,\n                                              space: subst::ParamSpace,\n                                              param: &ast::TyParam,\n                                              index: u32,\n@@ -1619,7 +1632,7 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     let param_ty = ty::ParamTy::new(space, index, param.ident.name);\n     let bounds = compute_bounds(ccx,\n-                                &ty::Generics::empty(),\n+                                generics_so_far,\n                                 param_ty.to_ty(ccx.tcx),\n                                 &param.bounds,\n                                 SizedByDefault::Yes,"}]}