{"sha": "b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZjE2OWZlN2ExOWNmMTBmNzBlZTJhYTI1MTMyNzYxODVjNzBlOWI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-20T08:37:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-20T08:37:06Z"}, "message": "Recover from parse errors in struct literal fields\n\nAttempt to recover from parse errors while parsing a struct's literal fields\nby skipping tokens until a comma or the closing brace is found. This allows\nerrors in other fields to be reported.", "tree": {"sha": "dd0b3328c61a882bc0b0ff4436e6eb997a97ccda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0b3328c61a882bc0b0ff4436e6eb997a97ccda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "html_url": "https://github.com/rust-lang/rust/commit/b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0c585281740aba4c91cbfd385f5e1fbe313d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0c585281740aba4c91cbfd385f5e1fbe313d11", "html_url": "https://github.com/rust-lang/rust/commit/0c0c585281740aba4c91cbfd385f5e1fbe313d11"}], "stats": {"total": 147, "additions": 132, "deletions": 15}, "files": [{"sha": "9b20937cf933b395c8e9dc793ab2004ad19c40c6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "patch": "@@ -100,6 +100,7 @@ pub enum PathStyle {\n enum SemiColonMode {\n     Break,\n     Ignore,\n+    Comma,\n }\n \n #[derive(Clone, Copy, PartialEq, Debug)]\n@@ -2656,18 +2657,37 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n \n+            let mut recovery_field = None;\n+            if let token::Ident(ident, _) = self.token {\n+                if !self.token.is_reserved_ident() {\n+                    let mut ident = ident.clone();\n+                    ident.span = self.span;\n+                    recovery_field = Some(ast::Field {\n+                        ident,\n+                        span: self.span,\n+                        expr: self.mk_expr(self.span, ExprKind::Err, ThinVec::new()),\n+                        is_shorthand: true,\n+                        attrs: ThinVec::new(),\n+                    });\n+                }\n+            }\n             match self.parse_field() {\n                 Ok(f) => fields.push(f),\n                 Err(mut e) => {\n                     e.span_label(struct_sp, \"while parsing this struct\");\n                     e.emit();\n+                    if let Some(f) = recovery_field {\n+                        fields.push(f);\n+                    }\n \n                     // If the next token is a comma, then try to parse\n                     // what comes next as additional fields, rather than\n                     // bailing out until next `}`.\n                     if self.token != token::Comma {\n-                        self.recover_stmt();\n-                        break;\n+                        self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);\n+                        if self.token != token::Comma {\n+                            break;\n+                        }\n                     }\n                 }\n             }\n@@ -2676,9 +2696,10 @@ impl<'a> Parser<'a> {\n                                      &[token::CloseDelim(token::Brace)]) {\n                 Ok(()) => {}\n                 Err(mut e) => {\n+                    e.span_label(struct_sp, \"while parsing this struct\");\n                     e.emit();\n-                    self.recover_stmt();\n-                    break;\n+                    self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);\n+                    self.eat(&token::Comma);\n                 }\n             }\n         }\n@@ -4538,13 +4559,13 @@ impl<'a> Parser<'a> {\n                 token::CloseDelim(token::DelimToken::Brace) => {\n                     if brace_depth == 0 {\n                         debug!(\"recover_stmt_ return - close delim {:?}\", self.token);\n-                        return;\n+                        break;\n                     }\n                     brace_depth -= 1;\n                     self.bump();\n                     if in_block && bracket_depth == 0 && brace_depth == 0 {\n                         debug!(\"recover_stmt_ return - block end {:?}\", self.token);\n-                        return;\n+                        break;\n                     }\n                 }\n                 token::CloseDelim(token::DelimToken::Bracket) => {\n@@ -4556,15 +4577,25 @@ impl<'a> Parser<'a> {\n                 }\n                 token::Eof => {\n                     debug!(\"recover_stmt_ return - Eof\");\n-                    return;\n+                    break;\n                 }\n                 token::Semi => {\n                     self.bump();\n                     if break_on_semi == SemiColonMode::Break &&\n                        brace_depth == 0 &&\n                        bracket_depth == 0 {\n                         debug!(\"recover_stmt_ return - Semi\");\n-                        return;\n+                        break;\n+                    }\n+                }\n+                token::Comma => {\n+                    if break_on_semi == SemiColonMode::Comma &&\n+                       brace_depth == 0 &&\n+                       bracket_depth == 0 {\n+                        debug!(\"recover_stmt_ return - Semi\");\n+                        break;\n+                    } else {\n+                        self.bump();\n                     }\n                 }\n                 _ => {"}, {"sha": "d2636b7ecb3f815829ddba47602126b38c345480", "filename": "src/test/ui/issues/issue-52496.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fissues%2Fissue-52496.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fissues%2Fissue-52496.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52496.rs?ref=b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "patch": "@@ -0,0 +1,13 @@\n+struct Foo { bar: f64, baz: i64, bat: i64 }\n+\n+fn main() {\n+    let _ = Foo { bar: .5, baz: 42 };\n+    //~^ ERROR expected expression\n+    //~| ERROR missing field `bat` in initializer of `Foo`\n+    let bar = 1.5f32;\n+    let _ = Foo { bar.into(), bat: -1, . };\n+    //~^ ERROR expected one of\n+    //~| ERROR mismatched types\n+    //~| ERROR missing field `baz` in initializer of `Foo`\n+    //~| ERROR expected identifier, found `.`\n+}"}, {"sha": "c98de6ffbed40b47e2b9ab531b1c224e9f6911d8", "filename": "src/test/ui/issues/issue-52496.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52496.stderr?ref=b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "patch": "@@ -0,0 +1,50 @@\n+error: expected expression, found `.`\n+  --> $DIR/issue-52496.rs:4:24\n+   |\n+LL |     let _ = Foo { bar: .5, baz: 42 };\n+   |             ---        ^ expected expression\n+   |             |\n+   |             while parsing this struct\n+\n+error: expected one of `,` or `}`, found `.`\n+  --> $DIR/issue-52496.rs:8:22\n+   |\n+LL |     let _ = Foo { bar.into(), bat: -1, . };\n+   |             ---      ^ expected one of `,` or `}` here\n+   |             |\n+   |             while parsing this struct\n+\n+error: expected identifier, found `.`\n+  --> $DIR/issue-52496.rs:8:40\n+   |\n+LL |     let _ = Foo { bar.into(), bat: -1, . };\n+   |             ---                        ^ expected identifier\n+   |             |\n+   |             while parsing this struct\n+\n+error[E0063]: missing field `bat` in initializer of `Foo`\n+  --> $DIR/issue-52496.rs:4:13\n+   |\n+LL |     let _ = Foo { bar: .5, baz: 42 };\n+   |             ^^^ missing `bat`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52496.rs:8:19\n+   |\n+LL |     let _ = Foo { bar.into(), bat: -1, . };\n+   |                   ^^^ expected f64, found f32\n+help: you can cast an `f32` to `f64` in a lossless way\n+   |\n+LL |     let _ = Foo { bar: bar.into().into(), bat: -1, . };\n+   |                   ^^^^^^^^^^^^^^^\n+\n+error[E0063]: missing field `baz` in initializer of `Foo`\n+  --> $DIR/issue-52496.rs:8:13\n+   |\n+LL |     let _ = Foo { bar.into(), bat: -1, . };\n+   |             ^^^ missing `baz`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0063, E0308.\n+For more information about an error, try `rustc --explain E0063`."}, {"sha": "b5956ad339db8fdc6b3a7a9d3c14c2a38b5de118", "filename": "src/test/ui/parser/removed-syntax-with-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-1.stderr?ref=b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "patch": "@@ -2,7 +2,9 @@ error: expected one of `,`, `.`, `?`, `}`, or an operator, found `with`\n   --> $DIR/removed-syntax-with-1.rs:8:25\n    |\n LL |     let b = S { foo: () with a };\n-   |                         ^^^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+   |             -           ^^^^ expected one of `,`, `.`, `?`, `}`, or an operator here\n+   |             |\n+   |             while parsing this struct\n \n error[E0063]: missing field `bar` in initializer of `main::S`\n   --> $DIR/removed-syntax-with-1.rs:8:13"}, {"sha": "ee7560017a675b660eabd5eec3b4ec0b05098db7", "filename": "src/test/ui/parser/removed-syntax-with-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-with-2.stderr?ref=b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "patch": "@@ -2,7 +2,9 @@ error: expected one of `,` or `}`, found `a`\n   --> $DIR/removed-syntax-with-2.rs:8:31\n    |\n LL |     let b = S { foo: (), with a };\n-   |                               ^ expected one of `,` or `}` here\n+   |             -                 ^ expected one of `,` or `}` here\n+   |             |\n+   |             while parsing this struct\n \n error[E0425]: cannot find value `with` in this scope\n   --> $DIR/removed-syntax-with-2.rs:8:26"}, {"sha": "58c40b3d96a4973af4ccf42bccd710f69345900a", "filename": "src/test/ui/parser/struct-field-numeric-shorthand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.rs?ref=b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "patch": "@@ -1,6 +1,9 @@\n struct Rgb(u8, u8, u8);\n \n fn main() {\n-    let _ = Rgb { 0, 1, 2 }; //~ ERROR expected identifier, found `0`\n-                             //~| ERROR missing fields `0`, `1`, `2` in initializer of `Rgb`\n+    let _ = Rgb { 0, 1, 2 };\n+    //~^ ERROR expected identifier, found `0`\n+    //~| ERROR expected identifier, found `1`\n+    //~| ERROR expected identifier, found `2`\n+    //~| ERROR missing fields `0`, `1`, `2` in initializer of `Rgb`\n }"}, {"sha": "cfb1f8201475469697bf279cf7b945673ec5cfb1", "filename": "src/test/ui/parser/struct-field-numeric-shorthand.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b1f169fe7a19cf10f70ee2aa2513276185c70e9b/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-field-numeric-shorthand.stderr?ref=b1f169fe7a19cf10f70ee2aa2513276185c70e9b", "patch": "@@ -1,17 +1,33 @@\n error: expected identifier, found `0`\n   --> $DIR/struct-field-numeric-shorthand.rs:4:19\n    |\n-LL |     let _ = Rgb { 0, 1, 2 }; //~ ERROR expected identifier, found `0`\n+LL |     let _ = Rgb { 0, 1, 2 };\n    |             ---   ^ expected identifier\n    |             |\n    |             while parsing this struct\n \n+error: expected identifier, found `1`\n+  --> $DIR/struct-field-numeric-shorthand.rs:4:22\n+   |\n+LL |     let _ = Rgb { 0, 1, 2 };\n+   |             ---      ^ expected identifier\n+   |             |\n+   |             while parsing this struct\n+\n+error: expected identifier, found `2`\n+  --> $DIR/struct-field-numeric-shorthand.rs:4:25\n+   |\n+LL |     let _ = Rgb { 0, 1, 2 };\n+   |             ---         ^ expected identifier\n+   |             |\n+   |             while parsing this struct\n+\n error[E0063]: missing fields `0`, `1`, `2` in initializer of `Rgb`\n   --> $DIR/struct-field-numeric-shorthand.rs:4:13\n    |\n-LL |     let _ = Rgb { 0, 1, 2 }; //~ ERROR expected identifier, found `0`\n+LL |     let _ = Rgb { 0, 1, 2 };\n    |             ^^^ missing `0`, `1`, `2`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0063`."}]}