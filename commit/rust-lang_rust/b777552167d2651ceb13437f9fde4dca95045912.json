{"sha": "b777552167d2651ceb13437f9fde4dca95045912", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Nzc1NTIxNjdkMjY1MWNlYjEzNDM3ZjlmZGU0ZGNhOTUwNDU5MTI=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-12-04T17:32:26Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2020-12-04T18:43:02Z"}, "message": "IntoInnerError: Provide into_error\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "7c44acdebface1ea343769c9293c0a89ce786f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c44acdebface1ea343769c9293c0a89ce786f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b777552167d2651ceb13437f9fde4dca95045912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b777552167d2651ceb13437f9fde4dca95045912", "html_url": "https://github.com/rust-lang/rust/commit/b777552167d2651ceb13437f9fde4dca95045912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b777552167d2651ceb13437f9fde4dca95045912/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c7619dcda902acafa927b0b8511ca8ecce13a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c7619dcda902acafa927b0b8511ca8ecce13a4", "html_url": "https://github.com/rust-lang/rust/commit/19c7619dcda902acafa927b0b8511ca8ecce13a4"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "65497817f8160d55c688275fbd19763cbbe1dd02", "filename": "library/std/src/io/buffered/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b777552167d2651ceb13437f9fde4dca95045912/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b777552167d2651ceb13437f9fde4dca95045912/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fmod.rs?ref=b777552167d2651ceb13437f9fde4dca95045912", "patch": "@@ -127,6 +127,27 @@ impl<W> IntoInnerError<W> {\n         self.0\n     }\n \n+    /// Consumes the [`IntoInnerError`] and returns the error which caused the call to\n+    /// [`BufWriter::into_inner()`] to fail.  Unlike `error`, this can be used to\n+    /// obtain ownership of the underlying error.\n+    ///\n+    /// # Example\n+    /// ```\n+    /// #![feature(io_into_inner_error_parts)]\n+    /// use std::io::{BufWriter, ErrorKind, Write};\n+    ///\n+    /// let mut not_enough_space = [0u8; 10];\n+    /// let mut stream = BufWriter::new(not_enough_space.as_mut());\n+    /// write!(stream, \"this cannot be actually written\").unwrap();\n+    /// let into_inner_err = stream.into_inner().expect_err(\"now we discover it's too small\");\n+    /// let err = into_inner_err.into_error();\n+    /// assert_eq!(err.kind(), ErrorKind::WriteZero);\n+    /// ```\n+    #[unstable(feature = \"io_into_inner_error_parts\", issue = \"79704\")]\n+    pub fn into_error(self) -> Error {\n+        self.1\n+    }\n+\n     /// Consumes the [`IntoInnerError`] and returns the error which caused the call to\n     /// [`BufWriter::into_inner()`] to fail, and the underlying writer.\n     ///"}]}