{"sha": "01e96dc5832b85f87acb1a651e33d12ac9b37cc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTk2ZGM1ODMyYjg1Zjg3YWNiMWE2NTFlMzNkMTJhYzliMzdjYzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T22:40:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-13T22:40:44Z"}, "message": "typeck: extract suggest_fields_on_recordish", "tree": {"sha": "a109f21c8154360900623686a3eaf429ca892dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a109f21c8154360900623686a3eaf429ca892dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e96dc5832b85f87acb1a651e33d12ac9b37cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e96dc5832b85f87acb1a651e33d12ac9b37cc5", "html_url": "https://github.com/rust-lang/rust/commit/01e96dc5832b85f87acb1a651e33d12ac9b37cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e96dc5832b85f87acb1a651e33d12ac9b37cc5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "039c78932564c38c79f08745ab6e02bceb1eb468", "url": "https://api.github.com/repos/rust-lang/rust/commits/039c78932564c38c79f08745ab6e02bceb1eb468", "html_url": "https://github.com/rust-lang/rust/commit/039c78932564c38c79f08745ab6e02bceb1eb468"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "e4582424d0fca8331946e9ab922289c5cad70c17", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/01e96dc5832b85f87acb1a651e33d12ac9b37cc5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e96dc5832b85f87acb1a651e33d12ac9b37cc5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=01e96dc5832b85f87acb1a651e33d12ac9b37cc5", "patch": "@@ -1350,24 +1350,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 match expr_t.sty {\n                     ty::Adt(def, _) if !def.is_enum() => {\n-                        if let Some(suggested_field_name) =\n-                            Self::suggest_field_name(def.non_enum_variant(),\n-                                                     &field.as_str(), vec![]) {\n-                                err.span_suggestion(\n-                                    field.span,\n-                                    \"a field with a similar name exists\",\n-                                    suggested_field_name.to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                            } else {\n-                                err.span_label(field.span, \"unknown field\");\n-                                let struct_variant_def = def.non_enum_variant();\n-                                let field_names = self.available_field_names(struct_variant_def);\n-                                if !field_names.is_empty() {\n-                                    err.note(&format!(\"available fields are: {}\",\n-                                                      self.name_series_display(field_names)));\n-                                }\n-                            };\n+                        self.suggest_fields_on_recordish(&mut err, def, field);\n                     }\n                     ty::Array(_, len) => {\n                         self.maybe_suggest_array_indexing(&mut err, expr, base, field, len);\n@@ -1444,6 +1427,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err.emit();\n     }\n \n+    fn suggest_fields_on_recordish(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        def: &'tcx ty::AdtDef,\n+        field: ast::Ident,\n+    ) {\n+        if let Some(suggested_field_name) =\n+            Self::suggest_field_name(def.non_enum_variant(), &field.as_str(), vec![])\n+        {\n+            err.span_suggestion(\n+                field.span,\n+                \"a field with a similar name exists\",\n+                suggested_field_name.to_string(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        } else {\n+            err.span_label(field.span, \"unknown field\");\n+            let struct_variant_def = def.non_enum_variant();\n+            let field_names = self.available_field_names(struct_variant_def);\n+            if !field_names.is_empty() {\n+                err.note(&format!(\"available fields are: {}\",\n+                                    self.name_series_display(field_names)));\n+            }\n+        }\n+    }\n+\n     fn maybe_suggest_array_indexing(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}]}