{"sha": "2f063cd39487714bd218ea2a23cfae64828a9058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMDYzY2QzOTQ4NzcxNGJkMjE4ZWEyYTIzY2ZhZTY0ODI4YTkwNTg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-09T01:18:39Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-28T01:32:19Z"}, "message": "Don't use `self.date` unconditionally for `program_out_of_date()`\n\nThis avoids unnecessary cache invalidations for programs not affected by\nthe stage0 version (which is everything except the stage0 compiler\nitself).\n\nThe redundant invalidations weren't noticed until now because they only\nshowed up on stage0 bumps, at which point people are used to rebuilding\neverything anyway. I noticed it because I wasn't adding `self.date` to\nthe stamp file (because I didn't realize it was necessary). Rather than\nadding self.date I thought it was better to remove it from the cache\nkey.", "tree": {"sha": "6ce103503b28f2b26775b95f55a1bfa9bf7b2e96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce103503b28f2b26775b95f55a1bfa9bf7b2e96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f063cd39487714bd218ea2a23cfae64828a9058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f063cd39487714bd218ea2a23cfae64828a9058", "html_url": "https://github.com/rust-lang/rust/commit/2f063cd39487714bd218ea2a23cfae64828a9058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f063cd39487714bd218ea2a23cfae64828a9058/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6121ca681e3aef09b93afb13637632dcdc0e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6121ca681e3aef09b93afb13637632dcdc0e9a", "html_url": "https://github.com/rust-lang/rust/commit/dc6121ca681e3aef09b93afb13637632dcdc0e9a"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "45141349796662e5820b93f17edb87ba4b1a80e0", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f063cd39487714bd218ea2a23cfae64828a9058/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/2f063cd39487714bd218ea2a23cfae64828a9058/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=2f063cd39487714bd218ea2a23cfae64828a9058", "patch": "@@ -391,7 +391,7 @@ def download_stage0(self):\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n-                 self.program_out_of_date(self.rustc_stamp())):\n+                 self.program_out_of_date(self.rustc_stamp(), self.date)):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n             tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n@@ -427,7 +427,7 @@ def download_stage0(self):\n                 self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(self.bin_root()))\n                 self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n-                    rustfmt_stamp.write(self.date + self.rustfmt_channel)\n+                    rustfmt_stamp.write(self.rustfmt_channel)\n \n         if self.downloading_llvm():\n             # We want the most recent LLVM submodule update to avoid downloading\n@@ -454,7 +454,7 @@ def download_stage0(self):\n                 for binary in [\"llvm-config\", \"FileCheck\"]:\n                     self.fix_bin_or_dylib(\"{}/bin/{}\".format(self.llvm_root(), binary))\n                 with output(self.llvm_stamp()) as llvm_stamp:\n-                    llvm_stamp.write(self.date + llvm_sha + str(llvm_assertions))\n+                    llvm_stamp.write(llvm_sha + str(llvm_assertions))\n \n     def downloading_llvm(self):\n         opt = self.get_toml('download-ci-llvm', 'llvm')\n@@ -616,12 +616,12 @@ def llvm_stamp(self):\n         return os.path.join(self.llvm_root(), '.llvm-stamp')\n \n \n-    def program_out_of_date(self, stamp_path, extra=\"\"):\n+    def program_out_of_date(self, stamp_path, key):\n         \"\"\"Check if the given program stamp is out of date\"\"\"\n         if not os.path.exists(stamp_path) or self.clean:\n             return True\n         with open(stamp_path, 'r') as stamp:\n-            return (self.date + extra) != stamp.read()\n+            return key != stamp.read()\n \n     def bin_root(self):\n         \"\"\"Return the binary root directory"}, {"sha": "615071141594f12a6d28fcb7db79ed98e93f6f19", "filename": "src/bootstrap/bootstrap_test.py", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f063cd39487714bd218ea2a23cfae64828a9058/src%2Fbootstrap%2Fbootstrap_test.py", "raw_url": "https://github.com/rust-lang/rust/raw/2f063cd39487714bd218ea2a23cfae64828a9058/src%2Fbootstrap%2Fbootstrap_test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap_test.py?ref=2f063cd39487714bd218ea2a23cfae64828a9058", "patch": "@@ -70,6 +70,7 @@ def setUp(self):\n         self.build.build_dir = self.container\n         self.rustc_stamp_path = os.path.join(self.container, \"stage0\",\n                                              \".rustc-stamp\")\n+        self.key = self.build.date + str(None)\n \n     def tearDown(self):\n         rmtree(self.container)\n@@ -78,19 +79,19 @@ def test_stamp_path_does_not_exists(self):\n         \"\"\"Return True when the stamp file does not exists\"\"\"\n         if os.path.exists(self.rustc_stamp_path):\n             os.unlink(self.rustc_stamp_path)\n-        self.assertTrue(self.build.program_out_of_date(self.rustc_stamp_path))\n+        self.assertTrue(self.build.program_out_of_date(self.rustc_stamp_path, self.key))\n \n     def test_dates_are_different(self):\n         \"\"\"Return True when the dates are different\"\"\"\n         with open(self.rustc_stamp_path, \"w\") as rustc_stamp:\n-            rustc_stamp.write(\"2017-06-14\")\n-        self.assertTrue(self.build.program_out_of_date(self.rustc_stamp_path))\n+            rustc_stamp.write(\"2017-06-14None\")\n+        self.assertTrue(self.build.program_out_of_date(self.rustc_stamp_path, self.key))\n \n     def test_same_dates(self):\n         \"\"\"Return False both dates match\"\"\"\n         with open(self.rustc_stamp_path, \"w\") as rustc_stamp:\n-            rustc_stamp.write(\"2017-06-15\")\n-        self.assertFalse(self.build.program_out_of_date(self.rustc_stamp_path))\n+            rustc_stamp.write(\"2017-06-15None\")\n+        self.assertFalse(self.build.program_out_of_date(self.rustc_stamp_path, self.key))\n \n \n if __name__ == '__main__':"}]}