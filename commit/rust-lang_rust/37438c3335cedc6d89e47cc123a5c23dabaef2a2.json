{"sha": "37438c3335cedc6d89e47cc123a5c23dabaef2a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NDM4YzMzMzVjZWRjNmQ4OWU0N2NjMTIzYTVjMjNkYWJhZWYyYTI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-28T21:50:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-29T11:28:47Z"}, "message": "Support 'go to definition' for self", "tree": {"sha": "2655046584291d7da76899c14a14533d7ebcf081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2655046584291d7da76899c14a14533d7ebcf081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37438c3335cedc6d89e47cc123a5c23dabaef2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37438c3335cedc6d89e47cc123a5c23dabaef2a2", "html_url": "https://github.com/rust-lang/rust/commit/37438c3335cedc6d89e47cc123a5c23dabaef2a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37438c3335cedc6d89e47cc123a5c23dabaef2a2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6f26ded0037a3efb5625ac3482a2f4ec9eb01a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f26ded0037a3efb5625ac3482a2f4ec9eb01a3", "html_url": "https://github.com/rust-lang/rust/commit/a6f26ded0037a3efb5625ac3482a2f4ec9eb01a3"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "b9810457fc021629f6fbfe7a5cfcec028e67dc5f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/37438c3335cedc6d89e47cc123a5c23dabaef2a2/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37438c3335cedc6d89e47cc123a5c23dabaef2a2/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=37438c3335cedc6d89e47cc123a5c23dabaef2a2", "patch": "@@ -1,5 +1,6 @@\n use hir::Semantics;\n use ide_db::{\n+    base_db::FileId,\n     defs::{NameClass, NameRefClass},\n     symbol_index, RootDatabase,\n };\n@@ -40,10 +41,17 @@ pub(crate) fn goto_definition(\n                 vec![nav]\n             },\n             ast::SelfParam(self_param) => {\n-                let ty = sema.type_of_self(&self_param)?;\n-                let adt_def = ty.autoderef(db).filter_map(|ty| ty.as_adt()).last()?;\n-                let nav = adt_def.to_nav(db);\n-                vec![nav]\n+                vec![self_to_nav_target(self_param, position.file_id)?]\n+            },\n+            ast::PathSegment(segment) => {\n+                segment.self_token()?;\n+                let path = segment.parent_path();\n+                if path.qualifier().is_some() && !ast::PathExpr::can_cast(path.syntax().parent()?.kind()) {\n+                    return None;\n+                }\n+                let func = segment.syntax().ancestors().find_map(ast::Fn::cast)?;\n+                let self_param = func.param_list()?.self_param()?;\n+                vec![self_to_nav_target(self_param, position.file_id)?]\n             },\n             _ => return None,\n         }\n@@ -63,6 +71,20 @@ fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     }\n }\n \n+fn self_to_nav_target(self_param: ast::SelfParam, file_id: FileId) -> Option<NavigationTarget> {\n+    let self_token = self_param.self_token()?;\n+    Some(NavigationTarget {\n+        file_id,\n+        full_range: self_param.syntax().text_range(),\n+        focus_range: Some(self_token.text_range()),\n+        name: self_token.text().clone(),\n+        kind: self_token.kind(),\n+        container_name: None,\n+        description: None,\n+        docs: None,\n+    })\n+}\n+\n #[derive(Debug)]\n pub(crate) enum ReferenceResult {\n     Exact(NavigationTarget),\n@@ -987,31 +1009,31 @@ fn g() -> <() as Iterator<A = (), B<|> = u8>>::A {}\n     }\n \n     #[test]\n-    fn todo_def_type_for_self() {\n+    fn goto_self_param_ty_specified() {\n         check(\n             r#\"\n struct Foo {}\n-     //^^^\n \n impl Foo {\n-    fn bar(&self<|>) {}\n-}\n-\"#,\n-        );\n+    fn bar(self: &Foo) {\n+         //^^^^\n+        let foo = sel<|>f;\n+    }\n+}\"#,\n+        )\n     }\n \n     #[test]\n-    fn todo_def_type_for_arbitrary_self() {\n+    fn goto_self_param_on_decl() {\n         check(\n             r#\"\n-struct Arc<T>(T);\n-     //^^^\n struct Foo {}\n \n impl Foo {\n-    fn bar(self<|>: Arc<Self>) {}\n-}\n-\"#,\n-        );\n+    fn bar(&self<|>) {\n+          //^^^^\n+    }\n+}\"#,\n+        )\n     }\n }"}]}