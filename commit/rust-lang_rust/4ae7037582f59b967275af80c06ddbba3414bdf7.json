{"sha": "4ae7037582f59b967275af80c06ddbba3414bdf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZTcwMzc1ODJmNTliOTY3Mjc1YWY4MGMwNmRkYmJhMzQxNGJkZjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-23T13:57:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-23T13:57:14Z"}, "message": "Rollup merge of #71396 - DeeDeeG:improve-e0308-again, r=estebank\n\nImprove E0308 error message wording again\n\nHello again,\n\nI recently did this PR: #70242\n\nI felt the error message could be further improved, so I made [a post on the Rust community forum](https://users.rust-lang.org/t/looking-for-feedback-on-an-improved-error-message-for-e0308/40004) to ask for feedback.\n\n(Also, there were some comments on my original PR that I took into consideration as well.)\n\nThis PR is my attempt to take all the feedback into account and propose a better and simplified error message that should still be accurate. Its main benefit is having simpler grammar, and hopefully being easier to read and understand.\n\nThanks to everyone who commented and gave feedback, and thank you for taking a look at this PR.", "tree": {"sha": "0e7e7e76f3e39c9fb5d6fcca86828ae2cc38ff5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7e7e76f3e39c9fb5d6fcca86828ae2cc38ff5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ae7037582f59b967275af80c06ddbba3414bdf7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoZ67CRBK7hj4Ov3rIwAAdHIIAA4zGEPpfme5o3zKk6epVidB\n60Ql3YvLePAJK4zC2QgKMauNX3L3xKkJX8AB3V6CLeT7eyOvYTsFnEVnlwLhrta2\nT/vbT8VxxCYbT7WXhYtOqW3z5uuT4pSFEpU3bqzBpOvxWNLVP42+8QpoUfc4Ccda\nVT8aR0ZP2wUvDZ8yTNQAZq5dk0TvpTbDIzoLHM+ExfEJ92Ht9oyQwDE2Dl9BQzuX\nNlRDk/bqMnPMZQIo3aFxkIo3Yer3pDefdjadsOeoBIRQIAW+H23DOakLuBFmC/Gi\njv3AtsCSJya7CET9miv1dU7DfCgbd4mTzZz1IKrFE51QPRCloq2i58LzXw+kp6Q=\n=gwBZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e7e7e76f3e39c9fb5d6fcca86828ae2cc38ff5e\nparent 629a613faa65344163f922a7e95f6caaddf4ca5e\nparent 57c2712895d547870694fdb3fc0b8a23e68a447f\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587650234 +0200\ncommitter GitHub <noreply@github.com> 1587650234 +0200\n\nRollup merge of #71396 - DeeDeeG:improve-e0308-again, r=estebank\n\nImprove E0308 error message wording again\n\nHello again,\n\nI recently did this PR: #70242\n\nI felt the error message could be further improved, so I made [a post on the Rust community forum](https://users.rust-lang.org/t/looking-for-feedback-on-an-improved-error-message-for-e0308/40004) to ask for feedback.\n\n(Also, there were some comments on my original PR that I took into consideration as well.)\n\nThis PR is my attempt to take all the feedback into account and propose a better and simplified error message that should still be accurate. Its main benefit is having simpler grammar, and hopefully being easier to read and understand.\n\nThanks to everyone who commented and gave feedback, and thank you for taking a look at this PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ae7037582f59b967275af80c06ddbba3414bdf7", "html_url": "https://github.com/rust-lang/rust/commit/4ae7037582f59b967275af80c06ddbba3414bdf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ae7037582f59b967275af80c06ddbba3414bdf7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629a613faa65344163f922a7e95f6caaddf4ca5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/629a613faa65344163f922a7e95f6caaddf4ca5e", "html_url": "https://github.com/rust-lang/rust/commit/629a613faa65344163f922a7e95f6caaddf4ca5e"}, {"sha": "57c2712895d547870694fdb3fc0b8a23e68a447f", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c2712895d547870694fdb3fc0b8a23e68a447f", "html_url": "https://github.com/rust-lang/rust/commit/57c2712895d547870694fdb3fc0b8a23e68a447f"}], "stats": {"total": 81, "additions": 36, "deletions": 45}, "files": [{"sha": "e2c40f03019c1e52db80b89a3aebc0084cf1ede1", "filename": "src/librustc_error_codes/error_codes/E0308.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ae7037582f59b967275af80c06ddbba3414bdf7/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ae7037582f59b967275af80c06ddbba3414bdf7/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md?ref=4ae7037582f59b967275af80c06ddbba3414bdf7", "patch": "@@ -12,8 +12,7 @@ let x: i32 = \"I am not a number!\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred."}, {"sha": "8d3c316e467bddd5183f18057086c890878ce470", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ae7037582f59b967275af80c06ddbba3414bdf7/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ae7037582f59b967275af80c06ddbba3414bdf7/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=4ae7037582f59b967275af80c06ddbba3414bdf7", "patch": "@@ -12,11 +12,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -33,11 +32,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -54,11 +52,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -75,11 +72,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "ed6b583f329d6bef89040819e2ba7af48eb11d22", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4ae7037582f59b967275af80c06ddbba3414bdf7/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ae7037582f59b967275af80c06ddbba3414bdf7/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=4ae7037582f59b967275af80c06ddbba3414bdf7", "patch": "@@ -12,11 +12,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -33,11 +32,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -54,11 +52,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -75,11 +72,10 @@ let x: i32 = \\\"I am not a number!\\\";\n //    type `i32` assigned to variable `x`\n ```\n \n-This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can happen in several cases, the most common being a mismatch\n-between the type that the compiler inferred for a variable based on its\n-initializing expression, on the one hand, and the type the author explicitly\n-assigned to the variable, on the other hand.\n+This error occurs when the compiler is unable to infer the concrete type of a\n+variable. It can occur in several cases, the most common being a mismatch\n+between two types: the type the author explicitly assigned, and the type the\n+compiler inferred.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}]}