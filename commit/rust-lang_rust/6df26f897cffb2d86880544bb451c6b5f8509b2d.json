{"sha": "6df26f897cffb2d86880544bb451c6b5f8509b2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZjI2Zjg5N2NmZmIyZDg2ODgwNTQ0YmI0NTFjNmI1Zjg1MDliMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-20T14:05:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-20T14:05:12Z"}, "message": "Auto merge of #84353 - estebank:as-ref-mir, r=davidtwco\n\nSuggest `.as_ref()` on borrow error involving `Option`/`Result`\n\nWhen encountering a E0382 borrow error involving an `Option` or `Result`\nprovide a suggestion to use `.as_ref()` on the prior move location to\navoid the move.\n\nFix #84165.", "tree": {"sha": "b0ebb5db69172b0281da1996110317c09402145f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0ebb5db69172b0281da1996110317c09402145f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6df26f897cffb2d86880544bb451c6b5f8509b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6df26f897cffb2d86880544bb451c6b5f8509b2d", "html_url": "https://github.com/rust-lang/rust/commit/6df26f897cffb2d86880544bb451c6b5f8509b2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6df26f897cffb2d86880544bb451c6b5f8509b2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d0132ae90757af425a26a3d69c4d579b9b110a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d0132ae90757af425a26a3d69c4d579b9b110a6", "html_url": "https://github.com/rust-lang/rust/commit/7d0132ae90757af425a26a3d69c4d579b9b110a6"}, {"sha": "2763a0541cc8293a8fd1ac65fdc3b2977106a0a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2763a0541cc8293a8fd1ac65fdc3b2977106a0a0", "html_url": "https://github.com/rust-lang/rust/commit/2763a0541cc8293a8fd1ac65fdc3b2977106a0a0"}], "stats": {"total": 196, "additions": 134, "deletions": 62}, "files": [{"sha": "9f19a474ca38bdf9809915f61590294211d4a9cb", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6df26f897cffb2d86880544bb451c6b5f8509b2d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df26f897cffb2d86880544bb451c6b5f8509b2d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=6df26f897cffb2d86880544bb451c6b5f8509b2d", "patch": "@@ -197,7 +197,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 );\n                             }\n                         }\n-                        FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n+                        FnSelfUseKind::Normal {\n+                            self_arg,\n+                            implicit_into_iter,\n+                            is_option_or_result,\n+                        } => {\n                             if implicit_into_iter {\n                                 err.span_label(\n                                     fn_call_span,\n@@ -215,6 +219,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                     ),\n                                 );\n                             }\n+                            if is_option_or_result {\n+                                err.span_suggestion_verbose(\n+                                    fn_call_span.shrink_to_lo(),\n+                                    \"consider calling `.as_ref()` to borrow the type's contents\",\n+                                    \"as_ref().\".to_string(),\n+                                    Applicability::MachineApplicable,\n+                                );\n+                            }\n                             // Avoid pointing to the same function in multiple different\n                             // error messages.\n                             if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span)"}, {"sha": "aa9f18d99962892334fb16c6bcbcb466b15094b7", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6df26f897cffb2d86880544bb451c6b5f8509b2d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df26f897cffb2d86880544bb451c6b5f8509b2d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=6df26f897cffb2d86880544bb451c6b5f8509b2d", "patch": "@@ -573,7 +573,13 @@ pub(super) enum UseSpans<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub(super) enum FnSelfUseKind<'tcx> {\n     /// A normal method call of the form `receiver.foo(a, b, c)`\n-    Normal { self_arg: Ident, implicit_into_iter: bool },\n+    Normal {\n+        self_arg: Ident,\n+        implicit_into_iter: bool,\n+        /// Whether the self type of the method call has an `.as_ref()` method.\n+        /// Used for better diagnostics.\n+        is_option_or_result: bool,\n+    },\n     /// A call to `FnOnce::call_once`, desugared from `my_closure(a, b, c)`\n     FnOnceCall,\n     /// A call to an operator trait, desuraged from operator syntax (e.g. `a << b`)\n@@ -900,7 +906,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     fn_call_span.desugaring_kind(),\n                     Some(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n                 );\n-                FnSelfUseKind::Normal { self_arg, implicit_into_iter }\n+                let parent_self_ty = parent\n+                    .filter(|did| tcx.def_kind(*did) == rustc_hir::def::DefKind::Impl)\n+                    .and_then(|did| match tcx.type_of(did).kind() {\n+                        ty::Adt(def, ..) => Some(def.did),\n+                        _ => None,\n+                    });\n+                let is_option_or_result = parent_self_ty.map_or(false, |def_id| {\n+                    tcx.is_diagnostic_item(sym::option_type, def_id)\n+                        || tcx.is_diagnostic_item(sym::result_type, def_id)\n+                });\n+                FnSelfUseKind::Normal { self_arg, implicit_into_iter, is_option_or_result }\n             });\n \n             return FnSelfUse {"}, {"sha": "13bbb233f39862ac5bd81da29f1f47b4632e8cba", "filename": "src/test/ui/suggestions/as-ref-2.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.fixed?ref=6df26f897cffb2d86880544bb451c6b5f8509b2d", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+struct Struct;\n+\n+fn bar(_: &Struct) -> Struct {\n+    Struct\n+}\n+\n+fn main() {\n+    let foo = Some(Struct);\n+    let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));\n+    let _y = foo; //~ERROR use of moved value: `foo`\n+}"}, {"sha": "74d61cdd95f8d8c9642d8f8c6d46026f32e3f832", "filename": "src/test/ui/suggestions/as-ref-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.rs?ref=6df26f897cffb2d86880544bb451c6b5f8509b2d", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+struct Struct;\n+\n+fn bar(_: &Struct) -> Struct {\n+    Struct\n+}\n+\n+fn main() {\n+    let foo = Some(Struct);\n+    let _x: Option<Struct> = foo.map(|s| bar(&s));\n+    let _y = foo; //~ERROR use of moved value: `foo`\n+}"}, {"sha": "f2eddf2fb098eab4a109f437c3d09440960c02ec", "filename": "src/test/ui/suggestions/as-ref-2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref-2.stderr?ref=6df26f897cffb2d86880544bb451c6b5f8509b2d", "patch": "@@ -0,0 +1,23 @@\n+error[E0382]: use of moved value: `foo`\n+  --> $DIR/as-ref-2.rs:12:14\n+   |\n+LL |     let foo = Some(Struct);\n+   |         --- move occurs because `foo` has type `Option<Struct>`, which does not implement the `Copy` trait\n+LL |     let _x: Option<Struct> = foo.map(|s| bar(&s));\n+   |                                  ---------------- `foo` moved due to this method call\n+LL |     let _y = foo;\n+   |              ^^^ value used here after move\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `foo`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {\n+   |                                      ^^^^\n+help: consider calling `.as_ref()` to borrow the type's contents\n+   |\n+LL |     let _x: Option<Struct> = foo.as_ref().map(|s| bar(&s));\n+   |                                  ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "46d9461538c7857a5aad9fa33e1c41c4168f679c", "filename": "src/test/ui/suggestions/as-ref.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.rs?ref=6df26f897cffb2d86880544bb451c6b5f8509b2d", "patch": "@@ -1,25 +1,20 @@\n struct Foo;\n+\n fn takes_ref(_: &Foo) {}\n \n fn main() {\n-  let ref opt = Some(Foo);\n-  opt.map(|arg| takes_ref(arg));\n-  //~^ ERROR mismatched types [E0308]\n-  opt.and_then(|arg| Some(takes_ref(arg)));\n-  //~^ ERROR mismatched types [E0308]\n-  let ref opt: Result<_, ()> = Ok(Foo);\n-  opt.map(|arg| takes_ref(arg));\n-  //~^ ERROR mismatched types [E0308]\n-  opt.and_then(|arg| Ok(takes_ref(arg)));\n-  //~^ ERROR mismatched types [E0308]\n-  let x: &Option<usize> = &Some(3);\n-  let y: Option<&usize> = x;\n-  //~^ ERROR mismatched types [E0308]\n-  let x: &Result<usize, usize> = &Ok(3);\n-  let y: Result<&usize, &usize> = x;\n-  //~^ ERROR mismatched types [E0308]\n-  // note: do not suggest because of `E: usize`\n-  let x: &Result<usize, usize> = &Ok(3);\n-  let y: Result<&usize, usize> = x;\n-  //~^ ERROR mismatched types [E0308]\n+    let ref opt = Some(Foo);\n+    opt.map(|arg| takes_ref(arg)); //~ ERROR mismatched types [E0308]\n+    opt.and_then(|arg| Some(takes_ref(arg))); //~ ERROR mismatched types [E0308]\n+    let ref opt: Result<_, ()> = Ok(Foo);\n+    opt.map(|arg| takes_ref(arg)); //~ ERROR mismatched types [E0308]\n+    opt.and_then(|arg| Ok(takes_ref(arg))); //~ ERROR mismatched types [E0308]\n+    let x: &Option<usize> = &Some(3);\n+    let y: Option<&usize> = x; //~ ERROR mismatched types [E0308]\n+    let x: &Result<usize, usize> = &Ok(3);\n+    let y: Result<&usize, &usize> = x;\n+    //~^ ERROR mismatched types [E0308]\n+    // note: do not suggest because of `E: usize`\n+    let x: &Result<usize, usize> = &Ok(3);\n+    let y: Result<&usize, usize> = x; //~ ERROR mismatched types [E0308]\n }"}, {"sha": "dc5d7efd752cfd0ba65be033b8d6ca0c51aef9c3", "filename": "src/test/ui/suggestions/as-ref.stderr", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6df26f897cffb2d86880544bb451c6b5f8509b2d/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fas-ref.stderr?ref=6df26f897cffb2d86880544bb451c6b5f8509b2d", "patch": "@@ -1,70 +1,70 @@\n error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:6:27\n+  --> $DIR/as-ref.rs:7:29\n    |\n-LL |   opt.map(|arg| takes_ref(arg));\n-   |       ---                 ^^^ expected `&Foo`, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().map`\n+LL |     opt.map(|arg| takes_ref(arg));\n+   |         ---                 ^^^ expected `&Foo`, found struct `Foo`\n+   |         |\n+   |         help: consider using `as_ref` instead: `as_ref().map`\n \n error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:8:37\n+  --> $DIR/as-ref.rs:8:39\n    |\n-LL |   opt.and_then(|arg| Some(takes_ref(arg)));\n-   |       --------                      ^^^ expected `&Foo`, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().and_then`\n+LL |     opt.and_then(|arg| Some(takes_ref(arg)));\n+   |         --------                      ^^^ expected `&Foo`, found struct `Foo`\n+   |         |\n+   |         help: consider using `as_ref` instead: `as_ref().and_then`\n \n error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:11:27\n+  --> $DIR/as-ref.rs:10:29\n    |\n-LL |   opt.map(|arg| takes_ref(arg));\n-   |       ---                 ^^^ expected `&Foo`, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().map`\n+LL |     opt.map(|arg| takes_ref(arg));\n+   |         ---                 ^^^ expected `&Foo`, found struct `Foo`\n+   |         |\n+   |         help: consider using `as_ref` instead: `as_ref().map`\n \n error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:13:35\n+  --> $DIR/as-ref.rs:11:37\n    |\n-LL |   opt.and_then(|arg| Ok(takes_ref(arg)));\n-   |       --------                    ^^^ expected `&Foo`, found struct `Foo`\n-   |       |\n-   |       help: consider using `as_ref` instead: `as_ref().and_then`\n+LL |     opt.and_then(|arg| Ok(takes_ref(arg)));\n+   |         --------                    ^^^ expected `&Foo`, found struct `Foo`\n+   |         |\n+   |         help: consider using `as_ref` instead: `as_ref().and_then`\n \n error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:16:27\n+  --> $DIR/as-ref.rs:13:29\n    |\n-LL |   let y: Option<&usize> = x;\n-   |          --------------   ^\n-   |          |                |\n-   |          |                expected enum `Option`, found `&Option<usize>`\n-   |          |                help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `x.as_ref()`\n-   |          expected due to this\n+LL |     let y: Option<&usize> = x;\n+   |            --------------   ^\n+   |            |                |\n+   |            |                expected enum `Option`, found `&Option<usize>`\n+   |            |                help: you can convert from `&Option<T>` to `Option<&T>` using `.as_ref()`: `x.as_ref()`\n+   |            expected due to this\n    |\n    = note:   expected enum `Option<&usize>`\n            found reference `&Option<usize>`\n \n error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:19:35\n+  --> $DIR/as-ref.rs:15:37\n    |\n-LL |   let y: Result<&usize, &usize> = x;\n-   |          ----------------------   ^ expected enum `Result`, found reference\n-   |          |\n-   |          expected due to this\n+LL |     let y: Result<&usize, &usize> = x;\n+   |            ----------------------   ^ expected enum `Result`, found reference\n+   |            |\n+   |            expected due to this\n    |\n    = note:   expected enum `Result<&usize, &usize>`\n            found reference `&Result<usize, usize>`\n help: you can convert from `&Result<T, E>` to `Result<&T, &E>` using `.as_ref()`\n    |\n-LL |   let y: Result<&usize, &usize> = x.as_ref();\n-   |                                   ^^^^^^^^^^\n+LL |     let y: Result<&usize, &usize> = x.as_ref();\n+   |                                     ^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/as-ref.rs:23:34\n+  --> $DIR/as-ref.rs:19:36\n    |\n-LL |   let y: Result<&usize, usize> = x;\n-   |          ---------------------   ^ expected enum `Result`, found reference\n-   |          |\n-   |          expected due to this\n+LL |     let y: Result<&usize, usize> = x;\n+   |            ---------------------   ^ expected enum `Result`, found reference\n+   |            |\n+   |            expected due to this\n    |\n    = note:   expected enum `Result<&usize, usize>`\n            found reference `&Result<usize, usize>`"}]}