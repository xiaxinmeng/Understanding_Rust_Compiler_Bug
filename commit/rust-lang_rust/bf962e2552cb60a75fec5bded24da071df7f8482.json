{"sha": "bf962e2552cb60a75fec5bded24da071df7f8482", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOTYyZTI1NTJjYjYwYTc1ZmVjNWJkZWQyNGRhMDcxZGY3Zjg0ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-26T14:30:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-26T14:30:26Z"}, "message": "Auto merge of #54626 - alexcrichton:dwarf-generics, r=michaelwoerister\n\nrustc: Tweak filenames encoded into metadata\n\nThis commit is a fix for #54408 where on nightly right now whenever\ngenerics are inlined the path name listed for the inlined function's\ndebuginfo is a relative path to the cwd, which surely doesn't exist!\nPreviously on beta/stable the debuginfo mentioned an absolute path which\nstill didn't exist, but more predictably didn't exist.\n\nThe change between stable/nightly is that nightly is now compiled with\n`--remap-path-prefix` to give a deterministic prefix to all\nrustc-generated paths in debuginfo. By using `--remap-path-prefix` the\nprevious logic would recognize that the cwd was remapped, causing the\noriginal relative path name of the standard library to get emitted. If\n`--remap-path-prefix` *wasn't* passed in then the logic would create an\nabsolute path name and then create a new source file entry.\n\nThe fix in this commit is to apply the \"recreate the source file entry\nwith an absolute path\" logic a bit more aggresively. If the source\nfile's name was remapped then we don't touch it, but otherwise we always\ntake the working dir (which may have been remapped) and then join it to\nthe file to ensure that we process all relative file names as well.\n\nThe end result is that the standard library should have an absolute path\nfor all file names in debuginfo (using our `--remap-path-prefix`\nargument) as it does on stable after this patch.\n\nCloses #54408", "tree": {"sha": "1cf819d9dd042cf3b2acd52e014cc771ce33be08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cf819d9dd042cf3b2acd52e014cc771ce33be08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf962e2552cb60a75fec5bded24da071df7f8482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf962e2552cb60a75fec5bded24da071df7f8482", "html_url": "https://github.com/rust-lang/rust/commit/bf962e2552cb60a75fec5bded24da071df7f8482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf962e2552cb60a75fec5bded24da071df7f8482/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "694cf752988728ba5da85c36c2deaeefeb49c05e", "url": "https://api.github.com/repos/rust-lang/rust/commits/694cf752988728ba5da85c36c2deaeefeb49c05e", "html_url": "https://github.com/rust-lang/rust/commit/694cf752988728ba5da85c36c2deaeefeb49c05e"}, {"sha": "63c471e10227944268ddf67973a584d68e314a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c471e10227944268ddf67973a584d68e314a8d", "html_url": "https://github.com/rust-lang/rust/commit/63c471e10227944268ddf67973a584d68e314a8d"}], "stats": {"total": 83, "additions": 59, "deletions": 24}, "files": [{"sha": "a855c947078806567cb9bb0480825d87bb930ee0", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bf962e2552cb60a75fec5bded24da071df7f8482/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf962e2552cb60a75fec5bded24da071df7f8482/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=bf962e2552cb60a75fec5bded24da071df7f8482", "patch": "@@ -340,7 +340,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let source_map = self.tcx.sess.source_map();\n         let all_source_files = source_map.files();\n \n-        let (working_dir, working_dir_was_remapped) = self.tcx.sess.working_dir.clone();\n+        let (working_dir, _cwd_remapped) = self.tcx.sess.working_dir.clone();\n \n         let adapted = all_source_files.iter()\n             .filter(|source_file| {\n@@ -349,32 +349,26 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 !source_file.is_imported()\n             })\n             .map(|source_file| {\n-                // When exporting SourceFiles, we expand all paths to absolute\n-                // paths because any relative paths are potentially relative to\n-                // a wrong directory.\n-                // However, if a path has been modified via\n-                // `--remap-path-prefix` we assume the user has already set\n-                // things up the way they want and don't touch the path values\n-                // anymore.\n                 match source_file.name {\n+                    // This path of this SourceFile has been modified by\n+                    // path-remapping, so we use it verbatim (and avoid\n+                    // cloning the whole map in the process).\n+                    _  if source_file.name_was_remapped => source_file.clone(),\n+\n+                    // Otherwise expand all paths to absolute paths because\n+                    // any relative paths are potentially relative to a\n+                    // wrong directory.\n                     FileName::Real(ref name) => {\n-                        if source_file.name_was_remapped ||\n-                        (name.is_relative() && working_dir_was_remapped) {\n-                            // This path of this SourceFile has been modified by\n-                            // path-remapping, so we use it verbatim (and avoid cloning\n-                            // the whole map in the process).\n-                            source_file.clone()\n-                        } else {\n-                            let mut adapted = (**source_file).clone();\n-                            adapted.name = Path::new(&working_dir).join(name).into();\n-                            adapted.name_hash = {\n-                                let mut hasher: StableHasher<u128> = StableHasher::new();\n-                                adapted.name.hash(&mut hasher);\n-                                hasher.finish()\n-                            };\n-                            Lrc::new(adapted)\n-                        }\n+                        let mut adapted = (**source_file).clone();\n+                        adapted.name = Path::new(&working_dir).join(name).into();\n+                        adapted.name_hash = {\n+                            let mut hasher: StableHasher<u128> = StableHasher::new();\n+                            adapted.name.hash(&mut hasher);\n+                            hasher.finish()\n+                        };\n+                        Lrc::new(adapted)\n                     },\n+\n                     // expanded code, not from a file\n                     _ => source_file.clone(),\n                 }"}, {"sha": "6c477a407812af5961ef8fd1cb6a847ecbc7a2ae", "filename": "src/test/codegen/remap_path_prefix/auxiliary/xcrate-generic.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf962e2552cb60a75fec5bded24da071df7f8482/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf962e2552cb60a75fec5bded24da071df7f8482/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fauxiliary%2Fxcrate-generic.rs?ref=bf962e2552cb60a75fec5bded24da071df7f8482", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags: -g  --remap-path-prefix={{cwd}}=/the/aux-cwd --remap-path-prefix={{src-base}}/remap_path_prefix/auxiliary=/the/aux-src\n+\n+#![crate_type = \"lib\"]\n+\n+pub fn foo<T>() {}"}, {"sha": "f206df9813165ab2f32deb45ce9d2d7e2d4a9c30", "filename": "src/test/codegen/remap_path_prefix/xcrate-generic.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bf962e2552cb60a75fec5bded24da071df7f8482/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf962e2552cb60a75fec5bded24da071df7f8482/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fremap_path_prefix%2Fxcrate-generic.rs?ref=bf962e2552cb60a75fec5bded24da071df7f8482", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-windows\n+// ignore-tidy-linelength\n+// compile-flags: -g -C metadata=foo -C no-prepopulate-passes\n+// aux-build:xcrate-generic.rs\n+\n+#![crate_type = \"lib\"]\n+\n+extern crate xcrate_generic;\n+\n+pub fn foo() {\n+    xcrate_generic::foo::<u32>();\n+}\n+\n+// Here we check that local debuginfo is mapped correctly.\n+// CHECK: !DIFile(filename: \"/the/aux-src/xcrate-generic.rs\", directory: \"\")"}]}