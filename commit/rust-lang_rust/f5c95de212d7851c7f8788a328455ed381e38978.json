{"sha": "f5c95de212d7851c7f8788a328455ed381e38978", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1Yzk1ZGUyMTJkNzg1MWM3Zjg3ODhhMzI4NDU1ZWQzODFlMzg5Nzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-07T03:23:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-07T03:23:38Z"}, "message": "docs: Edit the into bullets", "tree": {"sha": "b1ea7ccf8baa19fdf10cf80a2d27d449818b69f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ea7ccf8baa19fdf10cf80a2d27d449818b69f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c95de212d7851c7f8788a328455ed381e38978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c95de212d7851c7f8788a328455ed381e38978", "html_url": "https://github.com/rust-lang/rust/commit/f5c95de212d7851c7f8788a328455ed381e38978", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c95de212d7851c7f8788a328455ed381e38978/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "035cfcbe7218018c1bab29a987ee1152ccd1dcf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/035cfcbe7218018c1bab29a987ee1152ccd1dcf7", "html_url": "https://github.com/rust-lang/rust/commit/035cfcbe7218018c1bab29a987ee1152ccd1dcf7"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "37b0b722eaa803d1135b562b7c28627f384a3bc8", "filename": "doc/tutorial.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f5c95de212d7851c7f8788a328455ed381e38978/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/f5c95de212d7851c7f8788a328455ed381e38978/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=f5c95de212d7851c7f8788a328455ed381e38978", "patch": "@@ -15,21 +15,17 @@ As a multi-paradigm language, Rust supports writing code in\n procedural, functional and object-oriented styles. Some of its\n pleasant high-level features include:\n \n-* **Pattern matching and algebraic data types (enums).** As\n-  popularized by functional languages, pattern matching on ADTs\n-  provides a compact and expressive way to encode program logic.\n-* **Type inference.** Type annotations on local variable\n-  declarations are optional.\n-* **Task-based concurrency.** Rust uses lightweight tasks that do\n-  not share memory.\n-* **Higher-order functions.** Rust's efficient and flexible closures\n-  are heavily relied on to provide iteration and other control\n-  structures\n-* **Parametric polymorphism (generics).** Functions and types can be\n-  parameterized over type variables with optional trait-based type\n-  constraints.\n-* **Trait polymorphism.** Rust's type system features a unique\n-  combination of type classes and object-oriented interfaces.\n+* **Type inference.** Type annotations on local variable declarations\n+  are optional.\n+* **Safe task-based concurrency.** Rust's lightweight tasks do not share\n+  memory and communicate through messages.\n+* **Higher-order functions.** Efficient and flexible closures provide\n+  iteration and other control structures\n+* **Pattern matching and algebraic data types.** Pattern matching on\n+  Rust's enums is a compact and expressive way to encode program\n+  logic.\n+* **Polymorphism.** Rust has type-parameric functions and\n+  types, type classes and OO-style interfaces.\n \n ## Scope\n "}]}