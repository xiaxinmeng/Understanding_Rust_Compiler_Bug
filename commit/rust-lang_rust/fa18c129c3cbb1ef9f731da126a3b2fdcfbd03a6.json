{"sha": "fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMThjMTI5YzNjYmIxZWY5ZjczMWRhMTI2YTNiMmZkY2ZiZDAzYTY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-21T13:47:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Add `next_int_var` and `next_float_var`", "tree": {"sha": "4b45df905dd06e7d516a88946880faf79584ff36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b45df905dd06e7d516a88946880faf79584ff36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "html_url": "https://github.com/rust-lang/rust/commit/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4", "html_url": "https://github.com/rust-lang/rust/commit/f9d8bb8e2cb9a8ce7f8663c0a114cbc1a81209d4"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "39b84fabff6fbe38ba58577dd018bd9a146990e7", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "patch": "@@ -360,9 +360,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                         )\n                     }\n \n-                    CanonicalTyVarKind::Int => self.tcx.mk_int_var(self.next_int_var_id()),\n+                    CanonicalTyVarKind::Int => self.next_int_var(),\n \n-                    CanonicalTyVarKind::Float => self.tcx.mk_float_var(self.next_float_var_id()),\n+                    CanonicalTyVarKind::Float => self.next_float_var(),\n                 };\n                 ty.into()\n             }"}, {"sha": "ba9100bc4f7a77e10d83ac5fb27408b4d49fcfca", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "patch": "@@ -149,14 +149,14 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n             }\n             ty::Infer(ty::InferTy::IntVar(vid)) => {\n                 if self.int_vars.contains(&vid) {\n-                    self.infcx.tcx.mk_int_var(self.infcx.next_int_var_id())\n+                    self.infcx.next_int_var()\n                 } else {\n                     ty\n                 }\n             }\n             ty::Infer(ty::InferTy::FloatVar(vid)) => {\n                 if self.float_vars.contains(&vid) {\n-                    self.infcx.tcx.mk_float_var(self.infcx.next_float_var_id())\n+                    self.infcx.next_float_var()\n                 } else {\n                     ty\n                 }"}, {"sha": "16140d006bf0981eb5803f67afb29f11aef2bec2", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "patch": "@@ -999,14 +999,22 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.mk_ty_var(self.next_ty_var_id(true, origin))\n     }\n \n-    pub fn next_int_var_id(&self) -> IntVid {\n+    fn next_int_var_id(&self) -> IntVid {\n         self.int_unification_table.borrow_mut().new_key(None)\n     }\n \n-    pub fn next_float_var_id(&self) -> FloatVid {\n+    pub fn next_int_var(&self) -> Ty<'tcx> {\n+        self.tcx.mk_int_var(self.next_int_var_id())\n+    }\n+\n+    fn next_float_var_id(&self) -> FloatVid {\n         self.float_unification_table.borrow_mut().new_key(None)\n     }\n \n+    pub fn next_float_var(&self) -> Ty<'tcx> {\n+        self.tcx.mk_float_var(self.next_float_var_id())\n+    }\n+\n     /// Creates a fresh region variable with the next available index.\n     /// The variable will be created in the maximum universe created\n     /// thus far, allowing it to name any region created thus far."}, {"sha": "7a554605232cee4540df74a0bb7a78ba117c652e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=fa18c129c3cbb1ef9f731da126a3b2fdcfbd03a6", "patch": "@@ -3097,8 +3097,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         _ => None\n                     }\n                 });\n-                opt_ty.unwrap_or_else(\n-                    || tcx.mk_int_var(self.next_int_var_id()))\n+                opt_ty.unwrap_or_else(|| self.next_int_var())\n             }\n             ast::LitKind::Float(_, t) => tcx.mk_mach_float(t),\n             ast::LitKind::FloatUnsuffixed(_) => {\n@@ -3108,8 +3107,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         _ => None\n                     }\n                 });\n-                opt_ty.unwrap_or_else(\n-                    || tcx.mk_float_var(self.next_float_var_id()))\n+                opt_ty.unwrap_or_else(|| self.next_float_var())\n             }\n             ast::LitKind::Bool(_) => tcx.types.bool,\n             ast::LitKind::Err(_) => tcx.types.err,"}]}