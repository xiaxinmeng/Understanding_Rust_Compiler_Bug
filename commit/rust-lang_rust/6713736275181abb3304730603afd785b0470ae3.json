{"sha": "6713736275181abb3304730603afd785b0470ae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTM3MzYyNzUxODFhYmIzMzA0NzMwNjAzYWZkNzg1YjA0NzBhZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-31T05:03:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-31T05:03:25Z"}, "message": "Auto merge of #45551 - michaelwoerister:fix-hir-depnodes-and-ich, r=nikomatsakis\n\nincr.comp.: Fix two problems with HIR hashing.\n\nFixes https://github.com/rust-lang/rust/issues/45469.\n\nThis PR fixes two small problems:\n* Overflow checks are always enabled in a constant context, so we need to hash spans of potentially overflowing operations. (Eventually I'd like to handle spans differently so we don't have to make HIR hashing know so much about things like this.)\n* The HIR map collector had a bug where it would assign the `DepNode::Hir` instead of the corresponding `DepNode::HirBody` in some nested contexts.\n\nr? @nikomatsakis", "tree": {"sha": "e9e12482147b4e3f11e4030954f8798b86b45526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e12482147b4e3f11e4030954f8798b86b45526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6713736275181abb3304730603afd785b0470ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6713736275181abb3304730603afd785b0470ae3", "html_url": "https://github.com/rust-lang/rust/commit/6713736275181abb3304730603afd785b0470ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6713736275181abb3304730603afd785b0470ae3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57c55d54d2bf90c16854a03b9a1c35d676e532d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57c55d54d2bf90c16854a03b9a1c35d676e532d", "html_url": "https://github.com/rust-lang/rust/commit/f57c55d54d2bf90c16854a03b9a1c35d676e532d"}, {"sha": "10ffff8bc6f073ffe1342ca3fef229cec0d98693", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ffff8bc6f073ffe1342ca3fef229cec0d98693", "html_url": "https://github.com/rust-lang/rust/commit/10ffff8bc6f073ffe1342ca3fef229cec0d98693"}], "stats": {"total": 161, "additions": 111, "deletions": 50}, "files": [{"sha": "2f4b62dcbf7824730dcc1b8f2ad1ef111e4271aa", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6713736275181abb3304730603afd785b0470ae3/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6713736275181abb3304730603afd785b0470ae3/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=6713736275181abb3304730603afd785b0470ae3", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                                                  f: F) {\n         let prev_owner = self.current_dep_node_owner;\n         let prev_signature_dep_index = self.current_signature_dep_index;\n-        let prev_full_dep_index = self.current_signature_dep_index;\n+        let prev_full_dep_index = self.current_full_dep_index;\n         let prev_in_body = self.currently_in_body;\n \n         let def_path_hash = self.definitions.def_path_hash(dep_node_owner);"}, {"sha": "f46540114f75058e324bebe9f1ee150b4740382a", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6713736275181abb3304730603afd785b0470ae3/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6713736275181abb3304730603afd785b0470ae3/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=6713736275181abb3304730603afd785b0470ae3", "patch": "@@ -206,9 +206,10 @@ impl<'gcx> StableHashingContext<'gcx> {\n \n     pub fn hash_hir_item_like<F: FnOnce(&mut Self)>(&mut self,\n                                                     item_attrs: &[ast::Attribute],\n+                                                    is_const: bool,\n                                                     f: F) {\n         let prev_overflow_checks = self.overflow_checks_enabled;\n-        if attr::contains_name(item_attrs, \"rustc_inherit_overflow_checks\") {\n+        if is_const || attr::contains_name(item_attrs, \"rustc_inherit_overflow_checks\") {\n             self.overflow_checks_enabled = true;\n         }\n         let prev_hash_node_ids = self.node_id_hashing_mode;"}, {"sha": "5a36c42046244e47b7204a62e50281893b287714", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6713736275181abb3304730603afd785b0470ae3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6713736275181abb3304730603afd785b0470ae3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=6713736275181abb3304730603afd785b0470ae3", "patch": "@@ -713,7 +713,15 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::TraitItem {\n             span\n         } = *self;\n \n-        hcx.hash_hir_item_like(attrs, |hcx| {\n+        let is_const = match *node {\n+            hir::TraitItemKind::Const(..) |\n+            hir::TraitItemKind::Type(..) => true,\n+            hir::TraitItemKind::Method(hir::MethodSig { constness, .. }, _) => {\n+                constness == hir::Constness::Const\n+            }\n+        };\n+\n+        hcx.hash_hir_item_like(attrs, is_const, |hcx| {\n             name.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n             generics.hash_stable(hcx, hasher);\n@@ -750,7 +758,15 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::ImplItem {\n             span\n         } = *self;\n \n-        hcx.hash_hir_item_like(attrs, |hcx| {\n+        let is_const = match *node {\n+            hir::ImplItemKind::Const(..) |\n+            hir::ImplItemKind::Type(..) => true,\n+            hir::ImplItemKind::Method(hir::MethodSig { constness, .. }, _) => {\n+                constness == hir::Constness::Const\n+            }\n+        };\n+\n+        hcx.hash_hir_item_like(attrs, is_const, |hcx| {\n             name.hash_stable(hcx, hasher);\n             vis.hash_stable(hcx, hasher);\n             defaultness.hash_stable(hcx, hasher);\n@@ -869,11 +885,13 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Item {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        let hash_spans = match self.node {\n+        let (is_const, hash_spans) = match self.node {\n             hir::ItemStatic(..)      |\n-            hir::ItemConst(..)       |\n-            hir::ItemFn(..)          => {\n-                hcx.hash_spans()\n+            hir::ItemConst(..)       => {\n+                (true, hcx.hash_spans())\n+            }\n+            hir::ItemFn(_, _, constness, ..) => {\n+                (constness == hir::Constness::Const, hcx.hash_spans())\n             }\n             hir::ItemUse(..)         |\n             hir::ItemExternCrate(..) |\n@@ -887,7 +905,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Item {\n             hir::ItemEnum(..)        |\n             hir::ItemStruct(..)      |\n             hir::ItemUnion(..)       => {\n-                false\n+                (false, false)\n             }\n         };\n \n@@ -901,7 +919,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Item {\n             span\n         } = *self;\n \n-        hcx.hash_hir_item_like(attrs, |hcx| {\n+        hcx.hash_hir_item_like(attrs, is_const, |hcx| {\n             hcx.while_hashing_spans(hash_spans, |hcx| {\n                 name.hash_stable(hcx, hasher);\n                 attrs.hash_stable(hcx, hasher);"}, {"sha": "65acfb82da66fa9052971924d93e724710584f6e", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6713736275181abb3304730603afd785b0470ae3/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6713736275181abb3304730603afd785b0470ae3/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=6713736275181abb3304730603afd785b0470ae3", "patch": "@@ -62,48 +62,54 @@ const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n \n // Change value between simple literals ---------------------------------------\n-#[cfg(cfail1)]\n-const CONST_CHANGE_VALUE_1: i16 = 1;\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-const CONST_CHANGE_VALUE_1: i16 = 2;\n+const CONST_CHANGE_VALUE_1: i16 = {\n+    #[cfg(cfail1)]\n+    { 1 }\n \n+    #[cfg(not(cfail1))]\n+    { 2 }\n+};\n \n-// Change value between expressions -------------------------------------------\n-#[cfg(cfail1)]\n-const CONST_CHANGE_VALUE_2: i16 = 1 + 1;\n \n-#[cfg(not(cfail1))]\n+// Change value between expressions -------------------------------------------\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-const CONST_CHANGE_VALUE_2: i16 = 1 + 2;\n-\n+const CONST_CHANGE_VALUE_2: i16 = {\n+    #[cfg(cfail1)]\n+    { 1 + 1 }\n \n-#[cfg(cfail1)]\n-const CONST_CHANGE_VALUE_3: i16 = 2 + 3;\n+    #[cfg(not(cfail1))]\n+    { 1 + 2 }\n+};\n \n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-const CONST_CHANGE_VALUE_3: i16 = 2 * 3;\n-\n+const CONST_CHANGE_VALUE_3: i16 = {\n+    #[cfg(cfail1)]\n+    { 2 + 3 }\n \n-#[cfg(cfail1)]\n-const CONST_CHANGE_VALUE_4: i16 = 1 + 2 * 3;\n+    #[cfg(not(cfail1))]\n+    { 2 * 3 }\n+};\n \n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-const CONST_CHANGE_VALUE_4: i16 = 1 + 2 * 4;\n+const CONST_CHANGE_VALUE_4: i16 = {\n+    #[cfg(cfail1)]\n+    { 1 + 2 * 3 }\n+\n+    #[cfg(not(cfail1))]\n+    { 1 + 2 * 4 }\n+};\n \n \n // Change type indirectly -----------------------------------------------------"}, {"sha": "7a4123190dde398dd4d60b978a9289f26ba2df0b", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6713736275181abb3304730603afd785b0470ae3/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6713736275181abb3304730603afd785b0470ae3/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=6713736275181abb3304730603afd785b0470ae3", "patch": "@@ -115,49 +115,55 @@ static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n \n // Change value between simple literals ---------------------------------------\n-#[cfg(cfail1)]\n-static STATIC_CHANGE_VALUE_1: i16 = 1;\n-\n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-static STATIC_CHANGE_VALUE_1: i16 = 2;\n+static STATIC_CHANGE_VALUE_1: i16 = {\n+    #[cfg(cfail1)]\n+    { 1 }\n \n+    #[cfg(not(cfail1))]\n+    { 2 }\n+};\n \n-// Change value between expressions -------------------------------------------\n-#[cfg(cfail1)]\n-static STATIC_CHANGE_VALUE_2: i16 = 1 + 1;\n \n-#[cfg(not(cfail1))]\n+// Change value between expressions -------------------------------------------\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-static STATIC_CHANGE_VALUE_2: i16 = 1 + 2;\n-\n+static STATIC_CHANGE_VALUE_2: i16 = {\n+    #[cfg(cfail1)]\n+    { 1 + 1 }\n \n-#[cfg(cfail1)]\n-static STATIC_CHANGE_VALUE_3: i16 = 2 + 3;\n+    #[cfg(not(cfail1))]\n+    { 1 + 2 }\n+};\n \n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-static STATIC_CHANGE_VALUE_3: i16 = 2 * 3;\n-\n+static STATIC_CHANGE_VALUE_3: i16 = {\n+    #[cfg(cfail1)]\n+    { 2 + 3 }\n \n-#[cfg(cfail1)]\n-static STATIC_CHANGE_VALUE_4: i16 = 1 + 2 * 3;\n+    #[cfg(not(cfail1))]\n+    { 2 * 3 }\n+};\n \n-#[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-static STATIC_CHANGE_VALUE_4: i16 = 1 + 2 * 4;\n+static STATIC_CHANGE_VALUE_4: i16 = {\n+    #[cfg(cfail1)]\n+    { 1 + 2 * 3 }\n+\n+    #[cfg(not(cfail1))]\n+    { 1 + 2 * 4 }\n+};\n \n \n // Change type indirectly -----------------------------------------------------"}, {"sha": "c0bf35e781c70199375cdce3e99cf414f5adbaaf", "filename": "src/test/incremental/spans_significant_w_panic.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6713736275181abb3304730603afd785b0470ae3/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6713736275181abb3304730603afd785b0470ae3/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs?ref=6713736275181abb3304730603afd785b0470ae3", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test makes sure that just changing a definition's location in the\n+// source file also changes its incr. comp. hash, if debuginfo is enabled.\n+\n+// revisions:rpass1 rpass2\n+\n+// compile-flags: -C overflow-checks=on\n+\n+#![feature(rustc_attrs)]\n+\n+#[cfg(rpass1)]\n+pub fn main() {\n+    let _ = 0u8 + 1;\n+}\n+\n+#[cfg(rpass2)]\n+#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+#[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n+pub fn main() {\n+    let _ = 0u8 + 1;\n+}"}]}