{"sha": "d0a1b6e9140688388f785218ba477d4b93946219", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTFiNmU5MTQwNjg4Mzg4Zjc4NTIxOGJhNDc3ZDRiOTM5NDYyMTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T03:24:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-02T03:24:23Z"}, "message": "Reinstate disgusting, filthy workarounds for deriving missing type information. It existed before, we will survive if it exists now.", "tree": {"sha": "0a66e43f8a5753a5e59e78f71a31ecf21a11c1ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a66e43f8a5753a5e59e78f71a31ecf21a11c1ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a1b6e9140688388f785218ba477d4b93946219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1b6e9140688388f785218ba477d4b93946219", "html_url": "https://github.com/rust-lang/rust/commit/d0a1b6e9140688388f785218ba477d4b93946219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a1b6e9140688388f785218ba477d4b93946219/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4273986623be97036670c386793855e01cf389a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4273986623be97036670c386793855e01cf389a9", "html_url": "https://github.com/rust-lang/rust/commit/4273986623be97036670c386793855e01cf389a9"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "c6c606018311cb4aa36d300a0efa55e383cb8ac3", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d0a1b6e9140688388f785218ba477d4b93946219/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/d0a1b6e9140688388f785218ba477d4b93946219/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=d0a1b6e9140688388f785218ba477d4b93946219", "patch": "@@ -1198,6 +1198,23 @@ let lval_is_direct_mod (cx:ctxt) (lval:Ast.lval) : bool =\n         | _ -> false\n ;;\n \n+(* \n+ * FIXME: this function is a bad idea and exists only as a workaround\n+ * for other logic that is even worse. Untangle.\n+ *)\n+let rec project_lval_ty_from_slot (cx:ctxt) (lval:Ast.lval) : Ast.ty =\n+  match lval with\n+      Ast.LVAL_base nbi ->\n+        let referent = lval_to_referent cx nbi.id in\n+          if lval_is_slot cx lval\n+          then slot_ty (get_slot cx referent)\n+          else Hashtbl.find cx.ctxt_all_item_types nbi.id\n+    | Ast.LVAL_ext (base, comp) ->\n+        let base_ty = project_lval_ty_from_slot cx base in\n+          project_type base_ty comp\n+;;\n+\n+\n let lval_ty (cx:ctxt) (lval:Ast.lval) : Ast.ty =\n   (*\n     FIXME: The correct definition of this function is just: \n@@ -1210,19 +1227,7 @@ let lval_ty (cx:ctxt) (lval:Ast.lval) : Ast.ty =\n   *)\n   match htab_search cx.ctxt_all_lval_types (lval_base_id lval) with\n       Some t -> t\n-    | None ->\n-        let rec type_of (lval:Ast.lval) : Ast.ty =\n-          match lval with\n-              Ast.LVAL_base nbi ->\n-                let referent = lval_to_referent cx nbi.id in\n-                  if lval_is_slot cx lval\n-                  then slot_ty (get_slot cx referent)\n-                  else Hashtbl.find cx.ctxt_all_item_types nbi.id\n-            | Ast.LVAL_ext (base, comp) ->\n-                let base_ty = type_of base in\n-                  project_type base_ty comp\n-        in\n-          type_of lval\n+    | None -> project_lval_ty_from_slot cx lval\n ;;\n \n let lval_is_static (cx:ctxt) (lval:Ast.lval) : bool =\n@@ -1239,7 +1244,7 @@ let lval_is_obj_vtbl (cx:ctxt) (lval:Ast.lval) : bool =\n     match lval with\n         Ast.LVAL_ext (base, _) ->\n           begin\n-            match lval_ty cx base with\n+            match (simplified_ty (project_lval_ty_from_slot cx base)) with\n                 Ast.TY_obj _ -> true\n               | _ -> false\n           end"}]}