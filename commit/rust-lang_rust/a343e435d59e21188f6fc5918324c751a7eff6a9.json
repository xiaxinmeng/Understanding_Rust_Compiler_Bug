{"sha": "a343e435d59e21188f6fc5918324c751a7eff6a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNDNlNDM1ZDU5ZTIxMTg4ZjZmYzU5MTgzMjRjNzUxYTdlZmY2YTk=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-11-11T09:01:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-25T20:41:11Z"}, "message": "Add an insert_with_key function to the Map trait", "tree": {"sha": "27998530694299076c231cb98266881981629310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27998530694299076c231cb98266881981629310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a343e435d59e21188f6fc5918324c751a7eff6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a343e435d59e21188f6fc5918324c751a7eff6a9", "html_url": "https://github.com/rust-lang/rust/commit/a343e435d59e21188f6fc5918324c751a7eff6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a343e435d59e21188f6fc5918324c751a7eff6a9/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "455d73cb861bb0aca989fc8aca19c025ebf6f4ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/455d73cb861bb0aca989fc8aca19c025ebf6f4ed", "html_url": "https://github.com/rust-lang/rust/commit/455d73cb861bb0aca989fc8aca19c025ebf6f4ed"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "d6feebc016c8b25a49b9ac4cc449e86e4880fd87", "filename": "src/libstd/map.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a343e435d59e21188f6fc5918324c751a7eff6a9/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a343e435d59e21188f6fc5918324c751a7eff6a9/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=a343e435d59e21188f6fc5918324c751a7eff6a9", "patch": "@@ -27,7 +27,15 @@ pub trait Map<K:Eq IterBytes Hash Copy, V: Copy> {\n      *\n      * Returns true if the key did not already exist in the map\n      */\n-    fn insert(v: K, v: V) -> bool;\n+    fn insert(key: K, value: V) -> bool;\n+\n+    /**\n+     * Add a value to the map.\n+     *\n+     * If the map contains a value for the key, use the function\n+     * to set a new value.\n+     */\n+    fn insert_with_key(ff: fn(K, V, V) -> V, key: K, value: V) -> bool;\n \n     /// Returns true if the map contains a value for the specified key\n     pure fn contains_key(key: K) -> bool;\n@@ -264,6 +272,14 @@ pub mod chained {\n             }\n         }\n \n+        fn insert_with_key(ff: fn(K, V, V) -> V, key: K, val: V) -> bool {\n+            // this can be optimized but first lets see if it compiles...\n+            match self.find(key) {\n+                None            => return self.insert(key, val),\n+                Some(copy orig) => return self.insert(key, ff(key, orig, val))\n+            }\n+        }\n+\n         pure fn get(k: K) -> V {\n             let opt_v = self.find(k);\n             if opt_v.is_none() {\n@@ -447,6 +463,13 @@ impl<K: Eq IterBytes Hash Copy, V: Copy> @Mut<LinearMap<K, V>>:\n         }\n     }\n \n+     fn insert_with_key(ff: fn(K, V, V) -> V, key: K, val: V) -> bool {\n+         match self.find(key) {\n+             None            => return self.insert(key, val),\n+             Some(copy orig) => return self.insert(key, ff(key, orig, val)),\n+         }\n+     }\n+\n     fn remove(key: K) -> bool {\n         do self.borrow_mut |p| {\n             p.remove(&key)"}, {"sha": "8439d214ca0436aa51a866c7c85e6b5026aed2bf", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a343e435d59e21188f6fc5918324c751a7eff6a9/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a343e435d59e21188f6fc5918324c751a7eff6a9/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=a343e435d59e21188f6fc5918324c751a7eff6a9", "patch": "@@ -103,6 +103,13 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n     pure fn find(key: uint) -> Option<V> { find(self, key) }\n     fn rehash() { fail }\n \n+    fn insert_with_key(ff: fn(uint, V, V) -> V, key: uint, val: V) -> bool {\n+        match self.find(key) {\n+            None            => return self.insert(key, val),\n+            Some(copy orig) => return self.insert(key, ff(key, orig, val)),\n+        }\n+    }\n+\n     pure fn each(it: fn(key: uint, value: V) -> bool) {\n         self.each_ref(|k, v| it(*k, *v))\n     }"}, {"sha": "c8a08dbf818c075ccd47b7adca5cbca2c7af250d", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a343e435d59e21188f6fc5918324c751a7eff6a9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a343e435d59e21188f6fc5918324c751a7eff6a9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=a343e435d59e21188f6fc5918324c751a7eff6a9", "patch": "@@ -61,6 +61,14 @@ impl<T: Copy> cat<T> : Map<int, T> {\n      else { None }\n   }\n \n+  fn insert_with_key(ff: fn(+k: int, +v0: T, +v1: T) -> T, +key: int, +val: T) -> bool {\n+    match self.find(key) {\n+      None            => return self.insert(key, val),\n+      Some(copy orig) => return self.insert(key, ff(key, orig, val))\n+    }\n+  }\n+\n+\n   fn remove(+k:int) -> bool {\n     match self.find(k) {\n       Some(x) => {"}]}