{"sha": "afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZTU5NjJkMzgwZDljMmNhZjVlNWVkYjFhYTMyNTFjZTJlYzA2NGQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-23T21:02:09Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-23T22:03:12Z"}, "message": "clippy::author improvements", "tree": {"sha": "2ec580fb05883353d232e0467dc1b5860c87b2fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ec580fb05883353d232e0467dc1b5860c87b2fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "html_url": "https://github.com/rust-lang/rust/commit/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610381455cb78a31695b94bc45ee580cf0cd7b38", "url": "https://api.github.com/repos/rust-lang/rust/commits/610381455cb78a31695b94bc45ee580cf0cd7b38", "html_url": "https://github.com/rust-lang/rust/commit/610381455cb78a31695b94bc45ee580cf0cd7b38"}], "stats": {"total": 122, "additions": 62, "deletions": 60}, "files": [{"sha": "d59f96b4beede3f1d4535254c06f609e573fdf14", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::walk_list;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n-use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n+use rustc_hir::{Block, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -132,6 +132,10 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n         if !has_attr(cx, stmt.hir_id) {\n             return;\n         }\n+        match stmt.kind {\n+            StmtKind::Expr(e) | StmtKind::Semi(e) if has_attr(cx, e.hir_id) => return,\n+            _ => {},\n+        }\n         prelude();\n         PrintVisitor::new(\"stmt\").visit_stmt(stmt);\n         done();\n@@ -316,11 +320,13 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n             },\n-            ExprKind::Loop(body, _, desugaring, _) => {\n+            ExprKind::Loop(body, _, des, _) => {\n                 let body_pat = self.next(\"body\");\n-                let des = loop_desugaring_name(desugaring);\n                 let label_pat = self.next(\"label\");\n-                println!(\"Loop(ref {}, ref {}, {}) = {};\", body_pat, label_pat, des, current);\n+                println!(\n+                    \"Loop(ref {}, ref {}, LoopSource::{:?}) = {};\",\n+                    body_pat, label_pat, des, current\n+                );\n                 self.current = body_pat;\n                 self.visit_block(body);\n             },\n@@ -343,11 +349,13 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = then_pat;\n                 self.visit_expr(then);\n             },\n-            ExprKind::Match(expr, arms, desugaring) => {\n-                let des = desugaring_name(desugaring);\n+            ExprKind::Match(expr, arms, des) => {\n                 let expr_pat = self.next(\"expr\");\n                 let arms_pat = self.next(\"arms\");\n-                println!(\"Match(ref {}, ref {}, {}) = {};\", expr_pat, arms_pat, des, current);\n+                println!(\n+                    \"Match(ref {}, ref {}, MatchSource::{:?}) = {};\",\n+                    expr_pat, arms_pat, des, current\n+                );\n                 self.current = expr_pat;\n                 self.visit_expr(expr);\n                 println!(\"    if {}.len() == {};\", arms_pat, arms.len());\n@@ -536,14 +544,17 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     }\n \n     fn visit_block(&mut self, block: &Block<'_>) {\n-        let trailing_pat = self.next(\"trailing_expr\");\n-        println!(\"    if let Some({}) = &{}.expr;\", trailing_pat, self.current);\n         println!(\"    if {}.stmts.len() == {};\", self.current, block.stmts.len());\n-        let current = self.current.clone();\n+        let block_name = self.current.clone();\n         for (i, stmt) in block.stmts.iter().enumerate() {\n-            self.current = format!(\"{}.stmts[{}]\", current, i);\n+            self.current = format!(\"{}.stmts[{}]\", block_name, i);\n             self.visit_stmt(stmt);\n         }\n+        if let Some(expr) = block.expr {\n+            self.current = self.next(\"trailing_expr\");\n+            println!(\"    if let Some({}) = &{}.expr;\", self.current, block_name);\n+            self.visit_expr(expr);\n+        }\n     }\n \n     #[allow(clippy::too_many_lines)]\n@@ -553,12 +564,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n         match pat.kind {\n             PatKind::Wild => println!(\"Wild = {};\", current),\n             PatKind::Binding(anno, .., ident, ref sub) => {\n-                let anno_pat = match anno {\n-                    BindingAnnotation::Unannotated => \"BindingAnnotation::Unannotated\",\n-                    BindingAnnotation::Mutable => \"BindingAnnotation::Mutable\",\n-                    BindingAnnotation::Ref => \"BindingAnnotation::Ref\",\n-                    BindingAnnotation::RefMut => \"BindingAnnotation::RefMut\",\n-                };\n+                let anno_pat = &format!(\"BindingAnnotation::{:?}\", anno);\n                 let name_pat = self.next(\"name\");\n                 if let Some(sub) = *sub {\n                     let sub_pat = self.next(\"sub\");\n@@ -723,33 +729,6 @@ fn has_attr(cx: &LateContext<'_>, hir_id: hir::HirId) -> bool {\n     get_attr(cx.sess(), attrs, \"author\").count() > 0\n }\n \n-#[must_use]\n-fn desugaring_name(des: hir::MatchSource) -> String {\n-    match des {\n-        hir::MatchSource::ForLoopDesugar => \"MatchSource::ForLoopDesugar\".to_string(),\n-        hir::MatchSource::TryDesugar => \"MatchSource::TryDesugar\".to_string(),\n-        hir::MatchSource::WhileDesugar => \"MatchSource::WhileDesugar\".to_string(),\n-        hir::MatchSource::WhileLetDesugar => \"MatchSource::WhileLetDesugar\".to_string(),\n-        hir::MatchSource::Normal => \"MatchSource::Normal\".to_string(),\n-        hir::MatchSource::IfLetDesugar { contains_else_clause } => format!(\n-            \"MatchSource::IfLetDesugar {{ contains_else_clause: {} }}\",\n-            contains_else_clause\n-        ),\n-        hir::MatchSource::IfLetGuardDesugar => \"MatchSource::IfLetGuardDesugar\".to_string(),\n-        hir::MatchSource::AwaitDesugar => \"MatchSource::AwaitDesugar\".to_string(),\n-    }\n-}\n-\n-#[must_use]\n-fn loop_desugaring_name(des: hir::LoopSource) -> &'static str {\n-    match des {\n-        hir::LoopSource::ForLoop => \"LoopSource::ForLoop\",\n-        hir::LoopSource::Loop => \"LoopSource::Loop\",\n-        hir::LoopSource::While => \"LoopSource::While\",\n-        hir::LoopSource::WhileLet => \"LoopSource::WhileLet\",\n-    }\n-}\n-\n fn print_path(path: &QPath<'_>, first: &mut bool) {\n     match *path {\n         QPath::Resolved(_, path) => {"}, {"sha": "c8465cd59aaef0d028a7552e428b7ac8267eb1fc", "filename": "tests/ui/author/blocks.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.rs?ref=afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "patch": "@@ -1,16 +1,15 @@\n-#![feature(stmt_expr_attributes)]\n #![allow(redundant_semicolons, clippy::no_effect)]\n \n #[rustfmt::skip]\n fn main() {\n     #[clippy::author]\n     {\n-        ;;;;\n-    }\n-}\n-\n-#[clippy::author]\n-fn foo() {\n-    let x = 42i32;\n-    -x;\n+        let x = 42i32;\n+        -x;\n+    };\n+    #[clippy::author]\n+    {\n+        let expr = String::new();\n+        drop(expr)\n+    };\n }"}, {"sha": "4e3cde498afcb52d7aecb39c73b671123cc93ea0", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "patch": "@@ -1,12 +1,38 @@\n if_chain! {\n     if let ExprKind::Block(ref block) = expr.kind;\n-    if let Some(trailing_expr) = &block.expr;\n-    if block.stmts.len() == 0;\n+    if block.stmts.len() == 2;\n+    if let StmtKind::Local(ref local) = block.stmts[0].kind;\n+    if let Some(ref init) = local.init;\n+    if let ExprKind::Lit(ref lit) = init.kind;\n+    if let LitKind::Int(42, _) = lit.node;\n+    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n+    if name.as_str() == \"x\";\n+    if let StmtKind::Semi(ref e, _) = block.stmts[1].kind\n+    if let ExprKind::Unary(UnOp::Neg, ref inner) = e.kind;\n+    if let ExprKind::Path(ref path) = inner.kind;\n+    if match_qpath(path, &[\"x\"]);\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n+    if let ExprKind::Block(ref block) = expr.kind;\n+    if block.stmts.len() == 1;\n+    if let StmtKind::Local(ref local) = block.stmts[0].kind;\n+    if let Some(ref init) = local.init;\n+    if let ExprKind::Call(ref func, ref args) = init.kind;\n+    if let ExprKind::Path(ref path) = func.kind;\n+    if match_qpath(path, &[\"String\", \"new\"]);\n+    if args.len() == 0;\n+    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n+    if name.as_str() == \"expr\";\n+    if let Some(trailing_expr) = &block.expr;\n+    if let ExprKind::Call(ref func1, ref args1) = trailing_expr.kind;\n+    if let ExprKind::Path(ref path1) = func1.kind;\n+    if match_qpath(path1, &[\"drop\"]);\n+    if args1.len() == 1;\n+    if let ExprKind::Path(ref path2) = args1[0].kind;\n+    if match_qpath(path2, &[\"expr\"]);\n     then {\n         // report your lint here\n     }"}, {"sha": "771f4f128f5c9254d94ef7381aa9bc7e816c6822", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "patch": "@@ -11,7 +11,6 @@ if_chain! {\n     // unimplemented: field checks\n     if arms.len() == 1;\n     if let ExprKind::Loop(ref body, ref label, LoopSource::ForLoop) = arms[0].body.kind;\n-    if let Some(trailing_expr) = &body.expr;\n     if body.stmts.len() == 4;\n     if let StmtKind::Local(ref local) = body.stmts[0].kind;\n     if let PatKind::Binding(BindingAnnotation::Mutable, _, name, None) = local.pat.kind;\n@@ -48,7 +47,6 @@ if_chain! {\n     if name1.as_str() == \"y\";\n     if let StmtKind::Expr(ref e1, _) = body.stmts[3].kind\n     if let ExprKind::Block(ref block) = e1.kind;\n-    if let Some(trailing_expr1) = &block.expr;\n     if block.stmts.len() == 1;\n     if let StmtKind::Local(ref local2) = block.stmts[0].kind;\n     if let Some(ref init1) = local2.init;"}, {"sha": "1b9ed366c197ed3764c0c977f2d480caf8fcbec7", "filename": "tests/ui/author/if.stdout", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "patch": "@@ -3,7 +3,6 @@ if_chain! {\n     if let Some(ref init) = local.init;\n     if let ExprKind::If(ref cond, ref then, Some(ref else_)) = init.kind;\n     if let ExprKind::Block(ref block) = else_.kind;\n-    if let Some(trailing_expr) = &block.expr;\n     if block.stmts.len() == 1;\n     if let StmtKind::Semi(ref e, _) = block.stmts[0].kind\n     if let ExprKind::Binary(ref op, ref left, ref right) = e.kind;\n@@ -15,7 +14,6 @@ if_chain! {\n     if let ExprKind::Lit(ref lit2) = cond.kind;\n     if let LitKind::Bool(true) = lit2.node;\n     if let ExprKind::Block(ref block1) = then.kind;\n-    if let Some(trailing_expr1) = &block1.expr;\n     if block1.stmts.len() == 1;\n     if let StmtKind::Semi(ref e1, _) = block1.stmts[0].kind\n     if let ExprKind::Binary(ref op1, ref left1, ref right1) = e1.kind;"}, {"sha": "68cc2b214eb292fbee4c020d48fa1d2db09ebf20", "filename": "tests/ui/author/matches.stdout", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fmatches.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/afe5962d380d9c2caf5e5edb1aa3251ce2ec064d/tests%2Fui%2Fauthor%2Fmatches.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stdout?ref=afe5962d380d9c2caf5e5edb1aa3251ce2ec064d", "patch": "@@ -11,14 +11,16 @@ if_chain! {\n     if let ExprKind::Lit(ref lit2) = lit_expr.kind;\n     if let LitKind::Int(16, _) = lit2.node;\n     if let ExprKind::Block(ref block) = arms[1].body.kind;\n-    if let Some(trailing_expr) = &block.expr;\n     if block.stmts.len() == 1;\n     if let StmtKind::Local(ref local1) = block.stmts[0].kind;\n     if let Some(ref init1) = local1.init;\n     if let ExprKind::Lit(ref lit3) = init1.kind;\n     if let LitKind::Int(3, _) = lit3.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local1.pat.kind;\n     if name.as_str() == \"x\";\n+    if let Some(trailing_expr) = &block.expr;\n+    if let ExprKind::Path(ref path) = trailing_expr.kind;\n+    if match_qpath(path, &[\"x\"]);\n     if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind\n     if let ExprKind::Lit(ref lit4) = lit_expr1.kind;\n     if let LitKind::Int(17, _) = lit4.node;"}]}