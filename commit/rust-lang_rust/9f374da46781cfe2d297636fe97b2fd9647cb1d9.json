{"sha": "9f374da46781cfe2d297636fe97b2fd9647cb1d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMzc0ZGE0Njc4MWNmZTJkMjk3NjM2ZmU5N2IyZmQ5NjQ3Y2IxZDk=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-09-20T22:39:34Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-09-20T22:39:34Z"}, "message": "Exempt extern \"Rust\" from improper_ctypes\n\nIt should be fine for Rust ABIs to involve any Rust type.", "tree": {"sha": "0b6cd213056e9d3f998ecba07f6047a1c8c1bd3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b6cd213056e9d3f998ecba07f6047a1c8c1bd3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f374da46781cfe2d297636fe97b2fd9647cb1d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f374da46781cfe2d297636fe97b2fd9647cb1d9", "html_url": "https://github.com/rust-lang/rust/commit/9f374da46781cfe2d297636fe97b2fd9647cb1d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f374da46781cfe2d297636fe97b2fd9647cb1d9/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad1e7c46cf690b7ec6953b142430d21ca2d8799", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad1e7c46cf690b7ec6953b142430d21ca2d8799", "html_url": "https://github.com/rust-lang/rust/commit/9ad1e7c46cf690b7ec6953b142430d21ca2d8799"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "a39fcd5ad4c580fef0c96d466dc3d9c05728249d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=9f374da46781cfe2d297636fe97b2fd9647cb1d9", "patch": "@@ -240,7 +240,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[rustc_allocator_nounwind]\n pub fn handle_alloc_error(layout: Layout) -> ! {\n-    #[allow(improper_ctypes)]\n+    #[cfg_attr(bootstrap, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"oom\"]\n         fn oom_impl(layout: Layout) -> !;"}, {"sha": "3d2bc24bf24a5dc35e54f9e58ec1eae895e415f7", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=9f374da46781cfe2d297636fe97b2fd9647cb1d9", "patch": "@@ -71,7 +71,7 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u3\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n+    #[cfg_attr(boostrap_stdarch_ignore_this, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;"}, {"sha": "40261f6d13739d0b04668b35cd0dc2f7dbfca596", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=9f374da46781cfe2d297636fe97b2fd9647cb1d9", "patch": "@@ -975,7 +975,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n-        if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n+        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+            // Don't worry about types in internal ABIs.\n+        } else {\n             match it.node {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n                     vis.check_foreign_fn(it.hir_id, decl);"}, {"sha": "9e787f638a9989d7827d58bf6e4845847f8c458f", "filename": "src/test/ui/issues/issue-64593.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f374da46781cfe2d297636fe97b2fd9647cb1d9/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs?ref=9f374da46781cfe2d297636fe97b2fd9647cb1d9", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![deny(improper_ctypes)]\n+\n+pub struct Error(std::num::NonZeroU32);\n+\n+extern \"Rust\" {\n+    fn foo(dest: &mut [u8]) -> Result<(), Error>;\n+}\n+\n+fn main() {\n+    let _ = unsafe { foo(&mut []) };\n+}"}]}