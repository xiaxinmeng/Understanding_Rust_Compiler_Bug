{"sha": "3e6f30ec3e6bda159063fcd126dcb14725fef92d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNmYzMGVjM2U2YmRhMTU5MDYzZmNkMTI2ZGNiMTQ3MjVmZWY5MmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-26T17:26:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-26T17:26:56Z"}, "message": "Auto merge of #55382 - kennytm:rollup, r=kennytm\n\nRollup of 21 pull requests\n\nSuccessful merges:\n\n - #54816 (Don't try to promote already promoted out temporaries)\n - #54824 (Cleanup rustdoc tests with `@!has` and `@!matches`)\n - #54921 (Add line numbers option to rustdoc)\n - #55167 (Add a \"cheap\" mode for `compute_missing_ctors`.)\n - #55258 (Fix Rustdoc ICE when checking blanket impls)\n - #55264 (Compile the libstd we distribute with -Ccodegen-unit=1)\n - #55271 (Unimplement ExactSizeIterator for MIR traversing iterators)\n - #55292 (Macro diagnostics tweaks)\n - #55298 (Point at macro definition when no rules expect token)\n - #55301 (List allowed tokens after macro fragments)\n - #55302 (Extend the impl_stable_hash_for! macro for miri.)\n - #55325 (Fix link to macros chapter)\n - #55343 (rustbuild: fix remap-debuginfo when building a release)\n - #55346 (Shrink `Statement`.)\n - #55358 (Remove redundant clone (2))\n - #55370 (Update mailmap for estebank)\n - #55375 (Typo fixes in configure_cmake comments)\n - #55378 (rustbuild: use configured linker to build boostrap)\n - #55379 (validity: assert that unions are non-empty)\n - #55383 (Use `SmallVec` for the queue in `coerce_unsized`.)\n - #55391 (bootstrap: clean up a few clippy findings)", "tree": {"sha": "b70731fbfb445b1531d9bec123ecebcffcf2a0db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b70731fbfb445b1531d9bec123ecebcffcf2a0db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6f30ec3e6bda159063fcd126dcb14725fef92d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6f30ec3e6bda159063fcd126dcb14725fef92d", "html_url": "https://github.com/rust-lang/rust/commit/3e6f30ec3e6bda159063fcd126dcb14725fef92d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6f30ec3e6bda159063fcd126dcb14725fef92d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf962e2552cb60a75fec5bded24da071df7f8482", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf962e2552cb60a75fec5bded24da071df7f8482", "html_url": "https://github.com/rust-lang/rust/commit/bf962e2552cb60a75fec5bded24da071df7f8482"}, {"sha": "eb2953022420517859c67c6e57ef59a14dd2fee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2953022420517859c67c6e57ef59a14dd2fee8", "html_url": "https://github.com/rust-lang/rust/commit/eb2953022420517859c67c6e57ef59a14dd2fee8"}], "stats": {"total": 1667, "additions": 1170, "deletions": 497}, "files": [{"sha": "a928606b693e560367e6b3e8c614696d53af0df9", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -78,6 +78,7 @@ Eric Holk <eric.holk@gmail.com> <eholk@mozilla.com>\n Eric Holmes <eric@ejholmes.net>\n Eric Reed <ecreed@cs.washington.edu> <ereed@mozilla.com>\n Erick Tryzelaar <erick.tryzelaar@gmail.com> <etryzelaar@iqt.org>\n+Esteban K\u00fcber <esteban@kuber.com.ar> <estebank@users.noreply.github.com> <esteban@commure.com> <github@kuber.com.ar>\n Evgeny Sologubov\n Falco Hirschenberger <falco.hirschenberger@gmail.com> <hirschen@itwm.fhg.de>\n Felix S. Klock II <pnkfelix@pnkfx.org> Felix S Klock II <pnkfelix@pnkfx.org>"}, {"sha": "15ab97e26fc78cae320cd2108dea76a9ae875d66", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -98,7 +98,7 @@ Misc\n [cargo/5877]: https://github.com/rust-lang/cargo/pull/5877/\n [cargo/5878]: https://github.com/rust-lang/cargo/pull/5878/\n [cargo/5995]: https://github.com/rust-lang/cargo/pull/5995/\n-[proc-macros]: https://doc.rust-lang.org/book/2018-edition/ch19-06-macros.html\n+[proc-macros]: https://doc.rust-lang.org/nightly/book/2018-edition/ch19-06-macros.html\n \n [`Ipv4Addr::BROADCAST`]: https://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#associatedconstant.BROADCAST\n [`Ipv4Addr::LOCALHOST`]: https://doc.rust-lang.org/nightly/std/net/struct.Ipv4Addr.html#associatedconstant.LOCALHOST"}, {"sha": "093b8f9e526eca8778e43293a3614e0bc70f1fae", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -277,6 +277,10 @@\n # compiler.\n #codegen-units = 1\n \n+# Sets the number of codegen units to build the standard library with,\n+# regardless of what the codegen-unit setting for the rest of the compiler is.\n+#codegen-units-std = 1\n+\n # Whether or not debug assertions are enabled for the compiler and standard\n # library. Also enables compilation of debug! and trace! logging macros.\n #debug-assertions = false"}, {"sha": "b5dc0090c8b9ce2652fe5862ce2d2103b3b06cb4", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -632,6 +632,9 @@ def build_bootstrap(self):\n             target_features += [\"-crt-static\"]\n         if target_features:\n             env[\"RUSTFLAGS\"] += \"-C target-feature=\" + (\",\".join(target_features)) + \" \"\n+        target_linker = self.get_toml(\"linker\", build_section)\n+        if target_linker is not None:\n+            env[\"RUSTFLAGS\"] += \"-C linker=\" + target_linker + \" \"\n \n         env[\"PATH\"] = os.path.join(self.bin_root(), \"bin\") + \\\n             os.pathsep + env[\"PATH\"]"}, {"sha": "5abc0455b587186d67292fee50ade8874e91ee2b", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1119,10 +1119,15 @@ impl<'a> Builder<'a> {\n             cargo.arg(\"-v\");\n         }\n \n-        // This must be kept before the thinlto check, as we set codegen units\n-        // to 1 forcibly there.\n-        if let Some(n) = self.config.rust_codegen_units {\n-            cargo.env(\"RUSTC_CODEGEN_UNITS\", n.to_string());\n+        match (mode, self.config.rust_codegen_units_std, self.config.rust_codegen_units) {\n+            (Mode::Std, Some(n), _) |\n+            (Mode::Test, Some(n), _) |\n+            (_, _, Some(n)) => {\n+                cargo.env(\"RUSTC_CODEGEN_UNITS\", n.to_string());\n+            }\n+            _ => {\n+                // Don't set anything\n+            }\n         }\n \n         if self.config.rust_optimize {"}, {"sha": "d009d9645c35aa388ebf7f639f533984491b7de5", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -69,7 +69,7 @@ impl Step for Std {\n         if builder.config.keep_stage.contains(&compiler.stage) {\n             builder.info(\"Warning: Using a potentially old libstd. This may not behave well.\");\n             builder.ensure(StdLink {\n-                compiler: compiler,\n+                compiler,\n                 target_compiler: compiler,\n                 target,\n             });\n@@ -358,7 +358,7 @@ impl Step for Test {\n         if builder.config.keep_stage.contains(&compiler.stage) {\n             builder.info(\"Warning: Using a potentially old libtest. This may not behave well.\");\n             builder.ensure(TestLink {\n-                compiler: compiler,\n+                compiler,\n                 target_compiler: compiler,\n                 target,\n             });\n@@ -480,7 +480,7 @@ impl Step for Rustc {\n         if builder.config.keep_stage.contains(&compiler.stage) {\n             builder.info(\"Warning: Using a potentially old librustc. This may not behave well.\");\n             builder.ensure(RustcLink {\n-                compiler: compiler,\n+                compiler,\n                 target_compiler: compiler,\n                 target,\n             });\n@@ -816,8 +816,8 @@ fn copy_codegen_backends_to_sysroot(builder: &Builder,\n         let filename = file.file_name().unwrap().to_str().unwrap();\n         // change `librustc_codegen_llvm-xxxxxx.so` to `librustc_codegen_llvm-llvm.so`\n         let target_filename = {\n-            let dash = filename.find(\"-\").unwrap();\n-            let dot = filename.find(\".\").unwrap();\n+            let dash = filename.find('-').unwrap();\n+            let dot = filename.find('.').unwrap();\n             format!(\"{}-{}{}\",\n                     &filename[..dash],\n                     backend,"}, {"sha": "3eb6e8d84e877fdfe8a4665b72718a7141b8498d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -95,6 +95,7 @@ pub struct Config {\n     // rust codegen options\n     pub rust_optimize: bool,\n     pub rust_codegen_units: Option<u32>,\n+    pub rust_codegen_units_std: Option<u32>,\n     pub rust_debug_assertions: bool,\n     pub rust_debuginfo: bool,\n     pub rust_debuginfo_lines: bool,\n@@ -294,6 +295,7 @@ impl Default for StringOrBool {\n struct Rust {\n     optimize: Option<bool>,\n     codegen_units: Option<u32>,\n+    codegen_units_std: Option<u32>,\n     debug_assertions: Option<bool>,\n     debuginfo: Option<bool>,\n     debuginfo_lines: Option<bool>,\n@@ -580,6 +582,8 @@ impl Config {\n                 Some(n) => config.rust_codegen_units = Some(n),\n                 None => {}\n             }\n+\n+            config.rust_codegen_units_std = rust.codegen_units_std;\n         }\n \n         if let Some(ref t) = toml.target {"}, {"sha": "ddb894eb1f6597be1c166cdb6d8176e8804121c1", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -393,6 +393,13 @@ def set(key, value):\n     targets[target][0] = targets[target][0].replace(\"x86_64-unknown-linux-gnu\", target)\n \n \n+def is_number(value):\n+  try:\n+    float(value)\n+    return True\n+  except:\n+    return False\n+\n # Here we walk through the constructed configuration we have from the parsed\n # command line arguments. We then apply each piece of configuration by\n # basically just doing a `sed` to change the various configuration line to what\n@@ -406,7 +413,11 @@ def to_toml(value):\n     elif isinstance(value, list):\n         return '[' + ', '.join(map(to_toml, value)) + ']'\n     elif isinstance(value, str):\n-        return \"'\" + value + \"'\"\n+        # Don't put quotes around numeric values\n+        if is_number(value):\n+            return value\n+        else:\n+            return \"'\" + value + \"'\"\n     else:\n         raise RuntimeError('no toml')\n "}, {"sha": "fea6302d0a119e6a5f0916dfefa4628bc040eebe", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1447,8 +1447,8 @@ impl Step for Extended {\n         tarballs.extend(rls_installer.clone());\n         tarballs.extend(clippy_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n-        tarballs.extend(llvm_tools_installer.clone());\n-        tarballs.extend(lldb_installer.clone());\n+        tarballs.extend(llvm_tools_installer);\n+        tarballs.extend(lldb_installer);\n         tarballs.push(analysis_installer);\n         tarballs.push(std_installer);\n         if builder.config.docs {"}, {"sha": "1211d485d1c12cfb24143795508539bf1afc29db", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -93,8 +93,7 @@ impl Default for Subcommand {\n impl Flags {\n     pub fn parse(args: &[String]) -> Flags {\n         let mut extra_help = String::new();\n-        let mut subcommand_help = format!(\n-            \"\\\n+        let mut subcommand_help = String::from(\"\\\n Usage: x.py <subcommand> [options] [<paths>...]\n \n Subcommands:\n@@ -365,8 +364,8 @@ Arguments:\n         }\n \n         let cmd = match subcommand.as_str() {\n-            \"build\" => Subcommand::Build { paths: paths },\n-            \"check\" => Subcommand::Check { paths: paths },\n+            \"build\" => Subcommand::Build { paths },\n+            \"check\" => Subcommand::Check { paths },\n             \"test\" => Subcommand::Test {\n                 paths,\n                 bless: matches.opt_present(\"bless\"),\n@@ -386,9 +385,9 @@ Arguments:\n                 paths,\n                 test_args: matches.opt_strs(\"test-args\"),\n             },\n-            \"doc\" => Subcommand::Doc { paths: paths },\n+            \"doc\" => Subcommand::Doc { paths },\n             \"clean\" => {\n-                if paths.len() > 0 {\n+                if !paths.is_empty() {\n                     println!(\"\\nclean does not take a path argument\\n\");\n                     usage(1, &opts, &subcommand_help, &extra_help);\n                 }\n@@ -413,19 +412,19 @@ Arguments:\n             keep_stage: matches.opt_strs(\"keep-stage\")\n                 .into_iter().map(|j| j.parse().unwrap())\n                 .collect(),\n-            host: split(matches.opt_strs(\"host\"))\n+            host: split(&matches.opt_strs(\"host\"))\n                 .into_iter()\n                 .map(|x| INTERNER.intern_string(x))\n                 .collect::<Vec<_>>(),\n-            target: split(matches.opt_strs(\"target\"))\n+            target: split(&matches.opt_strs(\"target\"))\n                 .into_iter()\n                 .map(|x| INTERNER.intern_string(x))\n                 .collect::<Vec<_>>(),\n             config: cfg_file,\n             jobs: matches.opt_str(\"jobs\").map(|j| j.parse().unwrap()),\n             cmd,\n             incremental: matches.opt_present(\"incremental\"),\n-            exclude: split(matches.opt_strs(\"exclude\"))\n+            exclude: split(&matches.opt_strs(\"exclude\"))\n                 .into_iter()\n                 .map(|p| p.into())\n                 .collect::<Vec<_>>(),\n@@ -488,7 +487,7 @@ impl Subcommand {\n     }\n }\n \n-fn split(s: Vec<String>) -> Vec<String> {\n+fn split(s: &[String]) -> Vec<String> {\n     s.iter()\n         .flat_map(|s| s.split(','))\n         .map(|s| s.to_string())"}, {"sha": "ba601249ea895fb7f43afd08322d06270f111288", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -765,10 +765,10 @@ impl Build {\n \n         let path = match which {\n             GitRepo::Rustc => {\n-                let sha = self.rust_info.sha().expect(\"failed to find sha\");\n+                let sha = self.rust_sha().unwrap_or(channel::CFG_RELEASE_NUM);\n                 format!(\"/rustc/{}\", sha)\n             }\n-            GitRepo::Llvm => format!(\"/rustc/llvm\"),\n+            GitRepo::Llvm => String::from(\"/rustc/llvm\"),\n         };\n         Some(format!(\"{}={}\", self.src.display(), path))\n     }\n@@ -783,7 +783,7 @@ impl Build {\n     fn cflags(&self, target: Interned<String>, which: GitRepo) -> Vec<String> {\n         // Filter out -O and /O (the optimization flags) that we picked up from\n         // cc-rs because the build scripts will determine that for themselves.\n-        let mut base = self.cc[&target].args().iter()\n+        let mut base: Vec<String> = self.cc[&target].args().iter()\n                            .map(|s| s.to_string_lossy().into_owned())\n                            .filter(|s| !s.starts_with(\"-O\") && !s.starts_with(\"/O\"))\n                            .collect::<Vec<_>>();\n@@ -806,10 +806,10 @@ impl Build {\n         if let Some(map) = self.debuginfo_map(which) {\n         let cc = self.cc(target);\n             if cc.ends_with(\"clang\") || cc.ends_with(\"gcc\") {\n-                base.push(format!(\"-fdebug-prefix-map={}\", map).into());\n+                base.push(format!(\"-fdebug-prefix-map={}\", map));\n             } else if cc.ends_with(\"clang-cl.exe\") {\n                 base.push(\"-Xclang\".into());\n-                base.push(format!(\"-fdebug-prefix-map={}\", map).into());\n+                base.push(format!(\"-fdebug-prefix-map={}\", map));\n             }\n         }\n         base"}, {"sha": "448967ef0c2e160adb2bd93476c8666bb509c282", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -353,15 +353,15 @@ fn configure_cmake(builder: &Builder,\n        // definitely causes problems since all the env vars are pointing to\n        // 32-bit libraries.\n        //\n-       // To hack aroudn this... again... we pass an argument that's\n+       // To hack around this... again... we pass an argument that's\n        // unconditionally passed in the sccache shim. This'll get CMake to\n        // correctly diagnose it's doing a 32-bit compilation and LLVM will\n        // internally configure itself appropriately.\n        if builder.config.llvm_clang_cl.is_some() && target.contains(\"i686\") {\n            cfg.env(\"SCCACHE_EXTRA_ARGS\", \"-m32\");\n        }\n \n-    // If ccache is configured we inform the build a little differently hwo\n+    // If ccache is configured we inform the build a little differently how\n     // to invoke ccache while also invoking our compilers.\n     } else if let Some(ref ccache) = builder.config.ccache {\n        cfg.define(\"CMAKE_C_COMPILER\", ccache)"}, {"sha": "2eb11b06e4e08acaa0e614495643c50b9f2b3fb1", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -74,7 +74,7 @@ pub fn check(build: &mut Build) {\n     // one is present as part of the PATH then that can lead to the system\n     // being unable to identify the files properly. See\n     // https://github.com/rust-lang/rust/issues/34959 for more details.\n-    if cfg!(windows) && path.to_string_lossy().contains(\"\\\"\") {\n+    if cfg!(windows) && path.to_string_lossy().contains('\\\"') {\n         panic!(\"PATH contains invalid character '\\\"'\");\n     }\n "}, {"sha": "e411e0d17342ef66e092c6aaead0bd95e1510349", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -521,7 +521,7 @@ impl Step for RustdocTheme {\n     fn make_run(run: RunConfig) {\n         let compiler = run.builder.compiler(run.builder.top_stage, run.host);\n \n-        run.builder.ensure(RustdocTheme { compiler: compiler });\n+        run.builder.ensure(RustdocTheme { compiler });\n     }\n \n     fn run(self, builder: &Builder) {\n@@ -584,9 +584,9 @@ impl Step for RustdocJS {\n             });\n             builder.run(&mut command);\n         } else {\n-            builder.info(&format!(\n+            builder.info(\n                 \"No nodejs found, skipping \\\"src/test/rustdoc-js\\\" tests\"\n-            ));\n+            );\n         }\n     }\n }\n@@ -653,7 +653,7 @@ impl Step for Tidy {\n         }\n \n         let _folder = builder.fold_output(|| \"tidy\");\n-        builder.info(&format!(\"tidy check\"));\n+        builder.info(\"tidy check\");\n         try_run(builder, &mut cmd);\n     }\n \n@@ -1052,7 +1052,7 @@ impl Step for Compiletest {\n         let hostflags = flags.clone();\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n-        let mut targetflags = flags.clone();\n+        let mut targetflags = flags;\n         targetflags.push(format!(\n             \"-Lnative={}\",\n             builder.test_helpers_out(target).display()\n@@ -1168,9 +1168,9 @@ impl Step for Compiletest {\n             }\n         }\n         if suite == \"run-make-fulldeps\" && !builder.config.llvm_enabled {\n-            builder.info(&format!(\n+            builder.info(\n                 \"Ignoring run-make test suite as they generally don't work without LLVM\"\n-            ));\n+            );\n             return;\n         }\n \n@@ -1692,10 +1692,10 @@ impl Step for Crate {\n             // The javascript shim implements the syscall interface so that test\n             // output can be correctly reported.\n             if !builder.config.wasm_syscall {\n-                builder.info(&format!(\n+                builder.info(\n                     \"Libstd was built without `wasm_syscall` feature enabled: \\\n                      test output may not be visible.\"\n-                ));\n+                );\n             }\n \n             // On the wasm32-unknown-unknown target we're using LTO which is\n@@ -1891,7 +1891,7 @@ impl Step for Distcheck {\n \n     /// Run \"distcheck\", a 'make check' from a tarball\n     fn run(self, builder: &Builder) {\n-        builder.info(&format!(\"Distcheck\"));\n+        builder.info(\"Distcheck\");\n         let dir = builder.out.join(\"tmp\").join(\"distcheck\");\n         let _ = fs::remove_dir_all(&dir);\n         t!(fs::create_dir_all(&dir));\n@@ -1919,7 +1919,7 @@ impl Step for Distcheck {\n         );\n \n         // Now make sure that rust-src has all of libstd's dependencies\n-        builder.info(&format!(\"Distcheck rust-src\"));\n+        builder.info(\"Distcheck rust-src\");\n         let dir = builder.out.join(\"tmp\").join(\"distcheck-src\");\n         let _ = fs::remove_dir_all(&dir);\n         t!(fs::create_dir_all(&dir));"}, {"sha": "978e3602e7dbc5c132c37507135686ab36c7061f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -148,7 +148,7 @@ impl Step for ToolBuild {\n             }\n         });\n \n-        if is_expected && duplicates.len() != 0 {\n+        if is_expected && !duplicates.is_empty() {\n             println!(\"duplicate artfacts found when compiling a tool, this \\\n                       typically means that something was recompiled because \\\n                       a transitive dependency has different features activated \\\n@@ -170,7 +170,7 @@ impl Step for ToolBuild {\n                 println!(\"    `{}` additionally enabled features {:?} at {:?}\",\n                          prev.0, &prev_features - &cur_features, prev.1);\n             }\n-            println!(\"\");\n+            println!();\n             println!(\"to fix this you will probably want to edit the local \\\n                       src/tools/rustc-workspace-hack/Cargo.toml crate, as \\\n                       that will update the dependency graph to ensure that \\\n@@ -188,7 +188,7 @@ impl Step for ToolBuild {\n             if !is_optional_tool {\n                 exit(1);\n             } else {\n-                return None;\n+                None\n             }\n         } else {\n             let cargo_out = builder.cargo_out(compiler, self.mode, target)\n@@ -251,7 +251,7 @@ pub fn prepare_tool_cargo(\n     if let Some(date) = info.commit_date() {\n         cargo.env(\"CFG_COMMIT_DATE\", date);\n     }\n-    if features.len() > 0 {\n+    if !features.is_empty() {\n         cargo.arg(\"--features\").arg(&features.join(\", \"));\n     }\n     cargo"}, {"sha": "8e0eb8fec43256a7060375270ffc52b978c82a50", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -40,6 +40,7 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-manage-submodules\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-locked-deps\"\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-cargo-native-static\"\n+RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.codegen-units-std=1\"\n \n if [ \"$DIST_SRC\" = \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-dist-src\""}, {"sha": "0ee03bc4c6e00902d0026a78e23b8be1c63a0a5d", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -251,6 +251,7 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n                   dir: RelationDir)\n                   -> RelateResult<'tcx, Generalization<'tcx>>\n     {\n+        debug!(\"generalize(ty={:?}, for_vid={:?}, dir={:?}\", ty, for_vid, dir);\n         // Determine the ambient variance within which `ty` appears.\n         // The surrounding equation is:\n         //\n@@ -273,8 +274,15 @@ impl<'infcx, 'gcx, 'tcx> CombineFields<'infcx, 'gcx, 'tcx> {\n             root_ty: ty,\n         };\n \n-        let ty = generalize.relate(&ty, &ty)?;\n+        let ty = match generalize.relate(&ty, &ty) {\n+            Ok(ty) => ty,\n+            Err(e) => {\n+                debug!(\"generalize: failure {:?}\", e);\n+                return Err(e);\n+            }\n+        };\n         let needs_wf = generalize.needs_wf;\n+        debug!(\"generalize: success {{ {:?}, {:?} }}\", ty, needs_wf);\n         Ok(Generalization { ty, needs_wf })\n     }\n }"}, {"sha": "c7b5ddb83410f6c969a0c088aad262c6d7d6ad3e", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -74,6 +74,9 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         let infcx = self.fields.infcx;\n         let a = infcx.type_variables.borrow_mut().replace_if_possible(a);\n         let b = infcx.type_variables.borrow_mut().replace_if_possible(b);\n+\n+        debug!(\"{}.tys: replacements ({:?}, {:?})\", self.tag(), a, b);\n+\n         match (&a.sty, &b.sty) {\n             (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {\n                 infcx.type_variables.borrow_mut().equate(a_id, b_id);"}, {"sha": "5db850f1588b6a24bd4c784d56a28e64751a95a6", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -458,7 +458,7 @@ where\n             );\n             debug!(\"projection_must_outlive: unique declared bound appears in trait ref\");\n             self.delegate\n-                .push_sub_region_constraint(origin.clone(), region, unique_bound);\n+                .push_sub_region_constraint(origin, region, unique_bound);\n             return;\n         }\n "}, {"sha": "c82603bf5605788cbd6db75fb9708df35087c6cc", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -749,7 +749,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n                 a // LUB(a,a) = a\n             }\n \n-            _ => self.combine_vars(tcx, Lub, a, b, origin.clone()),\n+            _ => self.combine_vars(tcx, Lub, a, b, origin),\n         }\n     }\n \n@@ -771,7 +771,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n                 a // GLB(a,a) = a\n             }\n \n-            _ => self.combine_vars(tcx, Glb, a, b, origin.clone()),\n+            _ => self.combine_vars(tcx, Glb, a, b, origin),\n         }\n     }\n "}, {"sha": "f21f949c9f5cd220d8508c0e95225d1c7e6c6fd0", "filename": "src/librustc/macros.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmacros.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -83,7 +83,14 @@ macro_rules! __impl_stable_hash_field {\n macro_rules! impl_stable_hash_for {\n     // FIXME(mark-i-m): Some of these should be `?` rather than `*`. See the git blame and change\n     // them back when `?` is supported again.\n-    (enum $enum_name:path { $( $variant:ident $( ( $($field:ident $(-> $delegate:tt)*),* ) )* ),* $(,)* }) => {\n+    (enum $enum_name:path {\n+        $( $variant:ident\n+           // this incorrectly allows specifying both tuple-like and struct-like fields, as in `Variant(a,b){c,d}`,\n+           // when it should be only one or the other\n+           $( ( $($field:ident $(-> $delegate:tt)*),* ) )*\n+           $( { $($named_field:ident $(-> $named_delegate:tt)*),* } )*\n+        ),* $(,)*\n+    }) => {\n         impl<'a, 'tcx> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $enum_name {\n             #[inline]\n             fn hash_stable<W: ::rustc_data_structures::stable_hasher::StableHasherResult>(&self,\n@@ -94,8 +101,9 @@ macro_rules! impl_stable_hash_for {\n \n                 match *self {\n                     $(\n-                        $variant $( ( $(ref $field),* ) )* => {\n+                        $variant $( ( $(ref $field),* ) )* $( { $(ref $named_field),* } )* => {\n                             $($( __impl_stable_hash_field!($field, __ctx, __hasher $(, $delegate)*) );*)*\n+                            $($( __impl_stable_hash_field!($named_field, __ctx, __hasher $(, $named_delegate)*) );*)*\n                         }\n                     )*\n                 }\n@@ -133,10 +141,11 @@ macro_rules! impl_stable_hash_for {\n         }\n     };\n \n-    (impl<$tcx:lifetime $(, $T:ident)*> for struct $struct_name:path {\n-        $($field:ident),* $(,)*\n+    (impl<$tcx:lifetime $(, $lt:lifetime $(: $lt_bound:lifetime)*)* $(, $T:ident)*> for struct $struct_name:path {\n+        $($field:ident $(-> $delegate:tt)*),* $(,)*\n     }) => {\n-        impl<'a, $tcx, $($T,)*> ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n+        impl<'a, $tcx, $($lt $(: $lt_bound)*,)* $($T,)*>\n+            ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>> for $struct_name\n             where $($T: ::rustc_data_structures::stable_hasher::HashStable<$crate::ich::StableHashingContext<'a>>),*\n         {\n             #[inline]\n@@ -147,7 +156,7 @@ macro_rules! impl_stable_hash_for {\n                     $(ref $field),*\n                 } = *self;\n \n-                $( $field.hash_stable(__ctx, __hasher));*\n+                $( __impl_stable_hash_field!($field, __ctx, __hasher $(, $delegate)*) );*\n             }\n         }\n     };"}, {"sha": "7c3d4713572b9c6c0358b3930d69fcc977df17d6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1674,6 +1674,10 @@ impl<'tcx> Statement<'tcx> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n     /// invalidating statement indices in `Location`s.\n     pub fn make_nop(&mut self) {\n+        // `Statement` contributes significantly to peak memory usage. Make\n+        // sure it doesn't get bigger.\n+        static_assert!(STATEMENT_IS_AT_MOST_56_BYTES: mem::size_of::<Statement<'_>>() <= 56);\n+\n         self.kind = StatementKind::Nop\n     }\n \n@@ -1737,7 +1741,7 @@ pub enum StatementKind<'tcx> {\n     /// - `Contravariant` -- requires that `T_y :> T`\n     /// - `Invariant` -- requires that `T_y == T`\n     /// - `Bivariant` -- no effect\n-    AscribeUserType(Place<'tcx>, ty::Variance, UserTypeAnnotation<'tcx>),\n+    AscribeUserType(Place<'tcx>, ty::Variance, Box<UserTypeAnnotation<'tcx>>),\n \n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,"}, {"sha": "a1e2b7a06468d0994bf76868942b3aa352097097", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -34,6 +34,7 @@ pub struct Preorder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     visited: BitSet<BasicBlock>,\n     worklist: Vec<BasicBlock>,\n+    root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Preorder<'a, 'tcx> {\n@@ -44,6 +45,7 @@ impl<'a, 'tcx> Preorder<'a, 'tcx> {\n             mir,\n             visited: BitSet::new_empty(mir.basic_blocks().len()),\n             worklist,\n+            root_is_start_block: root == START_BLOCK,\n         }\n     }\n }\n@@ -75,15 +77,19 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // All the blocks, minus the number of blocks we've visited.\n-        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+        let upper = self.mir.basic_blocks().len() - self.visited.count();\n \n-        // We will visit all remaining blocks exactly once.\n-        (remaining, Some(remaining))\n+        let lower = if self.root_is_start_block {\n+            // We will visit all remaining blocks exactly once.\n+            upper\n+        } else {\n+            self.worklist.len()\n+        };\n+\n+        (lower, Some(upper))\n     }\n }\n \n-impl<'a, 'tcx> ExactSizeIterator for Preorder<'a, 'tcx> {}\n-\n /// Postorder traversal of a graph.\n ///\n /// Postorder traversal is when each node is visited after all of it's\n@@ -105,15 +111,17 @@ impl<'a, 'tcx> ExactSizeIterator for Preorder<'a, 'tcx> {}\n pub struct Postorder<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n     visited: BitSet<BasicBlock>,\n-    visit_stack: Vec<(BasicBlock, Successors<'a>)>\n+    visit_stack: Vec<(BasicBlock, Successors<'a>)>,\n+    root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     pub fn new(mir: &'a Mir<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {\n         let mut po = Postorder {\n             mir,\n             visited: BitSet::new_empty(mir.basic_blocks().len()),\n-            visit_stack: Vec::new()\n+            visit_stack: Vec::new(),\n+            root_is_start_block: root == START_BLOCK,\n         };\n \n \n@@ -214,15 +222,19 @@ impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {\n \n     fn size_hint(&self) -> (usize, Option<usize>) {\n         // All the blocks, minus the number of blocks we've visited.\n-        let remaining = self.mir.basic_blocks().len() - self.visited.count();\n+        let upper = self.mir.basic_blocks().len() - self.visited.count();\n \n-        // We will visit all remaining blocks exactly once.\n-        (remaining, Some(remaining))\n+        let lower = if self.root_is_start_block {\n+            // We will visit all remaining blocks exactly once.\n+            upper\n+        } else {\n+            self.visit_stack.len()\n+        };\n+\n+        (lower, Some(upper))\n     }\n }\n \n-impl<'a, 'tcx> ExactSizeIterator for Postorder<'a, 'tcx> {}\n-\n /// Reverse postorder traversal of a graph\n ///\n /// Reverse postorder is the reverse order of a postorder traversal."}, {"sha": "15a0adc3c06928ad8ebbe9542c61bc56011b40a2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -239,7 +239,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n             let msg = format!(\"type mismatch resolving `{}`\", predicate);\n             let error_id = (DiagnosticMessageId::ErrorId(271),\n-                            Some(obligation.cause.span), msg.clone());\n+                            Some(obligation.cause.span), msg);\n             let fresh = self.tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n             if fresh {\n                 let mut diag = struct_span_err!(\n@@ -379,7 +379,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n         if let Some(t) = self.get_parent_trait_ref(&obligation.cause.code) {\n-            flags.push((\"parent_trait\".to_owned(), Some(t.to_string())));\n+            flags.push((\"parent_trait\".to_owned(), Some(t)));\n         }\n \n         if let Some(k) = obligation.cause.span.compiler_desugaring_kind() {"}, {"sha": "4eda47d31ebb54cd11f5ecec427378ef3c7c0b56", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -594,7 +594,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n \n             // But for now, let's classify this as an overflow:\n             let recursion_limit = *selcx.tcx().sess.recursion_limit.get();\n-            let obligation = Obligation::with_depth(cause.clone(),\n+            let obligation = Obligation::with_depth(cause,\n                                                     recursion_limit,\n                                                     param_env,\n                                                     projection_ty);"}, {"sha": "2ea16823cc65dadd3ef12f06860045dc75d73c9a", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1522,6 +1522,33 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             .map(|v| v.get(tcx))\n     }\n \n+    /// Determines whether can we safely cache the result\n+    /// of selecting an obligation. This is almost always 'true',\n+    /// except when dealing with certain ParamCandidates.\n+    ///\n+    /// Ordinarily, a ParamCandidate will contain no inference variables,\n+    /// since it was usually produced directly from a DefId. However,\n+    /// certain cases (currently only librustdoc's blanket impl finder),\n+    /// a ParamEnv may be explicitly constructed with inference types.\n+    /// When this is the case, we do *not* want to cache the resulting selection\n+    /// candidate. This is due to the fact that it might not always be possible\n+    /// to equate the obligation's trait ref and the candidate's trait ref,\n+    /// if more constraints end up getting added to an inference variable.\n+    ///\n+    /// Because of this, we always want to re-run the full selection\n+    /// process for our obligation the next time we see it, since\n+    /// we might end up picking a different SelectionCandidate (or none at all)\n+    fn can_cache_candidate(&self,\n+        result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>\n+     ) -> bool {\n+        match result {\n+            Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => {\n+                !trait_ref.skip_binder().input_types().any(|t| t.walk().any(|t_| t_.is_ty_infer()))\n+            },\n+            _ => true\n+        }\n+    }\n+\n     fn insert_candidate_cache(\n         &mut self,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -1531,6 +1558,14 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     ) {\n         let tcx = self.tcx();\n         let trait_ref = cache_fresh_trait_pred.skip_binder().trait_ref;\n+\n+        if !self.can_cache_candidate(&candidate) {\n+            debug!(\"insert_candidate_cache(trait_ref={:?}, candidate={:?} -\\\n+                    candidate is not cacheable\", trait_ref, candidate);\n+            return;\n+\n+        }\n+\n         if self.can_use_global_caches(param_env) {\n             if let Err(Overflow) = candidate {\n                 // Don't cache overflow globally; we only produce this"}, {"sha": "1686e3e0e0c09aeac74d2d5c2c91571fc4ddb9b2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1200,7 +1200,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             cstore,\n             global_arenas: &arenas.global,\n             global_interners: interners,\n-            dep_graph: dep_graph.clone(),\n+            dep_graph,\n             types: common_types,\n             trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {"}, {"sha": "bf8d02313035cb7fb266b58291b5825d4b66c7d9", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -695,7 +695,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 let mut err = self.cannot_act_on_moved_value(use_span,\n                                                              verb,\n                                                              msg,\n-                                                             Some(nl.to_string()),\n+                                                             Some(nl),\n                                                              Origin::Ast);\n                 let need_note = match lp.ty.sty {\n                     ty::Closure(id, _) => {"}, {"sha": "8aa2e4641d4f9af5a9216f5082d87696b977dabf", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -347,7 +347,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             lp = base_lp.clone();\n         }\n \n-        self.add_move_helper(tcx, orig_lp.clone(), id, kind);\n+        self.add_move_helper(tcx, orig_lp, id, kind);\n     }\n \n     fn add_move_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -359,7 +359,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                id,\n                kind);\n \n-        let path_index = self.move_path(tcx, lp.clone());\n+        let path_index = self.move_path(tcx, lp);\n         let move_index = MoveIndex(self.moves.borrow().len());\n \n         let next_move = self.path_first_move(path_index);\n@@ -402,7 +402,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             }\n         }\n \n-        self.add_assignment_helper(tcx, lp.clone(), assign_id, span);\n+        self.add_assignment_helper(tcx, lp, assign_id, span);\n     }\n \n     fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "a9119d49e8b207d49501d789663db2812354c048", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -784,7 +784,7 @@ pub fn codegen_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n        !tcx.sess.opts.output_types.should_codegen() {\n         let ongoing_codegen = write::start_async_codegen(\n             tcx,\n-            time_graph.clone(),\n+            time_graph,\n             metadata,\n             rx,\n             1);"}, {"sha": "66e98793f420d737954619b61010e4c45648473b", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -138,7 +138,7 @@ pub fn filename_for_input(sess: &Session,\n             let suffix = &sess.target.target.options.exe_suffix;\n             let out_filename = outputs.path(OutputType::Exe);\n             if suffix.is_empty() {\n-                out_filename.to_path_buf()\n+                out_filename\n             } else {\n                 out_filename.with_extension(&suffix[1..])\n             }"}, {"sha": "b2b92a6f857845ef8d626147cc6fc9cf0f4b8df6", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1615,7 +1615,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ProjectionElem::Index(..)\n                 | ProjectionElem::ConstantIndex { .. }\n                 | ProjectionElem::Subslice { .. } => {\n-                    self.describe_field(&proj.base, field).to_string()\n+                    self.describe_field(&proj.base, field)\n                 }\n             },\n         }"}, {"sha": "ff4651dfb45cd650e6e59a7f7f6cda0f7447f534", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1225,7 +1225,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 };\n             }\n-            StatementKind::AscribeUserType(ref place, variance, c_ty) => {\n+            StatementKind::AscribeUserType(ref place, variance, box c_ty) => {\n                 let place_ty = place.ty(mir, tcx).to_ty(tcx);\n                 if let Err(terr) = self.relate_type_and_user_type(\n                     place_ty,"}, {"sha": "8d6b6bb5c74f133b491e94181a2e3e4fc9a6ea9b", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -147,7 +147,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             kind: StatementKind::AscribeUserType(\n                                 place.clone(),\n                                 Variance::Invariant,\n-                                user_ty,\n+                                box user_ty,\n                             ),\n                         },\n                     );\n@@ -167,7 +167,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             kind: StatementKind::AscribeUserType(\n                                 Place::Local(temp.clone()),\n                                 Variance::Invariant,\n-                                user_ty,\n+                                box user_ty,\n                             ),\n                         },\n                     );"}, {"sha": "2f271e072c6e3254d324a674427518e0264b195b", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -265,7 +265,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     block,\n                     Statement {\n                         source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place.clone()),\n+                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, place),\n                     },\n                 );\n \n@@ -314,9 +314,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     Statement {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n-                            place.clone(),\n+                            place,\n                             ty::Variance::Invariant,\n-                            ascription_user_ty,\n+                            box ascription_user_ty,\n                         ),\n                     },\n                 );\n@@ -1323,7 +1323,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     kind: StatementKind::AscribeUserType(\n                         ascription.source.clone(),\n                         ty::Variance::Covariant,\n-                        ascription.user_ty,\n+                        box ascription.user_ty,\n                     ),\n                 },\n             );"}, {"sha": "9e6f32909bdea00cb97abd1cae78e963e2d36726", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let ref_ty = self.hir.tcx().mk_ref(region, tam);\n \n                     // let lhs_ref_place = &lhs;\n-                    let ref_rvalue = Rvalue::Ref(region, BorrowKind::Shared, place.clone());\n+                    let ref_rvalue = Rvalue::Ref(region, BorrowKind::Shared, place);\n                     let lhs_ref_place = self.temp(ref_ty, test.span);\n                     self.cfg.push_assign(block, source_info, &lhs_ref_place, ref_rvalue);\n                     let val = Operand::Move(lhs_ref_place);"}, {"sha": "6ea4628de24e91ed35732c85e5311de98fb676d7", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -644,7 +644,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n         }).collect()\n     });\n \n-    let mut builder = Builder::new(hir.clone(),\n+    let mut builder = Builder::new(hir,\n         span,\n         arguments.len(),\n         safety,\n@@ -714,7 +714,7 @@ fn construct_const<'a, 'gcx, 'tcx>(\n     let ty = hir.tables().expr_ty_adjusted(ast_expr);\n     let owner_id = tcx.hir.body_owner(body_id);\n     let span = tcx.hir.span(owner_id);\n-    let mut builder = Builder::new(hir.clone(), span, 0, Safety::Safe, ty, ty_span,vec![]);\n+    let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, ty_span,vec![]);\n \n     let mut block = START_BLOCK;\n     let expr = builder.hir.mirror(ast_expr);"}, {"sha": "d53bb1dc4d63a255e12ee4add8dcd8200e605339", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 66, "deletions": 19, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -931,12 +931,37 @@ impl<'tcx> IntRange<'tcx> {\n     }\n }\n \n-// Return a set of constructors equivalent to `all_ctors \\ used_ctors`.\n+// A request for missing constructor data in terms of either:\n+// - whether or not there any missing constructors; or\n+// - the actual set of missing constructors.\n+#[derive(PartialEq)]\n+enum MissingCtorsInfo {\n+    Emptiness,\n+    Ctors,\n+}\n+\n+// Used by `compute_missing_ctors`.\n+#[derive(Debug, PartialEq)]\n+enum MissingCtors<'tcx> {\n+    Empty,\n+    NonEmpty,\n+\n+    // Note that the Vec can be empty.\n+    Ctors(Vec<Constructor<'tcx>>),\n+}\n+\n+// When `info` is `MissingCtorsInfo::Ctors`, compute a set of constructors\n+// equivalent to `all_ctors \\ used_ctors`. When `info` is\n+// `MissingCtorsInfo::Emptiness`, just determines if that set is empty or not.\n+// (The split logic gives a performance win, because we always need to know if\n+// the set is empty, but we rarely need the full set, and it can be expensive\n+// to compute the full set.)\n fn compute_missing_ctors<'a, 'tcx: 'a>(\n+    info: MissingCtorsInfo,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     all_ctors: &Vec<Constructor<'tcx>>,\n     used_ctors: &Vec<Constructor<'tcx>>,\n-) -> Vec<Constructor<'tcx>> {\n+) -> MissingCtors<'tcx> {\n     let mut missing_ctors = vec![];\n \n     for req_ctor in all_ctors {\n@@ -965,10 +990,22 @@ fn compute_missing_ctors<'a, 'tcx: 'a>(\n         // We add `refined_ctors` instead of `req_ctor`, because then we can\n         // provide more detailed error information about precisely which\n         // ranges have been omitted.\n-        missing_ctors.extend(refined_ctors);\n+        if info == MissingCtorsInfo::Emptiness {\n+            if !refined_ctors.is_empty() {\n+                // The set is non-empty; return early.\n+                return MissingCtors::NonEmpty;\n+            }\n+        } else {\n+            missing_ctors.extend(refined_ctors);\n+        }\n     }\n \n-    missing_ctors\n+    if info == MissingCtorsInfo::Emptiness {\n+        // If we reached here, the set is empty.\n+        MissingCtors::Empty\n+    } else {\n+        MissingCtors::Ctors(missing_ctors)\n+    }\n }\n \n /// Algorithm from http://moscova.inria.fr/~maranget/papers/warn/index.html\n@@ -1081,20 +1118,23 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         // feature flag is not present, so this is only\n         // needed for that case.\n \n-        // Find those constructors that are not matched by any non-wildcard patterns in the\n-        // current column.\n-        let missing_ctors = compute_missing_ctors(cx.tcx, &all_ctors, &used_ctors);\n+        // Missing constructors are those that are not matched by any\n+        // non-wildcard patterns in the current column. We always determine if\n+        // the set is empty, but we only fully construct them on-demand,\n+        // because they're rarely used and can be big.\n+        let cheap_missing_ctors =\n+            compute_missing_ctors(MissingCtorsInfo::Emptiness, cx.tcx, &all_ctors, &used_ctors);\n \n         let is_privately_empty = all_ctors.is_empty() && !cx.is_uninhabited(pcx.ty);\n         let is_declared_nonexhaustive = cx.is_non_exhaustive_enum(pcx.ty) && !cx.is_local(pcx.ty);\n-        debug!(\"missing_ctors={:#?} is_privately_empty={:#?} is_declared_nonexhaustive={:#?}\",\n-               missing_ctors, is_privately_empty, is_declared_nonexhaustive);\n+        debug!(\"cheap_missing_ctors={:#?} is_privately_empty={:#?} is_declared_nonexhaustive={:#?}\",\n+               cheap_missing_ctors, is_privately_empty, is_declared_nonexhaustive);\n \n         // For privately empty and non-exhaustive enums, we work as if there were an \"extra\"\n         // `_` constructor for the type, so we can never match over all constructors.\n         let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive;\n \n-        if missing_ctors.is_empty() && !is_non_exhaustive {\n+        if cheap_missing_ctors == MissingCtors::Empty && !is_non_exhaustive {\n             split_grouped_constructors(cx.tcx, all_ctors, matrix, pcx.ty).into_iter().map(|c| {\n                 is_useful_specialized(cx, matrix, v, c, pcx.ty, witness)\n             }).find(|result| result.is_useful()).unwrap_or(NotUseful)\n@@ -1165,15 +1205,22 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                             witness\n                         }).collect()\n                     } else {\n-                        pats.into_iter().flat_map(|witness| {\n-                            missing_ctors.iter().map(move |ctor| {\n-                                // Extends the witness with a \"wild\" version of this\n-                                // constructor, that matches everything that can be built with\n-                                // it. For example, if `ctor` is a `Constructor::Variant` for\n-                                // `Option::Some`, this pushes the witness for `Some(_)`.\n-                                witness.clone().push_wild_constructor(cx, ctor, pcx.ty)\n-                            })\n-                        }).collect()\n+                        let expensive_missing_ctors =\n+                            compute_missing_ctors(MissingCtorsInfo::Ctors, cx.tcx, &all_ctors,\n+                                                  &used_ctors);\n+                        if let MissingCtors::Ctors(missing_ctors) = expensive_missing_ctors {\n+                            pats.into_iter().flat_map(|witness| {\n+                                missing_ctors.iter().map(move |ctor| {\n+                                    // Extends the witness with a \"wild\" version of this\n+                                    // constructor, that matches everything that can be built with\n+                                    // it. For example, if `ctor` is a `Constructor::Variant` for\n+                                    // `Option::Some`, this pushes the witness for `Some(_)`.\n+                                    witness.clone().push_wild_constructor(cx, ctor, pcx.ty)\n+                                })\n+                            }).collect()\n+                        } else {\n+                            bug!(\"cheap missing ctors\")\n+                        }\n                     };\n                     UsefulWithWitness(new_witnesses)\n                 }"}, {"sha": "cff2288fd8720c3ac04cd97045a105d8617d8d29", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 25, "deletions": 70, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -6,9 +6,8 @@\n // it is not used by the general miri engine, just by CTFE.\n \n use std::hash::{Hash, Hasher};\n-use std::mem;\n \n-use rustc::ich::{StableHashingContext, StableHashingContextProvider};\n+use rustc::ich::StableHashingContextProvider;\n use rustc::mir;\n use rustc::mir::interpret::{\n     AllocId, Pointer, Scalar,\n@@ -20,7 +19,7 @@ use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::Align;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use syntax::ast::Mutability;\n use syntax::source_map::Span;\n \n@@ -217,23 +216,10 @@ impl_snapshot_for!(struct MemPlace {\n     align -> *align, // just copy alignment verbatim\n });\n \n-// Can't use the macro here because that does not support named enum fields.\n-impl<'a> HashStable<StableHashingContext<'a>> for Place {\n-    fn hash_stable<W: StableHasherResult>(\n-        &self, hcx: &mut StableHashingContext<'a>,\n-        hasher: &mut StableHasher<W>)\n-    {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        match self {\n-            Place::Ptr(mem_place) => mem_place.hash_stable(hcx, hasher),\n-\n-            Place::Local { frame, local } => {\n-                frame.hash_stable(hcx, hasher);\n-                local.hash_stable(hcx, hasher);\n-            },\n-        }\n-    }\n-}\n+impl_stable_hash_for!(enum ::interpret::Place {\n+    Ptr(mem_place),\n+    Local { frame, local },\n+});\n impl<'a, Ctx> Snapshot<'a, Ctx> for Place\n     where Ctx: SnapshotContext<'a>,\n {\n@@ -317,20 +303,10 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for &'a Allocation\n     }\n }\n \n-// Can't use the macro here because that does not support named enum fields.\n-impl<'a> HashStable<StableHashingContext<'a>> for StackPopCleanup {\n-    fn hash_stable<W: StableHasherResult>(\n-        &self,\n-        hcx: &mut StableHashingContext<'a>,\n-        hasher: &mut StableHasher<W>)\n-    {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        match self {\n-            StackPopCleanup::Goto(ref block) => block.hash_stable(hcx, hasher),\n-            StackPopCleanup::None { cleanup } => cleanup.hash_stable(hcx, hasher),\n-        }\n-    }\n-}\n+impl_stable_hash_for!(enum ::interpret::eval_context::StackPopCleanup {\n+    Goto(block),\n+    None { cleanup },\n+});\n \n #[derive(Eq, PartialEq)]\n struct FrameSnapshot<'a, 'tcx: 'a> {\n@@ -343,28 +319,17 @@ struct FrameSnapshot<'a, 'tcx: 'a> {\n     stmt: usize,\n }\n \n-// Not using the macro because that does not support types depending on two lifetimes\n-impl<'a, 'mir, 'tcx: 'mir> HashStable<StableHashingContext<'a>> for Frame<'mir, 'tcx> {\n-    fn hash_stable<W: StableHasherResult>(\n-        &self,\n-        hcx: &mut StableHashingContext<'a>,\n-        hasher: &mut StableHasher<W>) {\n-\n-        let Frame {\n-            mir,\n-            instance,\n-            span,\n-            return_to_block,\n-            return_place,\n-            locals,\n-            block,\n-            stmt,\n-        } = self;\n+impl_stable_hash_for!(impl<'tcx, 'mir: 'tcx> for struct Frame<'mir, 'tcx> {\n+    mir,\n+    instance,\n+    span,\n+    return_to_block,\n+    return_place -> (return_place.as_ref().map(|r| &**r)),\n+    locals,\n+    block,\n+    stmt,\n+});\n \n-        (mir, instance, span, return_to_block).hash_stable(hcx, hasher);\n-        (return_place.as_ref().map(|r| &**r), locals, block, stmt).hash_stable(hcx, hasher);\n-    }\n-}\n impl<'a, 'mir, 'tcx, Ctx> Snapshot<'a, Ctx> for &'a Frame<'mir, 'tcx>\n     where Ctx: SnapshotContext<'a>,\n {\n@@ -443,21 +408,11 @@ impl<'a, 'mir, 'tcx> Hash for EvalSnapshot<'a, 'mir, 'tcx>\n     }\n }\n \n-// Not using the macro because we need special handling for `memory`, which the macro\n-// does not support at the same time as the extra bounds on the type.\n-impl<'a, 'b, 'mir, 'tcx> HashStable<StableHashingContext<'b>>\n-    for EvalSnapshot<'a, 'mir, 'tcx>\n-{\n-    fn hash_stable<W: StableHasherResult>(\n-        &self,\n-        hcx: &mut StableHashingContext<'b>,\n-        hasher: &mut StableHasher<W>)\n-    {\n-        // Not hashing memory: Avoid hashing memory all the time during execution\n-        let EvalSnapshot{ memory: _, stack } = self;\n-        stack.hash_stable(hcx, hasher);\n-    }\n-}\n+impl_stable_hash_for!(impl<'tcx, 'b, 'mir> for struct EvalSnapshot<'b, 'mir, 'tcx> {\n+    // Not hashing memory: Avoid hashing memory all the time during execution\n+    memory -> _,\n+    stack,\n+});\n \n impl<'a, 'mir, 'tcx> Eq for EvalSnapshot<'a, 'mir, 'tcx>\n {}"}, {"sha": "25e2ff6edb7630a60a2c2d332e2c7ae2a214f920", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -463,7 +463,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         // Validate all fields of compound data structures\n         let path_len = path.len(); // Remember the length, in case we need to truncate\n         match dest.layout.fields {\n-            layout::FieldPlacement::Union(..) => {\n+            layout::FieldPlacement::Union(fields) => {\n+                // Empty unions are not accepted by rustc. That's great, it means we can\n+                // use that as an unambiguous signal for detecting primitives.  Make sure\n+                // we did not miss any primitive.\n+                debug_assert!(fields > 0);\n                 // We can't check unions, their bits are allowed to be anything.\n                 // The fields don't need to correspond to any bit pattern of the union's fields.\n                 // See https://github.com/rust-lang/rust/issues/32836#issuecomment-406875389"}, {"sha": "d8f627fcf4dd74ae3affaa27eb1578d33509fa3a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         // `dest[i] = Clone::clone(src[beg])`;\n         // Goto #3 if ok, #5 if unwinding happens.\n         let dest_field = dest.clone().index(beg);\n-        let src_field = src.clone().index(beg);\n+        let src_field = src.index(beg);\n         self.make_clone_call(dest_field, src_field, ty, BasicBlock::new(3),\n                              BasicBlock::new(5));\n "}, {"sha": "5114fa879746b0a0f64369310abc772d452cd882", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -333,6 +333,14 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let operand = Operand::Copy(promoted_place(ty, span));\n                             mem::replace(&mut args[index], operand)\n                         }\n+                        // We expected a `TerminatorKind::Call` for which we'd like to promote an\n+                        // argument. `qualify_consts` saw a `TerminatorKind::Call` here, but\n+                        // we are seeing a `Goto`. That means that the `promote_temps` method\n+                        // already promoted this call away entirely. This case occurs when calling\n+                        // a function requiring a constant argument and as that constant value\n+                        // providing a value whose computation contains another call to a function\n+                        // requiring a constant argument.\n+                        TerminatorKind::Goto { .. } => return,\n                         _ => bug!()\n                     }\n                 }"}, {"sha": "c4d8ec35868835d50892a5d3a422e5a537878bfd", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -820,7 +820,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n             let mut callee_def_id = None;\n-            let (mut is_shuffle, mut is_const_fn) = (false, false);\n+            let mut is_shuffle = false;\n+            let mut is_const_fn = false;\n+            let mut is_promotable_const_fn = false;\n             if let ty::FnDef(def_id, _) = fn_ty.sty {\n                 callee_def_id = Some(def_id);\n                 match self.tcx.fn_sig(def_id).abi() {\n@@ -881,6 +883,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             // functions without #[rustc_promotable]\n                             if self.tcx.is_promotable_const_fn(def_id) {\n                                 is_const_fn = true;\n+                                is_promotable_const_fn = true;\n+                            } else if self.tcx.is_const_fn(def_id) {\n+                                is_const_fn = true;\n                             }\n                         } else {\n                             // stable const fn or unstable const fns with their feature gate\n@@ -982,7 +987,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if !constant_arguments.contains(&i) {\n                         return\n                     }\n-                    if this.qualif.is_empty() {\n+                    // Since the argument is required to be constant,\n+                    // we care about constness, not promotability.\n+                    // If we checked for promotability, we'd miss out on\n+                    // the results of function calls (which are never promoted\n+                    // in runtime code)\n+                    // This is not a problem, because the argument explicitly\n+                    // requests constness, in contrast to regular promotion\n+                    // which happens even without the user requesting it.\n+                    // We can error out with a hard error if the argument is not\n+                    // constant here.\n+                    if (this.qualif - Qualif::NOT_PROMOTABLE).is_empty() {\n                         this.promotion_candidates.push(candidate);\n                     } else {\n                         this.tcx.sess.span_err(this.span,\n@@ -1011,7 +1026,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     // Be conservative about the returned value of a const fn.\n                     let tcx = self.tcx;\n                     let ty = dest.ty(self.mir, tcx).to_ty(tcx);\n-                    self.qualif = Qualif::empty();\n+                    if is_const_fn && !is_promotable_const_fn && self.mode == Mode::Fn {\n+                        self.qualif = Qualif::NOT_PROMOTABLE;\n+                    } else {\n+                        self.qualif = Qualif::empty();\n+                    }\n                     self.add_type(ty);\n                 }\n                 self.assign(dest, location);"}, {"sha": "d9a1e4a0fd63948d475b879340efced2c0918222", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -753,11 +753,11 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 self.place.clone()\n             )));\n             drop_block_stmts.push(self.assign(&cur, Rvalue::Cast(\n-                CastKind::Misc, Operand::Move(tmp.clone()), iter_ty\n+                CastKind::Misc, Operand::Move(tmp), iter_ty\n             )));\n             drop_block_stmts.push(self.assign(&length_or_end,\n                 Rvalue::BinaryOp(BinOp::Offset,\n-                     Operand::Copy(cur.clone()), Operand::Move(length.clone())\n+                     Operand::Copy(cur), Operand::Move(length)\n             )));\n         } else {\n             // index = 0 (length already pushed)"}, {"sha": "a43a3c6ac5a606213e36959711bf89fa9c5f14ec", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -218,7 +218,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 };\n                 this.add_import_directive(\n                     base.into_iter().collect(),\n-                    subclass.clone(),\n+                    subclass,\n                     source.ident.span,\n                     id,\n                     root_use_tree.span,"}, {"sha": "c0b718e4863fc05afaf06e649433194f7dddea5f", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -105,7 +105,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             tcx: save_ctxt.tcx,\n             save_ctxt,\n             dumper,\n-            span: span_utils.clone(),\n+            span: span_utils,\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: FxHashSet::default(),\n             macro_calls: FxHashSet::default(),"}, {"sha": "d43d45f64a55c8fc57b46218d79cfa9abbe2a275", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1132,7 +1132,7 @@ impl ToJson for Target {\n         macro_rules! target_val {\n             ($attr:ident) => ( {\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                d.insert(name.to_string(), self.$attr.to_json());\n+                d.insert(name, self.$attr.to_json());\n             } );\n             ($attr:ident, $key_name:expr) => ( {\n                 let name = $key_name;\n@@ -1144,7 +1144,7 @@ impl ToJson for Target {\n             ($attr:ident) => ( {\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n                 if default.$attr != self.options.$attr {\n-                    d.insert(name.to_string(), self.options.$attr.to_json());\n+                    d.insert(name, self.options.$attr.to_json());\n                 }\n             } );\n             ($attr:ident, $key_name:expr) => ( {\n@@ -1160,7 +1160,7 @@ impl ToJson for Target {\n                         .iter()\n                         .map(|(k, v)| (k.desc().to_owned(), v.clone()))\n                         .collect::<BTreeMap<_, _>>();\n-                    d.insert(name.to_string(), obj.to_json());\n+                    d.insert(name, obj.to_json());\n                 }\n             } );\n             (env - $attr:ident) => ( {\n@@ -1170,7 +1170,7 @@ impl ToJson for Target {\n                         .iter()\n                         .map(|&(ref k, ref v)| k.clone() + \"=\" + &v)\n                         .collect::<Vec<_>>();\n-                    d.insert(name.to_string(), obj.to_json());\n+                    d.insert(name, obj.to_json());\n                 }\n             } );\n "}, {"sha": "73489309d074247bcb5ca595f5a474997e332269", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n             let suggested_limit = *tcx.sess.recursion_limit.get() * 2;\n             let msg = format!(\"reached the recursion limit while auto-dereferencing {:?}\",\n                               self.cur_ty);\n-            let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg.clone());\n+            let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg);\n             let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n             if fresh {\n                 struct_span_err!(tcx.sess,"}, {"sha": "3bdd038bff19c2560f81b3d64ce9368a5db95b76", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -61,7 +61,7 @@\n //! we may want to adjust precisely when coercions occur.\n \n use check::{FnCtxt, Needs};\n-\n+use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk};\n@@ -72,14 +72,12 @@ use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n-use errors::DiagnosticBuilder;\n+use smallvec::{smallvec, SmallVec};\n+use std::ops::Deref;\n use syntax::feature_gate;\n use syntax::ptr::P;\n use syntax_pos;\n \n-use std::collections::VecDeque;\n-use std::ops::Deref;\n-\n struct Coerce<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     cause: ObligationCause<'tcx>,\n@@ -536,26 +534,32 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n         let mut selcx = traits::SelectionContext::new(self);\n \n-        // Use a FIFO queue for this custom fulfillment procedure. (The maximum\n-        // length is almost always 1.)\n-        let mut queue = VecDeque::with_capacity(1);\n-\n         // Create an obligation for `Source: CoerceUnsized<Target>`.\n         let cause = ObligationCause::misc(self.cause.span, self.body_id);\n-        queue.push_back(self.tcx.predicate_for_trait_def(self.fcx.param_env,\n-                                                         cause,\n-                                                         coerce_unsized_did,\n-                                                         0,\n-                                                         coerce_source,\n-                                                         &[coerce_target.into()]));\n+\n+        // Use a FIFO queue for this custom fulfillment procedure.\n+        //\n+        // A Vec (or SmallVec) is not a natural choice for a queue. However,\n+        // this code path is hot, and this queue usually has a max length of 1\n+        // and almost never more than 3. By using a SmallVec we avoid an\n+        // allocation, at the (very small) cost of (occasionally) having to\n+        // shift subsequent elements down when removing the front element.\n+        let mut queue: SmallVec<[_; 4]> =\n+            smallvec![self.tcx.predicate_for_trait_def(self.fcx.param_env,\n+                                                       cause,\n+                                                       coerce_unsized_did,\n+                                                       0,\n+                                                       coerce_source,\n+                                                       &[coerce_target.into()])];\n \n         let mut has_unsized_tuple_coercion = false;\n \n         // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid\n         // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where\n         // inference might unify those two inner type variables later.\n         let traits = [coerce_unsized_did, unsize_did];\n-        while let Some(obligation) = queue.pop_front() {\n+        while !queue.is_empty() {\n+            let obligation = queue.remove(0);\n             debug!(\"coerce_unsized resolve step: {:?}\", obligation);\n             let trait_ref = match obligation.predicate {\n                 ty::Predicate::Trait(ref tr) if traits.contains(&tr.def_id()) => {"}, {"sha": "54c6c8f7b9322aba35bf87570aa138a7eb387fb0", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -325,7 +325,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         diag.span_suggestion_with_applicability(\n                             impl_err_span,\n                             \"consider change the type to match the mutability in trait\",\n-                            trait_err_str.to_string(),\n+                            trait_err_str,\n                             Applicability::MachineApplicable,\n                         );\n                     }"}, {"sha": "c506f23078f25fe32a3735103a85a84c4411f577", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1157,7 +1157,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics(\n-                        cause.clone(), self.param_env, &impl_bounds);\n+                        cause, self.param_env, &impl_bounds);\n \n                     debug!(\"impl_obligations={:?}\", impl_obligations);\n                     impl_obligations.into_iter()\n@@ -1175,7 +1175,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 TraitCandidate(trait_ref) => {\n                     let predicate = trait_ref.to_predicate();\n                     let obligation =\n-                        traits::Obligation::new(cause.clone(), self.param_env, predicate);\n+                        traits::Obligation::new(cause, self.param_env, predicate);\n                     if !self.predicate_may_hold(&obligation) {\n                         if self.probe(|_| self.select_trait_candidate(trait_ref).is_err()) {\n                             // This candidate's primary obligation doesn't even"}, {"sha": "845631475aeaf5814126ce81413e02ddbc920ffb", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -4745,25 +4745,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n-                let suggestions = iter::repeat(expr_text).zip(methods.iter())\n+                let suggestions = iter::repeat(&expr_text).zip(methods.iter())\n                     .filter_map(|(receiver, method)| {\n                         let method_call = format!(\".{}()\", method.ident);\n                         if receiver.ends_with(&method_call) {\n                             None  // do not suggest code that is already there (#53348)\n                         } else {\n-                            /*\n-                            methods defined in `method_call_list` will overwrite\n-                            `.clone()` in copy of `receiver`\n-                            */\n                             let method_call_list = [\".to_vec()\", \".to_string()\"];\n                             if receiver.ends_with(\".clone()\")\n-                                    && method_call_list.contains(&method_call.as_str()){\n-                                // created copy of `receiver` because we don't want other\n-                                // suggestion to get affected\n-                                let mut new_receiver = receiver.clone();\n-                                let max_len = new_receiver.rfind(\".\").unwrap();\n-                                new_receiver.truncate(max_len);\n-                                Some(format!(\"{}{}\", new_receiver, method_call))\n+                                    && method_call_list.contains(&method_call.as_str()) {\n+                                let max_len = receiver.rfind(\".\").unwrap();\n+                                Some(format!(\"{}{}\", &receiver[..max_len], method_call))\n                             }\n                             else {\n                                 Some(format!(\"{}{}\", receiver, method_call))"}, {"sha": "fde8648c0c40ad7dbf0ba41ba60921709ab206fe", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -84,7 +84,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> AutoTraitFinder<'a, 'tcx, 'rcx, 'cstore> {\n             .into_iter()\n             .chain(self.get_auto_trait_impl_for(\n                 def_id,\n-                name.clone(),\n+                name,\n                 generics.clone(),\n                 def_ctor,\n                 tcx.require_lang_item(lang_items::SyncTraitLangItem),"}, {"sha": "8246c7bab27af8b461565885927a54f2571b86e6", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -50,6 +50,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n         name: Option<String>,\n     ) -> Vec<Item>\n     where F: Fn(DefId) -> Def {\n+        debug!(\"get_blanket_impls(def_id={:?}, ...)\", def_id);\n         let mut impls = Vec::new();\n         if self.cx\n             .tcx\n@@ -66,7 +67,7 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n         }\n         let ty = self.cx.tcx.type_of(def_id);\n         let generics = self.cx.tcx.generics_of(def_id);\n-        let real_name = name.clone().map(|name| Ident::from_str(&name));\n+        let real_name = name.map(|name| Ident::from_str(&name));\n         let param_env = self.cx.tcx.param_env(def_id);\n         for &trait_def_id in self.cx.all_traits.iter() {\n             if !self.cx.renderinfo.borrow().access_levels.is_doc_reachable(trait_def_id) ||\n@@ -78,6 +79,8 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n             }\n             self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n                 self.cx.tcx.infer_ctxt().enter(|infcx| {\n+                    debug!(\"get_blanet_impls: Considering impl for trait '{:?}' {:?}\",\n+                           trait_def_id, impl_def_id);\n                     let t_generics = infcx.tcx.generics_of(impl_def_id);\n                     let trait_ref = infcx.tcx.impl_trait_ref(impl_def_id)\n                                              .expect(\"Cannot get impl trait\");\n@@ -104,19 +107,23 @@ impl<'a, 'tcx, 'rcx, 'cstore> BlanketImplFinder <'a, 'tcx, 'rcx, 'cstore> {\n                         drop(obligations);\n \n                         debug!(\n-                            \"invoking predicate_may_hold: {:?}\",\n-                            trait_ref,\n+                            \"invoking predicate_may_hold: param_env={:?}, trait_ref={:?}, ty={:?}\",\n+                             param_env, trait_ref, ty\n                         );\n                         let may_apply = match infcx.evaluate_obligation(\n                             &traits::Obligation::new(\n-                                cause.clone(),\n+                                cause,\n                                 param_env,\n                                 trait_ref.to_predicate(),\n                             ),\n                         ) {\n                             Ok(eval_result) => eval_result.may_apply(),\n                             Err(traits::OverflowError) => true, // overflow doesn't mean yes *or* no\n                         };\n+                        debug!(\"get_blanket_impls: found applicable impl: {}\\\n+                               for trait_ref={:?}, ty={:?}\",\n+                               may_apply, trait_ref, ty);\n+\n                         if !may_apply {\n                             return\n                         }"}, {"sha": "88240e844edc23887fb5f66d4b4416854b8937f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -3611,7 +3611,7 @@ impl ToSource for syntax_pos::Span {\n     fn to_src(&self, cx: &DocContext) -> String {\n         debug!(\"converting span {:?} to snippet\", self.clean(cx));\n         let sn = match cx.sess().source_map().span_to_snippet(*self) {\n-            Ok(x) => x.to_string(),\n+            Ok(x) => x,\n             Err(_) => String::new()\n         };\n         debug!(\"got snippet {}\", sn);"}, {"sha": "6522261fe1e7c81a345f71783cdfcd1222202198", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -28,9 +28,12 @@ use syntax::parse;\n use syntax_pos::{Span, FileName};\n \n /// Highlights `src`, returning the HTML output.\n-pub fn render_with_highlighting(src: &str, class: Option<&str>,\n-                                extension: Option<&str>,\n-                                tooltip: Option<(&str, &str)>) -> String {\n+pub fn render_with_highlighting(\n+    src: &str,\n+    class: Option<&str>,\n+    extension: Option<&str>,\n+    tooltip: Option<(&str, &str)>,\n+) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n     let sess = parse::ParseSess::new(FilePathMapping::empty());\n     let fm = sess.source_map().new_source_file(FileName::Custom(\"stdin\".to_string()),\n@@ -384,9 +387,9 @@ impl Class {\n }\n \n fn write_header(class: Option<&str>, out: &mut dyn Write) -> io::Result<()> {\n-    write!(out, \"<pre class=\\\"rust {}\\\">\\n\", class.unwrap_or(\"\"))\n+    write!(out, \"<div class=\\\"example-wrap\\\"><pre class=\\\"rust {}\\\">\\n\", class.unwrap_or(\"\"))\n }\n \n fn write_footer(out: &mut dyn Write) -> io::Result<()> {\n-    write!(out, \"</pre>\\n\")\n+    write!(out, \"</pre></div>\\n\")\n }"}, {"sha": "8b35ede4a02c07ec86552e138f7b26ba31c7e802", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -521,7 +521,7 @@ pub fn run(mut krate: clean::Crate,\n             external_html: external_html.clone(),\n             krate: krate.name.clone(),\n         },\n-        css_file_extension: css_file_extension.clone(),\n+        css_file_extension,\n         created_dirs: Default::default(),\n         sort_modules_alphabetically,\n         themes,\n@@ -1343,7 +1343,7 @@ impl DocFolder for Cache {\n                         self.search_index.push(IndexItem {\n                             ty: item.type_(),\n                             name: s.to_string(),\n-                            path: path.join(\"::\").to_string(),\n+                            path: path.join(\"::\"),\n                             desc: plain_summary_line(item.doc_value()),\n                             parent,\n                             parent_idx: None,\n@@ -1709,6 +1709,7 @@ impl<'a> Settings<'a> {\n                 (\"method-docs\", \"Auto-hide item methods' documentation\", false),\n                 (\"go-to-only-result\", \"Directly go to item in search if there is only one result\",\n                  false),\n+                (\"line-numbers\", \"Show line numbers on code examples\", false),\n             ],\n             root_path,\n             suffix,\n@@ -2283,7 +2284,7 @@ fn document_short(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item, link\n             format!(\"{} [Read more]({})\",\n                     &plain_summary_line(Some(s)), naive_assoc_href(item, link))\n         } else {\n-            plain_summary_line(Some(s)).to_string()\n+            plain_summary_line(Some(s))\n         };\n         render_markdown(w, cx, &markdown, item.links(), prefix)?;\n     } else if !prefix.is_empty() {\n@@ -2435,7 +2436,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     // (which is the position in the vector).\n     indices.dedup_by_key(|i| (items[*i].def_id,\n                               if items[*i].name.as_ref().is_some() {\n-                                  Some(full_path(cx, &items[*i]).clone())\n+                                  Some(full_path(cx, &items[*i]))\n                               } else {\n                                   None\n                               },"}, {"sha": "9d1a5c38378308f6a6ca4c1ccb096b003d2e70ab", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2093,6 +2093,7 @@\n         return wrapper;\n     }\n \n+    var hideItemDeclarations = getCurrentValue('rustdoc-item-declarations') === \"false\";\n     onEach(document.getElementsByClassName('docblock'), function(e) {\n         if (hasClass(e, 'autohide')) {\n             var wrap = e.previousElementSibling;\n@@ -2116,16 +2117,14 @@\n             }\n         }\n         if (e.parentNode.id === \"main\") {\n-            var otherMessage;\n+            var otherMessage = '';\n             var fontSize;\n             var extraClass;\n-            var show = true;\n \n             if (hasClass(e, \"type-decl\")) {\n                 fontSize = \"20px\";\n                 otherMessage = '&nbsp;Show&nbsp;declaration';\n-                show = getCurrentValue('rustdoc-item-declarations') === \"false\";\n-                if (!show) {\n+                if (hideItemDeclarations === false) {\n                     extraClass = 'collapsed';\n                 }\n             } else if (hasClass(e, \"non-exhaustive\")) {\n@@ -2142,8 +2141,12 @@\n                 extraClass = \"marg-left\";\n             }\n \n-            e.parentNode.insertBefore(createToggle(otherMessage, fontSize, extraClass, show), e);\n-            if (otherMessage && show) {\n+            e.parentNode.insertBefore(createToggle(otherMessage,\n+                                                   fontSize,\n+                                                   extraClass,\n+                                                   hideItemDeclarations),\n+                                      e);\n+            if (otherMessage.length > 0 && hideItemDeclarations === true) {\n                 collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n             }\n         }\n@@ -2186,13 +2189,33 @@\n         });\n     }\n \n+    // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n+    var itemAttributesFunc = function() {};\n+    if (getCurrentValue(\"rustdoc-item-attributes\") !== \"false\") {\n+        itemAttributesFunc = function(x) {\n+            collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n+        };\n+    }\n     onEach(document.getElementById('main').getElementsByClassName('attributes'), function(i_e) {\n         i_e.parentNode.insertBefore(createToggleWrapper(toggle.cloneNode(true)), i_e);\n-        if (getCurrentValue(\"rustdoc-item-attributes\") !== \"false\") {\n-            collapseDocs(i_e.previousSibling.childNodes[0], \"toggle\");\n-        }\n+        itemAttributesFunc(i_e);\n     });\n \n+    // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n+    var lineNumbersFunc = function() {};\n+    if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n+        lineNumbersFunc = function(x) {\n+            var count = x.textContent.split('\\n').length;\n+            var elems = [];\n+            for (var i = 0; i < count; ++i) {\n+                elems.push(i + 1);\n+            }\n+            var node = document.createElement('pre');\n+            addClass(node, 'line-number');\n+            node.innerHTML = elems.join('\\n');\n+            x.parentNode.insertBefore(node, x);\n+        };\n+    }\n     onEach(document.getElementsByClassName('rust-example-rendered'), function(e) {\n         if (hasClass(e, 'compile_fail')) {\n             e.addEventListener(\"mouseover\", function(event) {\n@@ -2209,6 +2232,7 @@\n                 e.previousElementSibling.childNodes[0].style.color = '';\n             });\n         }\n+        lineNumbersFunc(e);\n     });\n \n     function showModal(content) {"}, {"sha": "c0951d9f8401e45a94db9a00d813a6bb213863e9", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -282,6 +282,24 @@ nav.sub {\n \tpadding-left: 0;\n }\n \n+.example-wrap {\n+\tdisplay: inline-flex;\n+\twidth: 100%;\n+}\n+\n+.example-wrap > pre.line-number {\n+\toverflow: initial;\n+\tborder: 1px solid;\n+\tborder-top-left-radius: 5px;\n+\tborder-bottom-left-radius: 5px;\n+\tpadding: 13px 8px;\n+\ttext-align: right;\n+}\n+\n+.example-wrap > pre.rust {\n+\twidth: 100%;\n+}\n+\n #search {\n \tmargin-left: 230px;\n \tposition: relative;"}, {"sha": "4a8950b236c62da6175a83280fb122b3cb134bb0", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -233,6 +233,10 @@ pre.rust .question-mark {\n \tcolor: #ff9011;\n }\n \n+.example-wrap > pre.line-number {\n+\tborder-color: #4a4949;\n+}\n+\n a.test-arrow {\n \tbackground-color: rgba(78, 139, 202, 0.2);\n }"}, {"sha": "b3b0b6b2ea9e869f1bb3a07c39f292611805ccaa", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -227,6 +227,10 @@ pre.rust .question-mark {\n \tcolor: #ff9011;\n }\n \n+.example-wrap > pre.line-number {\n+\tborder-color: #c7c7c7;\n+}\n+\n a.test-arrow {\n \tbackground-color: rgba(78, 139, 202, 0.2);\n }"}, {"sha": "45a0494849bfa4fcb3529054343d525692a88d84", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -460,7 +460,7 @@ fn main_args(args: &[String]) -> isize {\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n         Err(err) => {\n-            diag.struct_err(&err.to_string()).emit();\n+            diag.struct_err(&err).emit();\n             return 1;\n         }\n     };"}, {"sha": "2e6e76b5a4039ea4a0b1fe2c3aacf4cb243c2364", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -208,7 +208,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     // needs to be the result of SourceMap::span_to_unmapped_path\n     let input = config::Input::Str {\n         name: filename.to_owned(),\n-        input: test.to_owned(),\n+        input: test,\n     };\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n \n@@ -350,7 +350,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let newpath = {\n         let path = env::var_os(var).unwrap_or(OsString::new());\n         let mut path = env::split_paths(&path).collect::<Vec<_>>();\n-        path.insert(0, libdir.clone());\n+        path.insert(0, libdir);\n         env::join_paths(path).unwrap()\n     };\n     cmd.env(var, &newpath);"}, {"sha": "1701c8da2c5bdc6283b491a97c45d3b516ca046f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -247,8 +247,13 @@ impl<F> AttrProcMacro for F\n \n /// Represents a thing that maps token trees to Macro Results\n pub trait TTMacroExpander {\n-    fn expand<'cx>(&self, ecx: &'cx mut ExtCtxt, span: Span, input: TokenStream)\n-                   -> Box<dyn MacResult+'cx>;\n+    fn expand<'cx>(\n+        &self,\n+        ecx: &'cx mut ExtCtxt,\n+        span: Span,\n+        input: TokenStream,\n+        def_span: Option<Span>,\n+    ) -> Box<dyn MacResult+'cx>;\n }\n \n pub type MacroExpanderFn =\n@@ -259,8 +264,13 @@ impl<F> TTMacroExpander for F\n     where F: for<'cx> Fn(&'cx mut ExtCtxt, Span, &[tokenstream::TokenTree])\n     -> Box<dyn MacResult+'cx>\n {\n-    fn expand<'cx>(&self, ecx: &'cx mut ExtCtxt, span: Span, input: TokenStream)\n-                   -> Box<dyn MacResult+'cx> {\n+    fn expand<'cx>(\n+        &self,\n+        ecx: &'cx mut ExtCtxt,\n+        span: Span,\n+        input: TokenStream,\n+        _def_span: Option<Span>,\n+    ) -> Box<dyn MacResult+'cx> {\n         struct AvoidInterpolatedIdents;\n \n         impl Folder for AvoidInterpolatedIdents {"}, {"sha": "33b651e1b385403b42f504d7b0ca65c4f255a493", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -764,7 +764,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                                                     edition) {\n                     dummy_span\n                 } else {\n-                    kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n+                    kind.make_from(expander.expand(self.cx, span, mac.node.stream(), None))\n                 }\n             }\n \n@@ -785,7 +785,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                                                                     edition) {\n                     dummy_span\n                 } else {\n-                    kind.make_from(expander.expand(self.cx, span, mac.node.stream()))\n+                    kind.make_from(expander.expand(\n+                        self.cx,\n+                        span,\n+                        mac.node.stream(),\n+                        def_info.map(|(_, s)| s),\n+                    ))\n                 }\n             }\n \n@@ -1036,10 +1041,28 @@ impl<'a> Parser<'a> {\n             // Avoid emitting backtrace info twice.\n             let def_site_span = self.span.with_ctxt(SyntaxContext::empty());\n             let mut err = self.diagnostic().struct_span_err(def_site_span, &msg);\n-            let msg = format!(\"caused by the macro expansion here; the usage \\\n-                               of `{}!` is likely invalid in {} context\",\n-                               macro_path, kind_name);\n-            err.span_note(span, &msg).emit();\n+            err.span_label(span, \"caused by the macro expansion here\");\n+            let msg = format!(\n+                \"the usage of `{}!` is likely invalid in {} context\",\n+                macro_path,\n+                kind_name,\n+            );\n+            err.note(&msg);\n+            let semi_span = self.sess.source_map().next_point(span);\n+\n+            let semi_full_span = semi_span.to(self.sess.source_map().next_point(semi_span));\n+            match self.sess.source_map().span_to_snippet(semi_full_span) {\n+                Ok(ref snippet) if &snippet[..] != \";\" && kind_name == \"expression\" => {\n+                    err.span_suggestion_with_applicability(\n+                        semi_span,\n+                        \"you might be missing a semicolon here\",\n+                        \";\".to_owned(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {}\n+            }\n+            err.emit();\n         }\n     }\n }"}, {"sha": "e9149054a55e86b53dad80718a0fd82b0931b6cc", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 119, "deletions": 54, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -50,7 +50,12 @@ pub struct ParserAnyMacro<'a> {\n impl<'a> ParserAnyMacro<'a> {\n     pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser } = *self;\n-        let fragment = panictry!(parser.parse_ast_fragment(kind, true));\n+        let fragment = panictry!(parser.parse_ast_fragment(kind, true).map_err(|mut e| {\n+            if e.span.is_dummy() {  // Get around lack of span in error (#30128)\n+                e.set_span(site_span);\n+            }\n+            e\n+        }));\n \n         // We allow semicolons at the end of expressions -- e.g. the semicolon in\n         // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,\n@@ -74,16 +79,19 @@ struct MacroRulesMacroExpander {\n }\n \n impl TTMacroExpander for MacroRulesMacroExpander {\n-    fn expand<'cx>(&self,\n-                   cx: &'cx mut ExtCtxt,\n-                   sp: Span,\n-                   input: TokenStream)\n-                   -> Box<dyn MacResult+'cx> {\n+    fn expand<'cx>(\n+        &self,\n+        cx: &'cx mut ExtCtxt,\n+        sp: Span,\n+        input: TokenStream,\n+        def_span: Option<Span>,\n+    ) -> Box<dyn MacResult+'cx> {\n         if !self.valid {\n             return DummyResult::any(sp);\n         }\n         generic_extension(cx,\n                           sp,\n+                          def_span,\n                           self.name,\n                           input,\n                           &self.lhses,\n@@ -99,6 +107,7 @@ fn trace_macros_note(cx: &mut ExtCtxt, sp: Span, message: String) {\n /// Given `lhses` and `rhses`, this is the new macro we create\n fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                           sp: Span,\n+                          def_span: Option<Span>,\n                           name: ast::Ident,\n                           arg: TokenStream,\n                           lhses: &[quoted::TokenTree],\n@@ -133,8 +142,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                 // Replace all the tokens for the corresponding positions in the macro, to maintain\n                 // proper positions in error reporting, while maintaining the macro_backtrace.\n                 if rhs_spans.len() == tts.len() {\n-                    tts = tts.map_enumerated(|i, tt| {\n-                        let mut tt = tt.clone();\n+                    tts = tts.map_enumerated(|i, mut tt| {\n                         let mut sp = rhs_spans[i];\n                         sp = sp.with_ctxt(tt.span().ctxt());\n                         tt.set_span(sp);\n@@ -178,7 +186,14 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n     }\n \n     let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n-    let mut err = cx.struct_span_err(best_fail_spot.substitute_dummy(sp), &best_fail_msg);\n+    let span = best_fail_spot.substitute_dummy(sp);\n+    let mut err = cx.struct_span_err(span, &best_fail_msg);\n+    err.span_label(span, best_fail_msg);\n+    if let Some(sp) = def_span {\n+        if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n+            err.span_label(cx.source_map().def_span(sp), \"when calling this macro\");\n+        }\n+    }\n \n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n     if let Some((arg, comma_span)) = arg.add_comma() {\n@@ -189,7 +204,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n             };\n             match TokenTree::parse(cx, lhs_tt, arg.clone()) {\n                 Success(_) => {\n-                    if comma_span == DUMMY_SP {\n+                    if comma_span.is_dummy() {\n                         err.note(\"you might be missing a comma\");\n                     } else {\n                         err.span_suggestion_short_with_applicability(\n@@ -792,15 +807,15 @@ fn check_matcher_core(sess: &ParseSess,\n             if let TokenTree::MetaVarDecl(_, ref name, ref frag_spec) = *token {\n                 for next_token in &suffix_first.tokens {\n                     match is_in_follow(next_token, &frag_spec.as_str()) {\n-                        Err((msg, help)) => {\n+                        IsInFollow::Invalid(msg, help) => {\n                             sess.span_diagnostic.struct_span_err(next_token.span(), &msg)\n                                 .help(help).emit();\n                             // don't bother reporting every source of\n                             // conflict for a particular element of `last`.\n                             continue 'each_last;\n                         }\n-                        Ok(true) => {}\n-                        Ok(false) => {\n+                        IsInFollow::Yes => {}\n+                        IsInFollow::No(ref possible) => {\n                             let may_be = if last.tokens.len() == 1 &&\n                                 suffix_first.tokens.len() == 1\n                             {\n@@ -809,15 +824,41 @@ fn check_matcher_core(sess: &ParseSess,\n                                 \"may be\"\n                             };\n \n-                            sess.span_diagnostic.span_err(\n-                                next_token.span(),\n+                            let sp = next_token.span();\n+                            let mut err = sess.span_diagnostic.struct_span_err(\n+                                sp,\n                                 &format!(\"`${name}:{frag}` {may_be} followed by `{next}`, which \\\n                                           is not allowed for `{frag}` fragments\",\n                                          name=name,\n                                          frag=frag_spec,\n                                          next=quoted_tt_to_string(next_token),\n-                                         may_be=may_be)\n+                                         may_be=may_be),\n                             );\n+                            err.span_label(\n+                                sp,\n+                                format!(\"not allowed after `{}` fragments\", frag_spec),\n+                            );\n+                            let msg = \"allowed there are: \";\n+                            match &possible[..] {\n+                                &[] => {}\n+                                &[t] => {\n+                                    err.note(&format!(\n+                                        \"only {} is allowed after `{}` fragments\",\n+                                        t,\n+                                        frag_spec,\n+                                    ));\n+                                }\n+                                ts => {\n+                                    err.note(&format!(\n+                                        \"{}{} or {}\",\n+                                        msg,\n+                                        ts[..ts.len() - 1].iter().map(|s| *s)\n+                                            .collect::<Vec<_>>().join(\", \"),\n+                                        ts[ts.len() - 1],\n+                                    ));\n+                                }\n+                            }\n+                            err.emit();\n                         }\n                     }\n                 }\n@@ -860,6 +901,12 @@ fn frag_can_be_followed_by_any(frag: &str) -> bool {\n     }\n }\n \n+enum IsInFollow {\n+    Yes,\n+    No(Vec<&'static str>),\n+    Invalid(String, &'static str),\n+}\n+\n /// True if `frag` can legally be followed by the token `tok`. For\n /// fragments that can consume an unbounded number of tokens, `tok`\n /// must be within a well-defined follow set. This is intended to\n@@ -868,81 +915,99 @@ fn frag_can_be_followed_by_any(frag: &str) -> bool {\n /// break macros that were relying on that binary operator as a\n /// separator.\n // when changing this do not forget to update doc/book/macros.md!\n-fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'static str)> {\n+fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> IsInFollow {\n     use self::quoted::TokenTree;\n \n     if let TokenTree::Token(_, token::CloseDelim(_)) = *tok {\n         // closing a token tree can never be matched by any fragment;\n         // iow, we always require that `(` and `)` match, etc.\n-        Ok(true)\n+        IsInFollow::Yes\n     } else {\n         match frag {\n             \"item\" => {\n                 // since items *must* be followed by either a `;` or a `}`, we can\n                 // accept anything after them\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"block\" => {\n                 // anything can follow block, the braces provide an easy boundary to\n                 // maintain\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n-            \"stmt\" | \"expr\"  => match *tok {\n-                TokenTree::Token(_, ref tok) => match *tok {\n-                    FatArrow | Comma | Semi => Ok(true),\n-                    _ => Ok(false)\n-                },\n-                _ => Ok(false),\n+            \"stmt\" | \"expr\"  => {\n+                let tokens = vec![\"`=>`\", \"`,`\", \"`;`\"];\n+                match *tok {\n+                    TokenTree::Token(_, ref tok) => match *tok {\n+                        FatArrow | Comma | Semi => IsInFollow::Yes,\n+                        _ => IsInFollow::No(tokens),\n+                    },\n+                    _ => IsInFollow::No(tokens),\n+                }\n             },\n-            \"pat\" => match *tok {\n-                TokenTree::Token(_, ref tok) => match *tok {\n-                    FatArrow | Comma | Eq | BinOp(token::Or) => Ok(true),\n-                    Ident(i, false) if i.name == \"if\" || i.name == \"in\" => Ok(true),\n-                    _ => Ok(false)\n-                },\n-                _ => Ok(false),\n+            \"pat\" => {\n+                let tokens = vec![\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n+                match *tok {\n+                    TokenTree::Token(_, ref tok) => match *tok {\n+                        FatArrow | Comma | Eq | BinOp(token::Or) => IsInFollow::Yes,\n+                        Ident(i, false) if i.name == \"if\" || i.name == \"in\" => IsInFollow::Yes,\n+                        _ => IsInFollow::No(tokens),\n+                    },\n+                    _ => IsInFollow::No(tokens),\n+                }\n             },\n-            \"path\" | \"ty\" => match *tok {\n-                TokenTree::Token(_, ref tok) => match *tok {\n-                    OpenDelim(token::DelimToken::Brace) | OpenDelim(token::DelimToken::Bracket) |\n-                    Comma | FatArrow | Colon | Eq | Gt | BinOp(token::Shr) | Semi |\n-                    BinOp(token::Or) => Ok(true),\n-                    Ident(i, false) if i.name == \"as\" || i.name == \"where\" => Ok(true),\n-                    _ => Ok(false)\n-                },\n-                TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"block\" => Ok(true),\n-                _ => Ok(false),\n+            \"path\" | \"ty\" => {\n+                let tokens = vec![\n+                    \"`{`\", \"`[`\", \"`=>`\", \"`,`\", \"`>`\",\"`=`\", \"`:`\", \"`;`\", \"`|`\", \"`as`\",\n+                    \"`where`\",\n+                ];\n+                match *tok {\n+                    TokenTree::Token(_, ref tok) => match *tok {\n+                        OpenDelim(token::DelimToken::Brace) |\n+                        OpenDelim(token::DelimToken::Bracket) |\n+                        Comma | FatArrow | Colon | Eq | Gt | BinOp(token::Shr) | Semi |\n+                        BinOp(token::Or) => IsInFollow::Yes,\n+                        Ident(i, false) if i.name == \"as\" || i.name == \"where\" => IsInFollow::Yes,\n+                        _ => IsInFollow::No(tokens),\n+                    },\n+                    TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"block\" => IsInFollow::Yes,\n+                    _ => IsInFollow::No(tokens),\n+                }\n             },\n             \"ident\" | \"lifetime\" => {\n                 // being a single token, idents and lifetimes are harmless\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"literal\" => {\n                 // literals may be of a single token, or two tokens (negative numbers)\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"meta\" | \"tt\" => {\n                 // being either a single token or a delimited sequence, tt is\n                 // harmless\n-                Ok(true)\n+                IsInFollow::Yes\n             },\n             \"vis\" => {\n                 // Explicitly disallow `priv`, on the off chance it comes back.\n+                let tokens = vec![\"`,`\", \"an ident\", \"a type\"];\n                 match *tok {\n                     TokenTree::Token(_, ref tok) => match *tok {\n-                        Comma => Ok(true),\n-                        Ident(i, is_raw) if is_raw || i.name != \"priv\" => Ok(true),\n-                        ref tok => Ok(tok.can_begin_type())\n+                        Comma => IsInFollow::Yes,\n+                        Ident(i, is_raw) if is_raw || i.name != \"priv\" => IsInFollow::Yes,\n+                        ref tok => if tok.can_begin_type() {\n+                            IsInFollow::Yes\n+                        } else {\n+                            IsInFollow::No(tokens)\n+                        }\n                     },\n                     TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"ident\"\n                                                        || frag.name == \"ty\"\n-                                                       || frag.name == \"path\" => Ok(true),\n-                    _ => Ok(false)\n+                                                       || frag.name == \"path\" => IsInFollow::Yes,\n+                    _ => IsInFollow::No(tokens),\n                 }\n             },\n-            \"\" => Ok(true), // keywords::Invalid\n-            _ => Err((format!(\"invalid fragment specifier `{}`\", frag),\n-                     VALID_FRAGMENT_NAMES_MSG))\n+            \"\" => IsInFollow::Yes, // keywords::Invalid\n+            _ => IsInFollow::Invalid(format!(\"invalid fragment specifier `{}`\", frag),\n+                                     VALID_FRAGMENT_NAMES_MSG),\n         }\n     }\n }"}, {"sha": "3d897d17e0b5c2781458a7388b8ef0feb0aea0b8", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -219,9 +219,9 @@ impl Add for LockstepIterSize {\n             LockstepIterSize::Unconstrained => other,\n             LockstepIterSize::Contradiction(_) => self,\n             LockstepIterSize::Constraint(l_len, ref l_id) => match other {\n-                LockstepIterSize::Unconstrained => self.clone(),\n+                LockstepIterSize::Unconstrained => self,\n                 LockstepIterSize::Contradiction(_) => other,\n-                LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self.clone(),\n+                LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,\n                 LockstepIterSize::Constraint(r_len, r_id) => {\n                     let msg = format!(\"inconsistent lockstep iteration: \\\n                                        '{}' has {} items, but '{}' has {}\","}, {"sha": "8ff4b0d025c8d340c5e82bc05d2e8ad7b03f61a6", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -346,7 +346,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n \n     test_runner.span = sp;\n \n-    let test_main_path_expr = ecx.expr_path(test_runner.clone());\n+    let test_main_path_expr = ecx.expr_path(test_runner);\n     let call_test_main = ecx.expr_call(sp, test_main_path_expr,\n                                        vec![mk_tests_slice(cx)]);\n     let call_test_main = ecx.stmt_expr(call_test_main);"}, {"sha": "32a58de3529fdeab3e3fb187c5684eaf3421bd5f", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -178,7 +178,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<\n \n                 cx.expr_match(span, new, vec![eq_arm, neq_arm])\n             },\n-            equals_expr.clone(),\n+            equals_expr,\n             Box::new(|cx, span, (self_args, tag_tuple), _non_self_args| {\n         if self_args.len() != 2 {\n             cx.span_bug(span, \"not exactly 2 arguments in `derive(PartialOrd)`\")"}, {"sha": "55b3928d68eee310237b1e55eb84513910214d7e", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -75,7 +75,7 @@ impl MultiItemModifier for ProcMacroDerive {\n         // Mark attributes as known, and used.\n         MarkAttrs(&self.attrs).visit_item(&item);\n \n-        let input = __internal::new_token_stream(ecx.resolver.eliminate_crate_var(item.clone()));\n+        let input = __internal::new_token_stream(ecx.resolver.eliminate_crate_var(item));\n         let res = __internal::set_sess(ecx, || {\n             let inner = self.inner;\n             panic::catch_unwind(panic::AssertUnwindSafe(|| inner(input)))"}, {"sha": "639155636edfa9ecf7f1e7375d9f3aaeaff79f34", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -612,6 +612,17 @@ impl MultiSpan {\n         &self.primary_spans\n     }\n \n+    /// Returns `true` if this contains only a dummy primary span with any hygienic context.\n+    pub fn is_dummy(&self) -> bool {\n+        let mut is_dummy = true;\n+        for span in &self.primary_spans {\n+            if !span.is_dummy() {\n+                is_dummy = false;\n+            }\n+        }\n+        is_dummy\n+    }\n+\n     /// Replaces all occurrences of one Span with another. Used to move Spans in areas that don't\n     /// display well (like std macros). Returns true if replacements occurred.\n     pub fn replace(&mut self, before: Span, after: Span) -> bool {"}, {"sha": "27169299c8a69e4e4b883de9c98fc6f7552087f1", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -38,7 +38,8 @@ impl TTMacroExpander for Expander {\n     fn expand<'cx>(&self,\n                    ecx: &'cx mut ExtCtxt,\n                    sp: Span,\n-                   _: TokenStream) -> Box<MacResult+'cx> {\n+                   _: TokenStream,\n+                   _: Option<Span>) -> Box<MacResult+'cx> {\n         let args = self.args.iter().map(|i| pprust::meta_list_item_to_string(i))\n             .collect::<Vec<_>>().join(\", \");\n         MacEager::expr(ecx.expr_str(sp, Symbol::intern(&args)))"}, {"sha": "3fb83bff916048214df8cd87b507d81e9c7a4a66", "filename": "src/test/rustdoc/deprecated-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated-impls.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -109,7 +109,7 @@ impl Bar for Foo2 {\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.5: fn_def_with_doc'\n     // @has - 'fn_def_with_doc short'\n-    // @!has - 'fn_def_with full'\n+    // @!has - 'fn_def_with_doc full'\n     fn fn_def_with_doc() {}\n \n     // @has - '//*[@class=\"stab deprecated\"]' 'Deprecated since 1.0.6: fn_def_without_doc'"}, {"sha": "1392c62b4abb1cd73208151c12707b421698b900", "filename": "src/test/rustdoc/dont-show-const-contents.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fdont-show-const-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fdont-show-const-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdont-show-const-contents.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that we HTML-escape Rust expressions, where HTML special chars\n-// can occur, and we know it's definitely not markup.\n+// Test that the contents of constants are not displayed as part of the\n+// documentation.\n \n-// @!has escape_rust_expr/constant.CONST_S.html '//pre[@class=\"rust const\"]' '\"<script>\"'\n-pub const CONST_S: &'static str = \"<script>\";\n+// @!has dont_show_const_contents/constant.CONST_S.html 'dont show this'\n+pub const CONST_S: &'static str = \"dont show this\";", "previous_filename": "src/test/rustdoc/escape-rust-expr.rs"}, {"sha": "11a027a13f7e317f442d5ae5c91332ebbcc01ac6", "filename": "src/test/rustdoc/empty-section.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fempty-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fempty-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-section.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -15,6 +15,6 @@\n pub struct Foo;\n \n // @has foo/struct.Foo.html\n-// @!has - '//*[@class=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n+// @!has - 'Auto Trait Implementations'\n impl !Send for Foo {}\n impl !Sync for Foo {}"}, {"sha": "aea5f44e2a72370d044fd9f100576ac669a2a2be", "filename": "src/test/rustdoc/hidden-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fhidden-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fhidden-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-methods.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -28,12 +28,12 @@ pub mod hidden {\n \n // @has foo/struct.Foo.html\n // @!has - 'Methods'\n-// @!has - 'impl Foo'\n+// @!has - '//code' 'impl Foo'\n // @!has - 'this_should_be_hidden'\n pub use hidden::Foo;\n \n // @has foo/struct.Bar.html\n // @!has - 'Methods'\n-// @!has - 'impl Bar'\n+// @!has - '//code' 'impl Bar'\n // @!has - 'this_should_be_hidden'\n pub use hidden::Bar;"}, {"sha": "b0efee511bc7d034ed6dc3e4d1b1a8e040c03595", "filename": "src/test/rustdoc/issue-13698.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fissue-13698.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fissue-13698.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-13698.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -22,5 +22,5 @@ pub trait Bar {\n     fn bar(&self) {}\n }\n \n-// @!has issue_13698/struct.Foo.html '//*[@id=\"method.foo\"]' 'fn bar'\n+// @!has issue_13698/struct.Foo.html '//*[@id=\"method.bar\"]' 'fn bar'\n impl Bar for Foo {}"}, {"sha": "1e6b697cd5fd9b2429c8c917c2f57d31bb7933cb", "filename": "src/test/rustdoc/issue-46767.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fissue-46767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fissue-46767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46767.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -15,4 +15,5 @@ mod private {\n }\n pub use self::private::Enum::*;\n \n-// @!has foo/index.html '//a/@href' './private/index.html'\n+// @!has-dir foo/private\n+// @!has foo/index.html '//a/@href' 'private/index.html'"}, {"sha": "f6c7f9a3d082c674d09b20d0b1ea54c824565981", "filename": "src/test/rustdoc/issue-55001.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fissue-55001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fissue-55001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55001.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -0,0 +1,31 @@\n+// Regression test for issue #55001. Previously, we would incorrectly\n+// cache certain trait selection results when checking for blanket impls,\n+// resulting in an ICE when we tried to confirm the cached ParamCandidate\n+// against an obligation.\n+\n+pub struct DefaultAllocator;\n+pub struct Standard;\n+pub struct Inner;\n+\n+pub trait Rand {}\n+\n+pub trait Distribution<T> {}\n+pub trait Allocator<N> {}\n+\n+impl<T> Rand for T where Standard: Distribution<T> {}\n+\n+impl<A> Distribution<Point<A>> for Standard\n+where\n+DefaultAllocator: Allocator<A>,\n+Standard: Distribution<A> {}\n+\n+impl Distribution<Inner> for Standard {}\n+\n+\n+pub struct Point<N>\n+where DefaultAllocator: Allocator<N>\n+{\n+    field: N\n+}\n+\n+fn main() {}"}, {"sha": "db48a6525230cb8e9cf9a0ff3f4df63801274bee", "filename": "src/test/rustdoc/manual_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fmanual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmanual_impl.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -35,7 +35,6 @@ pub trait T {\n // @has  - '//*[@class=\"docblock\"]' 'Docs associated with the S1 trait a_method implementation.'\n // @!has - '//*[@class=\"docblock\"]' 'Docs associated with the trait a_method definition.'\n // @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n-// @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait b_method definition.'\n // @has - '//*[@class=\"docblock\"]' 'Docs associated with the trait c_method definition.'\n // @!has - '//*[@class=\"docblock\"]' 'There is another line'\n // @has - '//*[@class=\"docblock\"]' 'Read more'"}, {"sha": "2b3120fa5b4a15e166824a78eecef3ee222d8ffb", "filename": "src/test/rustdoc/playground-empty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fplayground-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fplayground-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fplayground-empty.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -12,6 +12,8 @@\n \n #![doc(html_playground_url = \"\")]\n \n+// compile-flags:-Z unstable-options --playground-url https://play.rust-lang.org/\n+\n //! module docs\n //!\n //! ```"}, {"sha": "c20dd815d8ce7cac3bb1b472a8d077a993657f7f", "filename": "src/test/rustdoc/redirect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fredirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Fredirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fredirect.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -43,6 +43,7 @@ mod private_no_inline {\n \n // @has redirect/index.html\n // @has - '//code' 'pub use private_no_inline::Qux'\n-// @!has - '//code/a' 'Qux'\n+// @!has - '//a' 'Qux'\n+// @!has redirect/struct.Qux.html\n #[doc(no_inline)]\n pub use private_no_inline::Qux;"}, {"sha": "c87b533b9d47453084382e40ca2f60e5e3dc92e7", "filename": "src/test/rustdoc/unneeded-trait-implementations-title.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Funneeded-trait-implementations-title.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Frustdoc%2Funneeded-trait-implementations-title.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funneeded-trait-implementations-title.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -12,4 +12,4 @@\n \n pub struct Bar;\n \n-// @!has foo/struct.Bar.html '//*[@id=\"implementations\"]'\n+// @count foo/struct.Bar.html '//*[@id=\"implementations\"]' 0"}, {"sha": "0e75ea8e66b3cd409024c154cae295f041a60bae", "filename": "src/test/ui/consts/const-eval/double_promotion.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+#![feature(const_fn, rustc_attrs)]\n+\n+#[rustc_args_required_const(0)]\n+pub const fn a(value: u8) -> u8 {\n+    value\n+}\n+\n+#[rustc_args_required_const(0)]\n+pub fn b(_: u8) {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let _ = b(a(0));\n+}"}, {"sha": "e8f05cbb0ef70a069f26c96db3d6b665c4251368", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,13 +2,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3f5e1137383dda5f8350b7c04fe200ddee4b9a41", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,13 +2,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6ff60f1492ea99b62eb78a3ec342fcff3a45dc6", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -14,13 +14,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: expected one of `move`, `|`, or `||`, found `<eof>`\n   --> <::edition_kw_macro_2015::passes_ident macros>:1:22"}, {"sha": "ffe666a7e6442875ba5f491426a13ed0ea1dca3e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -14,13 +14,13 @@ error: no rules expected the token `r#async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:22:31\n    |\n LL |     r#async = consumes_async!(r#async); //~ ERROR no rules expected the token `r#async`\n-   |                               ^^^^^^^\n+   |                               ^^^^^^^ no rules expected the token `r#async`\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:23:35\n    |\n LL |     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n-   |                                   ^^^^^\n+   |                                   ^^^^^ no rules expected the token `async`\n \n error: expected one of `move`, `|`, or `||`, found `<eof>`\n   --> <::edition_kw_macro_2018::passes_ident macros>:1:22"}, {"sha": "de826102081e77ef10fd0fcc3b3a18669a6f5fa7", "filename": "src/test/ui/empty/empty-comment.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1,8 +1,11 @@\n error: unexpected end of macro invocation\n   --> $DIR/empty-comment.rs:20:5\n    |\n+LL | macro_rules! one_arg_macro {\n+   | -------------------------- when calling this macro\n+...\n LL |     one_arg_macro!(/**/); //~ ERROR unexpected end\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ unexpected end of macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "4a4aec5b6ac570e24c1d6c7a2f93f5caed26dbbc", "filename": "src/test/ui/fail-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Ffail-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Ffail-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffail-simple.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `@`\n   --> $DIR/fail-simple.rs:12:12\n    |\n LL |     panic!(@); //~ ERROR no rules expected the token `@`\n-   |            ^\n+   |            ^ no rules expected the token `@`\n \n error: aborting due to previous error\n "}, {"sha": "028ed048d6525c768d29334178b0f0fcc2fd4401", "filename": "src/test/ui/issues/issue-30007.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fissues%2Fissue-30007.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fissues%2Fissue-30007.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30007.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -3,12 +3,11 @@ error: macro expansion ignores token `;` and any following\n    |\n LL |     () => ( String ; );     //~ ERROR macro expansion ignores token `;`\n    |                    ^\n-   |\n-note: caused by the macro expansion here; the usage of `t!` is likely invalid in type context\n-  --> $DIR/issue-30007.rs:16:16\n-   |\n+...\n LL |     let i: Vec<t!()>;\n-   |                ^^^^\n+   |                ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `t!` is likely invalid in type context\n \n error: aborting due to previous error\n "}, {"sha": "96fb374b58c6c7a4e2b918e66a3097c279845b0f", "filename": "src/test/ui/issues/issue-7970a.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1,8 +1,11 @@\n error: unexpected end of macro invocation\n   --> $DIR/issue-7970a.rs:16:5\n    |\n+LL | macro_rules! one_arg_macro {\n+   | -------------------------- when calling this macro\n+...\n LL |     one_arg_macro!();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^ unexpected end of macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "7705ba3b11ed58f9adc0905224f3018f11ed7d6a", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018-feature-gate.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018-feature-gate.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -51,20 +51,29 @@ LL |     ($(a)?*) => {}\n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:41:11\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n-   |           ^\n+   |           ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:42:11\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+   |           ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018-feature-gate.rs:43:11\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+   |           ^ no rules expected the token `?`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "25dd66b81f567f0e86494d08d459e730bcadbf29", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.stderr", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -7,68 +7,101 @@ LL |     ($(a),?) => {} //~ERROR the `?` macro repetition operator\n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:36:11\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n-   |           ^\n+   |           ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:37:11\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+   |           ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:38:11\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n-   |           ^\n+   |           ^ no rules expected the token `?`\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:40:5\n    |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n LL |     barplus!(); //~ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ unexpected end of macro invocation\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:41:14\n    |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n LL |     barplus!(a); //~ERROR unexpected end of macro invocation\n-   |              ^\n+   |              ^ unexpected end of macro invocation\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:42:15\n    |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n LL |     barplus!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^\n+   |               ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:43:15\n    |\n+LL | macro_rules! barplus {\n+   | -------------------- when calling this macro\n+...\n LL |     barplus!(a?a); //~ ERROR no rules expected the token `?`\n-   |               ^\n+   |               ^ no rules expected the token `?`\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:47:5\n    |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n LL |     barstar!(); //~ERROR unexpected end of macro invocation\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ unexpected end of macro invocation\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:48:14\n    |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n LL |     barstar!(a); //~ERROR unexpected end of macro invocation\n-   |              ^\n+   |              ^ unexpected end of macro invocation\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:49:15\n    |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n LL |     barstar!(a?); //~ ERROR no rules expected the token `?`\n-   |               ^\n+   |               ^ no rules expected the token `?`\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:50:15\n    |\n+LL | macro_rules! barstar {\n+   | -------------------- when calling this macro\n+...\n LL |     barstar!(a?a); //~ ERROR no rules expected the token `?`\n-   |               ^\n+   |               ^ no rules expected the token `?`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "005e1d1c8e7cf95679894b7dfd197f52ab0ea5dd", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -3,36 +3,33 @@ error: macro expansion ignores token `;` and any following\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n    |               ^\n-   |\n-note: caused by the macro expansion here; the usage of `m!` is likely invalid in type context\n-  --> $DIR/macro-context.rs:20:12\n-   |\n+...\n LL |     let a: m!();\n-   |            ^^^^\n+   |            ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in type context\n \n error: macro expansion ignores token `typeof` and any following\n   --> $DIR/macro-context.rs:13:17\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n    |                 ^^^^^^\n-   |\n-note: caused by the macro expansion here; the usage of `m!` is likely invalid in expression context\n-  --> $DIR/macro-context.rs:21:13\n-   |\n+...\n LL |     let i = m!();\n-   |             ^^^^\n+   |             ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in expression context\n \n error: macro expansion ignores token `;` and any following\n   --> $DIR/macro-context.rs:13:15\n    |\n LL |     () => ( i ; typeof );   //~ ERROR expected expression, found reserved keyword `typeof`\n    |               ^\n-   |\n-note: caused by the macro expansion here; the usage of `m!` is likely invalid in pattern context\n-  --> $DIR/macro-context.rs:23:9\n-   |\n+...\n LL |         m!() => {}\n-   |         ^^^^\n+   |         ---- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in pattern context\n \n error: expected expression, found reserved keyword `typeof`\n   --> $DIR/macro-context.rs:13:17"}, {"sha": "8760f6eb572e38973410f6e08dc07706c07da62e", "filename": "src/test/ui/macros/macro-follow.stderr", "status": "modified", "additions": 255, "deletions": 85, "changes": 340, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-follow.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,511 +2,681 @@ error: `$p:pat` is followed by `(`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:17:14\n    |\n LL |     ($p:pat ()) => {};       //~ERROR  `$p:pat` is followed by `(`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `[`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:18:14\n    |\n LL |     ($p:pat []) => {};       //~ERROR  `$p:pat` is followed by `[`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `{`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:19:14\n    |\n LL |     ($p:pat {}) => {};       //~ERROR  `$p:pat` is followed by `{`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `:`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:20:13\n    |\n LL |     ($p:pat :) => {};        //~ERROR `$p:pat` is followed by `:`\n-   |             ^\n+   |             ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `>`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:21:13\n    |\n LL |     ($p:pat >) => {};        //~ERROR `$p:pat` is followed by `>`\n-   |             ^\n+   |             ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `+`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:22:13\n    |\n LL |     ($p:pat +) => {};        //~ERROR `$p:pat` is followed by `+`\n-   |             ^\n+   |             ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `ident`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:23:13\n    |\n LL |     ($p:pat ident) => {};    //~ERROR `$p:pat` is followed by `ident`\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$p:pat`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:24:13\n    |\n LL |     ($p:pat $p:pat) => {};   //~ERROR `$p:pat` is followed by `$p:pat`\n-   |             ^^^^^^\n+   |             ^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$e:expr`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:25:13\n    |\n LL |     ($p:pat $e:expr) => {};  //~ERROR `$p:pat` is followed by `$e:expr`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$t:ty`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:26:13\n    |\n LL |     ($p:pat $t:ty) => {};    //~ERROR `$p:pat` is followed by `$t:ty`\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$s:stmt`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:27:13\n    |\n LL |     ($p:pat $s:stmt) => {};  //~ERROR `$p:pat` is followed by `$s:stmt`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$p:path`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:28:13\n    |\n LL |     ($p:pat $p:path) => {};  //~ERROR `$p:pat` is followed by `$p:path`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$b:block`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:29:13\n    |\n LL |     ($p:pat $b:block) => {}; //~ERROR `$p:pat` is followed by `$b:block`\n-   |             ^^^^^^^^\n+   |             ^^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$i:ident`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:30:13\n    |\n LL |     ($p:pat $i:ident) => {}; //~ERROR `$p:pat` is followed by `$i:ident`\n-   |             ^^^^^^^^\n+   |             ^^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$t:tt`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:31:13\n    |\n LL |     ($p:pat $t:tt) => {};    //~ERROR `$p:pat` is followed by `$t:tt`\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$i:item`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:32:13\n    |\n LL |     ($p:pat $i:item) => {};  //~ERROR `$p:pat` is followed by `$i:item`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$p:pat` is followed by `$m:meta`, which is not allowed for `pat` fragments\n   --> $DIR/macro-follow.rs:33:13\n    |\n LL |     ($p:pat $m:meta) => {};  //~ERROR `$p:pat` is followed by `$m:meta`\n-   |             ^^^^^^^\n+   |             ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$e:expr` is followed by `(`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:37:15\n    |\n LL |     ($e:expr ()) => {};       //~ERROR  `$e:expr` is followed by `(`\n-   |               ^\n+   |               ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `[`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:38:15\n    |\n LL |     ($e:expr []) => {};       //~ERROR  `$e:expr` is followed by `[`\n-   |               ^\n+   |               ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `{`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:39:15\n    |\n LL |     ($e:expr {}) => {};       //~ERROR  `$e:expr` is followed by `{`\n-   |               ^\n+   |               ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `=`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:40:14\n    |\n LL |     ($e:expr =) => {};        //~ERROR `$e:expr` is followed by `=`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `|`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:41:14\n    |\n LL |     ($e:expr |) => {};        //~ERROR `$e:expr` is followed by `|`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `:`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:42:14\n    |\n LL |     ($e:expr :) => {};        //~ERROR `$e:expr` is followed by `:`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `>`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:43:14\n    |\n LL |     ($e:expr >) => {};        //~ERROR `$e:expr` is followed by `>`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `+`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:44:14\n    |\n LL |     ($e:expr +) => {};        //~ERROR `$e:expr` is followed by `+`\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `ident`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:45:14\n    |\n LL |     ($e:expr ident) => {};    //~ERROR `$e:expr` is followed by `ident`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `if`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:46:14\n    |\n LL |     ($e:expr if) => {};       //~ERROR `$e:expr` is followed by `if`\n-   |              ^^\n+   |              ^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `in`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:47:14\n    |\n LL |     ($e:expr in) => {};       //~ERROR `$e:expr` is followed by `in`\n-   |              ^^\n+   |              ^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$p:pat`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:48:14\n    |\n LL |     ($e:expr $p:pat) => {};   //~ERROR `$e:expr` is followed by `$p:pat`\n-   |              ^^^^^^\n+   |              ^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$e:expr`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:49:14\n    |\n LL |     ($e:expr $e:expr) => {};  //~ERROR `$e:expr` is followed by `$e:expr`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$t:ty`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:50:14\n    |\n LL |     ($e:expr $t:ty) => {};    //~ERROR `$e:expr` is followed by `$t:ty`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$s:stmt`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:51:14\n    |\n LL |     ($e:expr $s:stmt) => {};  //~ERROR `$e:expr` is followed by `$s:stmt`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$p:path`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:52:14\n    |\n LL |     ($e:expr $p:path) => {};  //~ERROR `$e:expr` is followed by `$p:path`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$b:block`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:53:14\n    |\n LL |     ($e:expr $b:block) => {}; //~ERROR `$e:expr` is followed by `$b:block`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$i:ident`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:54:14\n    |\n LL |     ($e:expr $i:ident) => {}; //~ERROR `$e:expr` is followed by `$i:ident`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$t:tt`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:55:14\n    |\n LL |     ($e:expr $t:tt) => {};    //~ERROR `$e:expr` is followed by `$t:tt`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$i:item`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:56:14\n    |\n LL |     ($e:expr $i:item) => {};  //~ERROR `$e:expr` is followed by `$i:item`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$e:expr` is followed by `$m:meta`, which is not allowed for `expr` fragments\n   --> $DIR/macro-follow.rs:57:14\n    |\n LL |     ($e:expr $m:meta) => {};  //~ERROR `$e:expr` is followed by `$m:meta`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$t:ty` is followed by `(`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:62:13\n    |\n LL |     ($t:ty ()) => {};       //~ERROR  `$t:ty` is followed by `(`\n-   |             ^\n+   |             ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `+`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:64:12\n    |\n LL |     ($t:ty +) => {};        //~ERROR `$t:ty` is followed by `+`\n-   |            ^\n+   |            ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `ident`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:65:12\n    |\n LL |     ($t:ty ident) => {};    //~ERROR `$t:ty` is followed by `ident`\n-   |            ^^^^^\n+   |            ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `if`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:66:12\n    |\n LL |     ($t:ty if) => {};       //~ERROR `$t:ty` is followed by `if`\n-   |            ^^\n+   |            ^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$p:pat`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:67:12\n    |\n LL |     ($t:ty $p:pat) => {};   //~ERROR `$t:ty` is followed by `$p:pat`\n-   |            ^^^^^^\n+   |            ^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$e:expr`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:68:12\n    |\n LL |     ($t:ty $e:expr) => {};  //~ERROR `$t:ty` is followed by `$e:expr`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$t:ty`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:69:12\n    |\n LL |     ($t:ty $t:ty) => {};    //~ERROR `$t:ty` is followed by `$t:ty`\n-   |            ^^^^^\n+   |            ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$s:stmt`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:70:12\n    |\n LL |     ($t:ty $s:stmt) => {};  //~ERROR `$t:ty` is followed by `$s:stmt`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$p:path`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:71:12\n    |\n LL |     ($t:ty $p:path) => {};  //~ERROR `$t:ty` is followed by `$p:path`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$i:ident`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:73:12\n    |\n LL |     ($t:ty $i:ident) => {}; //~ERROR `$t:ty` is followed by `$i:ident`\n-   |            ^^^^^^^^\n+   |            ^^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$t:tt`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:74:12\n    |\n LL |     ($t:ty $t:tt) => {};    //~ERROR `$t:ty` is followed by `$t:tt`\n-   |            ^^^^^\n+   |            ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$i:item`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:75:12\n    |\n LL |     ($t:ty $i:item) => {};  //~ERROR `$t:ty` is followed by `$i:item`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$t:ty` is followed by `$m:meta`, which is not allowed for `ty` fragments\n   --> $DIR/macro-follow.rs:76:12\n    |\n LL |     ($t:ty $m:meta) => {};  //~ERROR `$t:ty` is followed by `$m:meta`\n-   |            ^^^^^^^\n+   |            ^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$s:stmt` is followed by `(`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:80:15\n    |\n LL |     ($s:stmt ()) => {};       //~ERROR  `$s:stmt` is followed by `(`\n-   |               ^\n+   |               ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `[`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:81:15\n    |\n LL |     ($s:stmt []) => {};       //~ERROR  `$s:stmt` is followed by `[`\n-   |               ^\n+   |               ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `{`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:82:15\n    |\n LL |     ($s:stmt {}) => {};       //~ERROR  `$s:stmt` is followed by `{`\n-   |               ^\n+   |               ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `=`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:83:14\n    |\n LL |     ($s:stmt =) => {};        //~ERROR `$s:stmt` is followed by `=`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `|`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:84:14\n    |\n LL |     ($s:stmt |) => {};        //~ERROR `$s:stmt` is followed by `|`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `:`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:85:14\n    |\n LL |     ($s:stmt :) => {};        //~ERROR `$s:stmt` is followed by `:`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `>`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:86:14\n    |\n LL |     ($s:stmt >) => {};        //~ERROR `$s:stmt` is followed by `>`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `+`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:87:14\n    |\n LL |     ($s:stmt +) => {};        //~ERROR `$s:stmt` is followed by `+`\n-   |              ^\n+   |              ^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `ident`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:88:14\n    |\n LL |     ($s:stmt ident) => {};    //~ERROR `$s:stmt` is followed by `ident`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `if`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:89:14\n    |\n LL |     ($s:stmt if) => {};       //~ERROR `$s:stmt` is followed by `if`\n-   |              ^^\n+   |              ^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `in`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:90:14\n    |\n LL |     ($s:stmt in) => {};       //~ERROR `$s:stmt` is followed by `in`\n-   |              ^^\n+   |              ^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$p:pat`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:91:14\n    |\n LL |     ($s:stmt $p:pat) => {};   //~ERROR `$s:stmt` is followed by `$p:pat`\n-   |              ^^^^^^\n+   |              ^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$e:expr`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:92:14\n    |\n LL |     ($s:stmt $e:expr) => {};  //~ERROR `$s:stmt` is followed by `$e:expr`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$t:ty`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:93:14\n    |\n LL |     ($s:stmt $t:ty) => {};    //~ERROR `$s:stmt` is followed by `$t:ty`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$s:stmt`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:94:14\n    |\n LL |     ($s:stmt $s:stmt) => {};  //~ERROR `$s:stmt` is followed by `$s:stmt`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$p:path`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:95:14\n    |\n LL |     ($s:stmt $p:path) => {};  //~ERROR `$s:stmt` is followed by `$p:path`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$b:block`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:96:14\n    |\n LL |     ($s:stmt $b:block) => {}; //~ERROR `$s:stmt` is followed by `$b:block`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$i:ident`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:97:14\n    |\n LL |     ($s:stmt $i:ident) => {}; //~ERROR `$s:stmt` is followed by `$i:ident`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$t:tt`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:98:14\n    |\n LL |     ($s:stmt $t:tt) => {};    //~ERROR `$s:stmt` is followed by `$t:tt`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$i:item`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:99:14\n    |\n LL |     ($s:stmt $i:item) => {};  //~ERROR `$s:stmt` is followed by `$i:item`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$s:stmt` is followed by `$m:meta`, which is not allowed for `stmt` fragments\n   --> $DIR/macro-follow.rs:100:14\n    |\n LL |     ($s:stmt $m:meta) => {};  //~ERROR `$s:stmt` is followed by `$m:meta`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `stmt` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$p:path` is followed by `(`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:104:15\n    |\n LL |     ($p:path ()) => {};       //~ERROR  `$p:path` is followed by `(`\n-   |               ^\n+   |               ^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `+`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:106:14\n    |\n LL |     ($p:path +) => {};        //~ERROR `$p:path` is followed by `+`\n-   |              ^\n+   |              ^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `ident`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:107:14\n    |\n LL |     ($p:path ident) => {};    //~ERROR `$p:path` is followed by `ident`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `if`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:108:14\n    |\n LL |     ($p:path if) => {};       //~ERROR `$p:path` is followed by `if`\n-   |              ^^\n+   |              ^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$p:pat`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:109:14\n    |\n LL |     ($p:path $p:pat) => {};   //~ERROR `$p:path` is followed by `$p:pat`\n-   |              ^^^^^^\n+   |              ^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$e:expr`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:110:14\n    |\n LL |     ($p:path $e:expr) => {};  //~ERROR `$p:path` is followed by `$e:expr`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$t:ty`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:111:14\n    |\n LL |     ($p:path $t:ty) => {};    //~ERROR `$p:path` is followed by `$t:ty`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$s:stmt`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:112:14\n    |\n LL |     ($p:path $s:stmt) => {};  //~ERROR `$p:path` is followed by `$s:stmt`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$p:path`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:113:14\n    |\n LL |     ($p:path $p:path) => {};  //~ERROR `$p:path` is followed by `$p:path`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$i:ident`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:115:14\n    |\n LL |     ($p:path $i:ident) => {}; //~ERROR `$p:path` is followed by `$i:ident`\n-   |              ^^^^^^^^\n+   |              ^^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$t:tt`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:116:14\n    |\n LL |     ($p:path $t:tt) => {};    //~ERROR `$p:path` is followed by `$t:tt`\n-   |              ^^^^^\n+   |              ^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$i:item`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:117:14\n    |\n LL |     ($p:path $i:item) => {};  //~ERROR `$p:path` is followed by `$i:item`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$p:path` is followed by `$m:meta`, which is not allowed for `path` fragments\n   --> $DIR/macro-follow.rs:118:14\n    |\n LL |     ($p:path $m:meta) => {};  //~ERROR `$p:path` is followed by `$m:meta`\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `path` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: aborting due to 85 previous errors\n "}, {"sha": "2ad8990e1156f85f33648d45c8eaf95f19a43ae0", "filename": "src/test/ui/macros/macro-followed-by-seq-bad.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-followed-by-seq-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-followed-by-seq-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-followed-by-seq-bad.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,13 +2,17 @@ error: `$a:expr` is followed by `$b:tt`, which is not allowed for `expr` fragmen\n   --> $DIR/macro-followed-by-seq-bad.rs:17:15\n    |\n LL |   ( $a:expr $($b:tt)* ) => { }; //~ ERROR not allowed for `expr` fragments\n-   |               ^^^^^\n+   |               ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: `$a:ty` is followed by `$b:tt`, which is not allowed for `ty` fragments\n   --> $DIR/macro-followed-by-seq-bad.rs:18:13\n    |\n LL |   ( $a:ty $($b:tt)* ) => { };   //~ ERROR not allowed for `ty` fragments\n-   |             ^^^^^\n+   |             ^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cf8572aefa242eaa050f7b52132933f0d6596a5b", "filename": "src/test/ui/macros/macro-in-expression-context-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! empty { () => () }\n+\n+fn main() {\n+    match 42 {\n+        _ => { empty!() }\n+    };\n+}"}, {"sha": "80d5dbd66cc29f4e3a1213a5b34c3c0dab88669d", "filename": "src/test/ui/macros/macro-in-expression-context-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context-2.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found `<eof>`\n+  --> $DIR/macro-in-expression-context-2.rs:5:16\n+   |\n+LL |         _ => { empty!() }\n+   |                ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "df36db0f49e72b6a46186e169bd7c34bc3a426db", "filename": "src/test/ui/macros/macro-in-expression-context.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.fixed?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+macro_rules! foo {\n+    () => {\n+        assert_eq!(\"A\", \"A\");\n+        assert_eq!(\"B\", \"B\");\n+    }\n+    //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n+    //~| NOTE the usage of `foo!` is likely invalid in expression context\n+}\n+\n+fn main() {\n+    foo!();\n+    //~^ NOTE caused by the macro expansion here\n+}"}, {"sha": "b3f5e568967e8604a1ae0153575140d0e6113128", "filename": "src/test/ui/macros/macro-in-expression-context.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.rs?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+macro_rules! foo {\n+    () => {\n+        assert_eq!(\"A\", \"A\");\n+        assert_eq!(\"B\", \"B\");\n+    }\n+    //~^^ ERROR macro expansion ignores token `assert_eq` and any following\n+    //~| NOTE the usage of `foo!` is likely invalid in expression context\n+}\n+\n+fn main() {\n+    foo!()\n+    //~^ NOTE caused by the macro expansion here\n+}"}, {"sha": "d27d6fbaef7a68fef3f963bf260ca75ba5a375a6", "filename": "src/test/ui/macros/macro-in-expression-context.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-in-expression-context.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -0,0 +1,15 @@\n+error: macro expansion ignores token `assert_eq` and any following\n+  --> $DIR/macro-in-expression-context.rs:6:9\n+   |\n+LL |         assert_eq!(\"B\", \"B\");\n+   |         ^^^^^^^^^\n+...\n+LL |     foo!()\n+   |     ------- help: you might be missing a semicolon here: `;`\n+   |     |\n+   |     caused by the macro expansion here\n+   |\n+   = note: the usage of `foo!` is likely invalid in expression context\n+\n+error: aborting due to previous error\n+"}, {"sha": "4bb46e39562cbf3207e9d25f1ef11c72a1bbda5d", "filename": "src/test/ui/macros/macro-input-future-proofing.stderr", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-input-future-proofing.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,55 +2,73 @@ error: `$ty:ty` is followed by `<`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:14:13\n    |\n LL |     ($ty:ty <) => (); //~ ERROR `$ty:ty` is followed by `<`, which is not allowed for `ty`\n-   |             ^\n+   |             ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$ty:ty` is followed by `<`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:15:13\n    |\n LL |     ($ty:ty < foo ,) => (); //~ ERROR `$ty:ty` is followed by `<`, which is not allowed for `ty`\n-   |             ^\n+   |             ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$pa:pat` is followed by `>`, which is not allowed for `pat` fragments\n   --> $DIR/macro-input-future-proofing.rs:21:14\n    |\n LL |     ($pa:pat >) => (); //~ ERROR `$pa:pat` is followed by `>`, which is not allowed for `pat`\n-   |              ^\n+   |              ^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$pa:pat` is followed by `$pb:pat`, which is not allowed for `pat` fragments\n   --> $DIR/macro-input-future-proofing.rs:23:14\n    |\n LL |     ($pa:pat $pb:pat $ty:ty ,) => ();\n-   |              ^^^^^^^\n+   |              ^^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$pb:pat` is followed by `$ty:ty`, which is not allowed for `pat` fragments\n   --> $DIR/macro-input-future-proofing.rs:23:22\n    |\n LL |     ($pa:pat $pb:pat $ty:ty ,) => ();\n-   |                      ^^^^^^\n+   |                      ^^^^^^ not allowed after `pat` fragments\n+   |\n+   = note: allowed there are: `=>`, `,`, `=`, `|`, `if` or `in`\n \n error: `$ty:ty` is followed by `-`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:26:17\n    |\n LL |     ($($ty:ty)* -) => (); //~ ERROR `$ty:ty` is followed by `-`\n-   |                 ^\n+   |                 ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$b:ty` is followed by `-`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:27:23\n    |\n LL |     ($($a:ty, $b:ty)* -) => (); //~ ERROR `$b:ty` is followed by `-`\n-   |                       ^\n+   |                       ^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$ty:ty` is followed by `-`, which is not allowed for `ty` fragments\n   --> $DIR/macro-input-future-proofing.rs:28:7\n    |\n LL |     ($($ty:ty)-+) => (); //~ ERROR `$ty:ty` is followed by `-`, which is not allowed for `ty`\n-   |       ^^^^^^^^\n+   |       ^^^^^^^^ not allowed after `ty` fragments\n+   |\n+   = note: allowed there are: `{`, `[`, `=>`, `,`, `>`, `=`, `:`, `;`, `|`, `as` or `where`\n \n error: `$a:expr` is followed by `$b:tt`, which is not allowed for `expr` fragments\n   --> $DIR/macro-input-future-proofing.rs:29:21\n    |\n LL |     ( $($a:expr)* $($b:tt)* ) => { };\n-   |                     ^^^^^\n+   |                     ^^^^^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "d526023d441b101cba73aa38247059532a8bc673", "filename": "src/test/ui/macros/macro-non-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1,8 +1,11 @@\n error: no rules expected the token `a`\n   --> $DIR/macro-non-lifetime.rs:18:8\n    |\n+LL | macro_rules! m { ($x:lifetime) => { } }\n+   | -------------- when calling this macro\n+...\n LL |     m!(a);\n-   |        ^\n+   |        ^ no rules expected the token `a`\n \n error: aborting due to previous error\n "}, {"sha": "1d6af44bd08a5237bda698064c91c29173b41121", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -7,32 +7,44 @@ LL |     println!(\"{}\" a);\n error: no rules expected the token `b`\n   --> $DIR/missing-comma.rs:22:12\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a b);\n-   |           -^\n+   |           -^ no rules expected the token `b`\n    |           |\n    |           help: missing comma here\n \n error: no rules expected the token `e`\n   --> $DIR/missing-comma.rs:24:21\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a, b, c, d e);\n-   |                    -^\n+   |                    -^ no rules expected the token `e`\n    |                    |\n    |                    help: missing comma here\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:26:18\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a, b, c d, e);\n-   |                 -^\n+   |                 -^ no rules expected the token `d`\n    |                 |\n    |                 help: missing comma here\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:28:18\n    |\n+LL | macro_rules! foo {\n+   | ---------------- when calling this macro\n+...\n LL |     foo!(a, b, c d e);\n-   |                  ^\n+   |                  ^ no rules expected the token `d`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "23853978d371bcfe83083e267768aa30fe5efeff", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `enum E { }`\n   --> $DIR/nonterminal-matching.rs:29:10\n    |\n LL |     n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n-   |          ^^^^^^^^\n+   |          ^^^^^^^^ no rules expected the token `enum E { }`\n ...\n LL | complex_nonterminal!(enum E {});\n    | -------------------------------- in this macro invocation"}, {"sha": "853eb5847c0cdfe543a68ea29bca50e7803fa598", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1,8 +1,11 @@\n error: no rules expected the token `bcd`\n   --> $DIR/trace_faulty_macros.rs:17:26\n    |\n+LL | macro_rules! my_faulty_macro {\n+   | ---------------------------- when calling this macro\n+LL |     () => {\n LL |         my_faulty_macro!(bcd); //~ ERROR no rules\n-   |                          ^^^\n+   |                          ^^^ no rules expected the token `bcd`\n ...\n LL |     my_faulty_macro!();\n    |     ------------------- in this macro invocation"}, {"sha": "1e765dcde4f68b52a27572bf30ad992ef30dba65", "filename": "src/test/ui/parser/macro/macro-doc-comments-1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1,8 +1,11 @@\n error: no rules expected the token `!`\n   --> $DIR/macro-doc-comments-1.rs:16:5\n    |\n+LL | macro_rules! outer {\n+   | ------------------ when calling this macro\n+...\n LL |     //! Inner\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^^ no rules expected the token `!`\n \n error: aborting due to previous error\n "}, {"sha": "0ab8a3cafb55f63e1caeb07b80b6eae065fa87a4", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1,8 +1,11 @@\n error: no rules expected the token `[`\n   --> $DIR/macro-doc-comments-2.rs:16:5\n    |\n+LL | macro_rules! inner {\n+   | ------------------ when calling this macro\n+...\n LL |     /// Outer\n-   |     ^\n+   |     ^ no rules expected the token `[`\n \n error: aborting due to previous error\n "}, {"sha": "806aca511d0ae9483b79a6258421b903a65b85f7", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -3,12 +3,11 @@ error: macro expansion ignores token `,` and any following\n    |\n LL |         , //~ ERROR macro expansion ignores token `,`\n    |         ^\n-   |\n-note: caused by the macro expansion here; the usage of `ignored_item!` is likely invalid in item context\n-  --> $DIR/macro-incomplete-parse.rs:31:1\n-   |\n+...\n LL | ignored_item!();\n-   | ^^^^^^^^^^^^^^^^\n+   | ---------------- caused by the macro expansion here\n+   |\n+   = note: the usage of `ignored_item!` is likely invalid in item context\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n   --> $DIR/macro-incomplete-parse.rs:22:14\n@@ -24,12 +23,11 @@ error: macro expansion ignores token `,` and any following\n    |\n LL |     () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n    |              ^\n-   |\n-note: caused by the macro expansion here; the usage of `ignored_pat!` is likely invalid in pattern context\n-  --> $DIR/macro-incomplete-parse.rs:36:9\n-   |\n+...\n LL |         ignored_pat!() => (),\n-   |         ^^^^^^^^^^^^^^\n+   |         -------------- caused by the macro expansion here\n+   |\n+   = note: the usage of `ignored_pat!` is likely invalid in pattern context\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e148c48ed13142ce234ab5b8bce47fb142163d45", "filename": "src/test/ui/underscore-ident-matcher.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -1,8 +1,11 @@\n error: no rules expected the token `_`\n   --> $DIR/underscore-ident-matcher.rs:18:19\n    |\n+LL | macro_rules! identity {\n+   | --------------------- when calling this macro\n+...\n LL |     let identity!(_) = 10; //~ ERROR no rules expected the token `_`\n-   |                   ^\n+   |                   ^ no rules expected the token `_`\n \n error: aborting due to previous error\n "}, {"sha": "78362fcb05a8ca46732bc3ca666439a2523eeaf8", "filename": "src/test/ui/unused/unused-macro-with-follow-violation.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Funused%2Funused-macro-with-follow-violation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Funused%2Funused-macro-with-follow-violation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-macro-with-follow-violation.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,7 +2,9 @@ error: `$e:expr` is followed by `+`, which is not allowed for `expr` fragments\n   --> $DIR/unused-macro-with-follow-violation.rs:14:14\n    |\n LL |     ($e:expr +) => () //~ ERROR not allowed for `expr` fragments\n-   |              ^\n+   |              ^ not allowed after `expr` fragments\n+   |\n+   = note: allowed there are: `=>`, `,` or `;`\n \n error: aborting due to previous error\n "}, {"sha": "856d85ef5cdaac6deb269675d2c86b45fa88f46d", "filename": "src/test/ui/vec/vec-macro-with-comma-only.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6f30ec3e6bda159063fcd126dcb14725fef92d/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-macro-with-comma-only.stderr?ref=3e6f30ec3e6bda159063fcd126dcb14725fef92d", "patch": "@@ -2,7 +2,7 @@ error: no rules expected the token `,`\n   --> $DIR/vec-macro-with-comma-only.rs:12:10\n    |\n LL |     vec![,]; //~ ERROR no rules expected the token `,`\n-   |          ^\n+   |          ^ no rules expected the token `,`\n \n error: aborting due to previous error\n "}]}