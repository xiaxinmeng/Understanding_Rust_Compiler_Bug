{"sha": "8e585e7008ac5b01c76b6f5830aa9e3104d83bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNTg1ZTcwMDhhYzViMDFjNzZiNmY1ODMwYWE5ZTMxMDRkODNiYmQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-06T15:47:41Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-06T15:50:52Z"}, "message": "Support paren-free and lightweight-case syntax\n\n(The old syntax is still supported as well, for now.)\n\nIt is now possible to leave out the parens around if, while, and\ndo/while conditions, and around alt expressions. Cases in an alt block\ncan now leave off the case keyword and parens around the pattern.\n\nAfter the next snapshot, we can start migrating our code to use the\nnew alt syntax, probably with a pretty-printer pass. The paren-free\nsyntax will remain optional (you may always parenthesize expressions),\nbut the old case syntax will no longer be supported in the future.", "tree": {"sha": "fdf46d0ba8fa983f1a39d7cf407876ce92734313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf46d0ba8fa983f1a39d7cf407876ce92734313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd", "html_url": "https://github.com/rust-lang/rust/commit/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7661c08496b0dc9ce55657246f8e5e42051c812e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7661c08496b0dc9ce55657246f8e5e42051c812e", "html_url": "https://github.com/rust-lang/rust/commit/7661c08496b0dc9ce55657246f8e5e42051c812e"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "1e4ca951d07a6e45e2aaed05a637337d028a37da", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=8e585e7008ac5b01c76b6f5830aa9e3104d83bbd", "patch": "@@ -1223,9 +1223,7 @@ fn parse_if_expr_1(&parser p) -> tup(@ast::expr,\n                                      ast::block, option::t[@ast::expr],\n                                      uint, uint) {\n     auto lo = p.get_last_lo_pos();\n-    expect(p, token::LPAREN);\n     auto cond = parse_expr(p);\n-    expect(p, token::RPAREN);\n     auto thn = parse_block(p);\n     let option::t[@ast::expr] els = none;\n     auto hi = thn.span.hi;\n@@ -1292,9 +1290,7 @@ fn parse_for_expr(&parser p) -> @ast::expr {\n \n fn parse_while_expr(&parser p) -> @ast::expr {\n     auto lo = p.get_last_lo_pos();\n-    expect(p, token::LPAREN);\n     auto cond = parse_expr(p);\n-    expect(p, token::RPAREN);\n     auto body = parse_block(p);\n     auto hi = body.span.hi;\n     ret mk_expr(p, lo, hi, ast::expr_while(cond, body));\n@@ -1304,34 +1300,27 @@ fn parse_do_while_expr(&parser p) -> @ast::expr {\n     auto lo = p.get_last_lo_pos();\n     auto body = parse_block(p);\n     expect_word(p, \"while\");\n-    expect(p, token::LPAREN);\n     auto cond = parse_expr(p);\n-    expect(p, token::RPAREN);\n     auto hi = cond.span.hi;\n     ret mk_expr(p, lo, hi, ast::expr_do_while(body, cond));\n }\n \n fn parse_alt_expr(&parser p) -> @ast::expr {\n     auto lo = p.get_last_lo_pos();\n-    expect(p, token::LPAREN);\n     auto discriminant = parse_expr(p);\n-    expect(p, token::RPAREN);\n     expect(p, token::LBRACE);\n     let vec[ast::arm] arms = [];\n     while (p.peek() != token::RBRACE) {\n-        if (eat_word(p, \"case\")) {\n-            expect(p, token::LPAREN);\n-            auto pat = parse_pat(p);\n-            expect(p, token::RPAREN);\n-            auto block = parse_block(p);\n-            arms += [rec(pat=pat, block=block)];\n-        } else if (p.peek() == token::RBRACE) {\n-            /* empty */\n-\n-        } else {\n-            p.fatal(\"expected 'case' or '}' when parsing 'alt' statement \" +\n-                      \"but found \" + token::to_str(p.get_reader(), p.peek()));\n-        }\n+        // Optionally eat the case keyword.\n+        // FIXME remove this (and the optional parens) once we've updated our\n+        // code to not use the old syntax\n+        eat_word(p, \"case\");\n+        auto parens = false;\n+        if (p.peek() == token::LPAREN) { parens = true; p.bump(); }\n+        auto pat = parse_pat(p);\n+        if (parens) { expect(p, token::RPAREN); }\n+        auto block = parse_block(p);\n+        arms += [rec(pat=pat, block=block)];\n     }\n     auto hi = p.get_hi_pos();\n     p.bump();"}, {"sha": "b1553380cb6df6cfc779a6c73f889451052906d1", "filename": "src/test/run-pass/paren-free.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd/src%2Ftest%2Frun-pass%2Fparen-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e585e7008ac5b01c76b6f5830aa9e3104d83bbd/src%2Ftest%2Frun-pass%2Fparen-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparen-free.rs?ref=8e585e7008ac5b01c76b6f5830aa9e3104d83bbd", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    auto x = true;\n+    if x {\n+        auto i = 10;\n+        while i > 0 { i -= 1; }\n+    }\n+    alt x {\n+        true { log \"right\"; }\n+        false { log \"wrong\"; }\n+    }\n+}\n\\ No newline at end of file"}]}