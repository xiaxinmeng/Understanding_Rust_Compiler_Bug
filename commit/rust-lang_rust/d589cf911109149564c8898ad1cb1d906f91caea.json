{"sha": "d589cf911109149564c8898ad1cb1d906f91caea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ODljZjkxMTEwOTE0OTU2NGM4ODk4YWQxY2IxZDkwNmY5MWNhZWE=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-07T18:34:21Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-11T23:54:32Z"}, "message": "Handle renamed imports.\n\nThis commit extends the suggestion to handle imports that are aliased to\nanother name.", "tree": {"sha": "0db2e1332f96f4cf67bc27964427b5d67f514962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db2e1332f96f4cf67bc27964427b5d67f514962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d589cf911109149564c8898ad1cb1d906f91caea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlyv07gACgkQAXYLT59T\n8VQPBw//RwMb9G20z+wsWr6YLB45UGE7nhnMiPc8wVw3pD25yNNRow7RL2x8tzdw\noXnItdm9YEXU9ECQys2GHdjWfXzec5PdBn/Aa9rLfZ/+1fvV8Zwg6NEXo+kBTYHY\npbmX7kID7L//IYLHOdJD/C7Vk6IP+vguHvo+B/WIciWdHS2YBs3VSc6825ou+cnL\nqCnbv0hIK89LZYCf65TV4CSoB1ciRIyp7oFAKCib4Q5zXNDrWIVblq8+QE/R05CE\nDBYtJFD1PXdQE3rlCwjT035EQndkZRa7ZRSvCu/3jo8uODVVjjTcrBofCxUnhXcO\nckIody90CDcW+zlRbgsZJHPX4ZlZePDpWOKmrASnm4wka+aX6QEsArTNAebKS8Jy\nuqBc+FXGXzO1qEjdDisf6XP8A5i7wkAiraveey6XZG8HGbJDbseVlpW/B+F3pNMT\nAIeb3KRDms2j4U7sXlYEn6EYtdEXbZp2LpTmbJwTZMYDRmx5nUt21NSvo1pDr6BM\nBR2dPxybL92vlUEaxxkEnCY1NONU0GuCdKtyvfqH6+RvYq9VK1pFHd2LpAvFaPIK\nNxEsBAqIHCk7h9IXVuJZOZoH7mGtFbavgaE7qgLOym/bs/ygDeYzc5xUIgqANStl\nYkfKx+80yMvYZJTN7dhRtis2RuQIriD9WBJVchqNfZI+DHelaCg=\n=Pf8Q\n-----END PGP SIGNATURE-----", "payload": "tree 0db2e1332f96f4cf67bc27964427b5d67f514962\nparent d84907bbccf0430470ba7b8f121bb4f924cdffa4\nauthor David Wood <david@davidtw.co> 1554662061 +0200\ncommitter David Wood <david@davidtw.co> 1555026872 +0200\n\nHandle renamed imports.\n\nThis commit extends the suggestion to handle imports that are aliased to\nanother name.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d589cf911109149564c8898ad1cb1d906f91caea", "html_url": "https://github.com/rust-lang/rust/commit/d589cf911109149564c8898ad1cb1d906f91caea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d589cf911109149564c8898ad1cb1d906f91caea/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84907bbccf0430470ba7b8f121bb4f924cdffa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84907bbccf0430470ba7b8f121bb4f924cdffa4", "html_url": "https://github.com/rust-lang/rust/commit/d84907bbccf0430470ba7b8f121bb4f924cdffa4"}], "stats": {"total": 87, "additions": 65, "deletions": 22}, "files": [{"sha": "b7ccbbf60791320b9a521cf9a5f18936096d5e2b", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d589cf911109149564c8898ad1cb1d906f91caea/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d589cf911109149564c8898ad1cb1d906f91caea/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=d589cf911109149564c8898ad1cb1d906f91caea", "patch": "@@ -11,7 +11,7 @@ use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n use crate::macros::ParentScope;\n-use crate::resolve_imports::{ImportDirective, ImportResolver};\n+use crate::resolve_imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n use crate::{import_candidate_to_enum_paths, is_self_type, is_self_value, path_names_to_string};\n use crate::{AssocSuggestion, CrateLint, ImportSuggestion, ModuleOrUniformRoot, PathResult,\n             PathSource, Resolver, Segment, Suggestion};\n@@ -610,11 +610,16 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         let resolution = resolutions.get(&(ident, MacroNS))?;\n         let binding = resolution.borrow().binding()?;\n         if let Def::Macro(_, MacroKind::Bang) = binding.def() {\n-            let name = crate_module.kind.name().unwrap();\n+            let module_name = crate_module.kind.name().unwrap();\n+            let import = match directive.subclass {\n+                ImportDirectiveSubclass::SingleImport { source, target, .. } if source != target =>\n+                    format!(\"{} as {}\", source, target),\n+                _ => format!(\"{}\", ident),\n+            };\n             let suggestion = Some((\n                 directive.span,\n                 String::from(\"a macro with this name exists at the root of the crate\"),\n-                format!(\"{}::{}\", name, ident),\n+                format!(\"{}::{}\", module_name, import),\n                 Applicability::MaybeIncorrect,\n             ));\n             let note = vec!["}, {"sha": "ef5f0f54ee3695011782fd7d9ac22887d0df2869", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d589cf911109149564c8898ad1cb1d906f91caea/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d589cf911109149564c8898ad1cb1d906f91caea/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d589cf911109149564c8898ad1cb1d906f91caea", "patch": "@@ -1111,21 +1111,17 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                     }\n                 });\n \n-                let (suggestion, note) = if let Some((suggestion, note)) =\n-                    self.check_for_module_export_macro(directive, module, ident)\n-                {\n-\n-                    (\n-                        suggestion.or_else(||\n-                           find_best_match_for_name(names, &ident.as_str(), None)\n-                           .map(|suggestion|\n-                                (ident.span, String::from(\"a similar name exists in the module\"),\n-                                 suggestion.to_string(), Applicability::MaybeIncorrect)\n-                            )),\n-                        note,\n-                    )\n-                } else {\n-                    (None, Vec::new())\n+                let lev_suggestion = find_best_match_for_name(names, &ident.as_str(), None)\n+                   .map(|suggestion|\n+                        (ident.span, String::from(\"a similar name exists in the module\"),\n+                         suggestion.to_string(), Applicability::MaybeIncorrect)\n+                    );\n+\n+                let (suggestion, note) = match self.check_for_module_export_macro(\n+                    directive, module, ident,\n+                ) {\n+                    Some((suggestion, note)) => (suggestion.or(lev_suggestion), note),\n+                    _ => (lev_suggestion, Vec::new()),\n                 };\n \n                 let label = match module {"}, {"sha": "34b9fc4edd9b7a461a08a6b5a846c0178d332715", "filename": "src/test/ui/issue-59764.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d589cf911109149564c8898ad1cb1d906f91caea/src%2Ftest%2Fui%2Fissue-59764.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d589cf911109149564c8898ad1cb1d906f91caea/src%2Ftest%2Fui%2Fissue-59764.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59764.fixed?ref=d589cf911109149564c8898ad1cb1d906f91caea", "patch": "@@ -3,6 +3,21 @@\n // edition:2018\n // run-rustfix\n \n+#![allow(warnings)]\n+\n+// This tests the suggestion to import macros from the root of a crate. This aims to capture\n+// the case where a user attempts to import a macro from the definition location instead of the\n+// root of the crate and the macro is annotated with `#![macro_export]`.\n+\n+// Edge cases..\n+\n+mod renamed_import {\n+    use issue_59764::makro as baz;\n+    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n+}\n+\n+// Simple case..\n+\n use issue_59764::makro;\n //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n "}, {"sha": "b33b8e0cf5c57dac927c1eeaa8fa5b225e70db39", "filename": "src/test/ui/issue-59764.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d589cf911109149564c8898ad1cb1d906f91caea/src%2Ftest%2Fui%2Fissue-59764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d589cf911109149564c8898ad1cb1d906f91caea/src%2Ftest%2Fui%2Fissue-59764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59764.rs?ref=d589cf911109149564c8898ad1cb1d906f91caea", "patch": "@@ -3,6 +3,21 @@\n // edition:2018\n // run-rustfix\n \n+#![allow(warnings)]\n+\n+// This tests the suggestion to import macros from the root of a crate. This aims to capture\n+// the case where a user attempts to import a macro from the definition location instead of the\n+// root of the crate and the macro is annotated with `#![macro_export]`.\n+\n+// Edge cases..\n+\n+mod renamed_import {\n+    use issue_59764::foo::makro as baz;\n+    //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n+}\n+\n+// Simple case..\n+\n use issue_59764::foo::makro;\n //~^ ERROR unresolved import `issue_59764::foo::makro` [E0432]\n "}, {"sha": "8bb4d03fc5dd6091d2c1c2ee15a52be3054103be", "filename": "src/test/ui/issue-59764.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d589cf911109149564c8898ad1cb1d906f91caea/src%2Ftest%2Fui%2Fissue-59764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d589cf911109149564c8898ad1cb1d906f91caea/src%2Ftest%2Fui%2Fissue-59764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-59764.stderr?ref=d589cf911109149564c8898ad1cb1d906f91caea", "patch": "@@ -1,5 +1,17 @@\n error[E0432]: unresolved import `issue_59764::foo::makro`\n-  --> $DIR/issue-59764.rs:6:5\n+  --> $DIR/issue-59764.rs:15:9\n+   |\n+LL |     use issue_59764::foo::makro as baz;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `makro` in `foo`\n+   |\n+   = note: this could be because a macro annotated with `#[macro_export]` will be exported at the root of the crate instead of the module where it is defined\n+help: a macro with this name exists at the root of the crate\n+   |\n+LL |     use issue_59764::makro as baz;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0432]: unresolved import `issue_59764::foo::makro`\n+  --> $DIR/issue-59764.rs:21:5\n    |\n LL | use issue_59764::foo::makro;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ no `makro` in `foo`\n@@ -11,20 +23,20 @@ LL | use issue_59764::makro;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: cannot determine resolution for the macro `makro`\n-  --> $DIR/issue-59764.rs:9:1\n+  --> $DIR/issue-59764.rs:24:1\n    |\n LL | makro!(bar);\n    | ^^^^^\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n error[E0425]: cannot find function `bar` in this scope\n-  --> $DIR/issue-59764.rs:13:5\n+  --> $DIR/issue-59764.rs:28:5\n    |\n LL |     bar();\n    |     ^^^ not found in this scope\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0425, E0432.\n For more information about an error, try `rustc --explain E0425`."}]}