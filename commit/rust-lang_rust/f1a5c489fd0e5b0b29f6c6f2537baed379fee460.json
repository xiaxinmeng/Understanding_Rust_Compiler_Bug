{"sha": "f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYTVjNDg5ZmQwZTViMGIyOWY2YzZmMjUzN2JhZWQzNzlmZWU0NjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-14T23:58:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-14T23:58:39Z"}, "message": "Better structure", "tree": {"sha": "284bc4cec6522f9b16fc161afa486c176d202b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/284bc4cec6522f9b16fc161afa486c176d202b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "html_url": "https://github.com/rust-lang/rust/commit/f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "220813dcb0881ff199619c11eb34a39a6de0f67a", "url": "https://api.github.com/repos/rust-lang/rust/commits/220813dcb0881ff199619c11eb34a39a6de0f67a", "html_url": "https://github.com/rust-lang/rust/commit/220813dcb0881ff199619c11eb34a39a6de0f67a"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "f94cea81438ffaac6e40c05f390b4d2cdacf95b7", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "patch": "@@ -1376,7 +1376,6 @@ name = \"rust-analyzer\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n- \"cargo_metadata\",\n  \"crossbeam-channel\",\n  \"env_logger\",\n  \"globset\","}, {"sha": "541179920baeaf0d15b8f1c0e8fd18224bbe0655", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "patch": "@@ -12,6 +12,11 @@ use std::{\n use cargo_metadata::Message;\n use crossbeam_channel::{never, select, unbounded, Receiver, RecvError, Sender};\n \n+pub use cargo_metadata::diagnostic::{\n+    Applicability, Diagnostic, DiagnosticLevel, DiagnosticSpan,\n+    DiagnosticSpanMacroExpansion,\n+};\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum FlycheckConfig {\n     CargoCommand { command: String, all_targets: bool, all_features: bool, extra_args: Vec<String> },\n@@ -52,7 +57,7 @@ pub enum CheckTask {\n     ClearDiagnostics,\n \n     /// Request adding a diagnostic with fixes included to a file\n-    AddDiagnostic { workspace_root: PathBuf, diagnostic: cargo_metadata::diagnostic::Diagnostic },\n+    AddDiagnostic { workspace_root: PathBuf, diagnostic: Diagnostic },\n \n     /// Request check progress notification to client\n     Status(Status),\n@@ -239,12 +244,6 @@ impl FlycheckThread {\n     }\n }\n \n-// #[derive(Debug)]\n-// pub struct DiagnosticWithFixes {\n-//     diagnostic: Diagnostic,\n-//     fixes: Vec<CodeAction>,\n-// }\n-\n enum CheckEvent {\n     Begin,\n     Msg(cargo_metadata::Message),"}, {"sha": "9b2d29b1d57c553844569f5d4d2d8a5d6107c716", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "patch": "@@ -29,7 +29,6 @@ rustc-hash = \"1.1.0\"\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n threadpool = \"1.7.1\"\n-cargo_metadata = \"0.10.0\"\n \n stdx = { path = \"../stdx\" }\n "}, {"sha": "5c8d86eb5e900601a47be745fc33a782778a879a", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a5c489fd0e5b0b29f6c6f2537baed379fee460/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=f1a5c489fd0e5b0b29f6c6f2537baed379fee460", "patch": "@@ -1,20 +1,18 @@\n //! This module provides the functionality needed to convert diagnostics from\n //! `cargo check` json format to the LSP diagnostic format.\n-use cargo_metadata::diagnostic::{\n-    Applicability, Diagnostic as RustDiagnostic, DiagnosticLevel, DiagnosticSpan,\n-    DiagnosticSpanMacroExpansion,\n-};\n-use lsp_types::{\n-    CodeAction, Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag,\n-    Location, NumberOrString, Position, Range, TextEdit, Url, WorkspaceEdit,\n-};\n use std::{\n     collections::HashMap,\n     fmt::Write,\n     path::{Component, Path, PathBuf, Prefix},\n     str::FromStr,\n };\n \n+use lsp_types::{\n+    CodeAction, Diagnostic, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag,\n+    Location, NumberOrString, Position, Range, TextEdit, Url, WorkspaceEdit,\n+};\n+use ra_flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan, DiagnosticSpanMacroExpansion};\n+\n /// Converts a Rust level string to a LSP severity\n fn map_level_to_severity(val: DiagnosticLevel) -> Option<DiagnosticSeverity> {\n     match val {\n@@ -91,7 +89,7 @@ fn map_secondary_span_to_related(\n }\n \n /// Determines if diagnostic is related to unused code\n-fn is_unused_or_unnecessary(rd: &RustDiagnostic) -> bool {\n+fn is_unused_or_unnecessary(rd: &ra_flycheck::Diagnostic) -> bool {\n     if let Some(code) = &rd.code {\n         match code.code.as_str() {\n             \"dead_code\" | \"unknown_lints\" | \"unreachable_code\" | \"unused_attributes\"\n@@ -122,7 +120,7 @@ enum MappedRustChildDiagnostic {\n }\n \n fn map_rust_child_diagnostic(\n-    rd: &RustDiagnostic,\n+    rd: &ra_flycheck::Diagnostic,\n     workspace_root: &PathBuf,\n ) -> MappedRustChildDiagnostic {\n     let spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n@@ -179,7 +177,7 @@ pub(crate) struct MappedRustDiagnostic {\n ///\n /// If the diagnostic has no primary span this will return `None`\n pub(crate) fn map_rust_diagnostic_to_lsp(\n-    rd: &RustDiagnostic,\n+    rd: &ra_flycheck::Diagnostic,\n     workspace_root: &PathBuf,\n ) -> Vec<MappedRustDiagnostic> {\n     let primary_spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();"}]}