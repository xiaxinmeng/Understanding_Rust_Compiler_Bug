{"sha": "0c7117457dbefa93468f8fb1a85eba75f32e2865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNzExNzQ1N2RiZWZhOTM0NjhmOGZiMWE4NWViYTc1ZjMyZTI4NjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-19T23:49:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-01-20T16:35:46Z"}, "message": "Rollup merge of #39068 - alexcrichton:more-small-tests, r=brson\n\ntravis: Add i586 linux and i686 musl\n\nThis commit expands the existing x86_64-musl entry in the Travis matrix to also\nbuild/test i586-unknown-linux-gnu and i686-unknown-linux-musl.\n\ncc #38531\nCloses #35599\nCloses #39053", "tree": {"sha": "e57cd3d263ea0544fd17ae19045eb904b08c315a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57cd3d263ea0544fd17ae19045eb904b08c315a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c7117457dbefa93468f8fb1a85eba75f32e2865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c7117457dbefa93468f8fb1a85eba75f32e2865", "html_url": "https://github.com/rust-lang/rust/commit/0c7117457dbefa93468f8fb1a85eba75f32e2865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c7117457dbefa93468f8fb1a85eba75f32e2865/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18a39ed66e8a73afd4e4fb00ad2eb3615e3f7c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18a39ed66e8a73afd4e4fb00ad2eb3615e3f7c3d", "html_url": "https://github.com/rust-lang/rust/commit/18a39ed66e8a73afd4e4fb00ad2eb3615e3f7c3d"}, {"sha": "6162637762d12760ba5b6c1e20f01298111ae8fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6162637762d12760ba5b6c1e20f01298111ae8fe", "html_url": "https://github.com/rust-lang/rust/commit/6162637762d12760ba5b6c1e20f01298111ae8fe"}], "stats": {"total": 229, "additions": 152, "deletions": 77}, "files": [{"sha": "6cdc4d99f201ebf40eb8d53526ef85ef9e837f47", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -15,6 +15,7 @@ matrix:\n     # Linux builders, all docker images\n     - env: IMAGE=arm-android DEPLOY=1\n     - env: IMAGE=cross DEPLOY=1\n+    - env: IMAGE=linux-tested-targets DEPLOY=1\n     - env: IMAGE=dist-arm-linux DEPLOY=1\n     - env: IMAGE=dist-armv7-aarch64-linux DEPLOY=1\n     - env: IMAGE=dist-freebsd DEPLOY=1\n@@ -32,7 +33,6 @@ matrix:\n     - env: IMAGE=x86_64-gnu-nopt\n     - env: IMAGE=x86_64-gnu-make\n     - env: IMAGE=x86_64-gnu-llvm-3.7 ALLOW_PR=1 RUST_BACKTRACE=1\n-    - env: IMAGE=x86_64-musl DEPLOY=1\n     - env: IMAGE=x86_64-gnu-distcheck\n \n     # OSX builders"}, {"sha": "2a43201ed0aeb859e98a5e1c9b6da89e2e5263a8", "filename": "src/ci/docker/linux-tested-targets/Dockerfile", "status": "renamed", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Fci%2Fdocker%2Flinux-tested-targets%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Fci%2Fdocker%2Flinux-tested-targets%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Flinux-tested-targets%2FDockerfile?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -1,7 +1,7 @@\n FROM ubuntu:16.04\n \n RUN apt-get update && apt-get install -y --no-install-recommends \\\n-  g++ \\\n+  g++-multilib \\\n   make \\\n   file \\\n   curl \\\n@@ -11,10 +11,11 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   xz-utils \\\n   sudo \\\n-  gdb\n+  gdb \\\n+  patch\n \n WORKDIR /build/\n-COPY build-musl.sh /build/\n+COPY musl-libunwind-patch.patch build-musl.sh /build/\n RUN sh /build/build-musl.sh && rm -rf /build\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n@@ -27,9 +28,17 @@ RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST |\n       tar xJf - -C /usr/local/bin --strip-components=1\n \n ENV RUST_CONFIGURE_ARGS \\\n-      --target=x86_64-unknown-linux-musl \\\n-      --musl-root-x86_64=/musl-x86_64\n-ENV PATH=$PATH:/musl-x86_64/bin\n+      --target=x86_64-unknown-linux-musl,i686-unknown-linux-musl,i586-unknown-linux-gnu \\\n+      --musl-root-x86_64=/musl-x86_64 \\\n+      --musl-root-i686=/musl-i686\n+\n ENV SCRIPT \\\n-      python2.7 ../x.py test --target x86_64-unknown-linux-musl && \\\n-      python2.7 ../x.py dist --target x86_64-unknown-linux-musl\n+      python2.7 ../x.py test \\\n+          --target x86_64-unknown-linux-musl \\\n+          --target i686-unknown-linux-musl \\\n+          --target i586-unknown-linux-gnu \\\n+          && \\\n+      python2.7 ../x.py dist \\\n+          --target x86_64-unknown-linux-musl \\\n+          --target i686-unknown-linux-musl \\\n+          --target i586-unknown-linux-gnu", "previous_filename": "src/ci/docker/x86_64-musl/Dockerfile"}, {"sha": "2382605f9bd368a39530238f6d372a94e606c27e", "filename": "src/ci/docker/linux-tested-targets/build-musl.sh", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fbuild-musl.sh?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -0,0 +1,64 @@\n+#!/bin/sh\n+# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+\n+export CFLAGS=\"-fPIC\"\n+MUSL=musl-1.1.14\n+curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n+cd $MUSL\n+./configure --prefix=/musl-x86_64 --disable-shared\n+make -j10\n+make install\n+make clean\n+# for i686\n+CFLAGS=\"$CFLAGS -m32\" ./configure --prefix=/musl-i686 --disable-shared --target=i686\n+make -j10\n+make install\n+cd ..\n+\n+# To build MUSL we're going to need a libunwind lying around, so acquire that\n+# here and build it.\n+curl -L https://github.com/llvm-mirror/llvm/archive/release_37.tar.gz | tar xzf -\n+curl -L https://github.com/llvm-mirror/libunwind/archive/release_37.tar.gz | tar xzf -\n+\n+# Whoa what's this mysterious patch we're applying to libunwind! Why are we\n+# swapping the values of ESP/EBP in libunwind?!\n+#\n+# Discovered in #35599 it turns out that the vanilla build of libunwind is not\n+# suitable for unwinding 32-bit musl. After some investigation it ended up\n+# looking like the register values for ESP/EBP were indeed incorrect (swapped)\n+# in the source. Similar commits in libunwind (r280099 and r282589) have noticed\n+# this for other platforms, and we just need to realize it for musl linux as\n+# well.\n+#\n+# More technical info can be found at #35599\n+cd libunwind-release_37\n+patch -Np1 < /build/musl-libunwind-patch.patch\n+cd ..\n+\n+mkdir libunwind-build\n+cd libunwind-build\n+cmake ../libunwind-release_37 -DLLVM_PATH=/build/llvm-release_37 \\\n+          -DLIBUNWIND_ENABLE_SHARED=0\n+make -j10\n+cp lib/libunwind.a /musl-x86_64/lib\n+\n+# (Note: the next cmake call doesn't fully override the previous cached one, so remove the cached\n+# configuration manually. IOW, if don't do this or call make clean we'll end up building libunwind\n+# for x86_64 again)\n+rm -rf *\n+# for i686\n+CFLAGS=\"$CFLAGS -m32 -g\" CXXFLAGS=\"$CXXFLAGS -m32 -g\" cmake ../libunwind-release_37 \\\n+          -DLLVM_PATH=/build/llvm-release_37 \\\n+          -DLIBUNWIND_ENABLE_SHARED=0\n+make -j10\n+cp lib/libunwind.a /musl-i686/lib"}, {"sha": "99cd685b72d1718aaf6933da48fec15b21c91591", "filename": "src/ci/docker/linux-tested-targets/musl-libunwind-patch.patch", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fmusl-libunwind-patch.patch", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fmusl-libunwind-patch.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Flinux-tested-targets%2Fmusl-libunwind-patch.patch?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -0,0 +1,15 @@\n+diff --git a/include/libunwind.h b/include/libunwind.h\n+index c5b9633..1360eb2 100644\n+--- a/include/libunwind.h\n++++ b/include/libunwind.h\n+@@ -151,8 +151,8 @@ enum {\n+   UNW_X86_ECX = 1,\n+   UNW_X86_EDX = 2,\n+   UNW_X86_EBX = 3,\n+-  UNW_X86_EBP = 4,\n+-  UNW_X86_ESP = 5,\n++  UNW_X86_ESP = 4,\n++  UNW_X86_EBP = 5,\n+   UNW_X86_ESI = 6,\n+   UNW_X86_EDI = 7\n+ };"}, {"sha": "2bfbd646b75c8e050d934bd8bb06ed291ee7f9c8", "filename": "src/ci/docker/x86_64-musl/build-musl.sh", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/18a39ed66e8a73afd4e4fb00ad2eb3615e3f7c3d/src%2Fci%2Fdocker%2Fx86_64-musl%2Fbuild-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/18a39ed66e8a73afd4e4fb00ad2eb3615e3f7c3d/src%2Fci%2Fdocker%2Fx86_64-musl%2Fbuild-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-musl%2Fbuild-musl.sh?ref=18a39ed66e8a73afd4e4fb00ad2eb3615e3f7c3d", "patch": "@@ -1,33 +0,0 @@\n-#!/bin/sh\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-set -ex\n-\n-export CFLAGS=\"-fPIC\"\n-MUSL=musl-1.1.14\n-curl https://www.musl-libc.org/releases/$MUSL.tar.gz | tar xzf -\n-cd $MUSL\n-./configure --prefix=/musl-x86_64 --disable-shared\n-make -j10\n-make install\n-make clean\n-cd ..\n-\n-# To build MUSL we're going to need a libunwind lying around, so acquire that\n-# here and build it.\n-curl -L https://github.com/llvm-mirror/llvm/archive/release_37.tar.gz | tar xzf -\n-curl -L https://github.com/llvm-mirror/libunwind/archive/release_37.tar.gz | tar xzf -\n-mkdir libunwind-build\n-cd libunwind-build\n-cmake ../libunwind-release_37 -DLLVM_PATH=/build/llvm-release_37 \\\n-          -DLIBUNWIND_ENABLE_SHARED=0\n-make -j10\n-cp lib/libunwind.a /musl-x86_64/lib"}, {"sha": "08cc993ce4fb2f44076a0562852b8b57fdb8a7a9", "filename": "src/test/run-pass/issue-21634.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftest%2Frun-pass%2Fissue-21634.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftest%2Frun-pass%2Fissue-21634.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21634.rs?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(cfg_target_feature)]\n \n-\n+#[cfg(any(not(target_arch = \"x86\"), target_feature = \"sse2\"))]\n fn main() {\n     if let Ok(x) = \"3.1415\".parse::<f64>() {\n         assert_eq!(false, x <= 0.0);\n@@ -21,3 +22,6 @@ fn main() {\n         assert_eq!(8.1415, { x += 5.0; x });\n     }\n }\n+\n+#[cfg(all(target_arch = \"x86\", not(target_feature = \"sse2\")))]\n+fn main() {}"}, {"sha": "7e42698d496768d3a100409dc165aba8b5f0268d", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -10,9 +10,16 @@\n \n #![feature(cfg_target_feature)]\n \n-pub fn main() {\n+use std::env;\n+\n+fn main() {\n+    // Skip this tests on i586-unknown-linux-gnu where sse2 is disabled\n+    let real_target = env::var(\"TARGET\").unwrap();\n+    if real_target.contains(\"i586\") {\n+        return\n+    }\n     if cfg!(any(target_arch = \"x86\", target_arch = \"x86_64\")) {\n         assert!(cfg!(target_feature = \"sse2\"),\n-            \"SSE2 was not detected as available on an x86 platform\");\n+                \"SSE2 was not detected as available on an x86 platform\");\n     }\n }"}, {"sha": "43d02479fb17de8442e823b401c537707c5a2966", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -319,6 +319,10 @@ pub fn run_tests(config: &Config) {\n     // Prevent issue #21352 UAC blocking .exe containing 'patch' etc. on Windows\n     // If #11207 is resolved (adding manifest to .exe) this becomes unnecessary\n     env::set_var(\"__COMPAT_LAYER\", \"RunAsInvoker\");\n+\n+    // Let tests know which target they're running as\n+    env::set_var(\"TARGET\", &config.target);\n+\n     let res = test::run_tests_console(&opts, tests.into_iter().collect());\n     match res {\n         Ok(true) => {}"}, {"sha": "4202356bd97a0aa7c8a6685058be0426fe261e08", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c7117457dbefa93468f8fb1a85eba75f32e2865/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=0c7117457dbefa93468f8fb1a85eba75f32e2865", "patch": "@@ -12,39 +12,44 @@ use std::env;\n use common::Config;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n-const OS_TABLE: &'static [(&'static str, &'static str)] = &[(\"android\", \"android\"),\n-                                                            (\"bitrig\", \"bitrig\"),\n-                                                            (\"darwin\", \"macos\"),\n-                                                            (\"dragonfly\", \"dragonfly\"),\n-                                                            (\"freebsd\", \"freebsd\"),\n-                                                            (\"haiku\", \"haiku\"),\n-                                                            (\"ios\", \"ios\"),\n-                                                            (\"linux\", \"linux\"),\n-                                                            (\"mingw32\", \"windows\"),\n-                                                            (\"netbsd\", \"netbsd\"),\n-                                                            (\"openbsd\", \"openbsd\"),\n-                                                            (\"win32\", \"windows\"),\n-                                                            (\"windows\", \"windows\"),\n-                                                            (\"solaris\", \"solaris\"),\n-                                                            (\"emscripten\", \"emscripten\")];\n+const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n+    (\"android\", \"android\"),\n+    (\"bitrig\", \"bitrig\"),\n+    (\"darwin\", \"macos\"),\n+    (\"dragonfly\", \"dragonfly\"),\n+    (\"freebsd\", \"freebsd\"),\n+    (\"haiku\", \"haiku\"),\n+    (\"ios\", \"ios\"),\n+    (\"linux\", \"linux\"),\n+    (\"mingw32\", \"windows\"),\n+    (\"netbsd\", \"netbsd\"),\n+    (\"openbsd\", \"openbsd\"),\n+    (\"win32\", \"windows\"),\n+    (\"windows\", \"windows\"),\n+    (\"solaris\", \"solaris\"),\n+    (\"emscripten\", \"emscripten\"),\n+];\n \n-const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[(\"aarch64\", \"aarch64\"),\n-                                                              (\"amd64\", \"x86_64\"),\n-                                                              (\"arm\", \"arm\"),\n-                                                              (\"arm64\", \"aarch64\"),\n-                                                              (\"hexagon\", \"hexagon\"),\n-                                                              (\"i386\", \"x86\"),\n-                                                              (\"i686\", \"x86\"),\n-                                                              (\"mips\", \"mips\"),\n-                                                              (\"msp430\", \"msp430\"),\n-                                                              (\"powerpc\", \"powerpc\"),\n-                                                              (\"powerpc64\", \"powerpc64\"),\n-                                                              (\"s390x\", \"s390x\"),\n-                                                              (\"sparc\", \"sparc\"),\n-                                                              (\"x86_64\", \"x86_64\"),\n-                                                              (\"xcore\", \"xcore\"),\n-                                                              (\"asmjs\", \"asmjs\"),\n-                                                              (\"wasm32\", \"wasm32\")];\n+const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n+    (\"aarch64\", \"aarch64\"),\n+    (\"amd64\", \"x86_64\"),\n+    (\"arm\", \"arm\"),\n+    (\"arm64\", \"aarch64\"),\n+    (\"hexagon\", \"hexagon\"),\n+    (\"i386\", \"x86\"),\n+    (\"i586\", \"x86\"),\n+    (\"i686\", \"x86\"),\n+    (\"mips\", \"mips\"),\n+    (\"msp430\", \"msp430\"),\n+    (\"powerpc\", \"powerpc\"),\n+    (\"powerpc64\", \"powerpc64\"),\n+    (\"s390x\", \"s390x\"),\n+    (\"sparc\", \"sparc\"),\n+    (\"x86_64\", \"x86_64\"),\n+    (\"xcore\", \"xcore\"),\n+    (\"asmjs\", \"asmjs\"),\n+    (\"wasm32\", \"wasm32\"),\n+];\n \n pub fn get_os(triple: &str) -> &'static str {\n     for &(triple_os, os) in OS_TABLE {"}]}