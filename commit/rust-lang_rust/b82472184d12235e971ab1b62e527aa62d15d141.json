{"sha": "b82472184d12235e971ab1b62e527aa62d15d141", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjQ3MjE4NGQxMjIzNWU5NzFhYjFiNjJlNTI3YWE2MmQxNWQxNDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-07T09:59:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-07T09:59:11Z"}, "message": "Rustup to rustc 1.38.0-nightly (dfd52ba6a 2019-07-06)", "tree": {"sha": "380f003c4845c444e1152622739638fc1ccad1d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380f003c4845c444e1152622739638fc1ccad1d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82472184d12235e971ab1b62e527aa62d15d141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82472184d12235e971ab1b62e527aa62d15d141", "html_url": "https://github.com/rust-lang/rust/commit/b82472184d12235e971ab1b62e527aa62d15d141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82472184d12235e971ab1b62e527aa62d15d141/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69591844bbcf9930695913ea35a0b009bae5c2be", "url": "https://api.github.com/repos/rust-lang/rust/commits/69591844bbcf9930695913ea35a0b009bae5c2be", "html_url": "https://github.com/rust-lang/rust/commit/69591844bbcf9930695913ea35a0b009bae5c2be"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "a942fa8d95e4905010d750f3ecb0a8fbe1162cba", "filename": "build_sysroot/alloc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b82472184d12235e971ab1b62e527aa62d15d141/build_sysroot%2Falloc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82472184d12235e971ab1b62e527aa62d15d141/build_sysroot%2Falloc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Falloc_system%2Flib.rs?ref=b82472184d12235e971ab1b62e527aa62d15d141", "patch": "@@ -23,7 +23,6 @@\n     feature(integer_atomics, stdsimd)\n )]\n #![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]\n-#![rustc_alloc_kind = \"lib\"]\n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values.\n #[cfg(all(any(target_arch = \"x86\","}, {"sha": "e8ddc4aaea145f293ca4349efd0fb5f6a857d7a2", "filename": "example/example.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b82472184d12235e971ab1b62e527aa62d15d141/example%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82472184d12235e971ab1b62e527aa62d15d141/example%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fexample.rs?ref=b82472184d12235e971ab1b62e527aa62d15d141", "patch": "@@ -137,10 +137,6 @@ unsafe fn transmute(c: char) -> u32 {\n     intrinsics::transmute(c)\n }\n \n-unsafe fn call_uninit() -> u8 {\n-    intrinsics::uninit()\n-}\n-\n unsafe fn deref_str_ptr(s: *const str) -> &'static str {\n     &*s\n }"}, {"sha": "d900776c55cc821f28f126b99a82708ce5fb9450", "filename": "example/mini_core.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b82472184d12235e971ab1b62e527aa62d15d141/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82472184d12235e971ab1b62e527aa62d15d141/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=b82472184d12235e971ab1b62e527aa62d15d141", "patch": "@@ -1,4 +1,4 @@\n-#![feature(no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types)]\n+#![feature(no_core, lang_items, intrinsics, unboxed_closures, type_ascription, extern_types, untagged_unions)]\n #![no_core]\n #![allow(dead_code)]\n \n@@ -371,6 +371,11 @@ pub trait Drop {\n     fn drop(&mut self);\n }\n \n+pub union MaybeUninit<T> {\n+    pub uninit: (),\n+    pub value: T,\n+}\n+\n pub mod intrinsics {\n     extern \"rust-intrinsic\" {\n         pub fn abort() -> !;\n@@ -380,7 +385,6 @@ pub mod intrinsics {\n         pub fn min_align_of_val<T: ?::Sized>(val: &T) -> usize;\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n-        pub fn uninit<T>() -> T;\n         pub fn init<T>() -> T;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n         pub fn needs_drop<T>() -> bool;"}, {"sha": "e51f257f6b46a4924b0c49c4c425add01a6c2b80", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b82472184d12235e971ab1b62e527aa62d15d141/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82472184d12235e971ab1b62e527aa62d15d141/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=b82472184d12235e971ab1b62e527aa62d15d141", "patch": "@@ -181,15 +181,15 @@ fn main() {\n         }\n \n         unsafe fn uninitialized<T>() -> T {\n-            intrinsics::uninit::<T>()\n+            MaybeUninit { uninit: () }.value\n         }\n \n+        zeroed::<(u8, u8)>();\n         #[allow(unreachable_code)]\n         {\n             if false {\n                 zeroed::<!>();\n                 zeroed::<Foo>();\n-                zeroed::<(u8, u8)>();\n                 uninitialized::<Foo>();\n             }\n         }"}, {"sha": "94007c83587c6efe244587c748f5f66569665a05", "filename": "src/constant.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b82472184d12235e971ab1b62e527aa62d15d141/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82472184d12235e971ab1b62e527aa62d15d141/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=b82472184d12235e971ab1b62e527aa62d15d141", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::interpret::{\n };\n use rustc::ty::Const;\n use rustc_mir::interpret::{\n-    InterpretCx, ImmTy, Machine, Memory, MemoryKind, OpTy, PlaceTy,\n+    InterpCx, ImmTy, Machine, Memory, MemoryKind, OpTy, PlaceTy,\n     StackPopCleanup,\n };\n \n@@ -141,10 +141,11 @@ fn trans_const_place<'a, 'tcx: 'a>(\n ) -> CPlace<'tcx> {\n     // Adapted from https://github.com/rust-lang/rust/pull/53671/files#diff-e0b58bb6712edaa8595ad7237542c958L551\n     let result = || -> InterpResult<'tcx, &'tcx Allocation> {\n-        let mut ecx = InterpretCx::new(\n+        let mut ecx = InterpCx::new(\n             fx.tcx.at(DUMMY_SP),\n             ty::ParamEnv::reveal_all(),\n             TransPlaceInterpreter,\n+            (),\n         );\n         ecx.push_stack_frame(\n             fx.instance,\n@@ -242,7 +243,7 @@ fn define_all_allocs(\n     module: &mut Module<impl Backend>,\n     cx: &mut ConstantCx,\n ) {\n-    let memory = Memory::<TransPlaceInterpreter>::new(tcx.at(DUMMY_SP));\n+    let memory = Memory::<TransPlaceInterpreter>::new(tcx.at(DUMMY_SP), ());\n \n     while let Some(todo_item) = pop_set(&mut cx.todo) {\n         let (data_id, alloc) = match todo_item {\n@@ -338,23 +339,25 @@ struct TransPlaceInterpreter;\n \n impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     type MemoryKinds = !;\n+    type ExtraFnVal = !;\n     type PointerTag = ();\n     type AllocExtra = ();\n     type MemoryExtra = ();\n     type FrameExtra = ();\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n+\n     const STATIC_KIND: Option<!> = None;\n \n-    fn enforce_validity(_: &InterpretCx<'mir, 'tcx, Self>) -> bool {\n+    fn enforce_validity(_: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         false\n     }\n \n-    fn before_terminator(_: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+    fn before_terminator(_: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         panic!();\n     }\n \n     fn find_fn(\n-        _: &mut InterpretCx<'mir, 'tcx, Self>,\n+        _: &mut InterpCx<'mir, 'tcx, Self>,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: Option<PlaceTy<'tcx>>,\n@@ -364,7 +367,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     }\n \n     fn call_intrinsic(\n-        _: &mut InterpretCx<'mir, 'tcx, Self>,\n+        _: &mut InterpCx<'mir, 'tcx, Self>,\n         _: Instance<'tcx>,\n         _: &[OpTy<'tcx>],\n         _: PlaceTy<'tcx>,\n@@ -373,43 +376,53 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n     }\n \n     fn find_foreign_static(\n+        _: TyCtxt<'tcx>,\n         _: DefId,\n-        _: ::rustc::ty::query::TyCtxtAt<'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n         panic!();\n     }\n \n     fn ptr_op(\n-        _: &InterpretCx<'mir, 'tcx, Self>,\n+        _: &InterpCx<'mir, 'tcx, Self>,\n         _: mir::BinOp,\n         _: ImmTy<'tcx>,\n         _: ImmTy<'tcx>,\n     ) -> InterpResult<'tcx, (Scalar, bool)> {\n         panic!();\n     }\n \n-    fn box_alloc(_: &mut InterpretCx<'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> InterpResult<'tcx> {\n+    fn box_alloc(_: &mut InterpCx<'mir, 'tcx, Self>, _: PlaceTy<'tcx>) -> InterpResult<'tcx> {\n         panic!();\n     }\n \n     fn tag_allocation<'b>(\n+        _: &(),\n         _: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _: Option<MemoryKind<!>>,\n-        _: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<(), ()>>, ()) {\n         (alloc, ())\n     }\n \n-    fn tag_static_base_pointer(_: AllocId, _: &Memory<'mir, 'tcx, Self>) -> Self::PointerTag {\n+    fn tag_static_base_pointer(_: &(), _: AllocId) -> Self::PointerTag {\n         ()\n     }\n \n-    fn stack_push(_: &mut InterpretCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+    fn call_extra_fn(\n+        _: &mut InterpCx<'mir, 'tcx, Self>,\n+        _: !,\n+        _: &[OpTy<'tcx, ()>],\n+        _: Option<PlaceTy<'tcx, ()>>,\n+        _: Option<BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        unreachable!();\n+    }\n+\n+    fn stack_push(_: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n \n-    fn stack_pop(_: &mut InterpretCx<'mir, 'tcx, Self>, _: ()) -> InterpResult<'tcx> {\n+    fn stack_pop(_: &mut InterpCx<'mir, 'tcx, Self>, _: ()) -> InterpResult<'tcx> {\n         Ok(())\n     }\n }"}, {"sha": "fbdbf927e2d8eb6e2cfb81d2ddc794c1b4b86463", "filename": "src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b82472184d12235e971ab1b62e527aa62d15d141/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82472184d12235e971ab1b62e527aa62d15d141/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=b82472184d12235e971ab1b62e527aa62d15d141", "patch": "@@ -389,16 +389,6 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n             let dst_ptr = dst.load_scalar(fx);\n             fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n         };\n-        uninit, <T> () {\n-            if ret.layout().abi == Abi::Uninhabited {\n-                crate::trap::trap_panic(fx, \"[panic] Called intrinsic::uninit for uninhabited type.\");\n-                return;\n-            }\n-\n-            let uninit_place = CPlace::new_stack_slot(fx, T);\n-            let uninit_val = uninit_place.to_cvalue(fx);\n-            ret.write_cvalue(fx, uninit_val);\n-        };\n         ctlz | ctlz_nonzero, <T> (v arg) {\n             let res = CValue::by_val(fx.bcx.ins().clz(arg), fx.layout_of(T));\n             ret.write_cvalue(fx, res);"}]}