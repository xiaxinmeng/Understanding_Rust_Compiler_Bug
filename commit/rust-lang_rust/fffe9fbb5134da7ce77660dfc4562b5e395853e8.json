{"sha": "fffe9fbb5134da7ce77660dfc4562b5e395853e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZmU5ZmJiNTEzNGRhN2NlNzc2NjBkZmM0NTYyYjVlMzk1ODUzZTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-23T16:27:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-06-23T17:09:21Z"}, "message": "hygiene: More descriptive names for things involved in late hygienic name resolution", "tree": {"sha": "87ddf9660384edb2f731ac333220115ad2078126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ddf9660384edb2f731ac333220115ad2078126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fffe9fbb5134da7ce77660dfc4562b5e395853e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fffe9fbb5134da7ce77660dfc4562b5e395853e8", "html_url": "https://github.com/rust-lang/rust/commit/fffe9fbb5134da7ce77660dfc4562b5e395853e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fffe9fbb5134da7ce77660dfc4562b5e395853e8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "296955a6e1ac7b5cb52f3c84d93cd57b19a7a715", "url": "https://api.github.com/repos/rust-lang/rust/commits/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715", "html_url": "https://github.com/rust-lang/rust/commit/296955a6e1ac7b5cb52f3c84d93cd57b19a7a715"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "b2365e22cc66f39268d0f4fc14a6af1cf16a14f8", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fffe9fbb5134da7ce77660dfc4562b5e395853e8/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffe9fbb5134da7ce77660dfc4562b5e395853e8/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=fffe9fbb5134da7ce77660dfc4562b5e395853e8", "patch": "@@ -157,8 +157,13 @@ pub struct Definitions {\n     node_to_def_index: NodeMap<DefIndex>,\n     def_index_to_node: [Vec<ast::NodeId>; 2],\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n-    macro_def_scopes: FxHashMap<Mark, DefId>,\n-    expansions: FxHashMap<DefIndex, Mark>,\n+    /// If `Mark` is an ID of some macro expansion,\n+    /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n+    parent_modules_of_macro_defs: FxHashMap<Mark, DefId>,\n+    /// Item with a given `DefIndex` was defined during opaque macro expansion with ID `Mark`.\n+    /// It can actually be defined during transparent macro expansions inside that opaque expansion,\n+    /// but transparent expansions are ignored here.\n+    opaque_expansions_that_defined: FxHashMap<DefIndex, Mark>,\n     next_disambiguator: FxHashMap<(DefIndex, DefPathData), u32>,\n     def_index_to_span: FxHashMap<DefIndex, Span>,\n }\n@@ -175,8 +180,8 @@ impl Clone for Definitions {\n                 self.def_index_to_node[1].clone(),\n             ],\n             node_to_hir_id: self.node_to_hir_id.clone(),\n-            macro_def_scopes: self.macro_def_scopes.clone(),\n-            expansions: self.expansions.clone(),\n+            parent_modules_of_macro_defs: self.parent_modules_of_macro_defs.clone(),\n+            opaque_expansions_that_defined: self.opaque_expansions_that_defined.clone(),\n             next_disambiguator: self.next_disambiguator.clone(),\n             def_index_to_span: self.def_index_to_span.clone(),\n         }\n@@ -397,8 +402,8 @@ impl Definitions {\n             node_to_def_index: NodeMap(),\n             def_index_to_node: [vec![], vec![]],\n             node_to_hir_id: IndexVec::new(),\n-            macro_def_scopes: FxHashMap(),\n-            expansions: FxHashMap(),\n+            parent_modules_of_macro_defs: FxHashMap(),\n+            opaque_expansions_that_defined: FxHashMap(),\n             next_disambiguator: FxHashMap(),\n             def_index_to_span: FxHashMap(),\n         }\n@@ -580,7 +585,7 @@ impl Definitions {\n \n         let expansion = expansion.modern();\n         if expansion != Mark::root() {\n-            self.expansions.insert(index, expansion);\n+            self.opaque_expansions_that_defined.insert(index, expansion);\n         }\n \n         // The span is added if it isn't DUMMY_SP\n@@ -600,16 +605,16 @@ impl Definitions {\n         self.node_to_hir_id = mapping;\n     }\n \n-    pub fn expansion(&self, index: DefIndex) -> Mark {\n-        self.expansions.get(&index).cloned().unwrap_or(Mark::root())\n+    pub fn opaque_expansion_that_defined(&self, index: DefIndex) -> Mark {\n+        self.opaque_expansions_that_defined.get(&index).cloned().unwrap_or(Mark::root())\n     }\n \n-    pub fn macro_def_scope(&self, mark: Mark) -> DefId {\n-        self.macro_def_scopes[&mark]\n+    pub fn parent_module_of_macro_def(&self, mark: Mark) -> DefId {\n+        self.parent_modules_of_macro_defs[&mark]\n     }\n \n-    pub fn add_macro_def_scope(&mut self, mark: Mark, scope: DefId) {\n-        self.macro_def_scopes.insert(mark, scope);\n+    pub fn add_parent_module_of_macro_def(&mut self, mark: Mark, module: DefId) {\n+        self.parent_modules_of_macro_defs.insert(mark, module);\n     }\n }\n "}, {"sha": "ce7098314557939fc59623815997c138ba2b01e7", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fffe9fbb5134da7ce77660dfc4562b5e395853e8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffe9fbb5134da7ce77660dfc4562b5e395853e8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fffe9fbb5134da7ce77660dfc4562b5e395853e8", "patch": "@@ -2732,13 +2732,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn adjust_ident(self, mut ident: Ident, scope: DefId, block: NodeId) -> (Ident, DefId) {\n-        let expansion = match scope.krate {\n-            LOCAL_CRATE => self.hir.definitions().expansion(scope.index),\n+        ident = ident.modern();\n+        let target_expansion = match scope.krate {\n+            LOCAL_CRATE => self.hir.definitions().opaque_expansion_that_defined(scope.index),\n             _ => Mark::root(),\n         };\n-        ident = ident.modern();\n-        let scope = match ident.span.adjust(expansion) {\n-            Some(macro_def) => self.hir.definitions().macro_def_scope(macro_def),\n+        let scope = match ident.span.adjust(target_expansion) {\n+            Some(actual_expansion) =>\n+                self.hir.definitions().parent_module_of_macro_def(actual_expansion),\n             None if block == DUMMY_NODE_ID => DefId::local(CRATE_DEF_INDEX), // Dummy DefId\n             None => self.hir.get_module_parent(block),\n         };"}, {"sha": "ebdaa456170b215a33bd16d653d040821e8fd934", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fffe9fbb5134da7ce77660dfc4562b5e395853e8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fffe9fbb5134da7ce77660dfc4562b5e395853e8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=fffe9fbb5134da7ce77660dfc4562b5e395853e8", "patch": "@@ -327,7 +327,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n         self.macro_defs.insert(invoc.expansion_data.mark, def_id);\n         let normal_module_def_id =\n             self.macro_def_scope(invoc.expansion_data.mark).normal_ancestor_id;\n-        self.definitions.add_macro_def_scope(invoc.expansion_data.mark, normal_module_def_id);\n+        self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.mark,\n+                                                        normal_module_def_id);\n \n         self.unused_macros.remove(&def_id);\n         let ext = self.get_macro(def);"}]}