{"sha": "5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDJmNjAzNTViOGI5YTFlYWYwYzBmYzE5M2RlM2I5YzQ4ODUzZGY=", "commit": {"author": {"name": "Jacob Lifshay", "email": "programmerjake@gmail.com", "date": "2021-08-26T04:45:37Z"}, "committer": {"name": "Jacob Lifshay", "email": "programmerjake@gmail.com", "date": "2021-08-26T05:08:27Z"}, "message": "add support for clobbering xer, cr, and cr[0-7] for asm! on OpenPower/PowerPC\n\nFixes #88315", "tree": {"sha": "f84b7151d6d575c4dc005b0cc9b618d7a5b88a9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f84b7151d6d575c4dc005b0cc9b618d7a5b88a9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "html_url": "https://github.com/rust-lang/rust/commit/5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/comments", "author": {"login": "programmerjake", "id": 4584340, "node_id": "MDQ6VXNlcjQ1ODQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4584340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/programmerjake", "html_url": "https://github.com/programmerjake", "followers_url": "https://api.github.com/users/programmerjake/followers", "following_url": "https://api.github.com/users/programmerjake/following{/other_user}", "gists_url": "https://api.github.com/users/programmerjake/gists{/gist_id}", "starred_url": "https://api.github.com/users/programmerjake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/programmerjake/subscriptions", "organizations_url": "https://api.github.com/users/programmerjake/orgs", "repos_url": "https://api.github.com/users/programmerjake/repos", "events_url": "https://api.github.com/users/programmerjake/events{/privacy}", "received_events_url": "https://api.github.com/users/programmerjake/received_events", "type": "User", "site_admin": false}, "committer": {"login": "programmerjake", "id": 4584340, "node_id": "MDQ6VXNlcjQ1ODQzNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4584340?v=4", "gravatar_id": "", "url": "https://api.github.com/users/programmerjake", "html_url": "https://github.com/programmerjake", "followers_url": "https://api.github.com/users/programmerjake/followers", "following_url": "https://api.github.com/users/programmerjake/following{/other_user}", "gists_url": "https://api.github.com/users/programmerjake/gists{/gist_id}", "starred_url": "https://api.github.com/users/programmerjake/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/programmerjake/subscriptions", "organizations_url": "https://api.github.com/users/programmerjake/orgs", "repos_url": "https://api.github.com/users/programmerjake/repos", "events_url": "https://api.github.com/users/programmerjake/events{/privacy}", "received_events_url": "https://api.github.com/users/programmerjake/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3", "html_url": "https://github.com/rust-lang/rust/commit/0afc20860eb98a29d9bbeea80f2acc5be38c6bf3"}], "stats": {"total": 145, "additions": 135, "deletions": 10}, "files": [{"sha": "527ad1c7b0be028810f1a3d4ab41851b2f482e96", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "patch": "@@ -615,6 +615,10 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass, layout: Option<&TyAndLayout<'tcx>>)\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => \"b\",\n             InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => \"f\",\n+            InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::cr)\n+            | InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::xer) => {\n+                unreachable!(\"clobber-only\")\n+            }\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {\n@@ -751,6 +755,10 @@ fn dummy_output_type(cx: &CodegenCx<'ll, 'tcx>, reg: InlineAsmRegClass) -> &'ll\n         InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::reg_nonzero) => cx.type_i32(),\n         InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::freg) => cx.type_f64(),\n+        InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::cr)\n+        | InlineAsmRegClass::PowerPC(PowerPCInlineAsmRegClass::xer) => {\n+            unreachable!(\"clobber-only\")\n+        }\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => cx.type_f32(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::vreg) => {"}, {"sha": "8ce2e7b06f8af019e0771b22d30fce96e851fb24", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "patch": "@@ -478,6 +478,7 @@ symbols! {\n         core_panic_macro,\n         cosf32,\n         cosf64,\n+        cr,\n         crate_id,\n         crate_in_paths,\n         crate_local,\n@@ -1415,6 +1416,7 @@ symbols! {\n         wreg,\n         write_bytes,\n         x87_reg,\n+        xer,\n         xmm_reg,\n         ymm_reg,\n         zmm_reg,"}, {"sha": "2a3591566a9c9c87c8498936059f6dca3266f087", "filename": "compiler/rustc_target/src/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fmod.rs?ref=5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "patch": "@@ -344,7 +344,7 @@ impl InlineAsmReg {\n             Self::Arm(r) => r.overlapping_regs(|r| cb(Self::Arm(r))),\n             Self::AArch64(_) => cb(self),\n             Self::RiscV(_) => cb(self),\n-            Self::PowerPC(_) => cb(self),\n+            Self::PowerPC(r) => r.overlapping_regs(|r| cb(Self::PowerPC(r))),\n             Self::Hexagon(r) => r.overlapping_regs(|r| cb(Self::Hexagon(r))),\n             Self::Mips(_) => cb(self),\n             Self::Bpf(r) => r.overlapping_regs(|r| cb(Self::Bpf(r))),"}, {"sha": "51a4303689e67f64a39de6bf08fa9c7de0ab97cb", "filename": "compiler/rustc_target/src/asm/powerpc.rs", "status": "modified", "additions": 60, "deletions": 9, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Fpowerpc.rs?ref=5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "patch": "@@ -7,6 +7,8 @@ def_reg_class! {\n         reg,\n         reg_nonzero,\n         freg,\n+        cr,\n+        xer,\n     }\n }\n \n@@ -44,6 +46,7 @@ impl PowerPCInlineAsmRegClass {\n                 }\n             }\n             Self::freg => types! { _: F32, F64; },\n+            Self::cr | Self::xer => &[],\n         }\n     }\n }\n@@ -108,6 +111,16 @@ def_regs! {\n         f29: freg = [\"f29\", \"fr29\"],\n         f30: freg = [\"f30\", \"fr30\"],\n         f31: freg = [\"f31\", \"fr31\"],\n+        cr: cr = [\"cr\"],\n+        cr0: cr = [\"cr0\"],\n+        cr1: cr = [\"cr1\"],\n+        cr2: cr = [\"cr2\"],\n+        cr3: cr = [\"cr3\"],\n+        cr4: cr = [\"cr4\"],\n+        cr5: cr = [\"cr5\"],\n+        cr6: cr = [\"cr6\"],\n+        cr7: cr = [\"cr7\"],\n+        xer: xer = [\"xer\"],\n         #error = [\"r1\", \"1\", \"sp\"] =>\n             \"the stack pointer cannot be used as an operand for inline asm\",\n         #error = [\"r2\", \"2\"] =>\n@@ -136,17 +149,55 @@ impl PowerPCInlineAsmReg {\n         _arch: InlineAsmArch,\n         _modifier: Option<char>,\n     ) -> fmt::Result {\n+        macro_rules! do_emit {\n+            (\n+                $($(($reg:ident, $value:literal)),*;)*\n+            ) => {\n+                out.write_str(match self {\n+                    $($(Self::$reg => $value,)*)*\n+                })\n+            };\n+        }\n         // Strip off the leading prefix.\n-        if self as u32 <= Self::r28 as u32 {\n-            let index = self as u32 - Self::r28 as u32;\n-            write!(out, \"{}\", index)\n-        } else if self as u32 >= Self::f0 as u32 && self as u32 <= Self::f31 as u32 {\n-            let index = self as u32 - Self::f31 as u32;\n-            write!(out, \"{}\", index)\n-        } else {\n-            unreachable!()\n+        do_emit! {\n+            (r0, \"0\"), (r3, \"3\"), (r4, \"4\"), (r5, \"5\"), (r6, \"6\"), (r7, \"7\");\n+            (r8, \"8\"), (r9, \"9\"), (r10, \"10\"), (r11, \"11\"), (r12, \"12\"), (r14, \"14\"), (r15, \"15\");\n+            (r16, \"16\"), (r17, \"17\"), (r18, \"18\"), (r19, \"19\"), (r20, \"20\"), (r21, \"21\"), (r22, \"22\"), (r23, \"23\");\n+            (r24, \"24\"), (r25, \"25\"), (r26, \"26\"), (r27, \"27\"), (r28, \"28\");\n+            (f0, \"0\"), (f1, \"1\"), (f2, \"2\"), (f3, \"3\"), (f4, \"4\"), (f5, \"5\"), (f6, \"6\"), (f7, \"7\");\n+            (f8, \"8\"), (f9, \"9\"), (f10, \"10\"), (f11, \"11\"), (f12, \"12\"), (f13, \"13\"), (f14, \"14\"), (f15, \"15\");\n+            (f16, \"16\"), (f17, \"17\"), (f18, \"18\"), (f19, \"19\"), (f20, \"20\"), (f21, \"21\"), (f22, \"22\"), (f23, \"23\");\n+            (f24, \"24\"), (f25, \"25\"), (f26, \"26\"), (f27, \"27\"), (f28, \"28\"), (f29, \"29\"), (f30, \"30\"), (f31, \"31\");\n+            (cr, \"cr\");\n+            (cr0, \"0\"), (cr1, \"1\"), (cr2, \"2\"), (cr3, \"3\"), (cr4, \"4\"), (cr5, \"5\"), (cr6, \"6\"), (cr7, \"7\");\n+            (xer, \"xer\");\n         }\n     }\n \n-    pub fn overlapping_regs(self, mut _cb: impl FnMut(PowerPCInlineAsmReg)) {}\n+    pub fn overlapping_regs(self, mut cb: impl FnMut(PowerPCInlineAsmReg)) {\n+        macro_rules! reg_conflicts {\n+            (\n+                $(\n+                    $full:ident : $($field:ident)*\n+                ),*;\n+            ) => {\n+                match self {\n+                    $(\n+                        Self::$full => {\n+                            cb(Self::$full);\n+                            $(cb(Self::$field);)*\n+                        }\n+                        $(Self::$field)|* => {\n+                            cb(Self::$full);\n+                            cb(self);\n+                        }\n+                    )*\n+                    r => cb(r),\n+                }\n+            };\n+        }\n+        reg_conflicts! {\n+            cr : cr0 cr1 cr2 cr3 cr4 cr5 cr6 cr7;\n+        }\n+    }\n }"}, {"sha": "fd929d842c94b74ddfafcb5c97f4786e8ed6d28e", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "patch": "@@ -584,6 +584,8 @@ Here is the list of currently supported register classes:\n | PowerPC | `reg` | `r[0-31]` | `r` |\n | PowerPC | `reg_nonzero` | | `r[1-31]` | `b` |\n | PowerPC | `freg` | `f[0-31]` | `f` |\n+| PowerPC | `cr` | `cr[0-7]`, `cr` | Only clobbers |\n+| PowerPC | `xer` | `xer` | Only clobbers |\n | wasm32 | `local` | None\\* | `r` |\n | BPF | `reg` |\u00a0`r[0-10]` | `r` |\n | BPF | `wreg` |\u00a0`w[0-10]` | `w` |\n@@ -637,6 +639,8 @@ Each register class has constraints on which value types they can be used with.\n | PowerPC | `reg` | None | `i8`, `i16`, `i32` |\n | PowerPC | `reg_nonzero` | None | `i8`, `i16`, `i32` |\n | PowerPC | `freg` | None | `f32`, `f64` |\n+| PowerPC | `cr` | N/A | Only clobbers |\n+| PowerPC | `xer` | N/A | Only clobbers |\n | wasm32 | `local` | None | `i8` `i16` `i32` `i64` `f32` `f64` |\n | BPF |\u00a0`reg` |\u00a0None | `i8` `i16` `i32` `i64` |\n | BPF |\u00a0`wreg` |\u00a0`alu32` | `i8` `i16` `i32` |"}, {"sha": "55ca8ee836c9844b566e2ffd6f52184f7649c881", "filename": "src/test/assembly/asm/powerpc-types.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fpowerpc-types.rs?ref=5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "patch": "@@ -194,3 +194,15 @@ check_reg!(reg_f32_f0, f32, \"0\", \"f0\", \"fmr\");\n // CHECK: fmr 0, 0\n // CHECK: #NO_APP\n check_reg!(reg_f64_f0, f64, \"0\", \"f0\", \"fmr\");\n+\n+// CHECK-LABEL: reg_f32_f18:\n+// CHECK: #APP\n+// CHECK: fmr 18, 18\n+// CHECK: #NO_APP\n+check_reg!(reg_f32_f18, f32, \"18\", \"f18\", \"fmr\");\n+\n+// CHECK-LABEL: reg_f64_f18:\n+// CHECK: #APP\n+// CHECK: fmr 18, 18\n+// CHECK: #NO_APP\n+check_reg!(reg_f64_f18, f64, \"18\", \"f18\", \"fmr\");"}, {"sha": "91a82c601202947f887fd75ea7aae0a76daab9ac", "filename": "src/test/codegen/asm-powerpc-clobbers.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5802f60355b8b9a1eaf0c0fc193de3b9c48853df/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-powerpc-clobbers.rs?ref=5802f60355b8b9a1eaf0c0fc193de3b9c48853df", "patch": "@@ -0,0 +1,48 @@\n+// min-llvm-version: 10.0.1\n+// revisions: powerpc powerpc64 powerpc64le\n+//[powerpc] compile-flags: --target powerpc-unknown-linux-gnu\n+//[powerpc] needs-llvm-components: powerpc\n+//[powerpc64] compile-flags: --target powerpc64-unknown-linux-gnu\n+//[powerpc64] needs-llvm-components: powerpc\n+//[powerpc64le] compile-flags: --target powerpc64le-unknown-linux-gnu\n+//[powerpc64le] needs-llvm-components: powerpc\n+\n+#![crate_type = \"rlib\"]\n+#![feature(no_core, rustc_attrs, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+\n+// CHECK-LABEL: @cr_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{cr}\"()\n+#[no_mangle]\n+pub unsafe fn cr_clobber() {\n+    asm!(\"\", out(\"cr\") _, options(nostack, nomem));\n+}\n+\n+// CHECK-LABEL: @cr0_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{cr0}\"()\n+#[no_mangle]\n+pub unsafe fn cr0_clobber() {\n+    asm!(\"\", out(\"cr0\") _, options(nostack, nomem));\n+}\n+\n+// CHECK-LABEL: @cr5_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{cr5}\"()\n+#[no_mangle]\n+pub unsafe fn cr5_clobber() {\n+    asm!(\"\", out(\"cr5\") _, options(nostack, nomem));\n+}\n+\n+// CHECK-LABEL: @xer_clobber\n+// CHECK: call void asm sideeffect \"\", \"~{xer}\"()\n+#[no_mangle]\n+pub unsafe fn xer_clobber() {\n+    asm!(\"\", out(\"xer\") _, options(nostack, nomem));\n+}"}]}