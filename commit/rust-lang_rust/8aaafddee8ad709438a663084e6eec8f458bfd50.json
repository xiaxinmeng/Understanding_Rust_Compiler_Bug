{"sha": "8aaafddee8ad709438a663084e6eec8f458bfd50", "node_id": "C_kwDOAAsO6NoAKDhhYWFmZGRlZThhZDcwOTQzOGE2NjMwODRlNmVlYzhmNDU4YmZkNTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-17T12:53:46Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-17T12:53:46Z"}, "message": "Properly reload changed configs for server start", "tree": {"sha": "a59fcf975ca14a638de588694f0da455df203eca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59fcf975ca14a638de588694f0da455df203eca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aaafddee8ad709438a663084e6eec8f458bfd50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aaafddee8ad709438a663084e6eec8f458bfd50", "html_url": "https://github.com/rust-lang/rust/commit/8aaafddee8ad709438a663084e6eec8f458bfd50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aaafddee8ad709438a663084e6eec8f458bfd50/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f435977df34e722b45d787d7eadac23cf5b040e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f435977df34e722b45d787d7eadac23cf5b040e", "html_url": "https://github.com/rust-lang/rust/commit/6f435977df34e722b45d787d7eadac23cf5b040e"}], "stats": {"total": 108, "additions": 51, "deletions": 57}, "files": [{"sha": "cb088fc6c682c79c19c790b59e8a754dcb76d8a0", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=8aaafddee8ad709438a663084e6eec8f458bfd50", "patch": "@@ -310,6 +310,10 @@ export function ssr(ctx: Ctx): Cmd {\n \n export function serverVersion(ctx: Ctx): Cmd {\n     return async () => {\n+        if (!ctx.serverPath) {\n+            void vscode.window.showWarningMessage(`rust-analyzer server is not running`);\n+            return;\n+        }\n         const { stdout } = spawnSync(ctx.serverPath, [\"--version\"], { encoding: \"utf8\" });\n         const versionString = stdout.slice(`rust-analyzer `.length).trim();\n "}, {"sha": "10e243dc896c4a6d7122fb35f27d6cb1ddd1f5f9", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=8aaafddee8ad709438a663084e6eec8f458bfd50", "patch": "@@ -14,15 +14,15 @@ export class Config {\n \n     readonly rootSection = \"rust-analyzer\";\n     private readonly requiresWorkspaceReloadOpts = [\n-        \"serverPath\",\n-        \"server\",\n         // FIXME: This shouldn't be here, changing this setting should reload\n         // `continueCommentsOnNewline` behavior without restart\n         \"typing\",\n     ].map((opt) => `${this.rootSection}.${opt}`);\n     private readonly requiresReloadOpts = [\n         \"cargo\",\n         \"procMacro\",\n+        \"serverPath\",\n+        \"server\",\n         \"files\",\n         \"lens\", // works as lens.*\n     ]"}, {"sha": "f62ccd1a6529d81feb6a5bcf004868d3e1b35a99", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=8aaafddee8ad709438a663084e6eec8f458bfd50", "patch": "@@ -6,6 +6,8 @@ import { Config, substituteVariablesInEnv, substituteVSCodeVariables } from \"./c\n import { createClient } from \"./client\";\n import { isRustEditor, log, RustEditor } from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n+import { PersistentState } from \"./persistent_state\";\n+import { bootstrap } from \"./bootstrap\";\n \n export type Workspace =\n     | {\n@@ -17,28 +19,18 @@ export type Workspace =\n       };\n \n export class Ctx {\n-    private client: lc.LanguageClient | undefined;\n-    readonly config: Config;\n-    serverPath: string;\n     readonly statusBar: vscode.StatusBarItem;\n+    readonly config: Config;\n+\n+    private client: lc.LanguageClient | undefined;\n \n     traceOutputChannel: vscode.OutputChannel | undefined;\n     outputChannel: vscode.OutputChannel | undefined;\n-\n-    serverOptions:\n-        | {\n-              run: lc.Executable;\n-              debug: lc.Executable;\n-          }\n-        | undefined;\n     workspace: Workspace;\n+    state: PersistentState;\n+    serverPath: string | undefined;\n \n-    constructor(\n-        readonly extCtx: vscode.ExtensionContext,\n-        config: Config,\n-        serverPath: string,\n-        workspace: Workspace\n-    ) {\n+    constructor(readonly extCtx: vscode.ExtensionContext, workspace: Workspace) {\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n         extCtx.subscriptions.push(this.statusBar);\n         extCtx.subscriptions.push({\n@@ -50,9 +42,10 @@ export class Ctx {\n         this.statusBar.tooltip = \"ready\";\n         this.statusBar.command = \"rust-analyzer.analyzerStatus\";\n         this.statusBar.show();\n-        this.serverPath = serverPath;\n-        this.config = config;\n         this.workspace = workspace;\n+\n+        this.state = new PersistentState(extCtx.globalState);\n+        this.config = new Config(extCtx);\n     }\n \n     clientFetcher() {\n@@ -64,6 +57,7 @@ export class Ctx {\n     }\n \n     async getClient() {\n+        // if server path changes -> dispose\n         if (!this.traceOutputChannel) {\n             this.traceOutputChannel = vscode.window.createOutputChannel(\n                 \"Rust Analyzer Language Server Trace\"\n@@ -72,25 +66,32 @@ export class Ctx {\n         if (!this.outputChannel) {\n             this.outputChannel = vscode.window.createOutputChannel(\"Rust Analyzer Language Server\");\n         }\n-        if (!this.serverOptions) {\n-            log.info(\"Creating server options client\");\n+\n+        if (!this.client) {\n+            log.info(\"Creating language client\");\n+\n+            this.serverPath = await bootstrap(this.extCtx, this.config, this.state).catch((err) => {\n+                let message = \"bootstrap error. \";\n+\n+                message +=\n+                    'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n+                message += 'To enable verbose logs use { \"rust-analyzer.trace.extension\": true }';\n+\n+                log.error(\"Bootstrap error\", err);\n+                throw new Error(message);\n+            });\n             const newEnv = substituteVariablesInEnv(\n                 Object.assign({}, process.env, this.config.serverExtraEnv)\n             );\n             const run: lc.Executable = {\n                 command: this.serverPath,\n                 options: { env: newEnv },\n             };\n-            this.serverOptions = {\n+            const serverOptions = {\n                 run,\n                 debug: run,\n             };\n-        } else {\n-            this.serverOptions.run.command = this.serverPath;\n-            this.serverOptions.debug.command = this.serverPath;\n-        }\n-        if (!this.client) {\n-            log.info(\"Creating language client\");\n+\n             let rawInitializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n \n             if (this.workspace.kind === \"Detached Files\") {\n@@ -106,7 +107,7 @@ export class Ctx {\n                 this.traceOutputChannel,\n                 this.outputChannel,\n                 initializationOptions,\n-                this.serverOptions\n+                serverOptions\n             );\n             this.client.onNotification(ra.serverStatus, (params) => this.setServerStatus(params));\n         }\n@@ -128,6 +129,7 @@ export class Ctx {\n     async disposeClient() {\n         log.info(\"Deactivating language client\");\n         await this.client?.dispose();\n+        this.serverPath = undefined;\n         this.client = undefined;\n     }\n "}, {"sha": "84f0a5810f9a195242d404795aca2b70a64aed1e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8aaafddee8ad709438a663084e6eec8f458bfd50/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=8aaafddee8ad709438a663084e6eec8f458bfd50", "patch": "@@ -3,12 +3,9 @@ import * as lc from \"vscode-languageclient/node\";\n \n import * as commands from \"./commands\";\n import { Ctx, Workspace } from \"./ctx\";\n-import { log, isRustDocument } from \"./util\";\n-import { PersistentState } from \"./persistent_state\";\n+import { isRustDocument } from \"./util\";\n import { activateTaskProvider } from \"./tasks\";\n import { setContextValue } from \"./util\";\n-import { bootstrap } from \"./bootstrap\";\n-import { Config } from \"./config\";\n \n const RUST_PROJECT_CONTEXT_NAME = \"inRustProject\";\n \n@@ -56,24 +53,13 @@ export async function activate(\n               }\n             : { kind: \"Workspace Folder\" };\n \n-    const state = new PersistentState(context.globalState);\n-    const config = new Config(context);\n-\n-    const serverPath = await bootstrap(context, config, state).catch((err) => {\n-        let message = \"bootstrap error. \";\n-\n-        message += 'See the logs in \"OUTPUT > Rust Analyzer Client\" (should open automatically). ';\n-        message += 'To enable verbose logs use { \"rust-analyzer.trace.extension\": true }';\n-\n-        log.error(\"Bootstrap error\", err);\n-        throw new Error(message);\n-    });\n-\n-    const ctx = new Ctx(context, config, serverPath, workspace);\n+    const ctx = new Ctx(context, workspace);\n     // VS Code doesn't show a notification when an extension fails to activate\n     // so we do it ourselves.\n     return await activateServer(ctx).catch((err) => {\n-        void vscode.window.showErrorMessage(`Cannot activate rust-analyzer: ${err.message}`);\n+        void vscode.window.showErrorMessage(\n+            `Cannot activate rust-analyzer extension: ${err.message}`\n+        );\n         throw err;\n     });\n }\n@@ -83,25 +69,26 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n         ctx.pushExtCleanup(activateTaskProvider(ctx.config));\n     }\n \n-    await ctx.activate();\n     await initCommonContext(ctx);\n \n     if (ctx.config.typingContinueCommentsOnNewline) {\n         ctx.pushExtCleanup(configureLanguage());\n     }\n \n     vscode.workspace.onDidChangeConfiguration(\n-        (_) =>\n-            ctx\n-                .getClient()\n-                .then((it) =>\n-                    it.sendNotification(\"workspace/didChangeConfiguration\", { settings: \"\" })\n-                )\n-                .catch(log.error),\n+        async (_) => {\n+            await ctx\n+                .clientFetcher()\n+                .client?.sendNotification(\"workspace/didChangeConfiguration\", { settings: \"\" });\n+        },\n         null,\n         ctx.subscriptions\n     );\n \n+    await ctx.activate().catch((err) => {\n+        void vscode.window.showErrorMessage(`Cannot activate rust-analyzer server: ${err.message}`);\n+    });\n+\n     return ctx.clientFetcher();\n }\n \n@@ -130,6 +117,7 @@ async function initCommonContext(ctx: Ctx) {\n     // Commands which invokes manually via command palette, shortcut, etc.\n     ctx.registerCommand(\"reload\", (_) => async () => {\n         void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n+        // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n         await ctx.disposeClient();\n         await ctx.activate();\n     });"}]}