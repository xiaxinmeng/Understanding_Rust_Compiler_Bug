{"sha": "9c61f817eb6503e5efb7f92b545073c51c2549e3", "node_id": "C_kwDOAAsO6NoAKDljNjFmODE3ZWI2NTAzZTVlZmI3ZjkyYjU0NTA3M2M1MWMyNTQ5ZTM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-01T14:36:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T14:36:47Z"}, "message": "Rollup merge of #97399 - SparrowLii:arg_index, r=oli-obk\n\nsimplify code of finding arg index in `opt_const_param_of`\n\nFrom the FIXME in the impl of `opt_const_param_of`. Part of the code is simplified by blending two iterator statements and using `let...else` statement.", "tree": {"sha": "0de5f3f5417025b15e3c061e1e8cfd9f871f9685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0de5f3f5417025b15e3c061e1e8cfd9f871f9685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c61f817eb6503e5efb7f92b545073c51c2549e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJil3l/CRBK7hj4Ov3rIwAARswIACFyFkdyC1DhdoXB4bJa0tMU\nlEGFa5EoBzKYuyPJ4no8/JhgFfJjvCCsFthkrrSdw4DqTYqEU/bQgEmdo/ZUMZgb\nzdIssbdAA7Qd45loHbmdo6imRE9LKy1njXQgPObStPQ+c2Pi9XlrMvTAxCb7hgQi\nR290MEhHuJktHJXWaLVJHlqIH7aV7kjXG23wGLQDC/cwNHD3r+QYmfej7ZeHnnm5\nnQBlLx/tOCAe6WrJ0MYI2KjSTkznlIoZRg5vKuiUJt7bS6hb8R1kUV6OKEGX7CwU\nlT7Lq6/aaWate9/duNF6kCwuu1AW0CeCBNbVGjXRNXav/hXNqk6728bvlXxjFfM=\n=trc8\n-----END PGP SIGNATURE-----\n", "payload": "tree 0de5f3f5417025b15e3c061e1e8cfd9f871f9685\nparent 2ab919ad9c993634bccae78504524f505ce1e5c0\nparent 1b4714f587e9e364714c9a4b771e6e7fe6697152\nauthor Yuki Okushi <jtitor@2k36.org> 1654094207 +0900\ncommitter GitHub <noreply@github.com> 1654094207 +0900\n\nRollup merge of #97399 - SparrowLii:arg_index, r=oli-obk\n\nsimplify code of finding arg index in `opt_const_param_of`\n\nFrom the FIXME in the impl of `opt_const_param_of`. Part of the code is simplified by blending two iterator statements and using `let...else` statement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c61f817eb6503e5efb7f92b545073c51c2549e3", "html_url": "https://github.com/rust-lang/rust/commit/9c61f817eb6503e5efb7f92b545073c51c2549e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c61f817eb6503e5efb7f92b545073c51c2549e3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ab919ad9c993634bccae78504524f505ce1e5c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ab919ad9c993634bccae78504524f505ce1e5c0", "html_url": "https://github.com/rust-lang/rust/commit/2ab919ad9c993634bccae78504524f505ce1e5c0"}, {"sha": "1b4714f587e9e364714c9a4b771e6e7fe6697152", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4714f587e9e364714c9a4b771e6e7fe6697152", "html_url": "https://github.com/rust-lang/rust/commit/1b4714f587e9e364714c9a4b771e6e7fe6697152"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "7e3fefe4502d2c1bc580377c4441cb70f8601502", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/9c61f817eb6503e5efb7f92b545073c51c2549e3/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c61f817eb6503e5efb7f92b545073c51c2549e3/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=9c61f817eb6503e5efb7f92b545073c51c2549e3", "patch": "@@ -161,38 +161,23 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n             // We've encountered an `AnonConst` in some path, so we need to\n             // figure out which generic parameter it corresponds to and return\n             // the relevant type.\n-            let filtered = path.segments.iter().find_map(|seg| {\n-                seg.args?\n-                    .args\n+            let Some((arg_index, segment)) = path.segments.iter().find_map(|seg| {\n+                let args = seg.args?;\n+                args.args\n+                .iter()\n+                .filter(|arg| arg.is_ty_or_const())\n+                .position(|arg| arg.id() == hir_id)\n+                .map(|index| (index, seg)).or_else(|| args.bindings\n                     .iter()\n-                    .filter(|arg| arg.is_ty_or_const())\n-                    .position(|arg| arg.id() == hir_id)\n-                    .map(|index| (index, seg))\n-            });\n-\n-            // FIXME(associated_const_generics): can we blend this with iteration above?\n-            let (arg_index, segment) = match filtered {\n-                None => {\n-                    let binding_filtered = path.segments.iter().find_map(|seg| {\n-                        seg.args?\n-                            .bindings\n-                            .iter()\n-                            .filter_map(TypeBinding::opt_const)\n-                            .position(|ct| ct.hir_id == hir_id)\n-                            .map(|idx| (idx, seg))\n-                    });\n-                    match binding_filtered {\n-                        Some(inner) => inner,\n-                        None => {\n-                            tcx.sess.delay_span_bug(\n-                                tcx.def_span(def_id),\n-                                \"no arg matching AnonConst in path\",\n-                            );\n-                            return None;\n-                        }\n-                    }\n-                }\n-                Some(inner) => inner,\n+                    .filter_map(TypeBinding::opt_const)\n+                    .position(|ct| ct.hir_id == hir_id)\n+                    .map(|idx| (idx, seg)))\n+            }) else {\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(def_id),\n+                    \"no arg matching AnonConst in path\",\n+                );\n+                return None;\n             };\n \n             // Try to use the segment resolution if it is valid, otherwise we"}]}