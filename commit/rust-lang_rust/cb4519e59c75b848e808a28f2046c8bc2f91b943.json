{"sha": "cb4519e59c75b848e808a28f2046c8bc2f91b943", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDUxOWU1OWM3NWI4NDhlODA4YTI4ZjIwNDZjOGJjMmY5MWI5NDM=", "commit": {"author": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2021-07-30T16:28:44Z"}, "committer": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2021-08-02T08:13:30Z"}, "message": "os current_exe using same approach as linux to get always the full absolute path\nbut in case of failure (e.g. prcfs not mounted) still using\ngetexecname.", "tree": {"sha": "3b2e94ea3895028a445c70f9ee8f72cc6a4b1cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b2e94ea3895028a445c70f9ee8f72cc6a4b1cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4519e59c75b848e808a28f2046c8bc2f91b943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4519e59c75b848e808a28f2046c8bc2f91b943", "html_url": "https://github.com/rust-lang/rust/commit/cb4519e59c75b848e808a28f2046c8bc2f91b943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4519e59c75b848e808a28f2046c8bc2f91b943/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b289bb7fdfcb6f54d825927ab9b5722cabc2a140", "url": "https://api.github.com/repos/rust-lang/rust/commits/b289bb7fdfcb6f54d825927ab9b5722cabc2a140", "html_url": "https://github.com/rust-lang/rust/commit/b289bb7fdfcb6f54d825927ab9b5722cabc2a140"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "14f0747bedcc3b90aeddf73625755e0a1cca3fa1", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb4519e59c75b848e808a28f2046c8bc2f91b943/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4519e59c75b848e808a28f2046c8bc2f91b943/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=cb4519e59c75b848e808a28f2046c8bc2f91b943", "patch": "@@ -368,20 +368,24 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    extern \"C\" {\n-        fn getexecname() -> *const c_char;\n-    }\n-    unsafe {\n-        let path = getexecname();\n-        if path.is_null() {\n-            Err(io::Error::last_os_error())\n-        } else {\n-            let filename = CStr::from_ptr(path).to_bytes();\n-            let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n+    if let Ok(path) = crate::fs::read_link(\"/proc/self/path/a.out\") {\n+        Ok(path)\n+    } else {\n+        extern \"C\" {\n+            fn getexecname() -> *const c_char;\n+        }\n+        unsafe {\n+            let path = getexecname();\n+            if path.is_null() {\n+                Err(io::Error::last_os_error())\n+            } else {\n+                let filename = CStr::from_ptr(path).to_bytes();\n+                let path = PathBuf::from(<OsStr as OsStrExt>::from_bytes(filename));\n \n-            // Prepend a current working directory to the path if\n-            // it doesn't contain an absolute pathname.\n-            if filename[0] == b'/' { Ok(path) } else { getcwd().map(|cwd| cwd.join(path)) }\n+                // Prepend a current working directory to the path if\n+                // it doesn't contain an absolute pathname.\n+                if filename[0] == b'/' { Ok(path) } else { getcwd().map(|cwd| cwd.join(path)) }\n+            }\n         }\n     }\n }"}]}