{"sha": "59f830d3e8999691f5e3140cf45494fe7cc46ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZjgzMGQzZTg5OTk2OTFmNWUzMTQwY2Y0NTQ5NGZlN2NjNDZhYzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-23T16:49:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-23T16:49:11Z"}, "message": "assign DefIds when lowering", "tree": {"sha": "393cb0a63eba938a3f3bb1ffa7150697b7e071ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393cb0a63eba938a3f3bb1ffa7150697b7e071ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f830d3e8999691f5e3140cf45494fe7cc46ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f830d3e8999691f5e3140cf45494fe7cc46ac4", "html_url": "https://github.com/rust-lang/rust/commit/59f830d3e8999691f5e3140cf45494fe7cc46ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f830d3e8999691f5e3140cf45494fe7cc46ac4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118e11e50b5f39aca88e2ed342e5d355d4f32c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/118e11e50b5f39aca88e2ed342e5d355d4f32c00", "html_url": "https://github.com/rust-lang/rust/commit/118e11e50b5f39aca88e2ed342e5d355d4f32c00"}], "stats": {"total": 206, "additions": 99, "deletions": 107}, "files": [{"sha": "b93b7f39764c9b6f03755290649caf3b0d4a9674", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=59f830d3e8999691f5e3140cf45494fe7cc46ac4", "patch": "@@ -1,9 +1,9 @@\n use ra_db::{SourceRootId, LocationIntener, FileId};\n-use ra_syntax::{TreeArc, SyntaxKind, SyntaxNode, SourceFile, AstNode, ast};\n+use ra_syntax::{TreeArc, SyntaxNode, SourceFile, AstNode, ast};\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n-    HirDatabase, PerNs, Def, Function, Struct, Enum, EnumVariant, ImplBlock, Crate,\n+    HirDatabase, Def, Function, Struct, Enum, EnumVariant, ImplBlock, Crate,\n     Module, Trait, Type, Static, Const,\n     module_tree::ModuleId,\n };\n@@ -238,23 +238,6 @@ impl DefLoc {\n     }\n }\n \n-impl DefKind {\n-    pub(crate) fn for_syntax_kind(kind: SyntaxKind) -> PerNs<DefKind> {\n-        match kind {\n-            SyntaxKind::FN_DEF => PerNs::values(DefKind::Function),\n-            SyntaxKind::MODULE => PerNs::types(DefKind::Module),\n-            SyntaxKind::STRUCT_DEF => PerNs::both(DefKind::Struct, DefKind::StructCtor),\n-            SyntaxKind::ENUM_DEF => PerNs::types(DefKind::Enum),\n-            // These define items, but don't have their own DefKinds yet:\n-            SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Trait),\n-            SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Type),\n-            SyntaxKind::CONST_DEF => PerNs::values(DefKind::Const),\n-            SyntaxKind::STATIC_DEF => PerNs::values(DefKind::Static),\n-            _ => PerNs::none(),\n-        }\n-    }\n-}\n-\n /// Identifier of item within a specific file. This is stable over reparses, so\n /// it's OK to use it as a salsa key/value.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]"}, {"sha": "1d163edf7d3bbe6d07b347758436575c2e0d6d5f", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=59f830d3e8999691f5e3140cf45494fe7cc46ac4", "patch": "@@ -21,7 +21,6 @@ use crate::nameres::lower::*;\n use std::sync::Arc;\n \n use rustc_hash::{FxHashMap, FxHashSet};\n-use ra_syntax::SyntaxKind::*;\n use ra_db::SourceRootId;\n \n use crate::{\n@@ -235,27 +234,12 @@ where\n             }\n         }\n         // Populate explicitly declared items, except modules\n-        for item in input.items.iter() {\n-            if item.kind == MODULE {\n-                continue;\n-            }\n-            // depending on the item kind, the location can define something in\n-            // the values namespace, the types namespace, or both\n-            let kind = DefKind::for_syntax_kind(item.kind);\n-            let def_id = kind.map(|k| {\n-                let def_loc = DefLoc {\n-                    kind: k,\n-                    source_root_id: self.source_root,\n-                    module_id,\n-                    source_item_id: item.id,\n-                };\n-                def_loc.id(self.db)\n-            });\n+        for (name, &def_id) in input.declarations.iter() {\n             let resolution = Resolution {\n                 def_id,\n                 import: None,\n             };\n-            module_items.items.insert(item.name.clone(), resolution);\n+            module_items.items.insert(name.clone(), resolution);\n         }\n \n         // Populate modules"}, {"sha": "270f9ab0353c1cb8e1d2d6819bff42718aac4b29", "filename": "crates/ra_hir/src/nameres/lower.rs", "status": "modified", "additions": 92, "deletions": 68, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Flower.rs?ref=59f830d3e8999691f5e3140cf45494fe7cc46ac4", "patch": "@@ -2,52 +2,18 @@ use std::sync::Arc;\n \n use ra_syntax::{\n     SyntaxKind, AstNode, SourceFile, TreeArc, AstPtr,\n-    ast::{self, ModuleItemOwner},\n+    ast::{self, ModuleItemOwner, NameOwner},\n };\n use ra_db::SourceRootId;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     SourceItemId, Path, ModuleSource, HirDatabase, Name, SourceFileItems,\n-    HirFileId, MacroCallLoc, AsName,\n+    HirFileId, MacroCallLoc, AsName, PerNs, DefId, DefKind, DefLoc,\n     module_tree::ModuleId\n };\n \n-#[derive(Debug, PartialEq, Eq)]\n-pub(super) enum Vis {\n-    // Priv,\n-    Other,\n-}\n-\n-#[derive(Debug, PartialEq, Eq)]\n-pub(crate) struct ModuleItem {\n-    pub(crate) id: SourceItemId,\n-    pub(crate) name: Name,\n-    pub(super) kind: SyntaxKind,\n-    pub(super) vis: Vis,\n-}\n-\n-impl ModuleItem {\n-    fn new(\n-        file_id: HirFileId,\n-        file_items: &SourceFileItems,\n-        item: &impl ast::NameOwner,\n-    ) -> Option<ModuleItem> {\n-        let name = item.name()?.as_name();\n-        let kind = item.syntax().kind();\n-        let vis = Vis::Other;\n-        let item_id = Some(file_items.id_of_unchecked(item.syntax()));\n-        let id = SourceItemId { file_id, item_id };\n-        let res = ModuleItem {\n-            id,\n-            name,\n-            kind,\n-            vis,\n-        };\n-        Some(res)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImportId(RawId);\n impl_arena_id!(ImportId);\n@@ -66,7 +32,7 @@ pub(super) struct ImportData {\n /// can avoid redoing name resolution.\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct LoweredModule {\n-    pub(crate) items: Vec<ModuleItem>,\n+    pub(crate) declarations: FxHashMap<Name, PerNs<DefId>>,\n     pub(super) imports: Arena<ImportId, ImportData>,\n }\n \n@@ -157,7 +123,15 @@ impl LoweredModule {\n         for item in items {\n             match item {\n                 ast::ItemOrMacro::Item(it) => {\n-                    self.add_item(source_map, file_id, &file_items, it);\n+                    self.add_def_id(\n+                        source_map,\n+                        db,\n+                        source_root_id,\n+                        module_id,\n+                        file_id,\n+                        &file_items,\n+                        it,\n+                    );\n                 }\n                 ast::ItemOrMacro::Macro(macro_call) => {\n                     let item_id = file_items.id_of_unchecked(macro_call.syntax());\n@@ -174,54 +148,60 @@ impl LoweredModule {\n                     let file_items = db.file_items(file_id);\n                     //FIXME: expand recursively\n                     for item in db.hir_source_file(file_id).items() {\n-                        self.add_item(source_map, file_id, &file_items, item);\n+                        self.add_def_id(\n+                            source_map,\n+                            db,\n+                            source_root_id,\n+                            module_id,\n+                            file_id,\n+                            &file_items,\n+                            item,\n+                        );\n                     }\n                 }\n             }\n         }\n     }\n \n-    fn add_item(\n+    fn add_def_id(\n         &mut self,\n         source_map: &mut ImportSourceMap,\n+        db: &impl HirDatabase,\n+        source_root_id: SourceRootId,\n+        module_id: ModuleId,\n         file_id: HirFileId,\n         file_items: &SourceFileItems,\n         item: &ast::ModuleItem,\n-    ) -> Option<()> {\n-        match item.kind() {\n-            ast::ModuleItemKind::StructDef(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n-            }\n-            ast::ModuleItemKind::EnumDef(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n-            }\n-            ast::ModuleItemKind::FnDef(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n-            }\n-            ast::ModuleItemKind::TraitDef(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n-            }\n-            ast::ModuleItemKind::TypeDef(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n-            }\n+    ) {\n+        let name = match item.kind() {\n+            ast::ModuleItemKind::StructDef(it) => it.name(),\n+            ast::ModuleItemKind::EnumDef(it) => it.name(),\n+            ast::ModuleItemKind::FnDef(it) => it.name(),\n+            ast::ModuleItemKind::TraitDef(it) => it.name(),\n+            ast::ModuleItemKind::TypeDef(it) => it.name(),\n             ast::ModuleItemKind::ImplBlock(_) => {\n                 // impls don't define items\n+                return;\n+            }\n+            ast::ModuleItemKind::UseItem(it) => {\n+                self.add_use_item(source_map, it);\n+                return;\n             }\n-            ast::ModuleItemKind::UseItem(it) => self.add_use_item(source_map, it),\n             ast::ModuleItemKind::ExternCrateItem(_) => {\n                 // TODO\n+                return;\n             }\n-            ast::ModuleItemKind::ConstDef(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n-            }\n-            ast::ModuleItemKind::StaticDef(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n-            }\n-            ast::ModuleItemKind::Module(it) => {\n-                self.items.push(ModuleItem::new(file_id, file_items, it)?)\n+            ast::ModuleItemKind::ConstDef(it) => it.name(),\n+            ast::ModuleItemKind::StaticDef(it) => it.name(),\n+            ast::ModuleItemKind::Module(_) => {\n+                // modules are handled separately direclty by nameres\n+                return;\n             }\n+        };\n+        if let Some(name) = name {\n+            let def_id = assign_def_id(db, source_root_id, module_id, file_id, file_items, item);\n+            self.declarations.insert(name.as_name(), def_id);\n         }\n-        Some(())\n     }\n \n     fn add_use_item(&mut self, source_map: &mut ImportSourceMap, item: &ast::UseItem) {\n@@ -236,3 +216,47 @@ impl LoweredModule {\n         })\n     }\n }\n+\n+fn assign_def_id(\n+    db: &impl HirDatabase,\n+    source_root_id: SourceRootId,\n+    module_id: ModuleId,\n+    file_id: HirFileId,\n+    file_items: &SourceFileItems,\n+    item: &ast::ModuleItem,\n+) -> PerNs<DefId> {\n+    // depending on the item kind, the location can define something in\n+    // the values namespace, the types namespace, or both\n+    let kind = DefKind::for_syntax_kind(item.syntax().kind());\n+    let def_id = kind.map(|k| {\n+        let item_id = file_items.id_of_unchecked(item.syntax());\n+        let def_loc = DefLoc {\n+            kind: k,\n+            source_root_id,\n+            module_id,\n+            source_item_id: SourceItemId {\n+                file_id,\n+                item_id: Some(item_id),\n+            },\n+        };\n+        def_loc.id(db)\n+    });\n+    def_id\n+}\n+\n+impl DefKind {\n+    fn for_syntax_kind(kind: SyntaxKind) -> PerNs<DefKind> {\n+        match kind {\n+            SyntaxKind::FN_DEF => PerNs::values(DefKind::Function),\n+            SyntaxKind::MODULE => PerNs::types(DefKind::Module),\n+            SyntaxKind::STRUCT_DEF => PerNs::both(DefKind::Struct, DefKind::StructCtor),\n+            SyntaxKind::ENUM_DEF => PerNs::types(DefKind::Enum),\n+            // These define items, but don't have their own DefKinds yet:\n+            SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Trait),\n+            SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Type),\n+            SyntaxKind::CONST_DEF => PerNs::values(DefKind::Const),\n+            SyntaxKind::STATIC_DEF => PerNs::values(DefKind::Static),\n+            _ => PerNs::none(),\n+        }\n+    }\n+}"}, {"sha": "bde0be37b66906f5fcb6c4d2f0cef0257e8d177f", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f830d3e8999691f5e3140cf45494fe7cc46ac4/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=59f830d3e8999691f5e3140cf45494fe7cc46ac4", "patch": "@@ -146,9 +146,10 @@ pub fn macro_symbols(db: &impl HirDatabase, file_id: FileId) -> Vec<(SmolStr, Te\n     let mut res = Vec::new();\n \n     for macro_call_id in items\n-        .items\n+        .declarations\n         .iter()\n-        .filter_map(|it| it.id.file_id.as_macro_call_id())\n+        .filter_map(|(_, it)| it.take_types())\n+        .filter_map(|it| it.loc(db).source_item_id.file_id.as_macro_call_id())\n     {\n         if let Some(exp) = db.expand_macro_invocation(macro_call_id) {\n             let loc = macro_call_id.loc(db);"}]}