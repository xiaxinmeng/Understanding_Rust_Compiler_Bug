{"sha": "94d7b82340792af6e5c9b7c105dca1f2fef1b495", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZDdiODIzNDA3OTJhZjZlNWM5YjdjMTA1ZGNhMWYyZmVmMWI0OTU=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T01:04:46Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T01:04:46Z"}, "message": "simplify the code", "tree": {"sha": "7374713b1dc828a37bf7e929963e503ea80f5110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7374713b1dc828a37bf7e929963e503ea80f5110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d7b82340792af6e5c9b7c105dca1f2fef1b495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d7b82340792af6e5c9b7c105dca1f2fef1b495", "html_url": "https://github.com/rust-lang/rust/commit/94d7b82340792af6e5c9b7c105dca1f2fef1b495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d7b82340792af6e5c9b7c105dca1f2fef1b495/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "388384177e89db60280dc275e4239e97e61f6a59", "url": "https://api.github.com/repos/rust-lang/rust/commits/388384177e89db60280dc275e4239e97e61f6a59", "html_url": "https://github.com/rust-lang/rust/commit/388384177e89db60280dc275e4239e97e61f6a59"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "2ae5a9acb75cf7ddcdcedd780bdf03b297c7f1e6", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94d7b82340792af6e5c9b7c105dca1f2fef1b495/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d7b82340792af6e5c9b7c105dca1f2fef1b495/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=94d7b82340792af6e5c9b7c105dca1f2fef1b495", "patch": "@@ -973,10 +973,7 @@ fn get_details_from_idx<'tcx>(\n                 ast::LitKind::Int(x, _ty) => Some(Sugg::NonParen(x.to_string().into())),\n                 _ => None,\n             },\n-            ExprKind::Path(..) if get_start(cx, e, starts).is_none() => {\n-                // `e` is always non paren as it's a `Path`\n-                Some(Sugg::NonParen(snippet(cx, e.span, \"???\")))\n-            },\n+            ExprKind::Path(..) if get_start(cx, e, starts).is_none() => Some(Sugg::hir(cx, e, \"???\")),\n             _ => None,\n         }\n     }\n@@ -1010,8 +1007,7 @@ fn get_assignment<'tcx>(e: &'tcx Expr<'tcx>) -> Option<(&'tcx Expr<'tcx>, &'tcx\n \n fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n     cx: &'a LateContext<'tcx>,\n-    stmts: &'tcx [Stmt<'tcx>],\n-    expr: Option<&'tcx Expr<'tcx>>,\n+    Block { stmts, expr, .. }: &'tcx Block<'tcx>,\n     loop_counters: &'c [Start<'tcx>],\n ) -> impl Iterator<Item = Option<(&'tcx Expr<'tcx>, &'tcx Expr<'tcx>)>> + 'c {\n     stmts\n@@ -1025,7 +1021,7 @@ fn get_assignments<'a: 'c, 'tcx: 'c, 'c>(\n                 then { None } else { Some(e) }\n             },\n         })\n-        .chain(expr.into_iter())\n+        .chain((*expr).into_iter())\n         .map(get_assignment)\n }\n \n@@ -1184,7 +1180,7 @@ fn detect_manual_memcpy<'tcx>(\n                 if let Some(loop_counters) = get_loop_counters(cx, block, expr) {\n                     starts.extend(loop_counters);\n                 }\n-                iter_a = Some(get_assignments(cx, block.stmts, block.expr, &starts));\n+                iter_a = Some(get_assignments(cx, block, &starts));\n             } else {\n                 iter_b = Some(get_assignment(body));\n             }"}]}