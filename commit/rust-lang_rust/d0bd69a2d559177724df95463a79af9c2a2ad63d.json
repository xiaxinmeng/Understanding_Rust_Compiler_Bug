{"sha": "d0bd69a2d559177724df95463a79af9c2a2ad63d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYmQ2OWEyZDU1OTE3NzcyNGRmOTU0NjNhNzlhZjljMmEyYWQ2M2Q=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-18T20:05:38Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-22T21:56:02Z"}, "message": "review comments", "tree": {"sha": "264bac22e183754764cc100db45af37e764f1d35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/264bac22e183754764cc100db45af37e764f1d35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0bd69a2d559177724df95463a79af9c2a2ad63d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bd69a2d559177724df95463a79af9c2a2ad63d", "html_url": "https://github.com/rust-lang/rust/commit/d0bd69a2d559177724df95463a79af9c2a2ad63d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0bd69a2d559177724df95463a79af9c2a2ad63d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e52eb5a0156839a71c0ffc5424e2160271170e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e52eb5a0156839a71c0ffc5424e2160271170e", "html_url": "https://github.com/rust-lang/rust/commit/e1e52eb5a0156839a71c0ffc5424e2160271170e"}], "stats": {"total": 159, "additions": 54, "deletions": 105}, "files": [{"sha": "7547e8039158ed5bb47bb83decae9f6748cabdaf", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 42, "deletions": 57, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -2235,22 +2235,46 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n \n         let mut err = report_missing_lifetime_specifiers(self.tcx.sess, span, lifetime_refs.len());\n+        let mut add_label = true;\n \n         if let Some(params) = error {\n             if lifetime_refs.len() == 1 {\n-                self.report_elision_failure(&mut err, params, span);\n+                add_label = add_label && self.report_elision_failure(&mut err, params, span);\n             }\n         }\n+        if add_label {\n+            add_missing_lifetime_specifiers_label(&mut err, span, lifetime_refs.len());\n+        }\n \n         err.emit();\n     }\n \n+    fn suggest_lifetime(&self, db: &mut DiagnosticBuilder<'_>, span: Span, msg: &str) -> bool {\n+        match self.tcx.sess.source_map().span_to_snippet(span) {\n+            Ok(ref snippet) => {\n+                let (sugg, applicability) = if &snippet[..] == \"&\" {\n+                    (\"&'static \".to_owned(), Applicability::MachineApplicable)\n+                } else if snippet == \"'_\" {\n+                    (\"'static\".to_owned(), Applicability::MachineApplicable)\n+                } else {\n+                    (format!(\"{} + 'static\", snippet), Applicability::MaybeIncorrect)\n+                };\n+                db.span_suggestion_with_applicability(span, msg, sugg, applicability);\n+                false\n+            }\n+            Err(_) => {\n+                db.help(msg);\n+                true\n+            }\n+        }\n+    }\n+\n     fn report_elision_failure(\n         &mut self,\n         db: &mut DiagnosticBuilder<'_>,\n         params: &[ElisionFailureInfo],\n         span: Span,\n-    ) {\n+    ) -> bool {\n         let mut m = String::new();\n         let len = params.len();\n \n@@ -2305,29 +2329,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 \"this function's return type contains a borrowed value, but \\\n                  there is no value for it to be borrowed from\"\n             );\n-            let msg = \"consider giving it a 'static lifetime\";\n-            match self.tcx.sess.source_map().span_to_snippet(span) {\n-                Ok(ref snippet) if snippet == \"&\" => db.span_suggestion_with_applicability(\n-                    span,\n-                    msg,\n-                    \"&'static \".to_owned(),\n-                    Applicability::MachineApplicable,\n-                ),\n-                Ok(ref snippet)\n-                if snippet == \"'_\" => db.span_suggestion_with_applicability(\n-                    span,\n-                    msg,\n-                    \"'static\".to_owned(),\n-                    Applicability::MachineApplicable,\n-                ),\n-                Ok(ref snippet) => db.span_suggestion_with_applicability(\n-                    span,\n-                    msg,\n-                    format!(\"{} + 'static\", snippet),\n-                    Applicability::MaybeIncorrect,\n-                ),\n-                Err(_) => db.help(msg),\n-            };\n+            self.suggest_lifetime(db, span, \"consider giving it a 'static lifetime\")\n         } else if elided_len == 0 {\n             help!(\n                 db,\n@@ -2336,42 +2338,23 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                  the arguments\"\n             );\n             let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n-            match self.tcx.sess.source_map().span_to_snippet(span) {\n-                Ok(ref snippet) if snippet == \"&\" => db.span_suggestion_with_applicability(\n-                    span,\n-                    msg,\n-                     \"&'static \".to_owned(),\n-                    Applicability::MachineApplicable,\n-                ),\n-                Ok(ref snippet)\n-                if snippet == \"'_\" => db.span_suggestion_with_applicability(\n-                    span,\n-                    msg,\n-                    \"'static\".to_owned(),\n-                    Applicability::MachineApplicable,\n-                ),\n-                Ok(ref snippet) => db.span_suggestion_with_applicability(\n-                    span,\n-                    msg,\n-                    format!(\"{} + 'static\", snippet),\n-                    Applicability::MaybeIncorrect,\n-                ),\n-                Err(_) => db.help(msg),\n-            };\n+            self.suggest_lifetime(db, span, msg)\n         } else if elided_len == 1 {\n             help!(\n                 db,\n                 \"this function's return type contains a borrowed value, but \\\n                  the signature does not say which {} it is borrowed from\",\n                 m\n             );\n+            true\n         } else {\n             help!(\n                 db,\n                 \"this function's return type contains a borrowed value, but \\\n                  the signature does not say whether it is borrowed from {}\",\n                 m\n             );\n+            true\n         }\n     }\n \n@@ -2785,26 +2768,28 @@ fn insert_late_bound_lifetimes(\n     }\n }\n \n-pub fn report_missing_lifetime_specifiers(\n+fn report_missing_lifetime_specifiers(\n     sess: &Session,\n     span: Span,\n     count: usize,\n ) -> DiagnosticBuilder<'_> {\n-    let mut err = struct_span_err!(\n+    struct_span_err!(\n         sess,\n         span,\n         E0106,\n         \"missing lifetime specifier{}\",\n         if count > 1 { \"s\" } else { \"\" }\n-    );\n+    )\n+}\n \n-    let msg: Cow<'static, str> = if count > 1 {\n-        format!(\"expected {} lifetime parameters\", count).into()\n+fn add_missing_lifetime_specifiers_label(\n+    err: &mut DiagnosticBuilder<'_>,\n+    span: Span,\n+    count: usize,\n+) {\n+    if count > 1 {\n+        err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n     } else {\n-        \"expected lifetime parameter\".into()\n+        err.span_label(span, \"expected lifetime parameter\");\n     };\n-\n-    err.span_label(span, msg);\n-\n-    err\n }"}, {"sha": "6b9d4ebb2987dd3f53376c99909d0c3e09041e7c", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -2,10 +2,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-binding-only.rs:62:23\n    |\n LL | fn elision<T: Fn() -> &i32>() {\n-   |                       ^\n-   |                       |\n-   |                       expected lifetime parameter\n-   |                       help: consider giving it a 'static lifetime: `&'static`\n+   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}, {"sha": "7906f0a30e4eb33a33306e9db4b2a1b9c0f6a303", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -2,10 +2,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-return-only.rs:44:23\n    |\n LL | fn elision(_: fn() -> &i32) {\n-   |                       ^\n-   |                       |\n-   |                       expected lifetime parameter\n-   |                       help: consider giving it a 'static lifetime: `&'static`\n+   |                       ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}, {"sha": "583487656f24d714fa9f2bdcd6f85b5acb80e4b1", "filename": "src/test/ui/foreign-fn-return-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -2,10 +2,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/foreign-fn-return-lifetime.rs:15:19\n    |\n LL |     pub fn f() -> &u8; //~ ERROR missing lifetime specifier\n-   |                   ^\n-   |                   |\n-   |                   expected lifetime parameter\n-   |                   help: consider giving it a 'static lifetime: `&'static`\n+   |                   ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}, {"sha": "e592452b899444676d4825e976716455949fa724", "filename": "src/test/ui/issues/issue-13497.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -2,10 +2,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-13497.rs:12:5\n    |\n LL |     &str //~ ERROR missing lifetime specifier\n-   |     ^\n-   |     |\n-   |     expected lifetime parameter\n-   |     help: consider giving it a 'static lifetime: `&'static`\n+   |     ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}, {"sha": "0ac6316f0dcf8da9a96d6930cb0f7a4385d25e32", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -10,21 +10,15 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:14:40\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n-   |                                        ^\n-   |                                        |\n-   |                                        expected lifetime parameter\n-   |                                        help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:17:22\n    |\n LL | fn parse_type_3() -> &str { unimplemented!() }\n-   |                      ^\n-   |                      |\n-   |                      expected lifetime parameter\n-   |                      help: consider giving it a 'static lifetime: `&'static`\n+   |                      ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}, {"sha": "4c7a1b5ea9ff046c5b3168e8c9ee57a308890c1f", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -2,10 +2,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:12:11\n    |\n LL | fn f() -> &isize {    //~ ERROR missing lifetime specifier\n-   |           ^\n-   |           |\n-   |           expected lifetime parameter\n-   |           help: consider giving it a 'static lifetime: `&'static`\n+   |           ^ help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n \n@@ -29,32 +26,23 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:31:20\n    |\n LL | fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n-   |                    ^\n-   |                    |\n-   |                    expected lifetime parameter\n-   |                    help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                    ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:44:24\n    |\n LL | fn j(_x: StaticStr) -> &isize { //~ ERROR missing lifetime specifier\n-   |                        ^\n-   |                        |\n-   |                        expected lifetime parameter\n-   |                        help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                        ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:50:49\n    |\n LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n-   |                                                 ^\n-   |                                                 |\n-   |                                                 expected lifetime parameter\n-   |                                                 help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n+   |                                                 ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n "}, {"sha": "ab429b9df06cd6d272d95751775a392dbf260f3d", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -6,10 +6,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-trait.rs:8:44\n    |\n LL | fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n-   |                                            ^^^^^\n-   |                                            |\n-   |                                            expected lifetime parameter\n-   |                                            help: consider giving it a 'static lifetime: `Error + 'static`\n+   |                                            ^^^^^ help: consider giving it a 'static lifetime: `Error + 'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}, {"sha": "4319843291a2077a6aaf8051ff0026924f03b937", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd69a2d559177724df95463a79af9c2a2ad63d/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=d0bd69a2d559177724df95463a79af9c2a2ad63d", "patch": "@@ -26,10 +26,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:24:29\n    |\n LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n-   |                             ^^\n-   |                             |\n-   |                             expected lifetime parameter\n-   |                             help: consider giving it a 'static lifetime: `'static`\n+   |                             ^^ help: consider giving it a 'static lifetime: `'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n "}]}