{"sha": "bf51eafbef4d949673a17ae1f2cc478bcc8c0b58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTFlYWZiZWY0ZDk0OTY3M2ExN2FlMWYyY2M0NzhiY2M4YzBiNTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-02T09:26:29Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-02T09:26:29Z"}, "message": "check for wrong const_err warnings", "tree": {"sha": "6012085e2e7e7343ec381d36d30dfe68ed38e768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6012085e2e7e7343ec381d36d30dfe68ed38e768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58", "html_url": "https://github.com/rust-lang/rust/commit/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12c4a1951e85925dbccc40efb163f4f179c30046", "url": "https://api.github.com/repos/rust-lang/rust/commits/12c4a1951e85925dbccc40efb163f4f179c30046", "html_url": "https://github.com/rust-lang/rust/commit/12c4a1951e85925dbccc40efb163f4f179c30046"}], "stats": {"total": 45, "additions": 31, "deletions": 14}, "files": [{"sha": "1bd9b37b644b3fc2eea2305f1126ccc7d32b46c5", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=bf51eafbef4d949673a17ae1f2cc478bcc8c0b58", "patch": "@@ -408,6 +408,7 @@ pub enum ErrKind {\n     TypeMismatch(String, ConstInt),\n     BadType(ConstVal),\n     ErroneousReferencedConstant(Box<ConstEvalErr>),\n+    BadCharValue,\n }\n \n impl From<ConstMathErr> for ErrKind {\n@@ -468,6 +469,7 @@ impl ConstEvalErr {\n             },\n             BadType(ref i) => format!(\"value of wrong type: {:?}\", i).into_cow(),\n             ErroneousReferencedConstant(_) => \"could not evaluate referenced constant\".into_cow(),\n+            BadCharValue => \"invalid numeric value for char\".into_cow(),\n         }\n     }\n }\n@@ -1075,23 +1077,19 @@ fn cast_const_int<'tcx>(tcx: &TyCtxt<'tcx>, val: ConstInt, ty: ty::Ty) -> CastRe\n                 Err(_) => Ok(Integral(Usize(ConstUsize::Us32(v as u32)))),\n             }\n         },\n-        ty::TyFloat(ast::FloatTy::F64) if val.is_negative() => {\n-            // FIXME: this could probably be prettier\n-            // there's no easy way to turn an `Infer` into a f64\n-            let val = (-val).map_err(Math)?;\n-            let val = val.to_u64().unwrap() as f64;\n-            let val = -val;\n-            Ok(Float(val))\n+        ty::TyFloat(ast::FloatTy::F64) => match val.erase_type() {\n+            Infer(u) => Ok(Float(u as f64)),\n+            InferSigned(i) => Ok(Float(i as f64)),\n+            _ => unreachable!(),\n         },\n-        ty::TyFloat(ast::FloatTy::F64) => Ok(Float(val.to_u64().unwrap() as f64)),\n-        ty::TyFloat(ast::FloatTy::F32) if val.is_negative() => {\n-            let val = (-val).map_err(Math)?;\n-            let val = val.to_u64().unwrap() as f32;\n-            let val = -val;\n-            Ok(Float(val as f64))\n+        ty::TyFloat(ast::FloatTy::F32) => match val.erase_type() {\n+            Infer(u) => Ok(Float(u as f32 as f64)),\n+            InferSigned(i) => Ok(Float(i as f32 as f64)),\n+            _ => unreachable!(),\n         },\n-        ty::TyFloat(ast::FloatTy::F32) => Ok(Float(val.to_u64().unwrap() as f32 as f64)),\n         ty::TyRawPtr(_) => Err(ErrKind::UnimplementedConstVal(\"casting an address to a raw ptr\")),\n+        ty::TyChar if v as u32 as u64 == v => ::std::char::from_u32(v as u32).map(Char)\n+                                                                             .ok_or(BadCharValue),\n         _ => Err(CannotCast),\n     }\n }"}, {"sha": "8d7ac4f54c1317f4e2aac30c58fd4275bc0e47bb", "filename": "src/test/run-pass/const-err.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58/src%2Ftest%2Frun-pass%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf51eafbef4d949673a17ae1f2cc478bcc8c0b58/src%2Ftest%2Frun-pass%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-err.rs?ref=bf51eafbef4d949673a17ae1f2cc478bcc8c0b58", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check for const_err regressions\n+\n+#![deny(const_err)]\n+\n+\n+fn main() {\n+    let _ = ((-1 as i8) << 8 - 1) as f32;\n+    let _ = 0u8 as char;\n+}"}]}