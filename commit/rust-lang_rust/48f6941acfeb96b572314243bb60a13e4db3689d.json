{"sha": "48f6941acfeb96b572314243bb60a13e4db3689d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZjY5NDFhY2ZlYjk2YjU3MjMxNDI0M2JiNjBhMTNlNGRiMzY4OWQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-23T16:19:34Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-08T13:52:02Z"}, "message": "Move `ScalarMaybeUndef` back to rustc", "tree": {"sha": "dbda0b96475fb15b86eea7ab5f71dd22132de653", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbda0b96475fb15b86eea7ab5f71dd22132de653"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48f6941acfeb96b572314243bb60a13e4db3689d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48f6941acfeb96b572314243bb60a13e4db3689d", "html_url": "https://github.com/rust-lang/rust/commit/48f6941acfeb96b572314243bb60a13e4db3689d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48f6941acfeb96b572314243bb60a13e4db3689d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db04835f9ab3ab3d4b6f8a91547a2c7a4f66091", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db04835f9ab3ab3d4b6f8a91547a2c7a4f66091", "html_url": "https://github.com/rust-lang/rust/commit/7db04835f9ab3ab3d4b6f8a91547a2c7a4f66091"}], "stats": {"total": 258, "additions": 129, "deletions": 129}, "files": [{"sha": "2821000ccad69d64feff66594acd0167045bcd3c", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/48f6941acfeb96b572314243bb60a13e4db3689d/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f6941acfeb96b572314243bb60a13e4db3689d/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=48f6941acfeb96b572314243bb60a13e4db3689d", "patch": "@@ -701,3 +701,131 @@ fn bit_index(bits: Size) -> (usize, usize) {\n     assert_eq!(b as usize as u64, b);\n     (a as usize, b as usize)\n }\n+\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n+    Scalar(Scalar<Tag, Id>),\n+    Undef,\n+}\n+\n+impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n+    #[inline(always)]\n+    fn from(s: Scalar<Tag>) -> Self {\n+        ScalarMaybeUndef::Scalar(s)\n+    }\n+}\n+\n+impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            ScalarMaybeUndef::Undef => write!(f, \"uninitialized bytes\"),\n+            ScalarMaybeUndef::Scalar(s) => write!(f, \"{}\", s),\n+        }\n+    }\n+}\n+\n+impl<'tcx> ScalarMaybeUndef<()> {\n+    #[inline]\n+    pub fn with_default_tag<Tag>(self) -> ScalarMaybeUndef<Tag>\n+        where Tag: Default\n+    {\n+        match self {\n+            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.with_default_tag()),\n+            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n+        }\n+    }\n+}\n+\n+impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n+    #[inline]\n+    pub fn erase_tag(self) -> ScalarMaybeUndef\n+    {\n+        match self {\n+            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.erase_tag()),\n+            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn not_undef(self) -> EvalResult<'static, Scalar<Tag>> {\n+        match self {\n+            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n+            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer<Tag>> {\n+        self.not_undef()?.to_ptr()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n+        self.not_undef()?.to_bits(target_size)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n+        self.not_undef()?.to_bool()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_char(self) -> EvalResult<'tcx, char> {\n+        self.not_undef()?.to_char()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n+        self.not_undef()?.to_f32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n+        self.not_undef()?.to_f64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n+        self.not_undef()?.to_u8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n+        self.not_undef()?.to_u32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_u64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_usize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, u64> {\n+        self.not_undef()?.to_usize(cx)\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n+        self.not_undef()?.to_i8()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n+        self.not_undef()?.to_i32()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_i64()\n+    }\n+\n+    #[inline(always)]\n+    pub fn to_isize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, i64> {\n+        self.not_undef()?.to_isize(cx)\n+    }\n+}\n+\n+impl_stable_hash_for!(enum ::mir::interpret::ScalarMaybeUndef {\n+    Scalar(v),\n+    Undef\n+});"}, {"sha": "76bf215316711d4145657e009190faa97fdcfdb9", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 124, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/48f6941acfeb96b572314243bb60a13e4db3689d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f6941acfeb96b572314243bb60a13e4db3689d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=48f6941acfeb96b572314243bb60a13e4db3689d", "patch": "@@ -23,130 +23,7 @@ use rustc::mir::interpret::{\n     EvalResult, EvalErrorKind\n };\n use super::{EvalContext, Machine, MemPlace, MPlaceTy, MemoryKind};\n-\n-#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n-    Scalar(Scalar<Tag, Id>),\n-    Undef,\n-}\n-\n-impl<Tag> From<Scalar<Tag>> for ScalarMaybeUndef<Tag> {\n-    #[inline(always)]\n-    fn from(s: Scalar<Tag>) -> Self {\n-        ScalarMaybeUndef::Scalar(s)\n-    }\n-}\n-\n-impl<Tag> fmt::Display for ScalarMaybeUndef<Tag> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            ScalarMaybeUndef::Undef => write!(f, \"uninitialized bytes\"),\n-            ScalarMaybeUndef::Scalar(s) => write!(f, \"{}\", s),\n-        }\n-    }\n-}\n-\n-impl<'tcx> ScalarMaybeUndef<()> {\n-    #[inline]\n-    pub fn with_default_tag<Tag>(self) -> ScalarMaybeUndef<Tag>\n-        where Tag: Default\n-    {\n-        match self {\n-            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.with_default_tag()),\n-            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n-        }\n-    }\n-}\n-\n-impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n-    #[inline]\n-    pub fn erase_tag(self) -> ScalarMaybeUndef\n-    {\n-        match self {\n-            ScalarMaybeUndef::Scalar(s) => ScalarMaybeUndef::Scalar(s.erase_tag()),\n-            ScalarMaybeUndef::Undef => ScalarMaybeUndef::Undef,\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn not_undef(self) -> EvalResult<'static, Scalar<Tag>> {\n-        match self {\n-            ScalarMaybeUndef::Scalar(scalar) => Ok(scalar),\n-            ScalarMaybeUndef::Undef => err!(ReadUndefBytes(Size::from_bytes(0))),\n-        }\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_ptr(self) -> EvalResult<'tcx, Pointer<Tag>> {\n-        self.not_undef()?.to_ptr()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bits(self, target_size: Size) -> EvalResult<'tcx, u128> {\n-        self.not_undef()?.to_bits(target_size)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_bool(self) -> EvalResult<'tcx, bool> {\n-        self.not_undef()?.to_bool()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_char(self) -> EvalResult<'tcx, char> {\n-        self.not_undef()?.to_char()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f32(self) -> EvalResult<'tcx, f32> {\n-        self.not_undef()?.to_f32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_f64(self) -> EvalResult<'tcx, f64> {\n-        self.not_undef()?.to_f64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u8(self) -> EvalResult<'tcx, u8> {\n-        self.not_undef()?.to_u8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u32(self) -> EvalResult<'tcx, u32> {\n-        self.not_undef()?.to_u32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_u64(self) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_u64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_usize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, u64> {\n-        self.not_undef()?.to_usize(cx)\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i8(self) -> EvalResult<'tcx, i8> {\n-        self.not_undef()?.to_i8()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i32(self) -> EvalResult<'tcx, i32> {\n-        self.not_undef()?.to_i32()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_i64(self) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_i64()\n-    }\n-\n-    #[inline(always)]\n-    pub fn to_isize(self, cx: &impl HasDataLayout) -> EvalResult<'tcx, i64> {\n-        self.not_undef()?.to_isize(cx)\n-    }\n-}\n-\n+pub use rustc::mir::interpret::ScalarMaybeUndef;\n \n /// A `Value` represents a single immediate self-contained Rust value.\n ///"}, {"sha": "4b63335ad964cba9480d1de819e583631ffa35bb", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48f6941acfeb96b572314243bb60a13e4db3689d/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f6941acfeb96b572314243bb60a13e4db3689d/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=48f6941acfeb96b572314243bb60a13e4db3689d", "patch": "@@ -195,11 +195,6 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Scalar\n     }\n }\n \n-impl_stable_hash_for!(enum ::interpret::ScalarMaybeUndef {\n-    Scalar(v),\n-    Undef\n-});\n-\n impl_snapshot_for!(enum ScalarMaybeUndef {\n     Scalar(s),\n     Undef,"}]}