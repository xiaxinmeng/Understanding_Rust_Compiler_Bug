{"sha": "313ba7c4d11f52b808f29678b008bb0962f9af91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxM2JhN2M0ZDExZjUyYjgwOGYyOTY3OGIwMDhiYjA5NjJmOWFmOTE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-13T08:55:14Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-13T09:25:57Z"}, "message": "Make `newtype_index` hygienic and use allow_internal_unstable", "tree": {"sha": "7f492680a84ddd2613f430612b5eb29a068dc273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f492680a84ddd2613f430612b5eb29a068dc273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313ba7c4d11f52b808f29678b008bb0962f9af91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313ba7c4d11f52b808f29678b008bb0962f9af91", "html_url": "https://github.com/rust-lang/rust/commit/313ba7c4d11f52b808f29678b008bb0962f9af91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313ba7c4d11f52b808f29678b008bb0962f9af91/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9c7febb879689a3d24e3ba34531026930313c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c7febb879689a3d24e3ba34531026930313c4c", "html_url": "https://github.com/rust-lang/rust/commit/a9c7febb879689a3d24e3ba34531026930313c4c"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "63e0107a4d882b8504e4333c8397716d231eb3e2", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=313ba7c4d11f52b808f29678b008bb0962f9af91", "patch": "@@ -49,15 +49,13 @@\n #![feature(optin_builtin_traits)]\n #![feature(range_is_empty)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_attrs)]\n #![feature(slice_patterns)]\n #![feature(specialization)]\n #![feature(unboxed_closures)]\n #![feature(thread_local)]\n #![feature(trace_macros)]\n #![feature(trusted_len)]\n #![feature(vec_remove_item)]\n-#![feature(step_trait)]\n #![feature(stmt_expr_attributes)]\n #![feature(integer_atomics)]\n #![feature(test)]"}, {"sha": "c3c76e81606157979557cd3b935c64a8adb7dccd", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=313ba7c4d11f52b808f29678b008bb0962f9af91", "patch": "@@ -57,12 +57,13 @@ impl Idx for u32 {\n /// `u32::MAX`. You can also customize things like the `Debug` impl,\n /// what traits are derived, and so forth via the macro.\n #[macro_export]\n+#[allow_internal_unstable(step_trait, rustc_attrs)]\n macro_rules! newtype_index {\n     // ---- public rules ----\n \n     // Use default constants\n     ($(#[$attrs:meta])* $v:vis struct $name:ident { .. }) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @attrs        [$(#[$attrs])*]\n             @type         [$name]\n@@ -74,7 +75,7 @@ macro_rules! newtype_index {\n \n     // Define any constants\n     ($(#[$attrs:meta])* $v:vis struct $name:ident { $($tokens:tt)+ }) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             // Leave out derives marker so we can use its absence to ensure it comes first\n             @attrs        [$(#[$attrs])*]\n             @type         [$name]\n@@ -258,7 +259,7 @@ macro_rules! newtype_index {\n             }\n         }\n \n-        newtype_index!(\n+        $crate::newtype_index!(\n             @handle_debug\n             @derives      [$($derives,)*]\n             @type         [$type]\n@@ -294,7 +295,7 @@ macro_rules! newtype_index {\n      @derives      [$_derive:ident, $($derives:ident,)*]\n      @type         [$type:ident]\n      @debug_format [$debug_format:tt]) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @handle_debug\n             @derives      [$($derives,)*]\n             @type         [$type]\n@@ -309,7 +310,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident),*]\n                    $($tokens:tt)*) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n             @max          [$max]\n@@ -329,7 +330,7 @@ macro_rules! newtype_index {\n                    derive [$($derives:ident,)+]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @attrs        [$(#[$attrs])*]\n             @derives      [$($derives,)+]\n             @type         [$type]\n@@ -348,15 +349,15 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]\n                    derive [$($derives:ident,)+]\n                    $($tokens:tt)*) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      [$($derives,)+ RustcEncodable,]\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n-        newtype_index!(@decodable $type);\n+        $crate::newtype_index!(@decodable $type);\n     );\n \n     // The case where no derives are added, but encodable is overridden. Don't\n@@ -368,7 +369,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]\n                    ENCODABLE = custom\n                    $($tokens:tt)*) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      []\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n@@ -385,15 +386,15 @@ macro_rules! newtype_index {\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $($tokens:tt)*) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      [RustcEncodable,]\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n             @max          [$max]\n             @vis          [$v]\n             @debug_format [$debug_format]\n                           $($tokens)*);\n-        newtype_index!(@decodable $type);\n+        $crate::newtype_index!(@decodable $type);\n     );\n \n     (@decodable $type:ident) => (\n@@ -420,7 +421,7 @@ macro_rules! newtype_index {\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $name:ident = $constant:expr) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n@@ -439,7 +440,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*\n                    const $name:ident = $constant:expr) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n@@ -458,7 +459,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]\n                    MAX = $max:expr,\n                    $($tokens:tt)*) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n@@ -477,7 +478,7 @@ macro_rules! newtype_index {\n      @debug_format [$_debug_format:tt]\n                    DEBUG_FORMAT = $debug_format:tt,\n                    $($tokens:tt)*) => (\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]\n@@ -499,7 +500,7 @@ macro_rules! newtype_index {\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n         pub const $name: $type = $type::from_u32_const($constant);\n-        newtype_index!(\n+        $crate::newtype_index!(\n             @derives      [$($derives,)*]\n             @attrs        [$(#[$attrs])*]\n             @type         [$type]"}, {"sha": "f5e4661afa6b1812c2801cee030282a3888e1592", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=313ba7c4d11f52b808f29678b008bb0962f9af91", "patch": "@@ -15,12 +15,10 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(decl_macro)]\n #![feature(exhaustive_patterns)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(rustc_attrs)]\n #![feature(never_type)]\n #![feature(specialization)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]\n-#![feature(step_trait)]\n #![feature(slice_concat_ext)]\n #![feature(trusted_len)]\n #![feature(try_blocks)]"}, {"sha": "01586e92aeb1ce2096f100dede06db484c7961ff", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=313ba7c4d11f52b808f29678b008bb0962f9af91", "patch": "@@ -6,6 +6,7 @@ use crate::spec::Target;\n use std::fmt;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n+use rustc_data_structures::newtype_index;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use syntax_pos::symbol::{sym, Symbol};\n "}, {"sha": "dcd1eb5acdc8500e401dc8dc36bd0b7373abed6f", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=313ba7c4d11f52b808f29678b008bb0962f9af91", "patch": "@@ -11,9 +11,7 @@\n \n #![feature(box_syntax)]\n #![feature(nll)]\n-#![feature(rustc_attrs)]\n #![feature(slice_patterns)]\n-#![feature(step_trait)]\n \n #![deny(rust_2018_idioms)]\n #![deny(unused_lifetimes)]\n@@ -23,8 +21,5 @@\n #[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n \n-#[macro_use]\n-extern crate rustc_data_structures;\n-\n pub mod abi;\n pub mod spec;"}, {"sha": "591f2fb599be3efa1e601509e255e3160a06a9b1", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=313ba7c4d11f52b808f29678b008bb0962f9af91", "patch": "@@ -18,9 +18,7 @@\n #![feature(label_break_value)]\n #![feature(mem_take)]\n #![feature(nll)]\n-#![feature(rustc_attrs)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(step_trait)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]\n "}, {"sha": "1192a44a6eecfd9537f82a48a56ca99ef657ff30", "filename": "src/test/run-pass-fulldeps/newtype_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313ba7c4d11f52b808f29678b008bb0962f9af91/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fnewtype_index.rs?ref=313ba7c4d11f52b808f29678b008bb0962f9af91", "patch": "@@ -1,9 +1,9 @@\n-#![feature(rustc_attrs, rustc_private, step_trait)]\n+#![feature(rustc_private)]\n \n-#[macro_use] extern crate rustc_data_structures;\n+extern crate rustc_data_structures;\n extern crate serialize as rustc_serialize;\n \n-use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::{newtype_index, indexed_vec::Idx};\n \n newtype_index!(struct MyIdx { MAX = 0xFFFF_FFFA });\n "}]}