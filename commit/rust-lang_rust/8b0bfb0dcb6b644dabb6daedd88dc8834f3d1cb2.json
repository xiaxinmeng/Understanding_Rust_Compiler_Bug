{"sha": "8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "node_id": "C_kwDOAAsO6NoAKDhiMGJmYjBkY2I2YjY0NGRhYmI2ZGFlZGQ4OGRjODgzNGYzZDFjYjI", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-12T15:11:00Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T15:10:45Z"}, "message": "Consider negative polarity on overlap check", "tree": {"sha": "3fd9acadf031bcd9eebe146aca320851c08c3e27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fd9acadf031bcd9eebe146aca320851c08c3e27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFwMXUACgkQgTGiTgx5\n769O1w//eQMNRsa7HHe0FLH1ES4VyRPExebymyijd5xJ9GMWn6pZVRJrmz1vwaVJ\nI8XHxakIzlDELFU1brM7Zhjdpey4aR3jQeZyLZxPFquw0gAq5H771qMTTyDhb/Vq\nVmoICrGrBTyZCgIa/W1nCwvZ5K/vISSxTivwFRf4XK3ciGoAINUWWCDP5AcBWVyB\nNoRvY8JRQaW2OD8aaPWRayfkQWZN7d8nxuAHQ5tH8vFUOv+9ByE2MeO+NlzM4DtN\nlqptMsuS8qAE2huL9vYyv356d03jcPnGviVOMFpVuAFJ20hVBChCyp202LPPeWTL\nrnMCrZNyhN5mv03SnavyT0Bp4Eq0CYbk2QXW+/BTev2gmnXCdKfrmuJkEq1E93BW\noqlkybSuxSDTMCrYgYXYZnkDTT9F3B7rQP1kvoOFHecx+gFl80ddb7gVLt6HnY5f\nvb5Dr4VM0TLQoGJJPtlvWykNAuhatA4/5kPA8QyumE8U+R3N9/Ndhz3TiCogEITR\n82ncjwECZRY8AN14+KyPqI89tSd8B5oBSHuPEkohr2chtVaJtqQFsll4MglUAXAp\nme6KG7wJL4XNmgOjD7VXO9DOjtOFuPdswPbmVMmqvE9Fs1yQepWwYuWSZlHhv40N\nwbqAmQIw+bNvqnfArjaivZUt26uT18V8JwUzZvQPaPJzc5j5FjU=\n=eyCG\n-----END PGP SIGNATURE-----", "payload": "tree 3fd9acadf031bcd9eebe146aca320851c08c3e27\nparent 6975afd141d5ced25d1b133afc792dd4988345a6\nauthor Santiago Pastorino <spastorino@gmail.com> 1634051460 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634742645 -0300\n\nConsider negative polarity on overlap check\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "html_url": "https://github.com/rust-lang/rust/commit/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6975afd141d5ced25d1b133afc792dd4988345a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6975afd141d5ced25d1b133afc792dd4988345a6", "html_url": "https://github.com/rust-lang/rust/commit/6975afd141d5ced25d1b133afc792dd4988345a6"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "8b99db068916315e6005e0da05d004c6c6061206", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "patch": "@@ -10,7 +10,7 @@ pub mod util;\n \n use rustc_hir as hir;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n-use rustc_middle::ty::{self, Const, Ty};\n+use rustc_middle::ty::{self, Const, Ty, TyCtxt};\n use rustc_span::Span;\n \n pub use self::FulfillmentErrorCode::*;\n@@ -55,6 +55,17 @@ pub struct Obligation<'tcx, T> {\n pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n+impl PredicateObligation<'tcx> {\n+    pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<PredicateObligation<'tcx>> {\n+        Some(PredicateObligation {\n+            cause: self.cause.clone(),\n+            param_env: self.param_env,\n+            predicate: self.predicate.flip_polarity(tcx)?,\n+            recursion_depth: self.recursion_depth,\n+        })\n+    }\n+}\n+\n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PredicateObligation<'_>, 32);"}, {"sha": "83a2278d8ba6dd34a7e9762f78c5e8c725c2f7d4", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_query_system::cache::Cache;\n \n pub type SelectionCache<'tcx> = Cache<\n-    ty::ConstnessAnd<ty::ParamEnvAnd<'tcx, ty::TraitRef<'tcx>>>,\n+    (ty::ConstnessAnd<ty::ParamEnvAnd<'tcx, ty::TraitRef<'tcx>>>, ty::ImplPolarity),\n     SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n >;\n \n@@ -101,7 +101,7 @@ pub enum SelectionCandidate<'tcx> {\n         /// `false` if there are no *further* obligations.\n         has_nested: bool,\n     },\n-    ParamCandidate(ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>),\n+    ParamCandidate((ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>, ty::ImplPolarity)),\n     ImplCandidate(DefId),\n     AutoImplCandidate(DefId),\n "}, {"sha": "b34d0f0f78c4bfe9f3c7d0c06ef223f9b0159fef", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "patch": "@@ -5,6 +5,7 @@\n //! [trait-specialization]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n use crate::infer::{CombinedSnapshot, InferOk, TyCtxtInferExt};\n+use crate::traits::query::evaluate_obligation::InferCtxtExt;\n use crate::traits::select::IntercrateAmbiguityCause;\n use crate::traits::SkipLeakCheck;\n use crate::traits::{self, Normalized, Obligation, ObligationCause, SelectionContext};\n@@ -186,6 +187,7 @@ fn overlap_within_probe(\n \n     // Are any of the obligations unsatisfiable? If so, no overlap.\n     let infcx = selcx.infcx();\n+    let tcx = infcx.tcx;\n     let opt_failing_obligation = a_impl_header\n         .predicates\n         .iter()\n@@ -199,7 +201,13 @@ fn overlap_within_probe(\n             predicate: p,\n         })\n         .chain(obligations)\n-        .find(|o| !selcx.predicate_may_hold_fatal(o));\n+        .find(|o| {\n+            !selcx.predicate_may_hold_fatal(o)\n+                || o.flip_polarity(tcx)\n+                    .as_ref()\n+                    .map(|o| selcx.infcx().predicate_must_hold_considering_regions(o))\n+                    .unwrap_or(false)\n+        });\n     // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported\n     // to the canonical trait query form, `infcx.predicate_may_hold`, once\n     // the new system supports intercrate mode (which coherence needs)."}, {"sha": "d532c9512122a6f028b4dfacca5008a406c880f9", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "patch": "@@ -376,7 +376,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         for bound in matching_bounds {\n             let wc = self.evaluate_where_clause(stack, bound.value)?;\n             if wc.may_apply() {\n-                candidates.vec.push(ParamCandidate(bound));\n+                candidates.vec.push(ParamCandidate((\n+                    bound,\n+                    stack.obligation.predicate.skip_binder().polarity,\n+                )));\n             }\n         }\n "}, {"sha": "84721922c8dd738493f79e10186638894a32c9a4", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "patch": "@@ -58,8 +58,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ParamCandidate(param) => {\n-                let obligations = self.confirm_param_candidate(obligation, param.value);\n-                Ok(ImplSource::Param(obligations, param.constness))\n+                let obligations = self.confirm_param_candidate(obligation, param.0.value);\n+                Ok(ImplSource::Param(obligations, param.0.constness))\n             }\n \n             ImplCandidate(impl_def_id) => {"}, {"sha": "ce90440748f6747f837c1580d90690064adcd36f", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "patch": "@@ -1107,10 +1107,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // const impl\n                 ImplCandidate(def_id) if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n                 // const param\n-                ParamCandidate(ty::ConstnessAnd {\n-                    constness: ty::BoundConstness::ConstIfConst,\n-                    ..\n-                }) => {}\n+                ParamCandidate((\n+                    ty::ConstnessAnd { constness: ty::BoundConstness::ConstIfConst, .. },\n+                    _,\n+                )) => {}\n                 // auto trait impl\n                 AutoImplCandidate(..) => {}\n                 // generator, this will raise error in other places\n@@ -1219,14 +1219,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         if self.can_use_global_caches(param_env) {\n             if let Some(res) = tcx\n                 .selection_cache\n-                .get(&param_env.and(trait_ref).with_constness(pred.constness), tcx)\n+                .get(&(param_env.and(trait_ref).with_constness(pred.constness), pred.polarity), tcx)\n             {\n                 return Some(res);\n             }\n         }\n         self.infcx\n             .selection_cache\n-            .get(&param_env.and(trait_ref).with_constness(pred.constness), tcx)\n+            .get(&(param_env.and(trait_ref).with_constness(pred.constness), pred.polarity), tcx)\n     }\n \n     /// Determines whether can we safely cache the result\n@@ -1286,7 +1286,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     debug!(?trait_ref, ?candidate, \"insert_candidate_cache global\");\n                     // This may overwrite the cache with the same value.\n                     tcx.selection_cache.insert(\n-                        param_env.and(trait_ref).with_constness(pred.constness),\n+                        (param_env.and(trait_ref).with_constness(pred.constness), pred.polarity),\n                         dep_node,\n                         candidate,\n                     );\n@@ -1297,7 +1297,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?trait_ref, ?candidate, \"insert_candidate_cache local\");\n         self.infcx.selection_cache.insert(\n-            param_env.and(trait_ref).with_constness(pred.constness),\n+            (param_env.and(trait_ref).with_constness(pred.constness), pred.polarity),\n             dep_node,\n             candidate,\n         );\n@@ -1523,10 +1523,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | ConstDropCandidate,\n             ) => false,\n \n-            (ParamCandidate(other), ParamCandidate(victim)) => {\n+            (\n+                ParamCandidate((other, other_polarity)),\n+                ParamCandidate((victim, victim_polarity)),\n+            ) => {\n                 let same_except_bound_vars = other.value.skip_binder()\n                     == victim.value.skip_binder()\n                     && other.constness == victim.constness\n+                    && other_polarity == victim_polarity\n                     && !other.value.skip_binder().has_escaping_bound_vars();\n                 if same_except_bound_vars {\n                     // See issue #84398. In short, we can generate multiple ParamCandidates which are\n@@ -1537,6 +1541,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     other.value.bound_vars().len() <= victim.value.bound_vars().len()\n                 } else if other.value == victim.value\n                     && victim.constness == ty::BoundConstness::NotConst\n+                    && other_polarity == victim_polarity\n                 {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n@@ -1566,11 +1571,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | TraitAliasCandidate(..)\n                 | ObjectCandidate(_)\n                 | ProjectionCandidate(_),\n-            ) => !is_global(&cand.value),\n+            ) => !is_global(&cand.0.value),\n             (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(&cand.value)\n+                is_global(&cand.0.value)\n             }\n             (\n                 ImplCandidate(_)\n@@ -1586,7 +1591,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(&cand.value) && other.evaluation.must_apply_modulo_regions()\n+                is_global(&cand.0.value) && other.evaluation.must_apply_modulo_regions()\n             }\n \n             (ProjectionCandidate(i), ProjectionCandidate(j))"}]}