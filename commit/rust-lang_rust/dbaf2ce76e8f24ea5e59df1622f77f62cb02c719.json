{"sha": "dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "node_id": "C_kwDOAAsO6NoAKGRiYWYyY2U3NmU4ZjI0ZWE1ZTU5ZGYxNjIyZjc3ZjYyY2IwMmM3MTk", "commit": {"author": {"name": "austaras", "email": "austaras@outlook.com", "date": "2022-08-26T08:52:45Z"}, "committer": {"name": "austaras", "email": "austaras@outlook.com", "date": "2022-08-28T16:24:56Z"}, "message": "turn `unwrap_or` into `unwrap_or_else` and vice versa", "tree": {"sha": "ea8c36d2e4fcd8a0a3c1fdd4a53e4477d7f5cb40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea8c36d2e4fcd8a0a3c1fdd4a53e4477d7f5cb40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "html_url": "https://github.com/rust-lang/rust/commit/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719/comments", "author": {"login": "Austaras", "id": 15013925, "node_id": "MDQ6VXNlcjE1MDEzOTI1", "avatar_url": "https://avatars.githubusercontent.com/u/15013925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Austaras", "html_url": "https://github.com/Austaras", "followers_url": "https://api.github.com/users/Austaras/followers", "following_url": "https://api.github.com/users/Austaras/following{/other_user}", "gists_url": "https://api.github.com/users/Austaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Austaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Austaras/subscriptions", "organizations_url": "https://api.github.com/users/Austaras/orgs", "repos_url": "https://api.github.com/users/Austaras/repos", "events_url": "https://api.github.com/users/Austaras/events{/privacy}", "received_events_url": "https://api.github.com/users/Austaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Austaras", "id": 15013925, "node_id": "MDQ6VXNlcjE1MDEzOTI1", "avatar_url": "https://avatars.githubusercontent.com/u/15013925?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Austaras", "html_url": "https://github.com/Austaras", "followers_url": "https://api.github.com/users/Austaras/followers", "following_url": "https://api.github.com/users/Austaras/following{/other_user}", "gists_url": "https://api.github.com/users/Austaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Austaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Austaras/subscriptions", "organizations_url": "https://api.github.com/users/Austaras/orgs", "repos_url": "https://api.github.com/users/Austaras/repos", "events_url": "https://api.github.com/users/Austaras/events{/privacy}", "received_events_url": "https://api.github.com/users/Austaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e598f6415461e7fe957eec1bee6afb55927d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e598f6415461e7fe957eec1bee6afb55927d59", "html_url": "https://github.com/rust-lang/rust/commit/e8e598f6415461e7fe957eec1bee6afb55927d59"}], "stats": {"total": 233, "additions": 233, "deletions": 0}, "files": [{"sha": "b5b5798b8bc711a42a6902e0ea7e9fe6c1d4575b", "filename": "crates/ide-assists/src/handlers/replace_or_with_or_else.rs", "status": "added", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_or_with_or_else.rs?ref=dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "patch": "@@ -0,0 +1,230 @@\n+use ide_db::assists::{AssistId, AssistKind};\n+use syntax::{\n+    ast::{self, make, HasArgList},\n+    AstNode,\n+};\n+\n+use crate::{AssistContext, Assists};\n+\n+// Assist: replace_or_with_or_else\n+//\n+// Replace `unwrap_or` with `unwrap_or_else` and `ok_or` with `ok_or_else`.\n+//\n+// ```\n+// let a = Some(1);\n+// a.unwra$0p_or(2);\n+// ```\n+// ->\n+// ```\n+// let a = Some(1);\n+// a.unwrap_or_else(|| 2);\n+// ```\n+pub(crate) fn replace_or_with_or_else(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n+    let (name, arg_list) = (call.name_ref()?, call.arg_list()?);\n+\n+    let replace = match &*name.text() {\n+        \"unwrap_or\" => \"unwrap_or_else\".to_string(),\n+        \"ok_or\" => \"ok_or_else\".to_string(),\n+        _ => return None,\n+    };\n+\n+    let arg = match arg_list.args().collect::<Vec<_>>().as_slice() {\n+        [] => make::arg_list(Vec::new()),\n+        [first] => {\n+            let param = (|| {\n+                if let ast::Expr::CallExpr(call) = first {\n+                    if call.arg_list()?.args().count() == 0 {\n+                        Some(call.expr()?.clone())\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    None\n+                }\n+            })()\n+            .unwrap_or_else(|| make::expr_closure(None, first.clone()));\n+            make::arg_list(vec![param])\n+        }\n+        _ => return None,\n+    };\n+\n+    acc.add(\n+        AssistId(\"replace_or_with_or_else\", AssistKind::RefactorRewrite),\n+        \"Replace unwrap_or or ok_or with lazy version\",\n+        call.syntax().text_range(),\n+        |builder| {\n+            builder.replace(name.syntax().text_range(), replace);\n+            builder.replace_ast(arg_list, arg)\n+        },\n+    )\n+}\n+\n+// Assist: replace_or_else_with_or\n+//\n+// Replace `unwrap_or_else` with `unwrap_or` and `ok_or_else` with `ok_or`.\n+//\n+// ```\n+// let a = Some(1);\n+// a.unwra$0p_or_else(|| 2);\n+// ```\n+// ->\n+// ```\n+// let a = Some(1);\n+// a.unwrap_or(2);\n+// ```\n+pub(crate) fn replace_or_else_with_or(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n+\n+    let (name, arg_list) = (call.name_ref()?, call.arg_list()?);\n+\n+    let replace = match &*name.text() {\n+        \"unwrap_or_else\" => \"unwrap_or\".to_string(),\n+        \"ok_or_else\" => \"ok_or\".to_string(),\n+        _ => return None,\n+    };\n+\n+    let arg = match arg_list.args().collect::<Vec<_>>().as_slice() {\n+        [] => make::arg_list(Vec::new()),\n+        [first] => {\n+            let param = (|| {\n+                if let ast::Expr::ClosureExpr(closure) = first {\n+                    if closure.param_list()?.params().count() == 0 {\n+                        Some(closure.body()?.clone())\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    None\n+                }\n+            })()\n+            .unwrap_or_else(|| make::expr_call(first.clone(), make::arg_list(Vec::new())));\n+            make::arg_list(vec![param])\n+        }\n+        _ => return None,\n+    };\n+\n+    acc.add(\n+        AssistId(\"replace_or_else_with_or\", AssistKind::RefactorRewrite),\n+        \"Replace unwrap_or_else or ok_or_else with eager version\",\n+        call.syntax().text_range(),\n+        |builder| {\n+            builder.replace(name.syntax().text_range(), replace);\n+            builder.replace_ast(arg_list, arg)\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_assist;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn replace_or_with_or_else_simple() {\n+        check_assist(\n+            replace_or_with_or_else,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_$0or(2);\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_or_else(|| 2);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_or_with_or_else_call() {\n+        check_assist(\n+            replace_or_with_or_else,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_$0or(x());\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_or_else(x);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_or_with_or_else_block() {\n+        check_assist(\n+            replace_or_with_or_else,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_$0or({\n+        let mut x = bar();\n+        for i in 0..10 {\n+            x += i;\n+        }\n+        x\n+    });\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_or_else(|| {\n+        let mut x = bar();\n+        for i in 0..10 {\n+            x += i;\n+        }\n+        x\n+    });\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_or_else_with_or_simple() {\n+        check_assist(\n+            replace_or_else_with_or,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_$0or_else(|| 2);\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_or(2);\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_or_else_with_or_call() {\n+        check_assist(\n+            replace_or_else_with_or,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_$0or_else(x);\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let foo = Some(1);\n+    return foo.unwrap_or(x());\n+}\n+\"#,\n+        )\n+    }\n+}"}, {"sha": "94fe387efe925be7c61b7222f87c978576ceeaab", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbaf2ce76e8f24ea5e59df1622f77f62cb02c719/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=dbaf2ce76e8f24ea5e59df1622f77f62cb02c719", "patch": "@@ -179,6 +179,7 @@ mod handlers {\n     mod replace_try_expr_with_match;\n     mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n+    mod replace_or_with_or_else;\n     mod introduce_named_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n@@ -273,6 +274,8 @@ mod handlers {\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,\n             replace_let_with_if_let::replace_let_with_if_let,\n+            replace_or_with_or_else::replace_or_else_with_or,\n+            replace_or_with_or_else::replace_or_with_or_else,\n             replace_turbofish_with_explicit_type::replace_turbofish_with_explicit_type,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             sort_items::sort_items,"}]}