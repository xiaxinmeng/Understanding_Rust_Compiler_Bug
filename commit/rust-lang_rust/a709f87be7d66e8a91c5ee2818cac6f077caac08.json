{"sha": "a709f87be7d66e8a91c5ee2818cac6f077caac08", "node_id": "C_kwDOAAsO6NoAKGE3MDlmODdiZTdkNjZlOGE5MWM1ZWUyODE4Y2FjNmYwNzdjYWFjMDg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-28T00:17:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T01:54:45Z"}, "message": "Avoid more unnecessary `MetaItem`/`Attribute` conversions.\n\nIn `Expander::expand` the code currently uses `mk_attr_outer` to convert\na `MetaItem` to an `Attribute`, and then follows that with\n`meta_item_list` which converts back. This commit avoids the unnecessary\nconversions.\n\nThere was one wrinkle: the existing conversions caused the bogus `<>` on\n`Default<>` to be removed. With the conversion gone, we get a second\nerror message about the `<>`. This is a rare case, so I think it\nprobably doesn't matter much.", "tree": {"sha": "49ff2e0daaff47dd3c7b9295ea6479859d7e89ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ff2e0daaff47dd3c7b9295ea6479859d7e89ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a709f87be7d66e8a91c5ee2818cac6f077caac08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a709f87be7d66e8a91c5ee2818cac6f077caac08", "html_url": "https://github.com/rust-lang/rust/commit/a709f87be7d66e8a91c5ee2818cac6f077caac08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a709f87be7d66e8a91c5ee2818cac6f077caac08/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2a8a0c675bf7d111846b19fd3d5d7a13915425", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2a8a0c675bf7d111846b19fd3d5d7a13915425", "html_url": "https://github.com/rust-lang/rust/commit/fc2a8a0c675bf7d111846b19fd3d5d7a13915425"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "fa5a45730ac7afd8379eb696f2ef7098df42d389", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a709f87be7d66e8a91c5ee2818cac6f077caac08/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709f87be7d66e8a91c5ee2818cac6f077caac08/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=a709f87be7d66e8a91c5ee2818cac6f077caac08", "patch": "@@ -1,7 +1,7 @@\n use crate::cfg_eval::cfg_eval;\n \n use rustc_ast as ast;\n-use rustc_ast::{attr, token, GenericParamKind, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n+use rustc_ast::{token, GenericParamKind, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, Indeterminate, MultiItemModifier};\n use rustc_feature::AttributeTemplate;\n@@ -40,28 +40,29 @@ impl MultiItemModifier for Expander {\n                     sym::derive,\n                     template,\n                 );\n-                let attr =\n-                    attr::mk_attr_outer(&sess.parse_sess.attr_id_generator, meta_item.clone());\n \n-                let mut resolutions: Vec<_> = attr\n-                    .meta_item_list()\n-                    .unwrap_or_default()\n-                    .into_iter()\n-                    .filter_map(|nested_meta| match nested_meta {\n-                        NestedMetaItem::MetaItem(meta) => Some(meta),\n-                        NestedMetaItem::Lit(lit) => {\n-                            // Reject `#[derive(\"Debug\")]`.\n-                            report_unexpected_meta_item_lit(sess, &lit);\n-                            None\n-                        }\n-                    })\n-                    .map(|meta| {\n-                        // Reject `#[derive(Debug = \"value\", Debug(abc))]`, but recover the paths.\n-                        report_path_args(sess, &meta);\n-                        meta.path\n-                    })\n-                    .map(|path| (path, dummy_annotatable(), None, self.0))\n-                    .collect();\n+                let mut resolutions = match &meta_item.kind {\n+                    MetaItemKind::List(list) => {\n+                        list.iter()\n+                            .filter_map(|nested_meta| match nested_meta {\n+                                NestedMetaItem::MetaItem(meta) => Some(meta),\n+                                NestedMetaItem::Lit(lit) => {\n+                                    // Reject `#[derive(\"Debug\")]`.\n+                                    report_unexpected_meta_item_lit(sess, &lit);\n+                                    None\n+                                }\n+                            })\n+                            .map(|meta| {\n+                                // Reject `#[derive(Debug = \"value\", Debug(abc))]`, but recover the\n+                                // paths.\n+                                report_path_args(sess, &meta);\n+                                meta.path.clone()\n+                            })\n+                            .map(|path| (path, dummy_annotatable(), None, self.0))\n+                            .collect()\n+                    }\n+                    _ => vec![],\n+                };\n \n                 // Do not configure or clone items unless necessary.\n                 match &mut resolutions[..] {"}, {"sha": "cf28b0255d17db4c611ea55cf461be1a51fbc1c1", "filename": "src/test/ui/span/macro-ty-params.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a709f87be7d66e8a91c5ee2818cac6f077caac08/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a709f87be7d66e8a91c5ee2818cac6f077caac08/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.rs?ref=a709f87be7d66e8a91c5ee2818cac6f077caac08", "patch": "@@ -9,5 +9,7 @@ macro_rules! foo { () => () }\n fn main() {\n     foo::<T>!(); //~ ERROR generic arguments in macro path\n     foo::<>!(); //~ ERROR generic arguments in macro path\n-    m!(Default<>); //~ ERROR unexpected generic arguments in path\n+    m!(Default<>);\n+    //~^ ERROR unexpected generic arguments in path\n+    //~^^ ERROR generic arguments in macro path\n }"}, {"sha": "7023ef8cd1c33a43ad91d03e37b3da9c7026b288", "filename": "src/test/ui/span/macro-ty-params.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a709f87be7d66e8a91c5ee2818cac6f077caac08/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a709f87be7d66e8a91c5ee2818cac6f077caac08/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-ty-params.stderr?ref=a709f87be7d66e8a91c5ee2818cac6f077caac08", "patch": "@@ -16,5 +16,11 @@ error: unexpected generic arguments in path\n LL |     m!(Default<>);\n    |               ^^\n \n-error: aborting due to 3 previous errors\n+error: generic arguments in macro path\n+  --> $DIR/macro-ty-params.rs:12:15\n+   |\n+LL |     m!(Default<>);\n+   |               ^^\n+\n+error: aborting due to 4 previous errors\n "}]}