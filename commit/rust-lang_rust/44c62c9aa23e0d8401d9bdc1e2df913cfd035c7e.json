{"sha": "44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e", "node_id": "C_kwDOAAsO6NoAKDQ0YzYyYzlhYTIzZTBkODQwMWQ5YmRjMWUyZGY5MTNjZmQwMzVjN2U", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T23:51:26Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T23:51:26Z"}, "message": "feat: add tests and fix existing ones", "tree": {"sha": "cfa49dd2d4a28dce3f3cb69588afeef4cb907da1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa49dd2d4a28dce3f3cb69588afeef4cb907da1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEhJzmO046LuvaNO3WIPoWCbA7HW0FAmIzyX4ACgkQIPoWCbA7\nHW07iBAAzpHPdfbr0ZyEmQNruSEulRIEIgKLDXX0dMs2P+zaim1bs59RWiAY37qd\nEd0MAzPqxmujakFsesFowpRyLWGemsDXEAFKAT9EBPXfAO36U6yocw2BKtVKKPgL\nOviajyBNEJd9d0ZP1gRj/I/eDpv63KlRaWoUR/J5o22ki/CLZshuVAzvUheaDNZo\nrZsXbd0RJTTzauTRnsBZnihMRQKVIziVhK03pvn5HFr0rRt/rKMCIggzzjUnUWGF\nXHH36EwUxmTbH9Zf1u1Ofcg2OuFmPneMRVF9rJNp2cRmHRcjnKrSe1BxRABPtgkW\na/B8hcvVf1+QysrPYjt1O+atlcN2XWYqxeYPYmXxt0aaAvtOUWROrA3p3HSIsyZJ\nPtfaufv0AbqTEZzl9ItnrbaqS+W/gCwXf3iTb6TkDlScwadlOEJJ4PqbRp4yWW5C\nvI5QDfsA4Cks02FiUR3Yxgs+SGx6UbHpsqIQIB2oXuOrjwi12AJ+TsVfRFTsX+aS\naGBRhOTjpPkTvTYNADYoUApF6nJWCxJjeDbCkDGARK057sRaDLDM2RWVOdxh9ZPH\nuwtQ0sHhkYa1fTFL7fAAsqcRh2IBchv2JSXbDY65L96p3cgWRJoqn2pvXjVvh1jj\n4alFHqjjIIIBYu2wX+CJbwV0ohBdnt0Eyl8xvLbl9DV27bkV4Nw=\n=nOOb\n-----END PGP SIGNATURE-----", "payload": "tree cfa49dd2d4a28dce3f3cb69588afeef4cb907da1\nparent 17ff85081d969c125b3b0abeb0366d163853ee7a\nauthor Max Baumann <max@bmn.dev> 1647561086 +0100\ncommitter Max Baumann <max@bmn.dev> 1647561086 +0100\n\nfeat: add tests and fix existing ones\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e", "html_url": "https://github.com/rust-lang/rust/commit/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ff85081d969c125b3b0abeb0366d163853ee7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ff85081d969c125b3b0abeb0366d163853ee7a", "html_url": "https://github.com/rust-lang/rust/commit/17ff85081d969c125b3b0abeb0366d163853ee7a"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "3e40014f50fd354a4dfdf051208ff519efee942e", "filename": "clippy_lints/src/use_unwrap_or.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs?ref=44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e", "patch": "@@ -47,12 +47,12 @@ impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // look for x.or().unwrap()\n         if_chain! {\n-            if let ExprKind::MethodCall(path, [unwrap_self], unwrap_span) = expr.kind;\n+            if let ExprKind::MethodCall(path, [unwrap_self], unwrap_span) = &expr.kind;\n             if path.ident.name == sym::unwrap;\n-            if let ExprKind::MethodCall(caller_path, [or_self, or_arg], or_span) = unwrap_self.kind;\n+            if let ExprKind::MethodCall(caller_path, [or_self, or_arg], or_span) = &unwrap_self.kind;\n             if caller_path.ident.name == sym::or;\n             then {\n-                let ty = cx.typeck_results().expr_ty(&or_self); // get type of x (we later check if it's Option or Result)\n+                let ty = cx.typeck_results().expr_ty(or_self); // get type of x (we later check if it's Option or Result)\n                 let title;\n \n                 if is_type_diagnostic_item(cx, ty, sym::Option) {\n@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n                 span_lint_and_help(\n                     cx,\n                     USE_UNWRAP_OR,\n-                    or_span.to(unwrap_span),\n+                    or_span.to(*unwrap_span),\n                     title,\n                     None,\n                     \"use `unwrap_or()` instead\""}, {"sha": "dd55b33739db6620fa9633325fbaee4cebb7d715", "filename": "tests/ui/use_unwrap_or.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e/tests%2Fui%2Fuse_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e/tests%2Fui%2Fuse_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_unwrap_or.rs?ref=44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::use_unwrap_or)]\n+#![allow(clippy::map_identity)]\n \n struct SomeStruct {}\n impl SomeStruct {\n@@ -8,6 +9,14 @@ impl SomeStruct {\n     fn unwrap(&self) {}\n }\n \n+struct SomeOtherStruct {}\n+impl SomeOtherStruct {\n+    fn or(self) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n+}\n+\n fn main() {\n     let option: Option<&str> = None;\n     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n@@ -19,11 +28,18 @@ fn main() {\n     let instance = SomeStruct {};\n     let _ = instance.or(Some(SomeStruct {})).unwrap(); // should not trigger lint\n \n+    let instance = SomeOtherStruct {};\n+    let _ = instance.or().unwrap(); // should not trigger lint and should not panic\n+\n     // None in or\n     let option: Option<&str> = None;\n     let _ = option.or(None).unwrap(); // should not trigger lint\n \n     // Not Err in or\n     let result: Result<&str, &str> = Err(\"Error\");\n     let _ = result.or::<&str>(Err(\"Other Error\")).unwrap(); // should not trigger lint\n+\n+    // other function between\n+    let option: Option<&str> = None;\n+    let _ = option.or(Some(\"fallback\")).map(|v| v).unwrap(); // should not trigger lint\n }"}, {"sha": "796778a293d454fb9492daa27a4ccd9a31958203", "filename": "tests/ui/use_unwrap_or.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e/tests%2Fui%2Fuse_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e/tests%2Fui%2Fuse_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_unwrap_or.stderr?ref=44c62c9aa23e0d8401d9bdc1e2df913cfd035c7e", "patch": "@@ -1,5 +1,5 @@\n error: .or(Some(\u2026)).unwrap() found\n-  --> $DIR/use_unwrap_or.rs:13:20\n+  --> $DIR/use_unwrap_or.rs:22:20\n    |\n LL |     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n    = help: use `unwrap_or()` instead\n \n error: .or(Ok(\u2026)).unwrap() found\n-  --> $DIR/use_unwrap_or.rs:16:20\n+  --> $DIR/use_unwrap_or.rs:25:20\n    |\n LL |     let _ = result.or::<&str>(Ok(\"fallback\")).unwrap(); // should trigger lint\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}