{"sha": "f571e46ddb696d15a8cc912309714ca74f23dcc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzFlNDZkZGI2OTZkMTVhOGNjOTEyMzA5NzE0Y2E3NGYyM2RjYzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-22T01:23:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-26T16:25:27Z"}, "message": "test: Remove non-procedure uses of `do` from compiletest, libstd tests,\ncompile-fail tests, run-fail tests, and run-pass tests.", "tree": {"sha": "836e1185e797d57993b2149ee262e8ffc09f6a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836e1185e797d57993b2149ee262e8ffc09f6a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f571e46ddb696d15a8cc912309714ca74f23dcc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f571e46ddb696d15a8cc912309714ca74f23dcc4", "html_url": "https://github.com/rust-lang/rust/commit/f571e46ddb696d15a8cc912309714ca74f23dcc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f571e46ddb696d15a8cc912309714ca74f23dcc4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ceb374ab783c6417b60867e7f34bebe997936ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ceb374ab783c6417b60867e7f34bebe997936ac", "html_url": "https://github.com/rust-lang/rust/commit/8ceb374ab783c6417b60867e7f34bebe997936ac"}], "stats": {"total": 1212, "additions": 575, "deletions": 637}, "files": [{"sha": "65f733cf1dec3d9f08c1cf298ffd2d0d5f7d14f6", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -266,12 +266,12 @@ pub fn make_tests(config: &config) -> ~[test::TestDescAndFn] {\n         let file = file.clone();\n         debug!(\"inspecting file {}\", file.display());\n         if is_test(config, &file) {\n-            let t = do make_test(config, &file) {\n+            let t = make_test(config, &file, || {\n                 match config.mode {\n                     mode_codegen => make_metrics_test_closure(config, &file),\n                     _ => make_test_closure(config, &file)\n                 }\n-            };\n+            });\n             tests.push(t)\n         }\n     }"}, {"sha": "1966701dbdedda584910ab7d685458c09f122650", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -39,7 +39,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut pp_exact = None;\n     let mut debugger_cmds = ~[];\n     let mut check_lines = ~[];\n-    do iter_header(testfile) |ln| {\n+    iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n           None => ()\n@@ -74,7 +74,7 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         };\n \n         true\n-    };\n+    });\n     return TestProps {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n@@ -91,13 +91,13 @@ pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n         ~\"xfail-\" + util::get_os(config.target)\n     }\n \n-    let val = do iter_header(testfile) |ln| {\n+    let val = iter_header(testfile, |ln| {\n         if parse_name_directive(ln, \"xfail-test\") { false }\n         else if parse_name_directive(ln, xfail_target(config)) { false }\n         else if config.mode == common::mode_pretty &&\n             parse_name_directive(ln, \"xfail-pretty\") { false }\n         else { true }\n-    };\n+    });\n \n     !val\n }\n@@ -143,7 +143,7 @@ fn parse_check_line(line: &str) -> Option<~str> {\n }\n \n fn parse_exec_env(line: &str) -> Option<(~str, ~str)> {\n-    do parse_name_value_directive(line, ~\"exec-env\").map |nv| {\n+    parse_name_value_directive(line, ~\"exec-env\").map(|nv| {\n         // nv is either FOO or FOO=BAR\n         let mut strs: ~[~str] = nv.splitn('=', 1).map(|s| s.to_owned()).collect();\n \n@@ -155,7 +155,7 @@ fn parse_exec_env(line: &str) -> Option<(~str, ~str)> {\n           }\n           n => fail!(\"Expected 1 or 2 strings, not {}\", n)\n         }\n-    }\n+    })\n }\n \n fn parse_pp_exact(line: &str, testfile: &Path) -> Option<Path> {"}, {"sha": "012d57da123cfe16acbc9fbb00fdb147bf1effe4", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -22,11 +22,11 @@ fn target_env(lib_path: &str, prog: &str) -> ~[(~str,~str)] {\n     assert!(prog.ends_with(\".exe\"));\n     let aux_path = prog.slice(0u, prog.len() - 4u).to_owned() + \".libaux\";\n \n-    env = do env.map() |pair| {\n+    env = env.map(|pair| {\n         let (k,v) = (*pair).clone();\n         if k == ~\"PATH\" { (~\"PATH\", v + \";\" + lib_path + \";\" + aux_path) }\n         else { (k,v) }\n-    };\n+    });\n     if prog.ends_with(\"rustc.exe\") {\n         env.push((~\"RUST_THREADS\", ~\"1\"));\n     }"}, {"sha": "4c7b212304cebe1cc3c72a773cca458d6e634ada", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -427,9 +427,9 @@ fn check_error_patterns(props: &TestProps,\n                         testfile: &Path,\n                         ProcRes: &ProcRes) {\n     if props.error_patterns.is_empty() {\n-        do testfile.display().with_str |s| {\n+        testfile.display().with_str(|s| {\n             fatal(~\"no error pattern specified in \" + s);\n-        }\n+        })\n     }\n \n     if ProcRes.status.success() {"}, {"sha": "2b105a3fa7d2375bf593740beeedecd7f2ba0f6d", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -333,47 +333,57 @@ mod test {\n     #[bench]\n     fn bench_capacity(b: &mut bh) {\n         let x = @[1, 2, 3];\n-        b.iter(|| capacity(x));\n+        b.iter(|| {\n+            let _ = capacity(x);\n+        });\n     }\n \n     #[bench]\n     fn bench_build_sized(b: &mut bh) {\n         let len = 64;\n-        do b.iter {\n+        b.iter(|| {\n             build(Some(len), |push| for i in range(0, 1024) { push(i) });\n-        }\n+        });\n     }\n \n     #[bench]\n     fn bench_build(b: &mut bh) {\n-        do b.iter {\n+        b.iter(|| {\n             for i in range(0, 95) {\n                 build(None, |push| push(i));\n             }\n-        }\n+        });\n     }\n \n     #[bench]\n     fn bench_append(b: &mut bh) {\n         let lhs = @[7, ..128];\n         let rhs = range(0, 256).to_owned_vec();\n-        b.iter(|| append(lhs, rhs))\n+        b.iter(|| {\n+            let _ = append(lhs, rhs);\n+        })\n     }\n \n     #[bench]\n     fn bench_map(b: &mut bh) {\n         let elts = range(0, 256).to_owned_vec();\n-        b.iter(|| map(elts, |x| x*2))\n+        b.iter(|| {\n+            let _ = map(elts, |x| x*2);\n+        })\n     }\n \n     #[bench]\n     fn bench_from_fn(b: &mut bh) {\n-        b.iter(|| from_fn(1024, |x| x));\n+        b.iter(|| {\n+            let _ = from_fn(1024, |x| x);\n+        });\n     }\n \n     #[bench]\n     fn bench_from_elem(b: &mut bh) {\n-        b.iter(|| from_elem(1024, 0u64));\n+        b.iter(|| {\n+            let _ = from_elem(1024, 0u64);\n+        });\n     }\n \n     #[bench]\n@@ -387,12 +397,16 @@ mod test {\n     #[bench]\n     fn bench_to_managed(b: &mut bh) {\n         let elts = range(0, 1024).to_owned_vec();\n-        b.iter(|| to_managed(elts));\n+        b.iter(|| {\n+            let _ = to_managed(elts);\n+        });\n     }\n \n     #[bench]\n     fn bench_clone(b: &mut bh) {\n         let elts = to_managed(range(0, 1024).to_owned_vec());\n-        b.iter(|| elts.clone());\n+        b.iter(|| {\n+            let _ = elts.clone();\n+        });\n     }\n }"}, {"sha": "29c304f9ac539a3d12bb63c93bba8764d0028c60", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -53,9 +53,9 @@ use num::FromPrimitive;\n /// # Examples\n ///\n /// ```\n-/// do std::bool::all_values |x: bool| {\n+/// std::bool::all_values(|x: bool| {\n ///     println(x.to_str());\n-/// }\n+/// })\n /// ```\n #[inline]\n pub fn all_values(blk: |v: bool|) {\n@@ -396,9 +396,9 @@ mod tests {\n \n     #[test]\n     fn test_bool_from_str() {\n-        do all_values |v| {\n+        all_values(|v| {\n             assert!(Some(v) == FromStr::from_str(v.to_str()))\n-        }\n+        });\n     }\n \n     #[test]\n@@ -409,11 +409,11 @@ mod tests {\n \n     #[test]\n     fn test_bool_to_bit() {\n-        do all_values |v| {\n+        all_values(|v| {\n             assert_eq!(v.to_bit::<u8>(), if v { 1u8 } else { 0u8 });\n             assert_eq!(v.to_bit::<uint>(), if v { 1u } else { 0u });\n             assert_eq!(v.to_bit::<int>(), if v { 1i } else { 0i });\n-        }\n+        });\n     }\n \n     #[test]"}, {"sha": "e49cf3e5303b3c585cae0c3865417900a747a1e3", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -82,7 +82,6 @@ pub struct RefCell<T> {\n     priv nc: NonCopyable\n }\n \n-<<<<<<< HEAD\n // Values [1, MAX-1] represent the number of `Ref` active\n // (will not outgrow its range since `uint` is the size of the address space)\n type BorrowFlag = uint;"}, {"sha": "b372993e3e50665d6040b63d66c964c2aae2e434", "filename": "src/libstd/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -532,7 +532,7 @@ fn test_is_digit() {\n fn test_escape_default() {\n     fn string(c: char) -> ~str {\n         let mut result = ~\"\";\n-        do escape_default(c) |c| { result.push_char(c); }\n+        escape_default(c, |c| { result.push_char(c); });\n         return result;\n     }\n     assert_eq!(string('\\n'), ~\"\\\\n\");\n@@ -554,7 +554,7 @@ fn test_escape_default() {\n fn test_escape_unicode() {\n     fn string(c: char) -> ~str {\n         let mut result = ~\"\";\n-        do escape_unicode(c) |c| { result.push_char(c); }\n+        escape_unicode(c, |c| { result.push_char(c); });\n         return result;\n     }\n     assert_eq!(string('\\x00'), ~\"\\\\x00\");"}, {"sha": "80ff104e8303ec467f1df97ebf42f6109b12115d", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -224,14 +224,14 @@ mod test {\n     fn nested_trap_test_inner() {\n         let mut inner_trapped = false;\n \n-        do sadness::cond.trap(|_j| {\n+        sadness::cond.trap(|_j| {\n             debug!(\"nested_trap_test_inner: in handler\");\n             inner_trapped = true;\n             0\n-        }).inside {\n+        }).inside(|| {\n             debug!(\"nested_trap_test_inner: in protected block\");\n             trouble(1);\n-        }\n+        });\n \n         assert!(inner_trapped);\n     }\n@@ -240,31 +240,31 @@ mod test {\n     fn nested_trap_test_outer() {\n         let mut outer_trapped = false;\n \n-        do sadness::cond.trap(|_j| {\n+        sadness::cond.trap(|_j| {\n             debug!(\"nested_trap_test_outer: in handler\");\n             outer_trapped = true; 0\n-        }).inside {\n+        }).inside(|| {\n             debug!(\"nested_guard_test_outer: in protected block\");\n             nested_trap_test_inner();\n             trouble(1);\n-        }\n+        });\n \n         assert!(outer_trapped);\n     }\n \n     fn nested_reraise_trap_test_inner() {\n         let mut inner_trapped = false;\n \n-        do sadness::cond.trap(|_j| {\n+        sadness::cond.trap(|_j| {\n             debug!(\"nested_reraise_trap_test_inner: in handler\");\n             inner_trapped = true;\n             let i = 10;\n             debug!(\"nested_reraise_trap_test_inner: handler re-raising\");\n             sadness::cond.raise(i)\n-        }).inside {\n+        }).inside(|| {\n             debug!(\"nested_reraise_trap_test_inner: in protected block\");\n             trouble(1);\n-        }\n+        });\n \n         assert!(inner_trapped);\n     }\n@@ -273,13 +273,13 @@ mod test {\n     fn nested_reraise_trap_test_outer() {\n         let mut outer_trapped = false;\n \n-        do sadness::cond.trap(|_j| {\n+        sadness::cond.trap(|_j| {\n             debug!(\"nested_reraise_trap_test_outer: in handler\");\n             outer_trapped = true; 0\n-        }).inside {\n+        }).inside(|| {\n             debug!(\"nested_reraise_trap_test_outer: in protected block\");\n             nested_reraise_trap_test_inner();\n-        }\n+        });\n \n         assert!(outer_trapped);\n     }\n@@ -288,13 +288,13 @@ mod test {\n     fn test_default() {\n         let mut trapped = false;\n \n-        do sadness::cond.trap(|j| {\n+        sadness::cond.trap(|j| {\n             debug!(\"test_default: in handler\");\n             sadness::cond.raise_default(j, || { trapped=true; 5 })\n-        }).inside {\n+        }).inside(|| {\n             debug!(\"test_default: in protected block\");\n             trouble(1);\n-        }\n+        });\n \n         assert!(trapped);\n     }\n@@ -312,12 +312,12 @@ mod test {\n             #[test]\n             fn test_conditions_are_public() {\n                 let mut trapped = false;\n-                do sadness::cond.trap(|_| {\n+                sadness::cond.trap(|_| {\n                     trapped = true;\n                     0\n-                }).inside {\n+                }).inside(|| {\n                     sadness::cond.raise(0);\n-                }\n+                });\n                 assert!(trapped);\n             }\n         }"}, {"sha": "8c1897339cbef9d7e11d977407bd24e6907fc2a4", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -438,22 +438,22 @@ mod test {\n \n     #[bench]\n     fn bench_buffered_reader(bh: &mut Harness) {\n-        do bh.iter {\n+        bh.iter(|| {\n             BufferedReader::new(NullStream);\n-        }\n+        });\n     }\n \n     #[bench]\n     fn bench_buffered_writer(bh: &mut Harness) {\n-        do bh.iter {\n+        bh.iter(|| {\n             BufferedWriter::new(NullStream);\n-        }\n+        });\n     }\n \n     #[bench]\n     fn bench_buffered_stream(bh: &mut Harness) {\n-        do bh.iter {\n+        bh.iter(|| {\n             BufferedStream::new(NullStream);\n-        }\n+        });\n     }\n }"}, {"sha": "564e664027f73ec32f1e5a9ae6e3812273cdf5cb", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -276,11 +276,11 @@ mod test {\n     #[test]\n     fn read_byte_error() {\n         let mut reader = ErroringReader;\n-        do io_error::cond.trap(|_| {\n-        }).inside {\n+        io_error::cond.trap(|_| {\n+        }).inside(|| {\n             let byte = reader.read_byte();\n             assert!(byte == None);\n-        }\n+        });\n     }\n \n     #[test]\n@@ -303,10 +303,10 @@ mod test {\n     fn bytes_error() {\n         let reader = ErroringReader;\n         let mut it = reader.bytes();\n-        do io_error::cond.trap(|_| ()).inside {\n+        io_error::cond.trap(|_| ()).inside(|| {\n             let byte = it.next();\n             assert!(byte == None);\n-        }\n+        })\n     }\n \n     #[test]\n@@ -328,10 +328,10 @@ mod test {\n     #[test]\n     fn read_bytes_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n-        do io_error::cond.trap(|_| {\n-        }).inside {\n+        io_error::cond.trap(|_| {\n+        }).inside(|| {\n             assert!(reader.read_bytes(4) == ~[10, 11]);\n-        }\n+        })\n     }\n \n     #[test]\n@@ -356,11 +356,11 @@ mod test {\n     fn push_bytes_eof() {\n         let mut reader = MemReader::new(~[10, 11]);\n         let mut buf = ~[8, 9];\n-        do io_error::cond.trap(|_| {\n-        }).inside {\n+        io_error::cond.trap(|_| {\n+        }).inside(|| {\n             reader.push_bytes(&mut buf, 4);\n             assert!(buf == ~[8, 9, 10, 11]);\n-        }\n+        })\n     }\n \n     #[test]\n@@ -369,9 +369,9 @@ mod test {\n             count: 0,\n         };\n         let mut buf = ~[8, 9];\n-        do io_error::cond.trap(|_| { } ).inside {\n+        io_error::cond.trap(|_| { } ).inside(|| {\n             reader.push_bytes(&mut buf, 4);\n-        }\n+        });\n         assert!(buf == ~[8, 9, 10]);\n     }\n \n@@ -384,13 +384,13 @@ mod test {\n             count: 0,\n         };\n         let buf = @mut ~[8, 9];\n-        do (|| {\n+        (|| {\n             reader.push_bytes(&mut *buf, 4);\n-        }).finally {\n+        }).finally(|| {\n             // NB: Using rtassert here to trigger abort on failure since this is a should_fail test\n             // FIXME: #7049 This fails because buf is still borrowed\n             //rtassert!(*buf == ~[8, 9, 10]);\n-        }\n+        })\n     }\n \n     #[test]"}, {"sha": "b08f4af9a54c6c3db981e1801ab8fecbb355429d", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -331,12 +331,12 @@ mod test {\n         writer.write([0]);\n \n         let mut called = false;\n-        do io_error::cond.trap(|err| {\n+        io_error::cond.trap(|err| {\n             assert_eq!(err.kind, OtherIoError);\n             called = true;\n-        }).inside {\n+        }).inside(|| {\n             writer.write([0, 0]);\n-        }\n+        });\n         assert!(called);\n     }\n "}, {"sha": "aa7a64d2210748d65d66ac3181e4b914daee1a0d", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -157,14 +157,14 @@ mod test {\n     fn bind_error() {\n         do run_in_mt_newsched_task {\n             let mut called = false;\n-            do io_error::cond.trap(|e| {\n+            io_error::cond.trap(|e| {\n                 assert!(e.kind == PermissionDenied);\n                 called = true;\n-            }).inside {\n+            }).inside(|| {\n                 let addr = SocketAddr { ip: Ipv4Addr(0, 0, 0, 0), port: 1 };\n                 let listener = TcpListener::bind(addr);\n                 assert!(listener.is_none());\n-            }\n+            });\n             assert!(called);\n         }\n     }\n@@ -173,7 +173,7 @@ mod test {\n     fn connect_error() {\n         do run_in_mt_newsched_task {\n             let mut called = false;\n-            do io_error::cond.trap(|e| {\n+            io_error::cond.trap(|e| {\n                 let expected_error = if cfg!(unix) {\n                     ConnectionRefused\n                 } else {\n@@ -182,11 +182,11 @@ mod test {\n                 };\n                 assert_eq!(e.kind, expected_error);\n                 called = true;\n-            }).inside {\n+            }).inside(|| {\n                 let addr = SocketAddr { ip: Ipv4Addr(0, 0, 0, 0), port: 1 };\n                 let stream = TcpStream::connect(addr);\n                 assert!(stream.is_none());\n-            }\n+            });\n             assert!(called);\n         }\n     }\n@@ -306,16 +306,16 @@ mod test {\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n                 assert!(nread.is_none());\n-                do io_error::cond.trap(|e| {\n+                io_error::cond.trap(|e| {\n                     if cfg!(windows) {\n                         assert_eq!(e.kind, NotConnected);\n                     } else {\n                         fail!();\n                     }\n-                }).inside {\n+                }).inside(|| {\n                     let nread = stream.read(buf);\n                     assert!(nread.is_none());\n-                }\n+                })\n             }\n \n             do spawntask {\n@@ -341,16 +341,16 @@ mod test {\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n                 assert!(nread.is_none());\n-                do io_error::cond.trap(|e| {\n+                io_error::cond.trap(|e| {\n                     if cfg!(windows) {\n                         assert_eq!(e.kind, NotConnected);\n                     } else {\n                         fail!();\n                     }\n-                }).inside {\n+                }).inside(|| {\n                     let nread = stream.read(buf);\n                     assert!(nread.is_none());\n-                }\n+                })\n             }\n \n             do spawntask {\n@@ -376,17 +376,17 @@ mod test {\n                 let buf = [0];\n                 loop {\n                     let mut stop = false;\n-                    do io_error::cond.trap(|e| {\n+                    io_error::cond.trap(|e| {\n                         // NB: ECONNRESET on linux, EPIPE on mac, ECONNABORTED\n                         //     on windows\n                         assert!(e.kind == ConnectionReset ||\n                                 e.kind == BrokenPipe ||\n                                 e.kind == ConnectionAborted,\n                                 \"unknown error: {:?}\", e);\n                         stop = true;\n-                    }).inside {\n+                    }).inside(|| {\n                         stream.write(buf);\n-                    }\n+                    });\n                     if stop { break }\n                 }\n             }\n@@ -414,17 +414,17 @@ mod test {\n                 let buf = [0];\n                 loop {\n                     let mut stop = false;\n-                    do io_error::cond.trap(|e| {\n+                    io_error::cond.trap(|e| {\n                         // NB: ECONNRESET on linux, EPIPE on mac, ECONNABORTED\n                         //     on windows\n                         assert!(e.kind == ConnectionReset ||\n                                 e.kind == BrokenPipe ||\n                                 e.kind == ConnectionAborted,\n                                 \"unknown error: {:?}\", e);\n                         stop = true;\n-                    }).inside {\n+                    }).inside(|| {\n                         stream.write(buf);\n-                    }\n+                    });\n                     if stop { break }\n                 }\n             }\n@@ -458,10 +458,10 @@ mod test {\n \n             do spawntask {\n                 port.take().recv();\n-                do max.times {\n+                max.times(|| {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n-                }\n+                });\n             }\n         }\n     }\n@@ -487,10 +487,10 @@ mod test {\n \n             do spawntask {\n                 port.take().recv();\n-                do max.times {\n+                max.times(|| {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n-                }\n+                });\n             }\n         }\n     }"}, {"sha": "f02fc1ae4471cc856da94218bc9c733c335e899b", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -116,14 +116,14 @@ mod test {\n     fn bind_error() {\n         do run_in_mt_newsched_task {\n             let mut called = false;\n-            do io_error::cond.trap(|e| {\n+            io_error::cond.trap(|e| {\n                 assert!(e.kind == PermissionDenied);\n                 called = true;\n-            }).inside {\n+            }).inside(|| {\n                 let addr = SocketAddr { ip: Ipv4Addr(0, 0, 0, 0), port: 1 };\n                 let socket = UdpSocket::bind(addr);\n                 assert!(socket.is_none());\n-            }\n+            });\n             assert!(called);\n         }\n     }"}, {"sha": "809473d64c68eecbbea2b0190cc61e6171b9897d", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -186,13 +186,13 @@ mod tests {\n     fn bind_error() {\n         do run_in_mt_newsched_task {\n             let mut called = false;\n-            do io_error::cond.trap(|e| {\n+            io_error::cond.trap(|e| {\n                 assert!(e.kind == PermissionDenied);\n                 called = true;\n-            }).inside {\n+            }).inside(|| {\n                 let listener = UnixListener::bind(&(\"path/to/nowhere\"));\n                 assert!(listener.is_none());\n-            }\n+            });\n             assert!(called);\n         }\n     }\n@@ -201,13 +201,13 @@ mod tests {\n     fn connect_error() {\n         do run_in_mt_newsched_task {\n             let mut called = false;\n-            do io_error::cond.trap(|e| {\n+            io_error::cond.trap(|e| {\n                 assert_eq!(e.kind, OtherIoError);\n                 called = true;\n-            }).inside {\n+            }).inside(|| {\n                 let stream = UnixStream::connect(&(\"path/to/nowhere\"));\n                 assert!(stream.is_none());\n-            }\n+            });\n             assert!(called);\n         }\n     }\n@@ -240,13 +240,13 @@ mod tests {\n             let buf = [0];\n             let mut stop = false;\n             while !stop{\n-                do io_error::cond.trap(|e| {\n+                io_error::cond.trap(|e| {\n                     assert!(e.kind == BrokenPipe || e.kind == NotConnected,\n                             \"unknown error {:?}\", e);\n                     stop = true;\n-                }).inside {\n+                }).inside(|| {\n                     server.write(buf);\n-                }\n+                })\n             }\n         }, |_client| {\n             // drop the client\n@@ -266,20 +266,20 @@ mod tests {\n             do spawntask {\n                 let mut acceptor = UnixListener::bind(&path1).listen();\n                 chan.take().send(());\n-                do times.times {\n+                times.times(|| {\n                     let mut client = acceptor.accept();\n                     let mut buf = [0];\n                     client.read(buf);\n                     assert_eq!(buf[0], 100);\n-                }\n+                })\n             }\n \n             do spawntask {\n                 port.take().recv();\n-                do times.times {\n+                times.times(|| {\n                     let mut stream = UnixStream::connect(&path2);\n                     stream.write([100]);\n-                }\n+                })\n             }\n         }\n     }"}, {"sha": "61c5411f3602fa611759a702009c2632ba792951", "filename": "src/libstd/io/option.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Foption.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -125,21 +125,21 @@ mod test {\n             let mut writer: Option<MemWriter> = None;\n \n             let mut called = false;\n-            do io_error::cond.trap(|err| {\n+            io_error::cond.trap(|err| {\n                 assert_eq!(err.kind, PreviousIoError);\n                 called = true;\n-            }).inside {\n+            }).inside(|| {\n                 writer.write([0, 0, 0]);\n-            }\n+            });\n             assert!(called);\n \n             let mut called = false;\n-            do io_error::cond.trap(|err| {\n+            io_error::cond.trap(|err| {\n                 assert_eq!(err.kind, PreviousIoError);\n                 called = true;\n-            }).inside {\n+            }).inside(|| {\n                 writer.flush();\n-            }\n+            });\n             assert!(called);\n         }\n     }\n@@ -161,21 +161,21 @@ mod test {\n         let mut buf = [];\n \n         let mut called = false;\n-        do io_error::cond.trap(|err| {\n+        io_error::cond.trap(|err| {\n             assert_eq!(err.kind, PreviousIoError);\n             called = true;\n-        }).inside {\n+        }).inside(|| {\n             reader.read(buf);\n-        }\n+        });\n         assert!(called);\n \n         let mut called = false;\n-        do io_error::cond.trap(|err| {\n+        io_error::cond.trap(|err| {\n             assert_eq!(err.kind, PreviousIoError);\n             called = true;\n-        }).inside {\n+        }).inside(|| {\n             assert!(reader.eof());\n-        }\n+        });\n         assert!(called);\n     }\n }"}, {"sha": "75a7d5db1321e392845d7ef31643108bf539a7e7", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -2674,13 +2674,13 @@ mod tests {\n     fn test_rposition_fail() {\n         let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         let mut i = 0;\n-        do v.iter().rposition |_elt| {\n+        v.iter().rposition(|_elt| {\n             if i == 2 {\n                 fail!()\n             }\n             i += 1;\n             false\n-        };\n+        });\n     }\n \n "}, {"sha": "335bbc8b1da30d519b1a36d9e1238413c6113fe9", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -479,33 +479,33 @@ mod tests {\n         static key: Key<~int> = &Key;\n         set(key, ~1);\n \n-        do get(key) |v| {\n-            do get(key) |v| {\n-                do get(key) |v| {\n+        get(key, |v| {\n+            get(key, |v| {\n+                get(key, |v| {\n                     assert_eq!(**v.unwrap(), 1);\n-                }\n+                });\n                 assert_eq!(**v.unwrap(), 1);\n-            }\n+            });\n             assert_eq!(**v.unwrap(), 1);\n-        }\n+        });\n         set(key, ~2);\n-        do get(key) |v| {\n+        get(key, |v| {\n             assert_eq!(**v.unwrap(), 2);\n-        }\n+        })\n     }\n \n     #[test]\n     fn test_get_mut() {\n         static key: Key<int> = &Key;\n         set(key, 1);\n \n-        do get_mut(key) |v| {\n+        get_mut(key, |v| {\n             *v.unwrap() = 2;\n-        }\n+        });\n \n-        do get(key) |v| {\n+        get(key, |v| {\n             assert_eq!(*v.unwrap(), 2);\n-        }\n+        })\n     }\n \n     #[test]\n@@ -533,38 +533,38 @@ mod tests {\n     fn test_nested_get_set1() {\n         static key: Key<int> = &Key;\n         set(key, 4);\n-        do get(key) |_| {\n+        get(key, |_| {\n             set(key, 4);\n-        }\n+        })\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_nested_get_mut2() {\n         static key: Key<int> = &Key;\n         set(key, 4);\n-        do get(key) |_| {\n+        get(key, |_| {\n             get_mut(key, |_| {})\n-        }\n+        })\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_nested_get_mut3() {\n         static key: Key<int> = &Key;\n         set(key, 4);\n-        do get_mut(key) |_| {\n+        get_mut(key, |_| {\n             get(key, |_| {})\n-        }\n+        })\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_nested_get_mut4() {\n         static key: Key<int> = &Key;\n         set(key, 4);\n-        do get_mut(key) |_| {\n+        get_mut(key, |_| {\n             get_mut(key, |_| {})\n-        }\n+        })\n     }\n }"}, {"sha": "1028cef9dc6475754703644e1ee8bd7a040bcc88", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -750,16 +750,16 @@ mod bench {\n     #[bench]\n     fn uint_to_str_rand(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n-        do bh.iter {\n+        bh.iter(|| {\n             rng.gen::<uint>().to_str();\n-        }\n+        })\n     }\n \n     #[bench]\n     fn float_to_str_rand(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n-        do bh.iter {\n+        bh.iter(|| {\n             f64::to_str(rng.gen());\n-        }\n+        })\n     }\n }"}, {"sha": "cf7047bd068a0a567815e6860d846e1993d58b81", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -244,6 +244,6 @@ pub fn test_times() {\n     use num::Times;\n     let ten = 10 as uint;\n     let mut accum = 0;\n-    do ten.times { accum += 1; }\n+    ten.times(|| { accum += 1; });\n     assert!((accum == 10));\n }"}, {"sha": "715072653a7ab616fce00e4e6ad2afbbb235f915", "filename": "src/libstd/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -612,14 +612,14 @@ mod tests {\n     #[test]\n     fn test_option_while_some() {\n         let mut i = 0;\n-        do Some(10).while_some |j| {\n+        Some(10).while_some(|j| {\n             i += 1;\n             if (j > 0) {\n                 Some(j-1)\n             } else {\n                 None\n             }\n-        }\n+        });\n         assert_eq!(i, 11);\n     }\n "}, {"sha": "ddfb43ed56f8707f252b28a03e5e73570d773e20", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -523,35 +523,35 @@ mod tests {\n         use path::null_byte::cond;\n \n         let mut handled = false;\n-        let mut p = do cond.trap(|v| {\n+        let mut p = cond.trap(|v| {\n             handled = true;\n             assert_eq!(v.as_slice(), b!(\"foo/bar\", 0));\n             (b!(\"/bar\").to_owned())\n-        }).inside {\n+        }).inside(|| {\n             Path::new(b!(\"foo/bar\", 0))\n-        };\n+        });\n         assert!(handled);\n         assert_eq!(p.as_vec(), b!(\"/bar\"));\n \n         handled = false;\n-        do cond.trap(|v| {\n+        cond.trap(|v| {\n             handled = true;\n             assert_eq!(v.as_slice(), b!(\"f\", 0, \"o\"));\n             (b!(\"foo\").to_owned())\n-        }).inside {\n+        }).inside(|| {\n             p.set_filename(b!(\"f\", 0, \"o\"))\n-        };\n+        });\n         assert!(handled);\n         assert_eq!(p.as_vec(), b!(\"/foo\"));\n \n         handled = false;\n-        do cond.trap(|v| {\n+        cond.trap(|v| {\n             handled = true;\n             assert_eq!(v.as_slice(), b!(\"f\", 0, \"o\"));\n             (b!(\"foo\").to_owned())\n-        }).inside {\n+        }).inside(|| {\n             p.push(b!(\"f\", 0, \"o\"));\n-        };\n+        });\n         assert!(handled);\n         assert_eq!(p.as_vec(), b!(\"/foo/foo\"));\n     }\n@@ -573,29 +573,29 @@ mod tests {\n         )\n \n         t!(~\"new() w/nul\" => {\n-            do cond.trap(|_| {\n+            cond.trap(|_| {\n                 (b!(\"null\", 0).to_owned())\n-            }).inside {\n+            }).inside(|| {\n                 Path::new(b!(\"foo/bar\", 0))\n-            };\n+            });\n         })\n \n         t!(~\"set_filename w/nul\" => {\n             let mut p = Path::new(b!(\"foo/bar\"));\n-            do cond.trap(|_| {\n+            cond.trap(|_| {\n                 (b!(\"null\", 0).to_owned())\n-            }).inside {\n+            }).inside(|| {\n                 p.set_filename(b!(\"foo\", 0))\n-            };\n+            });\n         })\n \n         t!(~\"push w/nul\" => {\n             let mut p = Path::new(b!(\"foo/bar\"));\n-            do cond.trap(|_| {\n+            cond.trap(|_| {\n                 (b!(\"null\", 0).to_owned())\n-            }).inside {\n+            }).inside(|| {\n                 p.push(b!(\"foo\", 0))\n-            };\n+            });\n         })\n     }\n \n@@ -621,22 +621,21 @@ mod tests {\n                 {\n                     let mut called = false;\n                     let path = Path::new($path);\n-                    do path.display().with_str |s| {\n+                    path.display().with_str(|s| {\n                         assert_eq!(s, $exp);\n                         called = true;\n-                    };\n+                    });\n                     assert!(called);\n                 }\n             );\n             ($path:expr, $exp:expr, filename) => (\n                 {\n                     let mut called = false;\n                     let path = Path::new($path);\n-                    do path.filename_display().with_str |s| {\n+                    path.filename_display().with_str(|s| {\n                         assert_eq!(s, $exp);\n                         called = true;\n-\n-                    };\n+                    });\n                     assert!(called);\n                 }\n             )"}, {"sha": "cc2af54fd105c62fe2db9cf35d30f1f1a3964767", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -1248,35 +1248,35 @@ mod tests {\n         use path::null_byte::cond;\n \n         let mut handled = false;\n-        let mut p = do cond.trap(|v| {\n+        let mut p = cond.trap(|v| {\n             handled = true;\n             assert_eq!(v.as_slice(), b!(\"foo\\\\bar\", 0));\n             (b!(\"\\\\bar\").to_owned())\n-        }).inside {\n+        }).inside(|| {\n             Path::new(b!(\"foo\\\\bar\", 0))\n-        };\n+        });\n         assert!(handled);\n         assert_eq!(p.as_vec(), b!(\"\\\\bar\"));\n \n         handled = false;\n-        do cond.trap(|v| {\n+        cond.trap(|v| {\n             handled = true;\n             assert_eq!(v.as_slice(), b!(\"f\", 0, \"o\"));\n             (b!(\"foo\").to_owned())\n-        }).inside {\n+        }).inside(|| {\n             p.set_filename(b!(\"f\", 0, \"o\"))\n-        };\n+        });\n         assert!(handled);\n         assert_eq!(p.as_vec(), b!(\"\\\\foo\"));\n \n         handled = false;\n-        do cond.trap(|v| {\n+        cond.trap(|v| {\n             handled = true;\n             assert_eq!(v.as_slice(), b!(\"f\", 0, \"o\"));\n             (b!(\"foo\").to_owned())\n-        }).inside {\n+        }).inside(|| {\n             p.push(b!(\"f\", 0, \"o\"));\n-        };\n+        });\n         assert!(handled);\n         assert_eq!(p.as_vec(), b!(\"\\\\foo\\\\foo\"));\n     }\n@@ -1298,29 +1298,29 @@ mod tests {\n         )\n \n         t!(~\"from_vec() w\\\\nul\" => {\n-            do cond.trap(|_| {\n+            cond.trap(|_| {\n                 (b!(\"null\", 0).to_owned())\n-            }).inside {\n+            }).inside(|| {\n                 Path::new(b!(\"foo\\\\bar\", 0))\n-            };\n+            });\n         })\n \n         t!(~\"set_filename w\\\\nul\" => {\n             let mut p = Path::new(b!(\"foo\\\\bar\"));\n-            do cond.trap(|_| {\n+            cond.trap(|_| {\n                 (b!(\"null\", 0).to_owned())\n-            }).inside {\n+            }).inside(|| {\n                 p.set_filename(b!(\"foo\", 0))\n-            };\n+            });\n         })\n \n         t!(~\"push w\\\\nul\" => {\n             let mut p = Path::new(b!(\"foo\\\\bar\"));\n-            do cond.trap(|_| {\n+            cond.trap(|_| {\n                 (b!(\"null\", 0).to_owned())\n-            }).inside {\n+            }).inside(|| {\n                 p.push(b!(\"foo\", 0))\n-            };\n+            });\n         })\n     }\n \n@@ -1339,17 +1339,17 @@ mod tests {\n \n         let mut called = false;\n         let path = Path::new(\"foo\");\n-        do path.display().with_str |s| {\n+        path.display().with_str(|s| {\n             assert_eq!(s, \"foo\");\n             called = true;\n-        };\n+        });\n         assert!(called);\n         called = false;\n         let path = Path::new(b!(\"\\\\\"));\n-        do path.filename_display().with_str |s| {\n+        path.filename_display().with_str(|s| {\n             assert_eq!(s, \"\");\n             called = true;\n-        }\n+        });\n         assert!(called);\n     }\n "}, {"sha": "9b9636af901f241c6b52662d55c7b68fb8ec3071", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -492,28 +492,28 @@ pub mod ptr_tests {\n     fn test_position() {\n         use libc::c_char;\n \n-        do \"hello\".with_c_str |p| {\n+        \"hello\".with_c_str(|p| {\n             unsafe {\n                 assert!(2u == position(p, |c| *c == 'l' as c_char));\n                 assert!(4u == position(p, |c| *c == 'o' as c_char));\n                 assert!(5u == position(p, |c| *c == 0 as c_char));\n             }\n-        }\n+        })\n     }\n \n     #[test]\n     fn test_buf_len() {\n-        do \"hello\".with_c_str |p0| {\n-            do \"there\".with_c_str |p1| {\n-                do \"thing\".with_c_str |p2| {\n+        \"hello\".with_c_str(|p0| {\n+            \"there\".with_c_str(|p1| {\n+                \"thing\".with_c_str(|p2| {\n                     let v = ~[p0, p1, p2, null()];\n-                    do v.as_imm_buf |vp, len| {\n+                    v.as_imm_buf(|vp, len| {\n                         assert_eq!(unsafe { buf_len(vp) }, 3u);\n                         assert_eq!(len, 4u);\n-                    }\n-                }\n-            }\n-        }\n+                    })\n+                })\n+            })\n+        })\n     }\n \n     #[test]\n@@ -621,23 +621,23 @@ pub mod ptr_tests {\n                 one, two, three\n             ];\n \n-            do arr.as_imm_buf |arr_ptr, arr_len| {\n+            arr.as_imm_buf(|arr_ptr, arr_len| {\n                 let mut ctr = 0;\n                 let mut iteration_count = 0;\n-                do array_each_with_len(arr_ptr, arr_len) |e| {\n+                array_each_with_len(arr_ptr, arr_len, |e| {\n                      let actual = str::raw::from_c_str(e);\n-                     let expected = do expected_arr[ctr].with_ref |buf| {\n+                     let expected = expected_arr[ctr].with_ref(|buf| {\n                          str::raw::from_c_str(buf)\n-                     };\n+                     });\n                      debug!(\n                          \"test_ptr_array_each_with_len e: {}, a: {}\",\n                          expected, actual);\n                      assert_eq!(actual, expected);\n                      ctr += 1;\n                      iteration_count += 1;\n-                 }\n+                });\n                 assert_eq!(iteration_count, 3u);\n-            }\n+            })\n         }\n     }\n \n@@ -658,23 +658,23 @@ pub mod ptr_tests {\n                 one, two, three\n             ];\n \n-            do arr.as_imm_buf |arr_ptr, _| {\n+            arr.as_imm_buf(|arr_ptr, _| {\n                 let mut ctr = 0;\n                 let mut iteration_count = 0;\n-                do array_each(arr_ptr) |e| {\n+                array_each(arr_ptr, |e| {\n                      let actual = str::raw::from_c_str(e);\n-                     let expected = do expected_arr[ctr].with_ref |buf| {\n+                     let expected = expected_arr[ctr].with_ref(|buf| {\n                          str::raw::from_c_str(buf)\n-                     };\n+                     });\n                      debug!(\n                          \"test_ptr_array_each e: {}, a: {}\",\n                          expected, actual);\n                      assert_eq!(actual, expected);\n                      ctr += 1;\n                      iteration_count += 1;\n-                 }\n+                });\n                 assert_eq!(iteration_count, 3);\n-            }\n+            })\n         }\n     }\n "}, {"sha": "e042874245967af31fed9e5fa2f944571db63b14", "filename": "src/libstd/rand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fgamma.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -184,11 +184,11 @@ mod bench {\n         let gamma = Gamma::new(10., 1.0);\n         let mut rng = StdRng::new();\n \n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 gamma.ind_sample(&mut rng);\n             }\n-        }\n+        });\n         bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n \n@@ -197,11 +197,11 @@ mod bench {\n         let gamma = Gamma::new(0.1, 1.0);\n         let mut rng = StdRng::new();\n \n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 gamma.ind_sample(&mut rng);\n             }\n-        }\n+        });\n         bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n }"}, {"sha": "4778e81f95169510e2ff019e9935afe3815de16d", "filename": "src/libstd/rand/distributions/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions%2Fmod.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -571,23 +571,23 @@ mod bench {\n         let mut rng = XorShiftRng::new();\n         let mut normal = Normal::new(-2.71828, 3.14159);\n \n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 normal.sample(&mut rng);\n             }\n-        }\n+        });\n         bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n     #[bench]\n     fn rand_exp(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n         let mut exp = Exp::new(2.71828 * 3.14159);\n \n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 exp.sample(&mut rng);\n             }\n-        }\n+        });\n         bh.bytes = size_of::<f64>() as u64 * RAND_BENCH_N;\n     }\n }"}, {"sha": "ae53ef8b7c0b15ace73bdf2f66c32bfbb2270dfa", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -899,53 +899,53 @@ mod bench {\n     #[bench]\n     fn rand_xorshift(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n-        }\n+        });\n         bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n     fn rand_isaac(bh: &mut BenchHarness) {\n         let mut rng = IsaacRng::new();\n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n-        }\n+        });\n         bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n     fn rand_isaac64(bh: &mut BenchHarness) {\n         let mut rng = Isaac64Rng::new();\n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n-        }\n+        });\n         bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n     fn rand_std(bh: &mut BenchHarness) {\n         let mut rng = StdRng::new();\n-        do bh.iter {\n+        bh.iter(|| {\n             for _ in range(0, RAND_BENCH_N) {\n                 rng.gen::<uint>();\n             }\n-        }\n+        });\n         bh.bytes = size_of::<uint>() as u64 * RAND_BENCH_N;\n     }\n \n     #[bench]\n     fn rand_shuffle_100(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n         let x : &mut[uint] = [1,..100];\n-        do bh.iter {\n+        bh.iter(|| {\n             rng.shuffle_mut(x);\n-        }\n+        })\n     }\n }"}, {"sha": "ff425a8a73b2598ba5cf1f86537b7a30cc7e5648", "filename": "src/libstd/result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -139,9 +139,9 @@ impl<T, E: ToStr> Result<T, E> {\n     ///\n     /// Example:\n     ///\n-    ///     let res = do read_file(file).map |buf| {\n+    ///     let res = read_file(file).map(|buf| {\n     ///         parse_bytes(buf)\n-    ///     }\n+    ///     })\n     #[inline]\n     pub fn map<U>(self, op: |T| -> U) -> Result<U,E> {\n         match self {\n@@ -462,24 +462,24 @@ mod tests {\n     pub fn test_impl_iter() {\n         let mut valid = false;\n         let okval = Ok::<~str, ~str>(~\"a\");\n-        do okval.iter().next().map |_| { valid = true; };\n+        okval.iter().next().map(|_| { valid = true; });\n         assert!(valid);\n \n         let errval = Err::<~str, ~str>(~\"b\");\n-        do errval.iter().next().map |_| { valid = false; };\n+        errval.iter().next().map(|_| { valid = false; });\n         assert!(valid);\n     }\n \n     #[test]\n     pub fn test_impl_iter_err() {\n         let mut valid = true;\n         let okval = Ok::<~str, ~str>(~\"a\");\n-        do okval.iter_err().next().map |_| { valid = false };\n+        okval.iter_err().next().map(|_| { valid = false });\n         assert!(valid);\n \n         valid = false;\n         let errval = Err::<~str, ~str>(~\"b\");\n-        do errval.iter_err().next().map |_| { valid = true };\n+        errval.iter_err().next().map(|_| { valid = true });\n         assert!(valid);\n     }\n "}, {"sha": "52a6d67cb05fb01ed499f6961d17ab3e428d9397", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -1013,7 +1013,7 @@ mod test {\n \n             total.times(|| {\n                 port.recv();\n-            })\n+            });\n         }\n     }\n \n@@ -1041,7 +1041,7 @@ mod test {\n \n             total.times(|| {\n                 end_port.recv();\n-            })\n+            });\n         }\n     }\n \n@@ -1071,7 +1071,7 @@ mod test {\n                     do spawntask_random {\n                         chan_clone.send(());\n                     }\n-                })\n+                });\n             }\n             let end_chan_clone = end_chan.clone();\n             do spawntask_random {\n@@ -1082,7 +1082,7 @@ mod test {\n                         let recvd = port_clone.try_recv().is_some();\n                         end_chan_clone.send(recvd);\n                     }\n-                })\n+                });\n             }\n \n             let mut recvd = 0;\n@@ -1112,20 +1112,20 @@ mod test {\n                 let pipe_clone = pipe.clone();\n                 let end_chan_clone = end_chan.clone();\n                 do spawntask_random {\n-                    do msgs.times {\n+                    msgs.times(|| {\n                         pipe_clone.send(());\n-                    }\n-                    do msgs.times {\n+                    });\n+                    msgs.times(|| {\n                         pipe_clone.recv();\n-                    }\n+                    });\n                 }\n \n                 end_chan_clone.send(());\n             });\n \n             total.times(|| {\n                 end_port.recv();\n-            })\n+            });\n         }\n     }\n "}, {"sha": "6dcbd4a129e5c62ef7d227ca2e9c3f163fe7f366", "filename": "src/libstd/rt/crate_map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fcrate_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fcrate_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcrate_map.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -61,9 +61,9 @@ pub fn get_crate_map() -> Option<&'static CrateMap<'static>> {\n         } else {\n             \"_rust_crate_map_toplevel\"\n         };\n-        let sym = do rust_crate_map_toplevel.with_c_str |buf| {\n+        let sym = rust_crate_map_toplevel.with_c_str(|buf| {\n             dl::symbol(module, buf)\n-        };\n+        });\n         dl::close(module);\n         sym\n     };\n@@ -141,10 +141,10 @@ mod tests {\n \n         let mut cnt = 0;\n         unsafe {\n-            do iter_crate_map(&root_crate) |entry| {\n+            iter_crate_map(&root_crate, |entry| {\n                 assert!(*entry.log_level == 3);\n                 cnt += 1;\n-            }\n+            });\n             assert!(cnt == 1);\n         }\n     }\n@@ -183,10 +183,10 @@ mod tests {\n \n         let mut cnt = 0;\n         unsafe {\n-            do iter_crate_map(&root_crate) |entry| {\n+            iter_crate_map(&root_crate, |entry| {\n                 assert!(*entry.log_level == cnt);\n                 cnt += 1;\n-            }\n+            });\n             assert!(cnt == 4);\n         }\n     }"}, {"sha": "3147e3c8a078e18e6196a10043f10598908c7638", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -103,15 +103,15 @@ mod bench {\n \n     #[bench]\n     fn alloc_owned_small(bh: &mut BenchHarness) {\n-        do bh.iter {\n+        bh.iter(|| {\n             ~10;\n-        }\n+        })\n     }\n \n     #[bench]\n     fn alloc_owned_big(bh: &mut BenchHarness) {\n-        do bh.iter {\n+        bh.iter(|| {\n             ~[10, ..1000];\n-        }\n+        })\n     }\n }"}, {"sha": "d5b0e384ca2914273447b1b42cdf8553908c78e3", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -182,9 +182,9 @@ mod test {\n             let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n             Local::put(task);\n \n-            let res = do Local::borrow |_task: &mut Task| {\n+            let res = Local::borrow(|_task: &mut Task| {\n                 true\n-            };\n+            });\n             assert!(res)\n                 let task: ~Task = Local::take();\n             cleanup_task(task);"}, {"sha": "c98a66453eb158bd0a74eb918e6a5ebd562b231d", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -311,11 +311,11 @@ mod bench {\n \n     #[bench]\n     fn alloc_managed_small(bh: &mut BenchHarness) {\n-        bh.iter(|| @10);\n+        bh.iter(|| { @10; });\n     }\n \n     #[bench]\n     fn alloc_managed_big(bh: &mut BenchHarness) {\n-        bh.iter(|| @[10, ..1000]);\n+        bh.iter(|| { @[10, ..1000]; });\n     }\n }"}, {"sha": "ccc786242e6ebb07c69a4be5b88e630da66bfa02", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -1176,7 +1176,7 @@ mod test {\n         use util;\n \n         do run_in_bare_thread {\n-            do stress_factor().times {\n+            stress_factor().times(|| {\n                 let sleepers = SleeperList::new();\n                 let queue = WorkQueue::new();\n                 let queues = ~[queue.clone()];\n@@ -1205,7 +1205,7 @@ mod test {\n                 util::ignore(handle);\n \n                 thread.join();\n-            }\n+            })\n         }\n     }\n \n@@ -1218,14 +1218,14 @@ mod test {\n \n         do run_in_mt_newsched_task {\n             let mut ports = ~[];\n-            do 10.times {\n+            10.times(|| {\n                 let (port, chan) = oneshot();\n                 let chan_cell = Cell::new(chan);\n                 do spawntask_later {\n                     chan_cell.take().send(());\n                 }\n                 ports.push(port);\n-            }\n+            });\n \n             while !ports.is_empty() {\n                 ports.pop().recv();\n@@ -1315,7 +1315,7 @@ mod test {\n     fn dont_starve_1() {\n         use rt::comm::oneshot;\n \n-        do stress_factor().times {\n+        stress_factor().times(|| {\n             do run_in_mt_newsched_task {\n                 let (port, chan) = oneshot();\n \n@@ -1327,14 +1327,14 @@ mod test {\n \n                 chan.send(());\n             }\n-        }\n+        })\n     }\n \n     #[test]\n     fn dont_starve_2() {\n         use rt::comm::oneshot;\n \n-        do stress_factor().times {\n+        stress_factor().times(|| {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot();\n                 let (_port2, chan2) = stream();\n@@ -1349,7 +1349,7 @@ mod test {\n \n                 chan.send(());\n             }\n-        }\n+        })\n     }\n \n     // Regression test for a logic bug that would cause single-threaded schedulers\n@@ -1360,7 +1360,7 @@ mod test {\n         use num::Times;\n \n         do spawn_sched(SingleThreaded) {\n-            do 5.times { deschedule(); }\n+            5.times(|| { deschedule(); })\n         }\n         do spawn { }\n         do spawn { }"}, {"sha": "0d4171d5a643ca1c70a44b25cfe68631ee201e8b", "filename": "src/libstd/rt/tube.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Ftube.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Frt%2Ftube.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftube.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -103,11 +103,11 @@ mod test {\n             let tube_clone = tube.clone();\n             let tube_clone_cell = Cell::new(tube_clone);\n             let sched: ~Scheduler = Local::take();\n-            do sched.deschedule_running_task_and_then |sched, task| {\n+            sched.deschedule_running_task_and_then(|sched, task| {\n                 let mut tube_clone = tube_clone_cell.take();\n                 tube_clone.send(1);\n                 sched.enqueue_blocked_task(task);\n-            }\n+            });\n \n             assert!(tube.recv() == 1);\n         }\n@@ -120,7 +120,7 @@ mod test {\n             let tube_clone = tube.clone();\n             let tube_clone = Cell::new(tube_clone);\n             let sched: ~Scheduler = Local::take();\n-            do sched.deschedule_running_task_and_then |sched, task| {\n+            sched.deschedule_running_task_and_then(|sched, task| {\n                 let tube_clone = Cell::new(tube_clone.take());\n                 do sched.event_loop.callback {\n                     let mut tube_clone = tube_clone.take();\n@@ -129,7 +129,7 @@ mod test {\n                     tube_clone.send(1);\n                 }\n                 sched.enqueue_blocked_task(task);\n-            }\n+            });\n \n             assert!(tube.recv() == 1);\n         }\n@@ -144,14 +144,14 @@ mod test {\n             let tube_clone = tube.clone();\n             let tube_clone = Cell::new(tube_clone);\n             let sched: ~Scheduler = Local::take();\n-            do sched.deschedule_running_task_and_then |sched, task| {\n+            sched.deschedule_running_task_and_then(|sched, task| {\n                 callback_send(tube_clone.take(), 0);\n \n                 fn callback_send(tube: Tube<int>, i: int) {\n                     if i == 100 { return; }\n \n                     let tube = Cell::new(Cell::new(tube));\n-                    do Local::borrow |sched: &mut Scheduler| {\n+                    Local::borrow(|sched: &mut Scheduler| {\n                         let tube = tube.take();\n                         do sched.event_loop.callback {\n                             let mut tube = tube.take();\n@@ -160,11 +160,11 @@ mod test {\n                             tube.send(i);\n                             callback_send(tube, i + 1);\n                         }\n-                    }\n+                    })\n                 }\n \n                 sched.enqueue_blocked_task(task);\n-            }\n+            });\n \n             for i in range(0, MAX) {\n                 let j = tube.recv();"}, {"sha": "9b83c493065d2fcfb98f4e870246f6f790923e5d", "filename": "src/libstd/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fselect.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -211,7 +211,7 @@ mod test {\n         do run_in_uv_task {\n             let (ports, _) = unzip(range(0u, 10).map(|_| stream::<int>()));\n             let (port, chan) = stream();\n-            do 10.times { chan.send(31337); }\n+            10.times(|| { chan.send(31337); });\n             let mut ports = ports;\n             let mut port = Some(port);\n             let order = [5u,0,4,3,2,6,9,8,7,1];\n@@ -276,7 +276,7 @@ mod test {\n \n             do run_in_uv_task {\n                 // A bit of stress, since ordinarily this is just smoke and mirrors.\n-                do 4.times {\n+                4.times(|| {\n                     let send_on_chans = send_on_chans.clone();\n                     do task::spawn {\n                         let mut ports = ~[];\n@@ -294,7 +294,7 @@ mod test {\n                         // nondeterministic result, but should succeed\n                         select(ports);\n                     }\n-                }\n+                })\n             }\n         }\n     }"}, {"sha": "f65ec6971aba7af47d466c835014c4dc2a58a72a", "filename": "src/libstd/str.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -3966,19 +3966,25 @@ mod bench {\n                         Lorem ipsum dolor sit amet, consectetur. \");\n \n         assert_eq!(100, s.len());\n-        bh.iter(|| is_utf8(s));\n+        bh.iter(|| {\n+            let _ = is_utf8(s);\n+        });\n     }\n \n     #[bench]\n     fn is_utf8_100_multibyte(bh: &mut BenchHarness) {\n         let s = bytes!(\"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\");\n         assert_eq!(100, s.len());\n-        bh.iter(|| is_utf8(s));\n+        bh.iter(|| {\n+            let _ = is_utf8(s);\n+        });\n     }\n \n     #[bench]\n     fn bench_with_capacity(bh: &mut BenchHarness) {\n-        bh.iter(|| with_capacity(100));\n+        bh.iter(|| {\n+            let _ = with_capacity(100);\n+        });\n     }\n \n     #[bench]"}, {"sha": "189f1436d42d7beb2098f952464c73c68dcb119e", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -477,9 +477,9 @@ fn test_unnamed_task() {\n \n     do run_in_uv_task {\n         do spawn {\n-            do with_task_name |name| {\n+            with_task_name(|name| {\n                 assert!(name.is_none());\n-            }\n+            })\n         }\n     }\n }\n@@ -492,9 +492,9 @@ fn test_owned_named_task() {\n         let mut t = task();\n         t.name(~\"ada lovelace\");\n         do t.spawn {\n-            do with_task_name |name| {\n+            with_task_name(|name| {\n                 assert!(name.unwrap() == \"ada lovelace\");\n-            }\n+            })\n         }\n     }\n }\n@@ -507,9 +507,9 @@ fn test_static_named_task() {\n         let mut t = task();\n         t.name(\"ada lovelace\");\n         do t.spawn {\n-            do with_task_name |name| {\n+            with_task_name(|name| {\n                 assert!(name.unwrap() == \"ada lovelace\");\n-            }\n+            })\n         }\n     }\n }\n@@ -522,9 +522,9 @@ fn test_send_named_task() {\n         let mut t = task();\n         t.name(\"ada lovelace\".into_send_str());\n         do t.spawn {\n-            do with_task_name |name| {\n+            with_task_name(|name| {\n                 assert!(name.unwrap() == \"ada lovelace\");\n-            }\n+            })\n         }\n     }\n }\n@@ -606,9 +606,9 @@ fn test_try_fail() {\n \n #[cfg(test)]\n fn get_sched_id() -> int {\n-    do Local::borrow |sched: &mut ::rt::sched::Scheduler| {\n+    Local::borrow(|sched: &mut ::rt::sched::Scheduler| {\n         sched.sched_id() as int\n-    }\n+    })\n }\n \n #[test]\n@@ -666,7 +666,7 @@ fn test_spawn_sched_blocking() {\n \n         // Testing that a task in one scheduler can block in foreign code\n         // without affecting other schedulers\n-        do 20u.times {\n+        20u.times(|| {\n             let (start_po, start_ch) = stream();\n             let (fin_po, fin_ch) = stream();\n \n@@ -713,7 +713,7 @@ fn test_spawn_sched_blocking() {\n             lock.unlock();\n             fin_po.recv();\n             lock.destroy();\n-        }\n+        })\n     }\n }\n \n@@ -740,21 +740,21 @@ fn test_avoid_copying_the_body_spawn() {\n \n #[test]\n fn test_avoid_copying_the_body_task_spawn() {\n-    do avoid_copying_the_body |f| {\n+    avoid_copying_the_body(|f| {\n         let builder = task();\n         do builder.spawn || {\n             f();\n         }\n-    }\n+    })\n }\n \n #[test]\n fn test_avoid_copying_the_body_try() {\n-    do avoid_copying_the_body |f| {\n+    avoid_copying_the_body(|f| {\n         do try || {\n             f()\n         };\n-    }\n+    })\n }\n \n #[test]"}, {"sha": "57aff6031bafd7940e4c92344cbd76eb28a918c4", "filename": "src/libstd/unstable/finally.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Funstable%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Funstable%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Ffinally.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,11 +15,11 @@ stack closures that emulates Java-style try/finally blocks.\n # Example\n \n  ```\n-do || {\n+(|| {\n     ...\n-}.finally {\n+}).finally(|| {\n     always_run_this();\n-}\n+})\n  ```\n */\n \n@@ -70,33 +70,33 @@ impl<'self> Drop for Finallyalizer<'self> {\n #[test]\n fn test_success() {\n     let mut i = 0;\n-    do (|| {\n+    (|| {\n         i = 10;\n-    }).finally {\n+    }).finally(|| {\n         assert!(!failing());\n         assert_eq!(i, 10);\n         i = 20;\n-    }\n+    });\n     assert_eq!(i, 20);\n }\n \n #[test]\n #[should_fail]\n fn test_fail() {\n     let mut i = 0;\n-    do (|| {\n+    (|| {\n         i = 10;\n         fail!();\n-    }).finally {\n+    }).finally(|| {\n         assert!(failing());\n         assert_eq!(i, 10);\n-    }\n+    })\n }\n \n #[test]\n fn test_retval() {\n     let closure: || -> int = || 10;\n-    let i = do closure.finally { };\n+    let i = closure.finally(|| { });\n     assert_eq!(i, 10);\n }\n "}, {"sha": "ddcf408189ed261845b9177b1dadc514eedd80d1", "filename": "src/libstd/util.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -178,40 +178,40 @@ mod bench {\n     fn trait_vtable_method_call(bh: &mut BenchHarness) {\n         let s = Struct { field: 10 };\n         let t = &s as &Trait;\n-        do bh.iter {\n+        bh.iter(|| {\n             t.method();\n-        }\n+        });\n     }\n \n     #[bench]\n     fn trait_static_method_call(bh: &mut BenchHarness) {\n         let s = Struct { field: 10 };\n-        do bh.iter {\n+        bh.iter(|| {\n             s.method();\n-        }\n+        });\n     }\n \n     // Overhead of various match forms\n \n     #[bench]\n     fn match_option_some(bh: &mut BenchHarness) {\n         let x = Some(10);\n-        do bh.iter {\n+        bh.iter(|| {\n             let _q = match x {\n                 Some(y) => y,\n                 None => 11\n             };\n-        }\n+        });\n     }\n \n     #[bench]\n     fn match_vec_pattern(bh: &mut BenchHarness) {\n         let x = [1,2,3,4,5,6];\n-        do bh.iter {\n+        bh.iter(|| {\n             let _q = match x {\n                 [1,2,3,.._] => 10,\n                 _ => 11\n             };\n-        }\n+        });\n     }\n }"}, {"sha": "9dc4f6ae3771c81d70a6b9c4edc8096512c5c2a0", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -3878,13 +3878,17 @@ mod bench {\n     #[bench]\n     fn concat(bh: &mut BenchHarness) {\n         let xss: &[~[uint]] = vec::from_fn(100, |i| range(0, i).collect());\n-        bh.iter(|| xss.concat_vec());\n+        bh.iter(|| {\n+            let _ = xss.concat_vec();\n+        });\n     }\n \n     #[bench]\n     fn connect(bh: &mut BenchHarness) {\n         let xss: &[~[uint]] = vec::from_fn(100, |i| range(0, i).collect());\n-        bh.iter(|| xss.connect_vec(&0));\n+        bh.iter(|| {\n+            let _ = xss.connect_vec(&0);\n+        });\n     }\n \n     #[bench]"}, {"sha": "afe9de7abb969f86d2cd9abaf47682ee3493e736", "filename": "src/test/auxiliary/xc_conditions_3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fauxiliary%2Fxc_conditions_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fauxiliary%2Fxc_conditions_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_conditions_3.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,7 +15,7 @@ condition! {\n }\n \n pub fn guard(k: extern fn() -> int, x: int) -> int {\n-    do oops::cond.trap(|i| i*x).inside {\n+    oops::cond.trap(|i| i*x).inside(|| {\n         k()\n-    }\n+    })\n }"}, {"sha": "c31a7bb244c72d5305a0f9f53a05a93bbfdba3ca", "filename": "src/test/compile-fail/arc-rw-cond-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,8 +14,6 @@ use extra::arc;\n fn main() {\n     let x = ~arc::RWArc::new(1);\n     let mut y = None;\n-    do x.write_cond |_one, cond| {\n-        y = Some(cond);\n-    }\n+    x.write_cond(|_one, cond| y = Some(cond));\n     y.unwrap().wait();\n }"}, {"sha": "2fe2095ca879efd22bad0529c5d3dfbf97c57267", "filename": "src/test/compile-fail/arc-rw-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -13,10 +13,10 @@ use extra::arc;\n fn main() {\n     let x = ~arc::RWArc::new(1);\n     let mut y = None;\n-    do x.write_downgrade |write_mode| {\n+    x.write_downgrade(|write_mode| {\n         y = Some(x.downgrade(write_mode));\n         //~^ ERROR cannot infer an appropriate lifetime\n-    }\n+    });\n     y.unwrap();\n     // Adding this line causes a method unification failure instead\n     // do (&option::unwrap(y)).read |state| { assert!(*state == 1); }"}, {"sha": "7c129ae0dcaad33e0eeeeea78e3bc610563bb0ef", "filename": "src/test/compile-fail/arc-rw-state-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -13,9 +13,7 @@ use extra::arc;\n fn main() {\n     let x = ~arc::RWArc::new(1);\n     let mut y = None; //~ ERROR lifetime of variable does not enclose its declaration\n-    do x.write |one| {\n-        y = Some(one);\n-    }\n+    x.write(|one| y = Some(one));\n     *y.unwrap() = 2;\n     //~^ ERROR lifetime of return value does not outlive the function call\n     //~^^ ERROR dereference of reference outside its lifetime"}, {"sha": "674cd5708889c4dfeeb54c81f6079b49f1189801", "filename": "src/test/compile-fail/arc-rw-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,10 +14,10 @@ use extra::arc;\n fn main() {\n     let x = ~arc::RWArc::new(1);\n     let mut y = None;\n-    do x.write_downgrade |write_mode| {\n-        do (&write_mode).write_cond |_one, cond| {\n+    x.write_downgrade(|write_mode| {\n+        (&write_mode).write_cond(|_one, cond| {\n             y = Some(cond);\n-        }\n-    }\n+        })\n+    });\n     y.unwrap().wait();\n }"}, {"sha": "d9247ab4fc170d16c31a592be1e35132bb7ed5c6", "filename": "src/test/compile-fail/arc-rw-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,9 +14,7 @@ use extra::arc;\n fn main() {\n     let x = ~arc::RWArc::new(1);\n     let mut y = None;\n-    do x.write_downgrade |write_mode| {\n-        y = Some(write_mode);\n-    }\n+    x.write_downgrade(|write_mode| y = Some(write_mode));\n     y.unwrap();\n     // Adding this line causes a method unification failure instead\n     // do (&option::unwrap(y)).write |state| { assert!(*state == 1); }"}, {"sha": "7637ebdc80dcc5422b5a2d7cded9b6c5f3ef6ff7", "filename": "src/test/compile-fail/block-arg-as-stmt-with-value.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-arg-as-stmt-with-value.rs?ref=8ceb374ab783c6417b60867e7f34bebe997936ac", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn compute1() -> f64 {\n-    let v = ~[0f64, 1.0, 2.0, 3.0];\n-\n-    do v.iter().fold(0.0) |x, y| { x + *y } - 10.0\n-    //~^ ERROR mismatched types: expected `()`\n-}\n-\n-fn main() {\n-    let x = compute1();\n-    info!(\"{:?}\", x);\n-    assert_eq!(x, -4f64);\n-}"}, {"sha": "b50a657eae79a93e2dd3d86c32de888055599f9c", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -32,9 +32,9 @@ fn b() {\n \n     let mut p = ~[1];\n \n-    do borrow(p) {\n+    borrow(p, || {\n         p[0] = 5; //~ ERROR cannot assign to\n-    }\n+    });\n }\n \n fn c() {"}, {"sha": "5c7e328969bb5cbcd1dea2afe2253fb5cde3b31d", "filename": "src/test/compile-fail/borrowck-autoref-3261.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-autoref-3261.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -18,13 +18,13 @@ impl X {\n \n fn main() {\n     let mut x = X(Right(main));\n-    do (&mut x).with |opt| {\n+    (&mut x).with(|opt| {\n         match opt {\n             &Right(ref f) => {\n                 x = X(Left((0,0))); //~ ERROR cannot assign to `x`\n                 (*f)()\n             },\n             _ => fail!()\n         }\n-    }\n+    })\n }"}, {"sha": "94ed47b01e1ee65f7bd06256e2dd083cfd0fdfc1", "filename": "src/test/compile-fail/borrowck-insert-during-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-insert-during-each.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -23,9 +23,9 @@ impl Foo {\n }\n \n fn bar(f: &mut Foo) {\n-  do f.foo |a| {\n+  f.foo(|a| {\n     f.n.insert(*a); //~ ERROR cannot borrow\n-  }\n+  })\n }\n \n fn main() {"}, {"sha": "c25f39a9d4329ec77f8c03f29627dfe6d5b4081a", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -39,9 +39,9 @@ fn block_overarching_alias_mut() {\n \n     let mut v = ~3;\n     let mut x = &mut v;\n-    do 3.times {\n+    3.times(|| {\n         borrow(v); //~ ERROR cannot borrow\n-    }\n+    });\n     *x = ~5;\n }\n "}, {"sha": "a54476abb26d691c55f5f533f0f878a9f786df6b", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,11 +14,11 @@ fn borrow(v: &int, f: |x: &int|) {\n \n fn box_imm() {\n     let mut v = ~3;\n-    do borrow(v) |w| {\n+    borrow(v, |w| {\n         v = ~4; //~ ERROR cannot assign to `v` because it is borrowed\n         assert_eq!(*v, 3);\n         assert_eq!(*w, 4);\n-    }\n+    })\n }\n \n fn main() {"}, {"sha": "c2ed3378bf97ced26ea100144227e4b589871350", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -30,9 +30,9 @@ fn a() {\n     p.impurem();\n \n     // But in this case we do not honor the loan:\n-    do p.blockm {\n+    p.blockm(|| {\n         p.x = 10; //~ ERROR cannot assign\n-    }\n+    })\n }\n \n fn b() {\n@@ -52,9 +52,9 @@ fn c() {\n     q.impurem();\n \n     // ...but we still detect errors statically when we can.\n-    do q.blockm {\n+    q.blockm(|| {\n         q.x = 10; //~ ERROR cannot assign\n-    }\n+    })\n }\n \n fn main() {"}, {"sha": "6527ddfa2ecf67999fe385f3dc60dd8098a48622", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -18,15 +18,14 @@ fn takes_imm_elt(_v: &int, f: ||) {\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n     let mut v = ~[1, 2, 3];\n-    do takes_imm_elt(&v[0]) {\n-    }\n+    takes_imm_elt(&v[0], || {})\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n     let mut v = ~[1, 2, 3];\n-    do takes_imm_elt(&v[0]) {\n+    takes_imm_elt(&v[0], || {\n         v[1] = 4; //~ ERROR cannot assign\n-    }\n+    })\n }\n \n fn main() {"}, {"sha": "4633ca662897f004c503927570b73a982eba8587", "filename": "src/test/compile-fail/break-outside-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-outside-loop.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -23,10 +23,10 @@ fn main() {\n     while cond() {\n         if cond() { break }\n         if cond() { continue }\n-        do foo {\n+        foo(|| {\n             if cond() { break } //~ ERROR: `break` inside of a closure\n             if cond() { continue } //~ ERROR: `continue` inside of a closure\n-        }\n+        })\n     }\n \n     let rs: Foo = Foo{t: pth};"}, {"sha": "1c6d65ba541671d1bcee8a969424f28dd15e7edd", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -12,9 +12,9 @@ fn bar(blk: ||:'static) {\n }\n \n fn foo(x: &()) {\n-    do bar {\n+    bar(|| {\n         let _ = x; //~ ERROR does not fulfill `'static`\n-    }\n+    })\n }\n \n fn main() {"}, {"sha": "309abe218f6f1bc55712130446824d7fcf6e7ef5", "filename": "src/test/compile-fail/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo2.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: |int| -> bool) -> bool { f(10i) }\n+fn f(f: proc(int) -> bool) -> bool { f(10i) }\n \n fn main() {\n     assert!(do f() |i| { i == 10i } == 10i);"}, {"sha": "798c1194af8723cf61ad7598868c7d452f5b4b05", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -35,9 +35,9 @@ fn main() {\n     let mut a = ~[];\n     a.push(3);\n     let mut a = ~[];\n-    do callback {\n+    callback(|| {\n         a.push(3);\n-    }\n+    });\n     let (mut a, b) = (1, 2);\n     a = 34;\n "}, {"sha": "f28322d3bf76321b4fae5dd14637043a77d65b7f", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -24,7 +24,7 @@ unsafe fn unsf() {}\n fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n-fn bad4() { unsafe { do callback {} } }  //~ ERROR: unnecessary `unsafe` block\n+fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n fn bad6() {\n     unsafe {                             // don't put the warning here\n@@ -50,9 +50,9 @@ fn good2() {\n     unsafe {\n         unsafe fn what() -> ~[~str] { fail!() }\n \n-        do callback {\n+        callback(|| {\n             what();\n-        }\n+        });\n     }\n }\n "}, {"sha": "690c778183c60b1cc68e6d2f61689a8b1d89c500", "filename": "src/test/compile-fail/moves-based-on-type-block-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-block-bad.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,12 +15,12 @@ fn f(s: &S, g: |&S|) {\n fn main() {\n     let s = S { x: ~Bar(~42) };\n     loop {\n-        do f(&s) |hellothere| {\n+        f(&s, |hellothere| {\n             match hellothere.x {\n                 ~Foo(_) => {}\n                 ~Bar(x) => println(x.to_str()), //~ ERROR cannot move out\n                 ~Baz => {}\n             }\n-        }\n+        })\n     }\n }"}, {"sha": "260d5a5dd4475c01aa7c4d2167763aa996177a06", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -21,7 +21,7 @@ struct R<'self> {\n \n fn innocent_looking_victim() {\n     let mut x = Some(~\"hello\");\n-    do conspirator |f, writer| {\n+    conspirator(|f, writer| {\n         if writer {\n             x = None;\n         } else {\n@@ -33,7 +33,7 @@ fn innocent_looking_victim() {\n                 None => fail!(\"oops\"),\n             }\n         }\n-    }\n+    })\n }\n \n fn conspirator(f: |&R, bool|) {"}, {"sha": "476b890efcd6b8618aef8963dfd8dcf544be7952", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -18,8 +18,8 @@ fn test_mutex_arc_nested() {\n     let arc2 = ~MutexArc::new(*arc);\n \n     do task::spawn || {\n-        do (*arc2).access |mutex| { //~ ERROR instantiating a type parameter with an incompatible type\n-        }\n+        (*arc2).access(|mutex| { //~ ERROR instantiating a type parameter with an incompatible type\n+        })\n     };\n }\n "}, {"sha": "98362baef2c34a6e4a1726bc0ccb86616c6fb616", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -23,8 +23,8 @@ fn foo(blk: once ||) {\n \n fn main() {\n     let x = arc::Arc::new(true);\n-    do foo {\n+    foo(|| {\n         assert!(*x.get());\n         util::ignore(x);\n-    }\n+    })\n }"}, {"sha": "60d1b9c1c34fd0ea6660fd6350ab055fc96e8497", "filename": "src/test/compile-fail/once-cant-move-out-of-non-once-on-stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -22,8 +22,8 @@ fn foo(blk: ||) {\n \n fn main() {\n     let x = arc::Arc::new(true);\n-    do foo {\n+    foo(|| {\n         assert!(*x.get());\n         util::ignore(x); //~ ERROR cannot move out of captured outer variable\n-    }\n+    })\n }"}, {"sha": "493b9c466bd3ba2b00f4d2fe33e93db80c0703d9", "filename": "src/test/compile-fail/regions-freevar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-freevar.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -12,7 +12,7 @@ fn wants_static_fn(_x: 'static ||) {}\n \n fn main() {\n     let i = 3;\n-    do wants_static_fn { //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n+    wants_static_fn(|| { //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n         info!(\"i={}\", i);\n-    }\n+    })\n }"}, {"sha": "bb7c487005faa961cc981ef6666f50beac05c01b", "filename": "src/test/compile-fail/regions-infer-call-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-call-3.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,7 +15,7 @@ fn with<T>(f: |x: &int| -> T) -> T {\n }\n \n fn manip<'a>(x: &'a int) -> int {\n-    let z = do with |y| { select(x, y) };\n+    let z = with(|y| { select(x, y) });\n     //~^ ERROR cannot infer an appropriate lifetime\n     *z\n }"}, {"sha": "4df08b28eb896e125db87b54608cead6cee92bef", "filename": "src/test/compile-fail/sync-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,8 +15,8 @@ use extra::sync;\n fn main() {\n     let m = ~sync::Mutex::new();\n     let mut cond = None;\n-    do m.lock_cond |c| {\n+    m.lock_cond(|c| {\n         cond = Some(c);\n-    }\n+    });\n     cond.unwrap().signal();\n }"}, {"sha": "d59eaf62abf84fa3196e06fe519c176454cd7f15", "filename": "src/test/compile-fail/sync-rwlock-cond-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,8 +14,8 @@ use extra::sync;\n fn main() {\n     let x = ~sync::RWLock::new();\n     let mut y = None;\n-    do x.write_cond |cond| {\n+    x.write_cond(|cond| {\n         y = Some(cond);\n-    }\n+    });\n     y.unwrap().wait();\n }"}, {"sha": "e71dfc588161fbcf7404c8d3062f85f7c50ba112", "filename": "src/test/compile-fail/sync-rwlock-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,9 +14,9 @@ use extra::sync;\n fn main() {\n     let x = ~sync::RWLock::new();\n     let mut y = None;\n-    do x.write_downgrade |write_mode| {\n+    x.write_downgrade(|write_mode| {\n         y = Some(x.downgrade(write_mode));\n-    }\n+    })\n     // Adding this line causes a method unification failure instead\n     // do (&option::unwrap(y)).read { }\n }"}, {"sha": "cbe5181d46f24762d61588083b48e12d90887db0", "filename": "src/test/compile-fail/sync-rwlock-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,10 +14,10 @@ use extra::sync;\n fn main() {\n     let x = ~sync::RWLock::new();\n     let mut y = None;\n-    do x.write_downgrade |write_mode| {\n-        do (&write_mode).write_cond |cond| {\n+    x.write_downgrade(|write_mode| {\n+        (&write_mode).write_cond(|cond| {\n             y = Some(cond);\n-        }\n-    }\n+        })\n+    });\n     y.unwrap().wait();\n }"}, {"sha": "af0149182aeba1b8b5a81fe8fe973ce380773a3c", "filename": "src/test/compile-fail/sync-rwlock-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,9 +14,9 @@ use extra::sync;\n fn main() {\n     let x = ~sync::RWLock::new();\n     let mut y = None;\n-    do x.write_downgrade |write_mode| {\n+    x.write_downgrade(|write_mode| {\n         y = Some(write_mode);\n-    }\n+    });\n     // Adding this line causes a method unification failure instead\n     // do (&option::unwrap(y)).write { }\n }"}, {"sha": "a476a9727b3609414fe7e8b063075151c9b424eb", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     // huge).\n \n     let x = ~[1u,2u,3u];\n-    do x.as_imm_buf |p, _len| {\n+    x.as_imm_buf(|p, _len| {\n         let base = p as uint;\n         let idx = base / mem::size_of::<uint>();\n         error!(\"ov1 base = 0x{:x}\", base);\n@@ -32,5 +32,5 @@ fn main() {\n \n         // This should fail.\n         error!(\"ov1 0x{:x}\",  x[idx]);\n-    }\n+    })\n }"}, {"sha": "c5142897b1d9ca8ad55a90e333694140d704f431", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -30,14 +30,17 @@ impl<A> iterable<A> for ~[A] {\n \n fn length<A, T: iterable<A>>(x: T) -> uint {\n     let mut len = 0;\n-    do x.iterate() |_y| { len += 1; true };\n+    x.iterate(|_y| {\n+        len += 1;\n+        true\n+    });\n     return len;\n }\n \n pub fn main() {\n     let x = ~[0,1,2,3];\n     // Call a method\n-    do x.iterate() |y| { assert!(x[*y] == *y); true };\n+    x.iterate(|y| { assert!(x[*y] == *y); true });\n     // Call a parameterized function\n     assert_eq!(length(x.clone()), x.len());\n     // Call a parameterized function, with type arguments that require\n@@ -47,7 +50,7 @@ pub fn main() {\n     // Now try it with a type that *needs* to be borrowed\n     let z = [0,1,2,3];\n     // Call a method\n-    do z.iterate() |y| { assert!(z[*y] == *y); true };\n+    z.iterate(|y| { assert!(z[*y] == *y); true });\n     // Call a parameterized function\n     assert_eq!(length::<int, &[int]>(z), z.len());\n }"}, {"sha": "dca0efd94fab53931a406bcfc468c7a119346eda", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -20,5 +20,5 @@ fn bitv_test() {\n }\n \n pub fn main() {\n-    do 10000.times || {bitv_test()};\n+    10000.times(|| bitv_test());\n }"}, {"sha": "f2149e23210ccb256cbf5af0a46eddbbbf83ff1c", "filename": "src/test/run-pass/block-arg-can-be-followed-by-binop.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() {\n-    let v = ~[-1.0, 0.0, 1.0, 2.0, 3.0];\n+fn add(x: proc(f64) -> f64) -> f64 {\n+    x(10.0)\n+}\n \n+pub fn main() {\n     // Trailing expressions don't require parentheses:\n-    let y = do v.iter().fold(0.0) |x, y| { x + *y } + 10.0;\n+    let y = do add |x| { x + 10.0 } + 10.0;\n \n-    assert_eq!(y, 15.0);\n+    assert_eq!(y, 30.0);\n }"}, {"sha": "2cdf0a1ffe1f1e0dcc05ff7861d8552d1a73af2f", "filename": "src/test/run-pass/block-arg-can-be-followed-by-block-arg.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn f(_: proc()) -> proc(proc() -> uint) {\n+    proc(_: proc() -> uint) {}\n+}\n+\n pub fn main() {\n-    fn f(i: || -> uint) -> uint { i() }\n-    let v = ~[-1.0, 0.0, 1.0, 2.0, 3.0];\n-    let z = do do v.iter().fold(f) |x, _y| { x } { 22u };\n-    assert_eq!(z, 22u);\n+    do do f {} { 20 };\n }"}, {"sha": "544367bdfa9d5c9b9333750f63fe10ea45c8709e", "filename": "src/test/run-pass/block-arg-can-be-followed-by-call.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn f(_: proc()) -> proc(uint) -> uint {\n+    proc(x: uint) { x }\n+}\n+\n pub fn main() {\n-    fn f(i: uint) -> uint { i }\n-    let v = ~[-1.0, 0.0, 1.0, 2.0, 3.0];\n-    let z = do v.iter().fold(f) |x, _y| { x } (22u);\n+    let z = do f {} (22u);\n     assert_eq!(z, 22u);\n }"}, {"sha": "083217132de1125e70b21a2d2ab2baeac2b6ecb5", "filename": "src/test/run-pass/block-arg-in-parentheses.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,28 +8,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn w_semi(v: ~[int]) -> int {\n+fn f(_: proc(int, int) -> int) -> int {\n+    10\n+}\n+\n+fn w_semi() {\n     // the semicolon causes compiler not to\n     // complain about the ignored return value:\n-    do v.iter().fold(0) |x,y| { x+*y };\n-    -10\n+    do f |x, y| { x+y };\n }\n \n-fn w_paren1(v: ~[int]) -> int {\n-    (do v.iter().fold(0) |x,y| { x+*y }) - 10\n+fn w_paren1() -> int {\n+    (do f |x, y| { x+y }) - 10\n }\n \n-fn w_paren2(v: ~[int]) -> int {\n-    (do v.iter().fold(0) |x,y| { x+*y} - 10)\n+fn w_paren2() -> int {\n+    (do f |x, y| { x+y } - 10)\n }\n \n-fn w_ret(v: ~[int]) -> int {\n-    return do v.iter().fold(0) |x,y| { x+*y } - 10;\n+fn w_ret() -> int {\n+    return do f |x, y| { x+y } - 10;\n }\n \n pub fn main() {\n-    assert_eq!(w_semi(~[0, 1, 2, 3]), -10);\n-    assert_eq!(w_paren1(~[0, 1, 2, 3]), -4);\n-    assert_eq!(w_paren2(~[0, 1, 2, 3]), -4);\n-    assert_eq!(w_ret(~[0, 1, 2, 3]), -4);\n+    w_semi();\n+    w_paren1();\n+    w_paren2();\n+    w_ret();\n }"}, {"sha": "87a6cbd6fc2f33aa4de1b742b920e4ebf0e6e51d", "filename": "src/test/run-pass/block-arg-used-as-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn call_any(f: || -> uint) -> uint {\n+fn call_any(f: proc() -> uint) -> uint {\n     return f();\n }\n "}, {"sha": "afe7747457a8cc320a5ef7ebc8fe2c88b4e19883", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,6 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+fn inty(fun: proc(int) -> int) -> int {\n+    fun(100)\n+}\n+\n+fn booly(fun: proc(bool) -> bool) -> bool {\n+    fun(true)\n+}\n+\n // Check usage and precedence of block arguments in expressions:\n pub fn main() {\n     let v = ~[-1.0f64, 0.0, 1.0, 2.0, 3.0];\n@@ -18,28 +26,27 @@ pub fn main() {\n     }\n \n     // Usable at all:\n-    let mut any_negative = do v.iter().any |e| { e.is_negative() };\n-    assert!(any_negative);\n+    do inty |x| { x };\n \n     // Higher precedence than assignments:\n-    any_negative = do v.iter().any |e| { e.is_negative() };\n-    assert!(any_negative);\n+    let result = do inty |e| { e };\n+    assert_eq!(result, 100);\n \n     // Higher precedence than unary operations:\n-    let abs_v = do v.iter().map |e| { e.abs() }.collect::<~[f64]>();\n-    assert!(do abs_v.iter().all |e| { e.is_positive() });\n-    assert!(!do abs_v.iter().any |e| { e.is_negative() });\n+    let stringy = do inty |e| { e }.to_str();\n+    assert!(do booly |_| { true });\n+    assert!(!do booly |_| { false });\n \n     // Usable in funny statement-like forms:\n-    if !do v.iter().any |e| { e.is_positive() } {\n+    if !do booly |_| { true } {\n         assert!(false);\n     }\n-    match do v.iter().all |e| { e.is_negative() } {\n+    match do booly |_| { false } {\n         true => { fail!(\"incorrect answer.\"); }\n         false => { }\n     }\n     match 3 {\n-      _ if do v.iter().any |e| { e.is_negative() } => {\n+      _ if do booly |_| { true } => {\n       }\n       _ => {\n         fail!(\"wrong answer.\");\n@@ -48,15 +55,19 @@ pub fn main() {\n \n \n     // Lower precedence than binary operations:\n-    let w = do v.iter().fold(0.0) |x, y| { x + *y } + 10.0;\n-    let y = do v.iter().fold(0.0) |x, y| { x + *y } + 10.0;\n-    let z = 10.0 + do v.iter().fold(0.0) |x, y| { x + *y };\n+    let w = do inty |_| { 10 } + 10;\n+    let y = do inty |_| { 10 } + 10;\n+    let z = 10 + do inty |_| { 10 };\n     assert_eq!(w, y);\n     assert_eq!(y, z);\n \n     // In the tail of a block\n-    let w =\n-        if true { do abs_v.iter().any |e| { e.is_positive() } }\n-      else { false };\n+    let w = if true {\n+        do booly |_| {\n+            true\n+        }\n+    } else {\n+        false\n+    };\n     assert!(w);\n }"}, {"sha": "f108d6cad6fbe9f0d08ff16c0870a213d6554bd3", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -18,11 +18,11 @@ fn borrow(x: &int, f: |x: &int|) {\n }\n \n fn test1(x: @~int) {\n-    do borrow(&*(*x).clone()) |p| {\n+    borrow(&*(*x).clone(), |p| {\n         let x_a = ptr::to_unsafe_ptr(&**x);\n         assert!((x_a as uint) != borrow::to_uint(p));\n         assert_eq!(unsafe{*x_a}, *p);\n-    }\n+    })\n }\n \n pub fn main() {"}, {"sha": "542a8251f712c6a8b0fa2f0d91d2c04802b93623", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -30,10 +30,10 @@ pub fn main() {\n     add_int(ints, 22);\n     add_int(ints, 44);\n \n-    do iter_ints(ints) |i| {\n+    iter_ints(ints, |i| {\n         error!(\"int = {}\", *i);\n         true\n-    };\n+    });\n \n     error!(\"ints={:?}\", ints);\n }"}, {"sha": "506d777013cd25bb57dee4d95bd706b689a886c2", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -23,7 +23,7 @@ struct F { f: ~int }\n \n pub fn main() {\n     let mut x = @F {f: ~3};\n-    do borrow(x.f) |b_x| {\n+    borrow(x.f, |b_x| {\n         assert_eq!(*b_x, 3);\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @F {f: ~4};\n@@ -32,5 +32,5 @@ pub fn main() {\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));\n-    }\n+    })\n }"}, {"sha": "d7f7a8e47a2309619cb5176d3336da19c2372150", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -23,7 +23,7 @@ struct F { f: ~int }\n \n pub fn main() {\n     let mut x = ~@F{f: ~3};\n-    do borrow(x.f) |b_x| {\n+    borrow(x.f, |b_x| {\n         assert_eq!(*b_x, 3);\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         *x = @F{f: ~4};\n@@ -32,5 +32,5 @@ pub fn main() {\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));\n-    }\n+    })\n }"}, {"sha": "feea06cd69a189733608aab1980878b683c73876", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -21,7 +21,7 @@ fn borrow(x: &int, f: |x: &int|) {\n \n pub fn main() {\n     let mut x = @3;\n-    do borrow(x) |b_x| {\n+    borrow(x, |b_x| {\n         assert_eq!(*b_x, 3);\n         assert_eq!(ptr::to_unsafe_ptr(&(*x)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @22;\n@@ -30,5 +30,5 @@ pub fn main() {\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x)) != ptr::to_unsafe_ptr(&(*b_x)));\n-    }\n+    })\n }"}, {"sha": "d131a529f1a360124a8c55f547c6f55de00328f9", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -23,7 +23,7 @@ struct F { f: ~int }\n \n pub fn main() {\n     let mut x = @F {f: ~3};\n-    do borrow((*x).f) |b_x| {\n+    borrow((*x).f, |b_x| {\n         assert_eq!(*b_x, 3);\n         assert_eq!(ptr::to_unsafe_ptr(&(*x.f)), ptr::to_unsafe_ptr(&(*b_x)));\n         x = @F {f: ~4};\n@@ -32,5 +32,5 @@ pub fn main() {\n                ptr::to_unsafe_ptr(&(*b_x)) as uint);\n         assert_eq!(*b_x, 3);\n         assert!(ptr::to_unsafe_ptr(&(*x.f)) != ptr::to_unsafe_ptr(&(*b_x)));\n-    }\n+    })\n }"}, {"sha": "fd24b7cfe953a606e2502a5363559573cc366499", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -18,11 +18,11 @@ pub fn main() {\n     //let bt0 = sys::frame_address();\n     //info!(\"%?\", bt0);\n \n-    do 3u.to(10u) |i| {\n+    3u.to(10u, |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);\n         //assert!(bt0 == bt1);\n-    }\n+    })\n }"}, {"sha": "938956a18b61f95ba210932a734c0424f0ed52df", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -16,8 +16,8 @@ extern mod cci_iter_lib;\n pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //info!(\"%?\", bt0);\n-    do cci_iter_lib::iter([1, 2, 3]) |i| {\n+    cci_iter_lib::iter([1, 2, 3], |i| {\n         println!(\"{}\", *i);\n         //assert!(bt0 == sys::rusti::frame_address(2u32));\n-    }\n+    })\n }"}, {"sha": "e2532667560ef1b9b02a7a7a25641df9ef6cac2e", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -22,12 +22,12 @@ pub fn main() {\n     // actually working.\n     //let bt0 = sys::frame_address();\n     //info!(\"%?\", bt0);\n-    do iter(~[1u, 2u, 3u]) |i| {\n+    iter(~[1u, 2u, 3u], |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();\n         //info!(\"%?\", bt1);\n \n         //assert!(bt0 != bt1);\n-    }\n+    })\n }"}, {"sha": "07d9fb95dcb55ddcf0fb929958d01776d483fe26", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -40,9 +40,9 @@ fn test_destroy_twice() {\n \n     let mut p = run::Process::new(PROG, [], run::ProcessOptions::new());\n     p.destroy(); // this shouldnt crash...\n-    do io::io_error::cond.trap(|_| {}).inside {\n+    io::io_error::cond.trap(|_| {}).inside(|| {\n         p.destroy(); // ...and nor should this (and nor should the destructor)\n-    }\n+    })\n }\n \n fn test_destroy_actually_kills(force: bool) {"}, {"sha": "5f3cebed66777011786d2186e46bfd00ee978d32", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -71,9 +71,9 @@ pub fn main() {\n     roundtrip::<C>();\n     roundtrip::<D>();\n \n-    do 20.times {\n+    20.times(|| {\n         roundtrip::<E>();\n         roundtrip::<F>();\n         roundtrip::<G<int>>();\n-    }\n+    })\n }"}, {"sha": "9a28ed7008827d0509e66081013509002eac5b15", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -34,10 +34,10 @@ enum D {\n \n fn main() {\n     // check there's no segfaults\n-    do 20.times {\n+    20.times(|| {\n         rand::random::<A>();\n         rand::random::<B>();\n         rand::random::<C>();\n         rand::random::<D>();\n-    }\n+    })\n }"}, {"sha": "56ba2ffddbb4bd9959c53101b1a7bad2399bd0c4", "filename": "src/test/run-pass/do-empty-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -11,7 +11,7 @@\n // no-reformat\n // Testing various forms of `do` with empty arg lists\n \n-fn f(_f: || -> bool) -> bool {\n+fn f(_f: proc() -> bool) -> bool {\n     true\n }\n "}, {"sha": "0df5c82ab077f33aa81f3bff4466cfdd6a7bde45", "filename": "src/test/run-pass/do-no-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-no-args.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -10,9 +10,9 @@\n \n // Testing that we can drop the || in do exprs\n \n-fn f(_f: || -> bool) -> bool { true }\n+fn f(_f: proc() -> bool) -> bool { true }\n \n-fn d(_f: ||) { }\n+fn d(_f: proc()) { }\n \n pub fn main() {\n     do d { }"}, {"sha": "85bb84c6061ac4477b8d78c968952f8b13cc9fb2", "filename": "src/test/run-pass/do-pure.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-pure.rs?ref=8ceb374ab783c6417b60867e7f34bebe997936ac", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(_f: ||) {\n-}\n-\n-fn g() {\n-    // `f || { }` is considered pure, so `do f { }` should be too\n-    do f { }\n-}\n-\n-pub fn main() {\n-}"}, {"sha": "fddf3b15c78da4ec5bf8af7a1bc904b718a659f0", "filename": "src/test/run-pass/do-stack.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-stack.rs?ref=8ceb374ab783c6417b60867e7f34bebe997936ac", "patch": "@@ -1,15 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn f(f: |int|) { f(10) }\n-\n-pub fn main() {\n-    do f() |i| { assert!(i == 10) }\n-}"}, {"sha": "bdbad74b32095ce721a3ecbb6b516a00c175b56d", "filename": "src/test/run-pass/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: |int|) { f(10) }\n+fn f(f: proc(int)) { f(10) }\n \n pub fn main() {\n     do f() |i| { assert!(i == 10) }"}, {"sha": "f509f7b454d35afeba0d2bb30dd63fc808af84e3", "filename": "src/test/run-pass/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: |int| -> int) -> int { f(10) }\n+fn f(f: proc(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert_eq!(do f() |i| { i }, 10);"}, {"sha": "cdba14f1deda4a182c0d306a0826b60a10bfff99", "filename": "src/test/run-pass/do3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: |int| -> int) -> int { f(10) }\n+fn f(f: proc(int) -> int) -> int { f(10) }\n \n pub fn main() {\n     assert_eq!(do f |i| { i }, 10);"}, {"sha": "6ef196ccd41fc2bd0142ffb5e9cddbf00a3eb8ed", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -40,9 +40,9 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    do 100u.times {\n+    100u.times(|| {\n         do task::spawn {\n             assert_eq!(count(5u), 16u);\n         };\n-    }\n+    })\n }"}, {"sha": "1d2f52d8c2eb606d9eb66fef686f469e5e6090d7", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -37,11 +37,11 @@ fn count(n: uint) -> uint {\n }\n \n pub fn main() {\n-    do 10u.times {\n+    10u.times(|| {\n         do task::spawn {\n             let result = count(5u);\n             info!(\"result = {}\", result);\n             assert_eq!(result, 16u);\n         };\n-    }\n+    })\n }"}, {"sha": "9646c6b6eb79d0418a8e4d8ee3f95c22d7bdab3e", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -16,9 +16,9 @@ fn two(it: |int|) { it(0); it(1); }\n pub fn main() {\n     let mut a: ~[int] = ~[-1, -1, -1, -1];\n     let mut p: int = 0;\n-    do two |i| {\n-        do two |j| { a[p] = 10 * i + j; p += 1; }\n-    }\n+    two(|i| {\n+        two(|j| { a[p] = 10 * i + j; p += 1; })\n+    });\n     assert_eq!(a[0], 0);\n     assert_eq!(a[1], 1);\n     assert_eq!(a[2], 10);"}, {"sha": "7011088fa5d44f69582e55040a02cef3eb7b7174", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -19,13 +19,13 @@ fn pairs(it: |(int, int)|) {\n pub fn main() {\n     let mut i: int = 10;\n     let mut j: int = 0;\n-    do pairs() |p| {\n+    pairs(|p| {\n         let (_0, _1) = p;\n         info!(\"{}\", _0);\n         info!(\"{}\", _1);\n         assert_eq!(_0 + 10, i);\n         i += 1;\n         j = _1;\n-    };\n+    });\n     assert_eq!(j, 45);\n }"}, {"sha": "81e9ac1b80876b97c39768d84d9d5708c0eb1958", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -13,7 +13,7 @@\n \n pub fn main() {\n     let mut sum: int = 0;\n-    do first_ten |i| { info!(\"main\"); info!(\"{}\", i); sum = sum + i; }\n+    first_ten(|i| { info!(\"main\"); info!(\"{}\", i); sum = sum + i; });\n     info!(\"sum\");\n     info!(\"{}\", sum);\n     assert_eq!(sum, 45);"}, {"sha": "aeba5c0ec97e139143c37aebed9d1d95e301fcd0", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -22,11 +22,11 @@ mod libc {\n \n fn strlen(str: ~str) -> uint {\n     // C string is terminated with a zero\n-    do str.with_c_str |buf| {\n+    str.with_c_str(|buf| {\n         unsafe {\n             libc::my_strlen(buf) as uint\n         }\n-    }\n+    })\n }\n \n pub fn main() {"}, {"sha": "ce5c932f8da2e82b3a42941f5cf2b42122e4c51c", "filename": "src/test/run-pass/issue-1458.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Frun-pass%2Fissue-1458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ceb374ab783c6417b60867e7f34bebe997936ac/src%2Ftest%2Frun-pass%2Fissue-1458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1458.rs?ref=8ceb374ab783c6417b60867e7f34bebe997936ac", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn plus_one(f: || -> int) -> int {\n-  return f() + 1;\n-}\n-\n-fn ret_plus_one() -> extern fn(|| -> int) -> int {\n-  return plus_one;\n-}\n-\n-pub fn main() {\n-    let z = do (ret_plus_one()) || { 2 };\n-    assert_eq!(z, 3);\n-}"}, {"sha": "d8c12d8511c32d65ec20a56eda6ac2815709463e", "filename": "src/test/run-pass/issue-2487-a.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2487-a.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -19,9 +19,7 @@ impl Drop for socket {\n \n impl socket {\n     pub fn set_identity(&self)  {\n-        do closure {\n-            setsockopt_bytes(self.sock.clone())\n-        }\n+        closure(|| setsockopt_bytes(self.sock.clone()))\n     }\n }\n "}, {"sha": "f3c74cd929596d9bdd0e0faeb3c50bb54425ad36", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -59,9 +59,9 @@ fn add_interfaces(store: int, managed_ip: ~str, device: HashMap<~str, extra::jso\n     {\n         &extra::json::List(ref interfaces) =>\n         {\n-          do interfaces.map |interface| {\n+          interfaces.map(|interface| {\n                 add_interface(store, managed_ip.clone(), (*interface).clone())\n-          }\n+          })\n         }\n         _ =>\n         {"}, {"sha": "3d8300010d9d5e586f73f774bf6a8f9b480c10f0", "filename": "src/test/run-pass/issue-3211.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-3211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3211.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -1,8 +1,6 @@\n pub fn main() {\n     let mut x = 0;\n-    do 4096.times {\n-        x += 1;\n-    }\n+    4096.times(|| x += 1);\n     assert_eq!(x, 4096);\n     println!(\"x = {}\", x);\n }"}, {"sha": "4bb89e2cf1711b726ecf5a018d8b27478b2fa5b0", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -64,11 +64,9 @@ impl Drop for AsciiArt {\n fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt {\n     // Use an anonymous function to build a vector of vectors containing\n     // blank characters for each position in our canvas.\n-    let lines = do vec::build(Some(height)) |push| {\n-            do height.times {\n-                push(vec::from_elem(width, '.'));\n-            }\n-        };\n+    let lines = vec::build(Some(height), |push| {\n+        height.times(|| push(vec::from_elem(width, '.')))\n+    });\n \n     // Rust code often returns values by omitting the trailing semi-colon\n     // instead of using an explicit return statement.\n@@ -101,7 +99,7 @@ impl AsciiArt {\n impl ToStr for AsciiArt {\n     fn to_str(&self) -> ~str {\n         // Convert each line into a string.\n-        let lines = do self.lines.map |line| {str::from_chars(*line)};\n+        let lines = self.lines.map(|line| str::from_chars(*line));\n \n         // Concatenate the lines together using a new-line.\n         lines.connect(\"\\n\")"}, {"sha": "a6041c79eac1bc3ab92b67e1ead25bb33c26146d", "filename": "src/test/run-pass/issue-4401.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-4401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4401.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -1,8 +1,6 @@\n pub fn main() {\n     let mut count = 0;\n-    do 999_999.times() {\n-        count += 1;\n-    }\n+    999_999.times(|| count += 1);\n     assert_eq!(count, 999_999);\n     println!(\"{}\", count);\n }"}, {"sha": "4a0236b2da8d0dea252e45f18c63df0f40f3e235", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -14,9 +14,7 @@ trait Fooable {\n \n impl Fooable for uint {\n     fn yes(self) {\n-        do self.times {\n-            println(\"yes\");\n-        }\n+        self.times(|| println(\"yes\"));\n     }\n }\n "}, {"sha": "989a8e5f9c2c493ff00b54065b2cd6edeebb6520", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,6 +15,6 @@ fn swap(f: |~[int]| -> ~[int]) -> ~[int] {\n \n pub fn main() {\n     let v = swap(|mut x| { x.push(4); x });\n-    let w = do swap |mut x| { x.push(4); x };\n+    let w = swap(|mut x| { x.push(4); x });\n     assert_eq!(v, w);\n }"}, {"sha": "de4da6e3b06d7aca0a707cf3447f3508ca2374fd", "filename": "src/test/run-pass/match-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-ref-binding-in-guard-3256.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n         let x = Some(unstable::sync::Exclusive::new(true));\n         match x {\n             Some(ref z) if z.with(|b| *b) => {\n-                do z.with |b| { assert!(*b); }\n+                z.with(|b| assert!(*b));\n             },\n             _ => fail!()\n         }"}, {"sha": "043136fdad9956a3028a890b8672a1dd048ef60b", "filename": "src/test/run-pass/newlambdas.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fnewlambdas.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -17,6 +17,6 @@ fn g(_g: ||) { }\n pub fn main() {\n     assert_eq!(f(10, |a| a), 10);\n     g(||());\n-    assert_eq!(do f(10) |a| { a }, 10);\n-    do g() { }\n+    assert_eq!(f(10, |a| a), 10);\n+    g(||{});\n }"}, {"sha": "9995edf5998e41e2304b6186dfd93316d639854e", "filename": "src/test/run-pass/once-move-out-on-stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fonce-move-out-on-stack.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -23,8 +23,8 @@ fn foo(blk: once ||) {\n \n fn main() {\n     let x = arc::Arc::new(true);\n-    do foo {\n+    foo(|| {\n         assert!(*x.get());\n         util::ignore(x);\n-    }\n+    })\n }"}, {"sha": "6e5aa1aaf8b69fdcb204f30142920fb4b1f7d439", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -37,16 +37,12 @@ impl<V:TyVisitor + movable_ptr> ptr_visit_adaptor<V> {\n \n     #[inline(always)]\n     pub fn bump(&mut self, sz: uint) {\n-      do self.inner.move_ptr() |p| {\n-            ((p as uint) + sz) as *c_void\n-      };\n+      self.inner.move_ptr(|p| ((p as uint) + sz) as *c_void)\n     }\n \n     #[inline(always)]\n     pub fn align(&mut self, a: uint) {\n-      do self.inner.move_ptr() |p| {\n-            align(p as uint, a) as *c_void\n-      };\n+      self.inner.move_ptr(|p| align(p as uint, a) as *c_void)\n     }\n \n     #[inline(always)]\n@@ -501,15 +497,11 @@ impl TyVisitor for my_visitor {\n     fn visit_bot(&mut self) -> bool { true }\n     fn visit_nil(&mut self) -> bool { true }\n     fn visit_bool(&mut self) -> bool {\n-        do self.get::<bool>() |b| {\n-            self.vals.push(b.to_str());\n-        };\n+        self.get::<bool>(|b| self.vals.push(b.to_str()));\n         true\n     }\n     fn visit_int(&mut self) -> bool {\n-        do self.get::<int>() |i| {\n-            self.vals.push(i.to_str());\n-        };\n+        self.get::<int>(|i| self.vals.push(i.to_str()));\n         true\n     }\n     fn visit_i8(&mut self) -> bool { true }"}, {"sha": "3350c3b65d09071f8bdc631f3ab140cb29ff80e6", "filename": "src/test/run-pass/regions-infer-call-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-call-2.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,7 +15,7 @@ fn with<T>(f: |x: &int| -> T) -> T {\n }\n \n fn has_one<'a>(x: &'a int) -> int {\n-    do with |y| { takes_two(x, y) }\n+    with(|y| takes_two(x, y))\n }\n \n pub fn main() {"}, {"sha": "fa4321451db91850be06938a39843b3b5f16f512", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -31,20 +31,20 @@ fn rename_directory() {\n         let test_file = &old_path.join(\"temp.txt\");\n \n         /* Write the temp input file */\n-        let ostream = do test_file.with_c_str |fromp| {\n-            do \"w+b\".with_c_str |modebuf| {\n+        let ostream = test_file.with_c_str(|fromp| {\n+            \"w+b\".with_c_str(|modebuf| {\n                 libc::fopen(fromp, modebuf)\n-            }\n-        };\n+            })\n+        });\n         assert!((ostream as uint != 0u));\n         let s = ~\"hello\";\n-        do \"hello\".with_c_str |buf| {\n+        \"hello\".with_c_str(|buf| {\n             let write_len = libc::fwrite(buf as *libc::c_void,\n                                          1u as libc::size_t,\n                                          (s.len() + 1u) as libc::size_t,\n                                          ostream);\n             assert_eq!(write_len, (s.len() + 1) as libc::size_t)\n-        }\n+        });\n         assert_eq!(libc::fclose(ostream), (0u as libc::c_int));\n \n         let new_path = tmpdir.join_many([\"quux\", \"blat\"]);"}, {"sha": "1b7c3a1f52ecc9587408592b7edcb6d9944e361b", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -93,9 +93,9 @@ fn check_legs(arc: arc::Arc<~[~Pet:Freeze+Send]>) {\n }\n fn check_names(arc: arc::Arc<~[~Pet:Freeze+Send]>) {\n     for pet in arc.get().iter() {\n-        do pet.name |name| {\n+        pet.name(|name| {\n             assert!(name[0] == 'a' as u8 && name[1] == 'l' as u8);\n-        }\n+        })\n     }\n }\n fn check_pedigree(arc: arc::Arc<~[~Pet:Freeze+Send]>) {"}, {"sha": "ff7ffb6dc6f00bc6e8214feb717e791b88523b59", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -19,9 +19,9 @@ fn range_(lo: uint, hi: uint, it: |uint|) {\n }\n \n fn create_index<T>(_index: ~[S<T>], _hash_fn: extern fn(T) -> uint) {\n-    do range_(0u, 256u) |_i| {\n+    range_(0u, 256u, |_i| {\n         let _bucket: ~[T] = ~[];\n-    }\n+    })\n }\n \n pub fn main() { }"}, {"sha": "9cb2f22d38e940a0da368fac248e73dfeccabe97", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -26,33 +26,33 @@ pub fn main() {\n \n     unsafe {\n         // Call with just the named parameter\n-        do \"Hello World\\n\".with_c_str |c| {\n+        \"Hello World\\n\".with_c_str(|c| {\n             check(\"Hello World\\n\", |s| sprintf(s, c));\n-        }\n+        });\n \n         // Call with variable number of arguments\n-        do \"%d %f %c %s\\n\".with_c_str |c| {\n-            do check(\"42 42.500000 a %d %f %c %s\\n\\n\") |s| {\n+        \"%d %f %c %s\\n\".with_c_str(|c| {\n+            check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n                 sprintf(s, c, 42i, 42.5f64, 'a' as c_int, c);\n-            }\n-        }\n+            })\n+        });\n \n         // Make a function pointer\n         let x: extern \"C\" unsafe fn(*mut c_char, *c_char, ...) -> c_int = sprintf;\n \n         // A function that takes a function pointer\n         unsafe fn call(p: extern \"C\" unsafe fn(*mut c_char, *c_char, ...) -> c_int) {\n             // Call with just the named parameter via fn pointer\n-            do \"Hello World\\n\".with_c_str |c| {\n+            \"Hello World\\n\".with_c_str(|c| {\n                 check(\"Hello World\\n\", |s| p(s, c));\n-            }\n+            });\n \n             // Call with variable number of arguments\n-            do \"%d %f %c %s\\n\".with_c_str |c| {\n-                do check(\"42 42.500000 a %d %f %c %s\\n\\n\") |s| {\n+            \"%d %f %c %s\\n\".with_c_str(|c| {\n+                check(\"42 42.500000 a %d %f %c %s\\n\\n\", |s| {\n                     p(s, c, 42i, 42.5f64, 'a' as c_int, c);\n-                }\n-            }\n+                })\n+            });\n         }\n \n         // Pass sprintf directly"}, {"sha": "8142cafd89e9195b177d3beaee93fcd7b9f484c4", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n         let x = Some(unstable::sync::Exclusive::new(true));\n         match x {\n             Some(ref z) if z.with(|b| *b) => {\n-                do z.with |b| { assert!(*b); }\n+                z.with(|b| assert!(*b));\n             },\n             _ => fail!()\n         }"}, {"sha": "99df4b771c5ee5a24c9d9bf515648cd5f4eb2491", "filename": "src/test/run-pass/xc_conditions_client.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -33,8 +33,8 @@ use xc_conditions::trouble;\n // there's no cross-crate-ness to test in that case.\n \n pub fn main() {\n-    do oops::cond.trap(|_i| 12345).inside {\n+    oops::cond.trap(|_i| 12345).inside(|| {\n         let x = trouble();\n         assert_eq!(x,12345);\n-    }\n+    })\n }"}, {"sha": "b3164f1f0aa5daba0333bd0ee11832616cc3fd74", "filename": "src/test/run-pass/xc_conditions_client_2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxc_conditions_client_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxc_conditions_client_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client_2.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -15,7 +15,5 @@ extern mod xc_conditions_2;\n use xcc = xc_conditions_2;\n \n pub fn main() {\n-    do xcc::oops::cond.trap(|_| 1).inside {\n-        xcc::oops::cond.raise(1);\n-    }\n+    xcc::oops::cond.trap(|_| 1).inside(|| xcc::oops::cond.raise(1));\n }"}, {"sha": "e8eea00e4924947f862c6bfe3bf146cc5dc6c70c", "filename": "src/test/run-pass/xc_conditions_client_4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxc_conditions_client_4.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -25,8 +25,8 @@ impl xcc::Thunk<xcc::Color> for SThunk {\n }\n \n pub fn main() {\n-    do xcc::oops::cond.trap(|_| xcc::Red).inside {\n+    xcc::oops::cond.trap(|_| xcc::Red).inside(|| {\n         let t = SThunk { x : 10 };\n         assert_eq!(xcc::callback(t), xcc::Red)\n-    }\n+    })\n }"}, {"sha": "2ea8ab864e1624e369a949bb8a44fbab0e1a67dc", "filename": "src/test/run-pass/xcrate-static-addresses.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f571e46ddb696d15a8cc912309714ca74f23dcc4/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs?ref=f571e46ddb696d15a8cc912309714ca74f23dcc4", "patch": "@@ -21,8 +21,8 @@ pub fn main() {\n \n     // Previously this fail'd because there were two addresses that were being\n     // used when declaring constants.\n-    do other::test::cond.trap(|_| {\n-    }).inside {\n+    other::test::cond.trap(|_| {\n+    }).inside(|| {\n         other::raise();\n-    }\n+    })\n }"}]}