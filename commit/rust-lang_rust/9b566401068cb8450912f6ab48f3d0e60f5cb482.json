{"sha": "9b566401068cb8450912f6ab48f3d0e60f5cb482", "node_id": "C_kwDOAAsO6NoAKDliNTY2NDAxMDY4Y2I4NDUwOTEyZjZhYjQ4ZjNkMGU2MGY1Y2I0ODI", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-20T16:35:12Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-20T16:35:43Z"}, "message": "break out scopes when let-else fails to match", "tree": {"sha": "f9eb8b8408b103afa5590f0c78d16d9412b4681e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9eb8b8408b103afa5590f0c78d16d9412b4681e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b566401068cb8450912f6ab48f3d0e60f5cb482", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmLYLt8ACgkQPNdIZH7v\nY1n9xQ/+M4p1YjqlmM3TpVdBcMR7KO5VwRek/H+k05N8RSVGzye0y06SvQLJSxTt\nxyPfUi+uZj3EqXvXnfP8v7SBQwbxDu+hmMiBd35Jm53nQpp6q/eI1BAoF0vozrAJ\ngEIl43pi3btH+bEsxxVl+n51jekNsEFPqHPaGc3eRMPZmBW3mDLCsygq/76Ougig\nWQMQjXu5BIpuCcFHteW8brc1gnzvpe7NJRNAZFnaDW8M58OsY+kYVAqWoLsOgLus\nPbUkZ/cH0PSM7HWE8UEVg0JAHlRScczCusUBYhPoyhVOSu8WdWjHsgDfAjyLbqNa\nN2lenc4W6ZaU68sQN3KwZy7Y1kvpKOkpNIdjdbfU9hkeo2gMab0vsr9ITEQgIhNJ\n8visvP06aJd8ZS7jH4c8os/ppGNlWXJQpt6A67QXfQe4e+W80os1Gd+NI6EU/WXu\nYOlXIqQSxjeSeI1ILOIPANBnPXjqLK+fL++N7H7pk/ZZZdSXIJv5oMYilFEwSVJa\n/I5HdHRkPBsaHu3Pr6ci7NfD9J55i/T9+kMcdsz7YYwFdwDZh1AEupXb3w97xHsK\n5ZHHg+S9mX+WsKxY4oSuFaZu9edHfr47PmfuBNdWBcUXBoqf4wUvKBHyp5a1eDfL\nXYN2A+QcSvFzBWn2M7OBG4ClpROXfueDgXEYBbTgog5ZKN1c80s=\n=B1WK\n-----END PGP SIGNATURE-----", "payload": "tree f9eb8b8408b103afa5590f0c78d16d9412b4681e\nparent d60d88fe5cd55496b9ccb1511a9af4994b7c43d0\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1658334912 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1658334943 +0800\n\nbreak out scopes when let-else fails to match\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b566401068cb8450912f6ab48f3d0e60f5cb482", "html_url": "https://github.com/rust-lang/rust/commit/9b566401068cb8450912f6ab48f3d0e60f5cb482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b566401068cb8450912f6ab48f3d0e60f5cb482/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d60d88fe5cd55496b9ccb1511a9af4994b7c43d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d60d88fe5cd55496b9ccb1511a9af4994b7c43d0", "html_url": "https://github.com/rust-lang/rust/commit/d60d88fe5cd55496b9ccb1511a9af4994b7c43d0"}], "stats": {"total": 152, "additions": 110, "deletions": 42}, "files": [{"sha": "6875600129a8ff211d41f4015954c647026bf15a", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b566401068cb8450912f6ab48f3d0e60f5cb482/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b566401068cb8450912f6ab48f3d0e60f5cb482/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=9b566401068cb8450912f6ab48f3d0e60f5cb482", "patch": "@@ -132,6 +132,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 initializer_span,\n                                                 else_block,\n                                                 visibility_scope,\n+                                                *remainder_scope,\n                                                 remainder_span,\n                                                 pattern,\n                                             )"}, {"sha": "58b1564cc5d8ce3d600e1e5be4d57ffa6af65e7f", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/9b566401068cb8450912f6ab48f3d0e60f5cb482/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b566401068cb8450912f6ab48f3d0e60f5cb482/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=9b566401068cb8450912f6ab48f3d0e60f5cb482", "patch": "@@ -2282,49 +2282,55 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         initializer_span: Span,\n         else_block: &Block,\n         visibility_scope: Option<SourceScope>,\n+        remainder_scope: region::Scope,\n         remainder_span: Span,\n         pattern: &Pat<'tcx>,\n     ) -> BlockAnd<()> {\n-        let scrutinee = unpack!(block = self.lower_scrutinee(block, init, initializer_span));\n-        let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n-        let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n-        self.declare_bindings(\n-            visibility_scope,\n-            remainder_span,\n-            pattern,\n-            ArmHasGuard(false),\n-            Some((None, initializer_span)),\n-        );\n-        let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n-        let fake_borrow_temps = self.lower_match_tree(\n-            block,\n-            initializer_span,\n-            pattern.span,\n-            false,\n-            &mut [&mut candidate, &mut wildcard],\n-        );\n-        // This block is for the matching case\n-        let matching = self.bind_pattern(\n-            self.source_info(pattern.span),\n-            candidate,\n-            None,\n-            &fake_borrow_temps,\n-            initializer_span,\n-            None,\n-            None,\n-            None,\n-        );\n-        // This block is for the failure case\n-        let failure = self.bind_pattern(\n-            self.source_info(else_block.span),\n-            wildcard,\n-            None,\n-            &fake_borrow_temps,\n-            initializer_span,\n-            None,\n-            None,\n-            None,\n-        );\n+        let (matching, failure) = self.in_if_then_scope(remainder_scope, |this| {\n+            let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n+            let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n+            let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n+            this.declare_bindings(\n+                visibility_scope,\n+                remainder_span,\n+                pattern,\n+                ArmHasGuard(false),\n+                Some((None, initializer_span)),\n+            );\n+            let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n+            let fake_borrow_temps = this.lower_match_tree(\n+                block,\n+                initializer_span,\n+                pattern.span,\n+                false,\n+                &mut [&mut candidate, &mut wildcard],\n+            );\n+            // This block is for the matching case\n+            let matching = this.bind_pattern(\n+                this.source_info(pattern.span),\n+                candidate,\n+                None,\n+                &fake_borrow_temps,\n+                initializer_span,\n+                None,\n+                None,\n+                None,\n+            );\n+            // This block is for the failure case\n+            let failure = this.bind_pattern(\n+                this.source_info(else_block.span),\n+                wildcard,\n+                None,\n+                &fake_borrow_temps,\n+                initializer_span,\n+                None,\n+                None,\n+                None,\n+            );\n+            this.break_for_else(failure, remainder_scope, this.source_info(initializer_span));\n+            matching.unit()\n+        });\n+\n         // This place is not really used because this destination place\n         // should never be used to take values at the end of the failure\n         // block."}, {"sha": "b2fd9f25bdde7964a692ae7aa5127ff29a5b9508", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b566401068cb8450912f6ab48f3d0e60f5cb482/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b566401068cb8450912f6ab48f3d0e60f5cb482/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=9b566401068cb8450912f6ab48f3d0e60f5cb482", "patch": "@@ -690,7 +690,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         drops.add_entry(block, drop_idx);\n \n-        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // `build_drop_trees` doesn't have access to our source_info, so we\n         // create a dummy terminator now. `TerminatorKind::Resume` is used\n         // because MIR type checking will panic if it hasn't been overwritten.\n         self.cfg.terminate(block, source_info, TerminatorKind::Resume);\n@@ -722,7 +722,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n         drops.add_entry(block, drop_idx);\n \n-        // `build_drop_tree` doesn't have access to our source_info, so we\n+        // `build_drop_trees` doesn't have access to our source_info, so we\n         // create a dummy terminator now. `TerminatorKind::Resume` is used\n         // because MIR type checking will panic if it hasn't been overwritten.\n         self.cfg.terminate(block, source_info, TerminatorKind::Resume);"}, {"sha": "3910d35e77676b7391c4057569fe531c011db54f", "filename": "src/test/ui/let-else/let-else-temp-borrowck.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b566401068cb8450912f6ab48f3d0e60f5cb482/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b566401068cb8450912f6ab48f3d0e60f5cb482/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs?ref=9b566401068cb8450912f6ab48f3d0e60f5cb482", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+//\n+// from issue #93951, where borrowck complained the temporary that `foo(&x)` was stored in was to\n+// be dropped sometime after `x` was. It then suggested adding a semicolon that was already there.\n+\n+#![feature(let_else)]\n+use std::fmt::Debug;\n+\n+fn foo<'a>(x: &'a str) -> Result<impl Debug + 'a, ()> {\n+    Ok(x)\n+}\n+\n+fn let_else() {\n+    let x = String::from(\"Hey\");\n+    let Ok(_) = foo(&x) else { return };\n+}\n+\n+fn if_let() {\n+    let x = String::from(\"Hey\");\n+    let _ = if let Ok(s) = foo(&x) { s } else { return };\n+}\n+\n+fn main() {\n+    let_else();\n+    if_let();\n+}"}, {"sha": "28c69ba1ce66fa5c0f51ad12c2a863f7c3a09539", "filename": "src/test/ui/let-else/let-else-temporary-lifetime.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9b566401068cb8450912f6ab48f3d0e60f5cb482/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b566401068cb8450912f6ab48f3d0e60f5cb482/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs?ref=9b566401068cb8450912f6ab48f3d0e60f5cb482", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![feature(let_else)]\n \n+use std::rc::Rc;\n use std::sync::atomic::{AtomicU8, Ordering};\n \n static TRACKER: AtomicU8 = AtomicU8::new(0);\n@@ -22,4 +23,38 @@ fn main() {\n     let 0 = Droppy::default().inner else { return };\n     assert_eq!(TRACKER.load(Ordering::Acquire), 1);\n     println!(\"Should have dropped \ud83d\udc46\");\n+\n+    {\n+        // test let-else drops temps after statement\n+        let rc = Rc::new(0);\n+        let 0 = *rc.clone() else { unreachable!() };\n+        Rc::try_unwrap(rc).unwrap();\n+    }\n+    {\n+        let mut rc = Rc::new(0);\n+        let mut i = 0;\n+        loop {\n+            if i > 3 {\n+                break;\n+            }\n+            let 1 = *rc.clone() else {\n+                if let Ok(v) = Rc::try_unwrap(rc) {\n+                    rc = Rc::new(v);\n+                } else {\n+                    panic!()\n+                }\n+                i += 1;\n+                continue\n+            };\n+        }\n+    }\n+    {\n+        // test let-else drops temps before else block\n+        let rc = Rc::new(0);\n+        let 1 = *rc.clone() else {\n+            Rc::try_unwrap(rc).unwrap();\n+            return;\n+        };\n+        unreachable!();\n+    }\n }"}]}