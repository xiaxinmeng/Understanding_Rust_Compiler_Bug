{"sha": "21ba3151025c4438a16ee110d99b9d6a525c695f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmEzMTUxMDI1YzQ0MzhhMTZlZTExMGQ5OWI5ZDZhNTI1YzY5NWY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-18T12:27:42Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-18T12:27:42Z"}, "message": "Update to rustc 1.7.0-nightly (d0bac3f14 2016-01-18)", "tree": {"sha": "3f2805974bc1523dccab198b78dab56225c3baf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2805974bc1523dccab198b78dab56225c3baf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ba3151025c4438a16ee110d99b9d6a525c695f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ba3151025c4438a16ee110d99b9d6a525c695f", "html_url": "https://github.com/rust-lang/rust/commit/21ba3151025c4438a16ee110d99b9d6a525c695f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ba3151025c4438a16ee110d99b9d6a525c695f/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f65ec699c8a89155c4aa214cf2510030a88a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f65ec699c8a89155c4aa214cf2510030a88a6d", "html_url": "https://github.com/rust-lang/rust/commit/b5f65ec699c8a89155c4aa214cf2510030a88a6d"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "0e98f5a93a94ec56bde93d57ca392c730ef11363", "filename": "src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=21ba3151025c4438a16ee110d99b9d6a525c695f", "patch": "@@ -278,7 +278,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u64> {\n                     _ => None,\n                 }\n             }\n-            .and_then(|def_id| lookup_const_by_id(cx.tcx, def_id, None))\n+            .and_then(|def_id| lookup_const_by_id(cx.tcx, def_id, None, None))\n             .and_then(|l| fetch_int_literal(cx, l))\n         }\n         _ => None,"}, {"sha": "7b022947719a59efd0fa30d9e39f319b3c34a39d", "filename": "src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=21ba3151025c4438a16ee110d99b9d6a525c695f", "patch": "@@ -486,7 +486,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             }\n             // separate if lets to avoid double borrowing the def_map\n             if let Some(id) = maybe_id {\n-                if let Some(const_expr) = lookup_const_by_id(lcx.tcx, id, None) {\n+                if let Some(const_expr) = lookup_const_by_id(lcx.tcx, id, None, None) {\n                     let ret = self.expr(const_expr);\n                     if ret.is_some() {\n                         self.needed_resolution = true;"}, {"sha": "3e59a801f6852a961236908a64437b5adaee5fcd", "filename": "src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fescape.rs?ref=21ba3151025c4438a16ee110d99b9d6a525c695f", "patch": "@@ -45,7 +45,7 @@ impl LintPass for EscapePass {\n impl LateLintPass for EscapePass {\n     fn check_fn(&mut self, cx: &LateContext, _: visit::FnKind, decl: &FnDecl, body: &Block, _: Span, id: NodeId) {\n         let param_env = ty::ParameterEnvironment::for_item(cx.tcx, id);\n-        let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(param_env), false);\n+        let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(param_env));\n         let mut v = EscapeDelegate {\n             cx: cx,\n             set: NodeSet(),"}, {"sha": "446303f8bb192a95bdc348882a1576703e2652b3", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ba3151025c4438a16ee110d99b9d6a525c695f/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=21ba3151025c4438a16ee110d99b9d6a525c695f", "patch": "@@ -245,7 +245,7 @@ pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, trait_id: DefId) -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n-    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None, true);\n+    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None);\n     let obligation = traits::predicate_for_trait_def(cx.tcx,\n                                                      traits::ObligationCause::dummy(),\n                                                      trait_id, 0, ty,"}, {"sha": "c5c82c7072b75439ae38f74c8ca7939b6678e996", "filename": "tests/compile-fail/needless_features.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21ba3151025c4438a16ee110d99b9d6a525c695f/tests%2Fcompile-fail%2Fneedless_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ba3151025c4438a16ee110d99b9d6a525c695f/tests%2Fcompile-fail%2Fneedless_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_features.rs?ref=21ba3151025c4438a16ee110d99b9d6a525c695f", "patch": "@@ -1,5 +1,4 @@\n #![feature(plugin)]\n-#![feature(convert)]\n #![plugin(clippy)]\n \n #![deny(clippy)]"}]}