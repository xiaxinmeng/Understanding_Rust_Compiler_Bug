{"sha": "2a22cf8efca9cdf70dc849f974f9ee858171853e", "node_id": "C_kwDOAAsO6NoAKDJhMjJjZjhlZmNhOWNkZjcwZGM4NDlmOTc0ZjllZTg1ODE3MTg1M2U", "commit": {"author": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T02:26:01Z"}, "committer": {"name": "Morgan Thomas", "email": "corp@m0rg.dev", "date": "2022-03-12T02:26:01Z"}, "message": "Complete enum variants identically to structures.\n\nIn particular:\n - unit variants now display in the menu as \"Variant\", complete to \"Variant\", and display a detail of \"Variant\" (was \"()\")\n - tuple variants now display in the menu as \"Variant(\u2026)\", complete to \"Variant(${1:()})$0\" (was \"Variant($0)\"), and display a detail of \"Variant(type)\" (was \"(type)\")\n - record variants now display in the menu as \"Variant {\u2026}\", complete to \"Variant { x: ${1:()} }$0\" (was \"Variant\"), and display a detail of \"Variant { x: type }\" (was \"{x: type}\")\n\nThis behavior is identical to that of struct completions. In addition, tuple variants no longer set triggers_call_info, as to my understanding it's unnecessary now that we're emitting placeholders.\n\nTests have been updated to match, and the render::enum_variant::tests::inserts_parens_for_tuple_enums test has been removed entirely as it's covered by other tests (render::enum_detail_includes_{record, tuple}_fields, render::enum_detail_just_name_for_unit, render::pattern::enum_qualified).", "tree": {"sha": "9963eca79a437bed7b76a7e39f786b10cace27f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9963eca79a437bed7b76a7e39f786b10cace27f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a22cf8efca9cdf70dc849f974f9ee858171853e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a22cf8efca9cdf70dc849f974f9ee858171853e", "html_url": "https://github.com/rust-lang/rust/commit/2a22cf8efca9cdf70dc849f974f9ee858171853e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a22cf8efca9cdf70dc849f974f9ee858171853e/comments", "author": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m0rg-dev", "id": 38578268, "node_id": "MDQ6VXNlcjM4NTc4MjY4", "avatar_url": "https://avatars.githubusercontent.com/u/38578268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m0rg-dev", "html_url": "https://github.com/m0rg-dev", "followers_url": "https://api.github.com/users/m0rg-dev/followers", "following_url": "https://api.github.com/users/m0rg-dev/following{/other_user}", "gists_url": "https://api.github.com/users/m0rg-dev/gists{/gist_id}", "starred_url": "https://api.github.com/users/m0rg-dev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m0rg-dev/subscriptions", "organizations_url": "https://api.github.com/users/m0rg-dev/orgs", "repos_url": "https://api.github.com/users/m0rg-dev/repos", "events_url": "https://api.github.com/users/m0rg-dev/events{/privacy}", "received_events_url": "https://api.github.com/users/m0rg-dev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c5b2c7d03d684227279877a813fdf16790e4552", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5b2c7d03d684227279877a813fdf16790e4552", "html_url": "https://github.com/rust-lang/rust/commit/1c5b2c7d03d684227279877a813fdf16790e4552"}], "stats": {"total": 159, "additions": 69, "deletions": 90}, "files": [{"sha": "86b1f534b273861c9897f78364e507b32f0a5f67", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=2a22cf8efca9cdf70dc849f974f9ee858171853e", "patch": "@@ -580,8 +580,8 @@ impl Foo {\n }\n \"#,\n             expect![[r#\"\n-                ev Bar    ()\n-                ev Baz    ()\n+                ev Bar    Bar\n+                ev Baz    Baz\n                 me foo(\u2026) fn(self)\n             \"#]],\n         );\n@@ -626,7 +626,7 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n-                ev Bar ()\n+                ev Bar Bar\n             \"#]],\n         );\n     }"}, {"sha": "e8ebb3e33746f3f2e95132e6254f28d79dee0f7f", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=2a22cf8efca9cdf70dc849f974f9ee858171853e", "patch": "@@ -429,22 +429,22 @@ fn main() { Foo::Fo$0 }\n             expect![[r#\"\n                 [\n                     CompletionItem {\n-                        label: \"Foo\",\n+                        label: \"Foo {\u2026}\",\n                         source_range: 54..56,\n                         delete: 54..56,\n-                        insert: \"Foo\",\n+                        insert: \"Foo { x: ${1:()}, y: ${2:()} }$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        detail: \"{x: i32, y: i32}\",\n+                        detail: \"Foo { x: i32, y: i32 }\",\n                     },\n                 ]\n             \"#]],\n         );\n     }\n \n     #[test]\n-    fn enum_detail_doesnt_include_tuple_fields() {\n+    fn enum_detail_includes_tuple_fields() {\n         check(\n             r#\"\n enum Foo { Foo (i32, i32) }\n@@ -458,13 +458,11 @@ fn main() { Foo::Fo$0 }\n                         label: \"Foo(\u2026)\",\n                         source_range: 46..48,\n                         delete: 46..48,\n-                        insert: \"Foo($0)\",\n+                        insert: \"Foo(${1:()}, ${2:()})$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        lookup: \"Foo\",\n-                        detail: \"(i32, i32)\",\n-                        trigger_call_info: true,\n+                        detail: \"Foo(i32, i32)\",\n                     },\n                 ]\n             \"#]],\n@@ -511,7 +509,7 @@ fn main() { fo$0 }\n     }\n \n     #[test]\n-    fn enum_detail_just_parentheses_for_unit() {\n+    fn enum_detail_just_name_for_unit() {\n         check(\n             r#\"\n enum Foo { Foo }\n@@ -525,11 +523,11 @@ fn main() { Foo::Fo$0 }\n                         label: \"Foo\",\n                         source_range: 35..37,\n                         delete: 35..37,\n-                        insert: \"Foo\",\n+                        insert: \"Foo$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        detail: \"()\",\n+                        detail: \"Foo\",\n                     },\n                 ]\n             \"#]],\n@@ -573,15 +571,15 @@ fn main() { let _: m::Spam = S$0 }\n                         ),\n                     },\n                     CompletionItem {\n-                        label: \"Spam::Bar(\u2026)\",\n+                        label: \"m::Spam::Bar(\u2026)\",\n                         source_range: 75..76,\n                         delete: 75..76,\n-                        insert: \"Spam::Bar($0)\",\n+                        insert: \"m::Spam::Bar(${1:()})$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n                         lookup: \"Spam::Bar\",\n-                        detail: \"(i32)\",\n+                        detail: \"m::Spam::Bar(i32)\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: false,\n                             type_match: Some(\n@@ -592,18 +590,17 @@ fn main() { let _: m::Spam = S$0 }\n                             is_private_editable: false,\n                             exact_postfix_snippet_match: false,\n                         },\n-                        trigger_call_info: true,\n                     },\n                     CompletionItem {\n                         label: \"m::Spam::Foo\",\n                         source_range: 75..76,\n                         delete: 75..76,\n-                        insert: \"m::Spam::Foo\",\n+                        insert: \"m::Spam::Foo$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n                         lookup: \"Spam::Foo\",\n-                        detail: \"()\",\n+                        detail: \"m::Spam::Foo\",\n                         relevance: CompletionRelevance {\n                             exact_name_match: false,\n                             type_match: Some(\n@@ -788,11 +785,11 @@ use self::E::*;\n                         label: \"V\",\n                         source_range: 10..12,\n                         delete: 10..12,\n-                        insert: \"V\",\n+                        insert: \"V$0\",\n                         kind: SymbolKind(\n                             Variant,\n                         ),\n-                        detail: \"()\",\n+                        detail: \"V\",\n                         documentation: Documentation(\n                             \"variant docs\",\n                         ),"}, {"sha": "70767a2a9ccadc69b989efbf2283d83a4146fb6a", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=2a22cf8efca9cdf70dc849f974f9ee858171853e", "patch": "@@ -8,6 +8,7 @@ use crate::{context::PathKind, item::Builder, patterns::ImmediateLocation, Compl\n #[derive(Debug)]\n pub(super) enum Params {\n     Named(Option<hir::SelfParam>, Vec<hir::Param>),\n+    #[allow(dead_code)]\n     Anonymous(usize),\n }\n "}, {"sha": "6f358bfd4c97ffd0bf6e0a637e0b7c79769202f5", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 38, "deletions": 57, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=2a22cf8efca9cdf70dc849f974f9ee858171853e", "patch": "@@ -1,13 +1,15 @@\n //! Renderer for `enum` variants.\n \n-use hir::{db::HirDatabase, HasAttrs, HirDisplay, StructKind};\n+use hir::{HasAttrs, StructKind};\n use ide_db::SymbolKind;\n-use itertools::Itertools;\n use syntax::SmolStr;\n \n use crate::{\n     item::{CompletionItem, ImportEdit},\n-    render::{builder_ext::Params, compute_ref_match, compute_type_match, RenderContext},\n+    render::{\n+        compound::{render_record, render_tuple, RenderedCompound},\n+        compute_ref_match, compute_type_match, RenderContext,\n+    },\n     CompletionRelevance,\n };\n \n@@ -46,20 +48,46 @@ fn render(\n     let qualified_name = qualified_name.to_string();\n     let short_qualified_name: SmolStr = short_qualified_name.to_string().into();\n \n-    let mut item = CompletionItem::new(SymbolKind::Variant, ctx.source_range(), qualified_name);\n+    let mut rendered = match variant_kind {\n+        StructKind::Tuple => {\n+            render_tuple(db, ctx.snippet_cap(), &variant.fields(db), Some(&qualified_name))\n+        }\n+        StructKind::Record => {\n+            render_record(db, ctx.snippet_cap(), &variant.fields(db), Some(&qualified_name))\n+        }\n+        StructKind::Unit => {\n+            RenderedCompound { literal: qualified_name.clone(), detail: qualified_name.clone() }\n+        }\n+    };\n+\n+    if ctx.snippet_cap().is_some() {\n+        rendered.literal.push_str(\"$0\");\n+    }\n+\n+    let mut item = CompletionItem::new(\n+        SymbolKind::Variant,\n+        ctx.source_range(),\n+        match variant_kind {\n+            StructKind::Tuple => SmolStr::from_iter([&qualified_name, \"(\u2026)\"]),\n+            StructKind::Record => SmolStr::from_iter([&qualified_name, \" {\u2026}\"]),\n+            StructKind::Unit => qualified_name.into(),\n+        },\n+    );\n+\n     item.set_documentation(variant.docs(db))\n         .set_deprecated(ctx.is_deprecated(variant))\n-        .detail(detail(db, variant, variant_kind));\n+        .detail(rendered.detail);\n+\n+    match ctx.snippet_cap() {\n+        Some(snippet_cap) => item.insert_snippet(snippet_cap, rendered.literal),\n+        None => item.insert_text(rendered.literal),\n+    };\n \n     if let Some(import_to_add) = import_to_add {\n         item.add_import(import_to_add);\n     }\n \n-    if variant_kind == hir::StructKind::Tuple {\n-        cov_mark::hit!(inserts_parens_for_tuple_enums);\n-        let params = Params::Anonymous(variant.fields(db).len());\n-        item.add_call_parens(completion, short_qualified_name, params);\n-    } else if qualified {\n+    if qualified {\n         item.lookup_by(short_qualified_name);\n     }\n \n@@ -75,50 +103,3 @@ fn render(\n \n     item.build()\n }\n-\n-fn detail(db: &dyn HirDatabase, variant: hir::Variant, variant_kind: StructKind) -> String {\n-    let detail_types = variant.fields(db).into_iter().map(|field| (field.name(db), field.ty(db)));\n-\n-    match variant_kind {\n-        hir::StructKind::Tuple | hir::StructKind::Unit => {\n-            format!(\"({})\", detail_types.format_with(\", \", |(_, t), f| f(&t.display(db))))\n-        }\n-        hir::StructKind::Record => {\n-            format!(\n-                \"{{{}}}\",\n-                detail_types.format_with(\", \", |(n, t), f| {\n-                    f(&n)?;\n-                    f(&\": \")?;\n-                    f(&t.display(db))\n-                }),\n-            )\n-        }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::check_edit;\n-\n-    #[test]\n-    fn inserts_parens_for_tuple_enums() {\n-        cov_mark::check!(inserts_parens_for_tuple_enums);\n-        check_edit(\n-            \"Some\",\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main() -> Option<i32> {\n-    Som$0\n-}\n-\"#,\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main() -> Option<i32> {\n-    Some($0)\n-}\n-\"#,\n-        );\n-    }\n-}"}, {"sha": "bb8b34b79a337db482ec17aa182aee99d25d0214", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=2a22cf8efca9cdf70dc849f974f9ee858171853e", "patch": "@@ -61,7 +61,7 @@ fn baz() {\n             fn function()    fn()\n             sc STATIC\n             un Union\n-            ev TupleV(\u2026)     (u32)\n+            ev TupleV(\u2026)     TupleV(u32)\n             ct CONST\n         \"#]],\n     )\n@@ -171,7 +171,7 @@ impl Unit {\n             fn function()   fn()\n             sc STATIC\n             un Union\n-            ev TupleV(\u2026)    (u32)\n+            ev TupleV(\u2026)    TupleV(u32)\n             ct CONST\n         \"#]],\n     );\n@@ -200,7 +200,7 @@ impl Unit {\n             fn function() fn()\n             sc STATIC\n             un Union\n-            ev TupleV(\u2026)  (u32)\n+            ev TupleV(\u2026)  TupleV(u32)\n             ct CONST\n         \"#]],\n     );\n@@ -543,9 +543,9 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleV(\u2026)   (u32)\n-            ev RecordV     {field: u32}\n-            ev UnitV       ()\n+            ev TupleV(\u2026)   TupleV(u32)\n+            ev RecordV {\u2026} RecordV { field: u32 }\n+            ev UnitV       UnitV\n             ct ASSOC_CONST const ASSOC_CONST: ()\n             fn assoc_fn()  fn()\n             ta AssocType   type AssocType = ()"}, {"sha": "7767f2463272f997416cf09fc1fdf75d0fa2cfb2", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=2a22cf8efca9cdf70dc849f974f9ee858171853e", "patch": "@@ -218,7 +218,7 @@ fn foo() {\n         expect![[r#\"\n             kw ref\n             kw mut\n-            ev E::X  ()\n+            ev E::X  E::X\n             en E\n             ma m!(\u2026) macro_rules! m\n         \"#]],\n@@ -291,9 +291,9 @@ fn func() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleV(\u2026) (u32)\n-            ev RecordV   {field: u32}\n-            ev UnitV     ()\n+            ev TupleV(\u2026)   TupleV(u32)\n+            ev RecordV {\u2026} RecordV { field: u32 }\n+            ev UnitV       UnitV\n         \"#]],\n     );\n }"}, {"sha": "ca06cc376ff795c10ee2ba282b281b784e92fc68", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a22cf8efca9cdf70dc849f974f9ee858171853e/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=2a22cf8efca9cdf70dc849f974f9ee858171853e", "patch": "@@ -167,7 +167,7 @@ impl Foo {\n }\n \"#,\n         expect![[r#\"\n-            ev Variant ()\n+            ev Variant Variant\n         \"#]],\n     );\n }"}]}