{"sha": "a7b312f8255db978f0446cf62383402fee02bae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YjMxMmY4MjU1ZGI5NzhmMDQ0NmNmNjIzODM0MDJmZWUwMmJhZTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T08:08:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-17T08:08:30Z"}, "message": "erase the tag on casts involving (raw) pointers", "tree": {"sha": "a41d5ef0f21b10546aa795fb2f2bd21997b3256d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41d5ef0f21b10546aa795fb2f2bd21997b3256d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7b312f8255db978f0446cf62383402fee02bae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b312f8255db978f0446cf62383402fee02bae3", "html_url": "https://github.com/rust-lang/rust/commit/a7b312f8255db978f0446cf62383402fee02bae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7b312f8255db978f0446cf62383402fee02bae3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4d03f82b582824d2b6c3fb68420883d26598178", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d03f82b582824d2b6c3fb68420883d26598178", "html_url": "https://github.com/rust-lang/rust/commit/e4d03f82b582824d2b6c3fb68420883d26598178"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "7d636b77ced4ce9453941fd90989e085ac7bfebf", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a7b312f8255db978f0446cf62383402fee02bae3/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7b312f8255db978f0446cf62383402fee02bae3/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=a7b312f8255db978f0446cf62383402fee02bae3", "patch": "@@ -44,28 +44,34 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             }\n \n             Misc => {\n+                let src_layout = src.layout;\n                 let src = self.read_immediate(src)?;\n \n-                if self.type_is_fat_ptr(src.layout.ty) {\n-                    match (*src, self.type_is_fat_ptr(dest.layout.ty)) {\n+                // There are no casts to references\n+                assert!(!dest.layout.ty.is_region_ptr());\n+                // Hence we make all casts erase the tag\n+                let src = src.erase_tag().with_default_tag();\n+\n+                if self.type_is_fat_ptr(src_layout.ty) {\n+                    match (src, self.type_is_fat_ptr(dest.layout.ty)) {\n                         // pointers to extern types\n                         (Immediate::Scalar(_),_) |\n                         // slices and trait objects to other slices/trait objects\n                         (Immediate::ScalarPair(..), true) => {\n                             // No change to immediate\n-                            self.write_immediate(*src, dest)?;\n+                            self.write_immediate(src, dest)?;\n                         }\n                         // slices and trait objects to thin pointers (dropping the metadata)\n                         (Immediate::ScalarPair(data, _), false) => {\n                             self.write_scalar(data, dest)?;\n                         }\n                     }\n                 } else {\n-                    match src.layout.variants {\n+                    match src_layout.variants {\n                         layout::Variants::Single { index } => {\n-                            if let Some(def) = src.layout.ty.ty_adt_def() {\n+                            if let Some(def) = src_layout.ty.ty_adt_def() {\n                                 // Cast from a univariant enum\n-                                assert!(src.layout.is_zst());\n+                                assert!(src_layout.is_zst());\n                                 let discr_val = def\n                                     .discriminant_for_variant(*self.tcx, index)\n                                     .val;\n@@ -78,7 +84,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         layout::Variants::NicheFilling { .. } => {},\n                     }\n \n-                    let dest_val = self.cast_scalar(src.to_scalar()?, src.layout, dest.layout)?;\n+                    let dest_val = self.cast_scalar(src.to_scalar()?, src_layout, dest.layout)?;\n                     self.write_scalar(dest_val, dest)?;\n                 }\n             }"}]}