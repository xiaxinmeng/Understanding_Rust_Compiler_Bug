{"sha": "6548a5fa5d1f6d1794592945837111f7264ae598", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDhhNWZhNWQxZjZkMTc5NDU5Mjk0NTgzNzExMWY3MjY0YWU1OTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-22T22:44:18Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-22T22:53:20Z"}, "message": "Remove default macro transparencies\n\nAll transparancies are passed explicitly now.\nAlso remove `#[rustc_macro_transparency]` annotations from built-in macros, they are no longer used.\n`#[rustc_macro_transparency]` only makes sense for declarative macros now.", "tree": {"sha": "ef76bd97a8a3bb153d770ca3afc1f3aecf007507", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef76bd97a8a3bb153d770ca3afc1f3aecf007507"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6548a5fa5d1f6d1794592945837111f7264ae598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6548a5fa5d1f6d1794592945837111f7264ae598", "html_url": "https://github.com/rust-lang/rust/commit/6548a5fa5d1f6d1794592945837111f7264ae598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6548a5fa5d1f6d1794592945837111f7264ae598/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf9db76454838988620acf6ba7db7bc8654b6f57", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9db76454838988620acf6ba7db7bc8654b6f57", "html_url": "https://github.com/rust-lang/rust/commit/cf9db76454838988620acf6ba7db7bc8654b6f57"}], "stats": {"total": 36, "additions": 1, "deletions": 35}, "files": [{"sha": "ffaca029a8a78be3d31c72e8e349bec3eb81eaa3", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=6548a5fa5d1f6d1794592945837111f7264ae598", "patch": "@@ -734,7 +734,6 @@ pub(crate) mod builtin {\n     #[allow_internal_unstable(fmt_internals)]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[rustc_macro_transparency = \"opaque\"]\n     macro_rules! format_args {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n@@ -747,7 +746,6 @@ pub(crate) mod builtin {\n     #[allow_internal_unstable(fmt_internals)]\n     #[rustc_builtin_macro]\n     #[macro_export]\n-    #[rustc_macro_transparency = \"opaque\"]\n     macro_rules! format_args_nl {\n         ($fmt:expr) => ({ /* compiler built-in */ });\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n@@ -1235,42 +1233,36 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro test($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a function to turn it into a benchmark test.\n     #[unstable(feature = \"test\", issue = \"50297\",\n                reason = \"`bench` is a part of custom test frameworks which are unstable\")]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro bench($item:item) { /* compiler built-in */ }\n \n     /// An implementation detail of the `#[test]` and `#[bench]` macros.\n     #[unstable(feature = \"custom_test_frameworks\", issue = \"50297\",\n                reason = \"custom test frameworks are an unstable feature\")]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro test_case($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a static to register it as a global allocator.\n     #[stable(feature = \"global_allocator\", since = \"1.28.0\")]\n     #[allow_internal_unstable(rustc_attrs)]\n     #[rustc_builtin_macro]\n-    #[rustc_macro_transparency = \"semitransparent\"]\n     pub macro global_allocator($item:item) { /* compiler built-in */ }\n \n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics, libstd_sys_internals)]\n     pub macro RustcDecodable($item:item) { /* compiler built-in */ }\n \n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n-    #[cfg_attr(boostrap_stdarch_ignore_this, rustc_macro_transparency = \"semitransparent\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n     pub macro RustcEncodable($item:item) { /* compiler built-in */ }"}, {"sha": "05e2c7854b49ce7917ffa383ae57d363fd0f8451", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=6548a5fa5d1f6d1794592945837111f7264ae598", "patch": "@@ -402,7 +402,6 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnData {\n     parent -> _,\n     call_site,\n     def_site,\n-    default_transparency,\n     allow_internal_unstable,\n     allow_internal_unsafe,\n     local_inner_macros,"}, {"sha": "a63c4181d5e039a1d2a996e7327c63526f2768dc", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6548a5fa5d1f6d1794592945837111f7264ae598", "patch": "@@ -549,8 +549,6 @@ pub struct SyntaxExtension {\n     pub kind: SyntaxExtensionKind,\n     /// Span of the macro definition.\n     pub span: Span,\n-    /// Hygienic properties of spans produced by this macro by default.\n-    pub default_transparency: Transparency,\n     /// Whitelist of unstable features that are treated as stable inside this macro.\n     pub allow_internal_unstable: Option<Lrc<[Symbol]>>,\n     /// Suppresses the `unsafe_code` lint for code produced by this macro.\n@@ -572,22 +570,6 @@ pub struct SyntaxExtension {\n     pub is_derive_copy: bool,\n }\n \n-impl SyntaxExtensionKind {\n-    /// When a syntax extension is constructed,\n-    /// its transparency can often be inferred from its kind.\n-    fn default_transparency(&self) -> Transparency {\n-        match self {\n-            SyntaxExtensionKind::Bang(..) |\n-            SyntaxExtensionKind::Attr(..) |\n-            SyntaxExtensionKind::Derive(..) |\n-            SyntaxExtensionKind::NonMacroAttr { .. } => Transparency::Opaque,\n-            SyntaxExtensionKind::LegacyBang(..) |\n-            SyntaxExtensionKind::LegacyAttr(..) |\n-            SyntaxExtensionKind::LegacyDerive(..) => Transparency::SemiTransparent,\n-        }\n-    }\n-}\n-\n impl SyntaxExtension {\n     /// Returns which kind of macro calls this syntax extension.\n     pub fn macro_kind(&self) -> MacroKind {\n@@ -606,7 +588,6 @@ impl SyntaxExtension {\n     pub fn default(kind: SyntaxExtensionKind, edition: Edition) -> SyntaxExtension {\n         SyntaxExtension {\n             span: DUMMY_SP,\n-            default_transparency: kind.default_transparency(),\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n@@ -646,7 +627,6 @@ impl SyntaxExtension {\n             parent,\n             call_site,\n             def_site: self.span,\n-            default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),\n             allow_internal_unsafe: self.allow_internal_unsafe,\n             local_inner_macros: self.local_inner_macros,"}, {"sha": "37cb8467ff5eefb81c1b1a4162fd5c7215442521", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=6548a5fa5d1f6d1794592945837111f7264ae598", "patch": "@@ -478,7 +478,6 @@ pub fn compile(\n     SyntaxExtension {\n         kind: SyntaxExtensionKind::LegacyBang(expander),\n         span: def.span,\n-        default_transparency: transparency,\n         allow_internal_unstable,\n         allow_internal_unsafe: attr::contains_name(&def.attrs, sym::allow_internal_unsafe),\n         local_inner_macros,"}, {"sha": "733f6f0449065c6cfc157802fa66c345631022ac", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6548a5fa5d1f6d1794592945837111f7264ae598/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=6548a5fa5d1f6d1794592945837111f7264ae598", "patch": "@@ -550,8 +550,7 @@ impl Span {\n     /// The returned span belongs to the created expansion and has the new properties,\n     /// but its location is inherited from the current span.\n     pub fn fresh_expansion(self, expn_data: ExpnData) -> Span {\n-        let transparency = expn_data.default_transparency;\n-        self.fresh_expansion_with_transparency(expn_data, transparency)\n+        self.fresh_expansion_with_transparency(expn_data, Transparency::SemiTransparent)\n     }\n \n     pub fn fresh_expansion_with_transparency(\n@@ -591,8 +590,6 @@ pub struct ExpnData {\n     /// The span of the macro definition (possibly dummy).\n     /// This span serves only informational purpose and is not used for resolution.\n     pub def_site: Span,\n-    /// Transparency used by `apply_mark` for the expansion with this expansion data by default.\n-    pub default_transparency: Transparency,\n     /// List of #[unstable]/feature-gated features that the macro is allowed to use\n     /// internally without forcing the whole crate to opt-in\n     /// to them.\n@@ -615,7 +612,6 @@ impl ExpnData {\n             parent: ExpnId::root(),\n             call_site,\n             def_site: DUMMY_SP,\n-            default_transparency: Transparency::SemiTransparent,\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,"}]}