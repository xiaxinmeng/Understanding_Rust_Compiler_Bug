{"sha": "f853cf79b568fdffe83729aad4a43cb3c9ff3c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTNjZjc5YjU2OGZkZmZlODM3MjlhYWQ0YTQzY2IzYzlmZjNjOTI=", "commit": {"author": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2014-05-14T10:23:42Z"}, "committer": {"name": "Stepan Koltsov", "email": "stepan.koltsov@gmail.com", "date": "2014-05-14T10:23:42Z"}, "message": "Optimize common path of Once::doit\n\nOptimize `Once::doit`: perform optimistic check that initializtion is\nalready completed.  `load` is much cheaper than `fetch_add` at least\non x86_64.\n\nVerified with this test:\n\n```\nstatic mut o: one::Once = one::ONCE_INIT;\nunsafe {\n    loop {\n        let start = time::precise_time_ns();\n        let iters = 50000000u64;\n        for _ in range(0, iters) {\n            o.doit(|| { println!(\"once!\"); });\n        }\n        let end = time::precise_time_ns();\n        let ps_per_iter = 1000 * (end - start) / iters;\n        println!(\"{} ps per iter\", ps_per_iter);\n\n        // confuse the optimizer\n        o.doit(|| { println!(\"once!\"); });\n    }\n}\n```\n\nTest executed on Mac, Intel Core i7 2GHz. Result is:\n* 20ns per iteration without patch\n*  4ns per iteration with this patch applied\n\nOnce.doit could be even faster (800ps per iteration), if `doit` function\nwas split into a pair of `doit`/`doit_slow`, and `doit` marked as\n`#[inline]` like this:\n\n```\n#[inline(always)]\npub fn doit(&self, f: ||) {\n    if self.cnt.load(atomics::SeqCst) < 0 {\n        return\n    }\n\n    self.doit_slow(f);\n}\n\nfn doit_slow(&self, f: ||) { ... }\n```", "tree": {"sha": "5c91350f4520f16ec4f358b588c5403d9b8b39db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c91350f4520f16ec4f358b588c5403d9b8b39db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f853cf79b568fdffe83729aad4a43cb3c9ff3c92", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f853cf79b568fdffe83729aad4a43cb3c9ff3c92", "html_url": "https://github.com/rust-lang/rust/commit/f853cf79b568fdffe83729aad4a43cb3c9ff3c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f853cf79b568fdffe83729aad4a43cb3c9ff3c92/comments", "author": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stepancheg", "id": 28969, "node_id": "MDQ6VXNlcjI4OTY5", "avatar_url": "https://avatars.githubusercontent.com/u/28969?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stepancheg", "html_url": "https://github.com/stepancheg", "followers_url": "https://api.github.com/users/stepancheg/followers", "following_url": "https://api.github.com/users/stepancheg/following{/other_user}", "gists_url": "https://api.github.com/users/stepancheg/gists{/gist_id}", "starred_url": "https://api.github.com/users/stepancheg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stepancheg/subscriptions", "organizations_url": "https://api.github.com/users/stepancheg/orgs", "repos_url": "https://api.github.com/users/stepancheg/repos", "events_url": "https://api.github.com/users/stepancheg/events{/privacy}", "received_events_url": "https://api.github.com/users/stepancheg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db5ca23118f1d96286a25d8627be3fe05ae51c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db5ca23118f1d96286a25d8627be3fe05ae51c5d", "html_url": "https://github.com/rust-lang/rust/commit/db5ca23118f1d96286a25d8627be3fe05ae51c5d"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "eb919198708096a4ae96c8a44e7739a1c070bf8e", "filename": "src/libsync/one.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f853cf79b568fdffe83729aad4a43cb3c9ff3c92/src%2Flibsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f853cf79b568fdffe83729aad4a43cb3c9ff3c92/src%2Flibsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fone.rs?ref=f853cf79b568fdffe83729aad4a43cb3c9ff3c92", "patch": "@@ -64,6 +64,11 @@ impl Once {\n     /// When this function returns, it is guaranteed that some initialization\n     /// has run and completed (it may not be the closure specified).\n     pub fn doit(&self, f: ||) {\n+        // Optimize common path: load is much cheaper than fetch_add.\n+        if self.cnt.load(atomics::SeqCst) < 0 {\n+            return\n+        }\n+\n         // Implementation-wise, this would seem like a fairly trivial primitive.\n         // The stickler part is where our mutexes currently require an\n         // allocation, and usage of a `Once` should't leak this allocation."}]}