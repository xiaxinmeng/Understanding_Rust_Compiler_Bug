{"sha": "aa36237e1604de6a2a6275f5580c9d680d627c2f", "node_id": "C_kwDOAAsO6NoAKGFhMzYyMzdlMTYwNGRlNmEyYTYyNzVmNTU4MGM5ZDY4MGQ2MjdjMmY", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-10-06T14:52:54Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-03-03T12:58:38Z"}, "message": "Add -Z oom={panic,abort} command-line option", "tree": {"sha": "671997417164221e78218c622b99b81f2f84de23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/671997417164221e78218c622b99b81f2f84de23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa36237e1604de6a2a6275f5580c9d680d627c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa36237e1604de6a2a6275f5580c9d680d627c2f", "html_url": "https://github.com/rust-lang/rust/commit/aa36237e1604de6a2a6275f5580c9d680d627c2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa36237e1604de6a2a6275f5580c9d680d627c2f/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1204400ab8da9830f6f77a5e40e7ad3ea459676a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1204400ab8da9830f6f77a5e40e7ad3ea459676a", "html_url": "https://github.com/rust-lang/rust/commit/1204400ab8da9830f6f77a5e40e7ad3ea459676a"}], "stats": {"total": 123, "additions": 113, "deletions": 10}, "files": [{"sha": "c3b99b64263f2988585865eba773efbab4b8eb1d", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -4,6 +4,7 @@\n use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_session::config::OomStrategy;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -18,7 +19,13 @@ pub(crate) fn codegen(\n     if any_dynamic_crate {\n         false\n     } else if let Some(kind) = tcx.allocator_kind(()) {\n-        codegen_inner(module, unwind_context, kind, tcx.lang_items().oom().is_some());\n+        codegen_inner(\n+            module,\n+            unwind_context,\n+            kind,\n+            tcx.lang_items().oom().is_some(),\n+            tcx.sess.opts.debugging_opts.oom,\n+        );\n         true\n     } else {\n         false\n@@ -30,6 +37,7 @@ fn codegen_inner(\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n     has_alloc_error_handler: bool,\n+    oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n \n@@ -129,4 +137,11 @@ fn codegen_inner(\n     }\n     module.define_function(func_id, &mut ctx).unwrap();\n     unwind_context.add_function(func_id, &ctx, module.isa());\n+\n+    let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n+    let mut data_ctx = DataContext::new();\n+    data_ctx.set_align(1);\n+    let val = oom_strategy.should_panic();\n+    data_ctx.define(Box::new([val]));\n+    module.define_data(data_id, &data_ctx).unwrap();\n }"}, {"sha": "c761e5aabd1071d3c4f22f58d63155e6b0e8a3c2", "filename": "compiler/rustc_codegen_gcc/src/allocator.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fallocator.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -1,7 +1,8 @@\n-use gccjit::{FunctionType, ToRValue};\n+use gccjit::{FunctionType, GlobalKind, ToRValue};\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n+use rustc_session::config::OomStrategy;\n use rustc_span::symbol::sym;\n \n use crate::GccContext;\n@@ -113,4 +114,10 @@ pub(crate) unsafe fn codegen(tcx: TyCtxt<'_>, mods: &mut GccContext, _module_nam\n     let _ret = context.new_call(None, callee, &args);\n     //llvm::LLVMSetTailCall(ret, True);\n     block.end_with_void_return(None);\n+\n+    let name = OomStrategy::SYMBOL.to_string();\n+    let global = context.new_global(None, GlobalKind::Exported, i8, name);\n+    let value = tcx.sess.opts.debugging_opts.oom.should_panic();\n+    let value = context.new_rvalue_from_int(i8, value as i32);\n+    global.global_set_initializer_rvalue(value);\n }"}, {"sha": "b2c074088000d1537e0443a86093eaf0994084eb", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -3,7 +3,7 @@ use libc::c_uint;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::DebugInfo;\n+use rustc_session::config::{DebugInfo, OomStrategy};\n use rustc_span::symbol::sym;\n \n use crate::debuginfo;\n@@ -136,6 +136,16 @@ pub(crate) unsafe fn codegen(\n     llvm::LLVMBuildRetVoid(llbuilder);\n     llvm::LLVMDisposeBuilder(llbuilder);\n \n+    // __rust_alloc_error_handler_should_panic\n+    let name = OomStrategy::SYMBOL;\n+    let ll_g = llvm::LLVMRustGetOrInsertGlobal(llmod, name.as_ptr().cast(), name.len(), i8);\n+    if tcx.sess.target.default_hidden_visibility {\n+        llvm::LLVMRustSetVisibility(ll_g, llvm::Visibility::Hidden);\n+    }\n+    let val = tcx.sess.opts.debugging_opts.oom.should_panic();\n+    let llval = llvm::LLVMConstInt(i8, val as u64, False);\n+    llvm::LLVMSetInitializer(ll_g, llval);\n+\n     if tcx.sess.opts.debuginfo != DebugInfo::None {\n         let dbg_cx = debuginfo::CrateDebugContext::new(llmod);\n         debuginfo::metadata::compile_unit_metadata(tcx, module_name, &dbg_cx);"}, {"sha": "011facb8a749d0d747da500d9fafe2a00fd0536d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -9,8 +9,8 @@ use rustc_session::config::{\n     rustc_optgroups, ErrorOutputType, ExternLocation, LocationDetail, Options, Passes,\n };\n use rustc_session::config::{\n-    BranchProtection, Externs, OutputType, OutputTypes, PAuthKey, PacRet, SymbolManglingVersion,\n-    WasiExecModel,\n+    BranchProtection, Externs, OomStrategy, OutputType, OutputTypes, PAuthKey, PacRet,\n+    SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::lint::Level;\n@@ -755,6 +755,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(no_link, true);\n     tracked!(no_unique_section_names, true);\n     tracked!(no_profiler_runtime, true);\n+    tracked!(oom, OomStrategy::Panic);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);\n     tracked!(panic_in_drop, PanicStrategy::Abort);"}, {"sha": "485fb0175d28750ce105cdc4a36ce33f1fd5a8f8", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -2735,9 +2735,9 @@ impl PpMode {\n crate mod dep_tracking {\n     use super::{\n         BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n-        InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OptLevel, OutputType,\n-        OutputTypes, Passes, SourceFileHashAlgorithm, SwitchWithOptPath, SymbolManglingVersion,\n-        TrimmedDefPaths,\n+        InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OomStrategy, OptLevel,\n+        OutputType, OutputTypes, Passes, SourceFileHashAlgorithm, SwitchWithOptPath,\n+        SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2833,6 +2833,7 @@ crate mod dep_tracking {\n         RealFileName,\n         LocationDetail,\n         BranchProtection,\n+        OomStrategy,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)\n@@ -2922,3 +2923,24 @@ crate mod dep_tracking {\n         }\n     }\n }\n+\n+/// Default behavior to use in out-of-memory situations.\n+#[derive(Clone, Copy, PartialEq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]\n+pub enum OomStrategy {\n+    /// Generate a panic that can be caught by `catch_unwind`.\n+    Panic,\n+\n+    /// Abort the process immediately.\n+    Abort,\n+}\n+\n+impl OomStrategy {\n+    pub const SYMBOL: &'static str = \"__rust_alloc_error_handler_should_panic\";\n+\n+    pub fn should_panic(self) -> u8 {\n+        match self {\n+            OomStrategy::Panic => 1,\n+            OomStrategy::Abort => 0,\n+        }\n+    }\n+}"}, {"sha": "c92c8587d0f01500f9d646fbd63064a4b2eccaa7", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -375,6 +375,7 @@ mod desc {\n     pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n     pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n+    pub const parse_oom_strategy: &str = \"either `panic` or `abort`\";\n     pub const parse_relro_level: &str = \"one of: `full`, `partial`, or `off`\";\n     pub const parse_sanitizers: &str = \"comma separated list of sanitizers: `address`, `cfi`, `hwaddress`, `leak`, `memory`, `memtag`, or `thread`\";\n     pub const parse_sanitizer_memory_track_origins: &str = \"0, 1, or 2\";\n@@ -620,6 +621,15 @@ mod parse {\n         true\n     }\n \n+    crate fn parse_oom_strategy(slot: &mut OomStrategy, v: Option<&str>) -> bool {\n+        match v {\n+            Some(\"panic\") => *slot = OomStrategy::Panic,\n+            Some(\"abort\") => *slot = OomStrategy::Abort,\n+            _ => return false,\n+        }\n+        true\n+    }\n+\n     crate fn parse_relro_level(slot: &mut Option<RelroLevel>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => match s.parse::<RelroLevel>() {\n@@ -1328,6 +1338,8 @@ options! {\n         \"prevent automatic injection of the profiler_builtins crate\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],\n         \"normalize associated items in rustdoc when generating documentation\"),\n+    oom: OomStrategy = (OomStrategy::Abort, parse_oom_strategy, [TRACKED],\n+        \"panic strategy for out-of-memory handling\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n         \"pass `-install_name @rpath/...` to the macOS linker (default: no)\"),\n     panic_abort_tests: bool = (false, parse_bool, [TRACKED],"}, {"sha": "86899d05b8aaec13b95c5299f5521df41c19fb39", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -315,7 +315,21 @@ pub fn take_alloc_error_hook() -> fn(Layout) {\n }\n \n fn default_alloc_error_hook(layout: Layout) {\n-    rtprintpanic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n+    #[cfg(not(bootstrap))]\n+    extern \"Rust\" {\n+        // This symbol is emitted by rustc next to __rust_alloc_error_handler.\n+        // Its value depends on the -Zoom={panic,abort} compiler option.\n+        static __rust_alloc_error_handler_should_panic: u8;\n+    }\n+    #[cfg(bootstrap)]\n+    let __rust_alloc_error_handler_should_panic = 0;\n+\n+    #[allow(unused_unsafe)]\n+    if unsafe { __rust_alloc_error_handler_should_panic != 0 } {\n+        panic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n+    } else {\n+        rtprintpanic!(\"memory allocation of {} bytes failed\\n\", layout.size());\n+    }\n }\n \n #[cfg(not(test))]"}, {"sha": "7742d6f837238b4c85762fd41d84576089475fba", "filename": "src/test/ui/oom_unwind.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/src%2Ftest%2Fui%2Foom_unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/src%2Ftest%2Fui%2Foom_unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foom_unwind.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Z oom=panic\n+// run-pass\n+// no-prefer-dynamic\n+// needs-unwind\n+\n+#![feature(bench_black_box)]\n+\n+use std::hint::black_box;\n+use std::mem::forget;\n+use std::panic::catch_unwind;\n+\n+fn main() {\n+    let panic = catch_unwind(|| {\n+        // This is guaranteed to exceed even the size of the address space\n+        for _ in 0..16 {\n+            // Truncates to a suitable value for both 32-bit and 64-bit targets.\n+            let alloc_size = 0x1000_0000_1000_0000u64 as usize;\n+            forget(black_box(vec![0u8; alloc_size]));\n+        }\n+    });\n+    assert!(panic.is_err());\n+}"}, {"sha": "7b932b867f24095e8b72fd156e7df494252c770e", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa36237e1604de6a2a6275f5580c9d680d627c2f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa36237e1604de6a2a6275f5580c9d680d627c2f/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=aa36237e1604de6a2a6275f5580c9d680d627c2f", "patch": "@@ -7,7 +7,7 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 983;\n+const ROOT_ENTRY_LIMIT: usize = 984;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n \n fn check_entries(path: &Path, bad: &mut bool) {"}]}