{"sha": "5da74304d500d1a472f171c06c932f156f77eb9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTc0MzA0ZDUwMGQxYTQ3MmYxNzFjMDZjOTMyZjE1NmY3N2ViOWE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-09T22:01:23Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-18T18:36:18Z"}, "message": "correctly handle uninferred consts", "tree": {"sha": "1e8ec61024c3543fd896bdab5086e2eda24b940f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8ec61024c3543fd896bdab5086e2eda24b940f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da74304d500d1a472f171c06c932f156f77eb9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da74304d500d1a472f171c06c932f156f77eb9a", "html_url": "https://github.com/rust-lang/rust/commit/5da74304d500d1a472f171c06c932f156f77eb9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da74304d500d1a472f171c06c932f156f77eb9a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2a6a29ce82e4fc5decad86dab7911a38582438", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2a6a29ce82e4fc5decad86dab7911a38582438", "html_url": "https://github.com/rust-lang/rust/commit/9e2a6a29ce82e4fc5decad86dab7911a38582438"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "dfc7177921d316fc8d50666c53cfa0cfc6f97245", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5da74304d500d1a472f171c06c932f156f77eb9a", "patch": "@@ -172,8 +172,19 @@ fn closure_args(fn_sig: &ty::PolyFnSig<'_>) -> String {\n }\n \n pub enum TypeAnnotationNeeded {\n+    /// ```compile_fail,E0282\n+    /// let x = \"hello\".chars().rev().collect();\n+    /// ```\n     E0282,\n+    /// An implementation cannot be chosen unambiguously because of lack of information.\n+    /// ```compile_fail,E0283\n+    /// let _ = Default::default();\n+    /// ```\n     E0283,\n+    /// ```compile_fail,E0284\n+    /// let mut d: u64 = 2;\n+    /// d = d % 1u32.into();\n+    /// ```\n     E0284,\n }\n \n@@ -261,7 +272,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             printer.name_resolver = Some(Box::new(&getter));\n             let _ = if let ty::FnDef(..) = ty.kind {\n                 // We don't want the regular output for `fn`s because it includes its path in\n-                // invalid pseduo-syntax, we want the `fn`-pointer output instead.\n+                // invalid pseudo-syntax, we want the `fn`-pointer output instead.\n                 ty.fn_sig(self.tcx).print(printer)\n             } else {\n                 ty.print(printer)\n@@ -518,6 +529,36 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err\n     }\n \n+    // FIXME(const_generics): We should either try and merge this with `need_type_info_err`\n+    // or improve the errors created here.\n+    //\n+    // Unlike for type inference variables, we don't yet store the origin of const inference variables.\n+    // This is needed for to get a more relevant error span.\n+    pub fn need_type_info_err_const(\n+        &self,\n+        body_id: Option<hir::BodyId>,\n+        span: Span,\n+        ct: &'tcx ty::Const<'tcx>,\n+        error_code: TypeAnnotationNeeded,\n+    ) -> DiagnosticBuilder<'tcx> {\n+        let mut local_visitor = FindHirNodeVisitor::new(&self, ct.into(), span);\n+        if let Some(body_id) = body_id {\n+            let expr = self.tcx.hir().expect_expr(body_id.hir_id);\n+            local_visitor.visit_expr(expr);\n+        }\n+\n+        let error_code = error_code.into();\n+        let mut err = self.tcx.sess.struct_span_err_with_code(\n+            local_visitor.target_span,\n+            &format!(\"type annotations needed\"),\n+            error_code,\n+        );\n+\n+        err.note(\"unable to infer the value of a const parameter\");\n+\n+        err\n+    }\n+\n     /// If the `FnSig` for the method call can be found and type arguments are identified as\n     /// needed, suggest annotating the call, otherwise point out the resulting type of the call.\n     fn annotate_method_call("}, {"sha": "154ca391aa5fdcd02d9b2627e70f1e432aaf749c", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=5da74304d500d1a472f171c06c932f156f77eb9a", "patch": "@@ -647,13 +647,26 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }\n     }\n \n-    fn report_error(&self, t: Ty<'tcx>) {\n+    fn report_type_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n                 .need_type_info_err(Some(self.body.id()), self.span.to_span(self.tcx), t, E0282)\n                 .emit();\n         }\n     }\n+\n+    fn report_const_error(&self, c: &'tcx ty::Const<'tcx>) {\n+        if !self.tcx.sess.has_errors() {\n+            self.infcx\n+                .need_type_info_err_const(\n+                    Some(self.body.id()),\n+                    self.span.to_span(self.tcx),\n+                    c,\n+                    E0282,\n+                )\n+                .emit();\n+        }\n+    }\n }\n \n impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n@@ -666,7 +679,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Ok(t) => self.infcx.tcx.erase_regions(&t),\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n-                self.report_error(t);\n+                self.report_type_error(t);\n                 self.replaced_with_error = true;\n                 self.tcx().types.err\n             }\n@@ -683,8 +696,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Ok(ct) => self.infcx.tcx.erase_regions(&ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n-                // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n-                // accept a &'tcx ty::Const.\n+                self.report_const_error(ct);\n                 self.replaced_with_error = true;\n                 self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n             }"}, {"sha": "3b2bb49197d01ec9e30d030e18bc5bf6f0536e59", "filename": "src/test/ui/const-generics/uninferred-consts.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.rs?ref=5da74304d500d1a472f171c06c932f156f77eb9a", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+// taken from https://github.com/rust-lang/rust/issues/70507#issuecomment-615268893\n+struct Foo;\n+impl Foo {\n+    fn foo<const N: usize>(self) {}\n+}\n+fn main() {\n+    Foo.foo();\n+    //~^ ERROR type annotations needed\n+}"}, {"sha": "a3620084a428939ee0eb4ff5a6468980709ddb6e", "filename": "src/test/ui/const-generics/uninferred-consts.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5da74304d500d1a472f171c06c932f156f77eb9a/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts.stderr?ref=5da74304d500d1a472f171c06c932f156f77eb9a", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/uninferred-consts.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/uninferred-consts.rs:10:5\n+   |\n+LL |     Foo.foo();\n+   |     ^^^^^^^^^\n+   |\n+   = note: unable to infer the value of a const parameter\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0282`."}]}