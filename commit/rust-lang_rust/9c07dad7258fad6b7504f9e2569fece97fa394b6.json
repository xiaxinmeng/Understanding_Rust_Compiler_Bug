{"sha": "9c07dad7258fad6b7504f9e2569fece97fa394b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDdkYWQ3MjU4ZmFkNmI3NTA0ZjllMjU2OWZlY2U5N2ZhMzk0YjY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-22T12:31:42Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-05T07:46:09Z"}, "message": "Move infer::region_constraints::MemberConstraint to infer::types module.", "tree": {"sha": "317a4fb5b5bd7c36edd766ddd30ce63692ea3cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/317a4fb5b5bd7c36edd766ddd30ce63692ea3cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c07dad7258fad6b7504f9e2569fece97fa394b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c07dad7258fad6b7504f9e2569fece97fa394b6", "html_url": "https://github.com/rust-lang/rust/commit/9c07dad7258fad6b7504f9e2569fece97fa394b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c07dad7258fad6b7504f9e2569fece97fa394b6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e42f388c375b0d6eb25af087cb2a66069419529", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e42f388c375b0d6eb25af087cb2a66069419529", "html_url": "https://github.com/rust-lang/rust/commit/4e42f388c375b0d6eb25af087cb2a66069419529"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "1f1ff1fd8bc1376556078ac7ba5d79b4f36c308f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c07dad7258fad6b7504f9e2569fece97fa394b6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c07dad7258fad6b7504f9e2569fece97fa394b6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=9c07dad7258fad6b7504f9e2569fece97fa394b6", "patch": "@@ -61,6 +61,7 @@ pub mod region_constraints;\n pub mod resolve;\n mod sub;\n pub mod type_variable;\n+mod types;\n pub mod unify_key;\n \n #[must_use]"}, {"sha": "410058b70b5d8c6495cf1fdbd7787216bef31857", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c07dad7258fad6b7504f9e2569fece97fa394b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c07dad7258fad6b7504f9e2569fece97fa394b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=9c07dad7258fad6b7504f9e2569fece97fa394b6", "patch": "@@ -23,6 +23,8 @@ use std::{cmp, fmt, mem};\n \n mod leak_check;\n \n+pub use rustc::infer::types::MemberConstraint;\n+\n #[derive(Default)]\n pub struct RegionConstraintCollector<'tcx> {\n     /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.\n@@ -145,30 +147,6 @@ impl Constraint<'_> {\n     }\n }\n \n-/// Requires that `region` must be equal to one of the regions in `choice_regions`.\n-/// We often denote this using the syntax:\n-///\n-/// ```\n-/// R0 member of [O1..On]\n-/// ```\n-#[derive(Debug, Clone, HashStable, TypeFoldable, Lift)]\n-pub struct MemberConstraint<'tcx> {\n-    /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n-    pub opaque_type_def_id: DefId,\n-\n-    /// The span where the hidden type was instantiated.\n-    pub definition_span: Span,\n-\n-    /// The hidden type in which `member_region` appears: used for error reporting.\n-    pub hidden_ty: Ty<'tcx>,\n-\n-    /// The region `R0`.\n-    pub member_region: Region<'tcx>,\n-\n-    /// The options `O1..On`.\n-    pub choice_regions: Lrc<Vec<Region<'tcx>>>,\n-}\n-\n /// `VerifyGenericBound(T, _, R, RS)`: the parameter type `T` (or\n /// associated type) must outlive the region `R`. `T` is known to\n /// outlive `RS`. Therefore, verify that `R <= RS[i]` for some"}, {"sha": "f9346b99cde405ce2ca451187e7d143209965131", "filename": "src/librustc/infer/types/mod.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9c07dad7258fad6b7504f9e2569fece97fa394b6/src%2Flibrustc%2Finfer%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c07dad7258fad6b7504f9e2569fece97fa394b6/src%2Flibrustc%2Finfer%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftypes%2Fmod.rs?ref=9c07dad7258fad6b7504f9e2569fece97fa394b6", "patch": "@@ -0,0 +1,29 @@\n+use crate::ty::Region;\n+use crate::ty::Ty;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_hir::def_id::DefId;\n+use rustc_span::Span;\n+\n+/// Requires that `region` must be equal to one of the regions in `choice_regions`.\n+/// We often denote this using the syntax:\n+///\n+/// ```\n+/// R0 member of [O1..On]\n+/// ```\n+#[derive(Debug, Clone, HashStable, TypeFoldable, Lift)]\n+pub struct MemberConstraint<'tcx> {\n+    /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n+    pub opaque_type_def_id: DefId,\n+\n+    /// The span where the hidden type was instantiated.\n+    pub definition_span: Span,\n+\n+    /// The hidden type in which `member_region` appears: used for error reporting.\n+    pub hidden_ty: Ty<'tcx>,\n+\n+    /// The region `R0`.\n+    pub member_region: Region<'tcx>,\n+\n+    /// The options `O1..On`.\n+    pub choice_regions: Lrc<Vec<Region<'tcx>>>,\n+}"}]}