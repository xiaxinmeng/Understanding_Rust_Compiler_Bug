{"sha": "8aa268e731aa201e086675f38e4337702c63f104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYTI2OGU3MzFhYTIwMWUwODY2NzVmMzhlNDMzNzcwMmM2M2YxMDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T19:19:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T21:44:14Z"}, "message": "std: Fix rustdoc links with std::fmt::Alignment\n\nThis is actually a reexported implementation detail in the `rt::v1` module but\nrustdoc doesn't like reexporting items from `doc(hidden)` modules. Do what we'd\nend up doing anyway from an API perspective and make a public-facing `enum` that\ncan be retranslated under the hood if necessary.", "tree": {"sha": "b817106fda677fcd00c8d346e338297aa2820b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b817106fda677fcd00c8d346e338297aa2820b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aa268e731aa201e086675f38e4337702c63f104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa268e731aa201e086675f38e4337702c63f104", "html_url": "https://github.com/rust-lang/rust/commit/8aa268e731aa201e086675f38e4337702c63f104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aa268e731aa201e086675f38e4337702c63f104/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73db76015e39d18950d654d3a32ba9053261242f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73db76015e39d18950d654d3a32ba9053261242f", "html_url": "https://github.com/rust-lang/rust/commit/73db76015e39d18950d654d3a32ba9053261242f"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "7927b3380447169e061d1c78a14a4660d39c770b", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8aa268e731aa201e086675f38e4337702c63f104/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aa268e731aa201e086675f38e4337702c63f104/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=8aa268e731aa201e086675f38e4337702c63f104", "patch": "@@ -22,7 +22,19 @@ use ops::Deref;\n use result;\n use slice;\n use str;\n-use self::rt::v1::Alignment;\n+\n+#[unstable(feature = \"fmt_flags_align\", issue = \"27726\")]\n+/// Possible alignments returned by `Formatter::align`\n+pub enum Alignment {\n+    /// Indication that contents should be left-aligned.\n+    Left,\n+    /// Indication that contents should be right-aligned.\n+    Right,\n+    /// Indication that contents should be center-aligned.\n+    Center,\n+    /// No alignment was requested.\n+    Unknown,\n+}\n \n #[unstable(feature = \"fmt_radix\", issue = \"27728\")]\n #[rustc_deprecated(since = \"1.7.0\", reason = \"not used enough to stabilize\")]\n@@ -780,7 +792,7 @@ pub fn write(output: &mut Write, args: Arguments) -> Result {\n         width: None,\n         precision: None,\n         buf: output,\n-        align: Alignment::Unknown,\n+        align: rt::v1::Alignment::Unknown,\n         fill: ' ',\n         args: args.args,\n         curarg: args.args.iter(),\n@@ -920,13 +932,13 @@ impl<'a> Formatter<'a> {\n             Some(min) if self.sign_aware_zero_pad() => {\n                 self.fill = '0';\n                 try!(write_prefix(self));\n-                self.with_padding(min - width, Alignment::Right, |f| {\n+                self.with_padding(min - width, rt::v1::Alignment::Right, |f| {\n                     f.buf.write_str(buf)\n                 })\n             }\n             // Otherwise, the sign and prefix goes after the padding\n             Some(min) => {\n-                self.with_padding(min - width, Alignment::Right, |f| {\n+                self.with_padding(min - width, rt::v1::Alignment::Right, |f| {\n                     try!(write_prefix(f)); f.buf.write_str(buf)\n                 })\n             }\n@@ -973,7 +985,8 @@ impl<'a> Formatter<'a> {\n             // If we're under both the maximum and the minimum width, then fill\n             // up the minimum width with the specified string + some alignment.\n             Some(width) => {\n-                self.with_padding(width - s.chars().count(), Alignment::Left, |me| {\n+                let align = rt::v1::Alignment::Left;\n+                self.with_padding(width - s.chars().count(), align, |me| {\n                     me.buf.write_str(s)\n                 })\n             }\n@@ -982,20 +995,21 @@ impl<'a> Formatter<'a> {\n \n     /// Runs a callback, emitting the correct padding either before or\n     /// afterwards depending on whether right or left alignment is requested.\n-    fn with_padding<F>(&mut self, padding: usize, default: Alignment,\n+    fn with_padding<F>(&mut self, padding: usize, default: rt::v1::Alignment,\n                        f: F) -> Result\n         where F: FnOnce(&mut Formatter) -> Result,\n     {\n         use char::CharExt;\n         let align = match self.align {\n-            Alignment::Unknown => default,\n+            rt::v1::Alignment::Unknown => default,\n             _ => self.align\n         };\n \n         let (pre_pad, post_pad) = match align {\n-            Alignment::Left => (0, padding),\n-            Alignment::Right | Alignment::Unknown => (padding, 0),\n-            Alignment::Center => (padding / 2, (padding + 1) / 2),\n+            rt::v1::Alignment::Left => (0, padding),\n+            rt::v1::Alignment::Right |\n+            rt::v1::Alignment::Unknown => (padding, 0),\n+            rt::v1::Alignment::Center => (padding / 2, (padding + 1) / 2),\n         };\n \n         let mut fill = [0; 4];\n@@ -1033,7 +1047,7 @@ impl<'a> Formatter<'a> {\n                 // remove the sign from the formatted parts\n                 formatted.sign = b\"\";\n                 width = if width < sign.len() { 0 } else { width - sign.len() };\n-                align = Alignment::Right;\n+                align = rt::v1::Alignment::Right;\n                 self.fill = '0';\n             }\n \n@@ -1116,7 +1130,14 @@ impl<'a> Formatter<'a> {\n     /// Flag indicating what form of alignment was requested\n     #[unstable(feature = \"fmt_flags_align\", reason = \"method was just created\",\n                issue = \"27726\")]\n-    pub fn align(&self) -> Alignment { self.align }\n+    pub fn align(&self) -> Alignment {\n+        match self.align {\n+            rt::v1::Alignment::Left => Alignment::Left,\n+            rt::v1::Alignment::Right => Alignment::Right,\n+            rt::v1::Alignment::Center => Alignment::Center,\n+            rt::v1::Alignment::Unknown => Alignment::Unknown,\n+        }\n+    }\n \n     /// Optionally specified integer width that the output should be\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]"}]}