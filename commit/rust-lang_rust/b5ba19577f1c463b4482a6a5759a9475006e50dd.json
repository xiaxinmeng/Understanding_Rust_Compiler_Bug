{"sha": "b5ba19577f1c463b4482a6a5759a9475006e50dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YmExOTU3N2YxYzQ2M2I0NDgyYTZhNTc1OWE5NDc1MDA2ZTUwZGQ=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-06-24T03:47:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-24T03:47:51Z"}, "message": "Merge pull request #139 from rust-lang/feat/gather\n\nAdd SimdArray trait and safe gather/scatter API (rust-lang/stdsimd#139)\r\nThis PR has four parts, without which it doesn't make a lot of sense:\r\n-    The introduction of the SimdArray trait for abstraction over vectors.\r\n-    The implementation of private vector-of-pointers types.\r\n-    Using these to allow constructing vectors with SimdArray::gather_{or, or_default, select}.\r\n-    Using these to allow writing vectors using SimdArray::scatter{,_select}.", "tree": {"sha": "0fba7c5834be7515ccf78405cdd2a391e6075731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fba7c5834be7515ccf78405cdd2a391e6075731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ba19577f1c463b4482a6a5759a9475006e50dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1ABnCRBK7hj4Ov3rIwAASnMIACm7ejm3jjtSdoHBelg7am6P\nZ7ikv80/2Qmc3kCxXqZfL53AT7sRrdaFjbaHk9i/QOjBnLjVoHegGFG/R8B/yQIi\nlAkYkzF7zW4bfYg8ffChW240pvkMt0w4jVgyzPoGKhVEdpPzWUwrMSBNw76aW5GW\nDB5U1MqzQMC1KpbbE0ptN1N1AaaI/59rCn0IG5b0b3thFU412j8TU73mUEAQdTg9\nONbx+nH5+SCobmBLDQmb+vTRfFdTdth1y0Ns92lR2xKNBZS1agwyetaeBZc6UTpy\niSF5NVyJv+G7ay8Snsk+0RTIasNo2tNcpmuW0xEEYB5TKLGwVsIcr0IUn+gIeQs=\n=d5P6\n-----END PGP SIGNATURE-----\n", "payload": "tree 0fba7c5834be7515ccf78405cdd2a391e6075731\nparent 3872723ead2e4784ab483c289160d8d14086c037\nparent 1529ed43d8b029c0406d636a6d2ae84bf5346aca\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1624506471 -0700\ncommitter GitHub <noreply@github.com> 1624506471 -0700\n\nMerge pull request #139 from rust-lang/feat/gather\n\nAdd SimdArray trait and safe gather/scatter API (rust-lang/stdsimd#139)\r\nThis PR has four parts, without which it doesn't make a lot of sense:\r\n-    The introduction of the SimdArray trait for abstraction over vectors.\r\n-    The implementation of private vector-of-pointers types.\r\n-    Using these to allow constructing vectors with SimdArray::gather_{or, or_default, select}.\r\n-    Using these to allow writing vectors using SimdArray::scatter{,_select}.\r\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba19577f1c463b4482a6a5759a9475006e50dd", "html_url": "https://github.com/rust-lang/rust/commit/b5ba19577f1c463b4482a6a5759a9475006e50dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ba19577f1c463b4482a6a5759a9475006e50dd/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3872723ead2e4784ab483c289160d8d14086c037", "url": "https://api.github.com/repos/rust-lang/rust/commits/3872723ead2e4784ab483c289160d8d14086c037", "html_url": "https://github.com/rust-lang/rust/commit/3872723ead2e4784ab483c289160d8d14086c037"}, {"sha": "1529ed43d8b029c0406d636a6d2ae84bf5346aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/1529ed43d8b029c0406d636a6d2ae84bf5346aca", "html_url": "https://github.com/rust-lang/rust/commit/1529ed43d8b029c0406d636a6d2ae84bf5346aca"}], "stats": {"total": 314, "additions": 313, "deletions": 1}, "files": [{"sha": "0a52876e55b5290a841802e84cb39d6deb665d64", "filename": "crates/core_simd/src/array.rs", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Farray.rs?ref=b5ba19577f1c463b4482a6a5759a9475006e50dd", "patch": "@@ -0,0 +1,248 @@\n+use crate::intrinsics;\n+use crate::masks::*;\n+use crate::vector::ptr::{SimdConstPtr, SimdMutPtr};\n+use crate::vector::*;\n+\n+/// A representation of a vector as an \"array\" with indices, implementing\n+/// operations applicable to any vector type based solely on \"having lanes\",\n+/// and describing relationships between vector and scalar types.\n+pub trait SimdArray<const LANES: usize>: crate::LanesAtMost32\n+where\n+    SimdUsize<LANES>: crate::LanesAtMost32,\n+    SimdIsize<LANES>: crate::LanesAtMost32,\n+    MaskSize<LANES>: crate::Mask,\n+    Self: Sized,\n+{\n+    /// The scalar type in every lane of this vector type.\n+    type Scalar: Copy + Sized;\n+    /// The number of lanes for this vector.\n+    const LANES: usize = LANES;\n+\n+    /// Generates a SIMD vector with the same value in every lane.\n+    #[must_use]\n+    fn splat(val: Self::Scalar) -> Self;\n+\n+    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+    /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n+    ///\n+    /// let result = SimdI32::<4>::gather_or(&vec, idxs, alt); // Note the lane that is out-of-bounds.\n+    /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, 15]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    fn gather_or(slice: &[Self::Scalar], idxs: SimdUsize<LANES>, or: Self) -> Self {\n+        Self::gather_select(slice, MaskSize::splat(true), idxs, or)\n+    }\n+\n+    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds indices instead use the default value for that lane (0).\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    ///\n+    /// let result = SimdI32::<4>::gather_or_default(&vec, idxs); // Note the lane that is out-of-bounds.\n+    /// assert_eq!(result, SimdI32::from_array([0, 13, 10, 15]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    fn gather_or_default(slice: &[Self::Scalar], idxs: SimdUsize<LANES>) -> Self\n+    where\n+        Self::Scalar: Default,\n+    {\n+        Self::gather_or(slice, idxs, Self::splat(Self::Scalar::default()))\n+    }\n+\n+    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds or masked indices instead select the value from the \"or\" vector.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n+    /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n+    ///\n+    /// let result = SimdI32::<4>::gather_select(&vec, mask, idxs, alt); // Note the lane that is out-of-bounds.\n+    /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, -2]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    fn gather_select(\n+        slice: &[Self::Scalar],\n+        mask: MaskSize<LANES>,\n+        idxs: SimdUsize<LANES>,\n+        or: Self,\n+    ) -> Self {\n+        let mask = (mask & idxs.lanes_lt(SimdUsize::splat(slice.len()))).to_int();\n+        let base_ptr = SimdConstPtr::splat(slice.as_ptr());\n+        // Ferris forgive me, I have done pointer arithmetic here.\n+        let ptrs = base_ptr.wrapping_add(idxs);\n+        // SAFETY: The ptrs have been bounds-masked to prevent memory-unsafe reads insha'allah\n+        unsafe { intrinsics::simd_gather(or, ptrs, mask) }\n+    }\n+\n+    /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds indices are not written.\n+    /// `scatter` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n+    /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n+    ///\n+    /// vals.scatter(&mut vec, idxs); // index 0 receives two writes.\n+    /// assert_eq!(vec, vec![124, 11, 12, 82, 14, 15, 16, 17, 18]);\n+    /// ```\n+    #[inline]\n+    fn scatter(self, slice: &mut [Self::Scalar], idxs: SimdUsize<LANES>) {\n+        self.scatter_select(slice, MaskSize::splat(true), idxs)\n+    }\n+\n+    /// SIMD scatter: write a SIMD vector's values into a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds or masked indices are not written.\n+    /// `scatter_select` writes \"in order\", so if an index receives two writes, only the last is guaranteed.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 0]);\n+    /// let vals = SimdI32::from_array([-27, 82, -41, 124]);\n+    /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n+    ///\n+    /// vals.scatter_select(&mut vec, mask, idxs); // index 0's second write is masked, thus omitted.\n+    /// assert_eq!(vec, vec![-41, 11, 12, 82, 14, 15, 16, 17, 18]);\n+    /// ```\n+    #[inline]\n+    fn scatter_select(\n+        self,\n+        slice: &mut [Self::Scalar],\n+        mask: MaskSize<LANES>,\n+        idxs: SimdUsize<LANES>,\n+    ) {\n+        // We must construct our scatter mask before we derive a pointer!\n+        let mask = (mask & idxs.lanes_lt(SimdUsize::splat(slice.len()))).to_int();\n+        // SAFETY: This block works with *mut T derived from &mut 'a [T],\n+        // which means it is delicate in Rust's borrowing model, circa 2021:\n+        // &mut 'a [T] asserts uniqueness, so deriving &'a [T] invalidates live *mut Ts!\n+        // Even though this block is largely safe methods, it must be almost exactly this way\n+        // to prevent invalidating the raw ptrs while they're live.\n+        // Thus, entering this block requires all values to use being already ready:\n+        // 0. idxs we want to write to, which are used to construct the mask.\n+        // 1. mask, which depends on an initial &'a [T] and the idxs.\n+        // 2. actual values to scatter (self).\n+        // 3. &mut [T] which will become our base ptr.\n+        unsafe {\n+            // Now Entering \u2622\ufe0f *mut T Zone\n+            let base_ptr = SimdMutPtr::splat(slice.as_mut_ptr());\n+            // Ferris forgive me, I have done pointer arithmetic here.\n+            let ptrs = base_ptr.wrapping_add(idxs);\n+            // The ptrs have been bounds-masked to prevent memory-unsafe writes insha'allah\n+            intrinsics::simd_scatter(self, ptrs, mask)\n+            // Cleared \u2622\ufe0f *mut T Zone\n+        }\n+    }\n+}\n+\n+macro_rules! impl_simdarray_for {\n+    ($simd:ident {type Scalar = $scalar:ident;}) => {\n+        impl<const LANES: usize> SimdArray<LANES> for $simd<LANES>\n+            where SimdUsize<LANES>: crate::LanesAtMost32,\n+            SimdIsize<LANES>: crate::LanesAtMost32,\n+            MaskSize<LANES>: crate::Mask,\n+            Self: crate::LanesAtMost32,\n+        {\n+            type Scalar = $scalar;\n+\n+            #[must_use]\n+            #[inline]\n+            fn splat(val: Self::Scalar) -> Self {\n+                [val; LANES].into()\n+            }\n+        }\n+    };\n+\n+    ($simd:ident $impl:tt) => {\n+        impl<const LANES: usize> SimdArray<LANES> for $simd<LANES>\n+            where SimdUsize<LANES>: crate::LanesAtMost32,\n+            SimdIsize<LANES>: crate::LanesAtMost32,\n+            MaskSize<LANES>: crate::Mask,\n+            Self: crate::LanesAtMost32,\n+        $impl\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdUsize {\n+        type Scalar = usize;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdIsize {\n+        type Scalar = isize;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI8 {\n+        type Scalar = i8;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI16 {\n+        type Scalar = i16;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI32 {\n+        type Scalar = i32;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdI64 {\n+        type Scalar = i64;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU8 {\n+        type Scalar = u8;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU16 {\n+        type Scalar = u16;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU32 {\n+        type Scalar = u32;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdU64 {\n+        type Scalar = u64;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdF32 {\n+        type Scalar = f32;\n+    }\n+}\n+\n+impl_simdarray_for! {\n+    SimdF64 {\n+        type Scalar = f64;\n+    }\n+}"}, {"sha": "944026c080a6e4b027338008d88736e260f22a89", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=b5ba19577f1c463b4482a6a5759a9475006e50dd", "patch": "@@ -45,7 +45,7 @@ extern \"platform-intrinsic\" {\n \n     /// fabs\n     pub(crate) fn simd_fabs<T>(x: T) -> T;\n-    \n+\n     /// fsqrt\n     pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n \n@@ -66,6 +66,9 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;\n     pub(crate) fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n \n+    pub(crate) fn simd_gather<T, U, V>(val: T, ptr: U, mask: V) -> T;\n+    pub(crate) fn simd_scatter<T, U, V>(val: T, ptr: U, mask: V);\n+\n     // {s,u}add.sat\n     pub(crate) fn simd_saturating_add<T>(x: T, y: T) -> T;\n "}, {"sha": "8d963e86d12e5bbe96891f1b526113c7d79b7c0c", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=b5ba19577f1c463b4482a6a5759a9475006e50dd", "patch": "@@ -36,3 +36,6 @@ pub use masks::*;\n \n mod vector;\n pub use vector::*;\n+\n+mod array;\n+pub use array::SimdArray;"}, {"sha": "95214ea88642bfdd9efb10683a4941daba32229a", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=b5ba19577f1c463b4482a6a5759a9475006e50dd", "patch": "@@ -5,3 +5,6 @@ mod uint;\n pub use float::*;\n pub use int::*;\n pub use uint::*;\n+\n+// Vectors of pointers are not for public use at the current time.\n+pub(crate) mod ptr;"}, {"sha": "30bef038b333bdcdeb112c4d5669dd6fca0c321f", "filename": "crates/core_simd/src/vector/ptr.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ba19577f1c463b4482a6a5759a9475006e50dd/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs?ref=b5ba19577f1c463b4482a6a5759a9475006e50dd", "patch": "@@ -0,0 +1,55 @@\n+//! Private implementation details of public gather/scatter APIs.\n+use crate::SimdUsize;\n+use core::mem;\n+\n+/// A vector of *const T.\n+#[derive(Debug, Copy, Clone)]\n+#[repr(simd)]\n+pub(crate) struct SimdConstPtr<T, const LANES: usize>([*const T; LANES]);\n+\n+impl<T, const LANES: usize> SimdConstPtr<T, LANES>\n+where\n+    SimdUsize<LANES>: crate::LanesAtMost32,\n+    T: Sized,\n+{\n+    #[inline]\n+    #[must_use]\n+    pub fn splat(ptr: *const T) -> Self {\n+        Self([ptr; LANES])\n+    }\n+\n+    #[inline]\n+    #[must_use]\n+    pub fn wrapping_add(self, addend: SimdUsize<LANES>) -> Self {\n+        unsafe {\n+            let x: SimdUsize<LANES> = mem::transmute_copy(&self);\n+            mem::transmute_copy(&{ x + (addend * mem::size_of::<T>()) })\n+        }\n+    }\n+}\n+\n+/// A vector of *mut T. Be very careful around potential aliasing.\n+#[derive(Debug, Copy, Clone)]\n+#[repr(simd)]\n+pub(crate) struct SimdMutPtr<T, const LANES: usize>([*mut T; LANES]);\n+\n+impl<T, const LANES: usize> SimdMutPtr<T, LANES>\n+where\n+    SimdUsize<LANES>: crate::LanesAtMost32,\n+    T: Sized,\n+{\n+    #[inline]\n+    #[must_use]\n+    pub fn splat(ptr: *mut T) -> Self {\n+        Self([ptr; LANES])\n+    }\n+\n+    #[inline]\n+    #[must_use]\n+    pub fn wrapping_add(self, addend: SimdUsize<LANES>) -> Self {\n+        unsafe {\n+            let x: SimdUsize<LANES> = mem::transmute_copy(&self);\n+            mem::transmute_copy(&{ x + (addend * mem::size_of::<T>()) })\n+        }\n+    }\n+}"}]}