{"sha": "66b5e2212ddc33c437c3dc130ffe081c81d5b551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjVlMjIxMmRkYzMzYzQzN2MzZGMxMzBmZmUwODFjODFkNWI1NTE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-01-22T16:06:13Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-02-12T08:34:26Z"}, "message": "Add Clippy Test to GHA", "tree": {"sha": "581cdf24e25da04837c6ee6427078a7f91909035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/581cdf24e25da04837c6ee6427078a7f91909035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b5e2212ddc33c437c3dc130ffe081c81d5b551", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl5DuJIACgkQaTCGhp1Q\nZjc3Xg/+O2Ly7m2nW/otTZuh9KDvJxGHmwNEtW/BUcIJRted3WY9q5V+ASD6Ry9L\nPfsUg1CjZcNUG9w5vFiY/WE5FSOSG8l+m4utlKGhrQKpHwFpJ2+pIOdRMtauYt1z\nWY67rTu/WGsKd05R7IcHFvxvZMTN/S15+QYpWBh7EYkriIAOEqxvQQe0UeQpqj04\nAYjnMBUvHF92RPeLQWCAKWFem42fBIzZejYs1fCceBfSrdzU3WWSxNWFoRdBL1ZK\nahCDVxUmItPgReTWaIATpmPX4rbyygk4jmYH+ehwtsBDYo1V+ONVv1oKaP+rOqVi\n51w86GJFZPJkPfovt69uZSWS4fiQxsqznPVGD42NH3CDVMhahSOvfYz2/ZYQN2hX\no8emSE7PusmQZbVrjrelK0jd8oV7SSVLG0pz1EEpdBIpuwlNJtN4HwY/REH/UtwJ\nV8QX/hHEnHq0V5hiQQmlwabbSPCXTh6TFCa5nt7MpASPTj+W9nBLvw8RD0T6nuJv\nl9X84BDatMjFAkePyjzaKYJSS5HOqFhnAlZgobqqeJeg8uMIPn56vpOsenw7ZJgu\nQjMNd7We1sDKDEc64CCf4s6fPY/WMF+hol5O8ybaPz5w3nBGt3uoVAW45vcoSltr\nn0cnz/cyWfoYp9MlSUPFReyY+Sy0+QeW3qB0eLpTOg2IOo1MDgY=\n=zHF0\n-----END PGP SIGNATURE-----", "payload": "tree 581cdf24e25da04837c6ee6427078a7f91909035\nparent f5db351a1d502cb65f8807ec2c84f44756099ef3\nauthor flip1995 <hello@philkrones.com> 1579709173 +0100\ncommitter flip1995 <hello@philkrones.com> 1581496466 +0100\n\nAdd Clippy Test to GHA\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b5e2212ddc33c437c3dc130ffe081c81d5b551", "html_url": "https://github.com/rust-lang/rust/commit/66b5e2212ddc33c437c3dc130ffe081c81d5b551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b5e2212ddc33c437c3dc130ffe081c81d5b551/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5db351a1d502cb65f8807ec2c84f44756099ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5db351a1d502cb65f8807ec2c84f44756099ef3", "html_url": "https://github.com/rust-lang/rust/commit/f5db351a1d502cb65f8807ec2c84f44756099ef3"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "ae1148e96cb957f08809f425f1bf66982f280b84", "filename": ".github/workflows/clippy.yml", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/66b5e2212ddc33c437c3dc130ffe081c81d5b551/.github%2Fworkflows%2Fclippy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/66b5e2212ddc33c437c3dc130ffe081c81d5b551/.github%2Fworkflows%2Fclippy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy.yml?ref=66b5e2212ddc33c437c3dc130ffe081c81d5b551", "patch": "@@ -0,0 +1,98 @@\n+name: Clippy Test\n+\n+on:\n+  push:\n+    # Ignore bors branches, since they are covered by `clippy_bors.yml`\n+    branches-ignore: [auto, try]\n+    # Don't run Clippy tests, when only textfiles were modified\n+    paths-ignore:\n+    - 'COPYRIGHT'\n+    - 'LICENSE-*'\n+    - '**.md'\n+    - '**.txt'\n+  pull_request:\n+    # Don't run Clippy tests, when only textfiles were modified\n+    paths-ignore:\n+    - 'COPYRIGHT'\n+    - 'LICENSE-*'\n+    - '**.md'\n+    - '**.txt'\n+\n+env:\n+  RUST_BACKTRACE: 1\n+  CARGO_TARGET_DIR: '${{ github.workspace }}/target'\n+  GHA_CI: 1\n+\n+jobs:\n+  base:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - name: rust-toolchain\n+      uses: actions-rs/toolchain@v1.0.3\n+      with:\n+        toolchain: nightly\n+        target: x86_64-unknown-linux-gnu\n+        profile: minimal\n+    - name: Cache cargo dir\n+      uses: actions/cache@v1\n+      with:\n+        path: ~/.cargo\n+        key: ${{ runner.os }}-x86_64-unknown-linux-gnu\n+    - name: Checkout\n+      uses: actions/checkout@v2.0.0\n+    - name: Master Toolchain Setup\n+      run: bash setup-toolchain.sh\n+\n+    - name: Set LD_LIBRARY_PATH (Linux)\n+      run: |\n+        SYSROOT=$(rustc --print sysroot)\n+        echo \"::set-env name=LD_LIBRARY_PATH::${SYSROOT}/lib${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}\"\n+    - name: Build\n+      run: cargo build --features deny-warnings\n+    - name: Test\n+      run: cargo test --features deny-warnings\n+    - name: Test clippy_lints\n+      run: cargo test --features deny-warnings\n+      working-directory: clippy_lints\n+    - name: Test rustc_tools_util\n+      run: cargo test --features deny-warnings\n+      working-directory: rustc_tools_util\n+    - name: Test clippy_dev\n+      run: cargo test --features deny-warnings\n+      working-directory: clippy_dev\n+    - name: Test cargo-clippy\n+      run: ../target/debug/cargo-clippy\n+      working-directory: clippy_workspace_tests\n+    - name: Test clippy-driver\n+      run: |\n+        (\n+          set -ex\n+          # Check sysroot handling\n+          sysroot=$(./target/debug/clippy-driver --print sysroot)\n+          test \"$sysroot\" = \"$(rustc --print sysroot)\"\n+\n+          desired_sysroot=/tmp\n+          sysroot=$(./target/debug/clippy-driver --sysroot $desired_sysroot --print sysroot)\n+          test \"$sysroot\" = $desired_sysroot\n+\n+          sysroot=$(SYSROOT=$desired_sysroot ./target/debug/clippy-driver --print sysroot)\n+          test \"$sysroot\" = $desired_sysroot\n+\n+          # Make sure this isn't set - clippy-driver should cope without it\n+          unset CARGO_MANIFEST_DIR\n+\n+          # Run a lint and make sure it produces the expected output. It's also expected to exit with code 1\n+          # FIXME: How to match the clippy invocation in compile-test.rs?\n+          ./target/debug/clippy-driver -Dwarnings -Aunused -Zui-testing --emit metadata --crate-type bin tests/ui/cstring.rs 2> cstring.stderr && exit 1\n+          sed -e 's,tests/ui,$DIR,' -e '/= help/d' cstring.stderr > normalized.stderr\n+          diff normalized.stderr tests/ui/cstring.stderr\n+\n+          # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR\n+        )\n+\n+    - name: Run cargo-cache --autoclean\n+      run: |\n+        cargo install cargo-cache --debug\n+        find ~/.cargo/bin ! -type d -exec strip {} \\;\n+        cargo cache --autoclean"}]}