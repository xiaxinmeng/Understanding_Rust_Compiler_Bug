{"sha": "442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MmY0YTVmMmNhNmY3ZjQwODJjMDk5NjhlMGZkODM2MDFhNTBkMmE=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-08-26T13:01:55Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-08-26T13:16:54Z"}, "message": "Support Win64 context switching\n\nThis patch saves and restores win64's nonvolatile registers.\nThis patch also saves stack information of thread environment\nblock (TEB), which is at %gs:0x08 and %gs:0x10.", "tree": {"sha": "9ad67e23fcc2987c6500414796a36b4c454e7499", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ad67e23fcc2987c6500414796a36b4c454e7499"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "html_url": "https://github.com/rust-lang/rust/commit/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63e53b8af2f37f9eb8eda0087b02f8deba252c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e53b8af2f37f9eb8eda0087b02f8deba252c2f", "html_url": "https://github.com/rust-lang/rust/commit/63e53b8af2f37f9eb8eda0087b02f8deba252c2f"}], "stats": {"total": 122, "additions": 106, "deletions": 16}, "files": [{"sha": "476554bf7f7bec7801bf58332bc5ede4e700cbf2", "filename": "src/libstd/rt/context.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "patch": "@@ -47,6 +47,7 @@ impl Context {\n \n         let fp: *c_void = task_start_wrapper as *c_void;\n         let argp: *c_void = unsafe { transmute::<&~fn(), *c_void>(&*start) };\n+        let stack_base: *uint = stack.start();\n         let sp: *uint = stack.end();\n         let sp: *mut uint = unsafe { transmute_mut_unsafe(sp) };\n         // Save and then immediately load the current context,\n@@ -56,7 +57,7 @@ impl Context {\n             swap_registers(transmute_mut_region(&mut *regs), transmute_region(&*regs));\n         };\n \n-        initialize_call_frame(&mut *regs, fp, argp, sp);\n+        initialize_call_frame(&mut *regs, fp, argp, sp, stack_base);\n \n         return Context {\n             start: Some(start),\n@@ -107,7 +108,8 @@ fn new_regs() -> ~Registers {\n }\n \n #[cfg(target_arch = \"x86\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, _stack_base: *uint) {\n \n     let sp = align_down(sp);\n     let sp = mut_offset(sp, -4);\n@@ -123,21 +125,41 @@ fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp:\n     regs.ebp = 0;\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(windows, target_arch = \"x86_64\")]\n+type Registers = [uint, ..34];\n+#[cfg(not(windows), target_arch = \"x86_64\")]\n type Registers = [uint, ..22];\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(windows, target_arch = \"x86_64\")]\n+fn new_regs() -> ~Registers { ~([0, .. 34]) }\n+#[cfg(not(windows), target_arch = \"x86_64\")]\n fn new_regs() -> ~Registers { ~([0, .. 22]) }\n \n #[cfg(target_arch = \"x86_64\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, stack_base: *uint) {\n \n     // Redefinitions from regs.h\n     static RUSTRT_ARG0: uint = 3;\n     static RUSTRT_RSP: uint = 1;\n     static RUSTRT_IP: uint = 8;\n     static RUSTRT_RBP: uint = 2;\n \n+    #[cfg(windows)]\n+    fn initialize_tib(regs: &mut Registers, sp: *mut uint, stack_base: *uint) {\n+        // Redefinitions from regs.h\n+        static RUSTRT_ST1: uint = 11; // stack bottom\n+        static RUSTRT_ST2: uint = 12; // stack top\n+        regs[RUSTRT_ST1] = sp as uint;\n+        regs[RUSTRT_ST2] = stack_base as uint;\n+    }\n+    #[cfg(not(windows))]\n+    fn initialize_tib(_: &mut Registers, _: *mut uint, _: *uint) {\n+    }\n+\n+    // Win64 manages stack range at TIB: %gs:0x08 (top) and %gs:0x10 (bottom)\n+    initialize_tib(regs, sp, stack_base);\n+\n     let sp = align_down(sp);\n     let sp = mut_offset(sp, -1);\n \n@@ -164,7 +186,8 @@ type Registers = [uint, ..32];\n fn new_regs() -> ~Registers { ~([0, .. 32]) }\n \n #[cfg(target_arch = \"arm\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, _stack_base: *uint) {\n     let sp = align_down(sp);\n     // sp of arm eabi is 8-byte aligned\n     let sp = mut_offset(sp, -2);\n@@ -184,7 +207,8 @@ type Registers = [uint, ..32];\n fn new_regs() -> ~Registers { ~([0, .. 32]) }\n \n #[cfg(target_arch = \"mips\")]\n-fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void,\n+                         sp: *mut uint, _stack_base: *uint) {\n     let sp = align_down(sp);\n     // sp of mips o32 is 8-byte aligned\n     let sp = mut_offset(sp, -2);"}, {"sha": "857fe91c9141b85c1603cedf69433ffa78317eba", "filename": "src/rt/arch/x86_64/_context.S", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a/src%2Frt%2Farch%2Fx86_64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a/src%2Frt%2Farch%2Fx86_64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2F_context.S?ref=442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "patch": "@@ -86,16 +86,40 @@ SWAP_REGISTERS:\n         mov %r14, (RUSTRT_R14*8)(ARG0)\n         mov %r15, (RUSTRT_R15*8)(ARG0)\n \n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        mov %rdi, (RUSTRT_RDI*8)(ARG0)\n+        mov %rsi, (RUSTRT_RSI*8)(ARG0)\n+\n+        // Save stack range\n+        mov %gs:0x08, %r8\n+        mov %r8, (RUSTRT_ST1*8)(ARG0)\n+        mov %gs:0x10, %r9\n+        mov %r9, (RUSTRT_ST2*8)(ARG0)\n+#endif\n+\n         // Save 0th argument register:\n         mov ARG0, (RUSTRT_ARG0*8)(ARG0)\n \n         // Save non-volatile XMM registers:\n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        movapd %xmm6, (RUSTRT_XMM6*8)(ARG0)\n+        movapd %xmm7, (RUSTRT_XMM7*8)(ARG0)\n+        movapd %xmm8, (RUSTRT_XMM8*8)(ARG0)\n+        movapd %xmm9, (RUSTRT_XMM9*8)(ARG0)\n+        movapd %xmm10, (RUSTRT_XMM10*8)(ARG0)\n+        movapd %xmm11, (RUSTRT_XMM11*8)(ARG0)\n+        movapd %xmm12, (RUSTRT_XMM12*8)(ARG0)\n+        movapd %xmm13, (RUSTRT_XMM13*8)(ARG0)\n+        movapd %xmm14, (RUSTRT_XMM14*8)(ARG0)\n+        movapd %xmm15, (RUSTRT_XMM15*8)(ARG0)\n+#else\n         movapd %xmm0, (RUSTRT_XMM0*8)(ARG0)\n         movapd %xmm1, (RUSTRT_XMM1*8)(ARG0)\n         movapd %xmm2, (RUSTRT_XMM2*8)(ARG0)\n         movapd %xmm3, (RUSTRT_XMM3*8)(ARG0)\n         movapd %xmm4, (RUSTRT_XMM4*8)(ARG0)\n         movapd %xmm5, (RUSTRT_XMM5*8)(ARG0)\n+#endif\n \n         // Restore non-volatile integer registers:\n         //   (including RSP)\n@@ -107,16 +131,40 @@ SWAP_REGISTERS:\n         mov (RUSTRT_R14*8)(ARG1), %r14\n         mov (RUSTRT_R15*8)(ARG1), %r15\n \n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        mov (RUSTRT_RDI*8)(ARG1), %rdi\n+        mov (RUSTRT_RSI*8)(ARG1), %rsi\n+\n+        // Restore stack range\n+        mov (RUSTRT_ST1*8)(ARG1), %r8\n+        mov %r8, %gs:0x08\n+        mov (RUSTRT_ST2*8)(ARG1), %r9\n+        mov %r9, %gs:0x10\n+#endif\n+\n         // Restore 0th argument register:\n         mov (RUSTRT_ARG0*8)(ARG1), ARG0\n \n         // Restore non-volatile XMM registers:\n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+        movapd (RUSTRT_XMM6*8)(ARG1), %xmm6\n+        movapd (RUSTRT_XMM7*8)(ARG1), %xmm7\n+        movapd (RUSTRT_XMM8*8)(ARG1), %xmm8\n+        movapd (RUSTRT_XMM9*8)(ARG1), %xmm9\n+        movapd (RUSTRT_XMM10*8)(ARG1), %xmm10\n+        movapd (RUSTRT_XMM11*8)(ARG1), %xmm11\n+        movapd (RUSTRT_XMM12*8)(ARG1), %xmm12\n+        movapd (RUSTRT_XMM13*8)(ARG1), %xmm13\n+        movapd (RUSTRT_XMM14*8)(ARG1), %xmm14\n+        movapd (RUSTRT_XMM15*8)(ARG1), %xmm15\n+#else\n         movapd (RUSTRT_XMM0*8)(ARG1), %xmm0\n         movapd (RUSTRT_XMM1*8)(ARG1), %xmm1\n         movapd (RUSTRT_XMM2*8)(ARG1), %xmm2\n         movapd (RUSTRT_XMM3*8)(ARG1), %xmm3\n         movapd (RUSTRT_XMM4*8)(ARG1), %xmm4\n         movapd (RUSTRT_XMM5*8)(ARG1), %xmm5\n+#endif\n \n         // Jump to the instruction pointer\n         // found in regs:"}, {"sha": "cff47ac378af0e192a739b9382206865263ed52c", "filename": "src/rt/arch/x86_64/regs.h", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "raw_url": "https://github.com/rust-lang/rust/raw/442f4a5f2ca6f7f4082c09968e0fd83601a50d2a/src%2Frt%2Farch%2Fx86_64%2Fregs.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fregs.h?ref=442f4a5f2ca6f7f4082c09968e0fd83601a50d2a", "patch": "@@ -18,15 +18,33 @@\n #define RUSTRT_R14   6\n #define RUSTRT_R15   7\n #define RUSTRT_IP    8\n-// Not used, just padding\n-#define RUSTRT_XXX   9\n-#define RUSTRT_XMM0 10\n-#define RUSTRT_XMM1 12\n-#define RUSTRT_XMM2 14\n-#define RUSTRT_XMM3 16\n-#define RUSTRT_XMM4 18\n-#define RUSTRT_XMM5 20\n-#define RUSTRT_MAX  22\n+#if defined(__MINGW32__) || defined(_WINDOWS)\n+    #define RUSTRT_RDI   9\n+    #define RUSTRT_RSI   10\n+    #define RUSTRT_ST1   11\n+    #define RUSTRT_ST2   12\n+    #define RUSTRT_XMM6  14\n+    #define RUSTRT_XMM7  16\n+    #define RUSTRT_XMM8  18\n+    #define RUSTRT_XMM9  20\n+    #define RUSTRT_XMM10 22\n+    #define RUSTRT_XMM11 24\n+    #define RUSTRT_XMM12 26\n+    #define RUSTRT_XMM13 28\n+    #define RUSTRT_XMM14 30\n+    #define RUSTRT_XMM15 32\n+    #define RUSTRT_MAX   34\n+#else\n+    // Not used, just padding\n+    #define RUSTRT_XXX   9\n+    #define RUSTRT_XMM0 10\n+    #define RUSTRT_XMM1 12\n+    #define RUSTRT_XMM2 14\n+    #define RUSTRT_XMM3 16\n+    #define RUSTRT_XMM4 18\n+    #define RUSTRT_XMM5 20\n+    #define RUSTRT_MAX  22\n+#endif\n \n // ARG0 is the register in which the first argument goes.\n // Naturally this depends on your operating system."}]}