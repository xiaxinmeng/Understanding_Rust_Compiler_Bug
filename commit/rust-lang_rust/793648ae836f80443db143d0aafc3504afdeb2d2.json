{"sha": "793648ae836f80443db143d0aafc3504afdeb2d2", "node_id": "C_kwDOAAsO6NoAKDc5MzY0OGFlODM2ZjgwNDQzZGIxNDNkMGFhZmMzNTA0YWZkZWIyZDI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-09T04:02:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-09T04:02:19Z"}, "message": "Rollup merge of #91042 - Kobzol:vec-extend-cleanup, r=nagisa\n\nUse Vec extend instead of repeated pushes on several places\n\nInspired by https://github.com/rust-lang/rust/pull/90813, I tried to use a simple regex (`for .*in.*\\{\\n.*push\\(.*\\);\\n\\s+}`) to search for more places that would use `Vec::push` in a loop and replace them with `Vec::extend`.\n\nThese probably won't have as much perf. impact as the original PR (if any), but it would probably be better to do a perf run to see if there are not any regressions.", "tree": {"sha": "909832ce961ed534d96eb6ec18e6fcad7704a4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/909832ce961ed534d96eb6ec18e6fcad7704a4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/793648ae836f80443db143d0aafc3504afdeb2d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhsX/MCRBK7hj4Ov3rIwAAs4MIAH6aXkBZB/M8x1zCfgrsogwx\n7ICxbgNGTf7H1NugDWpDL2drMeb3mRvJ5lyOWq3c4UxDhB5B7duATGNK+yrO3U6Q\n3DtFgU1mBdDYTQ+iE6gL+oKz2MlgfI+o0NV3wYZwdftd9EUHl5pYYclGp/GFOzY7\nMIp++ZMklOLGMfBQhaltRGmApn29j1qwo+acMaD8O2yiPFKJHj1WSA/8Uu/gXyfn\nFSGHResMGKZJbO1yE8cmzPF3WpJKPoylX5hQaNMgp5AZDQBm0S1rxBO2MRgcS5Hm\nvNeGG3kEqyI/UvHpwv5OU+Z58ES5XIFKdHPZqkLSe/WQ49KYruCSl4U+LEc9fcM=\n=CLf1\n-----END PGP SIGNATURE-----\n", "payload": "tree 909832ce961ed534d96eb6ec18e6fcad7704a4e7\nparent e6b883c74f49f32cb5d1cbad3457f2b8805a4a38\nparent 883d0a7aa541abc900e2b597e847bd3140263df4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639022539 +0100\ncommitter GitHub <noreply@github.com> 1639022539 +0100\n\nRollup merge of #91042 - Kobzol:vec-extend-cleanup, r=nagisa\n\nUse Vec extend instead of repeated pushes on several places\n\nInspired by https://github.com/rust-lang/rust/pull/90813, I tried to use a simple regex (`for .*in.*\\{\\n.*push\\(.*\\);\\n\\s+}`) to search for more places that would use `Vec::push` in a loop and replace them with `Vec::extend`.\n\nThese probably won't have as much perf. impact as the original PR (if any), but it would probably be better to do a perf run to see if there are not any regressions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/793648ae836f80443db143d0aafc3504afdeb2d2", "html_url": "https://github.com/rust-lang/rust/commit/793648ae836f80443db143d0aafc3504afdeb2d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/793648ae836f80443db143d0aafc3504afdeb2d2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38", "html_url": "https://github.com/rust-lang/rust/commit/e6b883c74f49f32cb5d1cbad3457f2b8805a4a38"}, {"sha": "883d0a7aa541abc900e2b597e847bd3140263df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/883d0a7aa541abc900e2b597e847bd3140263df4", "html_url": "https://github.com/rust-lang/rust/commit/883d0a7aa541abc900e2b597e847bd3140263df4"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "01e72a6c1588d6393bb9a9d148509baee1a44cd3", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=793648ae836f80443db143d0aafc3504afdeb2d2", "patch": "@@ -329,9 +329,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     fn mir_to_initial_sorted_coverage_spans(&self) -> Vec<CoverageSpan> {\n         let mut initial_spans = Vec::<CoverageSpan>::with_capacity(self.mir_body.num_nodes() * 2);\n         for (bcb, bcb_data) in self.basic_coverage_blocks.iter_enumerated() {\n-            for coverage_span in self.bcb_to_initial_coverage_spans(bcb, bcb_data) {\n-                initial_spans.push(coverage_span);\n-            }\n+            initial_spans.extend(self.bcb_to_initial_coverage_spans(bcb, bcb_data));\n         }\n \n         if initial_spans.is_empty() {"}, {"sha": "aec9da9f8d4f8e534c3ce7344f5c960f80e44325", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=793648ae836f80443db143d0aafc3504afdeb2d2", "patch": "@@ -498,9 +498,7 @@ fn orphan_check_trait_ref<'tcx>(\n             return Err(OrphanCheckErr::UncoveredTy(input_ty, local_type));\n         }\n \n-        for input_ty in non_local_tys {\n-            non_local_spans.push((input_ty, i == 0));\n-        }\n+        non_local_spans.extend(non_local_tys.into_iter().map(|input_ty| (input_ty, i == 0)));\n     }\n     // If we exit above loop, never found a local type.\n     debug!(\"orphan_check_trait_ref: no local type\");"}, {"sha": "4d9559c96af0e9f1b3f24a70971f164d66983887", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=793648ae836f80443db143d0aafc3504afdeb2d2", "patch": "@@ -362,9 +362,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .infcx\n             .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));\n \n-        for predicate_index in result {\n-            candidates.vec.push(ProjectionCandidate(predicate_index));\n-        }\n+        candidates.vec.extend(result.into_iter().map(ProjectionCandidate));\n     }\n \n     /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller"}, {"sha": "2e80f85972fa7afb130e9a89e095d43287bc030c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=793648ae836f80443db143d0aafc3504afdeb2d2", "patch": "@@ -686,9 +686,8 @@ fn bounds_from_generic_predicates<'tcx>(\n     };\n     let mut where_clauses = vec![];\n     for (ty, bounds) in types {\n-        for bound in &bounds {\n-            where_clauses.push(format!(\"{}: {}\", ty, tcx.def_path_str(*bound)));\n-        }\n+        where_clauses\n+            .extend(bounds.into_iter().map(|bound| format!(\"{}: {}\", ty, tcx.def_path_str(bound))));\n     }\n     for projection in &projections {\n         let p = projection.skip_binder();"}, {"sha": "a98afd1e3e1dc91b534cb82f1035a0740244e653", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/793648ae836f80443db143d0aafc3504afdeb2d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=793648ae836f80443db143d0aafc3504afdeb2d2", "patch": "@@ -904,10 +904,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> MigrationWarningReason {\n         let mut reasons = MigrationWarningReason::default();\n \n-        for auto_trait in auto_trait_reasons {\n-            reasons.auto_traits.push(auto_trait);\n-        }\n-\n+        reasons.auto_traits.extend(auto_trait_reasons);\n         reasons.drop_order = drop_order;\n \n         reasons"}]}