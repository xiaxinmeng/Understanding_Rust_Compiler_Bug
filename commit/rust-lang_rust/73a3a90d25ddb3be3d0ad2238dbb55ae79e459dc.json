{"sha": "73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYTNhOTBkMjVkZGIzYmUzZDBhZDIyMzhkYmI1NWFlNzllNDU5ZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T20:02:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-17T20:02:13Z"}, "message": "Auto merge of #60920 - Manishearth:rollup-p4xp4gk, r=Manishearth\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #60791 (Update books)\n - #60891 (Allow claiming issues with triagebot)\n - #60901 (Handle more string addition cases with appropriate suggestions)\n - #60902 (Prevent Error::type_id overrides)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "010c00a2f10b722cee1ffd7349450594941fc825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/010c00a2f10b722cee1ffd7349450594941fc825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "html_url": "https://github.com/rust-lang/rust/commit/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823a75d9ba34860b9a6712c7a9d35e86e0a88436", "url": "https://api.github.com/repos/rust-lang/rust/commits/823a75d9ba34860b9a6712c7a9d35e86e0a88436", "html_url": "https://github.com/rust-lang/rust/commit/823a75d9ba34860b9a6712c7a9d35e86e0a88436"}, {"sha": "f48f37b052bd2683ff89037001d794f5ffac9e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f48f37b052bd2683ff89037001d794f5ffac9e5b", "html_url": "https://github.com/rust-lang/rust/commit/f48f37b052bd2683ff89037001d794f5ffac9e5b"}], "stats": {"total": 299, "additions": 253, "deletions": 46}, "files": [{"sha": "a0fe307cffcdb2187cfef2bace1998f6592b9bff", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -74,7 +74,9 @@ status_check() {\n     check_dispatch $1 beta nomicon src/doc/nomicon\n     check_dispatch $1 beta reference src/doc/reference\n     check_dispatch $1 beta rust-by-example src/doc/rust-by-example\n-    check_dispatch $1 beta edition-guide src/doc/edition-guide\n+    # Temporarily disabled until\n+    # https://github.com/rust-lang/rust/issues/60459 is fixed.\n+    # check_dispatch $1 beta edition-guide src/doc/edition-guide\n     check_dispatch $1 beta rls src/tools/rls\n     check_dispatch $1 beta rustfmt src/tools/rustfmt\n     check_dispatch $1 beta clippy-driver src/tools/clippy"}, {"sha": "29fe982990e43b9367be0ff47abc82fb2123fd03", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -1 +1 @@\n-Subproject commit db919bc6bb9071566e9c4f05053672133eaac33e\n+Subproject commit 29fe982990e43b9367be0ff47abc82fb2123fd03"}, {"sha": "581c6cccfaf995394ea9dcac362dc8e731c18558", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -1 +1 @@\n-Subproject commit c413d42a207bd082f801ec0137c31b71e4bfed4c\n+Subproject commit 581c6cccfaf995394ea9dcac362dc8e731c18558"}, {"sha": "9858872bd1b7dbba5ec27dc30d34eba00acd7ef9", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -1 +1 @@\n-Subproject commit de3d55f521e657863df45260ebbca1b10527f662\n+Subproject commit 9858872bd1b7dbba5ec27dc30d34eba00acd7ef9"}, {"sha": "c656171b749b7307f21371dd0d3278efee5573b8", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -1 +1 @@\n-Subproject commit fb29b147be4d9a1f8e24aba753a7e1de537abf61\n+Subproject commit c656171b749b7307f21371dd0d3278efee5573b8"}, {"sha": "862b669c395822bb0938781d74f860e5762ad4fb", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -1 +1 @@\n-Subproject commit 2a2de9ce095979978ad7b582daecf94e4070b916\n+Subproject commit 862b669c395822bb0938781d74f860e5762ad4fb"}, {"sha": "811c697b232c611ed754d279ed20643a0c4096f6", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -1 +1 @@\n-Subproject commit 1ff0f8e018838a710ebc0cc1a7bf74ebe73ad9f1\n+Subproject commit 811c697b232c611ed754d279ed20643a0c4096f6"}, {"sha": "3cb727b62b953d59b4360d39aa68b6dc8f157655", "filename": "src/doc/rustc-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-guide?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -1 +1 @@\n-Subproject commit 99e1b1d53656be08654df399fc200584aebb50e4\n+Subproject commit 3cb727b62b953d59b4360d39aa68b6dc8f157655"}, {"sha": "cd207478f8f6f86e5c701df44e4257a01b2d7761", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 60, "deletions": 23, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -305,8 +305,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             };\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n-                                    self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, true, op) {\n+                                    self.check_str_addition(\n+                                        lhs_expr, rhs_expr, lhs_ty, rhs_ty, &mut err, true, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -400,8 +400,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             };\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n-                                    self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, false, op) {\n+                                    self.check_str_addition(\n+                                        lhs_expr, rhs_expr, lhs_ty, rhs_ty, &mut err, false, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -502,9 +502,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         false\n     }\n \n+    /// Provide actionable suggestions when trying to add two strings with incorrect types,\n+    /// like `&str + &str`, `String + String` and `&str + &String`.\n+    ///\n+    /// If this function returns `true` it means a note was printed, so we don't need\n+    /// to print the normal \"implementation of `std::ops::Add` might be missing\" note\n     fn check_str_addition(\n         &self,\n-        expr: &'gcx hir::Expr,\n         lhs_expr: &'gcx hir::Expr,\n         rhs_expr: &'gcx hir::Expr,\n         lhs_ty: Ty<'tcx>,\n@@ -514,45 +518,78 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         op: hir::BinOp,\n     ) -> bool {\n         let source_map = self.tcx.sess.source_map();\n+        let remove_borrow_msg = \"String concatenation appends the string on the right to the \\\n+                                 string on the left and may require reallocation. This \\\n+                                 requires ownership of the string on the left\";\n+\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n                    from a string reference. String concatenation \\\n                    appends the string on the right to the string \\\n                    on the left and may require reallocation. This \\\n                    requires ownership of the string on the left\";\n-        // If this function returns true it means a note was printed, so we don't need\n-        // to print the normal \"implementation of `std::ops::Add` might be missing\" note\n+\n+        let is_std_string = |ty| &format!(\"{:?}\", ty) == \"std::string::String\";\n+\n         match (&lhs_ty.sty, &rhs_ty.sty) {\n-            (&Ref(_, l_ty, _), &Ref(_, r_ty, _))\n-            if l_ty.sty == Str && r_ty.sty == Str => {\n-                if !is_assign {\n-                    err.span_label(op.span,\n-                                   \"`+` can't be used to concatenate two `&str` strings\");\n+            (&Ref(_, l_ty, _), &Ref(_, r_ty, _)) // &str or &String + &str, &String or &&str\n+                if (l_ty.sty == Str || is_std_string(l_ty)) && (\n+                        r_ty.sty == Str || is_std_string(r_ty) ||\n+                        &format!(\"{:?}\", rhs_ty) == \"&&str\"\n+                    ) =>\n+            {\n+                if !is_assign { // Do not supply this message if `&str += &str`\n+                    err.span_label(\n+                        op.span,\n+                        \"`+` cannot be used to concatenate two `&str` strings\",\n+                    );\n                     match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => err.span_suggestion(\n-                            lhs_expr.span,\n-                            msg,\n-                            format!(\"{}.to_owned()\", lstring),\n-                            Applicability::MachineApplicable,\n-                        ),\n+                        Ok(lstring) => {\n+                            err.span_suggestion(\n+                                lhs_expr.span,\n+                                if lstring.starts_with(\"&\") {\n+                                    remove_borrow_msg\n+                                } else {\n+                                    msg\n+                                },\n+                                if lstring.starts_with(\"&\") {\n+                                    // let a = String::new();\n+                                    // let _ = &a + \"bar\";\n+                                    format!(\"{}\", &lstring[1..])\n+                                } else {\n+                                    format!(\"{}.to_owned()\", lstring)\n+                                },\n+                                Applicability::MachineApplicable,\n+                            )\n+                        }\n                         _ => err.help(msg),\n                     };\n                 }\n                 true\n             }\n-            (&Ref(_, l_ty, _), &Adt(..))\n-            if l_ty.sty == Str && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n-                err.span_label(expr.span,\n-                    \"`+` can't be used to concatenate a `&str` with a `String`\");\n+            (&Ref(_, l_ty, _), &Adt(..)) // Handle `&str` & `&String` + `String`\n+                if (l_ty.sty == Str || is_std_string(l_ty)) && is_std_string(rhs_ty) =>\n+            {\n+                err.span_label(\n+                    op.span,\n+                    \"`+` cannot be used to concatenate a `&str` with a `String`\",\n+                );\n                 match (\n                     source_map.span_to_snippet(lhs_expr.span),\n                     source_map.span_to_snippet(rhs_expr.span),\n                     is_assign,\n                 ) {\n                     (Ok(l), Ok(r), false) => {\n+                        let to_string = if l.starts_with(\"&\") {\n+                            // let a = String::new(); let b = String::new();\n+                            // let _ = &a + b;\n+                            format!(\"{}\", &l[1..])\n+                        } else {\n+                            format!(\"{}.to_owned()\", l)\n+                        };\n                         err.multipart_suggestion(\n                             msg,\n                             vec![\n-                                (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n+                                (lhs_expr.span, to_string),\n                                 (rhs_expr.span, format!(\"&{}\", r)),\n                             ],\n                             Applicability::MachineApplicable,"}, {"sha": "62282006a40248df320c8eedc5c99c37b5b4683c", "filename": "src/libstd/error.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -201,11 +201,19 @@ pub trait Error: Debug + Display {\n     #[unstable(feature = \"error_type_id\",\n                reason = \"this is memory unsafe to override in user code\",\n                issue = \"60784\")]\n-    fn type_id(&self) -> TypeId where Self: 'static {\n+    fn type_id(&self, _: private::Internal) -> TypeId where Self: 'static {\n         TypeId::of::<Self>()\n     }\n }\n \n+mod private {\n+    // This is a hack to prevent `type_id` from being overridden by `Error`\n+    // implementations, since that can enable unsound downcasting.\n+    #[unstable(feature = \"error_type_id\", issue = \"60784\")]\n+    #[derive(Debug)]\n+    pub struct Internal;\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n@@ -575,7 +583,7 @@ impl dyn Error + 'static {\n         let t = TypeId::of::<T>();\n \n         // Get TypeId of the type in the trait object\n-        let boxed = self.type_id();\n+        let boxed = self.type_id(private::Internal);\n \n         // Compare both TypeIds on equality\n         t == boxed"}, {"sha": "3d55267b8e8cf8af2f84c90bc1d7af9b779afcb0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -3497,8 +3497,7 @@ impl<'a> Parser<'a> {\n                     let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);\n                     self.mk_expr(span, binary, ThinVec::new())\n                 }\n-                AssocOp::Assign =>\n-                    self.mk_expr(span, ExprKind::Assign(lhs, rhs), ThinVec::new()),\n+                AssocOp::Assign => self.mk_expr(span, ExprKind::Assign(lhs, rhs), ThinVec::new()),\n                 AssocOp::ObsoleteInPlace =>\n                     self.mk_expr(span, ExprKind::ObsoleteInPlace(lhs, rhs), ThinVec::new()),\n                 AssocOp::AssignOp(k) => {"}, {"sha": "7d11a8c8021283fc54c8c3c89e5ca281a5bbe6f7", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -4,7 +4,7 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n LL |      let _a = b + \", World!\";\n    |               - ^ ---------- &str\n    |               | |\n-   |               | `+` can't be used to concatenate two `&str` strings\n+   |               | `+` cannot be used to concatenate two `&str` strings\n    |               &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |"}, {"sha": "89a154c5109d80e0c4b02c28c77a0ff514205827", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -4,7 +4,7 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n    |                                      - ^ ---------- &str\n    |                                      | |\n-   |                                      | `+` can't be used to concatenate two `&str` strings\n+   |                                      | `+` cannot be used to concatenate two `&str` strings\n    |                                      &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |"}, {"sha": "a3b1d1d81799fce76716f160f2cd95b64ebcfc80", "filename": "src/test/ui/span/issue-39018.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -16,3 +16,23 @@ enum World {\n     Hello,\n     Goodbye,\n }\n+\n+fn foo() {\n+    let a = String::new();\n+    let b = String::new();\n+    let c = \"\";\n+    let d = \"\";\n+    let e = &a;\n+    let _ = &a + &b; //~ ERROR binary operation\n+    let _ = &a + b; //~ ERROR binary operation\n+    let _ = a + &b; // ok\n+    let _ = a + b; //~ ERROR mismatched types\n+    let _ = e + b; //~ ERROR binary operation\n+    let _ = e + &b; //~ ERROR binary operation\n+    let _ = e + d; //~ ERROR binary operation\n+    let _ = e + &d; //~ ERROR binary operation\n+    let _ = &c + &d; //~ ERROR binary operation\n+    let _ = &c + d; //~ ERROR binary operation\n+    let _ = c + &d; //~ ERROR binary operation\n+    let _ = c + d; //~ ERROR binary operation\n+}"}, {"sha": "d8fbf841b6157cd5613248a65fbd22d545e8eb49", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 143, "deletions": 7, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -4,7 +4,7 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n LL |     let x = \"Hello \" + \"World!\";\n    |             -------- ^ -------- &str\n    |             |        |\n-   |             |        `+` can't be used to concatenate two `&str` strings\n+   |             |        `+` cannot be used to concatenate two `&str` strings\n    |             &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n@@ -25,16 +25,152 @@ error[E0369]: binary operation `+` cannot be applied to type `&str`\n   --> $DIR/issue-39018.rs:11:22\n    |\n LL |     let x = \"Hello \" + \"World!\".to_owned();\n-   |             ---------^--------------------\n-   |             |          |\n-   |             |          std::string::String\n+   |             -------- ^ ------------------- std::string::String\n+   |             |        |\n+   |             |        `+` cannot be used to concatenate a `&str` with a `String`\n    |             &str\n-   |             `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:26:16\n+   |\n+LL |     let _ = &a + &b;\n+   |             -- ^ -- &std::string::String\n+   |             |  |\n+   |             |  `+` cannot be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = a + &b;\n+   |             ^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:27:16\n+   |\n+LL |     let _ = &a + b;\n+   |             -- ^ - std::string::String\n+   |             |  |\n+   |             |  `+` cannot be used to concatenate a `&str` with a `String`\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = a + &b;\n+   |             ^   ^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-39018.rs:29:17\n+   |\n+LL |     let _ = a + b;\n+   |                 ^\n+   |                 |\n+   |                 expected &str, found struct `std::string::String`\n+   |                 help: consider borrowing here: `&b`\n+   |\n+   = note: expected type `&str`\n+              found type `std::string::String`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:30:15\n+   |\n+LL |     let _ = e + b;\n+   |             - ^ - std::string::String\n+   |             | |\n+   |             | `+` cannot be used to concatenate a `&str` with a `String`\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + &b;\n+   |             ^^^^^^^^^^^^   ^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:31:15\n+   |\n+LL |     let _ = e + &b;\n+   |             - ^ -- &std::string::String\n+   |             | |\n+   |             | `+` cannot be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + &b;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:32:15\n+   |\n+LL |     let _ = e + d;\n+   |             - ^ - &str\n+   |             | |\n+   |             | `+` cannot be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + d;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+  --> $DIR/issue-39018.rs:33:15\n+   |\n+LL |     let _ = e + &d;\n+   |             - ^ -- &&str\n+   |             | |\n+   |             | `+` cannot be used to concatenate two `&str` strings\n+   |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = e.to_owned() + &d;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&&str`\n+  --> $DIR/issue-39018.rs:34:16\n+   |\n+LL |     let _ = &c + &d;\n+   |             -- ^ -- &&str\n+   |             |\n+   |             &&str\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `&&str`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&&str`\n+  --> $DIR/issue-39018.rs:35:16\n+   |\n+LL |     let _ = &c + d;\n+   |             -- ^ - &str\n+   |             |\n+   |             &&str\n+   |\n+   = note: an implementation of `std::ops::Add` might be missing for `&&str`\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&str`\n+  --> $DIR/issue-39018.rs:36:15\n+   |\n+LL |     let _ = c + &d;\n+   |             - ^ -- &&str\n+   |             | |\n+   |             | `+` cannot be used to concatenate two `&str` strings\n+   |             &str\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = c.to_owned() + &d;\n+   |             ^^^^^^^^^^^^\n+\n+error[E0369]: binary operation `+` cannot be applied to type `&str`\n+  --> $DIR/issue-39018.rs:37:15\n+   |\n+LL |     let _ = c + d;\n+   |             - ^ - &str\n+   |             | |\n+   |             | `+` cannot be used to concatenate two `&str` strings\n+   |             &str\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   |\n+LL |     let _ = c.to_owned() + d;\n+   |             ^^^^^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n \n-For more information about this error, try `rustc --explain E0369`.\n+Some errors have detailed explanations: E0308, E0369.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "3e53cdc4d98ca36c8d9ad606d833cf772704847b", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -3,10 +3,13 @@ error[E0369]: binary operation `+` cannot be applied to type `&std::string::Stri\n    |\n LL |     let c = a + b;\n    |             - ^ - &str\n-   |             |\n+   |             | |\n+   |             | `+` cannot be used to concatenate two `&str` strings\n    |             &std::string::String\n+help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-   = note: an implementation of `std::ops::Add` might be missing for `&std::string::String`\n+LL |     let c = a.to_owned() + b;\n+   |             ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0e703a3ab349d2951a0cc0b914e4499092d0b464", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=73a3a90d25ddb3be3d0ad2238dbb55ae79e459dc", "patch": "@@ -4,3 +4,5 @@ allow-unauthenticated = [\n     # I-* without I-nominated\n     \"I-compilemem\", \"I-compiletime\", \"I-crash\", \"I-hang\", \"I-ICE\", \"I-slow\",\n ]\n+\n+[assign]"}]}