{"sha": "71b8a874e7931e2213e3864e1eae90ceb2551fc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYjhhODc0ZTc5MzFlMjIxM2UzODY0ZTFlYWU5MGNlYjI1NTFmYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-23T12:29:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-23T13:55:18Z"}, "message": "flatten tt", "tree": {"sha": "2880a8d61481d2e63919c6565af548bce9de826b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2880a8d61481d2e63919c6565af548bce9de826b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71b8a874e7931e2213e3864e1eae90ceb2551fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71b8a874e7931e2213e3864e1eae90ceb2551fc2", "html_url": "https://github.com/rust-lang/rust/commit/71b8a874e7931e2213e3864e1eae90ceb2551fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71b8a874e7931e2213e3864e1eae90ceb2551fc2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10deefd3718b5665b4955908e057a48b7ad61464", "url": "https://api.github.com/repos/rust-lang/rust/commits/10deefd3718b5665b4955908e057a48b7ad61464", "html_url": "https://github.com/rust-lang/rust/commit/10deefd3718b5665b4955908e057a48b7ad61464"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "7a4ba9e937b3e263c7b99199361ca045ffa9b2d3", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/71b8a874e7931e2213e3864e1eae90ceb2551fc2/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71b8a874e7931e2213e3864e1eae90ceb2551fc2/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=71b8a874e7931e2213e3864e1eae90ceb2551fc2", "patch": "@@ -1,6 +1,6 @@\n use ra_parser::TokenSource;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TextRange, SyntaxKind,\n+    AstNode, SyntaxNode, TextRange, SyntaxKind, SmolStr,\n     ast, SyntaxKind::*, TextUnit\n };\n \n@@ -91,22 +91,71 @@ fn convert_tt(\n     Some(res)\n }\n \n-struct TtTokenSource;\n+struct TtTokenSource {\n+    tokens: Vec<Tok>,\n+}\n+\n+struct Tok {\n+    kind: SyntaxKind,\n+    is_joint_to_next: bool,\n+    text: Option<SmolStr>,\n+}\n \n impl TtTokenSource {\n     fn new(tt: &tt::Subtree) -> TtTokenSource {\n-        unimplemented!()\n+        let mut res = TtTokenSource { tokens: Vec::new() };\n+        res.convert_subtree(tt);\n+        res\n+    }\n+    fn convert_subtree(&mut self, sub: &tt::Subtree) {\n+        self.push_delim(sub.delimiter, false);\n+        sub.token_trees.iter().for_each(|tt| self.convert_tt(tt));\n+        self.push_delim(sub.delimiter, true)\n+    }\n+    fn convert_tt(&mut self, tt: &tt::TokenTree) {\n+        match tt {\n+            tt::TokenTree::Leaf(leaf) => self.convert_leaf(leaf),\n+            tt::TokenTree::Subtree(sub) => self.convert_subtree(sub),\n+        }\n+    }\n+    fn convert_leaf(&mut self, leaf: &tt::Leaf) {\n+        let tok = match leaf {\n+            tt::Leaf::Literal(l) => Tok {\n+                kind: SyntaxKind::INT_NUMBER, // FIXME\n+                is_joint_to_next: false,\n+                text: Some(l.text.clone()),\n+            },\n+            tt::Leaf::Punct(p) => Tok {\n+                kind: SyntaxKind::from_char(p.char).unwrap(),\n+                is_joint_to_next: p.spacing == tt::Spacing::Joint,\n+                text: None,\n+            },\n+            tt::Leaf::Ident(ident) => {\n+                Tok { kind: IDENT, is_joint_to_next: false, text: Some(ident.text.clone()) }\n+            }\n+        };\n+        self.tokens.push(tok)\n+    }\n+    fn push_delim(&mut self, d: tt::Delimiter, closing: bool) {\n+        let kinds = match d {\n+            tt::Delimiter::Parenthesis => [L_PAREN, R_PAREN],\n+            tt::Delimiter::Brace => [L_CURLY, R_CURLY],\n+            tt::Delimiter::Bracket => [L_BRACK, R_BRACK],\n+            tt::Delimiter::None => return,\n+        };\n+        let tok = Tok { kind: kinds[closing as usize], is_joint_to_next: false, text: None };\n+        self.tokens.push(tok)\n     }\n }\n \n impl TokenSource for TtTokenSource {\n     fn token_kind(&self, pos: usize) -> SyntaxKind {\n-        unimplemented!()\n+        self.tokens[pos].kind\n     }\n     fn is_token_joint_to_next(&self, pos: usize) -> bool {\n-        unimplemented!()\n+        self.tokens[pos].is_joint_to_next\n     }\n     fn is_keyword(&self, pos: usize, kw: &str) -> bool {\n-        unimplemented!()\n+        self.tokens[pos].text.as_ref().map(|it| it.as_str()) == Some(kw)\n     }\n }"}]}