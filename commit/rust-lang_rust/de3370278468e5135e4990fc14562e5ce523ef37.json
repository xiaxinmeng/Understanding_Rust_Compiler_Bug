{"sha": "de3370278468e5135e4990fc14562e5ce523ef37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzM3MDI3ODQ2OGU1MTM1ZTQ5OTBmYzE0NTYyZTVjZTUyM2VmMzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T15:08:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-06T15:08:05Z"}, "message": "feat: show errors from `cargo metadata` and initial `cargo check` in the status bar\n\ncloses #3155", "tree": {"sha": "bd433d92a1a44b9b5bc7a6603b7862ed47c3937b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd433d92a1a44b9b5bc7a6603b7862ed47c3937b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de3370278468e5135e4990fc14562e5ce523ef37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de3370278468e5135e4990fc14562e5ce523ef37", "html_url": "https://github.com/rust-lang/rust/commit/de3370278468e5135e4990fc14562e5ce523ef37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de3370278468e5135e4990fc14562e5ce523ef37/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec5e6e4fdbe893f38d10dbdc609284368efdb64", "html_url": "https://github.com/rust-lang/rust/commit/9ec5e6e4fdbe893f38d10dbdc609284368efdb64"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "0d4d39fefff221fd3e01f1a6b8f9a189b171fd30", "filename": "crates/project_model/src/build_data.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/de3370278468e5135e4990fc14562e5ce523ef37/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3370278468e5135e4990fc14562e5ce523ef37/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fbuild_data.rs?ref=de3370278468e5135e4990fc14562e5ce523ef37", "patch": "@@ -13,7 +13,7 @@ use cargo_metadata::{BuildScript, Message};\n use itertools::Itertools;\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n-use stdx::JodChild;\n+use stdx::{format_to, JodChild};\n \n use crate::{cfg_flag::CfgFlag, CargoConfig};\n \n@@ -35,6 +35,7 @@ pub(crate) struct PackageBuildData {\n #[derive(Debug, Default, PartialEq, Eq, Clone)]\n pub(crate) struct WorkspaceBuildData {\n     per_package: FxHashMap<String, PackageBuildData>,\n+    error: Option<String>,\n }\n \n #[derive(Debug, Default, PartialEq, Eq, Clone)]\n@@ -94,6 +95,19 @@ impl BuildDataResult {\n     pub(crate) fn get(&self, workspace_root: &AbsPath) -> Option<&WorkspaceBuildData> {\n         self.per_workspace.get(workspace_root)\n     }\n+    pub fn error(&self) -> Option<String> {\n+        let mut buf = String::new();\n+        for (_workspace_root, build_data) in &self.per_workspace {\n+            if let Some(err) = &build_data.error {\n+                format_to!(buf, \"cargo check failed:\\n{}\", err);\n+            }\n+        }\n+        if buf.is_empty() {\n+            return None;\n+        }\n+\n+        Some(buf)\n+    }\n }\n \n impl BuildDataConfig {\n@@ -139,7 +153,7 @@ fn collect_from_workspace(\n         }\n     }\n \n-    cmd.stdout(Stdio::piped()).stderr(Stdio::null()).stdin(Stdio::null());\n+    cmd.stdout(Stdio::piped()).stderr(Stdio::piped()).stdin(Stdio::null());\n \n     let mut child = cmd.spawn().map(JodChild)?;\n     let child_stdout = child.stdout.take().unwrap();\n@@ -209,6 +223,15 @@ fn collect_from_workspace(\n         }\n     }\n \n+    let output = child.into_inner().wait_with_output()?;\n+    if !output.status.success() {\n+        let mut stderr = String::from_utf8(output.stderr).unwrap_or_default();\n+        if stderr.is_empty() {\n+            stderr = \"cargo check failed\".to_string();\n+        }\n+        res.error = Some(stderr)\n+    }\n+\n     Ok(res)\n }\n "}, {"sha": "d0cc1b61a155fb53d38fa30ea75b56314552521a", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/de3370278468e5135e4990fc14562e5ce523ef37/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3370278468e5135e4990fc14562e5ce523ef37/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=de3370278468e5135e4990fc14562e5ce523ef37", "patch": "@@ -109,16 +109,22 @@ impl GlobalState {\n             quiescent: self.is_quiescent(),\n             message: None,\n         };\n+\n+        if let Some(error) = self.build_data_error() {\n+            status.health = lsp_ext::Health::Warning;\n+            status.message = Some(error)\n+        }\n         if !self.config.cargo_autoreload()\n             && self.is_quiescent()\n             && self.fetch_workspaces_queue.op_requested()\n         {\n             status.health = lsp_ext::Health::Warning;\n             status.message = Some(\"Workspace reload required\".to_string())\n         }\n-        if let Some(error) = self.loading_error() {\n+\n+        if let Some(error) = self.fetch_workspace_error() {\n             status.health = lsp_ext::Health::Error;\n-            status.message = Some(format!(\"Workspace reload failed: {}\", error))\n+            status.message = Some(error)\n         }\n \n         if self.last_reported_status.as_ref() != Some(&status) {\n@@ -217,14 +223,19 @@ impl GlobalState {\n         let _p = profile::span(\"GlobalState::switch_workspaces\");\n         log::info!(\"will switch workspaces\");\n \n-        if let Some(error_message) = self.loading_error() {\n+        if let Some(error_message) = self.fetch_workspace_error() {\n             log::error!(\"failed to switch workspaces: {}\", error_message);\n             self.show_message(lsp_types::MessageType::Error, error_message);\n             if !self.workspaces.is_empty() {\n                 return;\n             }\n         }\n \n+        if let Some(error_message) = self.build_data_error() {\n+            log::error!(\"failed to switch build data: {}\", error_message);\n+            self.show_message(lsp_types::MessageType::Error, error_message);\n+        }\n+\n         let workspaces = self\n             .fetch_workspaces_queue\n             .last_op_result()\n@@ -343,22 +354,30 @@ impl GlobalState {\n         log::info!(\"did switch workspaces\");\n     }\n \n-    fn loading_error(&self) -> Option<String> {\n-        let mut message = None;\n+    fn fetch_workspace_error(&self) -> Option<String> {\n+        let mut buf = String::new();\n \n         for ws in self.fetch_workspaces_queue.last_op_result() {\n             if let Err(err) = ws {\n-                let message = message.get_or_insert_with(String::new);\n-                stdx::format_to!(message, \"rust-analyzer failed to load workspace: {:#}\\n\", err);\n+                stdx::format_to!(buf, \"rust-analyzer failed to load workspace: {:#}\\n\", err);\n             }\n         }\n \n-        if let Some(Err(err)) = self.fetch_build_data_queue.last_op_result() {\n-            let message = message.get_or_insert_with(String::new);\n-            stdx::format_to!(message, \"rust-analyzer failed to fetch build data: {:#}\\n\", err);\n+        if buf.is_empty() {\n+            return None;\n         }\n \n-        message\n+        Some(buf)\n+    }\n+\n+    fn build_data_error(&self) -> Option<String> {\n+        match self.fetch_build_data_queue.last_op_result() {\n+            Some(Err(err)) => {\n+                Some(format!(\"rust-analyzer failed to fetch build data: {:#}\\n\", err))\n+            }\n+            Some(Ok(data)) => data.error(),\n+            None => None,\n+        }\n     }\n \n     fn reload_flycheck(&mut self) {"}, {"sha": "b0a18d58de87e699fa32f61cfc0dd9d342661d9a", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de3370278468e5135e4990fc14562e5ce523ef37/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3370278468e5135e4990fc14562e5ce523ef37/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=de3370278468e5135e4990fc14562e5ce523ef37", "patch": "@@ -178,6 +178,7 @@ where\n     start..start + len\n }\n \n+#[repr(transparent)]\n pub struct JodChild(pub process::Child);\n \n impl ops::Deref for JodChild {\n@@ -200,6 +201,13 @@ impl Drop for JodChild {\n     }\n }\n \n+impl JodChild {\n+    pub fn into_inner(self) -> process::Child {\n+        // SAFETY: repr transparent\n+        unsafe { std::mem::transmute::<JodChild, process::Child>(self) }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}