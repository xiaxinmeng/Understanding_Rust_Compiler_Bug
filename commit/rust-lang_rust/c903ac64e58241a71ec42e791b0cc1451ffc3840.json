{"sha": "c903ac64e58241a71ec42e791b0cc1451ffc3840", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDNhYzY0ZTU4MjQxYTcxZWM0MmU3OTFiMGNjMTQ1MWZmYzM4NDA=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-04-20T22:12:42Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-04-21T04:16:31Z"}, "message": "Remove num::{Zero,One}\n\n[unstable, deprecated since 1.11.0]", "tree": {"sha": "82e191ca7c8c27ecb90c19b24db798625fa678f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e191ca7c8c27ecb90c19b24db798625fa678f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c903ac64e58241a71ec42e791b0cc1451ffc3840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c903ac64e58241a71ec42e791b0cc1451ffc3840", "html_url": "https://github.com/rust-lang/rust/commit/c903ac64e58241a71ec42e791b0cc1451ffc3840", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c903ac64e58241a71ec42e791b0cc1451ffc3840/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "313aab8fbeb98730f8ffa741ccf54f843d5e3525", "url": "https://api.github.com/repos/rust-lang/rust/commits/313aab8fbeb98730f8ffa741ccf54f843d5e3525", "html_url": "https://github.com/rust-lang/rust/commit/313aab8fbeb98730f8ffa741ccf54f843d5e3525"}], "stats": {"total": 125, "additions": 26, "deletions": 99}, "files": [{"sha": "48659413cad0090e9d1af1adce9836d3b5887a2a", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=c903ac64e58241a71ec42e791b0cc1451ffc3840", "patch": "@@ -217,5 +217,3 @@\n     - [windows_handle](library-features/windows-handle.md)\n     - [windows_net](library-features/windows-net.md)\n     - [windows_stdio](library-features/windows-stdio.md)\n-    - [zero_one](library-features/zero-one.md)\n->>>>>> Add top level sections to the Unstable Book."}, {"sha": "4d1cf38c3c2ea6205823e9c8c461f734afe51a2d", "filename": "src/doc/unstable-book/src/library-features/zero-one.md", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/313aab8fbeb98730f8ffa741ccf54f843d5e3525/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fzero-one.md", "raw_url": "https://github.com/rust-lang/rust/raw/313aab8fbeb98730f8ffa741ccf54f843d5e3525/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fzero-one.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fzero-one.md?ref=313aab8fbeb98730f8ffa741ccf54f843d5e3525", "patch": "@@ -1,7 +0,0 @@\n-# `zero_one`\n-\n-The tracking issue for this feature is: [#27739]\n-\n-[#27739]: https://github.com/rust-lang/rust/issues/27739\n-\n-------------------------"}, {"sha": "4ca303dee43f2ad600237d82680c0a6ddfa6d0f7", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=c903ac64e58241a71ec42e791b0cc1451ffc3840", "patch": "@@ -15,16 +15,16 @@\n // FIXME: #6220 Implement floating point formatting\n \n use fmt;\n-use num::Zero;\n use ops::{Div, Rem, Sub};\n use str;\n use slice;\n use ptr;\n use mem;\n \n #[doc(hidden)]\n-trait Int: Zero + PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n+trait Int: PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n            Sub<Output=Self> + Copy {\n+    fn zero() -> Self;\n     fn from_u8(u: u8) -> Self;\n     fn to_u8(&self) -> u8;\n     fn to_u16(&self) -> u16;\n@@ -35,6 +35,7 @@ trait Int: Zero + PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n \n macro_rules! doit {\n     ($($t:ident)*) => ($(impl Int for $t {\n+        fn zero() -> $t { 0 }\n         fn from_u8(u: u8) -> $t { u as $t }\n         fn to_u8(&self) -> u8 { *self as u8 }\n         fn to_u16(&self) -> u16 { *self as u16 }"}, {"sha": "1e25d45bfbb5129091ca0987fdbb7abd82b82846", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c903ac64e58241a71ec42e791b0cc1451ffc3840", "patch": "@@ -96,78 +96,6 @@ pub mod dec2flt;\n pub mod bignum;\n pub mod diy_float;\n \n-/// Types that have a \"zero\" value.\n-///\n-/// This trait is intended for use in conjunction with `Add`, as an identity:\n-/// `x + T::zero() == x`.\n-#[unstable(feature = \"zero_one\",\n-           reason = \"unsure of placement, wants to use associated constants\",\n-           issue = \"27739\")]\n-#[rustc_deprecated(since = \"1.11.0\", reason = \"no longer used for \\\n-                                               Iterator::sum\")]\n-pub trait Zero: Sized {\n-    /// The \"zero\" (usually, additive identity) for this type.\n-    fn zero() -> Self;\n-}\n-\n-/// Types that have a \"one\" value.\n-///\n-/// This trait is intended for use in conjunction with `Mul`, as an identity:\n-/// `x * T::one() == x`.\n-#[unstable(feature = \"zero_one\",\n-           reason = \"unsure of placement, wants to use associated constants\",\n-           issue = \"27739\")]\n-#[rustc_deprecated(since = \"1.11.0\", reason = \"no longer used for \\\n-                                               Iterator::product\")]\n-pub trait One: Sized {\n-    /// The \"one\" (usually, multiplicative identity) for this type.\n-    fn one() -> Self;\n-}\n-\n-macro_rules! zero_one_impl {\n-    ($($t:ty)*) => ($(\n-        #[unstable(feature = \"zero_one\",\n-                   reason = \"unsure of placement, wants to use associated constants\",\n-                   issue = \"27739\")]\n-        #[allow(deprecated)]\n-        impl Zero for $t {\n-            #[inline]\n-            fn zero() -> Self { 0 }\n-        }\n-        #[unstable(feature = \"zero_one\",\n-                   reason = \"unsure of placement, wants to use associated constants\",\n-                   issue = \"27739\")]\n-        #[allow(deprecated)]\n-        impl One for $t {\n-            #[inline]\n-            fn one() -> Self { 1 }\n-        }\n-    )*)\n-}\n-zero_one_impl! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n-\n-macro_rules! zero_one_impl_float {\n-    ($($t:ty)*) => ($(\n-        #[unstable(feature = \"zero_one\",\n-                   reason = \"unsure of placement, wants to use associated constants\",\n-                   issue = \"27739\")]\n-        #[allow(deprecated)]\n-        impl Zero for $t {\n-            #[inline]\n-            fn zero() -> Self { 0.0 }\n-        }\n-        #[unstable(feature = \"zero_one\",\n-                   reason = \"unsure of placement, wants to use associated constants\",\n-                   issue = \"27739\")]\n-        #[allow(deprecated)]\n-        impl One for $t {\n-            #[inline]\n-            fn one() -> Self { 1.0 }\n-        }\n-    )*)\n-}\n-zero_one_impl_float! { f32 f64 }\n-\n macro_rules! checked_op {\n     ($U:ty, $op:path, $x:expr, $y:expr) => {{\n         let (result, overflowed) = unsafe { $op($x as $U, $y as $U) };"}, {"sha": "28b94107c425abb3e5f12409f85eebc163365e14", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c903ac64e58241a71ec42e791b0cc1451ffc3840", "patch": "@@ -318,7 +318,6 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n-#![feature(zero_one)]\n #![cfg_attr(test, feature(update_panic_count))]\n #![cfg_attr(stage0, feature(pub_restricted))]\n #![cfg_attr(test, feature(float_bits_conv))]"}, {"sha": "ff89887ac92c3c59369a75ffcf5e9df20d3f224e", "filename": "src/libstd/num.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibstd%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Flibstd%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum.rs?ref=c903ac64e58241a71ec42e791b0cc1451ffc3840", "patch": "@@ -16,9 +16,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(deprecated)]\n-pub use core::num::{Zero, One};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::num::{FpCategory, ParseIntError, ParseFloatError, TryFromIntError};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "17ea5b9a79489855c314adc38a5f985f53c5f5d5", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c903ac64e58241a71ec42e791b0cc1451ffc3840/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=c903ac64e58241a71ec42e791b0cc1451ffc3840", "patch": "@@ -9,11 +9,22 @@\n // except according to those terms.\n \n // ignore-emscripten no threads support\n-#![feature(rustc_attrs, zero_one)]\n+#![feature(rustc_attrs)]\n \n-use std::num::Zero;\n use std::thread;\n \n+trait Int {\n+    fn zero() -> Self;\n+    fn one() -> Self;\n+}\n+macro_rules! doit {\n+    ($($t:ident)*) => ($(impl Int for $t {\n+        fn zero() -> $t { 0 }\n+        fn one() -> $t { 1 }\n+    })*)\n+}\n+doit! { i8 i16 i32 i64 isize }\n+\n macro_rules! check {\n     ($($e:expr),*) => {\n         $(assert!(thread::spawn({\n@@ -24,21 +35,21 @@ macro_rules! check {\n \n fn main() {\n     check![\n-        isize::min_value() / -1,\n-        i8::min_value() / -1,\n-        i16::min_value() / -1,\n-        i32::min_value() / -1,\n-        i64::min_value() / -1,\n+        isize::min_value() / -isize::one(),\n+        i8::min_value() / -i8::one(),\n+        i16::min_value() / -i16::one(),\n+        i32::min_value() / -i32::one(),\n+        i64::min_value() / -i64::one(),\n         1isize / isize::zero(),\n         1i8 / i8::zero(),\n         1i16 / i16::zero(),\n         1i32 / i32::zero(),\n         1i64 / i64::zero(),\n-        isize::min_value() % -1,\n-        i8::min_value() % -1,\n-        i16::min_value() % -1,\n-        i32::min_value() % -1,\n-        i64::min_value() % -1,\n+        isize::min_value() % -isize::one(),\n+        i8::min_value() % -i8::one(),\n+        i16::min_value() % -i16::one(),\n+        i32::min_value() % -i32::one(),\n+        i64::min_value() % -i64::one(),\n         1isize % isize::zero(),\n         1i8 % i8::zero(),\n         1i16 % i16::zero(),"}]}