{"sha": "da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa", "node_id": "C_kwDOAAsO6NoAKGRhOWNjYzJjOThhYzRkODhlNWYyYjk0MGI5YjYxZWM2ZDI1ZmFjYWE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-14T15:40:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-22T22:08:42Z"}, "message": "Remove FnItemRibKind.", "tree": {"sha": "acb95f981a854824b26c07c626dc5a8a89a9a08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb95f981a854824b26c07c626dc5a8a89a9a08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa", "html_url": "https://github.com/rust-lang/rust/commit/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e88d738be05637824f581fc9cb59990406bf2ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e88d738be05637824f581fc9cb59990406bf2ba", "html_url": "https://github.com/rust-lang/rust/commit/6e88d738be05637824f581fc9cb59990406bf2ba"}], "stats": {"total": 37, "additions": 10, "deletions": 27}, "files": [{"sha": "41a0c76d83a9539768a276532392e9b8d7853c41", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa", "patch": "@@ -1105,7 +1105,7 @@ impl<'a> Resolver<'a> {\n                         | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                         }\n-                        ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {\n+                        ItemRibKind(_) | AssocItemRibKind => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -1173,7 +1173,6 @@ impl<'a> Resolver<'a> {\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n                         | InlineAsmSymRibKind\n-                        | FnItemRibKind\n                         | AssocItemRibKind\n                         | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n@@ -1236,22 +1235,13 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Res::Def(DefKind::ConstParam, _) => {\n-                let mut ribs = ribs.iter().peekable();\n-                if let Some(Rib { kind: FnItemRibKind, .. }) = ribs.peek() {\n-                    // When declaring const parameters inside function signatures, the first rib\n-                    // is always a `FnItemRibKind`. In this case, we can skip it, to avoid it\n-                    // (spuriously) conflicting with the const param.\n-                    ribs.next();\n-                }\n-\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n                         | InlineAsmSymRibKind\n-                        | FnItemRibKind\n                         | AssocItemRibKind\n                         | ForwardGenericParamBanRibKind => continue,\n "}, {"sha": "693ec86616ee431e3ff70e2bbeeef37228ba70f2", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=da9ccc2c98ac4d88e5f2b940b9b61ec6d25facaa", "patch": "@@ -132,10 +132,6 @@ pub(crate) enum RibKind<'a> {\n     /// We passed through a closure. Disallow labels.\n     ClosureOrAsyncRibKind,\n \n-    /// We passed through a function definition. Disallow upvars.\n-    /// Permit only those const parameters that are specified in the function's generics.\n-    FnItemRibKind,\n-\n     /// We passed through an item scope. Disallow upvars.\n     ItemRibKind(HasGenericParams),\n \n@@ -172,7 +168,6 @@ impl RibKind<'_> {\n         match self {\n             NormalRibKind\n             | ClosureOrAsyncRibKind\n-            | FnItemRibKind\n             | ConstantItemRibKind(..)\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n@@ -189,7 +184,6 @@ impl RibKind<'_> {\n \n             AssocItemRibKind\n             | ClosureOrAsyncRibKind\n-            | FnItemRibKind\n             | ItemRibKind(..)\n             | ConstantItemRibKind(..)\n             | ModuleRibKind(..)\n@@ -793,7 +787,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n     fn visit_fn(&mut self, fn_kind: FnKind<'ast>, sp: Span, fn_id: NodeId) {\n-        let rib_kind = match fn_kind {\n+        let previous_value = self.diagnostic_metadata.current_function;\n+        match fn_kind {\n             // Bail if the function is foreign, and thus cannot validly have\n             // a body, or if there's no body for some other reason.\n             FnKind::Fn(FnCtxt::Foreign, _, sig, _, generics, _)\n@@ -816,20 +811,18 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 );\n                 return;\n             }\n-            FnKind::Fn(FnCtxt::Free, ..) => FnItemRibKind,\n-            FnKind::Fn(FnCtxt::Assoc(_), ..) => NormalRibKind,\n-            FnKind::Closure(..) => ClosureOrAsyncRibKind,\n+            FnKind::Fn(..) => {\n+                self.diagnostic_metadata.current_function = Some((fn_kind, sp));\n+            }\n+            // Do not update `current_function` for closures: it suggests `self` parameters.\n+            FnKind::Closure(..) => {}\n         };\n-        let previous_value = self.diagnostic_metadata.current_function;\n-        if matches!(fn_kind, FnKind::Fn(..)) {\n-            self.diagnostic_metadata.current_function = Some((fn_kind, sp));\n-        }\n         debug!(\"(resolving function) entering function\");\n \n         // Create a value rib for the function.\n-        self.with_rib(ValueNS, rib_kind, |this| {\n+        self.with_rib(ValueNS, ClosureOrAsyncRibKind, |this| {\n             // Create a label rib for the function.\n-            this.with_label_rib(FnItemRibKind, |this| {\n+            this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n                 match fn_kind {\n                     FnKind::Fn(_, _, sig, _, generics, body) => {\n                         this.visit_generics(generics);"}]}