{"sha": "f42cdf76e16693b5d5e677a41dd31c7d5cc42a14", "node_id": "C_kwDOAAsO6NoAKGY0MmNkZjc2ZTE2NjkzYjVkNWU2NzdhNDFkZDMxYzdkNWNjNDJhMTQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-23T15:10:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-23T15:10:03Z"}, "message": "Rollup merge of #100368 - chenyukang:fix-100321, r=lcnr\n\nInferCtxt tainted_by_errors_flag should be Option<ErrorGuaranteed>\n\nFixes #100321.\nUse Cell<Option<ErrorGuaranteed>> to guarantee that we emit an error when that flag is set.", "tree": {"sha": "8920bbbf78c510f9160d2d5a0bdd542bb2602224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8920bbbf78c510f9160d2d5a0bdd542bb2602224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBO3LCRBK7hj4Ov3rIwAAlHUIAKZKYhGrKFHIYtnHkYvefCWX\n+4FamXhig5tYqy3Lti5IGOo+xcYNcUx6s1mxWtTs2Jz5KYRBBUNW4RHqvPGs//70\n5jwSGN//d08YQITQ9RX+B1LEkpKmdSXjWghgeUNxA2SVdZBQrNBcKzEEBXsATBFR\nF8q3KkAi4UrELXs8ctLIipSEPn7CxLkqB3mB1CDLJsvkSo3q++n5WnY3Am9S3Yfp\nZBAYurmLXQzMXQUxsYLot/IyM/V7y9AbQMUUKrsyl30nkdc4gXvLFtXK1r367bdr\nugVloWGgga0fIRXHgY/Yd9yfd1MjQeriMcra8gjl3EYS/cLtC0TgJNTDrLZI/IU=\n=WOIZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 8920bbbf78c510f9160d2d5a0bdd542bb2602224\nparent 8733550870fbb77818587dabbde8c627a364f347\nparent f466a7563d4b0448a0b242474dd862b37e3f8d11\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661267403 +0530\ncommitter GitHub <noreply@github.com> 1661267403 +0530\n\nRollup merge of #100368 - chenyukang:fix-100321, r=lcnr\n\nInferCtxt tainted_by_errors_flag should be Option<ErrorGuaranteed>\n\nFixes #100321.\nUse Cell<Option<ErrorGuaranteed>> to guarantee that we emit an error when that flag is set.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14", "html_url": "https://github.com/rust-lang/rust/commit/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8733550870fbb77818587dabbde8c627a364f347", "url": "https://api.github.com/repos/rust-lang/rust/commits/8733550870fbb77818587dabbde8c627a364f347", "html_url": "https://github.com/rust-lang/rust/commit/8733550870fbb77818587dabbde8c627a364f347"}, {"sha": "f466a7563d4b0448a0b242474dd862b37e3f8d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/f466a7563d4b0448a0b242474dd862b37e3f8d11", "html_url": "https://github.com/rust-lang/rust/commit/f466a7563d4b0448a0b242474dd862b37e3f8d11"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "e37c0cf0fd0325706ae3a1910a1679b670ae03ba", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=f42cdf76e16693b5d5e677a41dd31c7d5cc42a14", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             evaluation_cache: self.evaluation_cache.clone(),\n             reported_trait_errors: self.reported_trait_errors.clone(),\n             reported_closure_mismatch: self.reported_closure_mismatch.clone(),\n-            tainted_by_errors_flag: self.tainted_by_errors_flag.clone(),\n+            tainted_by_errors: self.tainted_by_errors.clone(),\n             err_count_on_creation: self.err_count_on_creation,\n             in_snapshot: self.in_snapshot.clone(),\n             universe: self.universe.clone(),"}, {"sha": "c95738e0018c09d722a399a6cbc7fe41f0d85a01", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f42cdf76e16693b5d5e677a41dd31c7d5cc42a14", "patch": "@@ -32,7 +32,7 @@ pub use rustc_middle::ty::IntVarValue;\n use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n use rustc_span::symbol::Symbol;\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::cell::{Cell, Ref, RefCell};\n use std::fmt;\n@@ -316,12 +316,12 @@ pub struct InferCtxt<'a, 'tcx> {\n     ///\n     /// Don't read this flag directly, call `is_tainted_by_errors()`\n     /// and `set_tainted_by_errors()`.\n-    tainted_by_errors_flag: Cell<bool>,\n+    tainted_by_errors: Cell<Option<ErrorGuaranteed>>,\n \n     /// Track how many errors were reported when this infcx is created.\n     /// If the number of errors increases, that's also a sign (line\n     /// `tainted_by_errors`) to avoid reporting certain kinds of errors.\n-    // FIXME(matthewjasper) Merge into `tainted_by_errors_flag`\n+    // FIXME(matthewjasper) Merge into `tainted_by_errors`\n     err_count_on_creation: usize,\n \n     /// This flag is true while there is an active snapshot.\n@@ -624,7 +624,7 @@ impl<'tcx> InferCtxtBuilder<'tcx> {\n             evaluation_cache: Default::default(),\n             reported_trait_errors: Default::default(),\n             reported_closure_mismatch: Default::default(),\n-            tainted_by_errors_flag: Cell::new(false),\n+            tainted_by_errors: Cell::new(None),\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n             skip_leak_check: Cell::new(false),\n@@ -1227,23 +1227,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn is_tainted_by_errors(&self) -> bool {\n         debug!(\n             \"is_tainted_by_errors(err_count={}, err_count_on_creation={}, \\\n-             tainted_by_errors_flag={})\",\n+             tainted_by_errors={})\",\n             self.tcx.sess.err_count(),\n             self.err_count_on_creation,\n-            self.tainted_by_errors_flag.get()\n+            self.tainted_by_errors.get().is_some()\n         );\n \n         if self.tcx.sess.err_count() > self.err_count_on_creation {\n             return true; // errors reported since this infcx was made\n         }\n-        self.tainted_by_errors_flag.get()\n+        self.tainted_by_errors.get().is_some()\n     }\n \n     /// Set the \"tainted by errors\" flag to true. We call this when we\n     /// observe an error from a prior pass.\n     pub fn set_tainted_by_errors(&self) {\n         debug!(\"set_tainted_by_errors()\");\n-        self.tainted_by_errors_flag.set(true)\n+        self.tainted_by_errors.set(Some(\n+            self.tcx.sess.delay_span_bug(DUMMY_SP, \"`InferCtxt` incorrectly tainted by errors\"),\n+        ));\n     }\n \n     pub fn skip_region_resolution(&self) {"}, {"sha": "d922f893321a8a621c87f629c023fa473452f075", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42cdf76e16693b5d5e677a41dd31c7d5cc42a14/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=f42cdf76e16693b5d5e677a41dd31c7d5cc42a14", "patch": "@@ -473,9 +473,6 @@ pub fn impossible_predicates<'tcx>(\n     debug!(\"impossible_predicates(predicates={:?})\", predicates);\n \n     let result = tcx.infer_ctxt().enter(|infcx| {\n-        // HACK: Set tainted by errors to gracefully exit in case of overflow.\n-        infcx.set_tainted_by_errors();\n-\n         let param_env = ty::ParamEnv::reveal_all();\n         let ocx = ObligationCtxt::new(&infcx);\n         let predicates = ocx.normalize(ObligationCause::dummy(), param_env, predicates);"}]}