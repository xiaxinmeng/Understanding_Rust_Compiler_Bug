{"sha": "444bc3ca6607f7bdeb088b34db23c01e056900b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NGJjM2NhNjYwN2Y3YmRlYjA4OGIzNGRiMjNjMDFlMDU2OTAwYjE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-24T21:44:43Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-31T07:14:23Z"}, "message": "Use span label instead of note for cause in E0631", "tree": {"sha": "343a1c1c7a089fef85c62c8cc7400062b48463cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/343a1c1c7a089fef85c62c8cc7400062b48463cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/444bc3ca6607f7bdeb088b34db23c01e056900b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/444bc3ca6607f7bdeb088b34db23c01e056900b1", "html_url": "https://github.com/rust-lang/rust/commit/444bc3ca6607f7bdeb088b34db23c01e056900b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/444bc3ca6607f7bdeb088b34db23c01e056900b1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d851b33181b1404856cb1d8b20d261adda54ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d851b33181b1404856cb1d8b20d261adda54ffb", "html_url": "https://github.com/rust-lang/rust/commit/2d851b33181b1404856cb1d8b20d261adda54ffb"}], "stats": {"total": 3235, "additions": 1177, "deletions": 2058}, "files": [{"sha": "aa0fcafbb0e6b592a62460d4d2f77ffaee0f86db", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -657,19 +657,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             span,\n                             E0277,\n                             \"{}\",\n-                            message.unwrap_or_else(||\n-                                format!(\"the trait bound `{}` is not satisfied{}\",\n-                                        trait_ref.to_predicate(), post_message)\n-                            ));\n+                            message.unwrap_or_else(|| format!(\n+                                \"the trait bound `{}` is not satisfied{}\",\n+                                trait_ref.to_predicate(),\n+                                post_message,\n+                            )));\n \n                         let explanation =\n                             if obligation.cause.code == ObligationCauseCode::MainFunctionType {\n                                 \"consider using `()`, or a `Result`\".to_owned()\n                             } else {\n-                                format!(\"{}the trait `{}` is not implemented for `{}`\",\n+                                format!(\n+                                    \"{}the trait `{}` is not implemented for `{}`\",\n                                         pre_message,\n                                         trait_ref,\n-                                        trait_ref.self_ty())\n+                                    trait_ref.self_ty(),\n+                                )\n                             };\n \n                         if let Some(ref s) = label {\n@@ -1535,25 +1538,31 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err.note(\"only the last element of a tuple may have a dynamically sized type\");\n             }\n             ObligationCauseCode::ProjectionWf(data) => {\n-                err.note(&format!(\"required so that the projection `{}` is well-formed\",\n-                                  data));\n+                err.note(&format!(\n+                    \"required so that the projection `{}` is well-formed\",\n+                    data,\n+                ));\n             }\n             ObligationCauseCode::ReferenceOutlivesReferent(ref_ty) => {\n-                err.note(&format!(\"required so that reference `{}` does not outlive its referent\",\n-                                  ref_ty));\n+                err.note(&format!(\n+                    \"required so that reference `{}` does not outlive its referent\",\n+                    ref_ty,\n+                ));\n             }\n             ObligationCauseCode::ObjectTypeBound(object_ty, region) => {\n-                err.note(&format!(\"required so that the lifetime bound of `{}` for `{}` \\\n-                                   is satisfied\",\n-                                  region, object_ty));\n+                err.note(&format!(\n+                    \"required so that the lifetime bound of `{}` for `{}` is satisfied\",\n+                    region,\n+                    object_ty,\n+                ));\n             }\n             ObligationCauseCode::ItemObligation(item_def_id) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n                 let msg = format!(\"required by `{}`\", item_name);\n \n                 if let Some(sp) = tcx.hir().span_if_local(item_def_id) {\n                     let sp = tcx.sess.source_map().def_span(sp);\n-                    err.span_note(sp, &msg);\n+                    err.span_label(sp, &msg);\n                 } else {\n                     err.note(&msg);\n                 }"}, {"sha": "c65a44bfbccfe1fe472e0ed1bf4432396986cbd4", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 44, "deletions": 110, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -5,12 +5,9 @@ LL |     f1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n-   |\n-note: required by `f1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n-   |\n+...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------ required by `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n@@ -19,12 +16,9 @@ LL |     f1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &()) -> _`\n-   |\n-note: required by `f1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n-   |\n+...\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------ required by `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -33,12 +27,9 @@ LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n-   |\n-note: required by `f2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n-   |\n+...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------------------------------------- required by `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -47,12 +38,9 @@ LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'a (), &()) -> _`\n-   |\n-note: required by `f2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n-   |\n+...\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------------------------------------- required by `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -61,12 +49,9 @@ LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n-   |\n-note: required by `f3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n-   |\n+...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------------- required by `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -75,12 +60,9 @@ LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &()) -> _`\n-   |\n-note: required by `f3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n-   |\n+...\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------------- required by `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -89,12 +71,9 @@ LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n-   |\n-note: required by `f4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n-   |\n+...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------------------------------------- required by `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -103,12 +82,9 @@ LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &'r ()) -> _`\n-   |\n-note: required by `f4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n-   |\n+...\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------------------------------------- required by `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -117,12 +93,9 @@ LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n-   |\n-note: required by `f5`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:31:1\n-   |\n+...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------------------------------------------------- required by `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -131,12 +104,9 @@ LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'r (), &'r ()) -> _`\n-   |\n-note: required by `f5`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:31:1\n-   |\n+...\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------------------------------------------------- required by `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -145,12 +115,9 @@ LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n-   |\n-note: required by `g1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n-   |\n+...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------------------- required by `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -159,12 +126,9 @@ LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n-   |\n-note: required by `g1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n-   |\n+...\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------------------- required by `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -173,12 +137,9 @@ LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n-   |\n-note: required by `g2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n-   |\n+...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ---------------------------------------- required by `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -187,12 +148,9 @@ LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n-   |\n-note: required by `g2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n-   |\n+...\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ---------------------------------------- required by `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -201,12 +159,9 @@ LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n-   |\n-note: required by `g3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n-   |\n+...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------------------------------ required by `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -215,12 +170,9 @@ LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n-   |\n-note: required by `g3`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n-   |\n+...\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ------------------------------------------------------------ required by `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -229,12 +181,9 @@ LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n-   |\n-note: required by `g4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:37:1\n-   |\n+...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | --------------------------------------------------- required by `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -243,12 +192,9 @@ LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n-   |\n-note: required by `g4`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:37:1\n-   |\n+...\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | --------------------------------------------------- required by `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -257,12 +203,9 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n-   |\n-note: required by `h1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n-   |\n+...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------------------------------------------------------------------- required by `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -271,12 +214,9 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n-   |\n-note: required by `h1`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n-   |\n+...\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------------------------------------------------------------------- required by `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -285,12 +225,9 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n-   |\n-note: required by `h2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n-   |\n+...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | --------------------------------------------------------------------------------- required by `h2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -299,12 +236,9 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`\n-   |\n-note: required by `h2`\n-  --> $DIR/anonymous-higher-ranked-lifetime.rs:41:1\n-   |\n+...\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | --------------------------------------------------------------------------------- required by `h2`\n \n error: aborting due to 22 previous errors\n "}, {"sha": "2fdfa3da3086c812adf4dfa7f612c0b2b6742db8", "filename": "src/test/ui/associated-const/associated-const-array-len.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-array-len.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/associated-const-array-len.rs:5:16\n    |\n+LL |     const ID: usize;\n+   |     ---------------- required by `Foo::ID`\n+...\n LL | const X: [i32; <i32 as Foo>::ID] = [0, 1, 2];\n    |                ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n-   |\n-note: required by `Foo::ID`\n-  --> $DIR/associated-const-array-len.rs:2:5\n-   |\n-LL |     const ID: usize;\n-   |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "30b6b4f3909b20456a41cf3ad2e94aa34087c90d", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `A: Foo` is not satisfied\n   --> $DIR/associated-const-type-parameter-arrays-2.rs:16:22\n    |\n+LL |     const Y: usize;\n+   |     --------------- required by `Foo::Y`\n+...\n LL |     let _array = [4; <A as Foo>::Y];\n    |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n    |\n    = help: consider adding a `where A: Foo` bound\n-note: required by `Foo::Y`\n-  --> $DIR/associated-const-type-parameter-arrays-2.rs:2:5\n-   |\n-LL |     const Y: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "30fa9891a13e10427341e210f2d5496f3637ef7b", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `A: Foo` is not satisfied\n   --> $DIR/associated-const-type-parameter-arrays.rs:16:23\n    |\n+LL |     const Y: usize;\n+   |     --------------- required by `Foo::Y`\n+...\n LL |     let _array: [u32; <A as Foo>::Y];\n    |                       ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n    |\n    = help: consider adding a `where A: Foo` bound\n-note: required by `Foo::Y`\n-  --> $DIR/associated-const-type-parameter-arrays.rs:2:5\n-   |\n-LL |     const Y: usize;\n-   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "06e8230aa158933b75ea72080e7d72b54bb205e4", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -24,6 +24,9 @@ LL | | }\n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be sent between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n+LL |   trait Case1 {\n+   |   ----------- required by `Case1`\n+...\n LL | / fn assume_case1<T: Case1>() {\n LL | |\n LL | |\n@@ -35,15 +38,13 @@ LL | | }\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n    = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Send` bound\n-note: required by `Case1`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:22:1\n-   |\n-LL | trait Case1 {\n-   | ^^^^^^^^^^^\n \n error[E0277]: `<<T as Case1>::C as std::iter::Iterator>::Item` cannot be shared between threads safely\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n+LL |   trait Case1 {\n+   |   ----------- required by `Case1`\n+...\n LL | / fn assume_case1<T: Case1>() {\n LL | |\n LL | |\n@@ -55,15 +56,13 @@ LL | | }\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `<<T as Case1>::C as std::iter::Iterator>::Item`\n    = help: consider adding a `where <<T as Case1>::C as std::iter::Iterator>::Item: std::marker::Sync` bound\n-note: required by `Case1`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:22:1\n-   |\n-LL | trait Case1 {\n-   | ^^^^^^^^^^^\n \n error[E0277]: `<_ as Lam<&'a u8>>::App` doesn't implement `std::fmt::Debug`\n   --> $DIR/bad-bounds-on-assoc-in-trait.rs:37:1\n    |\n+LL |   trait Case1 {\n+   |   ----------- required by `Case1`\n+...\n LL | / fn assume_case1<T: Case1>() {\n LL | |\n LL | |\n@@ -74,11 +73,6 @@ LL | | }\n    | |_^ `<_ as Lam<&'a u8>>::App` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n    |\n    = help: the trait `for<'a> std::fmt::Debug` is not implemented for `<_ as Lam<&'a u8>>::App`\n-note: required by `Case1`\n-  --> $DIR/bad-bounds-on-assoc-in-trait.rs:22:1\n-   |\n-LL | trait Case1 {\n-   | ^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a3049892abc39f3453b07eac864eb34b50ba7a74", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,30 +1,26 @@\n error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n+LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n+   | ------------------------------------ required by `blue_car`\n+...\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n               found type `Blue`\n-note: required by `blue_car`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:27:1\n-   |\n-LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n+LL | fn black_car<C:Car<Color=Black>>(c: C) {\n+   | -------------------------------------- required by `black_car`\n+...\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`\n               found type `Black`\n-note: required by `black_car`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:24:1\n-   |\n-LL | fn black_car<C:Car<Color=Black>>(c: C) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "54654b95edd90672b7c577c50da1ff83a57f984d", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n   --> $DIR/associated-types-bound-failure.rs:17:5\n    |\n+LL |     fn to_int(&self) -> isize;\n+   |     -------------------------- required by `ToInt::to_int`\n+...\n LL |     ToInt::to_int(&g.get())\n    |     ^^^^^^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n    |\n    = help: consider adding a `where <G as GetToInt>::R: ToInt` bound\n-note: required by `ToInt::to_int`\n-  --> $DIR/associated-types-bound-failure.rs:4:5\n-   |\n-LL |     fn to_int(&self) -> isize;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0f8c5257d445f007240ecdc35be71bd15d0172e3", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -10,16 +10,14 @@ LL |     let _: Bar = x.boo();\n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5\n    |\n+LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n+   | ---------------------------- required by `foo1`\n+...\n LL |     foo1(a);\n    |     ^^^^ expected usize, found struct `Bar`\n    |\n    = note: expected type `usize`\n               found type `Bar`\n-note: required by `foo1`\n-  --> $DIR/associated-types-eq-3.rs:18:1\n-   |\n-LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:41:9"}, {"sha": "05e6ed69812ad97c6bd07a8b609bdd18ac132cb9", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 43, "deletions": 59, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,124 +1,108 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:82:5\n    |\n-LL |     foo::<UintStruct>();\n-   |     ^^^^^^^^^^^^^^^^^ expected usize, found isize\n-   |\n-   = note: expected type `&usize`\n-              found type `&isize`\n-note: required by `foo`\n-  --> $DIR/associated-types-eq-hr.rs:44:1\n-   |\n LL | / fn foo<T>()\n LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x isize>\n LL | | {\n LL | |     // ok for IntStruct, but not UintStruct\n LL | | }\n-   | |_^\n+   | |_- required by `foo`\n+...\n+LL |       foo::<UintStruct>();\n+   |       ^^^^^^^^^^^^^^^^^ expected usize, found isize\n+   |\n+   = note: expected type `&usize`\n+              found type `&isize`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n    |\n-LL |     bar::<IntStruct>();\n-   |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n-   |\n-   = note: expected type `&isize`\n-              found type `&usize`\n-note: required by `bar`\n-  --> $DIR/associated-types-eq-hr.rs:50:1\n-   |\n LL | / fn bar<T>()\n LL | |     where T : for<'x> TheTrait<&'x isize, A = &'x usize>\n LL | | {\n LL | |     // ok for UintStruct, but not IntStruct\n LL | | }\n-   | |_^\n+   | |_- required by `bar`\n+...\n+LL |       bar::<IntStruct>();\n+   |       ^^^^^^^^^^^^^^^^ expected isize, found usize\n+   |\n+   = note: expected type `&isize`\n+              found type `&usize`\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n-LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n-note: required by `tuple_one`\n-  --> $DIR/associated-types-eq-hr.rs:56:1\n-   |\n LL | / fn tuple_one<T>()\n LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n LL | | {\n LL | |     // not ok for tuple, two lifetimes and we pick first\n LL | | }\n-   | |_^\n+   | |_- required by `tuple_one`\n+...\n+LL |       tuple_one::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n \n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n-LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n-   |\n-note: required by `tuple_one`\n-  --> $DIR/associated-types-eq-hr.rs:56:1\n-   |\n LL | / fn tuple_one<T>()\n LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n LL | | {\n LL | |     // not ok for tuple, two lifetimes and we pick first\n LL | | }\n-   | |_^\n+   | |_- required by `tuple_one`\n+...\n+LL |       tuple_one::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n-LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n-note: required by `tuple_two`\n-  --> $DIR/associated-types-eq-hr.rs:62:1\n-   |\n LL | / fn tuple_two<T>()\n LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n LL | | {\n LL | |     // not ok for tuple, two lifetimes and we pick second\n LL | | }\n-   | |_^\n+   | |_- required by `tuple_two`\n+...\n+LL |       tuple_two::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n \n error[E0271]: type mismatch resolving `for<'x, 'y> <Tuple as TheTrait<(&'x isize, &'y isize)>>::A == &'y isize`\n   --> $DIR/associated-types-eq-hr.rs:97:5\n    |\n-LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n-   |\n-note: required by `tuple_two`\n-  --> $DIR/associated-types-eq-hr.rs:62:1\n-   |\n LL | / fn tuple_two<T>()\n LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n LL | | {\n LL | |     // not ok for tuple, two lifetimes and we pick second\n LL | | }\n-   | |_^\n+   | |_- required by `tuple_two`\n+...\n+LL |       tuple_two::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n   --> $DIR/associated-types-eq-hr.rs:107:5\n    |\n-LL |     tuple_four::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n-   |\n-   = help: the following implementations were found:\n-             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n-note: required by `tuple_four`\n-  --> $DIR/associated-types-eq-hr.rs:74:1\n-   |\n LL | / fn tuple_four<T>()\n LL | |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n LL | | {\n LL | |     // not ok for tuple, two lifetimes, and lifetime matching is invariant\n LL | | }\n-   | |_^\n+   | |_- required by `tuple_four`\n+...\n+LL |       tuple_four::<Tuple>();\n+   |       ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |\n+   = help: the following implementations were found:\n+             <Tuple as TheTrait<(&'a isize, &'a isize)>>\n \n error: aborting due to 7 previous errors\n "}, {"sha": "7d6c025d69d5592243e247bb4a7938389dbf4f0e", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::option::Option<T>`\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n+LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n+   | ------------------------------------------------ required by `is_iterator_of`\n+...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found enum `std::option::Option`\n    |\n    = note: expected type `T`\n               found type `std::option::Option<T>`\n-note: required by `is_iterator_of`\n-  --> $DIR/associated-types-issue-20346.rs:15:1\n-   |\n-LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4a2a6d03c607ffc3d641e31e4faefc8dde710d40", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -3,28 +3,24 @@ error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n    |\n LL |     want_y(t);\n    |     ^^^^^^ expected associated type, found i32\n+...\n+LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n+   | ------------------------------ required by `want_y`\n    |\n    = note: expected type `<T as Foo>::Y`\n               found type `i32`\n-note: required by `want_y`\n-  --> $DIR/associated-types-multiple-types-one-trait.rs:44:1\n-   |\n-LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n    |\n LL |     want_x(t);\n    |     ^^^^^^ expected associated type, found u32\n+...\n+LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n+   | ------------------------------ required by `want_x`\n    |\n    = note: expected type `<T as Foo>::X`\n               found type `u32`\n-note: required by `want_x`\n-  --> $DIR/associated-types-multiple-types-one-trait.rs:42:1\n-   |\n-LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a7238541cd96e620f2d01a34a70162b2da04335e", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,10 @@\n error[E0284]: type annotations required: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:4:1\n    |\n+LL | trait Foo: Iterator<Item = i32> {}\n+   | ------------------------------- required by `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: required by `Foo`\n-  --> $DIR/associated-types-overridden-binding.rs:3:1\n-   |\n-LL | trait Foo: Iterator<Item = i32> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a8fcaeac95d5ff6dde0effdc2d9ed1f3fcc487f3", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -11,14 +11,11 @@ LL |     f1(2i32, 4u32);\n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n    |\n+LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n+   | -------------------------------- required by `f1`\n+...\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n-   |\n-note: required by `f1`\n-  --> $DIR/associated-types-path-2.rs:13:1\n-   |\n-LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n@@ -29,14 +26,11 @@ LL |     f1(2u32, 4u32);\n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5\n    |\n+LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n+   | -------------------------------- required by `f1`\n+...\n LL |     f1(2u32, 4i32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n-   |\n-note: required by `f1`\n-  --> $DIR/associated-types-path-2.rs:13:1\n-   |\n-LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5"}, {"sha": "22d44888e951bb6bbe877b048650db596be34287", "filename": "src/test/ui/associated-types/higher-ranked-projection.bad.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhigher-ranked-projection.bad.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,13 @@\n error[E0271]: type mismatch resolving `for<'a> <&'a _ as Mirror>::Image == _`\n   --> $DIR/higher-ranked-projection.rs:25:5\n    |\n-LL |     foo(());\n-   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n-   |\n-note: required by `foo`\n-  --> $DIR/higher-ranked-projection.rs:14:1\n-   |\n LL | / fn foo<U, T>(_t: T)\n LL | |     where for<'a> &'a T: Mirror<Image=U>\n LL | | {}\n-   | |__^\n+   | |__- required by `foo`\n+...\n+LL |       foo(());\n+   |       ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n \n error: aborting due to previous error\n "}, {"sha": "fad90b29c0e6e62e89448f94a5a0439279da5945", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:50:5\n    |\n+LL | fn assert_send(_: impl Send) {}\n+   | ---------------------------- required by `assert_send`\n+...\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n@@ -11,15 +14,13 @@ LL |     assert_send(local_dropped_before_await());\n    = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n-note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:47:1\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:52:5\n    |\n+LL | fn assert_send(_: impl Send) {}\n+   | ---------------------------- required by `assert_send`\n+...\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n@@ -30,15 +31,13 @@ LL |     assert_send(non_send_temporary_in_match());\n    = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n-note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:47:1\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn std::fmt::Write` cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:54:5\n    |\n+LL | fn assert_send(_: impl Send) {}\n+   | ---------------------------- required by `assert_send`\n+...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `dyn std::fmt::Write` cannot be sent between threads safely\n    |\n@@ -51,15 +50,13 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n-note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:47:1\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n   --> $DIR/async-fn-nonsend.rs:54:5\n    |\n+LL | fn assert_send(_: impl Send) {}\n+   | ---------------------------- required by `assert_send`\n+...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n    |\n@@ -76,11 +73,6 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n-note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:47:1\n-   |\n-LL | fn assert_send(_: impl Send) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "15c52f461c1837371161d366c602898eddc97875", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -10,17 +10,15 @@ LL |     only_foo(x);\n error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:25:5\n    |\n+LL | fn only_bar<T: Bar>(_x: T) { }\n+   | -------------------------- required by `only_bar`\n+...\n LL |     only_bar(x);\n    |     ^^^^^^^^ the trait `Bar` is not implemented for `{float}`\n    |\n    = help: the following implementations were found:\n              <i32 as Bar>\n              <u32 as Bar>\n-note: required by `only_bar`\n-  --> $DIR/type_inference.rs:12:1\n-   |\n-LL | fn only_bar<T: Bar>(_x: T) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c618c2c550ba1d0b115415737fd379d0644deb64", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.stderr", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -39,53 +39,44 @@ LL |     with_closure_expecting_fn_with_free_region(|x: fn(&'x u32), y| {});\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:30:5\n    |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(fn(&'a u32), &i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_free_region`\n-  --> $DIR/expect-fn-supply-fn.rs:1:1\n-   |\n LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `with_closure_expecting_fn_with_free_region`\n+...\n+LL |       with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n+   |       |\n+   |       expected signature of `fn(fn(&'a u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:37:5\n    |\n-LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_bound_region`\n-  --> $DIR/expect-fn-supply-fn.rs:6:1\n-   |\n LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n LL | |     where F: FnOnce(fn(&u32), &i32)\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+...\n+LL |       with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n+   |       |\n+   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-fn-supply-fn.rs:46:5\n    |\n-LL |     with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_bound_region`\n-  --> $DIR/expect-fn-supply-fn.rs:6:1\n-   |\n LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n LL | |     where F: FnOnce(fn(&u32), &i32)\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `with_closure_expecting_fn_with_bound_region`\n+...\n+LL |       with_closure_expecting_fn_with_bound_region(|x: Foo<'_>, y| {\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n+   |       |\n+   |       expected signature of `fn(for<'r> fn(&'r u32), &i32) -> _`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a2b3a66dc4d23ef21383128c50ad0c8ff6ad7557", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,19 +1,16 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n    |\n-LL |     with_closure(|x: u32, y: i32| {\n-   |     ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n-   |     |\n-   |     expected signature of `fn(_, _) -> _`\n-   |\n-note: required by `with_closure`\n-  --> $DIR/expect-infer-var-appearing-twice.rs:1:1\n-   |\n LL | / fn with_closure<F, A>(_: F)\n LL | |     where F: FnOnce(A, A)\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `with_closure`\n+...\n+LL |       with_closure(|x: u32, y: i32| {\n+   |       ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n+   |       |\n+   |       expected signature of `fn(_, _) -> _`\n \n error: aborting due to previous error\n "}, {"sha": "51077b1b2922e681dc2bd2673f8159ef2757711a", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `F` cannot be sent between threads safely\n   --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:1\n    |\n+LL |   struct X<F> where F: FnOnce() + 'static + Send {\n+   |   ---------------------------------------------- required by `X`\n+...\n LL | / fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n LL | |\n LL | |     return X { field: blk };\n@@ -9,11 +12,6 @@ LL | | }\n    |\n    = help: the trait `std::marker::Send` is not implemented for `F`\n    = help: consider adding a `where F: std::marker::Send` bound\n-note: required by `X`\n-  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:1:1\n-   |\n-LL | struct X<F> where F: FnOnce() + 'static + Send {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4958bd06d9b166f73701db4e615b530822ab2923", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: `F` cannot be shared between threads safely\n   --> $DIR/closure-bounds-subtype.rs:13:5\n    |\n+LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n+   | ------------------------------------------------------------ required by `take_const_owned`\n+...\n LL |     take_const_owned(f);\n    |     ^^^^^^^^^^^^^^^^ `F` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `F`\n    = help: consider adding a `where F: std::marker::Sync` bound\n-note: required by `take_const_owned`\n-  --> $DIR/closure-bounds-subtype.rs:4:1\n-   |\n-LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0733a51233e339004872930b8c747093e96fefa0", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -14,32 +14,28 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n+LL | pub struct Foo<A, B>(A, B);\n+   | --------------------------- required by `Foo`\n+...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where A: std::marker::Sized` bound\n-note: required by `Foo`\n-  --> $DIR/too_generic_eval_ice.rs:1:1\n-   |\n-LL | pub struct Foo<A, B>(A, B);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `B` cannot be known at compilation time\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n+LL | pub struct Foo<A, B>(A, B);\n+   | --------------------------- required by `Foo`\n+...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `B`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where B: std::marker::Sized` bound\n-note: required by `Foo`\n-  --> $DIR/too_generic_eval_ice.rs:1:1\n-   |\n-LL | pub struct Foo<A, B>(A, B);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "277477a0b0acdc387e9ef9bbcc1b8d07cf215f6f", "filename": "src/test/ui/defaulted-never-note.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdefaulted-never-note.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n   --> $DIR/defaulted-never-note.rs:26:5\n    |\n+LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n+   | ----------------------------------------------- required by `foo`\n+...\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n    |\n    = note: the trait is implemented for `()`. Possibly this error has been caused by changes to Rust's type-inference algorithm (see: https://github.com/rust-lang/rust/issues/48950 for more info). Consider whether you meant to use the type `()` here instead.\n-note: required by `foo`\n-  --> $DIR/defaulted-never-note.rs:21:1\n-   |\n-LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "46b6a0d3376954733a05e03f93dd1cd777815873", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,41 +1,35 @@\n error[E0277]: the trait bound `C: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:5\n    |\n+LL | fn is_copy<T: Copy>(_: T) {}\n+   | ------------------------- required by `is_copy`\n+...\n LL |     is_copy(B { a: 1, b: C });\n    |     ^^^^^^^ the trait `std::marker::Copy` is not implemented for `C`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<C>`\n-note: required by `is_copy`\n-  --> $DIR/deriving-copyclone.rs:18:1\n-   |\n-LL | fn is_copy<T: Copy>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `C: std::clone::Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:5\n    |\n+LL | fn is_clone<T: Clone>(_: T) {}\n+   | --------------------------- required by `is_clone`\n+...\n LL |     is_clone(B { a: 1, b: C });\n    |     ^^^^^^^^ the trait `std::clone::Clone` is not implemented for `C`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `B<C>`\n-note: required by `is_clone`\n-  --> $DIR/deriving-copyclone.rs:19:1\n-   |\n-LL | fn is_clone<T: Clone>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `D: std::marker::Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:5\n    |\n+LL | fn is_copy<T: Copy>(_: T) {}\n+   | ------------------------- required by `is_copy`\n+...\n LL |     is_copy(B { a: 1, b: D });\n    |     ^^^^^^^ the trait `std::marker::Copy` is not implemented for `D`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<D>`\n-note: required by `is_copy`\n-  --> $DIR/deriving-copyclone.rs:18:1\n-   |\n-LL | fn is_copy<T: Copy>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ea2017f485a7bccaa824ca6338cab07160a27b14", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:24:5\n    |\n+LL |     fn bar(&self){}\n+   |     ------------- required by `Foo::bar`\n+...\n LL |     Foo::<i32>::bar(&1i8);\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `i8`\n    |\n@@ -10,15 +13,13 @@ LL |     Foo::<i32>::bar(&1i8);\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<u8>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:25:5\n    |\n+LL |     fn bar(&self){}\n+   |     ------------- required by `Foo::bar`\n+...\n LL |     Foo::<i32>::bar(&1u8);\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `u8`\n    |\n@@ -27,15 +28,13 @@ LL |     Foo::<i32>::bar(&1u8);\n              <u8 as Foo<u16>>\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:26:5\n    |\n+LL |     fn bar(&self){}\n+   |     ------------- required by `Foo::bar`\n+...\n LL |     Foo::<i32>::bar(&true);\n    |     ^^^^^^^^^^^^^^^ the trait `Foo<i32>` is not implemented for `bool`\n    |\n@@ -45,11 +44,6 @@ LL |     Foo::<i32>::bar(&true);\n              <bool as Foo<u16>>\n              <bool as Foo<u32>>\n            and 2 others\n-note: required by `Foo::bar`\n-  --> $DIR/issue-39802-show-5-trait-impls.rs:2:5\n-   |\n-LL |     fn bar(&self){}\n-   |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "745d90a5d4cbf2b8d599904b13c34cac92116377", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0275]: overflow evaluating the requirement `J: std::marker::Send`\n   --> $DIR/recursion_limit.rs:34:5\n    |\n+LL | fn is_send<T:Send>() { }\n+   | -------------------- required by `is_send`\n+...\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^\n    |\n@@ -14,11 +17,6 @@ LL |     is_send::<A>();\n    = note: required because it appears within the type `C`\n    = note: required because it appears within the type `B`\n    = note: required because it appears within the type `A`\n-note: required by `is_send`\n-  --> $DIR/recursion_limit.rs:31:1\n-   |\n-LL | fn is_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0afcbcc79eee9f38e1f2f5ac6e69778330b18839", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n   --> $DIR/E0271.rs:10:5\n    |\n+LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n+   | -------------------------------------------------- required by `foo`\n+...\n LL |     foo(3_i8);\n    |     ^^^ expected reference, found u32\n    |\n    = note: expected type `&'static str`\n               found type `u32`\n-note: required by `foo`\n-  --> $DIR/E0271.rs:3:1\n-   |\n-LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f607a9fbbf269573fb8556e168e11b21465d962f", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/E0275.rs:5:1\n    |\n+LL | trait Foo {}\n+   | --------- required by `Foo`\n+...\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -132,11 +135,6 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<Bar<T>>>`\n    = note: required because of the requirements on the impl of `Foo` for `Bar<Bar<T>>`\n    = note: required because of the requirements on the impl of `Foo` for `Bar<T>`\n-note: required by `Foo`\n-  --> $DIR/E0275.rs:1:1\n-   |\n-LL | trait Foo {}\n-   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b42849cd842018d7488af6ec9d61a470f923208a", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,18 +1,16 @@\n error[E0277]: `*const u8` cannot be sent between threads safely\n   --> $DIR/E0277-2.rs:16:5\n    |\n+LL | fn is_send<T: Send>() { }\n+   | --------------------- required by `is_send`\n+...\n LL |     is_send::<Foo>();\n    |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely\n    |\n    = help: within `Foo`, the trait `std::marker::Send` is not implemented for `*const u8`\n    = note: required because it appears within the type `Baz`\n    = note: required because it appears within the type `Bar`\n    = note: required because it appears within the type `Foo`\n-note: required by `is_send`\n-  --> $DIR/E0277-2.rs:13:1\n-   |\n-LL | fn is_send<T: Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "352102dd38629121828877ec70eaaab4f8b85e8a", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -13,14 +13,11 @@ LL | fn f(p: Path) { }\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:17:5\n    |\n+LL | fn some_func<T: Foo>(foo: T) {\n+   | ---------------------------- required by `some_func`\n+...\n LL |     some_func(5i32);\n    |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n-   |\n-note: required by `some_func`\n-  --> $DIR/E0277.rs:9:1\n-   |\n-LL | fn some_func<T: Foo>(foo: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d99f99c6238368ad5fbc50202324632b3b1a66a", "filename": "src/test/ui/error-codes/E0283.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0283.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0283]: type annotations required: cannot resolve `_: Generator`\n   --> $DIR/E0283.rs:18:21\n    |\n+LL |     fn create() -> u32;\n+   |     ------------------- required by `Generator::create`\n+...\n LL |     let cont: u32 = Generator::create();\n    |                     ^^^^^^^^^^^^^^^^^\n-   |\n-note: required by `Generator::create`\n-  --> $DIR/E0283.rs:2:5\n-   |\n-LL |     fn create() -> u32;\n-   |     ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "78d54c3836db42122d06c8df4b6559f9c42f000b", "filename": "src/test/ui/error-should-say-copy-not-pod.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/error-should-say-copy-not-pod.rs:6:5\n    |\n+LL | fn check_bound<T:Copy>(_: T) {}\n+   | ---------------------------- required by `check_bound`\n+...\n LL |     check_bound(\"nocopy\".to_string());\n    |     ^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n-   |\n-note: required by `check_bound`\n-  --> $DIR/error-should-say-copy-not-pod.rs:3:1\n-   |\n-LL | fn check_bound<T:Copy>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0f32d4489dece2a4b9be387e852eb6f7da3e8d1d", "filename": "src/test/ui/extern/extern-types-not-sync-send.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,28 +1,24 @@\n error[E0277]: `A` cannot be shared between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:13:5\n    |\n+LL | fn assert_sync<T: ?Sized + Sync>() { }\n+   | ---------------------------------- required by `assert_sync`\n+...\n LL |     assert_sync::<A>();\n    |     ^^^^^^^^^^^^^^^^ `A` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `A`\n-note: required by `assert_sync`\n-  --> $DIR/extern-types-not-sync-send.rs:9:1\n-   |\n-LL | fn assert_sync<T: ?Sized + Sync>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `A` cannot be sent between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:16:5\n    |\n+LL | fn assert_send<T: ?Sized + Send>() { }\n+   | ---------------------------------- required by `assert_send`\n+...\n LL |     assert_send::<A>();\n    |     ^^^^^^^^^^^^^^^^ `A` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `A`\n-note: required by `assert_send`\n-  --> $DIR/extern-types-not-sync-send.rs:10:1\n-   |\n-LL | fn assert_send<T: ?Sized + Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "06527d973e2abd698d895b4fbe9b72937d4bfe99", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,62 +1,54 @@\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:22:5\n    |\n+LL | fn assert_sized<T>() { }\n+   | -------------------- required by `assert_sized`\n+...\n LL |     assert_sized::<A>();\n    |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-note: required by `assert_sized`\n-  --> $DIR/extern-types-unsized.rs:19:1\n-   |\n-LL | fn assert_sized<T>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:25:5\n    |\n+LL | fn assert_sized<T>() { }\n+   | -------------------- required by `assert_sized`\n+...\n LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Foo`\n-note: required by `assert_sized`\n-  --> $DIR/extern-types-unsized.rs:19:1\n-   |\n-LL | fn assert_sized<T>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:28:5\n    |\n+LL | fn assert_sized<T>() { }\n+   | -------------------- required by `assert_sized`\n+...\n LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<A>`, the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n-note: required by `assert_sized`\n-  --> $DIR/extern-types-unsized.rs:19:1\n-   |\n-LL | fn assert_sized<T>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:31:5\n    |\n+LL | fn assert_sized<T>() { }\n+   | -------------------- required by `assert_sized`\n+...\n LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<Bar<A>>`, the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because it appears within the type `Bar<A>`\n    = note: required because it appears within the type `Bar<Bar<A>>`\n-note: required by `assert_sized`\n-  --> $DIR/extern-types-unsized.rs:19:1\n-   |\n-LL | fn assert_sized<T>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "52fcb90e6de0c2fcd20fad4efb92ac450d794c4b", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `extern \"C\" fn() {f}`\n   --> $DIR/extern-wrong-value-type.rs:9:5\n    |\n+LL | fn is_fn<F>(_: F) where F: Fn() {}\n+   | ------------------------------- required by `is_fn`\n+...\n LL |     is_fn(f);\n    |     ^^^^^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n    = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }\n-note: required by `is_fn`\n-  --> $DIR/extern-wrong-value-type.rs:4:1\n-   |\n-LL | fn is_fn<F>(_: F) where F: Fn() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "599dcfaa726178a5e4f5b7bba12f39625eb21f05", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:8:5\n    |\n+LL | fn send<T: Send>(_: T) {}\n+   | ---------------------- required by `send`\n+...\n LL |     send(format_args!(\"{:?}\", c));\n    |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n    |\n@@ -12,15 +15,13 @@ LL |     send(format_args!(\"{:?}\", c));\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-note: required by `send`\n-  --> $DIR/send-sync.rs:1:1\n-   |\n-LL | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:9:5\n    |\n+LL | fn sync<T: Sync>(_: T) {}\n+   | ---------------------- required by `sync`\n+...\n LL |     sync(format_args!(\"{:?}\", c));\n    |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n    |\n@@ -32,11 +33,6 @@ LL |     sync(format_args!(\"{:?}\", c));\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-note: required by `sync`\n-  --> $DIR/send-sync.rs:2:1\n-   |\n-LL | fn sync<T: Sync>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "20d7d9ea5b7a88f02dcfa70055265278b98791d9", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -28,15 +28,13 @@ LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -\n error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:5\n    |\n+LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n+   | ------------------------------------------------ required by `needs_fn`\n+...\n LL |     needs_fn(1);\n    |     ^^^^^^^^ expected an `Fn<(isize,)>` closure, found `{integer}`\n    |\n    = help: the trait `std::ops::Fn<(isize,)>` is not implemented for `{integer}`\n-note: required by `needs_fn`\n-  --> $DIR/fn-trait-formatting.rs:3:1\n-   |\n-LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1049bb6240a249ce0118256ec2da325db7b31bde", "filename": "src/test/ui/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator-yielding-or-returning-itself.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -16,20 +16,18 @@ LL | |     })\n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _] as std::ops::Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6 _]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n    |\n-LL |     want_cyclic_generator_yield(|| {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n-   |\n-   = note: closures cannot capture themselves or take themselves as argument;\n-           this error may be the result of a recent compiler bug-fix,\n-           see https://github.com/rust-lang/rust/issues/46062 for more details\n-note: required by `want_cyclic_generator_yield`\n-  --> $DIR/generator-yielding-or-returning-itself.rs:22:1\n-   |\n LL | / pub fn want_cyclic_generator_yield<T>(_: T)\n LL | |     where T: Generator<Yield = T, Return = ()>\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `want_cyclic_generator_yield`\n+...\n+LL |       want_cyclic_generator_yield(|| {\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+   |\n+   = note: closures cannot capture themselves or take themselves as argument;\n+           this error may be the result of a recent compiler bug-fix,\n+           see https://github.com/rust-lang/rust/issues/46062 for more details\n \n error: aborting due to 2 previous errors\n "}, {"sha": "51416ce0d2f7a08fce61017bd1bbc0d90274cc06", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,32 +1,28 @@\n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:16:5\n    |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |     ----------------------------- required by `main::assert_send`\n+...\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::cell::Cell<i32>`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:16:17: 20:6 a:&std::cell::Cell<i32> _]`\n-note: required by `main::assert_send`\n-  --> $DIR/not-send-sync.rs:7:5\n-   |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:5\n    |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |     ----------------------------- required by `main::assert_sync`\n+...\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: within `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because it appears within the type `{std::cell::Cell<i32>, ()}`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:9:17: 13:6 {std::cell::Cell<i32>, ()}]`\n-note: required by `main::assert_sync`\n-  --> $DIR/not-send-sync.rs:6:5\n-   |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "28a6fac5b85e35ad96eb62ec8b32099aab6b227b", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]: std::marker::Unpin` is not satisfied\n   --> $DIR/static-not-unpin.rs:14:5\n    |\n+LL | fn assert_unpin<T: Unpin>(_: T) {\n+   | ------------------------------- required by `assert_unpin`\n+...\n LL |     assert_unpin(generator);\n    |     ^^^^^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6 _]`\n-   |\n-note: required by `assert_unpin`\n-  --> $DIR/static-not-unpin.rs:7:1\n-   |\n-LL | fn assert_unpin<T: Unpin>(_: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e0b968b67645e8e27c5e437e6897e39c0b2eeb13", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,19 +1,17 @@\n error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n   --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n-LL | fn b() { want_foo2::<SomeStruct>(); }\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n-   |\n-   = help: the following implementations were found:\n-             <SomeStruct as Foo<(&'a isize, &'a isize)>>\n-note: required by `want_foo2`\n-  --> $DIR/hrtb-conflate-regions.rs:8:1\n-   |\n LL | / fn want_foo2<T>()\n LL | |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `want_foo2`\n+...\n+LL |   fn b() { want_foo2::<SomeStruct>(); }\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n+   |\n+   = help: the following implementations were found:\n+             <SomeStruct as Foo<(&'a isize, &'a isize)>>\n \n error: aborting due to previous error\n "}, {"sha": "bc58b8e16aaf2a0b5e7253ebfcb3efd6889701c2", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,20 +1,18 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n   --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n    |\n-LL |     foo::<()>();\n-   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <() as Trait<fn(&'a u32)>>\n-note: required by `foo`\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:8:1\n-   |\n LL | / fn foo<T>()\n LL | | where\n LL | |     T: Trait<for<'b> fn(&'b u32)>,\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `foo`\n+...\n+LL |       foo::<()>();\n+   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<fn(&'a u32)>>\n \n error: aborting due to previous error\n "}, {"sha": "441f75135f3a4d80621c833c2e4281b70620093e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,20 +1,18 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(fn(&'b u32))>` is not satisfied\n   --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:5\n    |\n-LL |     foo::<()>();\n-   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <() as Trait<fn(fn(&'a u32))>>\n-note: required by `foo`\n-  --> $DIR/hrtb-exists-forall-trait-covariant.rs:8:1\n-   |\n LL | / fn foo<T>()\n LL | | where\n LL | |     T: Trait<for<'b> fn(fn(&'b u32))>,\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `foo`\n+...\n+LL |       foo::<()>();\n+   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<fn(fn(&'a u32))>>\n \n error: aborting due to previous error\n "}, {"sha": "a11949735b9d2e9dccdcdde39fe4a92fca298925", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,20 +1,18 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not satisfied\n   --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n    |\n-LL |     foo::<()>();\n-   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n-   |\n-   = help: the following implementations were found:\n-             <() as Trait<fn(std::cell::Cell<&'a u32>)>>\n-note: required by `foo`\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:10:1\n-   |\n LL | / fn foo<T>()\n LL | | where\n LL | |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `foo`\n+...\n+LL |       foo::<()>();\n+   |       ^^^^^^^^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Trait<fn(std::cell::Cell<&'a u32>)>>\n \n error: aborting due to previous error\n "}, {"sha": "0cddd353d679ec044dffb5a4c0736eb281c60466", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,18 +1,16 @@\n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:5\n    |\n-LL |     want_bar_for_any_ccx(b);\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n-   |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n-note: required by `want_bar_for_any_ccx`\n-  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:31:1\n-   |\n LL | / fn want_bar_for_any_ccx<B>(b: &B)\n LL | |     where B : for<'ccx> Bar<'ccx>\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `want_bar_for_any_ccx`\n+...\n+LL |       want_bar_for_any_ccx(b);\n+   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+   |\n+   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n \n error: aborting due to previous error\n "}, {"sha": "6df486ebaff3821cc6ef41307b7144b78ee7e531", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,39 +1,35 @@\n error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:18:5\n    |\n-LL |     want_foo_for_any_tcx(f);\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n-   |\n-   = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n-note: required by `want_foo_for_any_tcx`\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:21:1\n-   |\n+LL |       want_foo_for_any_tcx(f);\n+   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n+...\n LL | / fn want_foo_for_any_tcx<F>(f: &F)\n LL | |     where F : for<'tcx> Foo<'tcx>\n LL | | {\n LL | |     want_foo_for_some_tcx(f);\n LL | |     want_foo_for_any_tcx(f);\n LL | | }\n-   | |_^\n+   | |_- required by `want_foo_for_any_tcx`\n+   |\n+   = help: consider adding a `where for<'tcx> F: Foo<'tcx>` bound\n \n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:35:5\n    |\n-LL |     want_bar_for_any_ccx(b);\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n-   |\n-   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n-note: required by `want_bar_for_any_ccx`\n-  --> $DIR/hrtb-higher-ranker-supertraits.rs:38:1\n-   |\n+LL |       want_bar_for_any_ccx(b);\n+   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n+...\n LL | / fn want_bar_for_any_ccx<B>(b: &B)\n LL | |     where B : for<'ccx> Bar<'ccx>\n LL | | {\n LL | |     want_foo_for_some_tcx(b);\n ...  |\n LL | |     want_bar_for_any_ccx(b);\n LL | | }\n-   | |_^\n+   | |_- required by `want_bar_for_any_ccx`\n+   |\n+   = help: consider adding a `where for<'ccx> B: Bar<'ccx>` bound\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b2938e541fdd89d25290171ba7b6d14346d1027c", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,36 +1,32 @@\n error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n   --> $DIR/hrtb-just-for-static.rs:24:5\n    |\n-LL |     want_hrtb::<StaticInt>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n-   |\n-   = help: the following implementations were found:\n-             <StaticInt as Foo<&'static isize>>\n-note: required by `want_hrtb`\n-  --> $DIR/hrtb-just-for-static.rs:8:1\n-   |\n LL | / fn want_hrtb<T>()\n LL | |     where T : for<'a> Foo<&'a isize>\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `want_hrtb`\n+...\n+LL |       want_hrtb::<StaticInt>()\n+   |       ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n+   |\n+   = help: the following implementations were found:\n+             <StaticInt as Foo<&'static isize>>\n \n error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n   --> $DIR/hrtb-just-for-static.rs:30:5\n    |\n-LL |     want_hrtb::<&'a u32>()\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n-   |\n-   = help: the following implementations were found:\n-             <&'a u32 as Foo<&'a isize>>\n-note: required by `want_hrtb`\n-  --> $DIR/hrtb-just-for-static.rs:8:1\n-   |\n LL | / fn want_hrtb<T>()\n LL | |     where T : for<'a> Foo<&'a isize>\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `want_hrtb`\n+...\n+LL |       want_hrtb::<&'a u32>()\n+   |       ^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n+   |\n+   = help: the following implementations were found:\n+             <&'a u32 as Foo<&'a isize>>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "57eaf2aad2bc5b677ee0b1d9bc6de4eb124c0cff", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n   --> $DIR/issue-46989.rs:40:5\n    |\n+LL | fn assert_foo<T: Foo>() {}\n+   | ----------------------- required by `assert_foo`\n+...\n LL |     assert_foo::<fn(&i32)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n    |\n    = help: the following implementations were found:\n              <fn(A) as Foo>\n-note: required by `assert_foo`\n-  --> $DIR/issue-46989.rs:37:1\n-   |\n-LL | fn assert_foo<T: Foo>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "af641a89e7f9c6d6e63b0dabf0b46c6321e5fb2f", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -72,16 +72,14 @@ LL | | }\n error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak.rs:15:5\n    |\n+LL | fn send<T: Send>(_: T) {}\n+   | ---------------------- required by `send`\n+...\n LL |     send(cycle2().clone());\n    |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n    |\n    = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n    = note: required because it appears within the type `impl std::clone::Clone`\n-note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:4:1\n-   |\n-LL | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "460af7dedbea8fd27a8e988e2140e5ea2d09e210", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,32 +1,28 @@\n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:13:5\n    |\n+LL | fn send<T: Send>(_: T) {}\n+   | ---------------------- required by `send`\n+...\n LL |     send(before());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:10:1\n-   |\n-LL | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:16:5\n    |\n+LL | fn send<T: Send>(_: T) {}\n+   | ---------------------- required by `send`\n+...\n LL |     send(after());\n    |     ^^^^ `std::rc::Rc<std::cell::Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-note: required by `send`\n-  --> $DIR/auto-trait-leak2.rs:10:1\n-   |\n-LL | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c62cbb0cf8b96b2ad96b207cf83bdef8d7155394", "filename": "src/test/ui/issues/issue-1920-1.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `foo::issue_1920::S: std::clone::Clone` is not satisfied\n   --> $DIR/issue-1920-1.rs:12:5\n    |\n+LL | fn assert_clone<T>() where T : Clone { }\n+   | ------------------------------------ required by `assert_clone`\n+...\n LL |     assert_clone::<foo::issue_1920::S>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`\n-   |\n-note: required by `assert_clone`\n-  --> $DIR/issue-1920-1.rs:9:1\n-   |\n-LL | fn assert_clone<T>() where T : Clone { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "aad076244699aa134186c0c70018d7d8c0422287", "filename": "src/test/ui/issues/issue-1920-2.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `bar::S: std::clone::Clone` is not satisfied\n   --> $DIR/issue-1920-2.rs:10:5\n    |\n+LL | fn assert_clone<T>() where T : Clone { }\n+   | ------------------------------------ required by `assert_clone`\n+...\n LL |     assert_clone::<bar::S>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`\n-   |\n-note: required by `assert_clone`\n-  --> $DIR/issue-1920-2.rs:7:1\n-   |\n-LL | fn assert_clone<T>() where T : Clone { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4378ea49755a7f2da8e49096efcf2c14427de73c", "filename": "src/test/ui/issues/issue-1920-3.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `issue_1920::S: std::clone::Clone` is not satisfied\n   --> $DIR/issue-1920-3.rs:14:5\n    |\n+LL | fn assert_clone<T>() where T : Clone { }\n+   | ------------------------------------ required by `assert_clone`\n+...\n LL |     assert_clone::<foo::issue_1920::S>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`\n-   |\n-note: required by `assert_clone`\n-  --> $DIR/issue-1920-3.rs:11:1\n-   |\n-LL | fn assert_clone<T>() where T : Clone { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2754d6bdd83066a60778aefd9efa8edb6556fb44", "filename": "src/test/ui/issues/issue-20005.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20005.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-20005.rs:8:5\n    |\n+LL |   trait From<Src> {\n+   |   --------------- required by `From`\n+...\n LL | /     fn to<Dst>(\n LL | |         self\n LL | |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n@@ -11,11 +14,6 @@ LL | |     }\n    = help: the trait `std::marker::Sized` is not implemented for `Self`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where Self: std::marker::Sized` bound\n-note: required by `From`\n-  --> $DIR/issue-20005.rs:1:1\n-   |\n-LL | trait From<Src> {\n-   | ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "72a8fe4283b565c13abd624af98109b8eac0b68b", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -9,6 +9,9 @@ LL | struct NoData<T>;\n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:1\n    |\n+LL |   trait Foo {\n+   |   --------- required by `Foo`\n+...\n LL | / impl<T> Foo for T where NoData<T>: Foo {\n LL | |\n LL | |   fn answer(self) {\n@@ -146,15 +149,13 @@ LL | | }\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<T>>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<T>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n-note: required by `Foo`\n-  --> $DIR/issue-20413.rs:1:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:10:3\n    |\n+LL |   trait Foo {\n+   |   --------- required by `Foo`\n+...\n LL | /   fn answer(self) {\n LL | |\n LL | |     let val: NoData<T> = NoData;\n@@ -289,11 +290,6 @@ LL | |   }\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<T>>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<NoData<T>>`\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n-note: required by `Foo`\n-  --> $DIR/issue-20413.rs:1:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "99d004a973a266e07d23724826da37805d490e94", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n   --> $DIR/issue-21763.rs:9:5\n    |\n+LL | fn foo<T: Send>() {}\n+   | ----------------- required by `foo`\n+...\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n@@ -9,11 +12,6 @@ LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    = note: required because of the requirements on the impl of `std::marker::Send` for `hashbrown::raw::RawTable<(std::rc::Rc<()>, std::rc::Rc<()>)>`\n    = note: required because it appears within the type `hashbrown::map::HashMap<std::rc::Rc<()>, std::rc::Rc<()>, std::collections::hash_map::RandomState>`\n    = note: required because it appears within the type `std::collections::HashMap<std::rc::Rc<()>, std::rc::Rc<()>>`\n-note: required by `foo`\n-  --> $DIR/issue-21763.rs:6:1\n-   |\n-LL | fn foo<T: Send>() {}\n-   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "20d02a90315d0a356d99c89ad93aaf9f08227450", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: Bound` is not satisfied\n   --> $DIR/issue-21837.rs:8:9\n    |\n+LL | pub struct Foo<T: Bound>(T);\n+   | ---------------------------- required by `Foo`\n+...\n LL | impl<T> Trait2 for Foo<T> {}\n    |         ^^^^^^ the trait `Bound` is not implemented for `T`\n    |\n    = help: consider adding a `where T: Bound` bound\n-note: required by `Foo`\n-  --> $DIR/issue-21837.rs:2:1\n-   |\n-LL | pub struct Foo<T: Bound>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a6cce7846e81de6cc513c8207b1633be4eb801bc", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n   --> $DIR/issue-21974.rs:10:1\n    |\n+LL |   trait Foo {\n+   |   --------- required by `Foo`\n+...\n LL | / fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n LL | |     where &'a T : Foo,\n LL | |           &'b T : Foo\n@@ -9,12 +12,6 @@ LL | |     x.foo();\n LL | |     y.foo();\n LL | | }\n    | |_^\n-   |\n-note: required by `Foo`\n-  --> $DIR/issue-21974.rs:6:1\n-   |\n-LL | trait Foo {\n-   | ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eb9aada389f8fd4ae5e51d7d19a98a64dd5e3294", "filename": "src/test/ui/issues/issue-24204.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24204.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0271]: type mismatch resolving `<<T as Trait>::A as MultiDispatch<i32>>::O == T`\n   --> $DIR/issue-24204.rs:14:1\n    |\n+LL | trait Trait: Sized {\n+   | ------------------ required by `Trait`\n+...\n LL | fn test<T: Trait<B=i32>>(b: i32) -> T where T::A: MultiDispatch<i32> { T::new(b) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found type parameter\n    |\n    = note: expected type `<<T as Trait>::A as MultiDispatch<i32>>::O`\n               found type `T`\n-note: required by `Trait`\n-  --> $DIR/issue-24204.rs:7:1\n-   |\n-LL | trait Trait: Sized {\n-   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7ff019a30a864527e1921918701aed9ea1edbe6b", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0283]: type annotations required: cannot resolve `T0: Trait0<'l0>`\n   --> $DIR/issue-24424.rs:4:1\n    |\n+LL | trait Trait0<'l0>  {}\n+   | ----------------- required by `Trait0`\n+LL | \n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: required by `Trait0`\n-  --> $DIR/issue-24424.rs:2:1\n-   |\n-LL | trait Trait0<'l0>  {}\n-   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b583a6b54bf9f71f132fe105ad3c4a135d480644", "filename": "src/test/ui/issues/issue-25076.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `(): InOut<_>` is not satisfied\n   --> $DIR/issue-25076.rs:10:5\n    |\n+LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n+   | ------------------------------------------------ required by `do_fold`\n+...\n LL |     do_fold(bot(), ());\n    |     ^^^^^^^ the trait `InOut<_>` is not implemented for `()`\n-   |\n-note: required by `do_fold`\n-  --> $DIR/issue-25076.rs:5:1\n-   |\n-LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0dc9b0c9e10cde321f23e221d110e22bdc22b6d0", "filename": "src/test/ui/issues/issue-29147.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29147.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0283]: type annotations required: cannot resolve `S5<_>: Foo`\n   --> $DIR/issue-29147.rs:21:13\n    |\n+LL | trait Foo { fn xxx(&self); }\n+   |             -------------- required by `Foo::xxx`\n+...\n LL |     let _ = <S5<_>>::xxx;\n    |             ^^^^^^^^^^^^\n-   |\n-note: required by `Foo::xxx`\n-  --> $DIR/issue-29147.rs:10:13\n-   |\n-LL | trait Foo { fn xxx(&self); }\n-   |             ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2960f4e598997f169245e4950b6cef75e6a4250d", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -12,14 +12,11 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5\n    |\n+LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n+   | ------------------------------------------ required by `size_of_copy`\n+...\n LL |     size_of_copy::<dyn Misc + Copy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `dyn Misc`\n-   |\n-note: required by `size_of_copy`\n-  --> $DIR/issue-32963.rs:5:1\n-   |\n-LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f15f771fa9f6e5a0b426dd83537fce695b80b3ce", "filename": "src/test/ui/issues/issue-39970.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39970.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0271]: type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n   --> $DIR/issue-39970.rs:19:5\n    |\n+LL |     fn visit() {}\n+   |     ---------- required by `Visit::visit`\n+...\n LL |     <() as Visit>::visit();\n    |     ^^^^^^^^^^^^^^^^^^^^ expected &(), found ()\n    |\n    = note: expected type `&()`\n               found type `()`\n    = note: required because of the requirements on the impl of `Visit` for `()`\n-note: required by `Visit::visit`\n-  --> $DIR/issue-39970.rs:6:5\n-   |\n-LL |     fn visit() {}\n-   |     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9131120671f4ccd37e6028c54c9cdc2f9ec3dcc7", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,34 +1,30 @@\n error[E0277]: `std::rc::Rc<Foo>` cannot be sent between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n+LL | fn f<T: Send>(_: T) {}\n+   | ------------------- required by `f`\n+...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be sent between threads safely\n    |\n    = help: within `Bar`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<Foo>`\n    = note: required because it appears within the type `Bar`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<Bar>`\n    = note: required because it appears within the type `Foo`\n-note: required by `f`\n-  --> $DIR/issue-40827.rs:11:1\n-   |\n-LL | fn f<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<Foo>` cannot be shared between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n+LL | fn f<T: Send>(_: T) {}\n+   | ------------------- required by `f`\n+...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `std::rc::Rc<Foo>` cannot be shared between threads safely\n    |\n    = help: within `Bar`, the trait `std::marker::Sync` is not implemented for `std::rc::Rc<Foo>`\n    = note: required because it appears within the type `Bar`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<Bar>`\n    = note: required because it appears within the type `Foo`\n-note: required by `f`\n-  --> $DIR/issue-40827.rs:11:1\n-   |\n-LL | fn f<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d843629e8a26fb006f5f65f62934206414c04462", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,41 +1,31 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-43623.rs:14:5\n    |\n-LL |     break_me::<Type, fn(_)>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n-   |     found signature of `fn(_) -> _`\n-   |\n-note: required by `break_me`\n-  --> $DIR/issue-43623.rs:11:1\n-   |\n LL | / pub fn break_me<T, F>(f: F)\n LL | | where T: for<'b> Trait<'b>,\n LL | |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n LL | |     break_me::<Type, fn(_)>;\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   | |     |\n+   | |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n+   | |     found signature of `fn(_) -> _`\n LL | |\n LL | |\n LL | | }\n-   | |_^\n+   | |_- required by `break_me`\n \n error[E0271]: type mismatch resolving `for<'b> <fn(_) as std::ops::FnOnce<(<Type as Trait<'b>>::Assoc,)>>::Output == ()`\n   --> $DIR/issue-43623.rs:14:5\n    |\n-LL |     break_me::<Type, fn(_)>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n-   |\n-note: required by `break_me`\n-  --> $DIR/issue-43623.rs:11:1\n-   |\n LL | / pub fn break_me<T, F>(f: F)\n LL | | where T: for<'b> Trait<'b>,\n LL | |       F: for<'b> FnMut(<T as Trait<'b>>::Assoc) {\n LL | |     break_me::<Type, fn(_)>;\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'b, found concrete lifetime\n LL | |\n LL | |\n LL | | }\n-   | |_^\n+   | |_- required by `break_me`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c47eebb8e5c0780a62569f97f12c699bf7042628", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -10,21 +10,18 @@ LL |         self.foo.map(Foo::new)\n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:27:5\n    |\n-LL |     Bar(i32),\n-   |     -------- takes 1 argument\n+LL |       Bar(i32),\n+   |       -------- takes 1 argument\n ...\n-LL |     foo(Qux::Bar);\n-   |     ^^^ expected function that takes 0 arguments\n-   |\n-note: required by `foo`\n-  --> $DIR/issue-47706.rs:20:1\n-   |\n LL | / fn foo<F>(f: F)\n LL | | where\n LL | |     F: Fn(),\n LL | | {\n LL | | }\n-   | |_^\n+   | |_- required by `foo`\n+...\n+LL |       foo(Qux::Bar);\n+   |       ^^^ expected function that takes 0 arguments\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a977ba392769f36e7e0c9da3132852368a31c128", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,33 +1,27 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-60283.rs:14:5\n    |\n-LL |     foo((), drop)\n-   |     ^^^\n-   |     |\n-   |     expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n-   |     found signature of `fn(_) -> _`\n-   |\n-note: required by `foo`\n-  --> $DIR/issue-60283.rs:9:1\n-   |\n LL | / pub fn foo<T, F>(_: T, _: F)\n LL | | where T: for<'a> Trait<'a>,\n LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   | |_________________________________________________^\n+   | |_________________________________________________- required by `foo`\n+...\n+LL |       foo((), drop)\n+   |       ^^^\n+   |       |\n+   |       expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n+   |       found signature of `fn(_) -> _`\n \n error[E0271]: type mismatch resolving `for<'a> <fn(_) {std::mem::drop::<_>} as std::ops::FnOnce<(<() as Trait<'a>>::Item,)>>::Output == ()`\n   --> $DIR/issue-60283.rs:14:5\n    |\n-LL |     foo((), drop)\n-   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n-   |\n-note: required by `foo`\n-  --> $DIR/issue-60283.rs:9:1\n-   |\n LL | / pub fn foo<T, F>(_: T, _: F)\n LL | | where T: for<'a> Trait<'a>,\n LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n-   | |_________________________________________________^\n+   | |_________________________________________________- required by `foo`\n+...\n+LL |       foo((), drop)\n+   |       ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n \n error: aborting due to 2 previous errors\n "}, {"sha": "92a91ff4cb1ba1e2ae9df5c8bc70ad9ad81f8269", "filename": "src/test/ui/iterators/bound.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,13 @@\n error[E0277]: `u8` is not an iterator\n   --> $DIR/bound.rs:2:10\n    |\n+LL | struct S<I: Iterator>(I);\n+   | ------------------------- required by `S`\n LL | struct T(S<u8>);\n    |          ^^^^^ `u8` is not an iterator\n    |\n    = help: the trait `std::iter::Iterator` is not implemented for `u8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n-note: required by `S`\n-  --> $DIR/bound.rs:1:1\n-   |\n-LL | struct S<I: Iterator>(I);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1fe59460e057fbf6c4b1aecc581ce9f33f1ca117", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 33, "deletions": 64, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,138 +1,107 @@\n error[E0277]: the trait bound `&'static mut isize: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:27:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<&'static mut isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `&'a mut isize: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:28:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<&'a mut isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::boxed::Box<isize>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:31:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<Box<isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:32:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<String>();\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::vec::Vec<isize>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:33:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<Vec<isize> >();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::boxed::Box<&'a mut isize>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:34:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<Box<&'a mut isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::boxed::Box<dyn Dummy>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:42:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy>`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::boxed::Box<dyn Dummy + std::marker::Send>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:43:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<Box<dyn Dummy + Send>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy + std::marker::Send>`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `&'a mut (dyn Dummy + std::marker::Send + 'a): std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:46:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `MyNoncopyStruct: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:64:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<MyNoncopyStruct>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::rc::Rc<isize>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:67:5\n    |\n+LL | fn assert_copy<T:Copy>() { }\n+   | ------------------------ required by `assert_copy`\n+...\n LL |     assert_copy::<Rc<isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`\n-   |\n-note: required by `assert_copy`\n-  --> $DIR/kindck-copy.rs:5:1\n-   |\n-LL | fn assert_copy<T:Copy>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "6d599423d25482f307d7f40b00f5d4f506f059ee", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:5\n    |\n+LL | fn take_param<T:Foo>(foo: &T) { }\n+   | ----------------------------- required by `take_param`\n+...\n LL |     take_param(&x);\n    |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `std::boxed::Box<{integer}>`\n-note: required by `take_param`\n-  --> $DIR/kindck-impl-type-params-2.rs:9:1\n-   |\n-LL | fn take_param<T:Foo>(foo: &T) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a53063157fc8ea81eb04e637d1c88c5e4d3cd003", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:18:5\n    |\n+LL | fn take_param<T:Foo>(foo: &T) { }\n+   | ----------------------------- required by `take_param`\n+...\n LL |     take_param(&x);\n    |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<{integer}>`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `std::boxed::Box<{integer}>`\n-note: required by `take_param`\n-  --> $DIR/kindck-inherited-copy-bound.rs:14:1\n-   |\n-LL | fn take_param<T:Foo>(foo: &T) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:24:19"}, {"sha": "6d60de888c98d9e2c8fdc47ffa315f654150832a", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: `std::rc::Rc<usize>` cannot be sent between threads safely\n   --> $DIR/kindck-nonsendable-1.rs:9:5\n    |\n+LL | fn bar<F:FnOnce() + Send>(_: F) { }\n+   | ------------------------------- required by `bar`\n+...\n LL |     bar(move|| foo(x));\n    |     ^^^ `std::rc::Rc<usize>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<usize>`\n    = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22 x:std::rc::Rc<usize>]`\n-note: required by `bar`\n-  --> $DIR/kindck-nonsendable-1.rs:5:1\n-   |\n-LL | fn bar<F:FnOnce() + Send>(_: F) { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3ca2d730cbae9f9bb640e53a9917ebb6c1890450", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,31 +1,27 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object.rs:12:5\n    |\n+LL | fn assert_send<T:Send>() { }\n+   | ------------------------ required by `assert_send`\n+...\n LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&'static (dyn Dummy + 'static)`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object.rs:5:1\n-   |\n-LL | fn assert_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object.rs:17:5\n    |\n+LL | fn assert_send<T:Send>() { }\n+   | ------------------------ required by `assert_send`\n+...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dyn Dummy`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dyn Dummy>`\n    = note: required because it appears within the type `std::boxed::Box<dyn Dummy>`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object.rs:5:1\n-   |\n-LL | fn assert_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0f5f7e0890b233fd2c2432630d9d2abb0dae7a6a", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n+LL | fn assert_send<T:Send+'static>() { }\n+   | -------------------------------- required by `assert_send`\n+...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&'a (dyn Dummy + 'a)`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:1\n-   |\n-LL | fn assert_send<T:Send+'static>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0477]: the type `&'a (dyn Dummy + std::marker::Sync + 'a)` does not fulfill the required lifetime\n   --> $DIR/kindck-send-object1.rs:14:5\n@@ -23,17 +21,15 @@ LL |     assert_send::<&'a (dyn Dummy + Sync)>();\n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n+LL | fn assert_send<T:Send+'static>() { }\n+   | -------------------------------- required by `assert_send`\n+...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<(dyn Dummy + 'a)>`\n    = note: required because it appears within the type `std::boxed::Box<(dyn Dummy + 'a)>`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object1.rs:5:1\n-   |\n-LL | fn assert_send<T:Send+'static>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "72cd985cc8639135a7db0ff653645e1d18094b4a", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,31 +1,27 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object2.rs:7:5\n    |\n+LL | fn assert_send<T:Send>() { }\n+   | ------------------------ required by `assert_send`\n+...\n LL |     assert_send::<&'static dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&'static (dyn Dummy + 'static)`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object2.rs:3:1\n-   |\n-LL | fn assert_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object2.rs:12:5\n    |\n+LL | fn assert_send<T:Send>() { }\n+   | ------------------------ required by `assert_send`\n+...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dyn Dummy`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dyn Dummy>`\n    = note: required because it appears within the type `std::boxed::Box<dyn Dummy>`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object2.rs:3:1\n-   |\n-LL | fn assert_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ee919f02d653727a3273422bdb3abc4fd89e010f", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: `*mut u8` cannot be sent between threads safely\n   --> $DIR/kindck-send-owned.rs:12:5\n    |\n+LL | fn assert_send<T:Send>() { }\n+   | ------------------------ required by `assert_send`\n+...\n LL |     assert_send::<Box<*mut u8>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `*mut u8`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<*mut u8>`\n    = note: required because it appears within the type `std::boxed::Box<*mut u8>`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-owned.rs:3:1\n-   |\n-LL | fn assert_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a87e1c7db2a2e39f851c2035ecdbcd8cb32b568e", "filename": "src/test/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n   --> $DIR/kindck-send-unsafe.rs:6:5\n    |\n+LL | fn assert_send<T:Send>() { }\n+   | ------------------------ required by `assert_send`\n+...\n LL |     assert_send::<*mut &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `*mut &'a isize`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-unsafe.rs:3:1\n-   |\n-LL | fn assert_send<T:Send>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4e79fbdeadc5c5f859ef8e2df7f53c7d7eb7fe70", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n   --> $DIR/overlap-marker-trait.rs:27:5\n    |\n+LL | fn is_marker<T: Marker>() { }\n+   | ------------------------- required by `is_marker`\n+...\n LL |     is_marker::<NotDebugOrDisplay>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n-   |\n-note: required by `is_marker`\n-  --> $DIR/overlap-marker-trait.rs:15:1\n-   |\n-LL | fn is_marker<T: Marker>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "319eb86480af5f0f174f5bb8ba65f4ff16b661a7", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,60 +1,48 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:7:5\n    |\n+LL | fn foo<F: Fn(usize)>(_: F) {}\n+   | -------------------------- required by `foo`\n+...\n LL |     foo(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n    |     |\n    |     expected signature of `fn(usize) -> _`\n-   |\n-note: required by `foo`\n-  --> $DIR/E0631.rs:3:1\n-   |\n-LL | fn foo<F: Fn(usize)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:8:5\n    |\n+LL | fn bar<F: Fn<usize>>(_: F) {}\n+   | -------------------------- required by `bar`\n+...\n LL |     bar(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n    |     |\n    |     expected signature of `fn(usize) -> _`\n-   |\n-note: required by `bar`\n-  --> $DIR/E0631.rs:4:1\n-   |\n-LL | fn bar<F: Fn<usize>>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:5\n    |\n+LL | fn foo<F: Fn(usize)>(_: F) {}\n+   | -------------------------- required by `foo`\n+...\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     foo(f);\n    |     ^^^ expected signature of `fn(usize) -> _`\n-   |\n-note: required by `foo`\n-  --> $DIR/E0631.rs:3:1\n-   |\n-LL | fn foo<F: Fn(usize)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:10:5\n    |\n+LL | fn bar<F: Fn<usize>>(_: F) {}\n+   | -------------------------- required by `bar`\n+LL | fn main() {\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     bar(f);\n    |     ^^^ expected signature of `fn(usize) -> _`\n-   |\n-note: required by `bar`\n-  --> $DIR/E0631.rs:4:1\n-   |\n-LL | fn bar<F: Fn<usize>>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b7b5b50b0b4e4dd8042a3c1880193d79a2cfce67", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -45,16 +45,13 @@ LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:13:5\n    |\n+LL | fn f<F: Fn<usize>>(_: F) {}\n+   | ------------------------ required by `f`\n+...\n LL |     f(|| panic!());\n    |     ^ -- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n-   |\n-note: required by `f`\n-  --> $DIR/closure-arg-count.rs:3:1\n-   |\n-LL | fn f<F: Fn<usize>>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(|_| panic!());\n@@ -63,16 +60,13 @@ LL |     f(|_| panic!());\n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:15:5\n    |\n+LL | fn f<F: Fn<usize>>(_: F) {}\n+   | ------------------------ required by `f`\n+...\n LL |     f(  move    || panic!());\n    |     ^   ---------- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n-   |\n-note: required by `f`\n-  --> $DIR/closure-arg-count.rs:3:1\n-   |\n-LL | fn f<F: Fn<usize>>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(  move    |_| panic!());\n@@ -148,14 +142,10 @@ error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n LL |     call(Foo);\n    |     ^^^^ expected function that takes 0 arguments\n ...\n+LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n+   | ------------------------------------------ required by `call`\n LL | struct Foo(u8);\n    | --------------- takes 1 argument\n-   |\n-note: required by `call`\n-  --> $DIR/closure-arg-count.rs:42:1\n-   |\n-LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 14 previous errors\n "}, {"sha": "2a65759dd17f81e04300d481e229da86db09c4d1", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -25,29 +25,23 @@ LL |     a.iter().map(|_: (u16, u16)| 45);\n error[E0631]: type mismatch in function arguments\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ------------------------------ required by `baz`\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |     ^^^\n    |     |\n    |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n    |     found signature of `fn(*mut &'a u32) -> _`\n-   |\n-note: required by `baz`\n-  --> $DIR/closure-arg-type-mismatch.rs:8:1\n-   |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:10:5\n    |\n+LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ------------------------------ required by `baz`\n+LL | fn _test<'a>(f: fn(*mut &'a u32)) {\n LL |     baz(f);\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n-   |\n-note: required by `baz`\n-  --> $DIR/closure-arg-type-mismatch.rs:8:1\n-   |\n-LL | fn baz<F: Fn(*mut &u32)>(_: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "0fe4909eaa7780be17e905ca1e003b4418fb8b47", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,30 +1,26 @@\n error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.rs:8:9: 8:15] as std::ops::FnOnce<(&'r (),)>>::Output == ()`\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n+LL | fn baz<T: Foo>(_: T) {}\n+   | -------------------- required by `baz`\n+...\n LL |     baz(|_| ());\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n-note: required by `baz`\n-  --> $DIR/closure-mismatch.rs:5:1\n-   |\n-LL | fn baz<T: Foo>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:8:5\n    |\n+LL | fn baz<T: Foo>(_: T) {}\n+   | -------------------- required by `baz`\n+...\n LL |     baz(|_| ());\n    |     ^^^ ------ found signature of `fn(_) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r ()) -> _`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:8:9: 8:15]`\n-note: required by `baz`\n-  --> $DIR/closure-mismatch.rs:5:1\n-   |\n-LL | fn baz<T: Foo>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d4db7bda06e7e27d931599a17e5a062b3658976f", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -3,30 +3,24 @@ error[E0631]: type mismatch in function arguments\n    |\n LL | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n+LL | \n+LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | --------------------------------------------- required by `apply`\n ...\n LL |     apply(&3, takes_mut);\n    |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n-   |\n-note: required by `apply`\n-  --> $DIR/fn-variance-1.rs:5:1\n-   |\n-LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:15:5\n    |\n LL | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n ...\n+LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | --------------------------------------------- required by `apply`\n+...\n LL |     apply(&mut 3, takes_imm);\n    |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n-   |\n-note: required by `apply`\n-  --> $DIR/fn-variance-1.rs:5:1\n-   |\n-LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "53c9fcd70a23d11d8182ca47293026d35dcc46e0", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,14 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/unboxed-closures-vtable-mismatch.rs:15:13\n    |\n+LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n+   | -------------------------------------------------------------------- required by `call_it`\n+...\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n LL |\n LL |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n-   |\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:7:1\n-   |\n-LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4efb10b56290e6ff318cb56de7c060b59c035d3d", "filename": "src/test/ui/mut/mutable-enum-indirect.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/mutable-enum-indirect.rs:17:5\n    |\n+LL | fn bar<T: Sync>(_: T) {}\n+   | --------------------- required by `bar`\n+...\n LL |     bar(&x);\n    |     ^^^ `NoSync` cannot be shared between threads safely\n    |\n    = help: within `&Foo`, the trait `std::marker::Sync` is not implemented for `NoSync`\n    = note: required because it appears within the type `Foo`\n    = note: required because it appears within the type `&Foo`\n-note: required by `bar`\n-  --> $DIR/mutable-enum-indirect.rs:13:1\n-   |\n-LL | fn bar<T: Sync>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4a93c9f09b788305be025ef0dc3a3ce0777beec3", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/mutexguard-sync.rs:11:5\n    |\n+LL | fn test_sync<T: Sync>(_t: T) {}\n+   | ---------------------------- required by `test_sync`\n+...\n LL |     test_sync(guard);\n    |     ^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `std::sync::MutexGuard<'_, std::cell::Cell<i32>>`\n-note: required by `test_sync`\n-  --> $DIR/mutexguard-sync.rs:5:1\n-   |\n-LL | fn test_sync<T: Sync>(_t: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "39aaddb390caa738fd5652a6ec8ee84cb96fed4e", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 132, "deletions": 264, "changes": 396, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -69,530 +69,398 @@ LL | use namespace_mix::xm8::V;\n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m1::S{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:35:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m2::S{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::S`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:36:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m2::S);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:39:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm1::S{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:41:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm2::S{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:42:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm2::S);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:55:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m3::TS{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:56:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m3::TS);\n    |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:57:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m4::TS{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::TS`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:58:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m4::TS);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:61:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm3::TS{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:62:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm3::TS);\n    |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:63:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm4::TS{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:64:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm4::TS);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:77:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m5::US{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:78:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m5::US);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::US`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:79:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m6::US{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::US`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:80:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m6::US);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:83:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm5::US{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:84:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm5::US);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:85:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm6::US{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:86:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm6::US);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:99:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m7::V{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:101:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m8::V{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:102:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m8::V);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:105:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm7::V{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:107:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm8::V{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:108:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm8::V);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:121:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m9::TV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:122:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(m9::TV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:123:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(mA::TV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:124:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(mA::TV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:127:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm9::TV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:128:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xm9::TV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:129:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xmA::TV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:130:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xmA::TV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:143:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(mB::UV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:144:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(mB::UV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:145:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(mC::UV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:146:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(mC::UV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:149:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xmB::UV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:150:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xmB::UV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:151:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xmC::UV{});\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:152:5\n    |\n+LL | fn check<T: Impossible>(_: T) {}\n+   | ----------------------------- required by `check`\n+...\n LL |     check(xmC::UV);\n    |     ^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n-   |\n-note: required by `check`\n-  --> $DIR/namespace-mix.rs:21:1\n-   |\n-LL | fn check<T: Impossible>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 48 previous errors\n "}, {"sha": "d1f3398ff90279f4c63001d665eda4118e9bce9e", "filename": "src/test/ui/no_send-enum.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_send-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_send-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: `NoSend` cannot be sent between threads safely\n   --> $DIR/no_send-enum.rs:16:5\n    |\n+LL | fn bar<T: Send>(_: T) {}\n+   | --------------------- required by `bar`\n+...\n LL |     bar(x);\n    |     ^^^ `NoSend` cannot be sent between threads safely\n    |\n    = help: within `Foo`, the trait `std::marker::Send` is not implemented for `NoSend`\n    = note: required because it appears within the type `Foo`\n-note: required by `bar`\n-  --> $DIR/no_send-enum.rs:12:1\n-   |\n-LL | fn bar<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eaf3103060efff90f927e08d980af7f50f26b281", "filename": "src/test/ui/no_send-rc.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_send-rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_send-rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-rc.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: `std::rc::Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/no_send-rc.rs:7:5\n    |\n+LL | fn bar<T: Send>(_: T) {}\n+   | --------------------- required by `bar`\n+...\n LL |     bar(x);\n    |     ^^^ `std::rc::Rc<{integer}>` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<{integer}>`\n-note: required by `bar`\n-  --> $DIR/no_send-rc.rs:3:1\n-   |\n-LL | fn bar<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1808cef45f1848fe4cd0a19ceecdacb6cf819938", "filename": "src/test/ui/no_send-struct.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: `Foo` cannot be sent between threads safely\n   --> $DIR/no_send-struct.rs:15:5\n    |\n+LL | fn bar<T: Send>(_: T) {}\n+   | --------------------- required by `bar`\n+...\n LL |     bar(x);\n    |     ^^^ `Foo` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `Foo`\n-note: required by `bar`\n-  --> $DIR/no_send-struct.rs:11:1\n-   |\n-LL | fn bar<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5a9b7cae0b9f6d9b67f9ef2fe57941f4e2b55457", "filename": "src/test/ui/no_share-enum.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_share-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_share-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/no_share-enum.rs:14:5\n    |\n+LL | fn bar<T: Sync>(_: T) {}\n+   | --------------------- required by `bar`\n+...\n LL |     bar(x);\n    |     ^^^ `NoSync` cannot be shared between threads safely\n    |\n    = help: within `Foo`, the trait `std::marker::Sync` is not implemented for `NoSync`\n    = note: required because it appears within the type `Foo`\n-note: required by `bar`\n-  --> $DIR/no_share-enum.rs:10:1\n-   |\n-LL | fn bar<T: Sync>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c12ee7c5eae8575e574a86d1f0615baf5b9c7aae", "filename": "src/test/ui/no_share-struct.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_share-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fno_share-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: `Foo` cannot be shared between threads safely\n   --> $DIR/no_share-struct.rs:12:5\n    |\n+LL | fn bar<T: Sync>(_: T) {}\n+   | --------------------- required by `bar`\n+...\n LL |     bar(x);\n    |     ^^^ `Foo` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `Foo`\n-note: required by `bar`\n-  --> $DIR/no_share-struct.rs:8:1\n-   |\n-LL | fn bar<T: Sync>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5bacf0bbc6b45fbf514f4f443c7c0229293d8a9b", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,33 +1,29 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `std::rc::Rc<std::cell::RefCell<i32>>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-2.rs:7:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<isize>`\n    = note: required because it appears within the type `std::cell::Cell<isize>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `std::rc::Rc<std::cell::RefCell<i32>>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-2.rs:7:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6d2a450115dff62c785c5ef2a8fa5d0f2743105b", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,33 +1,29 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `std::sync::Arc<std::cell::RefCell<i32>>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-3.rs:7:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<isize>`\n    = note: required because it appears within the type `std::cell::Cell<isize>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `std::sync::Arc<std::cell::RefCell<i32>>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-3.rs:7:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e28f169b72b6c8769c471c423d2ae7b0f9d3c7cf", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,33 +1,29 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::RefCell<i32>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-4.rs:6:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<isize>`\n    = note: required because it appears within the type `std::cell::Cell<isize>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `&std::cell::RefCell<i32>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-4.rs:6:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8c4fe68dde7ba47b69737122b233cb7daf8ee0a", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-5.rs:9:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<*const UnsafeCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `*const std::cell::UnsafeCell<i32>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-5.rs:6:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2cd780590729c20c0c29a407a11632721a10090f", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,33 +1,29 @@\n error[E0277]: the type `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<i32>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `*mut std::cell::RefCell<i32>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-6.rs:6:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the type `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `std::cell::RefCell<i32>`, the trait `std::panic::RefUnwindSafe` is not implemented for `std::cell::UnsafeCell<isize>`\n    = note: required because it appears within the type `std::cell::Cell<isize>`\n    = note: required because it appears within the type `std::cell::RefCell<i32>`\n    = note: required because of the requirements on the impl of `std::panic::UnwindSafe` for `*mut std::cell::RefCell<i32>`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe-6.rs:6:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "315ea17971aa975e3fd1fe8e169f349109012797", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the type `&mut i32` may not be safely transferred across an unwind boundary\n   --> $DIR/not-panic-safe.rs:9:5\n    |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   | ----------------------------------- required by `assert`\n+...\n LL |     assert::<&mut i32>();\n    |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary\n    |\n    = help: the trait `std::panic::UnwindSafe` is not implemented for `&mut i32`\n-note: required by `assert`\n-  --> $DIR/not-panic-safe.rs:6:1\n-   |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "57f1122be2b352c283f47a277e767a1f8c4cc25d", "filename": "src/test/ui/not-sync.stderr", "status": "modified", "additions": 18, "deletions": 30, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-sync.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,80 +1,68 @@\n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:8:5\n    |\n+LL | fn test<T: Sync>() {}\n+   | ------------------ required by `test`\n+...\n LL |     test::<Cell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n-note: required by `test`\n-  --> $DIR/not-sync.rs:5:1\n-   |\n-LL | fn test<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:10:5\n    |\n+LL | fn test<T: Sync>() {}\n+   | ------------------ required by `test`\n+...\n LL |     test::<RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n-note: required by `test`\n-  --> $DIR/not-sync.rs:5:1\n-   |\n-LL | fn test<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:13:5\n    |\n+LL | fn test<T: Sync>() {}\n+   | ------------------ required by `test`\n+...\n LL |     test::<Rc<i32>>();\n    |     ^^^^^^^^^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Rc<i32>`\n-note: required by `test`\n-  --> $DIR/not-sync.rs:5:1\n-   |\n-LL | fn test<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Weak<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:15:5\n    |\n+LL | fn test<T: Sync>() {}\n+   | ------------------ required by `test`\n+...\n LL |     test::<Weak<i32>>();\n    |     ^^^^^^^^^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Weak<i32>`\n-note: required by `test`\n-  --> $DIR/not-sync.rs:5:1\n-   |\n-LL | fn test<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:18:5\n    |\n+LL | fn test<T: Sync>() {}\n+   | ------------------ required by `test`\n+...\n LL |     test::<Receiver<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<i32>`\n-note: required by `test`\n-  --> $DIR/not-sync.rs:5:1\n-   |\n-LL | fn test<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:20:5\n    |\n+LL | fn test<T: Sync>() {}\n+   | ------------------ required by `test`\n+...\n LL |     test::<Sender<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<i32>`\n-note: required by `test`\n-  --> $DIR/not-sync.rs:5:1\n-   |\n-LL | fn test<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d3add6398bd98d906a994030f638f8544377e10c", "filename": "src/test/ui/object-does-not-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,10 @@\n error[E0277]: the trait bound `std::boxed::Box<dyn Foo>: Foo` is not satisfied\n   --> $DIR/object-does-not-impl-trait.rs:6:35\n    |\n+LL | fn take_foo<F:Foo>(f: F) {}\n+   | ------------------------ required by `take_foo`\n LL | fn take_object(f: Box<dyn Foo>) { take_foo(f); }\n    |                                   ^^^^^^^^ the trait `Foo` is not implemented for `std::boxed::Box<dyn Foo>`\n-   |\n-note: required by `take_foo`\n-  --> $DIR/object-does-not-impl-trait.rs:5:1\n-   |\n-LL | fn take_foo<F:Foo>(f: F) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b286265bf01c0e7e520d95b457ef98189e70c19f", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:5\n    |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     --------------------------------------------- required by `Index::index`\n+...\n LL |     Index::index(&[] as &[i32], 2u32);\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:33:5\n@@ -22,15 +20,13 @@ LL |     Index::index(&[] as &[i32], 2u32);\n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:5\n    |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     --------------------------------------------- required by `Index::index`\n+...\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:36:5\n@@ -43,15 +39,13 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:5\n    |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     --------------------------------------------- required by `Index::index`\n+...\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/multiple-impls.rs:12:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:39:5"}, {"sha": "78dc9a53761c5406ed18c2c4c5cd782c522ebe52", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:5\n    |\n+LL |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     --------------------------------------------- required by `Index::index`\n+...\n LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-note: required by `Index::index`\n-  --> $DIR/on-impl.rs:9:5\n-   |\n-LL |     fn index(&self, index: Idx) -> &Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:22:5"}, {"sha": "992f53b1da6b67a7d3423564b9ee99e94b3ed703", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,28 +1,24 @@\n error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIterator<&u8>` is not satisfied\n   --> $DIR/on-trait.rs:28:30\n    |\n+LL | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n+   | -------------------------------------------------------------------- required by `collect`\n+...\n LL |     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n    |\n    = help: the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n-note: required by `collect`\n-  --> $DIR/on-trait.rs:22:1\n-   |\n-LL | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not satisfied\n   --> $DIR/on-trait.rs:31:21\n    |\n+LL | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n+   | ---------------------------------------------- required by `foobar`\n+...\n LL |     let x: String = foobar();\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n    |\n    = help: the trait `Bar::Foo<u8, _, u32>` is not implemented for `std::string::String`\n-note: required by `foobar`\n-  --> $DIR/on-trait.rs:12:1\n-   |\n-LL | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a66e3990e8bd976856f4af197f2967828278232f", "filename": "src/test/ui/overlap-marker-trait.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n   --> $DIR/overlap-marker-trait.rs:30:5\n    |\n+LL | fn is_marker<T: Marker>() { }\n+   | ------------------------- required by `is_marker`\n+...\n LL |     is_marker::<NotDebugOrDisplay>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n-   |\n-note: required by `is_marker`\n-  --> $DIR/overlap-marker-trait.rs:18:1\n-   |\n-LL | fn is_marker<T: Marker>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "284102a6df028d08e485a5d54c70104f8930a0e2", "filename": "src/test/ui/phantom-oibit.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fphantom-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-oibit.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:21:5\n    |\n+LL | fn is_zen<T: Zen>(_: T) {}\n+   | ----------------------- required by `is_zen`\n+...\n LL |     is_zen(x)\n    |     ^^^^^^ `T` cannot be shared between threads safely\n    |\n@@ -9,15 +12,13 @@ LL |     is_zen(x)\n    = note: required because of the requirements on the impl of `Zen` for `&T`\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n-note: required by `is_zen`\n-  --> $DIR/phantom-oibit.rs:18:1\n-   |\n-LL | fn is_zen<T: Zen>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-oibit.rs:26:5\n    |\n+LL | fn is_zen<T: Zen>(_: T) {}\n+   | ----------------------- required by `is_zen`\n+...\n LL |     is_zen(x)\n    |     ^^^^^^ `T` cannot be shared between threads safely\n    |\n@@ -27,11 +28,6 @@ LL |     is_zen(x)\n    = note: required because it appears within the type `std::marker::PhantomData<&T>`\n    = note: required because it appears within the type `Guard<'_, T>`\n    = note: required because it appears within the type `Nested<Guard<'_, T>>`\n-note: required by `is_zen`\n-  --> $DIR/phantom-oibit.rs:18:1\n-   |\n-LL | fn is_zen<T: Zen>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9846c938ba90b5e4ec5e39592b0fb29b83c2acf6", "filename": "src/test/ui/recursion/recursive-requirements.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,32 +1,28 @@\n error[E0277]: `*const Bar` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n+LL | struct AssertSync<T: Sync>(PhantomData<T>);\n+   | ------------------------------------------- required by `AssertSync`\n+...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Bar` cannot be shared between threads safely\n    |\n    = help: within `Foo`, the trait `std::marker::Sync` is not implemented for `*const Bar`\n    = note: required because it appears within the type `Foo`\n-note: required by `AssertSync`\n-  --> $DIR/recursive-requirements.rs:3:1\n-   |\n-LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*const Foo` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n+LL | struct AssertSync<T: Sync>(PhantomData<T>);\n+   | ------------------------------------------- required by `AssertSync`\n+...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Foo` cannot be shared between threads safely\n    |\n    = help: within `Foo`, the trait `std::marker::Sync` is not implemented for `*const Foo`\n    = note: required because it appears within the type `Bar`\n    = note: required because it appears within the type `std::marker::PhantomData<Bar>`\n    = note: required because it appears within the type `Foo`\n-note: required by `AssertSync`\n-  --> $DIR/recursive-requirements.rs:3:1\n-   |\n-LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d3e33e4b05030c1d45698d4b76938fc8a1b972a", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `u8: Tr` is not satisfied\n   --> $DIR/issue-29595.rs:6:17\n    |\n+LL |     const C: Self;\n+   |     -------------- required by `Tr::C`\n+...\n LL |     let a: u8 = Tr::C;\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n-   |\n-note: required by `Tr::C`\n-  --> $DIR/issue-29595.rs:2:5\n-   |\n-LL |     const C: Self;\n-   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "08baa478b8bfa37b07f0cbf70c5649db01cc474a", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n+LL | fn bot<T>() -> T { loop {} }\n+   | ---------------- required by `bot`\n+...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-note: required by `bot`\n-  --> $DIR/str-mut-idx.rs:1:1\n-   |\n-LL | fn bot<T>() -> T { loop {} }\n-   | ^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-mut-idx.rs:4:5"}, {"sha": "1c2c205e01c1b04974ce79ce43dd6fc9e85bf0a4", "filename": "src/test/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `NoClone: std::clone::Clone` is not satisfied\n   --> $DIR/struct-path-alias-bounds.rs:9:13\n    |\n+LL | struct S<T: Clone> { a: T }\n+   | ------------------ required by `S`\n+...\n LL |     let s = A { a: NoClone };\n    |             ^ the trait `std::clone::Clone` is not implemented for `NoClone`\n-   |\n-note: required by `S`\n-  --> $DIR/struct-path-alias-bounds.rs:3:1\n-   |\n-LL | struct S<T: Clone> { a: T }\n-   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4a8c99cdef3f57d2c479d6b5a70440c3340597e5", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -61,17 +61,15 @@ LL |     let x: () = foo::<'static>;\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- required by `Foo::bar`\n+...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for `str`\n-note: required by `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:5\n-   |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3314eb60cdea6cdfa693ae6e232b77d1847e2c5f", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -61,17 +61,15 @@ LL |     let x: () = foo::<'static>;\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- required by `Foo::bar`\n+...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>` for `str`\n-note: required by `Foo::bar`\n-  --> $DIR/substs-ppaux.rs:7:5\n-   |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "da5aeb63b909ae121f7b39c38d9cf2595e564132", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the trait bound `&str: std::convert::From<std::string::String>` is not satisfied\n   --> $DIR/into-str.rs:4:5\n    |\n+LL | fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n+   | ------------------------------------------- required by `foo`\n+...\n LL |     foo(String::new());\n    |     ^^^ the trait `std::convert::From<std::string::String>` is not implemented for `&str`\n    |\n    = note: to coerce a `std::string::String` into a `&str`, use `&*` as a prefix\n    = note: required because of the requirements on the impl of `std::convert::Into<&str>` for `std::string::String`\n-note: required by `foo`\n-  --> $DIR/into-str.rs:1:1\n-   |\n-LL | fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8403b2ebaca100642893dfec13a64154eb091f64", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,28 +1,24 @@\n error[E0277]: `std::rc::Rc<u32>` cannot be sent between threads safely\n   --> $DIR/trait-alias-cross-crate.rs:14:5\n    |\n+LL | fn use_alias<T: SendSync>() {}\n+   | --------------------------- required by `use_alias`\n+...\n LL |     use_alias::<Rc<u32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<u32>` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<u32>`\n-note: required by `use_alias`\n-  --> $DIR/trait-alias-cross-crate.rs:10:1\n-   |\n-LL | fn use_alias<T: SendSync>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<u32>` cannot be shared between threads safely\n   --> $DIR/trait-alias-cross-crate.rs:14:5\n    |\n+LL | fn use_alias<T: SendSync>() {}\n+   | --------------------------- required by `use_alias`\n+...\n LL |     use_alias::<Rc<u32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<u32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Rc<u32>`\n-note: required by `use_alias`\n-  --> $DIR/trait-alias-cross-crate.rs:10:1\n-   |\n-LL | fn use_alias<T: SendSync>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ca6d05847166788d7c2357caad07f1746aefe034", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,12 @@\n error[E0277]: the trait bound `T: Foo` is not satisfied\n   --> $DIR/trait-alias-wf.rs:5:1\n    |\n+LL | trait A<T: Foo> {}\n+   | --------------- required by `A`\n LL | trait B<T> = A<T>;\n    | ^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `T`\n    |\n    = help: consider adding a `where T: Foo` bound\n-note: required by `A`\n-  --> $DIR/trait-alias-wf.rs:4:1\n-   |\n-LL | trait A<T: Foo> {}\n-   | ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3c68d461f80d6a6b924d2a45fc4737f756015a15", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-fns.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-fns.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,26 +1,20 @@\n error[E0277]: the trait bound `u32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:13:1\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL | fn explode(x: Foo<u32>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u32`\n-   |\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:3:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `f32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:16:1\n    |\n+LL | enum Bar<T:Trait> {\n+   | ----------------- required by `Bar`\n+...\n LL | fn kaboom(y: Bar<f32>) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `f32`\n-   |\n-note: required by `Bar`\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-fns.rs:7:1\n-   |\n-LL | enum Bar<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7e8db610fe2332ce3b0496542e976ba5227d9e44", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-in-impls.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-in-impls.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `u16: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-in-impls.rs:20:6\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL | impl PolyTrait<Foo<u16>> for Struct {\n    |      ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u16`\n-   |\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums-in-impls.rs:3:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "070b7b013e5cce5e84a62cdaad33b2d731dff922", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-locals.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-locals.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,26 +1,20 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:15:14\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL |     let baz: Foo<usize> = loop { };\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n-   |\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:5:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:10:15\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL |     let foo = Foo {\n    |               ^^^ the trait `Trait` is not implemented for `{integer}`\n-   |\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums-locals.rs:5:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "722f01750cb66e0cb5aacef8f235a6ba2939a43e", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums-static.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums-static.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums-static.rs:9:11\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL | static X: Foo<usize> = Foo {\n    |           ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n-   |\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums-static.rs:5:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bd76df8071a53f8a0dcfcf9cb45b20f3a69e1bcb", "filename": "src/test/ui/traits/trait-bounds-on-structs-and-enums.stderr", "status": "modified", "additions": 21, "deletions": 39, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-on-structs-and-enums.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,89 +1,71 @@\n error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:13:9\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL | impl<T> Foo<T> {\n    |         ^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n    = help: consider adding a `where T: Trait` bound\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:3:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:19:5\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL |     a: Foo<isize>,\n    |     ^^^^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n-   |\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:3:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:23:10\n    |\n+LL | enum Bar<T:Trait> {\n+   | ----------------- required by `Bar`\n+...\n LL |     Quux(Bar<usize>),\n    |          ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n-   |\n-note: required by `Bar`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:7:1\n-   |\n-LL | enum Bar<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `U: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:27:5\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL |     b: Foo<U>,\n    |     ^^^^^^^^^ the trait `Trait` is not implemented for `U`\n    |\n    = help: consider adding a `where U: Trait` bound\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:3:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:31:21\n    |\n+LL | enum Bar<T:Trait> {\n+   | ----------------- required by `Bar`\n+...\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n    |\n    = help: consider adding a `where V: Trait` bound\n-note: required by `Bar`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:7:1\n-   |\n-LL | enum Bar<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:35:5\n    |\n+LL | struct Foo<T:Trait> {\n+   | ------------------- required by `Foo`\n+...\n LL |     Foo<i32>,\n    |     ^^^^^^^^ the trait `Trait` is not implemented for `i32`\n-   |\n-note: required by `Foo`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:3:1\n-   |\n-LL | struct Foo<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Trait` is not satisfied\n   --> $DIR/trait-bounds-on-structs-and-enums.rs:39:22\n    |\n+LL | enum Bar<T:Trait> {\n+   | ----------------- required by `Bar`\n+...\n LL |     DictionaryLike { field: Bar<u8> },\n    |                      ^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u8`\n-   |\n-note: required by `Bar`\n-  --> $DIR/trait-bounds-on-structs-and-enums.rs:7:1\n-   |\n-LL | enum Bar<T:Trait> {\n-   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "a99536d31ef8487c8e6495ed1fbb8854aa479105", "filename": "src/test/ui/traits/trait-static-method-generic-inference.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-static-method-generic-inference.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0283]: type annotations required: cannot resolve `_: base::HasNew<base::Foo>`\n   --> $DIR/trait-static-method-generic-inference.rs:24:25\n    |\n+LL |         fn new() -> T;\n+   |         -------------- required by `base::HasNew::new`\n+...\n LL |     let _f: base::Foo = base::HasNew::new();\n    |                         ^^^^^^^^^^^^^^^^^\n-   |\n-note: required by `base::HasNew::new`\n-  --> $DIR/trait-static-method-generic-inference.rs:8:9\n-   |\n-LL |         fn new() -> T;\n-   |         ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b29d726fbba94ad2df5e9c244a4531a11d7b4a3a", "filename": "src/test/ui/traits/traits-inductive-overflow-simultaneous.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-simultaneous.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0275]: overflow evaluating the requirement `{integer}: Tweedledum`\n   --> $DIR/traits-inductive-overflow-simultaneous.rs:18:5\n    |\n+LL | fn is_ee<T: Combo>(t: T) {\n+   | ------------------------ required by `is_ee`\n+...\n LL |     is_ee(4);\n    |     ^^^^^\n    |\n    = note: required because of the requirements on the impl of `Combo` for `{integer}`\n-note: required by `is_ee`\n-  --> $DIR/traits-inductive-overflow-simultaneous.rs:13:1\n-   |\n-LL | fn is_ee<T: Combo>(t: T) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0b543616d7c9a4bdd96e88dca44c02492406490d", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -7,15 +7,13 @@ LL | auto trait Magic: Copy {}\n error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n   --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:18\n    |\n+LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+   | --------------------------------- required by `copy`\n+...\n LL |     let (a, b) = copy(NoClone);\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `NoClone`\n    |\n    = note: required because of the requirements on the impl of `Magic` for `NoClone`\n-note: required by `copy`\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:9:1\n-   |\n-LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "92747be7d2c6b80bdd337ed8cddad34b6aa019c5", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0275]: overflow evaluating the requirement `NoClone: Magic`\n   --> $DIR/traits-inductive-overflow-supertrait.rs:13:18\n    |\n+LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+   | --------------------------------- required by `copy`\n+...\n LL |     let (a, b) = copy(NoClone);\n    |                  ^^^^\n    |\n    = note: required because of the requirements on the impl of `Magic` for `NoClone`\n-note: required by `copy`\n-  --> $DIR/traits-inductive-overflow-supertrait.rs:7:1\n-   |\n-LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "58d7fcd56c71edbe10e195c11920e582d3c63c39", "filename": "src/test/ui/traits/traits-inductive-overflow-two-traits.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-two-traits.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n   --> $DIR/traits-inductive-overflow-two-traits.rs:19:5\n    |\n+LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n+   | --------------------- required by `wizard`\n+...\n LL |     wizard::<*mut ()>();\n    |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: required by `wizard`\n-  --> $DIR/traits-inductive-overflow-two-traits.rs:16:1\n-   |\n-LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "23bd334a3e776212cee2d23b64540d2f359ea193", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 21, "deletions": 35, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,100 +1,86 @@\n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:23:5\n    |\n+LL | struct Outer<T: Send>(T);\n+   | ------------------------- required by `Outer`\n+...\n LL |     Outer(TestType);\n    |     ^^^^^ `dummy::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n-note: required by `Outer`\n-  --> $DIR/traits-negative-impls.rs:10:1\n-   |\n-LL | struct Outer<T: Send>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:23:5\n    |\n+LL | struct Outer<T: Send>(T);\n+   | ------------------------- required by `Outer`\n+...\n LL |     Outer(TestType);\n    |     ^^^^^^^^^^^^^^^ `dummy::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n-note: required by `Outer`\n-  --> $DIR/traits-negative-impls.rs:10:1\n-   |\n-LL | struct Outer<T: Send>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:32:5\n    |\n+LL | fn is_send<T: Send>(_: T) {}\n+   | ------------------------- required by `is_send`\n+...\n LL |     is_send(TestType);\n    |     ^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy1b::TestType`\n-note: required by `is_send`\n-  --> $DIR/traits-negative-impls.rs:16:1\n-   |\n-LL | fn is_send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:40:5\n    |\n+LL | fn is_send<T: Send>(_: T) {}\n+   | ------------------------- required by `is_send`\n+...\n LL |     is_send((8, TestType));\n    |     ^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n    |\n    = help: within `({integer}, dummy1c::TestType)`, the trait `std::marker::Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n-note: required by `is_send`\n-  --> $DIR/traits-negative-impls.rs:16:1\n-   |\n-LL | fn is_send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:48:5\n    |\n+LL | fn is_send<T: Send>(_: T) {}\n+   | ------------------------- required by `is_send`\n+...\n LL |     is_send(Box::new(TestType));\n    |     ^^^^^^^ `dummy2::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy2::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dummy2::TestType>`\n    = note: required because it appears within the type `std::boxed::Box<dummy2::TestType>`\n-note: required by `is_send`\n-  --> $DIR/traits-negative-impls.rs:16:1\n-   |\n-LL | fn is_send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:56:5\n    |\n+LL | fn is_send<T: Send>(_: T) {}\n+   | ------------------------- required by `is_send`\n+...\n LL |     is_send(Box::new(Outer2(TestType)));\n    |     ^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n    |\n    = help: within `Outer2<dummy3::TestType>`, the trait `std::marker::Send` is not implemented for `dummy3::TestType`\n    = note: required because it appears within the type `Outer2<dummy3::TestType>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<Outer2<dummy3::TestType>>`\n    = note: required because it appears within the type `std::boxed::Box<Outer2<dummy3::TestType>>`\n-note: required by `is_send`\n-  --> $DIR/traits-negative-impls.rs:16:1\n-   |\n-LL | fn is_send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/traits-negative-impls.rs:66:5\n    |\n+LL | fn is_sync<T: Sync>(_: T) {}\n+   | ------------------------- required by `is_sync`\n+...\n LL |     is_sync(Outer2(TestType));\n    |     ^^^^^^^ `main::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `main::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `Outer2<main::TestType>`\n-note: required by `is_sync`\n-  --> $DIR/traits-negative-impls.rs:17:1\n-   |\n-LL | fn is_sync<T: Sync>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "db77e82adbd002bbe3b010cd78be122a8573d591", "filename": "src/test/ui/traits/traits-repeated-supertrait-ambig.stderr", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-repeated-supertrait-ambig.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -15,27 +15,22 @@ LL |     c.same_as(22)\n error[E0277]: the trait bound `dyn CompareToInts: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:34:5\n    |\n+LL |     fn same_as(&self, t: T) -> bool;\n+   |     -------------------------------- required by `CompareTo::same_as`\n+...\n LL |     CompareToInts::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `dyn CompareToInts`\n-   |\n-note: required by `CompareTo::same_as`\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `C: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:38:5\n    |\n+LL |     fn same_as(&self, t: T) -> bool;\n+   |     -------------------------------- required by `CompareTo::same_as`\n+...\n LL |     CompareTo::same_as(c, 22)\n    |     ^^^^^^^^^^^^^^^^^^ the trait `CompareTo<i32>` is not implemented for `C`\n    |\n    = help: consider adding a `where C: CompareTo<i32>` bound\n-note: required by `CompareTo::same_as`\n-  --> $DIR/traits-repeated-supertrait-ambig.rs:9:5\n-   |\n-LL |     fn same_as(&self, t: T) -> bool;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i64: CompareTo<i32>` is not satisfied\n   --> $DIR/traits-repeated-supertrait-ambig.rs:42:23"}, {"sha": "f0f048159ec73aeb6cb5eb5d047da7b1acf86bc3", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -21,26 +21,20 @@ LL |     3i32.test();\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:25:5\n    |\n+LL |     fn test(&self);\n+   |     --------------- required by `Foo::test`\n+...\n LL |     Foo::test(&4i32);\n    |     ^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n-   |\n-note: required by `Foo::test`\n-  --> $DIR/trivial-bounds-leak.rs:5:5\n-   |\n-LL |     fn test(&self);\n-   |     ^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/trivial-bounds-leak.rs:26:5\n    |\n LL |     generic_function(5i32);\n    |     ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `i32`\n-   |\n-note: required by `generic_function`\n-  --> $DIR/trivial-bounds-leak.rs:29:1\n-   |\n+...\n LL | fn generic_function<T: Foo>(t: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | --------------------------------- required by `generic_function`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6878cd80629bcb8be97729b54b2fcc330a04665c", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -21,12 +21,9 @@ error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n    |\n LL |     try_trait_generic::<()>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n-   |\n-note: required by `try_trait_generic`\n-  --> $DIR/try-operator-on-main.rs:20:1\n-   |\n+...\n LL | fn try_trait_generic<T: Try>() -> T {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ----------------------------------- required by `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/try-operator-on-main.rs:22:5"}, {"sha": "1dd2aafeb62fae4ae3e239f0c9d1a25f496d596c", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0283]: type annotations required: cannot resolve `_: std::convert::Into<std::string::String>`\n   --> $DIR/type-annotation-needed.rs:5:5\n    |\n+LL | fn foo<T: Into<String>>(x: i32) {}\n+   | ------------------------------- required by `foo`\n+...\n LL |     foo(42);\n    |     ^^^\n-   |\n-note: required by `foo`\n-  --> $DIR/type-annotation-needed.rs:1:1\n-   |\n-LL | fn foo<T: Into<String>>(x: i32) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "42cca76451fd13e7f9102663d943c1eaf689ad15", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 21, "deletions": 40, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,90 +1,71 @@\n error[E0277]: a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n+LL | struct Foo<T, U: FromIterator<T>>(T, U);\n+   | ---------------------------------------- required by `Foo`\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n    |                   ^ a collection of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n-note: required by `Foo`\n-  --> $DIR/type-check-defaults.rs:5:1\n-   |\n-LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: a collection of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n+LL | struct Foo<T, U: FromIterator<T>>(T, U);\n+   | ---------------------------------------- required by `Foo`\n+...\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n    |                           ^ a collection of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `std::iter::FromIterator<i32>` is not implemented for `i32`\n-note: required by `Foo`\n-  --> $DIR/type-check-defaults.rs:5:1\n-   |\n-LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:11:1\n    |\n-LL | struct Bounds<T:Copy=String>(T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n-   |\n-note: required by `Bounds`\n-  --> $DIR/type-check-defaults.rs:11:1\n-   |\n LL | struct Bounds<T:Copy=String>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   | required by `Bounds`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:14:1\n    |\n-LL | struct WhereClause<T=String>(T) where T: Copy;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n-   |\n-note: required by `WhereClause`\n-  --> $DIR/type-check-defaults.rs:14:1\n-   |\n LL | struct WhereClause<T=String>(T) where T: Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   | required by `WhereClause`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:17:1\n    |\n LL | trait TraitBound<T:Copy=String> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n-   |\n-note: required by `TraitBound`\n-  --> $DIR/type-check-defaults.rs:17:1\n-   |\n-LL | trait TraitBound<T:Copy=String> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------------------------------^^^\n+   | |\n+   | the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   | required by `TraitBound`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:1\n    |\n+LL | trait Super<T: Copy> { }\n+   | -------------------- required by `Super`\n LL | trait Base<T = String>: Super<T> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `Super`\n-  --> $DIR/type-check-defaults.rs:20:1\n-   |\n-LL | trait Super<T: Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add `u8` to `i32`\n   --> $DIR/type-check-defaults.rs:24:1\n    |\n LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u8`\n+   | ------------------------------------------------------------------------^^^\n+   | |\n+   | no implementation for `i32 + u8`\n+   | required by `ProjectionPred`\n    |\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i32`\n-note: required by `ProjectionPred`\n-  --> $DIR/type-check-defaults.rs:24:1\n-   |\n-LL | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "732a81c8a244a7f49560fb094bcc27a6ee42d25f", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n   --> $DIR/issue-40294.rs:5:1\n    |\n+LL |   trait Foo: Sized {\n+   |   ---------------- required by `Foo`\n+...\n LL | / fn foo<'a,'b,T>(x: &'a T, y: &'b T)\n LL | |     where &'a T : Foo,\n LL | |           &'b T : Foo\n@@ -9,12 +12,6 @@ LL | |     x.foo();\n LL | |     y.foo();\n LL | | }\n    | |_^\n-   |\n-note: required by `Foo`\n-  --> $DIR/issue-40294.rs:1:1\n-   |\n-LL | trait Foo: Sized {\n-   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7d4bbc813c09c750dbe7e9d09ce545a7fc122376", "filename": "src/test/ui/type/type-params-in-different-spaces-2.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-params-in-different-spaces-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,28 +1,24 @@\n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n   --> $DIR/type-params-in-different-spaces-2.rs:10:9\n    |\n+LL |     fn op(_: T) -> Self;\n+   |     -------------------- required by `Tr::op`\n+...\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: Tr<U>` bound\n-note: required by `Tr::op`\n-  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n-   |\n-LL |     fn op(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: Tr<U>` is not satisfied\n   --> $DIR/type-params-in-different-spaces-2.rs:16:9\n    |\n+LL |     fn op(_: T) -> Self;\n+   |     -------------------- required by `Tr::op`\n+...\n LL |         Tr::op(u)\n    |         ^^^^^^ the trait `Tr<U>` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: Tr<U>` bound\n-note: required by `Tr::op`\n-  --> $DIR/type-params-in-different-spaces-2.rs:5:5\n-   |\n-LL |     fn op(_: T) -> Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7fb3731be23e6cd31aa368c8649f222020742a7d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -3,14 +3,12 @@ error[E0277]: `<T as Trait>::AssocType` cannot be sent between threads safely\n    |\n LL |     is_send::<T::AssocType>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n+...\n+LL | fn is_send<T:Send>() {\n+   | -------------------- required by `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `<T as Trait>::AssocType`\n    = help: consider adding a `where <T as Trait>::AssocType: std::marker::Send` bound\n-note: required by `is_send`\n-  --> $DIR/typeck-default-trait-impl-assoc-type.rs:12:1\n-   |\n-LL | fn is_send<T:Send>() {\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8389356fdd6f6653216df46da5ecf16066e03afa", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n   --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:16:5\n    |\n+LL | fn is_mytrait<T: MyTrait>() {}\n+   | --------------------------- required by `is_mytrait`\n+...\n LL |     is_mytrait::<(MyS2, MyS)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`\n    |\n    = help: the following implementations were found:\n              <MyS2 as MyTrait>\n    = note: required because it appears within the type `(MyS2, MyS)`\n-note: required by `is_mytrait`\n-  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:11:1\n-   |\n-LL | fn is_mytrait<T: MyTrait>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eee186feea67dfae5b07a4b0dafea86951985f58", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-constituent-types.rs:20:5\n    |\n+LL | fn is_mytrait<T: MyTrait>() {}\n+   | --------------------------- required by `is_mytrait`\n+...\n LL |     is_mytrait::<MyS2>();\n    |     ^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `MyS2`\n    |\n    = help: the following implementations were found:\n              <MyS2 as MyTrait>\n-note: required by `is_mytrait`\n-  --> $DIR/typeck-default-trait-impl-constituent-types.rs:15:1\n-   |\n-LL | fn is_mytrait<T: MyTrait>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1e6adeb430998105cbb563844d7c383fa73b4c75", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-send.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: `MyNotSendable` cannot be sent between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-send.rs:19:5\n    |\n+LL | fn is_send<T: Send>() {}\n+   | --------------------- required by `is_send`\n+...\n LL |     is_send::<MyNotSendable>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `MyNotSendable` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `MyNotSendable`\n-note: required by `is_send`\n-  --> $DIR/typeck-default-trait-impl-negation-send.rs:15:1\n-   |\n-LL | fn is_send<T: Send>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d4f8f5ad82c9ee0015a5db87a4a3565ecf8de02a", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,43 +1,37 @@\n error[E0277]: `MyNotSync` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:5\n    |\n+LL | fn is_sync<T: Sync>() {}\n+   | --------------------- required by `is_sync`\n+...\n LL |     is_sync::<MyNotSync>();\n    |     ^^^^^^^^^^^^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `MyNotSync`\n-note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n-   |\n-LL | fn is_sync<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n    |\n+LL | fn is_sync<T: Sync>() {}\n+   | --------------------- required by `is_sync`\n+...\n LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `std::cell::UnsafeCell<u8>` cannot be shared between threads safely\n    |\n    = help: within `MyTypeWUnsafe`, the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<u8>`\n    = note: required because it appears within the type `MyTypeWUnsafe`\n-note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n-   |\n-LL | fn is_sync<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Managed` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n    |\n+LL | fn is_sync<T: Sync>() {}\n+   | --------------------- required by `is_sync`\n+...\n LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n    = help: within `MyTypeManaged`, the trait `std::marker::Sync` is not implemented for `Managed`\n    = note: required because it appears within the type `MyTypeManaged`\n-note: required by `is_sync`\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:1\n-   |\n-LL | fn is_sync<T: Sync>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e993098b2deedc1ba9f23a474e12d000dfcb154f", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,30 +1,26 @@\n error[E0277]: the trait bound `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-negation.rs:21:5\n    |\n+LL | fn is_my_trait<T: MyTrait>() {}\n+   | ---------------------------- required by `is_my_trait`\n+...\n LL |     is_my_trait::<ThisImplsUnsafeTrait>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `ThisImplsUnsafeTrait`\n    |\n    = help: the following implementations were found:\n              <ThisImplsUnsafeTrait as MyTrait>\n-note: required by `is_my_trait`\n-  --> $DIR/typeck-default-trait-impl-negation.rs:16:1\n-   |\n-LL | fn is_my_trait<T: MyTrait>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-negation.rs:24:5\n    |\n+LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n+   | ----------------------------------------- required by `is_my_unsafe_trait`\n+...\n LL |     is_my_unsafe_trait::<ThisImplsTrait>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyUnsafeTrait` is not implemented for `ThisImplsTrait`\n    |\n    = help: the following implementations were found:\n              <ThisImplsTrait as MyUnsafeTrait>\n-note: required by `is_my_unsafe_trait`\n-  --> $DIR/typeck-default-trait-impl-negation.rs:17:1\n-   |\n-LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d87a6384e5c014c2fb573b0bb0335e57f7c37ddf", "filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `u32: Signed` is not satisfied\n   --> $DIR/typeck-default-trait-impl-precedence.rs:18:5\n    |\n+LL | fn is_defaulted<T:Defaulted>() { }\n+   | ------------------------------ required by `is_defaulted`\n+...\n LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n    = note: required because of the requirements on the impl of `Defaulted` for `&'static u32`\n-note: required by `is_defaulted`\n-  --> $DIR/typeck-default-trait-impl-precedence.rs:11:1\n-   |\n-LL | fn is_defaulted<T:Defaulted>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5f3a5bc6e00543b1def7e783d4b3e4f3117d7c2b", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -3,14 +3,12 @@ error[E0277]: `T` cannot be sent between threads safely\n    |\n LL |     is_send::<T>()\n    |     ^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+...\n+LL | fn is_send<T:Send>() {\n+   | -------------------- required by `is_send`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`\n    = help: consider adding a `where T: std::marker::Send` bound\n-note: required by `is_send`\n-  --> $DIR/typeck-default-trait-impl-send-param.rs:8:1\n-   |\n-LL | fn is_send<T:Send>() {\n-   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7ed85a14259aa18a345825b6d13dce28958ea903", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,55 +1,47 @@\n error[E0277]: `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:19:5\n    |\n+LL | fn test<T: Sync>(s: T) {}\n+   | ---------------------- required by `test`\n+...\n LL |     test(us);\n    |     ^^^^ `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<MySync<{integer}>>`\n-note: required by `test`\n-  --> $DIR/typeck-unsafe-always-share.rs:15:1\n-   |\n-LL | fn test<T: Sync>(s: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:23:5\n    |\n+LL | fn test<T: Sync>(s: T) {}\n+   | ---------------------- required by `test`\n+...\n LL |     test(uns);\n    |     ^^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<NoSync>`\n-note: required by `test`\n-  --> $DIR/typeck-unsafe-always-share.rs:15:1\n-   |\n-LL | fn test<T: Sync>(s: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:27:5\n    |\n+LL | fn test<T: Sync>(s: T) {}\n+   | ---------------------- required by `test`\n+...\n LL |     test(ms);\n    |     ^^^^ `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely\n    |\n    = help: within `MySync<NoSync>`, the trait `std::marker::Sync` is not implemented for `std::cell::UnsafeCell<NoSync>`\n    = note: required because it appears within the type `MySync<NoSync>`\n-note: required by `test`\n-  --> $DIR/typeck-unsafe-always-share.rs:15:1\n-   |\n-LL | fn test<T: Sync>(s: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:30:5\n    |\n+LL | fn test<T: Sync>(s: T) {}\n+   | ---------------------- required by `test`\n+...\n LL |     test(NoSync);\n    |     ^^^^ `NoSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `NoSync`\n-note: required by `test`\n-  --> $DIR/typeck-unsafe-always-share.rs:15:1\n-   |\n-LL | fn test<T: Sync>(s: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "dd024b76c3ba7f61d64b507ecf8d5bcbe7a3b07d", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-default.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output = ()>: Eq<dyn Foo<(isize,), Output = ()>>` is not satisfied\n   --> $DIR/unboxed-closure-sugar-default.rs:21:5\n    |\n+LL | fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n+   | -------------------------------------------- required by `eq`\n+...\n LL |     eq::<dyn Foo<(isize,), isize, Output=()>, dyn Foo(isize)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`\n-   |\n-note: required by `eq`\n-  --> $DIR/unboxed-closure-sugar-default.rs:14:1\n-   |\n-LL | fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "83754bd36ef2a21332cad35de158b07f717711ec", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,12 @@\n error[E0277]: the trait bound `dyn Foo<(char,), Output = ()>: Eq<dyn Foo<(), Output = ()>>` is not satisfied\n   --> $DIR/unboxed-closure-sugar-equiv.rs:43:5\n    |\n+LL |   fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n+   |   ----------------------------------- required by `eq`\n+...\n LL | /     eq::< dyn Foo<(),Output=()>,\n LL | |           dyn Foo(char)                                               >();\n    | |_______________________________________________________________________^ the trait `Eq<dyn Foo<(), Output = ()>>` is not implemented for `dyn Foo<(char,), Output = ()>`\n-   |\n-note: required by `eq`\n-  --> $DIR/unboxed-closure-sugar-equiv.rs:16:1\n-   |\n-LL | fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d64e54a5484421c8a7bf96e89d4ec69358422d36", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: expected a `std::ops::Fn<(isize,)>` closure, found `S`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:13\n    |\n+LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n+   | -------------------------------------------------------- required by `call_it`\n+...\n LL |     let x = call_it(&S, 22);\n    |             ^^^^^^^ expected an `Fn<(isize,)>` closure, found `S`\n    |\n    = help: the trait `std::ops::Fn<(isize,)>` is not implemented for `S`\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-fnmut-as-fn.rs:23:1\n-   |\n-LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3d20b5df1e3f368d7928c99fe68bdfdae7543fed", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,67 +1,57 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:13\n    |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | --------------------------------------------------------- required by `call_it`\n+...\n LL |     let x = call_it(&square, 22);\n    |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:7:1\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:13\n    |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | --------------------------------------------------------- required by `call_it`\n+...\n LL |     let x = call_it(&square, 22);\n    |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:7:1\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:13\n    |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | -------------------------------------------------------------------- required by `call_it_mut`\n+...\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-note: required by `call_it_mut`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:8:1\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:18:13\n    |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | -------------------------------------------------------------------- required by `call_it_mut`\n+...\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-note: required by `call_it_mut`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:8:1\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:24:13\n    |\n+LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n+   | ----------------------------------------------------------------- required by `call_it_once`\n+...\n LL |     let z = call_it_once(square, 22);\n    |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n-note: required by `call_it_once`\n-  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:1\n-   |\n-LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f435a05e049012b97a18c7cb139e07a81ae4fb02", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,67 +1,57 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:13\n    |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | --------------------------------------------------------- required by `call_it`\n+...\n LL |     let x = call_it(&square, 22);\n    |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:7:1\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:12:13\n    |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | --------------------------------------------------------- required by `call_it`\n+...\n LL |     let x = call_it(&square, 22);\n    |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:7:1\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:18:13\n    |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | -------------------------------------------------------------------- required by `call_it_mut`\n+...\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-note: required by `call_it_mut`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:8:1\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:18:13\n    |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | -------------------------------------------------------------------- required by `call_it_mut`\n+...\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-note: required by `call_it_mut`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:8:1\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:24:13\n    |\n+LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n+   | ----------------------------------------------------------------- required by `call_it_once`\n+...\n LL |     let z = call_it_once(square, 22);\n    |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n-note: required by `call_it_once`\n-  --> $DIR/unboxed-closures-wrong-abi.rs:9:1\n-   |\n-LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "efdb2e8efa4e889d779e330d69e0263f6e2ae33a", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,67 +1,57 @@\n error[E0277]: expected a `std::ops::Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:13\n    |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | --------------------------------------------------------- required by `call_it`\n+...\n LL |     let x = call_it(&square, 22);\n    |             ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:8:1\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:13\n    |\n+LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n+   | --------------------------------------------------------- required by `call_it`\n+...\n LL |     let x = call_it(&square, 22);\n    |             ^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-note: required by `call_it`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:8:1\n-   |\n-LL | fn call_it<F:Fn(&isize)->isize>(_: &F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:13\n    |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | -------------------------------------------------------------------- required by `call_it_mut`\n+...\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> std::ops::FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-note: required by `call_it_mut`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:9:1\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:19:13\n    |\n+LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n+   | -------------------------------------------------------------------- required by `call_it_mut`\n+...\n LL |     let y = call_it_mut(&mut square, 22);\n    |             ^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-note: required by `call_it_mut`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:9:1\n-   |\n-LL | fn call_it_mut<F:FnMut(&isize)->isize>(_: &mut F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: expected a `std::ops::FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:25:13\n    |\n+LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n+   | ----------------------------------------------------------------- required by `call_it_once`\n+...\n LL |     let z = call_it_once(square, 22);\n    |             ^^^^^^^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `std::ops::FnOnce<(&isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n-note: required by `call_it_once`\n-  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:1\n-   |\n-LL | fn call_it_once<F:FnOnce(&isize)->isize>(_: F, _: isize) -> isize { 0 }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2079f6fd53173d7ddd713634e7f11b79e3c8d0ad", "filename": "src/test/ui/unevaluated_fixed_size_array_len.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funevaluated_fixed_size_array_len.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the trait bound `[(); 0]: Foo` is not satisfied\n   --> $DIR/unevaluated_fixed_size_array_len.rs:12:5\n    |\n+LL |     fn foo();\n+   |     --------- required by `Foo::foo`\n+...\n LL |     <[(); 0] as Foo>::foo()\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `[(); 0]`\n    |\n    = help: the following implementations were found:\n              <[(); 1] as Foo>\n-note: required by `Foo::foo`\n-  --> $DIR/unevaluated_fixed_size_array_len.rs:4:5\n-   |\n-LL |     fn foo();\n-   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f13b2def6db844d0d53f2520895776312d8e5e23", "filename": "src/test/ui/union/union-generic.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funion%2Funion-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funion%2Funion-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,26 +1,20 @@\n error[E0277]: the trait bound `std::rc::Rc<u32>: std::marker::Copy` is not satisfied\n   --> $DIR/union-generic.rs:8:13\n    |\n+LL | union U<T: Copy> {\n+   | ---------------- required by `U`\n+...\n LL |     let u = U { a: Rc::new(0u32) };\n    |             ^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<u32>`\n-   |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:3:1\n-   |\n-LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::rc::Rc<u32>: std::marker::Copy` is not satisfied\n   --> $DIR/union-generic.rs:10:13\n    |\n+LL | union U<T: Copy> {\n+   | ---------------- required by `U`\n+...\n LL |     let u = U::<Rc<u32>> { a: Default::default() };\n    |             ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<u32>`\n-   |\n-note: required by `U`\n-  --> $DIR/union-generic.rs:3:1\n-   |\n-LL | union U<T: Copy> {\n-   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c39c648f661c6cf8abcbd3f299941b80e03423f8", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,14 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-bare-typaram.rs:2:23\n    |\n+LL | fn bar<T: Sized>() { }\n+   | ------------------ required by `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |                       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n-note: required by `bar`\n-  --> $DIR/unsized-bare-typaram.rs:1:1\n-   |\n-LL | fn bar<T: Sized>() { }\n-   | ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "dff934834ef2c52002109ac172f54a37594216d9", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-enum.rs:6:36\n    |\n+LL | enum Foo<U> { FooSome(U), FooNone }\n+   | ----------- required by `Foo`\n+LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |                                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n-note: required by `Foo`\n-  --> $DIR/unsized-enum.rs:4:1\n-   |\n-LL | enum Foo<U> { FooSome(U), FooNone }\n-   | ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1a726bb089f6e22f5ea0437801f423048b0b8832", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-inherent-impl-self-type.rs:7:17\n    |\n+LL | struct S5<Y>(Y);\n+   | ---------------- required by `S5`\n+LL | \n LL | impl<X: ?Sized> S5<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n-note: required by `S5`\n-  --> $DIR/unsized-inherent-impl-self-type.rs:5:1\n-   |\n-LL | struct S5<Y>(Y);\n-   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "795115154e72b083010806102c1b5646b0dc31e3", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,33 +1,29 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:6:36\n    |\n+LL | struct Foo<T> { data: T }\n+   | ------------- required by `Foo`\n+LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |                                    ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n-note: required by `Foo`\n-  --> $DIR/unsized-struct.rs:4:1\n-   |\n-LL | struct Foo<T> { data: T }\n-   | ^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:13:24\n    |\n+LL | fn is_sized<T:Sized>() { }\n+   | ---------------------- required by `is_sized`\n+...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |                        ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: within `Bar<T>`, the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where T: std::marker::Sized` bound\n    = note: required because it appears within the type `Bar<T>`\n-note: required by `is_sized`\n-  --> $DIR/unsized-struct.rs:1:1\n-   |\n-LL | fn is_sized<T:Sized>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f399f8ded10856510e93c47421f2123907ec4320", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-trait-impl-self-type.rs:10:17\n    |\n+LL | struct S5<Y>(Y);\n+   | ---------------- required by `S5`\n+LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |                 ^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n-note: required by `S5`\n-  --> $DIR/unsized-trait-impl-self-type.rs:8:1\n-   |\n-LL | struct S5<Y>(Y);\n-   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "9064aa14d429f691c8947eec032f90b89b97713f", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -3,46 +3,40 @@ error[E0277]: the size for values of type `X` cannot be known at compilation tim\n    |\n LL |     f2::<X>(x);\n    |     ^^^^^^^ doesn't have a size known at compile-time\n+...\n+LL | fn f2<X>(x: &X) {\n+   | --------------- required by `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n-note: required by `f2`\n-  --> $DIR/unsized3.rs:10:1\n-   |\n-LL | fn f2<X>(x: &X) {\n-   | ^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:5\n    |\n LL |     f4::<X>(x);\n    |     ^^^^^^^ doesn't have a size known at compile-time\n+...\n+LL | fn f4<X: T>(x: &X) {\n+   | ------------------ required by `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n-note: required by `f4`\n-  --> $DIR/unsized3.rs:21:1\n-   |\n-LL | fn f4<X: T>(x: &X) {\n-   | ^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:5\n    |\n+LL | fn f5<Y>(x: &Y) {}\n+   | --------------- required by `f5`\n+...\n LL |     f5(x1);\n    |     ^^ doesn't have a size known at compile-time\n    |\n    = help: within `S<X>`, the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n-note: required by `f5`\n-  --> $DIR/unsized3.rs:24:1\n-   |\n-LL | fn f5<Y>(x: &Y) {}\n-   | ^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:40:5\n@@ -72,6 +66,9 @@ LL |     f5(&(32, *x1));\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:5\n    |\n+LL | fn f5<Y>(x: &Y) {}\n+   | --------------- required by `f5`\n+...\n LL |     f5(&(32, *x1));\n    |     ^^ doesn't have a size known at compile-time\n    |\n@@ -80,11 +77,6 @@ LL |     f5(&(32, *x1));\n    = help: consider adding a `where X: std::marker::Sized` bound\n    = note: required because it appears within the type `S<X>`\n    = note: required because it appears within the type `({integer}, S<X>)`\n-note: required by `f5`\n-  --> $DIR/unsized3.rs:24:1\n-   |\n-LL | fn f5<Y>(x: &Y) {}\n-   | ^^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "531aadc25dd2ad1909d822838e03e7bb48dcbe34", "filename": "src/test/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-const-type.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n   --> $DIR/wf-const-type.rs:10:12\n    |\n+LL | struct IsCopy<T:Copy> { t: T }\n+   | --------------------- required by `IsCopy`\n+...\n LL | const FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `std::option::Option<NotCopy>`\n-note: required by `IsCopy`\n-  --> $DIR/wf-const-type.rs:7:1\n-   |\n-LL | struct IsCopy<T:Copy> { t: T }\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d5632f4a9c24ee8d81e27b913919600f93dfa187", "filename": "src/test/ui/wf/wf-enum-bound.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-bound.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-bound.rs:9:1\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+LL | \n LL | / enum SomeEnum<T,U>\n LL | |     where T: ExtraCopy<U>\n LL | | {\n@@ -9,11 +12,6 @@ LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-enum-bound.rs:7:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "51ee23fc5aa6d52e62335ffd384e7a0a657ce522", "filename": "src/test/ui/wf/wf-enum-fields-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields-struct-variant.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-fields-struct-variant.rs:13:9\n    |\n+LL | struct IsCopy<T:Copy> {\n+   | --------------------- required by `IsCopy`\n+...\n LL |         f: IsCopy<A>\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n    = help: consider adding a `where A: std::marker::Copy` bound\n-note: required by `IsCopy`\n-  --> $DIR/wf-enum-fields-struct-variant.rs:7:1\n-   |\n-LL | struct IsCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5f4e7c66f54cadafc32764e0574a906911f68ed2", "filename": "src/test/ui/wf/wf-enum-fields.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-enum-fields.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-enum-fields.rs:12:17\n    |\n+LL | struct IsCopy<T:Copy> {\n+   | --------------------- required by `IsCopy`\n+...\n LL |     SomeVariant(IsCopy<A>)\n    |                 ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n    = help: consider adding a `where A: std::marker::Copy` bound\n-note: required by `IsCopy`\n-  --> $DIR/wf-enum-fields.rs:7:1\n-   |\n-LL | struct IsCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4bc2e370f29faa25658bc82a03d202dfd4df76c9", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-fn-where-clause.rs:8:1\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+LL | \n LL | / fn foo<T,U>() where T: ExtraCopy<U>\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-fn-where-clause.rs:6:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n   --> $DIR/wf-fn-where-clause.rs:12:1"}, {"sha": "ceafb4f61578b1424c784d4ab3003f55229c486a", "filename": "src/test/ui/wf/wf-impl-associated-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: MyHash` is not satisfied\n   --> $DIR/wf-impl-associated-type-trait.rs:17:5\n    |\n+LL | pub struct MySet<T:MyHash> {\n+   | -------------------------- required by `MySet`\n+...\n LL |     type Bar = MySet<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyHash` is not implemented for `T`\n    |\n    = help: consider adding a `where T: MyHash` bound\n-note: required by `MySet`\n-  --> $DIR/wf-impl-associated-type-trait.rs:8:1\n-   |\n-LL | pub struct MySet<T:MyHash> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e7432f81987344800eb1f379ef1b22556263be3c", "filename": "src/test/ui/wf/wf-in-fn-arg.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-arg.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-arg.rs:10:1\n    |\n+LL |   struct MustBeCopy<T:Copy> {\n+   |   ------------------------- required by `MustBeCopy`\n+...\n LL | / fn bar<T>(_: &MustBeCopy<T>)\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `MustBeCopy`\n-  --> $DIR/wf-in-fn-arg.rs:6:1\n-   |\n-LL | struct MustBeCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "005ffe84502de55f304887d3e37a5ffa40a42be9", "filename": "src/test/ui/wf/wf-in-fn-ret.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-ret.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-ret.rs:10:1\n    |\n+LL |   struct MustBeCopy<T:Copy> {\n+   |   ------------------------- required by `MustBeCopy`\n+...\n LL | / fn bar<T>() -> MustBeCopy<T>\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `MustBeCopy`\n-  --> $DIR/wf-in-fn-ret.rs:6:1\n-   |\n-LL | struct MustBeCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b4cd921040225aeba7d6abcebd026548444a95e5", "filename": "src/test/ui/wf/wf-in-fn-type-arg.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-arg.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-type-arg.rs:9:5\n    |\n+LL | struct MustBeCopy<T:Copy> {\n+   | ------------------------- required by `MustBeCopy`\n+...\n LL |     x: fn(MustBeCopy<T>)\n    |     ^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `MustBeCopy`\n-  --> $DIR/wf-in-fn-type-arg.rs:3:1\n-   |\n-LL | struct MustBeCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "988fbed8e9107df59c5421f898696f51e1b715f9", "filename": "src/test/ui/wf/wf-in-fn-type-ret.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-ret.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-type-ret.rs:9:5\n    |\n+LL | struct MustBeCopy<T:Copy> {\n+   | ------------------------- required by `MustBeCopy`\n+...\n LL |     x: fn() -> MustBeCopy<T>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `MustBeCopy`\n-  --> $DIR/wf-in-fn-type-ret.rs:3:1\n-   |\n-LL | struct MustBeCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0af38ddcffea3d431506fa7e1e392b7a4afc99a8", "filename": "src/test/ui/wf/wf-in-fn-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-where-clause.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,18 +1,16 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-fn-where-clause.rs:9:1\n    |\n+LL |   trait MustBeCopy<T:Copy> {\n+   |   ------------------------ required by `MustBeCopy`\n+...\n LL | / fn bar<T,U>()\n LL | |     where T: MustBeCopy<U>\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n-note: required by `MustBeCopy`\n-  --> $DIR/wf-in-fn-where-clause.rs:6:1\n-   |\n-LL | trait MustBeCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0f4b4e417ca4f2af0f1df7712c38447608c7c0a1", "filename": "src/test/ui/wf/wf-in-obj-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-in-obj-type-trait.rs:11:5\n    |\n+LL | struct MustBeCopy<T:Copy> {\n+   | ------------------------- required by `MustBeCopy`\n+...\n LL |     x: dyn Object<MustBeCopy<T>>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `MustBeCopy`\n-  --> $DIR/wf-in-obj-type-trait.rs:5:1\n-   |\n-LL | struct MustBeCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1e258864d0367416177ecd7b31910cbb5cec9aaa", "filename": "src/test/ui/wf/wf-inherent-impl-method-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-method-where-clause.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-inherent-impl-method-where-clause.rs:12:5\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+...\n LL | /     fn foo(self) where T: ExtraCopy<U>\n LL | |     {}\n    | |______^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-inherent-impl-method-where-clause.rs:7:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4c389b3ef3ef20ccbd84a2b16c5151c85391eaae", "filename": "src/test/ui/wf/wf-inherent-impl-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-inherent-impl-where-clause.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-inherent-impl-where-clause.rs:11:1\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+...\n LL | / impl<T,U> Foo<T,U> where T: ExtraCopy<U>\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-inherent-impl-where-clause.rs:7:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "05a628d7c3e196396feaba3942f2ee97f54b5c97", "filename": "src/test/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-type.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `NotCopy: std::marker::Copy` is not satisfied\n   --> $DIR/wf-static-type.rs:10:13\n    |\n+LL | struct IsCopy<T:Copy> { t: T }\n+   | --------------------- required by `IsCopy`\n+...\n LL | static FOO: IsCopy<Option<NotCopy>> = IsCopy { t: None };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `NotCopy`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `std::option::Option<NotCopy>`\n-note: required by `IsCopy`\n-  --> $DIR/wf-static-type.rs:7:1\n-   |\n-LL | struct IsCopy<T:Copy> { t: T }\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "2028a0baa17fb2eca35b735dbc2812bafe9bddb3", "filename": "src/test/ui/wf/wf-struct-bound.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-bound.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-struct-bound.rs:9:1\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+LL | \n LL | / struct SomeStruct<T,U>\n LL | |     where T: ExtraCopy<U>\n LL | | {\n@@ -9,11 +12,6 @@ LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-struct-bound.rs:7:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d2bff253678ee666b2ee3587924d8195854ccb42", "filename": "src/test/ui/wf/wf-struct-field.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-struct-field.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `A: std::marker::Copy` is not satisfied\n   --> $DIR/wf-struct-field.rs:12:5\n    |\n+LL | struct IsCopy<T:Copy> {\n+   | --------------------- required by `IsCopy`\n+...\n LL |     data: IsCopy<A>\n    |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `A`\n    |\n    = help: consider adding a `where A: std::marker::Copy` bound\n-note: required by `IsCopy`\n-  --> $DIR/wf-struct-field.rs:7:1\n-   |\n-LL | struct IsCopy<T:Copy> {\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d5b2b5762a43a6c689642479463d292288fb5f98", "filename": "src/test/ui/wf/wf-trait-associated-type-bound.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-bound.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,17 +1,15 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-associated-type-bound.rs:9:1\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+LL | \n LL | / trait SomeTrait<T> {\n LL | |     type Type1: ExtraCopy<T>;\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-trait-associated-type-bound.rs:7:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d8ab95504823949c732a7381073a589470889ef3", "filename": "src/test/ui/wf/wf-trait-associated-type-trait.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-trait.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `<Self as SomeTrait>::Type1: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-associated-type-trait.rs:11:5\n    |\n+LL | struct IsCopy<T:Copy> { x: T }\n+   | --------------------- required by `IsCopy`\n+...\n LL |     type Type2 = IsCopy<Self::Type1>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `<Self as SomeTrait>::Type1`\n    |\n    = help: consider adding a `where <Self as SomeTrait>::Type1: std::marker::Copy` bound\n-note: required by `IsCopy`\n-  --> $DIR/wf-trait-associated-type-trait.rs:7:1\n-   |\n-LL | struct IsCopy<T:Copy> { x: T }\n-   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "85f12b2de548931017b75aefef3c3daddf2775b3", "filename": "src/test/ui/wf/wf-trait-bound.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-bound.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,18 +1,16 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-bound.rs:9:1\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+LL | \n LL | / trait SomeTrait<T,U>\n LL | |     where T: ExtraCopy<U>\n LL | | {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `U`\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-trait-bound.rs:7:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4d0e1f2f0f4cce1bc51ffdd815dba6cb52748fce", "filename": "src/test/ui/wf/wf-trait-default-fn-arg.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-arg.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-arg.rs:11:5\n    |\n+LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   |   ----------------------- required by `Bar`\n+...\n LL | /     fn bar(&self, x: &Bar<Self>) {\n LL | |\n LL | |         //\n@@ -9,11 +12,6 @@ LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::cmp::Eq` bound\n-note: required by `Bar`\n-  --> $DIR/wf-trait-default-fn-arg.rs:8:1\n-   |\n-LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e82b76b61c4a9fb622e5a9fa56bd87d9eff394c8", "filename": "src/test/ui/wf/wf-trait-default-fn-ret.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-ret.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-ret.rs:11:5\n    |\n+LL |   struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   |   ----------------------- required by `Bar`\n+...\n LL | /     fn bar(&self) -> Bar<Self> {\n LL | |\n LL | |         //\n@@ -10,11 +13,6 @@ LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::cmp::Eq` bound\n-note: required by `Bar`\n-  --> $DIR/wf-trait-default-fn-ret.rs:8:1\n-   |\n-LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6504f6698d9b1642d0d9b3150d8012a3a0e91e68", "filename": "src/test/ui/wf/wf-trait-default-fn-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-default-fn-where-clause.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,6 +1,9 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-default-fn-where-clause.rs:11:5\n    |\n+LL |   trait Bar<T:Eq+?Sized> { }\n+   |   ---------------------- required by `Bar`\n+...\n LL | /     fn bar<A>(&self) where A: Bar<Self> {\n LL | |\n LL | |         //\n@@ -9,11 +12,6 @@ LL | |     }\n    | |_____^ the trait `std::cmp::Eq` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::cmp::Eq` bound\n-note: required by `Bar`\n-  --> $DIR/wf-trait-default-fn-where-clause.rs:8:1\n-   |\n-LL | trait Bar<T:Eq+?Sized> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0887d4b2fcda21ae8ed3adb3110c4e0515ec03ba", "filename": "src/test/ui/wf/wf-trait-fn-arg.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-arg.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-arg.rs:10:5\n    |\n+LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   | ----------------------- required by `Bar`\n+...\n LL |     fn bar(&self, x: &Bar<Self>);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::cmp::Eq` bound\n-note: required by `Bar`\n-  --> $DIR/wf-trait-fn-arg.rs:7:1\n-   |\n-LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5555081498c618261f79946e1ebc86156ea77b0b", "filename": "src/test/ui/wf/wf-trait-fn-ret.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-ret.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-ret.rs:10:5\n    |\n+LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   | ----------------------- required by `Bar`\n+...\n LL |     fn bar(&self) -> &Bar<Self>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::cmp::Eq` bound\n-note: required by `Bar`\n-  --> $DIR/wf-trait-fn-ret.rs:7:1\n-   |\n-LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5e8fd8982390df9d3e6b97b468ca7df8c130c33f", "filename": "src/test/ui/wf/wf-trait-fn-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-fn-where-clause.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `Self: std::cmp::Eq` is not satisfied\n   --> $DIR/wf-trait-fn-where-clause.rs:10:5\n    |\n+LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n+   | ----------------------- required by `Bar`\n+...\n LL |     fn bar(&self) where Self: Sized, Bar<Self>: Copy;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::cmp::Eq` bound\n-note: required by `Bar`\n-  --> $DIR/wf-trait-fn-where-clause.rs:7:1\n-   |\n-LL | struct Bar<T:Eq+?Sized> { value: Box<T> }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "377ca640536cf09a6e6fa370335e64ba79383ac1", "filename": "src/test/ui/wf/wf-trait-superbound.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-superbound.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,16 +1,14 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/wf-trait-superbound.rs:9:1\n    |\n+LL |   trait ExtraCopy<T:Copy> { }\n+   |   ----------------------- required by `ExtraCopy`\n+LL | \n LL | / trait SomeTrait<T>: ExtraCopy<T> {\n LL | | }\n    | |_^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `ExtraCopy`\n-  --> $DIR/wf-trait-superbound.rs:7:1\n-   |\n-LL | trait ExtraCopy<T:Copy> { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "f923c6798829f77609a60aa011c0f7a8521a23e9", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-inherent-impl.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-inherent-impl.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:13:9\n    |\n+LL | fn require_copy<T: Copy>(x: T) {}\n+   | ------------------------------ required by `require_copy`\n+...\n LL |         require_copy(self.x);\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `require_copy`\n-  --> $DIR/where-clause-constraints-are-local-for-inherent-impl.rs:1:1\n-   |\n-LL | fn require_copy<T: Copy>(x: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "32736836ef8a3caaadc365d4b01bf3e5a3cbe044", "filename": "src/test/ui/where-clauses/where-clause-constraints-are-local-for-trait-impl.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clause-constraints-are-local-for-trait-impl.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,15 +1,13 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n   --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:18:9\n    |\n+LL | fn require_copy<T: Copy>(x: T) {}\n+   | ------------------------------ required by `require_copy`\n+...\n LL |         require_copy(self.x);\n    |         ^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n-note: required by `require_copy`\n-  --> $DIR/where-clause-constraints-are-local-for-trait-impl.rs:1:1\n-   |\n-LL | fn require_copy<T: Copy>(x: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e59d6089ea539eadf1f5dc024cf4b0c224c10b22", "filename": "src/test/ui/where-clauses/where-clauses-unsatisfied.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,14 +1,11 @@\n error[E0277]: the trait bound `Struct: std::cmp::Eq` is not satisfied\n   --> $DIR/where-clauses-unsatisfied.rs:6:10\n    |\n+LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n+   | ---------------------------------------------- required by `equal`\n+...\n LL |     drop(equal(&Struct, &Struct))\n    |          ^^^^^ the trait `std::cmp::Eq` is not implemented for `Struct`\n-   |\n-note: required by `equal`\n-  --> $DIR/where-clauses-unsatisfied.rs:1:1\n-   |\n-LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "32dc0e7359cbeb36e605d16544bacb7e45f54795", "filename": "src/test/ui/where-clauses/where-for-self-2.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/444bc3ca6607f7bdeb088b34db23c01e056900b1/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self-2.stderr?ref=444bc3ca6607f7bdeb088b34db23c01e056900b1", "patch": "@@ -1,18 +1,16 @@\n error[E0277]: the trait bound `for<'a> &'a _: Bar` is not satisfied\n   --> $DIR/where-for-self-2.rs:21:5\n    |\n-LL |     foo(&X);\n-   |     ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n-   |\n-   = help: the following implementations were found:\n-             <&'static u32 as Bar>\n-note: required by `foo`\n-  --> $DIR/where-for-self-2.rs:16:1\n-   |\n LL | / fn foo<T>(x: &T)\n LL | |     where for<'a> &'a T: Bar\n LL | | {}\n-   | |__^\n+   | |__- required by `foo`\n+...\n+LL |       foo(&X);\n+   |       ^^^ the trait `for<'a> Bar` is not implemented for `&'a _`\n+   |\n+   = help: the following implementations were found:\n+             <&'static u32 as Bar>\n \n error: aborting due to previous error\n "}]}