{"sha": "0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOTM3MWFiNzczODEwOWM0MWJiZDljM2FlMmUzYmQ0Y2U0OTEyMWU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T12:35:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:22:25Z"}, "message": "Add mk_param_from_def", "tree": {"sha": "393c58194613e6b0780949df3611747accb9759d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393c58194613e6b0780949df3611747accb9759d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "html_url": "https://github.com/rust-lang/rust/commit/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c28b2564c26767b6cab2f95e851389b4c1b014", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c28b2564c26767b6cab2f95e851389b4c1b014", "html_url": "https://github.com/rust-lang/rust/commit/e9c28b2564c26767b6cab2f95e851389b4c1b014"}], "stats": {"total": 61, "additions": 24, "deletions": 37}, "files": [{"sha": "154c6815bb666174d3d7e67dcda7c939c3b5bf35", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -845,7 +845,7 @@ fn vtable_methods<'a, 'tcx>(\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n                             GenericParamDefKind::Type(_) => {\n-                                trait_ref.substs.type_for_def(param).into()\n+                                trait_ref.substs[param.index as usize]\n                             }\n                         }\n                     })"}, {"sha": "3c345fcd9ee61f15cb01f60abf90ee23cef87cf2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -2472,8 +2472,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty_param(0, keywords::SelfType.name().as_interned_str())\n     }\n \n-    pub fn mk_ty_param_from_def(self, def: &ty::GenericParamDef) -> Ty<'tcx> {\n-        self.mk_ty_param(def.index, def.name)\n+    pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> Kind<'tcx> {\n+        match param.kind {\n+            GenericParamDefKind::Lifetime => {\n+                self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n+            }\n+            GenericParamDefKind::Type(_) => self.mk_ty_param(param.index, param.name).into(),\n+        }\n     }\n \n     pub fn mk_anon(self, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {"}, {"sha": "b94b3e17f862fb29f2edcc4aad42c4e7ddbe4c19", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -11,7 +11,7 @@\n // Type substitutions.\n \n use hir::def_id::DefId;\n-use ty::{self, Lift, Slice, Region, Ty, TyCtxt, GenericParamDefKind};\n+use ty::{self, Lift, Slice, Region, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n@@ -182,12 +182,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     pub fn identity_for_item(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId)\n                              -> &'tcx Substs<'tcx> {\n         Substs::for_item(tcx, def_id, |param, _| {\n-            match param.kind {\n-                GenericParamDefKind::Lifetime => {\n-                    tcx.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n-                }\n-                GenericParamDefKind::Type(_) => tcx.mk_ty_param_from_def(param).into(),\n-            }\n+            tcx.mk_param_from_def(param)\n         })\n     }\n \n@@ -293,13 +288,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     }\n \n     #[inline]\n-    pub fn type_for_def(&self, ty_param_def: &ty::GenericParamDef) -> Ty<'tcx> {\n-        self.type_at(ty_param_def.index as usize)\n-    }\n-\n-    #[inline]\n-    pub fn region_for_def(&self, def: &ty::GenericParamDef) -> ty::Region<'tcx> {\n-        self.region_at(def.index as usize)\n+    pub fn type_for_def(&self, def: &ty::GenericParamDef) -> Kind<'tcx> {\n+        self.type_at(def.index as usize).into()\n     }\n \n     /// Transform from substitutions for a child of `source_ancestor`"}, {"sha": "dc2009a02600309b79e35db58b221611e97411de", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -1116,7 +1116,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n                             GenericParamDefKind::Type(_) => {\n-                                trait_ref.substs.type_for_def(param).into()\n+                                trait_ref.substs[param.index as usize]\n                             }\n                         }\n                     });"}, {"sha": "7a39b46f799d28b14ad45433d960a696647959e3", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -14,7 +14,7 @@ use rustc::traits::{FulfillmentContext, Normalized, ObligationCause};\n use rustc::traits::query::{CanonicalTyGoal, NoSolution};\n use rustc::traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use rustc::ty::subst::Subst;\n+use rustc::ty::subst::{UnpackedKind, Subst};\n use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use syntax::codemap::{Span, DUMMY_SP};\n@@ -278,11 +278,16 @@ crate fn adt_dtorck_constraint<'a, 'tcx>(\n     debug!(\"dtorck_constraint: {:?}\", def);\n \n     if def.is_phantom_data() {\n-        // The first generic parameter here is guaranteed to be a type because it's `PhantomData`.\n+        // The first generic parameter here is guaranteed to be a type because it's\n+        // `PhantomData`.\n         let param = &tcx.generics_of(def_id).params[0];\n+        let ty = match tcx.mk_param_from_def(param).unpack() {\n+            UnpackedKind::Type(ty) => ty,\n+            _ => unreachable!(),\n+        };\n         let result = DtorckConstraint {\n             outlives: vec![],\n-            dtorck_types: vec![tcx.mk_ty_param_from_def(param)],\n+            dtorck_types: vec![ty],\n             overflows: vec![],\n         };\n         debug!(\"dtorck_constraint: {:?} => {:?}\", def, result);"}, {"sha": "c1868467503f823d0d17fed9d202de43c73d0873", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -1158,13 +1158,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         if let Some(parent_id) = generics.parent {\n             let parent_generics = tcx.generics_of(parent_id);\n             Substs::fill_item(&mut substs, tcx, parent_generics, &mut |param, _| {\n-                match param.kind {\n-                    GenericParamDefKind::Lifetime => {\n-                        tcx.mk_region(\n-                            ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n-                    }\n-                    GenericParamDefKind::Type(_) => tcx.mk_ty_param_from_def(param).into(),\n-                }\n+                tcx.mk_param_from_def(param)\n             });\n \n             // Replace all lifetimes with 'static"}, {"sha": "6b873c093c02f616b11e9c58b247ba4b78f668a2", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -409,7 +409,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n                 // All regions are identity.\n-                fcx.tcx.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n+                fcx.tcx.mk_param_from_def(param)\n             }\n             GenericParamDefKind::Type(_) => {\n                 // If the param has a default,"}, {"sha": "d659dae2503377d27619d05a38710b798dd1e70f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0a9371ab7738109c41bbd9c3ae2e3bd4ce49121e", "patch": "@@ -31,7 +31,6 @@ use middle::lang_items::SizedTraitLangItem;\n use middle::resolve_lifetime as rl;\n use rustc::mir::mono::Linkage;\n use rustc::ty::subst::Substs;\n-use rustc::ty::GenericParamDefKind;\n use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n@@ -1098,13 +1097,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             let substs = ty::ClosureSubsts {\n                 substs: Substs::for_item(tcx, def_id, |param, _| {\n-                    match param.kind {\n-                        GenericParamDefKind::Lifetime => {\n-                            let region = param.to_early_bound_region_data();\n-                            tcx.mk_region(ty::ReEarlyBound(region)).into()\n-                        }\n-                        GenericParamDefKind::Type(_) => tcx.mk_ty_param_from_def(param).into(),\n-                    }\n+                    tcx.mk_param_from_def(param)\n                 })\n             };\n "}]}