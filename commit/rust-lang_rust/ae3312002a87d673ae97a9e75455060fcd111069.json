{"sha": "ae3312002a87d673ae97a9e75455060fcd111069", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzMxMjAwMmE4N2Q2NzNhZTk3YTllNzU0NTUwNjBmY2QxMTEwNjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-04T23:13:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-04T23:14:28Z"}, "message": "rustc: Use memmove in copy_ty. 45% LLVM codegen speed improvement.", "tree": {"sha": "6f19db4fa5bb6b6f813f83d4f09ad61d27558161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f19db4fa5bb6b6f813f83d4f09ad61d27558161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae3312002a87d673ae97a9e75455060fcd111069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3312002a87d673ae97a9e75455060fcd111069", "html_url": "https://github.com/rust-lang/rust/commit/ae3312002a87d673ae97a9e75455060fcd111069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae3312002a87d673ae97a9e75455060fcd111069/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0985c10606d0b38be66734bf1a34bad70eec064", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0985c10606d0b38be66734bf1a34bad70eec064", "html_url": "https://github.com/rust-lang/rust/commit/e0985c10606d0b38be66734bf1a34bad70eec064"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "0793d390d57d0a9bf8c94b361eab971c0f937237", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae3312002a87d673ae97a9e75455060fcd111069/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3312002a87d673ae97a9e75455060fcd111069/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ae3312002a87d673ae97a9e75455060fcd111069", "patch": "@@ -2380,7 +2380,7 @@ fn call_memmove(cx: &@block_ctxt, dst: ValueRef, src: ValueRef,\n     let src_ptr = cx.build.PointerCast(src, T_ptr(T_i8()));\n     let dst_ptr = cx.build.PointerCast(dst, T_ptr(T_i8()));\n     let size = cx.build.IntCast(n_bytes, T_i32());\n-    let align = C_int(0);\n+    let align = C_int(1);\n     let volatile = C_bool(false);\n     ret rslt(cx,\n              cx.build.Call(memmove,\n@@ -2411,7 +2411,12 @@ fn memmove_ty(cx: &@block_ctxt, dst: ValueRef, src: ValueRef, t: &ty::t) ->\n     if ty::type_has_dynamic_size(bcx_tcx(cx), t) {\n         let llsz = size_of(cx, t);\n         ret call_memmove(llsz.bcx, dst, src, llsz.val);\n-    } else { ret rslt(cx, cx.build.Store(cx.build.Load(src), dst)); }\n+    } else if ty::type_is_structural(bcx_tcx(cx), t) {\n+        let llsz = llsize_of(type_of(bcx_ccx(cx), cx.sp, t));\n+        ret call_memmove(cx, dst, src, llsz);\n+    } else {\n+        ret rslt(cx, cx.build.Store(cx.build.Load(src), dst));\n+    }\n }\n \n // Duplicates any heap-owned memory owned by a value of the given type."}]}