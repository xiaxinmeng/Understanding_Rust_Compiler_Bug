{"sha": "4fc164a549fc342401d9d935c0e663af43d88e4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzE2NGE1NDlmYzM0MjQwMWQ5ZDkzNWMwZTY2M2FmNDNkODhlNGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-01T00:27:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-01T00:27:00Z"}, "message": "doc: Remove the section on modes from the tutorial", "tree": {"sha": "1c9c4ffc0e4a891ae1861a5eb6dfb0dc06c1a322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9c4ffc0e4a891ae1861a5eb6dfb0dc06c1a322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc164a549fc342401d9d935c0e663af43d88e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc164a549fc342401d9d935c0e663af43d88e4b", "html_url": "https://github.com/rust-lang/rust/commit/4fc164a549fc342401d9d935c0e663af43d88e4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc164a549fc342401d9d935c0e663af43d88e4b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df34fe917a6dd8b4696a36bf4e4e3e162ca97607", "url": "https://api.github.com/repos/rust-lang/rust/commits/df34fe917a6dd8b4696a36bf4e4e3e162ca97607", "html_url": "https://github.com/rust-lang/rust/commit/df34fe917a6dd8b4696a36bf4e4e3e162ca97607"}], "stats": {"total": 92, "additions": 0, "deletions": 92}, "files": [{"sha": "535b965cf75fe353cbbcf2d8e473f8e8b9cefc1c", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4fc164a549fc342401d9d935c0e663af43d88e4b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fc164a549fc342401d9d935c0e663af43d88e4b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=4fc164a549fc342401d9d935c0e663af43d88e4b", "patch": "@@ -1547,98 +1547,6 @@ fn contains(v: ~[int], elt: int) -> bool {\n \n `for` syntax only works with stack closures.\n \n-# Argument passing\n-\n-Rust datatypes are not trivial to copy (the way, for example,\n-JavaScript values can be copied by simply taking one or two machine\n-words and plunking them somewhere else). Shared boxes require\n-reference count updates, and big records, enums, or unique pointers require\n-an arbitrary amount of data to be copied (plus updating the reference\n-counts of shared boxes hanging off them).\n-\n-For this reason, the default calling convention for Rust functions\n-leaves ownership of the arguments with the caller. The caller\n-guarantees that the arguments will outlive the call, the callee merely\n-gets access to them.\n-\n-## Safe references\n-\n-*This system has recently changed.  An explanation is forthcoming.*\n-\n-## Other uses of safe references\n-\n-Safe references are not only used for argument passing. When you\n-destructure on a value in a `match` expression, or loop over a vector\n-with `for`, variables bound to the inside of the given data structure\n-will use safe references, not copies. This means such references are\n-very cheap, but you'll occasionally have to copy them to ensure\n-safety.\n-\n-~~~~\n-let mut my_rec = {a: 4, b: ~[1, 2, 3]};\n-match my_rec {\n-  {a, b} => {\n-    log(info, b); // This is okay\n-    my_rec = {a: a + 1, b: b + ~[a]};\n-    log(info, b); // Here reference b has become invalid\n-  }\n-}\n-~~~~\n-\n-It's unsafe to dereference `b` in the second `log` expression, because `b` is\n-a _pointer_ to the inside of `my_rec`, and the assignment statement has\n-allocated a new record and assigned `my_rec` to point to it. Thus, the old\n-contents of `my_rec` are no longer live, and `b` is dangling at this point.\n-The borrow-checking analysis inside the compiler recognizes this situation\n-and rejects the program.\n-\n-## Argument passing styles\n-\n-The fact that arguments are conceptually passed by safe reference does\n-not mean all arguments are passed by pointer. Composite types like\n-records and enums *are* passed by pointer, but single-word values, like\n-integers and pointers, are simply passed by value. Most of the time,\n-the programmer does not have to worry about this, as the compiler will\n-simply pick the most efficient passing style. There is one exception,\n-which will be described in the section on [generics](#generics).\n-\n-To explicitly set the passing-style for a parameter, you prefix the\n-argument name with a sigil. There are three special passing styles that\n-are often useful. The first is by-mutable-pointer, written with a\n-single `&`:\n-\n-~~~~\n-fn vec_push(&v: ~[int], elt: int) {\n-    v += ~[elt];\n-}\n-~~~~\n-\n-This allows the function to mutate the value of the argument, *in the\n-caller's context*. Clearly, you are only allowed to pass things that\n-can actually be mutated to such a function.\n-\n-Then there is the by-copy style, written `+`. This indicates that the\n-function wants to take ownership of the argument value. If the caller\n-does not use the argument after the call, it will be 'given' to the\n-callee. Otherwise a copy will be made. This mode is mostly used for\n-functions that construct data structures. The argument will end up\n-being owned by the data structure, so if that can be done without a\n-copy, that's a win.\n-\n-~~~~\n-type person = {name: ~str, address: ~str};\n-fn make_person(+name: ~str, +address: ~str) -> person {\n-    return {name: name, address: address};\n-}\n-~~~~\n-\n-Finally there is by-move style, written `-`. This indicates that the\n-function will take ownership of the argument, like with by-copy style,\n-but a copy must not be made. The caller is (statically) obliged to not\n-use the argument after the call; it is de-initialized as part of the\n-call. This is used to support ownership-passing in the presence of\n-non-copyable types.\n-\n # Generics\n \n ## Generic functions"}]}