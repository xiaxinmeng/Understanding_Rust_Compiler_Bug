{"sha": "fb9299346af9b951890db80e47eb65625997f160", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTI5OTM0NmFmOWI5NTE4OTBkYjgwZTQ3ZWI2NTYyNTk5N2YxNjA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-20T06:54:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-24T01:35:34Z"}, "message": "core: Convert getenv/setenv to use a mutex\n\nThis much simpler implementation uses a global mutex\nand eliminates the kernel environment channel.", "tree": {"sha": "c048d87d7ad93562335e9505ed747ef3d86eb142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c048d87d7ad93562335e9505ed747ef3d86eb142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9299346af9b951890db80e47eb65625997f160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9299346af9b951890db80e47eb65625997f160", "html_url": "https://github.com/rust-lang/rust/commit/fb9299346af9b951890db80e47eb65625997f160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9299346af9b951890db80e47eb65625997f160/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8852279a9ecac970e30b6d92d7efdcbd5485769c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8852279a9ecac970e30b6d92d7efdcbd5485769c", "html_url": "https://github.com/rust-lang/rust/commit/8852279a9ecac970e30b6d92d7efdcbd5485769c"}], "stats": {"total": 215, "additions": 68, "deletions": 147}, "files": [{"sha": "2de7ecf7dff1eb4a69fc5eda985710d5962ee804", "filename": "src/libcore/os.rs", "status": "modified", "additions": 68, "deletions": 136, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/fb9299346af9b951890db80e47eb65625997f160/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9299346af9b951890db80e47eb65625997f160/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=fb9299346af9b951890db80e47eb65625997f160", "patch": "@@ -139,169 +139,101 @@ pub mod win32 {\n     }\n }\n \n-pub fn getenv(n: &str) -> Option<~str> {\n-    global_env::getenv(n)\n-}\n+/*\n+Accessing environment variables is not generally threadsafe.\n+This uses a per-runtime lock to serialize access.\n+XXX: It would probably be appropriate to make this a real global\n+*/\n+fn with_env_lock<T>(f: &fn() -> T) -> T {\n+    use private::global::global_data_clone_create;\n+    use private::{Exclusive, exclusive};\n+\n+    struct SharedValue(());\n+    type ValueMutex = Exclusive<SharedValue>;\n+    fn key(_: ValueMutex) { }\n \n-pub fn setenv(n: &str, v: &str) {\n-    global_env::setenv(n, v)\n-}\n+    unsafe {\n+        let lock: ValueMutex = global_data_clone_create(key, || {\n+            ~exclusive(SharedValue(()))\n+        });\n \n-pub fn env() -> ~[(~str,~str)] {\n-    global_env::env()\n+        lock.with_imm(|_| f() )\n+    }\n }\n \n-mod global_env {\n-    //! Internal module for serializing access to getenv/setenv\n-    use either;\n-    use libc;\n-    use oldcomm;\n-    use option::Option;\n-    use private;\n-    use str;\n-    use task;\n-\n+pub fn env() -> ~[(~str,~str)] {\n     extern mod rustrt {\n-        unsafe fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n-    }\n-\n-    enum Msg {\n-        MsgGetEnv(~str, oldcomm::Chan<Option<~str>>),\n-        MsgSetEnv(~str, ~str, oldcomm::Chan<()>),\n-        MsgEnv(oldcomm::Chan<~[(~str,~str)]>)\n-    }\n-\n-    pub fn getenv(n: &str) -> Option<~str> {\n-        let env_ch = get_global_env_chan();\n-        let po = oldcomm::Port();\n-        oldcomm::send(env_ch, MsgGetEnv(str::from_slice(n),\n-                                        oldcomm::Chan(&po)));\n-        oldcomm::recv(po)\n-    }\n-\n-    pub fn setenv(n: &str, v: &str) {\n-        let env_ch = get_global_env_chan();\n-        let po = oldcomm::Port();\n-        oldcomm::send(env_ch, MsgSetEnv(str::from_slice(n),\n-                                        str::from_slice(v),\n-                                        oldcomm::Chan(&po)));\n-        oldcomm::recv(po)\n+        unsafe fn rust_env_pairs() -> ~[~str];\n     }\n \n-    pub fn env() -> ~[(~str,~str)] {\n-        let env_ch = get_global_env_chan();\n-        let po = oldcomm::Port();\n-        oldcomm::send(env_ch, MsgEnv(oldcomm::Chan(&po)));\n-        oldcomm::recv(po)\n-    }\n-\n-    fn get_global_env_chan() -> oldcomm::Chan<Msg> {\n-        unsafe {\n-            let global_ptr = rustrt::rust_global_env_chan_ptr();\n-            private::chan_from_global_ptr(global_ptr, || {\n-                // FIXME (#2621): This would be a good place to use a very\n-                // small foreign stack\n-                task::task().sched_mode(task::SingleThreaded).unlinked()\n-            }, global_env_task)\n-        }\n-    }\n-\n-    fn global_env_task(msg_po: oldcomm::Port<Msg>) {\n-        unsafe {\n-            do private::weaken_task |weak_po| {\n-                loop {\n-                    match oldcomm::select2(msg_po, weak_po) {\n-                      either::Left(MsgGetEnv(ref n, resp_ch)) => {\n-                        oldcomm::send(resp_ch, impl_::getenv(*n))\n-                      }\n-                      either::Left(MsgSetEnv(ref n, ref v, resp_ch)) => {\n-                        oldcomm::send(resp_ch, impl_::setenv(*n, *v))\n-                      }\n-                      either::Left(MsgEnv(resp_ch)) => {\n-                        oldcomm::send(resp_ch, impl_::env())\n-                      }\n-                      either::Right(_) => break\n-                    }\n-                }\n+    unsafe {\n+        do with_env_lock {\n+            let mut pairs = ~[];\n+            for vec::each(rustrt::rust_env_pairs()) |p| {\n+                let vs = str::splitn_char(*p, '=', 1u);\n+                assert vec::len(vs) == 2u;\n+                pairs.push((copy vs[0], copy vs[1]));\n             }\n+            move pairs\n         }\n     }\n+}\n \n-    mod impl_ {\n-        use cast;\n-        use libc;\n-        use option::Option;\n-        use option;\n-        use ptr;\n-        use str;\n-        use vec;\n-\n-        extern mod rustrt {\n-            unsafe fn rust_env_pairs() -> ~[~str];\n-        }\n-\n-        pub fn env() -> ~[(~str,~str)] {\n-            unsafe {\n-                let mut pairs = ~[];\n-                for vec::each(rustrt::rust_env_pairs()) |p| {\n-                    let vs = str::splitn_char(*p, '=', 1u);\n-                    assert vec::len(vs) == 2u;\n-                    pairs.push((copy vs[0], copy vs[1]));\n-                }\n-                move pairs\n-            }\n-        }\n-\n-        #[cfg(unix)]\n-        pub fn getenv(n: &str) -> Option<~str> {\n-            unsafe {\n-                let s = str::as_c_str(n, |s| libc::getenv(s));\n-                return if ptr::null::<u8>() == cast::reinterpret_cast(&s) {\n-                    option::None::<~str>\n-                } else {\n-                    let s = cast::reinterpret_cast(&s);\n-                    option::Some::<~str>(str::raw::from_buf(s))\n-                };\n+#[cfg(unix)]\n+pub fn getenv(n: &str) -> Option<~str> {\n+    unsafe {\n+        do with_env_lock {\n+            let s = str::as_c_str(n, |s| libc::getenv(s));\n+            if ptr::null::<u8>() == cast::reinterpret_cast(&s) {\n+                option::None::<~str>\n+            } else {\n+                let s = cast::reinterpret_cast(&s);\n+                option::Some::<~str>(str::raw::from_buf(s))\n             }\n         }\n+    }\n+}\n \n-        #[cfg(windows)]\n-        pub fn getenv(n: &str) -> Option<~str> {\n-            unsafe {\n-                use os::win32::{as_utf16_p, fill_utf16_buf_and_decode};\n-                do as_utf16_p(n) |u| {\n-                    do fill_utf16_buf_and_decode() |buf, sz| {\n-                        libc::GetEnvironmentVariableW(u, buf, sz)\n-                    }\n+#[cfg(windows)]\n+pub fn getenv(n: &str) -> Option<~str> {\n+    unsafe {\n+        do with_env_lock {\n+            use os::win32::{as_utf16_p, fill_utf16_buf_and_decode};\n+            do as_utf16_p(n) |u| {\n+                do fill_utf16_buf_and_decode() |buf, sz| {\n+                    libc::GetEnvironmentVariableW(u, buf, sz)\n                 }\n             }\n         }\n+    }\n+}\n \n \n-        #[cfg(unix)]\n-        pub fn setenv(n: &str, v: &str) {\n-            unsafe {\n-                do str::as_c_str(n) |nbuf| {\n-                    do str::as_c_str(v) |vbuf| {\n-                        libc::funcs::posix01::unistd::setenv(nbuf, vbuf, 1);\n-                    }\n+#[cfg(unix)]\n+pub fn setenv(n: &str, v: &str) {\n+    unsafe {\n+        do with_env_lock {\n+            do str::as_c_str(n) |nbuf| {\n+                do str::as_c_str(v) |vbuf| {\n+                    libc::funcs::posix01::unistd::setenv(nbuf, vbuf, 1);\n                 }\n             }\n         }\n+    }\n+}\n \n \n-        #[cfg(windows)]\n-        pub fn setenv(n: &str, v: &str) {\n-            unsafe {\n-                use os::win32::as_utf16_p;\n-                do as_utf16_p(n) |nbuf| {\n-                    do as_utf16_p(v) |vbuf| {\n-                        libc::SetEnvironmentVariableW(nbuf, vbuf);\n-                    }\n+#[cfg(windows)]\n+pub fn setenv(n: &str, v: &str) {\n+    unsafe {\n+        do with_env_lock {\n+            use os::win32::as_utf16_p;\n+            do as_utf16_p(n) |nbuf| {\n+                do as_utf16_p(v) |vbuf| {\n+                    libc::SetEnvironmentVariableW(nbuf, vbuf);\n                 }\n             }\n         }\n-\n     }\n }\n "}, {"sha": "327337f441d8d538216f5edf37533a8e66c10535", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=fb9299346af9b951890db80e47eb65625997f160", "patch": "@@ -870,12 +870,6 @@ rust_task_unweaken(rust_port_id chan) {\n     task->kernel->unweaken_task(chan);\n }\n \n-extern \"C\" CDECL uintptr_t*\n-rust_global_env_chan_ptr() {\n-    rust_task *task = rust_get_current_task();\n-    return task->kernel->get_global_env_chan();\n-}\n-\n extern \"C\" void\n rust_task_inhibit_kill(rust_task *task) {\n     task->inhibit_kill();"}, {"sha": "7e34287884111edf9c102260df4273795725201b", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=fb9299346af9b951890db80e47eb65625997f160", "patch": "@@ -35,7 +35,6 @@ rust_kernel::rust_kernel(rust_env *env) :\n     osmain_driver(NULL),\n     non_weak_tasks(0),\n     global_loop_chan(0),\n-    global_env_chan(0),\n     at_exit_runner(NULL),\n     at_exit_started(false),\n     env(env),"}, {"sha": "477e59d1b3e63947c9b1a05d419fd0116601aed3", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=fb9299346af9b951890db80e47eb65625997f160", "patch": "@@ -131,8 +131,6 @@ class rust_kernel {\n \n     // Used to communicate with the process-side, global libuv loop\n     uintptr_t global_loop_chan;\n-    // Used to serialize access to getenv/setenv\n-    uintptr_t global_env_chan;\n \n     lock_and_signal at_exit_lock;\n     spawn_fn at_exit_runner;\n@@ -193,7 +191,6 @@ class rust_kernel {\n     bool send_to_port(rust_port_id chan, void *sptr);\n \n     uintptr_t* get_global_loop() { return &global_loop_chan; }\n-    uintptr_t* get_global_env_chan() { return &global_env_chan; }\n \n     void register_exit_function(spawn_fn runner, fn_env_pair *f);\n };"}, {"sha": "dd84e5ff6e7c63474659d2a18a1eec5711beb010", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/fb9299346af9b951890db80e47eb65625997f160/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=fb9299346af9b951890db80e47eb65625997f160", "patch": "@@ -174,7 +174,6 @@ rust_dbg_do_nothing\n rust_dbg_breakpoint\n rust_osmain_sched_id\n rust_compare_and_swap_ptr\n-rust_global_env_chan_ptr\n rust_port_take\n rust_port_drop\n rust_port_task"}]}