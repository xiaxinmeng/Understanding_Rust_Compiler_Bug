{"sha": "ec0924f9649ea472782df6d21595714cb594f038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMDkyNGY5NjQ5ZWE0NzI3ODJkZjZkMjE1OTU3MTRjYjU5NGYwMzg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-16T08:07:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-31T08:14:29Z"}, "message": "do not apply DerefMut on union field", "tree": {"sha": "469d6fd7fe103240d531fb4013f5a81cb0dd6e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/469d6fd7fe103240d531fb4013f5a81cb0dd6e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec0924f9649ea472782df6d21595714cb594f038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec0924f9649ea472782df6d21595714cb594f038", "html_url": "https://github.com/rust-lang/rust/commit/ec0924f9649ea472782df6d21595714cb594f038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec0924f9649ea472782df6d21595714cb594f038/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed5cb56b5e5cc216eb6820a44dd4f7ef65107b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed5cb56b5e5cc216eb6820a44dd4f7ef65107b0", "html_url": "https://github.com/rust-lang/rust/commit/8ed5cb56b5e5cc216eb6820a44dd4f7ef65107b0"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "be2bc491c311b4858bb98e8d6e64e6a831fd846a", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec0924f9649ea472782df6d21595714cb594f038/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0924f9649ea472782df6d21595714cb594f038/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=ec0924f9649ea472782df6d21595714cb594f038", "patch": "@@ -193,7 +193,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Convert auto-derefs, indices, etc of an expression from `Deref` and `Index`\n     /// into `DerefMut` and `IndexMut` respectively.\n     ///\n-    /// This is a second pass of typechecking derefs/indices. We need this we do not\n+    /// This is a second pass of typechecking derefs/indices. We need this because we do not\n     /// always know whether a place needs to be mutable or not in the first pass.\n     /// This happens whether there is an implicit mutable reborrow, e.g. when the type\n     /// is used as the receiver of a method call.\n@@ -236,6 +236,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let ty::Ref(region, _, mutbl) = method.sig.output().kind {\n                                 *deref = OverloadedDeref { region, mutbl };\n                             }\n+                            // If this is a union field, also throw an error.\n+                            // Union fields should not get mutable auto-deref'd (see RFC 2514).\n+                            if let hir::ExprKind::Field(ref outer_expr, _) = expr.kind {\n+                                let ty = self.node_ty(outer_expr.hir_id);\n+                                if ty.ty_adt_def().map_or(false, |adt| adt.is_union()) {\n+                                    let mut err = self.tcx.sess.struct_span_err(\n+                                        expr.span,\n+                                        \"not automatically applying `DerefMut` on union field\",\n+                                    );\n+                                    err.help(\"writing to this field calls the destructor for the old value\");\n+                                    err.help(\"add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\");\n+                                    err.emit();\n+                                }\n+                            }\n                         }\n                     }\n                     source = adjustment.target;"}, {"sha": "61bbe73354f04a73ef02c3f90bb3255fe22f4906", "filename": "src/test/ui/union/union-deref.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec0924f9649ea472782df6d21595714cb594f038/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec0924f9649ea472782df6d21595714cb594f038/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.rs?ref=ec0924f9649ea472782df6d21595714cb594f038", "patch": "@@ -0,0 +1,13 @@\n+//! Test the part of RFC 2514 that is about not applying `DerefMut` coercions\n+//! of union fields.\n+#![feature(untagged_unions)]\n+\n+use std::mem::ManuallyDrop;\n+\n+union U<T> { x:(), f: ManuallyDrop<(T,)> }\n+\n+fn main() {\n+    let mut u : U<Vec<i32>> = U { x: () };\n+    unsafe { (*u.f).0 = Vec::new() }; // explicit deref, this compiles\n+    unsafe { u.f.0 = Vec::new() }; //~ERROR not automatically applying `DerefMut` on union field\n+}"}, {"sha": "66cc90cbd3d0142f8d1dcf6d6f40097d4ee3ba5d", "filename": "src/test/ui/union/union-deref.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec0924f9649ea472782df6d21595714cb594f038/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec0924f9649ea472782df6d21595714cb594f038/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr?ref=ec0924f9649ea472782df6d21595714cb594f038", "patch": "@@ -0,0 +1,11 @@\n+error: not automatically applying `DerefMut` on union field\n+  --> $DIR/union-deref.rs:12:14\n+   |\n+LL |     unsafe { u.f.0 = Vec::new() };\n+   |              ^^^\n+   |\n+   = help: writing to this field calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: aborting due to previous error\n+"}]}