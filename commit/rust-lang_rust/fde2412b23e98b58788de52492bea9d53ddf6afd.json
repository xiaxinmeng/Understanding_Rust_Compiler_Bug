{"sha": "fde2412b23e98b58788de52492bea9d53ddf6afd", "node_id": "C_kwDOAAsO6NoAKGZkZTI0MTJiMjNlOThiNTg3ODhkZTUyNDkyYmVhOWQ1M2RkZjZhZmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-11T21:45:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-11T21:45:49Z"}, "message": "Rollup merge of #89675 - oli-obk:type_checker, r=davidtwco\n\nRe-use TypeChecker instead of passing around some of its fields\n\nIn the future (for lazy TAIT) we will need more of its fields, but even ignoring that, this change seems reasonable on its own to me.", "tree": {"sha": "a5e85468a4b1c06113a73d16f93535e41a1f6d37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5e85468a4b1c06113a73d16f93535e41a1f6d37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fde2412b23e98b58788de52492bea9d53ddf6afd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhZLCNCRBK7hj4Ov3rIwAARjMIAAo31XkgIqdEpVJ0Njjh1TwU\nTlfLec69C7KbC1a+e1K1lYkA2ZoY2x3UxM0RTcvwKjr92BgJYhqgGoq3tG1zrIoO\nzJFmvXTlXODg/Z4o4TuEiWB4sQ9Ze6+DQNKE4rOaOT+iw54wSYaudIGb9O2AWu5D\nOYOHsFSLdFgSQ2Y1TTExJ8X2t89igVmfYQg/pZpDkvw24iTlkYZ50pM33787sUOR\ntRa8UjWb8zltdoXjWDwbFrz+IULJCRsXiD1gHNVeXg2Y+m/ePZDIqEaSl1jhg3hM\nUahbaIkuPWVVU/63mFUCnFmBELWBJEgReYrlillTqmsdRYs7roikK0I6DIuw6gw=\n=WC3R\n-----END PGP SIGNATURE-----\n", "payload": "tree a5e85468a4b1c06113a73d16f93535e41a1f6d37\nparent d3984e16bf04f8ff886247cbf684041ba623d6ab\nparent 49b06a2b60d07ad8b10554bcc700d1e1df014104\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1633988749 +0200\ncommitter GitHub <noreply@github.com> 1633988749 +0200\n\nRollup merge of #89675 - oli-obk:type_checker, r=davidtwco\n\nRe-use TypeChecker instead of passing around some of its fields\n\nIn the future (for lazy TAIT) we will need more of its fields, but even ignoring that, this change seems reasonable on its own to me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fde2412b23e98b58788de52492bea9d53ddf6afd", "html_url": "https://github.com/rust-lang/rust/commit/fde2412b23e98b58788de52492bea9d53ddf6afd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fde2412b23e98b58788de52492bea9d53ddf6afd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3984e16bf04f8ff886247cbf684041ba623d6ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3984e16bf04f8ff886247cbf684041ba623d6ab", "html_url": "https://github.com/rust-lang/rust/commit/d3984e16bf04f8ff886247cbf684041ba623d6ab"}, {"sha": "49b06a2b60d07ad8b10554bcc700d1e1df014104", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b06a2b60d07ad8b10554bcc700d1e1df014104", "html_url": "https://github.com/rust-lang/rust/commit/49b06a2b60d07ad8b10554bcc700d1e1df014104"}], "stats": {"total": 134, "additions": 53, "deletions": 81}, "files": [{"sha": "07eadce17738e90847b3a2eb9e8056580187998e", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fde2412b23e98b58788de52492bea9d53ddf6afd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde2412b23e98b58788de52492bea9d53ddf6afd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=fde2412b23e98b58788de52492bea9d53ddf6afd", "patch": "@@ -1153,28 +1153,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         .convert_all(data);\n     }\n \n-    /// Convenient wrapper around `relate_tys::relate_types` -- see\n-    /// that fn for docs.\n-    fn relate_types(\n-        &mut self,\n-        a: Ty<'tcx>,\n-        v: ty::Variance,\n-        b: Ty<'tcx>,\n-        locations: Locations,\n-        category: ConstraintCategory,\n-    ) -> Fallible<()> {\n-        relate_tys::relate_types(\n-            self.infcx,\n-            self.param_env,\n-            a,\n-            v,\n-            b,\n-            locations,\n-            category,\n-            self.borrowck_context,\n-        )\n-    }\n-\n     /// Try to relate `sub <: sup`\n     fn sub_types(\n         &mut self,"}, {"sha": "415d1abaa8b089fdeb453251f99242f4563587a5", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 53, "deletions": 59, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/fde2412b23e98b58788de52492bea9d53ddf6afd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fde2412b23e98b58788de52492bea9d53ddf6afd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=fde2412b23e98b58788de52492bea9d53ddf6afd", "patch": "@@ -1,54 +1,44 @@\n use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n-use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n+use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n use rustc_trait_selection::traits::query::Fallible;\n \n use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n-use crate::type_check::{BorrowCheckContext, Locations};\n-\n-/// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n-///\n-/// - \"Covariant\" `a <: b`\n-/// - \"Invariant\" `a == b`\n-/// - \"Contravariant\" `a :> b`\n-///\n-/// N.B., the type `a` is permitted to have unresolved inference\n-/// variables, but not the type `b`.\n-#[instrument(skip(infcx, param_env, borrowck_context), level = \"debug\")]\n-pub(super) fn relate_types<'tcx>(\n-    infcx: &InferCtxt<'_, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n-    a: Ty<'tcx>,\n-    v: ty::Variance,\n-    b: Ty<'tcx>,\n-    locations: Locations,\n-    category: ConstraintCategory,\n-    borrowck_context: &mut BorrowCheckContext<'_, 'tcx>,\n-) -> Fallible<()> {\n-    TypeRelating::new(\n-        infcx,\n-        NllTypeRelatingDelegate::new(\n-            infcx,\n-            borrowck_context,\n-            param_env,\n-            locations,\n-            category,\n-            UniverseInfo::relate(a, b),\n-        ),\n-        v,\n-    )\n-    .relate(a, b)?;\n-    Ok(())\n+use crate::type_check::{Locations, TypeChecker};\n+\n+impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n+    /// Adds sufficient constraints to ensure that `a R b` where `R` depends on `v`:\n+    ///\n+    /// - \"Covariant\" `a <: b`\n+    /// - \"Invariant\" `a == b`\n+    /// - \"Contravariant\" `a :> b`\n+    ///\n+    /// N.B., the type `a` is permitted to have unresolved inference\n+    /// variables, but not the type `b`.\n+    #[instrument(skip(self), level = \"debug\")]\n+    pub(super) fn relate_types(\n+        &mut self,\n+        a: Ty<'tcx>,\n+        v: ty::Variance,\n+        b: Ty<'tcx>,\n+        locations: Locations,\n+        category: ConstraintCategory,\n+    ) -> Fallible<()> {\n+        TypeRelating::new(\n+            self.infcx,\n+            NllTypeRelatingDelegate::new(self, locations, category, UniverseInfo::relate(a, b)),\n+            v,\n+        )\n+        .relate(a, b)?;\n+        Ok(())\n+    }\n }\n \n struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n-    infcx: &'me InferCtxt<'me, 'tcx>,\n-    borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n-\n-    param_env: ty::ParamEnv<'tcx>,\n+    type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n \n     /// Where (and why) is this relation taking place?\n     locations: Locations,\n@@ -63,25 +53,24 @@ struct NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n \n impl NllTypeRelatingDelegate<'me, 'bccx, 'tcx> {\n     fn new(\n-        infcx: &'me InferCtxt<'me, 'tcx>,\n-        borrowck_context: &'me mut BorrowCheckContext<'bccx, 'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n+        type_checker: &'me mut TypeChecker<'bccx, 'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n         universe_info: UniverseInfo<'tcx>,\n     ) -> Self {\n-        Self { infcx, borrowck_context, param_env, locations, category, universe_info }\n+        Self { type_checker, locations, category, universe_info }\n     }\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.param_env\n+        self.type_checker.param_env\n     }\n \n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n-        let universe = self.infcx.create_next_universe();\n-        self.borrowck_context\n+        let universe = self.type_checker.infcx.create_next_universe();\n+        self.type_checker\n+            .borrowck_context\n             .constraints\n             .universe_causes\n             .insert(universe, self.universe_info.clone());\n@@ -90,15 +79,18 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n-        self.infcx.next_nll_region_var(origin)\n+        self.type_checker.infcx.next_nll_region_var(origin)\n     }\n \n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        self.borrowck_context.constraints.placeholder_region(self.infcx, placeholder)\n+        self.type_checker\n+            .borrowck_context\n+            .constraints\n+            .placeholder_region(self.type_checker.infcx, placeholder)\n     }\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n-        self.infcx.next_nll_region_var_in_universe(\n+        self.type_checker.infcx.next_nll_region_var_in_universe(\n             NllRegionVariableOrigin::Existential { from_forall: false },\n             universe,\n         )\n@@ -110,15 +102,17 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n         sub: ty::Region<'tcx>,\n         info: ty::VarianceDiagInfo<'tcx>,\n     ) {\n-        let sub = self.borrowck_context.universal_regions.to_region_vid(sub);\n-        let sup = self.borrowck_context.universal_regions.to_region_vid(sup);\n-        self.borrowck_context.constraints.outlives_constraints.push(OutlivesConstraint {\n-            sup,\n-            sub,\n-            locations: self.locations,\n-            category: self.category,\n-            variance_info: info,\n-        });\n+        let sub = self.type_checker.borrowck_context.universal_regions.to_region_vid(sub);\n+        let sup = self.type_checker.borrowck_context.universal_regions.to_region_vid(sup);\n+        self.type_checker.borrowck_context.constraints.outlives_constraints.push(\n+            OutlivesConstraint {\n+                sup,\n+                sub,\n+                locations: self.locations,\n+                category: self.category,\n+                variance_info: info,\n+            },\n+        );\n     }\n \n     // We don't have to worry about the equality of consts during borrow checking"}]}