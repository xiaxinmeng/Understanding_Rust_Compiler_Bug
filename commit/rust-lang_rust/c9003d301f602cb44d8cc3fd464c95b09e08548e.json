{"sha": "c9003d301f602cb44d8cc3fd464c95b09e08548e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MDAzZDMwMWY2MDJjYjQ0ZDhjYzNmZDQ2NGM5NWIwOWUwODU0OGU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-31T20:31:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-10-31T21:20:56Z"}, "message": "Stub a __morestack implementation and stack segment allocation. Untested.", "tree": {"sha": "26b07c6d9da42436b7c2cfebbf08ad7404bb059e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b07c6d9da42436b7c2cfebbf08ad7404bb059e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9003d301f602cb44d8cc3fd464c95b09e08548e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9003d301f602cb44d8cc3fd464c95b09e08548e", "html_url": "https://github.com/rust-lang/rust/commit/c9003d301f602cb44d8cc3fd464c95b09e08548e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9003d301f602cb44d8cc3fd464c95b09e08548e/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "799ba7b1226cda3cf167cbe1c7e8aaf2f78c82f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/799ba7b1226cda3cf167cbe1c7e8aaf2f78c82f9", "html_url": "https://github.com/rust-lang/rust/commit/799ba7b1226cda3cf167cbe1c7e8aaf2f78c82f9"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "8d096558923514306506e2e4a60f24a94a0ca3e1", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9003d301f602cb44d8cc3fd464c95b09e08548e/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c9003d301f602cb44d8cc3fd464c95b09e08548e/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=c9003d301f602cb44d8cc3fd464c95b09e08548e", "patch": "@@ -38,7 +38,8 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n RUNTIME_LL :=\n \n RUNTIME_S := rt/arch/i386/_context.S \\\n-             rt/arch/i386/ccall.S\n+             rt/arch/i386/ccall.S \\\n+             rt/arch/i386/morestack.S\n \n RUNTIME_HDR := rt/globals.h \\\n                rt/rust.h \\"}, {"sha": "7df9e3366e0f719f9ab45269425da3ee85ceda04", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9003d301f602cb44d8cc3fd464c95b09e08548e/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c9003d301f602cb44d8cc3fd464c95b09e08548e/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=c9003d301f602cb44d8cc3fd464c95b09e08548e", "patch": "@@ -5,6 +5,11 @@\n RUSTLLVM_OBJS_CS := $(addprefix rustllvm/, RustGCMetadataPrinter.cpp \\\n     RustGCStrategy.cpp RustWrapper.cpp)\n \n+# Behind an ifdef for now since this requires a patched LLVM.\n+ifdef CFG_STACK_GROWTH\n+RUSTLLVM_OBJS_CS += rustllvm/RustPrologHook.cpp\n+endif\n+\n RUSTLLVM_DEF := rustllvm/rustllvm$(CFG_DEF_SUFFIX)\n \n RUSTLLVM_INCS := -iquote $(CFG_LLVM_INCDIR) \\"}, {"sha": "23492637fdbc7dcd8a69507646228d403439bb47", "filename": "src/rt/arch/i386/morestack.S", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c9003d301f602cb44d8cc3fd464c95b09e08548e/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/c9003d301f602cb44d8cc3fd464c95b09e08548e/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=c9003d301f602cb44d8cc3fd464c95b09e08548e", "patch": "@@ -0,0 +1,38 @@\n+    .text\n+\n+// __morestack\n+//\n+// LLVM generates a call to this to allocate more stack space in a functiono\n+// prolog when we run out.\n+\n+#if defined(__APPLE__) || defined(_WIN32)\n+#define RUST_NEW_STACK      _rust_new_stack\n+#define RUST_DEL_STACK      _rust_del_stack\n+#else\n+#define RUST_NEW_STACK      rust_new_stack\n+#define RUST_DEL_STACK      rust_del_stack\n+#endif\n+\n+.globl RUST_NEW_STACK\n+.globl RUST_DEL_STACK\n+\n+.globl __morestack\n+\n+__morestack:\n+    pushl %edx              // param 2: size of arguments\n+    leal 8(%esp),%eax\n+    pushl %eax              // param 1: starting addr of arguments\n+    pushl %ecx              // param 0: amount of space needed\n+    calll RUST_NEW_STACK\n+\n+    movl (%esp),%edx        // Grab the return pointer.\n+    incl %edx               // Skip past the `ret`.\n+    movl %eax,%esp          // Switch to the new stack.\n+    calll *%edx             // Enter the new function.\n+\n+    // Now the function that called us has returned, so we need to delete the\n+    // old stack space.\n+    calll RUST_DEL_STACK\n+    movl %eax,%esp          // Switch back to the old stack.\n+    retl\n+"}, {"sha": "5043f9ec4b010022ffd8e82950d617ba72355b43", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c9003d301f602cb44d8cc3fd464c95b09e08548e/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c9003d301f602cb44d8cc3fd464c95b09e08548e/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=c9003d301f602cb44d8cc3fd464c95b09e08548e", "patch": "@@ -8,6 +8,8 @@\n #ifndef __WIN32__\n #include <execinfo.h>\n #endif\n+#include <cassert>\n+#include <cstring>\n \n #include \"globals.h\"\n \n@@ -36,22 +38,46 @@ new_stk(rust_scheduler *sched, rust_task *task, size_t minsz)\n     stk_seg *stk = (stk_seg *)task->malloc(sz, \"stack\");\n     LOGPTR(task->sched, \"new stk\", (uintptr_t)stk);\n     memset(stk, 0, sizeof(stk_seg));\n+    stk->next = task->stk;\n     stk->limit = (uintptr_t) &stk->data[minsz];\n     LOGPTR(task->sched, \"stk limit\", stk->limit);\n     stk->valgrind_id =\n         VALGRIND_STACK_REGISTER(&stk->data[0],\n                                 &stk->data[minsz]);\n+    task->stk = stk;\n     return stk;\n }\n \n static void\n del_stk(rust_task *task, stk_seg *stk)\n {\n+    assert(stk == task->stk && \"Freeing stack segments out of order!\");\n+\n+    task->stk = stk->next;\n+\n     VALGRIND_STACK_DEREGISTER(stk->valgrind_id);\n     LOGPTR(task->sched, \"freeing stk segment\", (uintptr_t)stk);\n     task->free(stk);\n }\n \n+// Entry points for `__morestack` (see arch/*/morestack.S).\n+extern \"C\" void *\n+rust_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n+    rust_task *task = rust_scheduler::get_task();\n+    stk_seg *stk_seg = new_stk(task->sched, task, stk_sz);\n+    memcpy(stk_seg->data, args_addr, args_sz);\n+    return stk_seg->data;\n+}\n+\n+extern \"C\" void *\n+rust_del_stack() {\n+    rust_task *task = rust_scheduler::get_task();\n+    stk_seg *next_seg = task->stk->next;\n+    del_stk(task, task->stk);\n+    return next_seg->data;\n+}\n+\n+\n // Tasks\n rust_task::rust_task(rust_scheduler *sched, rust_task_list *state,\n                      rust_task *spawner, const char *name) :"}, {"sha": "783d46eacedfb9087c7a99b4993e1b5eb82fcbaa", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9003d301f602cb44d8cc3fd464c95b09e08548e/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/c9003d301f602cb44d8cc3fd464c95b09e08548e/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=c9003d301f602cb44d8cc3fd464c95b09e08548e", "patch": "@@ -24,8 +24,13 @@ struct chan_handle {\n struct rust_box;\n \n struct stk_seg {\n-    unsigned int valgrind_id;\n+    stk_seg *next;\n     uintptr_t limit;\n+    unsigned int valgrind_id;\n+#ifndef _LP64\n+    uint32_t pad;\n+#endif\n+\n     uint8_t data[];\n };\n "}]}