{"sha": "70659f7591b9ecc4a92df9d45c1d18e750a5339b", "node_id": "C_kwDOAAsO6NoAKDcwNjU5Zjc1OTFiOWVjYzRhOTJkZjlkNDVjMWQxOGU3NTBhNTMzOWI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-08T16:42:00Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-08T16:42:00Z"}, "message": "Cleanup", "tree": {"sha": "b9859462cbd11afa2d9edb51446ac802a201d311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9859462cbd11afa2d9edb51446ac802a201d311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70659f7591b9ecc4a92df9d45c1d18e750a5339b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70659f7591b9ecc4a92df9d45c1d18e750a5339b", "html_url": "https://github.com/rust-lang/rust/commit/70659f7591b9ecc4a92df9d45c1d18e750a5339b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70659f7591b9ecc4a92df9d45c1d18e750a5339b/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4b74e3adf214d985c541eb7d005bb77e59338f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b74e3adf214d985c541eb7d005bb77e59338f5", "html_url": "https://github.com/rust-lang/rust/commit/a4b74e3adf214d985c541eb7d005bb77e59338f5"}], "stats": {"total": 161, "additions": 53, "deletions": 108}, "files": [{"sha": "3201afbd78201ef80db580d6042f586b2f385150", "filename": "Readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -177,7 +177,7 @@ To have the correct file paths in `gdb` instead of `/usr/src/debug/gcc/libstdc++\n Maybe by calling the following at the beginning of gdb:\n \n ```\n-set substitute-path /usr/src/debug/gcc /home/bouanto/Ordinateur/Programmation/Projets/gcc-repo/gcc\n+set substitute-path /usr/src/debug/gcc /path/to/gcc-repo/gcc\n ```\n \n TODO: but that's not what I remember I was doing."}, {"sha": "c80348ca549707570b3da827f1209ce65e673bc8", "filename": "example/alloc_example.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, box_syntax, core_intrinsics, alloc_error_handler)]\n+#![feature(start, box_syntax, core_intrinsics, alloc_error_handler, lang_items)]\n #![no_std]\n \n extern crate alloc;\n@@ -26,6 +26,16 @@ fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n     core::intrinsics::abort();\n }\n \n+#[lang = \"eh_personality\"]\n+fn eh_personality() -> ! {\n+    loop {}\n+}\n+\n+#[no_mangle]\n+unsafe extern \"C\" fn _Unwind_Resume() {\n+    core::intrinsics::unreachable();\n+}\n+\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n     let world: Box<&str> = box \"Hello World!\\0\";"}, {"sha": "19cd44f28193f711ac000719df1c6965c97c6beb", "filename": "src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n                     inputs.push(AsmInOperand {\n                         constraint: \"X\".into(),\n                         rust_idx,\n-                        val: get_fn(self.cx, instance, false).get_address(None),\n+                        val: get_fn(self.cx, instance).get_address(None),\n                     });\n                 }\n \n@@ -738,7 +738,7 @@ impl<'gcc, 'tcx> AsmMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                         }\n \n                         GlobalAsmOperandRef::SymFn { instance } => {\n-                            let function = get_fn(self, instance, false);\n+                            let function = get_fn(self, instance);\n                             self.add_used_function(function);\n                             // TODO(@Amanieu): Additional mangling is needed on\n                             // some targets to add a leading underscore (Mach-O)"}, {"sha": "ea933c25b2f3978307474e87b9761192f8f9463c", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -91,12 +91,6 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n         context.add_command_line_option(\"-fexceptions\");\n         context.add_driver_option(\"-fexceptions\");\n \n-        /*context.add_command_line_option(\"-fasynchronous-unwind-tables\");\n-        context.add_driver_option(\"-fasynchronous-unwind-tables\");\n-\n-        context.add_command_line_option(\"-funwind-tables\");\n-        context.add_driver_option(\"-funwind-tables\");*/\n-\n         // TODO(antoyo): only set on x86 platforms.\n         context.add_command_line_option(\"-masm=intel\");\n         // TODO(antoyo): only add the following cli argument if the feature is supported.\n@@ -156,8 +150,7 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n             context.set_keep_intermediates(true);\n         }\n \n-        // TODO(bjorn3): Remove once unwinding is properly implemented\n-        // TODO: remove.\n+        // NOTE: The codegen generates unrechable blocks.\n         context.set_allow_unreachable_blocks(true);\n \n         {"}, {"sha": "080a306e70eba46eb23bb612256c046733667058", "filename": "src/builder.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -457,7 +457,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n \n         let current_block = self.block.clone();\n         self.block = try_block;\n-        let call = self.call(typ, func, args, None); // TODO: use funclet here?\n+        let call = self.call(typ, func, args, None); // TODO(antoyo): use funclet here?\n         self.block = current_block;\n \n         let return_value = self.current_func()\n@@ -471,8 +471,6 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n             self.block.add_try_finally(None, try_block, catch);\n         }\n         else {\n-            // FIXME: FIXME: FIXME: Seems like bad (_URC_NO_REASON) return code, perhaps because the cleanup pad was created properly.\n-            println!(\"Try/catch in {:?}\", self.current_func());\n             self.block.add_try_catch(None, try_block, catch);\n         }\n \n@@ -1197,26 +1195,16 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n     }\n \n     fn set_personality_fn(&mut self, personality: RValue<'gcc>) {\n-        let personality = self.rvalue_as_function(personality); // FIXME: why calling\n-        //rvalue_as_function doesn't work?\n-        //let personality = unsafe { std::mem::transmute(personality) };\n+        let personality = self.rvalue_as_function(personality);\n         #[cfg(feature=\"master\")]\n         self.current_func().set_personality_function(personality);\n-        // FIXME: rustc manages to generate the symbol DW.ref.rust_eh_personality multiple times\n-        // for the same asm file, which causes an assembler error.\n     }\n \n     fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n         self.set_personality_fn(pers_fn);\n \n-        /*\n-         * Matching GCC exception handling with LLVM:\n-         *\n-         *    GCC                 LLVM\n-         *    CATCH_EXPR          landing pad catch clause\n-         *    TRY_FINALLY_EXPR    cleanup\n-         */\n-\n+        // NOTE: insert the current block in a variable so that a later call to invoke knows to\n+        // generate a try/finally instead of a try/catch for this block.\n         self.cleanup_blocks.borrow_mut().insert(self.block);\n \n         let eh_pointer_builtin = self.cx.context.get_target_builtin_function(\"__builtin_eh_pointer\");"}, {"sha": "70cdece7f0afeaaa16351ceee2510ff4cd935b40", "filename": "src/callee.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcallee.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -1,11 +1,9 @@\n #[cfg(feature=\"master\")]\n use gccjit::{FnAttribute, Visibility};\n-use gccjit::{FunctionType, RValue, Function};\n-use rustc_codegen_ssa::traits::BaseTypeMethods;\n+use gccjit::{FunctionType, Function};\n use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n \n-use crate::abi::FnAbiGccExt;\n use crate::attributes;\n use crate::context::CodegenCx;\n \n@@ -16,7 +14,7 @@ use crate::context::CodegenCx;\n ///\n /// - `cx`: the crate context\n /// - `instance`: the instance to be instantiated\n-pub fn get_fn<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, instance: Instance<'tcx>, dont_cache: bool) -> Function<'gcc> {\n+pub fn get_fn<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, instance: Instance<'tcx>) -> Function<'gcc> {\n     let tcx = cx.tcx();\n \n     assert!(!instance.substs.needs_infer());\n@@ -31,7 +29,9 @@ pub fn get_fn<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, instance: Instance<'tcx>,\n     let fn_abi = cx.fn_abi_of_instance(instance, ty::List::empty());\n \n     let func =\n-        if let Some(func) = cx.get_declared_value(&sym) {\n+        if let Some(_func) = cx.get_declared_value(&sym) {\n+            // FIXME: we never reach this because get_declared_value only returns global variables\n+            // and here we try to get a function.\n             unreachable!();\n             /*\n             // Create a fn pointer with the new signature.\n@@ -70,10 +70,7 @@ pub fn get_fn<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, instance: Instance<'tcx>,\n         }\n         else {\n             cx.linkage.set(FunctionType::Extern);\n-            /*if sym == \"rust_eh_personality\" {\n-                panic!();\n-            }*/\n-            let func = cx.declare_fn(&sym, &fn_abi, dont_cache);\n+            let func = cx.declare_fn(&sym, &fn_abi);\n \n             attributes::from_fn_attrs(cx, func, instance);\n \n@@ -171,9 +168,7 @@ pub fn get_fn<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, instance: Instance<'tcx>,\n             func\n         };\n \n-    //if !dont_cache {\n-        cx.function_instances.borrow_mut().insert(instance, func);\n-    //}\n+    cx.function_instances.borrow_mut().insert(instance, func);\n \n     func\n }"}, {"sha": "a66e13b6008a57c82c6398ac4a2096b585adf5dc", "filename": "src/context.rs", "status": "modified", "additions": 13, "deletions": 41, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -1,6 +1,6 @@\n use std::cell::{Cell, RefCell};\n \n-use gccjit::{Block, CType, Context, Function, FunctionPtrType, FunctionType, LValue, RValue, Type, FnAttribute};\n+use gccjit::{Block, CType, Context, Function, FunctionPtrType, FunctionType, LValue, RValue, Type};\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_codegen_ssa::traits::{\n     BackendTypes,\n@@ -259,8 +259,8 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n     pub fn rvalue_as_function(&self, value: RValue<'gcc>) -> Function<'gcc> {\n         let function: Function<'gcc> = unsafe { std::mem::transmute(value) };\n         // FIXME: seems like self.functions get overwritten for rust_eh_personality.\n-        /*debug_assert!(self.functions.borrow().values().find(|value| **value == function).is_some(),\n-            \"{:?} is not a function\", function);*/\n+        debug_assert!(self.functions.borrow().values().find(|value| **value == function).is_some(),\n+            \"{:?} is not a function\", function);\n         function\n     }\n \n@@ -332,7 +332,7 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn get_fn(&self, instance: Instance<'tcx>) -> RValue<'gcc> {\n-        let func = get_fn(self, instance, false);\n+        let func = get_fn(self, instance);\n         *self.current_func.borrow_mut() = Some(func);\n         unsafe { std::mem::transmute(func) }\n     }\n@@ -345,7 +345,7 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                 self.intrinsics.borrow()[func_name].clone()\n             }\n             else {\n-                get_fn(self, instance, false)\n+                get_fn(self, instance)\n             };\n         let ptr = func.get_address(None);\n \n@@ -386,8 +386,6 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n         let func =\n             match tcx.lang_items().eh_personality() {\n                 Some(def_id) if !wants_msvc_seh(self.sess()) => {\n-                    // FIXME: this create an instance into self.functions and prevent the creating\n-                    // of the function defined in std.\n                     let instance =\n                         ty::Instance::resolve(\n                             tcx,\n@@ -400,45 +398,19 @@ impl<'gcc, 'tcx> MiscMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n                     let symbol_name = tcx.symbol_name(instance).name;\n                     let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty());\n                     self.linkage.set(FunctionType::Extern);\n-                    let func = self.declare_fn(symbol_name, &fn_abi, false);\n-                    //func.add_attribute(FnAttribute::Weak);\n-\n-                    /*let block = func.new_block(\"eh_personality_block\");\n-                    // NOTE: it seems this function is overwritten by the standard library, so just\n-                    // return a dummy value in this version.\n-                    let zero = self.context.new_rvalue_zero(self.type_u32());\n-                    block.end_with_return(None, zero);*/\n-\n-                    //*self.current_func.borrow_mut() = Some(func);\n+                    let func = self.declare_fn(symbol_name, &fn_abi);\n                     let func: RValue<'gcc> = unsafe { std::mem::transmute(func) };\n                     func\n-                    /*self.get_fn(\n-                        ty::Instance::resolve(\n-                            tcx,\n-                            ty::ParamEnv::reveal_all(),\n-                            def_id,\n-                            tcx.intern_substs(&[]),\n-                        )\n-                        .unwrap().unwrap(),\n-                    )*/\n                 },\n                 _ => {\n-                    let name = if wants_msvc_seh(self.sess()) {\n-                        \"__CxxFrameHandler3\"\n-                    } else {\n-                        \"rust_eh_personality\"\n-                    };\n+                    let name =\n+                        if wants_msvc_seh(self.sess()) {\n+                            \"__CxxFrameHandler3\"\n+                        }\n+                        else {\n+                            \"rust_eh_personality\"\n+                        };\n                     let func = self.declare_func(name, self.type_i32(), &[], true);\n-                    //*self.current_func.borrow_mut() = Some(func);\n-                    // NOTE: this function is created multiple times and is overwritten by the\n-                    // standard library, so mark it as weak.\n-                    //func.add_attribute(FnAttribute::Weak);\n-                    //self.functions.borrow_mut().insert(name.to_string(), func);\n-                    /*let block = func.new_block(\"eh_personality_block\");\n-                    // NOTE: it seems this function is overwritten by the standard library, so just\n-                    // return a dummy value in this version.\n-                    let zero = self.context.new_rvalue_zero(self.type_i32());\n-                    block.end_with_return(None, zero);*/\n                     unsafe { std::mem::transmute(func) }\n                 }\n             };"}, {"sha": "b4b7d1b011ea4059b3c133fcc60fef89132cff66", "filename": "src/declare.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdeclare.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -40,7 +40,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n \n     pub fn declare_func(&self, name: &str, return_type: Type<'gcc>, params: &[Type<'gcc>], variadic: bool) -> Function<'gcc> {\n         self.linkage.set(FunctionType::Extern);\n-        declare_raw_fn(self, name, () /*llvm::CCallConv*/, return_type, params, variadic, true)\n+        declare_raw_fn(self, name, () /*llvm::CCallConv*/, return_type, params, variadic)\n     }\n \n     pub fn declare_global(&self, name: &str, ty: Type<'gcc>, global_kind: GlobalKind, is_tls: bool, link_section: Option<Symbol>) -> LValue<'gcc> {\n@@ -69,27 +69,17 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         let return_type = self.type_i32();\n         let variadic = false;\n         self.linkage.set(FunctionType::Exported);\n-        let func = declare_raw_fn(self, name, () /*llvm::CCallConv*/, return_type, &[self.type_i32(), const_string], variadic, false);\n+        let func = declare_raw_fn(self, name, () /*llvm::CCallConv*/, return_type, &[self.type_i32(), const_string], variadic);\n         // NOTE: it is needed to set the current_func here as well, because get_fn() is not called\n         // for the main function.\n         *self.current_func.borrow_mut() = Some(func);\n         // FIXME(antoyo): this is a wrong cast. That requires changing the compiler API.\n         unsafe { std::mem::transmute(func) }\n     }\n \n-    pub fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>, dont_cache: bool) -> Function<'gcc> {\n+    pub fn declare_fn(&self, name: &str, fn_abi: &FnAbi<'tcx, Ty<'tcx>>) -> Function<'gcc> {\n         let (return_type, params, variadic, on_stack_param_indices) = fn_abi.gcc_type(self);\n-        /*static mut COUNTER: i32 = 0;\n-        if name.contains(\"personality\") {\n-            println!(\"{}: {}\", name, skip_cache);\n-            unsafe {\n-                COUNTER += 1;\n-                if COUNTER == 6 {\n-                    panic!(\"{}\", name);\n-                }\n-            }\n-        }*/\n-        let func = declare_raw_fn(self, name, () /*fn_abi.llvm_cconv()*/, return_type, &params, variadic, dont_cache);\n+        let func = declare_raw_fn(self, name, () /*fn_abi.llvm_cconv()*/, return_type, &params, variadic);\n         self.on_stack_function_params.borrow_mut().insert(func, on_stack_param_indices);\n         func\n     }\n@@ -108,7 +98,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n ///\n /// If there\u2019s a value with the same name already declared, the function will\n /// update the declaration and return existing Value instead.\n-fn declare_raw_fn<'gcc>(cx: &CodegenCx<'gcc, '_>, name: &str, _callconv: () /*llvm::CallConv*/, return_type: Type<'gcc>, param_types: &[Type<'gcc>], variadic: bool, dont_cache: bool) -> Function<'gcc> {\n+fn declare_raw_fn<'gcc>(cx: &CodegenCx<'gcc, '_>, name: &str, _callconv: () /*llvm::CallConv*/, return_type: Type<'gcc>, param_types: &[Type<'gcc>], variadic: bool) -> Function<'gcc> {\n     if name.starts_with(\"llvm.\") {\n         let intrinsic = llvm::intrinsic(name, cx);\n         cx.intrinsics.borrow_mut().insert(name.to_string(), intrinsic);\n@@ -123,9 +113,7 @@ fn declare_raw_fn<'gcc>(cx: &CodegenCx<'gcc, '_>, name: &str, _callconv: () /*ll\n                 .map(|(index, param)| cx.context.new_parameter(None, *param, &format!(\"param{}\", index))) // TODO(antoyo): set name.\n                 .collect();\n             let func = cx.context.new_function(None, cx.linkage.get(), return_type, &params, mangle_name(name), variadic);\n-            //if !dont_cache {\n-                cx.functions.borrow_mut().insert(name.to_string(), func);\n-            //}\n+            cx.functions.borrow_mut().insert(name.to_string(), func);\n             func\n         };\n "}, {"sha": "fa78325ec9d104fdb385f4307b91877356b06498", "filename": "src/intrinsic/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fintrinsic%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fintrinsic%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fmod.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -1118,9 +1118,7 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n }\n \n fn try_intrinsic<'a, 'b, 'gcc, 'tcx>(bx: &'b mut Builder<'a, 'gcc, 'tcx>, try_func: RValue<'gcc>, data: RValue<'gcc>, catch_func: RValue<'gcc>, dest: RValue<'gcc>) {\n-    // NOTE: the `|| true` here is to use the panic=abort strategy with panic=unwind too\n     if bx.sess().panic_strategy() == PanicStrategy::Abort {\n-        // TODO(bjorn3): Properly implement unwinding and remove the `|| true` once this is done.\n         bx.call(bx.type_void(), try_func, &[data], None);\n         // Return 0 unconditionally from the intrinsic call;\n         // we can never unwind.\n@@ -1238,7 +1236,7 @@ fn get_rust_try_fn<'a, 'gcc, 'tcx>(cx: &'a CodegenCx<'gcc, 'tcx>, codegen: &mut\n     )));\n     // `unsafe fn(unsafe fn(*mut i8) -> (), *mut i8, unsafe fn(*mut i8, *mut i8) -> ()) -> i32`\n     let rust_fn_sig = ty::Binder::dummy(cx.tcx.mk_fn_sig(\n-        [try_fn_ty, i8p, catch_fn_ty].into_iter(),\n+        [try_fn_ty, i8p, catch_fn_ty].iter(),\n         &tcx.types.i32,\n         false,\n         rustc_hir::Unsafety::Unsafe,\n@@ -1256,7 +1254,7 @@ fn gen_fn<'a, 'gcc, 'tcx>(cx: &'a CodegenCx<'gcc, 'tcx>, name: &str, rust_fn_sig\n     let (typ, _, _, _) = fn_abi.gcc_type(cx);\n     // FIXME(eddyb) find a nicer way to do this.\n     cx.linkage.set(FunctionType::Internal);\n-    let func = cx.declare_fn(name, fn_abi, false);\n+    let func = cx.declare_fn(name, fn_abi);\n     let func_val = unsafe { std::mem::transmute(func) };\n     cx.set_frame_pointer_type(func_val);\n     cx.apply_target_cpu_attr(func_val);"}, {"sha": "0491fffc8abf1581120cdade3323dab74bf8f6f6", "filename": "src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/src%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmono_item.rs?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -35,7 +35,7 @@ impl<'gcc, 'tcx> PreDefineMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n \n         let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty());\n         self.linkage.set(base::linkage_to_gcc(linkage));\n-        let decl = self.declare_fn(symbol_name, &fn_abi, false);\n+        let decl = self.declare_fn(symbol_name, &fn_abi);\n         //let attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n \n         attributes::from_fn_attrs(self, decl, instance);"}, {"sha": "5604fd4ff94b98c4c0042afa2fb7fb2a4b15be79", "filename": "test.sh", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/70659f7591b9ecc4a92df9d45c1d18e750a5339b/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/70659f7591b9ecc4a92df9d45c1d18e750a5339b/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=70659f7591b9ecc4a92df9d45c1d18e750a5339b", "patch": "@@ -191,11 +191,11 @@ function std_tests() {\n     $RUN_WRAPPER ./target/out/std_example --target $TARGET_TRIPLE\n \n     echo \"[AOT] subslice-patterns-const-eval\"\n-    $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUSTC example/subslice-patterns-const-eval.rs --crate-type bin --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/subslice-patterns-const-eval\n \n     echo \"[AOT] track-caller-attribute\"\n-    $RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target $TARGET_TRIPLE\n+    $RUSTC example/track-caller-attribute.rs --crate-type bin --target $TARGET_TRIPLE\n     $RUN_WRAPPER ./target/out/track-caller-attribute\n \n     echo \"[BUILD] mod_bench\"\n@@ -340,6 +340,7 @@ function test_rustc() {\n \n     rm -r src/test/ui/{abi*,extern/,panic-runtime/,panics/,unsized-locals/,proc-macro/,threads-sendsync/,thinlto/,borrowck/,chalkify/bugs/,test*,*lto*.rs,consts/const-float-bits-reject-conv.rs,consts/issue-miri-1910.rs} || true\n     rm src/test/ui/mir/mir_heavy_promoted.rs # this tests is oom-killed in the CI.\n+    # TODO: re-enable panics tests.\n     for test in $(rg --files-with-matches \"catch_unwind|should_panic|thread|lto\" src/test/ui); do\n       rm $test\n     done\n@@ -348,7 +349,7 @@ function test_rustc() {\n     git checkout src/test/ui/type-alias-impl-trait/auxiliary/cross_crate_ice2.rs\n     git checkout src/test/ui/macros/rfc-2011-nicer-assert-messages/auxiliary/common.rs\n \n-    RUSTC_ARGS=\"-Zpanic-abort-tests -Csymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot -Cpanic=abort\"\n+    RUSTC_ARGS=\"-Csymbol-mangling-version=v0 -Zcodegen-backend=\"$(pwd)\"/../target/\"$CHANNEL\"/librustc_codegen_gcc.\"$dylib_ext\" --sysroot \"$(pwd)\"/../build_sysroot/sysroot\"\n \n     if [ $# -eq 0 ]; then\n         # No argument supplied to the function. Doing nothing.\n@@ -400,7 +401,7 @@ function all() {\n     mini_tests\n     build_sysroot\n     std_tests\n-    asm_tests\n+    #asm_tests\n     test_libcore\n     extended_sysroot_tests\n     test_rustc"}]}