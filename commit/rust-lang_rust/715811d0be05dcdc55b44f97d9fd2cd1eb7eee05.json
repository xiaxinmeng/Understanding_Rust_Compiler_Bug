{"sha": "715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNTgxMWQwYmUwNWRjZGM1NWI0NGY5N2Q5ZmQyY2QxZWI3ZWVlMDU=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-04-24T09:56:54Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-04-25T05:28:22Z"}, "message": "    support `default impl` for specialization\n\n    pr review", "tree": {"sha": "c893a210beed2ccc862c0154255461010915c50b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c893a210beed2ccc862c0154255461010915c50b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "html_url": "https://github.com/rust-lang/rust/commit/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0fca5f790e86a4235c64095f4ac55d325253b92", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fca5f790e86a4235c64095f4ac55d325253b92", "html_url": "https://github.com/rust-lang/rust/commit/b0fca5f790e86a4235c64095f4ac55d325253b92"}], "stats": {"total": 267, "additions": 202, "deletions": 65}, "files": [{"sha": "8326a3683a9045d825e4fdc4021af340ee3b3755", "filename": "cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1 +1 @@\n-Subproject commit c416fb60b11ecfd2a1ba0fb8567c9a92590b5d28\n+Subproject commit 8326a3683a9045d825e4fdc4021af340ee3b3755"}, {"sha": "6ecff95fdc3ee7ceed2b9b0cc1a3a64876860bce", "filename": "rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rls?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1 +1 @@\n-Subproject commit 016cbc514cf44a2bd3fe806e8afa6b9c50287373\n+Subproject commit 6ecff95fdc3ee7ceed2b9b0cc1a3a64876860bce"}, {"sha": "d30da544a8afc5d78391dee270bdf40e74a215d3", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1 +1 @@\n-Subproject commit a8fc4c169fac43a5dc204d4fd56ddb1739f8c178\n+Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3"}, {"sha": "ad7de198561b3a12217ea2da76d796d9c7fc0ed3", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1 +1 @@\n-Subproject commit beea82b9230cd641dd1ca263cf31025ace4aebb5\n+Subproject commit ad7de198561b3a12217ea2da76d796d9c7fc0ed3"}, {"sha": "6b0de90d87dda15e323ef24cdf7ed873ac5cf4d3", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1 +1 @@\n-Subproject commit b060f732145f2fa16df84c74e511df08a3a47c5d\n+Subproject commit 6b0de90d87dda15e323ef24cdf7ed873ac5cf4d3"}, {"sha": "69ba0c9098be36f8cc589a6ab287c0cf34566c6d", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -89,6 +89,7 @@ extern char *yytext;\n %token TRAIT\n %token TYPE\n %token UNSAFE\n+%token DEFAULT\n %token USE\n %token WHILE\n %token CONTINUE\n@@ -534,6 +535,11 @@ maybe_unsafe\n | %empty { $$ = mk_none(); }\n ;\n \n+maybe_default_impl\n+:         IMPL { $$ = mk_none(); }\n+| DEFAULT IMPL { $$ = $1 }\n+;\n+\n trait_method\n : type_method { $$ = mk_node(\"Required\", 1, $1); }\n | method      { $$ = mk_node(\"Provided\", 1, $1); }\n@@ -588,27 +594,27 @@ impl_method\n // they are ambiguous with traits. We do the same here, regrettably,\n // by splitting ty into ty and ty_prim.\n item_impl\n-: maybe_unsafe IMPL generic_params ty_prim_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+: maybe_unsafe maybe_default_impl generic_params ty_prim_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImpl\", 6, $1, $3, $4, $5, $7, $8);\n+  $$ = mk_node(\"ItemImpl\", 6, $1, $3, $4, $5, $7, $8, $2);\n }\n-| maybe_unsafe IMPL generic_params '(' ty ')' maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_unsafe maybe_default_impl generic_params '(' ty ')' maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImpl\", 6, $1, $3, 5, $6, $9, $10);\n+  $$ = mk_node(\"ItemImpl\", 6, $1, $3, 5, $6, $9, $10, $2);\n }\n-| maybe_unsafe IMPL generic_params trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_unsafe maybe_default_impl generic_params trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImpl\", 6, $3, $4, $6, $7, $9, $10);\n+  $$ = mk_node(\"ItemImpl\", 6, $3, $4, $6, $7, $9, $10, $2);\n }\n-| maybe_unsafe IMPL generic_params '!' trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n+| maybe_unsafe maybe_default_impl generic_params '!' trait_ref FOR ty_sum maybe_where_clause '{' maybe_inner_attrs maybe_impl_items '}'\n {\n-  $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11);\n+  $$ = mk_node(\"ItemImplNeg\", 7, $1, $3, $5, $7, $8, $10, $11, $2);\n }\n-| maybe_unsafe IMPL generic_params trait_ref FOR DOTDOT '{' '}'\n+| maybe_unsafe maybe_default_impl generic_params trait_ref FOR DOTDOT '{' '}'\n {\n   $$ = mk_node(\"ItemImplDefault\", 3, $1, $3, $4);\n }\n-| maybe_unsafe IMPL generic_params '!' trait_ref FOR DOTDOT '{' '}'\n+| maybe_unsafe maybe_default_impl generic_params '!' trait_ref FOR DOTDOT '{' '}'\n {\n   $$ = mk_node(\"ItemImplDefaultNeg\", 3, $1, $3, $4);\n }\n@@ -1935,4 +1941,4 @@ brackets_delimited_token_trees\n                $2,\n                mk_node(\"TTTok\", 1, mk_atom(\"]\")));\n }\n-;\n+;\n\\ No newline at end of file"}, {"sha": "11bfb0dcf85f7aa92abd30524bb1e42e18d108c6", "filename": "src/jemalloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fjemalloc?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1 +1 @@\n-Subproject commit e058ca661692a8d01f8cf9d35939dfe3105ce968\n+Subproject commit 11bfb0dcf85f7aa92abd30524bb1e42e18d108c6"}, {"sha": "c34a802d1eb037b44c5252078c7270b5472e0f65", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1 +1 @@\n-Subproject commit 05a2d197356ef253dfd985166576619ac9b6947f\n+Subproject commit c34a802d1eb037b44c5252078c7270b5472e0f65"}, {"sha": "8dda297e897b2af3504736da7f0b3ba7d9946941", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1362,6 +1362,9 @@ impl<'a> LoweringContext<'a> {\n             }\n             ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n         }\n+\n+        // [1] `defaultness.has_value()` is necer called for an `impl`, always `true` in order to\n+        //     not cause an assertion failure inside the `lower_defaultness` function\n     }\n \n     fn lower_trait_item(&mut self, i: &TraitItem) -> hir::TraitItem {"}, {"sha": "3aeee1c1b981f4e861213579e7fa23a2f6a83641", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -933,7 +933,7 @@ impl_stable_hash_for!(enum hir::Item_ {\n     ItemUnion(variant_data, generics),\n     ItemTrait(unsafety, generics, bounds, item_refs),\n     ItemDefaultImpl(unsafety, trait_ref),\n-    ItemImpl(unsafety, impl_polarity, generics, trait_ref, ty, impl_item_refs)\n+    ItemImpl(unsafety, impl_polarity, impl_defaultness, generics, trait_ref, ty, impl_item_refs)\n });\n \n impl_stable_hash_for!(struct hir::TraitItemRef {"}, {"sha": "60171f1a4289a9afb51a97a8b04fe7894727ca00", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -195,6 +195,7 @@ pub trait CrateStore {\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId>;\n \n     // impl info\n+    fn impl_defaultness(&self, def: DefId) -> hir::Defaultness;\n     fn impl_parent(&self, impl_def_id: DefId) -> Option<DefId>;\n \n     // trait/impl-item info\n@@ -329,6 +330,7 @@ impl CrateStore for DummyCrateStore {\n     fn implementations_of_trait(&self, filter: Option<DefId>) -> Vec<DefId> { vec![] }\n \n     // impl info\n+    fn impl_defaultness(&self, def: DefId) -> hir::Defaultness { bug!(\"impl_defaultness\") }\n     fn impl_parent(&self, def: DefId) -> Option<DefId> { bug!(\"impl_parent\") }\n \n     // trait/impl-item info"}, {"sha": "7675b2d00ebb2132d43904e28c4009f5509aed34", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -33,7 +33,6 @@ use ty::subst::Subst;\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n use util::common::FN_OUTPUT_NAME;\n-use hir::{self};\n \n /// Depending on the stage of compilation, we want projection to be\n /// more or less conservative.\n@@ -924,28 +923,8 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n                         // being invoked).\n                         node_item.item.defaultness.has_value()\n                     } else {\n-                        let is_default = match selcx.tcx()\n-                                                    .map\n-                                                    .as_local_node_id(node_item.node.def_id()) {\n-                            Some(node_id) => {\n-                                let item = selcx.tcx().map.expect_item(node_id);\n-                                if let hir::ItemImpl(_, _, defaultness, ..) = item.node {\n-                                    defaultness.is_default()\n-                                } else {\n-                                    false\n-                                }\n-                            }\n-                            None => {\n-                                selcx.tcx()\n-                                     .global_tcx()\n-                                     .sess\n-                                     .cstore\n-                                     .impl_defaultness(node_item.node.def_id())\n-                                     .is_default()\n-                            }\n-                        };\n-\n-                        node_item.item.defaultness.is_default() || is_default\n+                        node_item.item.defaultness.is_default() ||\n+                        selcx.tcx().impl_is_default(node_item.node.def_id())\n                     };\n \n                     // Only reveal a specializable default if we're past type-checking"}, {"sha": "4aa7950de8f1ed1c85ff1dd172af533a4d4fcb6d", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -13,6 +13,7 @@ use ty::subst::{Subst, Substs};\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use ty::outlives::Component;\n use util::nodemap::FxHashSet;\n+use hir::{self};\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n \n@@ -504,6 +505,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         };\n         ty::Binder((trait_ref, sig.skip_binder().output()))\n     }\n+\n+    pub fn impl_is_default(self, node_item_def_id: DefId) -> bool {\n+        match self.hir.as_local_node_id(node_item_def_id) {\n+            Some(node_id) => {\n+                let item = self.hir.expect_item(node_id);\n+                if let hir::ItemImpl(_, _, defaultness, ..) = item.node {\n+                    defaultness.is_default()\n+                } else {\n+                    false\n+                }\n+            }\n+            None => {\n+                self.global_tcx()\n+                    .sess\n+                    .cstore\n+                    .impl_defaultness(node_item_def_id)\n+                    .is_default()\n+            }\n+        }\n+    }\n }\n \n pub enum TupleArgumentsFlag { Yes, No }"}, {"sha": "767114a37be4efbd90f6851894b703004629abde", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -90,7 +90,6 @@ provide! { <'tcx> tcx, def_id, cdata\n     associated_item => { cdata.get_associated_item(def_id.index) }\n     impl_trait_ref => { cdata.get_impl_trait(def_id.index, tcx) }\n     impl_polarity => { cdata.get_impl_polarity(def_id.index) }\n-    impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n     coerce_unsized_info => {\n         cdata.get_coerce_unsized_info(def_id.index).unwrap_or_else(|| {\n             bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n@@ -179,6 +178,12 @@ impl CrateStore for cstore::CStore {\n         result\n     }\n \n+    fn impl_defaultness(&self, def: DefId) -> hir::Defaultness\n+    {\n+        self.dep_graph.read(DepNode::MetaData(def));\n+        self.get_crate_data(def.krate).get_impl_defaultness(def.index)\n+    }\n+\n     fn impl_parent(&self, impl_def: DefId) -> Option<DefId> {\n         self.dep_graph.read(DepNode::MetaData(impl_def));\n         self.get_crate_data(impl_def.krate).get_parent_impl(impl_def.index)"}, {"sha": "5870903e7718fd0820cb1341d78d9ab321abb2d4", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -416,6 +416,7 @@ pub struct ImplData<'tcx> {\n \n impl_stable_hash_for!(struct ImplData<'tcx> {\n     polarity,\n+    defaultness,\n     parent_impl,\n     coerce_unsized_info,\n     trait_ref"}, {"sha": "507ac1efc2c668b3aa22c555a7de32e4223c05bd", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -429,7 +429,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                                 }\n                             }\n                             None => {\n-                                if let Some(NodeItem(item)) = self.tcx.map.get_if_local(id) {\n+                                if let Some(NodeItem(item)) = self.tcx.hir.get_if_local(id) {\n                                     if let hir::ItemImpl(_, _, _, _, _, ref ty, _) = item.node {\n                                         trait_id = self.lookup_def_id(ty.id);\n                                     }"}, {"sha": "a00d1ad0eae652aab8fe2911041f2ed0153cfb16", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -1142,21 +1142,7 @@ fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     if let Some(parent) = parent {\n         if parent.item.is_final() {\n-            let is_final = match tcx.map.as_local_node_id(parent.node.def_id()) {\n-                Some(node_id) => {\n-                    let item = tcx.map.expect_item(node_id);\n-                    if let hir::ItemImpl(_, _, defaultness, ..) = item.node {\n-                        defaultness.is_final()\n-                    } else {\n-                        true\n-                    }\n-                }\n-                None => {\n-                    tcx.global_tcx().sess.cstore.impl_defaultness(parent.node.def_id()).is_final()\n-                }\n-            };\n-\n-            if is_final {\n+            if !tcx.impl_is_default(parent.node.def_id()) {\n                 report_forbidden_specialization(tcx, impl_item, parent.node.def_id());\n             }\n         }"}, {"sha": "0203c3b6299fe26e90c44f7da9928d51f7d404d8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -309,7 +309,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         NodeItem(item) => {\n             match item.node {\n                 ItemFn(.., ref generics, _) |\n-                ItemImpl(_, _, ref generics, ..) |\n+                ItemImpl(_, _, _, ref generics, ..) |\n                 ItemTy(_, ref generics) |\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |\n@@ -825,7 +825,7 @@ fn generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         NodeItem(item) => {\n             match item.node {\n                 ItemFn(.., ref generics, _) |\n-                ItemImpl(_, _, ref generics, ..) => generics,\n+                ItemImpl(_, _, _, ref generics, ..) => generics,\n \n                 ItemTy(_, ref generics) |\n                 ItemEnum(_, ref generics) |\n@@ -1236,7 +1236,7 @@ fn predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         NodeItem(item) => {\n             match item.node {\n                 ItemFn(.., ref generics, _) |\n-                ItemImpl(_, _, ref generics, ..) |\n+                ItemImpl(_, _, _, ref generics, ..) |\n                 ItemTy(_, ref generics) |\n                 ItemEnum(_, ref generics) |\n                 ItemStruct(_, ref generics) |"}, {"sha": "2c10fff03dbe858b9c0b7d83f6ebcd683d334bb1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -4918,6 +4918,14 @@ impl<'a> Parser<'a> {\n                                           allowed to have generics\");\n             }\n \n+            match defaultness {\n+                ast::Defaultness::Default => {\n+                    self.span_err(impl_span, \"`default impl` is not allowed for \\\n+                                               default trait implementations\");\n+                }\n+                _ => {}\n+            }\n+\n             self.expect(&token::OpenDelim(token::Brace))?;\n             self.expect(&token::CloseDelim(token::Brace))?;\n             Ok((keywords::Invalid.ident(),\n@@ -5760,13 +5768,13 @@ impl<'a> Parser<'a> {\n         }\n         if (self.check_keyword(keywords::Unsafe) &&\n             self.look_ahead(1, |t| t.is_keyword(keywords::Impl))) ||\n-           (self.check_keyword(keywords::Default) &&\n-            self.look_ahead(1, |t| t.is_keyword(keywords::Unsafe)) &&\n+           (self.check_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1, |t| t.is_keyword(keywords::Default)) &&\n             self.look_ahead(2, |t| t.is_keyword(keywords::Impl)))\n         {\n             // IMPL ITEM\n-            let defaultness = self.parse_defaultness()?;\n             self.expect_keyword(keywords::Unsafe)?;\n+            let defaultness = self.parse_defaultness()?;\n             self.expect_keyword(keywords::Impl)?;\n             let (ident,\n                  item_,"}, {"sha": "da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92", "filename": "src/rt/hoedown", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fhoedown?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -0,0 +1 @@\n+Subproject commit da282f1bb7277b4d30fa1599ee29ad8eb4dd2a92"}, {"sha": "c1746d765dd9f5f86239c882e7a1bf6fde8b7f7b", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-no-default-trait-implementations.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default-trait-implementations.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+#![feature(optin_builtin_traits)]\n+\n+trait Foo {}\n+\n+default impl Foo for .. {}\n+//~^ ERROR `default impl` is not allowed for default trait implementations\n+\n+fn main() {}"}, {"sha": "9376d0db2df63efe0ebb70f41c102a20dc6bb632", "filename": "src/test/run-pass/specialization/defaultimpl/specialization-basics-unsafe.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715811d0be05dcdc55b44f97d9fd2cd1eb7eee05/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization%2Fdefaultimpl%2Fspecialization-basics-unsafe.rs?ref=715811d0be05dcdc55b44f97d9fd2cd1eb7eee05", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Tests a variety of basic specialization scenarios and method\n+// dispatch for them.\n+\n+unsafe trait Foo {\n+    fn foo(&self) -> &'static str;\n+}\n+\n+unsafe default impl<T> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+unsafe default impl<T: Clone> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n+\n+unsafe default impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n+    fn foo(&self) -> &'static str {\n+        \"generic pair\"\n+    }\n+}\n+\n+unsafe default impl<T: Clone> Foo for (T, T) {\n+    fn foo(&self) -> &'static str {\n+        \"generic uniform pair\"\n+    }\n+}\n+\n+unsafe default impl Foo for (u8, u32) {\n+    fn foo(&self) -> &'static str {\n+        \"(u8, u32)\"\n+    }\n+}\n+\n+unsafe default impl Foo for (u8, u8) {\n+    fn foo(&self) -> &'static str {\n+        \"(u8, u8)\"\n+    }\n+}\n+\n+unsafe default impl<T: Clone> Foo for Vec<T> {\n+    fn foo(&self) -> &'static str {\n+        \"generic Vec\"\n+    }\n+}\n+\n+unsafe impl Foo for Vec<i32> {\n+    fn foo(&self) -> &'static str {\n+        \"Vec<i32>\"\n+    }\n+}\n+\n+unsafe impl Foo for String {\n+    fn foo(&self) -> &'static str {\n+        \"String\"\n+    }\n+}\n+\n+unsafe impl Foo for i32 {\n+    fn foo(&self) -> &'static str {\n+        \"i32\"\n+    }\n+}\n+\n+struct NotClone;\n+\n+unsafe trait MyMarker {}\n+unsafe default impl<T: Clone + MyMarker> Foo for T {\n+    fn foo(&self) -> &'static str {\n+        \"generic Clone + MyMarker\"\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct MarkedAndClone;\n+unsafe impl MyMarker for MarkedAndClone {}\n+\n+fn  main() {\n+    assert!(NotClone.foo() == \"generic\");\n+    assert!(0u8.foo() == \"generic Clone\");\n+    assert!(vec![NotClone].foo() == \"generic\");\n+    assert!(vec![0u8].foo() == \"generic Vec\");\n+    assert!(vec![0i32].foo() == \"Vec<i32>\");\n+    assert!(0i32.foo() == \"i32\");\n+    assert!(String::new().foo() == \"String\");\n+    assert!(((), 0).foo() == \"generic pair\");\n+    assert!(((), ()).foo() == \"generic uniform pair\");\n+    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n+    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n+    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n+}"}]}