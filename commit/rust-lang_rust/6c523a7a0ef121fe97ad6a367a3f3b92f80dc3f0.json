{"sha": "6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNTIzYTdhMGVmMTIxZmU5N2FkNmEzNjdhM2YzYjkyZjgwZGMzZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-28T00:00:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-28T00:00:43Z"}, "message": "Auto merge of #80422 - RalfJung:weak-no-unsized-raw, r=Mark-Simulacrum\n\nde-stabilize unsized raw ptr methods for Weak\n\n`@Mark-Simulacrum` this is the patch re: https://github.com/rust-lang/rust/pull/80407.\n\nI couldn't figure out the branch it needs to go on though, stable is still the old stable but beta already the new beta...?", "tree": {"sha": "95a69333090d402f2544306364e7bea07cd15a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a69333090d402f2544306364e7bea07cd15a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "html_url": "https://github.com/rust-lang/rust/commit/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257becbfe4987d1f7b12af5a8dd5ed96697cd2e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/257becbfe4987d1f7b12af5a8dd5ed96697cd2e8", "html_url": "https://github.com/rust-lang/rust/commit/257becbfe4987d1f7b12af5a8dd5ed96697cd2e8"}, {"sha": "8e0b7f988ee4e12d79c03ed53b3b59fee534330e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0b7f988ee4e12d79c03ed53b3b59fee534330e", "html_url": "https://github.com/rust-lang/rust/commit/8e0b7f988ee4e12d79c03ed53b3b59fee534330e"}], "stats": {"total": 56, "additions": 6, "deletions": 50}, "files": [{"sha": "73d12f0a5f45dd437791c12822f5bccca3480e6f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "patch": "@@ -1749,7 +1749,7 @@ struct WeakInner<'a> {\n     strong: &'a Cell<usize>,\n }\n \n-impl<T: ?Sized> Weak<T> {\n+impl<T> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1882,7 +1882,9 @@ impl<T: ?Sized> Weak<T> {\n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n         Weak { ptr: unsafe { NonNull::new_unchecked(ptr) } }\n     }\n+}\n \n+impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\n     /// dropping of the inner value if successful.\n     ///"}, {"sha": "2d183a8c88c6438144c73c72f4ea82d6d26804be", "filename": "library/alloc/src/rc/tests.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Frc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc%2Ftests.rs?ref=6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "patch": "@@ -208,30 +208,6 @@ fn into_from_weak_raw() {\n     }\n }\n \n-#[test]\n-fn test_into_from_weak_raw_unsized() {\n-    use std::fmt::Display;\n-    use std::string::ToString;\n-\n-    let arc: Rc<str> = Rc::from(\"foo\");\n-    let weak: Weak<str> = Rc::downgrade(&arc);\n-\n-    let ptr = Weak::into_raw(weak.clone());\n-    let weak2 = unsafe { Weak::from_raw(ptr) };\n-\n-    assert_eq!(unsafe { &*ptr }, \"foo\");\n-    assert!(weak.ptr_eq(&weak2));\n-\n-    let arc: Rc<dyn Display> = Rc::new(123);\n-    let weak: Weak<dyn Display> = Rc::downgrade(&arc);\n-\n-    let ptr = Weak::into_raw(weak.clone());\n-    let weak2 = unsafe { Weak::from_raw(ptr) };\n-\n-    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n-    assert!(weak.ptr_eq(&weak2));\n-}\n-\n #[test]\n fn get_mut() {\n     let mut x = Rc::new(3);"}, {"sha": "53ba9c283ae232f55e18c38cf7ab4f2558071f62", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "patch": "@@ -1535,7 +1535,7 @@ struct WeakInner<'a> {\n     strong: &'a atomic::AtomicUsize,\n }\n \n-impl<T: ?Sized> Weak<T> {\n+impl<T> Weak<T> {\n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n     /// The pointer is valid only if there are some strong references. The pointer may be dangling,\n@@ -1668,7 +1668,9 @@ impl<T: ?Sized> Weak<T> {\n         // SAFETY: we now have recovered the original Weak pointer, so can create the Weak.\n         unsafe { Weak { ptr: NonNull::new_unchecked(ptr) } }\n     }\n+}\n \n+impl<T: ?Sized> Weak<T> {\n     /// Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\n     /// dropping of the inner value if successful.\n     ///"}, {"sha": "e8e1e66da5ed4f7c1bf00be29bc193862fcb9562", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=6c523a7a0ef121fe97ad6a367a3f3b92f80dc3f0", "patch": "@@ -158,30 +158,6 @@ fn into_from_weak_raw() {\n     }\n }\n \n-#[test]\n-fn test_into_from_weak_raw_unsized() {\n-    use std::fmt::Display;\n-    use std::string::ToString;\n-\n-    let arc: Arc<str> = Arc::from(\"foo\");\n-    let weak: Weak<str> = Arc::downgrade(&arc);\n-\n-    let ptr = Weak::into_raw(weak.clone());\n-    let weak2 = unsafe { Weak::from_raw(ptr) };\n-\n-    assert_eq!(unsafe { &*ptr }, \"foo\");\n-    assert!(weak.ptr_eq(&weak2));\n-\n-    let arc: Arc<dyn Display> = Arc::new(123);\n-    let weak: Weak<dyn Display> = Arc::downgrade(&arc);\n-\n-    let ptr = Weak::into_raw(weak.clone());\n-    let weak2 = unsafe { Weak::from_raw(ptr) };\n-\n-    assert_eq!(unsafe { &*ptr }.to_string(), \"123\");\n-    assert!(weak.ptr_eq(&weak2));\n-}\n-\n #[test]\n fn test_cowarc_clone_make_mut() {\n     let mut cow0 = Arc::new(75);"}]}