{"sha": "a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMjQxM2I0NmFhNTdlZDIyZTU5YTljMGU0ZDU4MWQxZWFiZmUyYjI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-05-06T09:54:21Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-05-06T22:52:27Z"}, "message": "Revise doc-comments for graphviz to avoid generating files from rustdoc runs.\n\nFix #13965.\n\nThere is a dance here between the `main` that actually runs versus the\n`main` that is printed in the output documentation.  We don't run the\nlatter `main`, but we do at least compile (and thus type-check) it.\nIt is still the responsibility of the documenter to ensure that the\nsignatures of `fn render` are kept in sync across the blocks.", "tree": {"sha": "0096a514974580e8f8970e8dd50a97b9d7a71300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0096a514974580e8f8970e8dd50a97b9d7a71300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2", "html_url": "https://github.com/rust-lang/rust/commit/a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0605f05e42dfe4476500b4341a5ba78398b02c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0605f05e42dfe4476500b4341a5ba78398b02c0f", "html_url": "https://github.com/rust-lang/rust/commit/0605f05e42dfe4476500b4341a5ba78398b02c0f"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "f2d4d84f601f5142889c6254d097a6d6e8c007ce", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=a22413b46aa57ed22e59a9c0e4d581d1eabfe2b2", "patch": "@@ -54,11 +54,9 @@ type Nd = int;\n type Ed = (int,int);\n struct Edges(Vec<Ed>);\n \n-pub fn main() {\n-    use std::io::File;\n+pub fn render_to<W:Writer>(output: &mut W) {\n     let edges = Edges(vec!((0,1), (0,2), (1,3), (2,3), (3,4), (4,4)));\n-    let mut f = File::create(&Path::new(\"example1.dot\"));\n-    dot::render(&edges, &mut f).unwrap()\n+    dot::render(&edges, output).unwrap()\n }\n \n impl<'a> dot::Labeller<'a, Nd, Ed> for Edges {\n@@ -91,6 +89,17 @@ impl<'a> dot::GraphWalk<'a, Nd, Ed> for Edges {\n \n     fn target(&self, e: &Ed) -> Nd { let &(_,t) = e; t }\n }\n+\n+# pub fn main() { use std::io::MemWriter; render_to(&mut MemWriter::new()) }\n+```\n+\n+```no_run\n+# pub fn render_to<W:Writer>(output: &mut W) { unimplemented!() }\n+pub fn main() {\n+    use std::io::File;\n+    let mut f = File::create(&Path::new(\"example1.dot\"));\n+    render_to(&mut f)\n+}\n ```\n \n Output from first example (in `example1.dot`):\n@@ -140,19 +149,17 @@ entity `&sube`).\n ```rust\n use dot = graphviz;\n use std::str;\n-use std::io::File;\n \n type Nd = uint;\n type Ed<'a> = &'a (uint, uint);\n struct Graph { nodes: Vec<&'static str>, edges: Vec<(uint,uint)> }\n \n-pub fn main() {\n+pub fn render_to<W:Writer>(output: &mut W) {\n     let nodes = vec!(\"{x,y}\",\"{x}\",\"{y}\",\"{}\");\n     let edges = vec!((0,1), (0,2), (1,3), (2,3));\n     let graph = Graph { nodes: nodes, edges: edges };\n \n-    let mut f = File::create(&Path::new(\"example2.dot\"));\n-    dot::render(&graph, &mut f).unwrap()\n+    dot::render(&graph, output).unwrap()\n }\n \n impl<'a> dot::Labeller<'a, Nd, Ed<'a>> for Graph {\n@@ -174,6 +181,17 @@ impl<'a> dot::GraphWalk<'a, Nd, Ed<'a>> for Graph {\n     fn source(&self, e: &Ed) -> Nd { let & &(s,_) = e; s }\n     fn target(&self, e: &Ed) -> Nd { let & &(_,t) = e; t }\n }\n+\n+# pub fn main() { use std::io::MemWriter; render_to(&mut MemWriter::new()) }\n+```\n+\n+```no_run\n+# pub fn render_to<W:Writer>(output: &mut W) { unimplemented!() }\n+pub fn main() {\n+    use std::io::File;\n+    let mut f = File::create(&Path::new(\"example2.dot\"));\n+    render_to(&mut f)\n+}\n ```\n \n The third example is similar to the second, except now each node and\n@@ -187,19 +205,17 @@ Hasse-diagram for the subsets of the set `{x, y}`.\n ```rust\n use dot = graphviz;\n use std::str;\n-use std::io::File;\n \n type Nd<'a> = (uint, &'a str);\n type Ed<'a> = (Nd<'a>, Nd<'a>);\n struct Graph { nodes: Vec<&'static str>, edges: Vec<(uint,uint)> }\n \n-pub fn main() {\n+pub fn render_to<W:Writer>(output: &mut W) {\n     let nodes = vec!(\"{x,y}\",\"{x}\",\"{y}\",\"{}\");\n     let edges = vec!((0,1), (0,2), (1,3), (2,3));\n     let graph = Graph { nodes: nodes, edges: edges };\n \n-    let mut f = File::create(&Path::new(\"example3.dot\"));\n-    dot::render(&graph, &mut f).unwrap()\n+    dot::render(&graph, output).unwrap()\n }\n \n impl<'a> dot::Labeller<'a, Nd<'a>, Ed<'a>> for Graph {\n@@ -229,6 +245,17 @@ impl<'a> dot::GraphWalk<'a, Nd<'a>, Ed<'a>> for Graph {\n     fn source(&self, e: &Ed<'a>) -> Nd<'a> { let &(s,_) = e; s }\n     fn target(&self, e: &Ed<'a>) -> Nd<'a> { let &(_,t) = e; t }\n }\n+\n+# pub fn main() { use std::io::MemWriter; render_to(&mut MemWriter::new()) }\n+```\n+\n+```no_run\n+# pub fn render_to<W:Writer>(output: &mut W) { unimplemented!() }\n+pub fn main() {\n+    use std::io::File;\n+    let mut f = File::create(&Path::new(\"example3.dot\"));\n+    render_to(&mut f)\n+}\n ```\n \n # References"}]}