{"sha": "1139ee32aa803401198c02d5541accbf3fddfc94", "node_id": "C_kwDOAAsO6NoAKDExMzllZTMyYWE4MDM0MDExOThjMDJkNTU0MWFjY2JmM2ZkZGZjOTQ", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2021-10-02T10:16:08Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2021-10-02T10:16:08Z"}, "message": "Use bitand when checking for signed integer division overflow\n\nFor `self == Self::MIN && rhs == -1`, LLVM does not realize that this is the\nsame check made by `self / rhs`, so the code generated may have some unnecessary\nduplication. For `(self == Self::MIN) & (rhs == -1)`, LLVM realizes it is the\nsame check.", "tree": {"sha": "d9695e1a02a98ab580bc9a9f8794ebc2ecd33cee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9695e1a02a98ab580bc9a9f8794ebc2ecd33cee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1139ee32aa803401198c02d5541accbf3fddfc94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1139ee32aa803401198c02d5541accbf3fddfc94", "html_url": "https://github.com/rust-lang/rust/commit/1139ee32aa803401198c02d5541accbf3fddfc94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1139ee32aa803401198c02d5541accbf3fddfc94/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1211081239be62a5d0bb3bbcb29a9f14621c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1211081239be62a5d0bb3bbcb29a9f14621c81", "html_url": "https://github.com/rust-lang/rust/commit/6e1211081239be62a5d0bb3bbcb29a9f14621c81"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "526e0c371882cae255dd329d1eae9751e3330dc6", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1139ee32aa803401198c02d5541accbf3fddfc94/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1139ee32aa803401198c02d5541accbf3fddfc94/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=1139ee32aa803401198c02d5541accbf3fddfc94", "patch": "@@ -543,7 +543,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -569,7 +570,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_div_euclid(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 Some(self.div_euclid(rhs))\n@@ -595,7 +597,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -621,7 +624,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_rem_euclid(self, rhs: Self) -> Option<Self> {\n-            if unlikely!(rhs == 0 || (self == Self::MIN && rhs == -1)) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n                 None\n             } else {\n                 Some(self.rem_euclid(rhs))\n@@ -1466,7 +1470,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (self, true)\n             } else {\n                 (self / rhs, false)\n@@ -1496,7 +1501,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_div_euclid(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (self, true)\n             } else {\n                 (self.div_euclid(rhs), false)\n@@ -1527,7 +1533,8 @@ macro_rules! int_impl {\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         pub const fn overflowing_rem(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (0, true)\n             } else {\n                 (self % rhs, false)\n@@ -1558,7 +1565,8 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn overflowing_rem_euclid(self, rhs: Self) -> (Self, bool) {\n-            if unlikely!(self == Self::MIN && rhs == -1) {\n+            // Using `&` helps LLVM see that it is the same check made in division.\n+            if unlikely!((self == Self::MIN) & (rhs == -1)) {\n                 (0, true)\n             } else {\n                 (self.rem_euclid(rhs), false)"}]}