{"sha": "63f6a79bf87cd5960c069bb45c88646519d096f8", "node_id": "C_kwDOAAsO6NoAKDYzZjZhNzliZjg3Y2Q1OTYwYzA2OWJiNDVjODg2NDY1MTlkMDk2Zjg", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-08T20:51:40Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-08T20:51:40Z"}, "message": "Don't lint various match lints when expanded by a proc-macro", "tree": {"sha": "b178330610fe4b5844e7db0d253e881cf5f4822f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b178330610fe4b5844e7db0d253e881cf5f4822f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f6a79bf87cd5960c069bb45c88646519d096f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f6a79bf87cd5960c069bb45c88646519d096f8", "html_url": "https://github.com/rust-lang/rust/commit/63f6a79bf87cd5960c069bb45c88646519d096f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f6a79bf87cd5960c069bb45c88646519d096f8/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a63308be0a66fe34aa1ccefef76fa6a0bc50d2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63308be0a66fe34aa1ccefef76fa6a0bc50d2a3", "html_url": "https://github.com/rust-lang/rust/commit/a63308be0a66fe34aa1ccefef76fa6a0bc50d2a3"}], "stats": {"total": 85, "additions": 77, "deletions": 8}, "files": [{"sha": "854cf06ed8198a94fc9334320e443a85dbc95ee7", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63f6a79bf87cd5960c069bb45c88646519d096f8/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f6a79bf87cd5960c069bb45c88646519d096f8/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=63f6a79bf87cd5960c069bb45c88646519d096f8", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::source::{snippet_opt, walk_span_to_context};\n+use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n@@ -653,6 +653,9 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         }\n \n         if let ExprKind::Match(ex, arms, source) = expr.kind {\n+            if !span_starts_with(cx, expr.span, \"match\") {\n+                return;\n+            }\n             if !contains_cfg_arm(cx, expr, ex, arms) {\n                 if source == MatchSource::Normal {\n                     if !(meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO)"}, {"sha": "beed73268037e860833ef83b6e106b9b4459a73f", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63f6a79bf87cd5960c069bb45c88646519d096f8/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f6a79bf87cd5960c069bb45c88646519d096f8/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=63f6a79bf87cd5960c069bb45c88646519d096f8", "patch": "@@ -7,9 +7,28 @@ use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_span::hygiene;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::{BytePos, Pos, Span, SyntaxContext};\n use std::borrow::Cow;\n \n+/// Checks if the span starts with the given text. This will return false if the span crosses\n+/// multiple files or if source is not available.\n+///\n+/// This is used to check for proc macros giving unhelpful spans to things.\n+pub fn span_starts_with<T: LintContext>(cx: &T, span: Span, text: &str) -> bool {\n+    fn helper(sm: &SourceMap, span: Span, text: &str) -> bool {\n+        let pos = sm.lookup_byte_offset(span.lo());\n+        let Some(ref src) = pos.sf.src else {\n+            return false;\n+        };\n+        let end = span.hi() - pos.sf.start_pos;\n+        src.get(pos.pos.0 as usize..end.0 as usize)\n+            // Expression spans can include wrapping parenthesis. Remove them first.\n+            .map_or(false, |s| s.trim_start_matches('(').starts_with(text))\n+    }\n+    helper(cx.sess().source_map(), span, text)\n+}\n+\n /// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n /// Also takes an `Option<String>` which can be put inside the braces.\n pub fn expr_block<'a, T: LintContext>("}, {"sha": "8ea631f2bbd420fd20795fde30cf81e1bd939d80", "filename": "tests/ui/auxiliary/proc_macro_with_span.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/63f6a79bf87cd5960c069bb45c88646519d096f8/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f6a79bf87cd5960c069bb45c88646519d096f8/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_with_span.rs?ref=63f6a79bf87cd5960c069bb45c88646519d096f8", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: --emit=link\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{token_stream::IntoIter, Group, Span, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn with_span(input: TokenStream) -> TokenStream {\n+    let mut iter = input.into_iter();\n+    let span = iter.next().unwrap().span();\n+    let mut res = TokenStream::new();\n+    write_with_span(span, iter, &mut res);\n+    res\n+}\n+\n+fn write_with_span(s: Span, input: IntoIter, out: &mut TokenStream) {\n+    for mut tt in input {\n+        if let TokenTree::Group(g) = tt {\n+            let mut stream = TokenStream::new();\n+            write_with_span(s, g.stream().into_iter(), &mut stream);\n+            let mut group = Group::new(g.delimiter(), stream);\n+            group.set_span(s);\n+            out.extend([TokenTree::Group(group)]);\n+        } else {\n+            tt.set_span(s);\n+            out.extend([tt]);\n+        }\n+    }\n+}"}, {"sha": "82387f3d80b7780a0781dd116dfbbd341d47a3b8", "filename": "tests/ui/single_match_else.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63f6a79bf87cd5960c069bb45c88646519d096f8/tests%2Fui%2Fsingle_match_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f6a79bf87cd5960c069bb45c88646519d096f8/tests%2Fui%2Fsingle_match_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.rs?ref=63f6a79bf87cd5960c069bb45c88646519d096f8", "patch": "@@ -1,7 +1,12 @@\n+// aux-build: proc_macro_with_span.rs\n+\n #![warn(clippy::single_match_else)]\n #![allow(clippy::needless_return)]\n #![allow(clippy::no_effect)]\n \n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n enum ExprNode {\n     ExprAddrOf,\n     Butterflies,\n@@ -11,13 +16,22 @@ enum ExprNode {\n static NODE: ExprNode = ExprNode::Unicorns;\n \n fn unwrap_addr() -> Option<&'static ExprNode> {\n-    match ExprNode::Butterflies {\n+    let _ = match ExprNode::Butterflies {\n         ExprNode::ExprAddrOf => Some(&NODE),\n         _ => {\n             let x = 5;\n             None\n         },\n-    }\n+    };\n+\n+    // Don't lint\n+    with_span!(span match ExprNode::Butterflies {\n+        ExprNode::ExprAddrOf => Some(&NODE),\n+        _ => {\n+            let x = 5;\n+            None\n+        },\n+    })\n }\n \n macro_rules! unwrap_addr {"}, {"sha": "7756c6f204e67eb016ecf792a3d6cfb7b70efc66", "filename": "tests/ui/single_match_else.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63f6a79bf87cd5960c069bb45c88646519d096f8/tests%2Fui%2Fsingle_match_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63f6a79bf87cd5960c069bb45c88646519d096f8/tests%2Fui%2Fsingle_match_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match_else.stderr?ref=63f6a79bf87cd5960c069bb45c88646519d096f8", "patch": "@@ -1,22 +1,23 @@\n error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/single_match_else.rs:14:5\n+  --> $DIR/single_match_else.rs:19:13\n    |\n-LL | /     match ExprNode::Butterflies {\n+LL |       let _ = match ExprNode::Butterflies {\n+   |  _____________^\n LL | |         ExprNode::ExprAddrOf => Some(&NODE),\n LL | |         _ => {\n LL | |             let x = 5;\n LL | |             None\n LL | |         },\n-LL | |     }\n+LL | |     };\n    | |_____^\n    |\n    = note: `-D clippy::single-match-else` implied by `-D warnings`\n help: try this\n    |\n-LL ~     if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else {\n+LL ~     let _ = if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else {\n LL +         let x = 5;\n LL +         None\n-LL +     }\n+LL ~     };\n    |\n \n error: aborting due to previous error"}]}