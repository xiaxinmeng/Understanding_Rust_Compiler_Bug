{"sha": "753dac16abd16411e1833b35ba82cabac6997cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1M2RhYzE2YWJkMTY0MTFlMTgzM2IzNWJhODJjYWJhYzY5OTdjZWM=", "commit": {"author": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-08-31T21:44:13Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-08-31T21:44:13Z"}, "message": "Stabilize `UnsafeCell::raw_get()`", "tree": {"sha": "b24bf27a97d0a7b9559f16e35a6f11106e484725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b24bf27a97d0a7b9559f16e35a6f11106e484725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/753dac16abd16411e1833b35ba82cabac6997cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/753dac16abd16411e1833b35ba82cabac6997cec", "html_url": "https://github.com/rust-lang/rust/commit/753dac16abd16411e1833b35ba82cabac6997cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/753dac16abd16411e1833b35ba82cabac6997cec/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a84708edca7c275cb99ad080317fbc7637516d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a84708edca7c275cb99ad080317fbc7637516d8", "html_url": "https://github.com/rust-lang/rust/commit/0a84708edca7c275cb99ad080317fbc7637516d8"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "2adf6a549e6417b94349752487b39f76257fa727", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/753dac16abd16411e1833b35ba82cabac6997cec/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753dac16abd16411e1833b35ba82cabac6997cec/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=753dac16abd16411e1833b35ba82cabac6997cec", "patch": "@@ -1921,7 +1921,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     }\n \n     /// Gets a mutable pointer to the wrapped value.\n-    /// The difference to [`get`] is that this function accepts a raw pointer,\n+    /// The difference from [`get`] is that this function accepts a raw pointer,\n     /// which is useful to avoid the creation of temporary references.\n     ///\n     /// The result can be cast to a pointer of any kind.\n@@ -1937,7 +1937,6 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// calling `get` would require creating a reference to uninitialized data:\n     ///\n     /// ```\n-    /// #![feature(unsafe_cell_raw_get)]\n     /// use std::cell::UnsafeCell;\n     /// use std::mem::MaybeUninit;\n     ///\n@@ -1948,7 +1947,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// assert_eq!(uc.into_inner(), 5);\n     /// ```\n     #[inline(always)]\n-    #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n+    #[stable(feature = \"unsafe_cell_raw_get\", since = \"1.56.0\")]\n     pub const fn raw_get(this: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n         // #[repr(transparent)]. This exploits libstd's special status, there is"}, {"sha": "43c7ec5fad33a70a9cfdd13b797835d00eaee98f", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/753dac16abd16411e1833b35ba82cabac6997cec/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/753dac16abd16411e1833b35ba82cabac6997cec/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=753dac16abd16411e1833b35ba82cabac6997cec", "patch": "@@ -331,7 +331,6 @@\n #![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(unboxed_closures)]\n-#![feature(unsafe_cell_raw_get)]\n #![feature(unwrap_infallible)]\n #![feature(vec_into_raw_parts)]\n #![feature(vec_spare_capacity)]"}]}