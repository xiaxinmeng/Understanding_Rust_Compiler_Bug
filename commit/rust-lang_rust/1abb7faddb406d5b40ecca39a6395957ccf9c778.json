{"sha": "1abb7faddb406d5b40ecca39a6395957ccf9c778", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYmI3ZmFkZGI0MDZkNWI0MGVjY2EzOWE2Mzk1OTU3Y2NmOWM3Nzg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-04-13T20:51:56Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:28Z"}, "message": "Generate links for modules as well", "tree": {"sha": "3768678c62c4afa5be4145a37a4aff8ec5cfaa7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3768678c62c4afa5be4145a37a4aff8ec5cfaa7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1abb7faddb406d5b40ecca39a6395957ccf9c778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1abb7faddb406d5b40ecca39a6395957ccf9c778", "html_url": "https://github.com/rust-lang/rust/commit/1abb7faddb406d5b40ecca39a6395957ccf9c778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1abb7faddb406d5b40ecca39a6395957ccf9c778/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71763a52ff221fe8f32b217e92d49b903f6826bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/71763a52ff221fe8f32b217e92d49b903f6826bb", "html_url": "https://github.com/rust-lang/rust/commit/71763a52ff221fe8f32b217e92d49b903f6826bb"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "6100f45e998e1096fbad610d72130259d2200d2d", "filename": "src/librustdoc/html/render/span_map.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1abb7faddb406d5b40ecca39a6395957ccf9c778/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1abb7faddb406d5b40ecca39a6395957ccf9c778/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fspan_map.rs?ref=1abb7faddb406d5b40ecca39a6395957ccf9c778", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{ExprKind, GenericParam, GenericParamKind, HirId};\n+use rustc_hir::{ExprKind, GenericParam, GenericParamKind, HirId, Mod, Node};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n@@ -20,14 +20,14 @@ crate fn collect_spans_and_sources(\n     krate: clean::Crate,\n     src_root: &std::path::Path,\n     include_sources: bool,\n-    _generate_link_to_definition: bool,\n+    generate_link_to_definition: bool,\n ) -> (clean::Crate, FxHashMap<std::path::PathBuf, String>, FxHashMap<(u32, u32), LinkFromSrc>) {\n     let mut visitor = SpanMapVisitor { tcx, matches: FxHashMap::default() };\n \n     if include_sources {\n-        // if generate_link_to_definition {\n-        intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n-        // }\n+        if generate_link_to_definition {\n+            intravisit::walk_crate(&mut visitor, tcx.hir().krate());\n+        }\n         let (krate, sources) = sources::collect_local_sources(tcx, src_root, krate);\n         (krate, sources, visitor.matches)\n     } else {\n@@ -94,6 +94,25 @@ impl Visitor<'tcx> for SpanMapVisitor<'tcx> {\n         intravisit::walk_path(self, path);\n     }\n \n+    fn visit_mod(&mut self, m: &'tcx Mod<'tcx>, span: Span, id: HirId) {\n+        // To make the difference between \"mod foo {}\" and \"mod foo;\". In case we \"import\" another\n+        // file, we want to link to it. Otherwise no need to create a link.\n+        if !span.overlaps(m.inner) {\n+            // Now that we confirmed it's a file import, we want to get the span for the module\n+            // name only and not all the \"mod foo;\".\n+            if let Some(node) = self.tcx.hir().find(id) {\n+                match node {\n+                    Node::Item(item) => {\n+                        self.matches\n+                            .insert(span_to_tuple(item.ident.span), LinkFromSrc::Local(m.inner));\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        intravisit::walk_mod(self, m, id);\n+    }\n+\n     fn visit_expr(&mut self, expr: &'tcx rustc_hir::Expr<'tcx>) {\n         match expr.kind {\n             ExprKind::MethodCall(segment, method_span, _, _) => {"}, {"sha": "5caef29fede378a153ba11c108b70b7c0a231553", "filename": "src/test/rustdoc/check-source-code-urls-to-def.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1abb7faddb406d5b40ecca39a6395957ccf9c778/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1abb7faddb406d5b40ecca39a6395957ccf9c778/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcheck-source-code-urls-to-def.rs?ref=1abb7faddb406d5b40ecca39a6395957ccf9c778", "patch": "@@ -2,11 +2,12 @@\n \n #![crate_name = \"foo\"]\n \n+// @has 'src/foo/check-source-code-urls-to-def.rs.html'\n+\n+// @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#1-17\"]' 'bar'\n #[path = \"auxiliary/source-code-bar.rs\"]\n pub mod bar;\n \n-// @has 'src/foo/check-source-code-urls-to-def.rs.html'\n-\n // @count - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#5-7\"]' 4\n use bar::Bar;\n // @has - '//a[@href=\"../../src/foo/auxiliary/source-code-bar.rs.html#13-17\"]' 'self'\n@@ -22,13 +23,13 @@ impl Foo {\n fn babar() {}\n \n // @has - '//a[@href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\"]' 'String'\n-// @count - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#16\"]' 5\n+// @count - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#17\"]' 5\n pub fn foo(a: u32, b: &str, c: String, d: Foo, e: bar::Bar) {\n     let x = 12;\n     let y: Foo = Foo;\n     let z: Bar = bar::Bar { field: Foo };\n     babar();\n-    // @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#19\"]' 'hello'\n+    // @has - '//a[@href=\"../../src/foo/check-source-code-urls-to-def.rs.html#20\"]' 'hello'\n     y.hello();\n }\n "}]}