{"sha": "6583025c938196fb0c97aff70c5bce7e0dad24b7", "node_id": "C_kwDOAAsO6NoAKDY1ODMwMjVjOTM4MTk2ZmIwYzk3YWZmNzBjNWJjZTdlMGRhZDI0Yjc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-23T11:14:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-23T11:14:28Z"}, "message": "Rollup merge of #111853 - compiler-errors:opaque-check, r=oli-obk\n\nCheck opaques for mismatch during writeback\n\nRevive #111705.\n\nI realized that we don't need to put any substs in the writeback results since all of the hidden types have already been remapped. See the comment in `compiler/rustc_middle/src/ty/typeck_results.rs`, which should make that clear for other explorers of the codebase.\n\nAdditionally, we need to do some diagnostic stashing because the diagnostics we produce during HIR typeck is very poor and we should prefer the diagnostic that comes from MIR, if we have one.\n\nr? `@oli-obk`", "tree": {"sha": "1b74e513aa709335b75b2d911fc13d9526ac2cde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b74e513aa709335b75b2d911fc13d9526ac2cde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6583025c938196fb0c97aff70c5bce7e0dad24b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbKAUCRBK7hj4Ov3rIwAAaz4IAC14xsnb9R94keyvb5EXG6G1\nIdED2QoVcJQMpXR8kDE+yDsoJZ+rykjHROy2CwQH42zh//p9cUbup+1IbzXyUI19\nEyMTay2j8imKBXjfranDPbmiaM86s5ThgWXSJ92cLs0vM+ut/P+NybYlGoNiT5qe\nLLgIeLAbKo3ktMW6xdvmqSJ5Is/NHQPtADwz3c11Sr2m24QehkUEoUSUAgVROHeD\ncaF0OlPsvhO8SKdlGyz61UgAKtnFSFH7KFwIP27bYWc+FbQWtCXzQkcKbKJARzBg\nroWDRncfY4ttgLsDnObdMd0aN86vykLpH6V1vN9juT/6iB2yKi3obEYPw3/8BPk=\n=x/PO\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b74e513aa709335b75b2d911fc13d9526ac2cde\nparent 4b26b80dd56f03affae07eeaffae5c284247a40b\nparent 0307db4a599ef142b7670489c674ae7abb9b5623\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684840468 +0530\ncommitter GitHub <noreply@github.com> 1684840468 +0530\n\nRollup merge of #111853 - compiler-errors:opaque-check, r=oli-obk\n\nCheck opaques for mismatch during writeback\n\nRevive #111705.\n\nI realized that we don't need to put any substs in the writeback results since all of the hidden types have already been remapped. See the comment in `compiler/rustc_middle/src/ty/typeck_results.rs`, which should make that clear for other explorers of the codebase.\n\nAdditionally, we need to do some diagnostic stashing because the diagnostics we produce during HIR typeck is very poor and we should prefer the diagnostic that comes from MIR, if we have one.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6583025c938196fb0c97aff70c5bce7e0dad24b7", "html_url": "https://github.com/rust-lang/rust/commit/6583025c938196fb0c97aff70c5bce7e0dad24b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6583025c938196fb0c97aff70c5bce7e0dad24b7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b26b80dd56f03affae07eeaffae5c284247a40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b26b80dd56f03affae07eeaffae5c284247a40b", "html_url": "https://github.com/rust-lang/rust/commit/4b26b80dd56f03affae07eeaffae5c284247a40b"}, {"sha": "0307db4a599ef142b7670489c674ae7abb9b5623", "url": "https://api.github.com/repos/rust-lang/rust/commits/0307db4a599ef142b7670489c674ae7abb9b5623", "html_url": "https://github.com/rust-lang/rust/commit/0307db4a599ef142b7670489c674ae7abb9b5623"}], "stats": {"total": 156, "additions": 131, "deletions": 25}, "files": [{"sha": "e9b5c47ce23c4bef352425b63f5f8e2029362675", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -152,8 +152,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     let guar = ty.error_reported().err().unwrap_or_else(|| {\n                         prev.report_mismatch(\n                             &OpaqueHiddenType { ty, span: concrete_type.span },\n+                            opaque_type_key.def_id,\n                             infcx.tcx,\n                         )\n+                        .emit()\n                     });\n                     prev.ty = infcx.tcx.ty_error(guar);\n                 }"}, {"sha": "074fbb1322c9a2e80a928bdcdee844122ec9d976", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -478,6 +478,7 @@ pub enum StashKey {\n     MaybeFruTypo,\n     CallAssocMethod,\n     TraitMissingMethod,\n+    OpaqueHiddenTypeMismatch,\n }\n \n fn default_track_diagnostic(d: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {"}, {"sha": "97c6cb491d1d6039fa70a09b57cf38acbae28fe0", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -584,7 +584,8 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n                 debug!(?concrete_type, \"found constraint\");\n                 if let Some(prev) = &mut self.found {\n                     if concrete_type.ty != prev.ty && !(concrete_type, prev.ty).references_error() {\n-                        let guar = prev.report_mismatch(&concrete_type, self.tcx);\n+                        let guar =\n+                            prev.report_mismatch(&concrete_type, self.def_id, self.tcx).emit();\n                         prev.ty = self.tcx.ty_error(guar);\n                     }\n                 } else {\n@@ -678,10 +679,10 @@ fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> T\n     // Only check against typeck if we didn't already error\n     if !hidden.ty.references_error() {\n         for concrete_type in locator.typeck_types {\n-            if tcx.erase_regions(concrete_type.ty) != tcx.erase_regions(hidden.ty)\n+            if concrete_type.ty != tcx.erase_regions(hidden.ty)\n                 && !(concrete_type, hidden).references_error()\n             {\n-                hidden.report_mismatch(&concrete_type, tcx);\n+                hidden.report_mismatch(&concrete_type, def_id, tcx).emit();\n             }\n         }\n     }\n@@ -722,7 +723,7 @@ fn find_opaque_ty_constraints_for_rpit(\n                 if concrete_type.ty != self.found.ty\n                     && !(concrete_type, self.found).references_error()\n                 {\n-                    self.found.report_mismatch(&concrete_type, self.tcx);\n+                    self.found.report_mismatch(&concrete_type, self.def_id, self.tcx).emit();\n                 }\n             }\n         }"}, {"sha": "0f21fc1e662380d506c248a8290fdc474c7f52a1", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -5,7 +5,7 @@\n use crate::FnCtxt;\n use hir::def_id::LocalDefId;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::{ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n@@ -82,10 +82,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.typeck_results.treat_byte_string_as_slice =\n             mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);\n \n-        if let Some(e) = self.tainted_by_errors() {\n-            wbcx.typeck_results.tainted_by_errors = Some(e);\n-        }\n-\n         debug!(\"writeback: typeck results for {:?} are {:#?}\", item_def_id, wbcx.typeck_results);\n \n         self.tcx.arena.alloc(wbcx.typeck_results)\n@@ -118,12 +114,21 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     ) -> WritebackCx<'cx, 'tcx> {\n         let owner = body.id().hir_id.owner;\n \n-        WritebackCx {\n+        let mut wbcx = WritebackCx {\n             fcx,\n             typeck_results: ty::TypeckResults::new(owner),\n             body,\n             rustc_dump_user_substs,\n+        };\n+\n+        // HACK: We specifically don't want the (opaque) error from tainting our\n+        // inference context. That'll prevent us from doing opaque type inference\n+        // later on in borrowck, which affects diagnostic spans pretty negatively.\n+        if let Some(e) = fcx.tainted_by_errors() {\n+            wbcx.typeck_results.tainted_by_errors = Some(e);\n         }\n+\n+        wbcx\n     }\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n@@ -578,13 +583,26 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 continue;\n             }\n \n-            let hidden_type = hidden_type.remap_generic_params_to_declaration_params(\n-                opaque_type_key,\n-                self.fcx.infcx.tcx,\n-                true,\n-            );\n-\n-            self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id, hidden_type);\n+            let hidden_type =\n+                self.tcx().erase_regions(hidden_type.remap_generic_params_to_declaration_params(\n+                    opaque_type_key,\n+                    self.tcx(),\n+                    true,\n+                ));\n+\n+            if let Some(last_opaque_ty) = self\n+                .typeck_results\n+                .concrete_opaque_types\n+                .insert(opaque_type_key.def_id, hidden_type)\n+                && last_opaque_ty.ty != hidden_type.ty\n+            {\n+                hidden_type\n+                    .report_mismatch(&last_opaque_ty, opaque_type_key.def_id, self.tcx())\n+                    .stash(\n+                        self.tcx().def_span(opaque_type_key.def_id),\n+                        StashKey::OpaqueHiddenTypeMismatch,\n+                    );\n+            }\n         }\n     }\n "}, {"sha": "c9cd644fab0e6b5d94115c6efe3f5bcb8a9f82a4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -37,7 +37,7 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n-use rustc_errors::ErrorGuaranteed;\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, DocLinkResMap, LifetimeRes, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LocalDefIdMap};\n@@ -1439,14 +1439,26 @@ pub struct OpaqueHiddenType<'tcx> {\n }\n \n impl<'tcx> OpaqueHiddenType<'tcx> {\n-    pub fn report_mismatch(&self, other: &Self, tcx: TyCtxt<'tcx>) -> ErrorGuaranteed {\n+    pub fn report_mismatch(\n+        &self,\n+        other: &Self,\n+        opaque_def_id: LocalDefId,\n+        tcx: TyCtxt<'tcx>,\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n+        if let Some(diag) = tcx\n+            .sess\n+            .diagnostic()\n+            .steal_diagnostic(tcx.def_span(opaque_def_id), StashKey::OpaqueHiddenTypeMismatch)\n+        {\n+            diag.cancel();\n+        }\n         // Found different concrete types for the opaque type.\n         let sub_diag = if self.span == other.span {\n             TypeMismatchReason::ConflictType { span: self.span }\n         } else {\n             TypeMismatchReason::PreviousUse { span: self.span }\n         };\n-        tcx.sess.emit_err(OpaqueHiddenTypeMismatch {\n+        tcx.sess.create_err(OpaqueHiddenTypeMismatch {\n             self_ty: self.ty,\n             other_ty: other.ty,\n             other_span: other.span,"}, {"sha": "e04dbbff9a777b452c85195d369e0744caf72229", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -151,10 +151,14 @@ pub struct TypeckResults<'tcx> {\n     /// this field will be set to `Some(ErrorGuaranteed)`.\n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n \n-    /// All the opaque types that have hidden types set\n-    /// by this function. We also store the\n-    /// type here, so that mir-borrowck can use it as a hint for figuring out hidden types,\n-    /// even if they are only set in dead code (which doesn't show up in MIR).\n+    /// All the opaque types that have hidden types set by this function.\n+    /// We also store the type here, so that the compiler can use it as a hint\n+    /// for figuring out hidden types, even if they are only set in dead code\n+    /// (which doesn't show up in MIR).\n+    ///\n+    /// These types are mapped back to the opaque's identity substitutions\n+    /// (with erased regions), which is why we don't associated substs with any\n+    /// of these usages.\n     pub concrete_opaque_types: FxIndexMap<LocalDefId, ty::OpaqueHiddenType<'tcx>>,\n \n     /// Tracks the minimum captures required for a closure;"}, {"sha": "e5bfbfdae91fd79a57091c9cde62d419ccc12cc4", "filename": "tests/ui/type-alias-impl-trait/different_defining_uses_never_type-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-2.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -0,0 +1,15 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Tait<'a> = impl Sized + 'a;\n+\n+fn foo<'a, 'b>() {\n+    if false {\n+        if { return } {\n+            let y: Tait<'b> = 1i32;\n+            //~^ ERROR concrete type differs from previous defining opaque type use\n+        }\n+    }\n+    let x: Tait<'a> = ();\n+}\n+\n+fn main() {}"}, {"sha": "f2eb7bc4dc79b5034e94783f4824531f2c64337c", "filename": "tests/ui/type-alias-impl-trait/different_defining_uses_never_type-2.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-2.stderr?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses_never_type-2.rs:8:31\n+   |\n+LL |             let y: Tait<'b> = 1i32;\n+   |                               ^^^^ expected `()`, got `i32`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type-2.rs:12:23\n+   |\n+LL |     let x: Tait<'a> = ();\n+   |                       ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2b30a9cd57cf687fb06761dc137bd0a1c77ffcdf", "filename": "tests/ui/type-alias-impl-trait/different_defining_uses_never_type-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-3.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -0,0 +1,15 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Tait<T> = impl Sized;\n+\n+fn foo<T, U>() {\n+    if false {\n+        if { return } {\n+            let y: Tait<U> = 1i32;\n+            //~^ ERROR concrete type differs from previous defining opaque type use\n+        }\n+    }\n+    let x: Tait<T> = ();\n+}\n+\n+fn main() {}"}, {"sha": "8fc2e22848c70748a91d83d4debc0c6c7e2f4b18", "filename": "tests/ui/type-alias-impl-trait/different_defining_uses_never_type-3.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fdifferent_defining_uses_never_type-3.stderr?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -0,0 +1,14 @@\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/different_defining_uses_never_type-3.rs:8:30\n+   |\n+LL |             let y: Tait<U> = 1i32;\n+   |                              ^^^^ expected `()`, got `i32`\n+   |\n+note: previous use here\n+  --> $DIR/different_defining_uses_never_type-3.rs:12:22\n+   |\n+LL |     let x: Tait<T> = ();\n+   |                      ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ae2c34b935f2d433c19619d2305b8c6e095b0f3", "filename": "tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.rs?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -8,6 +8,7 @@ type X<A, B> = impl Into<&'static A>;\n \n fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n     //~^ ERROR the trait bound `&'static B: From<&A>` is not satisfied\n+    //~| ERROR concrete type differs from previous defining opaque type use\n     (a, a)\n }\n "}, {"sha": "0d24d42ba62e8b71c876b41f5043254393a3a0cd", "filename": "tests/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6583025c938196fb0c97aff70c5bce7e0dad24b7/tests%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr?ref=6583025c938196fb0c97aff70c5bce7e0dad24b7", "patch": "@@ -10,6 +10,15 @@ help: consider introducing a `where` clause, but there might be an alternative b\n LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) where &'static B: From<&A> {\n    |                                                                ++++++++++++++++++++++++++\n \n-error: aborting due to previous error\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/multiple-def-uses-in-one-fn.rs:9:45\n+   |\n+LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) {\n+   |                                             ^^^^^^^^^^^^^^^^^^\n+   |                                             |\n+   |                                             expected `&B`, got `&A`\n+   |                                             this expression supplies two conflicting concrete types for the same opaque type\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}