{"sha": "9845a4be5a4f9919fcadfb1076d2425781eab41f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NDVhNGJlNWE0Zjk5MTlmY2FkZmIxMDc2ZDI0MjU3ODFlYWI0MWY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-08T04:13:15Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:10Z"}, "message": "Allow `macro_rules!` macros to expand to expressions or items.", "tree": {"sha": "949dd7517a8d564d3fb6f279f6b6386eb1af4161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/949dd7517a8d564d3fb6f279f6b6386eb1af4161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9845a4be5a4f9919fcadfb1076d2425781eab41f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9845a4be5a4f9919fcadfb1076d2425781eab41f", "html_url": "https://github.com/rust-lang/rust/commit/9845a4be5a4f9919fcadfb1076d2425781eab41f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9845a4be5a4f9919fcadfb1076d2425781eab41f/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c946c87b6f9cd536309dfba09abdc9af32729f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/c946c87b6f9cd536309dfba09abdc9af32729f34", "html_url": "https://github.com/rust-lang/rust/commit/c946c87b6f9cd536309dfba09abdc9af32729f34"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "9a642818a537c9422ebdb2d610f361030fbfe1b4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9845a4be5a4f9919fcadfb1076d2425781eab41f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9845a4be5a4f9919fcadfb1076d2425781eab41f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9845a4be5a4f9919fcadfb1076d2425781eab41f", "patch": "@@ -44,6 +44,7 @@ type syntax_expander_tt_item_\n enum mac_result {\n     mr_expr(@ast::expr),\n     mr_item(@ast::item),\n+    mr_expr_or_item(fn@()-> @ast::expr, fn@()-> Option<@ast::item>),\n     mr_def(macro_def)\n }\n "}, {"sha": "f4d3111f0a2f26441bc0d39b681f87e7beed2484", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9845a4be5a4f9919fcadfb1076d2425781eab41f/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9845a4be5a4f9919fcadfb1076d2425781eab41f/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9845a4be5a4f9919fcadfb1076d2425781eab41f", "patch": "@@ -81,6 +81,7 @@ fn expand_expr(exts: HashMap<~str, syntax_extension>, cx: ext_ctxt,\n                   Some(expr_tt({expander: exp, span: exp_sp})) => {\n                     let expanded = match exp(cx, mac.span, tts) {\n                       mr_expr(e) => e,\n+                      mr_expr_or_item(expr_maker,_) => expr_maker(),\n                       _ => cx.span_fatal(\n                           pth.span, fmt!(\"non-expr macro in expr pos: %s\",\n                                          *extname))\n@@ -214,6 +215,8 @@ fn expand_item_mac(exts: HashMap<~str, syntax_extension>,\n               mr_expr(_) => cx.span_fatal(pth.span,\n                                          ~\"expr macro in item position: \" +\n                                          *extname),\n+              mr_expr_or_item(_, item_maker) =>\n+                option::chain(item_maker(), |i| {fld.fold_item(i)}),\n               mr_def(mdef) => {\n                 exts.insert(mdef.name, mdef.ext);\n                 None"}, {"sha": "7957cde8fdc6728a7ae5d140248a730996bb68b6", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9845a4be5a4f9919fcadfb1076d2425781eab41f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9845a4be5a4f9919fcadfb1076d2425781eab41f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=9845a4be5a4f9919fcadfb1076d2425781eab41f", "patch": "@@ -1,4 +1,4 @@\n-use base::{ext_ctxt, mac_result, mr_expr, mr_def, expr_tt};\n+use base::{ext_ctxt, mac_result, mr_expr_or_item, mr_def, expr_tt};\n use codemap::span;\n use ast::{ident, matcher_, matcher, match_tok,\n              match_nonterminal, match_seq, tt_delim};\n@@ -87,10 +87,13 @@ fn add_new_extension(cx: ext_ctxt, sp: span, name: ident,\n                     // rhs has holes ( `$id` and `$(...)` that need filled)\n                     let trncbr = new_tt_reader(s_d, itr, Some(named_matches),\n                                                ~[rhs]);\n-                    let p = Parser(cx.parse_sess(), cx.cfg(),\n-                                   trncbr as reader);\n-                    let e = p.parse_expr();\n-                    return mr_expr(e);\n+                    let p = @Parser(cx.parse_sess(), cx.cfg(),\n+                                    trncbr as reader);\n+\n+                    // Let the context choose how to interpret the result.\n+                    // Weird, but useful for X-macros.\n+                    return mr_expr_or_item(|| p.parse_expr(),\n+                                           || p.parse_item(~[/* no attrs*/]));\n                   }\n                   failure(sp, msg) => if sp.lo >= best_fail_spot.lo {\n                     best_fail_spot = sp;"}]}