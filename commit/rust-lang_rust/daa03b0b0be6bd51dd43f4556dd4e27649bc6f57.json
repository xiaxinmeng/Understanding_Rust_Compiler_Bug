{"sha": "daa03b0b0be6bd51dd43f4556dd4e27649bc6f57", "node_id": "C_kwDOAAsO6NoAKGRhYTAzYjBiMGJlNmJkNTFkZDQzZjQ1NTZkZDRlMjc2NDliYzZmNTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T18:47:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-13T18:47:42Z"}, "message": "Auto merge of #14800 - lowr:patch/macro-subns-and-prelude, r=Veykril\n\nExpand more single ident macro calls upon item collection\n\nAddresses https://github.com/rust-lang/rust-analyzer/pull/14781#issuecomment-1546201022\n\nI believe this (almost) brings the number of unresolved names back to pre-#14781:\n\n|r-a version|`analysis-stats compiler/rustc` (rust-lang/rust@69fef92ab2f287f072b66fb7b4f62c8bb4acba43) |\n|---|---|\n|pre-#14781 (b069eb720bec6ce40ab224f57d271687b19b5a07) | exprs: 2747778, ??ty: 122236 (4%), ?ty: 107826 (3%), !ty: 728 |\n| #14781 (a7944a93a1520b96f079bbbcd841d6aec9e4ba5d) | exprs: 2713080, ??ty: 139651 (5%), ?ty: 114444 (4%), !ty: 730 |\n| with this fix | exprs: 2747871, ??ty: 122237 (4%), ?ty: 108171 (3%), !ty: 676 |\n\n(I haven't investigated on the increase in some numbers but hopefully not too much of a problem)\n\nThis is only a temporary solution. The core problem is that we haven't fully implemented the textual scope of legacy macros. For example, we *have been* failing to resolve `foo` in the following snippet, even before #14781 or after this patch. As noted in a FIXME, we need a way to resolve names in textual scope without eager expansion during item collection.\n\n```rust\n//- /main.rs crate:main deps:lib\nlib::mk_foo!();\nconst A: i32 = foo!();\n             //^^^^^^ unresolved-macro-call\n\n//- /lib.rs crate:lib\n#[macro_export]\nmacro_rules! mk_foo {\n    () => {\n        macro_rules! foo { () => { 42 } }\n    }\n}\n```", "tree": {"sha": "8e273656d17347bcc25e38f674dc3ea246bfca0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e273656d17347bcc25e38f674dc3ea246bfca0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57", "html_url": "https://github.com/rust-lang/rust/commit/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38264fa567144adba2d846347d66e00b9d08f35", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38264fa567144adba2d846347d66e00b9d08f35", "html_url": "https://github.com/rust-lang/rust/commit/f38264fa567144adba2d846347d66e00b9d08f35"}, {"sha": "e9ddb62c658b35e3026c470217f38a465f2a3dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddb62c658b35e3026c470217f38a465f2a3dc7", "html_url": "https://github.com/rust-lang/rust/commit/e9ddb62c658b35e3026c470217f38a465f2a3dc7"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "d1288b7b59b5b5ce5fda4396acc67870721f7304", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=daa03b0b0be6bd51dd43f4556dd4e27649bc6f57", "patch": "@@ -44,7 +44,8 @@ use crate::{\n         mod_resolution::ModDir,\n         path_resolution::ReachedFixedPoint,\n         proc_macro::{parse_macro_name_and_helper_attrs, ProcMacroDef, ProcMacroKind},\n-        BuiltinShadowMode, DefMap, MacroSubNs, ModuleData, ModuleOrigin, ResolveMode,\n+        sub_namespace_match, BuiltinShadowMode, DefMap, MacroSubNs, ModuleData, ModuleOrigin,\n+        ResolveMode,\n     },\n     path::{ImportAlias, ModPath, PathKind},\n     per_ns::PerNs,\n@@ -2141,26 +2142,34 @@ impl ModCollector<'_, '_> {\n \n     fn collect_macro_call(&mut self, mac: &MacroCall, container: ItemContainerId) {\n         let ast_id = AstIdWithPath::new(self.file_id(), mac.ast_id, ModPath::clone(&mac.path));\n+        let db = self.def_collector.db;\n \n-        // Case 1: try to resolve in legacy scope and expand macro_rules\n+        // FIXME: Immediately expanding in \"Case 1\" is insufficient since \"Case 2\" may also define\n+        // new legacy macros that create textual scopes. We need a way to resolve names in textual\n+        // scopes without eager expansion.\n+\n+        // Case 1: try to resolve macro calls with single-segment name and expand macro_rules\n         if let Ok(res) = macro_call_as_call_id(\n-            self.def_collector.db.upcast(),\n+            db.upcast(),\n             &ast_id,\n             mac.expand_to,\n             self.def_collector.def_map.krate,\n             |path| {\n                 path.as_ident().and_then(|name| {\n-                    self.def_collector.def_map.with_ancestor_maps(\n-                        self.def_collector.db,\n-                        self.module_id,\n-                        &mut |map, module| {\n-                            map[module]\n-                                .scope\n-                                .get_legacy_macro(name)\n-                                .and_then(|it| it.last())\n-                                .map(|&it| macro_id_to_def_id(self.def_collector.db, it))\n-                        },\n-                    )\n+                    let def_map = &self.def_collector.def_map;\n+                    def_map\n+                        .with_ancestor_maps(db, self.module_id, &mut |map, module| {\n+                            map[module].scope.get_legacy_macro(name)?.last().copied()\n+                        })\n+                        .or_else(|| def_map[self.module_id].scope.get(name).take_macros())\n+                        .or_else(|| def_map.macro_use_prelude.get(name).copied())\n+                        .filter(|&id| {\n+                            sub_namespace_match(\n+                                Some(MacroSubNs::from_id(db, id)),\n+                                Some(MacroSubNs::Bang),\n+                            )\n+                        })\n+                        .map(|it| macro_id_to_def_id(self.def_collector.db, it))\n                 })\n             },\n         ) {"}, {"sha": "981171013a159fcd08abe16ebaae742d8b0aab62", "filename": "crates/hir-def/src/nameres/path_resolution.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=daa03b0b0be6bd51dd43f4556dd4e27649bc6f57", "patch": "@@ -59,7 +59,11 @@ impl ResolvePathResult {\n }\n \n impl PerNs {\n-    fn filter_macro(mut self, db: &dyn DefDatabase, expected: Option<MacroSubNs>) -> Self {\n+    pub(super) fn filter_macro(\n+        mut self,\n+        db: &dyn DefDatabase,\n+        expected: Option<MacroSubNs>,\n+    ) -> Self {\n         self.macros = self.macros.filter(|&(id, _)| {\n             let this = MacroSubNs::from_id(db, id);\n             sub_namespace_match(Some(this), expected)"}, {"sha": "7eb64beb1d797fd52d5928e9ff999523a78ad8a5", "filename": "crates/hir-def/src/nameres/tests/macros.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daa03b0b0be6bd51dd43f4556dd4e27649bc6f57/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=daa03b0b0be6bd51dd43f4556dd4e27649bc6f57", "patch": "@@ -1272,6 +1272,39 @@ pub mod prelude {\n     );\n }\n \n+#[test]\n+fn macro_use_prelude_is_eagerly_expanded() {\n+    // See FIXME in `ModCollector::collect_macro_call()`.\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:lib\n+#[macro_use]\n+extern crate lib;\n+mk_foo!();\n+mod a {\n+    foo!();\n+}\n+//- /lib.rs crate:lib\n+#[macro_export]\n+macro_rules! mk_foo {\n+    () => {\n+        macro_rules! foo {\n+            () => { struct Ok; }\n+        }\n+    }\n+}\n+    \"#,\n+        expect![[r#\"\n+        crate\n+        a: t\n+        lib: t\n+\n+        crate::a\n+        Ok: t v\n+    \"#]],\n+    );\n+}\n+\n #[test]\n fn macro_sub_namespace() {\n     let map = compute_crate_def_map("}]}