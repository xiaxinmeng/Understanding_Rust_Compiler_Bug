{"sha": "df0f50381c630c56adcd7ca0023b8daaa3ad2776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMGY1MDM4MWM2MzBjNTZhZGNkN2NhMDAyM2I4ZGFhYTNhZDI3NzY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-19T00:13:34Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-11-19T00:18:34Z"}, "message": "Mark some derived methods as #[inline].\n\nToStr, Encodable and Decodable are not marked as such, since they're\nalready expensive, and lead to large methods, so inlining will bloat the\nmetadata & the binaries.\n\nThis means that something like\n\n    #[deriving(Eq)]\n    struct A { x: int }\n\ncreates an instance like\n\n    #[doc = \"Automatically derived.\"]\n    impl ::std::cmp::Eq for A {\n        #[inline]\n        fn eq(&self, __arg_0: &A) -> ::bool {\n            match *__arg_0 {\n                A{x: ref __self_1_0} =>\n                match *self {\n                    A{x: ref __self_0_0} => true && __self_0_0.eq(__self_1_0)\n                }\n            }\n        }\n        #[inline]\n        fn ne(&self, __arg_0: &A) -> ::bool {\n            match *__arg_0 {\n                A{x: ref __self_1_0} =>\n                match *self {\n                    A{x: ref __self_0_0} => false || __self_0_0.ne(__self_1_0)\n                }\n            }\n        }\n    }\n\n(The change being the `#[inline]` attributes.)", "tree": {"sha": "c52ee43cf8f6a4eb13a76e6d217f1f95d7197d60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52ee43cf8f6a4eb13a76e6d217f1f95d7197d60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df0f50381c630c56adcd7ca0023b8daaa3ad2776", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df0f50381c630c56adcd7ca0023b8daaa3ad2776", "html_url": "https://github.com/rust-lang/rust/commit/df0f50381c630c56adcd7ca0023b8daaa3ad2776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df0f50381c630c56adcd7ca0023b8daaa3ad2776/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff", "html_url": "https://github.com/rust-lang/rust/commit/3d569df41de221ce5b0ffd385caaa9fd6d5fb2ff"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "118ada116d9eb4779fd042d0588b380dac7b4134", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -30,6 +30,7 @@ pub fn expand_deriving_clone(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],\n                 ret_ty: Self,\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: |c, s, sub| cs_clone(\"Clone\", c, s, sub)\n             }\n@@ -55,6 +56,7 @@ pub fn expand_deriving_deep_clone(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],\n                 ret_ty: Self,\n+                inline: true,\n                 const_nonmatching: false,\n                 // cs_clone uses the ident passed to it, i.e. it will\n                 // call deep_clone (not clone) here."}, {"sha": "eb07d2d209cfd6d9defccc401d2f887ba1b6c871", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -37,6 +37,7 @@ pub fn expand_deriving_eq(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n+                inline: true,\n                 const_nonmatching: true,\n                 combine_substructure: $f\n             }"}, {"sha": "95d617af0c7948f40ad2a2943d7428c0032ee76f", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -27,6 +27,7 @@ pub fn expand_deriving_ord(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: |cx, span, substr| cs_op($op, $equal, cx, span, substr)\n             }"}, {"sha": "51965e1b582a4b5752b4a5902a45ad0e9a31048d", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -34,6 +34,7 @@ pub fn expand_deriving_totaleq(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n+                inline: true,\n                 const_nonmatching: true,\n                 combine_substructure: cs_equals\n             }"}, {"sha": "217acd98c68cc26f804a9140cd47b56f927e9ede", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -31,6 +31,7 @@ pub fn expand_deriving_totalord(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[borrowed_self()],\n                 ret_ty: Literal(Path::new(~[\"std\", \"cmp\", \"Ordering\"])),\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: cs_cmp\n             }"}, {"sha": "3f745d64a7b9b270b98da8548e899dbfb253b591", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -39,6 +39,7 @@ pub fn expand_deriving_decodable(cx: @ExtCtxt,\n                 args: ~[Ptr(~Literal(Path::new_local(\"__D\")),\n                             Borrowed(None, MutMutable))],\n                 ret_ty: Self,\n+                inline: false,\n                 const_nonmatching: true,\n                 combine_substructure: decodable_substructure,\n             },"}, {"sha": "866df36bba4ad301f09b29e52215b0e9b82085fb", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -30,6 +30,7 @@ pub fn expand_deriving_default(cx: @ExtCtxt,\n                 explicit_self: None,\n                 args: ~[],\n                 ret_ty: Self,\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: default_substructure\n             },"}, {"sha": "899100f14ba77f041e656221e962a4b2403f53c1", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -101,6 +101,7 @@ pub fn expand_deriving_encodable(cx: @ExtCtxt,\n                 args: ~[Ptr(~Literal(Path::new_local(\"__E\")),\n                             Borrowed(None, MutMutable))],\n                 ret_ty: nil_ty(),\n+                inline: false,\n                 const_nonmatching: true,\n                 combine_substructure: encodable_substructure,\n             },"}, {"sha": "aa83b7656a67c4ed795d7ab8fefcd1eb71272bfc", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -218,6 +218,9 @@ pub struct MethodDef<'self> {\n     /// Return type\n     ret_ty: Ty<'self>,\n \n+    /// Whether to mark this as #[inline]\n+    inline: bool,\n+\n     /// if the value of the nonmatching enums is independent of the\n     /// actual enum variants, i.e. can use _ => .. match.\n     const_nonmatching: bool,\n@@ -553,11 +556,16 @@ impl<'self> MethodDef<'self> {\n         let fn_decl = cx.fn_decl(args, ret_type);\n         let body_block = cx.block_expr(body);\n \n+        let attrs = if self.inline {\n+            ~[cx.attribute(trait_span, cx.meta_word(trait_span, @\"inline\"))]\n+        } else {\n+            ~[]\n+        };\n \n         // Create the method.\n         @ast::method {\n             ident: method_ident,\n-            attrs: ~[],\n+            attrs: attrs,\n             generics: fn_generics,\n             explicit_self: explicit_self,\n             purity: ast::impure_fn,"}, {"sha": "fed630cc6681b66080efc90b59195dcf1c2565fd", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -33,6 +33,7 @@ pub fn expand_deriving_iter_bytes(cx: @ExtCtxt,\n                     Literal(Path::new(~[\"std\", \"to_bytes\", \"Cb\"]))\n                 ],\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: iter_bytes_substructure\n             }"}, {"sha": "77b0d913dcda60f0b1c1ea1b15c7ebaaa8310678", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -35,6 +35,8 @@ pub fn expand_deriving_from_primitive(cx: @ExtCtxt,\n                                            None,\n                                            ~[~Self],\n                                            true)),\n+                // liable to cause code-bloat\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: |c, s, sub| cs_from(\"i64\", c, s, sub),\n             },\n@@ -49,6 +51,8 @@ pub fn expand_deriving_from_primitive(cx: @ExtCtxt,\n                                            None,\n                                            ~[~Self],\n                                            true)),\n+                // liable to cause code-bloat\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: |c, s, sub| cs_from(\"u64\", c, s, sub),\n             },"}, {"sha": "2a16d0b025de060d10e4fb6aa4498e85e6052eab", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -39,6 +39,7 @@ pub fn expand_deriving_rand(cx: @ExtCtxt,\n                         Borrowed(None, ast::MutMutable))\n                 ],\n                 ret_ty: Self,\n+                inline: false,\n                 const_nonmatching: false,\n                 combine_substructure: rand_substructure\n             }"}, {"sha": "26f4668ccfd6f84cba6ed5cc03129215603758a8", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -31,6 +31,7 @@ pub fn expand_deriving_to_str(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],\n                 ret_ty: Ptr(~Literal(Path::new_local(\"str\")), Send),\n+                inline: false,\n                 const_nonmatching: false,\n                 combine_substructure: to_str_substructure\n             }"}, {"sha": "939c7b5584432d3a4560bcaf06a5c1c61740daa6", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df0f50381c630c56adcd7ca0023b8daaa3ad2776/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=df0f50381c630c56adcd7ca0023b8daaa3ad2776", "patch": "@@ -30,6 +30,7 @@ pub fn expand_deriving_zero(cx: @ExtCtxt,\n                 explicit_self: None,\n                 args: ~[],\n                 ret_ty: Self,\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: zero_substructure\n             },\n@@ -39,6 +40,7 @@ pub fn expand_deriving_zero(cx: @ExtCtxt,\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],\n                 ret_ty: Literal(Path::new(~[\"bool\"])),\n+                inline: true,\n                 const_nonmatching: false,\n                 combine_substructure: |cx, span, substr| {\n                     cs_and(|cx, span, _, _| cx.span_bug(span,"}]}