{"sha": "748c549185651a886de46110d6d9b616f3c09fef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OGM1NDkxODU2NTFhODg2ZGU0NjExMGQ2ZDliNjE2ZjNjMDlmZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T02:34:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-16T02:34:32Z"}, "message": "Auto merge of #49847 - sinkuu:save_analysis_implicit_extern, r=petrochenkov\n\nFix save-analysis generation with extern_in_paths/extern_absolute_paths\n\nFixes #48742.", "tree": {"sha": "5e95dac6ab5efea29fa9aaa576ed07e2d11b2f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e95dac6ab5efea29fa9aaa576ed07e2d11b2f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748c549185651a886de46110d6d9b616f3c09fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748c549185651a886de46110d6d9b616f3c09fef", "html_url": "https://github.com/rust-lang/rust/commit/748c549185651a886de46110d6d9b616f3c09fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748c549185651a886de46110d6d9b616f3c09fef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6ba1b9b021c408fcad60ee52acf8af5e1b2eb00", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ba1b9b021c408fcad60ee52acf8af5e1b2eb00", "html_url": "https://github.com/rust-lang/rust/commit/d6ba1b9b021c408fcad60ee52acf8af5e1b2eb00"}, {"sha": "c3dc014378e855bf41fd75e5b4ff956b67766656", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3dc014378e855bf41fd75e5b4ff956b67766656", "html_url": "https://github.com/rust-lang/rust/commit/c3dc014378e855bf41fd75e5b4ff956b67766656"}], "stats": {"total": 276, "additions": 227, "deletions": 49}, "files": [{"sha": "d885bd43bc89dbce656a42db81c6e5aa475bf3cb", "filename": "src/librustc/ich/impls_cstore.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -47,10 +47,16 @@ impl_stable_hash_for!(enum middle::cstore::LinkagePreference {\n });\n \n impl_stable_hash_for!(struct middle::cstore::ExternCrate {\n-    def_id,\n+    src,\n     span,\n-    direct,\n-    path_len\n+    path_len,\n+    direct\n+});\n+\n+impl_stable_hash_for!(enum middle::cstore::ExternCrateSource {\n+    Extern(def_id),\n+    Use,\n+    Path,\n });\n \n impl_stable_hash_for!(struct middle::cstore::CrateSource {"}, {"sha": "292ec184dfae5d9ada4e8fa913462ffe6fb8f5be", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -148,23 +148,34 @@ pub enum LoadedMacro {\n \n #[derive(Copy, Clone, Debug)]\n pub struct ExternCrate {\n-    /// def_id of an `extern crate` in the current crate that caused\n-    /// this crate to be loaded; note that there could be multiple\n-    /// such ids\n-    pub def_id: DefId,\n+    pub src: ExternCrateSource,\n \n     /// span of the extern crate that caused this to be loaded\n     pub span: Span,\n \n+    /// Number of links to reach the extern;\n+    /// used to select the extern with the shortest path\n+    pub path_len: usize,\n+\n     /// If true, then this crate is the crate named by the extern\n     /// crate referenced above. If false, then this crate is a dep\n     /// of the crate.\n     pub direct: bool,\n+}\n \n-    /// Number of links to reach the extern crate `def_id`\n-    /// declaration; used to select the extern crate with the shortest\n-    /// path\n-    pub path_len: usize,\n+#[derive(Copy, Clone, Debug)]\n+pub enum ExternCrateSource {\n+    /// Crate is loaded by `extern crate`.\n+    Extern(\n+        /// def_id of the item in the current crate that caused\n+        /// this crate to be loaded; note that there could be multiple\n+        /// such ids\n+        DefId,\n+    ),\n+    // Crate is loaded by `use`.\n+    Use,\n+    /// Crate is implicitly loaded by an absolute or an `extern::` path.\n+    Path,\n }\n \n pub struct EncodedMetadata {\n@@ -357,9 +368,23 @@ impl CrateStore for DummyCrateStore {\n }\n \n pub trait CrateLoader {\n-    fn process_item(&mut self, item: &ast::Item, defs: &Definitions);\n+    fn process_extern_crate(&mut self, item: &ast::Item, defs: &Definitions) -> CrateNum;\n+\n+    fn process_path_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+    ) -> CrateNum;\n+\n+    fn process_use_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+        id: ast::NodeId,\n+        defs: &Definitions,\n+    ) -> CrateNum;\n+\n     fn postprocess(&mut self, krate: &ast::Crate);\n-    fn resolve_crate_from_path(&mut self, name: Symbol, span: Span) -> CrateNum;\n }\n \n // This method is used when generating the command line to pass through to"}, {"sha": "8189064db6968eeecfcc353eeb03ee8326b419c6", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -11,6 +11,7 @@\n use hir::map::DefPathData;\n use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use ty::{self, Ty, TyCtxt};\n+use middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n use syntax::symbol::Symbol;\n use syntax::symbol::InternedString;\n@@ -95,21 +96,20 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 //    `extern crate` manually, we put the `extern\n                 //    crate` as the parent. So you wind up with\n                 //    something relative to the current crate.\n-                // 2. for an indirect crate, where there is no extern\n-                //    crate, we just prepend the crate name.\n+                // 2. for an extern inferred from a path or an indirect crate,\n+                //    where there is no explicit `extern crate`, we just prepend\n+                //    the crate name.\n                 //\n                 // Returns `None` for the local crate.\n                 if cnum != LOCAL_CRATE {\n                     let opt_extern_crate = self.extern_crate(cnum.as_def_id());\n-                    let opt_extern_crate = opt_extern_crate.and_then(|extern_crate| {\n-                        if extern_crate.direct {\n-                            Some(extern_crate.def_id)\n-                        } else {\n-                            None\n-                        }\n-                    });\n-                    if let Some(extern_crate_def_id) = opt_extern_crate {\n-                        self.push_item_path(buffer, extern_crate_def_id);\n+                    if let Some(ExternCrate {\n+                        src: ExternCrateSource::Extern(def_id),\n+                        direct: true,\n+                        ..\n+                    }) = *opt_extern_crate\n+                    {\n+                        self.push_item_path(buffer, def_id);\n                     } else {\n                         buffer.push(&self.crate_name(cnum).as_str());\n                     }\n@@ -137,14 +137,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             // followed by the path to the item within the crate and return.\n             if cur_def.index == CRATE_DEF_INDEX {\n                 match *self.extern_crate(cur_def) {\n-                    Some(ref extern_crate) if extern_crate.direct => {\n-                        self.push_item_path(buffer, extern_crate.def_id);\n-                        cur_path.iter().rev().map(|segment| buffer.push(&segment)).count();\n+                    Some(ExternCrate {\n+                        src: ExternCrateSource::Extern(def_id),\n+                        direct: true,\n+                        ..\n+                    }) => {\n+                        self.push_item_path(buffer, def_id);\n+                        cur_path.iter().rev().for_each(|segment| buffer.push(&segment));\n                         return true;\n                     }\n                     None => {\n                         buffer.push(&self.crate_name(cur_def.krate).as_str());\n-                        cur_path.iter().rev().map(|segment| buffer.push(&segment)).count();\n+                        cur_path.iter().rev().for_each(|segment| buffer.push(&segment));\n                         return true;\n                     }\n                     _ => {},"}, {"sha": "8a18a4b5290f8e91a7a386fe39da83cc946e66a0", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 75, "deletions": 13, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -25,7 +25,7 @@ use rustc_back::PanicStrategy;\n use rustc_back::target::TargetTriple;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n-use rustc::middle::cstore::{validate_crate_name, ExternCrate};\n+use rustc::middle::cstore::{validate_crate_name, ExternCrate, ExternCrateSource};\n use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n@@ -371,12 +371,19 @@ impl<'a> CrateLoader<'a> {\n         // - something over nothing (tuple.0);\n         // - direct extern crate to indirect (tuple.1);\n         // - shorter paths to longer (tuple.2).\n-        let new_rank = (true, extern_crate.direct, !extern_crate.path_len);\n+        let new_rank = (\n+            true,\n+            extern_crate.direct,\n+            cmp::Reverse(extern_crate.path_len),\n+        );\n         let old_rank = match *old_extern_crate {\n-            None => (false, false, !0),\n-            Some(ref c) => (true, c.direct, !c.path_len),\n+            None => (false, false, cmp::Reverse(usize::max_value())),\n+            Some(ref c) => (\n+                true,\n+                c.direct,\n+                cmp::Reverse(c.path_len),\n+            ),\n         };\n-\n         if old_rank >= new_rank {\n             return; // no change needed\n         }\n@@ -1053,7 +1060,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         }\n     }\n \n-    fn process_item(&mut self, item: &ast::Item, definitions: &Definitions) {\n+    fn process_extern_crate(&mut self, item: &ast::Item, definitions: &Definitions) -> CrateNum {\n         match item.node {\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 debug!(\"resolving extern crate stmt. ident: {} orig_name: {:?}\",\n@@ -1079,17 +1086,72 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n \n                 let def_id = definitions.opt_local_def_id(item.id).unwrap();\n                 let path_len = definitions.def_path(def_id.index).data.len();\n-\n-                let extern_crate = ExternCrate { def_id, span: item.span, direct: true, path_len };\n-                self.update_extern_crate(cnum, extern_crate, &mut FxHashSet());\n+                self.update_extern_crate(\n+                    cnum,\n+                    ExternCrate {\n+                        src: ExternCrateSource::Extern(def_id),\n+                        span: item.span,\n+                        path_len,\n+                        direct: true,\n+                    },\n+                    &mut FxHashSet(),\n+                );\n                 self.cstore.add_extern_mod_stmt_cnum(item.id, cnum);\n+                cnum\n             }\n-            _ => {}\n+            _ => bug!(),\n         }\n     }\n \n-    fn resolve_crate_from_path(&mut self, name: Symbol, span: Span) -> CrateNum {\n-        self.resolve_crate(&None, name, name, None, None, span, PathKind::Crate,\n-                           DepKind::Explicit).0\n+    fn process_path_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+    ) -> CrateNum {\n+        let cnum = self.resolve_crate(\n+            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+        ).0;\n+\n+        self.update_extern_crate(\n+            cnum,\n+            ExternCrate {\n+                src: ExternCrateSource::Path,\n+                span,\n+                // to have the least priority in `update_extern_crate`\n+                path_len: usize::max_value(),\n+                direct: true,\n+            },\n+            &mut FxHashSet(),\n+        );\n+\n+        cnum\n+    }\n+\n+    fn process_use_extern(\n+        &mut self,\n+        name: Symbol,\n+        span: Span,\n+        id: ast::NodeId,\n+        definitions: &Definitions,\n+    ) -> CrateNum {\n+        let cnum = self.resolve_crate(\n+            &None, name, name, None, None, span, PathKind::Crate, DepKind::Explicit\n+        ).0;\n+\n+        let def_id = definitions.opt_local_def_id(id).unwrap();\n+        let path_len = definitions.def_path(def_id.index).data.len();\n+\n+        self.update_extern_crate(\n+            cnum,\n+            ExternCrate {\n+                src: ExternCrateSource::Use,\n+                span,\n+                path_len,\n+                direct: true,\n+            },\n+            &mut FxHashSet(),\n+        );\n+\n+        cnum\n     }\n }"}, {"sha": "f4e2136a5a1153db3ab74c61294c719543c695dd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -252,10 +252,7 @@ impl<'a> Resolver<'a> {\n             }\n \n             ItemKind::ExternCrate(orig_name) => {\n-                self.crate_loader.process_item(item, &self.definitions);\n-\n-                // n.b. we don't need to look at the path option here, because cstore already did\n-                let crate_id = self.cstore.extern_mod_stmt_cnum_untracked(item.id).unwrap();\n+                let crate_id = self.crate_loader.process_extern_crate(item, &self.definitions);\n                 let module =\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(module);\n@@ -302,7 +299,8 @@ impl<'a> Resolver<'a> {\n                 self.current_module = module;\n             }\n \n-            ItemKind::ForeignMod(..) => self.crate_loader.process_item(item, &self.definitions),\n+            // Handled in `rustc_metadata::{native_libs,link_args}`\n+            ItemKind::ForeignMod(..) => {}\n \n             // These items live in the value namespace.\n             ItemKind::Static(_, m, _) => {"}, {"sha": "01940ee4fd0f6b09da8e84e4f0fdef7fa89d1a2d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -3254,7 +3254,7 @@ impl<'a> Resolver<'a> {\n                        prev_name == keywords::CrateRoot.name() &&\n                        self.session.features_untracked().extern_absolute_paths {\n                         // `::extern_crate::a::b`\n-                        let crate_id = self.crate_loader.resolve_crate_from_path(name, ident.span);\n+                        let crate_id = self.crate_loader.process_path_extern(name, ident.span);\n                         let crate_root =\n                             self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                         self.populate_module_if_necessary(crate_root);"}, {"sha": "37c62a7b0b45b276ab49270c3987195583e32123", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -627,7 +627,12 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         }\n                     } else if is_extern && !token::is_path_segment_keyword(source) {\n                         let crate_id =\n-                            self.crate_loader.resolve_crate_from_path(source.name, directive.span);\n+                            self.resolver.crate_loader.process_use_extern(\n+                                source.name,\n+                                directive.span,\n+                                directive.id,\n+                                &self.resolver.definitions,\n+                            );\n                         let crate_root =\n                             self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                         self.populate_module_if_necessary(crate_root);"}, {"sha": "6a747decbd368f4ce71f43ce1c39beed29e37baf", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -41,6 +41,7 @@ use rustc::hir;\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::map::{Node, NodeItem};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::CrateType::CrateTypeExecutable;\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n@@ -111,7 +112,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n         for &n in self.tcx.crates().iter() {\n             let span = match *self.tcx.extern_crate(n.as_def_id()) {\n-                Some(ref c) => c.span,\n+                Some(ExternCrate { span, .. }) => span,\n                 None => {\n                     debug!(\"Skipping crate {}, no data\", n);\n                     continue;"}, {"sha": "a132668ec7c8a43a4e85426fe98f5976e492013e", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2FMakefile?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all: extern_absolute_paths.rs extern_in_paths.rs krate2\n+\t$(RUSTC) extern_absolute_paths.rs -Zsave-analysis\n+\tcat $(TMPDIR)/save-analysis/extern_absolute_paths.json | \"$(PYTHON)\" validate_json.py\n+\t$(RUSTC) extern_in_paths.rs -Zsave-analysis\n+\tcat $(TMPDIR)/save-analysis/extern_in_paths.json | \"$(PYTHON)\" validate_json.py\n+\n+krate2: krate2.rs\n+\t$(RUSTC) $<"}, {"sha": "b1fe535766d21af915b30ebeba95898b4b9213f6", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/extern_absolute_paths.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_absolute_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_absolute_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_absolute_paths.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_absolute_paths)]\n+\n+use krate2::hello;\n+\n+fn main() {\n+    hello();\n+    ::krate2::hello();\n+}"}, {"sha": "e48627e86bac5e3c089bac37de09bc447da6dc7e", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/extern_in_paths.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fextern_in_paths.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(extern_in_paths)]\n+\n+use extern::krate2;\n+\n+fn main() {\n+    extern::krate2::hello();\n+}"}, {"sha": "21fc57ccdf2de3409d3c670c39fbaabf21c7932d", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/krate2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fkrate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fkrate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fkrate2.rs?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"krate2\"]\n+#![crate_type = \"lib\"]\n+\n+pub fn hello() {\n+}"}, {"sha": "caab8d0d62697039e9d355e41683d3f8e5a1a847", "filename": "src/test/run-make-fulldeps/save-analysis-rfc2126/validate_json.py", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fvalidate_json.py", "raw_url": "https://github.com/rust-lang/rust/raw/748c549185651a886de46110d6d9b616f3c09fef/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fvalidate_json.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis-rfc2126%2Fvalidate_json.py?ref=748c549185651a886de46110d6d9b616f3c09fef", "patch": "@@ -0,0 +1,17 @@\n+#!/usr/bin/env python\n+\n+# Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+import sys\n+import json\n+\n+crates = json.loads(sys.stdin.readline().strip())[\"prelude\"][\"external_crates\"]\n+assert any(map(lambda c: c[\"id\"][\"name\"] == \"krate2\", crates))"}]}