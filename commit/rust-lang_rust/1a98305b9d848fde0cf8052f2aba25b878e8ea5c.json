{"sha": "1a98305b9d848fde0cf8052f2aba25b878e8ea5c", "node_id": "C_kwDOAAsO6NoAKDFhOTgzMDViOWQ4NDhmZGUwY2Y4MDUyZjJhYmEyNWI4NzhlOGVhNWM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-10T01:09:05Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-10T01:13:02Z"}, "message": "rustdoc: clean up `write!` calls with less stuttering", "tree": {"sha": "a8a2182bfe4db7484e4f5cae4853c0933b7b0e2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a2182bfe4db7484e4f5cae4853c0933b7b0e2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a98305b9d848fde0cf8052f2aba25b878e8ea5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a98305b9d848fde0cf8052f2aba25b878e8ea5c", "html_url": "https://github.com/rust-lang/rust/commit/1a98305b9d848fde0cf8052f2aba25b878e8ea5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a98305b9d848fde0cf8052f2aba25b878e8ea5c/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cca42a47f5d574c8f7302c98c3f918cdc772fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cca42a47f5d574c8f7302c98c3f918cdc772fbb", "html_url": "https://github.com/rust-lang/rust/commit/8cca42a47f5d574c8f7302c98c3f918cdc772fbb"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "f6a5bf9dfa07aebec9a37a638616ac62af3fc9e2", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a98305b9d848fde0cf8052f2aba25b878e8ea5c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a98305b9d848fde0cf8052f2aba25b878e8ea5c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=1a98305b9d848fde0cf8052f2aba25b878e8ea5c", "patch": "@@ -1081,10 +1081,10 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n     fn write_content(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n         wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n-            write!(w, \"{}\", visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx));\n             write!(\n                 w,\n-                \"type {}{}{where_clause} = {type_};\",\n+                \"{}type {}{}{where_clause} = {type_};\",\n+                visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx),\n                 it.name.unwrap(),\n                 t.generics.print(cx),\n                 where_clause = print_where_clause(&t.generics, cx, 0, Ending::Newline),\n@@ -1138,13 +1138,11 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n                      <a href=\\\"#{id}\\\" class=\\\"anchor field\\\">\u00a7</a>\\\n                      <code>{name}: {ty}</code>\\\n                  </span>\",\n-                id = id,\n-                name = name,\n                 shortty = ItemType::StructField,\n                 ty = ty.print(cx),\n             );\n             if let Some(stability_class) = field.stability_class(cx.tcx()) {\n-                write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n+                write!(w, \"<span class=\\\"stab {stability_class}\\\"></span>\");\n             }\n             document(w, cx, field, Some(it), HeadingOffset::H3);\n         }\n@@ -1242,7 +1240,6 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                 w,\n                 \"<section id=\\\"{id}\\\" class=\\\"variant\\\">\\\n                     <a href=\\\"#{id}\\\" class=\\\"anchor\\\">\u00a7</a>\",\n-                id = id,\n             );\n             render_stability_since_raw_with_extra(\n                 w,\n@@ -1280,8 +1277,11 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n             if let Some((heading, fields)) = heading_and_fields {\n                 let variant_id =\n                     cx.derive_id(format!(\"{}.{}.fields\", ItemType::Variant, variant.name.unwrap()));\n-                write!(w, \"<div class=\\\"sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n-                write!(w, \"<h4>{heading}</h4>\", heading = heading);\n+                write!(\n+                    w,\n+                    \"<div class=\\\"sub-variant\\\" id=\\\"{variant_id}\\\">\\\n+                        <h4>{heading}</h4>\",\n+                );\n                 document_non_exhaustive(w, variant);\n                 for field in fields {\n                     match *field.kind {\n@@ -1299,7 +1299,6 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                                      <a href=\\\"#{id}\\\" class=\\\"anchor field\\\">\u00a7</a>\\\n                                      <code>{f}: {t}</code>\\\n                                  </span>\",\n-                                id = id,\n                                 f = field.name.unwrap(),\n                                 t = ty.print(cx)\n                             );\n@@ -1450,11 +1449,9 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n                          <a href=\\\"#{id}\\\" class=\\\"anchor field\\\">\u00a7</a>\\\n-                         <code>{name}: {ty}</code>\\\n+                         <code>{field_name}: {ty}</code>\\\n                      </span>\",\n                     item_type = ItemType::StructField,\n-                    id = id,\n-                    name = field_name,\n                     ty = ty.print(cx)\n                 );\n                 document(w, cx, field, Some(it), HeadingOffset::H3);\n@@ -1842,8 +1839,8 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n         if layout.abi.is_unsized() {\n             write!(w, \"(unsized)\");\n         } else {\n-            let bytes = layout.size.bytes() - tag_size;\n-            write!(w, \"{size} byte{pl}\", size = bytes, pl = if bytes == 1 { \"\" } else { \"s\" },);\n+            let size = layout.size.bytes() - tag_size;\n+            write!(w, \"{size} byte{pl}\", pl = if size == 1 { \"\" } else { \"s\" },);\n         }\n     }\n \n@@ -1898,7 +1895,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n \n                     for (index, layout) in variants.iter_enumerated() {\n                         let name = adt.variant(index).name;\n-                        write!(w, \"<li><code>{name}</code>: \", name = name);\n+                        write!(w, \"<li><code>{name}</code>: \");\n                         write_size_of_layout(w, layout, tag_size);\n                         writeln!(w, \"</li>\");\n                     }"}]}