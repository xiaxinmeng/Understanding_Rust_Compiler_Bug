{"sha": "e04661e495cde89827d768788f123eafdbd43911", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDY2MWU0OTVjZGU4OTgyN2Q3Njg3ODhmMTIzZWFmZGJkNDM5MTE=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-01-14T17:32:26Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-01-14T17:32:26Z"}, "message": "Fix casing", "tree": {"sha": "71916cc87c85ea962a14325a843e7fa33249ce93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71916cc87c85ea962a14325a843e7fa33249ce93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e04661e495cde89827d768788f123eafdbd43911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e04661e495cde89827d768788f123eafdbd43911", "html_url": "https://github.com/rust-lang/rust/commit/e04661e495cde89827d768788f123eafdbd43911", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e04661e495cde89827d768788f123eafdbd43911/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb82c334d98d7eb608d076fda95923647d61043", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb82c334d98d7eb608d076fda95923647d61043", "html_url": "https://github.com/rust-lang/rust/commit/4cb82c334d98d7eb608d076fda95923647d61043"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "f910349670590b8cc47fd414863017b78ebdd560", "filename": "crates/ra_assists/src/assists/add_custom_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_custom_impl.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n     let start_offset = annotated.syntax().parent()?.text_range().end();\n \n     let label =\n-        format!(\"Add Custom impl '{}' for '{}'\", trait_token.text().as_str(), annotated_name);\n+        format!(\"Add custom impl '{}' for '{}'\", trait_token.text().as_str(), annotated_name);\n \n     ctx.add_assist(AssistId(\"add_custom_impl\"), label, |edit| {\n         edit.target(attr.syntax().text_range());"}, {"sha": "f9f826b889332054ef0812d1f9bfbdb102939e59", "filename": "crates/ra_assists/src/assists/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_explicit_type.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn add_explicit_type(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n \n     ctx.add_assist(\n         AssistId(\"add_explicit_type\"),\n-        format!(\"Insert Explicit Type '{}'\", ty.display(db)),\n+        format!(\"Insert explicit type '{}'\", ty.display(db)),\n         |edit| {\n             edit.target(pat_range);\n             edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));"}, {"sha": "5bb937bdef86e54229e6ca23b12019b53847bf4b", "filename": "crates/ra_assists/src/assists/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_missing_impl_members.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -48,7 +48,7 @@ pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Opti\n         ctx,\n         AddMissingImplMembersMode::NoDefaultMethods,\n         \"add_impl_missing_members\",\n-        \"Implement Missing Members\",\n+        \"Implement missing members\",\n     )\n }\n \n@@ -89,7 +89,7 @@ pub(crate) fn add_missing_default_members(ctx: AssistCtx<impl HirDatabase>) -> O\n         ctx,\n         AddMissingImplMembersMode::DefaultMethodsOnly,\n         \"add_impl_default_members\",\n-        \"Implement Default Members\",\n+        \"Implement default members\",\n     )\n }\n "}, {"sha": "d148d6e7311532399a3f730dfee3068879e91a16", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn add_new(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     // Return early if we've found an existing new fn\n     let impl_block = find_struct_impl(&ctx, &strukt)?;\n \n-    ctx.add_assist(AssistId(\"add_new\"), \"Add Default Constructor\", |edit| {\n+    ctx.add_assist(AssistId(\"add_new\"), \"Add default constructor\", |edit| {\n         edit.target(strukt.syntax().text_range());\n \n         let mut buf = String::with_capacity(512);"}, {"sha": "666dce4e6076c7245d01529795f734fefbe63f60", "filename": "crates/ra_assists/src/assists/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fapply_demorgan.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn apply_demorgan(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist>\n     let not_lhs = invert_boolean_expression(&lhs)?;\n     let not_rhs = invert_boolean_expression(&rhs)?;\n \n-    ctx.add_assist(AssistId(\"apply_demorgan\"), \"Apply Demorgan's Law\", |edit| {\n+    ctx.add_assist(AssistId(\"apply_demorgan\"), \"Apply De Morgan's law\", |edit| {\n         edit.target(op_range);\n         edit.replace(op_range, opposite_op);\n         edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));"}, {"sha": "fd766bb460650af46bb9e30dd4daa83081bb85ba", "filename": "crates/ra_assists/src/assists/change_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fchange_visibility.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -57,7 +57,7 @@ fn add_vis(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         (vis_offset(field.syntax()), ident.text_range())\n     };\n \n-    ctx.add_assist(AssistId(\"change_visibility\"), \"Change Visibility to pub(crate)\", |edit| {\n+    ctx.add_assist(AssistId(\"change_visibility\"), \"Change visibility to pub(crate)\", |edit| {\n         edit.target(target);\n         edit.insert(offset, \"pub(crate) \");\n         edit.set_cursor(offset);\n@@ -88,7 +88,7 @@ fn change_vis(ctx: AssistCtx<impl HirDatabase>, vis: ast::Visibility) -> Option<\n         );\n     }\n     if vis.syntax().text() == \"pub(crate)\" {\n-        return ctx.add_assist(AssistId(\"change_visibility\"), \"Change Visibility to pub\", |edit| {\n+        return ctx.add_assist(AssistId(\"change_visibility\"), \"Change visibility to pub\", |edit| {\n             edit.target(vis.syntax().text_range());\n             edit.replace(vis.syntax().text_range(), \"pub\");\n             edit.set_cursor(vis.syntax().text_range().start());"}, {"sha": "487ee9eef2d8e2fec52fe47c24e0c99959f57a1e", "filename": "crates/ra_assists/src/assists/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fearly_return.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -95,7 +95,7 @@ pub(crate) fn convert_to_guarded_return(ctx: AssistCtx<impl HirDatabase>) -> Opt\n     then_block.syntax().last_child_or_token().filter(|t| t.kind() == R_CURLY)?;\n     let cursor_position = ctx.frange.range.start();\n \n-    ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"Convert to Guarded Return\", |edit| {\n+    ctx.add_assist(AssistId(\"convert_to_guarded_return\"), \"Convert to guarded return\", |edit| {\n         let if_indent_level = IndentLevel::from_node(&if_expr.syntax());\n         let new_block = match if_let_pat {\n             None => {"}, {"sha": "01758d23aad6755c5f8b00929abfc803ea55bf0a", "filename": "crates/ra_assists/src/assists/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Ffill_match_arms.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -57,7 +57,7 @@ pub(crate) fn fill_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n \n     let db = ctx.db;\n \n-    ctx.add_assist(AssistId(\"fill_match_arms\"), \"Fill Match Arms\", |edit| {\n+    ctx.add_assist(AssistId(\"fill_match_arms\"), \"Fill match arms\", |edit| {\n         let indent_level = IndentLevel::from_node(match_arm_list.syntax());\n \n         let new_arm_list = {"}, {"sha": "2074087cd0bcff5d087c057b10622559992d4c68", "filename": "crates/ra_assists/src/assists/flip_binexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_binexpr.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -34,7 +34,7 @@ pub(crate) fn flip_binexpr(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"flip_binexpr\"), \"Flip Binary Expression\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_binexpr\"), \"Flip binary expression\", |edit| {\n         edit.target(op_range);\n         if let FlipAction::FlipAndReplaceOp(new_op) = action {\n             edit.replace(op_range, new_op);"}, {"sha": "dd0c405edae1ea9f34726ec2a0956f0491099316", "filename": "crates/ra_assists/src/assists/flip_comma.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_comma.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn flip_comma(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         return None;\n     }\n \n-    ctx.add_assist(AssistId(\"flip_comma\"), \"Flip Comma\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_comma\"), \"Flip comma\", |edit| {\n         edit.target(comma.text_range());\n         edit.replace(prev.text_range(), next.to_string());\n         edit.replace(next.text_range(), prev.to_string());"}, {"sha": "50b3fa4927d1bd8b654aead8a4a02e7e7e102268", "filename": "crates/ra_assists/src/assists/flip_trait_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fflip_trait_bound.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -33,7 +33,7 @@ pub(crate) fn flip_trait_bound(ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n         non_trivia_sibling(plus.clone().into(), Direction::Next)?,\n     );\n \n-    ctx.add_assist(AssistId(\"flip_trait_bound\"), \"Flip Trait Bounds\", |edit| {\n+    ctx.add_assist(AssistId(\"flip_trait_bound\"), \"Flip trait bounds\", |edit| {\n         edit.target(plus.text_range());\n         edit.replace(before.text_range(), after.to_string());\n         edit.replace(after.text_range(), before.to_string());"}, {"sha": "164aee90cdaaf29ecb3f54f7a6095a363a521240", "filename": "crates/ra_assists/src/assists/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finline_local_variable.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn inline_local_varialbe(ctx: AssistCtx<impl HirDatabase>) -> Option<\n \n     ctx.add_assist(\n         AssistId(\"inline_local_variable\"),\n-        \"Inline Variable\",\n+        \"Inline variable\",\n         move |edit: &mut AssistBuilder| {\n             edit.delete(delete_range);\n             for (desc, should_wrap) in refs.iter().zip(wrap_in_parens) {"}, {"sha": "19e211e0f022c215a8458eb37606ac7cd4f21318", "filename": "crates/ra_assists/src/assists/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fintroduce_variable.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx<impl HirDatabase>) -> Option<Ass\n     if indent.kind() != WHITESPACE {\n         return None;\n     }\n-    ctx.add_assist(AssistId(\"introduce_variable\"), \"Extract into Variable\", move |edit| {\n+    ctx.add_assist(AssistId(\"introduce_variable\"), \"Extract into variable\", move |edit| {\n         let mut buf = String::new();\n \n         let cursor_offset = if wrap_in_block {"}, {"sha": "16352c0405c39349a47d356cf40e138e3939d232", "filename": "crates/ra_assists/src/assists/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Finvert_if.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn invert_if(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         let else_node = else_block.syntax();\n         let else_range = else_node.text_range();\n         let then_range = then_node.text_range();\n-        return ctx.add_assist(AssistId(\"invert_if\"), \"Invert If\", |edit| {\n+        return ctx.add_assist(AssistId(\"invert_if\"), \"Invert if\", |edit| {\n             edit.target(if_range);\n             edit.replace(cond_range, flip_cond.syntax().text());\n             edit.replace(else_range, then_node.text());"}, {"sha": "aca391155f37960cd11d5c94cc0906584e821669", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -52,7 +52,7 @@ pub(crate) fn merge_match_arms(ctx: AssistCtx<impl HirDatabase>) -> Option<Assis\n \n     let cursor_to_end = current_arm.syntax().text_range().end() - ctx.frange.range.start();\n \n-    ctx.add_assist(AssistId(\"merge_match_arms\"), \"Merge Match Arms\", |edit| {\n+    ctx.add_assist(AssistId(\"merge_match_arms\"), \"Merge match arms\", |edit| {\n         fn contains_placeholder(a: &MatchArm) -> bool {\n             a.pats().any(|x| match x {\n                 ra_syntax::ast::Pat::PlaceholderPat(..) => true,"}, {"sha": "355adddc3642471c0d4d910f6d27df58c466ddb0", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn move_bounds_to_where_clause(ctx: AssistCtx<impl HirDatabase>) -> O\n         _ => return None,\n     };\n \n-    ctx.add_assist(AssistId(\"move_bounds_to_where_clause\"), \"Move to Where Clause\", |edit| {\n+    ctx.add_assist(AssistId(\"move_bounds_to_where_clause\"), \"Move to where clause\", |edit| {\n         let new_params = type_param_list\n             .type_params()\n             .filter(|it| it.type_bound_list().is_some())"}, {"sha": "41a31e6775ee45952bac08c3a301cedf2501920e", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx<impl HirDatabase>) -> Option\n     let arm_expr = match_arm.expr()?;\n     let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n \n-    ctx.add_assist(AssistId(\"move_guard_to_arm_body\"), \"Move Guard to Arm Body\", |edit| {\n+    ctx.add_assist(AssistId(\"move_guard_to_arm_body\"), \"Move guard to arm body\", |edit| {\n         edit.target(guard.syntax().text_range());\n         let offseting_amount = match space_before_guard.and_then(|it| it.into_token()) {\n             Some(tok) => {\n@@ -111,7 +111,7 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx<impl HirDatabase>) ->\n \n     ctx.add_assist(\n         AssistId(\"move_arm_cond_to_match_guard\"),\n-        \"move condition to match guard\",\n+        \"Move condition to match guard\",\n         |edit| {\n             edit.target(if_expr.syntax().text_range());\n             let then_only_expr = then_block.block().and_then(|it| it.statements().next()).is_none();"}, {"sha": "e79c51673c187b7d5ffa345948dba122c4cb6c67", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -25,7 +25,7 @@ use crate::{Assist, AssistCtx, AssistId};\n pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n     let value = token.value()?;\n-    ctx.add_assist(AssistId(\"make_raw_string\"), \"Rewrite as Raw String\", |edit| {\n+    ctx.add_assist(AssistId(\"make_raw_string\"), \"Rewrite as raw string\", |edit| {\n         edit.target(token.syntax().text_range());\n         let max_hash_streak = count_hashes(&value);\n         let mut hashes = String::with_capacity(max_hash_streak + 1);\n@@ -54,7 +54,7 @@ pub(crate) fn make_raw_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING).and_then(ast::RawString::cast)?;\n     let value = token.value()?;\n-    ctx.add_assist(AssistId(\"make_usual_string\"), \"Rewrite as Regular String\", |edit| {\n+    ctx.add_assist(AssistId(\"make_usual_string\"), \"Rewrite as regular string\", |edit| {\n         edit.target(token.syntax().text_range());\n         // parse inside string to escape `\"`\n         let escaped = value.escape_default().to_string();\n@@ -79,7 +79,7 @@ pub(crate) fn make_usual_string(ctx: AssistCtx<impl HirDatabase>) -> Option<Assi\n // ```\n pub(crate) fn add_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let token = ctx.find_token_at_offset(RAW_STRING)?;\n-    ctx.add_assist(AssistId(\"add_hash\"), \"Add # to Raw String\", |edit| {\n+    ctx.add_assist(AssistId(\"add_hash\"), \"Add # to raw string\", |edit| {\n         edit.target(token.text_range());\n         edit.insert(token.text_range().start() + TextUnit::of_char('r'), \"#\");\n         edit.insert(token.text_range().end(), \"#\");\n@@ -108,7 +108,7 @@ pub(crate) fn remove_hash(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         // no hash to remove\n         return None;\n     }\n-    ctx.add_assist(AssistId(\"remove_hash\"), \"remove hash from raw string\", |edit| {\n+    ctx.add_assist(AssistId(\"remove_hash\"), \"Remove hash from raw string\", |edit| {\n         edit.target(token.text_range());\n         let result = &text[2..text.len() - 1];\n         let result = if result.starts_with('\\\"') {"}, {"sha": "c9b62e5ff4053b75dd6162c11456831386c73284", "filename": "crates/ra_assists/src/assists/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Freplace_if_let_with_match.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx<impl HirDatabase>) -> Opt\n         ast::ElseBranch::IfExpr(_) => return None,\n     };\n \n-    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with Match\", |edit| {\n+    ctx.add_assist(AssistId(\"replace_if_let_with_match\"), \"Replace with match\", |edit| {\n         let match_expr = build_match_expr(expr, pat, then_block, else_block);\n         edit.target(if_expr.syntax().text_range());\n         edit.replace_node_and_indent(if_expr.syntax(), match_expr);"}, {"sha": "6038c48587bf567b43d6206a259a8f503ba13973", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn split_import(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n         None => top_path.syntax().text_range().end(),\n     };\n \n-    ctx.add_assist(AssistId(\"split_import\"), \"Split Import\", |edit| {\n+    ctx.add_assist(AssistId(\"split_import\"), \"Split import\", |edit| {\n         edit.target(colon_colon.text_range());\n         edit.insert(l_curly, \"{\");\n         edit.insert(r_curly, \"}\");"}, {"sha": "150b34ac7124282daf3b70ed75f89ebf2d2bce29", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04661e495cde89827d768788f123eafdbd43911/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=e04661e495cde89827d768788f123eafdbd43911", "patch": "@@ -292,8 +292,11 @@ mod tests {\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();\n \n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"make pub(crate)\");\n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"add `#[derive]`\");\n+        assert_eq!(\n+            assists.next().expect(\"expected assist\").0.label,\n+            \"Change visibility to pub(crate)\"\n+        );\n+        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Add `#[derive]`\");\n     }\n \n     #[test]\n@@ -312,7 +315,7 @@ mod tests {\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();\n \n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"introduce variable\");\n-        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"replace with match\");\n+        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Extract into variable\");\n+        assert_eq!(assists.next().expect(\"expected assist\").0.label, \"Replace with match\");\n     }\n }"}]}