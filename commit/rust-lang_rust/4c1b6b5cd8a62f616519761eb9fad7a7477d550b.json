{"sha": "4c1b6b5cd8a62f616519761eb9fad7a7477d550b", "node_id": "C_kwDOAAsO6NoAKDRjMWI2YjVjZDhhNjJmNjE2NTE5NzYxZWI5ZmFkN2E3NDc3ZDU1MGI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-09-02T09:34:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-02T09:34:53Z"}, "message": "Rollup merge of #101294 - Xiretza:fix-100844-accident, r=davidtwco\n\nFix #100844 rebase accident\n\nThis undoes the rebase accident in #100844, which accidentally caused #100970 to be reverted.", "tree": {"sha": "5d0608c8369e2e96e65d8c5350ccb939722aac19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d0608c8369e2e96e65d8c5350ccb939722aac19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c1b6b5cd8a62f616519761eb9fad7a7477d550b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEc49CRBK7hj4Ov3rIwAAMc0IAFLBsBNVE3J6A6xf0JdqZYs+\n/CLmq6K92A8+aIfaqpOkWEbdvtmFy8dB6lNyKd2BHtDBNwMyNgr5Vow0ajd2PzL6\nCucUwfVxok5n6w1+mXiHKwHPuC7aFPJ9pNOVOVibqGg3Bk3hZwSKJSJoSXaepR6s\nQcECYu3N0v6jsmXERh8PT2pcVxNYA0OpcyENaXy3lSZ1SMO707VFiEHViZkbZlTI\nISvB32k45tXGgAa90tYhbQ+mUWCk/kp4Ko5hdFNzAbw6YyenG5fqOaHyub9+9PK4\nzOKRVaF5RbxZjXJZLOXS4/QFjD2qNVVKDRwwLdXGoZK+qOTGdQWwqSEYucwAAD0=\n=QcBL\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d0608c8369e2e96e65d8c5350ccb939722aac19\nparent 68d3cfac47c4ccd6d057045ff00d0e2e9e46e800\nparent d9b874c083936fa14d139fec243f9df0897fdf09\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1662111293 +0200\ncommitter GitHub <noreply@github.com> 1662111293 +0200\n\nRollup merge of #101294 - Xiretza:fix-100844-accident, r=davidtwco\n\nFix #100844 rebase accident\n\nThis undoes the rebase accident in #100844, which accidentally caused #100970 to be reverted.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1b6b5cd8a62f616519761eb9fad7a7477d550b", "html_url": "https://github.com/rust-lang/rust/commit/4c1b6b5cd8a62f616519761eb9fad7a7477d550b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c1b6b5cd8a62f616519761eb9fad7a7477d550b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d3cfac47c4ccd6d057045ff00d0e2e9e46e800", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d3cfac47c4ccd6d057045ff00d0e2e9e46e800", "html_url": "https://github.com/rust-lang/rust/commit/68d3cfac47c4ccd6d057045ff00d0e2e9e46e800"}, {"sha": "d9b874c083936fa14d139fec243f9df0897fdf09", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b874c083936fa14d139fec243f9df0897fdf09", "html_url": "https://github.com/rust-lang/rust/commit/d9b874c083936fa14d139fec243f9df0897fdf09"}], "stats": {"total": 1120, "additions": 777, "deletions": 343}, "files": [{"sha": "dce5d3cfb84ff05b87aeceb2f47148e9bb55eed1", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 478, "deletions": 258, "changes": 736, "blob_url": "https://github.com/rust-lang/rust/blob/4c1b6b5cd8a62f616519761eb9fad7a7477d550b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1b6b5cd8a62f616519761eb9fad7a7477d550b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=4c1b6b5cd8a62f616519761eb9fad7a7477d550b", "patch": "@@ -12,7 +12,7 @@ use quote::{format_ident, quote};\n use std::collections::HashMap;\n use std::fmt;\n use std::str::FromStr;\n-use syn::{spanned::Spanned, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n+use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n /// Which kind of suggestion is being created?\n@@ -28,8 +28,41 @@ enum SubdiagnosticSuggestionKind {\n     Verbose,\n }\n \n+impl FromStr for SubdiagnosticSuggestionKind {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"\" => Ok(SubdiagnosticSuggestionKind::Normal),\n+            \"_short\" => Ok(SubdiagnosticSuggestionKind::Short),\n+            \"_hidden\" => Ok(SubdiagnosticSuggestionKind::Hidden),\n+            \"_verbose\" => Ok(SubdiagnosticSuggestionKind::Verbose),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl SubdiagnosticSuggestionKind {\n+    pub fn to_suggestion_style(&self) -> TokenStream {\n+        match self {\n+            SubdiagnosticSuggestionKind::Normal => {\n+                quote! { rustc_errors::SuggestionStyle::ShowCode }\n+            }\n+            SubdiagnosticSuggestionKind::Short => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeInline }\n+            }\n+            SubdiagnosticSuggestionKind::Hidden => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeAlways }\n+            }\n+            SubdiagnosticSuggestionKind::Verbose => {\n+                quote! { rustc_errors::SuggestionStyle::ShowAlways }\n+            }\n+        }\n+    }\n+}\n+\n /// Which kind of subdiagnostic is being created from a variant?\n-#[derive(Clone, Copy)]\n+#[derive(Clone)]\n enum SubdiagnosticKind {\n     /// `#[label(...)]`\n     Label,\n@@ -40,31 +73,9 @@ enum SubdiagnosticKind {\n     /// `#[warning(...)]`\n     Warn,\n     /// `#[suggestion{,_short,_hidden,_verbose}]`\n-    Suggestion(SubdiagnosticSuggestionKind),\n-}\n-\n-impl FromStr for SubdiagnosticKind {\n-    type Err = ();\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"label\" => Ok(SubdiagnosticKind::Label),\n-            \"note\" => Ok(SubdiagnosticKind::Note),\n-            \"help\" => Ok(SubdiagnosticKind::Help),\n-            \"warning\" => Ok(SubdiagnosticKind::Warn),\n-            \"suggestion\" => Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal)),\n-            \"suggestion_short\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short))\n-            }\n-            \"suggestion_hidden\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Hidden))\n-            }\n-            \"suggestion_verbose\" => {\n-                Ok(SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Verbose))\n-            }\n-            _ => Err(()),\n-        }\n-    }\n+    Suggestion { suggestion_kind: SubdiagnosticSuggestionKind, code: TokenStream },\n+    /// `#[multipart_suggestion{,_short,_hidden,_verbose}]`\n+    MultipartSuggestion { suggestion_kind: SubdiagnosticSuggestionKind },\n }\n \n impl quote::IdentFragment for SubdiagnosticKind {\n@@ -74,17 +85,9 @@ impl quote::IdentFragment for SubdiagnosticKind {\n             SubdiagnosticKind::Note => write!(f, \"note\"),\n             SubdiagnosticKind::Help => write!(f, \"help\"),\n             SubdiagnosticKind::Warn => write!(f, \"warn\"),\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Normal) => {\n-                write!(f, \"suggestion\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Short) => {\n-                write!(f, \"suggestion_short\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Hidden) => {\n-                write!(f, \"suggestion_hidden\")\n-            }\n-            SubdiagnosticKind::Suggestion(SubdiagnosticSuggestionKind::Verbose) => {\n-                write!(f, \"suggestion_verbose\")\n+            SubdiagnosticKind::Suggestion { .. } => write!(f, \"suggestion_with_style\"),\n+            SubdiagnosticKind::MultipartSuggestion { .. } => {\n+                write!(f, \"multipart_suggestion_with_style\")\n             }\n         }\n     }\n@@ -148,11 +151,9 @@ impl<'a> SessionSubdiagnosticDerive<'a> {\n                     variant,\n                     span,\n                     fields: fields_map,\n-                    kinds: Vec::new(),\n-                    slugs: Vec::new(),\n-                    code: None,\n                     span_field: None,\n                     applicability: None,\n+                    has_suggestion_parts: false,\n                 };\n                 builder.into_tokens().unwrap_or_else(|v| v.to_compile_error())\n             });\n@@ -193,21 +194,15 @@ struct SessionSubdiagnosticDeriveBuilder<'a> {\n     /// derive builder.\n     fields: HashMap<String, TokenStream>,\n \n-    /// Subdiagnostic kind of the type/variant.\n-    kinds: Vec<(SubdiagnosticKind, proc_macro::Span)>,\n-\n-    /// Slugs of the subdiagnostic - corresponds to the Fluent identifier for the message - from the\n-    /// `#[kind(slug)]` attribute on the type or variant.\n-    slugs: Vec<(Path, proc_macro::Span)>,\n-    /// If a suggestion, the code to suggest as a replacement - from the `#[kind(code = \"...\")]`\n-    /// attribute on the type or variant.\n-    code: Option<(TokenStream, proc_macro::Span)>,\n-\n     /// Identifier for the binding to the `#[primary_span]` field.\n     span_field: Option<(proc_macro2::Ident, proc_macro::Span)>,\n     /// If a suggestion, the identifier for the binding to the `#[applicability]` field or a\n     /// `rustc_errors::Applicability::*` variant directly.\n     applicability: Option<(TokenStream, proc_macro::Span)>,\n+\n+    /// Set to true when a `#[suggestion_part]` field is encountered, used to generate an error\n+    /// during finalization if still `false`.\n+    has_suggestion_parts: bool,\n }\n \n impl<'a> HasFieldMap for SessionSubdiagnosticDeriveBuilder<'a> {\n@@ -216,272 +211,497 @@ impl<'a> HasFieldMap for SessionSubdiagnosticDeriveBuilder<'a> {\n     }\n }\n \n+/// Provides frequently-needed information about the diagnostic kinds being derived for this type.\n+#[derive(Clone, Copy, Debug)]\n+struct KindsStatistics {\n+    has_multipart_suggestion: bool,\n+    all_multipart_suggestions: bool,\n+    has_normal_suggestion: bool,\n+}\n+\n+impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n+    fn from_iter<T: IntoIterator<Item = &'a SubdiagnosticKind>>(kinds: T) -> Self {\n+        let mut ret = Self {\n+            has_multipart_suggestion: false,\n+            all_multipart_suggestions: true,\n+            has_normal_suggestion: false,\n+        };\n+        for kind in kinds {\n+            if let SubdiagnosticKind::MultipartSuggestion { .. } = kind {\n+                ret.has_multipart_suggestion = true;\n+            } else {\n+                ret.all_multipart_suggestions = false;\n+            }\n+\n+            if let SubdiagnosticKind::Suggestion { .. } = kind {\n+                ret.has_normal_suggestion = true;\n+            }\n+        }\n+        ret\n+    }\n+}\n+\n impl<'a> SessionSubdiagnosticDeriveBuilder<'a> {\n-    fn identify_kind(&mut self) -> Result<(), DiagnosticDeriveError> {\n-        for (i, attr) in self.variant.ast().attrs.iter().enumerate() {\n+    fn identify_kind(&mut self) -> Result<Vec<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n+        let mut kind_slugs = vec![];\n+\n+        for attr in self.variant.ast().attrs {\n             let span = attr.span().unwrap();\n \n             let name = attr.path.segments.last().unwrap().ident.to_string();\n             let name = name.as_str();\n \n             let meta = attr.parse_meta()?;\n-            let kind = match meta {\n-                Meta::List(MetaList { ref nested, .. }) => {\n-                    let mut nested_iter = nested.into_iter();\n-                    if let Some(nested_attr) = nested_iter.next() {\n-                        match nested_attr {\n-                            NestedMeta::Meta(Meta::Path(path)) => {\n-                                self.slugs.push((path.clone(), span));\n-                            }\n-                            NestedMeta::Meta(meta @ Meta::NameValue(_))\n-                                if matches!(\n-                                    meta.path().segments.last().unwrap().ident.to_string().as_str(),\n-                                    \"code\" | \"applicability\"\n-                                ) =>\n-                            {\n-                                // don't error for valid follow-up attributes\n-                            }\n-                            nested_attr => {\n-                                throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                    diag.help(\n-                                        \"first argument of the attribute should be the diagnostic \\\n-                                         slug\",\n-                                    )\n-                                })\n-                            }\n-                        };\n-                    }\n+            let Meta::List(MetaList { ref nested, .. }) = meta else {\n+                throw_invalid_attr!(attr, &meta);\n+            };\n \n-                    for nested_attr in nested_iter {\n-                        let meta = match nested_attr {\n-                            NestedMeta::Meta(ref meta) => meta,\n-                            _ => throw_invalid_nested_attr!(attr, &nested_attr),\n-                        };\n-\n-                        let span = meta.span().unwrap();\n-                        let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n-                        let nested_name = nested_name.as_str();\n-\n-                        match meta {\n-                            Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n-                                match nested_name {\n-                                    \"code\" => {\n-                                        let formatted_str = self.build_format(&s.value(), s.span());\n-                                        self.code.set_once((formatted_str, span));\n-                                    }\n-                                    \"applicability\" => {\n-                                        let value = match Applicability::from_str(&s.value()) {\n-                                            Ok(v) => v,\n-                                            Err(()) => {\n-                                                span_err(span, \"invalid applicability\").emit();\n-                                                Applicability::Unspecified\n-                                            }\n-                                        };\n-                                        self.applicability.set_once((quote! { #value }, span));\n-                                    }\n-                                    _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                        diag.help(\n-                                            \"only `code` and `applicability` are valid nested \\\n-                                             attributes\",\n-                                        )\n-                                    }),\n-                                }\n-                            }\n-                            _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                                if matches!(meta, Meta::Path(_)) {\n-                                    diag.help(\n-                                        \"a diagnostic slug must be the first argument to the \\\n-                                         attribute\",\n-                                    )\n-                                } else {\n-                                    diag\n-                                }\n-                            }),\n-                        }\n+            let mut kind = match name {\n+                \"label\" => SubdiagnosticKind::Label,\n+                \"note\" => SubdiagnosticKind::Note,\n+                \"help\" => SubdiagnosticKind::Help,\n+                \"warning\" => SubdiagnosticKind::Warn,\n+                _ => {\n+                    if let Some(suggestion_kind) =\n+                        name.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n+                    {\n+                        SubdiagnosticKind::Suggestion { suggestion_kind, code: TokenStream::new() }\n+                    } else if let Some(suggestion_kind) =\n+                        name.strip_prefix(\"multipart_suggestion\").and_then(|s| s.parse().ok())\n+                    {\n+                        SubdiagnosticKind::MultipartSuggestion { suggestion_kind }\n+                    } else {\n+                        throw_invalid_attr!(attr, &meta);\n                     }\n-\n-                    let Ok(kind) = SubdiagnosticKind::from_str(name) else {\n-                        throw_invalid_attr!(attr, &meta)\n-                    };\n-\n-                    kind\n                 }\n-                _ => throw_invalid_attr!(attr, &meta),\n             };\n \n-            if matches!(\n-                kind,\n-                SubdiagnosticKind::Label | SubdiagnosticKind::Help | SubdiagnosticKind::Note\n-            ) && self.code.is_some()\n-            {\n-                throw_span_err!(\n-                    span,\n-                    &format!(\"`code` is not a valid nested attribute of a `{}` attribute\", name)\n-                );\n+            let mut slug = None;\n+            let mut code = None;\n+\n+            let mut nested_iter = nested.into_iter();\n+            if let Some(nested_attr) = nested_iter.next() {\n+                match nested_attr {\n+                    NestedMeta::Meta(Meta::Path(path)) => {\n+                        slug.set_once((path.clone(), span));\n+                    }\n+                    NestedMeta::Meta(meta @ Meta::NameValue(_))\n+                        if matches!(\n+                            meta.path().segments.last().unwrap().ident.to_string().as_str(),\n+                            \"code\" | \"applicability\"\n+                        ) =>\n+                    {\n+                        // Don't error for valid follow-up attributes.\n+                    }\n+                    nested_attr => {\n+                        throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                            diag.help(\n+                                \"first argument of the attribute should be the diagnostic \\\n+                                 slug\",\n+                            )\n+                        })\n+                    }\n+                };\n             }\n \n-            if matches!(\n-                kind,\n-                SubdiagnosticKind::Label | SubdiagnosticKind::Help | SubdiagnosticKind::Note\n-            ) && self.applicability.is_some()\n-            {\n-                throw_span_err!(\n-                    span,\n-                    &format!(\n-                        \"`applicability` is not a valid nested attribute of a `{}` attribute\",\n-                        name\n-                    )\n-                );\n+            for nested_attr in nested_iter {\n+                let meta = match nested_attr {\n+                    NestedMeta::Meta(ref meta) => meta,\n+                    _ => throw_invalid_nested_attr!(attr, &nested_attr),\n+                };\n+\n+                let span = meta.span().unwrap();\n+                let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+                let nested_name = nested_name.as_str();\n+\n+                let value = match meta {\n+                    Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) => value,\n+                    Meta::Path(_) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                        diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n+                    }),\n+                    _ => throw_invalid_nested_attr!(attr, &nested_attr),\n+                };\n+\n+                match nested_name {\n+                    \"code\" => {\n+                        if matches!(kind, SubdiagnosticKind::Suggestion { .. }) {\n+                            let formatted_str = self.build_format(&value.value(), value.span());\n+                            code.set_once((formatted_str, span));\n+                        } else {\n+                            span_err(\n+                                span,\n+                                &format!(\n+                                    \"`code` is not a valid nested attribute of a `{}` attribute\",\n+                                    name\n+                                ),\n+                            )\n+                            .emit();\n+                        }\n+                    }\n+                    \"applicability\" => {\n+                        if matches!(\n+                            kind,\n+                            SubdiagnosticKind::Suggestion { .. }\n+                                | SubdiagnosticKind::MultipartSuggestion { .. }\n+                        ) {\n+                            let value =\n+                                Applicability::from_str(&value.value()).unwrap_or_else(|()| {\n+                                    span_err(span, \"invalid applicability\").emit();\n+                                    Applicability::Unspecified\n+                                });\n+                            self.applicability.set_once((quote! { #value }, span));\n+                        } else {\n+                            span_err(\n+                                span,\n+                                &format!(\n+                                    \"`applicability` is not a valid nested attribute of a `{}` attribute\",\n+                                    name\n+                                )\n+                            ).emit();\n+                        }\n+                    }\n+                    _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                        diag.help(\"only `code` and `applicability` are valid nested attributes\")\n+                    }),\n+                }\n             }\n \n-            if self.slugs.len() != i + 1 {\n+            let Some((slug, _)) = slug else {\n                 throw_span_err!(\n                     span,\n                     &format!(\n                         \"diagnostic slug must be first argument of a `#[{}(...)]` attribute\",\n                         name\n                     )\n                 );\n+            };\n+\n+            match kind {\n+                SubdiagnosticKind::Suggestion { code: ref mut code_field, .. } => {\n+                    let Some((code, _)) = code else {\n+                        throw_span_err!(span, \"suggestion without `code = \\\"...\\\"`\");\n+                    };\n+                    *code_field = code;\n+                }\n+                SubdiagnosticKind::Label\n+                | SubdiagnosticKind::Note\n+                | SubdiagnosticKind::Help\n+                | SubdiagnosticKind::Warn\n+                | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n             }\n \n-            self.kinds.push((kind, span));\n+            kind_slugs.push((kind, slug))\n         }\n \n-        Ok(())\n+        Ok(kind_slugs)\n     }\n \n-    fn generate_field_code(\n+    /// Generates the code for a field with no attributes.\n+    fn generate_field_set_arg(&mut self, binding: &BindingInfo<'_>) -> TokenStream {\n+        let ast = binding.ast();\n+        assert_eq!(ast.attrs.len(), 0, \"field with attribute used as diagnostic arg\");\n+\n+        let diag = &self.diag;\n+        let ident = ast.ident.as_ref().unwrap();\n+        quote! {\n+            #diag.set_arg(\n+                stringify!(#ident),\n+                #binding\n+            );\n+        }\n+    }\n+\n+    /// Generates the necessary code for all attributes on a field.\n+    fn generate_field_attr_code(\n         &mut self,\n         binding: &BindingInfo<'_>,\n-        have_suggestion: bool,\n-    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        kind_stats: KindsStatistics,\n+    ) -> TokenStream {\n         let ast = binding.ast();\n+        assert!(ast.attrs.len() > 0, \"field without attributes generating attr code\");\n \n+        // Abstract over `Vec<T>` and `Option<T>` fields using `FieldInnerTy`, which will\n+        // apply the generated code on each element in the `Vec` or `Option`.\n         let inner_ty = FieldInnerTy::from_type(&ast.ty);\n-        let info = FieldInfo {\n-            binding: binding,\n-            ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n-            span: &ast.span(),\n-        };\n+        ast.attrs\n+            .iter()\n+            .map(|attr| {\n+                let info = FieldInfo {\n+                    binding,\n+                    ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n+                    span: &ast.span(),\n+                };\n \n-        for attr in &ast.attrs {\n-            let name = attr.path.segments.last().unwrap().ident.to_string();\n-            let name = name.as_str();\n-            let span = attr.span().unwrap();\n+                let generated = self\n+                    .generate_field_code_inner(kind_stats, attr, info)\n+                    .unwrap_or_else(|v| v.to_compile_error());\n \n-            let meta = attr.parse_meta()?;\n-            match meta {\n-                Meta::Path(_) => match name {\n-                    \"primary_span\" => {\n-                        report_error_if_not_applied_to_span(attr, &info)?;\n-                        self.span_field.set_once((binding.binding.clone(), span));\n-                        return Ok(quote! {});\n-                    }\n-                    \"applicability\" if have_suggestion => {\n-                        report_error_if_not_applied_to_applicability(attr, &info)?;\n-                        let binding = binding.binding.clone();\n-                        self.applicability.set_once((quote! { #binding }, span));\n-                        return Ok(quote! {});\n-                    }\n-                    \"applicability\" => {\n-                        span_err(span, \"`#[applicability]` is only valid on suggestions\").emit();\n-                        return Ok(quote! {});\n-                    }\n-                    \"skip_arg\" => {\n-                        return Ok(quote! {});\n-                    }\n-                    _ => throw_invalid_attr!(attr, &meta, |diag| {\n+                inner_ty.with(binding, generated)\n+            })\n+            .collect()\n+    }\n+\n+    fn generate_field_code_inner(\n+        &mut self,\n+        kind_stats: KindsStatistics,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let meta = attr.parse_meta()?;\n+        match meta {\n+            Meta::Path(path) => self.generate_field_code_inner_path(kind_stats, attr, info, path),\n+            Meta::List(list @ MetaList { .. }) => {\n+                self.generate_field_code_inner_list(kind_stats, attr, info, list)\n+            }\n+            _ => throw_invalid_attr!(attr, &meta),\n+        }\n+    }\n+\n+    /// Generates the code for a `[Meta::Path]`-like attribute on a field (e.g. `#[primary_span]`).\n+    fn generate_field_code_inner_path(\n+        &mut self,\n+        kind_stats: KindsStatistics,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+        path: Path,\n+    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let span = attr.span().unwrap();\n+        let ident = &path.segments.last().unwrap().ident;\n+        let name = ident.to_string();\n+        let name = name.as_str();\n+\n+        match name {\n+            \"skip_arg\" => Ok(quote! {}),\n+            \"primary_span\" => {\n+                if kind_stats.has_multipart_suggestion {\n+                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n                         diag.help(\n-                            \"only `primary_span`, `applicability` and `skip_arg` are valid field \\\n-                             attributes\",\n+                            \"multipart suggestions use one or more `#[suggestion_part]`s rather \\\n+                            than one `#[primary_span]`\",\n                         )\n-                    }),\n-                },\n-                _ => throw_invalid_attr!(attr, &meta),\n+                    })\n+                }\n+\n+                report_error_if_not_applied_to_span(attr, &info)?;\n+\n+                let binding = info.binding.binding.clone();\n+                self.span_field.set_once((binding, span));\n+\n+                Ok(quote! {})\n             }\n+            \"suggestion_part\" => {\n+                self.has_suggestion_parts = true;\n+\n+                if kind_stats.has_multipart_suggestion {\n+                    span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n+                        .emit();\n+                    Ok(quote! {})\n+                } else {\n+                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n+                        diag.help(\n+                                \"`#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\",\n+                            )\n+                    });\n+                }\n+            }\n+            \"applicability\" => {\n+                if kind_stats.has_multipart_suggestion || kind_stats.has_normal_suggestion {\n+                    report_error_if_not_applied_to_applicability(attr, &info)?;\n+\n+                    let binding = info.binding.binding.clone();\n+                    self.applicability.set_once((quote! { #binding }, span));\n+                } else {\n+                    span_err(span, \"`#[applicability]` is only valid on suggestions\").emit();\n+                }\n+\n+                Ok(quote! {})\n+            }\n+            _ => throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n+                let mut span_attrs = vec![];\n+                if kind_stats.has_multipart_suggestion {\n+                    span_attrs.push(\"suggestion_part\");\n+                }\n+                if !kind_stats.all_multipart_suggestions {\n+                    span_attrs.push(\"primary_span\")\n+                }\n+                diag.help(format!(\n+                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    span_attrs.join(\", \")\n+                ))\n+            }),\n         }\n+    }\n \n-        let ident = ast.ident.as_ref().unwrap();\n+    /// Generates the code for a `[Meta::List]`-like attribute on a field (e.g.\n+    /// `#[suggestion_part(code = \"...\")]`).\n+    fn generate_field_code_inner_list(\n+        &mut self,\n+        kind_stats: KindsStatistics,\n+        attr: &Attribute,\n+        info: FieldInfo<'_>,\n+        list: MetaList,\n+    ) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let span = attr.span().unwrap();\n+        let ident = &list.path.segments.last().unwrap().ident;\n+        let name = ident.to_string();\n+        let name = name.as_str();\n+\n+        match name {\n+            \"suggestion_part\" => {\n+                if !kind_stats.has_multipart_suggestion {\n+                    throw_invalid_attr!(attr, &Meta::List(list), |diag| {\n+                        diag.help(\n+                            \"`#[suggestion_part(...)]` is only valid in multipart suggestions\",\n+                        )\n+                    })\n+                }\n \n-        let diag = &self.diag;\n-        let generated = quote! {\n-            #diag.set_arg(\n-                stringify!(#ident),\n-                #binding\n-            );\n-        };\n+                self.has_suggestion_parts = true;\n+\n+                report_error_if_not_applied_to_span(attr, &info)?;\n+\n+                let mut code = None;\n+                for nested_attr in list.nested.iter() {\n+                    let NestedMeta::Meta(ref meta) = nested_attr else {\n+                        throw_invalid_nested_attr!(attr, &nested_attr);\n+                    };\n+\n+                    let span = meta.span().unwrap();\n+                    let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+                    let nested_name = nested_name.as_str();\n \n-        Ok(inner_ty.with(binding, generated))\n+                    let Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) = meta else {\n+                        throw_invalid_nested_attr!(attr, &nested_attr);\n+                    };\n+\n+                    match nested_name {\n+                        \"code\" => {\n+                            let formatted_str = self.build_format(&value.value(), value.span());\n+                            code.set_once((formatted_str, span));\n+                        }\n+                        _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                            diag.help(\"`code` is the only valid nested attribute\")\n+                        }),\n+                    }\n+                }\n+\n+                let Some((code, _)) = code else {\n+                    span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n+                        .emit();\n+                    return Ok(quote! {});\n+                };\n+                let binding = info.binding;\n+\n+                Ok(quote! { suggestions.push((#binding, #code)); })\n+            }\n+            _ => throw_invalid_attr!(attr, &Meta::List(list), |diag| {\n+                let mut span_attrs = vec![];\n+                if kind_stats.has_multipart_suggestion {\n+                    span_attrs.push(\"suggestion_part\");\n+                }\n+                if !kind_stats.all_multipart_suggestions {\n+                    span_attrs.push(\"primary_span\")\n+                }\n+                diag.help(format!(\n+                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                    span_attrs.join(\", \")\n+                ))\n+            }),\n+        }\n     }\n \n-    fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n-        self.identify_kind()?;\n-        if self.kinds.is_empty() {\n+    pub fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n+        let kind_slugs = self.identify_kind()?;\n+        if kind_slugs.is_empty() {\n             throw_span_err!(\n                 self.variant.ast().ident.span().unwrap(),\n                 \"subdiagnostic kind not specified\"\n             );\n         };\n-        let have_suggestion =\n-            self.kinds.iter().any(|(k, _)| matches!(k, SubdiagnosticKind::Suggestion(_)));\n-        let mut args = TokenStream::new();\n-        for binding in self.variant.bindings() {\n-            let arg = self\n-                .generate_field_code(binding, have_suggestion)\n-                .unwrap_or_else(|v| v.to_compile_error());\n-            args.extend(arg);\n-        }\n-        let mut tokens = TokenStream::new();\n-        for ((kind, _), (slug, _)) in self.kinds.iter().zip(&self.slugs) {\n-            let code = match self.code.as_ref() {\n-                Some((code, _)) => Some(quote! { #code }),\n-                None if have_suggestion => {\n-                    span_err(self.span, \"suggestion without `code = \\\"...\\\"`\").emit();\n-                    Some(quote! { /* macro error */ \"...\" })\n-                }\n-                None => None,\n-            };\n \n-            let span_field = self.span_field.as_ref().map(|(span, _)| span);\n-            let applicability = match self.applicability.clone() {\n-                Some((applicability, _)) => Some(applicability),\n-                None if have_suggestion => {\n-                    span_err(self.span, \"suggestion without `applicability`\").emit();\n-                    Some(quote! { rustc_errors::Applicability::Unspecified })\n-                }\n-                None => None,\n-            };\n+        let kind_stats: KindsStatistics = kind_slugs.iter().map(|(kind, _slug)| kind).collect();\n+\n+        let init = if kind_stats.has_multipart_suggestion {\n+            quote! { let mut suggestions = Vec::new(); }\n+        } else {\n+            quote! {}\n+        };\n+\n+        let attr_args: TokenStream = self\n+            .variant\n+            .bindings()\n+            .iter()\n+            .filter(|binding| !binding.ast().attrs.is_empty())\n+            .map(|binding| self.generate_field_attr_code(binding, kind_stats))\n+            .collect();\n+\n+        let span_field = self.span_field.as_ref().map(|(span, _)| span);\n+        let applicability = self.applicability.take().map_or_else(\n+            || quote! { rustc_errors::Applicability::Unspecified },\n+            |(applicability, _)| applicability,\n+        );\n \n-            let diag = &self.diag;\n+        let diag = &self.diag;\n+        let mut calls = TokenStream::new();\n+        for (kind, slug) in kind_slugs {\n             let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n             let message = quote! { rustc_errors::fluent::#slug };\n-            let call = if matches!(kind, SubdiagnosticKind::Suggestion(..)) {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message, #code, #applicability); }\n-                } else {\n-                    span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n-                    quote! { unreachable!(); }\n+            let call = match kind {\n+                SubdiagnosticKind::Suggestion { suggestion_kind, code } => {\n+                    if let Some(span) = span_field {\n+                        let style = suggestion_kind.to_suggestion_style();\n+\n+                        quote! { #diag.#name(#span, #message, #code, #applicability, #style); }\n+                    } else {\n+                        span_err(self.span, \"suggestion without `#[primary_span]` field\").emit();\n+                        quote! { unreachable!(); }\n+                    }\n                 }\n-            } else if matches!(kind, SubdiagnosticKind::Label) {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message); }\n-                } else {\n-                    span_err(self.span, \"label without `#[primary_span]` field\").emit();\n-                    quote! { unreachable!(); }\n+                SubdiagnosticKind::MultipartSuggestion { suggestion_kind } => {\n+                    if !self.has_suggestion_parts {\n+                        span_err(\n+                            self.span,\n+                            \"multipart suggestion without any `#[suggestion_part(...)]` fields\",\n+                        )\n+                        .emit();\n+                    }\n+\n+                    let style = suggestion_kind.to_suggestion_style();\n+\n+                    quote! { #diag.#name(#message, suggestions, #applicability, #style); }\n                 }\n-            } else {\n-                if let Some(span) = span_field {\n-                    quote! { #diag.#name(#span, #message); }\n-                } else {\n-                    quote! { #diag.#name(#message); }\n+                SubdiagnosticKind::Label => {\n+                    if let Some(span) = span_field {\n+                        quote! { #diag.#name(#span, #message); }\n+                    } else {\n+                        span_err(self.span, \"label without `#[primary_span]` field\").emit();\n+                        quote! { unreachable!(); }\n+                    }\n+                }\n+                _ => {\n+                    if let Some(span) = span_field {\n+                        quote! { #diag.#name(#span, #message); }\n+                    } else {\n+                        quote! { #diag.#name(#message); }\n+                    }\n                 }\n             };\n-            tokens.extend(quote! {\n-                #call\n-                #args\n-            });\n+            calls.extend(call);\n         }\n \n-        Ok(tokens)\n+        let plain_args: TokenStream = self\n+            .variant\n+            .bindings()\n+            .iter()\n+            .filter(|binding| binding.ast().attrs.is_empty())\n+            .map(|binding| self.generate_field_set_arg(binding))\n+            .collect();\n+\n+        Ok(quote! {\n+            #init\n+            #attr_args\n+            #calls\n+            #plain_args\n+        })\n     }\n }"}, {"sha": "812ca0c72bd058178d518b539eb4c709db737759", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 142, "deletions": 20, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/4c1b6b5cd8a62f616519761eb9fad7a7477d550b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1b6b5cd8a62f616519761eb9fad7a7477d550b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=4c1b6b5cd8a62f616519761eb9fad7a7477d550b", "patch": "@@ -167,8 +167,8 @@ enum P {\n #[derive(SessionSubdiagnostic)]\n enum Q {\n     #[bar]\n-//~^ ERROR `#[bar]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -179,8 +179,8 @@ enum Q {\n #[derive(SessionSubdiagnostic)]\n enum R {\n     #[bar = \"...\"]\n-//~^ ERROR `#[bar = ...]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar = ...]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -191,8 +191,8 @@ enum R {\n #[derive(SessionSubdiagnostic)]\n enum S {\n     #[bar = 4]\n-//~^ ERROR `#[bar = ...]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar = ...]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -203,8 +203,8 @@ enum S {\n #[derive(SessionSubdiagnostic)]\n enum T {\n     #[bar(\"...\")]\n-//~^ ERROR `#[bar(\"...\")]` is not a valid attribute\n-//~^^ ERROR cannot find attribute `bar` in this scope\n+    //~^ ERROR `#[bar(...)]` is not a valid attribute\n+    //~^^ ERROR cannot find attribute `bar` in this scope\n     A {\n         #[primary_span]\n         span: Span,\n@@ -215,7 +215,7 @@ enum T {\n #[derive(SessionSubdiagnostic)]\n enum U {\n     #[label(code = \"...\")]\n-//~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n+    //~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n     A {\n         #[primary_span]\n         span: Span,\n@@ -232,7 +232,7 @@ enum V {\n         var: String,\n     },\n     B {\n-//~^ ERROR subdiagnostic kind not specified\n+    //~^ ERROR subdiagnostic kind not specified\n         #[primary_span]\n         span: Span,\n         var: String,\n@@ -307,6 +307,14 @@ union AC {\n     b: u64\n }\n \n+#[derive(SessionSubdiagnostic)]\n+#[label(parser::add_paren)]\n+#[label(parser::add_paren)]\n+struct AD {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n #[derive(SessionSubdiagnostic)]\n #[label(parser::add_paren, parser::add_paren)]\n //~^ ERROR `#[label(parser::add_paren)]` is not a valid attribute\n@@ -319,16 +327,16 @@ struct AE {\n #[label(parser::add_paren)]\n struct AF {\n     #[primary_span]\n-//~^ NOTE previously specified here\n+    //~^ NOTE previously specified here\n     span_a: Span,\n     #[primary_span]\n-//~^ ERROR specified multiple times\n+    //~^ ERROR specified multiple times\n     span_b: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n struct AG {\n-//~^ ERROR subdiagnostic kind not specified\n+    //~^ ERROR subdiagnostic kind not specified\n     #[primary_span]\n     span: Span,\n }\n@@ -380,27 +388,25 @@ struct AK {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n-//~^ NOTE previously specified here\n+    //~^ NOTE previously specified here\n     applicability_a: Applicability,\n     #[applicability]\n-//~^ ERROR specified multiple times\n+    //~^ ERROR specified multiple times\n     applicability_b: Applicability,\n }\n \n #[derive(SessionSubdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n-//~^ ERROR suggestion without `applicability`\n struct AL {\n     #[primary_span]\n     span: Span,\n     #[applicability]\n-//~^ ERROR the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n+    //~^ ERROR the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n     applicability: Span,\n }\n \n #[derive(SessionSubdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n-//~^ ERROR suggestion without `applicability`\n struct AM {\n     #[primary_span]\n     span: Span,\n@@ -436,8 +442,7 @@ struct AQ;\n \n #[derive(SessionSubdiagnostic)]\n #[suggestion(parser::add_paren, code = \"...\")]\n-//~^ ERROR suggestion without `applicability`\n-//~^^ ERROR suggestion without `#[primary_span]` field\n+//~^ ERROR suggestion without `#[primary_span]` field\n struct AR {\n     var: String,\n }\n@@ -507,3 +512,120 @@ struct AZ {\n     #[primary_span]\n     span: Span,\n }\n+\n+#[derive(SessionSubdiagnostic)]\n+#[suggestion(parser::add_paren, code = \"...\")]\n+//~^ ERROR suggestion without `#[primary_span]` field\n+struct BA {\n+    #[suggestion_part]\n+    //~^ ERROR `#[suggestion_part]` is not a valid attribute\n+    span: Span,\n+    #[suggestion_part(code = \"...\")]\n+    //~^ ERROR `#[suggestion_part(...)]` is not a valid attribute\n+    span2: Span,\n+    #[applicability]\n+    applicability: Applicability,\n+    var: String,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+//~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n+//~| ERROR `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n+struct BBa {\n+    var: String,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BBb {\n+    #[suggestion_part]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span1: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BBc {\n+    #[suggestion_part()]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span1: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren)]\n+//~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n+struct BC {\n+    #[primary_span]\n+    //~^ ERROR `#[primary_span]` is not a valid attribute\n+    span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren)]\n+struct BD {\n+    #[suggestion_part]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span1: Span,\n+    #[suggestion_part()]\n+    //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+    span2: Span,\n+    #[suggestion_part(foo = \"bar\")]\n+    //~^ ERROR `#[suggestion_part(foo = ...)]` is not a valid attribute\n+    span4: Span,\n+    #[suggestion_part(code = \"...\")]\n+    //~^ ERROR the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+    s1: String,\n+    #[suggestion_part()]\n+    //~^ ERROR the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+    s2: String,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BE {\n+    #[suggestion_part(code = \"...\", code = \",,,\")]\n+    //~^ ERROR specified multiple times\n+    //~| NOTE previously specified here\n+    span: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BF {\n+    #[suggestion_part(code = \"(\")]\n+    first: Span,\n+    #[suggestion_part(code = \")\")]\n+    second: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren)]\n+struct BG {\n+    #[applicability]\n+    appl: Applicability,\n+    #[suggestion_part(code = \"(\")]\n+    first: Span,\n+    #[suggestion_part(code = \")\")]\n+    second: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+//~^ NOTE previously specified here\n+struct BH {\n+    #[applicability]\n+    //~^ ERROR specified multiple times\n+    appl: Applicability,\n+    #[suggestion_part(code = \"(\")]\n+    first: Span,\n+    #[suggestion_part(code = \")\")]\n+    second: Span,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+#[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+struct BI {\n+    #[suggestion_part(code = \"\")]\n+    spans: Vec<Span>,\n+}"}, {"sha": "0a0247e898088b41bcb6592e1a53afb59cc76ec8", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 157, "deletions": 65, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/4c1b6b5cd8a62f616519761eb9fad7a7477d550b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c1b6b5cd8a62f616519761eb9fad7a7477d550b/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=4c1b6b5cd8a62f616519761eb9fad7a7477d550b", "patch": "@@ -65,16 +65,16 @@ LL | #[label()]\n    | ^^^^^^^^^^\n \n error: `code` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:137:1\n+  --> $DIR/subdiagnostic-derive.rs:137:28\n    |\n LL | #[label(parser::add_paren, code = \"...\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^^\n \n error: `applicability` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:146:1\n+  --> $DIR/subdiagnostic-derive.rs:146:28\n    |\n LL | #[label(parser::add_paren, applicability = \"machine-applicable\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n   --> $DIR/subdiagnostic-derive.rs:155:1\n@@ -100,13 +100,11 @@ error: `#[bar = ...]` is not a valid attribute\n LL |     #[bar = 4]\n    |     ^^^^^^^^^^\n \n-error: `#[bar(\"...\")]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:205:11\n+error: `#[bar(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:205:5\n    |\n LL |     #[bar(\"...\")]\n-   |           ^^^^^\n-   |\n-   = help: first argument of the attribute should be the diagnostic slug\n+   |     ^^^^^^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n   --> $DIR/subdiagnostic-derive.rs:217:5\n@@ -163,6 +161,8 @@ error: `#[bar(...)]` is not a valid attribute\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n+   |\n+   = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: unexpected unsupported untagged union\n   --> $DIR/subdiagnostic-derive.rs:304:1\n@@ -175,141 +175,233 @@ LL | | }\n    | |_^\n \n error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:311:28\n+  --> $DIR/subdiagnostic-derive.rs:319:28\n    |\n LL | #[label(parser::add_paren, parser::add_paren)]\n    |                            ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:324:5\n+  --> $DIR/subdiagnostic-derive.rs:332:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:321:5\n+  --> $DIR/subdiagnostic-derive.rs:329:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:330:8\n+  --> $DIR/subdiagnostic-derive.rs:338:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:367:47\n+  --> $DIR/subdiagnostic-derive.rs:375:47\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:367:33\n+  --> $DIR/subdiagnostic-derive.rs:375:33\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:385:5\n+  --> $DIR/subdiagnostic-derive.rs:393:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:382:5\n+  --> $DIR/subdiagnostic-derive.rs:390:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:396:5\n+  --> $DIR/subdiagnostic-derive.rs:403:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n-error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:391:1\n+error: suggestion without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:416:1\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n-LL | |\n-LL | | struct AL {\n-LL | |     #[primary_span]\n-...  |\n-LL | |     applicability: Span,\n-LL | | }\n-   | |_^\n+LL | #[suggestion(parser::add_paren)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:402:1\n+error: invalid applicability\n+  --> $DIR/subdiagnostic-derive.rs:426:46\n+   |\n+LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: suggestion without `#[primary_span]` field\n+  --> $DIR/subdiagnostic-derive.rs:444:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AM {\n-LL | |     #[primary_span]\n-LL | |     span: Span,\n+LL | | struct AR {\n+LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:410:1\n+error: unsupported type attribute for subdiagnostic enum\n+  --> $DIR/subdiagnostic-derive.rs:458:1\n    |\n-LL | / #[suggestion(parser::add_paren)]\n+LL | #[label]\n+   | ^^^^^^^^\n+\n+error: `var` doesn't refer to a field on this type\n+  --> $DIR/subdiagnostic-derive.rs:478:39\n+   |\n+LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n+\n+error: `var` doesn't refer to a field on this type\n+  --> $DIR/subdiagnostic-derive.rs:497:43\n+   |\n+LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n+\n+error: `#[suggestion_part]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:520:5\n+   |\n+LL |     #[suggestion_part]\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n+\n+error: `#[suggestion_part(...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:523:5\n+   |\n+LL |     #[suggestion_part(code = \"...\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n+\n+error: suggestion without `#[primary_span]` field\n+  --> $DIR/subdiagnostic-derive.rs:517:1\n+   |\n+LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n-LL | | struct AN {\n-LL | |     #[primary_span]\n+LL | | struct BA {\n+LL | |     #[suggestion_part]\n ...  |\n-LL | |     applicability: Applicability,\n+LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:420:46\n+error: `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n+  --> $DIR/subdiagnostic-derive.rs:532:43\n    |\n-LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^^^^^^\n \n-error: suggestion without `applicability`\n-  --> $DIR/subdiagnostic-derive.rs:438:1\n+error: multipart suggestion without any `#[suggestion_part(...)]` fields\n+  --> $DIR/subdiagnostic-derive.rs:532:1\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n+LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n LL | |\n-LL | | struct AR {\n+LL | | struct BBa {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:438:1\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:542:5\n    |\n-LL | / #[suggestion(parser::add_paren, code = \"...\")]\n+LL |     #[suggestion_part]\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:550:5\n+   |\n+LL |     #[suggestion_part()]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[primary_span]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:559:5\n+   |\n+LL |     #[primary_span]\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n+\n+error: multipart suggestion without any `#[suggestion_part(...)]` fields\n+  --> $DIR/subdiagnostic-derive.rs:556:1\n+   |\n+LL | / #[multipart_suggestion(parser::add_paren)]\n LL | |\n+LL | | struct BC {\n+LL | |     #[primary_span]\n LL | |\n-LL | | struct AR {\n-LL | |     var: String,\n+LL | |     span: Span,\n LL | | }\n    | |_^\n \n-error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:453:1\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:567:5\n    |\n-LL | #[label]\n-   | ^^^^^^^^\n+LL |     #[suggestion_part]\n+   |     ^^^^^^^^^^^^^^^^^^\n \n-error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:473:39\n+error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:570:5\n    |\n-LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                       ^^^^^^^\n+LL |     #[suggestion_part()]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:492:43\n+error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:573:23\n    |\n-LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n-   |                                           ^^^^^^^\n+LL |     #[suggestion_part(foo = \"bar\")]\n+   |                       ^^^^^^^^^^^\n+   |\n+   = help: `code` is the only valid nested attribute\n+\n+error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+  --> $DIR/subdiagnostic-derive.rs:576:5\n+   |\n+LL |     #[suggestion_part(code = \"...\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n+  --> $DIR/subdiagnostic-derive.rs:579:5\n+   |\n+LL |     #[suggestion_part()]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:587:37\n+   |\n+LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n+   |                                     ^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:587:23\n+   |\n+LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n+   |                       ^^^^^^^^^^^^\n+\n+error: specified multiple times\n+  --> $DIR/subdiagnostic-derive.rs:617:5\n+   |\n+LL |     #[applicability]\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/subdiagnostic-derive.rs:614:43\n+   |\n+LL | #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n@@ -371,6 +463,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 50 previous errors\n+error: aborting due to 63 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}