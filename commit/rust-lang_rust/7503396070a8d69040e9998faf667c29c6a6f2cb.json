{"sha": "7503396070a8d69040e9998faf667c29c6a6f2cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MDMzOTYwNzBhOGQ2OTA0MGU5OTk4ZmFmNjY3YzI5YzZhNmYyY2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-17T17:12:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-17T17:12:04Z"}, "message": "auto merge of #8441 : erickt/rust/deny-warnings, r=erickt\n\nThis patch makes sure that code is warning-free for all of the rust libraries.", "tree": {"sha": "7618ba49b5664636440b6ce8f0e75fa1cb181b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7618ba49b5664636440b6ce8f0e75fa1cb181b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7503396070a8d69040e9998faf667c29c6a6f2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7503396070a8d69040e9998faf667c29c6a6f2cb", "html_url": "https://github.com/rust-lang/rust/commit/7503396070a8d69040e9998faf667c29c6a6f2cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7503396070a8d69040e9998faf667c29c6a6f2cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a67d1dc2a171997902f847375ed684b8bdb32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a67d1dc2a171997902f847375ed684b8bdb32c", "html_url": "https://github.com/rust-lang/rust/commit/29a67d1dc2a171997902f847375ed684b8bdb32c"}, {"sha": "cc567085c0121c226d7385027759df6160436bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc567085c0121c226d7385027759df6160436bc0", "html_url": "https://github.com/rust-lang/rust/commit/cc567085c0121c226d7385027759df6160436bc0"}], "stats": {"total": 1299, "additions": 709, "deletions": 590}, "files": [{"sha": "0d798f4cc1b4c49deadc7426d27bc53cd43fd52a", "filename": "mk/target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -69,7 +69,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $(BORROWCK) --out-dir $$(@D) $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) $(BORROWCK) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBSYNTAX_GLOB_$(2)),$$(notdir $$@))\n \n # Only build the compiler for host triples\n@@ -90,7 +90,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X_$(3)):\t\t\t\\"}, {"sha": "09c3de014782d3b0f1e1e4dd3d2265ca27f01e86", "filename": "mk/tools.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -67,7 +67,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4)):\t\t\t\\\n@@ -85,7 +85,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTI_$(4)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTI_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTI_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X_$(4)):\t\t\t\\\n@@ -106,7 +106,7 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUST_$(4)):\t\t\\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) --out-dir $$(@D) $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUST_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rust$$(X_$(4)):\t\t\t\\"}, {"sha": "435e7943d662ff548c2aa545b8271033f7c275b8", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -480,7 +480,7 @@ impl Context {\n                             (orig.visit_item)(it, (self, stopping));\n                         }\n                         NewVisitor(new_visitor) => {\n-                            let mut new_visitor = new_visitor;\n+                            let new_visitor = new_visitor;\n                             new_visitor.visit_item(it, ());\n                         }\n                     }\n@@ -520,7 +520,7 @@ impl Context {\n                             let fk = visit::fk_method(m.ident,\n                                                       &m.generics,\n                                                       m);\n-                            let mut new_visitor = new_visitor;\n+                            let new_visitor = new_visitor;\n                             new_visitor.visit_fn(&fk,\n                                                  &m.decl,\n                                                  &m.body,"}, {"sha": "247447010bca84e19fc5bf4d8c14ccbeb6f065bf", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -648,7 +648,7 @@ pub mod ptr_tests {\n                 one, two, three\n             ];\n \n-            do arr.as_imm_buf |arr_ptr, arr_len| {\n+            do arr.as_imm_buf |arr_ptr, _| {\n                 let mut ctr = 0;\n                 let mut iteration_count = 0;\n                 do array_each(arr_ptr) |e| {"}, {"sha": "78fc1f0babc41c64c86056aeeb0796d0cd73b351", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,6 @@\n \n use ast;\n use codemap::{spanned, mk_sp};\n-use codemap::BytePos;\n use parse::common::*; //resolve bug?\n use parse::token;\n use parse::parser::Parser;"}, {"sha": "a9c3e1d2b0f866053ad2d0b05abf7b13e1a169c7", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::comm::*;\n use std::task;\n \n pub fn foo<T:Send + Clone>(x: T) -> Port<T> {"}, {"sha": "63a7392fc70b91c806cd9c2bb118711f09965f41", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n pub mod kitties {\n-    use std::uint;\n-\n     pub struct cat {\n         priv meows : uint,\n         how_hungry : int,\n@@ -26,5 +24,4 @@ pub mod kitties {\n             how_hungry: in_y\n         }\n     }\n-\n }"}, {"sha": "8fac4a3f322af16db2df251e6a93ba677bf52bb9", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::to_str::*;\n-\n pub mod kitty {\n     pub struct cat {\n       priv meows : uint,"}, {"sha": "d8e3c2a9054a0e2719ac31a6ae212d21838d6dab", "filename": "src/test/auxiliary/crate-method-reexport-grrrrrrr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate-method-reexport-grrrrrrr2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -20,7 +20,7 @@ pub mod name_pool {\n     }\n \n     impl add for name_pool {\n-        fn add(&self, s: ~str) {\n+        fn add(&self, _s: ~str) {\n         }\n     }\n }"}, {"sha": "f20a143b658ba6fa9936bada1485a614f5610940", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -25,7 +25,7 @@ pub enum e {\n \n pub fn nominal() -> e { e_val }\n \n-pub fn nominal_eq(e1: e, e2: e) -> bool { true }\n+pub fn nominal_eq(_e1: e, _e2: e) -> bool { true }\n \n impl Eq for e {\n     fn eq(&self, other: &e) -> bool { nominal_eq(*self, *other) }"}, {"sha": "10adc3381596a749d0c87ba5e9221f8ef1412134", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -29,6 +29,6 @@ impl Eq for e {\n \n pub fn nominal() -> e { e_val }\n \n-pub fn nominal_neq(e1: e, e2: e) -> bool { false }\n+pub fn nominal_neq(_e1: e, _e2: e) -> bool { false }\n \n pub fn f() -> int { 20 }"}, {"sha": "cbdd6b56b7da49564b4da1c1f3680e2ccaa44570", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -35,9 +35,7 @@ fn arc<T:Freeze>(_data: T) -> arc_destruct<T> {\n }\n \n fn init() -> arc_destruct<context_res> {\n-    unsafe {\n-        arc(context_res())\n-    }\n+    arc(context_res())\n }\n \n struct context_res {"}, {"sha": "88439e32b0dda6f2179594ad8a9942cc949be540", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@\n enum maybe<T> { just(T), nothing }\n \n impl <T:Clone> Index<uint,T> for maybe<T> {\n-    fn index(&self, idx: &uint) -> T {\n+    fn index(&self, _idx: &uint) -> T {\n         match self {\n             &just(ref t) => (*t).clone(),\n             &nothing => { fail!(); }"}, {"sha": "1c16e347b27be67e6a69fbae86527093f5648fa4", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_imports)];\n+\n extern mod issue_2316_a;\n \n pub mod cloth {"}, {"sha": "f45b80715953ef847c24208f00c2873c5f673c16", "filename": "src/test/auxiliary/moves_based_on_type_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -23,5 +23,5 @@ impl Drop for S {\n pub fn f() {\n     let x = S { x: 1 };\n     let y = x;\n-    let z = y;\n+    let _z = y;\n }"}, {"sha": "105d7f758f787a27f47a59f28493be304e46a863", "filename": "src/test/auxiliary/trait_default_method_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,7 +19,7 @@ impl A for Something {\n \n trait B<T> {\n     fn thing<U>(&self, x: T, y: U) -> (T, U) { (x, y) }\n-    fn staticthing<U>(z: &Self, x: T, y: U) -> (T, U) { (x, y) }\n+    fn staticthing<U>(_z: &Self, x: T, y: U) -> (T, U) { (x, y) }\n }\n \n impl<T> B<T> for int { }"}, {"sha": "6735d623e6cdf95bb376fddc4e94529165502263", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,14 +13,11 @@\n extern mod extra;\n \n use extra::time::precise_time_s;\n-use std::int;\n use std::io;\n use std::os;\n use std::rand::RngUtil;\n use std::rand;\n-use std::result;\n use std::str;\n-use std::uint;\n use std::util;\n use std::vec;\n "}, {"sha": "a5311d5c831342dcc45454a4dc2ab9d8ad65df09", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,7 +21,6 @@ use extra::arc;\n use extra::future;\n use extra::time;\n use std::cell::Cell;\n-use std::io;\n use std::os;\n use std::uint;\n "}, {"sha": "e25490bcd9ba88681b2224476ce5ef069408cdce", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,7 +21,6 @@ use extra::arc;\n use extra::future;\n use extra::time;\n use std::cell::Cell;\n-use std::io;\n use std::os;\n use std::uint;\n "}, {"sha": "e5fac5124990836f3b28d3b52257e4a61d6b13cb", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,7 +1,6 @@\n // Perlin noise benchmark from https://gist.github.com/1170424\n \n use std::float;\n-use std::int;\n use std::rand::{Rng, RngUtil};\n use std::rand;\n "}, {"sha": "6c482c6d207291941d899d3a83100ce7384a2d80", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,6 @@\n \n extern mod extra;\n \n-use std::task::spawn;\n use std::os;\n use std::uint;\n use std::rt::test::spawntask_later;"}, {"sha": "32f0a592273f5ef93d467209f6a8eeb1b4017ebd", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,6 @@\n \n extern mod extra;\n \n-use std::task::spawn;\n use std::os;\n use std::uint;\n use std::rt::test::spawntask_later;"}, {"sha": "3ecb580874c4b33fed23afaac34dc8838c3d5863", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,6 @@\n extern mod extra;\n \n use std::int;\n-use std::io;\n use std::os;\n \n fn ack(m: int, n: int) -> int {"}, {"sha": "9d47e7fed237bdd290b8262629231532973db718", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -22,9 +22,7 @@ use std::io;\n use std::os;\n use std::rand::Rng;\n use std::rand;\n-use std::result;\n use std::str;\n-use std::uint;\n \n static LINE_LENGTH: uint = 60u;\n "}, {"sha": "a367beface2173dd485e774bdb85633daa6271c4", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,6 @@\n extern mod extra;\n \n use std::int;\n-use std::io;\n use std::os;\n \n fn fib(n: int) -> int {"}, {"sha": "0a036696544e80fa86641b7cd428d3b916c20170", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -22,7 +22,6 @@ use std::io::ReaderUtil;\n use std::io;\n use std::option;\n use std::os;\n-use std::result;\n use std::str;\n use std::task;\n use std::util;"}, {"sha": "17fe1135fd985596c08296ab99c82967c8ba0406", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,7 +15,6 @@ extern mod extra;\n use std::io::{ReaderUtil, WriterUtil};\n use std::io;\n use std::os;\n-use std::u8;\n use std::uint;\n use std::unstable::intrinsics::cttz16;\n use std::vec;"}, {"sha": "ca30fc2bd7b86cbf409e7821ca7349265060c789", "filename": "src/test/codegen/scalar-function-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fcodegen%2Fscalar-function-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fcodegen%2Fscalar-function-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fscalar-function-call.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,5 +14,5 @@ fn foo(x: int) -> int {\n \n #[no_mangle]\n fn test() {\n-    let x = foo(10);\n+    let _x = foo(10);\n }"}, {"sha": "4e8f7d0d4aaa655b7aac2c5e5637956dd5e285f5", "filename": "src/test/debug-info/basic-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -51,6 +51,8 @@\n // debugger:print f64\n // check:$15 = 3.5\n \n+#[allow(unused_variable)];\n+\n fn main() {\n     let b: bool = false;\n     let i: int = -1;"}, {"sha": "9de460163f091c8a2333c71b19d4d610d675fa74", "filename": "src/test/debug-info/borrowed-basic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-basic.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -62,6 +62,8 @@\n // debugger:print *f64_ref\n // check:$15 = 3.5\n \n+#[allow(unused_variable)];\n+\n fn main() {\n     let bool_val: bool = true;\n     let bool_ref: &bool = &bool_val;\n@@ -110,4 +112,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "3b398201726c3b10e5f618ea4241dd6452f4cd28", "filename": "src/test/debug-info/borrowed-c-style-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-c-style-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -24,6 +24,8 @@\n // debugger:print *the_c_ref\n // check:$3 = TheC\n \n+#[allow(unused_variable)];\n+\n enum ABC { TheA, TheB, TheC }\n \n fn main() {\n@@ -39,4 +41,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "2052ce3c93256e50a35c6dd6d32a07e425f9f9aa", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -24,6 +24,8 @@\n // debugger:print *univariant_ref\n // check:$3 = {4820353753753434}\n \n+#[allow(unused_variable)];\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case.\n@@ -59,4 +61,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "bf0edef83a0aadd3e7362e147cf730427719de8b", "filename": "src/test/debug-info/borrowed-managed-basic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-managed-basic.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -62,6 +62,7 @@\n // debugger:print *f64_ref\n // check:$15 = 3.5\n \n+#[allow(unused_variable)];\n \n fn main() {\n     let bool_box: @bool = @true;\n@@ -111,4 +112,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "77f8bd21fb3d40ad36c5aeaf42cb821ab7f4a751", "filename": "src/test/debug-info/borrowed-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -45,7 +45,7 @@\n // debugger:print *unique_val_interior_ref_2\n // check:$10 = 26.5\n \n-\n+#[allow(unused_variable)];\n \n struct SomeStruct {\n     x: int,\n@@ -72,4 +72,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "8810c493aed07e5fe771c4c9f270b839c831b102", "filename": "src/test/debug-info/borrowed-tuple.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-tuple.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -27,6 +27,8 @@\n // debugger:print *unique_val_ref\n // check:$4 = {-17, -22}\n \n+#[allow(unused_variable)];\n+\n fn main() {\n     let stack_val: (i16, f32) = (-14, -19f32);\n     let stack_val_ref: &(i16, f32) = &stack_val;\n@@ -41,4 +43,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "c62b05d13583a9cfa4c62bafa33f6676f8b908c3", "filename": "src/test/debug-info/borrowed-unique-basic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-unique-basic.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -62,6 +62,8 @@\n // debugger:print *f64_ref\n // check:$15 = 3.5\n \n+#[allow(unused_variable)];\n+\n \n fn main() {\n     let bool_box: ~bool = ~true;\n@@ -111,4 +113,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "cc41267e5c20255b02fd9be0a9e1920ca1b57345", "filename": "src/test/debug-info/box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbox.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -24,6 +24,8 @@\n // debugger:print d->val\n // check:$4 = false\n \n+#[allow(unused_variable)];\n+\n fn main() {\n     let a = ~1;\n     let b = ~(2, 3.5);"}, {"sha": "0e22980025be8d948d56b7a3a67669efa0810de2", "filename": "src/test/debug-info/boxed-struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -27,6 +27,8 @@\n // debugger:print managed_dtor->val\n // check:$4 = {x = 33, y = 333, z = 3333, w = 33333}\n \n+#[allow(unused_variable)];\n+\n struct StructWithSomePadding {\n     x: i16,\n     y: i32,\n@@ -56,4 +58,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "84b1ad44ebc1a174d02cfbe4b31868fb4a2d76a3", "filename": "src/test/debug-info/boxed-vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -25,6 +25,8 @@\n // debugger:print *((uint64_t[4]*)(unique->elements))\n // check:$4 = {10, 11, 12, 13}\n \n+#[allow(unused_variable)];\n+\n fn main() {\n \n     let managed: @[i64] = @[7, 8, 9];\n@@ -33,4 +35,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "def0a8275c07f4948f41ee59381370c92803d793", "filename": "src/test/debug-info/c-style-enum-in-composite.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum-in-composite.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -36,6 +36,8 @@\n // debugger:print struct_with_drop\n // check:$7 = {{a = OneHundred, b = Vienna}, 9}\n \n+#[allow(unused_variable)];\n+\n enum AnEnum {\n     OneHundred = 100,\n     OneThousand = 1000,\n@@ -116,4 +118,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "1b57ab0d447e1d96c409ead80f55ec5c3f241e2d", "filename": "src/test/debug-info/c-style-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -36,6 +36,8 @@\n // debugger:print single_variant\n // check:$7 = TheOnlyVariant\n \n+#[allow(unused_variable)];\n+\n enum AutoDiscriminant {\n     One,\n     Two,\n@@ -67,4 +69,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "0269d3f4155746117721bdf8bf3881ee4d75b35b", "filename": "src/test/debug-info/destructured-fn-argument.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-fn-argument.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -181,6 +181,7 @@\n // check:$49 = 62\n // debugger:continue\n \n+#[allow(unused_variable)];\n \n struct Struct {\n     a: i64,\n@@ -315,4 +316,4 @@ fn main() {\n }\n \n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "bc78b6cd35e947d401c9d3b88bff6b51fadc79e3", "filename": "src/test/debug-info/destructured-local.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fdestructured-local.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -125,6 +125,7 @@\n // debugger:print *nn\n // check:$43 = 56\n \n+#[allow(unused_variable)];\n \n struct Struct {\n     a: i64,\n@@ -206,4 +207,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "1594de4f5c05d6d057c2c637a7672d643cf674c0", "filename": "src/test/debug-info/evec-in-struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fevec-in-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -30,6 +30,8 @@\n // debugger:print struct_padded_at_end\n // check:$5 = {x = {22, 23}, y = {24, 25}}\n \n+#[allow(unused_variable)];\n+\n struct NoPadding1 {\n     x: [u32, ..3],\n     y: i32,\n@@ -85,4 +87,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "f2d753fc88d8f0b02a71a3cf7c6abbb7dbe87cb4", "filename": "src/test/debug-info/managed-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -24,6 +24,8 @@\n // debugger:print univariant->val\n // check:$3 = {-9747455}\n \n+#[allow(unused_variable)];\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case.\n@@ -60,4 +62,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "a0b6f0e2b4f513862282d0c27e13144ffec24339", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -27,11 +27,13 @@\n // debugger:print unique->val.elements[3]->val\n // check:$4 = 13\n \n+#[allow(unused_variable)];\n+\n fn main() {\n \n     let unique: ~[@i64] = ~[@10, @11, @12, @13];\n \n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "4acf8d6efc7da07de366cb3989e9c5d533201122", "filename": "src/test/debug-info/managed-pointer-within-unique.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -25,6 +25,8 @@\n // debugger:print managed_within_unique.val->y->val\n // check:$3 = -4\n \n+#[allow(unused_variable)];\n+\n struct ContainsManaged\n {\n \tx: int,\n@@ -44,4 +46,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "3f9dd1a0748fb7f15a8965e2c5385410c6ad5a68", "filename": "src/test/debug-info/multiple-functions-equal-var-names.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions-equal-var-names.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -28,6 +28,8 @@\n // debugger:print abc\n // check:$3 = 30303\n \n+#[allow(unused_variable)];\n+\n fn function_one() {\n \tlet abc = 10101;\n \tzzz();"}, {"sha": "4d709070763cdbd982a4f2f7f8b567a798c6be1c", "filename": "src/test/debug-info/multiple-functions.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmultiple-functions.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -28,6 +28,8 @@\n // debugger:print c\n // check:$3 = 30303\n \n+#[allow(unused_variable)];\n+\n fn function_one() {\n \tlet a = 10101;\n \tzzz();"}, {"sha": "8622795ee90488fcd4d8ff205841ac96974c45e3", "filename": "src/test/debug-info/nil-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fnil-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fnil-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,6 +21,8 @@\n // debugger:print second\n // check:$2 = {<No data fields>}\n \n+#[allow(unused_variable)];\n+\n enum ANilEnum {}\n enum AnotherNilEnum {}\n \n@@ -37,4 +39,4 @@ fn main() {\n     }\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "f36e8454da99e252e4362fd40ee0ef21da7ddec3", "filename": "src/test/debug-info/packed-struct-with-destructor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct-with-destructor.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -41,6 +41,8 @@\n // debugger:print deeplyNested\n // check:$8 = {a = {a = 1, b = {x = 2, y = 3, z = 4}, c = 5, d = {x = 6, y = 7, z = 8}}, b = {a = 9, b = {x = 10, y = 11, z = 12}, c = {x = 13, y = 14, z = 15}, d = 16}, c = {a = 17, b = {x = 18, y = 19, z = 20}, c = 21, d = {x = 22, y = 23, z = 24}}, d = {a = 25, b = {x = 26, y = 27, z = 28}, c = 29, d = {x = 30, y = 31, z = 32}}, e = {a = 33, b = {x = 34, y = 35, z = 36}, c = {x = 37, y = 38, z = 39}, d = 40}, f = {a = 41, b = {x = 42, y = 43, z = 44}, c = 45, d = {x = 46, y = 47, z = 48}}}\n \n+#[allow(unused_variable)];\n+\n #[packed]\n struct Packed {\n     x: i16,\n@@ -216,4 +218,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "93d3a9f2f116e8c070f5bc0cda6384f9e0cca023", "filename": "src/test/debug-info/packed-struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fpacked-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -34,6 +34,8 @@\n // debugger:print sizeof(packedInPacked)\n // check:$6 = 40\n \n+#[allow(unused_variable)];\n+\n #[packed]\n struct Packed {\n     x: i16,\n@@ -101,4 +103,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "6532a3841e5ef42581024eb3ab993b5a493f75ba", "filename": "src/test/debug-info/simple-struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -34,6 +34,7 @@\n // debugger:print padding_at_end\n // check:$6 = {x = -10014, y = 10015}\n \n+#[allow(unused_variable)];\n \n struct NoPadding16 {\n     x: u16,\n@@ -81,4 +82,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "81a6c4a3ee56e1d7c9947cda0082a27e713e0d74", "filename": "src/test/debug-info/simple-tuple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimple-tuple.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -33,6 +33,7 @@\n // debugger:print paddingAtEnd\n // check:$7 = {15, 16}\n \n+#[allow(unused_variable)];\n \n fn main() {\n     let noPadding8: (i8, u8) = (-100, 100);\n@@ -48,4 +49,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "c7879ac472092b726b25abd11f01cba13b018770", "filename": "src/test/debug-info/struct-in-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -25,6 +25,8 @@\n // debugger:print univariant\n // check:$3 = {{x = 123, y = 456, z = 789}}\n \n+#[allow(unused_variable)];\n+\n struct Struct {\n \tx: u32,\n \ty: i32,"}, {"sha": "ca02283de3788274b1c53aca09789100aa18b3de", "filename": "src/test/debug-info/struct-in-struct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-in-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -25,6 +25,7 @@\n // debugger:print padding_at_end_parent\n // check:$3 = {x = {x = 10, y = 11}, y = {x = 12, y = 13}, z = {x = 14, y = 15}}\n \n+#[allow(unused_variable)];\n \n struct Simple {\n     x: i32\n@@ -142,4 +143,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "30be3b845634d4695a54cf81ca955f4630574321", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -28,6 +28,8 @@\n // debugger:print univariant\n // check:$4 = {a = -1}\n \n+#[allow(unused_variable)];\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case.\n@@ -70,4 +72,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "09bb690988c3115770ee5e6381bfb1f4ecc1e383", "filename": "src/test/debug-info/struct-with-destructor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-with-destructor.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -26,6 +26,8 @@\n // debugger:print nested\n // check:$4 = {a = {a = {x = 7890, y = 9870}}}\n \n+#[allow(unused_variable)];\n+\n struct NoDestructor {\n     x: i32,\n     y: i64"}, {"sha": "b2611b3077d61a2c517a0f23003dd272de7ea529", "filename": "src/test/debug-info/tuple-in-struct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -41,6 +41,8 @@\n // debugger:print mixed_padding\n // check:$10 = {x = {{40, 41, 42}, {43, 44}}, y = {45, 46, 47, 48}}\n \n+#[allow(unused_variable)];\n+\n struct NoPadding1 {\n     x: (i32, i32),\n     y: i32,\n@@ -148,4 +150,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "940edd08975194584b5b9d3a558ebcda50f097f9", "filename": "src/test/debug-info/tuple-in-tuple.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-in-tuple.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -33,6 +33,8 @@\n // debugger:print padding_at_end2\n // check:$7 = {{21, 22}, 23}\n \n+#[allow(unused_variable)];\n+\n fn main() {\n     let no_padding1: ((u32, u32), u32, u32) = ((0, 1), 2, 3);\n     let no_padding2: (u32, (u32, u32), u32) = (4, (5, 6), 7);\n@@ -47,4 +49,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "5dadfa84ba9671521ee8bd98af60359d09cfb51f", "filename": "src/test/debug-info/tuple-style-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple-style-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -28,6 +28,8 @@\n // debugger:print univariant\n // check:$4 = {-1}\n \n+#[allow(unused_variable)];\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case.\n@@ -70,4 +72,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "84f7e817d2488018e1c5a781f2a9483238a4bd07", "filename": "src/test/debug-info/unique-enum.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -24,6 +24,8 @@\n // debugger:print *univariant\n // check:$3 = {123234}\n \n+#[allow(unused_variable)];\n+\n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when\n // datatype layout should be predictable as in this case.\n@@ -60,4 +62,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}, {"sha": "14ff159769d7076e4956064bd5759d4e897b4a86", "filename": "src/test/debug-info/vec-slices.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec-slices.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -47,6 +47,8 @@\n // debugger:print padded_struct.data_ptr[1]\n // check:$13 = {x = 13, y = 14, z = 15}\n \n+#[allow(unused_variable)];\n+\n struct AStruct {\n     x: i16,\n     y: i32,"}, {"sha": "8387214b3bc62f75c55fc06b37c9ba8b473cf0b0", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -18,6 +18,8 @@\n // debugger:print a\n // check:$1 = {1, 2, 3}\n \n+#[allow(unused_variable)];\n+\n fn main() {\n     let a = [1, 2, 3];\n "}, {"sha": "c0f173a1a0d6a751d16c7bd7993aa1bbc58b481c", "filename": "src/test/pretty/block-arg-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-arg-disambig.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn blk1(b: &fn()) -> @fn() { return || { }; }\n+fn blk1(_b: &fn()) -> @fn() { return || { }; }\n fn test1() { (do blk1 { info!(\"hi\"); })(); }"}, {"sha": "f6787fa9c3d21a7aa7d67e6e0dbdabf397376cd4", "filename": "src/test/pretty/disamb-stmt-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdisamb-stmt-expr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,5 +16,5 @@\n \n fn id(f: &fn() -> int) -> int { f() }\n \n-fn wsucc(n: int) -> int { (do id || { 1 }) - 0 }\n+fn wsucc(_n: int) -> int { (do id || { 1 }) - 0 }\n fn main() { }"}, {"sha": "0545e9ed166f26fb1f48350d602606b67989f804", "filename": "src/test/pretty/fn-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-types.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,8 +10,8 @@\n \n // pp-exact\n \n-fn from_foreign_fn(x: extern \"Rust\" fn()) { }\n-fn from_stack_closure(x: &fn()) { }\n-fn from_box_closure(x: @fn()) { }\n-fn from_unique_closure(x: ~fn()) { }\n+fn from_foreign_fn(_x: extern \"Rust\" fn()) { }\n+fn from_stack_closure(_x: &fn()) { }\n+fn from_box_closure(_x: @fn()) { }\n+fn from_unique_closure(_x: ~fn()) { }\n fn main() { }"}, {"sha": "2318e783b69473ea6c09e2ee87b5941f5412275f", "filename": "src/test/pretty/for-comment.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Ffor-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Ffor-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffor-comment.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,9 +10,11 @@\n \n // pp-exact\n \n-fn f(v: &[int]) {\n+fn f(v: &[int]) -> int {\n     let mut n = 0;\n     for e in v.iter() {\n         n = *e; // This comment once triggered pretty printer bug\n     }\n+\n+    n\n }"}, {"sha": "75b42e8e59042ed9dda4568104f2520c85c519fd", "filename": "src/test/pretty/match-naked-expr-long.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fmatch-naked-expr-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fmatch-naked-expr-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-long.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,11 +15,11 @@\n \n fn main() {\n     let x = Some(3);\n-    let y =\n+    let _y =\n         match x {\n             Some(_) =>\n-            ~\"some\" + ~\"very\" + ~\"very\" + ~\"very\" + ~\"very\" + ~\"very\" +\n-                ~\"very\" + ~\"very\" + ~\"very\" + ~\"long\" + ~\"string\",\n+            ~\"some\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" +\n+                \"very\" + \"very\" + \"long\" + \"string\",\n             None => ~\"none\"\n         };\n }"}, {"sha": "ac5ef5fcf5328333a78684b7ac940a4798d5d57f", "filename": "src/test/pretty/match-naked-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,5 +12,5 @@\n \n fn main() {\n     let x = Some(3);\n-    let y = match x { Some(_) => ~\"some(_)\", None => ~\"none\" };\n+    let _y = match x { Some(_) => ~\"some(_)\", None => ~\"none\" };\n }"}, {"sha": "20d1678ee4153324cc773bc56f34319fc29e977d", "filename": "src/test/pretty/struct-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fstruct-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fstruct-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstruct-tuple.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -5,6 +5,6 @@ struct Bar(int, int);\n fn main() {\n     struct Foo2;\n     struct Bar2(int, int, int);\n-    let a = Bar(5, 5);\n-    let b = Foo;\n+    let _a = Bar(5, 5);\n+    let _b = Foo;\n }"}, {"sha": "a09e341a9402fb1c6265b0a7490a214e8a64fce2", "filename": "src/test/pretty/vec-comments.pp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-comments.pp", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-comments.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.pp?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,27 +12,27 @@\n // Testing that comments are correctly interleaved\n // pp-exact:vec-comments.pp\n fn main() {\n-    let v1 =\n+    let _v1 =\n         ~[\n           // Comment\n           0,\n           // Comment\n           1,\n           // Comment\n           2];\n-    let v2 =\n+    let _v2 =\n         ~[0, // Comment\n           1, // Comment\n           2]; // Comment\n-    let v3 =\n+    let _v3 =\n         ~[\n           /* Comment */\n           0,\n           /* Comment */\n           1,\n           /* Comment */\n           2];\n-    let v4 =\n+    let _v4 =\n         ~[0, /* Comment */\n           1, /* Comment */\n           2]; /* Comment */"}, {"sha": "a09e341a9402fb1c6265b0a7490a214e8a64fce2", "filename": "src/test/pretty/vec-comments.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,27 +12,27 @@\n // Testing that comments are correctly interleaved\n // pp-exact:vec-comments.pp\n fn main() {\n-    let v1 =\n+    let _v1 =\n         ~[\n           // Comment\n           0,\n           // Comment\n           1,\n           // Comment\n           2];\n-    let v2 =\n+    let _v2 =\n         ~[0, // Comment\n           1, // Comment\n           2]; // Comment\n-    let v3 =\n+    let _v3 =\n         ~[\n           /* Comment */\n           0,\n           /* Comment */\n           1,\n           /* Comment */\n           2];\n-    let v4 =\n+    let _v4 =\n         ~[0, /* Comment */\n           1, /* Comment */\n           2]; /* Comment */"}, {"sha": "d84f43d70050c4e75e6240dc94be7d83ad75883e", "filename": "src/test/pretty/vec-type.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-type.pp", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-type.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-type.pp?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,6 @@\n \n // pp-exact:vec-type.pp\n \n-fn f1(x: ~[int]) { }\n+fn f1(_x: ~[int]) { }\n \n fn g1() { f1(~[1, 2, 3]); }"}, {"sha": "d84f43d70050c4e75e6240dc94be7d83ad75883e", "filename": "src/test/pretty/vec-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Fpretty%2Fvec-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-type.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,6 @@\n \n // pp-exact:vec-type.pp\n \n-fn f1(x: ~[int]) { }\n+fn f1(_x: ~[int]) { }\n \n fn g1() { f1(~[1, 2, 3]); }"}, {"sha": "b803d7488b073aac578daa31b7a460c54a37f853", "filename": "src/test/run-fail/args-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fargs-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fargs-fail.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:meep\n-fn f(a: int, b: int, c: @int) { fail!(\"moop\"); }\n+fn f(_a: int, _b: int, _c: @int) { fail!(\"moop\"); }\n \n fn main() { f(1, fail!(\"meep\"), @42); }"}, {"sha": "6e15f6edddc8976b8857b0c4041a7f8e4b557268", "filename": "src/test/run-fail/borrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let c = @mut b;\n \n     // this should freeze `a` only\n-    let x: &mut [int] = c[0];\n+    let _x: &mut [int] = c[0];\n \n     // hence this should fail\n     a[0] = a[0];"}, {"sha": "24b928920c2b88ab07d545f7f9d4bcc7ca803e96", "filename": "src/test/run-fail/borrowck-wg-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,7 +9,7 @@ struct S {\n \n fn main() {\n     let x = @mut S { x: 3 };\n-    let y: &S = x;\n+    let _y: &S = x;\n     let z = x;\n     z.x = 5;\n }"}, {"sha": "8a72d2680d92f159165880ffecb615e601010b92", "filename": "src/test/run-fail/borrowck-wg-fail-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-3.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -5,7 +5,7 @@\n \n fn main() {\n     let x = @mut 3;\n-    let y: &mut int = x;\n+    let _y: &mut int = x;\n     let z = x;\n     *z = 5;\n }"}, {"sha": "1456f13733872cdd878f2f13c7356516137fe1dc", "filename": "src/test/run-fail/borrowck-wg-fail-object-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-fail-object-arg.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,7 @@ impl Foo for int {\n     }\n }\n \n-fn it_takes_two(f: &Foo, g: &mut Foo) {\n+fn it_takes_two(_f: &Foo, _g: &mut Foo) {\n }\n \n fn main() {"}, {"sha": "fa82029855d70d4b81c6d61a184e6e442407bad3", "filename": "src/test/run-fail/borrowck-wg-imm-then-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-imm-then-mut.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,6 +14,6 @@ fn add2(_:&mut int)\n pub fn main()\n {\n     let a = @mut 3;\n-    let b = &*a; // freezes a\n+    let _b = &*a; // freezes a\n     add1(a);\n }"}, {"sha": "9d6b95871133200bfee0615b41da30fb663e2fca", "filename": "src/test/run-fail/borrowck-wg-mut-then-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-wg-mut-then-imm.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,6 +14,6 @@ fn add2(_:&int)\n pub fn main()\n {\n     let a = @mut 3;\n-    let b = &mut *a; // freezes a\n+    let _b = &mut *a; // freezes a\n     add1(a);\n }"}, {"sha": "2a256b9a4e384d8310e6b53d52b7033b41fb4b88", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,6 +19,6 @@ struct chan_t<T> {\n     port: port_id,\n }\n \n-fn send<T:Send>(ch: chan_t<T>, data: T) { fail!(); }\n+fn send<T:Send>(_ch: chan_t<T>, _data: T) { fail!(); }\n \n fn main() { fail!(\"quux\"); }"}, {"sha": "8ff62d5a43d108293327d964e90f8b95a6e9927a", "filename": "src/test/run-fail/die-macro-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:test\n \n fn main() {\n-    let i: int = fail!(\"test\");\n+    let _i: int = fail!(\"test\");\n }"}, {"sha": "de69b7b9fa6705ed03afd7c07abd96ef49415334", "filename": "src/test/run-fail/divide-by-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdivide-by-zero.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:attempted to divide by zero\n fn main() {\n     let y = 0;\n-    let z = 1 / y;\n+    let _z = 1 / y;\n }"}, {"sha": "1ceeee1b6ed11a8520a0ed5ec104ada159e2e3b0", "filename": "src/test/run-fail/doublefail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fdoublefail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdoublefail.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unreachable_code)];\n+\n //error-pattern:One\n fn main() {\n     fail!(\"One\");"}, {"sha": "ab8cea0a3051a3bc02520ec6bcf9b442ab628f91", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_assignment)];\n+#[allow(unused_variable)];\n+\n // error-pattern:wooooo\n fn main() {\n-    let mut a = 1; if 1 == 1 { a = 2; } fail!(~\"woooo\" + \"o\");\n+    let mut a = 1;\n+    if 1 == 1 { a = 2; }\n+    fail!(~\"woooo\" + \"o\");\n }"}, {"sha": "73259e6e140f549d57664a736d44a8f22ccbe89a", "filename": "src/test/run-fail/expr-if-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-if-fail.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let x = if false { 0 } else if true { fail!() } else { 10 }; }\n+fn main() { let _x = if false { 0 } else if true { fail!() } else { 10 }; }"}, {"sha": "075f6f5b4b1908286d50cac779bb9876bf0b4a94", "filename": "src/test/run-fail/expr-match-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fexpr-match-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fexpr-match-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexpr-match-fail.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,4 +12,4 @@\n \n \n // error-pattern:explicit failure\n-fn main() { let x = match true { false => { 0 } true => { fail!() } }; }\n+fn main() { let _x = match true { false => { 0 } true => { fail!() } }; }"}, {"sha": "863663334f8ed444fda789b0d78c842c83dc31d7", "filename": "src/test/run-fail/issue-2156.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-2156.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2156.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unnecessary_allocation)];\n+\n // error-pattern:explicit failure\n // Don't double free the string\n extern mod extra;"}, {"sha": "c1357988f7db59d0a8e58ac3367a1be2c969cd56", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -18,5 +18,5 @@ enum e<T> { e(arc::Arc<T>) }\n fn foo() -> e<int> {fail!();}\n \n fn main() {\n-   let f = foo();\n+   let _f = foo();\n }"}, {"sha": "44364007c067e80b44776c094fd36129cee787ff", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unnecessary_allocation)];\n+#[allow(unreachable_code)];\n+#[allow(unused_variable)];\n+\n // error-pattern:so long\n fn main() {\n     let mut x = ~[];"}, {"sha": "db954bc59466ac5f8d7cdda590506f0bcb3c3293", "filename": "src/test/run-fail/issue-948.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:beep boop\n \n+#[allow(unused_variable)];\n+\n struct Point { x: int, y: int }\n \n fn main() {"}, {"sha": "a54422ef8f535c4e6e9925c7c1cf1ff6d10b6a6b", "filename": "src/test/run-fail/match-bot-fail.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmatch-bot-fail.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,9 @@\n \n // error-pattern:explicit failure\n \n+#[allow(unreachable_code)];\n+#[allow(unused_variable)];\n+\n fn foo(s: ~str) { }\n \n fn main() {"}, {"sha": "76d4de7ecb03ce907b987c4e16e705a4dc36373e", "filename": "src/test/run-fail/mod-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fmod-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmod-zero.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:attempted remainder with a divisor of zero\n fn main() {\n     let y = 0;\n-    let z = 1 % y;\n+    let _z = 1 % y;\n }"}, {"sha": "ca267608025c30b0c8af8a2e32213a658a693115", "filename": "src/test/run-fail/rhs-type.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Frhs-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Frhs-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frhs-type.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,6 +12,12 @@\n // as a _|_-typed thing, not a str-typed thing\n // error-pattern:bye\n \n+#[allow(unreachable_code)];\n+#[allow(unused_variable)];\n+\n struct T { t: ~str }\n \n-fn main() { let pth = fail!(\"bye\"); let rs: T = T {t: pth}; }\n+fn main() {\n+    let pth = fail!(\"bye\");\n+    let _rs: T = T {t: pth};\n+}"}, {"sha": "d78dedfa39dc011f32096cde33f863eaaf02ccf9", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -35,7 +35,7 @@ fn r(x:int) -> r {\n fn main() {\n     error!(~\"whatever\");\n     do task::spawn {\n-      let i = r(5);\n+      let _i = r(5);\n     };\n     fail!();\n }"}, {"sha": "75b50c4f6ed6fa3f95fdecbc867cf847482b5fa1", "filename": "src/test/run-fail/task-spawn-barefn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftask-spawn-barefn.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:Ensure that the child task runs by failing\n \n-use std::str;\n use std::task;\n \n fn main() {"}, {"sha": "36954d2bad67e02d8b15ad8acf11de22748b5e33", "filename": "src/test/run-fail/unwind-assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-assert.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,6 +11,6 @@\n // error-pattern:fail\n \n fn main() {\n-    let a = @0;\n+    let _a = @0;\n     assert!(false);\n }"}, {"sha": "5ea71c94e14685b09b09d49fbb034309edf1f87d", "filename": "src/test/run-fail/unwind-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-closure.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:fail\n \n-fn f(a: @int) {\n+fn f(_a: @int) {\n     fail!();\n }\n "}, {"sha": "fd1ab88ff964704ddb1626afaf6cbc436ef759af", "filename": "src/test/run-fail/unwind-initializer-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer-indirect.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,5 +13,5 @@\n fn f() -> @int { fail!(); }\n \n fn main() {\n-    let a: @int = f();\n+    let _a: @int = f();\n }"}, {"sha": "0d1584f3dc8dbaa82e8c684abd2787dfc47bb59c", "filename": "src/test/run-fail/unwind-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-initializer.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn main() {\n-    let a: @int = {\n+    let _a: @int = {\n         fail!();\n     };\n }"}, {"sha": "365204d5c9e4d13d5c61d63dce2cad213979ea55", "filename": "src/test/run-fail/unwind-interleaved.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-interleaved.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,8 +15,8 @@ fn a() { }\n fn b() { fail!(); }\n \n fn main() {\n-    let x = ~[0];\n+    let _x = ~[0];\n     a();\n-    let y = ~[0];\n+    let _y = ~[0];\n     b();\n }"}, {"sha": "51c6cb3adf318cc137df1099e0b9d92ad54cfc58", "filename": "src/test/run-fail/unwind-iter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,9 @@\n \n // error-pattern:fail\n \n+#[allow(unreachable_code)];\n+#[allow(unused_variable)];\n+\n fn x(it: &fn(int)) {\n     fail!();\n     it(0);"}, {"sha": "17936df6959f2bb0423f3f32939e9f469cc9c204", "filename": "src/test/run-fail/unwind-iter2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-iter2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-iter2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:fail\n \n fn x(it: &fn(int)) {\n-    let a = @0;\n+    let _a = @0;\n     it(1);\n }\n "}, {"sha": "74d6ab00802e0e8a84e4b5d371bac80e1e260fc2", "filename": "src/test/run-fail/unwind-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-lambda.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,7 +21,7 @@ fn main() {\n         let mush = food + cheese;\n         let cheese = cheese.clone();\n         let f: &fn() = || {\n-            let chew = mush + cheese;\n+            let _chew = mush + cheese;\n             fail!(\"so yummy\")\n         };\n         f();"}, {"sha": "d215927c7d03fc28dbccf1caccd68878e0e2ecb4", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,10 +12,10 @@\n // error-pattern:fail\n \n fn main() {\n-    let count = @mut 0u;\n+    let _count = @mut 0u;\n     let mut map = std::hashmap::HashMap::new();\n     let mut arr = ~[];\n-    for i in range(0u, 10u) {\n+    for _i in range(0u, 10u) {\n         arr.push(@~\"key stuff\");\n         map.insert(arr.clone(), arr + &[@~\"value stuff\"]);\n         if arr.len() == 5 {"}, {"sha": "f8a63be2e9ad0d127e7babc932bfbe44799a87c1", "filename": "src/test/run-fail/unwind-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-nested.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,9 +11,9 @@\n // error-pattern:fail\n \n fn main() {\n-    let a = @0;\n+    let _a = @0;\n     {\n-        let b = @0;\n+        let _b = @0;\n         {\n             fail!();\n         }"}, {"sha": "88f71a5ed7ceaafbe25af922d2100ce6b3a2ba4b", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,7 +19,7 @@ fn prime() {\n }\n \n fn partial() {\n-    let x = @f();\n+    let _x = @f();\n }\n \n fn main() {"}, {"sha": "e9bbbd46c03fffc76e263508253220162e90f49b", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,7 +19,7 @@ fn prime() {\n }\n \n fn partial() {\n-    let x = ~f();\n+    let _x = ~f();\n }\n \n fn main() {"}, {"sha": "3d6d26937dbacf59e69accfaeb88f02012924ce7", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,7 +19,7 @@ fn prime() {\n }\n \n fn partial() {\n-    let x = ~[~[0], f(), ~[0]];\n+    let _x = ~[~[0], f(), ~[0]];\n }\n \n fn main() {"}, {"sha": "016654500b4aca83e5dbd8425c7c6b54d08d4e35", "filename": "src/test/run-fail/unwind-rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,7 +17,7 @@ fn build() -> ~[int] {\n struct Blk { node: ~[int] }\n \n fn main() {\n-    let blk = Blk {\n+    let _blk = Blk {\n         node: build()\n     };\n }"}, {"sha": "49a35181a8b2eb0b36460cd449603460be193e92", "filename": "src/test/run-fail/unwind-rec2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,7 +21,7 @@ fn build2() -> ~[int] {\n struct Blk { node: ~[int], span: ~[int] }\n \n fn main() {\n-    let blk = Blk {\n+    let _blk = Blk {\n         node: build1(),\n         span: build2()\n     };"}, {"sha": "d695caf7b5f974c7e85b55f8e6ba26d9cdb2c2be", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -22,5 +22,5 @@ fn r(i: int) -> r { r { i: i } }\n \n fn main() {\n     @0;\n-    let r = r(0);\n+    let _r = r(0);\n }"}, {"sha": "8249807af74ad51bfafd45d2989efe1e8d6c153d", "filename": "src/test/run-fail/unwind-stacked.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-stacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-stacked.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,16 +11,16 @@\n // error-pattern:fail\n \n fn f() {\n-    let a = @0;\n+    let _a = @0;\n     fail!();\n }\n \n fn g() {\n-    let b = @0;\n+    let _b = @0;\n     f();\n }\n \n fn main() {\n-    let a = @0;\n+    let _a = @0;\n     g();\n }"}, {"sha": "15fa3ceed5356a9ab3373d67b61e6df1476afac4", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,5 +15,5 @@ fn fold_local() -> @~[int]{\n }\n \n fn main() {\n-    let lss = (fold_local(), 0);\n+    let _lss = (fold_local(), 0);\n }"}, {"sha": "236ff8172207bbc0a601fa3de41be9ae8662d80e", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,5 +19,5 @@ fn fold_remote() -> @~[int]{\n }\n \n fn main() {\n-    let lss = (fold_local(), fold_remote());\n+    let _lss = (fold_local(), fold_remote());\n }"}, {"sha": "d5a06ffb9036b915e9084fe152bc10cd124a6052", "filename": "src/test/run-fail/unwind-uninitialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-uninitialized.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,5 +16,5 @@ fn f() {\n \n fn main() {\n     f();\n-    let a = @0;\n+    let _a = @0;\n }"}, {"sha": "32e1425b28c8af78c2c876ffdc050e799468ddaa", "filename": "src/test/run-fail/while-body-fails.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-body-fails.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(while_true)];\n+\n // error-pattern:quux\n-fn main() { let x: int = { while true { fail!(\"quux\"); } ; 8 } ; }\n+fn main() { let _x: int = { while true { fail!(\"quux\"); } ; 8 } ; }"}, {"sha": "a0b437814fd8d46867eac3f9cac8b08c588410b4", "filename": "src/test/run-fail/while-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-fail%2Fwhile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fwhile-fail.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(while_true)];\n+\n // error-pattern:giraffe\n fn main() {\n     fail!({ while true { fail!(\"giraffe\") }; \"clandestine\" });"}, {"sha": "6d6ae3da62fef1b599524d7be3e24bdcc865b2a2", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -26,10 +26,10 @@ fn f2(a: int, f: &fn(int)) -> int { f(1); return a; }\n pub fn main() {\n     let mut a = X {x: 1};\n     let mut b = 2;\n-    let mut c = 3;\n+    let c = 3;\n     assert_eq!(f1(&mut a, &mut b, c), 6);\n     assert_eq!(a.x, 0);\n     assert_eq!(b, 10);\n-    assert_eq!(f2(a.x, |x| a.x = 50), 0);\n+    assert_eq!(f2(a.x, |_| a.x = 50), 0);\n     assert_eq!(a.x, 50);\n }"}, {"sha": "ae94ad379d01257d34ba66da107911fcd4389cf0", "filename": "src/test/run-pass/arith-unsigned.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-unsigned.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n+#[allow(type_limits)];\n \n // Unsigned integer operations\n pub fn main() {"}, {"sha": "0f5d27015fb747a7709a6b3b908eeccf5a11eecb", "filename": "src/test/run-pass/assign-assign.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,22 +11,28 @@\n // Issue 483 - Assignment expressions result in nil\n fn test_assign() {\n     let mut x: int;\n-    let mut y: () = x = 10;\n+    let y: () = x = 10;\n     assert_eq!(x, 10);\n+    assert_eq!(y, ());\n     let mut z = x = 11;\n     assert_eq!(x, 11);\n+    assert_eq!(z, ());\n     z = x = 12;\n     assert_eq!(x, 12);\n+    assert_eq!(z, ());\n }\n \n fn test_assign_op() {\n     let mut x: int = 0;\n-    let mut y: () = x += 10;\n+    let y: () = x += 10;\n     assert_eq!(x, 10);\n+    assert_eq!(y, ());\n     let mut z = x += 11;\n     assert_eq!(x, 21);\n+    assert_eq!(z, ());\n     z = x += 12;\n     assert_eq!(x, 33);\n+    assert_eq!(z, ());\n }\n \n pub fn main() { test_assign(); test_assign_op(); }"}, {"sha": "ba54e92ef997805472e7de6228546b7d4235ff56", "filename": "src/test/run-pass/attr-start.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fattr-start.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fattr-start.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-start.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,6 +11,6 @@\n //xfail-fast\n \n #[start]\n-fn start(argc:int, argv: **u8, crate_map: *u8) -> int {\n+fn start(_argc: int, _argv: **u8, _crate_map: *u8) -> int {\n     return 0;\n }"}, {"sha": "a7a4aa9885e6e89f5bd6b8cb43dc9ac103dbfdf1", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n extern mod extra;\n use extra::arc;\n-fn dispose(_x: arc::Arc<bool>) { unsafe { } }\n+fn dispose(_x: arc::Arc<bool>) { }\n \n pub fn main() {\n     let p = arc::Arc::new(true);"}, {"sha": "eb0f04b8b7da1b37d43903128a255657963600a5", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,8 +10,6 @@\n \n // Binop corner cases\n \n-use std::libc;\n-\n fn test_nil() {\n     assert_eq!((), ());\n     assert!((!(() != ())));\n@@ -95,7 +93,7 @@ fn p(x: int, y: int) -> p {\n }\n \n fn test_class() {\n-  let mut q = p(1, 2);\n+  let q = p(1, 2);\n   let mut r = p(1, 2);\n \n   unsafe {"}, {"sha": "fcd6a8d7c85e5fd1b6403e597a41d8fa7986b206", "filename": "src/test/run-pass/block-arg-in-parentheses.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n-\n fn w_semi(v: ~[int]) -> int {\n     // the semicolon causes compiler not to\n     // complain about the ignored return value:"}, {"sha": "717093e9de7043aca2c67e5afe6f4b87aaba2961", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n-\n // Check usage and precedence of block arguments in expressions:\n pub fn main() {\n     let v = ~[-1f, 0f, 1f, 2f, 3f];"}, {"sha": "633e0f71b9e0b24ece778a5d1f92d15d55dc7c37", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n use std::util;\n \n struct Ints {sum: ~int, values: ~[int]}"}, {"sha": "4ccbf6b5b0fedfb65a0a91ca3dc823a732917b90", "filename": "src/test/run-pass/borrowck-pat-reassign-no-binding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -18,4 +18,5 @@ pub fn main() {\n       }\n       Some(_) => { }\n     }\n+    assert_eq!(x, Some(0));\n }"}, {"sha": "a8e14b5297ff144f39c6c864d88c25e7862ad9ef", "filename": "src/test/run-pass/borrowck-preserve-box-in-arm-not-taken.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,9 +13,9 @@\n pub fn main() {\n     let x: @mut @Option<~int> = @mut @None;\n     match x {\n-      @@Some(ref y) => {\n+      @@Some(ref _y) => {\n         // here, the refcount of `*x` is bumped so\n-        // `y` remains valid even if `*x` is modified.\n+        // `_y` remains valid even if `*x` is modified.\n         *x = @None;\n       }\n       @@None => {"}, {"sha": "c53b4b4e747d59e1b08646b6687efc7509ae8afb", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,7 +15,7 @@ use std::ptr;\n struct F { f: ~int }\n \n pub fn main() {\n-    let mut x = @mut @F {f: ~3};\n+    let x = @mut @F {f: ~3};\n     match x {\n       @@F{f: ref b_x} => {\n         assert_eq!(**b_x, 3);"}, {"sha": "3f3534ca43e27c32d6f06e1666dc5f49b91278a3", "filename": "src/test/run-pass/borrowck-preserve-box-sometimes-needed.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,9 +13,10 @@\n fn switcher(x: Option<@int>) {\n     let mut x = x;\n     match x {\n-      Some(@y) => { y.clone(); x = None; }\n-      None => { }\n+        Some(@y) => { y.clone(); x = None; }\n+        None => { }\n     }\n+    assert_eq!(x, None);\n }\n \n pub fn main() {"}, {"sha": "dc3718275fce9f3ab29dab9436e3978e65f3e9d1", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,8 +15,8 @@ fn testfn(cond: bool) {\n     let mut y = @4;\n \n     // borrow x and y\n-    let mut r_x = &*x;\n-    let mut r_y = &*y;\n+    let r_x = &*x;\n+    let r_y = &*y;\n     let mut r = r_x;\n     let mut exp = 3;\n \n@@ -33,6 +33,8 @@ fn testfn(cond: bool) {\n \n     info!(\"*r = %d, exp = %d\", *r, exp);\n     assert_eq!(*r, exp);\n+    assert_eq!(x, @5);\n+    assert_eq!(y, @6);\n }\n \n pub fn main() {"}, {"sha": "315b69f3f2752a82bf6211a83c7c7adccbe5efd4", "filename": "src/test/run-pass/box-in-tup.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,4 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main() { let i: (@int, int) = (@10, 10); let (a, _) = i; }\n+pub fn main() {\n+    let i: (@int, int) = (@10, 10);\n+    let (_a, _) = i;\n+}"}, {"sha": "ea2b7d58a1112c136f2a1ee2c68a1d4bc9a0cf58", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,11 +14,11 @@\n \n fn some_box(x: int) -> @int { return @x; }\n \n-fn is_odd(n: int) -> bool { return true; }\n+fn is_odd(_n: int) -> bool { return true; }\n \n-fn length_is_even(vs: @int) -> bool { return true; }\n+fn length_is_even(_vs: @int) -> bool { return true; }\n \n-fn foo(acc: int, n: int) {\n+fn foo(_acc: int, n: int) {\n     if is_odd(n) && length_is_even(some_box(1)) { error!(\"bloop\"); }\n }\n "}, {"sha": "53b468470609156db30b8914b0f2a629abf2eb07", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,11 +14,11 @@\n \n fn some_box(x: int) -> @int { return @x; }\n \n-fn is_odd(n: int) -> bool { return true; }\n+fn is_odd(_n: int) -> bool { return true; }\n \n-fn length_is_even(vs: @int) -> bool { return true; }\n+fn length_is_even(_vs: @int) -> bool { return true; }\n \n-fn foo(acc: int, n: int) {\n+fn foo(_acc: int, n: int) {\n     if is_odd(n) || length_is_even(some_box(1)) { error!(\"bloop\"); }\n }\n "}, {"sha": "5903e421465008af68bce0c980387fbcf318932b", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec;\n-\n pub fn main() {\n     let mut i = 0;\n     while i < 20 { i += 1; if i == 10 { break; } }"}, {"sha": "ac7b221cff81c181a9c2635ee9aba774c7e723e7", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::libc;\n-\n mod rustrt {\n     use std::libc;\n \n@@ -20,7 +18,5 @@ mod rustrt {\n }\n \n pub fn main() {\n-    unsafe {\n-        let _foo = rustrt::rust_get_test_int;\n-    }\n+    let _foo = rustrt::rust_get_test_int;\n }"}, {"sha": "a0276e7e564fc133e68366672162e5ada0564d5a", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,29 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::str;\n-\n mod libc {\n+    use std::libc::{c_char, c_long, c_longlong};\n+\n     #[abi = \"cdecl\"]\n     #[nolink]\n     extern {\n-        pub fn atol(x: *u8) -> int;\n-        pub fn atoll(x: *u8) -> i64;\n+        pub fn atol(x: *c_char) -> c_long;\n+        pub fn atoll(x: *c_char) -> c_longlong;\n     }\n }\n \n fn atol(s: ~str) -> int {\n-    s.with_c_str(|x| unsafe { libc::atol(x as *u8) })\n+    s.with_c_str(|x| unsafe { libc::atol(x) as int })\n }\n \n fn atoll(s: ~str) -> i64 {\n-    s.with_c_str(|x| unsafe { libc::atoll(x as *u8) })\n+    s.with_c_str(|x| unsafe { libc::atoll(x) as i64 })\n }\n \n pub fn main() {\n-    unsafe {\n-        assert_eq!(atol(~\"1024\") * 10, atol(~\"10240\"));\n-        assert!((atoll(~\"11111111111111111\") * 10i64)\n-            == atoll(~\"111111111111111110\"));\n-    }\n+    assert_eq!(atol(~\"1024\") * 10, atol(~\"10240\"));\n+    assert!((atoll(~\"11111111111111111\") * 10) == atoll(~\"111111111111111110\"));\n }"}, {"sha": "edd1a9cce65b4298d3480616340fb8f1eba84791", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -24,7 +24,6 @@\n // course preferable, as the value itself is\n // irrelevant).\n \n-use std::comm::*;\n use std::task;\n \n fn foo(x: ()) -> Port<()> {"}, {"sha": "50afcac4e3ab3d95dd3050835ed3f53241ce7a49", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,7 +16,7 @@ extern mod cci_iter_lib;\n pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //info!(\"%?\", bt0);\n-    do cci_iter_lib::iter(~[1, 2, 3]) |i| {\n+    do cci_iter_lib::iter([1, 2, 3]) |i| {\n         printf!(\"%d\", *i);\n         //assert!(bt0 == sys::rusti::frame_address(2u32));\n     }"}, {"sha": "233a43188468ffc13f310c728c9c2090b092990b", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,8 +12,8 @@\n \n use std::task;\n \n-fn child2(s: ~str) { }\n+fn child2(_s: ~str) { }\n \n pub fn main() {\n-    let x = task::spawn(|| child2(~\"hi\"));\n+    let _x = task::spawn(|| child2(~\"hi\"));\n }"}, {"sha": "dd63d96907760dc1b77b27c7f52102d900100872", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n-\n trait noisy {\n   fn speak(&self) -> int;\n }\n@@ -83,7 +81,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n \n fn annoy_neighbors(critter: @noisy) {\n-    for i in range(0u, 10) { critter.speak(); }\n+    for _i in range(0u, 10) { critter.speak(); }\n }\n \n pub fn main() {"}, {"sha": "01907da38ad9da818df8b0f3b5e1aebf6c02c2af", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,8 +11,6 @@\n // xfail-fast\n \n use std::cmp;\n-use std::int;\n-use std::uint;\n \n enum cat_type { tuxedo, tabby, tortoiseshell }\n "}, {"sha": "9443904b46d2143f97908e2cab5685104f3402bd", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,8 +13,6 @@\n extern mod cci_class_trait;\n use cci_class_trait::animals::*;\n \n-use std::uint;\n-\n struct cat {\n   priv meows: uint,\n "}, {"sha": "433d7f7a22ff48089fe38ececa8174b57605088e", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,8 +10,6 @@\n \n // xfail-fast\n \n-use std::uint;\n-\n trait noisy {\n     fn speak(&mut self);\n }"}, {"sha": "159a100e61aaf9ae335844de3a4d30a927be5d19", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,7 +15,7 @@ use cci_class_3::kitties::*;\n \n pub fn main() {\n     let mut nyan : cat = cat(52u, 99);\n-    let mut kitty = cat(1000u, 2);\n+    let kitty = cat(1000u, 2);\n     assert_eq!(nyan.how_hungry, 99);\n     assert_eq!(kitty.how_hungry, 2);\n     nyan.speak();"}, {"sha": "f5fa72e4ce5106f27668f0f32023ef5dd3ae618e", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -28,7 +28,7 @@ fn cat(in_x: uint, in_y: int) -> cat {\n \n pub fn main() {\n   let mut nyan: cat = cat(52u, 99);\n-  let mut kitty = cat(1000u, 2);\n+  let kitty = cat(1000u, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "5555125a03b2263bfa3aec2df4028677768743b8", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -52,10 +52,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n impl ToStr for cat {\n     fn to_str(&self) -> ~str {\n-        // FIXME #5384: this unsafe block is to work around purity\n-        unsafe {\n-            self.name.clone()\n-        }\n+        self.name.clone()\n     }\n }\n \n@@ -66,6 +63,6 @@ fn print_out(thing: @ToStr, expected: ~str) {\n }\n \n pub fn main() {\n-  let mut nyan : @ToStr = @cat(0u, 2, ~\"nyan\") as @ToStr;\n+  let nyan : @ToStr = @cat(0u, 2, ~\"nyan\") as @ToStr;\n   print_out(nyan, ~\"nyan\");\n }"}, {"sha": "452242dd082af821e0b2ed02abcc232ee3a80cd2", "filename": "src/test/run-pass/class-str-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,5 +21,5 @@ fn cat(in_name: ~str) -> cat {\n }\n \n pub fn main() {\n-  let nyan = cat(~\"nyan\");\n+  let _nyan = cat(~\"nyan\");\n }"}, {"sha": "ab6a8b1597bf673ea9449b5538a104fe11385582", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -28,6 +28,6 @@ fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n \n \n pub fn main() {\n-  let mut _nyan : cat<int> = cat::<int>(52u, 99);\n+  let _nyan : cat<int> = cat::<int>(52u, 99);\n   //  let mut kitty = cat(1000u, 2);\n }"}, {"sha": "4c7823b4107a05a992898d51f38f79975bf1aed0", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,8 +13,6 @@\n extern mod cci_class_4;\n use cci_class_4::kitties::*;\n \n-use std::uint;\n-\n pub fn main() {\n     let mut nyan = cat(0u, 2, ~\"nyan\");\n     nyan.eat();"}, {"sha": "6e08a4db14e944baad5400788f40298038312728", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -27,7 +27,7 @@ fn cat(in_x : uint, in_y : int) -> cat {\n \n pub fn main() {\n   let mut nyan : cat = cat(52u, 99);\n-  let mut kitty = cat(1000u, 2);\n+  let kitty = cat(1000u, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "49e8f5c04e36a0e32f43e107e8892f572820f40c", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -22,8 +22,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan : cat = cat(52u, 99);\n-  let mut kitty = cat(1000u, 2);\n+  let nyan : cat = cat(52u, 99);\n+  let kitty = cat(1000u, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n }"}, {"sha": "d3b3c0c059178a583a1807be837445b091b51532", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,6 @@\n \n // xfail-win32\n \n-use std::result;\n use std::task;\n \n fn adder(x: @int, y: @int) -> int { return *x + *y; }"}, {"sha": "5525062581c1a6676b9caf575e1bebc750872ffe", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,6 +11,6 @@ fn foo(speaker: &const SpeechMaker) -> uint {\n }\n \n pub fn main() {\n-    let mut lincoln = SpeechMaker {speeches: 22};\n+    let lincoln = SpeechMaker {speeches: 22};\n     assert_eq!(foo(&const lincoln), 55);\n }"}, {"sha": "ac9501a71103a4d568da8d34151c938bd3d36f8d", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,12 +9,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::comm::*;\n use std::task;\n \n pub fn main() {\n     let (p, ch) = stream();\n-    let t = task::spawn(|| child(&ch) );\n+    let _t = task::spawn(|| child(&ch) );\n     let y = p.recv();\n     error!(\"received\");\n     error!(y);"}, {"sha": "7a085c5d3e2dd3ee1c9226684b00bfdd4fba9dfd", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,9 +16,9 @@ type t = int;\n \n fn nothing() { }\n \n-fn putstr(s: ~str) { }\n+fn putstr(_s: ~str) { }\n \n-fn putint(i: int) {\n+fn putint(_i: int) {\n     let mut i: int = 33;\n     while i < 36 { putstr(~\"hi\"); i = i + 1; }\n }"}, {"sha": "00be4cd26f43a7823f227f6fb182a6ec83d04abf", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -89,8 +89,8 @@ pub fn main() {\n     // Exercise some of the configured items in ways that wouldn't be possible\n     // if they had the bogus definition\n     assert!((b));\n-    let x: t = true;\n-    let y: tg = bar;\n+    let _x: t = true;\n+    let _y: tg = bar;\n \n     test_in_fn_ctxt();\n }"}, {"sha": "b31dcc83428400c7c770aeaf29d44fefc711feb0", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n-\n static x : [int, ..4] = [1,2,3,4];\n static p : int = x[2];\n static y : &'static [int] = &[1,2,3,4];"}, {"sha": "3e79fad542e16b81d51bfafdd134a99df004acec", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n-\n struct Pair<'self> { a: int, b: &'self int }\n \n static x: &'static int = &10;"}, {"sha": "111fe3870ba3bc0bdffe45909a7da6a374d94625", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cmp;\n-use std::io;\n \n struct foo { a: int, b: int, c: int }\n "}, {"sha": "8a1db762b440c52fe752a389600aae751b3a77fc", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n-\n static x : [int, ..4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n "}, {"sha": "2551d1a5cfcba32455e421de89a3cae23a37c9b8", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,7 +16,6 @@\n // instead of in std.\n \n use std::libc;\n-use std::os;\n use std::run::*;\n use std::run;\n use std::str;"}, {"sha": "b644d1a8b1f9db95f2bf73997af7e2c9017b0691", "filename": "src/test/run-pass/deep-vector2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = ~[\n+    let _x = ~[\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}, {"sha": "9951531d2d171740bc435991b6033afb14b08e15", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,4 +10,7 @@\n \n \n \n-pub fn main() { let x: @int = @10; let y: int = *x; }\n+pub fn main() {\n+    let x: @int = @10;\n+    let _y: int = *x;\n+}"}, {"sha": "b17632e4ee7523fd3fc24a2418c9fea9a347b92a", "filename": "src/test/run-pass/deriving-meta-multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,7 +19,7 @@ struct Foo {\n }\n \n pub fn main() {\n-    use std::hash::{Hash, HashUtil}; // necessary for IterBytes check\n+    use std::hash::HashUtil; // necessary for IterBytes check\n \n     let a = Foo {bar: 4, baz: -3};\n "}, {"sha": "2fa77ee16356bd8682143a0ae771d0ebf667d7af", "filename": "src/test/run-pass/deriving-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n }\n \n pub fn main() {\n-    use std::hash::{Hash, HashUtil}; // necessary for IterBytes check\n+    use std::hash::HashUtil; // necessary for IterBytes check\n \n     let a = Foo {bar: 4, baz: -3};\n "}, {"sha": "f08e5f054a9da75651f4def6d7f05aa9217a879c", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,9 +1,11 @@\n // Just testing that fail!() type checks in statement or expr\n \n+#[allow(unreachable_code)];\n+\n fn f() {\n     fail!();\n \n-    let x: int = fail!();\n+    let _x: int = fail!();\n }\n \n pub fn main() {"}, {"sha": "485d59da7d4b2af0672bd0e3f959162ade9d5919", "filename": "src/test/run-pass/do-empty-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-empty-args.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,7 @@\n // no-reformat\n // Testing various forms of `do` with empty arg lists\n \n-fn f(f: &fn() -> bool) -> bool {\n+fn f(_f: &fn() -> bool) -> bool {\n     true\n }\n "}, {"sha": "6aef1f5f9e567b9d984c9303cb536756f08f7834", "filename": "src/test/run-pass/do-no-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdo-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-no-args.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,9 +10,9 @@\n \n // Testing that we can drop the || in do exprs\n \n-fn f(f: @fn() -> bool) -> bool { true }\n+fn f(_f: @fn() -> bool) -> bool { true }\n \n-fn d(f: @fn()) { }\n+fn d(_f: @fn()) { }\n \n pub fn main() {\n     do d { }"}, {"sha": "8a0509c177432d9284720e0ee80781925cf815d5", "filename": "src/test/run-pass/do-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-pure.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(f: &fn()) {\n+fn f(_f: &fn()) {\n }\n \n fn g() {"}, {"sha": "c6ea32ba29046a347b252bf335e5616b6158af5b", "filename": "src/test/run-pass/double-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,7 +12,7 @@ struct Quux {\n     bar: int\n }\n \n-fn g(i: int) { }\n+fn g(_i: int) { }\n fn f(foo: @@Quux) { g(foo.bar); }\n \n pub fn main() { }"}, {"sha": "07a73e0d8a9410d9af183b7a8b034998e05050cf", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,4 +12,7 @@\n \n enum t { foo(@int), }\n \n-pub fn main() { let tt = foo(@10); match tt { foo(z) => { } } }\n+pub fn main() {\n+    let tt = foo(@10);\n+    match tt { foo(_z) => { } }\n+}"}, {"sha": "afc9e532ad8548e02d3837319a5b07e56b7f704e", "filename": "src/test/run-pass/drop-on-ret.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,6 +12,12 @@\n \n \n // -*- rust -*-\n-fn f() -> int { if true { let s: ~str = ~\"should not leak\"; return 1; } return 0; }\n+fn f() -> int {\n+    if true {\n+        let _s: ~str = ~\"should not leak\";\n+        return 1;\n+    }\n+    return 0;\n+}\n \n pub fn main() { f(); }"}, {"sha": "cb5a5294acf92d9cf0dc876f33a8b67de09247b3", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -20,5 +20,5 @@ impl<T> ::std::ops::Drop for S<T> {\n }\n \n pub fn main() {\n-    let x = S { x: 1 };\n+    let _x = S { x: 1 };\n }"}, {"sha": "35d59770d12e81e6bd8a18aee697d005e97a5af6", "filename": "src/test/run-pass/drop-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,5 +19,5 @@ impl Drop for Foo {\n }\n \n pub fn main() {\n-    let x: Foo = Foo { x: 3 };\n+    let _x: Foo = Foo { x: 3 };\n }"}, {"sha": "6c90e011218c4a0a7f854ab891d94c38361694ad", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_mut)];\n \n-\n-pub fn main() { let mut v: ~[int] = ~[]; }\n+pub fn main() { let mut _v: ~[int] = ~[]; }"}, {"sha": "58a91d4dbce4bf96ad74be7e43f355d9c9d4742e", "filename": "src/test/run-pass/enum-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-alignment.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@ use std::sys;\n \n fn addr_of<T>(ptr: &T) -> uint {\n     let ptr = ptr::to_unsafe_ptr(ptr);\n-    unsafe { ptr as uint }\n+    ptr as uint\n }\n \n fn is_aligned<T>(ptr: &T) -> bool {"}, {"sha": "083e851f9659a7072cb20adfadbf1bcb093520ef", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n     test_color(imaginary, -1, ~\"imaginary\");\n }\n \n-fn test_color(color: color, val: int, name: ~str) {\n+fn test_color(color: color, val: int, _name: ~str) {\n     assert!(color as int == val);\n     assert!(color as float == val as float);\n }"}, {"sha": "09834269d0b7b74f2becc7fcb4aee59389708edb", "filename": "src/test/run-pass/enum-export-inheritance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-export-inheritance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-export-inheritance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-export-inheritance.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,5 +17,5 @@ mod a {\n }\n \n pub fn main() {\n-    let x = a::Bar;\n+    let _x = a::Bar;\n }"}, {"sha": "430823b295073096797ae8489fe988dcfbcd0477", "filename": "src/test/run-pass/enum-variants.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variants.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,3 +1,6 @@\n+#[allow(dead_assignment)];\n+#[allow(unused_variable)];\n+\n enum Animal {\n     Dog (~str, float),\n     Cat { name: ~str, weight: float }\n@@ -7,5 +10,5 @@ pub fn main() {\n     let mut a: Animal = Dog(~\"Cocoa\", 37.2);\n     a = Cat{ name: ~\"Spotty\", weight: 2.7 };\n     // permuting the fields should work too\n-    let c = Cat { weight: 3.1, name: ~\"Spreckles\" };\n+    let _c = Cat { weight: 3.1, name: ~\"Spreckles\" };\n }"}, {"sha": "d240e849ad049d8e58acda1826012d35db13f916", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,9 +16,9 @@ static BAR:uint = Bunny as uint;\n static BAR2:uint = BAR;\n \n fn main() {\n-    let v = [0, .. Bunny as uint];\n-    let v = [0, .. BAR];\n-    let v = [0, .. BAR2];\n+    let _v = [0, .. Bunny as uint];\n+    let _v = [0, .. BAR];\n+    let _v = [0, .. BAR2];\n     static BAR3:uint = BAR2;\n-    let v = [0, .. BAR3];\n-}\n\\ No newline at end of file\n+    let _v = [0, .. BAR3];\n+}"}, {"sha": "ca2039fedede1abb3e2db049dd0851986d1a58c3", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,7 +12,7 @@\n pub fn main() {\n     let x = &\"hello\";\n     let v = &\"hello\";\n-    let mut y : &str = &\"there\";\n+    let y : &str = &\"there\";\n \n     info!(x);\n     info!(y);"}, {"sha": "7935886d39b3b5e60a7f1235ddc143dd32e5688e", "filename": "src/test/run-pass/estr-uniq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-uniq.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_assignment)];\n+\n pub fn main() {\n     let x : ~str = ~\"hello\";\n     let _y : ~str = ~\"there\";"}, {"sha": "c872ee5a9c58d60f7caa95c019be1a7bfb4c3142", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_assignment)];\n+\n pub fn main() {\n     let x : [@int, ..5] = [@1,@2,@3,@4,@5];\n     let _y : [@int, ..5] = [@1,@2,@3,@4,@5];"}, {"sha": "4a14faf1f84e17cb214c0256a66154e674f42733", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_assignment)];\n+\n pub fn main() {\n     let x : &[int] = &[1,2,3,4,5];\n     let mut z = &[1,2,3,4,5];"}, {"sha": "735891b25d48c603e78c70d1737d58c54fe6ec99", "filename": "src/test/run-pass/exec-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,5 +14,5 @@\n use std::os;\n \n pub fn main() {\n-    assert_eq!(os::getenv(~\"TEST_EXEC_ENV\"), Some(~\"22\"));\n+    assert_eq!(os::getenv(\"TEST_EXEC_ENV\"), Some(~\"22\"));\n }"}, {"sha": "adc4b553d095924a709bab47037120222ecbe133", "filename": "src/test/run-pass/export-abstract-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,4 +17,4 @@ mod foo {\n     pub fn f() -> t { return t1; }\n }\n \n-pub fn main() { let v: foo::t = foo::f(); }\n+pub fn main() { let _v: foo::t = foo::f(); }"}, {"sha": "ab2750dc4af04343a8ffcadf271b036ea115b638", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,7 +21,7 @@ mod foo {\n         pub static a : int = 10;\n     }\n     pub fn zum() {\n-        let b = a;\n+        let _b = a;\n     }\n }\n "}, {"sha": "d0aa23e81fa1d8f1e73c7a1b760da6c6c14e32e7", "filename": "src/test/run-pass/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,4 +12,4 @@ mod foo {\n     pub enum t { t1, }\n }\n \n-pub fn main() { let v = foo::t1; }\n+pub fn main() { let _v = foo::t1; }"}, {"sha": "dbb1ac1f649895ac415d9285fafd09a0a5679b0f", "filename": "src/test/run-pass/expr-block-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-fn.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@ fn test_fn() {\n     type t = @fn() -> int;\n     fn ten() -> int { return 10; }\n     let rs: t = { ten };\n-    //assert!((rs() == 10));\n+    assert!((rs() == 10));\n }\n \n pub fn main() { test_fn(); }"}, {"sha": "c77cad8858e009025418b3c1688a7b90015f8bb1", "filename": "src/test/run-pass/expr-block-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-ref.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n // Regression test for issue #388\n-pub fn main() { let x = { { @10 } }; }\n+pub fn main() { let _x = { { @10 } }; }"}, {"sha": "669acf1feb45ac37a2d7e003b22a2ec19dd4cde9", "filename": "src/test/run-pass/expr-elseif-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,6 +12,6 @@\n // values from the else if branch\n pub fn main() {\n     let y: @uint = @10u;\n-    let x = if false { y } else if true { y } else { y };\n+    let _x = if false { y } else if true { y } else { y };\n     assert_eq!(*y, 10u);\n }"}, {"sha": "96acaf43e3413a64e73e376ee0a8161db8dadb39", "filename": "src/test/run-pass/expr-elseif-ref2.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-elseif-ref2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,4 +9,12 @@\n // except according to those terms.\n \n // Regression test for issue #388\n-pub fn main() { let x = if false { @0u } else if true { @10u } else { @0u }; }\n+pub fn main() {\n+    let _x = if false {\n+        @0u\n+    } else if true {\n+        @10u\n+    } else {\n+        @0u\n+    };\n+}"}, {"sha": "afc7dfaf9b441bcfd51a03a5cd0c4ec4fe3f5d14", "filename": "src/test/run-pass/expr-empty-ret.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-empty-ret.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,11 @@\n \n // Issue #521\n \n-fn f() { let x = match true { true => { 10 } false => { return } }; }\n+fn f() {\n+    let _x = match true {\n+        true => { 10 }\n+        false => { return }\n+    };\n+}\n \n pub fn main() { }"}, {"sha": "a34620d2e1be427f97afd9b03057e0b9c3e5b8ce", "filename": "src/test/run-pass/expr-if-fail-all.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-fail-all.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,4 +10,10 @@\n \n // When all branches of an if expression result in fail, the entire if\n // expression results in fail.\n-pub fn main() { let x = if true { 10 } else { if true { fail!() } else { fail!() } }; }\n+pub fn main() {\n+    let _x = if true {\n+        10\n+    } else {\n+        if true { fail!() } else { fail!() }\n+    };\n+}"}, {"sha": "aef11a78e0dbb6ae5c79deedd52dd821b87292b4", "filename": "src/test/run-pass/expr-match-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail-all.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@\n // When all branches of an match expression result in fail, the entire\n // match expression results in fail.\n pub fn main() {\n-    let x =\n+    let _x =\n         match true {\n           true => { 10 }\n           false => { match true { true => { fail!() } false => { fail!() } } }"}, {"sha": "1e9ad5283d1ed4a17591c95259438cf1575c0ba6", "filename": "src/test/run-pass/expr-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fexpr-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -22,7 +22,7 @@ fn test_basic() {\n }\n \n fn test_inferrence() {\n-    let mut rs = match true { true => { true } false => { false } };\n+    let rs = match true { true => { true } false => { false } };\n     assert!((rs));\n }\n "}, {"sha": "4643c809961e7b7c10d1c98d70007516e6eb201a", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_imports)];\n+\n extern mod extra;\n use extra::json::Object;\n "}, {"sha": "22aab1aa661911dde5774d18964afea037d19c23", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,5 +14,5 @@ struct r {\n \n pub fn main() {\n     fn f() {}\n-    let i: r = r {field: f};\n+    let _i: r = r {field: f};\n }"}, {"sha": "b19708a971203ae36b39c8ce0b2b5779cb1a1c11", "filename": "src/test/run-pass/fn-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Ffn-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-lval.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-fn foo(f: extern fn(int) -> int) { }\n+fn foo(_f: extern fn(int) -> int) { }\n \n fn id(x: int) -> int { return x; }\n "}, {"sha": "bb9254589f7b3f935f92673713e21d1a024f7cf9", "filename": "src/test/run-pass/fn-type-infer.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-type-infer.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_variable)];\n+\n pub fn main() {\n     // We should be able to type infer inside of @fns.\n-    let f = || {\n+    let _f = || {\n         let i = 10;\n     };\n }"}, {"sha": "1d17959645acd91e5559d926af9145a29e68c982", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,10 +9,8 @@ extern {\n pub fn main() {\n     unsafe {\n         do run_in_bare_thread() {\n-            unsafe {\n-                let i = &100;\n-                rust_dbg_call(callback, cast::transmute(i));\n-            }\n+            let i = &100;\n+            rust_dbg_call(callback, cast::transmute(i));\n         }\n     }\n }"}, {"sha": "9ba332fb8221ef03191517ffeff53840fd25ceb3", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,24 +10,22 @@\n \n extern mod extra;\n \n-use std::libc;\n-use std::str;\n-use std::vec;\n-\n mod libc {\n+    use std::libc::{c_char, size_t};\n+\n     #[nolink]\n     #[abi = \"cdecl\"]\n     extern {\n         #[link_name = \"strlen\"]\n-        pub fn my_strlen(str: *u8) -> uint;\n+        pub fn my_strlen(str: *c_char) -> size_t;\n     }\n }\n \n fn strlen(str: ~str) -> uint {\n-    unsafe {\n-        // C string is terminated with a zero\n-        do str.with_c_str |buf| {\n-            libc::my_strlen(buf as *u8)\n+    // C string is terminated with a zero\n+    do str.with_c_str |buf| {\n+        unsafe {\n+            libc::my_strlen(buf) as uint\n         }\n     }\n }"}, {"sha": "977488d4529af4ea7656afe4133e7ced789af585", "filename": "src/test/run-pass/foreign-mod-unused-const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod-unused-const.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,9 +9,11 @@\n // except according to those terms.\n \n mod foo {\n+    use std::libc::c_int;\n+\n     #[nolink]\n     extern {\n-        pub static errno: int;\n+        pub static errno: c_int;\n     }\n }\n "}, {"sha": "2cc7e2707728408f0ad754d64e48ce7f58b7b841", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,11 +21,12 @@ mod zed {\n }\n \n mod libc {\n+    use std::libc::{c_int, c_void, size_t, ssize_t};\n+\n     #[abi = \"cdecl\"]\n     #[nolink]\n     extern {\n-        pub fn write(fd: int, buf: *u8, count: ::std::libc::size_t)\n-                     -> ::std::libc::ssize_t;\n+        pub fn write(fd: c_int, buf: *c_void, count: size_t) -> ssize_t;\n     }\n }\n "}, {"sha": "9e0dbfba0e75f167e58d26afca9807eca32c507c", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,6 +11,6 @@\n \n struct Pair { x: @int, y: @int }\n \n-fn f<T>(t: T) { let t1: T = t; }\n+fn f<T>(t: T) { let _t1: T = t; }\n \n pub fn main() { let x = Pair {x: @10, y: @12}; f(x); }"}, {"sha": "d14ee82e45eab8cd634279b35ac78699d95979c0", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n+#[allow(dead_assignment)];\n \n // -*- rust -*-\n fn id<T>(x: T) -> T { return x; }"}, {"sha": "17de964dd868e412b5c5e14f1b9f527922daf4ba", "filename": "src/test/run-pass/generic-ivec-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec-leak.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,4 +10,4 @@\n \n enum wrapper<T> { wrapped(T), }\n \n-pub fn main() { let w = wrapped(~[1, 2, 3, 4, 5]); }\n+pub fn main() { let _w = wrapped(~[1, 2, 3, 4, 5]); }"}, {"sha": "aac390dc6ec86a999b66c7ae8beae03e52143364", "filename": "src/test/run-pass/generic-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-ivec.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T>(v: @T) { }\n+fn f<T>(_v: @T) { }\n pub fn main() { f(@~[1, 2, 3, 4, 5]); }"}, {"sha": "6111acfe42c7f25bc40458b212e320c4764344d4", "filename": "src/test/run-pass/generic-recursive-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-recursive-tag.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,6 +13,6 @@\n enum list<T> { cons(@T, @list<T>), nil, }\n \n pub fn main() {\n-    let a: list<int> =\n+    let _a: list<int> =\n         cons::<int>(@10, @cons::<int>(@12, @cons::<int>(@13, @nil::<int>)));\n }"}, {"sha": "4fd8b73c8191878fdc7209db0b83f0a22c9f66f6", "filename": "src/test/run-pass/generic-tag-corruption.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-corruption.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,4 +14,4 @@\n // This causes memory corruption in stage0.\n enum thing<K> { some(K), }\n \n-pub fn main() { let x = some(~\"hi\"); }\n+pub fn main() { let _x = some(~\"hi\"); }"}, {"sha": "fb8140790e3e9f940ae7a8adcdd80ae28597bc57", "filename": "src/test/run-pass/generic-tag-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-local.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,4 +12,4 @@\n \n enum clam<T> { a(T), }\n \n-pub fn main() { let c = a(3); }\n+pub fn main() { let _c = a(3); }"}, {"sha": "f740d8cb2d1591ef73233d5b392bd22d1efde466", "filename": "src/test/run-pass/generic-tag-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-match.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#[allow(dead_assignment)];\n \n enum foo<T> { arm(T), }\n \n fn altfoo<T>(f: foo<T>) {\n     let mut hit = false;\n-    match f { arm::<T>(x) => { info!(\"in arm\"); hit = true; } }\n+    match f { arm::<T>(_x) => { info!(\"in arm\"); hit = true; } }\n     assert!((hit));\n }\n "}, {"sha": "16836b0d7b83029aaa42fb9f81b502bea21b5c7a", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#[allow(dead_assignment)];\n+#[allow(unused_variable)];\n \n enum option<T> { some(@T), none, }\n \n-pub fn main() { let mut a: option<int> = some::<int>(@10); a = none::<int>; }\n+pub fn main() {\n+    let mut a: option<int> = some::<int>(@10);\n+    a = none::<int>;\n+}"}, {"sha": "a1cf581fe4a81eb35169e9d2052526949bdd5984", "filename": "src/test/run-pass/generic-type-synonym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type-synonym.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,6 +16,6 @@ struct Foo<T> {\n \n type Bar<T> = Foo<T>;\n \n-fn takebar<T>(b: Bar<T>) { }\n+fn takebar<T>(_b: Bar<T>) { }\n \n pub fn main() { }"}, {"sha": "cebd29100703616c6665c5ecaf2ea85000f43f41", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,7 +16,7 @@ use extra::getopts::*;\n \n pub fn main() {\n     let args = ~[];\n-    let opts = ~[optopt(~\"b\")];\n+    let opts = ~[optopt(\"b\")];\n \n     match getopts(args, opts) {\n         Ok(ref m)  =>"}, {"sha": "bf29fa603c7ecd2f01c201e05fd432575e36bce3", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,7 +19,7 @@ pub fn main() {\n         match Pair {x: 10, y: 20} {\n           x if x.x < 5 && x.y < 5 => { 1 }\n           Pair {x: x, y: y} if x == 10 && y == 20 => { 2 }\n-          Pair {x: x, y: y} => { 3 }\n+          Pair {x: _x, y: _y} => { 3 }\n         };\n     assert_eq!(b, 2);\n }"}, {"sha": "be0f9cd046b794fa7f20928cc83039409513f3dc", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -85,7 +85,7 @@ macro_rules! parse_node (\n )\n \n pub fn main() {\n-    let page = html! (\n+    let _page = html! (\n         <html>\n             <head><title>This is the title.</title></head>\n             <body>"}, {"sha": "2f863d3da62ac957f1b83a314c35ac4ca71c21c0", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,12 +10,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_assignment)];\n \n extern mod extra;\n use std::vec::*;\n \n pub fn main() {\n     let mut v = from_elem(0u, 0);\n-    v = append(v, ~[4, 2]);\n+    v = append(v, [4, 2]);\n     assert_eq!(from_fn(2, |i| 2*(i+1)), ~[2, 4]);\n }"}, {"sha": "64d47bf22195f634822d497b834483193339b1d7", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_imports)];\n \n use baz::zed;\n use baz::zed::bar;"}, {"sha": "d368ab2e993db4a7a5efa1364c8d9b3f8d5e9b42", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,4 +17,4 @@ mod zed {\n     pub fn bar() { info!(\"bar\"); }\n }\n \n-pub fn main() { let zed = 42; bar(); }\n+pub fn main() { let _zed = 42; bar(); }"}, {"sha": "4f813247576c8fcfb2454366dda8a390e28efa45", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,8 +10,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_imports)];\n+\n use foo::zed;\n use bar::baz;\n+\n mod foo {\n     pub mod zed {\n         pub fn baz() { info!(\"baz\"); }"}, {"sha": "63a30ccee2cebb0656b04aa372bd701833f77081", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,8 +10,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_imports)];\n+\n use foo::zed;\n use bar::baz;\n+\n mod foo {\n     pub mod zed {\n         pub fn baz() { info!(\"baz\"); }"}, {"sha": "0b5e58526f6343e576dd6a9364cc5462c8d67059", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -20,9 +20,7 @@ struct Box { x: r }\n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&self) {\n-        unsafe {\n-            *(self.i) = *(self.i) + 1;\n-        }\n+        *(self.i) = *(self.i) + 1;\n     }\n }\n \n@@ -35,15 +33,15 @@ fn r(i: @mut int) -> r {\n fn test_box() {\n     let i = @mut 0;\n     {\n-        let a = @r(i);\n+        let _a = @r(i);\n     }\n     assert_eq!(*i, 1);\n }\n \n fn test_rec() {\n     let i = @mut 0;\n     {\n-        let a = Box {x: r(i)};\n+        let _a = Box {x: r(i)};\n     }\n     assert_eq!(*i, 1);\n }\n@@ -55,31 +53,31 @@ fn test_tag() {\n \n     let i = @mut 0;\n     {\n-        let a = t0(r(i));\n+        let _a = t0(r(i));\n     }\n     assert_eq!(*i, 1);\n }\n \n fn test_tup() {\n     let i = @mut 0;\n     {\n-        let a = (r(i), 0);\n+        let _a = (r(i), 0);\n     }\n     assert_eq!(*i, 1);\n }\n \n fn test_unique() {\n     let i = @mut 0;\n     {\n-        let a = ~r(i);\n+        let _a = ~r(i);\n     }\n     assert_eq!(*i, 1);\n }\n \n fn test_box_rec() {\n     let i = @mut 0;\n     {\n-        let a = @Box {\n+        let _a = @Box {\n             x: r(i)\n         };\n     }"}, {"sha": "41ddce7a96ee27a13bddee63499c7351d05c2f18", "filename": "src/test/run-pass/instantiable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Finstantiable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Finstantiable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finstantiable.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,5 +17,5 @@ struct foo(X);\n struct X { x: uint, nxt: *foo }\n \n pub fn main() {\n-    let x = foo(X {x: 0, nxt: ptr::null()});\n+    let _x = foo(X {x: 0, nxt: ptr::null()});\n }"}, {"sha": "c6632f8cd6c32f5db80ad16d2f1b3691b6497e0c", "filename": "src/test/run-pass/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fint.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,4 +12,4 @@\n \n \n // -*- rust -*-\n-pub fn main() { let x: int = 10; }\n+pub fn main() { let _x: int = 10; }"}, {"sha": "a55149b7d036665173ed8880bc69f9b69281bf42", "filename": "src/test/run-pass/intrinsic-atomics-cc.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,9 +15,7 @@ extern mod cci_intrinsic;\n use cci_intrinsic::atomic_xchg;\n \n pub fn main() {\n-    unsafe {\n-        let mut x = 1;\n-        atomic_xchg(&mut x, 5);\n-        assert_eq!(x, 5);\n-    }\n+    let mut x = 1;\n+    atomic_xchg(&mut x, 5);\n+    assert_eq!(x, 5);\n }"}, {"sha": "90f352c845b5b742ad1cfaf8166361ee12108316", "filename": "src/test/run-pass/intrinsic-move-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-move-val.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -18,7 +18,7 @@ mod rusti {\n \n pub fn main() {\n     unsafe {\n-        let mut x = @1;\n+        let x = @1;\n         let mut y = @2;\n         rusti::move_val(&mut y, x);\n         assert_eq!(*y, 1);"}, {"sha": "62a01613c206565c898431302e9bb837072d1a03", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,8 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::f64;\n-\n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {"}, {"sha": "7e79311c5ad1f28da6f295538752b967e01634a1", "filename": "src/test/run-pass/invoke-external-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-foreign.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -19,6 +19,6 @@ extern mod foreign_lib;\n \n pub fn main() {\n     unsafe {\n-        let foo = foreign_lib::rustrt::rust_get_test_int();\n+        let _foo = foreign_lib::rustrt::rust_get_test_int();\n     }\n }"}, {"sha": "d8023d2e7167db96b2297e26365e1d98782aa3a9", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,6 @@\n // except according to those terms.\n \n use std::hashmap::HashMap;\n-use std::str;\n \n pub fn main() {\n     let mut m = HashMap::new();"}, {"sha": "5ca7a589c6c49fbf823afe6ed4a3cee4adbae65a", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -12,7 +12,6 @@\n \n use std::cast;\n use std::libc::{c_double, c_int};\n-use std::f64::*;\n \n fn to_c_int(v: &mut int) -> &mut c_int {\n     unsafe {"}, {"sha": "57d6fed041aafca0245ee647ec2aa17e4e31804f", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,7 +16,7 @@ struct foo<A> {\n }\n \n impl<A> clam<A> for foo<A> {\n-  fn chowder(&self, y: A) {\n+  fn chowder(&self, _y: A) {\n   }\n }\n "}, {"sha": "b03bfb958af1b2af92258db09dad4f7471aa6ba5", "filename": "src/test/run-pass/issue-2311-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2311-2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@ struct foo<A> {\n }\n \n impl<A> foo<A> {\n-   pub fn bar<B,C:clam<A>>(&self, c: C) -> B {\n+   pub fn bar<B,C:clam<A>>(&self, _c: C) -> B {\n      fail!();\n    }\n }"}, {"sha": "14b5efe904db8c4b5036704f50bac4c728abec23", "filename": "src/test/run-pass/issue-2312.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2312.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2312.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,7 +15,7 @@ trait clam<A> { }\n struct foo(int);\n \n impl foo {\n-    pub fn bar<B,C:clam<B>>(&self, c: C) -> B { fail!(); }\n+    pub fn bar<B,C:clam<B>>(&self, _c: C) -> B { fail!(); }\n }\n \n pub fn main() { }"}, {"sha": "4e73be8d84e3a582abed7c04804cc5a01a8b84ef", "filename": "src/test/run-pass/issue-2428.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2428.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let foo = 100;\n+    let _foo = 100;\n     static quux: int = 5;\n \n     enum Stuff {"}, {"sha": "91f76fc5ae0610298b65e9b7b23241ee31e0c4d0", "filename": "src/test/run-pass/issue-2445-b.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445-b.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,7 +13,7 @@ struct c1<T> {\n }\n \n impl<T> c1<T> {\n-    pub fn f1(&self, x: int) {\n+    pub fn f1(&self, _x: int) {\n     }\n }\n \n@@ -24,7 +24,7 @@ fn c1<T>(x: T) -> c1<T> {\n }\n \n impl<T> c1<T> {\n-    pub fn f2(&self, x: int) {\n+    pub fn f2(&self, _x: int) {\n     }\n }\n "}, {"sha": "6356c87bfc9610d8a25695ab6517279d191302dd", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,7 +13,7 @@ struct c1<T> {\n }\n \n impl<T> c1<T> {\n-    pub fn f1(&self, x: T) {}\n+    pub fn f1(&self, _x: T) {}\n }\n \n fn c1<T>(x: T) -> c1<T> {\n@@ -23,7 +23,7 @@ fn c1<T>(x: T) -> c1<T> {\n }\n \n impl<T> c1<T> {\n-    pub fn f2(&self, x: T) {}\n+    pub fn f2(&self, _x: T) {}\n }\n \n "}, {"sha": "051ebd1ec045fbd7c526be391be553db1695a5d8", "filename": "src/test/run-pass/issue-2463.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2463.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,13 +17,13 @@ pub fn main() {\n         g: 0,\n     };\n \n-    let y = Pair {\n+    let _y = Pair {\n         f: 1,\n         g: 1,\n         .. x\n     };\n \n-    let z = Pair {\n+    let _z = Pair {\n         f: 1,\n         .. x\n     };"}, {"sha": "851c27deaa080e7c02c1365bd2e5e05ce909df14", "filename": "src/test/run-pass/issue-2526-a.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,6 +11,8 @@\n // xfail-fast\n // aux-build:issue-2526.rs\n \n+#[allow(unused_imports)];\n+\n extern mod issue_2526;\n use issue_2526::*;\n "}, {"sha": "e7da12861378b91267cd0edd2bd2e255504a8c36", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -26,6 +26,6 @@ fn nyan(kitty: cat, _kitty_info: KittyInfo) {\n }\n \n pub fn main() {\n-    let mut kitty = cat();\n+    let kitty = cat();\n     nyan(kitty, KittyInfo {kitty: kitty});\n }"}, {"sha": "226d9beb62763a0298af1e68204aa5310f2d307a", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,8 +10,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::util;\n-\n pub type Task = int;\n \n // tjc: I don't know why\n@@ -62,7 +60,7 @@ pub mod pipes {\n     // We should consider moving this to ::std::unsafe, although I\n     // suspect graydon would want us to use void pointers instead.\n     pub unsafe fn uniquify<T>(x: *T) -> ~T {\n-        unsafe { cast::transmute(x) }\n+        cast::transmute(x)\n     }\n \n     pub fn swap_state_acq(dst: &mut state, src: state) -> state {\n@@ -78,7 +76,7 @@ pub mod pipes {\n     }\n \n     pub fn send<T:Send>(mut p: send_packet<T>, payload: T) {\n-        let mut p = p.unwrap();\n+        let p = p.unwrap();\n         let mut p = unsafe { uniquify(p) };\n         assert!((*p).payload.is_none());\n         (*p).payload = Some(payload);\n@@ -104,7 +102,7 @@ pub mod pipes {\n     }\n \n     pub fn recv<T:Send>(mut p: recv_packet<T>) -> Option<T> {\n-        let mut p = p.unwrap();\n+        let p = p.unwrap();\n         let mut p = unsafe { uniquify(p) };\n         loop {\n             let old_state = swap_state_acq(&mut (*p).state,\n@@ -123,7 +121,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn sender_terminate<T:Send>(mut p: *packet<T>) {\n+    pub fn sender_terminate<T:Send>(p: *packet<T>) {\n         let mut p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty | blocked => {\n@@ -140,7 +138,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn receiver_terminate<T:Send>(mut p: *packet<T>) {\n+    pub fn receiver_terminate<T:Send>(p: *packet<T>) {\n         let mut p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty => {\n@@ -225,15 +223,13 @@ pub mod pipes {\n \n pub mod pingpong {\n     use std::cast;\n-    use std::ptr;\n-    use std::util;\n \n     pub struct ping(::pipes::send_packet<pong>);\n     pub struct pong(::pipes::send_packet<ping>);\n \n     pub fn liberate_ping(p: ping) -> ::pipes::send_packet<pong> {\n         unsafe {\n-            let addr : *::pipes::send_packet<pong> = match &p {\n+            let _addr : *::pipes::send_packet<pong> = match &p {\n               &ping(ref x) => { cast::transmute(x) }\n             };\n             fail!()\n@@ -242,7 +238,7 @@ pub mod pingpong {\n \n     pub fn liberate_pong(p: pong) -> ::pipes::send_packet<ping> {\n         unsafe {\n-            let addr : *::pipes::send_packet<ping> = match &p {\n+            let _addr : *::pipes::send_packet<ping> = match &p {\n               &pong(ref x) => { cast::transmute(x) }\n             };\n             fail!()\n@@ -254,7 +250,6 @@ pub mod pingpong {\n     }\n \n     pub mod client {\n-        use std::option;\n         use pingpong;\n \n         pub type ping = ::pipes::send_packet<pingpong::ping>;"}, {"sha": "37cf2658ebc8777d1c1d4ac30239931fb2f2e19b", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -37,7 +37,7 @@ fn lookup(table: ~json::Object, key: ~str, default: ~str) -> ~str\n     }\n }\n \n-fn add_interface(store: int, managed_ip: ~str, data: extra::json::Json) -> (~str, object)\n+fn add_interface(_store: int, managed_ip: ~str, data: extra::json::Json) -> (~str, object)\n {\n     match &data {\n         &extra::json::Object(ref interface) => {"}, {"sha": "978099be119bd523dd7b09aeeb6ee62c1116277a", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,7 +16,6 @@ extern mod extra;\n \n use std::io::ReaderUtil;\n use std::io;\n-use std::str;\n use std::to_str;\n \n enum square {"}, {"sha": "d4470dc34ff0acd5eaf66536369dd040fba0f2d9", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,7 +10,6 @@\n \n extern mod extra;\n \n-use std::io;\n use std::vec;\n \n trait methods {"}, {"sha": "c57257502e40a13d37d4fe20148f13ba3eb08ab2", "filename": "src/test/run-pass/issue-3012-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3012-2.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,5 +17,5 @@ use std::libc;\n \n pub fn main() {\n     let fd: libc::c_int = 1 as libc::c_int;\n-    let sock = @socket::socket_handle(fd);\n+    let _sock = @socket::socket_handle(fd);\n }"}, {"sha": "abea01cefd339e78b2d6cdba1e1b8707983e6ec4", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,5 +11,5 @@\n pub fn main() {\n   let x = 1;\n   let y: @fn() -> int = || x;\n-  let z = y();\n+  let _z = y();\n }"}, {"sha": "e6429aa55082629613b8c3f8a558ef23ec027514", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -20,7 +20,6 @@ extern mod extra;\n \n // Extern mod controls linkage. Use controls the visibility of names to modules that are\n // already linked in. Using WriterUtil allows us to use the write_line method.\n-use std::int;\n use std::io::WriterUtil;\n use std::io;\n use std::str;\n@@ -67,7 +66,7 @@ impl Drop for AsciiArt {\n fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt {\n     // Use an anonymous function to build a vector of vectors containing\n     // blank characters for each position in our canvas.\n-    let mut lines = do vec::build_sized(height) |push| {\n+    let lines = do vec::build_sized(height) |push| {\n             do height.times {\n                 push(vec::from_elem(width, '.'));\n             }"}, {"sha": "eb59b3e12b61047c0d472296e3a14fb676eaffbf", "filename": "src/test/run-pass/issue-3574.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3574.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3574.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3574.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unnecessary_allocation)];\n+\n // rustc --test match_borrowed_str.rs.rs && ./match_borrowed_str.rs\n extern mod extra;\n \n@@ -23,5 +25,6 @@ fn compare(x: &str, y: &str) -> bool\n pub fn main()\n {\n     assert!(compare(\"foo\", \"foo\"));\n+    assert!(compare(~\"foo\", ~\"foo\"));\n     assert!(compare(@\"foo\", @\"foo\"));\n }"}, {"sha": "f666571c2add494d0121656c41743558848d4ba8", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n-\n struct Vec2 {\n     x: float,\n     y: float"}, {"sha": "ee9516e552eff6aaffcce04afd2c9d2eb86e2fb1", "filename": "src/test/run-pass/issue-3860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3860.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,7 +17,7 @@ impl Foo {\n }\n \n pub fn main() {\n-    let mut x = @mut Foo { x: 3 };\n+    let x = @mut Foo { x: 3 };\n     // Neither of the next two lines should cause an error\n     let _ = x.stuff();\n     x.stuff();"}, {"sha": "0db4e6eb24480c700d60c80dae718d0fc99b5bcd", "filename": "src/test/run-pass/issue-3878.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-3878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3878.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub fn main()\n-{\n+#[allow(path_statement)];\n+\n+pub fn main() {\n     let y = ~1;\n     y;\n }"}, {"sha": "f922857fb3f3f7f64819758880e4c82767c867e6", "filename": "src/test/run-pass/issue-4107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4107.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let id: &Mat2<float> = &Matrix::identity();\n+    let _id: &Mat2<float> = &Matrix::identity();\n }\n \n pub trait Index<Index,Result> { }"}, {"sha": "f2973256199fa792a7db8127138a41ed06034fc5", "filename": "src/test/run-pass/issue-4387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4387.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let foo = [0, ..2*4];\n+    let _foo = [0, ..2*4];\n }"}, {"sha": "e6a3d2fa3b2410c2d59985e91279877ff2ce5b9b", "filename": "src/test/run-pass/issue-4542.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4542.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     let x = os::args();\n     for arg in x.iter() {\n         match arg.clone() {\n-            s => { }\n+            _s => { }\n         }\n     }\n }"}, {"sha": "c1ea98283b15cd678a22d5794eafdc78b2cea67c", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,12 +17,12 @@ struct NonCopyable(*c_void);\n impl Drop for NonCopyable {\n     fn drop(&self) {\n         let p = **self;\n-        let v = unsafe { transmute::<*c_void, ~int>(p) };\n+        let _v = unsafe { transmute::<*c_void, ~int>(p) };\n     }\n }\n \n fn main() {\n     let t = ~0;\n     let p = unsafe { transmute::<~int, *c_void>(t) };\n-    let z = NonCopyable(p);\n+    let _z = NonCopyable(p);\n }"}, {"sha": "b9048257cfb5885429fbb112b2f0042be0f78bb2", "filename": "src/test/run-pass/issue-5192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5192.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -40,5 +40,5 @@ impl Scheduler {\n }\n \n fn main() {\n-    let mut sched = Scheduler::new(~UvEventLoop::new() as ~EventLoop);\n+    let _sched = Scheduler::new(~UvEventLoop::new() as ~EventLoop);\n }"}, {"sha": "c1875988dc666f64696b72efe4a006cbefb1b7a8", "filename": "src/test/run-pass/issue-5550.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5550.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_assignment)];\n+\n fn main() {\n     let s: ~str = ~\"foobar\";\n     let mut t: &str = s;"}, {"sha": "daf5edd1d28b86338c951f1789c9caf7ff235ee7", "filename": "src/test/run-pass/issue-5572.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5572.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5572.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5572.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,3 +1,3 @@\n-fn foo<T: ::std::cmp::Eq>(t: T) { }\n+fn foo<T: ::std::cmp::Eq>(_t: T) { }\n \n fn main() { }"}, {"sha": "039d9bcd16e25f77fa4a37888f65cf04bb4d2262", "filename": "src/test/run-pass/issue-5741.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5741.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unreachable_code)];\n+\n use std::io;\n \n fn main() {"}, {"sha": "519211bdaf2c5120859b05a35006a07d4b1f4737", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -18,7 +18,7 @@ struct Bar<'self> {\n }\n \n fn check(a: @Foo) {\n-    let mut _ic = Bar{ b: a, a: ~None };\n+    let _ic = Bar{ b: a, a: ~None };\n }\n \n pub fn main(){}"}, {"sha": "d941e6326648d02bda246f3977f0cb5a9613cd2c", "filename": "src/test/run-pass/issue-5926.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-5926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5926.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_mut)];\n+\n pub fn main() {\n     let  mut your_favorite_numbers = @[1,2,3];\n     let  mut my_favorite_numbers = @[4,5,6];"}, {"sha": "00a94c0cc376afc45c0bd23ad7d4fb603ade3197", "filename": "src/test/run-pass/issue-6318.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-6318.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6318.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -20,7 +20,7 @@ impl Foo for Struct {}\n \n pub fn main() {\n     match A(~Struct as ~Foo) {\n-        A(a) => 0,\n+        A(_a) => 0,\n     };\n }\n "}, {"sha": "57224612573245c60ba643bb08494ef9e44c32a1", "filename": "src/test/run-pass/issue-6557.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-6557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6557.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo(~(x, y): ~(int, int)) {}\n+fn foo(~(_x, _y): ~(int, int)) {}\n \n pub fn main() {}"}, {"sha": "a68aaeb38a2972281a705f933cbcb8870f0c7672", "filename": "src/test/run-pass/issue-979.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-979.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fissue-979.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-979.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -15,9 +15,7 @@ struct r {\n #[unsafe_destructor]\n impl Drop for r {\n     fn drop(&self) {\n-        unsafe {\n-            *(self.b) += 1;\n-        }\n+        *(self.b) += 1;\n     }\n }\n \n@@ -30,7 +28,7 @@ fn r(b: @mut int) -> r {\n pub fn main() {\n     let b = @mut 0;\n     {\n-        let p = Some(r(b));\n+        let _p = Some(r(b));\n     }\n \n     assert_eq!(*b, 1);"}, {"sha": "254954fbde975fb7b0adec0d223e9d20fb6bfec9", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -30,33 +30,33 @@ fn test_heap_assign() {\n fn test_heap_log() { let s = ~\"a big ol' string\"; info!(s); }\n \n fn test_stack_add() {\n-    assert_eq!(~\"a\" + ~\"b\", ~\"ab\");\n+    assert_eq!(~\"a\" + \"b\", ~\"ab\");\n     let s: ~str = ~\"a\";\n     assert_eq!(s + s, ~\"aa\");\n-    assert_eq!(~\"\" + ~\"\", ~\"\");\n+    assert_eq!(~\"\" + \"\", ~\"\");\n }\n \n-fn test_stack_heap_add() { assert!((~\"a\" + ~\"bracadabra\" == ~\"abracadabra\")); }\n+fn test_stack_heap_add() { assert!((~\"a\" + \"bracadabra\" == ~\"abracadabra\")); }\n \n fn test_heap_add() {\n-    assert_eq!(~\"this should\" + ~\" totally work\", ~\"this should totally work\");\n+    assert_eq!(~\"this should\" + \" totally work\", ~\"this should totally work\");\n }\n \n fn test_append() {\n     let mut s = ~\"\";\n-    s.push_str(~\"a\");\n+    s.push_str(\"a\");\n     assert_eq!(s, ~\"a\");\n \n     let mut s = ~\"a\";\n-    s.push_str(~\"b\");\n+    s.push_str(\"b\");\n     info!(s.clone());\n     assert_eq!(s, ~\"ab\");\n \n     let mut s = ~\"c\";\n-    s.push_str(~\"offee\");\n+    s.push_str(\"offee\");\n     assert!(s == ~\"coffee\");\n \n-    s.push_str(~\"&tea\");\n+    s.push_str(\"&tea\");\n     assert!(s == ~\"coffee&tea\");\n }\n "}, {"sha": "29c1c630660474ab424eaa290f40eb6c771b6570", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -151,7 +151,7 @@ mod test_distinguish_syntax_ext {\n     extern mod extra;\n \n     pub fn f() {\n-        fmt!(\"test%s\", ~\"s\");\n+        fmt!(\"test%s\", \"s\");\n         #[attr = \"val\"]\n         fn g() { }\n     }"}, {"sha": "4a82e6844b979f96dbaf2e95617cbf61d26a527d", "filename": "src/test/run-pass/ivec-pass-by-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f(a: ~[int]) { }\n+fn f(_a: ~[int]) { }\n pub fn main() { f(~[1, 2, 3, 4, 5]); }"}, {"sha": "4b76f2f3214d4cb0bee1513fe88d38db49fe44a6", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,4 +1,3 @@\n-use std::comm::*;\n use std::task;\n \n fn producer(c: &Chan<~[u8]>) {\n@@ -9,7 +8,7 @@ fn producer(c: &Chan<~[u8]>) {\n \n pub fn main() {\n     let (p, ch) = stream::<~[u8]>();\n-    let prod = task::spawn(|| producer(&ch) );\n+    let _prod = task::spawn(|| producer(&ch) );\n \n-    let data: ~[u8] = p.recv();\n+    let _data: ~[u8] = p.recv();\n }"}, {"sha": "9eecc788a69c1660a10e015d27311853e8fb4f46", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -16,6 +16,6 @@ struct Refs { refs: ~[int], n: int }\n \n pub fn main() {\n     let e = @mut Refs{refs: ~[], n: 0};\n-    let f: @fn() = || error!(e.n);\n+    let _f: @fn() = || error!(e.n);\n     e.refs.push(1);\n }"}, {"sha": "788d9cf03e0733ad1f51bb5e2f4505f813e1a891", "filename": "src/test/run-pass/large-records.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flarge-records.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flarge-records.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flarge-records.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -26,7 +26,7 @@ struct Large {a: int,\n              k: int,\n              l: int}\n fn f() {\n-    let foo: Large =\n+    let _foo: Large =\n         Large {a: 0,\n          b: 0,\n          c: 0,"}, {"sha": "0e266c2818cdb24635b97c0a1a0773d71db982b6", "filename": "src/test/run-pass/leak-box-as-tydesc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-box-as-tydesc.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-fn leaky<T>(t: T) { }\n+fn leaky<T>(_t: T) { }\n \n pub fn main() { let x = @10; leaky::<@int>(x); }"}, {"sha": "93e2fcd82497426e9b4970f65d9fff7a1a6d5b3b", "filename": "src/test/run-pass/leak-tag-copy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#[allow(dead_assignment)];\n+#[allow(unused_variable)];\n \n enum t { a, b(@int), }\n "}, {"sha": "ab186d935df36613f63daad308b77499d08c9560", "filename": "src/test/run-pass/leak-unique-as-tydesc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-unique-as-tydesc.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-fn leaky<T>(t: T) { }\n+fn leaky<T>(_t: T) { }\n \n pub fn main() { let x = ~10; leaky::<~int>(x); }"}, {"sha": "13c12a77fd994705f8a4aa8d3bb9885e62903e82", "filename": "src/test/run-pass/let-destruct-fresh-mem.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(dead_assignment)];\n+\n struct X { x: int, y: @A }\n struct A { a: int }\n "}, {"sha": "a2f0c81f1164a9dfc6f66b47a45c64cfa89ccbb4", "filename": "src/test/run-pass/liveness-assign-imm-local-after-loop.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-loop.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,7 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(cond: bool) {\n+#[allow(dead_assignment)];\n+#[allow(unreachable_code)];\n+#[allow(unused_variable)];\n+\n+fn test(_cond: bool) {\n     let v: int;\n     v = 1;\n     loop { } // loop never terminates, so no error is reported"}, {"sha": "fe70573744ecbef92cb8810dd45cbc701d70c113", "filename": "src/test/run-pass/liveness-assign-imm-local-after-ret.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-assign-imm-local-after-ret.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unreachable_code)];\n+\n fn test() {\n     let _v: int;\n     _v = 1;"}, {"sha": "586a13771774d2a8362189148bb4819679cac2ce", "filename": "src/test/run-pass/log-err-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-err-phi.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-pub fn main() { if false { error!(~\"foo\" + ~\"bar\"); } }\n+pub fn main() { if false { error!(~\"foo\" + \"bar\"); } }"}, {"sha": "5318e5ca348d379c3be39fc4d8e2aca61a564c95", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -24,7 +24,7 @@ fn check_log<T>(exp: ~str, v: T) {\n }\n \n pub fn main() {\n-    let x = list::from_vec(~[a(22u), b(~\"hi\")]);\n+    let x = list::from_vec([a(22u), b(~\"hi\")]);\n     let exp = ~\"@Cons(a(22), @Cons(b(~\\\"hi\\\"), @Nil))\";\n     let act = fmt!(\"%?\", x);\n     assert!(act == exp);"}, {"sha": "a67eb282a142a6ed1a06e9225b55e4f94d2ef2ac", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -20,12 +20,12 @@ struct Smallintmap<T> {v: ~[option<T>]}\n struct V<T> { v: ~[option<T>] }\n \n fn mk<T:'static>() -> @mut Smallintmap<T> {\n-    let mut v: ~[option<T>] = ~[];\n+    let v: ~[option<T>] = ~[];\n     return @mut Smallintmap {v: v};\n }\n \n fn f<T,U:'static>() {\n-    let mut sim = mk::<U>();\n+    let sim = mk::<U>();\n     error!(sim);\n }\n "}, {"sha": "2b1fb3b779ce97ecadcde1a5bc0e72a06c2f8858", "filename": "src/test/run-pass/long-while.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flong-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Flong-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flong-while.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unused_variable)];\n \n-\n-pub fn main() { let mut i: int = 0; while i < 1000000 { i += 1; let x = 3; } }\n+pub fn main() {\n+    let mut i: int = 0;\n+    while i < 1000000 {\n+        i += 1;\n+        let x = 3;\n+    }\n+}"}, {"sha": "3b7e03ae58de47c00de426db30a7dde74cd24aa5", "filename": "src/test/run-pass/loop-break-cont-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-  let i = 0u;\n+  let _i = 0u;\n   loop {\n     break;\n   }"}, {"sha": "a33c38d2428743ebaf825dfaec966d7eb09ae7dc", "filename": "src/test/run-pass/match-borrowed_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[allow(unnecessary_allocation)];\n+\n fn f1(ref_string: &str) -> ~str {\n     match ref_string {\n         \"a\" => ~\"found a\","}, {"sha": "23074894490d6c02a65c3bb1d918a54e2e1511a4", "filename": "src/test/run-pass/match-implicit-copy-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-implicit-copy-unique.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -13,7 +13,7 @@ struct Pair { a: ~int, b: ~int }\n pub fn main() {\n     let mut x = ~Pair {a: ~10, b: ~20};\n     match x {\n-      ~Pair {a: ref mut a, b: ref mut b} => {\n+      ~Pair {a: ref mut a, b: ref mut _b} => {\n         assert!(**a == 10); *a = ~30; assert!(**a == 30);\n       }\n     }"}, {"sha": "433cf23626bbfa8f17b146cca75132c506e5837d", "filename": "src/test/run-pass/match-naked-record-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-naked-record-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-naked-record-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-naked-record-expr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,7 @@\n struct X { x: int }\n \n pub fn main() {\n-    let x = match 0 {\n+    let _x = match 0 {\n       _ => X {\n         x: 0\n       }.x"}, {"sha": "fe12b7c1585681f23a182737ec57a6f373976723", "filename": "src/test/run-pass/match-naked-record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-naked-record.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,7 @@\n struct X { x: int }\n \n pub fn main() {\n-    let x = match 0 {\n+    let _x = match 0 {\n       _ => X {\n         x: 0\n       }"}, {"sha": "2076f46e8ab7bbeab01b9732fff7513dd6a1849d", "filename": "src/test/run-pass/match-pattern-no-type-params.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-no-type-params.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -11,7 +11,10 @@\n enum maybe<T> { nothing, just(T), }\n \n fn foo(x: maybe<int>) {\n-    match x { nothing => { error!(\"A\"); } just(a) => { error!(\"B\"); } }\n+    match x {\n+        nothing => { error!(\"A\"); }\n+        just(_a) => { error!(\"B\"); }\n+    }\n }\n \n pub fn main() { }"}, {"sha": "92a753902228d59f9838bff9960beca574238d45", "filename": "src/test/run-pass/match-pattern-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-pattern-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-pattern-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pattern-simple.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -10,6 +10,6 @@\n \n \n \n-fn altsimple(f: int) { match f { x => () } }\n+fn altsimple(f: int) { match f { _x => () } }\n \n pub fn main() { }"}, {"sha": "c25f573e73bce131e51b0b47d87cb17e8468f3c5", "filename": "src/test/run-pass/match-phi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-phi.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+#[allow(dead_assignment)];\n+#[allow(unused_variable)];\n \n enum thing { a, b, c, }\n "}, {"sha": "06d0b4a80ea01261a51e51679671a4f52840ecf8", "filename": "src/test/run-pass/match-with-ret-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     // sometimes we have had trouble finding\n     // the right type for f, as we unified\n     // bot and u32 here\n-    let f = match uint::from_str(~\"1234\") {\n+    let f = match uint::from_str(\"1234\") {\n         None => return (),\n         Some(num) => num as u32\n     };"}, {"sha": "21e841b1f60c83630b7477cf2c3ab037b4119630", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,4 +21,4 @@ mod m {\n     pub fn f() -> ~[int] { vec::from_elem(1u, 0) }\n }\n \n-pub fn main() { let x = m::f(); }\n+pub fn main() { let _x = m::f(); }"}, {"sha": "5655ff8ff2496ff0e87c519b0512d88f4e04834f", "filename": "src/test/run-pass/module-qualified-struct-destructure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -17,5 +17,5 @@ mod m {\n \n pub fn main() {\n     let x = m::S { x: 1, y: 2 };\n-    let m::S { x: a, y: b } = x;\n+    let m::S { x: _a, y: _b } = x;\n }"}, {"sha": "4529ebf831fdd1d173a1d4d5e53bfe87da43cb54", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -47,7 +47,7 @@ pub fn main() {\n     assert_eq!(transform(Some(10)), Some(~\"11\"));\n     assert_eq!(transform(None), None);\n     assert!((~[~\"hi\"])\n-        .bind(|x| ~[x.clone(), *x + ~\"!\"] )\n-        .bind(|x| ~[x.clone(), *x + ~\"?\"] ) ==\n+        .bind(|x| ~[x.clone(), *x + \"!\"] )\n+        .bind(|x| ~[x.clone(), *x + \"?\"] ) ==\n         ~[~\"hi\", ~\"hi?\", ~\"hi!\", ~\"hi!?\"]);\n }"}, {"sha": "c9e480d3d71761e1b59c1f59128c51d608156a8d", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -21,7 +21,7 @@ fn test(x: bool, foo: @Triple) -> int {\n \n pub fn main() {\n     let x = @Triple{x: 1, y: 2, z: 3};\n-    for i in range(0u, 10000u) {\n+    for _i in range(0u, 10000u) {\n         assert_eq!(test(true, x), 2);\n     }\n     assert_eq!(test(false, x), 5);"}, {"sha": "464d915b2c43c60360b75474df7b9ea7e5b4cd03", "filename": "src/test/run-pass/move-nullary-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-nullary-fn.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Issue #922\n-fn f2(thing: @fn()) { }\n+fn f2(_thing: @fn()) { }\n \n fn f(thing: @fn()) {\n     f2(thing);"}, {"sha": "93ea35e262956be5e8a3e22c59013afeabe006bc", "filename": "src/test/run-pass/move-out-of-field.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,5 +1,3 @@\n-use std::str;\n-\n struct StringBuffer {\n     s: ~str\n }\n@@ -20,4 +18,4 @@ fn main() {\n     sb.append(\"World!\");\n     let str = to_str(sb);\n     assert_eq!(str, ~\"Hello, World!\");\n-}\n\\ No newline at end of file\n+}"}, {"sha": "a276e902fbcfca6172680ed17d0e94e7b18ff3c2", "filename": "src/test/run-pass/mut-vstore-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmut-vstore-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Ftest%2Frun-pass%2Fmut-vstore-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmut-vstore-expr.rs?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x: &mut [int] = &mut [ 1, 2, 3 ];\n+    let _x: &mut [int] = &mut [ 1, 2, 3 ];\n }"}]}