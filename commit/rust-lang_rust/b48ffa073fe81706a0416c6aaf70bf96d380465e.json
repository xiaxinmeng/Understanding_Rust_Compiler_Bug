{"sha": "b48ffa073fe81706a0416c6aaf70bf96d380465e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGZmYTA3M2ZlODE3MDZhMDQxNmM2YWFmNzBiZjk2ZDM4MDQ2NWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-08T18:20:48Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-08T18:20:48Z"}, "message": "Use 'a different' for trait object mismatches too", "tree": {"sha": "72b9643f74f3c561790d165b087420bdcbb6624b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72b9643f74f3c561790d165b087420bdcbb6624b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48ffa073fe81706a0416c6aaf70bf96d380465e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48ffa073fe81706a0416c6aaf70bf96d380465e", "html_url": "https://github.com/rust-lang/rust/commit/b48ffa073fe81706a0416c6aaf70bf96d380465e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48ffa073fe81706a0416c6aaf70bf96d380465e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89af15322dbca73b098e55bbd283a2d8a254571b", "url": "https://api.github.com/repos/rust-lang/rust/commits/89af15322dbca73b098e55bbd283a2d8a254571b", "html_url": "https://github.com/rust-lang/rust/commit/89af15322dbca73b098e55bbd283a2d8a254571b"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "99d8c5c9301ec8e491d8a257ad4dcab25174b0ed", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b48ffa073fe81706a0416c6aaf70bf96d380465e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48ffa073fe81706a0416c6aaf70bf96d380465e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b48ffa073fe81706a0416c6aaf70bf96d380465e", "patch": "@@ -5311,6 +5311,16 @@ impl<'tcx> TyS<'tcx> {\n impl<'tcx> fmt::Display for TypeError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use self::TypeError::*;\n+        fn report_maybe_different(f: &mut fmt::Formatter,\n+                                  expected: String, found: String) -> fmt::Result {\n+            // A naive approach to making sure that we're not reporting silly errors such as:\n+            // (expected closure, found closure).\n+            if expected == found {\n+                write!(f, \"expected {}, found a different {}\", expected, found)\n+            } else {\n+                write!(f, \"expected {}, found {}\", expected, found)\n+            }\n+        }\n \n         match *self {\n             CyclicTy => write!(f, \"cyclic type of infinite size\"),\n@@ -5371,20 +5381,15 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                            found bound lifetime parameter {}\", br)\n             }\n             Sorts(values) => tls::with(|tcx| {\n-                // A naive approach to making sure that we're not reporting silly errors such as:\n-                // (expected closure, found closure).\n-                let expected_str = values.expected.sort_string(tcx);\n-                let found_str = values.found.sort_string(tcx);\n-                if expected_str == found_str {\n-                    write!(f, \"expected {}, found a different {}\", expected_str, found_str)\n-                } else {\n-                    write!(f, \"expected {}, found {}\", expected_str, found_str)\n-                }\n+                report_maybe_different(f, values.expected.sort_string(tcx),\n+                                       values.found.sort_string(tcx))\n             }),\n             Traits(values) => tls::with(|tcx| {\n-                write!(f, \"expected trait `{}`, found trait `{}`\",\n-                       tcx.item_path_str(values.expected),\n-                       tcx.item_path_str(values.found))\n+                report_maybe_different(f,\n+                                       format!(\"trait `{}`\",\n+                                               tcx.item_path_str(values.expected)),\n+                                       format!(\"trait `{}`\",\n+                                               tcx.item_path_str(values.found)))\n             }),\n             BuiltinBoundsMismatch(values) => {\n                 if values.expected.is_empty() {"}]}