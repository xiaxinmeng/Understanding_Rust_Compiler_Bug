{"sha": "c205f6a06a8360367a7f6242f0d2615e94824024", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMDVmNmEwNmE4MzYwMzY3YTdmNjI0MmYwZDI2MTVlOTQ4MjQwMjQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-22T02:43:13Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-23T02:58:12Z"}, "message": "Remove mem::uninitalized from tests\n\nThis purges uses of uninitialized where possible from test cases. Some\nare merely moved over to the equally bad pattern of\nMaybeUninit::uninit().assume_init() but with an annotation that this is\n\"the best we can do\".", "tree": {"sha": "8e1ee83f8b24472c72d0b76ad471f4d0e5db4a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1ee83f8b24472c72d0b76ad471f4d0e5db4a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c205f6a06a8360367a7f6242f0d2615e94824024", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c205f6a06a8360367a7f6242f0d2615e94824024", "html_url": "https://github.com/rust-lang/rust/commit/c205f6a06a8360367a7f6242f0d2615e94824024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c205f6a06a8360367a7f6242f0d2615e94824024/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3982d3514efbb65b3efac6bb006b3fa496d16663", "url": "https://api.github.com/repos/rust-lang/rust/commits/3982d3514efbb65b3efac6bb006b3fa496d16663", "html_url": "https://github.com/rust-lang/rust/commit/3982d3514efbb65b3efac6bb006b3fa496d16663"}], "stats": {"total": 129, "additions": 81, "deletions": 48}, "files": [{"sha": "f5787903a2b594e3e6f440e3c6f25f086423da7d", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -7,3 +7,5 @@\n all:\n \t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n \t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args maybeuninit.rs | $(CGREP) librustc_msan\n+\t$(TMPDIR)/maybeuninit 2>&1 | $(CGREP) use-of-uninitialized-value"}, {"sha": "a9ae85f57639e8d8e78f38d19cc83fc2ef829c04", "filename": "src/test/run-make-fulldeps/sanitizer-memory/maybeuninit.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Fmaybeuninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Fmaybeuninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Fmaybeuninit.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -0,0 +1,8 @@\n+use std::mem::MaybeUninit;\n+\n+fn main() {\n+    // This is technically not sound -- but we're literally trying to test\n+    // that the sanitizer catches this, so I guess \"intentionally unsound\"?\n+    let xs: [u8; 4] = unsafe { MaybeUninit::uninit().assume_init() };\n+    let y = xs[0] + xs[1];\n+}"}, {"sha": "eae52508f658543ee92825830af6aebe13176880", "filename": "src/test/run-make-fulldeps/sanitizer-memory/uninit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -1,7 +1,7 @@\n-use std::mem;\n-\n fn main() {\n+    // This is technically not sound -- but we're literally trying to test\n+    // that the sanitizer catches this, so I guess \"intentionally unsound\"?\n     #[allow(deprecated)]\n-    let xs: [u8; 4] = unsafe { mem::uninitialized() };\n+    let xs: [u8; 4] = unsafe { std::mem::uninitialized() };\n     let y = xs[0] + xs[1];\n }"}, {"sha": "8000ce73bd42fcc2db36b8ef1809c2a96726260d", "filename": "src/test/rustdoc/issue-52873.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frustdoc%2Fissue-52873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Frustdoc%2Fissue-52873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-52873.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -105,8 +105,7 @@ impl<U: Unsigned, B: Bit> Add<B0> for UInt<U, B> {\n impl<U: Unsigned> Add<U> for UTerm {\n     type Output = U;\n     fn add(self, _: U) -> Self::Output {\n-        #[allow(deprecated)]\n-        unsafe { ::std::mem::uninitialized() }\n+        unimplemented!()\n     }\n }\n \n@@ -137,7 +136,7 @@ where\n {\n     type Output = UInt<Prod<Ul, UInt<Ur, B>>, B0>;\n     fn mul(self, _: UInt<Ur, B>) -> Self::Output {\n-        unsafe { ::std::mem::uninitialized() }\n+        unimplemented!()\n     }\n }\n "}, {"sha": "1d5b362e29dfe9e276b36e96b0243b0bb32c1f3e", "filename": "src/test/ui/abi/stack-probes.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstack-probes.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -13,7 +13,7 @@\n // ignore-sgx no processes\n // ignore-musl FIXME #31506\n \n-use std::mem;\n+use std::mem::MaybeUninit;\n use std::process::Command;\n use std::thread;\n use std::env;\n@@ -28,8 +28,8 @@ fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n     if args.len() > 0 {\n         match &args[0][..] {\n-            \"main-thread\" => recurse(&[]),\n-            \"child-thread\" => thread::spawn(|| recurse(&[])).join().unwrap(),\n+            \"main-thread\" => recurse(&MaybeUninit::uninit()),\n+            \"child-thread\" => thread::spawn(|| recurse(&MaybeUninit::uninit())).join().unwrap(),\n             _ => panic!(),\n         }\n         return\n@@ -48,10 +48,11 @@ fn main() {\n }\n \n #[allow(unconditional_recursion)]\n-fn recurse(array: &[u64]) {\n-    unsafe { black_box(array.as_ptr() as u64); }\n-    #[allow(deprecated)]\n-    let local: [_; 1024] = unsafe { mem::uninitialized() };\n+fn recurse(array: &MaybeUninit<[u64; 1024]>) {\n+    unsafe {\n+        black_box(array.as_ptr() as u64);\n+    }\n+    let local: MaybeUninit<[u64; 1024]> = MaybeUninit::uninit();\n     recurse(&local);\n }\n "}, {"sha": "4fa150ffef09ecd2384e4e58d6d23823269c3d78", "filename": "src/test/ui/const-generics/issues/issue-61422.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61422.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -5,6 +5,10 @@\n \n use std::mem;\n \n+// Neither of the uninits below are currently accepted as not UB, however,\n+// this code does not run and is merely checking that we do not ICE on this pattern,\n+// so this is fine.\n+\n fn foo<const SIZE: usize>() {\n     let arr: [u8; SIZE] = unsafe {\n         #[allow(deprecated)]\n@@ -13,4 +17,12 @@ fn foo<const SIZE: usize>() {\n     };\n }\n \n+fn bar<const SIZE: usize>() {\n+    let arr: [u8; SIZE] = unsafe {\n+        let array: [u8; SIZE] = mem::MaybeUninit::uninit().assume_init();\n+        array\n+    };\n+}\n+\n+\n fn main() {}"}, {"sha": "eba385461b951e192ed400d39745c969a3f90d1c", "filename": "src/test/ui/for-loop-while/for-loop-has-unit-body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Ffor-loop-while%2Ffor-loop-has-unit-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Ffor-loop-while%2Ffor-loop-has-unit-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Ffor-loop-has-unit-body.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -2,8 +2,8 @@\n fn main() {\n     // Check that the tail statement in the body unifies with something\n     for _ in 0..3 {\n-        #[allow(deprecated)]\n-        unsafe { std::mem::uninitialized() }\n+        // `()` is fine to zero-initialize as it is zero sized and inhabited.\n+        unsafe { std::mem::zeroed() }\n     }\n \n     // Check that the tail statement in the body can be unit"}, {"sha": "85664e62eaded5ee6c62ce5f4b37b20a134e28fe", "filename": "src/test/ui/issues/issue-48131.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -1,7 +1,7 @@\n // This note is annotated because the purpose of the test\n // is to ensure that certain other notes are not generated.\n #![deny(unused_unsafe)] //~ NOTE\n-#![allow(deprecated)]\n+\n \n // (test that no note is generated on this unsafe fn)\n pub unsafe fn a() {\n@@ -20,8 +20,8 @@ pub fn b() {\n             unsafe { /* unnecessary */ } //~ ERROR unnecessary `unsafe`\n                                          //~^ NOTE\n         }\n-\n-        let () = ::std::mem::uninitialized();\n+        // `()` is fine to zero-initialize as it is zero sized and inhabited.\n+        let () = ::std::mem::zeroed();\n \n         inner()\n     }"}, {"sha": "4695497c3a184881567d1b6515a66bce68e90168", "filename": "src/test/ui/issues/issue-58212.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fissues%2Fissue-58212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fissues%2Fissue-58212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58212.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -1,13 +1,12 @@\n-// run-pass\n+// check-pass\n \n trait FromUnchecked {\n-    unsafe fn from_unchecked();\n+    fn from_unchecked();\n }\n \n impl FromUnchecked for [u8; 1] {\n-    unsafe fn from_unchecked() {\n-        #[allow(deprecated)]\n-        let mut array: Self = std::mem::uninitialized();\n+    fn from_unchecked() {\n+        let mut array: Self = [0; 1];\n         let _ptr = &mut array as *mut [u8] as *mut u8;\n     }\n }"}, {"sha": "7d15d607dd60619837139a78a7c173ff8e9151c6", "filename": "src/test/ui/structs-enums/enum-non-c-like-repr-c-and-int.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-c-and-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-c-and-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-c-and-int.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -69,8 +69,10 @@ fn main() {\n     unsafe {\n         // This should be safe, because we don't match on it unless it's fully formed,\n         // and it doesn't have a destructor.\n-        #[allow(deprecated)]\n-        let mut dest: MyEnum = mem::uninitialized();\n+        //\n+        // MyEnum is repr(C, u8) so it is guaranteed to have a separate discriminant and each\n+        // variant can be zero initialized.\n+        let mut dest: MyEnum = mem::zeroed();\n         while buf.len() > 0 {\n             match parse_my_enum(&mut dest, &mut buf) {\n                 Ok(()) => output.push(Ok(dest)),"}, {"sha": "fc9efdeca7d19bc3d42341ec7b430f22b6e926f3", "filename": "src/test/ui/structs-enums/enum-non-c-like-repr-c.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-c.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -69,8 +69,11 @@ fn main() {\n     unsafe {\n         // This should be safe, because we don't match on it unless it's fully formed,\n         // and it doesn't have a destructor.\n-        #[allow(deprecated)]\n-        let mut dest: MyEnum = mem::uninitialized();\n+        //\n+        // Furthermore, there are no types within MyEnum which cannot be initialized with zero,\n+        // specifically, though padding and such are present, there are no references or similar\n+        // types.\n+        let mut dest: MyEnum = mem::zeroed();\n         while buf.len() > 0 {\n             match parse_my_enum(&mut dest, &mut buf) {\n                 Ok(()) => output.push(Ok(dest)),"}, {"sha": "f9e96c1a0f4aeb71717c6e260325e1af7c114be5", "filename": "src/test/ui/structs-enums/enum-non-c-like-repr-int.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fenum-non-c-like-repr-int.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -65,8 +65,10 @@ fn main() {\n     unsafe {\n         // This should be safe, because we don't match on it unless it's fully formed,\n         // and it doesn't have a destructor.\n-        #[allow(deprecated)]\n-        let mut dest: MyEnum = mem::uninitialized();\n+        //\n+        // MyEnum is repr(u8) so it is guaranteed to have a separate discriminant and each variant\n+        // can be zero initialized.\n+        let mut dest: MyEnum = mem::zeroed();\n         while buf.len() > 0 {\n             match parse_my_enum(&mut dest, &mut buf) {\n                 Ok(()) => output.push(Ok(dest)),"}, {"sha": "e804afcf9ed99bf214a9ea4d51f1f48c2eacfcd3", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -1,5 +1,4 @@\n-#![allow(deprecated)]\n-\n+use std::mem::zeroed;\n enum Void {}\n \n fn main() {\n@@ -8,21 +7,25 @@ fn main() {\n         Ok(n) => n,\n     };\n \n-    let x: &Void = unsafe { std::mem::uninitialized() };\n+    // This is pretty much instant UB. However, we have no choice -- we need to\n+    // test matching on a reference to `&Void`; we cannot do anything other than\n+    // just accept the fact that this is UB if `main` did run, but it doesn't;\n+    // this test only checks that these are feature-gated.\n+    let x: &Void = unsafe { zeroed() };\n     let _ = match x {}; //~ ERROR non-exhaustive\n \n-    let x: (Void,) = unsafe { std::mem::uninitialized() };\n+    let x: (Void,) = unsafe { zeroed() };\n     let _ = match x {}; //~ ERROR non-exhaustive\n \n-    let x: [Void; 1] = unsafe { std::mem::uninitialized() };\n+    let x: [Void; 1] = unsafe { zeroed() };\n     let _ = match x {}; //~ ERROR non-exhaustive\n \n-    let x: &[Void] = unsafe { std::mem::uninitialized() };\n+    let x: &[Void] = unsafe { zeroed() };\n     let _ = match x {   //~ ERROR non-exhaustive\n         &[] => (),\n     };\n \n-    let x: Void = unsafe { std::mem::uninitialized() };\n+    let x: Void = unsafe { zeroed() };\n     let _ = match x {}; // okay\n \n     let x: Result<u32, Void> = Ok(23);"}, {"sha": "a667e1fe2da3a99eb6624b44fafca854874c15ac", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -1,13 +1,13 @@\n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:7:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:6:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:12:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n    |\n LL | enum Void {}\n    | ------------ `Void` defined here\n@@ -18,39 +18,39 @@ LL |     let _ = match x {};\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:18:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:18:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:21:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:21:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:24:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `&[_, ..]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:29:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:32:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:34:9\n+  --> $DIR/uninhabited-matches-feature-gated.rs:37:9\n    |\n LL |     let Ok(x) = x;\n    |         ^^^^^ pattern `Err(_)` not covered"}, {"sha": "b21de882b2ceb95bf684c52824106c438dab6b58", "filename": "src/test/ui/uninit-empty-types.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Funinit-empty-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c205f6a06a8360367a7f6242f0d2615e94824024/src%2Ftest%2Fui%2Funinit-empty-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinit-empty-types.rs?ref=c205f6a06a8360367a7f6242f0d2615e94824024", "patch": "@@ -1,17 +1,19 @@\n-// run-pass\n+// build-pass\n // Test the uninit() construct returning various empty types.\n \n // pretty-expanded FIXME #23616\n \n-use std::mem;\n+use std::mem::MaybeUninit;\n \n-#[derive(Clone)]\n struct Foo;\n \n #[allow(deprecated)]\n pub fn main() {\n     unsafe {\n-        let _x: Foo = mem::uninitialized();\n-        let _x: [Foo; 2] = mem::uninitialized();\n+        // `Foo` and `[Foo; 2]` are both zero sized and inhabited, so this is safe.\n+        let _x: Foo = MaybeUninit::uninit().assume_init();\n+        let _x: [Foo; 2] = MaybeUninit::uninit().assume_init();\n+        let _x: Foo = std::mem::uninitialized();\n+        let _x: [Foo; 2] = std::mem::uninitialized();\n     }\n }"}]}