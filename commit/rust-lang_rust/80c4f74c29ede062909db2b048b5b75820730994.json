{"sha": "80c4f74c29ede062909db2b048b5b75820730994", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYzRmNzRjMjllZGUwNjI5MDlkYjJiMDQ4YjViNzU4MjA3MzA5OTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T01:38:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T01:38:18Z"}, "message": "Remove the 'to' keyword", "tree": {"sha": "d3b43776d36ddcc9d9582ab95745df3fdbddd95c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b43776d36ddcc9d9582ab95745df3fdbddd95c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80c4f74c29ede062909db2b048b5b75820730994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80c4f74c29ede062909db2b048b5b75820730994", "html_url": "https://github.com/rust-lang/rust/commit/80c4f74c29ede062909db2b048b5b75820730994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80c4f74c29ede062909db2b048b5b75820730994/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d777e5133360876baa4213f81a33934f04768a0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d777e5133360876baa4213f81a33934f04768a0f", "html_url": "https://github.com/rust-lang/rust/commit/d777e5133360876baa4213f81a33934f04768a0f"}], "stats": {"total": 4837, "additions": 2418, "deletions": 2419}, "files": [{"sha": "9023147208cc06aa0f8795a646f583d15e499fd6", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -2211,14 +2211,14 @@ fn main() {\n ~~~~\n \n Multiple match patterns may be joined with the `|` operator.  A\n-range of values may be specified with `to`. For example:\n+range of values may be specified with `..`. For example:\n \n ~~~~\n # let x = 2;\n \n let message = match x {\n   0 | 1  => ~\"not many\",\n-  2 to 9 => ~\"a few\",\n+  2 .. 9 => ~\"a few\",\n   _      => ~\"lots\"\n };\n ~~~~"}, {"sha": "71284f60b6fce05f285de2009aa4b26d34d18e29", "filename": "src/libcore/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -120,9 +120,9 @@ pure fn is_digit(c: char) -> bool {\n  */\n pure fn to_digit(c: char, radix: uint) -> Option<uint> {\n     let val = match c {\n-      '0' to '9' => c as uint - ('0' as uint),\n-      'a' to 'z' => c as uint + 10u - ('a' as uint),\n-      'A' to 'Z' => c as uint + 10u - ('A' as uint),\n+      '0' .. '9' => c as uint - ('0' as uint),\n+      'a' .. 'z' => c as uint + 10u - ('a' as uint),\n+      'A' .. 'Z' => c as uint + 10u - ('A' as uint),\n       _ => return None\n     };\n     if val < radix { Some(val) }\n@@ -171,7 +171,7 @@ fn escape_default(c: char) -> ~str {\n       '\\\\' => ~\"\\\\\\\\\",\n       '\\'' => ~\"\\\\'\",\n       '\"'  => ~\"\\\\\\\"\",\n-      '\\x20' to '\\x7e' => str::from_char(c),\n+      '\\x20' .. '\\x7e' => str::from_char(c),\n       _ => escape_unicode(c)\n     }\n }"}, {"sha": "125e9852f44833dfd683b6002ec09457737f957d", "filename": "src/libcore/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -263,7 +263,7 @@ fn from_str(num: &str) -> Option<float> {\n \n    //The string must start with one of the following characters.\n    match str::char_at(num, 0u) {\n-      '-' | '+' | '0' to '9' | '.' => (),\n+      '-' | '+' | '0' .. '9' | '.' => (),\n       _ => return None\n    }\n \n@@ -286,7 +286,7 @@ fn from_str(num: &str) -> Option<float> {\n        c   = char_range.ch;\n        pos = char_range.next;\n        match c {\n-         '0' to '9' => {\n+         '0' .. '9' => {\n            total = total * 10f;\n            total += ((c as int) - ('0' as int)) as float;\n          }"}, {"sha": "cdd2efbd8c315dad17955f7389d2f80e668b9984", "filename": "src/libcore/unicode.rs", "status": "modified", "additions": 2371, "deletions": 2371, "changes": 4742, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibcore%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibcore%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode.rs?ref=80c4f74c29ede062909db2b048b5b75820730994"}, {"sha": "6dca7701bf770d315db92d238cda723b931375b1", "filename": "src/libstd/json.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -267,7 +267,7 @@ impl Parser {\n           'n' => self.parse_ident(~\"ull\", Null),\n           't' => self.parse_ident(~\"rue\", Boolean(true)),\n           'f' => self.parse_ident(~\"alse\", Boolean(false)),\n-          '0' to '9' | '-' => self.parse_number(),\n+          '0' .. '9' | '-' => self.parse_number(),\n           '\"' => match self.parse_str() {\n             Ok(s) => Ok(String(s)),\n             Err(e) => Err(e)\n@@ -330,14 +330,14 @@ impl Parser {\n \n             // There can be only one leading '0'.\n             match self.ch {\n-              '0' to '9' => return self.error(~\"invalid number\"),\n+              '0' .. '9' => return self.error(~\"invalid number\"),\n               _ => ()\n             }\n           }\n-          '1' to '9' => {\n+          '1' .. '9' => {\n             while !self.eof() {\n                 match self.ch {\n-                  '0' to '9' => {\n+                  '0' .. '9' => {\n                     res *= 10f;\n                     res += ((self.ch as int) - ('0' as int)) as float;\n \n@@ -358,15 +358,15 @@ impl Parser {\n \n         // Make sure a digit follows the decimal place.\n         match self.ch {\n-          '0' to '9' => (),\n+          '0' .. '9' => (),\n           _ => return self.error(~\"invalid number\")\n         }\n \n         let mut res = res;\n         let mut dec = 1f;\n         while !self.eof() {\n             match self.ch {\n-              '0' to '9' => {\n+              '0' .. '9' => {\n                 dec /= 10f;\n                 res += (((self.ch as int) - ('0' as int)) as float) * dec;\n \n@@ -394,13 +394,13 @@ impl Parser {\n \n         // Make sure a digit follows the exponent place.\n         match self.ch {\n-          '0' to '9' => (),\n+          '0' .. '9' => (),\n           _ => return self.error(~\"invalid number\")\n         }\n \n         while !self.eof() {\n             match self.ch {\n-              '0' to '9' => {\n+              '0' .. '9' => {\n                 exp *= 10u;\n                 exp += (self.ch as uint) - ('0' as uint);\n \n@@ -443,7 +443,7 @@ impl Parser {\n                       let mut n = 0u;\n                       while i < 4u {\n                           match self.next_char() {\n-                            '0' to '9' => {\n+                            '0' .. '9' => {\n                               n = n * 16u + (self.ch as uint)\n                                           - ('0'     as uint);\n                             },"}, {"sha": "c32e0466bba451059fa2c20a1b6a90d0a6489f00", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -50,9 +50,9 @@ fn encode_inner(s: ~str, full_url: bool) -> ~str {\n             let ch = rdr.read_byte() as char;\n             match ch {\n               // unreserved:\n-              'A' to 'Z' |\n-              'a' to 'z' |\n-              '0' to '9' |\n+              'A' .. 'Z' |\n+              'a' .. 'z' |\n+              '0' .. '9' |\n               '-' | '.' | '_' | '~' => {\n                 str::push_char(out, ch);\n               }\n@@ -162,7 +162,7 @@ fn encode_plus(s: ~str) -> ~str {\n         while !rdr.eof() {\n             let ch = rdr.read_byte() as char;\n             match ch {\n-              'A' to 'Z' | 'a' to 'z' | '0' to '9' | '_' | '.' | '-' => {\n+              'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '_' | '.' | '-' => {\n                 str::push_char(out, ch);\n               }\n               ' ' => str::push_char(out, '+'),\n@@ -340,8 +340,8 @@ fn query_to_str(query: Query) -> ~str {\n fn get_scheme(rawurl: ~str) -> result::Result<(~str, ~str), @~str> {\n     for str::each_chari(rawurl) |i,c| {\n         match c {\n-          'A' to 'Z' | 'a' to 'z' => again,\n-          '0' to '9' | '+' | '-' | '.' => {\n+          'A' .. 'Z' | 'a' .. 'z' => again,\n+          '0' .. '9' | '+' | '-' | '.' => {\n             if i == 0 {\n                 return result::Err(@~\"url: Scheme must begin with a letter.\");\n             }\n@@ -415,13 +415,13 @@ fn get_authority(rawurl: ~str) ->\n \n         // deal with input class first\n         match c {\n-          '0' to '9' => (),\n-          'A' to 'F' | 'a' to 'f' => {\n+          '0' .. '9' => (),\n+          'A' .. 'F' | 'a' .. 'f' => {\n             if in == Digit {\n                 in = Hex;\n             }\n           }\n-          'G' to 'Z' | 'g' to 'z' | '-' | '.' | '_' | '~' | '%' |\n+          'G' .. 'Z' | 'g' .. 'z' | '-' | '.' | '_' | '~' | '%' |\n           '&' |'\\'' | '(' | ')' | '+' | '!' | '*' | ',' | ';' | '=' => {\n             in = Unreserved;\n           }\n@@ -558,7 +558,7 @@ fn get_path(rawurl: ~str, authority : bool) ->\n     let mut end = len;\n     for str::each_chari(rawurl) |i,c| {\n         match c {\n-          'A' to 'Z' | 'a' to 'z' | '0' to '9' | '&' |'\\'' | '(' | ')' | '.'\n+          'A' .. 'Z' | 'a' .. 'z' | '0' .. '9' | '&' |'\\'' | '(' | ')' | '.'\n           | '@' | ':' | '%' | '/' | '+' | '!' | '*' | ',' | ';' | '='\n           | '_' | '-' => {\n             again;"}, {"sha": "3867ae358433235f17b00b056f8d0062462b18d7", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -215,7 +215,7 @@ fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n             pos = next;\n \n             match ch {\n-              '0' to '9' => {\n+              '0' .. '9' => {\n                 value = value * 10_i32 + (ch as i32 - '0' as i32);\n               }\n               ' ' if ws => (),"}, {"sha": "d96401b00b3ff1144f2a7b3032f90520886a7c74", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -1869,7 +1869,7 @@ struct parser {\n                 || self.is_keyword(~\"false\")\n             {\n                 let val = self.parse_expr_res(RESTRICT_NO_BAR_OP);\n-                if self.eat_keyword(~\"to\") || self.eat(token::DOTDOT) {\n+                if self.eat(token::DOTDOT) {\n                     let end = self.parse_expr_res(RESTRICT_NO_BAR_OP);\n                     pat = pat_range(val, end);\n                 } else {"}, {"sha": "50e05bb459ee4997bb0909de1d8ad39387b1aaaa", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -389,7 +389,6 @@ fn contextual_keyword_table() -> hashmap<~str, ()> {\n         ~\"of\",\n         ~\"priv\", ~\"pub\",\n         ~\"self\", ~\"send\", ~\"static\",\n-        ~\"to\",\n         ~\"use\",\n         ~\"with\"\n     ];"}, {"sha": "8cc2da7fc735a3fe412f8de42ba0995e5e39f1c7", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -547,9 +547,9 @@ fn sanitize(s: ~str) -> ~str {\n           ',' => result += ~\"_\",\n \n           '{' | '(' => result += ~\"_of_\",\n-          'a' to 'z'\n-          | 'A' to 'Z'\n-          | '0' to '9'\n+          'a' .. 'z'\n+          | 'A' .. 'Z'\n+          | '0' .. '9'\n           | '_' => str::push_char(result,c),\n           _ => {\n             if c > 'z' && char::is_XID_continue(c) {"}, {"sha": "3b44bb17806cecab3161a6323293c6b696e97bcb", "filename": "src/test/compile-fail/alt-range-fail-dominate.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -6,31 +6,31 @@\n \n fn main() {\n     match 5u {\n-      1u to 10u => { }\n-      5u to 6u => { }\n+      1u .. 10u => { }\n+      5u .. 6u => { }\n       _ => {}\n     };\n \n     match 5u {\n-      3u to 6u => { }\n-      4u to 6u => { }\n+      3u .. 6u => { }\n+      4u .. 6u => { }\n       _ => {}\n     };\n \n     match 5u {\n-      4u to 6u => { }\n-      4u to 6u => { }\n+      4u .. 6u => { }\n+      4u .. 6u => { }\n       _ => {}\n     };\n \n     match 'c' {\n-      'A' to 'z' => {}\n-      'a' to 'z' => {}\n+      'A' .. 'z' => {}\n+      'a' .. 'z' => {}\n       _ => {}\n     };\n \n     match 1.0 {\n-      0.01 to 6.5 => {}\n+      0.01 .. 6.5 => {}\n       0.02 => {}\n       _ => {}\n     };"}, {"sha": "9e0d39c89240c7810545dbeb2c763c9a578d74f0", "filename": "src/test/compile-fail/alt-range-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Ftest%2Fcompile-fail%2Falt-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Ftest%2Fcompile-fail%2Falt-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-range-fail.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -4,16 +4,16 @@\n \n fn main() {\n     match 5u {\n-      6u to 1u => { }\n+      6u .. 1u => { }\n       _ => { }\n     };\n \n     match \"wow\" {\n-      \"bar\" to \"foo\" => { }\n+      \"bar\" .. \"foo\" => { }\n     };\n \n     match 5u {\n-      'c' to 100u => { }\n+      'c' .. 100u => { }\n       _ => { }\n     };\n }"}, {"sha": "ae7cdd9c25fac75b3ea7589eef5ee0ed45200ec4", "filename": "src/test/run-pass/inferred-suffix-in-pattern-range.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/80c4f74c29ede062909db2b048b5b75820730994/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80c4f74c29ede062909db2b048b5b75820730994/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finferred-suffix-in-pattern-range.rs?ref=80c4f74c29ede062909db2b048b5b75820730994", "patch": "@@ -1,21 +1,21 @@\n fn main() {\n     let x = 2;\n     let x_message = match x {\n-      0 to 1     => { ~\"not many\" }\n+      0 .. 1     => { ~\"not many\" }\n       _          => { ~\"lots\" }\n     };\n     assert x_message == ~\"lots\";\n \n     let y = 2i;\n     let y_message = match y {\n-      0 to 1     => { ~\"not many\" }\n+      0 .. 1     => { ~\"not many\" }\n       _          => { ~\"lots\" }\n     };\n     assert y_message == ~\"lots\";\n \n     let z = 1u64;\n     let z_message = match z {\n-      0 to 1     => { ~\"not many\" }\n+      0 .. 1     => { ~\"not many\" }\n       _          => { ~\"lots\" }\n     };\n     assert z_message == ~\"not many\";"}]}