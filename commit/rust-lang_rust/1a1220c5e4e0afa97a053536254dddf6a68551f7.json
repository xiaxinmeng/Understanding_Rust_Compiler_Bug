{"sha": "1a1220c5e4e0afa97a053536254dddf6a68551f7", "node_id": "C_kwDOAAsO6NoAKDFhMTIyMGM1ZTRlMGFmYTk3YTA1MzUzNjI1NGRkZGY2YTY4NTUxZjc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-28T15:48:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-28T15:49:32Z"}, "message": "validation should only catch UB errors", "tree": {"sha": "47e3eb3c828e50c0298805b5803cb60ccf0a8da8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e3eb3c828e50c0298805b5803cb60ccf0a8da8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1220c5e4e0afa97a053536254dddf6a68551f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1220c5e4e0afa97a053536254dddf6a68551f7", "html_url": "https://github.com/rust-lang/rust/commit/1a1220c5e4e0afa97a053536254dddf6a68551f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1220c5e4e0afa97a053536254dddf6a68551f7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2c65b251cb05a2dae55b4ab9a8ca65f44189cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2c65b251cb05a2dae55b4ab9a8ca65f44189cb", "html_url": "https://github.com/rust-lang/rust/commit/cf2c65b251cb05a2dae55b4ab9a8ca65f44189cb"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "c130252e2490fbbbab501364da283a0d3bfcfe06", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1a1220c5e4e0afa97a053536254dddf6a68551f7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1220c5e4e0afa97a053536254dddf6a68551f7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=1a1220c5e4e0afa97a053536254dddf6a68551f7", "patch": "@@ -19,6 +19,8 @@ use rustc_target::abi::{Abi, Scalar as ScalarAbi, Size, VariantIdx, Variants, Wr\n \n use std::hash::Hash;\n \n+// for the validation errors\n+use super::UndefinedBehaviorInfo::*;\n use super::{\n     CheckInAllocMsg, GlobalAlloc, ImmTy, Immediate, InterpCx, InterpResult, MPlaceTy, Machine,\n     MemPlaceMeta, OpTy, Scalar, ValueVisitor,\n@@ -59,6 +61,7 @@ macro_rules! throw_validation_failure {\n /// });\n /// ```\n ///\n+/// The patterns must be of type `UndefinedBehaviorInfo`.\n /// An additional expected parameter can also be added to the failure message:\n ///\n /// ```\n@@ -86,7 +89,7 @@ macro_rules! try_validation {\n             // allocation here as this can only slow down builds that fail anyway.\n             Err(e) => match e.kind() {\n                 $(\n-                    $($p)|+ =>\n+                    InterpError::UndefinedBehavior($($p)|+) =>\n                        throw_validation_failure!(\n                             $where,\n                             { $( $what_fmt ),+ } $( expected { $( $expected_fmt ),+ } )?\n@@ -312,7 +315,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         Ok(try_validation!(\n             self.ecx.read_immediate(op),\n             self.path,\n-            err_ub!(InvalidUninitBytes(None)) => { \"uninitialized memory\" } expected { \"{expected}\" }\n+            InvalidUninitBytes(None) => { \"uninitialized memory\" } expected { \"{expected}\" }\n         ))\n     }\n \n@@ -337,8 +340,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 let (_ty, _trait) = try_validation!(\n                     self.ecx.get_ptr_vtable(vtable),\n                     self.path,\n-                    err_ub!(DanglingIntPointer(..)) |\n-                    err_ub!(InvalidVTablePointer(..)) =>\n+                    DanglingIntPointer(..) |\n+                    InvalidVTablePointer(..) =>\n                         { \"{vtable}\" } expected { \"a vtable pointer\" },\n                 );\n                 // FIXME: check if the type/trait match what ty::Dynamic says?\n@@ -374,7 +377,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n         let size_and_align = try_validation!(\n             self.ecx.size_and_align_of_mplace(&place),\n             self.path,\n-            err_ub!(InvalidMeta(msg)) => { \"invalid {} metadata: {}\", kind, msg },\n+            InvalidMeta(msg) => { \"invalid {} metadata: {}\", kind, msg },\n         );\n         let (size, align) = size_and_align\n             // for the purpose of validity, consider foreign types to have\n@@ -390,21 +393,21 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 CheckInAllocMsg::InboundsTest, // will anyway be replaced by validity message\n             ),\n             self.path,\n-            err_ub!(AlignmentCheckFailed { required, has }) =>\n+            AlignmentCheckFailed { required, has } =>\n                 {\n                     \"an unaligned {kind} (required {} byte alignment but found {})\",\n                     required.bytes(),\n                     has.bytes()\n                 },\n-            err_ub!(DanglingIntPointer(0, _)) =>\n+            DanglingIntPointer(0, _) =>\n                 { \"a null {kind}\" },\n-            err_ub!(DanglingIntPointer(i, _)) =>\n+            DanglingIntPointer(i, _) =>\n                 { \"a dangling {kind} (address {i:#x} is unallocated)\" },\n-            err_ub!(PointerOutOfBounds { .. }) =>\n+            PointerOutOfBounds { .. } =>\n                 { \"a dangling {kind} (going beyond the bounds of its allocation)\" },\n             // This cannot happen during const-eval (because interning already detects\n             // dangling pointers), but it can happen in Miri.\n-            err_ub!(PointerUseAfterFree(..)) =>\n+            PointerUseAfterFree(..) =>\n                 { \"a dangling {kind} (use-after-free)\" },\n         );\n         // Do not allow pointers to uninhabited types.\n@@ -475,7 +478,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     value.to_bool(),\n                     self.path,\n-                    err_ub!(InvalidBool(..)) =>\n+                    InvalidBool(..) =>\n                         { \"{:x}\", value } expected { \"a boolean\" },\n                 );\n                 Ok(true)\n@@ -485,7 +488,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 try_validation!(\n                     value.to_char(),\n                     self.path,\n-                    err_ub!(InvalidChar(..)) =>\n+                    InvalidChar(..) =>\n                         { \"{:x}\", value } expected { \"a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\" },\n                 );\n                 Ok(true)\n@@ -544,8 +547,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                     let _fn = try_validation!(\n                         self.ecx.get_ptr_fn(ptr),\n                         self.path,\n-                        err_ub!(DanglingIntPointer(..)) |\n-                        err_ub!(InvalidFunctionPointer(..)) =>\n+                        DanglingIntPointer(..) |\n+                        InvalidFunctionPointer(..) =>\n                             { \"{ptr}\" } expected { \"a function pointer\" },\n                     );\n                     // FIXME: Check if the signature matches\n@@ -660,9 +663,9 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             Ok(try_validation!(\n                 this.ecx.read_discriminant(op),\n                 this.path,\n-                err_ub!(InvalidTag(val)) =>\n+                InvalidTag(val) =>\n                     { \"{:x}\", val } expected { \"a valid enum tag\" },\n-                err_ub!(InvalidUninitBytes(None)) =>\n+                InvalidUninitBytes(None) =>\n                     { \"uninitialized bytes\" } expected { \"a valid enum tag\" },\n             )\n             .1)\n@@ -805,7 +808,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 try_validation!(\n                     self.ecx.read_bytes_ptr_strip_provenance(mplace.ptr, Size::from_bytes(len)),\n                     self.path,\n-                    err_ub!(InvalidUninitBytes(..)) => { \"uninitialized data in `str`\" },\n+                    InvalidUninitBytes(..) => { \"uninitialized data in `str`\" },\n                 );\n             }\n             ty::Array(tys, ..) | ty::Slice(tys)"}]}