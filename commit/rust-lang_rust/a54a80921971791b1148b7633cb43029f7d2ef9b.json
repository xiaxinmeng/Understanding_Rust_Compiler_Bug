{"sha": "a54a80921971791b1148b7633cb43029f7d2ef9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NGE4MDkyMTk3MTc5MWIxMTQ4Yjc2MzNjYjQzMDI5ZjdkMmVmOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-15T05:11:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-15T05:11:53Z"}, "message": "Auto merge of #25359 - thepowersgang:result-expect-2, r=alexcrichton\n\nAs it says in the title. I've added an `expect` method to `Result` that allows printing both an error message (e.g. what operation was attempted), and the error value. This is separate from the `unwrap` and `ok().expect(\"message\")` behaviours.", "tree": {"sha": "9f48fc8af5402cf352a9c474f22286fe67d35ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f48fc8af5402cf352a9c474f22286fe67d35ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a54a80921971791b1148b7633cb43029f7d2ef9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a54a80921971791b1148b7633cb43029f7d2ef9b", "html_url": "https://github.com/rust-lang/rust/commit/a54a80921971791b1148b7633cb43029f7d2ef9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a54a80921971791b1148b7633cb43029f7d2ef9b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d046230338e117c8a7c85bb4d542f2787d5ef9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d046230338e117c8a7c85bb4d542f2787d5ef9d", "html_url": "https://github.com/rust-lang/rust/commit/7d046230338e117c8a7c85bb4d542f2787d5ef9d"}, {"sha": "0937c10f3ca21585f0cb00c1a112e4ff4a742456", "url": "https://api.github.com/repos/rust-lang/rust/commits/0937c10f3ca21585f0cb00c1a112e4ff4a742456", "html_url": "https://github.com/rust-lang/rust/commit/0937c10f3ca21585f0cb00c1a112e4ff4a742456"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "772831b1a5862c241fb1dc315396021ba2fe28aa", "filename": "src/libcore/result.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a54a80921971791b1148b7633cb43029f7d2ef9b/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a80921971791b1148b7633cb43029f7d2ef9b/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=a54a80921971791b1148b7633cb43029f7d2ef9b", "patch": "@@ -731,6 +731,26 @@ impl<T, E: fmt::Debug> Result<T, E> {\n                 panic!(\"called `Result::unwrap()` on an `Err` value: {:?}\", e)\n         }\n     }\n+\n+    /// Unwraps a result, yielding the content of an `Ok`.\n+    ///\n+    /// Panics if the value is an `Err`, with a panic message including the\n+    /// passed message, and the content of the `Err`.\n+    ///\n+    /// # Examples\n+    /// ```{.should_panic}\n+    /// #![feature(result_expect)]\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_expect\", reason = \"newly introduced\")]\n+    pub fn expect(self, msg: &str) -> T {\n+        match self {\n+            Ok(t) => t,\n+            Err(e) => panic!(\"{}: {:?}\", msg, e),\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "64e34883ee7df8f3ceae75800785ce6bd366dfb9", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a54a80921971791b1148b7633cb43029f7d2ef9b/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a80921971791b1148b7633cb43029f7d2ef9b/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=a54a80921971791b1148b7633cb43029f7d2ef9b", "patch": "@@ -28,6 +28,7 @@\n #![feature(cell_extras)]\n #![feature(iter_empty)]\n #![feature(iter_once)]\n+#![feature(result_expect)]\n \n extern crate core;\n extern crate test;"}, {"sha": "02ea6b10e6e03ce05de3335e8191d996cbd508e0", "filename": "src/libcoretest/result.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a54a80921971791b1148b7633cb43029f7d2ef9b/src%2Flibcoretest%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a80921971791b1148b7633cb43029f7d2ef9b/src%2Flibcoretest%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fresult.rs?ref=a54a80921971791b1148b7633cb43029f7d2ef9b", "patch": "@@ -137,3 +137,16 @@ pub fn test_unwrap_or_else_panic() {\n     let bad_err: Result<isize, &'static str> = Err(\"Unrecoverable mess.\");\n     let _ : isize = bad_err.unwrap_or_else(handler);\n }\n+\n+\n+#[test]\n+pub fn test_expect_ok() {\n+    let ok: Result<isize, &'static str> = Ok(100);\n+    assert_eq!(ok.expect(\"Unexpected error\"), 100);\n+}\n+#[test]\n+#[should_panic(expected=\"Got expected error: \\\"All good\\\"\")]\n+pub fn test_expect_err() {\n+    let err: Result<isize, &'static str> = Err(\"All good\");\n+    err.expect(\"Got expected error\");\n+}"}]}