{"sha": "cc1e5c0509e2eee607f4c234b21e2441fe15c40f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMWU1YzA1MDllMmVlZTYwN2Y0YzIzNGIyMWUyNDQxZmUxNWM0MGY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-22T00:14:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-22T00:14:49Z"}, "message": "Rollup merge of #75753 - koutheir:patch-1, r=steveklabnik\n\nAnother motivation for CFG: return-oriented programming", "tree": {"sha": "8c24598240364eae0c5a27a5fb33840790d8b42d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c24598240364eae0c5a27a5fb33840790d8b42d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc1e5c0509e2eee607f4c234b21e2441fe15c40f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfQGN5CRBK7hj4Ov3rIwAAdHIIAHQ4y9uMoVamZH4PfzQXu/VN\nbfN01/tCj+D6L/lf2/ouL8P717+8+h0cCkQgrfbwfuDfDlxJd30lC4FIloT2Lzj2\nwWk9TMhHgtTtJNVA5zCEhfdyK0Vwo82F5wQ2hcR10vJB1165zw0unJFy9vJCRxWm\nJdOUyk1qLOAPSa2FUh96uqZbNaHWEJmPc0LktDpf4FpJzwr+jrrldGK80CCg16RA\nmQR7kpLriuzDiecmnd9OK5C2OYuBQ4pHk382k68HZED1hUBuSkx6d+0Bt3D+p3c5\nd+oOa+eQWVUo13uyYpiyC3CLqryHZ10IneQ4i+o8dTXYkd7RzUnNVhPgXn2pyCA=\n=8vyL\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c24598240364eae0c5a27a5fb33840790d8b42d\nparent 17d60e44b02cde5e5b486df3daad7bddcbc496c5\nparent 8ae3384bf7208387237b67636b8632d4707d3ec1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1598055289 +0200\ncommitter GitHub <noreply@github.com> 1598055289 +0200\n\nRollup merge of #75753 - koutheir:patch-1, r=steveklabnik\n\nAnother motivation for CFG: return-oriented programming\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1e5c0509e2eee607f4c234b21e2441fe15c40f", "html_url": "https://github.com/rust-lang/rust/commit/cc1e5c0509e2eee607f4c234b21e2441fe15c40f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc1e5c0509e2eee607f4c234b21e2441fe15c40f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d60e44b02cde5e5b486df3daad7bddcbc496c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d60e44b02cde5e5b486df3daad7bddcbc496c5", "html_url": "https://github.com/rust-lang/rust/commit/17d60e44b02cde5e5b486df3daad7bddcbc496c5"}, {"sha": "8ae3384bf7208387237b67636b8632d4707d3ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae3384bf7208387237b67636b8632d4707d3ec1", "html_url": "https://github.com/rust-lang/rust/commit/8ae3384bf7208387237b67636b8632d4707d3ec1"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "c43d91bf070edd97a878a9acdec8039fe954d4b1", "filename": "src/doc/unstable-book/src/compiler-flags/control-flow-guard.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cc1e5c0509e2eee607f4c234b21e2441fe15c40f/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc1e5c0509e2eee607f4c234b21e2441fe15c40f/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md?ref=cc1e5c0509e2eee607f4c234b21e2441fe15c40f", "patch": "@@ -6,7 +6,7 @@ The tracking issue for this feature is: [#68793](https://github.com/rust-lang/ru\n \n The rustc flag `-Z control-flow-guard` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.\n \n-CFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported Windows platforms (Windows 8.1 onwards). Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete. \n+CFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported [Windows platforms (Windows 8.1 onwards)](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard). Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete. \n \n During compilation, the compiler identifies all indirect calls/jumps and adds CFG checks. It also emits metadata containing the relative addresses of all address-taken functions. At runtime, if the binary is run on a CFG-aware operating system, the loader uses the CFG metadata to generate a bitmap of the address space and marks those addresses that contain valid targets. On each indirect call, the inserted check determines whether the target address is marked in this bitmap. If the target is not valid, the process is terminated.\n \n@@ -19,8 +19,9 @@ CFG functionality is completely implemented in the LLVM backend and is supported\n \n ## When to use Control Flow Guard\n \n-The primary motivation for enabling CFG in Rust is to enhance security when linking against non-Rust code, especially C/C++ code. To achieve full CFG protection, all indirect calls (including any from Rust code) must have the appropriate CFG checks, as added by this flag. CFG can also improve security for Rust code that uses the `unsafe` keyword\n+The primary motivation for enabling CFG in Rust is to enhance security when linking against non-Rust code, especially C/C++ code. To achieve full CFG protection, all indirect calls (including any from Rust code) must have the appropriate CFG checks, as added by this flag. CFG can also improve security for Rust code that uses the `unsafe` keyword.\n \n+Another motivation behind CFG is to harden programs against [return-oriented programming (ROP)](https://en.wikipedia.org/wiki/Return-oriented_programming) attacks. CFG disallows an attacker from taking advantage of the program's own instructions while redirecting control flow in unexpected ways.\n \n ## Overhead of Control Flow Guard\n "}]}