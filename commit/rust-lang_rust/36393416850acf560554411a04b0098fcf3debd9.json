{"sha": "36393416850acf560554411a04b0098fcf3debd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MzkzNDE2ODUwYWNmNTYwNTU0NDExYTA0YjAwOThmY2YzZGViZDk=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-02T11:56:33Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-13T13:37:09Z"}, "message": "Default diverging types based on feature gate.\n\nDefault to either `!` or `()` depending on whether feature(never_type)\nis on or not.", "tree": {"sha": "863190ef6b774270d24aefc7d5390033bbb7167f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863190ef6b774270d24aefc7d5390033bbb7167f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36393416850acf560554411a04b0098fcf3debd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36393416850acf560554411a04b0098fcf3debd9", "html_url": "https://github.com/rust-lang/rust/commit/36393416850acf560554411a04b0098fcf3debd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36393416850acf560554411a04b0098fcf3debd9/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54c72d8f98a5693ab04c71942d07fb777e17a951", "url": "https://api.github.com/repos/rust-lang/rust/commits/54c72d8f98a5693ab04c71942d07fb777e17a951", "html_url": "https://github.com/rust-lang/rust/commit/54c72d8f98a5693ab04c71942d07fb777e17a951"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "4056fb01aa2c26fe73c4061f0d7b0b4fa18bd6c9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36393416850acf560554411a04b0098fcf3debd9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36393416850acf560554411a04b0098fcf3debd9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=36393416850acf560554411a04b0098fcf3debd9", "patch": "@@ -1266,6 +1266,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_tup(Vec::new())\n     }\n \n+    pub fn mk_diverging_default(self) -> Ty<'tcx> {\n+        if self.sess.features.borrow().never_type {\n+            self.types.never\n+        } else {\n+            self.mk_nil()\n+        }\n+    }\n+\n     pub fn mk_bool(self) -> Ty<'tcx> {\n         self.mk_ty(TyBool)\n     }"}, {"sha": "60935d474138b65a5262ecd37173a48fae3c4c12", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36393416850acf560554411a04b0098fcf3debd9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36393416850acf560554411a04b0098fcf3debd9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=36393416850acf560554411a04b0098fcf3debd9", "patch": "@@ -1977,7 +1977,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if self.type_var_diverges(resolved) {\n                 debug!(\"default_type_parameters: defaulting `{:?}` to `!` because it diverges\",\n                        resolved);\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_diverging_default());\n             } else {\n                 match self.type_is_unconstrained_numeric(resolved) {\n                     UnconstrainedInt => {\n@@ -2051,7 +2051,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for ty in &unsolved_variables {\n                 let resolved = self.resolve_type_vars_if_possible(ty);\n                 if self.type_var_diverges(resolved) {\n-                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n+                    self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_diverging_default());\n                 } else {\n                     match self.type_is_unconstrained_numeric(resolved) {\n                         UnconstrainedInt | UnconstrainedFloat => {\n@@ -2109,7 +2109,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let _ = self.commit_if_ok(|_: &infer::CombinedSnapshot| {\n                 for ty in &unbound_tyvars {\n                     if self.type_var_diverges(ty) {\n-                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n+                        self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_diverging_default());\n                     } else {\n                         match self.type_is_unconstrained_numeric(ty) {\n                             UnconstrainedInt => {\n@@ -2205,7 +2205,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // reporting for more then one conflict.\n         for ty in &unbound_tyvars {\n             if self.type_var_diverges(ty) {\n-                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.types.never);\n+                self.demand_eqtype(syntax_pos::DUMMY_SP, *ty, self.tcx.mk_diverging_default());\n             } else {\n                 match self.type_is_unconstrained_numeric(ty) {\n                     UnconstrainedInt => {"}]}