{"sha": "b1b0b36cc0385bd43c2b56d45eb00272f72cda23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjBiMzZjYzAzODViZDQzYzJiNTZkNDVlYjAwMjcyZjcyY2RhMjM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-02T12:38:28Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-02T12:55:00Z"}, "message": "Document the author lint", "tree": {"sha": "05282398c45394824eccb10f8280a955d4c242f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05282398c45394824eccb10f8280a955d4c242f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b0b36cc0385bd43c2b56d45eb00272f72cda23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQItBAABCAAXBQJawiglEBxkZXZAcGhhbnNjaC5uZXQACgkQk/szRZ0xHl6jXQ/9\nG06sNd7VRCWmHjojkIcJY2aiszxFPJaNFRyS6ieE/KqiLUMhqCDuOaPijvuJF0I/\nM9bfDfiitoDzP1IlM9glFqEyiDytWLyE6dKbXye5hmncStdu4GpMlDcvOyss0L6a\ncVwT26uoZSXreGm1xmkbeO3EGQswuro7/Vv8xbT6nfush9tra/w4kUxz+//ObxIf\nBbNi7K2gAFUyHi2UGFavC1sMTGRU+fJ/jjPNXr+y7etJpqCsKysO1Hx+kStmr+jj\ngmQJUDR0dkOk6k7DtLRmGKCoK+IcK3vszYwpaIfVZ/iHMO9B4XGmSR8F8iF6AGw3\nfPcT54kuAXDw9jU+Y6nfuM84oFW6bXXe4n2ZalLFU4+SHyl4NxMLIwdlKomc/OO8\nKVrf2ONKFWUBmwoTZCzXLPxtN3BzrnWFJvCvjObc9vsgk3b8WGk9RMs8K3joMWyw\n9aidLS46dWogNhzEmcDb2mL78tZVlCtr8MzlgVCsWdechbDFSI4wlsGMYM/mdoQA\nrGgT6eOfSnjpiYT+NgSxSbqJS/FVqFgXJa7znbxyG6nczvC4/esTO72hZo5FLpZR\nWo3JbUViwi7bu66EehLnnyWwg9pJMWaAz41H0cofyezmPTd5JgT3qykpJ3Y0gNJP\n/P1eulpT6F2FurGRGASpCvg1HIA5dy8lXkQGo0PVge0=\n=nAQC\n-----END PGP SIGNATURE-----", "payload": "tree 05282398c45394824eccb10f8280a955d4c242f4\nparent fef7fb347315857d1ee78912ef8045a12c148097\nauthor Philipp Hansch <dev@phansch.net> 1522672708 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1522673700 +0200\n\nDocument the author lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b0b36cc0385bd43c2b56d45eb00272f72cda23", "html_url": "https://github.com/rust-lang/rust/commit/b1b0b36cc0385bd43c2b56d45eb00272f72cda23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b0b36cc0385bd43c2b56d45eb00272f72cda23/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fef7fb347315857d1ee78912ef8045a12c148097", "url": "https://api.github.com/repos/rust-lang/rust/commits/fef7fb347315857d1ee78912ef8045a12c148097", "html_url": "https://github.com/rust-lang/rust/commit/fef7fb347315857d1ee78912ef8045a12c148097"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "c9f760209c09c7add832af572cc25fad5699153a", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b1b0b36cc0385bd43c2b56d45eb00272f72cda23/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1b0b36cc0385bd43c2b56d45eb00272f72cda23/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=b1b0b36cc0385bd43c2b56d45eb00272f72cda23", "patch": "@@ -51,6 +51,44 @@ to lint-writing, though it does get into advanced stuff. Most lints consist of a\n `LintPass` with one or more of its default methods overridden. See the existing lints for examples\n of this.\n \n+\n+#### Author lint\n+\n+There is also the internal `author` lint to generate clippy code that detects the offending pattern. It does not work for all of the Rust syntax, but can give a good starting point.\n+\n+Create a new UI test with the pattern you want to match:\n+\n+```rust\n+// ./tests/ui/my_lint.rs\n+\n+// The custom_attribute needs to be enabled for the author lint to work\n+#![feature(plugin, custom_attribute)]\n+\n+fn main() {\n+    #[clippy(author)]\n+    let arr: [i32; 1] = [7]; // Replace line with the code you want to match\n+}\n+```\n+\n+Now you run `TESTNAME=ui/my_lint cargo test --test compile-test` to produce\n+the file with the generated code:\n+\n+```rust\n+// ./tests/ui/my_lint.stdout\n+\n+if_chain! {\n+    if let Expr_::ExprArray(ref elements) = stmt.node;\n+    if elements.len() == 1;\n+    if let Expr_::ExprLit(ref lit) = elements[0].node;\n+    if let LitKind::Int(7, _) = lit.node;\n+    then {\n+        // report your lint here\n+    }\n+}\n+```\n+\n+#### Documentation\n+\n Please document your lint with a doc comment akin to the following:\n \n ```rust\n@@ -71,6 +109,8 @@ Please document your lint with a doc comment akin to the following:\n /// ```\n ```\n \n+Once your lint is merged it will show up in the [lint list](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\n+\n ### Running test suite\n \n Clippy uses UI tests. UI tests check that the output of the compiler is exactly as expected."}, {"sha": "9d708d637c3c93db8f9b0db61f4169769ddb2a7e", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1b0b36cc0385bd43c2b56d45eb00272f72cda23/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b0b36cc0385bd43c2b56d45eb00272f72cda23/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=b1b0b36cc0385bd43c2b56d45eb00272f72cda23", "patch": "@@ -14,6 +14,7 @@ use std::collections::HashMap;\n ///\n /// **Example:**\n /// ```rust\n+/// // ./tests/ui/my_lint.rs\n /// fn foo() {\n ///     // detect the following pattern\n ///     #[clippy(author)]\n@@ -24,9 +25,11 @@ use std::collections::HashMap;\n /// }\n /// ```\n ///\n-/// prints\n+/// Running `TESTNAME=ui/my_lint cargo test --test compile-test` will produce\n+/// a `./tests/ui/new_lint.stdout` file with the generated code:\n ///\n-/// ```\n+/// ```rust\n+/// // ./tests/ui/new_lint.stdout\n /// if_chain!{\n ///     if let Expr_::ExprIf(ref cond, ref then, None) = item.node,\n ///     if let Expr_::ExprBinary(BinOp::Eq, ref left, ref right) = cond.node,"}]}