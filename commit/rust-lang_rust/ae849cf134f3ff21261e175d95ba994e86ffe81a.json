{"sha": "ae849cf134f3ff21261e175d95ba994e86ffe81a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlODQ5Y2YxMzRmM2ZmMjEyNjFlMTc1ZDk1YmE5OTRlODZmZmU4MWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T00:21:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T00:21:17Z"}, "message": "Owned&Borrowed nodes\n\nHOLLY COW, UNLIKE C++, WE CAN BE GENERIC WRT OWNERSHIP/BORROWING, SO\nWE CAN BOTH MAKE SYNTAX NODES OWNED (WHICH IS CONVENIENT) AND\nBORROWED (WHICH IS CONVENIENT FOR LOCAL PROCESSING, BC YOU DON'T NEED\nTO BUMP REFCOUNTS).", "tree": {"sha": "be123a10589615f38518e294db56e8821c972e09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be123a10589615f38518e294db56e8821c972e09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae849cf134f3ff21261e175d95ba994e86ffe81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae849cf134f3ff21261e175d95ba994e86ffe81a", "html_url": "https://github.com/rust-lang/rust/commit/ae849cf134f3ff21261e175d95ba994e86ffe81a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae849cf134f3ff21261e175d95ba994e86ffe81a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83acbc06bd01cd7045566170148e2150f568f77c", "url": "https://api.github.com/repos/rust-lang/rust/commits/83acbc06bd01cd7045566170148e2150f568f77c", "html_url": "https://github.com/rust-lang/rust/commit/83acbc06bd01cd7045566170148e2150f568f77c"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "34c71fd2c4464e29d6d94188c2f05f7af84b1417", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ae849cf134f3ff21261e175d95ba994e86ffe81a", "patch": "@@ -27,7 +27,7 @@ mod syntax_kinds;\n pub use {\n     text_unit::{TextRange, TextUnit},\n     syntax_kinds::SyntaxKind,\n-    yellow::{SyntaxNode},\n+    yellow::{SyntaxNode, SyntaxNodeRef},\n     lexer::{tokenize, Token},\n };\n \n@@ -48,16 +48,17 @@ pub mod utils {\n         collections::BTreeSet\n     };\n \n-    use {SyntaxNode, SyntaxError};\n+    use {SyntaxNode, SyntaxNodeRef, SyntaxError};\n \n     /// Parse a file and create a string representation of the resulting parse tree.\n     pub fn dump_tree_green(syntax: &SyntaxNode) -> String {\n+        let syntax = syntax.borrow();\n         let mut errors: BTreeSet<_> = syntax.root.errors.iter().cloned().collect();\n         let mut result = String::new();\n         go(syntax, &mut result, 0, &mut errors);\n         return result;\n \n-        fn go(node: &SyntaxNode, buff: &mut String, level: usize, errors: &mut BTreeSet<SyntaxError>) {\n+        fn go(node: SyntaxNodeRef, buff: &mut String, level: usize, errors: &mut BTreeSet<SyntaxError>) {\n             buff.push_str(&String::from(\"  \").repeat(level));\n             write!(buff, \"{:?}\\n\", node).unwrap();\n             let my_errors: Vec<_> = errors.iter().filter(|e| e.offset == node.range().start())\n@@ -68,7 +69,7 @@ pub mod utils {\n                 write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n             }\n \n-            for child in node.children().iter() {\n+            for child in node.children() {\n                 go(child, buff, level + 1, errors)\n             }\n "}, {"sha": "65cc97ff9b9acadddb4b521af119448af91f80ad", "filename": "src/yellow/builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Fyellow%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Fyellow%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fbuilder.rs?ref=ae849cf134f3ff21261e175d95ba994e86ffe81a", "patch": "@@ -1,6 +1,6 @@\n use {\n     SyntaxKind, TextRange, TextUnit,\n-    yellow::{SyntaxNode, GreenNode, GreenNodeBuilder, SyntaxError},\n+    yellow::{SyntaxNode, SyntaxRoot, GreenNode, GreenNodeBuilder, SyntaxError},\n     parser::Sink\n };\n \n@@ -57,7 +57,8 @@ impl Sink for GreenBuilder {\n     }\n \n     fn finish(self) -> SyntaxNode {\n-        SyntaxNode::new(self.root.unwrap(), self.errors)\n+        let root = SyntaxRoot::new(self.root.unwrap(), self.errors);\n+        SyntaxNode::new_owned(root)\n     }\n }\n "}, {"sha": "89eefc98b22f6b003176958f1bad38bf024c1b18", "filename": "src/yellow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fmod.rs?ref=ae849cf134f3ff21261e175d95ba994e86ffe81a", "patch": "@@ -6,7 +6,7 @@ mod builder;\n pub(crate) use self::{\n     green::{GreenNode, GreenNodeBuilder},\n     red::RedNode,\n-    syntax::SyntaxError,\n+    syntax::{SyntaxError, SyntaxRoot},\n     builder::GreenBuilder,\n };\n-pub use self::syntax::SyntaxNode;\n+pub use self::syntax::{SyntaxNode, SyntaxNodeRef};"}, {"sha": "0fa24fb4778fbac821c5c01c55606236b4bf2470", "filename": "src/yellow/syntax.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae849cf134f3ff21261e175d95ba994e86ffe81a/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=ae849cf134f3ff21261e175d95ba994e86ffe81a", "patch": "@@ -10,17 +10,28 @@ use {\n     yellow::{RedNode, GreenNode},\n };\n \n-#[derive(Clone)]\n-pub struct SyntaxNode {\n-    pub(crate) root: SyntaxRoot,\n+#[derive(Clone, Copy)]\n+pub struct SyntaxNode<ROOT: ::std::ops::Deref<Target=SyntaxRoot> + Clone = Arc<SyntaxRoot>> {\n+    pub(crate) root: ROOT,\n     // guaranteed to be alive bc SyntaxRoot holds a strong ref\n     red: ptr::NonNull<RedNode>,\n }\n \n-#[derive(Clone)]\n+pub type SyntaxNodeRef<'a> = SyntaxNode<&'a SyntaxRoot>;\n+\n+#[derive(Debug)]\n pub struct SyntaxRoot {\n-    red: Arc<RedNode>,\n-    pub(crate) errors: Arc<Vec<SyntaxError>>,\n+    red: RedNode,\n+    pub(crate) errors: Vec<SyntaxError>,\n+}\n+\n+impl SyntaxRoot {\n+    pub(crate) fn new(green: GreenNode, errors: Vec<SyntaxError>) -> SyntaxRoot {\n+        SyntaxRoot {\n+            red: RedNode::new_root(green),\n+            errors,\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n@@ -29,13 +40,21 @@ pub(crate) struct SyntaxError {\n     pub(crate) offset: TextUnit,\n }\n \n-impl SyntaxNode {\n-    pub(crate) fn new(root: GreenNode, errors: Vec<SyntaxError>) -> SyntaxNode {\n-        let red = Arc::new(RedNode::new_root(root));\n-        let red_weak: ptr::NonNull<RedNode> = (&*red).into();\n-        let root = SyntaxRoot { red, errors: Arc::new(errors) };\n+impl SyntaxNode<Arc<SyntaxRoot>> {\n+    pub(crate) fn new_owned(root: SyntaxRoot) -> Self {\n+        let root = Arc::new(root);\n+        let red_weak = ptr::NonNull::from(&root.red);\n         SyntaxNode { root, red: red_weak }\n     }\n+}\n+\n+impl<ROOT: ::std::ops::Deref<Target=SyntaxRoot> + Clone> SyntaxNode<ROOT> {\n+    pub fn borrow<'a>(&'a self) -> SyntaxNode<&'a SyntaxRoot> {\n+        SyntaxNode {\n+            root: &*self.root,\n+            red: ptr::NonNull::clone(&self.red),\n+        }\n+    }\n \n     pub fn kind(&self) -> SyntaxKind {\n         self.red().green().kind()\n@@ -53,7 +72,7 @@ impl SyntaxNode {\n         self.red().green().text()\n     }\n \n-    pub fn children(&self) -> Vec<SyntaxNode> {\n+    pub fn children(&self) -> Vec<SyntaxNode<ROOT>> {\n         let red = self.red();\n         let n_children = red.n_children();\n         let mut res = Vec::with_capacity(n_children);\n@@ -71,7 +90,7 @@ impl SyntaxNode {\n     }\n }\n \n-impl fmt::Debug for SyntaxNode {\n+impl<ROOT: ::std::ops::Deref<Target=SyntaxRoot> + Clone> fmt::Debug for SyntaxNode<ROOT> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(fmt, \"{:?}@{:?}\", self.kind(), self.range())?;\n         if has_short_text(self.kind()) {"}]}