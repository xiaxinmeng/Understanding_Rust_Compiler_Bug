{"sha": "260e04879ee52a768a66ad131c7bd1b56526e609", "node_id": "C_kwDOAAsO6NoAKDI2MGUwNDg3OWVlNTJhNzY4YTY2YWQxMzFjN2JkMWI1NjUyNmU2MDk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T04:20:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T04:20:17Z"}, "message": "Rollup merge of #107190 - fmease:fix-81698, r=compiler-errors\n\nRecover from more const arguments that are not wrapped in curly braces\n\nRecover from some array, borrow, tuple & arithmetic expressions in const argument positions that lack curly braces and provide a suggestion to fix the issue continuing where #92884 left off. Examples of such expressions: `[]`, `[0]`, `[1, 2]`, `[0; 0xff]`, `&9`, `(\"\", 0)` and `(1 + 2) * 3` (we previously did not recover from them).\n\nI am not entirely happy with my current solution because the code that recovers from `[0]` (coinciding with a malformed slice type) and `[0; 0]` (coinciding with a malformed array type) is quite fragile as the aforementioned snippets are actually successfully parsed as types by `parse_ty` since it itself already recovers from them (returning `[\u27e8error\u27e9]` and `[\u27e8error\u27e9; 0]` respectively) meaning I have to manually look for `TyKind::Err`s and construct a separate diagnostic for the suggestion to attach to (thereby emitting two diagnostics in total).\n\nFixes #81698.\n`@rustbot` label A-diagnostics\nr? diagnostics", "tree": {"sha": "dbdcb9d5a3ad0ced7eb45745a54a78b831a8aeef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdcb9d5a3ad0ced7eb45745a54a78b831a8aeef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/260e04879ee52a768a66ad131c7bd1b56526e609", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1KKBCRBK7hj4Ov3rIwAAHAwIAAFR6hcOYjdLhE20jdPb5cXs\nJDKyqZ9LrByX3eftwwx/mPjl3PtwBDzj+jKRP9yz4vHdGaWLoEYyq65Z7ViaJ7Nv\nBhrRQRjVvX42ti+9aZw8e3Q7vl5RJmbqAbJisEKZ9J5syFM2xfecBCmK9+JwSV8e\nYYIopw3VGWouzDC47pd9/C7zwdh6wEY3XsNfxIAaJDBhr4eOMtfarpQfizBgQv97\nKWq+lDl8P1weDf51Zy9o/NGkSaeTEuecu5RIQG+tHd6XbjFho+OqzRoH2dZeMum8\nuU6Bi0UmP8KINkRwHKR0v8MvH6B0j73UbyFpbSBpR9z13O40bDMJjUg1MUjk+As=\n=EpYm\n-----END PGP SIGNATURE-----\n", "payload": "tree dbdcb9d5a3ad0ced7eb45745a54a78b831a8aeef\nparent 3b6593a0b4e41d680ddc196ce47ee649be62a660\nparent 80a1536c7ab73c867d5a60f4441058e7e2231d8d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674879617 +0100\ncommitter GitHub <noreply@github.com> 1674879617 +0100\n\nRollup merge of #107190 - fmease:fix-81698, r=compiler-errors\n\nRecover from more const arguments that are not wrapped in curly braces\n\nRecover from some array, borrow, tuple & arithmetic expressions in const argument positions that lack curly braces and provide a suggestion to fix the issue continuing where #92884 left off. Examples of such expressions: `[]`, `[0]`, `[1, 2]`, `[0; 0xff]`, `&9`, `(\"\", 0)` and `(1 + 2) * 3` (we previously did not recover from them).\n\nI am not entirely happy with my current solution because the code that recovers from `[0]` (coinciding with a malformed slice type) and `[0; 0]` (coinciding with a malformed array type) is quite fragile as the aforementioned snippets are actually successfully parsed as types by `parse_ty` since it itself already recovers from them (returning `[\u27e8error\u27e9]` and `[\u27e8error\u27e9; 0]` respectively) meaning I have to manually look for `TyKind::Err`s and construct a separate diagnostic for the suggestion to attach to (thereby emitting two diagnostics in total).\n\nFixes #81698.\n`@rustbot` label A-diagnostics\nr? diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/260e04879ee52a768a66ad131c7bd1b56526e609", "html_url": "https://github.com/rust-lang/rust/commit/260e04879ee52a768a66ad131c7bd1b56526e609", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/260e04879ee52a768a66ad131c7bd1b56526e609/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b6593a0b4e41d680ddc196ce47ee649be62a660", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6593a0b4e41d680ddc196ce47ee649be62a660", "html_url": "https://github.com/rust-lang/rust/commit/3b6593a0b4e41d680ddc196ce47ee649be62a660"}, {"sha": "80a1536c7ab73c867d5a60f4441058e7e2231d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a1536c7ab73c867d5a60f4441058e7e2231d8d", "html_url": "https://github.com/rust-lang/rust/commit/80a1536c7ab73c867d5a60f4441058e7e2231d8d"}], "stats": {"total": 210, "additions": 188, "deletions": 22}, "files": [{"sha": "f4c08031bcca08c15542d6eb326d56bd07e54749", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/260e04879ee52a768a66ad131c7bd1b56526e609/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260e04879ee52a768a66ad131c7bd1b56526e609/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=260e04879ee52a768a66ad131c7bd1b56526e609", "patch": "@@ -2353,6 +2353,28 @@ impl<'a> Parser<'a> {\n         Err(err)\n     }\n \n+    /// Try to recover from an unbraced const argument whose first token [could begin a type][ty].\n+    ///\n+    /// [ty]: token::Token::can_begin_type\n+    pub(crate) fn recover_unbraced_const_arg_that_can_begin_ty(\n+        &mut self,\n+        mut snapshot: SnapshotParser<'a>,\n+    ) -> Option<P<ast::Expr>> {\n+        match snapshot.parse_expr_res(Restrictions::CONST_EXPR, None) {\n+            // Since we don't know the exact reason why we failed to parse the type or the\n+            // expression, employ a simple heuristic to weed out some pathological cases.\n+            Ok(expr) if let token::Comma | token::Gt = snapshot.token.kind => {\n+                self.restore_snapshot(snapshot);\n+                Some(expr)\n+            }\n+            Ok(_) => None,\n+            Err(err) => {\n+                err.cancel();\n+                None\n+            }\n+        }\n+    }\n+\n     /// Creates a dummy const argument, and reports that the expression must be enclosed in braces\n     pub fn dummy_const_arg_needs_braces(\n         &self,"}, {"sha": "2e706a00cf7f3babcbf027c568599a77d3431597", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 34, "deletions": 14, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/260e04879ee52a768a66ad131c7bd1b56526e609/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260e04879ee52a768a66ad131c7bd1b56526e609/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=260e04879ee52a768a66ad131c7bd1b56526e609", "patch": "@@ -675,22 +675,42 @@ impl<'a> Parser<'a> {\n             GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n             // Parse type argument.\n-            let is_const_fn =\n-                self.look_ahead(1, |t| t.kind == token::OpenDelim(Delimiter::Parenthesis));\n-            let mut snapshot = self.create_snapshot_for_diagnostic();\n+\n+            // Proactively create a parser snapshot enabling us to rewind and try to reparse the\n+            // input as a const expression in case we fail to parse a type. If we successfully\n+            // do so, we will report an error that it needs to be wrapped in braces.\n+            let mut snapshot = None;\n+            if self.may_recover() && self.token.can_begin_expr() {\n+                snapshot = Some(self.create_snapshot_for_diagnostic());\n+            }\n+\n             match self.parse_ty() {\n-                Ok(ty) => GenericArg::Type(ty),\n+                Ok(ty) => {\n+                    // Since the type parser recovers from some malformed slice and array types and\n+                    // successfully returns a type, we need to look for `TyKind::Err`s in the\n+                    // type to determine if error recovery has occurred and if the input is not a\n+                    // syntactically valid type after all.\n+                    if let ast::TyKind::Slice(inner_ty) | ast::TyKind::Array(inner_ty, _) = &ty.kind\n+                        && let ast::TyKind::Err = inner_ty.kind\n+                        && let Some(snapshot) = snapshot\n+                        && let Some(expr) = self.recover_unbraced_const_arg_that_can_begin_ty(snapshot)\n+                    {\n+                        return Ok(Some(self.dummy_const_arg_needs_braces(\n+                            self.struct_span_err(expr.span, \"invalid const generic expression\"),\n+                            expr.span,\n+                        )));\n+                    }\n+\n+                    GenericArg::Type(ty)\n+                }\n                 Err(err) => {\n-                    if is_const_fn {\n-                        match (*snapshot).parse_expr_res(Restrictions::CONST_EXPR, None) {\n-                            Ok(expr) => {\n-                                self.restore_snapshot(snapshot);\n-                                return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n-                            }\n-                            Err(err) => {\n-                                err.cancel();\n-                            }\n-                        }\n+                    if let Some(snapshot) = snapshot\n+                        && let Some(expr) = self.recover_unbraced_const_arg_that_can_begin_ty(snapshot)\n+                    {\n+                        return Ok(Some(self.dummy_const_arg_needs_braces(\n+                            err,\n+                            expr.span,\n+                        )));\n                     }\n                     // Try to recover from possible `const` arg without braces.\n                     return self.recover_const_arg(start, err).map(Some);"}, {"sha": "423752ca25eba9320e7589369bb58e224cc887ac", "filename": "tests/ui/const-generics/bad-const-generic-exprs.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/260e04879ee52a768a66ad131c7bd1b56526e609/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/260e04879ee52a768a66ad131c7bd1b56526e609/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.rs?ref=260e04879ee52a768a66ad131c7bd1b56526e609", "patch": "@@ -13,10 +13,34 @@ fn main() {\n     let _: Wow<A.0>;\n     //~^ ERROR expected one of\n     //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n-\n-    // FIXME(compiler-errors): This one is still unsatisfying,\n-    // and probably a case I could see someone typing by accident..\n+    let _: Wow<[]>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n     let _: Wow<[12]>;\n-    //~^ ERROR expected type, found\n-    //~| ERROR type provided when a constant was expected\n+    //~^ ERROR expected type\n+    //~| ERROR invalid const generic expression\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<[0, 1, 3]>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<[0xff; 8]>;\n+    //~^ ERROR expected type\n+    //~| ERROR invalid const generic expression\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<[1, 2]>; // Regression test for issue #81698.\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<&0>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<(\"\", 0)>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    let _: Wow<(1 + 2) * 3>;\n+    //~^ ERROR expected type\n+    //~| HELP expressions must be enclosed in braces to be used as const generic arguments\n+    // FIXME(fmease): This one is pretty bad.\n+    let _: Wow<!0>;\n+    //~^ ERROR expected one of\n+    //~| HELP you might have meant to end the type parameters here\n }"}, {"sha": "17a63a96fe4fe5e12a68594e8c3d521b980c80ea", "filename": "tests/ui/const-generics/bad-const-generic-exprs.stderr", "status": "modified", "additions": 103, "deletions": 3, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/260e04879ee52a768a66ad131c7bd1b56526e609/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/260e04879ee52a768a66ad131c7bd1b56526e609/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fbad-const-generic-exprs.stderr?ref=260e04879ee52a768a66ad131c7bd1b56526e609", "patch": "@@ -42,18 +42,118 @@ help: expressions must be enclosed in braces to be used as const generic argumen\n LL |     let _: Wow<{ A.0 }>;\n    |                +     +\n \n+error: expected type, found `]`\n+  --> $DIR/bad-const-generic-exprs.rs:16:17\n+   |\n+LL |     let _: Wow<[]>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [] }>;\n+   |                +    +\n+\n error: expected type, found `12`\n   --> $DIR/bad-const-generic-exprs.rs:19:17\n    |\n LL |     let _: Wow<[12]>;\n    |                 ^^ expected type\n \n-error[E0747]: type provided when a constant was expected\n+error: invalid const generic expression\n   --> $DIR/bad-const-generic-exprs.rs:19:16\n    |\n LL |     let _: Wow<[12]>;\n    |                ^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [12] }>;\n+   |                +      +\n+\n+error: expected type, found `0`\n+  --> $DIR/bad-const-generic-exprs.rs:23:17\n+   |\n+LL |     let _: Wow<[0, 1, 3]>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [0, 1, 3] }>;\n+   |                +           +\n+\n+error: expected type, found `0xff`\n+  --> $DIR/bad-const-generic-exprs.rs:26:17\n+   |\n+LL |     let _: Wow<[0xff; 8]>;\n+   |                 ^^^^ expected type\n+\n+error: invalid const generic expression\n+  --> $DIR/bad-const-generic-exprs.rs:26:16\n+   |\n+LL |     let _: Wow<[0xff; 8]>;\n+   |                ^^^^^^^^^\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [0xff; 8] }>;\n+   |                +           +\n+\n+error: expected type, found `1`\n+  --> $DIR/bad-const-generic-exprs.rs:30:17\n+   |\n+LL |     let _: Wow<[1, 2]>; // Regression test for issue #81698.\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ [1, 2] }>; // Regression test for issue #81698.\n+   |                +        +\n+\n+error: expected type, found `0`\n+  --> $DIR/bad-const-generic-exprs.rs:33:17\n+   |\n+LL |     let _: Wow<&0>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ &0 }>;\n+   |                +    +\n+\n+error: expected type, found `\"\"`\n+  --> $DIR/bad-const-generic-exprs.rs:36:17\n+   |\n+LL |     let _: Wow<(\"\", 0)>;\n+   |                 ^^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ (\"\", 0) }>;\n+   |                +         +\n+\n+error: expected type, found `1`\n+  --> $DIR/bad-const-generic-exprs.rs:39:17\n+   |\n+LL |     let _: Wow<(1 + 2) * 3>;\n+   |                 ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     let _: Wow<{ (1 + 2) * 3 }>;\n+   |                +             +\n+\n+error: expected one of `,` or `>`, found `0`\n+  --> $DIR/bad-const-generic-exprs.rs:43:17\n+   |\n+LL |     let _: Wow<!0>;\n+   |         -       ^ expected one of `,` or `>`\n+   |         |\n+   |         while parsing the type for `_`\n+   |\n+help: you might have meant to end the type parameters here\n+   |\n+LL |     let _: Wow<!>0>;\n+   |                 +\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 15 previous errors\n \n-For more information about this error, try `rustc --explain E0747`."}]}