{"sha": "7fa64bcef3a23e2a19792ebe297ed17fab36c273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmYTY0YmNlZjNhMjNlMmExOTc5MmViZTI5N2VkMTdmYWIzNmMyNzM=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2017-10-24T15:49:58Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2017-10-24T15:49:58Z"}, "message": "Introduce CrateDisambiguator newtype and fix tests", "tree": {"sha": "206731429cb7aba54232f93b0e5128cd0ed5e7ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206731429cb7aba54232f93b0e5128cd0ed5e7ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fa64bcef3a23e2a19792ebe297ed17fab36c273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fa64bcef3a23e2a19792ebe297ed17fab36c273", "html_url": "https://github.com/rust-lang/rust/commit/7fa64bcef3a23e2a19792ebe297ed17fab36c273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fa64bcef3a23e2a19792ebe297ed17fab36c273/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d017466d103d2b155d3ef645c538c03e3008ac95", "url": "https://api.github.com/repos/rust-lang/rust/commits/d017466d103d2b155d3ef645c538c03e3008ac95", "html_url": "https://github.com/rust-lang/rust/commit/d017466d103d2b155d3ef645c538c03e3008ac95"}], "stats": {"total": 146, "additions": 87, "deletions": 59}, "files": [{"sha": "816793cc1aaa07fabf2c1d1fbe6722056c94e990", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -11,8 +11,8 @@\n use super::*;\n \n use dep_graph::{DepGraph, DepKind, DepNodeIndex};\n-use ich::Fingerprint;\n use hir::intravisit::{Visitor, NestedVisitorMap};\n+use session::CrateDisambiguator;\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID};\n use syntax_pos::Span;\n@@ -119,7 +119,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n     }\n \n     pub(super) fn finalize_and_compute_crate_hash(self,\n-                                                  crate_disambiguator: &Fingerprint)\n+                                                  crate_disambiguator: CrateDisambiguator)\n                                                   -> Vec<MapEntry<'hir>> {\n         let mut node_hashes: Vec<_> = self\n             .hir_body_nodes\n@@ -134,7 +134,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n         self.dep_graph.with_task(DepNode::new_no_params(DepKind::Krate),\n                                  &self.hcx,\n-                                 (node_hashes, crate_disambiguator),\n+                                 (node_hashes, crate_disambiguator.to_fingerprint()),\n                                  identity_fn);\n         self.map\n     }"}, {"sha": "fcbe79131eb088a62db24347867a16eeead0a2dc", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -10,6 +10,7 @@\n \n use hir::map::definitions::*;\n use hir::def_id::{CRATE_DEF_INDEX, DefIndex, DefIndexAddressSpace};\n+use session::CrateDisambiguator;\n \n use syntax::ast::*;\n use syntax::ext::hygiene::Mark;\n@@ -43,7 +44,9 @@ impl<'a> DefCollector<'a> {\n         }\n     }\n \n-    pub fn collect_root(&mut self, crate_name: &str, crate_disambiguator: &str) {\n+    pub fn collect_root(&mut self,\n+                        crate_name: &str,\n+                        crate_disambiguator: CrateDisambiguator) {\n         let root = self.definitions.create_root_def(crate_name,\n                                                     crate_disambiguator);\n         assert_eq!(root, CRATE_DEF_INDEX);"}, {"sha": "6418df479526c7506ceade48a62a10ad352cff4e", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -22,6 +22,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n+use session::CrateDisambiguator;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n@@ -231,7 +232,9 @@ impl DefKey {\n         DefPathHash(hasher.finish())\n     }\n \n-    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> DefPathHash {\n+    fn root_parent_stable_hash(crate_name: &str,\n+                               crate_disambiguator: CrateDisambiguator)\n+                               -> DefPathHash {\n         let mut hasher = StableHasher::new();\n         // Disambiguate this from a regular DefPath hash,\n         // see compute_stable_hash() above.\n@@ -467,7 +470,7 @@ impl Definitions {\n     /// Add a definition with a parent definition.\n     pub fn create_root_def(&mut self,\n                            crate_name: &str,\n-                           crate_disambiguator: &str)\n+                           crate_disambiguator: CrateDisambiguator)\n                            -> DefIndex {\n         let key = DefKey {\n             parent: None,"}, {"sha": "a23658664dc6af61c1aba1cc702e197bcc30d0e6", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -1015,7 +1015,7 @@ pub fn map_crate<'hir>(sess: &::session::Session,\n         intravisit::walk_crate(&mut collector, &forest.krate);\n \n         let crate_disambiguator = sess.local_crate_disambiguator();\n-        collector.finalize_and_compute_crate_hash(&crate_disambiguator)\n+        collector.finalize_and_compute_crate_hash(crate_disambiguator)\n     };\n \n     if log_enabled!(::log::LogLevel::Debug) {"}, {"sha": "f4ba7890b170da6e3c55a4cfce9a07f1b8ca5bc8", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -30,7 +30,7 @@ use hir::map::definitions::{Definitions, DefKey, DefPathTable};\n use hir::svh::Svh;\n use ich;\n use ty::{self, TyCtxt};\n-use session::Session;\n+use session::{Session, CrateDisambiguator};\n use session::search_paths::PathKind;\n use util::nodemap::NodeSet;\n \n@@ -267,7 +267,7 @@ pub trait CrateStore {\n     fn export_macros_untracked(&self, cnum: CrateNum);\n     fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind;\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> ich::Fingerprint;\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n     fn struct_field_names_untracked(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children_untracked(&self, did: DefId, sess: &Session) -> Vec<def::Export>;\n@@ -338,7 +338,7 @@ impl CrateStore for DummyCrateStore {\n     fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros_untracked(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol { bug!(\"crate_name\") }\n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> ich::Fingerprint {\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator {\n         bug!(\"crate_disambiguator\")\n     }\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh { bug!(\"crate_hash\") }"}, {"sha": "c753a5309ce8781248a7fe46c0d1168e4e71e791", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -83,12 +83,12 @@ pub struct Session {\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n-    /// The crate_disambiguator is constructed out of all the `-C metadata`\n+        /// The crate_disambiguator is constructed out of all the `-C metadata`\n     /// arguments passed to the compiler. Its value together with the crate-name\n     /// forms a unique global identifier for the crate. It is used to allow\n     /// multiple crates with the same name to coexist. See the\n     /// trans::back::symbol_names module for more information.\n-    pub crate_disambiguator: RefCell<Option<Fingerprint>>,\n+    pub crate_disambiguator: RefCell<Option<CrateDisambiguator>>,\n     pub features: RefCell<feature_gate::Features>,\n \n     /// The maximum recursion limit for potentially infinitely recursive\n@@ -165,9 +165,9 @@ enum DiagnosticBuilderMethod {\n }\n \n impl Session {\n-    pub fn local_crate_disambiguator(&self) -> Fingerprint {\n+    pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n         match *self.crate_disambiguator.borrow() {\n-            Some(sym) => sym,\n+            Some(value) => value,\n             None => bug!(\"accessing disambiguator before initialization\"),\n         }\n     }\n@@ -471,16 +471,17 @@ impl Session {\n \n     /// Returns the symbol name for the registrar function,\n     /// given the crate Svh and the function DefIndex.\n-    pub fn generate_plugin_registrar_symbol(&self, disambiguator: Fingerprint,\n+    pub fn generate_plugin_registrar_symbol(&self, disambiguator: CrateDisambiguator,\n                                             index: DefIndex)\n                                             -> String {\n-        format!(\"__rustc_plugin_registrar__{}_{}\", disambiguator.to_hex(),\n+        format!(\"__rustc_plugin_registrar__{}_{}\", disambiguator.to_fingerprint().to_hex(),\n                                                    index.as_usize())\n     }\n \n-    pub fn generate_derive_registrar_symbol(&self, disambiguator: Fingerprint, index: DefIndex)\n+    pub fn generate_derive_registrar_symbol(&self, disambiguator: CrateDisambiguator,\n+                                            index: DefIndex)\n                                             -> String {\n-        format!(\"__rustc_derive_registrar__{}_{}\", disambiguator.to_hex(),\n+        format!(\"__rustc_derive_registrar__{}_{}\", disambiguator.to_fingerprint().to_hex(),\n                                                    index.as_usize())\n     }\n \n@@ -841,6 +842,26 @@ pub fn build_session_(sopts: config::Options,\n     sess\n }\n \n+/// Hash value constructed out of all the `-C metadata` arguments passed to the\n+/// compiler. Together with the crate-name forms a unique global identifier for\n+/// the crate.\n+#[derive(Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Clone, Copy, RustcEncodable, RustcDecodable)]\n+pub struct CrateDisambiguator(Fingerprint);\n+\n+impl CrateDisambiguator {\n+    pub fn to_fingerprint(self) -> Fingerprint {\n+        self.0\n+    }\n+}\n+\n+impl From<Fingerprint> for CrateDisambiguator {\n+    fn from(fingerprint: Fingerprint) -> CrateDisambiguator {\n+        CrateDisambiguator(fingerprint)\n+    }\n+}\n+\n+impl_stable_hash_for!(tuple_struct CrateDisambiguator { fingerprint });\n+\n /// Holds data on the current incremental compilation session, if there is one.\n #[derive(Debug)]\n pub enum IncrCompSession {"}, {"sha": "5f9cd0cb8b1fd771b10d6956c9376cf97120310c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -1251,7 +1251,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 crate_name,\n                 // Don't print the whole crate disambiguator. That's just\n                 // annoying in debug output.\n-                &(crate_disambiguator.to_hex())[..4],\n+                &(crate_disambiguator.to_fingerprint().to_hex())[..4],\n                 self.def_path(def_id).to_string_no_crate())\n     }\n "}, {"sha": "a1a946a5d794d9e5147a2563d9c747412807aea6", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -10,7 +10,6 @@\n \n use dep_graph::{DepConstructor, DepNode};\n use errors::DiagnosticBuilder;\n-use ich::Fingerprint;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, ItemLocalId};\n@@ -30,7 +29,7 @@ use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::SymbolExportLevel;\n use middle::trans::{CodegenUnit, Stats};\n use mir;\n-use session::CompileResult;\n+use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::Vtable;\n use traits::specialization_graph;\n@@ -284,7 +283,7 @@ define_maps! { <'tcx>\n     [] fn native_libraries: NativeLibraries(CrateNum) -> Rc<Vec<NativeLibrary>>,\n     [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n     [] fn derive_registrar_fn: DeriveRegistrarFn(CrateNum) -> Option<DefId>,\n-    [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> Fingerprint,\n+    [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> CrateDisambiguator,\n     [] fn crate_hash: CrateHash(CrateNum) -> Svh,\n     [] fn original_crate_name: OriginalCrateName(CrateNum) -> Symbol,\n "}, {"sha": "e15c3c9c453c82eb5aaab39ac41ea5ddfb83d8ef", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -19,13 +19,14 @@ use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use hir::map::DefPathData;\n-use ich::{Fingerprint, StableHashingContext};\n+use ich::StableHashingContext;\n use middle::const_val::ConstVal;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n use mir::GeneratorLayout;\n+use session::CrateDisambiguator;\n use traits;\n use ty;\n use ty::subst::{Subst, Substs};\n@@ -2562,7 +2563,7 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn crate_disambiguator<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 crate_num: CrateNum) -> Fingerprint {\n+                                 crate_num: CrateNum) -> CrateDisambiguator {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.sess.local_crate_disambiguator()\n }"}, {"sha": "cd3740f72e0f4323ca0f7590b967cf18701ca492", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::lowering::lower_crate;\n use rustc::ich::Fingerprint;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_mir as mir;\n-use rustc::session::{Session, CompileResult};\n+use rustc::session::{Session, CompileResult, CrateDisambiguator};\n use rustc::session::CompileIncomplete;\n use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n@@ -637,7 +637,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     rustc_incremental::prepare_session_directory(\n         sess,\n         &crate_name,\n-        &disambiguator,\n+        disambiguator,\n     );\n \n     let dep_graph = if sess.opts.build_dep_graph() {\n@@ -1311,7 +1311,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n         .collect()\n }\n \n-pub fn compute_crate_disambiguator(session: &Session) -> Fingerprint {\n+pub fn compute_crate_disambiguator(session: &Session) -> CrateDisambiguator {\n     use std::hash::Hasher;\n \n     // The crate_disambiguator is a 128 bit hash. The disambiguator is fed\n@@ -1341,7 +1341,7 @@ pub fn compute_crate_disambiguator(session: &Session) -> Fingerprint {\n     let is_exe = session.crate_types.borrow().contains(&config::CrateTypeExecutable);\n     hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n \n-    hasher.finish()\n+    CrateDisambiguator::from(hasher.finish())\n \n }\n "}, {"sha": "89310b9d6f58926074755f769fd56d3e67bee7b9", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -114,9 +114,8 @@\n //! unsupported file system and emit a warning in that case. This is not yet\n //! implemented.\n \n-use rustc::ich::Fingerprint;\n use rustc::hir::svh::Svh;\n-use rustc::session::Session;\n+use rustc::session::{Session, CrateDisambiguator};\n use rustc::util::fs as fs_util;\n use rustc_data_structures::{flock, base_n};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n@@ -189,7 +188,7 @@ pub fn in_incr_comp_dir(incr_comp_session_dir: &Path, file_name: &str) -> PathBu\n /// The garbage collection will take care of it.\n pub fn prepare_session_directory(sess: &Session,\n                                  crate_name: &str,\n-                                 crate_disambiguator: &Fingerprint) {\n+                                 crate_disambiguator: CrateDisambiguator) {\n     if sess.opts.incremental.is_none() {\n         return\n     }\n@@ -615,15 +614,17 @@ fn string_to_timestamp(s: &str) -> Result<SystemTime, ()> {\n \n fn crate_path(sess: &Session,\n               crate_name: &str,\n-              crate_disambiguator: &Fingerprint)\n+              crate_disambiguator: CrateDisambiguator)\n               -> PathBuf {\n \n     let incr_dir = sess.opts.incremental.as_ref().unwrap().clone();\n \n-    let crate_disambiguator = crate_disambiguator.to_smaller_hash();\n-    let crate_name = format!(\"{}-{}\",\n-                             crate_name,\n-                             base_n::encode(crate_disambiguator, INT_ENCODE_BASE));\n+    // The full crate disambiguator is really long. 64 bits of it should be\n+    // sufficient.\n+    let crate_disambiguator = crate_disambiguator.to_fingerprint().to_smaller_hash();\n+    let crate_disambiguator = base_n::encode(crate_disambiguator, INT_ENCODE_BASE);\n+\n+    let crate_name = format!(\"{}-{}\", crate_name, crate_disambiguator);\n     incr_dir.join(crate_name)\n }\n "}, {"sha": "cfc8d271327fbef3d4ace880a683b3e94de5dff1", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -15,12 +15,11 @@ use locator::{self, CratePaths};\n use native_libs::relevant_lib;\n use schema::CrateRoot;\n \n-use rustc::ich::Fingerprint;\n use rustc::hir::def_id::{CrateNum, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::svh::Svh;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::DepKind;\n-use rustc::session::Session;\n+use rustc::session::{Session, CrateDisambiguator};\n use rustc::session::config::{Sanitizer, self};\n use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n@@ -627,7 +626,7 @@ impl<'a> CrateLoader<'a> {\n     pub fn find_plugin_registrar(&mut self,\n                                  span: Span,\n                                  name: &str)\n-                                 -> Option<(PathBuf, Fingerprint, DefIndex)> {\n+                                 -> Option<(PathBuf, CrateDisambiguator, DefIndex)> {\n         let ekrate = self.read_extension_crate(span, &ExternCrateInfo {\n              name: Symbol::intern(name),\n              ident: Symbol::intern(name),"}, {"sha": "c688b4c408a352e61632b2d486658e6fbaeda65f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -13,11 +13,11 @@\n \n use schema;\n \n-use rustc::ich::Fingerprint;\n use rustc::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n+use rustc::session::CrateDisambiguator;\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, FxHashSet, NodeMap};\n@@ -172,7 +172,7 @@ impl CrateMetadata {\n     pub fn hash(&self) -> Svh {\n         self.root.hash\n     }\n-    pub fn disambiguator(&self) -> Fingerprint {\n+    pub fn disambiguator(&self) -> CrateDisambiguator {\n         self.root.disambiguator\n     }\n "}, {"sha": "fbe63e0ab4a8af51f2d88a205f22cc88ac4c8eae", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -20,9 +20,8 @@ use rustc::middle::cstore::{CrateStore, DepKind,\n                             LoadedMacro, EncodedMetadata,\n                             EncodedMetadataHashes, NativeLibraryKind};\n use rustc::middle::stability::DeprecationEntry;\n-use rustc::ich::Fingerprint;\n use rustc::hir::def;\n-use rustc::session::Session;\n+use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n@@ -385,7 +384,7 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).name\n     }\n \n-    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> Fingerprint\n+    fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator\n     {\n         self.get_crate_data(cnum).disambiguator()\n     }"}, {"sha": "43dbce5288a7e6a0bc02b662cb160f3af51cc22a", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -14,10 +14,11 @@ use index;\n use rustc::hir;\n use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId, CrateNum};\n-use rustc::ich::{Fingerprint, StableHashingContext};\n+use rustc::ich::StableHashingContext;\n use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n use rustc::middle::lang_items;\n use rustc::mir;\n+use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, Ty, ReprOptions};\n use rustc_back::PanicStrategy;\n \n@@ -191,7 +192,7 @@ pub struct CrateRoot {\n     pub name: Symbol,\n     pub triple: String,\n     pub hash: hir::svh::Svh,\n-    pub disambiguator: Fingerprint,\n+    pub disambiguator: CrateDisambiguator,\n     pub panic_strategy: PanicStrategy,\n     pub has_global_allocator: bool,\n     pub has_default_lib_allocator: bool,"}, {"sha": "2b6eaf12f1bceb63fdfca0a60e68a17ec9037411", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -1417,7 +1417,7 @@ impl<'a> Resolver<'a> {\n \n         let mut definitions = Definitions::new();\n         DefCollector::new(&mut definitions, Mark::root())\n-            .collect_root(crate_name, &session.local_crate_disambiguator().to_hex());\n+            .collect_root(crate_name, session.local_crate_disambiguator());\n \n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),"}, {"sha": "eb1c5cb78815344b56e09e4ad014572c3a0f5cf7", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -34,7 +34,7 @@ pub fn threshold(tcx: TyCtxt) -> SymbolExportLevel {\n pub fn metadata_symbol_name(tcx: TyCtxt) -> String {\n     format!(\"rust_metadata_{}_{}\",\n             tcx.crate_name(LOCAL_CRATE),\n-            tcx.crate_disambiguator(LOCAL_CRATE).to_hex())\n+            tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())\n }\n \n fn crate_export_threshold(crate_type: config::CrateType) -> SymbolExportLevel {"}, {"sha": "5ad3a7d26558ad96098edbfe4fc1f40db2265a93", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -1312,7 +1312,8 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n         let llmod_id = format!(\"{}-{}.rs\",\n                                cgu.name(),\n-                               tcx.crate_disambiguator(LOCAL_CRATE));\n+                               tcx.crate_disambiguator(LOCAL_CRATE)\n+                                   .to_fingerprint().to_hex());\n \n         // Instantiate translation items without filling out definitions yet...\n         let scx = SharedCrateContext::new(tcx);"}, {"sha": "aa97fc10e720be1521dc146cb9e8703f82054ca3", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -30,7 +30,7 @@ fn main() {\n // END RUST SOURCE\n // START rustc.node12.EraseRegions.after.mir\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[e36f]::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[e36f]::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[317d]::{{impl}}[0]::foo[0] }, BrAnon(0)) Test, _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:5) => validate_1[317d]::{{impl}}[0]::foo[0] }, BrAnon(1)) mut i32]);\n //         ...\n //         return;\n //     }\n@@ -62,7 +62,7 @@ fn main() {\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[e36f]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[e36f]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:11) => validate_1[317d]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}, {"sha": "dec181f62dc4948cfd555ebf44b406298a68bc4d", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -51,8 +51,8 @@ fn main() {\n // fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[e36f]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[e36f]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[317d]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_4[317d]::write_42[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(22)], _2: *mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         (*_3) = const 23i32;\n@@ -65,8 +65,8 @@ fn main() {\n // fn test(_1: &ReErased mut i32) -> () {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[e36f]::test[0] }, BrAnon(0)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[e36f]::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[317d]::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_4[317d]::test[0] }, BrAnon(0)) mut i32]);\n //         ...\n //         _3 = const write_42(_4) -> bb1;\n //     }\n@@ -81,8 +81,8 @@ fn main() {\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[e36f]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[e36f]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n-//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[e36f]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[e36f]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:10) => validate_4[317d]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         ...\n //         _0 = const write_42(_4) -> bb1;"}, {"sha": "47a6942b830e2143715c32c5769271d9463f8643", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fa64bcef3a23e2a19792ebe297ed17fab36c273/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=7fa64bcef3a23e2a19792ebe297ed17fab36c273", "patch": "@@ -37,7 +37,7 @@ fn main() {\n // fn test(_1: &ReErased mut i32) -> () {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_5[e36f]::test[0] }, BrAnon(0)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(0:4) => validate_5[317d]::test[0] }, BrAnon(0)) mut i32]);\n //         ...\n //         Validate(Release, [_3: bool, _4: *mut i32]);\n //         _3 = const write_42(_4) -> bb1;\n@@ -49,7 +49,7 @@ fn main() {\n // fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n //     ...\n //     bb0: {\n-//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[e36f]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[e36f]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[317d]::main[0]::{{closure}}[0] }, BrEnv) [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), index: DefIndex(1:9) => validate_5[317d]::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n //         StorageLive(_3);\n //         _3 = _2;\n //         StorageLive(_4);"}]}