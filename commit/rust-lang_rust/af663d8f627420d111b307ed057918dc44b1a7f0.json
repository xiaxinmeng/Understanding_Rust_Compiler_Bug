{"sha": "af663d8f627420d111b307ed057918dc44b1a7f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjYzZDhmNjI3NDIwZDExMWIzMDdlZDA1NzkxOGRjNDRiMWE3ZjA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-29T08:36:51Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-29T08:36:51Z"}, "message": "Ignore fn_call_width when rewriting a call with a single non-call arg", "tree": {"sha": "2746ebed842693cca5c7742b43eb3e6194f2d202", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2746ebed842693cca5c7742b43eb3e6194f2d202"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af663d8f627420d111b307ed057918dc44b1a7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af663d8f627420d111b307ed057918dc44b1a7f0", "html_url": "https://github.com/rust-lang/rust/commit/af663d8f627420d111b307ed057918dc44b1a7f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af663d8f627420d111b307ed057918dc44b1a7f0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94a770a777d3995e80938a31ec51c6e85d7ab694", "url": "https://api.github.com/repos/rust-lang/rust/commits/94a770a777d3995e80938a31ec51c6e85d7ab694", "html_url": "https://github.com/rust-lang/rust/commit/94a770a777d3995e80938a31ec51c6e85d7ab694"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "d51d355dbdd783aa4f166ef28f015e7f03bf7ad8", "filename": "src/expr.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/af663d8f627420d111b307ed057918dc44b1a7f0/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af663d8f627420d111b307ed057918dc44b1a7f0/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=af663d8f627420d111b307ed057918dc44b1a7f0", "patch": "@@ -1953,7 +1953,7 @@ where\n                 context.force_one_line_chain = true;\n             }\n         }\n-        last_arg_shape(&context, item_vec, one_line_shape, args_max_width).and_then(|arg_shape| {\n+        last_arg_shape(args, item_vec, one_line_shape, args_max_width).and_then(|arg_shape| {\n             rewrite_last_arg_with_overflow(&context, args, &mut item_vec[args.len() - 1], arg_shape)\n         })\n     } else {\n@@ -2000,26 +2000,32 @@ where\n     tactic\n }\n \n-fn last_arg_shape(\n-    context: &RewriteContext,\n+/// Returns a shape for the last argument which is going to be overflowed.\n+fn last_arg_shape<T>(\n+    lists: &[&T],\n     items: &[ListItem],\n     shape: Shape,\n     args_max_width: usize,\n-) -> Option<Shape> {\n-    let overhead = items.iter().rev().skip(1).fold(0, |acc, i| {\n-        acc + i.item.as_ref().map_or(0, |s| first_line_width(s))\n+) -> Option<Shape>\n+where\n+    T: Rewrite + Spanned + ToExpr,\n+{\n+    let is_nested_call = lists\n+        .iter()\n+        .next()\n+        .and_then(|item| item.to_expr())\n+        .map_or(false, is_nested_call);\n+    if items.len() == 1 && !is_nested_call {\n+        return Some(shape);\n+    }\n+    let offset = items.iter().rev().skip(1).fold(0, |acc, i| {\n+        // 2 = \", \"\n+        acc + 2 + i.inner_as_ref().len()\n     });\n-    let max_width = min(args_max_width, shape.width);\n-    let arg_indent = if context.use_block_indent() {\n-        shape.block().indent.block_unindent(context.config)\n-    } else {\n-        shape.block().indent\n-    };\n-    Some(Shape {\n-        width: max_width.checked_sub(overhead)?,\n-        indent: arg_indent,\n-        offset: 0,\n-    })\n+    Shape {\n+        width: min(args_max_width, shape.width),\n+        ..shape\n+    }.offset_left(offset)\n }\n \n fn rewrite_last_arg_with_overflow<'a, T>(\n@@ -2101,6 +2107,18 @@ pub fn can_be_overflowed_expr(context: &RewriteContext, expr: &ast::Expr, args_l\n     }\n }\n \n+fn is_nested_call(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::ExprKind::Call(..) | ast::ExprKind::Mac(..) => true,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => is_nested_call(expr),\n+        _ => false,\n+    }\n+}\n+\n pub fn wrap_args_with_parens(\n     context: &RewriteContext,\n     args_str: &str,"}]}