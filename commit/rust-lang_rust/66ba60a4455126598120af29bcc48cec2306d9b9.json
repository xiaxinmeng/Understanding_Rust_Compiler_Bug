{"sha": "66ba60a4455126598120af29bcc48cec2306d9b9", "node_id": "C_kwDOAAsO6NoAKDY2YmE2MGE0NDU1MTI2NTk4MTIwYWYyOWJjYzQ4Y2VjMjMwNmQ5Yjk", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-03-21T12:00:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T12:00:23Z"}, "message": "Rollup merge of #109240 - compiler-errors:dont-binder-twice, r=oli-obk\n\nWalk un-shifted nested `impl Trait` in trait when setting up default trait method assumptions\n\nFixes a double subtraction in some binder math in return-position `impl Trait` in trait handling code.\n\nFixes #109239", "tree": {"sha": "191b1d49ce574c4e493acd4291e2d752e46332f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/191b1d49ce574c4e493acd4291e2d752e46332f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66ba60a4455126598120af29bcc48cec2306d9b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGZxXCRBK7hj4Ov3rIwAACgUIABv4BrtP8UxKmOSSMO+rMn2N\nOJ3UgCTDCzA4ZRcDsDM2ooyT6KVxtFFY5HQTKWaF0jzRHvsRJSGQaj/53C7f/XE+\npj9qem+YbxJtviWCHzrKw0gHwC2PXxaawen0OmNE4a4ge/xKi4a6j3dv/BkmLvOO\n+m9fgxAIVOzxlsAD47kQgFAaTtcKIQoptLhSJ0+AcvLA0aJlszas69LmLiWMIpLT\nRJzc1eeASfpnvzJ33qfWCzRHB18pIx8l0DoXBIQznGsDWMYGtw3rzASq2xtogRQj\nsatDpt1vyquLo3oYrRxSumtOg2zpcOCPhUmVsG1H3tXwKgSXi4aYjjAiTisDwv0=\n=MuoR\n-----END PGP SIGNATURE-----\n", "payload": "tree 191b1d49ce574c4e493acd4291e2d752e46332f3\nparent 09b1254eb2647d714fbdddf7e245adefebce95d6\nparent 239ec6cb11bf66d47fbc409ed8fca58370feb517\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1679400023 +0100\ncommitter GitHub <noreply@github.com> 1679400023 +0100\n\nRollup merge of #109240 - compiler-errors:dont-binder-twice, r=oli-obk\n\nWalk un-shifted nested `impl Trait` in trait when setting up default trait method assumptions\n\nFixes a double subtraction in some binder math in return-position `impl Trait` in trait handling code.\n\nFixes #109239\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66ba60a4455126598120af29bcc48cec2306d9b9", "html_url": "https://github.com/rust-lang/rust/commit/66ba60a4455126598120af29bcc48cec2306d9b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66ba60a4455126598120af29bcc48cec2306d9b9/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09b1254eb2647d714fbdddf7e245adefebce95d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/09b1254eb2647d714fbdddf7e245adefebce95d6", "html_url": "https://github.com/rust-lang/rust/commit/09b1254eb2647d714fbdddf7e245adefebce95d6"}, {"sha": "239ec6cb11bf66d47fbc409ed8fca58370feb517", "url": "https://api.github.com/repos/rust-lang/rust/commits/239ec6cb11bf66d47fbc409ed8fca58370feb517", "html_url": "https://github.com/rust-lang/rust/commit/239ec6cb11bf66d47fbc409ed8fca58370feb517"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "6205e2bf24dd11bce80c4617b2c75731e8d442b2", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/66ba60a4455126598120af29bcc48cec2306d9b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ba60a4455126598120af29bcc48cec2306d9b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=66ba60a4455126598120af29bcc48cec2306d9b9", "patch": "@@ -51,9 +51,7 @@ where\n // Region folder\n \n impl<'tcx> TyCtxt<'tcx> {\n-    /// Folds the escaping and free regions in `value` using `f`, and\n-    /// sets `skipped_regions` to true if any late-bound region was found\n-    /// and skipped.\n+    /// Folds the escaping and free regions in `value` using `f`.\n     pub fn fold_regions<T>(\n         self,\n         value: T,\n@@ -64,17 +62,6 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n-\n-    pub fn super_fold_regions<T>(\n-        self,\n-        value: T,\n-        mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n-    ) -> T\n-    where\n-        T: TypeSuperFoldable<TyCtxt<'tcx>>,\n-    {\n-        value.super_fold_with(&mut RegionFolder::new(self, &mut f))\n-    }\n }\n \n /// Folds over the substructure of a type, visiting its component"}, {"sha": "f53952d25fadd62aac5a7a9f0272def027208fe6", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/66ba60a4455126598120af29bcc48cec2306d9b9/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ba60a4455126598120af29bcc48cec2306d9b9/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=66ba60a4455126598120af29bcc48cec2306d9b9", "patch": "@@ -7,7 +7,10 @@ use rustc_middle::ty::{\n     TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::config::TraitSolver;\n-use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n+use rustc_span::{\n+    def_id::{DefId, CRATE_DEF_ID},\n+    DUMMY_SP,\n+};\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>(\n@@ -275,16 +278,22 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n     }\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n-        if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            && self.tcx.is_impl_trait_in_trait(alias_ty.def_id)\n-            && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n-            && self.seen.insert(alias_ty.def_id)\n+        if let ty::Alias(ty::Projection, unshifted_alias_ty) = *ty.kind()\n+            && self.tcx.is_impl_trait_in_trait(unshifted_alias_ty.def_id)\n+            && self.tcx.impl_trait_in_trait_parent_fn(unshifted_alias_ty.def_id) == self.fn_def_id\n+            && self.seen.insert(unshifted_alias_ty.def_id)\n         {\n             // We have entered some binders as we've walked into the\n             // bounds of the RPITIT. Shift these binders back out when\n             // constructing the top-level projection predicate.\n-            let alias_ty = self.tcx.fold_regions(alias_ty, |re, _| {\n+            let shifted_alias_ty = self.tcx.fold_regions(unshifted_alias_ty, |re, depth| {\n                 if let ty::ReLateBound(index, bv) = re.kind() {\n+                    if depth != ty::INNERMOST {\n+                        return self.tcx.mk_re_error_with_message(\n+                            DUMMY_SP,\n+                            \"we shouldn't walk non-predicate binders with `impl Trait`...\",\n+                        );\n+                    }\n                     self.tcx.mk_re_late_bound(index.shifted_out_to_binder(self.depth), bv)\n                 } else {\n                     re\n@@ -295,26 +304,27 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n             // the `type_of` of the trait's associated item. If we're using the old lowering\n             // strategy, then just reinterpret the associated type like an opaque :^)\n             let default_ty = if self.tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n-                self\n-                    .tcx\n-                    .type_of(alias_ty.def_id)\n-                    .subst(self.tcx, alias_ty.substs)\n+                self.tcx.type_of(shifted_alias_ty.def_id).subst(self.tcx, shifted_alias_ty.substs)\n             } else {\n-                self.tcx.mk_alias(ty::Opaque, alias_ty)\n+                self.tcx.mk_alias(ty::Opaque, shifted_alias_ty)\n             };\n \n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n-                    ty::ProjectionPredicate {\n-                        projection_ty: alias_ty,\n-                        term: default_ty.into(),\n-                    },\n+                    ty::ProjectionPredicate { projection_ty: shifted_alias_ty, term: default_ty.into() },\n                     self.bound_vars,\n                 )\n                 .to_predicate(self.tcx),\n             );\n \n-            for bound in self.tcx.item_bounds(alias_ty.def_id).subst_iter(self.tcx, alias_ty.substs)\n+            // We walk the *un-shifted* alias ty, because we're tracking the de bruijn\n+            // binder depth, and if we were to walk `shifted_alias_ty` instead, we'd\n+            // have to reset `self.depth` back to `ty::INNERMOST` or something. It's\n+            // easier to just do this.\n+            for bound in self\n+                .tcx\n+                .item_bounds(unshifted_alias_ty.def_id)\n+                .subst_iter(self.tcx, unshifted_alias_ty.substs)\n             {\n                 bound.visit_with(self);\n             }"}, {"sha": "de82544f29338ce529f16cd6dd5e321c25a9587c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66ba60a4455126598120af29bcc48cec2306d9b9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ba60a4455126598120af29bcc48cec2306d9b9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=66ba60a4455126598120af29bcc48cec2306d9b9", "patch": "@@ -13,4 +13,10 @@ trait Trait {\n     fn method(&self) -> impl Trait<Type = impl Sized + '_>;\n }\n \n+trait Trait2 {\n+    type Type;\n+\n+    fn method(&self) -> impl Trait2<Type = impl Trait2<Type = impl Sized + '_> + '_>;\n+}\n+\n fn main() {}"}]}