{"sha": "1b1f6ea46844280fa65c81cbb4d5bd07baeda270", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMWY2ZWE0Njg0NDI4MGZhNjVjODFjYmI0ZDViZDA3YmFlZGEyNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T16:44:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-10T16:44:04Z"}, "message": "Auto merge of #76570 - cratelyn:implement-rfc-2945-c-unwind-abi, r=Amanieu\n\nImplement RFC 2945: \"C-unwind\" ABI\n\n## Implement RFC 2945: \"C-unwind\" ABI\n\nThis branch implements [RFC 2945]. The tracking issue for this RFC is #74990.\n\nThe feature gate for the issue is `#![feature(c_unwind)]`.\n\nThis RFC was created as part of the ffi-unwind project group tracked at rust-lang/lang-team#19.\n\n### Changes\n\nFurther details will be provided in commit messages, but a high-level overview\nof the changes follows:\n\n* A boolean `unwind` payload is added to the `C`, `System`, `Stdcall`,\nand `Thiscall` variants, marking whether unwinding across FFI boundaries is\nacceptable. The cases where each of these variants' `unwind` member is true\ncorrespond with the `C-unwind`, `system-unwind`, `stdcall-unwind`, and\n`thiscall-unwind` ABI strings introduced in RFC 2945 [3].\n\n* This commit adds a `c_unwind` feature gate for the new ABI strings.\nTests for this feature gate are included in `src/test/ui/c-unwind/`, which\nensure that this feature gate works correctly for each of the new ABIs.\nA new language features entry in the unstable book is added as well.\n\n* We adjust the `rustc_middle::ty::layout::fn_can_unwind` function,\nused to compute whether or not a `FnAbi` object represents a function that\nshould be able to unwind when `panic=unwind` is in use.\n\n* Changes are also made to\n`rustc_mir_build::build::should_abort_on_panic` so that the function ABI is\nused to determind whether it should abort, assuming that the `panic=unwind`\nstrategy is being used, and no explicit unwind attribute was provided.\n\n[RFC 2945]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md", "tree": {"sha": "60b64154f16cefbc2cb1074de9f605fca8c1af84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60b64154f16cefbc2cb1074de9f605fca8c1af84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b1f6ea46844280fa65c81cbb4d5bd07baeda270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b1f6ea46844280fa65c81cbb4d5bd07baeda270", "html_url": "https://github.com/rust-lang/rust/commit/1b1f6ea46844280fa65c81cbb4d5bd07baeda270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b1f6ea46844280fa65c81cbb4d5bd07baeda270/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d674d3dad89a4906e0473ed2717db391625732fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d674d3dad89a4906e0473ed2717db391625732fa", "html_url": "https://github.com/rust-lang/rust/commit/d674d3dad89a4906e0473ed2717db391625732fa"}, {"sha": "95182bb2ccff3ba7cd4fe1e09488ab1fd6411244", "url": "https://api.github.com/repos/rust-lang/rust/commits/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244", "html_url": "https://github.com/rust-lang/rust/commit/95182bb2ccff3ba7cd4fe1e09488ab1fd6411244"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "b158d73f3a1a89cbcc566dbfd2f2d75f7569792b", "filename": "src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b1f6ea46844280fa65c81cbb4d5bd07baeda270/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b1f6ea46844280fa65c81cbb4d5bd07baeda270/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=1b1f6ea46844280fa65c81cbb4d5bd07baeda270", "patch": "@@ -476,8 +476,11 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     // FIXME find a cleaner way to support varargs\n     if fn_sig.c_variadic {\n-        if fn_sig.abi != Abi::C {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi));\n+        if !matches!(fn_sig.abi, Abi::C { .. }) {\n+            fx.tcx.sess.span_fatal(\n+                span,\n+                &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi),\n+            );\n         }\n         let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n         let abi_params = call_args"}]}