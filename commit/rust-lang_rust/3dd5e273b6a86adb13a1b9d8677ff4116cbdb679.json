{"sha": "3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "node_id": "C_kwDOAAsO6NoAKDNkZDVlMjczYjZhODZhZGIxM2ExYjlkODY3N2ZmNDExNmNiZGI2Nzk", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-01-08T14:38:50Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-01-08T14:40:42Z"}, "message": "Shrink diagnostic spans for errors inside macros", "tree": {"sha": "86cc1eb6c7f90d6f718fbe3bc2955276b316f91f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cc1eb6c7f90d6f718fbe3bc2955276b316f91f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "html_url": "https://github.com/rust-lang/rust/commit/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f548d8e9f9034d94e82430867a9f65438bbeda", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f548d8e9f9034d94e82430867a9f65438bbeda", "html_url": "https://github.com/rust-lang/rust/commit/67f548d8e9f9034d94e82430867a9f65438bbeda"}], "stats": {"total": 74, "additions": 59, "deletions": 15}, "files": [{"sha": "5e49d3f6af70acd14c97c3b65b91cc6548aaddc3", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "patch": "@@ -350,6 +350,53 @@ impl MacroCallKind {\n         }\n     }\n \n+    /// Returns the original file range that best describes the location of this macro call.\n+    ///\n+    /// Here we try to roughly match what rustc does to improve diagnostics: fn-like macros\n+    /// get the whole `ast::MacroCall`, attribute macros get the attribute's range, and derives\n+    /// get only the specific derive that is being referred to.\n+    pub fn original_call_range(self, db: &dyn db::AstDatabase) -> FileRange {\n+        let mut kind = self;\n+        loop {\n+            match kind.file_id().0 {\n+                HirFileIdRepr::MacroFile(file) => {\n+                    kind = db.lookup_intern_macro_call(file.macro_call_id).kind;\n+                }\n+                _ => break,\n+            }\n+        }\n+\n+        // `call_id` is now the outermost macro call, so its location is in a real file.\n+        let file_id = match kind.file_id().0 {\n+            HirFileIdRepr::FileId(it) => it,\n+            HirFileIdRepr::MacroFile(_) => unreachable!(\"encountered unexpected macro file\"),\n+        };\n+        let range = match kind {\n+            MacroCallKind::FnLike { ast_id, .. } => ast_id.to_node(db).syntax().text_range(),\n+            MacroCallKind::Derive { ast_id, derive_attr_index, .. } => {\n+                // FIXME: should be the range of the macro name, not the whole derive\n+                ast_id\n+                    .to_node(db)\n+                    .doc_comments_and_attrs()\n+                    .nth(derive_attr_index as usize)\n+                    .expect(\"missing derive\")\n+                    .expect_right(\"derive is a doc comment?\")\n+                    .syntax()\n+                    .text_range()\n+            }\n+            MacroCallKind::Attr { ast_id, invoc_attr_index, .. } => ast_id\n+                .to_node(db)\n+                .doc_comments_and_attrs()\n+                .nth(invoc_attr_index as usize)\n+                .expect(\"missing attribute\")\n+                .expect_right(\"attribute macro is a doc comment?\")\n+                .syntax()\n+                .text_range(),\n+        };\n+\n+        FileRange { range, file_id }\n+    }\n+\n     fn arg(&self, db: &dyn db::AstDatabase) -> Option<SyntaxNode> {\n         match self {\n             MacroCallKind::FnLike { ast_id, .. } => {\n@@ -623,15 +670,13 @@ impl<'a> InFile<&'a SyntaxNode> {\n         }\n \n         // Fall back to whole macro call.\n-        let mut node = self.cloned();\n-        while let Some(call_node) = node.file_id.call_node(db) {\n-            node = call_node;\n+        match self.file_id.0 {\n+            HirFileIdRepr::FileId(file_id) => FileRange { file_id, range: self.value.text_range() },\n+            HirFileIdRepr::MacroFile(mac_file) => {\n+                let loc = db.lookup_intern_macro_call(mac_file.macro_call_id);\n+                loc.kind.original_call_range(db)\n+            }\n         }\n-\n-        let orig_file = node.file_id.original_file(db);\n-        assert_eq!(node.file_id, orig_file.into());\n-\n-        FileRange { file_id: orig_file, range: node.value.text_range() }\n     }\n \n     /// Attempts to map the syntax node back up its macro calls."}, {"sha": "ee1c2d4553a0fa8cc533c9613064dac806c40bd8", "filename": "crates/proc_macro_srv/src/abis/abi_1_56/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_56%2Fmod.rs?ref=3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "patch": "@@ -51,7 +51,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -62,7 +62,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -74,7 +74,7 @@ impl Abi {\n                         rustc_server::Rustc::default(),\n                         parsed_attributes,\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }"}, {"sha": "dd3fd8b642274c936dfb0351d7ee3b96a743607b", "filename": "crates/proc_macro_srv/src/abis/abi_1_58/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fabis%2Fabi_1_58%2Fmod.rs?ref=3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "patch": "@@ -51,7 +51,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -62,7 +62,7 @@ impl Abi {\n                         &proc_macro::bridge::server::SameThread,\n                         rustc_server::Rustc::default(),\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }\n@@ -74,7 +74,7 @@ impl Abi {\n                         rustc_server::Rustc::default(),\n                         parsed_attributes,\n                         parsed_body,\n-                        false,\n+                        true,\n                     );\n                     return res.map(|it| it.into_subtree()).map_err(PanicMessage::from);\n                 }"}, {"sha": "705aa5edac48b9834b22681777d2ca0a48ba1fb9", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dd5e273b6a86adb13a1b9d8677ff4116cbdb679/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=3dd5e273b6a86adb13a1b9d8677ff4116cbdb679", "patch": "@@ -772,7 +772,6 @@ impl ast::HasLoopBody for ast::ForExpr {\n }\n \n impl ast::HasAttrs for ast::AnyHasDocComments {}\n-impl ast::HasDocComments for ast::Item {}\n \n impl From<ast::Adt> for ast::Item {\n     fn from(it: ast::Adt) -> Self {"}]}