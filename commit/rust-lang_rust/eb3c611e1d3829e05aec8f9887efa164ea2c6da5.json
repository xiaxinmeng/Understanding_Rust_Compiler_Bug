{"sha": "eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "node_id": "C_kwDOAAsO6NoAKGViM2M2MTFlMWQzODI5ZTA1YWVjOGY5ODg3ZWZhMTY0ZWEyYzZkYTU", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-09T02:46:51Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-06-09T21:21:06Z"}, "message": "Never regard macro rules with compile_error! invocations as unused\n\nThe very point of compile_error! is to never be reached, and one of\nthe use cases of the macro, currently also listed as examples in the\ndocumentation of compile_error, is to create nicer errors for wrong\nmacro invocations. Thus, we shuuld never warn about unused macro arms\nthat contain invocations of compile_error.", "tree": {"sha": "ad548a5dc33d62ceb1dd89e273148bf49844873c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad548a5dc33d62ceb1dd89e273148bf49844873c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "html_url": "https://github.com/rust-lang/rust/commit/eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401", "html_url": "https://github.com/rust-lang/rust/commit/fee3a459dd6aba8e34a5b99f0fbcb4218a1e2401"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "86ff110eec183f954910fdabc1a0813a5fe44d76", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "patch": "@@ -1,4 +1,5 @@\n #![allow(rustc::potential_query_instability)]\n+#![feature(array_windows)]\n #![feature(associated_type_bounds)]\n #![feature(associated_type_defaults)]\n #![feature(if_let_guard)]"}, {"sha": "2a767646eafe647abc102cdac984684b008de1ff", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "patch": "@@ -380,7 +380,7 @@ pub fn compile_declarative_macro(\n     features: &Features,\n     def: &ast::Item,\n     edition: Edition,\n-) -> (SyntaxExtension, Vec<Span>) {\n+) -> (SyntaxExtension, Vec<(usize, Span)>) {\n     debug!(\"compile_declarative_macro: {:?}\", def);\n     let mk_syn_ext = |expander| {\n         SyntaxExtension::new(\n@@ -542,8 +542,17 @@ pub fn compile_declarative_macro(\n     // Compute the spans of the macro rules\n     // We only take the span of the lhs here,\n     // so that the spans of created warnings are smaller.\n+    // Also, we are only interested in non-foreign macros.\n     let rule_spans = if def.id != DUMMY_NODE_ID {\n-        lhses.iter().map(|lhs| lhs.span()).collect::<Vec<_>>()\n+        lhses\n+            .iter()\n+            .zip(rhses.iter())\n+            .enumerate()\n+            // If the rhs contains an invocation like compile_error!,\n+            // don't consider the rule for the unused rule lint.\n+            .filter(|(_idx, (_lhs, rhs))| !has_compile_error_macro(rhs))\n+            .map(|(idx, (lhs, _rhs))| (idx, lhs.span()))\n+            .collect::<Vec<_>>()\n     } else {\n         Vec::new()\n     };\n@@ -651,6 +660,29 @@ fn check_matcher(sess: &ParseSess, def: &ast::Item, matcher: &[mbe::TokenTree])\n     err == sess.span_diagnostic.err_count()\n }\n \n+fn has_compile_error_macro(rhs: &mbe::TokenTree) -> bool {\n+    match rhs {\n+        mbe::TokenTree::Delimited(_sp, d) => {\n+            let has_compile_error = d.tts.array_windows::<3>().any(|[ident, bang, args]| {\n+                if let mbe::TokenTree::Token(ident) = ident &&\n+                        let TokenKind::Ident(ident, _) = ident.kind &&\n+                        ident == sym::compile_error &&\n+                        let mbe::TokenTree::Token(bang) = bang &&\n+                        let TokenKind::Not = bang.kind &&\n+                        let mbe::TokenTree::Delimited(_, del) = args &&\n+                        del.delim != Delimiter::Invisible\n+                    {\n+                        true\n+                    } else {\n+                        false\n+                    }\n+            });\n+            if has_compile_error { true } else { d.tts.iter().any(has_compile_error_macro) }\n+        }\n+        _ => false,\n+    }\n+}\n+\n // `The FirstSets` for a matcher is a mapping from subsequences in the\n // matcher to the FIRST set for that subsequence.\n //"}, {"sha": "f8fa7a0941d00064c4d03674da1da9b2326c45d0", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "patch": "@@ -1220,12 +1220,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         ident: Ident,\n         def_id: LocalDefId,\n         node_id: NodeId,\n-        rule_spans: &[Span],\n+        rule_spans: &[(usize, Span)],\n     ) {\n         if !ident.as_str().starts_with('_') {\n             self.r.unused_macros.insert(def_id, (node_id, ident));\n-            for (rule_i, rule_span) in rule_spans.iter().enumerate() {\n-                self.r.unused_macro_rules.insert((def_id, rule_i), (ident, *rule_span));\n+            for (rule_i, rule_span) in rule_spans.iter() {\n+                self.r.unused_macro_rules.insert((def_id, *rule_i), (ident, *rule_span));\n             }\n         }\n     }"}, {"sha": "3fb34cdcd9bd96c77913f708b60232e8f67e0809", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "patch": "@@ -870,7 +870,7 @@ impl<'a> Resolver<'a> {\n         &mut self,\n         item: &ast::Item,\n         edition: Edition,\n-    ) -> (SyntaxExtension, Vec<Span>) {\n+    ) -> (SyntaxExtension, Vec<(usize, Span)>) {\n         let (mut result, mut rule_spans) = compile_declarative_macro(\n             &self.session,\n             self.session.features_untracked(),"}, {"sha": "4d51db89bc0b3cb91f818056bc31eba2d76378d3", "filename": "src/test/ui/lint/unused/unused-macro-rules-compile-error.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-compile-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-compile-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-compile-error.rs?ref=eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "patch": "@@ -0,0 +1,27 @@\n+#![deny(unused_macro_rules)]\n+// To make sure we are not hitting this\n+#![deny(unused_macros)]\n+\n+macro_rules! num {\n+    (one) => { 1 };\n+    // Most simple (and common) case\n+    (two) => { compile_error!(\"foo\"); };\n+    // Some nested use\n+    (two_) => { foo(compile_error!(\"foo\")); };\n+    (three) => { 3 };\n+    (four) => { 4 }; //~ ERROR: rule of macro\n+}\n+const _NUM: u8 = num!(one) + num!(three);\n+\n+// compile_error not used as a macro invocation\n+macro_rules! num2 {\n+    (one) => { 1 };\n+    // Only identifier present\n+    (two) => { fn compile_error() {} }; //~ ERROR: rule of macro\n+    // Only identifier and bang present\n+    (two_) => { compile_error! }; //~ ERROR: rule of macro\n+    (three) => { 3 };\n+}\n+const _NUM2: u8 = num2!(one) + num2!(three);\n+\n+fn main() {}"}, {"sha": "76af8c967db1e42085b4b2b63cf2b4e7f7f64ef6", "filename": "src/test/ui/lint/unused/unused-macro-rules-compile-error.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-compile-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb3c611e1d3829e05aec8f9887efa164ea2c6da5/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-compile-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-macro-rules-compile-error.stderr?ref=eb3c611e1d3829e05aec8f9887efa164ea2c6da5", "patch": "@@ -0,0 +1,26 @@\n+error: 5th rule of macro `num` is never used\n+  --> $DIR/unused-macro-rules-compile-error.rs:12:5\n+   |\n+LL |     (four) => { 4 };\n+   |     ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-macro-rules-compile-error.rs:1:9\n+   |\n+LL | #![deny(unused_macro_rules)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: 3rd rule of macro `num2` is never used\n+  --> $DIR/unused-macro-rules-compile-error.rs:22:5\n+   |\n+LL |     (two_) => { compile_error! };\n+   |     ^^^^^^\n+\n+error: 2nd rule of macro `num2` is never used\n+  --> $DIR/unused-macro-rules-compile-error.rs:20:5\n+   |\n+LL |     (two) => { fn compile_error() {} };\n+   |     ^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}