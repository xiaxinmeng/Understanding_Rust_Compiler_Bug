{"sha": "4ef16d7466cca262c682fb3a9441a88a61a089df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZjE2ZDc0NjZjY2EyNjJjNjgyZmIzYTk0NDFhODhhNjFhMDg5ZGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-04T17:15:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-19T19:27:36Z"}, "message": "Fix hotplug backend and add test", "tree": {"sha": "33d45a8b327fc4ff4405c940d6927bcb91380f45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d45a8b327fc4ff4405c940d6927bcb91380f45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ef16d7466cca262c682fb3a9441a88a61a089df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ef16d7466cca262c682fb3a9441a88a61a089df", "html_url": "https://github.com/rust-lang/rust/commit/4ef16d7466cca262c682fb3a9441a88a61a089df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ef16d7466cca262c682fb3a9441a88a61a089df/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace502a10736dba186785ea439c50be75d0cfdfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace502a10736dba186785ea439c50be75d0cfdfb", "html_url": "https://github.com/rust-lang/rust/commit/ace502a10736dba186785ea439c50be75d0cfdfb"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "e9535ba63964884be0b0eeca538c631a84becf3c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4ef16d7466cca262c682fb3a9441a88a61a089df", "patch": "@@ -204,6 +204,14 @@ fn load_backend_from_dylib(sess: &Session, backend_name: &str) -> Box<TransCrate\n         _lib: DynamicLibrary,\n         trans: Box<TransCrate>,\n     }\n+\n+    impl Drop for ExternTransCrate {\n+        fn drop(&mut self) {\n+            // Make sure trans gets dropped before _lib as bad things happen otherwise\n+            self.trans = Box::new(::rustc_trans_utils::trans_crate::DummyTransCrate)\n+        }\n+    }\n+\n     impl TransCrate for ExternTransCrate {\n         fn print(&self, req: PrintRequest, sess: &Session) {\n             self.trans.print(req, sess);"}, {"sha": "1916983a9e79ff4feedd28ada8beb8a9c11927f4", "filename": "src/test/run-make/hotplug_codegen_backend/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile?ref=4ef16d7466cca262c682fb3a9441a88a61a089df", "patch": "@@ -0,0 +1,10 @@\n+include ../tools.mk\n+\n+all:\n+\t/bin/echo || exit 0 # This test requires /bin/echo to exist\n+\t$(RUSTC) the_backend.rs --crate-name the_backend --crate-type dylib \\\n+\t\t-o $(TMPDIR)/the_backend.dylib\n+\tsleep 10\n+\t$(RUSTC) some_crate.rs --crate-name some_crate --crate-type bin -o $(TMPDIR)/some_crate \\\n+\t\t-Z codegen-backend=$(TMPDIR)/the_backend.dylib -Z unstable-options\n+\tgrep -x \"This has been \\\"compiled\\\" succesfully.\" $(TMPDIR)/some_crate"}, {"sha": "7d01978dcee9c3b7d6cadc7ad34678b0c004c61d", "filename": "src/test/run-make/hotplug_codegen_backend/some_crate.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fsome_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fsome_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fsome_crate.rs?ref=4ef16d7466cca262c682fb3a9441a88a61a089df", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    ::std::process::exit(1);\n+}"}, {"sha": "8200658b1f1c878e17b4bc0a55a783a7b4cce02b", "filename": "src/test/run-make/hotplug_codegen_backend/the_backend.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ef16d7466cca262c682fb3a9441a88a61a089df/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=4ef16d7466cca262c682fb3a9441a88a61a089df", "patch": "@@ -0,0 +1,72 @@\n+#![feature(rustc_private)]\n+\n+extern crate syntax;\n+extern crate rustc;\n+extern crate rustc_trans_utils;\n+\n+use std::any::Any;\n+use std::sync::mpsc;\n+use syntax::symbol::Symbol;\n+use rustc::session::{Session, CompileIncomplete};\n+use rustc::session::config::OutputFilenames;\n+use rustc::ty::TyCtxt;\n+use rustc::ty::maps::Providers;\n+use rustc::middle::cstore::MetadataLoader;\n+use rustc::dep_graph::DepGraph;\n+use rustc_trans_utils::trans_crate::{TransCrate, MetadataOnlyTransCrate};\n+\n+struct TheBackend(Box<TransCrate>);\n+\n+impl TransCrate for TheBackend {\n+    fn metadata_loader(&self) -> Box<MetadataLoader> {\n+        self.0.metadata_loader()\n+    }\n+\n+    fn provide(&self, providers: &mut Providers) {\n+        self.0.provide(providers);\n+    }\n+\n+    fn provide_extern(&self, providers: &mut Providers) {\n+        self.0.provide_extern(providers);\n+    }\n+\n+    fn trans_crate<'a, 'tcx>(\n+        &self,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        _rx: mpsc::Receiver<Box<Any + Send>>\n+    ) -> Box<Any> {\n+        use rustc::hir::def_id::LOCAL_CRATE;\n+        \n+        Box::new(tcx.crate_name(LOCAL_CRATE) as Symbol)\n+    }\n+\n+    fn join_trans_and_link(\n+        &self,\n+        trans: Box<Any>,\n+        sess: &Session,\n+        _dep_graph: &DepGraph,\n+        outputs: &OutputFilenames,\n+    ) -> Result<(), CompileIncomplete> {\n+        use std::io::Write;\n+        use rustc::session::config::CrateType;\n+        use rustc_trans_utils::link::out_filename;\n+        let crate_name = trans.downcast::<Symbol>()\n+            .expect(\"in join_trans_and_link: trans is not a Symbol\");\n+        for &crate_type in sess.opts.crate_types.iter() {\n+            if crate_type != CrateType::CrateTypeExecutable {\n+                sess.fatal(&format!(\"Crate type is {:?}\", crate_type));\n+            }\n+            let output_name =\n+                out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n+            let mut out_file = ::std::fs::File::create(output_name).unwrap();\n+            write!(out_file, \"This has been \\\"compiled\\\" succesfully.\").unwrap();\n+        }\n+        Ok(())\n+    }\n+}\n+\n+/// This is the entrypoint for a hot plugged rustc_trans\n+#[no_mangle]\n+pub extern \"C\" fn __rustc_codegen_backend(sess: &Session) -> Box<TransCrate> {\n+    Box::new(TheBackend(MetadataOnlyTransCrate::new(sess)))\n+}"}]}