{"sha": "a4caac5e93b801411fb59eeafa399240a7aa5fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0Y2FhYzVlOTNiODAxNDExZmI1OWVlYWZhMzk5MjQwYTdhYTVmZWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-04-09T18:51:57Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:02Z"}, "message": "Update to most recent version of dlmalloc\n\nInline the definition of `GlobalAlloc` for `dlmalloc` on wasm and don't rely on\nusage of unstable features in `dlmalloc` itself.", "tree": {"sha": "dc1d4a786f4e22d420bb0bea0cd62a9a54074e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc1d4a786f4e22d420bb0bea0cd62a9a54074e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4caac5e93b801411fb59eeafa399240a7aa5fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4caac5e93b801411fb59eeafa399240a7aa5fec", "html_url": "https://github.com/rust-lang/rust/commit/a4caac5e93b801411fb59eeafa399240a7aa5fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4caac5e93b801411fb59eeafa399240a7aa5fec/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e5a0c21fc1416e77ae8e4db74b93e3601241e22", "html_url": "https://github.com/rust-lang/rust/commit/5e5a0c21fc1416e77ae8e4db74b93e3601241e22"}], "stats": {"total": 66, "additions": 20, "deletions": 46}, "files": [{"sha": "e5297d1482e8b57b711e53f72ee33bf0d450f136", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4caac5e93b801411fb59eeafa399240a7aa5fec/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a4caac5e93b801411fb59eeafa399240a7aa5fec/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=a4caac5e93b801411fb59eeafa399240a7aa5fec", "patch": "@@ -540,7 +540,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"dlmalloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"alloc 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n ]"}, {"sha": "c99638dc2ecfc750cc1656f6edb2bd062c1e0981", "filename": "src/dlmalloc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdlmalloc?ref=a4caac5e93b801411fb59eeafa399240a7aa5fec", "patch": "@@ -1 +1 @@\n-Subproject commit 9b2dcac06c3e23235f8997b3c5f2325a6d3382df\n+Subproject commit c99638dc2ecfc750cc1656f6edb2bd062c1e0981"}, {"sha": "6f928287ef24db9b592023d34159263e612d87ec", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 19, "deletions": 43, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a4caac5e93b801411fb59eeafa399240a7aa5fec/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4caac5e93b801411fb59eeafa399240a7aa5fec/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=a4caac5e93b801411fb59eeafa399240a7aa5fec", "patch": "@@ -495,69 +495,45 @@ mod platform {\n mod platform {\n     extern crate dlmalloc;\n \n-    use core::alloc::{Alloc, AllocErr, Layout, Excess, CannotReallocInPlace};\n+    use core::alloc::{Alloc, AllocErr, Layout};\n     use System;\n-    use self::dlmalloc::GlobalDlmalloc;\n+\n+    // No need for synchronization here as wasm is currently single-threaded\n+    static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::DLMALLOC_INIT;\n+\n+    fn to_result(ptr: *mut u8) -> Result<*mut u8, AllocErr> {\n+        if !ptr.is_null() {\n+            Ok(ptr)\n+        } else {\n+            Err(AllocErr::Unsupported { details: \"\" })\n+        }\n+    }\n \n     #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n     unsafe impl<'a> Alloc for &'a System {\n         #[inline]\n         unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n-            GlobalDlmalloc.alloc(layout)\n+            to_result(DLMALLOC.malloc(layout.size(), layout.align()))\n         }\n \n         #[inline]\n-        unsafe fn alloc_zeroed(&mut self, layout: Layout)\n-            -> Result<*mut u8, AllocErr>\n-        {\n-            GlobalDlmalloc.alloc_zeroed(layout)\n+        unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+            to_result(DLMALLOC.calloc(layout.size(), layout.align()))\n         }\n \n         #[inline]\n         unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n-            GlobalDlmalloc.dealloc(ptr, layout)\n+            DLMALLOC.free(ptr, layout.size(), layout.align())\n         }\n \n         #[inline]\n         unsafe fn realloc(&mut self,\n                           ptr: *mut u8,\n                           old_layout: Layout,\n                           new_layout: Layout) -> Result<*mut u8, AllocErr> {\n-            GlobalDlmalloc.realloc(ptr, old_layout, new_layout)\n-        }\n-\n-        #[inline]\n-        fn usable_size(&self, layout: &Layout) -> (usize, usize) {\n-            GlobalDlmalloc.usable_size(layout)\n-        }\n-\n-        #[inline]\n-        unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n-            GlobalDlmalloc.alloc_excess(layout)\n-        }\n-\n-        #[inline]\n-        unsafe fn realloc_excess(&mut self,\n-                                 ptr: *mut u8,\n-                                 layout: Layout,\n-                                 new_layout: Layout) -> Result<Excess, AllocErr> {\n-            GlobalDlmalloc.realloc_excess(ptr, layout, new_layout)\n-        }\n-\n-        #[inline]\n-        unsafe fn grow_in_place(&mut self,\n-                                ptr: *mut u8,\n-                                layout: Layout,\n-                                new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n-            GlobalDlmalloc.grow_in_place(ptr, layout, new_layout)\n-        }\n-\n-        #[inline]\n-        unsafe fn shrink_in_place(&mut self,\n-                                  ptr: *mut u8,\n-                                  layout: Layout,\n-                                  new_layout: Layout) -> Result<(), CannotReallocInPlace> {\n-            GlobalDlmalloc.shrink_in_place(ptr, layout, new_layout)\n+            to_result(DLMALLOC.realloc(\n+                ptr, old_layout.size(), old_layout.align(), new_layout.size(),\n+            ))\n         }\n     }\n }"}, {"sha": "b6f8550829fe0658726fe788f653bbf88dcbd0b8", "filename": "src/rustc/dlmalloc_shim/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a4caac5e93b801411fb59eeafa399240a7aa5fec/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a4caac5e93b801411fb59eeafa399240a7aa5fec/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdlmalloc_shim%2FCargo.toml?ref=a4caac5e93b801411fb59eeafa399240a7aa5fec", "patch": "@@ -12,4 +12,3 @@ doc = false\n [dependencies]\n core = { path = \"../../libcore\" }\n compiler_builtins = { path = \"../../rustc/compiler_builtins_shim\" }\n-alloc = { path = \"../../liballoc\" }"}]}