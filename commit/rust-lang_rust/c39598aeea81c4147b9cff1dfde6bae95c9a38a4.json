{"sha": "c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzOTU5OGFlZWE4MWM0MTQ3YjljZmYxZGZkZTZiYWU5NWM5YTM4YTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-26T10:58:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-26T10:58:13Z"}, "message": "Rollup merge of #76631 - jyn514:x.py-setup, r=Mark-Simulacrum\n\nAdd `x.py setup`\n\nCloses #76503.\n\n- Suggest `x.py setup` if config.toml doesn't exist yet\n- Prompt for a profile if not given on the command line\n- Print the configuration that will be used\n- Print helpful starting commands after setup\n- Link to the dev-guide after finishing", "tree": {"sha": "e2eeb97fbfc501915bdf03fe822a70b8b3f0dbca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2eeb97fbfc501915bdf03fe822a70b8b3f0dbca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbx7GCRBK7hj4Ov3rIwAAdHIIAFA817HZk0UzEq7Z2l8ia0Lr\nucFHWEnFVEydRfJLuNxsngrjoB37DOh5ejBhOIutiiWtcy1RZ36nb57vWFy0kwcc\n3L07hjbXavFOFMRacI5X8V6CnsJtsTa898uwI8HnE5HRUy0BnO1JlhrtpjQjwJ4G\nUDOrmunOIIe41va9oEAtfzRN/VWg5Cv/VHzzV1JAShnXpiYn4ro9fMMSKviEJchR\n0e/lpOTF2Z7pyfdGJqln3z0B8+9sb2A98/OPD1JA34wa/Ak5fT6KLYYZtA8q0HWl\nicsQaVc+FvLn73fF2GLXnZspq884hTTkxdKtQqtE0+gLcwC7y6oDwq5p/gg8S9k=\n=14rj\n-----END PGP SIGNATURE-----\n", "payload": "tree e2eeb97fbfc501915bdf03fe822a70b8b3f0dbca\nparent 1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d\nparent 9baa601afd50f57655be9eb7e5e2892c2ea9f005\nauthor Ralf Jung <post@ralfj.de> 1601117893 +0200\ncommitter GitHub <noreply@github.com> 1601117893 +0200\n\nRollup merge of #76631 - jyn514:x.py-setup, r=Mark-Simulacrum\n\nAdd `x.py setup`\n\nCloses #76503.\n\n- Suggest `x.py setup` if config.toml doesn't exist yet\n- Prompt for a profile if not given on the command line\n- Print the configuration that will be used\n- Print helpful starting commands after setup\n- Link to the dev-guide after finishing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "html_url": "https://github.com/rust-lang/rust/commit/c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d", "html_url": "https://github.com/rust-lang/rust/commit/1e62382a4f4a5db37f3fc034c18e1d89d4e2e00d"}, {"sha": "9baa601afd50f57655be9eb7e5e2892c2ea9f005", "url": "https://api.github.com/repos/rust-lang/rust/commits/9baa601afd50f57655be9eb7e5e2892c2ea9f005", "html_url": "https://github.com/rust-lang/rust/commit/9baa601afd50f57655be9eb7e5e2892c2ea9f005"}], "stats": {"total": 160, "additions": 152, "deletions": 8}, "files": [{"sha": "dfb39c54c17235dc4556fc198606e5dd520182af", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -6,6 +6,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n ## [Non-breaking changes since the last major version]\n \n+- Add `x.py setup` [#76631](https://github.com/rust-lang/rust/pull/76631)\n - Add a changelog for x.py [#76626](https://github.com/rust-lang/rust/pull/76626)\n - Optionally, download LLVM from CI on Linux and NixOS\n   + [#76439](https://github.com/rust-lang/rust/pull/76349)"}, {"sha": "637083e08d510e2f4023fe6b7b5f64b44bb6cc0d", "filename": "src/bootstrap/bin/main.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Fmain.rs?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -7,21 +7,34 @@\n \n use std::env;\n \n-use bootstrap::{Build, Config};\n+use bootstrap::{Build, Config, Subcommand};\n \n fn main() {\n     let args = env::args().skip(1).collect::<Vec<_>>();\n     let config = Config::parse(&args);\n \n     let changelog_suggestion = check_version(&config);\n-    if let Some(suggestion) = &changelog_suggestion {\n+\n+    // NOTE: Since `./configure` generates a `config.toml`, distro maintainers will see the\n+    // changelog warning, not the `x.py setup` message.\n+    let suggest_setup = !config.config.exists() && !matches!(config.cmd, Subcommand::Setup { .. });\n+    if suggest_setup {\n+        println!(\"warning: you have not made a `config.toml`\");\n+        println!(\"help: consider running `x.py setup` or copying `config.toml.example`\");\n+    } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);\n     }\n \n     Build::new(config).build();\n \n-    if let Some(suggestion) = changelog_suggestion {\n+    if suggest_setup {\n+        println!(\"warning: you have not made a `config.toml`\");\n+        println!(\"help: consider running `x.py setup` or copying `config.toml.example`\");\n+    } else if let Some(suggestion) = &changelog_suggestion {\n         println!(\"{}\", suggestion);\n+    }\n+\n+    if suggest_setup || changelog_suggestion.is_some() {\n         println!(\"note: this message was printed twice to make it more likely to be seen\");\n     }\n }"}, {"sha": "4aaaeb8a93bda903e799b25317cc762b0677a001", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -549,7 +549,9 @@ impl<'a> Builder<'a> {\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Run { ref paths } => (Kind::Run, &paths[..]),\n-            Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n+            Subcommand::Format { .. } | Subcommand::Clean { .. } | Subcommand::Setup { .. } => {\n+                panic!()\n+            }\n         };\n \n         Self::new_internal(build, kind, paths.to_owned())"}, {"sha": "b14746dabb93a83eff5cdf9caea130b602668bd9", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -73,6 +73,8 @@ pub struct Config {\n     pub keep_stage: Vec<u32>,\n     pub keep_stage_std: Vec<u32>,\n     pub src: PathBuf,\n+    // defaults to `config.toml`\n+    pub config: PathBuf,\n     pub jobs: Option<u32>,\n     pub cmd: Subcommand,\n     pub incremental: bool,\n@@ -513,6 +515,7 @@ impl Config {\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n         config.deny_warnings = true;\n         config.missing_tools = false;\n+        config.config = PathBuf::from(\"config.toml\");\n \n         // set by bootstrap.py\n         config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n@@ -558,7 +561,7 @@ impl Config {\n         let get_toml = |file: PathBuf| {\n             use std::process;\n \n-            let contents = t!(fs::read_to_string(&file), \"configuration file did not exist\");\n+            let contents = t!(fs::read_to_string(&file), \"`include` config not found\");\n             match toml::from_str(&contents) {\n                 Ok(table) => table,\n                 Err(err) => {\n@@ -644,6 +647,7 @@ impl Config {\n             | Subcommand::Clippy { .. }\n             | Subcommand::Fix { .. }\n             | Subcommand::Run { .. }\n+            | Subcommand::Setup { .. }\n             | Subcommand::Format { .. } => flags.stage.unwrap_or(0),\n         };\n \n@@ -668,6 +672,7 @@ impl Config {\n                 | Subcommand::Clippy { .. }\n                 | Subcommand::Fix { .. }\n                 | Subcommand::Run { .. }\n+                | Subcommand::Setup { .. }\n                 | Subcommand::Format { .. } => {}\n             }\n         }"}, {"sha": "a12fc50afad587cc10be1d2e58c1bf065e8d5c98", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -7,6 +7,7 @@ use std::env;\n use std::path::PathBuf;\n use std::process;\n \n+use build_helper::t;\n use getopts::Options;\n \n use crate::builder::Builder;\n@@ -89,6 +90,9 @@ pub enum Subcommand {\n     Run {\n         paths: Vec<PathBuf>,\n     },\n+    Setup {\n+        path: String,\n+    },\n }\n \n impl Default for Subcommand {\n@@ -199,6 +203,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 || (s == \"install\")\n                 || (s == \"run\")\n                 || (s == \"r\")\n+                || (s == \"setup\")\n         });\n         let subcommand = match subcommand {\n             Some(s) => s,\n@@ -453,10 +458,21 @@ Arguments:\n     At least a tool needs to be called.\",\n                 );\n             }\n+            \"setup\" => {\n+                subcommand_help.push_str(\n+                    \"\\n\n+Arguments:\n+    This subcommand accepts a 'profile' to use for builds. For example:\n+\n+        ./x.py setup library\n+\n+    The profile is optional and you will be prompted interactively if it is not given.\",\n+                );\n+            }\n             _ => {}\n         };\n         // Get any optional paths which occur after the subcommand\n-        let paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n+        let mut paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n \n         let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n         let verbose = matches.opt_present(\"verbose\");\n@@ -508,6 +524,20 @@ Arguments:\n                 }\n                 Subcommand::Run { paths }\n             }\n+            \"setup\" => {\n+                let path = if paths.len() > 1 {\n+                    println!(\"\\nat most one profile can be passed to setup\\n\");\n+                    usage(1, &opts, verbose, &subcommand_help)\n+                } else if let Some(path) = paths.pop() {\n+                    t!(path.into_os_string().into_string().map_err(|path| format!(\n+                        \"{} is not a valid UTF8 string\",\n+                        path.to_string_lossy()\n+                    )))\n+                } else {\n+                    t!(crate::setup::interactive_path())\n+                };\n+                Subcommand::Setup { path }\n+            }\n             _ => {\n                 usage(1, &opts, verbose, &subcommand_help);\n             }"}, {"sha": "4cc72f5f39c979755994039162804cf76071c107", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -141,6 +141,7 @@ mod metadata;\n mod native;\n mod run;\n mod sanity;\n+mod setup;\n mod test;\n mod tool;\n mod toolstate;\n@@ -165,7 +166,7 @@ mod job {\n \n use crate::cache::{Interned, INTERNER};\n pub use crate::config::Config;\n-use crate::flags::Subcommand;\n+pub use crate::flags::Subcommand;\n \n const LLVM_TOOLS: &[&str] = &[\n     \"llvm-nm\", // used to inspect binaries; it shows symbol names, their sizes and visibility\n@@ -470,6 +471,10 @@ impl Build {\n             return clean::clean(self, all);\n         }\n \n+        if let Subcommand::Setup { path: include_name } = &self.config.cmd {\n+            return setup::setup(&self.config.src, include_name);\n+        }\n+\n         {\n             let builder = builder::Builder::new(&self);\n             if let Some(path) = builder.paths.get(0) {"}, {"sha": "ba593cadbad817a490e14675f33864d40fca5aa7", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -10,7 +10,7 @@ impl Step for ExpandYamlAnchors {\n \n     /// Runs the `expand-yaml_anchors` tool.\n     ///\n-    /// This tool in `src/tools` read the CI configuration files written in YAML and expands the\n+    /// This tool in `src/tools` reads the CI configuration files written in YAML and expands the\n     /// anchors in them, since GitHub Actions doesn't support them.\n     fn run(self, builder: &Builder<'_>) {\n         builder.info(\"Expanding YAML anchors in the GitHub Actions configuration\");"}, {"sha": "9d3a889aa008ef5d0e5e93e1b891e9ac457d83b6", "filename": "src/bootstrap/setup.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c39598aeea81c4147b9cff1dfde6bae95c9a38a4/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=c39598aeea81c4147b9cff1dfde6bae95c9a38a4", "patch": "@@ -0,0 +1,88 @@\n+use crate::t;\n+use std::path::{Path, PathBuf};\n+use std::{\n+    env, fs,\n+    io::{self, Write},\n+};\n+\n+pub fn setup(src_path: &Path, include_name: &str) {\n+    let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n+\n+    if cfg_file.as_ref().map_or(false, |f| f.exists()) {\n+        let file = cfg_file.unwrap();\n+        println!(\n+            \"error: you asked `x.py` to setup a new config file, but one already exists at `{}`\",\n+            file.display()\n+        );\n+        println!(\n+            \"help: try adding `profile = \\\"{}\\\"` at the top of {}\",\n+            include_name,\n+            file.display()\n+        );\n+        println!(\n+            \"note: this will use the configuration in {}/src/bootstrap/defaults/config.toml.{}\",\n+            src_path.display(),\n+            include_name\n+        );\n+        std::process::exit(1);\n+    }\n+\n+    let path = cfg_file.unwrap_or_else(|| src_path.join(\"config.toml\"));\n+    let settings = format!(\n+        \"# Includes one of the default files in src/bootstrap/defaults\\n\\\n+    profile = \\\"{}\\\"\\n\",\n+        include_name\n+    );\n+    t!(fs::write(path, settings));\n+\n+    let include_path =\n+        format!(\"{}/src/bootstrap/defaults/config.toml.{}\", src_path.display(), include_name);\n+    println!(\"`x.py` will now use the configuration at {}\", include_path);\n+\n+    let suggestions = match include_name {\n+        \"codegen\" | \"compiler\" => &[\"check\", \"build\", \"test\"][..],\n+        \"library\" => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n+        \"user\" => &[\"dist\", \"build\"],\n+        _ => return,\n+    };\n+\n+    println!(\"To get started, try one of the following commands:\");\n+    for cmd in suggestions {\n+        println!(\"- `x.py {}`\", cmd);\n+    }\n+\n+    if include_name != \"user\" {\n+        println!(\n+            \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n+        );\n+    }\n+}\n+\n+// Used to get the path for `Subcommand::Setup`\n+pub fn interactive_path() -> io::Result<String> {\n+    let mut input = String::new();\n+    println!(\n+        \"Welcome to the Rust project! What do you want to do with x.py?\n+a) Contribute to the standard library\n+b) Contribute to the compiler\n+c) Contribute to the compiler, and also modify LLVM or codegen\n+d) Install Rust from source\"\n+    );\n+    let template = loop {\n+        print!(\"Please choose one (a/b/c/d): \");\n+        io::stdout().flush()?;\n+        io::stdin().read_line(&mut input)?;\n+        break match input.trim().to_lowercase().as_str() {\n+            \"a\" | \"lib\" | \"library\" => \"library\",\n+            \"b\" | \"compiler\" => \"compiler\",\n+            \"c\" | \"llvm\" => \"llvm\",\n+            \"d\" | \"user\" | \"maintainer\" => \"maintainer\",\n+            _ => {\n+                println!(\"error: unrecognized option '{}'\", input.trim());\n+                println!(\"note: press Ctrl+C to exit\");\n+                continue;\n+            }\n+        };\n+    };\n+    Ok(template.to_owned())\n+}"}]}