{"sha": "ea762f2bff365a76b9dc18417e8c6e012815d960", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzYyZjJiZmYzNjVhNzZiOWRjMTg0MTdlOGM2ZTAxMjgxNWQ5NjA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-06-29T08:40:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-29T08:40:06Z"}, "message": "Rollup merge of #42901 - alexcrichton:alloc-one, r=sfackler\n\nstd: Fix implementation of `Alloc::alloc_one`\n\nThis had an accidental `u8 as *mut T` where it was intended to have just a\nnormal pointer-to-pointer cast.\n\nCloses #42827", "tree": {"sha": "f4f6fbc13a87fdf9e61cb742af6d337dd84123af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f6fbc13a87fdf9e61cb742af6d337dd84123af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea762f2bff365a76b9dc18417e8c6e012815d960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea762f2bff365a76b9dc18417e8c6e012815d960", "html_url": "https://github.com/rust-lang/rust/commit/ea762f2bff365a76b9dc18417e8c6e012815d960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea762f2bff365a76b9dc18417e8c6e012815d960/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effd1e040ea34c02892209caf0b46d535d4940e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/effd1e040ea34c02892209caf0b46d535d4940e8", "html_url": "https://github.com/rust-lang/rust/commit/effd1e040ea34c02892209caf0b46d535d4940e8"}, {"sha": "d24d408af387e99e7237f21e9a8d13a35552e01a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d24d408af387e99e7237f21e9a8d13a35552e01a", "html_url": "https://github.com/rust-lang/rust/commit/d24d408af387e99e7237f21e9a8d13a35552e01a"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "bf38629ed38a7a344eb5214842a49c340428fab1", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea762f2bff365a76b9dc18417e8c6e012815d960/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea762f2bff365a76b9dc18417e8c6e012815d960/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=ea762f2bff365a76b9dc18417e8c6e012815d960", "patch": "@@ -873,7 +873,7 @@ pub unsafe trait Alloc {\n     {\n         let k = Layout::new::<T>();\n         if k.size() > 0 {\n-            unsafe { self.alloc(k).map(|p|Unique::new(*p as *mut T)) }\n+            unsafe { self.alloc(k).map(|p| Unique::new(p as *mut T)) }\n         } else {\n             Err(AllocErr::invalid_input(\"zero-sized type invalid for alloc_one\"))\n         }"}, {"sha": "7cc547dcc04e25860c3e495fb88b64a50aa3d469", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ea762f2bff365a76b9dc18417e8c6e012815d960/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea762f2bff365a76b9dc18417e8c6e012815d960/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=ea762f2bff365a76b9dc18417e8c6e012815d960", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(alloc, allocator_api, heap_api, unique)]\n+\n+extern crate alloc;\n+\n+use alloc::heap::HeapAlloc;\n+use alloc::allocator::Alloc;\n+\n+fn main() {\n+    unsafe {\n+        let ptr = HeapAlloc.alloc_one::<i32>().unwrap_or_else(|e| {\n+            HeapAlloc.oom(e)\n+        });\n+        *ptr.as_ptr() = 4;\n+        assert_eq!(*ptr.as_ptr(), 4);\n+        HeapAlloc.dealloc_one(ptr);\n+    }\n+}"}]}