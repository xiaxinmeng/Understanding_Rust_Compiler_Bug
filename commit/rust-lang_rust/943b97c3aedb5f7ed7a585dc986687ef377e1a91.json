{"sha": "943b97c3aedb5f7ed7a585dc986687ef377e1a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0M2I5N2MzYWVkYjVmN2VkN2E1ODVkYzk4NjY4N2VmMzc3ZTFhOTE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-17T04:50:30Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-22T02:17:36Z"}, "message": "Fix errors when `parallel_compiler` is enabled", "tree": {"sha": "176f5c4e5e797442238278dee492fce97955aa8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/176f5c4e5e797442238278dee492fce97955aa8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/943b97c3aedb5f7ed7a585dc986687ef377e1a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/943b97c3aedb5f7ed7a585dc986687ef377e1a91", "html_url": "https://github.com/rust-lang/rust/commit/943b97c3aedb5f7ed7a585dc986687ef377e1a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/943b97c3aedb5f7ed7a585dc986687ef377e1a91/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61ee1089f0286e86efc268e970df62a7bbe6636f", "url": "https://api.github.com/repos/rust-lang/rust/commits/61ee1089f0286e86efc268e970df62a7bbe6636f", "html_url": "https://github.com/rust-lang/rust/commit/61ee1089f0286e86efc268e970df62a7bbe6636f"}], "stats": {"total": 1001, "additions": 83, "deletions": 918}, "files": [{"sha": "c89a9f0da1ce48d1a04bfc326f2588b0fb028343", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 850, "changes": 862, "blob_url": "https://github.com/rust-lang/rust/blob/943b97c3aedb5f7ed7a585dc986687ef377e1a91/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/943b97c3aedb5f7ed7a585dc986687ef377e1a91/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=943b97c3aedb5f7ed7a585dc986687ef377e1a91", "patch": "@@ -20,12 +20,6 @@ dependencies = [\n  \"ansi_term\",\n ]\n \n-[[package]]\n-name = \"annotate-snippets\"\n-version = \"0.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d78ea013094e5ea606b1c05fe35f1dd7ea1eb1ea259908d040b25bd5ec677ee5\"\n-\n [[package]]\n name = \"ansi_term\"\n version = \"0.11.0\"\n@@ -56,12 +50,6 @@ dependencies = [\n  \"nodrop\",\n ]\n \n-[[package]]\n-name = \"arrayvec\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n-\n [[package]]\n name = \"atty\"\n version = \"0.2.13\"\n@@ -78,20 +66,14 @@ version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"1d49d90015b3c36167a20fe2810c5cd875ad504b39cff3d4eae7977e6b7c1cb2\"\n \n-[[package]]\n-name = \"autocfg\"\n-version = \"1.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n-\n [[package]]\n name = \"backtrace\"\n version = \"0.3.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"924c76597f0d9ca25d762c25a4d369d51267536465dc5064bdf0eb073ed477ea\"\n dependencies = [\n  \"backtrace-sys\",\n- \"cfg-if 0.1.10\",\n+ \"cfg-if\",\n  \"libc\",\n  \"rustc-demangle\",\n ]\n@@ -128,19 +110,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"5850aeee1552f495dd0250014cf64b82b7c8879a89d83b33bbdace2cc4f63182\"\n dependencies = [\n  \"arrayref\",\n- \"arrayvec 0.4.12\",\n+ \"arrayvec\",\n  \"constant_time_eq\",\n ]\n \n-[[package]]\n-name = \"block-buffer\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\n-dependencies = [\n- \"generic-array\",\n-]\n-\n [[package]]\n name = \"bstr\"\n version = \"0.2.8\"\n@@ -189,12 +162,6 @@ version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n-[[package]]\n-name = \"cfg-if\"\n-version = \"1.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n-\n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\n@@ -219,27 +186,12 @@ dependencies = [\n  \"bitflags\",\n ]\n \n-[[package]]\n-name = \"cloudabi\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4344512281c643ae7638bbabc3af17a11307803ec8f0fcad9fae512a8bf36467\"\n-dependencies = [\n- \"bitflags\",\n-]\n-\n [[package]]\n name = \"constant_time_eq\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"995a44c877f9212528ccc74b21a232f66ad69001e40ede5bcee2ac9ef2657120\"\n \n-[[package]]\n-name = \"cpuid-bool\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8aebca1129a03dc6dc2b127edd729435bbc4a37e1d5f4d7513165089ceb02634\"\n-\n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.4.0\"\n@@ -249,50 +201,13 @@ dependencies = [\n  \"crossbeam-utils 0.7.0\",\n ]\n \n-[[package]]\n-name = \"crossbeam-deque\"\n-version = \"0.7.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9f02af974daeee82218205558e51ec8768b48cf524bd01d550abe5573a608285\"\n-dependencies = [\n- \"crossbeam-epoch\",\n- \"crossbeam-utils 0.7.0\",\n- \"maybe-uninit\",\n-]\n-\n-[[package]]\n-name = \"crossbeam-epoch\"\n-version = \"0.8.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"058ed274caafc1f60c4997b5fc07bf7dc7cca454af7c6e81edffe5f33f70dace\"\n-dependencies = [\n- \"autocfg 1.0.1\",\n- \"cfg-if 0.1.10\",\n- \"crossbeam-utils 0.7.0\",\n- \"lazy_static\",\n- \"maybe-uninit\",\n- \"memoffset\",\n- \"scopeguard\",\n-]\n-\n-[[package]]\n-name = \"crossbeam-queue\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"774ba60a54c213d409d5353bda12d49cd68d14e45036a285234c8d6f91f92570\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n- \"crossbeam-utils 0.7.0\",\n- \"maybe-uninit\",\n-]\n-\n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n+ \"cfg-if\",\n  \"lazy_static\",\n ]\n \n@@ -302,8 +217,8 @@ version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n dependencies = [\n- \"autocfg 0.1.7\",\n- \"cfg-if 0.1.10\",\n+ \"autocfg\",\n+ \"cfg-if\",\n  \"lazy_static\",\n ]\n \n@@ -324,22 +239,13 @@ version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \n-[[package]]\n-name = \"digest\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\n-dependencies = [\n- \"generic-array\",\n-]\n-\n [[package]]\n name = \"dirs\"\n version = \"2.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n+ \"cfg-if\",\n  \"dirs-sys\",\n ]\n \n@@ -349,7 +255,7 @@ version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n+ \"cfg-if\",\n  \"libc\",\n  \"redox_users\",\n  \"winapi\",\n@@ -361,15 +267,6 @@ version = \"1.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3\"\n \n-[[package]]\n-name = \"ena\"\n-version = \"0.14.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d7402b94a93c24e742487327a7cd839dc9d36fec9de9fb25b09f2dae459f36c3\"\n-dependencies = [\n- \"log\",\n-]\n-\n [[package]]\n name = \"env_logger\"\n version = \"0.6.2\"\n@@ -417,16 +314,6 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n \n-[[package]]\n-name = \"generic-array\"\n-version = \"0.14.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"501466ecc8a30d1d3b7fc9229b122b2ce8ed6e9d9223f1138d4babb253e51817\"\n-dependencies = [\n- \"typenum\",\n- \"version_check\",\n-]\n-\n [[package]]\n name = \"getopts\"\n version = \"0.2.21\"\n@@ -436,17 +323,6 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n-[[package]]\n-name = \"getrandom\"\n-version = \"0.1.12\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"473a1265acc8ff1e808cd0a1af8cee3c2ee5200916058a2ca113c29f2d903571\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n- \"libc\",\n- \"wasi\",\n-]\n-\n [[package]]\n name = \"globset\"\n version = \"0.4.4\"\n@@ -460,15 +336,6 @@ dependencies = [\n  \"regex\",\n ]\n \n-[[package]]\n-name = \"hashbrown\"\n-version = \"0.8.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e91b62f79061a0bc2e046024cb7ba44b08419ed238ecbd9adbd787434b9e8c25\"\n-dependencies = [\n- \"autocfg 1.0.1\",\n-]\n-\n [[package]]\n name = \"heck\"\n version = \"0.3.1\"\n@@ -505,25 +372,6 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n-[[package]]\n-name = \"indexmap\"\n-version = \"1.5.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4e47a3566dd4fd4eec714ae6ceabdee0caec795be835c223d92c2d40f1e8cf1c\"\n-dependencies = [\n- \"autocfg 1.0.1\",\n- \"hashbrown\",\n-]\n-\n-[[package]]\n-name = \"instant\"\n-version = \"0.1.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"63312a18f7ea8760cdd0a7c5aac1a619752a246b833545e3e36d1f81f7cd9e66\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n-]\n-\n [[package]]\n name = \"itertools\"\n version = \"0.8.0\"\n@@ -533,32 +381,12 @@ dependencies = [\n  \"either\",\n ]\n \n-[[package]]\n-name = \"itertools\"\n-version = \"0.9.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b\"\n-dependencies = [\n- \"either\",\n-]\n-\n [[package]]\n name = \"itoa\"\n version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \n-[[package]]\n-name = \"jobserver\"\n-version = \"0.1.17\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f2b1d42ef453b30b7387e113da1c83ab1605d90c5b4e0eb8e96d016ed3b8c160\"\n-dependencies = [\n- \"getrandom\",\n- \"libc\",\n- \"log\",\n-]\n-\n [[package]]\n name = \"lazy_static\"\n version = \"1.4.0\"\n@@ -571,53 +399,13 @@ version = \"0.2.77\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f2f96b10ec2560088a8e76961b00d47107b3a625fecb76dedb29ee7ccbf98235\"\n \n-[[package]]\n-name = \"lock_api\"\n-version = \"0.4.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"28247cc5a5be2f05fbcd76dd0cf2c7d3b5400cb978a28042abcd4fa0b3f8261c\"\n-dependencies = [\n- \"scopeguard\",\n-]\n-\n [[package]]\n name = \"log\"\n version = \"0.4.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n-]\n-\n-[[package]]\n-name = \"maybe-uninit\"\n-version = \"2.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"60302e4db3a61da70c0cb7991976248362f30319e88850c487b9b95bbf059e00\"\n-\n-[[package]]\n-name = \"md-5\"\n-version = \"0.9.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b5a279bb9607f9f53c22d496eade00d138d1bdcccd07d74650387cf94942a15\"\n-dependencies = [\n- \"block-buffer\",\n- \"digest\",\n- \"opaque-debug\",\n-]\n-\n-[[package]]\n-name = \"measureme\"\n-version = \"9.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4a98e07fe802486895addb2b5467f33f205e82c426bfaf350f5d8109b137767c\"\n-dependencies = [\n- \"log\",\n- \"memmap\",\n- \"parking_lot\",\n- \"perf-event-open-sys\",\n- \"rustc-hash\",\n- \"smallvec\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n@@ -626,96 +414,21 @@ version = \"2.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"88579771288728879b57485cc7d6b07d648c9f0141eb955f8ab7f9d45394468e\"\n \n-[[package]]\n-name = \"memmap\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6585fd95e7bb50d6cc31e20d4cf9afb4e2ba16c5846fc76793f11218da9c475b\"\n-dependencies = [\n- \"libc\",\n- \"winapi\",\n-]\n-\n-[[package]]\n-name = \"memoffset\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce6075db033bbbb7ee5a0bbd3a3186bbae616f57fb001c485c7ff77955f8177f\"\n-dependencies = [\n- \"rustc_version\",\n-]\n-\n [[package]]\n name = \"nodrop\"\n version = \"0.1.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb\"\n \n-[[package]]\n-name = \"num_cpus\"\n-version = \"1.10.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bcef43580c035376c0705c42792c294b66974abbfd2789b511784023f71f3273\"\n-dependencies = [\n- \"libc\",\n-]\n-\n-[[package]]\n-name = \"opaque-debug\"\n-version = \"0.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"624a8340c38c1b80fd549087862da4ba43e08858af025b236e509b6649fc13d5\"\n-\n [[package]]\n name = \"packed_simd\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220\"\n dependencies = [\n- \"cfg-if 0.1.10\",\n-]\n-\n-[[package]]\n-name = \"parking_lot\"\n-version = \"0.11.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a4893845fa2ca272e647da5d0e46660a314ead9c2fdd9a883aabc32e481a8733\"\n-dependencies = [\n- \"instant\",\n- \"lock_api\",\n- \"parking_lot_core\",\n+ \"cfg-if\",\n ]\n \n-[[package]]\n-name = \"parking_lot_core\"\n-version = \"0.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c361aa727dd08437f2f1447be8b59a33b0edd15e0fcee698f935613d9efbca9b\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n- \"cloudabi 0.1.0\",\n- \"instant\",\n- \"libc\",\n- \"redox_syscall\",\n- \"smallvec\",\n- \"winapi\",\n-]\n-\n-[[package]]\n-name = \"perf-event-open-sys\"\n-version = \"1.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce9bedf5da2c234fdf2391ede2b90fabf585355f33100689bc364a3ea558561a\"\n-dependencies = [\n- \"libc\",\n-]\n-\n-[[package]]\n-name = \"ppv-lite86\"\n-version = \"0.2.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c36fa947111f5c62a733b652544dd0016a43ce89619538a8ef92724a6f501a20\"\n-\n [[package]]\n name = \"proc-macro-error\"\n version = \"0.4.11\"\n@@ -751,15 +464,6 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n-[[package]]\n-name = \"psm\"\n-version = \"0.1.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"659ecfea2142a458893bb7673134bad50b752fea932349c213d6a23874ce3aa7\"\n-dependencies = [\n- \"cc\",\n-]\n-\n [[package]]\n name = \"quick-error\"\n version = \"1.2.2\"\n@@ -775,29 +479,6 @@ dependencies = [\n  \"proc-macro2\",\n ]\n \n-[[package]]\n-name = \"rand\"\n-version = \"0.7.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\n-dependencies = [\n- \"getrandom\",\n- \"libc\",\n- \"rand_chacha\",\n- \"rand_core 0.5.1\",\n- \"rand_hc\",\n-]\n-\n-[[package]]\n-name = \"rand_chacha\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\n-dependencies = [\n- \"ppv-lite86\",\n- \"rand_core 0.5.1\",\n-]\n-\n [[package]]\n name = \"rand_core\"\n version = \"0.3.1\"\n@@ -813,31 +494,13 @@ version = \"0.4.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc\"\n \n-[[package]]\n-name = \"rand_core\"\n-version = \"0.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n-dependencies = [\n- \"getrandom\",\n-]\n-\n-[[package]]\n-name = \"rand_hc\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\n-dependencies = [\n- \"rand_core 0.5.1\",\n-]\n-\n [[package]]\n name = \"rand_os\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n dependencies = [\n- \"cloudabi 0.0.3\",\n+ \"cloudabi\",\n  \"fuchsia-cprng\",\n  \"libc\",\n  \"rand_core 0.4.2\",\n@@ -890,15 +553,6 @@ version = \"0.6.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"11a7e20d1cce64ef2fed88b66d347f88bd9babb82845b2b858f3edbf59a4f716\"\n \n-[[package]]\n-name = \"remove_dir_all\"\n-version = \"0.5.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\n-dependencies = [\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"rust-argon2\"\n version = \"0.5.1\"\n@@ -910,363 +564,18 @@ dependencies = [\n  \"crossbeam-utils 0.6.6\",\n ]\n \n-[[package]]\n-name = \"rustc-ap-rustc_arena\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"259cca0e975ecb05fd289ace45280c30ff792efc04e856a7f18b7fc86a3cb610\"\n-dependencies = [\n- \"rustc-ap-rustc_data_structures\",\n- \"smallvec\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_ast\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bb9be435d50c88e94bbad6ea468c8680b52c5043bb298ab8058d05251717f8f8\"\n-dependencies = [\n- \"bitflags\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_index\",\n- \"rustc-ap-rustc_lexer\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-ap-rustc_span\",\n- \"smallvec\",\n- \"tracing\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_ast_passes\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"75246dd1a95a57f7767e53bde3971baa2d948078e180564709f5ea46cf863ddd\"\n-dependencies = [\n- \"itertools 0.9.0\",\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_ast_pretty\",\n- \"rustc-ap-rustc_attr\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_errors\",\n- \"rustc-ap-rustc_feature\",\n- \"rustc-ap-rustc_parse\",\n- \"rustc-ap-rustc_session\",\n- \"rustc-ap-rustc_span\",\n- \"tracing\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_ast_pretty\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"79bede0b44bed453fd0034b7ba492840391f6486bf3e17a1af12922f0b98d4cc\"\n-dependencies = [\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_span\",\n- \"tracing\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_attr\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84a92a4a34b996694ca2dab70361c60d2d48c07adce57e8155b7ec75e069e3ea\"\n-dependencies = [\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_ast_pretty\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_errors\",\n- \"rustc-ap-rustc_feature\",\n- \"rustc-ap-rustc_lexer\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-ap-rustc_session\",\n- \"rustc-ap-rustc_span\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_data_structures\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9cbfa7f82517a1b2efe7106c864c3f930b1da8aff07a27fd317af2f36522fd2e\"\n-dependencies = [\n- \"arrayvec 0.5.1\",\n- \"bitflags\",\n- \"cfg-if 0.1.10\",\n- \"crossbeam-utils 0.7.0\",\n- \"ena\",\n- \"indexmap\",\n- \"jobserver\",\n- \"libc\",\n- \"measureme\",\n- \"parking_lot\",\n- \"rustc-ap-rustc_graphviz\",\n- \"rustc-ap-rustc_index\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-hash\",\n- \"rustc-rayon\",\n- \"rustc-rayon-core\",\n- \"smallvec\",\n- \"stable_deref_trait\",\n- \"stacker\",\n- \"tempfile\",\n- \"tracing\",\n- \"winapi\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_errors\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58a272a5101843bcb40900cc9ccf80ecfec62830bb1f4a242986da4a34c0da89\"\n-dependencies = [\n- \"annotate-snippets 0.8.0\",\n- \"atty\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_lint_defs\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-ap-rustc_span\",\n- \"termcolor\",\n- \"termize\",\n- \"tracing\",\n- \"unicode-width\",\n- \"winapi\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_expand\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3bc7988f3facf2402fe057405ef0f7fbacc7e7a483da25e35a35ac09491fbbfb\"\n-dependencies = [\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_ast_passes\",\n- \"rustc-ap-rustc_ast_pretty\",\n- \"rustc-ap-rustc_attr\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_errors\",\n- \"rustc-ap-rustc_feature\",\n- \"rustc-ap-rustc_lexer\",\n- \"rustc-ap-rustc_lint_defs\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_parse\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-ap-rustc_session\",\n- \"rustc-ap-rustc_span\",\n- \"smallvec\",\n- \"tracing\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_feature\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5e931cd1580ae60c5737d3fa57633034935e885414e794d83b3e52a81021985c\"\n-dependencies = [\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_span\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_fs_util\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8fe9422e10d5b441d2a78202667bc85d7cf713a087b9ae6cdea0dfc825d79f07\"\n-\n-[[package]]\n-name = \"rustc-ap-rustc_graphviz\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ffffffdef9fd51db69c1d4c045ced8aaab999be5627f2d3a0ce020d74c1f1e50\"\n-\n-[[package]]\n-name = \"rustc-ap-rustc_index\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7f6f53afc4f7111c82295cb7ea3878f520bbac6a2c5a12e125b4ca9156498cff\"\n-dependencies = [\n- \"arrayvec 0.5.1\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_lexer\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8056b05346dff7e39164d0434c6ec443a14ab5fbf6221bd1a56e5abbeae5f60c\"\n-dependencies = [\n- \"unicode-xid\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_lint_defs\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"364c3fb7b3cbdfe3fbb21d4078ff2cb3c58df63cda27995f8b064d21ee6dede5\"\n-dependencies = [\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-ap-rustc_span\",\n- \"rustc-ap-rustc_target\",\n- \"tracing\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_macros\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4607d6879cae3bae4d0369ca4b3a7510fd6295ac32eec088ac975208ba96ca45\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"synstructure\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_parse\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78d22889bff7ca2346037c9df7ea55c66ffb714f5b50fb62b41975f8ac7a2d70\"\n-dependencies = [\n- \"bitflags\",\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_ast_pretty\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_errors\",\n- \"rustc-ap-rustc_feature\",\n- \"rustc-ap-rustc_lexer\",\n- \"rustc-ap-rustc_session\",\n- \"rustc-ap-rustc_span\",\n- \"smallvec\",\n- \"tracing\",\n- \"unicode-normalization\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_serialize\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d33c710120953c0214f47a6caf42064d7e241003b4af36c98a6d6156e70335f1\"\n-dependencies = [\n- \"indexmap\",\n- \"smallvec\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_session\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d35919041429a90713c8f704fa5209ba159cb554ce74d95722cbc18ac4b4c6f\"\n-dependencies = [\n- \"bitflags\",\n- \"getopts\",\n- \"num_cpus\",\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_errors\",\n- \"rustc-ap-rustc_feature\",\n- \"rustc-ap-rustc_fs_util\",\n- \"rustc-ap-rustc_lint_defs\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-ap-rustc_span\",\n- \"rustc-ap-rustc_target\",\n- \"tracing\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_span\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"73b12170c69603c0bf4b50e5c25fd348aae13b8c6465aa0ef4389c9eaa568e51\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n- \"md-5\",\n- \"rustc-ap-rustc_arena\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_index\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"scoped-tls\",\n- \"sha-1\",\n- \"sha2\",\n- \"tracing\",\n- \"unicode-width\",\n-]\n-\n-[[package]]\n-name = \"rustc-ap-rustc_target\"\n-version = \"712.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0a8329d92e7dc24b974f759e6c6e97e2bbc47b18d0573343028f8135ca367200\"\n-dependencies = [\n- \"bitflags\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_index\",\n- \"rustc-ap-rustc_macros\",\n- \"rustc-ap-rustc_serialize\",\n- \"rustc-ap-rustc_span\",\n- \"tracing\",\n-]\n-\n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4c691c0e608126e00913e33f0ccf3727d5fc84573623b8d65b2df340b5201783\"\n \n-[[package]]\n-name = \"rustc-hash\"\n-version = \"1.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n-\n-[[package]]\n-name = \"rustc-rayon\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed7d6a39f8bfd4421ce720918234d1e672b83824c91345b47c93746839cf1629\"\n-dependencies = [\n- \"crossbeam-deque\",\n- \"either\",\n- \"rustc-rayon-core\",\n-]\n-\n-[[package]]\n-name = \"rustc-rayon-core\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e94187d9ea3e8c38fafdbc38acb94eafa7ce155867f6ccb13830466a0d0db8c6\"\n-dependencies = [\n- \"crossbeam-deque\",\n- \"crossbeam-queue\",\n- \"crossbeam-utils 0.7.0\",\n- \"lazy_static\",\n- \"num_cpus\",\n-]\n-\n [[package]]\n name = \"rustc-workspace-hack\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \n-[[package]]\n-name = \"rustc_version\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n-dependencies = [\n- \"semver\",\n-]\n-\n [[package]]\n name = \"rustfmt-config_proc_macro\"\n version = \"0.2.0\"\n@@ -1280,7 +589,7 @@ dependencies = [\n name = \"rustfmt-nightly\"\n version = \"1.4.37\"\n dependencies = [\n- \"annotate-snippets 0.6.1\",\n+ \"annotate-snippets\",\n  \"anyhow\",\n  \"bytecount\",\n  \"cargo_metadata\",\n@@ -1290,18 +599,10 @@ dependencies = [\n  \"env_logger\",\n  \"getopts\",\n  \"ignore\",\n- \"itertools 0.8.0\",\n+ \"itertools\",\n  \"lazy_static\",\n  \"log\",\n  \"regex\",\n- \"rustc-ap-rustc_ast\",\n- \"rustc-ap-rustc_ast_pretty\",\n- \"rustc-ap-rustc_data_structures\",\n- \"rustc-ap-rustc_errors\",\n- \"rustc-ap-rustc_expand\",\n- \"rustc-ap-rustc_parse\",\n- \"rustc-ap-rustc_session\",\n- \"rustc-ap-rustc_span\",\n  \"rustc-workspace-hack\",\n  \"rustfmt-config_proc_macro\",\n  \"serde\",\n@@ -1330,18 +631,6 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n-[[package]]\n-name = \"scoped-tls\"\n-version = \"1.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2\"\n-\n-[[package]]\n-name = \"scopeguard\"\n-version = \"1.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n-\n [[package]]\n name = \"semver\"\n version = \"0.9.0\"\n@@ -1389,57 +678,6 @@ dependencies = [\n  \"serde\",\n ]\n \n-[[package]]\n-name = \"sha-1\"\n-version = \"0.9.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ce3cdf1b5e620a498ee6f2a171885ac7e22f0e12089ec4b3d22b84921792507c\"\n-dependencies = [\n- \"block-buffer\",\n- \"cfg-if 1.0.0\",\n- \"cpuid-bool\",\n- \"digest\",\n- \"opaque-debug\",\n-]\n-\n-[[package]]\n-name = \"sha2\"\n-version = \"0.9.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6e7aab86fe2149bad8c507606bdb3f4ef5e7b2380eb92350f56122cca72a42a8\"\n-dependencies = [\n- \"block-buffer\",\n- \"cfg-if 1.0.0\",\n- \"cpuid-bool\",\n- \"digest\",\n- \"opaque-debug\",\n-]\n-\n-[[package]]\n-name = \"smallvec\"\n-version = \"1.6.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fe0f37c9e8f3c5a4a66ad655a93c74daac4ad00c441533bf5c6e7990bb42604e\"\n-\n-[[package]]\n-name = \"stable_deref_trait\"\n-version = \"1.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n-\n-[[package]]\n-name = \"stacker\"\n-version = \"0.1.12\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21ccb4c06ec57bc82d0f610f1a2963d7648700e43a6f513e564b9c89f7991786\"\n-dependencies = [\n- \"cc\",\n- \"cfg-if 0.1.10\",\n- \"libc\",\n- \"psm\",\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"strsim\"\n version = \"0.8.0\"\n@@ -1504,20 +742,6 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n-[[package]]\n-name = \"tempfile\"\n-version = \"3.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7a6e24d9338a0a5be79593e2fa15a648add6138caa803e2d5bc782c371732ca9\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n- \"libc\",\n- \"rand\",\n- \"redox_syscall\",\n- \"remove_dir_all\",\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"term\"\n version = \"0.6.1\"\n@@ -1537,16 +761,6 @@ dependencies = [\n  \"wincolor\",\n ]\n \n-[[package]]\n-name = \"termize\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1706be6b564323ce7092f5f7e6b118a14c8ef7ed0e69c8c5329c914a9f101295\"\n-dependencies = [\n- \"libc\",\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"textwrap\"\n version = \"0.11.0\"\n@@ -1603,52 +817,6 @@ dependencies = [\n  \"serde\",\n ]\n \n-[[package]]\n-name = \"tracing\"\n-version = \"0.1.19\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6d79ca061b032d6ce30c660fded31189ca0b9922bf483cd70759f13a2d86786c\"\n-dependencies = [\n- \"cfg-if 0.1.10\",\n- \"tracing-attributes\",\n- \"tracing-core\",\n-]\n-\n-[[package]]\n-name = \"tracing-attributes\"\n-version = \"0.1.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"80e0ccfc3378da0cce270c946b676a376943f5cd16aeba64568e7939806f4ada\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"tracing-core\"\n-version = \"0.1.15\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4f0e00789804e99b20f12bc7003ca416309d28a6f495d6af58d1e2c2842461b5\"\n-dependencies = [\n- \"lazy_static\",\n-]\n-\n-[[package]]\n-name = \"typenum\"\n-version = \"1.12.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33\"\n-\n-[[package]]\n-name = \"unicode-normalization\"\n-version = \"0.1.12\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5479532badd04e128284890390c1e876ef7a993d0570b3597ae43dfa1d59afa4\"\n-dependencies = [\n- \"smallvec\",\n-]\n-\n [[package]]\n name = \"unicode-segmentation\"\n version = \"1.3.0\"\n@@ -1696,12 +864,6 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n-[[package]]\n-name = \"wasi\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b89c3ce4ce14bdc6fb6beaf9ec7928ca331de5df7e5ea278375642a2f478570d\"\n-\n [[package]]\n name = \"winapi\"\n version = \"0.3.8\""}, {"sha": "95e5d0c9153376827c69b9259db2689419bdf5ac", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=943b97c3aedb5f7ed7a585dc986687ef377e1a91", "patch": "@@ -3,17 +3,17 @@\n use itertools::Itertools;\n use std::collections::HashMap;\n use std::path::PathBuf;\n-use std::rc::Rc;\n use std::{cmp, fmt, iter, str};\n \n+use rustc_data_structures::sync::Lrc;\n use rustc_span::{self, SourceFile};\n use serde::{ser, Deserialize, Deserializer, Serialize, Serializer};\n use serde_json as json;\n use thiserror::Error;\n \n /// A range of lines in a file, inclusive of both ends.\n pub struct LineRange {\n-    pub file: Rc<SourceFile>,\n+    pub file: Lrc<SourceFile>,\n     pub lo: usize,\n     pub hi: usize,\n }"}, {"sha": "052b0f9c5d6c91a18b21c50616ce1968b9fdb709", "filename": "src/source_file.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=943b97c3aedb5f7ed7a585dc986687ef377e1a91", "patch": "@@ -13,7 +13,8 @@ use crate::config::Config;\n use crate::create_emitter;\n #[cfg(test)]\n use crate::formatting::FileRecord;\n-use std::rc::Rc;\n+\n+use rustc_data_structures::sync::Lrc;\n \n // Append a newline to the end of each file.\n pub(crate) fn append_newline(s: &mut String) {\n@@ -86,11 +87,11 @@ where\n     // source map instead of hitting the file system. This also supports getting\n     // original text for `FileName::Stdin`.\n     let original_text = if newline_style != NewlineStyle::Auto && *filename != FileName::Stdin {\n-        Rc::new(fs::read_to_string(ensure_real_path(filename))?)\n+        Lrc::new(fs::read_to_string(ensure_real_path(filename))?)\n     } else {\n         match parse_sess.and_then(|sess| sess.get_original_snippet(filename)) {\n             Some(ori) => ori,\n-            None => Rc::new(fs::read_to_string(ensure_real_path(filename))?),\n+            None => Lrc::new(fs::read_to_string(ensure_real_path(filename))?),\n         }\n     };\n "}, {"sha": "b17a655c1cbf7097702cd1597267a9750c140ff2", "filename": "src/syntux/session.rs", "status": "modified", "additions": 62, "deletions": 61, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fsyntux%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fsyntux%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fsession.rs?ref=943b97c3aedb5f7ed7a585dc986687ef377e1a91", "patch": "@@ -1,6 +1,5 @@\n-use std::cell::RefCell;\n use std::path::Path;\n-use std::rc::Rc;\n+use std::sync::atomic::{AtomicBool, Ordering};\n \n use rustc_data_structures::sync::{Lrc, Send};\n use rustc_errors::emitter::{Emitter, EmitterWriter};\n@@ -21,8 +20,8 @@ use crate::{Config, ErrorKind, FileName};\n /// ParseSess holds structs necessary for constructing a parser.\n pub(crate) struct ParseSess {\n     parse_sess: RawParseSess,\n-    ignore_path_set: Rc<IgnorePathSet>,\n-    can_reset_errors: Rc<RefCell<bool>>,\n+    ignore_path_set: Lrc<IgnorePathSet>,\n+    can_reset_errors: Lrc<AtomicBool>,\n }\n \n /// Emitter which discards every error.\n@@ -41,17 +40,17 @@ fn silent_emitter() -> Box<dyn Emitter + Send> {\n \n /// Emit errors against every files expect ones specified in the `ignore_path_set`.\n struct SilentOnIgnoredFilesEmitter {\n-    ignore_path_set: Rc<IgnorePathSet>,\n-    source_map: Rc<SourceMap>,\n+    ignore_path_set: Lrc<IgnorePathSet>,\n+    source_map: Lrc<SourceMap>,\n     emitter: Box<dyn Emitter + Send>,\n     has_non_ignorable_parser_errors: bool,\n-    can_reset: Rc<RefCell<bool>>,\n+    can_reset: Lrc<AtomicBool>,\n }\n \n impl SilentOnIgnoredFilesEmitter {\n     fn handle_non_ignoreable_error(&mut self, db: &Diagnostic) {\n         self.has_non_ignorable_parser_errors = true;\n-        *self.can_reset.borrow_mut() = false;\n+        self.can_reset.store(false, Ordering::Release);\n         self.emitter.emit_diagnostic(db);\n     }\n }\n@@ -73,7 +72,7 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n                     .is_match(&FileName::Real(path.to_path_buf()))\n                 {\n                     if !self.has_non_ignorable_parser_errors {\n-                        *self.can_reset.borrow_mut() = true;\n+                        self.can_reset.store(true, Ordering::Release);\n                     }\n                     return;\n                 }\n@@ -84,9 +83,9 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n }\n \n fn default_handler(\n-    source_map: Rc<SourceMap>,\n-    ignore_path_set: Rc<IgnorePathSet>,\n-    can_reset: Rc<RefCell<bool>>,\n+    source_map: Lrc<SourceMap>,\n+    ignore_path_set: Lrc<IgnorePathSet>,\n+    can_reset: Lrc<AtomicBool>,\n     hide_parse_errors: bool,\n ) -> Handler {\n     let supports_color = term::stderr().map_or(false, |term| term.supports_color());\n@@ -124,16 +123,16 @@ fn default_handler(\n impl ParseSess {\n     pub(crate) fn new(config: &Config) -> Result<ParseSess, ErrorKind> {\n         let ignore_path_set = match IgnorePathSet::from_ignore_list(&config.ignore()) {\n-            Ok(ignore_path_set) => Rc::new(ignore_path_set),\n+            Ok(ignore_path_set) => Lrc::new(ignore_path_set),\n             Err(e) => return Err(ErrorKind::InvalidGlobPattern(e)),\n         };\n-        let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n-        let can_reset_errors = Rc::new(RefCell::new(false));\n+        let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n+        let can_reset_errors = Lrc::new(AtomicBool::new(false));\n \n         let handler = default_handler(\n-            Rc::clone(&source_map),\n-            Rc::clone(&ignore_path_set),\n-            Rc::clone(&can_reset_errors),\n+            Lrc::clone(&source_map),\n+            Lrc::clone(&ignore_path_set),\n+            Lrc::clone(&can_reset_errors),\n             config.hide_parse_errors(),\n         );\n         let parse_sess = RawParseSess::with_span_handler(handler, source_map);\n@@ -204,11 +203,11 @@ impl ParseSess {\n         SnippetProvider::new(\n             source_file.start_pos,\n             source_file.end_pos,\n-            Rc::clone(source_file.src.as_ref().unwrap()),\n+            Lrc::clone(source_file.src.as_ref().unwrap()),\n         )\n     }\n \n-    pub(crate) fn get_original_snippet(&self, file_name: &FileName) -> Option<Rc<String>> {\n+    pub(crate) fn get_original_snippet(&self, file_name: &FileName) -> Option<Lrc<String>> {\n         self.parse_sess\n             .source_map()\n             .get_source_file(&file_name.into())\n@@ -236,7 +235,7 @@ impl ParseSess {\n     }\n \n     pub(super) fn can_reset_errors(&self) -> bool {\n-        *self.can_reset_errors.borrow()\n+        self.can_reset_errors.load(Ordering::Acquire)\n     }\n \n     pub(super) fn has_errors(&self) -> bool {\n@@ -287,17 +286,18 @@ mod tests {\n         use crate::utils::mk_sp;\n         use rustc_span::{FileName as SourceMapFileName, MultiSpan, RealFileName, DUMMY_SP};\n         use std::path::PathBuf;\n+        use std::sync::atomic::AtomicU32;\n \n         struct TestEmitter {\n-            num_emitted_errors: Rc<RefCell<u32>>,\n+            num_emitted_errors: Lrc<AtomicU32>,\n         }\n \n         impl Emitter for TestEmitter {\n             fn source_map(&self) -> Option<&Lrc<SourceMap>> {\n                 None\n             }\n             fn emit_diagnostic(&mut self, _db: &Diagnostic) {\n-                *self.num_emitted_errors.borrow_mut() += 1;\n+                self.num_emitted_errors.fetch_add(1, Ordering::Release);\n             }\n         }\n \n@@ -314,16 +314,17 @@ mod tests {\n         }\n \n         fn build_emitter(\n-            num_emitted_errors: Rc<RefCell<u32>>,\n-            can_reset: Rc<RefCell<bool>>,\n-            source_map: Option<Rc<SourceMap>>,\n+            num_emitted_errors: Lrc<AtomicU32>,\n+            can_reset: Lrc<AtomicBool>,\n+            source_map: Option<Lrc<SourceMap>>,\n             ignore_list: Option<IgnoreList>,\n         ) -> SilentOnIgnoredFilesEmitter {\n             let emitter_writer = TestEmitter { num_emitted_errors };\n             let source_map =\n-                source_map.unwrap_or_else(|| Rc::new(SourceMap::new(FilePathMapping::empty())));\n-            let ignore_path_set =\n-                Rc::new(IgnorePathSet::from_ignore_list(&ignore_list.unwrap_or_default()).unwrap());\n+                source_map.unwrap_or_else(|| Lrc::new(SourceMap::new(FilePathMapping::empty())));\n+            let ignore_path_set = Lrc::new(\n+                IgnorePathSet::from_ignore_list(&ignore_list.unwrap_or_default()).unwrap(),\n+            );\n             SilentOnIgnoredFilesEmitter {\n                 has_non_ignorable_parser_errors: false,\n                 source_map,\n@@ -339,90 +340,90 @@ mod tests {\n \n         #[test]\n         fn handles_fatal_parse_error_in_ignored_file() {\n-            let num_emitted_errors = Rc::new(RefCell::new(0));\n-            let can_reset_errors = Rc::new(RefCell::new(false));\n+            let num_emitted_errors = Lrc::new(AtomicU32::new(0));\n+            let can_reset_errors = Lrc::new(AtomicBool::new(false));\n             let ignore_list = get_ignore_list(r#\"ignore = [\"foo.rs\"]\"#);\n-            let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n+            let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let source =\n                 String::from(r#\"extern \"system\" fn jni_symbol!( funcName ) ( ... ) -> {} \"#);\n             source_map.new_source_file(\n                 SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n                 source,\n             );\n             let mut emitter = build_emitter(\n-                Rc::clone(&num_emitted_errors),\n-                Rc::clone(&can_reset_errors),\n-                Some(Rc::clone(&source_map)),\n+                Lrc::clone(&num_emitted_errors),\n+                Lrc::clone(&can_reset_errors),\n+                Some(Lrc::clone(&source_map)),\n                 Some(ignore_list),\n             );\n             let span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n             let fatal_diagnostic = build_diagnostic(DiagnosticLevel::Fatal, Some(span));\n             emitter.emit_diagnostic(&fatal_diagnostic);\n-            assert_eq!(*num_emitted_errors.borrow(), 1);\n-            assert_eq!(*can_reset_errors.borrow(), false);\n+            assert_eq!(num_emitted_errors.load(Ordering::Acquire), 1);\n+            assert_eq!(can_reset_errors.load(Ordering::Acquire), false);\n         }\n \n         #[test]\n         fn handles_recoverable_parse_error_in_ignored_file() {\n             if !is_nightly_channel!() {\n                 return;\n             }\n-            let num_emitted_errors = Rc::new(RefCell::new(0));\n-            let can_reset_errors = Rc::new(RefCell::new(false));\n+            let num_emitted_errors = Lrc::new(AtomicU32::new(0));\n+            let can_reset_errors = Lrc::new(AtomicBool::new(false));\n             let ignore_list = get_ignore_list(r#\"ignore = [\"foo.rs\"]\"#);\n-            let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n+            let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n             source_map.new_source_file(\n                 SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n                 source,\n             );\n             let mut emitter = build_emitter(\n-                Rc::clone(&num_emitted_errors),\n-                Rc::clone(&can_reset_errors),\n-                Some(Rc::clone(&source_map)),\n+                Lrc::clone(&num_emitted_errors),\n+                Lrc::clone(&can_reset_errors),\n+                Some(Lrc::clone(&source_map)),\n                 Some(ignore_list),\n             );\n             let span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n             let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(span));\n             emitter.emit_diagnostic(&non_fatal_diagnostic);\n-            assert_eq!(*num_emitted_errors.borrow(), 0);\n-            assert_eq!(*can_reset_errors.borrow(), true);\n+            assert_eq!(num_emitted_errors.load(Ordering::Acquire), 0);\n+            assert_eq!(can_reset_errors.load(Ordering::Acquire), true);\n         }\n \n         #[test]\n         fn handles_recoverable_parse_error_in_non_ignored_file() {\n             if !is_nightly_channel!() {\n                 return;\n             }\n-            let num_emitted_errors = Rc::new(RefCell::new(0));\n-            let can_reset_errors = Rc::new(RefCell::new(false));\n-            let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n+            let num_emitted_errors = Lrc::new(AtomicU32::new(0));\n+            let can_reset_errors = Lrc::new(AtomicBool::new(false));\n+            let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let source = String::from(r#\"pub fn bar() { 1x; }\"#);\n             source_map.new_source_file(\n                 SourceMapFileName::Real(RealFileName::Named(PathBuf::from(\"foo.rs\"))),\n                 source,\n             );\n             let mut emitter = build_emitter(\n-                Rc::clone(&num_emitted_errors),\n-                Rc::clone(&can_reset_errors),\n-                Some(Rc::clone(&source_map)),\n+                Lrc::clone(&num_emitted_errors),\n+                Lrc::clone(&can_reset_errors),\n+                Some(Lrc::clone(&source_map)),\n                 None,\n             );\n             let span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n             let non_fatal_diagnostic = build_diagnostic(DiagnosticLevel::Warning, Some(span));\n             emitter.emit_diagnostic(&non_fatal_diagnostic);\n-            assert_eq!(*num_emitted_errors.borrow(), 1);\n-            assert_eq!(*can_reset_errors.borrow(), false);\n+            assert_eq!(num_emitted_errors.load(Ordering::Acquire), 1);\n+            assert_eq!(can_reset_errors.load(Ordering::Acquire), false);\n         }\n \n         #[test]\n         fn handles_mix_of_recoverable_parse_error() {\n             if !is_nightly_channel!() {\n                 return;\n             }\n-            let num_emitted_errors = Rc::new(RefCell::new(0));\n-            let can_reset_errors = Rc::new(RefCell::new(false));\n-            let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n+            let num_emitted_errors = Lrc::new(AtomicU32::new(0));\n+            let can_reset_errors = Lrc::new(AtomicBool::new(false));\n+            let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let ignore_list = get_ignore_list(r#\"ignore = [\"foo.rs\"]\"#);\n             let bar_source = String::from(r#\"pub fn bar() { 1x; }\"#);\n             let foo_source = String::from(r#\"pub fn foo() { 1x; }\"#);\n@@ -441,9 +442,9 @@ mod tests {\n                 fatal_source,\n             );\n             let mut emitter = build_emitter(\n-                Rc::clone(&num_emitted_errors),\n-                Rc::clone(&can_reset_errors),\n-                Some(Rc::clone(&source_map)),\n+                Lrc::clone(&num_emitted_errors),\n+                Lrc::clone(&can_reset_errors),\n+                Some(Lrc::clone(&source_map)),\n                 Some(ignore_list),\n             );\n             let bar_span = MultiSpan::from_span(mk_sp(BytePos(0), BytePos(1)));\n@@ -454,8 +455,8 @@ mod tests {\n             emitter.emit_diagnostic(&bar_diagnostic);\n             emitter.emit_diagnostic(&foo_diagnostic);\n             emitter.emit_diagnostic(&fatal_diagnostic);\n-            assert_eq!(*num_emitted_errors.borrow(), 2);\n-            assert_eq!(*can_reset_errors.borrow(), false);\n+            assert_eq!(num_emitted_errors.load(Ordering::Acquire), 2);\n+            assert_eq!(can_reset_errors.load(Ordering::Acquire), false);\n         }\n     }\n }"}, {"sha": "079568630cf52f42fd107964bbbb3cdf4dd45b0c", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943b97c3aedb5f7ed7a585dc986687ef377e1a91/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=943b97c3aedb5f7ed7a585dc986687ef377e1a91", "patch": "@@ -2,6 +2,7 @@ use std::cell::{Cell, RefCell};\n use std::rc::Rc;\n \n use rustc_ast::{ast, token::DelimToken, visit, AstLike};\n+use rustc_data_structures::sync::Lrc;\n use rustc_span::{symbol, BytePos, Pos, Span, DUMMY_SP};\n \n use crate::attr::*;\n@@ -32,7 +33,7 @@ use crate::{ErrorKind, FormatReport, FormattingError};\n /// Creates a string slice corresponding to the specified span.\n pub(crate) struct SnippetProvider {\n     /// A pointer to the content of the file we are formatting.\n-    big_snippet: Rc<String>,\n+    big_snippet: Lrc<String>,\n     /// A position of the start of `big_snippet`, used as an offset.\n     start_pos: usize,\n     /// A end position of the file that this snippet lives.\n@@ -46,7 +47,7 @@ impl SnippetProvider {\n         Some(&self.big_snippet[start_index..end_index])\n     }\n \n-    pub(crate) fn new(start_pos: BytePos, end_pos: BytePos, big_snippet: Rc<String>) -> Self {\n+    pub(crate) fn new(start_pos: BytePos, end_pos: BytePos, big_snippet: Lrc<String>) -> Self {\n         let start_pos = start_pos.to_usize();\n         let end_pos = end_pos.to_usize();\n         SnippetProvider {"}]}