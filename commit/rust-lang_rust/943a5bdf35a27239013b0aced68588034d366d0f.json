{"sha": "943a5bdf35a27239013b0aced68588034d366d0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0M2E1YmRmMzVhMjcyMzkwMTNiMGFjZWQ2ODU4ODAzNGQzNjZkMGY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-07-26T12:18:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(15): Don't require number of codegen units upfront.", "tree": {"sha": "e10957f608e0222d8800bd109e15d3f32ff2dae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10957f608e0222d8800bd109e15d3f32ff2dae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/943a5bdf35a27239013b0aced68588034d366d0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/943a5bdf35a27239013b0aced68588034d366d0f", "html_url": "https://github.com/rust-lang/rust/commit/943a5bdf35a27239013b0aced68588034d366d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/943a5bdf35a27239013b0aced68588034d366d0f/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1be65845c1a48c724961b136cf98b4d4b5e972d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1be65845c1a48c724961b136cf98b4d4b5e972d", "html_url": "https://github.com/rust-lang/rust/commit/a1be65845c1a48c724961b136cf98b4d4b5e972d"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "118853b871230ea11afed30add5cfa8506f64ae5", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 24, "deletions": 28, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/943a5bdf35a27239013b0aced68588034d366d0f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943a5bdf35a27239013b0aced68588034d366d0f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=943a5bdf35a27239013b0aced68588034d366d0f", "patch": "@@ -33,7 +33,6 @@ use context::{is_pie_binary, get_reloc_model};\n use jobserver::{Client, Acquired};\n use rustc_demangle;\n \n-use std::cmp;\n use std::ffi::CString;\n use std::fmt;\n use std::fs;\n@@ -663,7 +662,6 @@ fn need_crate_bitcode_for_rlib(sess: &Session) -> bool {\n \n pub fn run_passes(sess: &Session,\n                   crate_output: &OutputFilenames,\n-                  total_work_item_count: usize,\n                   crate_name: Symbol,\n                   link: LinkMeta,\n                   metadata: EncodedMetadata,\n@@ -758,23 +756,20 @@ pub fn run_passes(sess: &Session,\n         // Pick a \"reasonable maximum\" if we don't otherwise have a jobserver in\n         // our environment, capping out at 32 so we don't take everything down\n         // by hogging the process run queue.\n-        let num_workers = cmp::min(total_work_item_count - 1, 32);\n-        Client::new(num_workers).expect(\"failed to create jobserver\")\n+        Client::new(32).expect(\"failed to create jobserver\")\n     });\n \n     let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n     let (trans_worker_send, _trans_worker_receive) = channel();\n     let (coordinator_send, coordinator_receive) = channel();\n \n     let coordinator_thread = start_executing_work(sess,\n-                                                  total_work_item_count,\n                                                   shared_emitter,\n                                                   trans_worker_send,\n                                                   coordinator_send.clone(),\n                                                   coordinator_receive,\n                                                   client,\n                                                   exported_symbols.clone());\n-\n     OngoingCrateTranslation {\n         crate_name,\n         link,\n@@ -1072,6 +1067,7 @@ pub enum Message {\n     Done { result: Result<CompiledModule, ()> },\n     WorkItem(WorkItem),\n     CheckErrorMessages,\n+    TranslationDone,\n }\n \n \n@@ -1082,7 +1078,6 @@ pub struct Diagnostic {\n }\n \n fn start_executing_work(sess: &Session,\n-                        total_work_item_count: usize,\n                         shared_emitter: SharedEmitter,\n                         trans_worker_send: Sender<Message>,\n                         coordinator_send: Sender<Message>,\n@@ -1104,9 +1099,6 @@ fn start_executing_work(sess: &Session,\n     let helper = jobserver.into_helper_thread(move |token| {\n         drop(coordinator_send2.send(Message::Token(token)));\n     }).expect(\"failed to spawn helper thread\");\n-    for _ in 0..total_work_item_count - 1 {\n-        helper.request_token();\n-    }\n \n     let mut each_linked_rlib_for_lto = Vec::new();\n     drop(link::each_linked_rlib(sess, &mut |cnum, path| {\n@@ -1193,29 +1185,25 @@ fn start_executing_work(sess: &Session,\n         let mut compiled_metadata_module = None;\n         let mut compiled_allocator_module = None;\n \n-        let mut work_items_left = total_work_item_count;\n-        let mut work_items = Vec::with_capacity(total_work_item_count);\n+        let mut translation_done = false;\n+        let mut work_items = Vec::new();\n         let mut tokens = Vec::new();\n         let mut running = 0;\n-        while work_items_left > 0 || running > 0 {\n+        while !translation_done || work_items.len() > 0 || running > 0 {\n \n             // Spin up what work we can, only doing this while we've got available\n             // parallelism slots and work left to spawn.\n-            while work_items_left > 0 && running < tokens.len() + 1 {\n-                if let Some(item) = work_items.pop() {\n-                    work_items_left -= 1;\n-                    let worker_index = work_items_left;\n-\n-                    let cgcx = CodegenContext {\n-                        worker: worker_index,\n-                        .. cgcx.clone()\n-                    };\n-\n-                    spawn_work(cgcx, item);\n-                    running += 1;\n-                } else {\n-                    break\n-                }\n+            while work_items.len() > 0 && running < tokens.len() + 1 {\n+                let item = work_items.pop().unwrap();\n+                let worker_index = work_items.len();\n+\n+                let cgcx = CodegenContext {\n+                    worker: worker_index,\n+                    .. cgcx.clone()\n+                };\n+\n+                spawn_work(cgcx, item);\n+                running += 1;\n             }\n \n             // Relinquish accidentally acquired extra tokens\n@@ -1238,6 +1226,7 @@ fn start_executing_work(sess: &Session,\n \n                 Message::WorkItem(work_item) => {\n                     work_items.push(work_item);\n+                    helper.request_token();\n                 }\n \n                 // If a thread exits successfully then we drop a token associated\n@@ -1273,6 +1262,9 @@ fn start_executing_work(sess: &Session,\n                     // Exit the coordinator thread\n                     panic!()\n                 }\n+                Message::TranslationDone => {\n+                    translation_done = true;\n+                }\n                 msg @ Message::CheckErrorMessages => {\n                     bug!(\"unexpected message: {:?}\", msg);\n                 }\n@@ -1619,4 +1611,8 @@ impl OngoingCrateTranslation {\n \n         drop(self.coordinator_send.send(Message::WorkItem(work_item)));\n     }\n+\n+    pub fn signal_translation_done(&self) {\n+        drop(self.coordinator_send.send(Message::TranslationDone));\n+    }\n }"}, {"sha": "c22bc617baaa21087fe3b39db287195947e37ef6", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/943a5bdf35a27239013b0aced68588034d366d0f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/943a5bdf35a27239013b0aced68588034d366d0f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=943a5bdf35a27239013b0aced68588034d366d0f", "patch": "@@ -966,7 +966,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let ongoing_translation = write::run_passes(\n             tcx.sess,\n             output_filenames,\n-            1,\n             tcx.crate_name(LOCAL_CRATE),\n             link_meta,\n             metadata,\n@@ -977,6 +976,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             false);\n \n         ongoing_translation.submit_translated_module_to_llvm(tcx.sess, metadata_module);\n+        ongoing_translation.signal_translation_done();\n \n         return ongoing_translation;\n     }\n@@ -1237,14 +1237,9 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                               &metadata.hashes,\n                                               link_meta.crate_hash));\n     // ---\n-\n-    let total_module_count = modules.len() + 1 +\n-        if allocator_module.is_some() { 1 } else { 0 };\n-\n     let ongoing_translation = write::run_passes(\n         sess,\n         outputs,\n-        total_module_count,\n         tcx.crate_name(LOCAL_CRATE),\n         link_meta,\n         metadata,\n@@ -1264,6 +1259,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ongoing_translation.submit_translated_module_to_llvm(sess, allocator_module);\n     }\n \n+    ongoing_translation.signal_translation_done();\n+\n     ongoing_translation\n }\n "}]}