{"sha": "d03683caf66082e0430db5d07e67e82c5b7d676f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMzY4M2NhZjY2MDgyZTA0MzBkYjVkMDdlNjdlODJjNWI3ZDY3NmY=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-01T23:43:48Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-02T00:00:44Z"}, "message": "Allow raw pointers in SIMD types", "tree": {"sha": "bcabff87d88e5501534f167bc1dd5e1220cf4162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcabff87d88e5501534f167bc1dd5e1220cf4162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d03683caf66082e0430db5d07e67e82c5b7d676f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d03683caf66082e0430db5d07e67e82c5b7d676f", "html_url": "https://github.com/rust-lang/rust/commit/d03683caf66082e0430db5d07e67e82c5b7d676f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d03683caf66082e0430db5d07e67e82c5b7d676f/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "625d5a693e4697bcafdd34fd1a38c281acabb8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/625d5a693e4697bcafdd34fd1a38c281acabb8e9", "html_url": "https://github.com/rust-lang/rust/commit/625d5a693e4697bcafdd34fd1a38c281acabb8e9"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "a34963f74d3db53b74c84ba15c7e96057d23884a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d03683caf66082e0430db5d07e67e82c5b7d676f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03683caf66082e0430db5d07e67e82c5b7d676f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d03683caf66082e0430db5d07e67e82c5b7d676f", "patch": "@@ -1890,7 +1890,10 @@ impl<'tcx> TyS<'tcx> {\n \n     #[inline]\n     pub fn is_machine(&self) -> bool {\n-        matches!(self.kind(), Int(..) | Uint(..) | Float(..))\n+        // Yes, RawPtr is a \"machine\" type for these purposes.\n+        // LLVM uses a vector-of-pointers model for scatter/gather ops,\n+        // which typically use a base pointer and vector of signed integers.\n+        matches!(self.kind(), Int(..) | Uint(..) | Float(..) | RawPtr(..))\n     }\n \n     #[inline]"}, {"sha": "6fe415545f809b3615ebfe4f47e38cc604cf623f", "filename": "src/test/ui/simd/issue-85915-simd-ptrs.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d03683caf66082e0430db5d07e67e82c5b7d676f/src%2Ftest%2Fui%2Fsimd%2Fissue-85915-simd-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03683caf66082e0430db5d07e67e82c5b7d676f/src%2Ftest%2Fui%2Fsimd%2Fissue-85915-simd-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-85915-simd-ptrs.rs?ref=d03683caf66082e0430db5d07e67e82c5b7d676f", "patch": "@@ -0,0 +1,67 @@\n+// run-pass\n+// ignore-emscripten\n+\n+// Short form of the generic gather/scatter tests,\n+// verifying simd([*const T; N]) and simd([*mut T; N]) pass typeck and work.\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct cptrx4<T>([*const T; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct mptrx4<T>([*mut T; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct f32x4([f32; 4]);\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct i32x4([i32; 4]);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_gather<T, U, V>(x: T, y: U, z: V) -> T;\n+    fn simd_scatter<T, U, V>(x: T, y: U, z: V) -> ();\n+}\n+\n+fn main() {\n+    let mut x = [0_f32, 1., 2., 3., 4., 5., 6., 7.];\n+\n+    let default = f32x4([-3_f32, -3., -3., -3.]);\n+    let s_strided = f32x4([0_f32, 2., -3., 6.]);\n+    let mask = i32x4([-1_i32, -1, 0, -1]);\n+\n+    // reading from *const\n+    unsafe {\n+        let pointer = &x as *const f32;\n+        let pointers =  cptrx4([\n+            pointer.offset(0) as *const f32,\n+            pointer.offset(2),\n+            pointer.offset(4),\n+            pointer.offset(6)\n+        ]);\n+\n+        let r_strided = simd_gather(default, pointers, mask);\n+\n+        assert_eq!(r_strided, s_strided);\n+    }\n+\n+    // writing to *mut\n+    unsafe {\n+        let pointer = &mut x as *mut f32;\n+        let pointers = mptrx4([\n+            pointer.offset(0) as *mut f32,\n+            pointer.offset(2),\n+            pointer.offset(4),\n+            pointer.offset(6)\n+        ]);\n+\n+        let values = f32x4([42_f32, 43_f32, 44_f32, 45_f32]);\n+        simd_scatter(values, pointers, mask);\n+\n+        assert_eq!(x, [42., 1., 43., 3., 4., 5., 45., 7.]);\n+    }\n+}"}]}