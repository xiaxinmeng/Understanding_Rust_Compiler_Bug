{"sha": "b9c299effd1f48eeb0474375e2a466f53776f294", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzI5OWVmZmQxZjQ4ZWViMDQ3NDM3NWUyYTQ2NmY1Mzc3NmYyOTQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-03T22:44:53Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-09T05:24:38Z"}, "message": "Update rustdoc intra-doc link docs\n\n* Describe generic parameters feature\n* Make general improvements to the docs", "tree": {"sha": "318e5f7356c5553a9609b4fddb6c938ea120505c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/318e5f7356c5553a9609b4fddb6c938ea120505c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c299effd1f48eeb0474375e2a466f53776f294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c299effd1f48eeb0474375e2a466f53776f294", "html_url": "https://github.com/rust-lang/rust/commit/b9c299effd1f48eeb0474375e2a466f53776f294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c299effd1f48eeb0474375e2a466f53776f294/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df21a326e85c6ebfd38d32a68255f7ddd4a0d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df21a326e85c6ebfd38d32a68255f7ddd4a0d11", "html_url": "https://github.com/rust-lang/rust/commit/6df21a326e85c6ebfd38d32a68255f7ddd4a0d11"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "a3fa525be1db0efa94421f9d9926d4eeadbde16a", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=b9c299effd1f48eeb0474375e2a466f53776f294", "patch": "@@ -8,5 +8,5 @@\n - [Linking to items by name](linking-to-items-by-name.md)\n - [Lints](lints.md)\n - [Passes](passes.md)\n-- [Advanced Features](advanced-features.md)\n+- [Advanced features](advanced-features.md)\n - [Unstable features](unstable-features.md)"}, {"sha": "5128ff13b7a799329b59678d3fa4b2cc0cc395b5", "filename": "src/doc/rustdoc/src/advanced-features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md?ref=b9c299effd1f48eeb0474375e2a466f53776f294", "patch": "@@ -1,4 +1,4 @@\n-# Advanced Features\n+# Advanced features\n \n The features listed on this page fall outside the rest of the main categories.\n "}, {"sha": "26bee2974ac74e7225d0dfaa918b915144912e13", "filename": "src/doc/rustdoc/src/linking-to-items-by-name.md", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md?ref=b9c299effd1f48eeb0474375e2a466f53776f294", "patch": "@@ -1,6 +1,7 @@\n # Linking to items by name\n \n-Rustdoc is capable of directly linking to other rustdoc pages in Markdown documentation using the path of item as a link.\n+Rustdoc is capable of directly linking to other rustdoc pages using the path of\n+the item as a link.\n \n For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n \n@@ -19,15 +20,26 @@ pub struct Foo3;\n /// This struct is also not [`Bar`]\n pub struct Foo4;\n \n+/// This struct *is* [`Bar`]!\n pub struct Bar;\n ```\n \n-You can refer to anything in scope, and use paths, including `Self`, `self`, `super`, and `crate`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros respectively. Backticks around the link will be stripped.\n+Backticks around the link will be stripped, so ``[`Option`]`` will correctly\n+link to `Option`.\n+\n+You can refer to anything in scope, and use paths, including `Self`, `self`,\n+`super`, and `crate`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros, respectively.\n+\n+You can also refer to items with generic parameters like `Vec<T>`. The link will\n+resolve as if you had written ``[`Vec<T>`](Vec)``. Fully-qualified syntax (for example,\n+`<Vec as IntoIterator>::into_iter()`) is [not yet supported][fqs-issue], however.\n+\n+[fqs-issue]: https://github.com/rust-lang/rust/issues/74563\n \n ```rust,edition2018\n use std::sync::mpsc::Receiver;\n \n-/// This is an version of [`Receiver`], with support for [`std::future`].\n+/// This is a version of [`Receiver<T>`] with support for [`std::future`].\n ///\n /// You can obtain a [`std::future::Future`] by calling [`Self::recv()`].\n pub struct AsyncReceiver<T> {\n@@ -44,13 +56,15 @@ impl<T> AsyncReceiver<T> {\n You can also link to sections using URL fragment specifiers:\n \n ```rust\n-/// This is a special implementation of [positional parameters]\n+/// This is a special implementation of [positional parameters].\n ///\n /// [positional parameters]: std::fmt#formatting-parameters\n struct MySpecialFormatter;\n ```\n \n-Paths in Rust have three namespaces: type, value, and macro. Items from these namespaces are allowed to overlap. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like  `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `function@`, `mod@`, `fn@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n+Paths in Rust have three namespaces: type, value, and macro. Item names must be\n+unique within their namespace, but can overlap with items outside of their\n+namespace. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `fn@`, `function@`, `mod@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n \n ```rust\n /// See also: [`Foo`](struct@Foo)\n@@ -62,4 +76,17 @@ struct Foo {}\n fn Foo() {}\n ```\n \n-Note: Because of how `macro_rules` macros are scoped in Rust, the intra-doc links of a `macro_rules` macro will be resolved relative to the crate root, as opposed to the module it is defined in.\n+You can also disambiguate for functions by adding `()` after the function name,\n+or for macros by adding `!` after the macro name:\n+\n+```rust\n+/// See also: [`Foo`](struct@Foo)\n+struct Bar;\n+\n+/// This is different from [`Foo()`]\n+struct Foo {}\n+\n+fn Foo() {}\n+```\n+\n+Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a `macro_rules!` macro will be resolved relative to the crate root, as opposed to the module it is defined in."}, {"sha": "cb9099cd50bee2d0a290cf84907033cdd1c1de4f", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/b9c299effd1f48eeb0474375e2a466f53776f294/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=b9c299effd1f48eeb0474375e2a466f53776f294", "patch": "@@ -4,18 +4,18 @@\n can use them like any other lints by doing this:\n \n ```rust,ignore\n-#![allow(missing_docs)] // allowing the lint, no message\n-#![warn(missing_docs)] // warn if there is missing docs\n-#![deny(missing_docs)] // rustdoc will fail if there is missing docs\n+#![allow(missing_docs)] // allows the lint, no diagnostics will be reported\n+#![warn(missing_docs)] // warn if there are missing docs\n+#![deny(missing_docs)] // error if there are missing docs\n ```\n \n Here is the list of the lints provided by `rustdoc`:\n \n ## broken_intra_doc_links\n \n-This lint **warns by default**. This lint detects when an [intra-doc link] fails to get resolved. For example:\n+This lint **warns by default**. This lint detects when an [intra-doc link] fails to be resolved. For example:\n \n- [intra-doc link]: linking-to-items-by-name.html\n+[intra-doc link]: linking-to-items-by-name.md\n \n ```rust\n /// I want to link to [`Nonexistent`] but it doesn't exist!"}]}