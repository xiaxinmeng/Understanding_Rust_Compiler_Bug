{"sha": "af3d0d1848116f0e29dcaf8859d27fd4555f3444", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmM2QwZDE4NDgxMTZmMGUyOWRjYWY4ODU5ZDI3ZmQ0NTU1ZjM0NDQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T00:21:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-25T00:22:07Z"}, "message": "rustc: Open \"use\"d crates; add a _vec.vec_from_buf() method along the way; XFAIL use-import-export.rs in rustc", "tree": {"sha": "18984d72de2f122692b820259e06504621c42842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18984d72de2f122692b820259e06504621c42842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3d0d1848116f0e29dcaf8859d27fd4555f3444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3d0d1848116f0e29dcaf8859d27fd4555f3444", "html_url": "https://github.com/rust-lang/rust/commit/af3d0d1848116f0e29dcaf8859d27fd4555f3444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3d0d1848116f0e29dcaf8859d27fd4555f3444/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d853dd19a67c77ee6e03653a02289b6319abc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/29d853dd19a67c77ee6e03653a02289b6319abc3", "html_url": "https://github.com/rust-lang/rust/commit/29d853dd19a67c77ee6e03653a02289b6319abc3"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "8e4f2ca45ff8dd9a67ec21c00bdefdbdf2dc21a0", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3d0d1848116f0e29dcaf8859d27fd4555f3444/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/af3d0d1848116f0e29dcaf8859d27fd4555f3444/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=af3d0d1848116f0e29dcaf8859d27fd4555f3444", "patch": "@@ -696,6 +696,7 @@ TEST_XFAILS_STAGE0 := $(FLOAT_XFAILS) \\\n                         threads.rs \\\n                         type-sizes.rs \\\n                         typestate-cfg-nesting.rs \\\n+                        use-import-export.rs \\\n                         user.rs \\\n                         utf8.rs \\\n                         vec-alloc-append.rs \\"}, {"sha": "349f887a2f93c5df07ba3575b872fe04b591e272", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=af3d0d1848116f0e29dcaf8859d27fd4555f3444", "patch": "@@ -374,8 +374,7 @@ tag native_item_ {\n                    fn_decl, vec[ty_param], def_id, ann);\n }\n \n-// TODO: Actually store something here.\n-type external_crate_info = ();\n+type external_crate_info = rec(vec[u8] data);\n \n fn index_view_item(mod_index index, @view_item it) {\n     alt (it.node) {"}, {"sha": "e052e94a838ae1730b8a2a09f627c35badd49556", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=af3d0d1848116f0e29dcaf8859d27fd4555f3444", "patch": "@@ -2,11 +2,14 @@\n \n import driver.session;\n import front.ast;\n+import lib.llvm.False;\n+import lib.llvm.llvm;\n import lib.llvm.llvmext;\n import lib.llvm.mk_object_file;\n import lib.llvm.mk_section_iter;\n import middle.fold;\n import middle.ty;\n+import back.x86;\n import util.common;\n import util.common.span;\n \n@@ -19,6 +22,7 @@ import std.map.hashmap;\n \n // TODO: map to a real type here.\n type env = @rec(\n+    session.session sess,\n     @hashmap[str, @ast.external_crate_info] crate_cache,\n     vec[str] library_search_paths\n );\n@@ -204,23 +208,47 @@ impure fn parse_ty_fn(@pstate st, str_def sd) -> tup(vec[ty.arg], @ty.t) {\n }\n \n \n+// Rust metadata parsing\n \n-// TODO: return something\n-fn load_crate(ast.ident ident, vec[str] library_search_paths) -> @() {\n+// TODO\n+\n+\n+fn load_crate(session.session sess,\n+              ast.ident ident,\n+              vec[str] library_search_paths) -> @ast.external_crate_info {\n+    auto filename = parser.default_native_name(sess, ident);\n     for (str library_search_path in library_search_paths) {\n-        auto path = fs.connect(library_search_path, ident);\n-        // TODO\n+        auto path = fs.connect(library_search_path, filename);\n+        auto pbuf = _str.buf(path);\n+        auto mb = llvmext.LLVMRustCreateMemoryBufferWithContentsOfFile(pbuf);\n+        if (mb as int != 0) {\n+            auto of = mk_object_file(mb);\n+            auto si = mk_section_iter(of.llof);\n+            while (llvmext.LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) ==\n+                    False) {\n+                auto name_buf = llvmext.LLVMGetSectionName(si.llsi);\n+                auto name = _str.str_from_cstr(name_buf);\n+                if (_str.eq(name, x86.get_meta_sect_name())) {\n+                    auto cbuf = llvmext.LLVMGetSectionContents(si.llsi);\n+                    auto csz = llvmext.LLVMGetSectionSize(si.llsi);\n+                    auto cvbuf = cbuf as _vec.vbuf;\n+                    ret @rec(data=_vec.vec_from_vbuf[u8](cvbuf, csz));\n+                }\n+            }\n+        }\n     }\n \n-    ret @();\n+    log #fmt(\"can't open crate '%s' (looked for '%s' in lib search paths)\",\n+        ident, filename);\n+    fail;\n }\n \n fn fold_view_item_use(&env e, &span sp, ast.ident ident,\n         vec[@ast.meta_item] meta_items, ast.def_id id, ast.ann orig_ann)\n         -> @ast.view_item {\n     auto external_crate;\n     if (!e.crate_cache.contains_key(ident)) {\n-        external_crate = load_crate(ident, e.library_search_paths);\n+        external_crate = load_crate(e.sess, ident, e.library_search_paths);\n         e.crate_cache.insert(ident, external_crate);\n     } else {\n         external_crate = e.crate_cache.get(ident);\n@@ -236,6 +264,7 @@ fn read_crates(session.session sess,\n                @ast.crate crate,\n                vec[str] library_search_paths) -> @ast.crate {\n     auto e = @rec(\n+        sess=sess,\n         crate_cache=@common.new_str_hash[@ast.external_crate_info](),\n         library_search_paths=library_search_paths\n     );"}, {"sha": "db1f1b24b656e901ac3ea129642fa3ce91823964", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=af3d0d1848116f0e29dcaf8859d27fd4555f3444", "patch": "@@ -42,6 +42,7 @@ mod util {\n }\n \n auth driver.rustc.main = impure;\n+auth front.creader.load_crate = unsafe;\n auth middle.metadata = unsafe;\n auth middle.trans = unsafe;\n auth middle.trans.copy_args_to_allocas = impure;"}, {"sha": "c3fc7035a84ecf0570be9fa8cec5e33bd700069a", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=af3d0d1848116f0e29dcaf8859d27fd4555f3444", "patch": "@@ -1,7 +1,7 @@\n import option.none;\n import option.some;\n \n-import vbuf = rustrt.vbuf;\n+type vbuf = rustrt.vbuf;\n \n type operator2[T,U,V] = fn(&T, &U) -> V;\n \n@@ -28,6 +28,8 @@ native \"rust\" mod rustrt {\n     fn refcount[T](vec[T] v) -> uint;\n \n     fn vec_print_debug_info[T](vec[T] v);\n+\n+    fn vec_from_vbuf[T](vbuf v, uint n_elts) -> vec[T];\n }\n \n fn alloc[T](uint n_elts) -> vec[T] {\n@@ -48,6 +50,10 @@ fn refcount[T](vec[mutable? T] v) -> uint {\n     }\n }\n \n+unsafe fn vec_from_vbuf[T](vbuf v, uint n_elts) -> vec[T] {\n+    ret rustrt.vec_from_vbuf[T](v, n_elts);\n+}\n+\n type init_op[T] = fn(uint i) -> T;\n \n fn init_fn[T](&init_op[T] op, uint n_elts) -> vec[T] {"}, {"sha": "983337745b97d708ceeb2bb8fa740e71bb0abf21", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=af3d0d1848116f0e29dcaf8859d27fd4555f3444", "patch": "@@ -170,6 +170,13 @@ vec_alloc_with_data(rust_task *task,\n     return new (mem) rust_vec(dom, alloc, fill * elt_size, (uint8_t*)d);\n }\n \n+extern \"C\" CDECL rust_vec*\n+vec_from_vbuf(rust_task *task, type_desc *ty, void *vbuf, size_t n_elts)\n+{\n+    return vec_alloc_with_data(task, n_elts, n_elts * ty->size, ty->size,\n+                               vbuf);\n+}\n+\n extern \"C\" CDECL rust_str*\n str_alloc(rust_task *task, size_t n_bytes)\n {"}, {"sha": "d917aa937a1ca76908f45b9c95d00cdb58d73041", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/af3d0d1848116f0e29dcaf8859d27fd4555f3444/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=af3d0d1848116f0e29dcaf8859d27fd4555f3444", "patch": "@@ -62,6 +62,7 @@ upcall_yield\n vec_alloc\n vec_alloc_mut\n vec_buf\n+vec_from_vbuf\n vec_len\n vec_len_set\n vec_print_debug_info"}]}