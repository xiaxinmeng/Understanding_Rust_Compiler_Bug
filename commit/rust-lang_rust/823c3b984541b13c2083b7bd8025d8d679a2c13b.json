{"sha": "823c3b984541b13c2083b7bd8025d8d679a2c13b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyM2MzYjk4NDU0MWIxM2MyMDgzYjdiZDgwMjVkOGQ2NzlhMmMxM2I=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-31T15:01:56Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2019-08-31T15:19:01Z"}, "message": "Improve documentation around allocation accessors", "tree": {"sha": "4566a1c500a0ae7f5add36c66b22f186bd78e8f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4566a1c500a0ae7f5add36c66b22f186bd78e8f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/823c3b984541b13c2083b7bd8025d8d679a2c13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/823c3b984541b13c2083b7bd8025d8d679a2c13b", "html_url": "https://github.com/rust-lang/rust/commit/823c3b984541b13c2083b7bd8025d8d679a2c13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/823c3b984541b13c2083b7bd8025d8d679a2c13b/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7388cb4cf81523fb2709518ec8b6a16c329b72e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7388cb4cf81523fb2709518ec8b6a16c329b72e5", "html_url": "https://github.com/rust-lang/rust/commit/7388cb4cf81523fb2709518ec8b6a16c329b72e5"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "8e824aeb7916a2bc2996993d73687c8b40e3eb06", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/823c3b984541b13c2083b7bd8025d8d679a2c13b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/823c3b984541b13c2083b7bd8025d8d679a2c13b/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=823c3b984541b13c2083b7bd8025d8d679a2c13b", "patch": "@@ -581,8 +581,10 @@ impl<'tcx, Tag, Extra> Allocation<Tag, Extra> {\n /// Run-length encoding of the undef mask.\n /// Used to copy parts of a mask multiple times to another allocation.\n pub struct AllocationDefinedness {\n+    /// The lengths of ranges that are run-length encoded.\n     ranges: smallvec::SmallVec::<[u64; 1]>,\n-    first: bool,\n+    /// The definedness of the first range.\n+    initial: bool,\n }\n \n /// Transferring the definedness mask to other allocations.\n@@ -606,9 +608,9 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n         // where each element toggles the state\n \n         let mut ranges = smallvec::SmallVec::<[u64; 1]>::new();\n-        let first = self.undef_mask.get(src.offset);\n+        let initial = self.undef_mask.get(src.offset);\n         let mut cur_len = 1;\n-        let mut cur = first;\n+        let mut cur = initial;\n \n         for i in 1..size.bytes() {\n             // FIXME: optimize to bitshift the current undef block's bits and read the top bit\n@@ -623,7 +625,7 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n \n         ranges.push(cur_len);\n \n-        AllocationDefinedness { ranges, first, }\n+        AllocationDefinedness { ranges, initial, }\n     }\n \n     /// Apply multiple instances of the run-length encoding to the undef_mask.\n@@ -640,15 +642,15 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n             self.undef_mask.set_range_inbounds(\n                 dest.offset,\n                 dest.offset + size * repeat,\n-                defined.first,\n+                defined.initial,\n             );\n             return;\n         }\n \n         for mut j in 0..repeat {\n             j *= size.bytes();\n             j += dest.offset.bytes();\n-            let mut cur = defined.first;\n+            let mut cur = defined.initial;\n             for range in &defined.ranges {\n                 let old_j = j;\n                 j += range;\n@@ -725,16 +727,19 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n                         // shift offsets from source allocation to destination allocation\n                         offset + dest_offset - src.offset,\n                         reloc,\n-                        )\n+                    )\n                 })\n-                );\n+            );\n         }\n \n         AllocationRelocations {\n             relative_relocations: new_relocations,\n         }\n     }\n \n+    /// Apply a relocation copy.\n+    /// The affected range, as defined in the parameters to `prepare_relocation_copy` is expected\n+    /// to be clear of relocations.\n     pub fn mark_relocation_range(\n         &mut self,\n         relocations: AllocationRelocations<Tag>,"}]}