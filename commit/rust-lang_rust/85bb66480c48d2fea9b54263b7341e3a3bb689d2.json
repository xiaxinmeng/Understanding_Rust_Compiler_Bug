{"sha": "85bb66480c48d2fea9b54263b7341e3a3bb689d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YmI2NjQ4MGM0OGQyZmVhOWI1NDI2M2I3MzQxZTNhM2JiNjg5ZDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-11-28T15:09:02Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-11-28T15:09:02Z"}, "message": "cmt_ -> Place", "tree": {"sha": "385e4498ab903fcc247c2be86926a8623717fe61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/385e4498ab903fcc247c2be86926a8623717fe61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85bb66480c48d2fea9b54263b7341e3a3bb689d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85bb66480c48d2fea9b54263b7341e3a3bb689d2", "html_url": "https://github.com/rust-lang/rust/commit/85bb66480c48d2fea9b54263b7341e3a3bb689d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85bb66480c48d2fea9b54263b7341e3a3bb689d2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a6714155c46c75df55cd5116de343811763727", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a6714155c46c75df55cd5116de343811763727", "html_url": "https://github.com/rust-lang/rust/commit/b5a6714155c46c75df55cd5116de343811763727"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "91433a8aab70e5c7b164c93a4955edc18743d3e4", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=85bb66480c48d2fea9b54263b7341e3a3bb689d2", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::intravisit as visit;\n use rustc::hir::{self, *};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::middle::expr_use_visitor::*;\n-use rustc::middle::mem_categorization::{cmt_, Categorization};\n+use rustc::middle::mem_categorization::{Place, Categorization};\n use rustc::ty::layout::LayoutOf;\n use rustc::ty::{self, Ty};\n use rustc::util::nodemap::HirIdSet;\n@@ -105,7 +105,7 @@ fn is_argument(map: &hir::map::Map<'_>, id: HirId) -> bool {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, cmt: &cmt_<'tcx>, mode: ConsumeMode) {\n+    fn consume(&mut self, cmt: &Place<'tcx>, mode: ConsumeMode) {\n         if let Categorization::Local(lid) = cmt.cat {\n             if let ConsumeMode::Move = mode {\n                 // moved out or in. clearly can't be localized\n@@ -125,13 +125,13 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn borrow(&mut self, cmt: &cmt_<'tcx>, _: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &Place<'tcx>, _: ty::BorrowKind) {\n         if let Categorization::Local(lid) = cmt.cat {\n             self.set.remove(&lid);\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &cmt_<'tcx>) {\n+    fn mutate(&mut self, cmt: &Place<'tcx>) {\n         let map = &self.cx.tcx.hir();\n         if is_argument(map, cmt.hir_id) {\n             // Skip closure arguments"}, {"sha": "14ba7fcdef13fb7ea6a27469bd5b9c45d6aea45f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=85bb66480c48d2fea9b54263b7341e3a3bb689d2", "patch": "@@ -13,7 +13,7 @@ use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n use crate::utils::{is_type_diagnostic_item, qpath_res, sext, sugg};\n use rustc::middle::expr_use_visitor::*;\n-use rustc::middle::mem_categorization::cmt_;\n+use rustc::middle::mem_categorization::Place;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty};\n@@ -1586,9 +1586,9 @@ struct MutatePairDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutatePairDelegate {\n-    fn consume(&mut self, _: &cmt_<'tcx>, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &Place<'tcx>, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, cmt: &cmt_<'tcx>, bk: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &Place<'tcx>, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             if let Categorization::Local(id) = cmt.cat {\n                 if Some(id) == self.hir_id_low {\n@@ -1601,7 +1601,7 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate {\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &cmt_<'tcx>) {\n+    fn mutate(&mut self, cmt: &Place<'tcx>) {\n         if let Categorization::Local(id) = cmt.cat {\n             if Some(id) == self.hir_id_low {\n                 self.span_low = Some(cmt.span)"}, {"sha": "bb5fc655755828d79c4af57edee2c1327271ee31", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=85bb66480c48d2fea9b54263b7341e3a3bb689d2", "patch": "@@ -326,7 +326,7 @@ struct MovedVariablesCtxt {\n }\n \n impl MovedVariablesCtxt {\n-    fn move_common(&mut self, cmt: &mc::cmt_<'_>) {\n+    fn move_common(&mut self, cmt: &mc::Place<'_>) {\n         let cmt = unwrap_downcast_or_interior(cmt);\n \n         if let mc::Categorization::Local(vid) = cmt.cat {\n@@ -336,18 +336,18 @@ impl MovedVariablesCtxt {\n }\n \n impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n-    fn consume(&mut self, cmt: &mc::cmt_<'tcx>, mode: euv::ConsumeMode) {\n+    fn consume(&mut self, cmt: &mc::Place<'tcx>, mode: euv::ConsumeMode) {\n         if let euv::ConsumeMode::Move = mode {\n             self.move_common(cmt);\n         }\n     }\n \n-    fn borrow(&mut self, _: &mc::cmt_<'tcx>, _: ty::BorrowKind) {}\n+    fn borrow(&mut self, _: &mc::Place<'tcx>, _: ty::BorrowKind) {}\n \n-    fn mutate(&mut self, _: &mc::cmt_<'tcx>) {}\n+    fn mutate(&mut self, _: &mc::Place<'tcx>) {}\n }\n \n-fn unwrap_downcast_or_interior<'a, 'tcx>(mut cmt: &'a mc::cmt_<'tcx>) -> mc::cmt_<'tcx> {\n+fn unwrap_downcast_or_interior<'a, 'tcx>(mut cmt: &'a mc::Place<'tcx>) -> mc::Place<'tcx> {\n     loop {\n         match cmt.cat {\n             mc::Categorization::Downcast(ref c, _) | mc::Categorization::Interior(ref c, _) => {"}, {"sha": "48901fc8257af83a98366edc99b50d9519de4633", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bb66480c48d2fea9b54263b7341e3a3bb689d2/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=85bb66480c48d2fea9b54263b7341e3a3bb689d2", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::def::Res;\n use rustc::hir::*;\n use rustc::lint::LateContext;\n use rustc::middle::expr_use_visitor::*;\n-use rustc::middle::mem_categorization::cmt_;\n+use rustc::middle::mem_categorization::Place;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n@@ -64,15 +64,15 @@ impl<'tcx> MutVarsDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: &cmt_<'tcx>, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &Place<'tcx>, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, cmt: &cmt_<'tcx>, bk: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &Place<'tcx>, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             self.update(&cmt.cat)\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &cmt_<'tcx>) {\n+    fn mutate(&mut self, cmt: &Place<'tcx>) {\n         self.update(&cmt.cat)\n     }\n }"}]}