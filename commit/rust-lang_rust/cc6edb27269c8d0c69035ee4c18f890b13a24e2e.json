{"sha": "cc6edb27269c8d0c69035ee4c18f890b13a24e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNmVkYjI3MjY5YzhkMGM2OTAzNWVlNGMxOGY4OTBiMTNhMjRlMmU=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-11-27T16:52:44Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-06T13:59:07Z"}, "message": "Simplify calling find_implied_output_region.\n\n@nnethercote added the optimization that find_implied_output_region\ntakes a closure as an optimization in #37014, but passing an iterator is\nsimpler, and more ergonomic for callers.", "tree": {"sha": "75c1e7126d598d5fe3e65548af71fca61ab62fe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75c1e7126d598d5fe3e65548af71fca61ab62fe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc6edb27269c8d0c69035ee4c18f890b13a24e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc6edb27269c8d0c69035ee4c18f890b13a24e2e", "html_url": "https://github.com/rust-lang/rust/commit/cc6edb27269c8d0c69035ee4c18f890b13a24e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc6edb27269c8d0c69035ee4c18f890b13a24e2e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09991241fd75ec69281d06c8f907d2e9f61ac5e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/09991241fd75ec69281d06c8f907d2e9f61ac5e2", "html_url": "https://github.com/rust-lang/rust/commit/09991241fd75ec69281d06c8f907d2e9f61ac5e2"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "33af948263e05597791b21eeb011c6e21ad9bcf9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc6edb27269c8d0c69035ee4c18f890b13a24e2e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc6edb27269c8d0c69035ee4c18f890b13a24e2e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cc6edb27269c8d0c69035ee4c18f890b13a24e2e", "patch": "@@ -538,14 +538,15 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     /// Returns the appropriate lifetime to use for any output lifetimes\n     /// (if one exists) and a vector of the (pattern, number of lifetimes)\n     /// corresponding to each input type/pattern.\n-    fn find_implied_output_region<F>(&self,\n+    fn find_implied_output_region<I>(&self,\n                                      input_tys: &[Ty<'tcx>],\n-                                     input_pats: F) -> ElidedLifetime\n-        where F: FnOnce() -> Vec<String>\n+                                     input_pats: I) -> ElidedLifetime\n+        where I: Iterator<Item=String>\n     {\n         let tcx = self.tcx();\n-        let mut lifetimes_for_params = Vec::new();\n+        let mut lifetimes_for_params = Vec::with_capacity(input_tys.len());\n         let mut possible_implied_output_region = None;\n+        let mut lifetimes = 0;\n \n         for input_type in input_tys.iter() {\n             let mut regions = FxHashSet();\n@@ -554,7 +555,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             debug!(\"find_implied_output_regions: collected {:?} from {:?} \\\n                     have_bound_regions={:?}\", &regions, input_type, have_bound_regions);\n \n-            if regions.len() == 1 {\n+            lifetimes += regions.len();\n+\n+            if lifetimes == 1 && regions.len() == 1 {\n                 // there's a chance that the unique lifetime of this\n                 // iteration will be the appropriate lifetime for output\n                 // parameters, so lets store it.\n@@ -571,12 +574,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             });\n         }\n \n-        if lifetimes_for_params.iter().map(|e| e.lifetime_count).sum::<usize>() == 1 {\n+        if lifetimes == 1 {\n             Ok(*possible_implied_output_region.unwrap())\n         } else {\n             // Fill in the expensive `name` fields now that we know they're\n             // needed.\n-            for (info, input_pat) in lifetimes_for_params.iter_mut().zip(input_pats()) {\n+            for (info, input_pat) in lifetimes_for_params.iter_mut().zip(input_pats) {\n                 info.name = input_pat;\n             }\n             Err(Some(lifetimes_for_params))\n@@ -615,8 +618,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let inputs = self.tcx().mk_type_list(data.inputs.iter().map(|a_t| {\n             self.ast_ty_arg_to_ty(&binding_rscope, None, region_substs, a_t)\n         }));\n-        let inputs_len = inputs.len();\n-        let input_params = || vec![String::new(); inputs_len];\n+        let input_params = iter::repeat(String::new()).take(inputs.len());\n         let implied_output_region = self.find_implied_output_region(&inputs, input_params);\n \n         let (output, output_span) = match data.output {\n@@ -1776,14 +1778,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let implied_output_region = match explicit_self {\n             Some(ExplicitSelf::ByReference(region, _)) => Ok(*region),\n             _ => {\n-                // `pat_to_string` is expensive and\n-                // `find_implied_output_region` only needs its result when\n-                // there's an error. So we wrap it in a closure to avoid\n-                // calling it until necessary.\n-                let arg_pats = || {\n-                    arg_params.iter().map(|a| pprust::pat_to_string(&a.pat)).collect()\n-                };\n-                self.find_implied_output_region(&arg_tys, arg_pats)\n+                self.find_implied_output_region(&arg_tys,\n+                                                arg_params.iter()\n+                                                    .map(|a| pprust::pat_to_string(&a.pat)))\n+\n             }\n         };\n "}]}