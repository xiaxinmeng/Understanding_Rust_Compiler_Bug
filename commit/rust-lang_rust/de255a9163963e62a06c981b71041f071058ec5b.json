{"sha": "de255a9163963e62a06c981b71041f071058ec5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMjU1YTkxNjM5NjNlNjJhMDZjOTgxYjcxMDQxZjA3MTA1OGVjNWI=", "commit": {"author": {"name": "Alex Aktsipetrov", "email": "alex.akts@gmail.com", "date": "2019-12-06T09:48:53Z"}, "committer": {"name": "Alex Aktsipetrov", "email": "alex.akts@gmail.com", "date": "2019-12-06T09:48:53Z"}, "message": "Make try_mark_previous_green aware of cycles.", "tree": {"sha": "613679cfaa7d0453ef65d06a5d9326afa238477c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/613679cfaa7d0453ef65d06a5d9326afa238477c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de255a9163963e62a06c981b71041f071058ec5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de255a9163963e62a06c981b71041f071058ec5b", "html_url": "https://github.com/rust-lang/rust/commit/de255a9163963e62a06c981b71041f071058ec5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de255a9163963e62a06c981b71041f071058ec5b/comments", "author": {"login": "gizmondo", "id": 3333919, "node_id": "MDQ6VXNlcjMzMzM5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3333919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gizmondo", "html_url": "https://github.com/gizmondo", "followers_url": "https://api.github.com/users/gizmondo/followers", "following_url": "https://api.github.com/users/gizmondo/following{/other_user}", "gists_url": "https://api.github.com/users/gizmondo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gizmondo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gizmondo/subscriptions", "organizations_url": "https://api.github.com/users/gizmondo/orgs", "repos_url": "https://api.github.com/users/gizmondo/repos", "events_url": "https://api.github.com/users/gizmondo/events{/privacy}", "received_events_url": "https://api.github.com/users/gizmondo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gizmondo", "id": 3333919, "node_id": "MDQ6VXNlcjMzMzM5MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3333919?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gizmondo", "html_url": "https://github.com/gizmondo", "followers_url": "https://api.github.com/users/gizmondo/followers", "following_url": "https://api.github.com/users/gizmondo/following{/other_user}", "gists_url": "https://api.github.com/users/gizmondo/gists{/gist_id}", "starred_url": "https://api.github.com/users/gizmondo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gizmondo/subscriptions", "organizations_url": "https://api.github.com/users/gizmondo/orgs", "repos_url": "https://api.github.com/users/gizmondo/repos", "events_url": "https://api.github.com/users/gizmondo/events{/privacy}", "received_events_url": "https://api.github.com/users/gizmondo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e87a205c2e117d9fb57f6cdeac0a7f6e95c88316", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87a205c2e117d9fb57f6cdeac0a7f6e95c88316", "html_url": "https://github.com/rust-lang/rust/commit/e87a205c2e117d9fb57f6cdeac0a7f6e95c88316"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "d952bf7ab9e2541ee18f8d4c62e4c8a3ea14a494", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/de255a9163963e62a06c981b71041f071058ec5b/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de255a9163963e62a06c981b71041f071058ec5b/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=de255a9163963e62a06c981b71041f071058ec5b", "patch": "@@ -710,14 +710,25 @@ impl DepGraph {\n                                 return None\n                             }\n                             None => {\n-                                if !tcx.sess.has_errors() {\n+                                if !tcx.sess.has_errors_or_delayed_span_bugs() {\n                                     bug!(\"try_mark_previous_green() - Forcing the DepNode \\\n                                           should have set its color\")\n                                 } else {\n-                                    // If the query we just forced has resulted\n-                                    // in some kind of compilation error, we\n-                                    // don't expect that the corresponding\n-                                    // dep-node color has been updated.\n+                                    // If the query we just forced has resulted in\n+                                    // some kind of compilation error, we cannot rely on\n+                                    // the dep-node color having been properly updated.\n+                                    // This means that the query system has reached an\n+                                    // invalid state. We let the compiler continue (by\n+                                    // returning `None`) so it can emit error messages\n+                                    // and wind down, but rely on the fact that this\n+                                    // invalid state will not be persisted to the\n+                                    // incremental compilation cache because of\n+                                    // compilation errors being present.\n+                                    debug!(\"try_mark_previous_green({:?}) - END - \\\n+                                            dependency {:?} resulted in compilation error\",\n+                                           dep_node,\n+                                           dep_dep_node);\n+                                    return None\n                                 }\n                             }\n                         }"}, {"sha": "448ce367b8c6b5b3216635c4f1f9a42ed807477f", "filename": "src/test/incremental/issue-61323.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/de255a9163963e62a06c981b71041f071058ec5b/src%2Ftest%2Fincremental%2Fissue-61323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de255a9163963e62a06c981b71041f071058ec5b/src%2Ftest%2Fincremental%2Fissue-61323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-61323.rs?ref=de255a9163963e62a06c981b71041f071058ec5b", "patch": "@@ -0,0 +1,15 @@\n+// revisions: rpass cfail\n+\n+enum A {\n+    //[cfail]~^ ERROR 3:1: 3:7: recursive type `A` has infinite size [E0072]\n+    B(C),\n+}\n+\n+#[cfg(rpass)]\n+struct C(Box<A>);\n+\n+#[cfg(cfail)]\n+struct C(A);\n+//[cfail]~^ ERROR 12:1: 12:13: recursive type `C` has infinite size [E0072]\n+\n+fn main() {}"}]}