{"sha": "86b7861612ba074120dfb6bd32c80c569688748d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2Yjc4NjE2MTJiYTA3NDEyMGRmYjZiZDMyYzgwYzU2OTY4ODc0OGQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-08T18:43:07Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-08T18:43:07Z"}, "message": "Use named fields in `MacroCallKind`", "tree": {"sha": "3403086d9e04417e92b0c3ad2af09151e698a3c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3403086d9e04417e92b0c3ad2af09151e698a3c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b7861612ba074120dfb6bd32c80c569688748d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b7861612ba074120dfb6bd32c80c569688748d", "html_url": "https://github.com/rust-lang/rust/commit/86b7861612ba074120dfb6bd32c80c569688748d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b7861612ba074120dfb6bd32c80c569688748d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f279d57f0cba600eae8c550654a00b4268812ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f279d57f0cba600eae8c550654a00b4268812ac", "html_url": "https://github.com/rust-lang/rust/commit/5f279d57f0cba600eae8c550654a00b4268812ac"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "b7288492581fea522a8904a481816a4f958a56cd", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=86b7861612ba074120dfb6bd32c80c569688748d", "patch": "@@ -690,7 +690,9 @@ fn macro_call_as_call_id(\n         )\n         .map(MacroCallId::from)\n     } else {\n-        Ok(def.as_lazy_macro(db.upcast(), krate, MacroCallKind::FnLike(call.ast_id)).into())\n+        Ok(def\n+            .as_lazy_macro(db.upcast(), krate, MacroCallKind::FnLike { ast_id: call.ast_id })\n+            .into())\n     };\n     Ok(res)\n }\n@@ -707,7 +709,10 @@ fn derive_macro_as_call_id(\n         .as_lazy_macro(\n             db.upcast(),\n             krate,\n-            MacroCallKind::Derive(item_attr.ast_id, last_segment.to_string()),\n+            MacroCallKind::Derive {\n+                ast_id: item_attr.ast_id,\n+                derive_name: last_segment.to_string(),\n+            },\n         )\n         .into();\n     Ok(res)"}, {"sha": "d966fc2396acd233dfb631f73c53d8347b92e47b", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=86b7861612ba074120dfb6bd32c80c569688748d", "patch": "@@ -613,12 +613,12 @@ mod diagnostics {\n                 DiagnosticKind::UnresolvedProcMacro { ast } => {\n                     let mut precise_location = None;\n                     let (file, ast, name) = match ast {\n-                        MacroCallKind::FnLike(ast) => {\n-                            let node = ast.to_node(db.upcast());\n-                            (ast.file_id, SyntaxNodePtr::from(AstPtr::new(&node)), None)\n+                        MacroCallKind::FnLike { ast_id } => {\n+                            let node = ast_id.to_node(db.upcast());\n+                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)), None)\n                         }\n-                        MacroCallKind::Derive(ast, name) => {\n-                            let node = ast.to_node(db.upcast());\n+                        MacroCallKind::Derive { ast_id, derive_name } => {\n+                            let node = ast_id.to_node(db.upcast());\n \n                             // Compute the precise location of the macro name's token in the derive\n                             // list.\n@@ -639,7 +639,7 @@ mod diagnostics {\n                                     });\n                                 for token in tokens {\n                                     if token.kind() == SyntaxKind::IDENT\n-                                        && token.text() == name.as_str()\n+                                        && token.text() == derive_name.as_str()\n                                     {\n                                         precise_location = Some(token.text_range());\n                                         break 'outer;\n@@ -648,9 +648,9 @@ mod diagnostics {\n                             }\n \n                             (\n-                                ast.file_id,\n+                                ast_id.file_id,\n                                 SyntaxNodePtr::from(AstPtr::new(&node)),\n-                                Some(name.clone()),\n+                                Some(derive_name.clone()),\n                             )\n                         }\n                     };\n@@ -669,13 +669,13 @@ mod diagnostics {\n \n                 DiagnosticKind::MacroError { ast, message } => {\n                     let (file, ast) = match ast {\n-                        MacroCallKind::FnLike(ast) => {\n-                            let node = ast.to_node(db.upcast());\n-                            (ast.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                        MacroCallKind::FnLike { ast_id, .. } => {\n+                            let node = ast_id.to_node(db.upcast());\n+                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n-                        MacroCallKind::Derive(ast, _) => {\n-                            let node = ast.to_node(db.upcast());\n-                            (ast.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n+                        MacroCallKind::Derive { ast_id, .. } => {\n+                            let node = ast_id.to_node(db.upcast());\n+                            (ast_id.file_id, SyntaxNodePtr::from(AstPtr::new(&node)))\n                         }\n                     };\n                     sink.push(MacroError { file, node: ast, message: message.clone() });"}, {"sha": "f431da3f2cc5a86a100fa49b9e7f94a60d725dd8", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=86b7861612ba074120dfb6bd32c80c569688748d", "patch": "@@ -1520,7 +1520,7 @@ impl ModCollector<'_, '_> {\n                 // Built-in macro failed eager expansion.\n                 self.def_collector.def_map.diagnostics.push(DefDiagnostic::macro_error(\n                     self.module_id,\n-                    MacroCallKind::FnLike(ast_id.ast_id),\n+                    MacroCallKind::FnLike { ast_id: ast_id.ast_id },\n                     error.unwrap().to_string(),\n                 ));\n                 return;"}, {"sha": "392079ed4f04d1914a78ebaca9ab6bd7cbe75419", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=86b7861612ba074120dfb6bd32c80c569688748d", "patch": "@@ -308,7 +308,7 @@ $0\n \n         let expander = BuiltinDeriveExpander::find_by_name(&name).unwrap();\n \n-        let attr_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n+        let ast_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n \n         let loc = MacroCallLoc {\n             def: MacroDefId {\n@@ -317,7 +317,7 @@ $0\n                 local_inner: false,\n             },\n             krate: CrateId(0),\n-            kind: MacroCallKind::Derive(attr_id, name.to_string()),\n+            kind: MacroCallKind::Derive { ast_id, derive_name: name.to_string() },\n         };\n \n         let id: MacroCallId = db.intern_macro(loc).into();"}, {"sha": "80365fc167145897c922353a43da40f08e9e2850", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=86b7861612ba074120dfb6bd32c80c569688748d", "patch": "@@ -566,10 +566,9 @@ mod tests {\n                 let loc = MacroCallLoc {\n                     def,\n                     krate,\n-                    kind: MacroCallKind::FnLike(AstId::new(\n-                        file_id.into(),\n-                        ast_id_map.ast_id(&macro_call),\n-                    )),\n+                    kind: MacroCallKind::FnLike {\n+                        ast_id: AstId::new(file_id.into(), ast_id_map.ast_id(&macro_call)),\n+                    },\n                 };\n \n                 let id: MacroCallId = db.intern_macro(loc).into();"}, {"sha": "ef126e4adbda78d26ef6f99de8acd5f32451aeeb", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=86b7861612ba074120dfb6bd32c80c569688748d", "patch": "@@ -174,8 +174,9 @@ fn lazy_expand(\n ) -> ExpandResult<Option<InFile<SyntaxNode>>> {\n     let ast_id = db.ast_id_map(macro_call.file_id).ast_id(&macro_call.value);\n \n-    let id: MacroCallId =\n-        def.as_lazy_macro(db, krate, MacroCallKind::FnLike(macro_call.with_value(ast_id))).into();\n+    let id: MacroCallId = def\n+        .as_lazy_macro(db, krate, MacroCallKind::FnLike { ast_id: macro_call.with_value(ast_id) })\n+        .into();\n \n     let err = db.macro_expand_error(id);\n     let value = db.parse_or_expand(id.as_file()).map(|node| InFile::new(id.as_file(), node));"}, {"sha": "a179102f04a69d88b68e279e356403ec74d38194", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b7861612ba074120dfb6bd32c80c569688748d/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=86b7861612ba074120dfb6bd32c80c569688748d", "patch": "@@ -290,33 +290,35 @@ pub struct MacroCallLoc {\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum MacroCallKind {\n-    FnLike(AstId<ast::MacroCall>),\n-    Derive(AstId<ast::Item>, String),\n+    FnLike { ast_id: AstId<ast::MacroCall> },\n+    Derive { ast_id: AstId<ast::Item>, derive_name: String },\n }\n \n impl MacroCallKind {\n     fn file_id(&self) -> HirFileId {\n         match self {\n-            MacroCallKind::FnLike(ast_id) => ast_id.file_id,\n-            MacroCallKind::Derive(ast_id, _) => ast_id.file_id,\n+            MacroCallKind::FnLike { ast_id, .. } => ast_id.file_id,\n+            MacroCallKind::Derive { ast_id, .. } => ast_id.file_id,\n         }\n     }\n \n     fn node(&self, db: &dyn db::AstDatabase) -> InFile<SyntaxNode> {\n         match self {\n-            MacroCallKind::FnLike(ast_id) => ast_id.with_value(ast_id.to_node(db).syntax().clone()),\n-            MacroCallKind::Derive(ast_id, _) => {\n+            MacroCallKind::FnLike { ast_id, .. } => {\n+                ast_id.with_value(ast_id.to_node(db).syntax().clone())\n+            }\n+            MacroCallKind::Derive { ast_id, .. } => {\n                 ast_id.with_value(ast_id.to_node(db).syntax().clone())\n             }\n         }\n     }\n \n     fn arg(&self, db: &dyn db::AstDatabase) -> Option<SyntaxNode> {\n         match self {\n-            MacroCallKind::FnLike(ast_id) => {\n+            MacroCallKind::FnLike { ast_id, .. } => {\n                 Some(ast_id.to_node(db).token_tree()?.syntax().clone())\n             }\n-            MacroCallKind::Derive(ast_id, _) => Some(ast_id.to_node(db).syntax().clone()),\n+            MacroCallKind::Derive { ast_id, .. } => Some(ast_id.to_node(db).syntax().clone()),\n         }\n     }\n }"}]}