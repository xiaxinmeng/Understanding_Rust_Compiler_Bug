{"sha": "6a5736d704d46e11fa06f7943d01b6744146b140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTczNmQ3MDRkNDZlMTFmYTA2Zjc5NDNkMDFiNjc0NDE0NmIxNDA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-18T23:39:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-19T02:27:30Z"}, "message": "libextra: Remove `~fn()` from libextra.", "tree": {"sha": "4109d8fefa07f612db8849f5ca75f3a25f0821e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4109d8fefa07f612db8849f5ca75f3a25f0821e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5736d704d46e11fa06f7943d01b6744146b140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5736d704d46e11fa06f7943d01b6744146b140", "html_url": "https://github.com/rust-lang/rust/commit/6a5736d704d46e11fa06f7943d01b6744146b140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5736d704d46e11fa06f7943d01b6744146b140/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "500a8f15c9afdd4e98e1d1573e34dd2b948f9773", "url": "https://api.github.com/repos/rust-lang/rust/commits/500a8f15c9afdd4e98e1d1573e34dd2b948f9773", "html_url": "https://github.com/rust-lang/rust/commit/500a8f15c9afdd4e98e1d1573e34dd2b948f9773"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "640ced24badd189ada93f5cdf9b499a9cccda1f8", "filename": "src/libextra/future.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=6a5736d704d46e11fa06f7943d01b6744146b140", "patch": "@@ -36,7 +36,7 @@ pub struct Future<A> {\n }\n \n enum FutureState<A> {\n-    Pending(~fn() -> A),\n+    Pending(proc() -> A),\n     Evaluating,\n     Forced(A)\n }\n@@ -92,7 +92,7 @@ impl<A> Future<A> {\n         Future {state: Forced(val)}\n     }\n \n-    pub fn from_fn(f: ~fn() -> A) -> Future<A> {\n+    pub fn from_fn(f: proc() -> A) -> Future<A> {\n         /*!\n          * Create a future from a function.\n          *\n@@ -120,7 +120,7 @@ impl<A:Send> Future<A> {\n         }\n     }\n \n-    pub fn spawn(blk: ~fn() -> A) -> Future<A> {\n+    pub fn spawn(blk: proc() -> A) -> Future<A> {\n         /*!\n          * Create a future from a unique closure.\n          *\n@@ -137,7 +137,7 @@ impl<A:Send> Future<A> {\n         Future::from_port(port)\n     }\n \n-    pub fn spawn_with<B: Send>(v: B, blk: ~fn(B) -> A) -> Future<A> {\n+    pub fn spawn_with<B: Send>(v: B, blk: proc(B) -> A) -> Future<A> {\n         /*!\n          * Create a future from a unique closure taking one argument.\n          *"}, {"sha": "2ee3daacf80cdb2007b1c87e4517a56c0b88880c", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=6a5736d704d46e11fa06f7943d01b6744146b140", "patch": "@@ -23,7 +23,7 @@ use std::vec;\n #[cfg(test)] use std::task::SingleThreaded;\n \n enum Msg<T> {\n-    Execute(~fn(&T)),\n+    Execute(proc(&T)),\n     Quit\n }\n \n@@ -49,15 +49,15 @@ impl<T> TaskPool<T> {\n     /// local data to be kept around in that task.\n     pub fn new(n_tasks: uint,\n                opt_sched_mode: Option<SchedMode>,\n-               init_fn_factory: ~fn() -> ~fn(uint) -> T)\n+               init_fn_factory: &fn() -> proc(uint) -> T)\n                -> TaskPool<T> {\n         assert!(n_tasks >= 1);\n \n         let channels = do vec::from_fn(n_tasks) |i| {\n             let (port, chan) = comm::stream::<Msg<T>>();\n             let init_fn = init_fn_factory();\n \n-            let task_body: ~fn() = || {\n+            let task_body: proc() = || {\n                 let local_data = init_fn(i);\n                 loop {\n                     match port.recv() {\n@@ -88,7 +88,7 @@ impl<T> TaskPool<T> {\n \n     /// Executes the function `f` on a task in the pool. The function\n     /// receives a reference to the local data returned by the `init_fn`.\n-    pub fn execute(&mut self, f: ~fn(&T)) {\n+    pub fn execute(&mut self, f: proc(&T)) {\n         self.channels[self.next_index].send(Execute(f));\n         self.next_index += 1;\n         if self.next_index == self.channels.len() { self.next_index = 0; }\n@@ -97,8 +97,8 @@ impl<T> TaskPool<T> {\n \n #[test]\n fn test_task_pool() {\n-    let f: ~fn() -> ~fn(uint) -> uint = || {\n-        let g: ~fn(uint) -> uint = |i| i;\n+    let f: proc() -> proc(uint) -> uint = || {\n+        let g: proc(uint) -> uint = |i| i;\n         g\n     };\n     let mut pool = TaskPool::new(4, Some(SingleThreaded), f);"}, {"sha": "acb3d538c982a620f8c88e32dcd9fa38f648528b", "filename": "src/libextra/test.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=6a5736d704d46e11fa06f7943d01b6744146b140", "patch": "@@ -74,17 +74,22 @@ impl TestDesc {\n     }\n }\n \n+/// Represents a benchmark function.\n+pub trait TDynBenchFn {\n+    fn run(&self, harness: &mut BenchHarness);\n+}\n+\n // A function that runs a test. If the function returns successfully,\n // the test succeeds; if the function fails then the test fails. We\n // may need to come up with a more clever definition of test in order\n // to support isolation of tests into tasks.\n pub enum TestFn {\n     StaticTestFn(extern fn()),\n     StaticBenchFn(extern fn(&mut BenchHarness)),\n-    StaticMetricFn(~fn(&mut MetricMap)),\n-    DynTestFn(~fn()),\n-    DynMetricFn(~fn(&mut MetricMap)),\n-    DynBenchFn(~fn(&mut BenchHarness))\n+    StaticMetricFn(proc(&mut MetricMap)),\n+    DynTestFn(proc()),\n+    DynMetricFn(proc(&mut MetricMap)),\n+    DynBenchFn(~TDynBenchFn)\n }\n \n impl TestFn {\n@@ -859,7 +864,7 @@ pub fn run_test(force_ignore: bool,\n \n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: SharedChan<MonitorMsg>,\n-                      testfn: ~fn()) {\n+                      testfn: proc()) {\n         let testfn_cell = ::std::cell::Cell::new(testfn);\n         do task::spawn {\n             let mut task = task::task();\n@@ -878,8 +883,8 @@ pub fn run_test(force_ignore: bool,\n     }\n \n     match testfn {\n-        DynBenchFn(benchfn) => {\n-            let bs = ::test::bench::benchmark(benchfn);\n+        DynBenchFn(bencher) => {\n+            let bs = ::test::bench::benchmark(|harness| bencher.run(harness));\n             monitor_ch.send((desc, TrBench(bs)));\n             return;\n         }"}, {"sha": "02855eb9777d2831eebcec8c631c284e9bb61536", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5736d704d46e11fa06f7943d01b6744146b140/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=6a5736d704d46e11fa06f7943d01b6744146b140", "patch": "@@ -394,14 +394,14 @@ impl<'self> Prep<'self> {\n     pub fn exec<T:Send +\n         Encodable<json::Encoder> +\n         Decodable<json::Decoder>>(\n-            &'self self, blk: ~fn(&mut Exec) -> T) -> T {\n+            &'self self, blk: proc(&mut Exec) -> T) -> T {\n         self.exec_work(blk).unwrap()\n     }\n \n     fn exec_work<T:Send +\n         Encodable<json::Encoder> +\n         Decodable<json::Decoder>>( // FIXME(#5121)\n-            &'self self, blk: ~fn(&mut Exec) -> T) -> Work<'self, T> {\n+            &'self self, blk: proc(&mut Exec) -> T) -> Work<'self, T> {\n         let mut bo = Some(blk);\n \n         debug!(\"exec_work: looking up {} and {:?}\", self.fn_name,"}]}