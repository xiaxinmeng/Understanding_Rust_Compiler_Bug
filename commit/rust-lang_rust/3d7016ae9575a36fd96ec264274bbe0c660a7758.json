{"sha": "3d7016ae9575a36fd96ec264274bbe0c660a7758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzAxNmFlOTU3NWEzNmZkOTZlYzI2NDI3NGJiZTBjNjYwYTc3NTg=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-28T17:41:48Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-07-28T17:47:29Z"}, "message": "Updating to work on Windows.", "tree": {"sha": "35ecc1c85c3b818ab8b02101d5b72908e07251b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ecc1c85c3b818ab8b02101d5b72908e07251b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7016ae9575a36fd96ec264274bbe0c660a7758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7016ae9575a36fd96ec264274bbe0c660a7758", "html_url": "https://github.com/rust-lang/rust/commit/3d7016ae9575a36fd96ec264274bbe0c660a7758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7016ae9575a36fd96ec264274bbe0c660a7758/comments", "author": null, "committer": null, "parents": [{"sha": "9618ab67ae8fc6e82bb16e29ea52125acf183fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9618ab67ae8fc6e82bb16e29ea52125acf183fc8", "html_url": "https://github.com/rust-lang/rust/commit/9618ab67ae8fc6e82bb16e29ea52125acf183fc8"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "1936cf209719328e635351ab38c49ba56fd42098", "filename": "src/lib/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Flib%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Flib%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftask.rs?ref=3d7016ae9575a36fd96ec264274bbe0c660a7758", "patch": "@@ -42,7 +42,7 @@ fn send[T](c: chan[T], v: &T) { c <| v; }\n \n fn recv[T](p: port[T]) -> T { let v; p |> v; v }\n \n-fn set_min_stack(uint stack_size) {\n+fn set_min_stack(stack_size : uint) {\n     rustrt::set_min_stack(stack_size);\n }\n "}, {"sha": "8839f7fe6af8b5a3f62947f9237824ab23c84b6d", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=3d7016ae9575a36fd96ec264274bbe0c660a7758", "patch": "@@ -2,6 +2,8 @@\n \n #define KLOG_(...) \\\n     KLOG(this, kern, __VA_ARGS__)\n+#define KLOG_ERR_(field, ...)                    \\\n+    KLOG_LVL(this, field, log_err, __VA_ARGS__)\n \n rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     _region(srv, true),\n@@ -284,9 +286,9 @@ rust_kernel::win32_require(LPCTSTR fn, BOOL ok) {\n                       NULL, err,\n                       MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n                       (LPTSTR) &buf, 0, NULL );\n-        DLOG_ERR(sched, dom, \"%s failed with error %ld: %s\", fn, err, buf);\n+        KLOG_ERR_(dom, \"%s failed with error %ld: %s\", fn, err, buf);\n         LocalFree((HLOCAL)buf);\n-        I(sched, ok);\n+        I(this, ok);\n     }\n }\n #endif"}, {"sha": "9289883ab1e6bdaecdc73b6463db3b49d69ae0ee", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=3d7016ae9575a36fd96ec264274bbe0c660a7758", "patch": "@@ -91,6 +91,12 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     rust_task *create_task(rust_task *spawner, const char *name);\n \n     virtual void run();\n+\n+#ifdef __WIN32__\n+    inline void win32_require(LPCTSTR fn, BOOL ok) {\n+        kernel->win32_require(fn, ok);\n+    }\n+#endif\n };\n \n inline rust_log &"}, {"sha": "c46f1916573778816d52786a835acb215f644e00", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=3d7016ae9575a36fd96ec264274bbe0c660a7758", "patch": "@@ -135,15 +135,15 @@ isaac_init(sched_or_kernel *sched, randctx *rctx)\n #ifdef __WIN32__\n         {\n             HCRYPTPROV hProv;\n-            sched->kernel->win32_require\n+            sched->win32_require\n                 (_T(\"CryptAcquireContext\"),\n                  CryptAcquireContext(&hProv, NULL, NULL, PROV_RSA_FULL,\n                                      CRYPT_VERIFYCONTEXT|CRYPT_SILENT));\n-            sched->kernel->win32_require\n+            sched->win32_require\n                 (_T(\"CryptGenRandom\"),\n                  CryptGenRandom(hProv, sizeof(rctx->randrsl),\n                                 (BYTE*)(&rctx->randrsl)));\n-            sched->kernel->win32_require\n+            sched->win32_require\n                 (_T(\"CryptReleaseContext\"),\n                  CryptReleaseContext(hProv, 0));\n         }"}, {"sha": "df596c65cb2f712f174941a5a64250d1e4ec5fbd", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3d7016ae9575a36fd96ec264274bbe0c660a7758/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=3d7016ae9575a36fd96ec264274bbe0c660a7758", "patch": "@@ -73,7 +73,8 @@ bool lock_and_signal::timed_wait(size_t timeout_in_ns) {\n     bool rv = true;\n #if defined(__WIN32__)\n     LeaveCriticalSection(&_cs);\n-    WaitForSingleObject(_event, INFINITE);\n+    DWORD timeout = timeout_in_ns == 0 ? INFINITE : timeout_in_ns / 1000000;\n+    rv = WaitForSingleObject(_event, timeout) != WAIT_TIMEOUT;\n     EnterCriticalSection(&_cs);\n     _holding_thread = GetCurrentThreadId();\n #else"}]}