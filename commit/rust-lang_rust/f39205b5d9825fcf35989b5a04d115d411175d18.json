{"sha": "f39205b5d9825fcf35989b5a04d115d411175d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTIwNWI1ZDk4MjVmY2YzNTk4OWI1YTA0ZDExNWQ0MTExNzVkMTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-02T10:48:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-02T10:48:59Z"}, "message": "Auto merge of #66004 - eddyb:revert-early-gate, r=petrochenkov\n\nPartially revert the early feature-gatings added in #65742.\n\nThe intent here is to address #65860 ASAP (in time for beta, ideally), while leaving as much of #65742 around as possible, to make it easier to re-enable later.\n\nTherefore, I've only kept the parts of the revert that re-add the old (i.e. non-early) feature-gating checks that were removed in #65742, and the test reverts.\n\nI've disabled the new early feature-gating checks from #65742 entirely for now, but it would be easy to put them behind a `-Z` flag, or turn them into warnings, which would allow us to keep tests for both the early and late versions of the checks - assuming that's desirable.\n\ncc @nikomatsakis @Mark-Simulacrum @Centril", "tree": {"sha": "a7a8dacd10621af9ca2ab72996c54082c880fef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7a8dacd10621af9ca2ab72996c54082c880fef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39205b5d9825fcf35989b5a04d115d411175d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39205b5d9825fcf35989b5a04d115d411175d18", "html_url": "https://github.com/rust-lang/rust/commit/f39205b5d9825fcf35989b5a04d115d411175d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39205b5d9825fcf35989b5a04d115d411175d18/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd", "html_url": "https://github.com/rust-lang/rust/commit/87cbf0a547aaf9e8a7fc708851ecf4bc2adab5fd"}, {"sha": "27e01a1f8876eda98e82d599136ca3a953f6b3fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e01a1f8876eda98e82d599136ca3a953f6b3fb", "html_url": "https://github.com/rust-lang/rust/commit/27e01a1f8876eda98e82d599136ca3a953f6b3fb"}], "stats": {"total": 311, "additions": 160, "deletions": 151}, "files": [{"sha": "13a24ca046d51bb64248e43e3d4f0aac193d89d7", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -3,8 +3,12 @@ use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n-use crate::ast::{self, NodeId, PatKind, VariantData};\n+use crate::ast::{\n+    self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n+    PatKind, RangeEnd, VariantData,\n+};\n use crate::attr::{self, check_builtin_attribute};\n+use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n use crate::visit::{self, FnKind, Visitor};\n use crate::parse::token;\n@@ -153,6 +157,9 @@ fn leveled_feature_err<'a, S: Into<MultiSpan>>(\n \n }\n \n+const EXPLAIN_BOX_SYNTAX: &str =\n+    \"box expression syntax is experimental; you can call `Box::new` instead\";\n+\n pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n     \"attributes on expressions are experimental\";\n \n@@ -439,6 +446,20 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                    \"auto traits are experimental and possibly buggy\");\n             }\n \n+            ast::ItemKind::TraitAlias(..) => {\n+                gate_feature_post!(\n+                    &self,\n+                    trait_alias,\n+                    i.span,\n+                    \"trait aliases are experimental\"\n+                );\n+            }\n+\n+            ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {\n+                let msg = \"`macro` is experimental\";\n+                gate_feature_post!(&self, decl_macro, i.span, msg);\n+            }\n+\n             ast::ItemKind::OpaqueTy(..) => {\n                 gate_feature_post!(\n                     &self,\n@@ -502,6 +523,37 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n     }\n \n+    fn visit_expr(&mut self, e: &'a ast::Expr) {\n+        match e.kind {\n+            ast::ExprKind::Box(_) => {\n+                gate_feature_post!(&self, box_syntax, e.span, EXPLAIN_BOX_SYNTAX);\n+            }\n+            ast::ExprKind::Type(..) => {\n+                // To avoid noise about type ascription in common syntax errors, only emit if it\n+                // is the *only* error.\n+                if self.parse_sess.span_diagnostic.err_count() == 0 {\n+                    gate_feature_post!(&self, type_ascription, e.span,\n+                                       \"type ascription is experimental\");\n+                }\n+            }\n+            ast::ExprKind::TryBlock(_) => {\n+                gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n+            }\n+            ast::ExprKind::Block(_, opt_label) => {\n+                if let Some(label) = opt_label {\n+                    gate_feature_post!(&self, label_break_value, label.ident.span,\n+                                    \"labels on blocks are unstable\");\n+                }\n+            }\n+            _ => {}\n+        }\n+        visit::walk_expr(self, e)\n+    }\n+\n+    fn visit_arm(&mut self, arm: &'a ast::Arm) {\n+        visit::walk_arm(self, arm)\n+    }\n+\n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n             PatKind::Slice(pats) => {\n@@ -521,12 +573,25 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     }\n                 }\n             }\n+            PatKind::Box(..) => {\n+                gate_feature_post!(&self, box_patterns,\n+                                  pattern.span,\n+                                  \"box pattern syntax is experimental\");\n+            }\n+            PatKind::Range(_, _, Spanned { node: RangeEnd::Excluded, .. }) => {\n+                gate_feature_post!(&self, exclusive_range_pattern, pattern.span,\n+                                   \"exclusive range pattern syntax is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_pat(self, pattern)\n     }\n \n-    fn visit_fn(&mut self, fn_kind: FnKind<'a>, fn_decl: &'a ast::FnDecl, span: Span, _: NodeId) {\n+    fn visit_fn(&mut self,\n+                fn_kind: FnKind<'a>,\n+                fn_decl: &'a ast::FnDecl,\n+                span: Span,\n+                _node_id: NodeId) {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n@@ -541,6 +606,26 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_fn(self, fn_kind, fn_decl, span)\n     }\n \n+    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n+        match param.kind {\n+            GenericParamKind::Const { .. } =>\n+                gate_feature_post!(&self, const_generics, param.ident.span,\n+                    \"const generics are unstable\"),\n+            _ => {}\n+        }\n+        visit::walk_generic_param(self, param)\n+    }\n+\n+    fn visit_assoc_ty_constraint(&mut self, constraint: &'a AssocTyConstraint) {\n+        match constraint.kind {\n+            AssocTyConstraintKind::Bound { .. } =>\n+                gate_feature_post!(&self, associated_type_bounds, constraint.span,\n+                    \"associated type bounds are unstable\"),\n+            _ => {}\n+        }\n+        visit::walk_assoc_ty_constraint(self, constraint)\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'a ast::TraitItem) {\n         match ti.kind {\n             ast::TraitItemKind::Method(ref sig, ref block) => {\n@@ -598,6 +683,14 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n         visit::walk_impl_item(self, ii)\n     }\n+\n+    fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n+        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.node {\n+            gate_feature_post!(&self, crate_visibility_modifier, vis.span,\n+                               \"`crate` visibility modifier is experimental\");\n+        }\n+        visit::walk_vis(self, vis)\n+    }\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n@@ -783,6 +876,21 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(yields, generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n     gate_all!(const_extern_fn, \"`const extern fn` definitions are unstable\");\n+\n+    // All uses of `gate_all!` below this point were added in #65742,\n+    // and subsequently disabled (with the non-early gating readded).\n+    macro_rules! gate_all {\n+        ($gate:ident, $msg:literal) => {\n+            // FIXME(eddyb) do something more useful than always\n+            // disabling these uses of early feature-gatings.\n+            if false {\n+                for span in &*parse_sess.gated_spans.$gate.borrow() {\n+                    gate_feature!(&visitor, $gate, *span, $msg);\n+                }\n+            }\n+        }\n+    }\n+\n     gate_all!(trait_alias, \"trait aliases are experimental\");\n     gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n     gate_all!(crate_visibility_modifier, \"`crate` visibility modifier is experimental\");"}, {"sha": "cfb1f8b581c85039c1ca3d3cf1d25133d99a3f49", "filename": "src/test/ui/const-generics/const-param-in-trait-ungated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait-ungated.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/const-param-in-trait-ungated.rs:1:13\n+  --> $DIR/const-param-in-trait-ungated.rs:1:19\n    |\n LL | trait Trait<const T: ()> {}\n-   |             ^^^^^^^^^^^\n+   |                   ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "a2872ab982da49ed13519285ddc23608e86c2405", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:13\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:19\n    |\n LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |             ^^^^^^^^^^\n+   |                   ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "fe7b6fdb1904d7fcb85b3be677dec5a04da974c9", "filename": "src/test/ui/const-generics/issues/issue-60263.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-60263.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/issue-60263.rs:1:10\n+  --> $DIR/issue-60263.rs:1:16\n    |\n LL | struct B<const I: u8>;\n-   |          ^^^^^^^^^^^\n+   |                ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "0faa9090f4ebcfd898a632a1faf6d6dc6448d5be", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -70,7 +70,3 @@ fn main() {\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;\n }\n-\n-macro_rules! accept_path { ($p:path) => {} }\n-accept_path!(Iterator<Item: Ord>);\n-//~^ ERROR associated type bounds are unstable"}, {"sha": "84af2a0163ae44dbc6948aa69624f88e7bfb11bc", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -115,15 +115,6 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable\n-  --> $DIR/feature-gate-associated_type_bounds.rs:75:23\n-   |\n-LL | accept_path!(Iterator<Item: Ord>);\n-   |                       ^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n-   = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n-\n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:54:14\n    |\n@@ -148,7 +139,7 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    |\n    = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n \n Some errors have detailed explanations: E0562, E0658.\n For more information about an error, try `rustc --explain E0562`."}, {"sha": "8bec16a974e800930de77eeffc8010469254a8c5", "filename": "src/test/ui/feature-gates/feature-gate-box_patterns.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -2,6 +2,3 @@ fn main() {\n     let box x = Box::new('c'); //~ ERROR box pattern syntax is experimental\n     println!(\"x: {}\", x);\n }\n-\n-macro_rules! accept_pat { ($p:pat) => {} }\n-accept_pat!(box 0); //~ ERROR box pattern syntax is experimental"}, {"sha": "d2dafe93a862fbc0d2291ea747cdf6d8a9718637", "filename": "src/test/ui/feature-gates/feature-gate-box_patterns.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_patterns.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -7,15 +7,6 @@ LL |     let box x = Box::new('c');\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29641\n    = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n \n-error[E0658]: box pattern syntax is experimental\n-  --> $DIR/feature-gate-box_patterns.rs:7:13\n-   |\n-LL | accept_pat!(box 0);\n-   |             ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29641\n-   = help: add `#![feature(box_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "778660cc0b54991d1b456e33f18095a108f091d3", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,9 +1,6 @@\n // Test that the use of the box syntax is gated by `box_syntax` feature gate.\n \n-#[cfg(FALSE)]\n-fn foo() {\n+fn main() {\n     let x = box 3;\n     //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead\n }\n-\n-fn main() {}"}, {"sha": "61b0534d2dc3ec129e0a193d8c16bc75969e72f5", "filename": "src/test/ui/feature-gates/feature-gate-box_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/feature-gate-box_syntax.rs:5:13\n+  --> $DIR/feature-gate-box_syntax.rs:4:13\n    |\n LL |     let x = box 3;\n    |             ^^^^^"}, {"sha": "935f84b9163d38f9e599c96985fbefd4c87cbb34", "filename": "src/test/ui/feature-gates/feature-gate-const_generics-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics-ptr.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics-ptr.rs:1:16\n+  --> $DIR/feature-gate-const_generics-ptr.rs:1:22\n    |\n LL | struct ConstFn<const F: fn()>;\n-   |                ^^^^^^^^^^^^^\n+   |                      ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics-ptr.rs:5:17\n+  --> $DIR/feature-gate-const_generics-ptr.rs:5:23\n    |\n LL | struct ConstPtr<const P: *const u32>;\n-   |                 ^^^^^^^^^^^^^^^^^^^\n+   |                       ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable"}, {"sha": "fe1ded1c4bbc4bba7e8b86d954a113a51a1d59ad", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -2,9 +2,4 @@ fn foo<const X: ()>() {} //~ ERROR const generics are unstable\n \n struct Foo<const X: usize>([(); X]); //~ ERROR const generics are unstable\n \n-macro_rules! accept_item { ($i:item) => {} }\n-accept_item! {\n-    impl<const X: ()> A {} //~ ERROR const generics are unstable\n-}\n-\n fn main() {}"}, {"sha": "468e9c31d37e25a711aea94424e71eb6d77be513", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,30 +1,21 @@\n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics.rs:1:8\n+  --> $DIR/feature-gate-const_generics.rs:1:14\n    |\n LL | fn foo<const X: ()>() {}\n-   |        ^^^^^^^^^^^\n+   |              ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics.rs:3:12\n+  --> $DIR/feature-gate-const_generics.rs:3:18\n    |\n LL | struct Foo<const X: usize>([(); X]);\n-   |            ^^^^^^^^^^^^^^\n+   |                  ^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0658]: const generics are unstable\n-  --> $DIR/feature-gate-const_generics.rs:7:10\n-   |\n-LL |     impl<const X: ()> A {}\n-   |          ^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44580\n-   = help: add `#![feature(const_generics)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0e3f6b168be6b602b8ced5181e712c7b26b6dde1", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -5,7 +5,4 @@ crate struct Bender { //~ ERROR `crate` visibility modifier is experimental\n     water: bool,\n }\n \n-macro_rules! accept_vis { ($v:vis) => {} }\n-accept_vis!(crate);  //~ ERROR `crate` visibility modifier is experimental\n-\n fn main() {}"}, {"sha": "1e061eced3660620d718d3674ba843c628877dc8", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -7,15 +7,6 @@ LL | crate struct Bender {\n    = note: for more information, see https://github.com/rust-lang/rust/issues/53120\n    = help: add `#![feature(crate_visibility_modifier)]` to the crate attributes to enable\n \n-error[E0658]: `crate` visibility modifier is experimental\n-  --> $DIR/feature-gate-crate_visibility_modifier.rs:9:13\n-   |\n-LL | accept_vis!(crate);\n-   |             ^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/53120\n-   = help: add `#![feature(crate_visibility_modifier)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "d002c5dbbd2db60129306fde7cb8ef9e37f3a557", "filename": "src/test/ui/feature-gates/feature-gate-decl_macro.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -2,8 +2,4 @@\n \n macro m() {} //~ ERROR `macro` is experimental\n \n-macro_rules! accept_item { ($i:item) => {} }\n-accept_item! {\n-    macro m() {} //~ ERROR `macro` is experimental\n-}\n fn main() {}"}, {"sha": "905a1b1531044f593c88ae0f03d2fd06193bda7b", "filename": "src/test/ui/feature-gates/feature-gate-decl_macro.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-decl_macro.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -7,15 +7,6 @@ LL | macro m() {}\n    = note: for more information, see https://github.com/rust-lang/rust/issues/39412\n    = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n \n-error[E0658]: `macro` is experimental\n-  --> $DIR/feature-gate-decl_macro.rs:7:5\n-   |\n-LL |     macro m() {}\n-   |     ^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/39412\n-   = help: add `#![feature(decl_macro)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "ded08b93fe81c525cfa71480c39364fbe8cc84e6", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,10 +1,6 @@\n-#[cfg(FALSE)]\n-fn foo() {\n+pub fn main() {\n     match 22 {\n         0 .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n-        PATH .. 3 => {} //~ ERROR exclusive range pattern syntax is experimental\n         _ => {}\n     }\n }\n-\n-fn main() {}"}, {"sha": "ee20408d1781f2262f192e3d0cfa8afbea4cbc18", "filename": "src/test/ui/feature-gates/feature-gate-exclusive-range-pattern.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-exclusive-range-pattern.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,21 +1,12 @@\n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/feature-gate-exclusive-range-pattern.rs:4:11\n+  --> $DIR/feature-gate-exclusive-range-pattern.rs:3:9\n    |\n LL |         0 .. 3 => {}\n-   |           ^^\n+   |         ^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n \n-error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/feature-gate-exclusive-range-pattern.rs:5:14\n-   |\n-LL |         PATH .. 3 => {}\n-   |              ^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n-   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "6fc38f45517ef74dc38864b8d00e0d4dc2b59548", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,8 +1,5 @@\n-#[cfg(FALSE)]\n-pub fn foo() {\n+pub fn main() {\n     'a: { //~ ERROR labels on blocks are unstable\n         break 'a;\n     }\n }\n-\n-fn main() {}"}, {"sha": "a417e0eec22f2fe07b3c16db2bf1cba462088a38", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: labels on blocks are unstable\n-  --> $DIR/feature-gate-label_break_value.rs:3:5\n+  --> $DIR/feature-gate-label_break_value.rs:2:5\n    |\n LL |     'a: {\n    |     ^^"}, {"sha": "819085adddade93a3820ac65550f5f24faf59d2c", "filename": "src/test/ui/feature-gates/feature-gate-trait-alias.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,13 +1,4 @@\n trait Foo = Default;\n //~^ ERROR trait aliases are experimental\n \n-macro_rules! accept_item {\n-    ($i:item) => {}\n-}\n-\n-accept_item! {\n-    trait Foo = Ord + Eq;\n-    //~^ ERROR trait aliases are experimental\n-}\n-\n fn main() {}"}, {"sha": "9250e27d15807eaec9a3131dfe62894bafbb6d2d", "filename": "src/test/ui/feature-gates/feature-gate-trait-alias.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trait-alias.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -7,15 +7,6 @@ LL | trait Foo = Default;\n    = note: for more information, see https://github.com/rust-lang/rust/issues/41517\n    = help: add `#![feature(trait_alias)]` to the crate attributes to enable\n \n-error[E0658]: trait aliases are experimental\n-  --> $DIR/feature-gate-trait-alias.rs:9:5\n-   |\n-LL |     trait Foo = Ord + Eq;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/41517\n-   = help: add `#![feature(trait_alias)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "06cadd82c0731be8c263206d4e99176ab4bf17af", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,12 +1,9 @@\n // compile-flags: --edition 2018\n \n-#[cfg(FALSE)]\n-fn foo() {\n-    let try_result: Option<_> = try { //~ ERROR `try` blocks are unstable\n+pub fn main() {\n+    let try_result: Option<_> = try { //~ ERROR `try` expression is experimental\n         let x = 5;\n         x\n     };\n     assert_eq!(try_result, Some(5));\n }\n-\n-fn main() {}"}, {"sha": "565f3610a2e21efdcf0e4448c70e5171a40ef9c9", "filename": "src/test/ui/feature-gates/feature-gate-try_blocks.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-try_blocks.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,5 +1,5 @@\n-error[E0658]: `try` blocks are unstable\n-  --> $DIR/feature-gate-try_blocks.rs:5:33\n+error[E0658]: `try` expression is experimental\n+  --> $DIR/feature-gate-try_blocks.rs:4:33\n    |\n LL |       let try_result: Option<_> = try {\n    |  _________________________________^"}, {"sha": "7a597157300eddc32526f9d33c44565104b37b2a", "filename": "src/test/ui/feature-gates/feature-gate-type_ascription.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,8 +1,5 @@\n // Type ascription is unstable\n \n-#[cfg(FALSE)]\n-fn foo() {\n+fn main() {\n     let a = 10: u8; //~ ERROR type ascription is experimental\n }\n-\n-fn main() {}"}, {"sha": "83f95529f0d9d3b6672be19a6438c45b214ffdf8", "filename": "src/test/ui/feature-gates/feature-gate-type_ascription.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_ascription.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: type ascription is experimental\n-  --> $DIR/feature-gate-type_ascription.rs:5:13\n+  --> $DIR/feature-gate-type_ascription.rs:4:13\n    |\n LL |     let a = 10: u8;\n    |             ^^^^^^"}, {"sha": "5fe72caf9c1ff7a9c3ee401a76dd4f6ab8e86761", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-pass.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -4,7 +4,6 @@\n // check-pass\n \n #![feature(or_patterns)]\n-#![feature(box_patterns)]\n \n fn main() {}\n "}, {"sha": "2f03160430a22fa4df6befd3495e0f3a5cab158a", "filename": "src/test/ui/parser/pat-tuple-4.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -4,6 +4,7 @@ fn main() {\n     match 0 {\n         (.. PAT) => {}\n         //~^ ERROR `..X` range patterns are not supported\n+        //~| ERROR exclusive range pattern syntax is experimental\n     }\n }\n "}, {"sha": "af3ecce1846497d485d7ad5bf0671d593b79cc9e", "filename": "src/test/ui/parser/pat-tuple-4.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-4.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -4,15 +4,25 @@ error: `..X` range patterns are not supported\n LL |         (.. PAT) => {}\n    |          ^^^^^^ help: try using the minimum value for the type: `MIN..PAT`\n \n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/pat-tuple-4.rs:5:10\n+   |\n+LL |         (.. PAT) => {}\n+   |          ^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n error[E0308]: mismatched types\n-  --> $DIR/pat-tuple-4.rs:10:30\n+  --> $DIR/pat-tuple-4.rs:11:30\n    |\n LL | const RECOVERY_WITNESS: () = 0;\n    |                              ^ expected (), found integer\n    |\n    = note: expected type `()`\n               found type `{integer}`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0658.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "09ebdc29a21613cbe0dc25278324d6678f593d2d", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -5,10 +5,10 @@ LL |         (PAT ..) => {}\n    |          ^^^^^^ help: try using the maximum value for the type: `PAT..MAX`\n \n error[E0658]: exclusive range pattern syntax is experimental\n-  --> $DIR/pat-tuple-5.rs:5:14\n+  --> $DIR/pat-tuple-5.rs:5:10\n    |\n LL |         (PAT ..) => {}\n-   |              ^^\n+   |          ^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/37854\n    = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable"}, {"sha": "9656a0b5de9ce1afa46a4590e271f6e51ec3c5c5", "filename": "src/test/ui/pattern/rest-pat-syntactic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f39205b5d9825fcf35989b5a04d115d411175d18/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-syntactic.rs?ref=f39205b5d9825fcf35989b5a04d115d411175d18", "patch": "@@ -3,8 +3,6 @@\n \n // check-pass\n \n-#![feature(box_patterns)]\n-\n fn main() {}\n \n macro_rules! accept_pat {"}]}