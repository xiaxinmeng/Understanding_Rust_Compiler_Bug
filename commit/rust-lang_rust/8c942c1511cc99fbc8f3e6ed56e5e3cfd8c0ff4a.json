{"sha": "8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjOTQyYzE1MTFjYzk5ZmJjOGYzZTZlZDU2ZTVlM2NmZDhjMGZmNGE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T18:24:42Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-10-21T01:43:55Z"}, "message": "rustc_mir: rename `location: SourceInfo` to `source_info`.", "tree": {"sha": "e7dffcf7cfeb0ac3635fb51418e6e6f3f9ed227e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7dffcf7cfeb0ac3635fb51418e6e6f3f9ed227e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a", "html_url": "https://github.com/rust-lang/rust/commit/8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31530e5d132ebcc3654baf2e5460599681520af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/31530e5d132ebcc3654baf2e5460599681520af0", "html_url": "https://github.com/rust-lang/rust/commit/31530e5d132ebcc3654baf2e5460599681520af0"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "5163e025cbaabaacb979fb66ae42416090b8e1f8", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=8c942c1511cc99fbc8f3e6ed56e5e3cfd8c0ff4a", "patch": "@@ -33,7 +33,7 @@ struct CallSite<'tcx> {\n     callee: DefId,\n     substs: SubstsRef<'tcx>,\n     bb: BasicBlock,\n-    location: SourceInfo,\n+    source_info: SourceInfo,\n }\n \n impl<'tcx> MirPass<'tcx> for Inline {\n@@ -217,7 +217,7 @@ impl Inliner<'tcx> {\n                     callee: instance.def_id(),\n                     substs: instance.substs,\n                     bb,\n-                    location: terminator.source_info,\n+                    source_info: terminator.source_info,\n                 });\n             }\n         }\n@@ -440,7 +440,7 @@ impl Inliner<'tcx> {\n \n                 for mut scope in callee_body.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n-                        scope.parent_scope = Some(callsite.location.scope);\n+                        scope.parent_scope = Some(callsite.source_info.scope);\n                         // FIXME(eddyb) is this really needed?\n                         // (also note that it's always overwritten below)\n                         scope.span = callee_body.span;\n@@ -449,7 +449,7 @@ impl Inliner<'tcx> {\n                     // FIXME(eddyb) this doesn't seem right at all.\n                     // The inlined source scopes should probably be annotated as\n                     // such, but also contain all of the original information.\n-                    scope.span = callsite.location.span;\n+                    scope.span = callsite.source_info.span;\n \n                     let idx = caller_body.source_scopes.push(scope);\n                     scope_map.push(idx);\n@@ -459,7 +459,7 @@ impl Inliner<'tcx> {\n                     let mut local = callee_body.local_decls[loc].clone();\n \n                     local.source_info.scope = scope_map[local.source_info.scope];\n-                    local.source_info.span = callsite.location.span;\n+                    local.source_info.span = callsite.source_info.span;\n \n                     let idx = caller_body.local_decls.push(local);\n                     local_map.push(idx);\n@@ -491,13 +491,13 @@ impl Inliner<'tcx> {\n \n                     let ty = dest.ty(caller_body, self.tcx);\n \n-                    let temp = LocalDecl::new(ty, callsite.location.span);\n+                    let temp = LocalDecl::new(ty, callsite.source_info.span);\n \n                     let tmp = caller_body.local_decls.push(temp);\n                     let tmp = Place::from(tmp);\n \n                     let stmt = Statement {\n-                        source_info: callsite.location,\n+                        source_info: callsite.source_info,\n                         kind: StatementKind::Assign(box (tmp, dest)),\n                     };\n                     caller_body[callsite.bb].statements.push(stmt);\n@@ -535,7 +535,7 @@ impl Inliner<'tcx> {\n                 }\n \n                 let terminator = Terminator {\n-                    source_info: callsite.location,\n+                    source_info: callsite.source_info,\n                     kind: TerminatorKind::Goto { target: BasicBlock::new(bb_len) },\n                 };\n \n@@ -654,20 +654,23 @@ impl Inliner<'tcx> {\n \n         let ty = arg.ty(caller_body, self.tcx);\n \n-        let arg_tmp = LocalDecl::new(ty, callsite.location.span);\n+        let arg_tmp = LocalDecl::new(ty, callsite.source_info.span);\n         let arg_tmp = caller_body.local_decls.push(arg_tmp);\n \n         caller_body[callsite.bb].statements.push(Statement {\n-            source_info: callsite.location,\n+            source_info: callsite.source_info,\n             kind: StatementKind::StorageLive(arg_tmp),\n         });\n         caller_body[callsite.bb].statements.push(Statement {\n-            source_info: callsite.location,\n+            source_info: callsite.source_info,\n             kind: StatementKind::Assign(box (Place::from(arg_tmp), arg)),\n         });\n         caller_body[return_block].statements.insert(\n             0,\n-            Statement { source_info: callsite.location, kind: StatementKind::StorageDead(arg_tmp) },\n+            Statement {\n+                source_info: callsite.source_info,\n+                kind: StatementKind::StorageDead(arg_tmp),\n+            },\n         );\n \n         arg_tmp"}]}