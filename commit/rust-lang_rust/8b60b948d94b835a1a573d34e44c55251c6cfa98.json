{"sha": "8b60b948d94b835a1a573d34e44c55251c6cfa98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNjBiOTQ4ZDk0YjgzNWExYTU3M2QzNGU0NGM1NTI1MWM2Y2ZhOTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-02-26T20:59:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-02T07:31:19Z"}, "message": "Get rid of hir::StructFieldKind", "tree": {"sha": "b155e13a06b86281c449dcaf4ef4a3b765b641df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b155e13a06b86281c449dcaf4ef4a3b765b641df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b60b948d94b835a1a573d34e44c55251c6cfa98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b60b948d94b835a1a573d34e44c55251c6cfa98", "html_url": "https://github.com/rust-lang/rust/commit/8b60b948d94b835a1a573d34e44c55251c6cfa98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b60b948d94b835a1a573d34e44c55251c6cfa98/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0400d929e8626192ba97b4ec12e52aabc8b476d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0400d929e8626192ba97b4ec12e52aabc8b476d5", "html_url": "https://github.com/rust-lang/rust/commit/0400d929e8626192ba97b4ec12e52aabc8b476d5"}], "stats": {"total": 199, "additions": 80, "deletions": 119}, "files": [{"sha": "98c725a23f5adf33a86aff026c394735bb824e0e", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -151,7 +151,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                         self.create_def_with_parent(\n                             Some(variant_def_index),\n                             field.node.id,\n-                            DefPathData::Field(field.node.kind));\n+                            DefPathData::Field(field.node.name));\n                     }\n                 }\n             }\n@@ -166,7 +166,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                 }\n \n                 for field in struct_def.fields() {\n-                    self.create_def(field.node.id, DefPathData::Field(field.node.kind));\n+                    self.create_def(field.node.id, DefPathData::Field(field.node.name));\n                 }\n             }\n             ItemTrait(_, _, ref bounds, _) => {"}, {"sha": "3598cc40ade277c5d8caa79139d5e6f4d3a020ff", "filename": "src/librustc/front/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -11,7 +11,6 @@\n use middle::cstore::LOCAL_CRATE;\n use middle::def_id::{DefId, DefIndex};\n use rustc_data_structures::fnv::FnvHashMap;\n-use rustc_front::hir;\n use syntax::ast;\n use syntax::parse::token::InternedString;\n use util::nodemap::NodeMap;\n@@ -84,8 +83,7 @@ pub enum DefPathData {\n     TypeParam(ast::Name),\n     LifetimeDef(ast::Name),\n     EnumVariant(ast::Name),\n-    PositionalField,\n-    Field(hir::StructFieldKind),\n+    Field(Option<ast::Name>),\n     StructCtor, // implicit ctor for a tuple-like struct\n     Initializer, // initializer for a const\n     Binding(ast::Name), // pattern binding\n@@ -186,16 +184,12 @@ impl DefPathData {\n             LifetimeDef(name) |\n             EnumVariant(name) |\n             DetachedCrate(name) |\n-            Binding(name) => {\n+            Binding(name) |\n+            Field(Some(name)) => {\n                 name.as_str()\n             }\n \n-            Field(hir::StructFieldKind::NamedField(name, _)) => {\n-                name.as_str()\n-            }\n-\n-            PositionalField |\n-            Field(hir::StructFieldKind::UnnamedField(_)) => {\n+            Field(None) => {\n                 InternedString::new(\"{{field}}\")\n             }\n "}, {"sha": "22bdf66b339592d953f4326db547e70765b30c96", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -221,10 +221,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields().iter().filter(|f| {\n-            has_extern_repr || inherited_pub_visibility || match f.node.kind {\n-                hir::NamedField(_, hir::Public) => true,\n-                _ => false\n-            }\n+            has_extern_repr || inherited_pub_visibility || f.node.vis == hir::Public\n         });\n         self.live_symbols.extend(live_fields.map(|f| f.node.id));\n \n@@ -432,7 +429,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_field(&mut self, node: &hir::StructField_) -> bool {\n-        let is_named = node.name().is_some();\n+        let is_named = node.name.is_some();\n         let field_type = self.tcx.node_id_to_type(node.id);\n         let is_marker_field = match field_type.ty_to_def_id() {\n             Some(def_id) => self.tcx.lang_items.items().iter().any(|item| *item == Some(def_id)),\n@@ -549,7 +546,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n     fn visit_struct_field(&mut self, field: &hir::StructField) {\n         if self.should_warn_about_field(&field.node) {\n             self.warn_dead_code(field.node.id, field.span,\n-                                field.node.name().unwrap(), \"struct field\");\n+                                field.node.name.unwrap(), \"struct field\");\n         }\n \n         intravisit::walk_struct_field(self, field);"}, {"sha": "28f88da907e26b51483e809b41bc4f9ba24d66c6", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -700,11 +700,12 @@ pub fn noop_fold_poly_trait_ref<T: Folder>(p: PolyTraitRef, fld: &mut T) -> Poly\n }\n \n pub fn noop_fold_struct_field<T: Folder>(f: StructField, fld: &mut T) -> StructField {\n-    let StructField {node: StructField_ {id, kind, ty, attrs}, span} = f;\n+    let StructField {node: StructField_ {id, name, vis, ty, attrs}, span} = f;\n     Spanned {\n         node: StructField_ {\n             id: fld.new_id(id),\n-            kind: kind,\n+            name: name,\n+            vis: vis,\n             ty: fld.fold_ty(ty),\n             attrs: fold_attrs(attrs, fld),\n         },"}, {"sha": "eccfcb56addd22e17738127918350208fa96c410", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -24,7 +24,6 @@ pub use self::Mutability::*;\n pub use self::PathListItem_::*;\n pub use self::PrimTy::*;\n pub use self::Stmt_::*;\n-pub use self::StructFieldKind::*;\n pub use self::TraitItem_::*;\n pub use self::Ty_::*;\n pub use self::TyParamBound::*;\n@@ -1243,44 +1242,45 @@ impl Visibility {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct StructField_ {\n-    pub kind: StructFieldKind,\n+    pub name: Option<Name>,\n+    pub vis: Visibility,\n     pub id: NodeId,\n     pub ty: P<Ty>,\n     pub attrs: HirVec<Attribute>,\n }\n \n-impl StructField_ {\n-    pub fn name(&self) -> Option<Name> {\n-        match self.kind {\n-            NamedField(name, _) => Some(name),\n-            UnnamedField(_) => None,\n-        }\n-    }\n-}\n+// impl StructField_ {\n+//     pub fn name(&self) -> Option<Name> {\n+//         match self.kind {\n+//             NamedField(name, _) => Some(name),\n+//             UnnamedField(_) => None,\n+//         }\n+//     }\n+// }\n \n pub type StructField = Spanned<StructField_>;\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum StructFieldKind {\n-    NamedField(Name, Visibility),\n-    /// Element of a tuple-like struct\n-    UnnamedField(Visibility),\n-}\n-\n-impl StructFieldKind {\n-    pub fn is_unnamed(&self) -> bool {\n-        match *self {\n-            UnnamedField(..) => true,\n-            NamedField(..) => false,\n-        }\n-    }\n-\n-    pub fn visibility(&self) -> Visibility {\n-        match *self {\n-            NamedField(_, vis) | UnnamedField(vis) => vis,\n-        }\n-    }\n-}\n+// #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+// pub enum StructFieldKind {\n+//     NamedField(Name, Visibility),\n+//     /// Element of a tuple-like struct\n+//     UnnamedField(Visibility),\n+// }\n+\n+// impl StructFieldKind {\n+//     pub fn is_unnamed(&self) -> bool {\n+//         match *self {\n+//             UnnamedField(..) => true,\n+//             NamedField(..) => false,\n+//         }\n+//     }\n+\n+//     pub fn visibility(&self) -> Visibility {\n+//         match *self {\n+//             NamedField(_, vis) | UnnamedField(vis) => vis,\n+//         }\n+//     }\n+// }\n \n /// Fields and Ids of enum variants and structs\n ///"}, {"sha": "f78f838d795d00c6d23f79715688b99e3ae82e87", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -669,7 +669,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n-    walk_opt_name(visitor, struct_field.span, struct_field.node.name());\n+    walk_opt_name(visitor, struct_field.span, struct_field.node.name);\n     visitor.visit_ty(&struct_field.node.ty);\n     walk_list!(visitor, visit_attribute, &struct_field.node.attrs);\n }"}, {"sha": "aab987b07e6be1c0339a67b89959b323a6060518", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -611,7 +611,8 @@ pub fn lower_struct_field(lctx: &LoweringContext, f: &StructField) -> hir::Struc\n     Spanned {\n         node: hir::StructField_ {\n             id: f.node.id,\n-            kind: lower_struct_field_kind(lctx, &f.node.kind),\n+            name: f.node.ident().map(|ident| ident.name),\n+            vis: lower_visibility(lctx, f.node.kind.visibility()),\n             ty: lower_ty(lctx, &f.node.ty),\n             attrs: lower_attrs(lctx, &f.node.attrs),\n         },\n@@ -1589,15 +1590,6 @@ pub fn lower_binding_mode(lctx: &LoweringContext, b: &BindingMode) -> hir::Bindi\n     }\n }\n \n-pub fn lower_struct_field_kind(lctx: &LoweringContext,\n-                               s: &StructFieldKind)\n-                               -> hir::StructFieldKind {\n-    match *s {\n-        NamedField(ident, vis) => hir::NamedField(ident.name, lower_visibility(lctx, vis)),\n-        UnnamedField(vis) => hir::UnnamedField(lower_visibility(lctx, vis)),\n-    }\n-}\n-\n pub fn lower_unsafe_source(_lctx: &LoweringContext, u: UnsafeSource) -> hir::UnsafeSource {\n     match u {\n         CompilerGenerated => hir::CompilerGenerated,"}, {"sha": "2ab4a7e8045ad29d7d4de95ee3c0af55f8b52ff1", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -915,14 +915,9 @@ impl<'a> State<'a> {\n             if struct_def.is_tuple() {\n                 try!(self.popen());\n                 try!(self.commasep(Inconsistent, struct_def.fields(), |s, field| {\n-                    match field.node.kind {\n-                        hir::NamedField(..) => panic!(\"unexpected named field\"),\n-                        hir::UnnamedField(vis) => {\n-                            try!(s.print_visibility(vis));\n-                            try!(s.maybe_print_comment(field.span.lo));\n-                            s.print_type(&field.node.ty)\n-                        }\n-                    }\n+                    try!(s.print_visibility(field.node.vis));\n+                    try!(s.maybe_print_comment(field.span.lo));\n+                    s.print_type(&field.node.ty)\n                 }));\n                 try!(self.pclose());\n             }\n@@ -939,19 +934,14 @@ impl<'a> State<'a> {\n             try!(self.hardbreak_if_not_bol());\n \n             for field in struct_def.fields() {\n-                match field.node.kind {\n-                    hir::UnnamedField(..) => panic!(\"unexpected unnamed field\"),\n-                    hir::NamedField(name, visibility) => {\n-                        try!(self.hardbreak_if_not_bol());\n-                        try!(self.maybe_print_comment(field.span.lo));\n-                        try!(self.print_outer_attributes(&field.node.attrs));\n-                        try!(self.print_visibility(visibility));\n-                        try!(self.print_name(name));\n-                        try!(self.word_nbsp(\":\"));\n-                        try!(self.print_type(&field.node.ty));\n-                        try!(word(&mut self.s, \",\"));\n-                    }\n-                }\n+                try!(self.hardbreak_if_not_bol());\n+                try!(self.maybe_print_comment(field.span.lo));\n+                try!(self.print_outer_attributes(&field.node.attrs));\n+                try!(self.print_visibility(field.node.vis));\n+                try!(self.print_name(field.node.name.unwrap()));\n+                try!(self.word_nbsp(\":\"));\n+                try!(self.print_type(&field.node.ty));\n+                try!(word(&mut self.s, \",\"));\n             }\n \n             self.bclose(span)"}, {"sha": "3cfaad0990ba45ce57afa1684d2b40173f61e845", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -283,7 +283,7 @@ impl LateLintPass for NonSnakeCase {\n     fn check_struct_def(&mut self, cx: &LateContext, s: &hir::VariantData,\n                         _: ast::Name, _: &hir::Generics, _: ast::NodeId) {\n         for sf in s.fields() {\n-            if let hir::StructField_ { kind: hir::NamedField(name, _), .. } = sf.node {\n+            if let Some(name) = sf.node.name {\n                 self.check_snake_case(cx, \"structure field\", &name.as_str(),\n                                       Some(sf.span));\n             }"}, {"sha": "957441a73df5a4a94685564d36fa7edd69a9cf2d", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -428,8 +428,8 @@ impl LateLintPass for MissingDoc {\n     }\n \n     fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n-        if let hir::NamedField(_, vis) = sf.node.kind {\n-            if vis == hir::Public || self.in_variant {\n+        if sf.node.name.is_some() {\n+            if sf.node.vis == hir::Public || self.in_variant {\n                 let cur_struct_def = *self.struct_def_stack.last()\n                     .expect(\"empty struct_def_stack\");\n                 self.check_missing_docs_attrs(cx, Some(cur_struct_def),"}, {"sha": "bd3ae6b433bf1d42f874b73edad2bb8a7946a1f9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     self.update(def.id(), item_level);\n                 }\n                 for field in def.fields() {\n-                    if field.node.kind.visibility() == hir::Public {\n+                    if field.node.vis == hir::Public {\n                         self.update(field.node.id, item_level);\n                     }\n                 }\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n             hir::ItemEnum(ref def, _) => {\n                 for variant in &def.variants {\n                     for field in variant.node.data.fields() {\n-                        check_inherited(field.span, field.node.kind.visibility(),\n+                        check_inherited(field.span, field.vis,\n                                         \"visibility qualifiers have no effect on variant fields\");\n                     }\n                 }\n@@ -1514,10 +1514,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n     }\n \n     fn visit_struct_field(&mut self, s: &hir::StructField) {\n-        let vis = match s.node.kind {\n-            hir::NamedField(_, vis) | hir::UnnamedField(vis) => vis\n-        };\n-        if vis == hir::Public || self.in_variant {\n+        if s.node.vis == hir::Public || self.in_variant {\n             intravisit::walk_struct_field(self, s);\n         }\n     }\n@@ -1728,7 +1725,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n                 if item.vis == hir::Public {\n                     check.visit_generics(generics);\n                     for field in struct_def.fields() {\n-                        if field.node.kind.visibility() == hir::Public {\n+                        if field.node.vis == hir::Public {\n                             check.visit_struct_field(field);\n                         }\n                     }"}, {"sha": "77e6dd73b4cc56d117c15c11b1818484e7ca1890", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -41,9 +41,7 @@ use rustc_front::hir::{ForeignItem, ForeignItemFn, ForeignItemStatic};\n use rustc_front::hir::{Item, ItemConst, ItemEnum, ItemExternCrate, ItemFn};\n use rustc_front::hir::{ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n-use rustc_front::hir::{NamedField, PathListIdent, PathListMod};\n-use rustc_front::hir::StmtDecl;\n-use rustc_front::hir::UnnamedField;\n+use rustc_front::hir::{PathListIdent, PathListMod, StmtDecl};\n use rustc_front::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n use rustc_front::hir::Visibility;\n use rustc_front::intravisit::{self, Visitor};\n@@ -384,12 +382,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // Record the def ID and fields of this struct.\n                 let named_fields = struct_def.fields()\n                                              .iter()\n-                                             .filter_map(|f| {\n-                                                 match f.node.kind {\n-                                                     NamedField(name, _) => Some(name),\n-                                                     UnnamedField(_) => None,\n-                                                 }\n-                                             })\n+                                             .filter_map(|f| f.node.name)\n                                              .collect();\n                 let item_def_id = self.ast_map.local_def_id(item.id);\n                 self.structs.insert(item_def_id, named_fields);"}, {"sha": "3d619c3294575b939cc61a0283c4b41eba384a8c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b60b948d94b835a1a573d34e44c55251c6cfa98/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8b60b948d94b835a1a573d34e44c55251c6cfa98", "patch": "@@ -978,24 +978,21 @@ fn convert_struct_variant<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let mut seen_fields: FnvHashMap<ast::Name, Span> = FnvHashMap();\n     let fields = def.fields().iter().map(|f| {\n         let fid = tcx.map.local_def_id(f.node.id);\n-        match f.node.kind {\n-            hir::NamedField(name, vis) => {\n-                let dup_span = seen_fields.get(&name).cloned();\n-                if let Some(prev_span) = dup_span {\n-                    let mut err = struct_span_err!(tcx.sess, f.span, E0124,\n-                                                   \"field `{}` is already declared\",\n-                                                   name);\n-                    span_note!(&mut err, prev_span, \"previously declared here\");\n-                    err.emit();\n-                } else {\n-                    seen_fields.insert(name, f.span);\n-                }\n-\n-                ty::FieldDefData::new(fid, name, vis)\n-            },\n-            hir::UnnamedField(vis) => {\n-                ty::FieldDefData::new(fid, special_idents::unnamed_field.name, vis)\n+        if let Some(name) = f.node.name {\n+            let dup_span = seen_fields.get(&name).cloned();\n+            if let Some(prev_span) = dup_span {\n+                let mut err = struct_span_err!(tcx.sess, f.span, E0124,\n+                                               \"field `{}` is already declared\",\n+                                               name);\n+                span_note!(&mut err, prev_span, \"previously declared here\");\n+                err.emit();\n+            } else {\n+                seen_fields.insert(name, f.span);\n             }\n+\n+            ty::FieldDefData::new(fid, name, f.node.vis)\n+        } else {\n+            ty::FieldDefData::new(fid, special_idents::unnamed_field.name, f.node.vis)\n         }\n     }).collect();\n     ty::VariantDefData {"}]}