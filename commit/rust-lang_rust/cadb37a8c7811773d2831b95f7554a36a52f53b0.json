{"sha": "cadb37a8c7811773d2831b95f7554a36a52f53b0", "node_id": "C_kwDOAAsO6NoAKGNhZGIzN2E4Yzc4MTE3NzNkMjgzMWI5NWY3NTU0YTM2YTUyZjUzYjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-11T16:59:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-11T16:59:46Z"}, "message": "Rollup merge of #101727 - est31:stabilize_map_first_last, r=m-ou-se\n\nStabilize map_first_last\n\nStabilizes the following functions:\n\n```Rust\nimpl<T> BTreeSet<T> {\n    pub fn first(&self) -> Option<&T> where T: Ord;\n    pub fn last(&self) -> Option<&T> where T: Ord;\n    pub fn pop_first(&mut self) -> Option<T> where T: Ord;\n    pub fn pop_last(&mut self) -> Option<T> where T: Ord;\n}\n\nimpl<K, V> BTreeMap<K, V> {\n    pub fn first_key_value(&self) -> Option<(&K, &V)> where K: Ord;\n    pub fn last_key_value(&self) -> Option<(&K, &V)> where K: Ord;\n    pub fn first_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> where K: Ord;\n    pub fn last_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> where K: Ord;\n    pub fn pop_first(&mut self) -> Option<(K, V)> where K: Ord;\n    pub fn pop_last(&mut self) -> Option<(K, V)> where K: Ord;\n}\n```\n\nCloses #62924\n\n~~Blocked on the [FCP](https://github.com/rust-lang/rust/issues/62924#issuecomment-1179489929) finishing.~~ Edit: It finished!", "tree": {"sha": "ed3f0628a010ac7152af0ab2e68d71dad48e1c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3f0628a010ac7152af0ab2e68d71dad48e1c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cadb37a8c7811773d2831b95f7554a36a52f53b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRaECCRBK7hj4Ov3rIwAAs5QIACykWlFotQJgVC/J6VjLhbJJ\nJhT39Z2dGv9T8Q3eiltoQt6BJO/lRd0N2wq8MZyh9IvM2JeOvGdmX7Vxp49uI4f/\nxzJJRkuRSagG8u1UsBNuY8MmYVJxXDWkQNh+IOorpf3ubBhuQ1heRYf4jXsvte/Y\nO+mlzgv83jevxvlx1EJAYuJMdGb7koARe0/214jDChI9HXHwdltCL/LjGLMsady5\nQyUmRxFLKcfx8V7C4iQHOX6woOyzGkwqjtvXd2Yvjb3mDR1kr/1JknohSqm8M4JP\n4eA2rgPPDPe1d5Tfq7WVS0xWPTYTZ4T/8lEmoAj2SOOS1pdh3vS0K96EzvyN1w4=\n=ScZY\n-----END PGP SIGNATURE-----\n", "payload": "tree ed3f0628a010ac7152af0ab2e68d71dad48e1c53\nparent 6d58ff7fe6d81a6fd7b8a09f720617f1e2c62819\nparent 2c72ea7748d4ed68178afa059a0853c3e97731e6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665507586 +0200\ncommitter GitHub <noreply@github.com> 1665507586 +0200\n\nRollup merge of #101727 - est31:stabilize_map_first_last, r=m-ou-se\n\nStabilize map_first_last\n\nStabilizes the following functions:\n\n```Rust\nimpl<T> BTreeSet<T> {\n    pub fn first(&self) -> Option<&T> where T: Ord;\n    pub fn last(&self) -> Option<&T> where T: Ord;\n    pub fn pop_first(&mut self) -> Option<T> where T: Ord;\n    pub fn pop_last(&mut self) -> Option<T> where T: Ord;\n}\n\nimpl<K, V> BTreeMap<K, V> {\n    pub fn first_key_value(&self) -> Option<(&K, &V)> where K: Ord;\n    pub fn last_key_value(&self) -> Option<(&K, &V)> where K: Ord;\n    pub fn first_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> where K: Ord;\n    pub fn last_entry(&mut self) -> Option<OccupiedEntry<'_, K, V>> where K: Ord;\n    pub fn pop_first(&mut self) -> Option<(K, V)> where K: Ord;\n    pub fn pop_last(&mut self) -> Option<(K, V)> where K: Ord;\n}\n```\n\nCloses #62924\n\n~~Blocked on the [FCP](https://github.com/rust-lang/rust/issues/62924#issuecomment-1179489929) finishing.~~ Edit: It finished!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cadb37a8c7811773d2831b95f7554a36a52f53b0", "html_url": "https://github.com/rust-lang/rust/commit/cadb37a8c7811773d2831b95f7554a36a52f53b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cadb37a8c7811773d2831b95f7554a36a52f53b0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d58ff7fe6d81a6fd7b8a09f720617f1e2c62819", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d58ff7fe6d81a6fd7b8a09f720617f1e2c62819", "html_url": "https://github.com/rust-lang/rust/commit/6d58ff7fe6d81a6fd7b8a09f720617f1e2c62819"}, {"sha": "2c72ea7748d4ed68178afa059a0853c3e97731e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c72ea7748d4ed68178afa059a0853c3e97731e6", "html_url": "https://github.com/rust-lang/rust/commit/2c72ea7748d4ed68178afa059a0853c3e97731e6"}], "stats": {"total": 33, "additions": 10, "deletions": 23}, "files": [{"sha": "45c84680ad298192c6b186d6473513a3e60eeba7", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadb37a8c7811773d2831b95f7554a36a52f53b0/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb37a8c7811773d2831b95f7554a36a52f53b0/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=cadb37a8c7811773d2831b95f7554a36a52f53b0", "patch": "@@ -32,7 +32,6 @@\n #![feature(exhaustive_patterns)]\n #![feature(get_mut_unchecked)]\n #![feature(if_let_guard)]\n-#![feature(map_first_last)]\n #![feature(negative_impls)]\n #![feature(never_type)]\n #![feature(extern_types)]"}, {"sha": "d418965cd2f6bcf25a49db0bd1e138c911a83766", "filename": "library/alloc/benches/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadb37a8c7811773d2831b95f7554a36a52f53b0/library%2Falloc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb37a8c7811773d2831b95f7554a36a52f53b0/library%2Falloc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Flib.rs?ref=cadb37a8c7811773d2831b95f7554a36a52f53b0", "patch": "@@ -3,7 +3,6 @@\n #![cfg(not(target_os = \"android\"))]\n #![feature(btree_drain_filter)]\n #![feature(iter_next_chunk)]\n-#![feature(map_first_last)]\n #![feature(repr_simd)]\n #![feature(slice_partition_dedup)]\n #![feature(test)]"}, {"sha": "73bc1c21d5577182ea9b79e62484eb03210f5017", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cadb37a8c7811773d2831b95f7554a36a52f53b0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb37a8c7811773d2831b95f7554a36a52f53b0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=cadb37a8c7811773d2831b95f7554a36a52f53b0", "patch": "@@ -703,7 +703,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -712,7 +711,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// map.insert(2, \"a\");\n     /// assert_eq!(map.first_key_value(), Some((&1, &\"b\")));\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn first_key_value(&self) -> Option<(&K, &V)>\n     where\n         K: Ord,\n@@ -727,7 +726,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -741,7 +739,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// assert_eq!(*map.get(&1).unwrap(), \"first\");\n     /// assert_eq!(*map.get(&2).unwrap(), \"b\");\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn first_entry(&mut self) -> Option<OccupiedEntry<'_, K, V, A>>\n     where\n         K: Ord,\n@@ -765,7 +763,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Draining elements in ascending order, while keeping a usable map each iteration.\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -776,7 +773,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// }\n     /// assert!(map.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_first(&mut self) -> Option<(K, V)>\n     where\n         K: Ord,\n@@ -792,15 +789,14 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n     /// map.insert(1, \"b\");\n     /// map.insert(2, \"a\");\n     /// assert_eq!(map.last_key_value(), Some((&2, &\"a\")));\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn last_key_value(&self) -> Option<(&K, &V)>\n     where\n         K: Ord,\n@@ -815,7 +811,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -829,7 +824,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// assert_eq!(*map.get(&1).unwrap(), \"a\");\n     /// assert_eq!(*map.get(&2).unwrap(), \"last\");\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn last_entry(&mut self) -> Option<OccupiedEntry<'_, K, V, A>>\n     where\n         K: Ord,\n@@ -853,7 +848,6 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// Draining elements in descending order, while keeping a usable map each iteration.\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut map = BTreeMap::new();\n@@ -864,7 +858,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// }\n     /// assert!(map.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_last(&mut self) -> Option<(K, V)>\n     where\n         K: Ord,"}, {"sha": "b8e5cf8eb5a82d972d1a4bfab45588164dc01fd4", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cadb37a8c7811773d2831b95f7554a36a52f53b0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb37a8c7811773d2831b95f7554a36a52f53b0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=cadb37a8c7811773d2831b95f7554a36a52f53b0", "patch": "@@ -786,7 +786,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -797,7 +796,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// assert_eq!(set.first(), Some(&1));\n     /// ```\n     #[must_use]\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn first(&self) -> Option<&T>\n     where\n         T: Ord,\n@@ -813,7 +812,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -824,7 +822,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// assert_eq!(set.last(), Some(&2));\n     /// ```\n     #[must_use]\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn last(&self) -> Option<&T>\n     where\n         T: Ord,\n@@ -838,7 +836,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -849,7 +846,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// }\n     /// assert!(set.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_first(&mut self) -> Option<T>\n     where\n         T: Ord,\n@@ -863,7 +860,6 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_first_last)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut set = BTreeSet::new();\n@@ -874,7 +870,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// }\n     /// assert!(set.is_empty());\n     /// ```\n-    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn pop_last(&mut self) -> Option<T>\n     where\n         T: Ord,"}, {"sha": "8d754bad1b3cd90e907d6a86372b23e583371d96", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cadb37a8c7811773d2831b95f7554a36a52f53b0/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cadb37a8c7811773d2831b95f7554a36a52f53b0/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=cadb37a8c7811773d2831b95f7554a36a52f53b0", "patch": "@@ -1,5 +1,4 @@\n #![feature(rustc_private)]\n-#![feature(map_first_last)]\n #![feature(map_try_insert)]\n #![feature(never_type)]\n #![feature(try_blocks)]"}]}