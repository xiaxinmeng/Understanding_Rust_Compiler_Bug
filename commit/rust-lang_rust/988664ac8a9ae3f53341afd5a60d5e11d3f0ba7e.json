{"sha": "988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODY2NGFjOGE5YWUzZjUzMzQxYWZkNWE2MGQ1ZTExZDNmMGJhN2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-20T20:59:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-21T16:26:34Z"}, "message": "rustdoc: Fix file locking on windows\n\nIf the dwShareMode parameter is 0 on windows, it \"prevents other processes from\nopening a file or device if they request delete, read, or write access\", which\nis the opposite of what we want! This changes the 0 parameter to something which\nwill allow multiple processes to open the file and then lock it.", "tree": {"sha": "b12922a555cfc729323edff7a6e984418c06b8d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b12922a555cfc729323edff7a6e984418c06b8d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e", "html_url": "https://github.com/rust-lang/rust/commit/988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7334c11b4b196e39da2418a239e2ff916896fa19", "url": "https://api.github.com/repos/rust-lang/rust/commits/7334c11b4b196e39da2418a239e2ff916896fa19", "html_url": "https://github.com/rust-lang/rust/commit/7334c11b4b196e39da2418a239e2ff916896fa19"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "c1e5d66b1d214fc3560711fa1e89a39ff307bed7", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=988664ac8a9ae3f53341afd5a60d5e11d3f0ba7e", "patch": "@@ -135,6 +135,7 @@ mod imp {\n     use std::libc;\n     use std::mem;\n     use std::os::win32::as_utf16_p;\n+    use std::os;\n     use std::ptr;\n \n     static LOCKFILE_EXCLUSIVE_LOCK: libc::DWORD = 0x00000002;\n@@ -160,20 +161,29 @@ mod imp {\n     impl Lock {\n         pub fn new(p: &Path) -> Lock {\n             let handle = as_utf16_p(p.as_str().unwrap(), |p| unsafe {\n-                libc::CreateFileW(p, libc::GENERIC_READ, 0, ptr::mut_null(),\n+                libc::CreateFileW(p,\n+                                  libc::FILE_GENERIC_READ |\n+                                    libc::FILE_GENERIC_WRITE,\n+                                  libc::FILE_SHARE_READ |\n+                                    libc::FILE_SHARE_DELETE |\n+                                    libc::FILE_SHARE_WRITE,\n+                                  ptr::mut_null(),\n                                   libc::CREATE_ALWAYS,\n                                   libc::FILE_ATTRIBUTE_NORMAL,\n                                   ptr::mut_null())\n             });\n-            assert!(handle as uint != libc::INVALID_HANDLE_VALUE as uint);\n+            if handle as uint == libc::INVALID_HANDLE_VALUE as uint {\n+                fail!(\"create file error: {}\", os::last_os_error());\n+            }\n             let mut overlapped: libc::OVERLAPPED = unsafe { mem::init() };\n             let ret = unsafe {\n                 LockFileEx(handle, LOCKFILE_EXCLUSIVE_LOCK, 0, 100, 0,\n                            &mut overlapped)\n             };\n             if ret == 0 {\n                 unsafe { libc::CloseHandle(handle); }\n-                fail!(\"could not lock `{}`\", p.display())\n+                fail!(\"could not lock `{}`: {}\", p.display(),\n+                      os::last_os_error())\n             }\n             Lock { handle: handle }\n         }"}]}