{"sha": "457eede79521d947fcfe067270652c0294c7fcd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1N2VlZGU3OTUyMWQ5NDdmY2ZlMDY3MjcwNjUyYzAyOTRjN2ZjZDk=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T15:28:06Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-09T15:40:50Z"}, "message": "Add gen default for tuple structs", "tree": {"sha": "9509805beda3aa1124d20f67b71d62e2ed1c7e6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9509805beda3aa1124d20f67b71d62e2ed1c7e6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457eede79521d947fcfe067270652c0294c7fcd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457eede79521d947fcfe067270652c0294c7fcd9", "html_url": "https://github.com/rust-lang/rust/commit/457eede79521d947fcfe067270652c0294c7fcd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457eede79521d947fcfe067270652c0294c7fcd9/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423860cd7e1dd7d32635802d6c3368d97b3caaf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/423860cd7e1dd7d32635802d6c3368d97b3caaf2", "html_url": "https://github.com/rust-lang/rust/commit/423860cd7e1dd7d32635802d6c3368d97b3caaf2"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "1bd7040b5f52d8392a9d7a8a378ac09e6c8fc7e3", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/457eede79521d947fcfe067270652c0294c7fcd9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457eede79521d947fcfe067270652c0294c7fcd9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=457eede79521d947fcfe067270652c0294c7fcd9", "patch": "@@ -279,7 +279,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) ->\n \n /// Generate a `Debug` impl based on the fields and members of the target type.\n fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    match adt {\n+    return match adt {\n         // `Debug` cannot be derived for unions, so no default impl can be provided.\n         ast::Adt::Union(_) => Some(()),\n         // Deriving `Debug` for enums is not stable yet.\n@@ -289,10 +289,7 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                 Some(ast::FieldList::RecordFieldList(field_list)) => {\n                     let mut fields = vec![];\n                     for field in field_list.fields() {\n-                        let trait_name = make::ext::ident_path(\"Default\");\n-                        let method_name = make::ext::ident_path(\"default\");\n-                        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n-                        let method_call = make::expr_call(fn_name, make::arg_list(None));\n+                        let method_call = gen_default_call();\n                         let name_ref = make::name_ref(&field.name()?.to_string());\n                         let field = make::record_expr_field(name_ref, Some(method_call));\n                         fields.push(field);\n@@ -302,23 +299,27 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                     make::record_expr(struct_name, fields).into()\n                 }\n                 Some(ast::FieldList::TupleFieldList(field_list)) => {\n-                    let mut fields = vec![];\n-                    for _ in field_list.fields() {\n-                        let trait_name = make::ext::ident_path(\"Default\");\n-                        let method_name = make::ext::ident_path(\"default\");\n-                        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n-                        let method_call = make::expr_call(fn_name, make::arg_list(None));\n-                        fields.push(method_call);\n-                    }\n                     let struct_name = make::expr_path(make::ext::ident_path(\"Self\"));\n+                    let fields = field_list.fields().map(|_| gen_default_call());\n                     make::expr_call(struct_name, make::arg_list(fields))\n                 }\n-                None => todo!(),\n+                None => {\n+                    let struct_name = make::ext::ident_path(\"Self\");\n+                    let fields = make::record_expr_field_list(None);\n+                    make::record_expr(struct_name, fields).into()\n+                }\n             };\n             let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n             ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n-            Some(())\n+            return Some(());\n         }\n+    };\n+\n+    fn gen_default_call() -> ast::Expr {\n+        let trait_name = make::ext::ident_path(\"Default\");\n+        let method_name = make::ext::ident_path(\"default\");\n+        let fn_name = make::expr_path(make::path_concat(trait_name, method_name));\n+        make::expr_call(fn_name, make::arg_list(None))\n     }\n }\n fn update_attribute(\n@@ -494,6 +495,26 @@ impl Default for Foo {\n         Self(Default::default())\n     }\n }\n+\"#,\n+        )\n+    }\n+    #[test]\n+    fn add_custom_impl_default_empty_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: default\n+#[derive(Defau$0lt)]\n+struct Foo;\n+\"#,\n+            r#\"\n+struct Foo;\n+\n+impl Default for Foo {\n+    $0fn default() -> Self {\n+        Self {  }\n+    }\n+}\n \"#,\n         )\n     }"}, {"sha": "c37a0aa1efb0eea6b497f104150056c477fddf59", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/457eede79521d947fcfe067270652c0294c7fcd9/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457eede79521d947fcfe067270652c0294c7fcd9/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=457eede79521d947fcfe067270652c0294c7fcd9", "patch": "@@ -346,14 +346,6 @@ pub mod fmt {\n }\n // endregion:fmt\n \n-// region:default\n-pub mod default {\n-    pub trait Default {\n-        fn default() -> Self;\n-    }\n-}\n-// endregion:default\n-\n // region:slice\n pub mod slice {\n     #[lang = \"slice\"]"}]}