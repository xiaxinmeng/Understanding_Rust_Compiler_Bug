{"sha": "d81d86440f16d9f6bc6a97625615da7b51167669", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MWQ4NjQ0MGYxNmQ5ZjZiYzZhOTc2MjU2MTVkYTdiNTExNjc2Njk=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-19T00:17:50Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-19T00:21:55Z"}, "message": "Handle sequential let semantics properly in typestate\n\nCloses #824", "tree": {"sha": "efeb19228a4a872d76a34a8b1f5f881a7edf76b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efeb19228a4a872d76a34a8b1f5f881a7edf76b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81d86440f16d9f6bc6a97625615da7b51167669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81d86440f16d9f6bc6a97625615da7b51167669", "html_url": "https://github.com/rust-lang/rust/commit/d81d86440f16d9f6bc6a97625615da7b51167669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81d86440f16d9f6bc6a97625615da7b51167669/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ddb26e9931ab48c3c392b99b07b937d39444e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddb26e9931ab48c3c392b99b07b937d39444e72", "html_url": "https://github.com/rust-lang/rust/commit/3ddb26e9931ab48c3c392b99b07b937d39444e72"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "9c54b8f15a34fe3aa5b96e5743f68226902f7a7c", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d81d86440f16d9f6bc6a97625615da7b51167669/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d86440f16d9f6bc6a97625615da7b51167669/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=d81d86440f16d9f6bc6a97625615da7b51167669", "patch": "@@ -4,20 +4,7 @@ import std::option;\n import std::option::none;\n import std::option::some;\n \n-import tstate::ann::pre_and_post;\n-import tstate::ann::get_post;\n-import tstate::ann::postcond;\n-import tstate::ann::true_precond;\n-import tstate::ann::false_postcond;\n-import tstate::ann::empty_poststate;\n-import tstate::ann::require;\n-import tstate::ann::require_and_preserve;\n-import tstate::ann::union;\n-import tstate::ann::intersect;\n-import tstate::ann::pp_clone;\n-import tstate::ann::empty_prestate;\n-import tstate::ann::set_precondition;\n-import tstate::ann::set_postcondition;\n+import tstate::ann::*;\n import aux::*;\n import bitvectors::bit_num;\n import bitvectors::promises;\n@@ -28,7 +15,7 @@ import bitvectors::declare_var;\n import bitvectors::gen_poststate;\n import bitvectors::relax_precond_block;\n import bitvectors::gen;\n-import tritv::tritv_clone;\n+import tritv::*;\n import syntax::ast::*;\n import syntax::visit;\n import std::map::new_int_hash;\n@@ -591,6 +578,8 @@ fn find_pre_post_stmt(fcx: &fn_ctxt, s: &stmt) {\n       stmt_decl(adecl, id) {\n         alt adecl.node {\n           decl_local(alocals) {\n+            let e_pp;\n+            let prev_pp = empty_pre_post(num_constraints(fcx.enclosing));\n             for alocal: @local in alocals {\n                 alt alocal.node.init {\n                   some(an_init) {\n@@ -611,7 +600,16 @@ fn find_pre_post_stmt(fcx: &fn_ctxt, s: &stmt) {\n                     }\n \n                     for each pat: @pat in pat_bindings(alocal.node.pat) {\n-                        let ident = alt pat.node { pat_bind(n) { n } };\n+                        /* FIXME: This won't be necessary when typestate\n+                        works well enough for pat_bindings to return a\n+                        refinement-typed thing. */\n+                        let ident = alt pat.node {\n+                          pat_bind(n) { n }\n+                          _ {\n+                            fcx.ccx.tcx.sess.span_bug(pat.span,\n+                                                      \"Impossible LHS\");\n+                          }\n+                        };\n                         alt p {\n                           some(p) {\n                             copy_in_postcond(fcx, id,\n@@ -629,6 +627,29 @@ fn find_pre_post_stmt(fcx: &fn_ctxt, s: &stmt) {\n                     if an_init.op == init_move && is_path(an_init.expr) {\n                         forget_in_postcond(fcx, id, an_init.expr.id);\n                     }\n+\n+                    /* Clear out anything that the previous initializer\n+                    guaranteed */\n+                    e_pp = expr_pp(fcx.ccx, an_init.expr);\n+                    tritv_copy(prev_pp.precondition,\n+                               seq_preconds(fcx, [prev_pp, e_pp]));\n+                    /* Include the LHSs too, since those aren't in the\n+                     postconds of the RHSs themselves */\n+                    for each pat: @pat in pat_bindings(alocal.node.pat) {\n+                        alt pat.node {\n+                          pat_bind(n) {\n+                            set_in_postcond(bit_num(fcx, ninit(pat.id, n)),\n+                                            prev_pp);\n+                          }\n+                          _ {\n+                            fcx.ccx.tcx.sess.span_bug(pat.span,\n+                                                      \"Impossible LHS\");\n+                          }\n+                        };\n+                    }\n+                    copy_pre_post_(fcx.ccx, id,\n+                                   prev_pp.precondition,\n+                                   prev_pp.postcondition);\n                   }\n                   none. {\n                     for each p: @pat in pat_bindings(alocal.node.pat) {"}, {"sha": "fbc8db94bd0b277ae02447665ab2450bd6f9f13a", "filename": "src/test/run-pass/multi-let.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d81d86440f16d9f6bc6a97625615da7b51167669/src%2Ftest%2Frun-pass%2Fmulti-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81d86440f16d9f6bc6a97625615da7b51167669/src%2Ftest%2Frun-pass%2Fmulti-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-let.rs?ref=d81d86440f16d9f6bc6a97625615da7b51167669", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x = 10, y = x;\n+    assert (y == 10);\n+}\n\\ No newline at end of file"}]}