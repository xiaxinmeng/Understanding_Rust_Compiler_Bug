{"sha": "38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "node_id": "C_kwDOAAsO6NoAKDM4YmZhOWM0ZjgzYjkyYzdlY2UwZmYzYTc4ZTFiYTE2ZTdhOWNmODA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-27T20:35:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-27T20:35:06Z"}, "message": "Rollup merge of #98331 - GuillaumeGomez:rustdoc-arg-error, r=notriddle\n\nFix rustdoc argument error\n\nFixes #88756.\n\nIt's a take over of #88831. I cherry-picked the commits, fixed the merge conflict and the failing test.\n\ncc `@inashivb` `@jyn514`\n\nr? `@notriddle`", "tree": {"sha": "7acd4ed5aee1df251e60fbfb5e2a8ba52f2dc9b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7acd4ed5aee1df251e60fbfb5e2a8ba52f2dc9b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiuhR7CRBK7hj4Ov3rIwAAu6cIAAg3uhFrXu6qv6xYdZD5hpPu\nXoYQWZXw3nBxJPFUnMtHFi32VEHKYNOpKGNwGDPdbJW7P+5rKQK71slgaxizJOT3\nuxqHOp4G6NYumrV0dRB+T4ubI1l131QLROJtrC3/QyBHv4r2RI5urOixd7sbTqmB\nSaIfDYt/h7whDqm+6gCynQDLqzwF+zjVQ3Dn3XrRCbWduMCNjrIzbdvv1IiKVxbB\nFROdP+poeNH7PfrTfi7Zuh8BXRm0HRYsadL9PN/Wp18kMJIBSip11SvLZb9lzuIT\n1D2dLUbzlwOCrl0dr1ifR8o/ZM55ggXnhMDE7dqUTFtg8lUavf1k2wpc1XdHleI=\n=2dPG\n-----END PGP SIGNATURE-----\n", "payload": "tree 7acd4ed5aee1df251e60fbfb5e2a8ba52f2dc9b0\nparent 8e52fa87ebbe3ea2ad38b429292e4a22300188d7\nparent 768129d4bdca2354cecb5c0ab91ae555864d49d0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656362106 +0200\ncommitter GitHub <noreply@github.com> 1656362106 +0200\n\nRollup merge of #98331 - GuillaumeGomez:rustdoc-arg-error, r=notriddle\n\nFix rustdoc argument error\n\nFixes #88756.\n\nIt's a take over of #88831. I cherry-picked the commits, fixed the merge conflict and the failing test.\n\ncc `@inashivb` `@jyn514`\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "html_url": "https://github.com/rust-lang/rust/commit/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "html_url": "https://github.com/rust-lang/rust/commit/8e52fa87ebbe3ea2ad38b429292e4a22300188d7"}, {"sha": "768129d4bdca2354cecb5c0ab91ae555864d49d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/768129d4bdca2354cecb5c0ab91ae555864d49d0", "html_url": "https://github.com/rust-lang/rust/commit/768129d4bdca2354cecb5c0ab91ae555864d49d0"}], "stats": {"total": 642, "additions": 614, "deletions": 28}, "files": [{"sha": "3096af90d47702d481f7d39934c4784a1c6ec6c5", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -932,7 +932,7 @@ fn describe_codegen_flags() {\n     print_flag_list(\"-C\", config::CG_OPTIONS);\n }\n \n-fn print_flag_list<T>(\n+pub fn print_flag_list<T>(\n     cmdline_opt: &str,\n     flag_list: &[(&'static str, T, &'static str, &'static str)],\n ) {"}, {"sha": "6e3651665c8c406b2f49897d39a16e8eb807113d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -6,6 +6,7 @@ use std::path::PathBuf;\n use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_driver::print_flag_list;\n use rustc_session::config::{\n     self, parse_crate_types_from_list, parse_externs, parse_target_triple, CrateType,\n };\n@@ -310,11 +311,15 @@ impl RenderOptions {\n impl Options {\n     /// Parses the given command-line for options. If an error message or other early-return has\n     /// been printed, returns `Err` with the exit code.\n-    pub(crate) fn from_matches(matches: &getopts::Matches) -> Result<Options, i32> {\n+    pub(crate) fn from_matches(\n+        matches: &getopts::Matches,\n+        args: Vec<String>,\n+    ) -> Result<Options, i32> {\n+        let args = &args[1..];\n         // Check for unstable options.\n         nightly_options::check_nightly_options(matches, &opts());\n \n-        if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n+        if args.is_empty() || matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n             crate::usage(\"rustdoc\");\n             return Err(0);\n         } else if matches.opt_present(\"version\") {\n@@ -335,6 +340,21 @@ impl Options {\n         // check for deprecated options\n         check_deprecated_options(matches, &diag);\n \n+        let z_flags = matches.opt_strs(\"Z\");\n+        if z_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-Z\", config::DB_OPTIONS);\n+            return Err(0);\n+        }\n+        let c_flags = matches.opt_strs(\"C\");\n+        if c_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-C\", config::CG_OPTIONS);\n+            return Err(0);\n+        }\n+        let w_flags = matches.opt_strs(\"W\");\n+        if w_flags.iter().any(|x| *x == \"help\") {\n+            print_flag_list(\"-W\", config::DB_OPTIONS);\n+            return Err(0);\n+        }\n         if matches.opt_strs(\"passes\") == [\"list\"] {\n             println!(\"Available passes for running rustdoc:\");\n             for pass in passes::PASSES {"}, {"sha": "db4c3d102370097d35eab949f29208ca70911f88", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -686,7 +686,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n \n     // Note that we discard any distinction between different non-zero exit\n     // codes from `from_matches` here.\n-    let options = match config::Options::from_matches(&matches) {\n+    let options = match config::Options::from_matches(&matches, args) {\n         Ok(opts) => opts,\n         Err(code) => {\n             return if code == 0 {"}, {"sha": "cacbcbf3933a44e4e2811fe98d92a3e356af344c", "filename": "src/test/run-make/issue-88756-default-output/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FMakefile?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1,4 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(BARE_RUSTDOC) 2>&1 | sed -E 's@/nightly/|/beta/|/stable/|/1\\.[0-9]+\\.[0-9]+/@/$$CHANNEL/@g' | diff - output-default.stdout"}, {"sha": "8cbfac4f7d2f10d659e80fa048961e12d8981234", "filename": "src/test/run-make/issue-88756-default-output/README.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2FREADME.md?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1 @@\n+This is a test to verify that the default behavior of `rustdoc` is printing out help output instead of erroring out (#88756)."}, {"sha": "6d16fe5673bc136e848ac1d8278738fdd5e40770", "filename": "src/test/run-make/issue-88756-default-output/output-default.stdout", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1,193 @@\n+rustdoc [options] <input>\n+\n+Options:\n+    -h, --help          show this help message\n+    -V, --version       print rustdoc's version\n+    -v, --verbose       use verbose output\n+    -w, --output-format [html]\n+                        the output type to write\n+        --output PATH   Which directory to place the output. This option is\n+                        deprecated, use --out-dir instead.\n+    -o, --out-dir PATH  which directory to place the output\n+        --crate-name NAME\n+                        specify the name of this crate\n+        --crate-type [bin|lib|rlib|dylib|cdylib|staticlib|proc-macro]\n+                        Comma separated list of types of crates\n+                        for the compiler to emit\n+    -L, --library-path DIR\n+                        directory to add to crate search path\n+        --cfg           pass a --cfg to rustc\n+        --check-cfg     pass a --check-cfg to rustc\n+        --extern NAME[=PATH]\n+                        pass an --extern to rustc\n+        --extern-html-root-url NAME=URL\n+                        base URL to use for dependencies; for example,\n+                        \"std=/doc\" links std::vec::Vec to\n+                        /doc/std/vec/struct.Vec.html\n+        --extern-html-root-takes-precedence \n+                        give precedence to `--extern-html-root-url`, not\n+                        `html_root_url`\n+    -C, --codegen OPT[=VALUE]\n+                        pass a codegen option to rustc\n+        --document-private-items \n+                        document private items\n+        --document-hidden-items \n+                        document items that have doc(hidden)\n+        --test          run code examples as tests\n+        --test-args ARGS\n+                        arguments to pass to the test runner\n+        --test-run-directory PATH\n+                        The working directory in which to run tests\n+        --target TRIPLE target triple to document\n+        --markdown-css FILES\n+                        CSS files to include via <link> in a rendered Markdown\n+                        file\n+        --html-in-header FILES\n+                        files to include inline in the <head> section of a\n+                        rendered Markdown file or generated documentation\n+        --html-before-content FILES\n+                        files to include inline between <body> and the content\n+                        of a rendered Markdown file or generated documentation\n+        --html-after-content FILES\n+                        files to include inline between the content and\n+                        </body> of a rendered Markdown file or generated\n+                        documentation\n+        --markdown-before-content FILES\n+                        files to include inline between <body> and the content\n+                        of a rendered Markdown file or generated documentation\n+        --markdown-after-content FILES\n+                        files to include inline between the content and\n+                        </body> of a rendered Markdown file or generated\n+                        documentation\n+        --markdown-playground-url URL\n+                        URL to send code snippets to\n+        --markdown-no-toc \n+                        don't include table of contents\n+    -e, --extend-css PATH\n+                        To add some CSS rules with a given file to generate\n+                        doc with your own theme. However, your theme might\n+                        break if the rustdoc's generated HTML changes, so be\n+                        careful!\n+    -Z FLAG             internal and debugging options (only on nightly build)\n+        --sysroot PATH  Override the system root\n+        --playground-url URL\n+                        URL to send code snippets to, may be reset by\n+                        --markdown-playground-url or\n+                        `#![doc(html_playground_url=...)]`\n+        --display-doctest-warnings \n+                        show warnings that originate in doctests\n+        --crate-version VERSION\n+                        crate version to print into documentation\n+        --sort-modules-by-appearance \n+                        sort modules by where they appear in the program,\n+                        rather than alphabetically\n+        --default-theme THEME\n+                        Set the default theme. THEME should be the theme name,\n+                        generally lowercase. If an unknown default theme is\n+                        specified, the builtin default is used. The set of\n+                        themes, and the rustdoc built-in default, are not\n+                        stable.\n+        --default-setting SETTING[=VALUE]\n+                        Default value for a rustdoc setting (used when\n+                        \"rustdoc-SETTING\" is absent from web browser Local\n+                        Storage). If VALUE is not supplied, \"true\" is used.\n+                        Supported SETTINGs and VALUEs are not documented and\n+                        not stable.\n+        --theme FILES   additional themes which will be added to the generated\n+                        docs\n+        --check-theme FILES\n+                        check if given theme is valid\n+        --resource-suffix PATH\n+                        suffix to add to CSS and JavaScript files, e.g.,\n+                        \"light.css\" will become \"light-suffix.css\"\n+        --edition EDITION\n+                        edition to use when compiling rust code (default:\n+                        2015)\n+        --color auto|always|never\n+                        Configure coloring of output:\n+                        auto = colorize, if output goes to a tty (default);\n+                        always = always colorize output;\n+                        never = never colorize output\n+        --error-format human|json|short\n+                        How errors and other messages are produced\n+        --json CONFIG   Configure the structure of JSON diagnostics\n+        --disable-minification \n+                        Disable minification applied on JS files\n+    -A, --allow LINT    Set lint allowed\n+    -W, --warn LINT     Set lint warnings\n+        --force-warn LINT\n+                        Set lint force-warn\n+    -D, --deny LINT     Set lint denied\n+    -F, --forbid LINT   Set lint forbidden\n+        --cap-lints LEVEL\n+                        Set the most restrictive lint level. More restrictive\n+                        lints are capped at this level. By default, it is at\n+                        `forbid` level.\n+        --index-page PATH\n+                        Markdown file to be used as index page\n+        --enable-index-page \n+                        To enable generation of the index page\n+        --static-root-path PATH\n+                        Path string to force loading static files from in\n+                        output pages. If not set, uses combinations of '../'\n+                        to reach the documentation root.\n+        --disable-per-crate-search \n+                        disables generating the crate selector on the search\n+                        box\n+        --persist-doctests PATH\n+                        Directory to persist doctest executables into\n+        --show-coverage \n+                        calculate percentage of public items with\n+                        documentation\n+        --enable-per-target-ignores \n+                        parse ignore-foo for ignoring doctests on a per-target\n+                        basis\n+        --runtool The tool to run tests with when building for a different target than host\n+                        \n+        --runtool-arg One (of possibly many) arguments to pass to the runtool\n+                        \n+        --test-builder PATH\n+                        The rustc-like binary to use as the test builder\n+        --check         Run rustdoc checks\n+        --generate-redirect-map \n+                        Generate JSON file at the top level instead of\n+                        generating HTML redirection files\n+        --emit [unversioned-shared-resources,toolchain-shared-resources,invocation-specific]\n+                        Comma separated list of types of output for rustdoc to\n+                        emit\n+        --no-run        Compile doctests without running them\n+        --show-type-layout \n+                        Include the memory layout of types in the docs\n+        --nocapture     Don't capture stdout and stderr of tests\n+        --generate-link-to-definition \n+                        Make the identifiers in the HTML source code pages\n+                        navigable\n+        --scrape-examples-output-path collect function call information and output at the given path\n+                        \n+        --scrape-examples-target-crate collect function call information for functions from the target crate\n+                        \n+        --scrape-tests  Include test code when scraping examples\n+        --with-examples path to function call information (for displaying examples in the documentation)\n+                        \n+        --plugin-path DIR\n+                        removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+        --passes PASSES removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+        --plugins PLUGINS\n+                        removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+        --no-defaults   removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+    -r, --input-format [rust]\n+                        removed, see issue #44136\n+                        <https://github.com/rust-lang/rust/issues/44136> for\n+                        more information\n+\n+    @path               Read newline separated options from `path`\n+\n+More information available at https://doc.rust-lang.org/$CHANNEL/rustdoc/what-is-rustdoc.html"}, {"sha": "5df7576133a684ab8f887f442084e99062eb4886", "filename": "src/test/run-make/issue-88756-default-output/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Fx.rs?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1 @@\n+// nothing to see here"}, {"sha": "8ababbf5b4ebd76659800c295e8aef5aab9030db", "filename": "src/test/run-make/issue-88756-opt-help/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FMakefile?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1,4 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTDOC) -W help 2>&1 | diff - output-default.stdout"}, {"sha": "9b742753f25b6b86300baaad0b3f3b97b463072c", "filename": "src/test/run-make/issue-88756-opt-help/README.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2FREADME.md?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1 @@\n+This is a test to verify that `rustdoc` behaves the same as rustc and prints out help output for its options like -W (#88756)."}, {"sha": "5cb7ecb649a962b89b9912e1ca8018f71e1f9da3", "filename": "src/test/run-make/issue-88756-opt-help/output-default.stdout", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Foutput-default.stdout?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1,193 @@\n+    -W                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -W                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -W               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -W                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -W                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -W                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -W                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -W                           cf-protection=val -- instrument control-flow architecture protection\n+    -W               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -W                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n+    -W                         codegen-backend=val -- the backend to use\n+    -W                             combine-cgu=val -- combine CGUs into a single one\n+    -W                              crate-attr=val -- inject the given attribute in the crate\n+    -W                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -W                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -W                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -W                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -W                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -W                                 dlltool=val -- import library generation tool (windows-gnu only)\n+    -W                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -W                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -W                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -W                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -W                                dump-mir=val -- dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n+    -W                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -W                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -W            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -W                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -W                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -W                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -W                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -W              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -W                                    fuel=val -- set the optimization fuel quota for a crate\n+    -W                       function-sections=val -- whether each function should go in its own section\n+    -W                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -W                                  gcc-ld=val -- implementation of ld used by cc\n+    -W                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -W                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -W                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -W                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -W                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -W                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -W                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -W              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -W                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -W                              inline-mir=val -- enable MIR inlining (default: no)\n+    -W                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -W               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -W                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -W                             input-stats=val -- gather statistics about the input (default: no)\n+    -W                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -W                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -W                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -W                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -W                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -W                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -W                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -W                         location-detail=val -- comma separated list of location details to be tracked when using caller_location valid options are `file`, `line`, and `column` (default: all)\n+    -W                                      ls=val -- list the symbols defined by a library crate (default: no)\n+    -W                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -W                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -W                              meta-stats=val -- gather metadata statistics (default: no)\n+    -W                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -W                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -W                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -W                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -W                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -W                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n+    -W                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -W                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -W                             no-analysis=val -- parse and expand the source, but run no analysis\n+    -W                              no-codegen=val -- run all passes except codegen; no output\n+    -W              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -W                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n+    -W                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -W                                 no-link=val -- compile without linking\n+    -W                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -W                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -W                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -W                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -W                                     oom=val -- panic strategy for out-of-memory handling\n+    -W                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -W                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -W                           panic-in-drop=val -- panic strategy for panics in drops\n+    -W                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -W                              perf-stats=val -- print some performance-related statistics (default: no)\n+    -W pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n+    -W                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\n+    -W                                polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -W                            polymorphize=val -- perform polymorphization analysis\n+    -W                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -W                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -W           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -W                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -W                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -W                        print-mono-items=val -- print the result of the monomorphization collection pass\n+    -W                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -W                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -W                                 profile=val -- insert profiling code (default: no)\n+    -W                        profile-closures=val -- profile size of closures\n+    -W                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -W                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -W                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -W                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -W                        randomize-layout=val -- randomize the layout of types (default: no)\n+    -W                             layout-seed=val -- seed layout randomization\n+    -W                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -W                             relro-level=val -- choose which RELRO level to use\n+    -W                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -W         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -W                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -W                               sanitizer=val -- use a sanitizer\n+    -W          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -W                       sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -W                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -W                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n+    -W                            self-profile=val -- run the self profiler and output the raw event data\n+    -W                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n+    -W                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n+    -W                          share-generics=val -- make the current crate share its generic instantiations\n+    -W                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -W                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -W                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -W                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -W                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -W                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -W                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -W                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n+\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\n+    -W                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -W                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -W                                   teach=val -- show extended diagnostic help (default: no)\n+    -W                               temps-dir=val -- the directory the intermediate files are written to\n+    -W                          terminal-width=val -- set the current terminal width\n+    -W                          translate-lang=val -- language identifier for diagnostic output\n+    -W                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -W        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -W                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -W                                 thinlto=val -- enable ThinLTO when possible\n+    -W                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -W                                 threads=val -- use a thread pool with N threads\n+    -W                                    time=val -- measure time of rustc processes (default: no)\n+    -W                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -W                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -W                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -W                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -W   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n+    -W                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -W                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -W                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -W                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -W            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -W          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -W                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+        `normal`, `identified`,\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `ast-tree` (raw AST before expansion),\n+        `ast-tree,expanded` (raw AST after expansion),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n+    -W                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -W                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -W                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -W                            validate-mir=val -- validate MIR after each transformation\n+    -W                                 verbose=val -- in general, enable more debug printouts (default: no)\n+    -W                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -W            virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n+    -W                         wasi-exec-model=val -- whether to build a wasi command or reactor"}, {"sha": "5df7576133a684ab8f887f442084e99062eb4886", "filename": "src/test/run-make/issue-88756-opt-help/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-opt-help%2Fx.rs?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -0,0 +1 @@\n+// nothing to see here"}, {"sha": "5cb7ecb649a962b89b9912e1ca8018f71e1f9da3", "filename": "src/test/rustdoc-ui/issue-83883-describe-lints.stdout", "status": "modified", "additions": 192, "deletions": 24, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-83883-describe-lints.stdout?ref=38bfa9c4f83b92c7ece0ff3a78e1ba16e7a9cf80", "patch": "@@ -1,25 +1,193 @@\n+    -W                          allow-features=val -- only allow the listed language features to be enabled in code (space separated)\n+    -W                       always-encode-mir=val -- encode MIR of all functions into the crate metadata (default: no)\n+    -W               assume-incomplete-release=val -- make cfg(version) treat the current version as incomplete (default: no)\n+    -W                            asm-comments=val -- generate comments into the assembly (may change behavior) (default: no)\n+    -W                       assert-incr-state=val -- assert that the incremental cache is in given state: either `loaded` or `not-loaded`.\n+    -W                      binary-dep-depinfo=val -- include artifacts (sysroot, crate dependencies) used during compilation in dep-info (default: no)\n+    -W                       branch-protection=val -- set options for branch target identification and pointer authentication on AArch64\n+    -W                           cf-protection=val -- instrument control-flow architecture protection\n+    -W               cgu-partitioning-strategy=val -- the codegen unit partitioning strategy to use\n+    -W                                   chalk=val -- enable the experimental Chalk-based trait solving engine\n+    -W                         codegen-backend=val -- the backend to use\n+    -W                             combine-cgu=val -- combine CGUs into a single one\n+    -W                              crate-attr=val -- inject the given attribute in the crate\n+    -W                debug-info-for-profiling=val -- emit discriminators and other data necessary for AutoFDO\n+    -W                            debug-macros=val -- emit line numbers debug info inside macros (default: no)\n+    -W                 deduplicate-diagnostics=val -- deduplicate identical diagnostics (default: yes)\n+    -W                  dep-info-omit-d-target=val -- in dep-info output, omit targets for tracking dependencies of the dep-info files themselves (default: no)\n+    -W                               dep-tasks=val -- print tasks that execute and the color their dep node gets (requires debug build) (default: no)\n+    -W                                 dlltool=val -- import library generation tool (windows-gnu only)\n+    -W                 dont-buffer-diagnostics=val -- emit diagnostics rather than buffering (breaks NLL error downgrading, sorting) (default: no)\n+    -W                           drop-tracking=val -- enables drop tracking in generators (default: no)\n+    -W                        dual-proc-macros=val -- load proc macros for both target and host, but only link to the target (default: no)\n+    -W                          dump-dep-graph=val -- dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) (default: no)\n+    -W                                dump-mir=val -- dump MIR state to file.\n+        `val` is used to select which passes and functions to dump. For example:\n+        `all` matches all passes and functions,\n+        `foo` matches all passes for functions whose name contains 'foo',\n+        `foo & ConstProp` only the 'ConstProp' pass for function names containing 'foo',\n+        `foo | bar` all passes for function names containing 'foo' or 'bar'.\n+    -W                       dump-mir-dataflow=val -- in addition to `.mir` files, create graphviz `.dot` files with dataflow results (default: no)\n+    -W                            dump-mir-dir=val -- the directory the MIR is dumped into (default: `mir_dump`)\n+    -W            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n+    -W                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n+    -W                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n+    -W                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n+    -W                             fewer-names=val -- reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) (default: no)\n+    -W              force-unstable-if-unmarked=val -- force all crates to be `rustc_private` unstable (default: no)\n+    -W                                    fuel=val -- set the optimization fuel quota for a crate\n+    -W                       function-sections=val -- whether each function should go in its own section\n+    -W                    future-incompat-test=val -- forces all lints to be future incompatible, used for internal testing (default: no)\n+    -W                                  gcc-ld=val -- implementation of ld used by cc\n+    -W                      graphviz-dark-mode=val -- use dark-themed colors in graphviz output (default: no)\n+    -W                           graphviz-font=val -- use the given `fontname` in graphviz output; can be overridden by setting environment variable `RUSTC_GRAPHVIZ_FONT` (default: `Courier, monospace`)\n+    -W                               hir-stats=val -- print some statistics about AST and HIR (default: no)\n+    -W                human-readable-cgu-names=val -- generate human-readable, predictable names for codegen units (default: no)\n+    -W                        identify-regions=val -- display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\n+    -W                incremental-ignore-spans=val -- ignore spans during ICH computation -- used for testing (default: no)\n+    -W                        incremental-info=val -- print high-level information about incremental reuse (or the lack thereof) (default: no)\n+    -W              incremental-relative-spans=val -- hash spans relative to their parent item for incr. comp. (default: no)\n+    -W                  incremental-verify-ich=val -- verify incr. comp. hashes of green query instances (default: no)\n+    -W                              inline-mir=val -- enable MIR inlining (default: no)\n+    -W                    inline-mir-threshold=val -- a default MIR inlining threshold (default: 50)\n+    -W               inline-mir-hint-threshold=val -- inlining threshold for functions with inline hint (default: 100)\n+    -W                      inline-in-all-cgus=val -- control whether `#[inline]` functions are in all CGUs\n+    -W                             input-stats=val -- gather statistics about the input (default: no)\n+    -W                     instrument-coverage=val -- instrument the generated code to support LLVM source-based code coverage reports (note, the compiler build config must include `profiler = true`); implies `-C symbol-mangling-version=v0`. Optional values are:\n+        `=all` (implicit value)\n+        `=except-unused-generics`\n+        `=except-unused-functions`\n+        `=off` (default)\n+    -W                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -W                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n+    -W                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)\n+    -W                               link-only=val -- link the `.rlink` file generated by `-Z no-link` (default: no)\n+    -W                            llvm-plugins=val -- a list LLVM plugins to enable (space separated)\n+    -W                         llvm-time-trace=val -- generate JSON tracing data file from LLVM data (default: no)\n+    -W                         location-detail=val -- comma separated list of location details to be tracked when using caller_location valid options are `file`, `line`, and `column` (default: all)\n+    -W                                      ls=val -- list the symbols defined by a library crate (default: no)\n+    -W                         macro-backtrace=val -- show macro backtraces (default: no)\n+    -W                         merge-functions=val -- control the operation of the MergeFunctions LLVM pass, taking the same values as the target option of the same name\n+    -W                              meta-stats=val -- gather metadata statistics (default: no)\n+    -W                          mir-emit-retag=val -- emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 (default: no)\n+    -W                       mir-enable-passes=val -- use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be enabled, overriding all other checks. Passes that are not specified are enabled or disabled by other flags as usual.\n+    -W                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n+    -W                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n+    -W                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n+    -W                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n+    -W                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n+    -W                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n+    -W                             no-analysis=val -- parse and expand the source, but run no analysis\n+    -W                              no-codegen=val -- run all passes except codegen; no output\n+    -W              no-generate-arange-section=val -- omit DWARF address ranges that give faster lookups\n+    -W                     no-interleave-lints=val -- execute lints separately; allows benchmarking individual lints\n+    -W                           no-leak-check=val -- disable the 'leak check' for subtyping; unsound, but useful for tests\n+    -W                                 no-link=val -- compile without linking\n+    -W                        no-parallel-llvm=val -- run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\n+    -W                 no-unique-section-names=val -- do not use unique names for text and data sections when -Z function-sections is used\n+    -W                     no-profiler-runtime=val -- prevent automatic injection of the profiler_builtins crate\n+    -W                          normalize-docs=val -- normalize associated items in rustdoc when generating documentation\n+    -W                                     oom=val -- panic strategy for out-of-memory handling\n+    -W                  osx-rpath-install-name=val -- pass `-install_name @rpath/...` to the macOS linker (default: no)\n+    -W                       panic-abort-tests=val -- support compiling tests with panic=abort (default: no)\n+    -W                           panic-in-drop=val -- panic strategy for panics in drops\n+    -W                              parse-only=val -- parse only; do not compile, assemble, or link (default: no)\n+    -W                              perf-stats=val -- print some performance-related statistics (default: no)\n+    -W pick-stable-methods-before-any-unstable=val -- try to pick stable methods first before picking any unstable methods (default: yes)\n+    -W                                     plt=val -- whether to use the PLT when calling into shared libraries;\n+        only has effect for PIC code on systems with ELF binaries\n+        (default: PLT is disabled if full relro is enabled)\n+    -W                                polonius=val -- enable polonius-based borrow-checker (default: no)\n+    -W                            polymorphize=val -- perform polymorphization analysis\n+    -W                            pre-link-arg=val -- a single extra argument to prepend the linker invocation (can be used several times)\n+    -W                           pre-link-args=val -- extra arguments to prepend to the linker invocation (space separated)\n+    -W           precise-enum-drop-elaboration=val -- use a more precise version of drop elaboration for matches on enums (default: yes). This results in better codegen, but has caused miscompilations on some tier 2 platforms. See #77382 and #74551.\n+    -W                              print-fuel=val -- make rustc print the total optimization fuel used by a crate\n+    -W                       print-llvm-passes=val -- print the LLVM optimization passes being run (default: no)\n+    -W                        print-mono-items=val -- print the result of the monomorphization collection pass\n+    -W                        print-type-sizes=val -- print layout information for each type encountered (default: no)\n+    -W                    proc-macro-backtrace=val -- show backtraces for panics during proc-macro execution (default: no)\n+    -W                                 profile=val -- insert profiling code (default: no)\n+    -W                        profile-closures=val -- profile size of closures\n+    -W                            profile-emit=val -- file path to emit profiling data at runtime when using 'profile' (default based on relative source path)\n+    -W                        profiler-runtime=val -- name of the profiler runtime crate to automatically inject (default: `profiler_builtins`)\n+    -W                      profile-sample-use=val -- use the given `.prof` file for sampled profile-guided optimization (also known as AutoFDO)\n+    -W                         query-dep-graph=val -- enable queries of the dependency graph for regression testing (default: no)\n+    -W                        randomize-layout=val -- randomize the layout of types (default: no)\n+    -W                             layout-seed=val -- seed layout randomization\n+    -W                   relax-elf-relocations=val -- whether ELF relocations can be relaxed\n+    -W                             relro-level=val -- choose which RELRO level to use\n+    -W                        remap-cwd-prefix=val -- remap paths under the current working directory to this path prefix\n+    -W         simulate-remapped-rust-src-base=val -- simulate the effect of remap-debuginfo = true at bootstrapping by remapping path to rust's source base directory. only meant for testing purposes\n+    -W                     report-delayed-bugs=val -- immediately print bugs registered with `delay_span_bug` (default: no)\n+    -W                               sanitizer=val -- use a sanitizer\n+    -W          sanitizer-memory-track-origins=val -- enable origins tracking in MemorySanitizer\n+    -W                       sanitizer-recover=val -- enable recovery for selected sanitizers\n+    -W                  saturating-float-casts=val -- make float->int casts UB-free: numbers outside the integer type's range are clipped to the max/min integer respectively, and NaN is mapped to 0 (default: yes)\n+    -W                           save-analysis=val -- write syntax and type analysis (in JSON format) information, in addition to normal output (default: no)\n+    -W                            self-profile=val -- run the self profiler and output the raw event data\n+    -W                     self-profile-events=val -- specify the events recorded by the self profiler;\n+        for example: `-Z self-profile-events=default,query-keys`\n+        all options: none, all, default, generic-activity, query-provider, query-cache-hit\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\n+    -W                    self-profile-counter=val -- counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\n+    -W                          share-generics=val -- make the current crate share its generic instantiations\n+    -W                               show-span=val -- show spans for compiler debugging (expr|pat|ty)\n+    -W                              span-debug=val -- forward proc_macro::Span's `Debug` impl to `Span`\n+    -W                       span-free-formats=val -- exclude spans when debug-printing compiler state (default: no)\n+    -W                      src-hash-algorithm=val -- hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\n+    -W                         stack-protector=val -- control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\n+    -W                      strict-init-checks=val -- control if mem::uninitialized and mem::zeroed panic on more UB\n+    -W                                   strip=val -- tell the linker which information to strip (`none` (default), `debuginfo` or `symbols`)\n+    -W                        split-dwarf-kind=val -- split dwarf variant (only if -Csplit-debuginfo is enabled and on relevant platform)\n+        (default: `split`)\n \n-Available lint options:\n-    -W <foo>           Warn about <foo>\n-    -A <foo>           Allow <foo>\n-    -D <foo>           Deny <foo>\n-    -F <foo>           Forbid <foo> (deny <foo> and all attempts to override)\n-\n-\n-Lint checks provided by rustc:\n-\n-    $NAMES  $LEVELS  $MEANINGS\n-\n-Lint groups provided by rustc:\n-\n-    $NAMES  $SUB_LINTS\n-\n-Lint checks provided by plugins loaded by this crate:\n-\n-    $NAMES  $LEVELS  $MEANINGS\n-\n-Lint groups provided by plugins loaded by this crate:\n-\n-    rustdoc::all  $GROUPS\n-\n-\n+        `split`: sections which do not require relocation are written into a DWARF object (`.dwo`)\n+                 file which is ignored by the linker\n+        `single`: sections which do not require relocation are written into object file but ignored\n+                  by the linker\n+    -W                    split-dwarf-inlining=val -- provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n+    -W                 symbol-mangling-version=val -- which mangling version to use for symbol names ('legacy' (default) or 'v0')\n+    -W                                   teach=val -- show extended diagnostic help (default: no)\n+    -W                               temps-dir=val -- the directory the intermediate files are written to\n+    -W                          terminal-width=val -- set the current terminal width\n+    -W                          translate-lang=val -- language identifier for diagnostic output\n+    -W                translate-additional-ftl=val -- additional fluent translation to preferentially use (for testing translation)\n+    -W        translate-directionality-markers=val -- emit directionality isolation markers in translated diagnostics\n+    -W                                tune-cpu=val -- select processor to schedule for (`rustc --print target-cpus` for details)\n+    -W                                 thinlto=val -- enable ThinLTO when possible\n+    -W                           thir-unsafeck=val -- use the THIR unsafety checker (default: no)\n+    -W                                 threads=val -- use a thread pool with N threads\n+    -W                                    time=val -- measure time of rustc processes (default: no)\n+    -W                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n+    -W                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -W                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n+    -W                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n+    -W   translate-remapped-path-to-local-path=val -- translate remapped paths into local paths when possible (default: yes)\n+    -W                        trap-unreachable=val -- generate trap instructions for unreachable intrinsics (default: use target setting, usually yes)\n+    -W                        treat-err-as-bug=val -- treat error number `val` that occurs as bug\n+    -W                   trim-diagnostic-paths=val -- in diagnostics, use heuristics to shorten paths referring to items\n+    -W                              ui-testing=val -- emit compiler diagnostics in a form suitable for UI testing (default: no)\n+    -W            uninit-const-chunk-threshold=val -- allow generating const initializers with mixed init/uninit chunks, and set the maximum number of chunks for which this is allowed (default: 16)\n+    -W          unleash-the-miri-inside-of-you=val -- take the brakes off const evaluation. NOTE: this is unsound (default: no)\n+    -W                                unpretty=val -- present the input source, unstable (and less-pretty) variants;\n+        `normal`, `identified`,\n+        `expanded`, `expanded,identified`,\n+        `expanded,hygiene` (with internal representations),\n+        `ast-tree` (raw AST before expansion),\n+        `ast-tree,expanded` (raw AST after expansion),\n+        `hir` (the HIR), `hir,identified`,\n+        `hir,typed` (HIR with types for each node),\n+        `hir-tree` (dump the raw HIR),\n+        `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\n+    -W                        unsound-mir-opts=val -- enable unsound and buggy MIR optimizations (default: no)\n+    -W                        unstable-options=val -- adds unstable command line options to rustc interface (default: no)\n+    -W                       use-ctors-section=val -- use legacy .ctors section for initializers rather than .init_array\n+    -W                            validate-mir=val -- validate MIR after each transformation\n+    -W                                 verbose=val -- in general, enable more debug printouts (default: no)\n+    -W                          verify-llvm-ir=val -- verify LLVM IR (default: no)\n+    -W            virtual-function-elimination=val -- enables dead virtual function elimination optimization. Requires `-Clto[=[fat,yes]]`\n+    -W                         wasi-exec-model=val -- whether to build a wasi command or reactor"}]}