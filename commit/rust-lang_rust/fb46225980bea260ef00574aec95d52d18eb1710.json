{"sha": "fb46225980bea260ef00574aec95d52d18eb1710", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNDYyMjU5ODBiZWEyNjBlZjAwNTc0YWVjOTVkNTJkMThlYjE3MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-03T04:06:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-03T04:06:56Z"}, "message": "auto merge of #11093 : alexcrichton/rust/issue-11085, r=pcwalton\n\nCloses #11085", "tree": {"sha": "1f6a9bf545e47b9d7d45292a1b6c936b6d1b67c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f6a9bf545e47b9d7d45292a1b6c936b6d1b67c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb46225980bea260ef00574aec95d52d18eb1710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb46225980bea260ef00574aec95d52d18eb1710", "html_url": "https://github.com/rust-lang/rust/commit/fb46225980bea260ef00574aec95d52d18eb1710", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb46225980bea260ef00574aec95d52d18eb1710/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ce4d3f79cdc021a6bfe0f7009977e07a368770", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ce4d3f79cdc021a6bfe0f7009977e07a368770", "html_url": "https://github.com/rust-lang/rust/commit/27ce4d3f79cdc021a6bfe0f7009977e07a368770"}, {"sha": "1c648fcea40d93aa20767f895de3acb78e46167c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c648fcea40d93aa20767f895de3acb78e46167c", "html_url": "https://github.com/rust-lang/rust/commit/1c648fcea40d93aa20767f895de3acb78e46167c"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "1ddc2cf6696641c71b8674b65f9c91429c66547b", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fb46225980bea260ef00574aec95d52d18eb1710/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb46225980bea260ef00574aec95d52d18eb1710/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=fb46225980bea260ef00574aec95d52d18eb1710", "patch": "@@ -11,6 +11,7 @@\n \n use syntax::fold::ast_fold;\n use syntax::{ast, fold, attr};\n+use syntax::codemap;\n \n struct Context<'a> {\n     in_cfg: 'a |attrs: &[ast::Attribute]| -> bool,\n@@ -109,12 +110,47 @@ fn fold_item_underscore(cx: &mut Context, item: &ast::item_) -> ast::item_ {\n                                  .collect();\n             ast::item_trait((*a).clone(), (*b).clone(), methods)\n         }\n-        ref item => (*item).clone(),\n+        ast::item_struct(def, ref generics) => {\n+            ast::item_struct(fold_struct(cx, def), generics.clone())\n+        }\n+        ast::item_enum(ref def, ref generics) => {\n+            let mut variants = def.variants.iter().map(|c| c.clone()).filter(|m| {\n+                (cx.in_cfg)(m.node.attrs)\n+            }).map(|v| {\n+                match v.node.kind {\n+                    ast::tuple_variant_kind(..) => v,\n+                    ast::struct_variant_kind(def) => {\n+                        let def = fold_struct(cx, def);\n+                        @codemap::Spanned {\n+                            node: ast::variant_ {\n+                                kind: ast::struct_variant_kind(def),\n+                                ..v.node.clone()\n+                            },\n+                            ..*v\n+                        }\n+                    }\n+                }\n+            });\n+            ast::item_enum(ast::enum_def {\n+                variants: variants.collect(),\n+            }, generics.clone())\n+        }\n+        ref item => item.clone(),\n     };\n \n     fold::noop_fold_item_underscore(&item, cx)\n }\n \n+fn fold_struct(cx: &Context, def: &ast::struct_def) -> @ast::struct_def {\n+    let mut fields = def.fields.iter().map(|c| c.clone()).filter(|m| {\n+        (cx.in_cfg)(m.node.attrs)\n+    });\n+    @ast::struct_def {\n+        fields: fields.collect(),\n+        ctor_id: def.ctor_id,\n+    }\n+}\n+\n fn retain_stmt(cx: &Context, stmt: @ast::Stmt) -> bool {\n     match stmt.node {\n       ast::StmtDecl(decl, _) => {"}, {"sha": "9d7eab050d845b1f827c14bf1e725dc043913b52", "filename": "src/test/run-pass/issue-11085.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fb46225980bea260ef00574aec95d52d18eb1710/src%2Ftest%2Frun-pass%2Fissue-11085.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb46225980bea260ef00574aec95d52d18eb1710/src%2Ftest%2Frun-pass%2Fissue-11085.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11085.rs?ref=fb46225980bea260ef00574aec95d52d18eb1710", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --cfg foo\n+// xfail-fast\n+\n+#[feature(struct_variant)];\n+\n+struct Foo {\n+    #[cfg(fail)]\n+    bar: baz,\n+    foo: int,\n+}\n+\n+struct Foo2 {\n+    #[cfg(foo)]\n+    foo: int,\n+}\n+\n+enum Bar1 {\n+    Bar1_1,\n+    #[cfg(fail)]\n+    Bar1_2(NotAType),\n+}\n+\n+enum Bar2 {\n+    #[cfg(fail)]\n+    Bar2_1(NotAType),\n+}\n+\n+enum Bar3 {\n+    Bar3_1 {\n+        #[cfg(fail)]\n+        foo: int,\n+        bar: int,\n+    }\n+}\n+\n+fn main() {\n+    let _f = Foo { foo: 3 };\n+    let _f = Foo2 { foo: 3 };\n+\n+    match Bar1_1 {\n+        Bar1_1 => {}\n+    }\n+\n+    let _f = Bar3_1 { bar: 3 };\n+}"}]}