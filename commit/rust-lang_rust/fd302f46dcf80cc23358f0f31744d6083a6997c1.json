{"sha": "fd302f46dcf80cc23358f0f31744d6083a6997c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMzAyZjQ2ZGNmODBjYzIzMzU4ZjBmMzE3NDRkNjA4M2E2OTk3YzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-13T12:01:43Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T06:26:27Z"}, "message": "Store `TokenStream` in `rmeta::MacroDef`.\nThis removes a hack from `load_macro_untracked` in which parsing is used.", "tree": {"sha": "6326d28eabeb638888eaa5e4a392f45f3af07af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6326d28eabeb638888eaa5e4a392f45f3af07af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd302f46dcf80cc23358f0f31744d6083a6997c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd302f46dcf80cc23358f0f31744d6083a6997c1", "html_url": "https://github.com/rust-lang/rust/commit/fd302f46dcf80cc23358f0f31744d6083a6997c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd302f46dcf80cc23358f0f31744d6083a6997c1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbade652ed8ebac70f903e01f51cd92c4e4302c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbade652ed8ebac70f903e01f51cd92c4e4302c", "html_url": "https://github.com/rust-lang/rust/commit/3dbade652ed8ebac70f903e01f51cd92c4e4302c"}], "stats": {"total": 134, "additions": 51, "deletions": 83}, "files": [{"sha": "aefd40bfaa59ea3c7fb42bac363900e1c81082c4", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -3891,14 +3891,12 @@ dependencies = [\n  \"memmap\",\n  \"rustc\",\n  \"rustc_ast\",\n- \"rustc_ast_pretty\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_expand\",\n  \"rustc_hir\",\n  \"rustc_index\",\n- \"rustc_parse\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\","}, {"sha": "3f0730169ecf6079fc1149fc26fd6bcfb62d2389", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -111,6 +111,7 @@ macro_rules! define_dep_nodes {\n     ) => (\n         #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n                  RustcEncodable, RustcDecodable)]\n+        #[allow(non_camel_case_types)]\n         pub enum DepKind {\n             $($variant),*\n         }\n@@ -173,6 +174,7 @@ macro_rules! define_dep_nodes {\n \n         pub struct DepConstructor;\n \n+        #[allow(non_camel_case_types)]\n         impl DepConstructor {\n             $(\n                 #[inline(always)]"}, {"sha": "dcc8dcbf21961588412f740fd715729ba9c7364f", "filename": "src/librustc/lint.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -344,15 +344,8 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n         ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::Macro(MacroKind::Bang, _) => {\n-            if expn_data.def_site.is_dummy() {\n-                // Dummy span for the `def_site` means it's an external macro.\n-                return true;\n-            }\n-            match sess.source_map().span_to_snippet(expn_data.def_site) {\n-                Ok(code) => !code.starts_with(\"macro_rules\"),\n-                // No snippet means external macro or compiler-builtin expansion.\n-                Err(_) => true,\n-            }\n+            // Dummy span for the `def_site` means it's an external macro.\n+            expn_data.def_site.is_dummy() || sess.source_map().is_imported(expn_data.def_site)\n         }\n         ExpnKind::Macro(..) => true, // definitely a plugin\n     }"}, {"sha": "cf917daef83880930ae61e8aa909c66283360989", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -110,7 +110,7 @@ pub fn report_unstable(\n     let span_key = msp.primary_span().and_then(|sp: Span| {\n         if !sp.is_dummy() {\n             let file = sm.lookup_char_pos(sp.lo()).file;\n-            if file.name.is_macros() { None } else { Some(span) }\n+            if file.is_imported() { None } else { Some(span) }\n         } else {\n             None\n         }"}, {"sha": "b38ea6b42419173b4c770bd0145cd5a7c8b1a161", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -414,8 +414,8 @@ pub trait Emitter {\n     }\n \n     // This does a small \"fix\" for multispans by looking to see if it can find any that\n-    // point directly at <*macros>. Since these are often difficult to read, this\n-    // will change the span to point at the use site.\n+    // point directly at external macros. Since these are often difficult to read,\n+    // this will change the span to point at the use site.\n     fn fix_multispans_in_extern_macros(\n         &self,\n         source_map: &Option<Lrc<SourceMap>>,\n@@ -427,9 +427,9 @@ pub trait Emitter {\n         }\n     }\n \n-    // This \"fixes\" MultiSpans that contain Spans that are pointing to locations inside of\n-    // <*macros>. Since these locations are often difficult to read, we move these Spans from\n-    // <*macros> to their corresponding use site.\n+    // This \"fixes\" MultiSpans that contain `Span`s pointing to locations inside of external macros.\n+    // Since these locations are often difficult to read,\n+    // we move these spans from the external macros to their corresponding use site.\n     fn fix_multispan_in_extern_macros(\n         &self,\n         source_map: &Option<Lrc<SourceMap>>,\n@@ -440,14 +440,14 @@ pub trait Emitter {\n             None => return,\n         };\n \n-        // First, find all the spans in <*macros> and point instead at their use site\n+        // First, find all the spans in external macros and point instead at their use site.\n         let replacements: Vec<(Span, Span)> = span\n             .primary_spans()\n             .iter()\n             .copied()\n             .chain(span.span_labels().iter().map(|sp_label| sp_label.span))\n             .filter_map(|sp| {\n-                if !sp.is_dummy() && sm.span_to_filename(sp).is_macros() {\n+                if !sp.is_dummy() && sm.is_imported(sp) {\n                     let maybe_callsite = sp.source_callsite();\n                     if sp != maybe_callsite {\n                         return Some((sp, maybe_callsite));\n@@ -457,7 +457,7 @@ pub trait Emitter {\n             })\n             .collect();\n \n-        // After we have them, make sure we replace these 'bad' def sites with their use sites\n+        // After we have them, make sure we replace these 'bad' def sites with their use sites.\n         for (from, to) in replacements {\n             span.replace(from, to);\n         }"}, {"sha": "3040a9aefbb308bc4a11282f49d89fa3a1dcb9e1", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -105,10 +105,10 @@ impl<'a> ParserAnyMacro<'a> {\n             if e.span.is_dummy() {\n                 // Get around lack of span in error (#30128)\n                 e.replace_span_with(site_span);\n-                if parser.sess.source_map().span_to_filename(arm_span).is_real() {\n+                if !parser.sess.source_map().is_imported(arm_span) {\n                     e.span_label(arm_span, \"in this macro arm\");\n                 }\n-            } else if !parser.sess.source_map().span_to_filename(parser.token.span).is_real() {\n+            } else if parser.sess.source_map().is_imported(parser.token.span) {\n                 e.span_label(site_span, \"in this macro invocation\");\n             }\n             match kind {\n@@ -297,7 +297,7 @@ fn generic_extension<'cx>(\n     let span = token.span.substitute_dummy(sp);\n     let mut err = cx.struct_span_err(span, &parse_failure_msg(&token));\n     err.span_label(span, label);\n-    if !def_span.is_dummy() && cx.source_map().span_to_filename(def_span).is_real() {\n+    if !def_span.is_dummy() && !cx.source_map().is_imported(def_span) {\n         err.span_label(cx.source_map().def_span(def_span), \"when calling this macro\");\n     }\n "}, {"sha": "0f8bc4323070b17a8ed169face61fb55a5f97030", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -103,6 +103,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             #value,\n         });\n         keyword_stream.extend(quote! {\n+            #[allow(non_upper_case_globals)]\n             pub const #name: Symbol = Symbol::new(#counter);\n         });\n         counter += 1;\n@@ -120,6 +121,8 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             #value,\n         });\n         symbols_stream.extend(quote! {\n+            #[allow(rustc::default_hash_types)]\n+            #[allow(non_upper_case_globals)]\n             pub const #name: Symbol = Symbol::new(#counter);\n         });\n         counter += 1;\n@@ -149,6 +152,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             () => {\n                 #symbols_stream\n \n+                #[allow(non_upper_case_globals)]\n                 pub const digits_array: &[Symbol; 10] = &[\n                     #digits_stream\n                 ];"}, {"sha": "a8e308c5c9e874ddfbf43b353146b175ddbe4bec", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -15,7 +15,6 @@ log = \"0.4\"\n memmap = \"0.7\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc = { path = \"../librustc\" }\n-rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }\n rustc_attr = { path = \"../librustc_attr\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n@@ -26,7 +25,6 @@ rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n stable_deref_trait = \"1.0.0\"\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_expand = { path = \"../librustc_expand\" }\n-rustc_parse = { path = \"../librustc_parse\" }\n rustc_span = { path = \"../librustc_span\" }\n \n [target.'cfg(windows)'.dependencies]"}, {"sha": "c2a306a0a0c9467514d3ade8ea78580b7e3ed5c0", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -1333,9 +1333,9 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    fn get_macro(&self, id: DefIndex) -> MacroDef {\n+    fn get_macro(&self, id: DefIndex, sess: &Session) -> MacroDef {\n         match self.kind(id) {\n-            EntryKind::MacroDef(macro_def) => macro_def.decode(self),\n+            EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),\n             _ => bug!(),\n         }\n     }"}, {"sha": "8062252df969f8b6870b50a0a7673137f6e44bc0", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -14,27 +14,22 @@ use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::query::QueryConfig;\n use rustc::ty::{self, TyCtxt};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n+use rustc_ast::expand::allocator::AllocatorKind;\n+use rustc_ast::ptr::P;\n+use rustc_ast::tokenstream::DelimSpan;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_parse::parser::emit_unclosed_delims;\n-use rustc_parse::source_file_to_stream;\n+use rustc_span::source_map::{self, Span, Spanned};\n+use rustc_span::symbol::Symbol;\n \n use rustc_data_structures::sync::Lrc;\n use smallvec::SmallVec;\n use std::any::Any;\n use std::sync::Arc;\n \n-use rustc_ast::ast;\n-use rustc_ast::attr;\n-use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_ast::ptr::P;\n-use rustc_ast::tokenstream::DelimSpan;\n-use rustc_span::source_map;\n-use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::Symbol;\n-use rustc_span::{FileName, Span};\n-\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n@@ -419,15 +414,9 @@ impl CStore {\n             return LoadedMacro::ProcMacro(data.load_proc_macro(id.index, sess));\n         }\n \n-        let def = data.get_macro(id.index);\n-        let macro_full_name = data.def_path(id.index).to_string_friendly(|_| data.root.name);\n-        let source_name = FileName::Macros(macro_full_name);\n-\n-        let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n-        let local_span = Span::with_root_ctxt(source_file.start_pos, source_file.end_pos);\n-        let dspan = DelimSpan::from_single(local_span);\n-        let (body, mut errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n-        emit_unclosed_delims(&mut errors, &sess.parse_sess);\n+        let span = data.get_span(id.index, sess);\n+        let dspan = DelimSpan::from_single(span);\n+        let rmeta::MacroDef { body, legacy } = data.get_macro(id.index, sess);\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index, sess);\n@@ -441,22 +430,20 @@ impl CStore {\n             .data\n             .get_opt_name()\n             .expect(\"no name in load_macro\");\n-        sess.imported_macro_spans\n-            .borrow_mut()\n-            .insert(local_span, (name.to_string(), data.get_span(id.index, sess)));\n+        sess.imported_macro_spans.borrow_mut().insert(span, (name.to_string(), span));\n \n         LoadedMacro::MacroDef(\n             ast::Item {\n                 // FIXME: cross-crate hygiene\n                 ident: ast::Ident::with_dummy_span(name),\n                 id: ast::DUMMY_NODE_ID,\n-                span: local_span,\n+                span,\n                 attrs: attrs.iter().cloned().collect(),\n                 kind: ast::ItemKind::MacroDef(ast::MacroDef {\n                     body: P(ast::MacArgs::Delimited(dspan, ast::MacDelimiter::Brace, body)),\n-                    legacy: def.legacy,\n+                    legacy,\n                 }),\n-                vis: source_map::respan(local_span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n+                vis: source_map::respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n                 tokens: None,\n             },\n             data.root.edition,"}, {"sha": "2b04918296d0660746ef8b20fa080f6e5c890c53", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -1235,10 +1235,9 @@ impl EncodeContext<'tcx> {\n \n     /// Serialize the text of exported macros\n     fn encode_info_for_macro_def(&mut self, macro_def: &hir::MacroDef<'_>) {\n-        use rustc_ast_pretty::pprust;\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         record!(self.per_def.kind[def_id] <- EntryKind::MacroDef(self.lazy(MacroDef {\n-            body: pprust::tts_to_string(macro_def.body.clone()),\n+            body: macro_def.body.clone(),\n             legacy: macro_def.legacy,\n         })));\n         record!(self.per_def.visibility[def_id] <- ty::Visibility::Public);"}, {"sha": "89e26b15d502bb2bf73267a0b62ef75aec4ae44a", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -11,6 +11,7 @@ use rustc::session::config::SymbolManglingVersion;\n use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n use rustc_ast::ast;\n+use rustc_ast::tokenstream::TokenStream;\n use rustc_attr as attr;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n@@ -324,7 +325,7 @@ struct ModData {\n \n #[derive(RustcEncodable, RustcDecodable)]\n struct MacroDef {\n-    body: String,\n+    body: TokenStream,\n     legacy: bool,\n }\n "}, {"sha": "1d493da9e5b112830e008aeffb5874e7bfc8a077", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -83,8 +83,6 @@ scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n )]\n pub enum FileName {\n     Real(PathBuf),\n-    /// A macro. This includes the full name of the macro, so that there are no clashes.\n-    Macros(String),\n     /// Call to `quote!`.\n     QuoteExpansion(u64),\n     /// Command line.\n@@ -107,7 +105,6 @@ impl std::fmt::Display for FileName {\n         use FileName::*;\n         match *self {\n             Real(ref path) => write!(fmt, \"{}\", path.display()),\n-            Macros(ref name) => write!(fmt, \"<{} macros>\", name),\n             QuoteExpansion(_) => write!(fmt, \"<quote expansion>\"),\n             MacroExpansion(_) => write!(fmt, \"<macro expansion>\"),\n             Anon(_) => write!(fmt, \"<anon>\"),\n@@ -132,8 +129,7 @@ impl FileName {\n         use FileName::*;\n         match *self {\n             Real(_) => true,\n-            Macros(_)\n-            | Anon(_)\n+            Anon(_)\n             | MacroExpansion(_)\n             | ProcMacroSourceCode(_)\n             | CfgSpec(_)\n@@ -144,22 +140,6 @@ impl FileName {\n         }\n     }\n \n-    pub fn is_macros(&self) -> bool {\n-        use FileName::*;\n-        match *self {\n-            Real(_)\n-            | Anon(_)\n-            | MacroExpansion(_)\n-            | ProcMacroSourceCode(_)\n-            | CfgSpec(_)\n-            | CliCrateAttr(_)\n-            | Custom(_)\n-            | QuoteExpansion(_)\n-            | DocTest(_, _) => false,\n-            Macros(_) => true,\n-        }\n-    }\n-\n     pub fn quote_expansion_source_code(src: &str) -> FileName {\n         let mut hasher = StableHasher::new();\n         src.hash(&mut hasher);"}, {"sha": "65095c6f1317cc56b7fe62884c5d2910ba0ddf46", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -975,6 +975,12 @@ impl SourceMap {\n             _ => None,\n         })\n     }\n+\n+    pub fn is_imported(&self, sp: Span) -> bool {\n+        let source_file_index = self.lookup_source_file_idx(sp.lo());\n+        let source_file = &self.files()[source_file_index];\n+        source_file.is_imported()\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "6df9d0541952c0d26dd6dabc0ce595a959ade681", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -373,7 +373,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Option<(Span, &'static str, String)> {\n         let sm = self.sess().source_map();\n         let sp = expr.span;\n-        if !sm.span_to_filename(sp).is_real() {\n+        if sm.is_imported(sp) {\n             // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n             // call span, but that breaks down when the type error comes from multiple calls down.\n             return None;\n@@ -523,7 +523,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             {\n                 // We have `&T`, check if what was expected was `T`. If so,\n                 // we may want to suggest removing a `&`.\n-                if !sm.span_to_filename(expr.span).is_real() {\n+                if sm.is_imported(expr.span) {\n                     if let Ok(code) = sm.span_to_snippet(sp) {\n                         if code.starts_with('&') {\n                             return Some((\n@@ -601,7 +601,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // FIXME(estebank): modify once we decide to suggest `as` casts\n             return false;\n         }\n-        if !self.tcx.sess.source_map().span_to_filename(expr.span).is_real() {\n+        if self.tcx.sess.source_map().is_imported(expr.span) {\n             // Ignore if span is from within a macro.\n             return false;\n         }"}, {"sha": "31e91dac4d19c7455a3650d3280580f5b4989259", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -1565,7 +1565,7 @@ impl Context {\n \n         let mut path = String::new();\n \n-        // We can safely ignore macros from other libraries\n+        // We can safely ignore synthetic `SourceFile`s.\n         let file = match item.source.filename {\n             FileName::Real(ref path) => path,\n             _ => return None,"}, {"sha": "86f46b2d7e15422214dfc8ca029583447eec6ecd", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd302f46dcf80cc23358f0f31744d6083a6997c1/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=fd302f46dcf80cc23358f0f31744d6083a6997c1", "patch": "@@ -35,7 +35,7 @@ impl<'a> DocFolder for SourceCollector<'a> {\n         // If we're including source files, and we haven't seen this file yet,\n         // then we need to render it out to the filesystem.\n         if self.scx.include_sources\n-            // skip all invalid or macro spans\n+            // skip all synthetic \"files\"\n             && item.source.filename.is_real()\n             // skip non-local items\n             && item.def_id.is_local()"}]}