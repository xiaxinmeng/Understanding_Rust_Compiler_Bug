{"sha": "9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5", "node_id": "C_kwDOAAsO6NoAKDljMDUzMzVhMGY4MmEwNzc4MGM2YzM3YjBlMmIyYzJjOWY3ZmM5ZjU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-11-11T11:43:54Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-11-12T14:33:10Z"}, "message": "Add more comments to explain the code to generate the search index", "tree": {"sha": "b88fff8103c027d493feb5c0df75425ec835f720", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b88fff8103c027d493feb5c0df75425ec835f720"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5", "html_url": "https://github.com/rust-lang/rust/commit/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d34cb4efccb6ec47c2eb478e4cc900936dfe387", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d34cb4efccb6ec47c2eb478e4cc900936dfe387", "html_url": "https://github.com/rust-lang/rust/commit/1d34cb4efccb6ec47c2eb478e4cc900936dfe387"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "af0c9faca4c175e4a126908d3b18448961f9e92a", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=9c05335a0f82a07780c6c37b0e2b2c2c9f7fc9f5", "patch": "@@ -241,8 +241,10 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n /// The point of this function is to replace bounds with types.\n ///\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return\n-/// `[Display, Option]` (we just returns the list of the types, we don't care about the\n-/// wrapped types in here).\n+/// `[Display, Option]`. If a type parameter has no trait bound, it is discarded.\n+///\n+/// Important note: It goes through generics recursively. So if you have\n+/// `T: Option<Result<(), ()>>`, it'll go into `Option` and then into `Result`.\n crate fn get_real_types<'tcx>(\n     generics: &Generics,\n     arg: &Type,\n@@ -326,7 +328,10 @@ crate fn get_real_types<'tcx>(\n         return;\n     }\n \n+    // If this argument is a type parameter and not a trait bound or a type, we need to look\n+    // for its bounds.\n     if let Type::Generic(arg_s) = *arg {\n+        // First we check if the bounds are in a `where` predicate...\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n             WherePredicate::BoundPredicate { ty, .. } => {\n                 ty.def_id_no_primitives() == arg.def_id_no_primitives()\n@@ -349,6 +354,7 @@ crate fn get_real_types<'tcx>(\n             }\n             insert_ty(res, tcx, arg.clone(), ty_generics);\n         }\n+        // Otherwise we check if the trait bounds are \"inlined\" like `T: Option<u32>`...\n         if let Some(bound) = generics.params.iter().find(|g| g.is_type() && g.name == arg_s) {\n             let mut ty_generics = Vec::new();\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n@@ -360,6 +366,11 @@ crate fn get_real_types<'tcx>(\n             insert_ty(res, tcx, arg.clone(), ty_generics);\n         }\n     } else {\n+        // This is not a type parameter. So for example if we have `T, U: Option<T>`, and we're\n+        // looking at `Option`, we enter this \"else\" condition, otherwise if it's `T`, we don't.\n+        //\n+        // So in here, we can add it directly and look for its own type parameters (so for `Option`,\n+        // we will look for them but not for `T`).\n         let mut ty_generics = Vec::new();\n         if let Some(arg_generics) = arg.generics() {\n             for gen in arg_generics.iter() {"}]}