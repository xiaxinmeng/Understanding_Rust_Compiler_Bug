{"sha": "2347da8c8d042146a6a0b4cd9570a7454afa25e4", "node_id": "C_kwDOAAsO6NoAKDIzNDdkYThjOGQwNDIxNDZhNmEwYjRjZDk1NzBhNzQ1NGFmYTI1ZTQ", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-05-20T23:18:35Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-05-20T23:18:35Z"}, "message": "Generate enum variant assist\n\nThis also disables \"generate function\" when what we clearly want is to\ngenerate an enum variant.\n\nCo-authored-by: Maarten Flippo <maartenflippo@outlook.com>", "tree": {"sha": "79531279d289c425958df16a57023039a6aaf6ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79531279d289c425958df16a57023039a6aaf6ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2347da8c8d042146a6a0b4cd9570a7454afa25e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2347da8c8d042146a6a0b4cd9570a7454afa25e4", "html_url": "https://github.com/rust-lang/rust/commit/2347da8c8d042146a6a0b4cd9570a7454afa25e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2347da8c8d042146a6a0b4cd9570a7454afa25e4/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11823872240d83aa5075575056414cd7d29eba3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/11823872240d83aa5075575056414cd7d29eba3f", "html_url": "https://github.com/rust-lang/rust/commit/11823872240d83aa5075575056414cd7d29eba3f"}], "stats": {"total": 230, "additions": 230, "deletions": 0}, "files": [{"sha": "98e56a9633e2ead28da58493b021cdf1a386e3d6", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=2347da8c8d042146a6a0b4cd9570a7454afa25e4", "patch": "@@ -0,0 +1,185 @@\n+use hir::HasSource;\n+use ide_db::assists::{AssistId, AssistKind};\n+use syntax::{\n+    ast::{self, edit::IndentLevel},\n+    AstNode, TextSize,\n+};\n+\n+use crate::assist_context::{AssistContext, Assists};\n+\n+// Assist: generate_enum_variant\n+//\n+// Adds a variant to an enum.\n+//\n+// ```\n+// enum Countries {\n+//     Ghana,\n+// }\n+//\n+// fn main() {\n+//     let country = Countries::Lesotho$0;\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Countries {\n+//     Ghana,\n+//     Lesotho,\n+// }\n+//\n+// fn main() {\n+//     let country = Countries::Lesotho;\n+// }\n+// ```\n+pub(crate) fn generate_enum_variant(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let path_expr: ast::PathExpr = ctx.find_node_at_offset()?;\n+    let path = path_expr.path()?;\n+\n+    if ctx.sema.resolve_path(&path).is_some() {\n+        // No need to generate anything if the path resolves\n+        return None;\n+    }\n+\n+    let name_ref = path.segment()?.name_ref()?;\n+\n+    if let Some(hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(e)))) =\n+        ctx.sema.resolve_path(&path.qualifier()?)\n+    {\n+        let target = path.syntax().text_range();\n+        return add_variant_to_accumulator(acc, ctx, target, e, &name_ref);\n+    }\n+\n+    None\n+}\n+\n+fn add_variant_to_accumulator(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+    target: syntax::TextRange,\n+    adt: hir::Enum,\n+    name_ref: &ast::NameRef,\n+) -> Option<()> {\n+    let adt_ast = get_enum_ast(ctx, adt)?;\n+\n+    let enum_indent_level = IndentLevel::from_node(&adt_ast.syntax());\n+\n+    let offset = adt_ast.variant_list()?.syntax().text_range().end() - TextSize::of('}');\n+\n+    let prefix = if adt_ast.variant_list()?.variants().next().is_none() {\n+        format!(\"\\n{}\", IndentLevel(1))\n+    } else {\n+        format!(\"{}\", IndentLevel(1))\n+    };\n+    let text = format!(\"{}{},\\n{}\", prefix, name_ref, enum_indent_level);\n+\n+    acc.add(\n+        AssistId(\"generate_enum_variant\", AssistKind::Generate),\n+        \"Generate variant\",\n+        target,\n+        |builder| builder.insert(offset, text),\n+    )\n+}\n+\n+fn get_enum_ast(ctx: &AssistContext, adt: hir::Enum) -> Option<ast::Enum> {\n+    let range = adt.source(ctx.db())?.syntax().original_file_range(ctx.db());\n+    let file = ctx.sema.parse(range.file_id);\n+    let adt_ast: ast::Enum =\n+        ctx.sema.find_node_at_offset_with_macros(file.syntax(), range.range.start())?;\n+\n+    Some(adt_ast)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn generate_basic_enum_variant_in_empty_enum() {\n+        check_assist(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::Bar$0\n+}\n+\",\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+fn main() {\n+    Foo::Bar\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn generate_basic_enum_variant_in_non_empty_enum() {\n+        check_assist(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+fn main() {\n+    Foo::Baz$0\n+}\n+\",\n+            r\"\n+enum Foo {\n+    Bar,\n+    Baz,\n+}\n+fn main() {\n+    Foo::Baz\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_for_existing_variant() {\n+        check_assist_not_applicable(\n+            generate_enum_variant,\n+            r\"\n+enum Foo {\n+    Bar,\n+}\n+fn main() {\n+    Foo::Bar$0\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn indentation_level_is_correct() {\n+        check_assist(\n+            generate_enum_variant,\n+            r\"\n+mod m {\n+    enum Foo {\n+        Bar,\n+    }\n+}\n+fn main() {\n+    m::Foo::Baz$0\n+}\n+\",\n+            r\"\n+mod m {\n+    enum Foo {\n+        Bar,\n+        Baz,\n+    }\n+}\n+fn main() {\n+    m::Foo::Baz\n+}\n+\",\n+        )\n+    }\n+}"}, {"sha": "e3ef321d4b2be7a45125cc3ca25fd548fdf780c8", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=2347da8c8d042146a6a0b4cd9570a7454afa25e4", "patch": "@@ -71,6 +71,10 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                 get_fn_target(ctx, &target_module, call.clone())?\n             }\n             Some(hir::PathResolution::Def(hir::ModuleDef::Adt(adt))) => {\n+                if let hir::Adt::Enum(_) = adt {\n+                    return None;\n+                }\n+\n                 let current_module = ctx.sema.scope(call.syntax())?.module();\n                 let module = adt.module(ctx.sema.db);\n                 target_module = if current_module == module { None } else { Some(module) };\n@@ -1738,4 +1742,17 @@ fn foo(value: usize) ${0:-> _} {\n \",\n         )\n     }\n+\n+    #[test]\n+    fn not_applicable_for_enum_variant() {\n+        check_assist_not_applicable(\n+            generate_function,\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::Bar$0(true)\n+}\n+\",\n+        );\n+    }\n }"}, {"sha": "94fbaff400bfda6ed47002ba9d137c0d3fc212ee", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=2347da8c8d042146a6a0b4cd9570a7454afa25e4", "patch": "@@ -139,6 +139,7 @@ mod handlers {\n     mod generate_documentation_template;\n     mod generate_enum_is_method;\n     mod generate_enum_projection_method;\n+    mod generate_enum_variant;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n     mod generate_getter;\n@@ -227,6 +228,7 @@ mod handlers {\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,\n             generate_enum_projection_method::generate_enum_try_into_method,\n+            generate_enum_variant::generate_enum_variant,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_impl::generate_impl,"}, {"sha": "2d571014090e0c1a789a3fcc4c348b6766c04729", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2347da8c8d042146a6a0b4cd9570a7454afa25e4/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=2347da8c8d042146a6a0b4cd9570a7454afa25e4", "patch": "@@ -1006,6 +1006,32 @@ impl Value {\n     )\n }\n \n+#[test]\n+fn doctest_generate_enum_variant() {\n+    check_doc_test(\n+        \"generate_enum_variant\",\n+        r#####\"\n+enum Countries {\n+    Ghana,\n+}\n+\n+fn main() {\n+    let country = Countries::Lesotho$0;\n+}\n+\"#####,\n+        r#####\"\n+enum Countries {\n+    Ghana,\n+    Lesotho,\n+}\n+\n+fn main() {\n+    let country = Countries::Lesotho;\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_from_impl_for_enum() {\n     check_doc_test("}]}