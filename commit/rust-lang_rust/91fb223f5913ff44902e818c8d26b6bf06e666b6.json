{"sha": "91fb223f5913ff44902e818c8d26b6bf06e666b6", "node_id": "C_kwDOAAsO6NoAKDkxZmIyMjNmNTkxM2ZmNDQ5MDJlODE4YzhkMjZiNmJmMDZlNjY2YjY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-22T10:42:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-22T10:42:45Z"}, "message": "Rollup merge of #89895 - camsteffen:for-loop-head-span, r=davidtwco\n\nDon't mark for loop iter expression as desugared\n\nWe typically don't mark spans of lowered things as desugared. This helps Clippy rightly discern when code is (not) from expansion. This was discovered by ``@flip1995`` at https://github.com/rust-lang/rust-clippy/pull/7789#issuecomment-939289501.", "tree": {"sha": "232fde8d316769dae98ae51a2bbfb04aa40ef45d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/232fde8d316769dae98ae51a2bbfb04aa40ef45d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fb223f5913ff44902e818c8d26b6bf06e666b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcpWlCRBK7hj4Ov3rIwAA1MgIAC/ojaQOr0mOE9Kdjgk//yKQ\nfjwopLw6Un1oo4iKCBedN1Mczo7vRweOM4sQ/o/N90OjUT8kPwnpzArtl76oNFah\n4w3N1A8QVNBErINoMHGlLB4R6Inh8IRCKu10A0lH3sSGyy3jzLE7+jtOXIUlhy8i\nurBExmiTWRa1JtJyETS/VpWBUqkEkNq73CcPpano/FJvU5L4gBXu70gR4/0kDcNm\n73lepQrsNPchFTpEb1KYbS4rXRetcFkdTu4HKY7wONY2OR1xfNpr0hEPjHJupy1d\nz4bcHMlq2JEz/rKo0l5GjOTCoNnhmju1HdcL0KSU/VrOS2l9FlX6/LVsTkr5G6s=\n=LnmT\n-----END PGP SIGNATURE-----\n", "payload": "tree 232fde8d316769dae98ae51a2bbfb04aa40ef45d\nparent 62da4ab161fc74bf378051ea006b29f6ec94a764\nparent ffdd5a04a4060c19d0dee62a63bcfd2ee1902079\nauthor Yuki Okushi <jtitor@2k36.org> 1634899365 +0900\ncommitter GitHub <noreply@github.com> 1634899365 +0900\n\nRollup merge of #89895 - camsteffen:for-loop-head-span, r=davidtwco\n\nDon't mark for loop iter expression as desugared\n\nWe typically don't mark spans of lowered things as desugared. This helps Clippy rightly discern when code is (not) from expansion. This was discovered by ``@flip1995`` at https://github.com/rust-lang/rust-clippy/pull/7789#issuecomment-939289501.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fb223f5913ff44902e818c8d26b6bf06e666b6", "html_url": "https://github.com/rust-lang/rust/commit/91fb223f5913ff44902e818c8d26b6bf06e666b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fb223f5913ff44902e818c8d26b6bf06e666b6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62da4ab161fc74bf378051ea006b29f6ec94a764", "url": "https://api.github.com/repos/rust-lang/rust/commits/62da4ab161fc74bf378051ea006b29f6ec94a764", "html_url": "https://github.com/rust-lang/rust/commit/62da4ab161fc74bf378051ea006b29f6ec94a764"}, {"sha": "ffdd5a04a4060c19d0dee62a63bcfd2ee1902079", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffdd5a04a4060c19d0dee62a63bcfd2ee1902079", "html_url": "https://github.com/rust-lang/rust/commit/ffdd5a04a4060c19d0dee62a63bcfd2ee1902079"}], "stats": {"total": 139, "additions": 65, "deletions": 74}, "files": [{"sha": "405e9035c4c1922f392a6b6502ff7d36d6cec885", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=91fb223f5913ff44902e818c8d26b6bf06e666b6", "patch": "@@ -1332,15 +1332,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Block,\n         opt_label: Option<Label>,\n     ) -> hir::Expr<'hir> {\n-        let orig_head_span = head.span;\n         // expand <head>\n-        let mut head = self.lower_expr_mut(head);\n-        let desugared_span = self.mark_span_with_reason(\n-            DesugaringKind::ForLoop(ForLoopLoc::Head),\n-            orig_head_span,\n-            None,\n-        );\n-        head.span = self.lower_span(desugared_span);\n+        let head = self.lower_expr_mut(head);\n+        let desugared_span =\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), head.span, None);\n+        let e_span = self.lower_span(e.span);\n \n         let iter = Ident::with_dummy_span(sym::iter);\n \n@@ -1354,23 +1350,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `::std::option::Option::Some(val) => __next = val`\n         let pat_arm = {\n             let val_ident = Ident::with_dummy_span(sym::val);\n-            let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n-            let val_expr = self.expr_ident(pat.span, val_ident, val_pat_hid);\n-            let next_expr = self.expr_ident(pat.span, next_ident, next_pat_hid);\n+            let pat_span = self.lower_span(pat.span);\n+            let (val_pat, val_pat_hid) = self.pat_ident(pat_span, val_ident);\n+            let val_expr = self.expr_ident(pat_span, val_ident, val_pat_hid);\n+            let next_expr = self.expr_ident(pat_span, next_ident, next_pat_hid);\n             let assign = self.arena.alloc(self.expr(\n-                pat.span,\n-                hir::ExprKind::Assign(next_expr, val_expr, self.lower_span(pat.span)),\n+                pat_span,\n+                hir::ExprKind::Assign(next_expr, val_expr, self.lower_span(pat_span)),\n                 ThinVec::new(),\n             ));\n-            let some_pat = self.pat_some(pat.span, val_pat);\n+            let some_pat = self.pat_some(pat_span, val_pat);\n             self.arm(some_pat, assign)\n         };\n \n         // `::std::option::Option::None => break`\n         let break_arm = {\n             let break_expr =\n-                self.with_loop_scope(e.id, |this| this.expr_break_alloc(e.span, ThinVec::new()));\n-            let pat = self.pat_none(e.span);\n+                self.with_loop_scope(e.id, |this| this.expr_break_alloc(e_span, ThinVec::new()));\n+            let pat = self.pat_none(e_span);\n             self.arm(pat, break_expr)\n         };\n \n@@ -1416,10 +1413,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n         let body_expr = self.expr_block(body_block, ThinVec::new());\n-        let body_stmt = self.stmt_expr(body.span, body_expr);\n+        let body_stmt = self.stmt_expr(body_block.span, body_expr);\n \n         let loop_block = self.block_all(\n-            e.span,\n+            e_span,\n             arena_vec![self; next_let, match_stmt, pat_let, body_stmt],\n             None,\n         );\n@@ -1429,7 +1426,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             loop_block,\n             self.lower_label(opt_label),\n             hir::LoopSource::ForLoop,\n-            self.lower_span(e.span.with_hi(orig_head_span.hi())),\n+            self.lower_span(e_span.with_hi(head.span.hi())),\n         );\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: self.lower_node_id(e.id),\n@@ -1442,7 +1439,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let into_iter_span = self.mark_span_with_reason(\n             DesugaringKind::ForLoop(ForLoopLoc::IntoIter),\n-            orig_head_span,\n+            head.span,\n             None,\n         );\n \n@@ -1458,7 +1455,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // #82462: to correctly diagnose borrow errors, the block that contains\n         // the iter expr needs to have a span that covers the loop body.\n         let desugared_full_span =\n-            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e.span, None);\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e_span, None);\n \n         let match_expr = self.arena.alloc(self.expr_match(\n             desugared_full_span,"}, {"sha": "439c728798d3a42b1b8c1717fd61a4a873103820", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=91fb223f5913ff44902e818c8d26b6bf06e666b6", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n-use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -247,6 +246,36 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         place_name, partially_str, loop_message\n                                     ),\n                                 );\n+                                let sess = self.infcx.tcx.sess;\n+                                let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n+                                // If we have a `&mut` ref, we need to reborrow.\n+                                if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n+                                    // If we are in a loop this will be suggested later.\n+                                    if !is_loop_move {\n+                                        err.span_suggestion_verbose(\n+                                            move_span.shrink_to_lo(),\n+                                            &format!(\n+                                                \"consider creating a fresh reborrow of {} here\",\n+                                                self.describe_place(moved_place.as_ref())\n+                                                    .map(|n| format!(\"`{}`\", n))\n+                                                    .unwrap_or_else(\n+                                                        || \"the mutable reference\".to_string()\n+                                                    ),\n+                                            ),\n+                                            \"&mut *\".to_string(),\n+                                            Applicability::MachineApplicable,\n+                                        );\n+                                    }\n+                                } else if let Ok(snippet) =\n+                                    sess.source_map().span_to_snippet(move_span)\n+                                {\n+                                    err.span_suggestion(\n+                                        move_span,\n+                                        \"consider borrowing to avoid moving into the for loop\",\n+                                        format!(\"&{}\", snippet),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             } else {\n                                 err.span_label(\n                                     fn_call_span,\n@@ -315,35 +344,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         in_pattern = true;\n                     }\n                 }\n-\n-                if let Some(DesugaringKind::ForLoop(_)) = move_span.desugaring_kind() {\n-                    let sess = self.infcx.tcx.sess;\n-                    let ty = used_place.ty(self.body, self.infcx.tcx).ty;\n-                    // If we have a `&mut` ref, we need to reborrow.\n-                    if let ty::Ref(_, _, hir::Mutability::Mut) = ty.kind() {\n-                        // If we are in a loop this will be suggested later.\n-                        if !is_loop_move {\n-                            err.span_suggestion_verbose(\n-                                move_span.shrink_to_lo(),\n-                                &format!(\n-                                    \"consider creating a fresh reborrow of {} here\",\n-                                    self.describe_place(moved_place.as_ref())\n-                                        .map(|n| format!(\"`{}`\", n))\n-                                        .unwrap_or_else(|| \"the mutable reference\".to_string()),\n-                                ),\n-                                \"&mut *\".to_string(),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    } else if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n-                        err.span_suggestion(\n-                            move_span,\n-                            \"consider borrowing to avoid moving into the for loop\",\n-                            format!(\"&{}\", snippet),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                }\n             }\n \n             use_spans.var_span_label_path_only("}, {"sha": "692c20d7dfe34ebed24443a863b7966d356528c7", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=91fb223f5913ff44902e818c8d26b6bf06e666b6", "patch": "@@ -5,11 +5,10 @@ use rustc_middle::ty;\n use rustc_mir_dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n };\n-use rustc_span::source_map::DesugaringKind;\n use rustc_span::{sym, Span, DUMMY_SP};\n use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n-use crate::diagnostics::UseSpans;\n+use crate::diagnostics::{FnSelfUseKind, UseSpans};\n use crate::prefixes::PrefixSet;\n use crate::MirBorrowckCtxt;\n \n@@ -400,19 +399,21 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             | ty::Opaque(def_id, _) => def_id,\n             _ => return err,\n         };\n-        let is_option = self.infcx.tcx.is_diagnostic_item(sym::Option, def_id);\n-        let is_result = self.infcx.tcx.is_diagnostic_item(sym::Result, def_id);\n-        if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n+        let diag_name = self.infcx.tcx.get_diagnostic_name(def_id);\n+        if matches!(diag_name, Some(sym::Option | sym::Result))\n+            && use_spans.map_or(true, |v| !v.for_closure())\n+        {\n             err.span_suggestion_verbose(\n                 span.shrink_to_hi(),\n-                &format!(\n-                    \"consider borrowing the `{}`'s content\",\n-                    if is_option { \"Option\" } else { \"Result\" }\n-                ),\n+                &format!(\"consider borrowing the `{}`'s content\", diag_name.unwrap()),\n                 \".as_ref()\".to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n-        } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_))) {\n+        } else if let Some(UseSpans::FnSelfUse {\n+            kind: FnSelfUseKind::Normal { implicit_into_iter: true, .. },\n+            ..\n+        }) = use_spans\n+        {\n             let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n                 Some(def_id) => self.infcx.tcx.infer_ctxt().enter(|infcx| {\n                     type_known_to_meet_bound_modulo_regions("}, {"sha": "d8883b0e66dba77be936bb086f2197af5d384880", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fb223f5913ff44902e818c8d26b6bf06e666b6/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=91fb223f5913ff44902e818c8d26b6bf06e666b6", "patch": "@@ -134,9 +134,8 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n                     Applicability::MachineApplicable,\n                 );\n                 if self.for_expr_span == expr.span {\n-                    let expr_span = expr.span.ctxt().outer_expn_data().call_site;\n                     diag.span_suggestion(\n-                        receiver_arg.span.shrink_to_hi().to(expr_span.shrink_to_hi()),\n+                        receiver_arg.span.shrink_to_hi().to(expr.span.shrink_to_hi()),\n                         \"or remove `.into_iter()` to iterate by value\",\n                         String::new(),\n                         Applicability::MaybeIncorrect,"}, {"sha": "1b96cd54c3ed01b4baf623f9a0ab0c506de9f9c3", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91fb223f5913ff44902e818c8d26b6bf06e666b6/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fb223f5913ff44902e818c8d26b6bf06e666b6/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=91fb223f5913ff44902e818c8d26b6bf06e666b6", "patch": "@@ -83,7 +83,7 @@ pub fn change_iteration_variable_pattern() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck, promoted_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir, typeck\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n@@ -108,7 +108,7 @@ pub fn change_iterable() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, promoted_mir, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -183,7 +183,7 @@ pub fn add_loop_label_to_break() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn add_loop_label_to_continue() {\n #[cfg(not(any(cfail1,cfail4)))]\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n-#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail5\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail6\")]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;"}, {"sha": "d3234b5758a575b2066f57cb673959ef5420ed3b", "filename": "src/tools/clippy/clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91fb223f5913ff44902e818c8d26b6bf06e666b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fb223f5913ff44902e818c8d26b6bf06e666b6/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs?ref=91fb223f5913ff44902e818c8d26b6bf06e666b6", "patch": "@@ -63,13 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n             if is_copy(cx, vec_type(cx.typeck_results().expr_ty_adjusted(arg)));\n             then {\n                 // report the error around the `vec!` not inside `<std macros>:`\n-                let span = arg.span\n-                    .ctxt()\n-                    .outer_expn_data()\n-                    .call_site\n-                    .ctxt()\n-                    .outer_expn_data()\n-                    .call_site;\n+                let span = arg.span.ctxt().outer_expn_data().call_site;\n                 self.check_vec_macro(cx, &vec_args, Mutability::Not, span);\n             }\n         }"}]}