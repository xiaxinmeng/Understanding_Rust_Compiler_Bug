{"sha": "3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNGIxMTM1ZjhmNmYxMjEwYjM4MzEzODVlNTVmMmQyY2FmMjI1MmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-25T00:45:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-25T00:45:01Z"}, "message": "Rollup merge of #63833 - estebank:suggest-closure-call, r=petrochenkov\n\nSuggest calling closure with resolved return type when appropriate\n\nFollow up to #63337. CC #63100.\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n   |\nLL |     let closure = || 42;\n   |                   -- closure defined here\nLL |     let _: usize = closure;\n   |                    ^^^^^^^\n   |                    |\n   |                    expected usize, found closure\n   |                    help: use parentheses to call this closure: `closure()`\n   |\n   = note: expected type `usize`\n              found type `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`\n```", "tree": {"sha": "b04a3d7acba6c84746390bc9851c21833e2065b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b04a3d7acba6c84746390bc9851c21833e2065b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdYdoNCRBK7hj4Ov3rIwAAdHIIAD6gEgi6nof4NHYYLbaBV061\n9skX9Vs3Mdl/T19j1xzL6mAuMbS6ZY7F1eyXldNOUBWk1GUS6cqOqJ0hjzNwuLQ5\nVpQJmbliCydChAI2SCaE9JyhUXywviyAweWNlCXRs0rWGEvFaO123Vf0eUkWcwhj\n+zVpC/8NXUPrxbAJUJhy52Dq4kTKdrLcR6NerkjzTed/F5azOhpUTGlIW1eJDjn9\nMFNu78HmBapxGQt2U72byhgrHvVavUBn85d2zjPA6hnqqNNLLac3kHFfKTgFvkmm\nOsH/aIYGpGGySw7UcsUsptsyRteF8PuEnZgH557FTkp3f9BcLNCVwGNbqgWLFcM=\n=W5T5\n-----END PGP SIGNATURE-----\n", "payload": "tree b04a3d7acba6c84746390bc9851c21833e2065b7\nparent ed8e13c2cbd7c27aec7666bf3f4a98fe6bc24f2b\nparent 3890befa8ea9def7e1c9c57a321c7b8c9f759f1f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566693901 +0200\ncommitter GitHub <noreply@github.com> 1566693901 +0200\n\nRollup merge of #63833 - estebank:suggest-closure-call, r=petrochenkov\n\nSuggest calling closure with resolved return type when appropriate\n\nFollow up to #63337. CC #63100.\n\n```\nerror[E0308]: mismatched types\n  --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n   |\nLL |     let closure = || 42;\n   |                   -- closure defined here\nLL |     let _: usize = closure;\n   |                    ^^^^^^^\n   |                    |\n   |                    expected usize, found closure\n   |                    help: use parentheses to call this closure: `closure()`\n   |\n   = note: expected type `usize`\n              found type `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "html_url": "https://github.com/rust-lang/rust/commit/3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed8e13c2cbd7c27aec7666bf3f4a98fe6bc24f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8e13c2cbd7c27aec7666bf3f4a98fe6bc24f2b", "html_url": "https://github.com/rust-lang/rust/commit/ed8e13c2cbd7c27aec7666bf3f4a98fe6bc24f2b"}, {"sha": "3890befa8ea9def7e1c9c57a321c7b8c9f759f1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3890befa8ea9def7e1c9c57a321c7b8c9f759f1f", "html_url": "https://github.com/rust-lang/rust/commit/3890befa8ea9def7e1c9c57a321c7b8c9f759f1f"}], "stats": {"total": 163, "additions": 102, "deletions": 61}, "files": [{"sha": "f41fffe507d97f177b38c6097dab7660214e08db", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "patch": "@@ -385,7 +385,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         let ty = self.closure_sig_ty(def_id, tcx);\n         match ty.sty {\n             ty::FnPtr(sig) => sig,\n-            _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty),\n+            _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty.sty),\n         }\n     }\n }"}, {"sha": "61b9c2a15ba165f514df377aaa229ee6aa9bbaf2", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "patch": "@@ -799,12 +799,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// adjusted type of the expression, if successful.\n     /// Adjustments are only recorded if the coercion succeeded.\n     /// The expressions *must not* have any pre-existing adjustments.\n-    pub fn try_coerce(&self,\n-                      expr: &hir::Expr,\n-                      expr_ty: Ty<'tcx>,\n-                      target: Ty<'tcx>,\n-                      allow_two_phase: AllowTwoPhase)\n-                      -> RelateResult<'tcx, Ty<'tcx>> {\n+    pub fn try_coerce(\n+        &self,\n+        expr: &hir::Expr,\n+        expr_ty: Ty<'tcx>,\n+        target: Ty<'tcx>,\n+        allow_two_phase: AllowTwoPhase,\n+    ) -> RelateResult<'tcx, Ty<'tcx>> {\n         let source = self.resolve_type_vars_with_obligations(expr_ty);\n         debug!(\"coercion::try({:?}: {:?} -> {:?})\", expr, source, target);\n "}, {"sha": "d92ce29f284593fc7a692b3d1641d2e5cef520e2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 77, "deletions": 53, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "patch": "@@ -3917,75 +3917,99 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) -> bool {\n-        match found.sty {\n-            ty::FnDef(..) | ty::FnPtr(_) => {}\n-            _ => return false,\n-        }\n         let hir = self.tcx.hir();\n+        let (def_id, sig) = match found.sty {\n+            ty::FnDef(def_id, _) => (def_id, found.fn_sig(self.tcx)),\n+            ty::Closure(def_id, substs) => {\n+                // We don't use `closure_sig` to account for malformed closures like\n+                // `|_: [_; continue]| {}` and instead we don't suggest anything.\n+                let closure_sig_ty = substs.closure_sig_ty(def_id, self.tcx);\n+                (def_id, match closure_sig_ty.sty {\n+                    ty::FnPtr(sig) => sig,\n+                    _ => return false,\n+                })\n+            }\n+            _ => return false,\n+        };\n \n-        let sig = found.fn_sig(self.tcx);\n         let sig = self\n             .replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, &sig)\n             .0;\n         let sig = self.normalize_associated_types_in(expr.span, &sig);\n-        if let Ok(_) = self.try_coerce(expr, sig.output(), expected, AllowTwoPhase::No) {\n+        if self.can_coerce(sig.output(), expected) {\n             let (mut sugg_call, applicability) = if sig.inputs().is_empty() {\n                 (String::new(), Applicability::MachineApplicable)\n             } else {\n                 (\"...\".to_string(), Applicability::HasPlaceholders)\n             };\n             let mut msg = \"call this function\";\n-            if let ty::FnDef(def_id, ..) = found.sty {\n-                match hir.get_if_local(def_id) {\n-                    Some(Node::Item(hir::Item {\n-                        node: ItemKind::Fn(.., body_id),\n-                        ..\n-                    })) |\n-                    Some(Node::ImplItem(hir::ImplItem {\n-                        node: hir::ImplItemKind::Method(_, body_id),\n-                        ..\n-                    })) |\n-                    Some(Node::TraitItem(hir::TraitItem {\n-                        node: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n-                        ..\n-                    })) => {\n-                        let body = hir.body(*body_id);\n-                        sugg_call = body.arguments.iter()\n-                            .map(|arg| match &arg.pat.node {\n-                                hir::PatKind::Binding(_, _, ident, None)\n-                                if ident.name != kw::SelfLower => ident.to_string(),\n-                                _ => \"_\".to_string(),\n-                            }).collect::<Vec<_>>().join(\", \");\n+            match hir.get_if_local(def_id) {\n+                Some(Node::Item(hir::Item {\n+                    node: ItemKind::Fn(.., body_id),\n+                    ..\n+                })) |\n+                Some(Node::ImplItem(hir::ImplItem {\n+                    node: hir::ImplItemKind::Method(_, body_id),\n+                    ..\n+                })) |\n+                Some(Node::TraitItem(hir::TraitItem {\n+                    node: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n+                    ..\n+                })) => {\n+                    let body = hir.body(*body_id);\n+                    sugg_call = body.arguments.iter()\n+                        .map(|arg| match &arg.pat.node {\n+                            hir::PatKind::Binding(_, _, ident, None)\n+                            if ident.name != kw::SelfLower => ident.to_string(),\n+                            _ => \"_\".to_string(),\n+                        }).collect::<Vec<_>>().join(\", \");\n+                }\n+                Some(Node::Expr(hir::Expr {\n+                    node: ExprKind::Closure(_, _, body_id, closure_span, _),\n+                    span: full_closure_span,\n+                    ..\n+                })) => {\n+                    if *full_closure_span == expr.span {\n+                        return false;\n                     }\n-                    Some(Node::Ctor(hir::VariantData::Tuple(fields, _))) => {\n-                        sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                        match hir.as_local_hir_id(def_id).and_then(|hir_id| hir.def_kind(hir_id)) {\n-                            Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n-                                msg = \"instantiate this tuple variant\";\n-                            }\n-                            Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Struct, _)) => {\n-                                msg = \"instantiate this tuple struct\";\n-                            }\n-                            _ => {}\n+                    err.span_label(*closure_span, \"closure defined here\");\n+                    msg = \"call this closure\";\n+                    let body = hir.body(*body_id);\n+                    sugg_call = body.arguments.iter()\n+                        .map(|arg| match &arg.pat.node {\n+                            hir::PatKind::Binding(_, _, ident, None)\n+                            if ident.name != kw::SelfLower => ident.to_string(),\n+                            _ => \"_\".to_string(),\n+                        }).collect::<Vec<_>>().join(\", \");\n+                }\n+                Some(Node::Ctor(hir::VariantData::Tuple(fields, _))) => {\n+                    sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n+                    match hir.as_local_hir_id(def_id).and_then(|hir_id| hir.def_kind(hir_id)) {\n+                        Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n+                            msg = \"instantiate this tuple variant\";\n                         }\n+                        Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Struct, _)) => {\n+                            msg = \"instantiate this tuple struct\";\n+                        }\n+                        _ => {}\n                     }\n-                    Some(Node::ForeignItem(hir::ForeignItem {\n-                        node: hir::ForeignItemKind::Fn(_, idents, _),\n-                        ..\n-                    })) |\n-                    Some(Node::TraitItem(hir::TraitItem {\n-                        node: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n-                        ..\n-                    })) => sugg_call = idents.iter()\n-                            .map(|ident| if ident.name != kw::SelfLower {\n-                                ident.to_string()\n-                            } else {\n-                                \"_\".to_string()\n-                            }).collect::<Vec<_>>()\n-                            .join(\", \"),\n-                    _ => {}\n                 }\n-            };\n+                Some(Node::ForeignItem(hir::ForeignItem {\n+                    node: hir::ForeignItemKind::Fn(_, idents, _),\n+                    ..\n+                })) |\n+                Some(Node::TraitItem(hir::TraitItem {\n+                    node: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n+                    ..\n+                })) => sugg_call = idents.iter()\n+                        .map(|ident| if ident.name != kw::SelfLower {\n+                            ident.to_string()\n+                        } else {\n+                            \"_\".to_string()\n+                        }).collect::<Vec<_>>()\n+                        .join(\", \"),\n+                _ => {}\n+            }\n             if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n                 err.span_suggestion(\n                     expr.span,"}, {"sha": "dd5af3e344cabd1ffeb8dae4edc204b5883c48d9", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs?ref=3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "patch": "@@ -42,4 +42,6 @@ fn main() {\n     let _: usize = X::bal; //~ ERROR mismatched types\n     let _: usize = X.ban; //~ ERROR attempted to take value of method\n     let _: usize = X.bal; //~ ERROR attempted to take value of method\n+    let closure = || 42;\n+    let _: usize = closure; //~ ERROR mismatched types\n }"}, {"sha": "28b331bdbdcbc468e69b48cd50845d93993e9295", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d4b1135f8f6f1210b3831385e55f2d2caf2252f/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=3d4b1135f8f6f1210b3831385e55f2d2caf2252f", "patch": "@@ -214,7 +214,21 @@ error[E0615]: attempted to take value of method `bal` on type `X`\n LL |     let _: usize = X.bal;\n    |                      ^^^ help: use parentheses to call the method: `bal()`\n \n-error: aborting due to 16 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n+   |\n+LL |     let closure = || 42;\n+   |                   -- closure defined here\n+LL |     let _: usize = closure;\n+   |                    ^^^^^^^\n+   |                    |\n+   |                    expected usize, found closure\n+   |                    help: use parentheses to call this closure: `closure()`\n+   |\n+   = note: expected type `usize`\n+              found type `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`\n+\n+error: aborting due to 17 previous errors\n \n Some errors have detailed explanations: E0308, E0423, E0615.\n For more information about an error, try `rustc --explain E0308`."}]}