{"sha": "56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZTU0MWRkZjFlZTlhNGU5ZDY1YTNjZjZmOTUyYzMxYzNlZGY1ZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T17:19:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T17:19:39Z"}, "message": "Auto merge of #50801 - eddyb:param-things, r=nikomatsakis\n\nQuick refactoring around Substs & friends.\n\nr? @nikomatsakis", "tree": {"sha": "8d0beabdf1f3c942cc159e0df6c329d1539663e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d0beabdf1f3c942cc159e0df6c329d1539663e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "html_url": "https://github.com/rust-lang/rust/commit/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6a4b1957e2407563f3c9005504f95138ffe28f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6a4b1957e2407563f3c9005504f95138ffe28f", "html_url": "https://github.com/rust-lang/rust/commit/6e6a4b1957e2407563f3c9005504f95138ffe28f"}, {"sha": "73f62106ad9f9bf10962bf10540510ec914ee305", "url": "https://api.github.com/repos/rust-lang/rust/commits/73f62106ad9f9bf10962bf10540510ec914ee305", "html_url": "https://github.com/rust-lang/rust/commit/73f62106ad9f9bf10962bf10540510ec914ee305"}], "stats": {"total": 527, "additions": 246, "deletions": 281}, "files": [{"sha": "edd9f0fab519ddd4b201ee61ceeae866372e6695", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -739,8 +739,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n             ref parent_count,\n             ref params,\n \n-            // Reverse map to each `TypeParamDef`'s `index` field, from\n-            // `def_id.index` (`def_id.krate` is the same as the item's).\n+            // Reverse map to each param's `index` field, from its `def_id`.\n             param_def_id_to_index: _, // Don't hash this\n             has_self,\n             has_late_bound_regions,\n@@ -754,11 +753,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for ty::Generics {\n     }\n }\n \n-impl_stable_hash_for!(enum ty::GenericParamDefKind {\n-    Lifetime,\n-    Type(ty)\n-});\n-\n impl_stable_hash_for!(struct ty::GenericParamDef {\n     name,\n     def_id,\n@@ -767,11 +761,25 @@ impl_stable_hash_for!(struct ty::GenericParamDef {\n     kind\n });\n \n-impl_stable_hash_for!(struct ty::TypeParamDef {\n-    has_default,\n-    object_lifetime_default,\n-    synthetic\n-});\n+impl<'a> HashStable<StableHashingContext<'a>> for ty::GenericParamDefKind {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+        match *self {\n+            ty::GenericParamDefKind::Lifetime => {}\n+            ty::GenericParamDefKind::Type {\n+                has_default,\n+                ref object_lifetime_default,\n+                ref synthetic,\n+            } => {\n+                has_default.hash_stable(hcx, hasher);\n+                object_lifetime_default.hash_stable(hcx, hasher);\n+                synthetic.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}\n \n impl<'a, 'gcx, T> HashStable<StableHashingContext<'a>>\n for ::middle::resolve_lifetime::Set1<T>"}, {"sha": "1164c332330bc30d6bd0ad71532099517c1da44d", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -256,11 +256,11 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n \n                     CanonicalTyVarKind::Float => self.tcx.mk_float_var(self.next_float_var_id()),\n                 };\n-                Kind::from(ty)\n+                ty.into()\n             }\n \n             CanonicalVarKind::Region => {\n-                Kind::from(self.next_region_var(RegionVariableOrigin::MiscVariable(span)))\n+                self.next_region_var(RegionVariableOrigin::MiscVariable(span)).into()\n             }\n         }\n     }\n@@ -555,7 +555,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                      opportunistically resolved to {:?}\",\n                     vid, r\n                 );\n-                let cvar = self.canonical_var(info, Kind::from(r));\n+                let cvar = self.canonical_var(info, r.into());\n                 self.tcx().mk_region(ty::ReCanonical(cvar))\n             }\n \n@@ -570,7 +570,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n                     let info = CanonicalVarInfo {\n                         kind: CanonicalVarKind::Region,\n                     };\n-                    let cvar = self.canonical_var(info, Kind::from(r));\n+                    let cvar = self.canonical_var(info, r.into());\n                     self.tcx().mk_region(ty::ReCanonical(cvar))\n                 } else {\n                     r\n@@ -750,7 +750,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n             let info = CanonicalVarInfo {\n                 kind: CanonicalVarKind::Ty(ty_kind),\n             };\n-            let cvar = self.canonical_var(info, Kind::from(ty_var));\n+            let cvar = self.canonical_var(info, ty_var.into());\n             self.tcx().mk_infer(ty::InferTy::CanonicalTy(cvar))\n         }\n     }"}, {"sha": "6b31f869ef9b30796ceb1c091d9406326614e73f", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -915,7 +915,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // region parameter definition.\n                 self.next_region_var(EarlyBoundRegion(span, param.name)).into()\n             }\n-            GenericParamDefKind::Type(_) => {\n+            GenericParamDefKind::Type {..} => {\n                 // Create a type inference variable for the given\n                 // type parameter definition. The substitutions are\n                 // for actual parameters that may be referred to by"}, {"sha": "5f150ba1e2d6f805f0a4b703efce9ec1fc875f02", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -1658,18 +1658,14 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 self.xcrate_object_lifetime_defaults\n                     .entry(def_id)\n                     .or_insert_with(|| {\n-                        tcx.generics_of(def_id)\n-                            .params\n-                            .iter()\n-                            .filter_map(|param| {\n-                                match param.kind {\n-                                    GenericParamDefKind::Type(ty) => {\n-                                        Some(ty.object_lifetime_default)\n-                                    }\n-                                    GenericParamDefKind::Lifetime => None,\n+                        tcx.generics_of(def_id).params.iter().filter_map(|param| {\n+                            match param.kind {\n+                                GenericParamDefKind::Type { object_lifetime_default, .. } => {\n+                                    Some(object_lifetime_default)\n                                 }\n-                            })\n-                            .collect()\n+                                GenericParamDefKind::Lifetime => None,\n+                            }\n+                        }).collect()\n                     })\n             };\n             unsubst"}, {"sha": "49aee8bcd01fe1e916a3bd011e0cb1519ac7e994", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         for param in generics.params.iter() {\n             let value = match param.kind {\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => continue,\n@@ -652,14 +652,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             && fallback_has_occurred\n                         {\n                             let predicate = trait_predicate.map_bound(|mut trait_pred| {\n-                                {\n-                                    let trait_ref = &mut trait_pred.trait_ref;\n-                                    let never_substs = trait_ref.substs;\n-                                    let mut unit_substs = Vec::with_capacity(never_substs.len());\n-                                    unit_substs.push(self.tcx.mk_nil().into());\n-                                    unit_substs.extend(&never_substs[1..]);\n-                                    trait_ref.substs = self.tcx.intern_substs(&unit_substs);\n-                                }\n+                                trait_pred.trait_ref.substs = self.tcx.mk_substs_trait(\n+                                    self.tcx.mk_nil(),\n+                                    &trait_pred.trait_ref.substs[1..],\n+                                );\n                                 trait_pred\n                             });\n                             let unit_obligation = Obligation {"}, {"sha": "d846b23d20da772ac6a029b565b26d85825caaee", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -838,7 +838,7 @@ fn vtable_methods<'a, 'tcx>(\n                     Substs::for_item(tcx, def_id, |param, _| {\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                            GenericParamDefKind::Type(_) => {\n+                            GenericParamDefKind::Type {..} => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         }"}, {"sha": "0550cf7c6d2c040a561b6580e9e6a7dd2e9eeb80", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let generics = tcx.generics_of(trait_ref.def_id);\n         let generic_map = generics.params.iter().filter_map(|param| {\n             let value = match param.kind {\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => return None"}, {"sha": "c3b5b8e6fb35ffc2a6656a4ea05e6d9eb238a2ce", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -37,7 +37,7 @@ use dep_graph::{DepNodeIndex, DepKind};\n use hir::def_id::DefId;\n use infer;\n use infer::{InferCtxt, InferOk, TypeFreshener};\n-use ty::subst::{Kind, Subst, Substs};\n+use ty::subst::{Subst, Substs};\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use ty::fast_reject;\n use ty::relate::TypeRelation;\n@@ -3019,7 +3019,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 // with a potentially unsized trailing field.\n                 let params = substs_a.iter().enumerate().map(|(i, &k)| {\n                     if ty_params.contains(i) {\n-                        Kind::from(tcx.types.err)\n+                        tcx.types.err.into()\n                     } else {\n                         k\n                     }\n@@ -3058,24 +3058,24 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n                     inner_source,\n-                    &[inner_target]));\n+                    &[inner_target.into()]));\n             }\n \n             // (.., T) -> (.., U).\n             (&ty::TyTuple(tys_a), &ty::TyTuple(tys_b)) => {\n                 assert_eq!(tys_a.len(), tys_b.len());\n \n                 // The last field of the tuple has to exist.\n-                let (a_last, a_mid) = if let Some(x) = tys_a.split_last() {\n+                let (&a_last, a_mid) = if let Some(x) = tys_a.split_last() {\n                     x\n                 } else {\n                     return Err(Unimplemented);\n                 };\n-                let b_last = tys_b.last().unwrap();\n+                let &b_last = tys_b.last().unwrap();\n \n                 // Check that the source tuple with the target's\n                 // last element is equal to the target.\n-                let new_tuple = tcx.mk_tup(a_mid.iter().chain(Some(b_last)));\n+                let new_tuple = tcx.mk_tup(a_mid.iter().cloned().chain(iter::once(b_last)));\n                 let InferOk { obligations, .. } =\n                     self.infcx.at(&obligation.cause, obligation.param_env)\n                               .eq(target, new_tuple)\n@@ -3089,7 +3089,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n                     a_last,\n-                    &[b_last]));\n+                    &[b_last.into()]));\n             }\n \n             _ => bug!()"}, {"sha": "684022f8e8a3cc58a208dce8ce3b41cd14712f1f", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::subst::{Subst, Substs};\n+use ty::subst::{Kind, Subst, Substs};\n use ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use ty::outlives::Component;\n use util::nodemap::FxHashSet;\n@@ -430,13 +430,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                    cause: ObligationCause<'tcx>,\n                                    trait_def_id: DefId,\n                                    recursion_depth: usize,\n-                                   param_ty: Ty<'tcx>,\n-                                   ty_params: &[Ty<'tcx>])\n+                                   self_ty: Ty<'tcx>,\n+                                   params: &[Kind<'tcx>])\n         -> PredicateObligation<'tcx>\n     {\n         let trait_ref = ty::TraitRef {\n             def_id: trait_def_id,\n-            substs: self.mk_substs_trait(param_ty, ty_params)\n+            substs: self.mk_substs_trait(self_ty, params)\n         };\n         predicate_for_trait_ref(cause, param_env, trait_ref, recursion_depth)\n     }\n@@ -512,7 +512,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         };\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,\n-            substs: self.mk_substs_trait(self_ty, &[arguments_tuple]),\n+            substs: self.mk_substs_trait(self_ty, &[arguments_tuple.into()]),\n         };\n         ty::Binder::bind((trait_ref, sig.skip_binder().output()))\n     }"}, {"sha": "a3d380c3e146f90f8029281f112ec848acdaa4af", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -2329,11 +2329,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let substs = Substs::for_item(self, def_id, |param, substs| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => bug!(),\n-                GenericParamDefKind::Type(ty_param) => {\n+                GenericParamDefKind::Type { has_default, .. } => {\n                     if param.index == 0 {\n                         ty.into()\n                     } else {\n-                        assert!(ty_param.has_default);\n+                        assert!(has_default);\n                         self.type_of(param.def_id).subst(self, substs).into()\n                     }\n                 }\n@@ -2477,7 +2477,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             GenericParamDefKind::Lifetime => {\n                 self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n-            GenericParamDefKind::Type(_) => self.mk_ty_param(param.index, param.name).into(),\n+            GenericParamDefKind::Type {..} => self.mk_ty_param(param.index, param.name).into(),\n         }\n     }\n \n@@ -2584,11 +2584,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_substs_trait(self,\n-                     s: Ty<'tcx>,\n-                     t: &[Ty<'tcx>])\n+                     self_ty: Ty<'tcx>,\n+                     rest: &[Kind<'tcx>])\n                     -> &'tcx Substs<'tcx>\n     {\n-        self.mk_substs(iter::once(s).chain(t.into_iter().cloned()).map(Kind::from))\n+        self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))\n     }\n \n     pub fn mk_clauses<I: InternAs<[Clause<'tcx>], Clauses<'tcx>>>(self, iter: I) -> I::Output {\n@@ -2600,7 +2600,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_goal(self, goal: Goal<'tcx>) -> &'tcx Goal {\n-        &self.mk_goals(iter::once(goal))[0]\n+        &self.intern_goals(&[goal])[0]\n     }\n \n     pub fn lint_node<S: Into<MultiSpan>>(self,"}, {"sha": "66edbeff749f712f8762bf84f0035bf4c3452a5a", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -10,7 +10,6 @@\n \n use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n-use ty::subst::Kind;\n use traits;\n use rustc_target::spec::abi::Abi;\n use util::ppaux;\n@@ -361,7 +360,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs([Kind::from(self_ty), sig.inputs()[0].into()].iter().cloned());\n+    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n \n     debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n     Instance { def, substs }"}, {"sha": "1726ed27d14d6f49b356816e918cc5a0a0de4aa0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -714,13 +714,6 @@ pub enum IntVarValue {\n #[derive(Clone, Copy, PartialEq, Eq)]\n pub struct FloatVarValue(pub ast::FloatTy);\n \n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct TypeParamDef {\n-    pub has_default: bool,\n-    pub object_lifetime_default: ObjectLifetimeDefault,\n-    pub synthetic: Option<hir::SyntheticTyParamKind>,\n-}\n-\n impl ty::EarlyBoundRegion {\n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         ty::BoundRegion::BrNamed(self.def_id, self.name)\n@@ -730,7 +723,11 @@ impl ty::EarlyBoundRegion {\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum GenericParamDefKind {\n     Lifetime,\n-    Type(TypeParamDef),\n+    Type {\n+        has_default: bool,\n+        object_lifetime_default: ObjectLifetimeDefault,\n+        synthetic: Option<hir::SyntheticTyParamKind>,\n+    }\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n@@ -811,7 +808,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n         for param in &self.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => own_counts.lifetimes += 1,\n-                GenericParamDefKind::Type(_) => own_counts.types += 1,\n+                GenericParamDefKind::Type {..} => own_counts.types += 1,\n             };\n         }\n \n@@ -821,7 +818,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n     pub fn requires_monomorphization(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> bool {\n         for param in &self.params {\n             match param.kind {\n-                GenericParamDefKind::Type(_) => return true,\n+                GenericParamDefKind::Type {..} => return true,\n                 GenericParamDefKind::Lifetime => {}\n             }\n         }\n@@ -850,15 +847,15 @@ impl<'a, 'gcx, 'tcx> Generics {\n         }\n     }\n \n-    /// Returns the `TypeParamDef` associated with this `ParamTy`.\n+    /// Returns the `GenericParamDef` associated with this `ParamTy`.\n     pub fn type_param(&'tcx self,\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &'tcx GenericParamDef {\n         if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n             match param.kind {\n-                ty::GenericParamDefKind::Type(_) => param,\n+                ty::GenericParamDefKind::Type {..} => param,\n                 _ => bug!(\"expected type parameter, but found another generic parameter\")\n             }\n         } else {\n@@ -2678,11 +2675,11 @@ fn adt_sized_constraint<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   -> &'tcx [Ty<'tcx>] {\n     let def = tcx.adt_def(def_id);\n \n-    let result = tcx.intern_type_list(&def.variants.iter().flat_map(|v| {\n+    let result = tcx.mk_type_list(def.variants.iter().flat_map(|v| {\n         v.fields.last()\n     }).flat_map(|f| {\n         def.sized_constraint_for_ty(tcx, tcx.type_of(f.did))\n-    }).collect::<Vec<_>>());\n+    }));\n \n     debug!(\"adt_sized_constraint: {:?} => {:?}\", def, result);\n "}, {"sha": "7603ed7102327e1b4bd9b03426a0cd3d1c761416", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -24,7 +24,6 @@ use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n use hir as ast;\n-use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n pub type RelateResult<'tcx, T> = Result<T, TypeError<'tcx>>;\n \n@@ -154,6 +153,8 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n                            -> RelateResult<'tcx, ty::FnSig<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n+        let tcx = relation.tcx();\n+\n         if a.variadic != b.variadic {\n             return Err(TypeError::VariadicMismatch(\n                 expected_found(relation, &a.variadic, &b.variadic)));\n@@ -175,9 +176,9 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n                 } else {\n                     relation.relate_with_variance(ty::Contravariant, &a, &b)\n                 }\n-            }).collect::<Result<AccumulateVec<[_; 8]>, _>>()?;\n+            });\n         Ok(ty::FnSig {\n-            inputs_and_output: relation.tcx().intern_type_list(&inputs_and_output),\n+            inputs_and_output: tcx.mk_type_list(inputs_and_output)?,\n             variadic: a.variadic,\n             unsafety,\n             abi,"}, {"sha": "6bc0cb51a92e49c50fb0dc84fd5e226d1af29412", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -622,6 +622,18 @@ impl<'tcx> TraitRef<'tcx> {\n         // associated types.\n         self.substs.types()\n     }\n+\n+    pub fn from_method(tcx: TyCtxt<'_, '_, 'tcx>,\n+                       trait_id: DefId,\n+                       substs: &Substs<'tcx>)\n+                       -> ty::TraitRef<'tcx> {\n+        let defs = tcx.generics_of(trait_id);\n+\n+        ty::TraitRef {\n+            def_id: trait_id,\n+            substs: tcx.intern_substs(&substs[..defs.params.len()])\n+        }\n+    }\n }\n \n pub type PolyTraitRef<'tcx> = Binder<TraitRef<'tcx>>;\n@@ -663,6 +675,18 @@ impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n         self.substs.types()\n     }\n \n+    pub fn erase_self_ty(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                         trait_ref: ty::TraitRef<'tcx>)\n+                         -> ty::ExistentialTraitRef<'tcx> {\n+        // Assert there is a Self.\n+        trait_ref.substs.type_at(0);\n+\n+        ty::ExistentialTraitRef {\n+            def_id: trait_ref.def_id,\n+            substs: tcx.intern_substs(&trait_ref.substs[1..])\n+        }\n+    }\n+\n     /// Object types don't have a self-type specified. Therefore, when\n     /// we convert the principal trait-ref into a normal trait-ref,\n     /// you must give *some* self-type. A common choice is `mk_err()`\n@@ -674,8 +698,7 @@ impl<'a, 'gcx, 'tcx> ExistentialTraitRef<'tcx> {\n \n         ty::TraitRef {\n             def_id: self.def_id,\n-            substs: tcx.mk_substs(\n-                iter::once(self_ty.into()).chain(self.substs.iter().cloned()))\n+            substs: tcx.mk_substs_trait(self_ty, self.substs)\n         }\n     }\n }\n@@ -686,6 +709,16 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n     pub fn def_id(&self) -> DefId {\n         self.skip_binder().def_id\n     }\n+\n+    /// Object types don't have a self-type specified. Therefore, when\n+    /// we convert the principal trait-ref into a normal trait-ref,\n+    /// you must give *some* self-type. A common choice is `mk_err()`\n+    /// or some skolemized type.\n+    pub fn with_self_ty(&self, tcx: TyCtxt<'_, '_, 'tcx>,\n+                        self_ty: Ty<'tcx>)\n+                        -> ty::PolyTraitRef<'tcx>  {\n+        self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))\n+    }\n }\n \n /// Binder is a binder for higher-ranked lifetimes. It is part of the\n@@ -1188,8 +1221,7 @@ impl<'a, 'tcx, 'gcx> ExistentialProjection<'tcx> {\n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n                 item_def_id: self.item_def_id,\n-                substs: tcx.mk_substs(\n-                iter::once(self_ty.into()).chain(self.substs.iter().cloned())),\n+                substs: tcx.mk_substs_trait(self_ty, self.substs),\n             },\n             ty: self.ty,\n         }"}, {"sha": "f44e1533f520a11792b82121f8c1d84c7d4139b0", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 28, "deletions": 91, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -11,16 +11,16 @@\n // Type substitutions.\n \n use hir::def_id::DefId;\n-use ty::{self, Lift, Slice, Region, Ty, TyCtxt};\n+use ty::{self, Lift, Slice, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n+use rustc_data_structures::array_vec::ArrayVec;\n \n use core::intrinsics;\n use std::fmt;\n-use std::iter;\n use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n@@ -40,7 +40,7 @@ const TAG_MASK: usize = 0b11;\n const TYPE_TAG: usize = 0b00;\n const REGION_TAG: usize = 0b01;\n \n-#[derive(Debug)]\n+#[derive(Debug, RustcEncodable, RustcDecodable)]\n pub enum UnpackedKind<'tcx> {\n     Lifetime(ty::Region<'tcx>),\n     Type(Ty<'tcx>),\n@@ -143,34 +143,13 @@ impl<'tcx> TypeFoldable<'tcx> for Kind<'tcx> {\n \n impl<'tcx> Encodable for Kind<'tcx> {\n     fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n-        e.emit_enum(\"Kind\", |e| {\n-            match self.unpack() {\n-                UnpackedKind::Lifetime(lt) => {\n-                    e.emit_enum_variant(\"Region\", REGION_TAG, 1, |e| {\n-                        e.emit_enum_variant_arg(0, |e| lt.encode(e))\n-                    })\n-                }\n-                UnpackedKind::Type(ty) => {\n-                    e.emit_enum_variant(\"Ty\", TYPE_TAG, 1, |e| {\n-                        e.emit_enum_variant_arg(0, |e| ty.encode(e))\n-                    })\n-                }\n-            }\n-        })\n+        self.unpack().encode(e)\n     }\n }\n \n impl<'tcx> Decodable for Kind<'tcx> {\n     fn decode<D: Decoder>(d: &mut D) -> Result<Kind<'tcx>, D::Error> {\n-        d.read_enum(\"Kind\", |d| {\n-            d.read_enum_variant(&[\"Ty\", \"Region\"], |d, tag| {\n-                match tag {\n-                    TYPE_TAG => Ty::decode(d).map(Kind::from),\n-                    REGION_TAG => Region::decode(d).map(Kind::from),\n-                    _ => Err(d.error(\"invalid Kind tag\"))\n-                }\n-            })\n-        })\n+        Ok(UnpackedKind::decode(d)?.pack())\n     }\n }\n \n@@ -198,7 +177,12 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         let defs = tcx.generics_of(def_id);\n-        let mut substs = Vec::with_capacity(defs.count());\n+        let count = defs.count();\n+        let mut substs = if count <= 8 {\n+            AccumulateVec::Array(ArrayVec::new())\n+        } else {\n+            AccumulateVec::Heap(Vec::with_capacity(count))\n+        };\n         Substs::fill_item(&mut substs, tcx, defs, &mut mk_kind);\n         tcx.intern_substs(&substs)\n     }\n@@ -210,17 +194,18 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                         -> &'tcx Substs<'tcx>\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n-        let defs = tcx.generics_of(def_id);\n-        let mut result = Vec::with_capacity(defs.count());\n-        result.extend(self[..].iter().cloned());\n-        Substs::fill_single(&mut result, defs, &mut mk_kind);\n-        tcx.intern_substs(&result)\n+        Substs::for_item(tcx, def_id, |param, substs| {\n+            match self.get(param.index as usize) {\n+                Some(&kind) => kind,\n+                None => mk_kind(param, substs),\n+            }\n+        })\n     }\n \n-    pub fn fill_item<F>(substs: &mut Vec<Kind<'tcx>>,\n-                             tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                             defs: &ty::Generics,\n-                             mk_kind: &mut F)\n+    fn fill_item<F>(substs: &mut AccumulateVec<[Kind<'tcx>; 8]>,\n+                    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                    defs: &ty::Generics,\n+                    mk_kind: &mut F)\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n \n@@ -231,15 +216,18 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         Substs::fill_single(substs, defs, mk_kind)\n     }\n \n-    fn fill_single<F>(substs: &mut Vec<Kind<'tcx>>,\n-                           defs: &ty::Generics,\n-                           mk_kind: &mut F)\n+    fn fill_single<F>(substs: &mut AccumulateVec<[Kind<'tcx>; 8]>,\n+                      defs: &ty::Generics,\n+                      mk_kind: &mut F)\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         for param in &defs.params {\n             let kind = mk_kind(param, substs);\n             assert_eq!(param.index as usize, substs.len());\n-            substs.push(kind);\n+            match *substs {\n+                AccumulateVec::Array(ref mut arr) => arr.push(kind),\n+                AccumulateVec::Heap(ref mut vec) => vec.push(kind),\n+            }\n         }\n     }\n \n@@ -543,54 +531,3 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n         self.tcx().mk_region(ty::fold::shift_region(*region, self.region_binders_passed))\n     }\n }\n-\n-// Helper methods that modify substitutions.\n-\n-impl<'a, 'gcx, 'tcx> ty::TraitRef<'tcx> {\n-    pub fn from_method(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                       trait_id: DefId,\n-                       substs: &Substs<'tcx>)\n-                       -> ty::TraitRef<'tcx> {\n-        let defs = tcx.generics_of(trait_id);\n-\n-        ty::TraitRef {\n-            def_id: trait_id,\n-            substs: tcx.intern_substs(&substs[..defs.params.len()])\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx, 'tcx> ty::ExistentialTraitRef<'tcx> {\n-    pub fn erase_self_ty(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                         trait_ref: ty::TraitRef<'tcx>)\n-                         -> ty::ExistentialTraitRef<'tcx> {\n-        // Assert there is a Self.\n-        trait_ref.substs.type_at(0);\n-\n-        ty::ExistentialTraitRef {\n-            def_id: trait_ref.def_id,\n-            substs: tcx.intern_substs(&trait_ref.substs[1..])\n-        }\n-    }\n-}\n-\n-impl<'a, 'gcx, 'tcx> ty::PolyExistentialTraitRef<'tcx> {\n-    /// Object types don't have a self-type specified. Therefore, when\n-    /// we convert the principal trait-ref into a normal trait-ref,\n-    /// you must give *some* self-type. A common choice is `mk_err()`\n-    /// or some skolemized type.\n-    pub fn with_self_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                        self_ty: Ty<'tcx>)\n-                        -> ty::PolyTraitRef<'tcx>  {\n-        // otherwise the escaping regions would be captured by the binder\n-        assert!(!self_ty.has_escaping_regions());\n-\n-        self.map_bound(|trait_ref| {\n-            ty::TraitRef {\n-                def_id: trait_ref.def_id,\n-                substs: tcx.mk_substs(\n-                    iter::once(self_ty.into()).chain(trait_ref.substs.iter().cloned()))\n-            }\n-        })\n-    }\n-}"}, {"sha": "e3db4972edc78ab0f4764b568d05653a54f3d1b3", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -572,7 +572,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         Substs::for_item(self, item_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.types.re_erased.into(),\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n                 }\n             }"}, {"sha": "82afce415a76124a5a87a7543446da9c5f17c998", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -337,7 +337,9 @@ impl PrintContext {\n                 let mut type_params =\n                     generics.params.iter().rev().filter_map(|param| {\n                         match param.kind {\n-                            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.has_default)),\n+                            GenericParamDefKind::Type { has_default, .. } => {\n+                                Some((param.def_id, has_default))\n+                            }\n                             GenericParamDefKind::Lifetime => None,\n                         }\n                     }).peekable();\n@@ -604,7 +606,7 @@ impl fmt::Debug for ty::GenericParamDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let type_name = match self.kind {\n             ty::GenericParamDefKind::Lifetime => \"Lifetime\",\n-            ty::GenericParamDefKind::Type(_) => \"Type\",\n+            ty::GenericParamDefKind::Type {..} => \"Type\",\n         };\n         write!(f, \"{}({}, {:?}, {})\",\n                type_name,"}, {"sha": "59d227557aeef9d5a766e2aa63ce6fcbabfdeb56", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -43,7 +43,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf};\n use rustc::ty::maps::Providers;\n use rustc::dep_graph::{DepNode, DepConstructor};\n-use rustc::ty::subst::Kind;\n use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::middle::exported_symbols;\n use rustc::util::common::{time, print_time_passes_entry};\n@@ -595,7 +594,7 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n             let start_fn = callee::resolve_and_get_fn(\n                 cx,\n                 start_def_id,\n-                cx.tcx.intern_substs(&[Kind::from(main_ret_ty)]),\n+                cx.tcx.intern_substs(&[main_ret_ty.into()]),\n             );\n             (start_fn, vec![bx.pointercast(rust_main, Type::i8p(cx).ptr_to()),\n                             arg_argc, arg_argv])"}, {"sha": "6a4b87ced152f4bfbaa270ee2783c1b784fc3d92", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -431,8 +431,10 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             sig.map_bound(|sig| {\n                 let state_did = tcx.lang_items().gen_state().unwrap();\n                 let state_adt_ref = tcx.adt_def(state_did);\n-                let state_substs = tcx.mk_substs([sig.yield_ty.into(),\n-                    sig.return_ty.into()].iter());\n+                let state_substs = tcx.intern_substs(&[\n+                    sig.yield_ty.into(),\n+                    sig.return_ty.into(),\n+                ]);\n                 let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n                 tcx.mk_fn_sig(iter::once(env_ty),"}, {"sha": "456aa1aa66f112feaa3d25823c70083a121a33f4", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -1375,9 +1375,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 }\n \n                 CastKind::Unsize => {\n+                    let &ty = ty;\n                     let trait_ref = ty::TraitRef {\n                         def_id: tcx.lang_items().coerce_unsized_trait().unwrap(),\n-                        substs: tcx.mk_substs_trait(op.ty(mir, tcx), &[ty]),\n+                        substs: tcx.mk_substs_trait(op.ty(mir, tcx), &[ty.into()]),\n                     };\n \n                     self.prove_trait_ref(trait_ref, location);"}, {"sha": "2bb96a856ce6d5a692c28aac5b0c32dc510c9a4e", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -669,7 +669,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 assert_eq!(self.mir_def_id, def_id);\n                 let ty = tcx.type_of(def_id);\n                 let ty = indices.fold_to_region_vids(tcx, &ty);\n-                ty::Binder::dummy(tcx.mk_type_list(iter::once(ty)))\n+                ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n             }\n         }\n     }"}, {"sha": "5dbe8d850bddc5c200f9874b91d487d95d5c14bc", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -312,7 +312,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         },\n                     }\n                     let eq_def_id = self.hir.tcx().lang_items().eq_trait().unwrap();\n-                    let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty]);\n+                    let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty.into()]);\n \n                     // take the argument by reference\n                     let region_scope = self.topmost_scope();"}, {"sha": "71dd35c010d649ac776407f08a77cf8214d9ba23", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -24,7 +24,7 @@ use rustc::infer::InferCtxt;\n use rustc::ty::layout::{IntegerExt, Size};\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt, layout};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Kind, Substs};\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::symbol::Symbol;\n@@ -235,7 +235,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                         trait_def_id: DefId,\n                         method_name: &str,\n                         self_ty: Ty<'tcx>,\n-                        params: &[Ty<'tcx>])\n+                        params: &[Kind<'tcx>])\n                         -> (Ty<'tcx>, Literal<'tcx>) {\n         let method_name = Symbol::intern(method_name);\n         let substs = self.tcx.mk_substs_trait(self_ty, params);"}, {"sha": "148b12cdc31247ccf821be0f3e75153261bf0651", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -196,7 +196,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::const_val::ConstVal;\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n-use rustc::ty::subst::{Substs, Kind};\n+use rustc::ty::subst::Substs;\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::session::config;\n@@ -1067,7 +1067,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n             start_def_id,\n-            self.tcx.intern_substs(&[Kind::from(main_ret_ty)])\n+            self.tcx.intern_substs(&[main_ret_ty.into()])\n         ).unwrap();\n \n         self.output.push(create_fn_mono_item(start_instance));\n@@ -1115,7 +1115,7 @@ fn create_mono_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     let substs = Substs::for_item(tcx, method.def_id, |param, _| {\n                         match param.kind {\n                             GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                            GenericParamDefKind::Type(_) => {\n+                            GenericParamDefKind::Type {..} => {\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         }"}, {"sha": "bf544e5120cd81d691e6741c6da186ee4c4db7f8", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -12,7 +12,6 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::lang_items::DropInPlaceFnLangItem;\n use rustc::traits;\n use rustc::ty::adjustment::CustomCoerceUnsized;\n-use rustc::ty::subst::Kind;\n use rustc::ty::{self, Ty, TyCtxt};\n \n pub use rustc::ty::Instance;\n@@ -89,10 +88,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     let sig = substs.closure_sig(closure_did, tcx);\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs([\n-        Kind::from(self_ty),\n-        sig.inputs()[0].into(),\n-    ].iter().cloned());\n+    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n \n     debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n     Instance { def, substs }\n@@ -164,7 +160,7 @@ pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let trait_ref = ty::Binder::bind(ty::TraitRef {\n         def_id: def_id,\n-        substs: tcx.mk_substs_trait(source_ty, &[target_ty])\n+        substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()])\n     });\n \n     match tcx.codegen_fulfill_obligation( (ty::ParamEnv::reveal_all(), trait_ref)) {"}, {"sha": "8375a5fb334072c0758cadff419ea285b9727319", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::mir::*;\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind};\n-use rustc::ty::subst::{Kind, Subst, Substs};\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::maps::Providers;\n \n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -170,7 +170,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let substs = if let Some(ty) = ty {\n-        tcx.mk_substs(iter::once(Kind::from(ty)))\n+        tcx.intern_substs(&[ty.into()])\n     } else {\n         Substs::identity_for_item(tcx, def_id)\n     };\n@@ -430,7 +430,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         let substs = Substs::for_item(tcx, self.def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => tcx.types.re_erased.into(),\n-                GenericParamDefKind::Type(_) => ty.into(),\n+                GenericParamDefKind::Type {..} => ty.into(),\n             }\n         });\n "}, {"sha": "c9727f55d2020f77957fbfd1444db70b7393cd69", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -861,8 +861,10 @@ impl MirPass for StateTransform {\n         // Compute GeneratorState<yield_ty, return_ty>\n         let state_did = tcx.lang_items().gen_state().unwrap();\n         let state_adt_ref = tcx.adt_def(state_did);\n-        let state_substs = tcx.mk_substs([yield_ty.into(),\n-            mir.return_ty().into()].iter());\n+        let state_substs = tcx.intern_substs(&[\n+            yield_ty.into(),\n+            mir.return_ty().into(),\n+        ]);\n         let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n \n         // We rename RETURN_PLACE which has type mir.return_ty to new_ret_local"}, {"sha": "f70a5ef57fe6d5a40fc8432e734604f6f0f02e4f", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -14,12 +14,12 @@ use rustc::mir::*;\n use rustc::middle::lang_items;\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::subst::Substs;\n use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n use util::patch::MirPatch;\n \n-use std::{iter, u32};\n+use std::u32;\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum DropFlagState {\n@@ -520,7 +520,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         let drop_trait = tcx.lang_items().drop_trait().unwrap();\n         let drop_fn = tcx.associated_items(drop_trait).next().unwrap();\n         let ty = self.place_ty(self.place);\n-        let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n+        let substs = tcx.mk_substs_trait(ty, &[]);\n \n         let ref_ty = tcx.mk_ref(tcx.types.re_erased, ty::TypeAndMut {\n             ty,"}, {"sha": "2e887e3d8f097b430bb160a9da6231d2ac376dc1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -401,8 +401,8 @@ impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.ev.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n-                GenericParamDefKind::Type(ty) => {\n-                    if ty.has_default {\n+                GenericParamDefKind::Type { has_default, .. } => {\n+                    if has_default {\n                         self.ev.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }\n@@ -1342,8 +1342,8 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n         for param in &self.tcx.generics_of(self.item_def_id).params {\n             match param.kind {\n-                GenericParamDefKind::Type(ty) => {\n-                    if ty.has_default {\n+                GenericParamDefKind::Type { has_default, .. } => {\n+                    if has_default {\n                         self.tcx.type_of(param.def_id).visit_with(self);\n                     }\n                 }"}, {"sha": "6e4c4a3ade3b6842ec21ac224bf7f299f6149e11", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -220,7 +220,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // `Implemented(Self: Trait<P1..Pn>) :- FromEnv(Self: Trait<P1..Pn>)`\n     let implemented_from_env = ProgramClause {\n         goal: impl_trait,\n-        hypotheses: tcx.mk_goals(iter::once(from_env)),\n+        hypotheses: tcx.intern_goals(&[from_env]),\n     };\n     let clauses = iter::once(Clause::ForAll(ty::Binder::dummy(implemented_from_env)));\n \n@@ -256,7 +256,7 @@ fn implied_bound_from_trait<'a, 'tcx>(\n     // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`\n     Clause::ForAll(where_clause.lower().map_bound(|goal| ProgramClause {\n         goal: goal.into_from_env_goal(),\n-        hypotheses: tcx.mk_goals(iter::once(Goal::from(impl_trait))),\n+        hypotheses: tcx.intern_goals(&[Goal::from(impl_trait)]),\n     }))\n }\n \n@@ -290,7 +290,7 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n                 .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n+    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n }\n \n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n@@ -344,7 +344,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n                 .map(|wc| Goal::from_poly_domain_goal(wc, tcx)),\n         ),\n     };\n-    tcx.mk_clauses(iter::once(Clause::ForAll(ty::Binder::dummy(clause))))\n+    tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n }\n \n pub fn dump_program_clauses<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {"}, {"sha": "f2fe8b1d891d9f6d43188a2b97357d5ec014eb42", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -18,9 +18,9 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n-use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::traits;\n-use rustc::ty::{self, RegionKind, Ty, TyCtxt, ToPredicate, TypeFoldable};\n+use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::wf::object_region_bounds;\n use rustc_target::spec::abi;\n@@ -224,9 +224,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 GenericParamDefKind::Lifetime => {\n                     lt_accepted += 1;\n                 }\n-                GenericParamDefKind::Type(ty) => {\n+                GenericParamDefKind::Type { has_default, .. } => {\n                     ty_params.accepted += 1;\n-                    if !ty.has_default {\n+                    if !has_default {\n                         ty_params.required += 1;\n                     }\n                 }\n@@ -251,8 +251,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n         let default_needs_object_self = |param: &ty::GenericParamDef| {\n-            if let GenericParamDefKind::Type(ty) = param.kind {\n-                if is_object && ty.has_default {\n+            if let GenericParamDefKind::Type { has_default, .. } = param.kind {\n+                if is_object && has_default {\n                     if tcx.at(span).type_of(param.def_id).has_self_ty() {\n                         // There is no suitable inference default for a type parameter\n                         // that references self, in an object type.\n@@ -275,7 +275,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         tcx.types.re_static.into()\n                     }\n                 }\n-                GenericParamDefKind::Type(ty) => {\n+                GenericParamDefKind::Type { has_default, .. } => {\n                     let i = param.index as usize;\n \n                     // Handle Self first, so we can adjust the index to match the AST.\n@@ -294,7 +294,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         } else {\n                             self.ty_infer(span).into()\n                         }\n-                    } else if ty.has_default {\n+                    } else if has_default {\n                         // No type parameter provided, but a default exists.\n \n                         // If we are converting an object type, then the\n@@ -1152,32 +1152,29 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let tcx = self.tcx();\n         let generics = tcx.generics_of(def_id);\n \n-        // Fill in the substs of the parent generics\n         debug!(\"impl_trait_ty_to_ty: generics={:?}\", generics);\n-        let mut substs = Vec::with_capacity(generics.count());\n-        if let Some(parent_id) = generics.parent {\n-            let parent_generics = tcx.generics_of(parent_id);\n-            Substs::fill_item(&mut substs, tcx, parent_generics, &mut |param, _| {\n-                tcx.mk_param_from_def(param)\n-            });\n-\n-            // Replace all lifetimes with 'static\n-            for subst in &mut substs {\n-                if let UnpackedKind::Lifetime(_) = subst.unpack() {\n-                    *subst = Kind::from(&RegionKind::ReStatic);\n+        let substs = Substs::for_item(tcx, def_id, |param, _| {\n+            if let Some(i) = (param.index as usize).checked_sub(generics.parent_count) {\n+                // Our own parameters are the resolved lifetimes.\n+                match param.kind {\n+                    GenericParamDefKind::Lifetime => {\n+                        self.ast_region_to_region(&lifetimes[i], None).into()\n+                    }\n+                    _ => bug!()\n+                }\n+            } else {\n+                // Replace all parent lifetimes with 'static.\n+                match param.kind {\n+                    GenericParamDefKind::Lifetime => {\n+                        tcx.types.re_static.into()\n+                    }\n+                    _ => tcx.mk_param_from_def(param)\n                 }\n             }\n-            debug!(\"impl_trait_ty_to_ty: substs from parent = {:?}\", substs);\n-        }\n-        assert_eq!(substs.len(), generics.parent_count);\n-\n-        // Fill in our own generics with the resolved lifetimes\n-        assert_eq!(lifetimes.len(), generics.params.len());\n-        substs.extend(lifetimes.iter().map(|lt| Kind::from(self.ast_region_to_region(lt, None))));\n-\n+        });\n         debug!(\"impl_trait_ty_to_ty: final substs = {:?}\", substs);\n \n-        tcx.mk_anon(def_id, tcx.intern_substs(&substs))\n+        tcx.mk_anon(def_id, substs)\n     }\n \n     pub fn ty_of_arg(&self,"}, {"sha": "a7cdcae9c0788a63577720163b71590823f6eef6", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 GenericParamDefKind::Lifetime => {\n                     span_bug!(expr.span, \"closure has region param\")\n                 }\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     self.infcx\n                         .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span)).into()\n                 }"}, {"sha": "5b3484dcccb85251de12d232a52f61296d829fbb", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -547,7 +547,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                                                          coerce_unsized_did,\n                                                          0,\n                                                          coerce_source,\n-                                                         &[coerce_target]));\n+                                                         &[coerce_target.into()]));\n \n         let mut has_unsized_tuple_coercion = false;\n "}, {"sha": "f386b7e07c1cd79cdbcca17a7168162b39222b80", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -730,13 +730,13 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n     let impl_m_type_params = impl_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n-            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.synthetic)),\n+            GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n             GenericParamDefKind::Lifetime => None,\n         }\n     });\n     let trait_m_type_params = trait_m_generics.params.iter().filter_map(|param| {\n         match param.kind {\n-            GenericParamDefKind::Type(ty) => Some((param.def_id, ty.synthetic)),\n+            GenericParamDefKind::Type { synthetic, .. } => Some((param.def_id, synthetic)),\n             GenericParamDefKind::Lifetime => None,\n         }\n     });"}, {"sha": "7d9f2e094e1af6240fad364d0c745e541a643314", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                                 self.fcx, lifetime, Some(param)).into();\n                         }\n                     }\n-                    GenericParamDefKind::Type(_) => {\n+                    GenericParamDefKind::Type {..} => {\n                         if let Some(ast_ty) = provided.as_ref().and_then(|p| {\n                             p.types.get(i - parent_substs.len() - own_counts.lifetimes)\n                         }) {"}, {"sha": "8ffb6e99fc04ef6a6c69531ab0f5d2473b9c5ea5", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let substs = Substs::for_item(self.tcx, trait_def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {}\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     if param.index == 0 {\n                         return self_ty.into();\n                     } else if let Some(ref input_types) = opt_input_types {"}, {"sha": "6cdfb0bccc98642c3a7d509d40b74bdf04c42dfb", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -1399,7 +1399,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                             // `impl_self_ty()` for an explanation.\n                             self.tcx.types.re_erased.into()\n                         }\n-                        GenericParamDefKind::Type(_) => self.var_for_def(self.span, param),\n+                        GenericParamDefKind::Type {..} => self.var_for_def(self.span, param),\n                     }\n                 }\n             });\n@@ -1416,7 +1416,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         Substs::for_item(self.tcx, def_id, |param, _| {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => self.tcx.types.re_erased.into(),\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     self.next_ty_var(TypeVariableOrigin::SubstitutionPlaceholder(\n                         self.tcx.def_span(def_id))).into()\n                 }"}, {"sha": "8a575c1478765af4ac401448391a6b8cd551455c", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -56,8 +56,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     self.probe(|_| {\n-                        let fn_once_substs = tcx.mk_substs_trait(ty,\n-                            &[self.next_ty_var(TypeVariableOrigin::MiscVariable(span))]);\n+                        let fn_once_substs = tcx.mk_substs_trait(ty, &[\n+                            self.next_ty_var(TypeVariableOrigin::MiscVariable(span)).into()\n+                        ]);\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = trait_ref.to_poly_trait_ref();\n                         let obligation ="}, {"sha": "46dbccaa137eae0c49e37185f8bf19b041552327", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -94,7 +94,7 @@ use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n use rustc::mir::interpret::{GlobalId};\n-use rustc::ty::subst::{Kind, UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n@@ -116,7 +116,6 @@ use std::collections::hash_map::Entry;\n use std::cmp;\n use std::fmt::Display;\n use std::mem::replace;\n-use std::iter;\n use std::ops::{self, Deref};\n use rustc_target::spec::abi::Abi;\n use syntax::ast;\n@@ -1114,7 +1113,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n             if id == fn_id {\n                 match entry_type {\n                     config::EntryMain => {\n-                        let substs = fcx.tcx.mk_substs(iter::once(Kind::from(declared_ret_ty)));\n+                        let substs = fcx.tcx.mk_substs_trait(declared_ret_ty, &[]);\n                         let trait_ref = ty::TraitRef::new(term_id, substs);\n                         let return_ty_span = decl.output.span();\n                         let cause = traits::ObligationCause::new(\n@@ -4752,10 +4751,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             let mut i = param.index as usize;\n \n             let segment = if i < fn_start {\n-                if let GenericParamDefKind::Type(_) = param.kind {\n+                if let GenericParamDefKind::Type {..} = param.kind {\n                     // Handle Self first, so we can adjust the index to match the AST.\n                     if has_self && i == 0 {\n-                        return opt_self_ty.map(|ty| Kind::from(ty)).unwrap_or_else(|| {\n+                        return opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n                             self.var_for_def(span, param)\n                         });\n                     }\n@@ -4779,7 +4778,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.re_infer(span, Some(param)).unwrap().into()\n                     }\n                 }\n-                GenericParamDefKind::Type(_) => {\n+                GenericParamDefKind::Type {..} => {\n                     let (types, infer_types) = segment.map_or((&[][..], true), |(s, _)| {\n                         (s.parameters.as_ref().map_or(&[][..], |p| &p.types[..]), s.infer_types)\n                     });\n@@ -4790,7 +4789,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n \n                     let has_default = match param.kind {\n-                        GenericParamDefKind::Type(ty) => ty.has_default,\n+                        GenericParamDefKind::Type { has_default, .. } => has_default,\n                         _ => unreachable!()\n                     };\n \n@@ -4926,9 +4925,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         GenericParamDefKind::Lifetime => {\n                             lt_accepted += 1;\n                         }\n-                        GenericParamDefKind::Type(ty) => {\n+                        GenericParamDefKind::Type { has_default, .. } => {\n                             ty_params.accepted += 1;\n-                            if !ty.has_default {\n+                            if !has_default {\n                                 ty_params.required += 1;\n                             }\n                         }\n@@ -5025,12 +5024,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let segment = segment.map(|(path_segment, generics)| {\n             let explicit = !path_segment.infer_types;\n             let impl_trait = generics.params.iter().any(|param| {\n-                if let ty::GenericParamDefKind::Type(ty) = param.kind {\n-                    if let Some(hir::SyntheticTyParamKind::ImplTrait) = ty.synthetic {\n-                        return true;\n-                    }\n+                match param.kind {\n+                    ty::GenericParamDefKind::Type {\n+                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait), ..\n+                    } => true,\n+                    _ => false,\n                 }\n-                false\n             });\n \n             if explicit && impl_trait {"}, {"sha": "4b4b982b1be411dbb5d2fef2bb0b522ae0855439", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -377,8 +377,8 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     let generics = tcx.generics_of(def_id);\n     let is_our_default = |def: &ty::GenericParamDef| {\n         match def.kind {\n-            GenericParamDefKind::Type(ty) => {\n-                ty.has_default && def.index >= generics.parent_count as u32\n+            GenericParamDefKind::Type { has_default, .. } => {\n+                has_default && def.index >= generics.parent_count as u32\n             }\n             _ => unreachable!()\n         }\n@@ -389,7 +389,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     // struct Foo<T = Vec<[u32]>> { .. }\n     // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n     for param in &generics.params {\n-        if let GenericParamDefKind::Type(_) = param.kind {\n+        if let GenericParamDefKind::Type {..} = param.kind {\n             if is_our_default(&param) {\n                 let ty = fcx.tcx.type_of(param.def_id);\n                 // ignore dependent defaults -- that is, where the default of one type\n@@ -417,7 +417,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n                 // All regions are identity.\n                 fcx.tcx.mk_param_from_def(param)\n             }\n-            GenericParamDefKind::Type(_) => {\n+            GenericParamDefKind::Type {..} => {\n                 // If the param has a default,\n                 if is_our_default(param) {\n                     let default_ty = fcx.tcx.type_of(param.def_id);\n@@ -668,7 +668,7 @@ fn reject_shadowing_parameters(tcx: TyCtxt, def_id: DefId) {\n                      .flat_map(|param| {\n                          match param.kind {\n                              GenericParamDefKind::Lifetime => None,\n-                             GenericParamDefKind::Type(_) => Some((param.name, param.def_id)),\n+                             GenericParamDefKind::Type {..} => Some((param.name, param.def_id)),\n                          }\n                      })\n                      .collect();"}, {"sha": "528f81a56126d979b25ce94f82ad354c24649c8b", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -387,7 +387,7 @@ pub fn coerce_unsized_info<'a, 'gcx>(gcx: TyCtxt<'a, 'gcx, 'gcx>,\n                                                     trait_def_id,\n                                                     0,\n                                                     source,\n-                                                    &[target]);\n+                                                    &[target.into()]);\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n \n         // Check that all transitive obligations are satisfied."}, {"sha": "d0d147b8e85cd0f4efdfb935865f9b43793aab63", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -845,11 +845,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         name: keywords::SelfType.name().as_interned_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n                         pure_wrt_drop: false,\n-                        kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                        kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n                             object_lifetime_default: rl::Set1::Empty,\n                             synthetic: None,\n-                        }),\n+                        },\n                     });\n \n                     allow_defaults = true;\n@@ -925,12 +925,12 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             name: p.name.as_interned_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n             pure_wrt_drop: p.pure_wrt_drop,\n-            kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+            kind: ty::GenericParamDefKind::Type {\n                 has_default: p.default.is_some(),\n                 object_lifetime_default:\n                     object_lifetime_defaults.as_ref().map_or(rl::Set1::Empty, |o| o[i]),\n                 synthetic: p.synthetic,\n-            }),\n+            },\n         }\n     }));\n \n@@ -950,11 +950,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 name: Symbol::intern(arg).as_interned_str(),\n                 def_id,\n                 pure_wrt_drop: false,\n-                kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                kind: ty::GenericParamDefKind::Type {\n                     has_default: false,\n                     object_lifetime_default: rl::Set1::Empty,\n                     synthetic: None,\n-                }),\n+                },\n             });\n         }\n \n@@ -965,11 +965,11 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     name: Symbol::intern(\"<upvar>\").as_interned_str(),\n                     def_id,\n                     pure_wrt_drop: false,\n-                    kind: ty::GenericParamDefKind::Type(ty::TypeParamDef {\n+                    kind: ty::GenericParamDefKind::Type {\n                         has_default: false,\n                         object_lifetime_default: rl::Set1::Empty,\n                         synthetic: None,\n-                    }),\n+                    },\n                 }\n             }));\n         });"}, {"sha": "7b7cb2549797878ecc0da1335de9c3814b56fd08", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -116,7 +116,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     for param in &impl_generics.params {\n         match param.kind {\n             // Disallow ANY unconstrained type parameters.\n-            ty::GenericParamDefKind::Type(_) => {\n+            ty::GenericParamDefKind::Type {..} => {\n                 let param_ty = ty::ParamTy::for_def(param);\n                 if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n                     report_unused_parameter(tcx,"}, {"sha": "da749fca2a953524f619a2ea94286a97acd2f0c9", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                         name,\n                     });\n                 }\n-                ty::GenericParamDefKind::Type(_) => {\n+                ty::GenericParamDefKind::Type {..} => {\n                     types.push(P(self.ty_param_to_ty(param.clone())));\n                 }\n             }"}, {"sha": "d4c1ba63a8c9806c6b9e5c61389f1e935fbb3583", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=56e541ddf1ee9a4e9d65a3cf6f952c31c3edf5ef", "patch": "@@ -1340,7 +1340,7 @@ impl<'tcx> Clean<TyParam> for ty::GenericParamDef {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.renderinfo.borrow_mut().external_typarams.insert(self.def_id, self.name.clean(cx));\n         let has_default = match self.kind {\n-            ty::GenericParamDefKind::Type(ty) => ty.has_default,\n+            ty::GenericParamDefKind::Type { has_default, .. } => has_default,\n             _ => panic!(\"tried to convert a non-type GenericParamDef as a type\")\n         };\n         TyParam {\n@@ -1827,7 +1827,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n         let stripped_typarams = gens.params.iter().filter_map(|param| {\n-            if let ty::GenericParamDefKind::Type(_) = param.kind {\n+            if let ty::GenericParamDefKind::Type {..} = param.kind {\n                 if param.name == keywords::SelfType.name().as_str() {\n                     assert_eq!(param.index, 0);\n                     None"}]}