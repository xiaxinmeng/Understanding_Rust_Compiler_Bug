{"sha": "39e95165323f76042dfab65772a8411dd85fe088", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZTk1MTY1MzIzZjc2MDQyZGZhYjY1NzcyYTg0MTFkZDg1ZmUwODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T13:14:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-07T13:14:37Z"}, "message": "Auto merge of #51990 - oli-obk:unstable_union, r=nikomatsakis\n\nPlace unions, pointer casts and pointer derefs behind extra feature gates\n\nTo ensure we don't stabilize these things together with const fn stabilization (or any other stabilization)\n\nThis PR moves union field accesses inside `const fn` behind a feature gate. It was possible without a feature gate before, but since `const fn` was behind a feature gate we can do this change.\n\nWhile \"dereferencing raw pointers\" and \"casting raw pointers to usize\" were hard errors before this PR, one could work around them by abusing unions:\n\n```rust\n// deref\nunion Foo<T> {\n    x: &'static T,\n    y: *const T,\n}\nconst FOO: u32 = unsafe { *Foo { y: 42 as *const T }.x };\n\n// as usize cast\nunion Bar<T> {\n    x: usize,\n    y: *const T,\n}\nconst BAR: usize = unsafe { Bar { y: &1u8 }.x };\n```\n\nr? @eddyb\n\ncc @nikomatsakis", "tree": {"sha": "fa86b133eeb4f43d7a7b741578332bd117607c0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa86b133eeb4f43d7a7b741578332bd117607c0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39e95165323f76042dfab65772a8411dd85fe088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39e95165323f76042dfab65772a8411dd85fe088", "html_url": "https://github.com/rust-lang/rust/commit/39e95165323f76042dfab65772a8411dd85fe088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39e95165323f76042dfab65772a8411dd85fe088/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18925dee25ce649562d203e72068e3a57b60b153", "url": "https://api.github.com/repos/rust-lang/rust/commits/18925dee25ce649562d203e72068e3a57b60b153", "html_url": "https://github.com/rust-lang/rust/commit/18925dee25ce649562d203e72068e3a57b60b153"}, {"sha": "4b731a908b3df2a926eae5fb5233dbc73b098276", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b731a908b3df2a926eae5fb5233dbc73b098276", "html_url": "https://github.com/rust-lang/rust/commit/4b731a908b3df2a926eae5fb5233dbc73b098276"}], "stats": {"total": 517, "additions": 317, "deletions": 200}, "files": [{"sha": "dc4a2d7c0d7b15ebdc9e3946a4c4fb01538ccddf", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -82,6 +82,7 @@\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(const_int_ops)]\n+#![feature(const_fn_union)]\n #![feature(custom_attribute)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]"}, {"sha": "79b7d042dd6dbe1c920577cff08efd3aef5ab8d5", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -619,38 +619,6 @@ If you really want global mutable state, try using `static mut` or a global\n `UnsafeCell`.\n \"##,\n \n-E0018: r##\"\n-\n-The value of static and constant integers must be known at compile time. You\n-can't cast a pointer to an integer because the address of a pointer can\n-vary.\n-\n-For example, if you write:\n-\n-```compile_fail,E0018\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n-static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n-```\n-\n-Then `MY_STATIC_ADDR` would contain the address of `MY_STATIC`. However,\n-the address can change when the program is linked, as well as change\n-between different executions due to ASLR, and many linkers would\n-not be able to calculate the value of `WHAT`.\n-\n-On the other hand, static and constant pointers can point either to\n-a known numeric address or to the address of a symbol.\n-\n-```\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n-const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n-```\n-\n-This does not pose a problem by itself because they can't be\n-accessed directly.\n-\"##,\n-\n E0019: r##\"\n A function call isn't allowed in the const's initialization expression\n because the expression's value must be known at compile-time. Erroneous code\n@@ -1145,36 +1113,6 @@ fn main() {\n ```\n \"##,\n \n-E0395: r##\"\n-The value assigned to a constant scalar must be known at compile time,\n-which is not the case when comparing raw pointers.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0395\n-static FOO: i32 = 42;\n-static BAR: i32 = 42;\n-\n-static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) };\n-// error: raw pointers cannot be compared in statics!\n-```\n-\n-The address assigned by the linker to `FOO` and `BAR` may or may not\n-be identical, so the value of `BAZ` can't be determined.\n-\n-If you want to do the comparison, please do it at run-time.\n-\n-For example:\n-\n-```\n-static FOO: i32 = 42;\n-static BAR: i32 = 42;\n-\n-let baz: bool = { (&FOO as *const i32) == (&BAR as *const i32) };\n-// baz isn't a constant expression so it's ok\n-```\n-\"##,\n-\n E0161: r##\"\n A value was moved. However, its size was not known at compile time, and only\n values of a known size can be moved.\n@@ -1208,29 +1146,6 @@ fn main() {\n ```\n \"##,\n \n-E0396: r##\"\n-The value behind a raw pointer can't be determined at compile-time\n-(or even link-time), which means it can't be used in a constant\n-expression. Erroneous code example:\n-\n-```compile_fail,E0396\n-const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n-\n-const VALUE: u8 = unsafe { *REG_ADDR };\n-// error: raw pointers cannot be dereferenced in constants\n-```\n-\n-A possible fix is to dereference your pointer at some point in run-time.\n-\n-For example:\n-\n-```\n-const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n-\n-let reg_value = unsafe { *REG_ADDR };\n-```\n-\"##,\n-\n E0492: r##\"\n A borrow of a constant containing interior mutability was attempted. Erroneous\n code example:"}, {"sha": "d876ee77e76cf7ccbdf5c0a20d0e778a05895bbb", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 51, "deletions": 73, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -491,41 +491,46 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     this.super_place(place, context, location);\n                     match proj.elem {\n                         ProjectionElem::Deref => {\n-                            this.add(Qualif::NOT_CONST);\n-\n-                            let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n-                            if let ty::TyRawPtr(_) = base_ty.sty {\n-                                if this.mode != Mode::Fn {\n-                                    let mut err = struct_span_err!(\n-                                        this.tcx.sess,\n-                                        this.span,\n-                                        E0396,\n-                                        \"raw pointers cannot be dereferenced in {}s\",\n-                                        this.mode\n-                                    );\n-                                    err.span_label(this.span,\n-                                                   \"dereference of raw pointer in constant\");\n-                                    if this.tcx.sess.teach(&err.get_code().unwrap()) {\n-                                        err.note(\n-                                            \"The value behind a raw pointer can't be determined \\\n-                                             at compile-time (or even link-time), which means it \\\n-                                             can't be used in a constant expression.\"\n+                            if let Mode::Fn = this.mode {\n+                                this.add(Qualif::NOT_CONST);\n+                            } else {\n+                                let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n+                                if let ty::TyRawPtr(_) = base_ty.sty {\n+                                    if !this.tcx.sess.features_untracked().const_raw_ptr_deref {\n+                                        emit_feature_err(\n+                                            &this.tcx.sess.parse_sess, \"const_raw_ptr_deref\",\n+                                            this.span, GateIssue::Language,\n+                                            &format!(\n+                                                \"dereferencing raw pointers in {}s is unstable\",\n+                                                this.mode,\n+                                            ),\n                                         );\n-                                        err.help(\"A possible fix is to dereference your pointer \\\n-                                                  at some point in run-time.\");\n                                     }\n-                                    err.emit();\n                                 }\n                             }\n                         }\n \n                         ProjectionElem::Field(..) |\n                         ProjectionElem::Index(_) => {\n-                            if this.mode == Mode::Fn {\n-                                let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n-                                if let Some(def) = base_ty.ty_adt_def() {\n-                                    if def.is_union() {\n-                                        this.not_const();\n+                            let base_ty = proj.base.ty(this.mir, this.tcx).to_ty(this.tcx);\n+                            if let Some(def) = base_ty.ty_adt_def() {\n+                                if def.is_union() {\n+                                    match this.mode {\n+                                        Mode::Fn => this.not_const(),\n+                                        Mode::ConstFn => {\n+                                            if !this.tcx.sess.features_untracked().const_fn_union {\n+                                                emit_feature_err(\n+                                                    &this.tcx.sess.parse_sess, \"const_fn_union\",\n+                                                    this.span, GateIssue::Language,\n+                                                    \"unions in const fn are unstable\",\n+                                                );\n+                                            }\n+                                        },\n+\n+                                        | Mode::Static\n+                                        | Mode::StaticMut\n+                                        | Mode::Const\n+                                        => {},\n                                     }\n                                 }\n                             }\n@@ -722,44 +727,17 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 match (cast_in, cast_out) {\n                     (CastTy::Ptr(_), CastTy::Int(_)) |\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n-                        self.add(Qualif::NOT_CONST);\n-                        if self.mode != Mode::Fn {\n-                            let mut err = struct_span_err!(\n-                                self.tcx.sess,\n-                                self.span,\n-                                E0018,\n-                                \"raw pointers cannot be cast to integers in {}s\",\n-                                self.mode\n+                        if let Mode::Fn = self.mode {\n+                            self.add(Qualif::NOT_CONST);\n+                        } else if !self.tcx.sess.features_untracked().const_raw_ptr_to_usize_cast {\n+                            emit_feature_err(\n+                                &self.tcx.sess.parse_sess, \"const_raw_ptr_to_usize_cast\",\n+                                self.span, GateIssue::Language,\n+                                &format!(\n+                                    \"casting pointers to integers in {}s is unstable\",\n+                                    self.mode,\n+                                ),\n                             );\n-                            if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                                err.note(\"\\\n-The value of static and constant integers must be known at compile time. You can't cast a pointer \\\n-to an integer because the address of a pointer can vary.\n-\n-For example, if you write:\n-\n-```\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: usize = &MY_STATIC as *const _ as usize;\n-static WHAT: usize = (MY_STATIC_ADDR^17) + MY_STATIC_ADDR;\n-```\n-\n-Then `MY_STATIC_ADDR` would contain the address of `MY_STATIC`. However, the address can change \\\n-when the program is linked, as well as change between different executions due to ASLR, and many \\\n-linkers would not be able to calculate the value of `WHAT`.\n-\n-On the other hand, static and constant pointers can point either to a known numeric address or to \\\n-the address of a symbol.\n-\n-```\n-static MY_STATIC: u32 = 42;\n-static MY_STATIC_ADDR: &'static u32 = &MY_STATIC;\n-const CONST_ADDR: *const u8 = 0x5f3759df as *const u8;\n-```\n-\n-This does not pose a problem by itself because they can't be accessed directly.\");\n-                            }\n-                            err.emit();\n                         }\n                     }\n                     _ => {}\n@@ -773,16 +751,16 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                             op == BinOp::Ge || op == BinOp::Gt ||\n                             op == BinOp::Offset);\n \n-                    self.add(Qualif::NOT_CONST);\n-                    if self.mode != Mode::Fn {\n-                        struct_span_err!(\n-                            self.tcx.sess, self.span, E0395,\n-                            \"raw pointers cannot be compared in {}s\",\n-                            self.mode)\n-                        .span_label(\n+                    if let Mode::Fn = self.mode {\n+                        self.add(Qualif::NOT_CONST);\n+                    } else if !self.tcx.sess.features_untracked().const_compare_raw_pointers {\n+                        emit_feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            \"const_compare_raw_pointers\",\n                             self.span,\n-                            \"comparing raw pointers in static\")\n-                        .emit();\n+                            GateIssue::Language,\n+                            &format!(\"comparing raw pointers inside {}\", self.mode),\n+                        );\n                     }\n                 }\n             }"}, {"sha": "6d71d276390c41308f2df8ceac80770963595301", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -216,6 +216,18 @@ declare_features! (\n     // Allows let bindings and destructuring in `const fn` functions and constants.\n     (active, const_let, \"1.22.1\", Some(48821), None),\n \n+    // Allows accessing fields of unions inside const fn\n+    (active, const_fn_union, \"1.27.0\", Some(51909), None),\n+\n+    // Allows casting raw pointers to `usize` during const eval\n+    (active, const_raw_ptr_to_usize_cast, \"1.27.0\", Some(51910), None),\n+\n+    // Allows dereferencing raw pointers during const eval\n+    (active, const_raw_ptr_deref, \"1.27.0\", Some(51911), None),\n+\n+    // Allows comparing raw pointers during const eval\n+    (active, const_compare_raw_pointers, \"1.27.0\", Some(53020), None),\n+\n     // Allows using #[prelude_import] on glob `use` items.\n     //\n     // rustc internal"}, {"sha": "8764cb72b8cc1ad48f545ab442939a8e00e0f5a4", "filename": "src/test/compile-fail/cast-ptr-to-int-const.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-const_raw_ptr_to_usize_cast\n+\n fn main() {\n-    const X: u32 = main as u32; //~ ERROR E0018\n+    const X: u32 = main as u32; //~ ERROR casting pointers to integers in constants is unstable\n     const Y: u32 = 0;\n-    const Z: u32 = &Y as *const u32 as u32; //~ ERROR E0018\n+    const Z: u32 = &Y as *const u32 as u32; //~ ERROR is unstable\n }"}, {"sha": "3d0477feb2060a2ffa024ba83940691878d53245", "filename": "src/test/ui/const-deref-ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -11,6 +11,7 @@\n // Check that you can't dereference raw pointers in constants.\n \n fn main() {\n-    static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n+    static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n+    //~^ ERROR dereferencing raw pointers in statics is unstable\n     println!(\"{}\", C);\n }"}, {"sha": "94a383bcf16209420b534ca032a548482e679ed8", "filename": "src/test/ui/const-deref-ptr.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-deref-ptr.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,9 +1,11 @@\n-error[E0396]: raw pointers cannot be dereferenced in statics\n+error[E0658]: dereferencing raw pointers in statics is unstable (see issue #51911)\n   --> $DIR/const-deref-ptr.rs:14:29\n    |\n-LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)}; //~ ERROR E0396\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer in constant\n+LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0396`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2aff6a7c55c20e080f68a536e3ba090051bff29e", "filename": "src/test/ui/const-eval/const_raw_ptr_ops.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n+\n+fn main() {}\n+\n+// unconst and bad, will thus error in miri\n+const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR cannot be used\n+// unconst and fine\n+const X2: bool = 42 as *const i32 == 43 as *const i32;\n+// unconst and fine\n+const Y: usize = 42usize as *const i32 as usize + 1;\n+// unconst and bad, will thus error in miri\n+const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR cannot be used\n+// unconst and fine\n+const Z: i32 = unsafe { *(&1 as *const i32) };\n+// unconst and bad, will thus error in miri\n+const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR cannot be used\n+const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR cannot be used"}, {"sha": "a9442be081d948824ee79fb1abb0619d8142e1c2", "filename": "src/test/ui/const-eval/const_raw_ptr_ops.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,36 @@\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:16:1\n+   |\n+LL | const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^------------------------------------^\n+   |                 |\n+   |                 \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:22:1\n+   |\n+LL | const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^^^-----------------------------^\n+   |                   |\n+   |                   \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n+\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:26:1\n+   |\n+LL | const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   |                          |\n+   |                          tried to access memory with alignment 2, but alignment 4 is required\n+\n+error: this constant cannot be used\n+  --> $DIR/const_raw_ptr_ops.rs:27:1\n+   |\n+LL | const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR cannot be used\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n+   |                          |\n+   |                          a memory access tried to interpret some bytes as a pointer\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "8dd1476d25a77d080ac2385e50532b2c911c4411", "filename": "src/test/ui/const-eval/const_transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_transmute.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -11,6 +11,8 @@\n // compile-pass\n // run-pass\n \n+#![feature(const_fn_union)]\n+\n union Transmute<T: Copy, U: Copy> {\n     t: T,\n     u: U,"}, {"sha": "113046b0689b2fdec2a04389f7660650d46d7046", "filename": "src/test/ui/const-eval/feature-gate-const_fn_union.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_fn_union.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+fn main() {}\n+\n+union Foo {\n+    u: u32,\n+    i: i32,\n+}\n+\n+const unsafe fn foo(u: u32) -> i32 {\n+    Foo { u }.i //~ ERROR unions in const fn are unstable\n+}"}, {"sha": "1e28f14165fe9ae7d170996143ec2942726784e0", "filename": "src/test/ui/const-eval/feature-gate-const_fn_union.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: unions in const fn are unstable (see issue #51909)\n+  --> $DIR/feature-gate-const_fn_union.rs:21:5\n+   |\n+LL |     Foo { u }.i //~ ERROR unions in const fn are unstable\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_fn_union)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "81fcd23fb786da02e579e1e3e30669941b98021b", "filename": "src/test/ui/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     // that pointer comparison is disallowed, not that parts of a pointer are accessed as raw\n     // bytes.\n     let _: [u8; 0] = [4; { //~ ERROR could not evaluate repeat length\n-        match &1 as *const i32 as usize { //~ ERROR raw pointers cannot be cast to integers\n+        match &1 as *const i32 as usize { //~ ERROR casting pointers to integers in constants\n             0 => 42, //~ ERROR constant contains unimplemented expression type\n             //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n             n => n,"}, {"sha": "26577948faefa90a881dc331bd2de49984b1870b", "filename": "src/test/ui/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,8 +1,10 @@\n-error[E0018]: raw pointers cannot be cast to integers in constants\n+error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n   --> $DIR/match-test-ptr-null.rs:16:15\n    |\n-LL |         match &1 as *const i32 as usize { //~ ERROR raw pointers cannot be cast to integers\n+LL |         match &1 as *const i32 as usize { //~ ERROR casting pointers to integers in constants\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error[E0019]: constant contains unimplemented expression type\n   --> $DIR/match-test-ptr-null.rs:17:13\n@@ -15,7 +17,7 @@ error[E0080]: could not evaluate repeat length\n    |\n LL |       let _: [u8; 0] = [4; { //~ ERROR could not evaluate repeat length\n    |  __________________________^\n-LL | |         match &1 as *const i32 as usize { //~ ERROR raw pointers cannot be cast to integers\n+LL | |         match &1 as *const i32 as usize { //~ ERROR casting pointers to integers in constants\n LL | |             0 => 42, //~ ERROR constant contains unimplemented expression type\n    | |             - \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n LL | |             //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n@@ -26,5 +28,5 @@ LL | |     }];\n \n error: aborting due to 3 previous errors\n \n-Some errors occurred: E0018, E0019, E0080.\n-For more information about an error, try `rustc --explain E0018`.\n+Some errors occurred: E0019, E0080, E0658.\n+For more information about an error, try `rustc --explain E0019`."}, {"sha": "19db07dd330ae895a09c4d002735981c04c6dbd2", "filename": "src/test/ui/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -10,7 +10,7 @@\n \n // compile-pass\n \n-#![feature(const_fn)]\n+#![feature(const_fn, const_fn_union)]\n \n #![deny(const_err)]\n "}, {"sha": "3b437f69d8d63de1386b6f9a7cc6ee6461e6daad", "filename": "src/test/ui/const-eval/promoted_raw_ptr_ops.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_raw_ptr_to_usize_cast, const_compare_raw_pointers, const_raw_ptr_deref)]\n+\n+fn main() {\n+    let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n+    //~^ ERROR does not live long enough\n+    let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n+    let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+}"}, {"sha": "90c73c095fba1d157c353c2d702bfd7a87f2431d", "filename": "src/test/ui/const-eval/promoted_raw_ptr_ops.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_raw_ptr_ops.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,35 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:14:29\n+   |\n+LL |     let x: &'static bool = &(42 as *const i32 == 43 as *const i32);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:16:30\n+   |\n+LL |     let y: &'static usize = &(&1 as *const i32 as usize + 1); //~ ERROR does not live long enough\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/promoted_raw_ptr_ops.rs:17:28\n+   |\n+LL |     let z: &'static i32 = &(unsafe { *(42 as *const i32) }); //~ ERROR does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "1758ac72b633b73c720b3c10f0fbfa7f7f8614c0", "filename": "src/test/ui/const-eval/ref_to_float_transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_float_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_float_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_float_transmute.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -10,6 +10,8 @@\n \n //compile-pass\n \n+#![feature(const_fn_union)]\n+\n fn main() {}\n \n static FOO: u32 = 42;"}, {"sha": "cb942f465e40f3c6f4d9e0ce9349118d084ee432", "filename": "src/test/ui/const-eval/ref_to_int_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_fn_union)]\n+\n fn main() {\n     let n: Int = 40;\n     match n {"}, {"sha": "e82a16c066fdb7d7a1629323bef2d090358de39e", "filename": "src/test/ui/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fref_to_int_match.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,5 +1,5 @@\n error[E0030]: lower range bound must be less than or equal to upper\n-  --> $DIR/ref_to_int_match.rs:15:9\n+  --> $DIR/ref_to_int_match.rs:17:9\n    |\n LL |         10..=BAR => {}, //~ ERROR lower range bound must be less than or equal to upper\n    |         ^^ lower bound larger than upper bound"}, {"sha": "617050732b7de48295e3ea180747b5a146e00072", "filename": "src/test/ui/error-codes/E0395.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-const_compare_raw_pointers\n+\n static FOO: i32 = 42;\n static BAR: i32 = 42;\n \n-static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR E0395\n+static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n fn main() {\n }"}, {"sha": "0fb9a9e854ddb9d5b09882c8ecd4207f4360d703", "filename": "src/test/ui/error-codes/E0395.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0395.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,9 +1,11 @@\n-error[E0395]: raw pointers cannot be compared in statics\n-  --> $DIR/E0395.rs:14:22\n+error[E0658]: comparing raw pointers inside static (see issue #53020)\n+  --> $DIR/E0395.rs:16:22\n    |\n-LL | static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR E0395\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comparing raw pointers in static\n+LL | static BAZ: bool = { (&FOO as *const i32) == (&BAR as *const i32) }; //~ ERROR issue #53020\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_compare_raw_pointers)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0395`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "08d20e7850d9440c6f5bd1cb2c266799072c92a9", "filename": "src/test/ui/error-codes/E0396-fixed.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_raw_ptr_deref)]\n+\n+const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n+\n+const VALUE: u8 = unsafe { *REG_ADDR };\n+//~^ ERROR this constant cannot be used\n+\n+fn main() {\n+}"}, {"sha": "7d3c98c8ea80893e76746aa2831b82f136e0cf3a", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -0,0 +1,12 @@\n+error: this constant cannot be used\n+  --> $DIR/E0396-fixed.rs:15:1\n+   |\n+LL | const VALUE: u8 = unsafe { *REG_ADDR };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------^^^\n+   |                            |\n+   |                            a memory access tried to interpret some bytes as a pointer\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ee8a74a465479e87e05f6cfb749360a844bf5f3", "filename": "src/test/ui/error-codes/E0396.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// gate-test-const_raw_ptr_deref\n+\n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n-const VALUE: u8 = unsafe { *REG_ADDR }; //~ ERROR E0396\n+const VALUE: u8 = unsafe { *REG_ADDR };\n+//~^ ERROR dereferencing raw pointers in constants is unstable\n \n fn main() {\n }"}, {"sha": "a2a2e7243588fc56038a166f7dcb2ad97b9f8623", "filename": "src/test/ui/error-codes/E0396.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,9 +1,11 @@\n-error[E0396]: raw pointers cannot be dereferenced in constants\n-  --> $DIR/E0396.rs:13:28\n+error[E0658]: dereferencing raw pointers in constants is unstable (see issue #51911)\n+  --> $DIR/E0396.rs:15:28\n    |\n-LL | const VALUE: u8 = unsafe { *REG_ADDR }; //~ ERROR E0396\n-   |                            ^^^^^^^^^ dereference of raw pointer in constant\n+LL | const VALUE: u8 = unsafe { *REG_ADDR };\n+   |                            ^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_deref)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0396`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "354d389158d611093e189c6b607a2cd95ca77599", "filename": "src/test/ui/issue-17458.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-17458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-17458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17458.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n static X: usize = 0 as *const usize as usize;\n-//~^ ERROR: raw pointers cannot be cast to integers in statics\n+//~^ ERROR: casting pointers to integers in statics is unstable\n \n fn main() {\n     assert_eq!(X, 0);"}, {"sha": "0303e4bddb56f2e71d8c7017c1a0b5f19ad42a2f", "filename": "src/test/ui/issue-17458.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-17458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-17458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17458.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,9 +1,11 @@\n-error[E0018]: raw pointers cannot be cast to integers in statics\n+error[E0658]: casting pointers to integers in statics is unstable (see issue #51910)\n   --> $DIR/issue-17458.rs:11:19\n    |\n LL | static X: usize = 0 as *const usize as usize;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0018`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "28dc6846f69e172bfcda1a4bfe19299458b2804f", "filename": "src/test/ui/issue-18294.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-18294.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-18294.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18294.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     const X: u32 = 1;\n-    const Y: usize = &X as *const u32 as usize; //~ ERROR E0018\n+    const Y: usize = &X as *const u32 as usize; //~ ERROR is unstable\n     println!(\"{}\", Y);\n }"}, {"sha": "0b94e778d377180dfd450fe9a0021045c058cba7", "filename": "src/test/ui/issue-18294.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-18294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-18294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18294.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,9 +1,11 @@\n-error[E0018]: raw pointers cannot be cast to integers in constants\n+error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n   --> $DIR/issue-18294.rs:13:22\n    |\n-LL |     const Y: usize = &X as *const u32 as usize; //~ ERROR E0018\n+LL |     const Y: usize = &X as *const u32 as usize; //~ ERROR is unstable\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0018`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6b9caba0218f3fbc79cefa6f5f1597ee6f244d8b", "filename": "src/test/ui/issue-25826.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-25826.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-25826.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25826.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -11,6 +11,6 @@\n fn id<T>(t: T) -> T { t }\n fn main() {\n     const A: bool = id::<u8> as *const () < id::<u16> as *const ();\n-    //~^ ERROR raw pointers cannot be compared in constants [E0395]\n+    //~^ ERROR comparing raw pointers inside constant\n     println!(\"{}\", A);\n }"}, {"sha": "a5ab7cfa6d3c5b1a98910588bd88a185b3ff00f9", "filename": "src/test/ui/issue-25826.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-25826.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-25826.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25826.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,9 +1,11 @@\n-error[E0395]: raw pointers cannot be compared in constants\n+error[E0658]: comparing raw pointers inside constant (see issue #53020)\n   --> $DIR/issue-25826.rs:13:21\n    |\n LL |     const A: bool = id::<u8> as *const () < id::<u16> as *const ();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comparing raw pointers in static\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_compare_raw_pointers)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0395`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "02bed69f0d40e2e99accfb9677bbb7d6c92878d4", "filename": "src/test/ui/issue-52023-array-size-pointer-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-52023-array-size-pointer-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-52023-array-size-pointer-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52023-array-size-pointer-cast.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let _ = [0; (&0 as *const i32) as usize]; //~ ERROR raw pointers cannot be cast\n+    let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to integers in constants\n }"}, {"sha": "74270c2bef79849cb3e46c84d494e03399a00094", "filename": "src/test/ui/issue-52023-array-size-pointer-cast.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-52023-array-size-pointer-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Fissue-52023-array-size-pointer-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52023-array-size-pointer-cast.stderr?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -1,9 +1,11 @@\n-error[E0018]: raw pointers cannot be cast to integers in constants\n+error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n   --> $DIR/issue-52023-array-size-pointer-cast.rs:12:17\n    |\n-LL |     let _ = [0; (&0 as *const i32) as usize]; //~ ERROR raw pointers cannot be cast\n+LL |     let _ = [0; (&0 as *const i32) as usize]; //~ ERROR casting pointers to integers in constants\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0018`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c640acec05e80bf6674ec9b9ad2287df88a32b8f", "filename": "src/test/ui/union/union-const-eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e95165323f76042dfab65772a8411dd85fe088/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval.rs?ref=39e95165323f76042dfab65772a8411dd85fe088", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // compile-pass\n+#![feature(const_fn_union)]\n \n union U {\n     a: usize,"}]}