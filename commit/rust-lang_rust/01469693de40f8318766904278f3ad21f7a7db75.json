{"sha": "01469693de40f8318766904278f3ad21f7a7db75", "node_id": "C_kwDOAAsO6NoAKDAxNDY5NjkzZGU0MGY4MzE4NzY2OTA0Mjc4ZjNhZDIxZjdhN2RiNzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-14T09:31:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-14T09:31:08Z"}, "message": "Rollup merge of #105611 - BoxyUwU:more_granular_placeholderification, r=wesleywiser\n\nfold instead of obliterating args\n\nFixes #105608\n\nwe call `const_eval_resolve` on the following constant:\n```\ndef: playground::{impl#0}::and::{constant#0},\nsubsts: [\n  ConstKind::Unevaluated {\n    def: playground::{impl#0}::and::{constant#0},\n    substs: [\n      ConstKind::Value(0x0),\n      _,\n    ]\n  }\n  _,\n],\n```\nwhen expanded out to `ConstKind::Expr` there are no infer vars so we attempt to evaluate it after replacing infer vars with garbage, however the current logic for replacing with garbage replaces _the whole arg containing the infer var_ rather than just the infer var. This means that after garbage replacement has occured we attempt to evaluate:\n```\ndef: playground::{impl#0}::and::{constant#0},\nsubsts: [\n  PLACEHOLDER,\n  PLACEHOLDER,\n],\n```\nWhich then leads to ctfe being unable to evaluate the const. With this PR we attempt to evaluate:\n```\ndef: playground::{impl#0}::and::{constant#0},\nsubsts: [\n  ConstKind::Unevaluated {\n    def: playground::{impl#0}::and::{constant#0},\n    substs: [\n      ConstKind::Value(0x0),\n      PLACEHOLDER,\n    ]\n  }\n  PLACEHOLDER,\n],\n```\nwhich ctfe _can_ handle.\n\nI am not entirely sure why this function is supposed to replace params with placeholders rather than just inference vars :thinking:", "tree": {"sha": "ea64e10aa39f70a47a7559f4c6cf9d45554ede28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea64e10aa39f70a47a7559f4c6cf9d45554ede28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01469693de40f8318766904278f3ad21f7a7db75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmZfcCRBK7hj4Ov3rIwAAQpwIAHpXxLR9Y9etJ5B5B7g1dHmZ\nC5hqHr/uUxQaVLbDCcOcfVOfyWR4AA35dUUBZotqRC/j6NQxUJEmtQuIkqpzAMJW\nU4piK5Tc1sddJfSFWpr5Epz0/6r74bNua9beec93fy5cRsVJsrrktb6HNoVREpE/\ngd1Jq8wXwuckTzJhenQAHZPHOvjWwSiQMhN00o52HR73JGlQOHgvSUKGHZ++Q9Xs\nHs6b/zeHmMOvZmyWBiixsZyRuBmxOIWcId+aiPXbcyn/hSQ2Ko31/OduAGQqpw6z\nVAtcBYJTL7o292Milqd4EeE/QEplDeHokt5OhGERUyB5wyqXRJrJ3m2Bn9UI0os=\n=UQ/l\n-----END PGP SIGNATURE-----\n", "payload": "tree ea64e10aa39f70a47a7559f4c6cf9d45554ede28\nparent 939880ab7275a779e2a970caa4ca0fa1b7c25b37\nparent 5573485354aa618e22564f0fc332378c4ef9373a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671010268 +0100\ncommitter GitHub <noreply@github.com> 1671010268 +0100\n\nRollup merge of #105611 - BoxyUwU:more_granular_placeholderification, r=wesleywiser\n\nfold instead of obliterating args\n\nFixes #105608\n\nwe call `const_eval_resolve` on the following constant:\n```\ndef: playground::{impl#0}::and::{constant#0},\nsubsts: [\n  ConstKind::Unevaluated {\n    def: playground::{impl#0}::and::{constant#0},\n    substs: [\n      ConstKind::Value(0x0),\n      _,\n    ]\n  }\n  _,\n],\n```\nwhen expanded out to `ConstKind::Expr` there are no infer vars so we attempt to evaluate it after replacing infer vars with garbage, however the current logic for replacing with garbage replaces _the whole arg containing the infer var_ rather than just the infer var. This means that after garbage replacement has occured we attempt to evaluate:\n```\ndef: playground::{impl#0}::and::{constant#0},\nsubsts: [\n  PLACEHOLDER,\n  PLACEHOLDER,\n],\n```\nWhich then leads to ctfe being unable to evaluate the const. With this PR we attempt to evaluate:\n```\ndef: playground::{impl#0}::and::{constant#0},\nsubsts: [\n  ConstKind::Unevaluated {\n    def: playground::{impl#0}::and::{constant#0},\n    substs: [\n      ConstKind::Value(0x0),\n      PLACEHOLDER,\n    ]\n  }\n  PLACEHOLDER,\n],\n```\nwhich ctfe _can_ handle.\n\nI am not entirely sure why this function is supposed to replace params with placeholders rather than just inference vars :thinking:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01469693de40f8318766904278f3ad21f7a7db75", "html_url": "https://github.com/rust-lang/rust/commit/01469693de40f8318766904278f3ad21f7a7db75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01469693de40f8318766904278f3ad21f7a7db75/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939880ab7275a779e2a970caa4ca0fa1b7c25b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/939880ab7275a779e2a970caa4ca0fa1b7c25b37", "html_url": "https://github.com/rust-lang/rust/commit/939880ab7275a779e2a970caa4ca0fa1b7c25b37"}, {"sha": "5573485354aa618e22564f0fc332378c4ef9373a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5573485354aa618e22564f0fc332378c4ef9373a", "html_url": "https://github.com/rust-lang/rust/commit/5573485354aa618e22564f0fc332378c4ef9373a"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "996148a709087161775337d9945aa262c7888749", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/01469693de40f8318766904278f3ad21f7a7db75/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01469693de40f8318766904278f3ad21f7a7db75/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=01469693de40f8318766904278f3ad21f7a7db75", "patch": "@@ -2014,31 +2014,54 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     substs: SubstsRef<'tcx>,\n ) -> SubstsRef<'tcx> {\n-    tcx.mk_substs(substs.iter().enumerate().map(|(idx, arg)| {\n-        match arg.unpack() {\n-            GenericArgKind::Type(_) if arg.has_non_region_param() || arg.has_non_region_infer() => {\n-                tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n+    struct ReplaceParamAndInferWithPlaceholder<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        idx: usize,\n+    }\n+\n+    impl<'tcx> TypeFolder<'tcx> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n+        fn tcx(&self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n+\n+        fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+            if let ty::Infer(_) = t.kind() {\n+                self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n-                    name: ty::BoundVar::from_usize(idx),\n+                    name: ty::BoundVar::from_usize({\n+                        let idx = self.idx;\n+                        self.idx += 1;\n+                        idx\n+                    }),\n                 }))\n-                .into()\n+            } else {\n+                t.super_fold_with(self)\n             }\n-            GenericArgKind::Const(ct) if ct.has_non_region_infer() || ct.has_non_region_param() => {\n-                let ty = ct.ty();\n-                // If the type references param or infer, replace that too...\n+        }\n+\n+        fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+            if let ty::ConstKind::Infer(_) = c.kind() {\n+                let ty = c.ty();\n+                // If the type references param or infer then ICE ICE ICE\n                 if ty.has_non_region_param() || ty.has_non_region_infer() {\n-                    bug!(\"const `{ct}`'s type should not reference params or types\");\n+                    bug!(\"const `{c}`'s type should not reference params or types\");\n                 }\n-                tcx.mk_const(\n+                self.tcx.mk_const(\n                     ty::PlaceholderConst {\n                         universe: ty::UniverseIndex::ROOT,\n-                        name: ty::BoundVar::from_usize(idx),\n+                        name: ty::BoundVar::from_usize({\n+                            let idx = self.idx;\n+                            self.idx += 1;\n+                            idx\n+                        }),\n                     },\n                     ty,\n                 )\n-                .into()\n+            } else {\n+                c.super_fold_with(self)\n             }\n-            _ => arg,\n         }\n-    }))\n+    }\n+\n+    substs.fold_with(&mut ReplaceParamAndInferWithPlaceholder { tcx, idx: 0 })\n }"}, {"sha": "e28ba3b1adab692e13109fd0570177963ef21843", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-105608.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01469693de40f8318766904278f3ad21f7a7db75/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01469693de40f8318766904278f3ad21f7a7db75/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.rs?ref=01469693de40f8318766904278f3ad21f7a7db75", "patch": "@@ -0,0 +1,15 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+struct Combination<const STRATEGIES: usize>;\n+\n+impl<const STRATEGIES: usize> Combination<STRATEGIES> {\n+    fn and<M>(self) -> Combination<{ STRATEGIES + 1 }> {\n+        Combination\n+    }\n+}\n+\n+pub fn main() {\n+    Combination::<0>.and::<_>().and::<_>();\n+    //~^ ERROR: type annotations needed\n+}"}, {"sha": "0be4c43daacf8c89a2981605820396d5fe65caf5", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-105608.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01469693de40f8318766904278f3ad21f7a7db75/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01469693de40f8318766904278f3ad21f7a7db75/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-105608.stderr?ref=01469693de40f8318766904278f3ad21f7a7db75", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-105608.rs:13:22\n+   |\n+LL |     Combination::<0>.and::<_>().and::<_>();\n+   |                      ^^^ cannot infer type of the type parameter `M` declared on the associated function `and`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |     Combination::<0>.and::<_>().and::<_>();\n+   |                         ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}