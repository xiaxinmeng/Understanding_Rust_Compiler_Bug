{"sha": "909d8f0eacf38ce11949365c75fae6e5a159a4e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwOWQ4ZjBlYWNmMzhjZTExOTQ5MzY1Yzc1ZmFlNmU1YTE1OWE0ZTE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-30T01:02:44Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-30T01:02:44Z"}, "message": "std: Add Deque::eachi and a Deque serializer support", "tree": {"sha": "c998545d309565e41c72418ee4419062d2421344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c998545d309565e41c72418ee4419062d2421344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/909d8f0eacf38ce11949365c75fae6e5a159a4e1", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/909d8f0eacf38ce11949365c75fae6e5a159a4e1", "html_url": "https://github.com/rust-lang/rust/commit/909d8f0eacf38ce11949365c75fae6e5a159a4e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/909d8f0eacf38ce11949365c75fae6e5a159a4e1/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0de7635f534f0c02e211a2104afa7e0e15391e14", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de7635f534f0c02e211a2104afa7e0e15391e14", "html_url": "https://github.com/rust-lang/rust/commit/0de7635f534f0c02e211a2104afa7e0e15391e14"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "e7ec86963eeb5831635a5d68fd46b67df473ec9e", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/909d8f0eacf38ce11949365c75fae6e5a159a4e1/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909d8f0eacf38ce11949365c75fae6e5a159a4e1/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=909d8f0eacf38ce11949365c75fae6e5a159a4e1", "patch": "@@ -66,6 +66,18 @@ pub impl<T> Deque<T> {\n         get(self.elts, idx)\n     }\n \n+    /// Iterate over the elements in the deque\n+    fn each(&self, f: &fn(&T) -> bool) {\n+        self.eachi(|_i, e| f(e))\n+    }\n+\n+    /// Iterate over the elements in the deque by index\n+    fn eachi(&self, f: &fn(uint, &T) -> bool) {\n+        for uint::range(0, self.nelts) |i| {\n+            if !f(i, self.get(i as int)) { return; }\n+        }\n+    }\n+\n     /// Remove and return the first element in the deque\n     ///\n     /// Fails if the deque is empty\n@@ -223,6 +235,7 @@ mod tests {\n         assert!(*deq.get(3) == d);\n     }\n \n+    #[test]\n     fn test_parameterized<T:Copy + Eq + Durable>(a: T, b: T, c: T, d: T) {\n         let mut deq = Deque::new();\n         assert!(deq.len() == 0);\n@@ -300,4 +313,23 @@ mod tests {\n         let reccy4 = RecCy { x: 19, y: 252, t: Two(17, 42) };\n         test_parameterized::<RecCy>(reccy1, reccy2, reccy3, reccy4);\n     }\n+\n+    #[test]\n+    fn test_eachi() {\n+        let mut deq = Deque::new();\n+        deq.add_back(1);\n+        deq.add_back(2);\n+        deq.add_back(3);\n+\n+        for deq.eachi |i, e| {\n+            assert_eq!(*e, i + 1);\n+        }\n+\n+        deq.pop_front();\n+\n+        for deq.eachi |i, e| {\n+            assert_eq!(*e, i + 2);\n+        }\n+\n+    }\n }"}, {"sha": "72c81d6d6b40cc18169584e93225f3db90bd585f", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/909d8f0eacf38ce11949365c75fae6e5a159a4e1/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/909d8f0eacf38ce11949365c75fae6e5a159a4e1/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=909d8f0eacf38ce11949365c75fae6e5a159a4e1", "patch": "@@ -20,6 +20,7 @@ use core::prelude::*;\n use core::dlist::DList;\n use core::hashmap::linear::{LinearMap, LinearSet};\n use core::trie::{TrieMap, TrieSet};\n+use deque::Deque;\n use treemap::{TreeMap, TreeSet};\n \n pub trait Encoder {\n@@ -561,6 +562,31 @@ impl<D:Decoder,T:Decodable<D>> Decodable<D> for @mut DList<T> {\n     }\n }\n \n+impl<\n+    S: Encoder,\n+    T: Encodable<S>\n+> Encodable<S> for Deque<T> {\n+    fn encode(&self, s: &S) {\n+        do s.emit_seq(self.len()) {\n+            for self.eachi |i, e| {\n+                s.emit_seq_elt(i, || e.encode(s));\n+            }\n+        }\n+    }\n+}\n+\n+impl<D:Decoder,T:Decodable<D>> Decodable<D> for Deque<T> {\n+    fn decode(d: &D) -> Deque<T> {\n+        let mut deque = Deque::new();\n+        do d.read_seq |len| {\n+            for uint::range(0, len) |i| {\n+                deque.add_back(d.read_seq_elt(i, || Decodable::decode(d)));\n+            }\n+        }\n+        deque\n+    }\n+}\n+\n impl<\n     E: Encoder,\n     K: Encodable<E> + Hash + IterBytes + Eq,"}]}