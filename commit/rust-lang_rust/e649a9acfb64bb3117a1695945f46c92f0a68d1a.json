{"sha": "e649a9acfb64bb3117a1695945f46c92f0a68d1a", "node_id": "C_kwDOAAsO6NoAKGU2NDlhOWFjZmI2NGJiMzExN2ExNjk1OTQ1ZjQ2YzkyZjBhNjhkMWE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:40:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T22:32:03Z"}, "message": "check for extern static size mismatches", "tree": {"sha": "fd240ccd496aeab8c68f99e7da0417e8c0a00181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd240ccd496aeab8c68f99e7da0417e8c0a00181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e649a9acfb64bb3117a1695945f46c92f0a68d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e649a9acfb64bb3117a1695945f46c92f0a68d1a", "html_url": "https://github.com/rust-lang/rust/commit/e649a9acfb64bb3117a1695945f46c92f0a68d1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e649a9acfb64bb3117a1695945f46c92f0a68d1a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0", "html_url": "https://github.com/rust-lang/rust/commit/59f9a918eddcf9d131f55c2ef96d9e82a5706cf0"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "67a6c997e99027e71a6e5d67d2d5acd22e7c8305", "filename": "src/machine.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e649a9acfb64bb3117a1695945f46c92f0a68d1a/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649a9acfb64bb3117a1695945f46c92f0a68d1a/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=e649a9acfb64bb3117a1695945f46c92f0a68d1a", "patch": "@@ -638,12 +638,35 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     ) -> InterpResult<'tcx, Pointer<Provenance>> {\n         let link_name = ecx.item_link_name(def_id);\n         if let Some(&ptr) = ecx.machine.extern_statics.get(&link_name) {\n+            // Various parts of the engine rely on `get_alloc_info` for size and alignment\n+            // information. That uses the type information of this static.\n+            // Make sure it matches the Miri allocation for this.\n+            let Provenance::Concrete { alloc_id, .. } = ptr.provenance else {\n+                panic!(\"extern_statics cannot contain wildcards\")\n+            };\n+            let (shim_size, shim_align, _kind) = ecx.get_alloc_info(alloc_id);\n+            let extern_decl_layout =\n+                ecx.tcx.layout_of(ty::ParamEnv::empty().and(ecx.tcx.type_of(def_id))).unwrap();\n+            if extern_decl_layout.size != shim_size || extern_decl_layout.align.abi != shim_align {\n+                throw_unsup_format!(\n+                    \"`extern` static `{name}` from crate `{krate}` has been declared \\\n+                    with a size of {decl_size} bytes and alignment of {decl_align} bytes, \\\n+                    but Miri emulates it via an extern static shim \\\n+                    with a size of {shim_size} bytes and alignment of {shim_align} bytes\",\n+                    name = ecx.tcx.def_path_str(def_id),\n+                    krate = ecx.tcx.crate_name(def_id.krate),\n+                    decl_size = extern_decl_layout.size.bytes(),\n+                    decl_align = extern_decl_layout.align.abi.bytes(),\n+                    shim_size = shim_size.bytes(),\n+                    shim_align = shim_align.bytes(),\n+                )\n+            }\n             Ok(ptr)\n         } else {\n             throw_unsup_format!(\n-                \"`extern` static `{}` from crate `{}` is not supported by Miri\",\n-                ecx.tcx.def_path_str(def_id),\n-                ecx.tcx.crate_name(def_id.krate),\n+                \"`extern` static `{name}` from crate `{krate}` is not supported by Miri\",\n+                name = ecx.tcx.def_path_str(def_id),\n+                krate = ecx.tcx.crate_name(def_id.krate),\n             )\n         }\n     }"}, {"sha": "17061f0e5c81c85376a21fee4ac6cb926aa3849d", "filename": "tests/fail/extern_static_wrong_size.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e649a9acfb64bb3117a1695945f46c92f0a68d1a/tests%2Ffail%2Fextern_static_wrong_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649a9acfb64bb3117a1695945f46c92f0a68d1a/tests%2Ffail%2Fextern_static_wrong_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_wrong_size.rs?ref=e649a9acfb64bb3117a1695945f46c92f0a68d1a", "patch": "@@ -0,0 +1,10 @@\n+//@ only-target-linux: we need a specific extern supported on this target\n+//@normalize-stderr-test: \"[48] bytes\" -> \"N bytes\"\n+\n+extern \"C\" {\n+    static mut environ: i8;\n+}\n+\n+fn main() {\n+    let _val = unsafe { environ }; //~ ERROR: /has been declared with a size of 1 bytes and alignment of 1 bytes, but Miri emulates it via an extern static shim with a size of [48] bytes and alignment of [48] bytes/\n+}"}, {"sha": "fdeb7bb5f6880d214687c762086cf11882cb4680", "filename": "tests/fail/extern_static_wrong_size.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e649a9acfb64bb3117a1695945f46c92f0a68d1a/tests%2Ffail%2Fextern_static_wrong_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649a9acfb64bb3117a1695945f46c92f0a68d1a/tests%2Ffail%2Fextern_static_wrong_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_wrong_size.stderr?ref=e649a9acfb64bb3117a1695945f46c92f0a68d1a", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: `extern` static `environ` from crate `extern_static_wrong_size` has been declared with a size of 1 bytes and alignment of 1 bytes, but Miri emulates it via an extern static shim with a size of N bytes and alignment of N bytes\n+  --> $DIR/extern_static_wrong_size.rs:LL:CC\n+   |\n+LL |     let _val = unsafe { environ };\n+   |                         ^^^^^^^ `extern` static `environ` from crate `extern_static_wrong_size` has been declared with a size of 1 bytes and alignment of 1 bytes, but Miri emulates it via an extern static shim with a size of N bytes and alignment of N bytes\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/extern_static_wrong_size.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}]}