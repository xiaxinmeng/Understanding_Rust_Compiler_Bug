{"sha": "d619049b2de27b5d2cb39f87e276860a06e185c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MTkwNDliMmRlMjdiNWQyY2IzOWY4N2UyNzY4NjBhMDZlMTg1YzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T07:29:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T07:29:51Z"}, "message": "Merge branch 'miri-backtrace' into mut-visitor", "tree": {"sha": "89580599848f397a64f0fd2d53e600953055e27f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89580599848f397a64f0fd2d53e600953055e27f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d619049b2de27b5d2cb39f87e276860a06e185c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d619049b2de27b5d2cb39f87e276860a06e185c5", "html_url": "https://github.com/rust-lang/rust/commit/d619049b2de27b5d2cb39f87e276860a06e185c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d619049b2de27b5d2cb39f87e276860a06e185c5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a806805f2373a41f0c23604fc3bc6f9b07f6895a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a806805f2373a41f0c23604fc3bc6f9b07f6895a", "html_url": "https://github.com/rust-lang/rust/commit/a806805f2373a41f0c23604fc3bc6f9b07f6895a"}, {"sha": "1e51a382edcebf72ef50995cf2450b05f9f0270b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e51a382edcebf72ef50995cf2450b05f9f0270b", "html_url": "https://github.com/rust-lang/rust/commit/1e51a382edcebf72ef50995cf2450b05f9f0270b"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "d4dd198323ec4a1c25a168cd1ddfed566622149a", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d619049b2de27b5d2cb39f87e276860a06e185c5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d619049b2de27b5d2cb39f87e276860a06e185c5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d619049b2de27b5d2cb39f87e276860a06e185c5", "patch": "@@ -23,7 +23,7 @@ use rustc::hir::{self, def_id::DefId};\n use rustc::mir;\n \n use syntax::attr;\n-\n+use syntax::source_map::DUMMY_SP;\n \n pub use rustc_mir::interpret::*;\n pub use rustc_mir::interpret::{self, AllocMap, PlaceTy}; // resolve ambiguity\n@@ -113,7 +113,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n         // Push our stack frame\n         ecx.push_stack_frame(\n             start_instance,\n-            start_mir.span,\n+            DUMMY_SP, // there is no call site, we want no span\n             start_mir,\n             Some(ret_ptr.into()),\n             StackPopCleanup::None { cleanup: true },\n@@ -146,7 +146,7 @@ pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>(\n         let ret_place = MPlaceTy::dangling(ecx.layout_of(tcx.mk_unit())?, &ecx).into();\n         ecx.push_stack_frame(\n             main_instance,\n-            main_mir.span,\n+            DUMMY_SP, // there is no call site, we want no span\n             main_mir,\n             Some(ret_place),\n             StackPopCleanup::None { cleanup: true },\n@@ -185,7 +185,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     match res {\n         Ok(()) => {\n             let leaks = ecx.memory().leak_report();\n-            // Disable the leak test on some platforms where we likely do not\n+            // Disable the leak test on some platforms where we do not\n             // correctly implement TLS destructors.\n             let target_os = ecx.tcx.tcx.sess.target.target.target_os.to_lowercase();\n             let ignore_leaks = target_os == \"windows\" || target_os == \"macos\";\n@@ -208,8 +208,16 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 let mut err = struct_error(ecx.tcx.tcx.at(span), msg.as_str());\n                 let frames = ecx.generate_stacktrace(None);\n                 err.span_label(span, e);\n-                for FrameInfo { span, location, .. } in frames {\n-                    err.span_note(span, &format!(\"inside call to `{}`\", location));\n+                // we iterate with indices because we need to look at the next frame (the caller)\n+                for idx in 0..frames.len() {\n+                    let frame_info = &frames[idx];\n+                    let call_site_is_local = frames.get(idx+1).map_or(false,\n+                        |caller_info| caller_info.instance.def_id().is_local());\n+                    if call_site_is_local {\n+                        err.span_note(frame_info.call_site, &frame_info.to_string());\n+                    } else {\n+                        err.note(&frame_info.to_string());\n+                    }\n                 }\n                 err.emit();\n             } else {"}]}