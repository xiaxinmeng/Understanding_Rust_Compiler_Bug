{"sha": "93ad4f2b9c093f204dbd5278c70256f6ec369b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYWQ0ZjJiOWMwOTNmMjA0ZGJkNTI3OGM3MDI1NmY2ZWMzNjliMzI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-04T18:04:16Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-04T18:17:03Z"}, "message": "Rollup merge of #49594 - mbrubeck:docs, r=steveklabnik\n\nAdd some performance guidance to std::fs and std::io docs\n\nAdds more documentation about performance to various \"read\" functions in `fs` and `io`, and to `BufReader`/`BufWriter`, with the goal of helping developers choose the best option for a given task.", "tree": {"sha": "8e1b6b8bf672672d251712a367078a80b57a3218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1b6b8bf672672d251712a367078a80b57a3218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ad4f2b9c093f204dbd5278c70256f6ec369b32", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlrFFp8ACgkQ/vbIBR0O\nATy1FRAAk5U3Sf1RTu7VSWQSmXzPfLpG4/Caf4FnX6ifXJUBfJLSR5TWf4Z0Frst\nBwF1FJCnDRgF4yCJgk7pgZh9tsgrkbt2fYdIbd+QatW+o2Ci4kDwvpmVTndELUVa\nmyVN2AmJa75DzlhUqGM47kfoLNMvliZ5Aynjc2bHbeeQC0rAnfs/nGxMCJG1TSn0\ngpmkgdnEiEyXDaBGpRX1PSE34cz+nXYc1VIoWdnvFses3H8NH0Oc70oZAiEI2EVa\nYjWw8ehduFY8X26sMLRdkqpw761OYYZ0wBO2ScGt9/XUZRlWeuMydl00EeUiBtZU\n8AotGPb8uciiyQzosmAm2hIrP8HtFRPNb0FqPu+nw6fWtUzckDpkWsDBX1Gpn/SA\nql4QSXvyDOGRYmsukjzbtkh8FeSwWj0fPYkE8Q7KTr3NIJriNwEGAXFZnknPy8s9\ncl0lHwcgGu7cqCUff3KHVtQcAiIoaaPUX5htztVI3DYUayqC8q4Xm9FjgUAbh+g4\njMVwd/W9KA1mwG9XaANdRXylrLZCZxHy2If87V/chKhycedB9eU+3ZQXThwo2CjH\n6RU0fu0xNW0/hBXWvvMYjL7glLYdN0T4C0d7FV0lZ3xwUXJH5LU8U9RdX4LPCm7E\nvC0ThLPhD4hudhm6TKpVsNwb5R5mmvvRZJ0e7KwU8XfY6/C9GKc=\n=Ks8U\n-----END PGP SIGNATURE-----", "payload": "tree 8e1b6b8bf672672d251712a367078a80b57a3218\nparent d6f19b676f2e2c5f47959d0841b1a24353bc06ad\nparent 390f8367e74d72317ab4aa5097048243073968fa\nauthor kennytm <kennytm@gmail.com> 1522865056 +0800\ncommitter kennytm <kennytm@gmail.com> 1522865823 +0800\n\nRollup merge of #49594 - mbrubeck:docs, r=steveklabnik\n\nAdd some performance guidance to std::fs and std::io docs\n\nAdds more documentation about performance to various \"read\" functions in `fs` and `io`, and to `BufReader`/`BufWriter`, with the goal of helping developers choose the best option for a given task.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ad4f2b9c093f204dbd5278c70256f6ec369b32", "html_url": "https://github.com/rust-lang/rust/commit/93ad4f2b9c093f204dbd5278c70256f6ec369b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ad4f2b9c093f204dbd5278c70256f6ec369b32/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6f19b676f2e2c5f47959d0841b1a24353bc06ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f19b676f2e2c5f47959d0841b1a24353bc06ad", "html_url": "https://github.com/rust-lang/rust/commit/d6f19b676f2e2c5f47959d0841b1a24353bc06ad"}, {"sha": "390f8367e74d72317ab4aa5097048243073968fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/390f8367e74d72317ab4aa5097048243073968fa", "html_url": "https://github.com/rust-lang/rust/commit/390f8367e74d72317ab4aa5097048243073968fa"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "7bd1adc411ae4b1c0f19009c51f0faf1ff046643", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93ad4f2b9c093f204dbd5278c70256f6ec369b32/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ad4f2b9c093f204dbd5278c70256f6ec369b32/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=93ad4f2b9c093f204dbd5278c70256f6ec369b32", "patch": "@@ -231,7 +231,9 @@ fn initial_buffer_size(file: &File) -> usize {\n /// Read the entire contents of a file into a bytes vector.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_end`]\n-/// with fewer imports and without an intermediate variable.\n+/// with fewer imports and without an intermediate variable.  It pre-allocates a\n+/// buffer based on the file size when available, so it is generally faster than\n+/// reading into a vector created with `Vec::new()`.\n ///\n /// [`File::open`]: struct.File.html#method.open\n /// [`read_to_end`]: ../io/trait.Read.html#method.read_to_end\n@@ -270,7 +272,9 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// Read the entire contents of a file into a string.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_string`]\n-/// with fewer imports and without an intermediate variable.\n+/// with fewer imports and without an intermediate variable.  It pre-allocates a\n+/// buffer based on the file size when available, so it is generally faster than\n+/// reading into a string created with `String::new()`.\n ///\n /// [`File::open`]: struct.File.html#method.open\n /// [`read_to_string`]: ../io/trait.Read.html#method.read_to_string"}, {"sha": "d6eac748334834ccae5136eb19cdc846b36995f9", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93ad4f2b9c093f204dbd5278c70256f6ec369b32/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ad4f2b9c093f204dbd5278c70256f6ec369b32/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=93ad4f2b9c093f204dbd5278c70256f6ec369b32", "patch": "@@ -25,6 +25,12 @@ use memchr;\n /// results in a system call. A `BufReader` performs large, infrequent reads on\n /// the underlying [`Read`] and maintains an in-memory buffer of the results.\n ///\n+/// `BufReader` can improve the speed of programs that make *small* and\n+/// *repeated* read calls to the same file or network socket.  It does not\n+/// help when reading very large amounts at once, or reading just one or a few\n+/// times.  It also provides no advantage when reading from a source that is\n+/// already in memory, like a `Vec<u8>`.\n+///\n /// [`Read`]: ../../std/io/trait.Read.html\n /// [`TcpStream::read`]: ../../std/net/struct.TcpStream.html#method.read\n /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n@@ -359,6 +365,12 @@ impl<R: Seek> Seek for BufReader<R> {\n /// `BufWriter` keeps an in-memory buffer of data and writes it to an underlying\n /// writer in large, infrequent batches.\n ///\n+/// `BufWriter` can improve the speed of programs that make *small* and\n+/// *repeated* write calls to the same file or network socket.  It does not\n+/// help when writing very large amounts at once, or writing just one or a few\n+/// times.  It also provides no advantage when writing to a destination that is\n+/// in memory, like a `Vec<u8>`.\n+///\n /// When the `BufWriter` is dropped, the contents of its buffer will be written\n /// out. However, any errors that happen in the process of flushing the buffer\n /// when the writer is dropped will be ignored. Code that wishes to handle such"}, {"sha": "3b8c42ddb39d89d4e390ded3268be11350147859", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93ad4f2b9c093f204dbd5278c70256f6ec369b32/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ad4f2b9c093f204dbd5278c70256f6ec369b32/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=93ad4f2b9c093f204dbd5278c70256f6ec369b32", "patch": "@@ -595,6 +595,11 @@ pub trait Read {\n     ///     Ok(())\n     /// }\n     /// ```\n+    ///\n+    /// (See also the [`std::fs::read`] convenience function for reading from a\n+    /// file.)\n+    ///\n+    /// [`std::fs::read`]: ../fs/fn.read.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n         read_to_end(self, buf)\n@@ -633,6 +638,11 @@ pub trait Read {\n     ///     Ok(())\n     /// }\n     /// ```\n+    ///\n+    /// (See also the [`std::fs::read_to_string`] convenience function for\n+    /// reading from a file.)\n+    ///\n+    /// [`std::fs::read_to_string`]: ../fs/fn.read_to_string.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_string(&mut self, buf: &mut String) -> Result<usize> {\n         // Note that we do *not* call `.read_to_end()` here. We are passing"}]}