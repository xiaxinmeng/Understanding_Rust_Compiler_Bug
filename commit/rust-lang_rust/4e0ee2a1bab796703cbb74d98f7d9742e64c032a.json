{"sha": "4e0ee2a1bab796703cbb74d98f7d9742e64c032a", "node_id": "C_kwDOAAsO6NoAKDRlMGVlMmExYmFiNzk2NzAzY2JiNzRkOThmN2Q5NzQyZTY0YzAzMmE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-18T16:03:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-22T11:37:09Z"}, "message": "Avoid a couple of Symbol::as_str calls in cg_llvm", "tree": {"sha": "9e880aefb508a8c03f137319c139ea933a41b7c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e880aefb508a8c03f137319c139ea933a41b7c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0ee2a1bab796703cbb74d98f7d9742e64c032a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0ee2a1bab796703cbb74d98f7d9742e64c032a", "html_url": "https://github.com/rust-lang/rust/commit/4e0ee2a1bab796703cbb74d98f7d9742e64c032a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0ee2a1bab796703cbb74d98f7d9742e64c032a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9886c233d84c231030af76419d002996df981ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9886c233d84c231030af76419d002996df981ebc", "html_url": "https://github.com/rust-lang/rust/commit/9886c233d84c231030af76419d002996df981ebc"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "be55a0c868a462c38a37a429c12fe178911d59ff", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e0ee2a1bab796703cbb74d98f7d9742e64c032a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0ee2a1bab796703cbb74d98f7d9742e64c032a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=4e0ee2a1bab796703cbb74d98f7d9742e64c032a", "patch": "@@ -96,7 +96,6 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let arg_tys = sig.inputs();\n         let ret_ty = sig.output();\n         let name = tcx.item_name(def_id);\n-        let name_str = &*name.as_str();\n \n         let llret_ty = self.layout_of(ret_ty).llvm_type(self);\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n@@ -230,9 +229,14 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                                 &[args[0].immediate(), y],\n                             )\n                         }\n-                        sym::ctlz_nonzero | sym::cttz_nonzero => {\n+                        sym::ctlz_nonzero => {\n                             let y = self.const_bool(true);\n-                            let llvm_name = &format!(\"llvm.{}.i{}\", &name_str[..4], width);\n+                            let llvm_name = &format!(\"llvm.ctlz.i{}\", width);\n+                            self.call_intrinsic(llvm_name, &[args[0].immediate(), y])\n+                        }\n+                        sym::cttz_nonzero => {\n+                            let y = self.const_bool(true);\n+                            let llvm_name = &format!(\"llvm.cttz.i{}\", width);\n                             self.call_intrinsic(llvm_name, &[args[0].immediate(), y])\n                         }\n                         sym::ctpop => self.call_intrinsic(\n@@ -353,7 +357,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 return;\n             }\n \n-            _ if name_str.starts_with(\"simd_\") => {\n+            _ if name.as_str().starts_with(\"simd_\") => {\n                 match generic_simd_intrinsic(self, name, callee_ty, args, ret_ty, llret_ty, span) {\n                     Ok(llval) => llval,\n                     Err(()) => return,\n@@ -843,7 +847,6 @@ fn generic_simd_intrinsic(\n     let sig =\n         tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), callee_ty.fn_sig(tcx));\n     let arg_tys = sig.inputs();\n-    let name_str = &*name.as_str();\n \n     if name == sym::simd_select_bitmask {\n         let in_ty = arg_tys[0];\n@@ -917,7 +920,7 @@ fn generic_simd_intrinsic(\n         ));\n     }\n \n-    if let Some(stripped) = name_str.strip_prefix(\"simd_shuffle\") {\n+    if let Some(stripped) = name.as_str().strip_prefix(\"simd_shuffle\") {\n         // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n         // If there is no suffix, use the index array length.\n         let n: u64 = if stripped.is_empty() {"}]}