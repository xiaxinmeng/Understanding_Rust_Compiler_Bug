{"sha": "e117b47f759e93679192256043db67f8f8a68675", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMTdiNDdmNzU5ZTkzNjc5MTkyMjU2MDQzZGI2N2Y4ZjhhNjg2NzU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T01:14:09Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:06Z"}, "message": "Catch errors for any new item, not just trait implementations\n\nThis matches the previous behavior of everybody_loops and is also more\nconsistent than special-casing impls.", "tree": {"sha": "44e01fefcc04014e85370b5165e7fdff563a3de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e01fefcc04014e85370b5165e7fdff563a3de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e117b47f759e93679192256043db67f8f8a68675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e117b47f759e93679192256043db67f8f8a68675", "html_url": "https://github.com/rust-lang/rust/commit/e117b47f759e93679192256043db67f8f8a68675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e117b47f759e93679192256043db67f8f8a68675/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eec9fb5d15d2bb2025398f5cae12aebe03d87e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8", "html_url": "https://github.com/rust-lang/rust/commit/6eec9fb5d15d2bb2025398f5cae12aebe03d87e8"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "274f93dd50b0d45361963cdd91b035151990ce60", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e117b47f759e93679192256043db67f8f8a68675/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e117b47f759e93679192256043db67f8f8a68675/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=e117b47f759e93679192256043db67f8f8a68675", "patch": "@@ -407,7 +407,10 @@ struct LateResolutionVisitor<'a, 'b, 'ast> {\n impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     fn visit_item(&mut self, item: &'ast Item) {\n         let prev = replace(&mut self.diagnostic_metadata.current_item, Some(item));\n+        // Always report errors in items we just entered.\n+        let old_ignore = replace(&mut self.in_func_body, false);\n         self.resolve_item(item);\n+        self.in_func_body = old_ignore;\n         self.diagnostic_metadata.current_item = prev;\n     }\n     fn visit_arm(&mut self, arm: &'ast Arm) {\n@@ -1174,8 +1177,6 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         impl_items: &'ast [P<AssocItem>],\n     ) {\n         debug!(\"resolve_implementation\");\n-        // Never ignore errors in trait implementations.\n-        let old_ignore = replace(&mut self.in_func_body, false);\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n             // Dummy self type for better errors if `Self` is used in the trait path.\n@@ -1271,7 +1272,6 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 });\n             });\n         });\n-        self.in_func_body = old_ignore;\n     }\n \n     fn check_trait_item<F>(&mut self, ident: Ident, ns: Namespace, span: Span, err: F)"}, {"sha": "a927f6bd79976eb85755f242e27e6e4127feb410", "filename": "src/test/rustdoc-ui/impl-fn-nesting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e117b47f759e93679192256043db67f8f8a68675/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e117b47f759e93679192256043db67f8f8a68675/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.rs?ref=e117b47f759e93679192256043db67f8f8a68675", "patch": "@@ -41,8 +41,8 @@ pub fn f<B: UnknownBound>(a: UnknownType, b: B) {\n             can_define_macros_here_too!();\n \n             /// This also is documented.\n-            pub fn doubly_nested(c: UnknownTypeShouldBeIgnored) {\n-\n+            pub fn doubly_nested(c: UnknownType) {\n+            //~^ ERROR cannot find type `UnknownType` in this scope\n             }\n         }\n     }"}, {"sha": "608749af895edbd699a2119eacc9fc010991be47", "filename": "src/test/rustdoc-ui/impl-fn-nesting.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e117b47f759e93679192256043db67f8f8a68675/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e117b47f759e93679192256043db67f8f8a68675/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fimpl-fn-nesting.stderr?ref=e117b47f759e93679192256043db67f8f8a68675", "patch": "@@ -52,9 +52,15 @@ error[E0412]: cannot find type `UnknownType` in this scope\n LL |         type Item = UnknownType;\n    |                     ^^^^^^^^^^^ not found in this scope\n \n+error[E0412]: cannot find type `UnknownType` in this scope\n+  --> $DIR/impl-fn-nesting.rs:44:37\n+   |\n+LL |             pub fn doubly_nested(c: UnknownType) {\n+   |                                     ^^^^^^^^^^^ not found in this scope\n+\n error: Compilation failed, aborting rustdoc\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0405, E0412.\n For more information about an error, try `rustc --explain E0405`."}]}