{"sha": "6946534d84161353b56157f65f8cdcdfb93df749", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NDY1MzRkODQxNjEzNTNiNTYxNTdmNjVmOGNkY2RmYjkzZGY3NDk=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-01-26T22:49:30Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-01-30T23:20:24Z"}, "message": "Remove const_in_array_rep_expr", "tree": {"sha": "aacefc7a8c5fc2f740dfe024ceb313c0e9e6e827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aacefc7a8c5fc2f740dfe024ceb313c0e9e6e827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6946534d84161353b56157f65f8cdcdfb93df749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6946534d84161353b56157f65f8cdcdfb93df749", "html_url": "https://github.com/rust-lang/rust/commit/6946534d84161353b56157f65f8cdcdfb93df749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6946534d84161353b56157f65f8cdcdfb93df749/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe396531167cc60605db6c51bff169b3e2fd5d55", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe396531167cc60605db6c51bff169b3e2fd5d55", "html_url": "https://github.com/rust-lang/rust/commit/fe396531167cc60605db6c51bff169b3e2fd5d55"}], "stats": {"total": 230, "additions": 31, "deletions": 199}, "files": [{"sha": "e12b533b110d22fc4124852c52fd2d5848f49e27", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -485,9 +485,6 @@ declare_features! (\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n \n-    /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n-    (active, const_in_array_repeat_expressions, \"1.37.0\", Some(49147), None),\n-\n     /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n     (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n "}, {"sha": "38a3a4e3d4411275fe060e681570ba34d184047c", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -97,6 +97,9 @@ declare_features! (\n     (removed, extern_in_paths, \"1.33.0\", Some(55600), None,\n      Some(\"subsumed by `::foo::bar` paths\")),\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n+    /// Allows `[x; N]` where `x` is a constant (RFC 2203).\n+    (removed, const_in_array_repeat_expressions,  \"1.37.0\", Some(49147), None,\n+     Some(\"removed due to causing promotable bugs\")),\n     /// Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,"}, {"sha": "163b400973b7cd2a0feb05f38c383223a0a02f95", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -228,8 +228,7 @@ pub enum ObligationCauseCode<'tcx> {\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n     /// `[T, ..n]` implies that `T` must be `Copy`.\n-    /// If `true`, suggest `const_in_array_repeat_expressions` feature flag.\n-    RepeatVec(bool),\n+    RepeatVec,\n \n     /// Types of fields (other than the last, except for packed structs) in a struct must be sized.\n     FieldSized {"}, {"sha": "8de8b32bd64af249df5dcbc1568d9f8b145e19ab", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -43,10 +43,6 @@ use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations}\n use crate::dataflow::impls::MaybeInitializedPlaces;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::ResultsCursor;\n-use crate::transform::{\n-    check_consts::ConstCx,\n-    promote_consts::should_suggest_const_in_array_repeat_expressions_attribute,\n-};\n \n use crate::borrow_check::{\n     borrow_set::BorrowSet,\n@@ -1997,22 +1993,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             let span = body.source_info(location).span;\n                             let ty = operand.ty(body, tcx);\n                             if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {\n-                                let ccx = ConstCx::new_with_param_env(tcx, body, self.param_env);\n-                                // To determine if `const_in_array_repeat_expressions` feature gate should\n-                                // be mentioned, need to check if the rvalue is promotable.\n-                                let should_suggest =\n-                                    should_suggest_const_in_array_repeat_expressions_attribute(\n-                                        &ccx, operand,\n-                                    );\n-                                debug!(\"check_rvalue: should_suggest={:?}\", should_suggest);\n-\n                                 let def_id = body.source.def_id().expect_local();\n                                 self.infcx.report_selection_error(\n                                     &traits::Obligation::new(\n                                         ObligationCause::new(\n                                             span,\n                                             self.tcx().hir().local_def_id_to_hir_id(def_id),\n-                                            traits::ObligationCauseCode::RepeatVec(should_suggest),\n+                                            traits::ObligationCauseCode::RepeatVec,\n                                         ),\n                                         self.param_env,\n                                         ty::Binder::bind(ty::TraitRef::new("}, {"sha": "0ce1980f10a1186645e16747b7c6891a410ad7ce", "filename": "compiler/rustc_mir/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -246,7 +246,8 @@ where\n     };\n \n     // Check the qualifs of the value of `const` items.\n-    if let ty::ConstKind::Unevaluated(def, _, None) = constant.literal.val {\n+    if let ty::ConstKind::Unevaluated(def, _, promoted) = constant.literal.val {\n+        assert!(promoted.is_none());\n         // Don't peek inside trait associated constants.\n         if cx.tcx.trait_of_item(def.did).is_none() {\n             let qualifs = if let Some((did, param_did)) = def.as_const_arg() {"}, {"sha": "b4504a0e223f6899d36d7126b40567ff7a81ab19", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 63, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -102,9 +102,6 @@ pub enum Candidate {\n     /// Borrow of a constant temporary, candidate for lifetime extension.\n     Ref(Location),\n \n-    /// Promotion of the `x` in `[x; 32]`.\n-    Repeat(Location),\n-\n     /// Currently applied to function calls where the callee has the unstable\n     /// `#[rustc_args_required_const]` attribute as well as the SIMD shuffle\n     /// intrinsic. The intrinsic requires the arguments are indeed constant and\n@@ -120,14 +117,14 @@ impl Candidate {\n     /// Returns `true` if we should use the \"explicit\" rules for promotability for this `Candidate`.\n     fn forces_explicit_promotion(&self) -> bool {\n         match self {\n-            Candidate::Ref(_) | Candidate::Repeat(_) => false,\n+            Candidate::Ref(_) => false,\n             Candidate::Argument { .. } | Candidate::InlineAsm { .. } => true,\n         }\n     }\n \n     fn source_info(&self, body: &Body<'_>) -> SourceInfo {\n         match self {\n-            Candidate::Ref(location) | Candidate::Repeat(location) => *body.source_info(*location),\n+            Candidate::Ref(location) => *body.source_info(*location),\n             Candidate::Argument { bb, .. } | Candidate::InlineAsm { bb, .. } => {\n                 *body.source_info(body.terminator_loc(*bb))\n             }\n@@ -213,11 +210,6 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n             Rvalue::Ref(..) => {\n                 self.candidates.push(Candidate::Ref(location));\n             }\n-            Rvalue::Repeat(..) if self.ccx.tcx.features().const_in_array_repeat_expressions => {\n-                // FIXME(#49147) only promote the element when it isn't `Copy`\n-                // (so that code that can copy it at runtime is unaffected).\n-                self.candidates.push(Candidate::Repeat(location));\n-            }\n             _ => {}\n         }\n     }\n@@ -334,21 +326,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n-            Candidate::Repeat(loc) => {\n-                assert!(!self.explicit);\n-\n-                let statement = &self.body[loc.block].statements[loc.statement_index];\n-                match &statement.kind {\n-                    StatementKind::Assign(box (_, Rvalue::Repeat(ref operand, _))) => {\n-                        if !self.tcx.features().const_in_array_repeat_expressions {\n-                            return Err(Unpromotable);\n-                        }\n-\n-                        self.validate_operand(operand)\n-                    }\n-                    _ => bug!(),\n-                }\n-            }\n             Candidate::Argument { bb, index } => {\n                 assert!(self.explicit);\n \n@@ -1090,18 +1067,6 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         _ => bug!(),\n                     }\n                 }\n-                Candidate::Repeat(loc) => {\n-                    let statement = &mut blocks[loc.block].statements[loc.statement_index];\n-                    match statement.kind {\n-                        StatementKind::Assign(box (_, Rvalue::Repeat(ref mut operand, _))) => {\n-                            let ty = operand.ty(local_decls, self.tcx);\n-                            let span = statement.source_info.span;\n-\n-                            Rvalue::Use(mem::replace(operand, promoted_operand(ty, span)))\n-                        }\n-                        _ => bug!(),\n-                    }\n-                }\n                 Candidate::Argument { bb, index } => {\n                     let terminator = blocks[bb].terminator_mut();\n                     match terminator.kind {\n@@ -1182,8 +1147,7 @@ pub fn promote_candidates<'tcx>(\n     let mut extra_statements = vec![];\n     for candidate in candidates.into_iter().rev() {\n         match candidate {\n-            Candidate::Repeat(Location { block, statement_index })\n-            | Candidate::Ref(Location { block, statement_index }) => {\n+            Candidate::Ref(Location { block, statement_index }) => {\n                 if let StatementKind::Assign(box (place, _)) =\n                     &body[block].statements[statement_index].kind\n                 {\n@@ -1267,27 +1231,3 @@ pub fn promote_candidates<'tcx>(\n \n     promotions\n }\n-\n-/// This function returns `true` if the `const_in_array_repeat_expressions` feature attribute should\n-/// be suggested. This function is probably quite expensive, it shouldn't be run in the happy path.\n-/// Feature attribute should be suggested if `operand` can be promoted and the feature is not\n-/// enabled.\n-crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n-    ccx: &ConstCx<'_, 'tcx>,\n-    operand: &Operand<'tcx>,\n-) -> bool {\n-    let mut rpo = traversal::reverse_postorder(&ccx.body);\n-    let (temps, _) = collect_temps_and_candidates(&ccx, &mut rpo);\n-    let validator = Validator { ccx, temps: &temps, explicit: false };\n-\n-    let should_promote = validator.validate_operand(operand).is_ok();\n-    let feature_flag = validator.ccx.tcx.features().const_in_array_repeat_expressions;\n-    debug!(\n-        \"should_suggest_const_in_array_repeat_expressions_flag: def_id={:?} \\\n-            should_promote={:?} feature_flag={:?}\",\n-        validator.ccx.def_id(),\n-        should_promote,\n-        feature_flag\n-    );\n-    should_promote && !feature_flag\n-}"}, {"sha": "690591930deb9d9af28f2de778898460d20a71a1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1881,23 +1881,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::Coercion { source: _, target } => {\n                 err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));\n             }\n-            ObligationCauseCode::RepeatVec(suggest_const_in_array_repeat_expressions) => {\n+            ObligationCauseCode::RepeatVec => {\n                 err.note(\n                     \"the `Copy` trait is required because the repeated element will be copied\",\n                 );\n-                if suggest_const_in_array_repeat_expressions {\n-                    err.note(\n-                        \"this array initializer can be evaluated at compile-time, see issue \\\n-                         #49147 <https://github.com/rust-lang/rust/issues/49147> \\\n-                         for more information\",\n-                    );\n-                    if tcx.sess.opts.unstable_features.is_nightly_build() {\n-                        err.help(\n-                            \"add `#![feature(const_in_array_repeat_expressions)]` to the \\\n-                             crate attributes to enable\",\n-                        );\n-                    }\n-                }\n             }\n             ObligationCauseCode::VariableType(hir_id) => {\n                 let parent_node = self.tcx.hir().get_parent_node(hir_id);"}, {"sha": "d8f774f723c85c8bc8f437ac78c47c095d98c686", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -89,7 +89,6 @@\n #![feature(coerce_unsized)]\n #![feature(const_btree_new)]\n #![feature(const_fn)]\n-#![feature(const_in_array_repeat_expressions)]\n #![feature(cow_is_borrowed)]\n #![feature(const_cow_is_borrowed)]\n #![feature(dispatch_from_dyn)]"}, {"sha": "940916944bdaa6f5b8e78c7da1cde91a6ec9c35e", "filename": "src/doc/unstable-book/src/language-features/const-in-array-repeat-expressions.md", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe396531167cc60605db6c51bff169b3e2fd5d55/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-in-array-repeat-expressions.md", "raw_url": "https://github.com/rust-lang/rust/raw/fe396531167cc60605db6c51bff169b3e2fd5d55/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-in-array-repeat-expressions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-in-array-repeat-expressions.md?ref=fe396531167cc60605db6c51bff169b3e2fd5d55", "patch": "@@ -1,11 +0,0 @@\n-# `const_in_array_repeat_expressions`\n-\n-The tracking issue for this feature is: [#49147]\n-\n-[#49147]: https://github.com/rust-lang/rust/issues/49147\n-\n-------------------------\n-\n-Relaxes the rules for repeat expressions, `[x; N]` such that `x` may also be `const` (strictly\n-speaking rvalue promotable), in addition to `typeof(x): Copy`. The result of `[x; N]` where `x` is\n-`const` is itself also `const`."}, {"sha": "25463ea5ee84155c55eb3b6d11dd90164c449b35", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "previous_filename": "src/test/ui/issues/issue-80371.rs"}, {"sha": "85baa1268bf048c9e44421945d39d74e64642ef4", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "renamed", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,22 +1,18 @@\n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n-  --> $DIR/issue-80371.rs:8:19\n+  --> $DIR/repeat_empty_ok.rs:8:19\n    |\n LL |     let headers = [Header{value: &[]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = note: this array initializer can be evaluated at compile-time, see issue #49147 <https://github.com/rust-lang/rust/issues/49147> for more information\n-   = help: add `#![feature(const_in_array_repeat_expressions)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n-  --> $DIR/issue-80371.rs:13:19\n+  --> $DIR/repeat_empty_ok.rs:13:19\n    |\n LL |     let headers = [Header{value: &[0]}; 128];\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n    = note: the `Copy` trait is required because the repeated element will be copied\n-   = note: this array initializer can be evaluated at compile-time, see issue #49147 <https://github.com/rust-lang/rust/issues/49147> for more information\n-   = help: add `#![feature(const_in_array_repeat_expressions)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n ", "previous_filename": "src/test/ui/issues/issue-80371.stderr"}, {"sha": "65d02317d34c57a0482fef35d2d35f94166b861d", "filename": "src/test/ui/consts/const-blocks/const-repeat.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fconst-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fconst-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fconst-repeat.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/const-repeat.rs"}, {"sha": "7936af75d84ac585af4af9a834b3da8ba0cbec90", "filename": "src/test/ui/consts/const-blocks/fn-call-in-const.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-const.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n-#![allow(unused)]\n-#![feature(const_in_array_repeat_expressions)]\n+#![feature(inline_const)]\n+#![allow(unused, incomplete_features)]\n \n // Some type that is not copyable.\n struct Bar;\n@@ -18,6 +18,6 @@ const _: [u32; 2] = [type_copy(); 2];\n \n // This is allowed because all promotion contexts use the explicit rules for promotability when\n // inside an explicit const context.\n-const _: [Option<Bar>; 2] = [type_no_copy(); 2];\n+const _: [Option<Bar>; 2] = [const { type_no_copy() }; 2];\n \n fn main() {}", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/fn-call-in-const.rs"}, {"sha": "19217843759c1a31cea0ea2f1bd3f821a8d5c7df", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_in_array_repeat_expressions)]\n-\n // Some type that is not copyable.\n struct Bar;\n ", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/fn-call-in-non-const.rs"}, {"sha": "b75452cd2170270397af16e805148c89a05b8d36", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/fn-call-in-non-const.rs:16:31\n+  --> $DIR/fn-call-in-non-const.rs:14:31\n    |\n LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    |                               ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/fn-call-in-non-const.stderr"}, {"sha": "bb12139a7bae93f4ffaf8eadeeae27beb6adb45b", "filename": "src/test/ui/consts/const-blocks/migrate-fail.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,6 +1,5 @@\n // ignore-compare-mode-nll\n // compile-flags: -Z borrowck=migrate\n-#![feature(const_in_array_repeat_expressions)]\n #![allow(warnings)]\n \n // Some type that is not copyable.", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/migrate-fail.rs"}, {"sha": "0fdbbc36288e9c80f60e50f6913b5ae04bd43edf", "filename": "src/test/ui/consts/const-blocks/migrate-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:14:37\n+  --> $DIR/migrate-fail.rs:13:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n@@ -9,7 +9,7 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    = note: the `Copy` trait is required because the repeated element will be copied\n \n error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/migrate-fail.rs:20:37\n+  --> $DIR/migrate-fail.rs:19:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/migrate-fail.stderr"}, {"sha": "3195717fa38bac32d5bb4aa25b29736be24081a2", "filename": "src/test/ui/consts/const-blocks/migrate-pass.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-pass.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // compile-flags: -Z borrowck=migrate\n // ignore-compare-mode-nll\n-#![feature(const_in_array_repeat_expressions)]\n #![allow(warnings)]\n \n // Some type that is not copyable.", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/migrate-pass.rs"}, {"sha": "871387c1fd0cf9ffce619f87568c7395decf1bc1", "filename": "src/test/ui/consts/const-blocks/nll-fail.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,4 @@\n // ignore-compare-mode-nll\n-#![feature(const_in_array_repeat_expressions, nll)]\n #![allow(warnings)]\n \n // Some type that is not copyable.", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/nll-fail.rs"}, {"sha": "81220856359778d9070432698e92b1bf5cbef1fb", "filename": "src/test/ui/consts/const-blocks/nll-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:13:37\n+  --> $DIR/nll-fail.rs:12:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`\n@@ -9,7 +9,7 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    = note: the `Copy` trait is required because the repeated element will be copied\n \n error[E0277]: the trait bound `Option<Bar>: Copy` is not satisfied\n-  --> $DIR/nll-fail.rs:19:37\n+  --> $DIR/nll-fail.rs:18:37\n    |\n LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                     ^^^^^^ the trait `Copy` is not implemented for `Option<Bar>`", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/nll-fail.stderr"}, {"sha": "d8defa19483e127fe3cf4aabc7de299dfa43d85b", "filename": "src/test/ui/consts/const-blocks/nll-pass.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-pass.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // ignore-compare-mode-nll\n #![allow(warnings)]\n-#![feature(const_in_array_repeat_expressions, nll)]\n \n // Some type that is not copyable.\n struct Bar;", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/nll-pass.rs"}, {"sha": "e11f69babf79876afa4a892d563cb9eb38d48a36", "filename": "src/test/ui/consts/const-blocks/run-pass.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Frun-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Frun-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Frun-pass.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_in_array_repeat_expressions)]\n \n #[derive(Debug, Eq, PartialEq)]\n struct Bar;", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/run-pass.rs"}, {"sha": "5a614cbdd15619c3867ffe6251da3b1339a2df1b", "filename": "src/test/ui/consts/const-blocks/trait-error.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_in_array_repeat_expressions)]\n-\n #[derive(Copy, Clone)]\n struct Foo<T>(T);\n ", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/trait-error.rs"}, {"sha": "26e2848e7f7a1bbb41106988641c807a82f2e084", "filename": "src/test/ui/consts/const-blocks/trait-error.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Foo<String>: Copy` is not satisfied\n-  --> $DIR/trait-error.rs:7:5\n+  --> $DIR/trait-error.rs:5:5\n    |\n LL |     [Foo(String::new()); 4];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Foo<String>`", "previous_filename": "src/test/ui/consts/rfc-2203-const-array-repeat-exprs/trait-error.stderr"}, {"sha": "5ed302bbff3aa14feb6c971f14f596f2336c86d9", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fe396531167cc60605db6c51bff169b3e2fd5d55/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe396531167cc60605db6c51bff169b3e2fd5d55/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.rs?ref=fe396531167cc60605db6c51bff169b3e2fd5d55", "patch": "@@ -1,17 +0,0 @@\n-#![allow(warnings)]\n-\n-struct Bar;\n-\n-// This function would compile with the feature gate, and tests that it is suggested.\n-fn foo() {\n-    let arr: [Option<String>; 2] = [None::<String>; 2];\n-    //~^ ERROR the trait bound `Option<String>: Copy` is not satisfied [E0277]\n-}\n-\n-// This function would not compile with the feature gate, and tests that it is not suggested.\n-fn bar() {\n-    let arr: [Option<String>; 2] = [Some(\"foo\".to_string()); 2];\n-    //~^ ERROR the trait bound `Option<String>: Copy` is not satisfied [E0277]\n-}\n-\n-fn main() {}"}, {"sha": "ca1706169afc6e867e355d9c12e328809581e7c9", "filename": "src/test/ui/feature-gates/feature-gate-const_in_array_repeat_expressions.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fe396531167cc60605db6c51bff169b3e2fd5d55/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe396531167cc60605db6c51bff169b3e2fd5d55/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_in_array_repeat_expressions.stderr?ref=fe396531167cc60605db6c51bff169b3e2fd5d55", "patch": "@@ -1,25 +0,0 @@\n-error[E0277]: the trait bound `Option<String>: Copy` is not satisfied\n-  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:7:36\n-   |\n-LL |     let arr: [Option<String>; 2] = [None::<String>; 2];\n-   |                                    ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Option<String>`\n-   |\n-   = help: the following implementations were found:\n-             <Option<T> as Copy>\n-   = note: the `Copy` trait is required because the repeated element will be copied\n-   = note: this array initializer can be evaluated at compile-time, see issue #49147 <https://github.com/rust-lang/rust/issues/49147> for more information\n-   = help: add `#![feature(const_in_array_repeat_expressions)]` to the crate attributes to enable\n-\n-error[E0277]: the trait bound `Option<String>: Copy` is not satisfied\n-  --> $DIR/feature-gate-const_in_array_repeat_expressions.rs:13:36\n-   |\n-LL |     let arr: [Option<String>; 2] = [Some(\"foo\".to_string()); 2];\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Option<String>`\n-   |\n-   = help: the following implementations were found:\n-             <Option<T> as Copy>\n-   = note: the `Copy` trait is required because the repeated element will be copied\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "c96c907318ce93c67162f579e5ef5e490fcba4d3", "filename": "src/test/ui/unused/unused-closure.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Funused%2Funused-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Funused%2Funused-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-closure.rs?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -2,7 +2,6 @@\n // edition:2018\n \n #![feature(async_closure)]\n-#![feature(const_in_array_repeat_expressions)]\n #![feature(generators)]\n #![deny(unused_must_use)]\n \n@@ -18,10 +17,6 @@ fn unused() {\n \n     [Box::new([|| {}; 10]); 1]; //~ ERROR unused array of boxed arrays of closures that must be used\n \n-    [|| { //~ ERROR unused array of generators that must be used\n-        yield 42u32;\n-    }; 42];\n-\n     vec![|| \"a\"].pop().unwrap(); //~ ERROR unused closure that must be used\n \n     let b = false;"}, {"sha": "265d3e8e075fdc71c5944ff1da06d4d78bbc2c36", "filename": "src/test/ui/unused/unused-closure.stderr", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Funused%2Funused-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6946534d84161353b56157f65f8cdcdfb93df749/src%2Ftest%2Fui%2Funused%2Funused-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused%2Funused-closure.stderr?ref=6946534d84161353b56157f65f8cdcdfb93df749", "patch": "@@ -1,75 +1,65 @@\n error: unused closure that must be used\n-  --> $DIR/unused-closure.rs:10:5\n+  --> $DIR/unused-closure.rs:9:5\n    |\n LL | /     || {\n LL | |         println!(\"Hello!\");\n LL | |     };\n    | |______^\n    |\n note: the lint level is defined here\n-  --> $DIR/unused-closure.rs:7:9\n+  --> $DIR/unused-closure.rs:6:9\n    |\n LL | #![deny(unused_must_use)]\n    |         ^^^^^^^^^^^^^^^\n    = note: closures are lazy and do nothing unless called\n \n error: unused implementer of `Future` that must be used\n-  --> $DIR/unused-closure.rs:14:5\n+  --> $DIR/unused-closure.rs:13:5\n    |\n LL |     async {};\n    |     ^^^^^^^^^\n    |\n    = note: futures do nothing unless you `.await` or poll them\n \n error: unused closure that must be used\n-  --> $DIR/unused-closure.rs:15:5\n+  --> $DIR/unused-closure.rs:14:5\n    |\n LL |     || async {};\n    |     ^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n-  --> $DIR/unused-closure.rs:16:5\n+  --> $DIR/unused-closure.rs:15:5\n    |\n LL |     async || {};\n    |     ^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused array of boxed arrays of closures that must be used\n-  --> $DIR/unused-closure.rs:19:5\n+  --> $DIR/unused-closure.rs:18:5\n    |\n LL |     [Box::new([|| {}; 10]); 1];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n-error: unused array of generators that must be used\n-  --> $DIR/unused-closure.rs:21:5\n-   |\n-LL | /     [|| {\n-LL | |         yield 42u32;\n-LL | |     }; 42];\n-   | |___________^\n-   |\n-   = note: generators are lazy and do nothing unless resumed\n-\n error: unused closure that must be used\n-  --> $DIR/unused-closure.rs:25:5\n+  --> $DIR/unused-closure.rs:20:5\n    |\n LL |     vec![|| \"a\"].pop().unwrap();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n error: unused closure that must be used\n-  --> $DIR/unused-closure.rs:28:9\n+  --> $DIR/unused-closure.rs:23:9\n    |\n LL |         || true;\n    |         ^^^^^^^^\n    |\n    = note: closures are lazy and do nothing unless called\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n "}]}