{"sha": "7417110cefda899a685a77557ac2bd7d7ee07e54", "node_id": "C_kwDOAAsO6NoAKDc0MTcxMTBjZWZkYTg5OWE2ODVhNzc1NTdhYzJiZDdkN2VlMDdlNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T10:46:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-25T10:46:58Z"}, "message": "Auto merge of #96246 - SparrowLii:bound_contxet, r=compiler-errors\n\nAdd `BoundKind` in `visit_param_bounds` to check questions in bounds\n\nFrom the FIXME in the impl of `AstValidator`. Better bound checks by adding `BoundCtxt` type parameter to `visit_param_bound`\n\ncc `@ecstatic-morse`", "tree": {"sha": "c4983988e5a918f284bfaa32fe81ede949fa8d32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4983988e5a918f284bfaa32fe81ede949fa8d32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7417110cefda899a685a77557ac2bd7d7ee07e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7417110cefda899a685a77557ac2bd7d7ee07e54", "html_url": "https://github.com/rust-lang/rust/commit/7417110cefda899a685a77557ac2bd7d7ee07e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7417110cefda899a685a77557ac2bd7d7ee07e54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756ffb8d0b4f6748c471bbb2075a6ac2bbea29b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/756ffb8d0b4f6748c471bbb2075a6ac2bbea29b5", "html_url": "https://github.com/rust-lang/rust/commit/756ffb8d0b4f6748c471bbb2075a6ac2bbea29b5"}, {"sha": "38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e", "html_url": "https://github.com/rust-lang/rust/commit/38bd4fbdbdb77d94f9c7658aff270c66d0439a6e"}], "stats": {"total": 134, "additions": 78, "deletions": 56}, "files": [{"sha": "e08ba73e0ae31a866a3ac2c445db63c44bb600b6", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=7417110cefda899a685a77557ac2bd7d7ee07e54", "patch": "@@ -32,6 +32,25 @@ pub enum FnCtxt {\n     Assoc(AssocCtxt),\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum BoundKind {\n+    /// Trait bounds in generics bounds and type/trait alias.\n+    /// E.g., `<T: Bound>`, `type A: Bound`, or `where T: Bound`.\n+    Bound,\n+\n+    /// Trait bounds in `impl` type.\n+    /// E.g., `type Foo = impl Bound1 + Bound2 + Bound3`.\n+    Impl,\n+\n+    /// Trait bounds in trait object type.\n+    /// E.g., `dyn Bound1 + Bound2 + Bound3`.\n+    TraitObject,\n+\n+    /// Super traits of a trait.\n+    /// E.g., `trait A: B`\n+    SuperTraits,\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub enum FnKind<'a> {\n     /// E.g., `fn foo()`, `fn foo(&self)`, or `extern \"Abi\" fn foo()`.\n@@ -139,7 +158,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_trait_ref(&mut self, t: &'ast TraitRef) {\n         walk_trait_ref(self, t)\n     }\n-    fn visit_param_bound(&mut self, bounds: &'ast GenericBound) {\n+    fn visit_param_bound(&mut self, bounds: &'ast GenericBound, _ctxt: BoundKind) {\n         walk_param_bound(self, bounds)\n     }\n     fn visit_poly_trait_ref(&mut self, t: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {\n@@ -311,7 +330,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::GlobalAsm(ref asm) => walk_inline_asm(visitor, asm),\n         ItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);\n         }\n         ItemKind::Enum(ref enum_definition, ref generics) => {\n@@ -346,12 +365,12 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             ref items,\n         }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::SuperTraits);\n             walk_list!(visitor, visit_assoc_item, items, AssocCtxt::Trait);\n         }\n         ItemKind::TraitAlias(ref generics, ref bounds) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n         }\n         ItemKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n@@ -416,8 +435,11 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n             visitor.visit_ty(ty);\n             visitor.visit_anon_const(length)\n         }\n-        TyKind::TraitObject(ref bounds, ..) | TyKind::ImplTrait(_, ref bounds) => {\n-            walk_list!(visitor, visit_param_bound, bounds);\n+        TyKind::TraitObject(ref bounds, ..) => {\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::TraitObject);\n+        }\n+        TyKind::ImplTrait(_, ref bounds) => {\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Impl);\n         }\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n@@ -503,7 +525,7 @@ pub fn walk_assoc_constraint<'a, V: Visitor<'a>>(visitor: &mut V, constraint: &'\n             Term::Const(c) => visitor.visit_anon_const(c),\n         },\n         AssocConstraintKind::Bound { ref bounds } => {\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n         }\n     }\n }\n@@ -566,7 +588,7 @@ pub fn walk_foreign_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a ForeignI\n         }\n         ForeignItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);\n         }\n         ForeignItemKind::MacCall(mac) => {\n@@ -585,7 +607,7 @@ pub fn walk_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a GenericB\n pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n     visitor.visit_ident(param.ident);\n     walk_list!(visitor, visit_attribute, param.attrs.iter());\n-    walk_list!(visitor, visit_param_bound, &param.bounds);\n+    walk_list!(visitor, visit_param_bound, &param.bounds, BoundKind::Bound);\n     match param.kind {\n         GenericParamKind::Lifetime => (),\n         GenericParamKind::Type { ref default } => walk_list!(visitor, visit_ty, default),\n@@ -612,14 +634,14 @@ pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a\n             ..\n         }) => {\n             visitor.visit_ty(bounded_ty);\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_generic_param, bound_generic_params);\n         }\n         WherePredicate::RegionPredicate(WhereRegionPredicate {\n             ref lifetime, ref bounds, ..\n         }) => {\n             visitor.visit_lifetime(lifetime);\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n         }\n         WherePredicate::EqPredicate(WhereEqPredicate { ref lhs_ty, ref rhs_ty, .. }) => {\n             visitor.visit_ty(lhs_ty);\n@@ -672,7 +694,7 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n         }\n         AssocItemKind::TyAlias(box TyAlias { generics, bounds, ty, .. }) => {\n             visitor.visit_generics(generics);\n-            walk_list!(visitor, visit_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n             walk_list!(visitor, visit_ty, ty);\n         }\n         AssocItemKind::MacCall(mac) => {"}, {"sha": "058a0f975a7b39be565f61803af4c906740057fd", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=7417110cefda899a685a77557ac2bd7d7ee07e54", "patch": "@@ -8,7 +8,7 @@\n \n use itertools::{Either, Itertools};\n use rustc_ast::ptr::P;\n-use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n+use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n@@ -345,23 +345,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    // FIXME(ecstaticmorse): Instead, use `bound_context` to check this in `visit_param_bound`.\n-    fn no_questions_in_bounds(&self, bounds: &GenericBounds, where_: &str, is_trait: bool) {\n-        for bound in bounds {\n-            if let GenericBound::Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n-                let mut err = self.err_handler().struct_span_err(\n-                    poly.span,\n-                    &format!(\"`?Trait` is not permitted in {}\", where_),\n-                );\n-                if is_trait {\n-                    let path_str = pprust::path_to_string(&poly.trait_ref.path);\n-                    err.note(&format!(\"traits are `?{}` by default\", path_str));\n-                }\n-                err.emit();\n-            }\n-        }\n-    }\n-\n     fn check_late_bound_lifetime_defs(&self, params: &[GenericParam]) {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n@@ -873,7 +856,6 @@ impl<'a> AstValidator<'a> {\n                         any_lifetime_bounds = true;\n                     }\n                 }\n-                self.no_questions_in_bounds(bounds, \"trait object types\", false);\n             }\n             TyKind::ImplTrait(_, ref bounds) => {\n                 if self.is_impl_trait_banned {\n@@ -1242,14 +1224,15 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.deny_where_clause(&generics.where_clause, item.ident.span);\n                     self.deny_items(items, item.ident.span);\n                 }\n-                self.no_questions_in_bounds(bounds, \"supertraits\", true);\n \n                 // Equivalent of `visit::walk_item` for `ItemKind::Trait` that inserts a bound\n                 // context for the supertraits.\n                 self.visit_vis(&item.vis);\n                 self.visit_ident(item.ident);\n                 self.visit_generics(generics);\n-                self.with_banned_tilde_const(|this| walk_list!(this, visit_param_bound, bounds));\n+                self.with_banned_tilde_const(|this| {\n+                    walk_list!(this, visit_param_bound, bounds, BoundKind::SuperTraits)\n+                });\n                 walk_list!(self, visit_assoc_item, items, AssocCtxt::Trait);\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 return;\n@@ -1476,23 +1459,39 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_generic_param(self, param);\n     }\n \n-    fn visit_param_bound(&mut self, bound: &'a GenericBound) {\n-        match bound {\n-            GenericBound::Trait(_, TraitBoundModifier::MaybeConst) => {\n-                if !self.is_tilde_const_allowed {\n+    fn visit_param_bound(&mut self, bound: &'a GenericBound, ctxt: BoundKind) {\n+        if let GenericBound::Trait(ref poly, modify) = *bound {\n+            match (ctxt, modify) {\n+                (BoundKind::SuperTraits, TraitBoundModifier::Maybe) => {\n+                    let mut err = self.err_handler().struct_span_err(\n+                        poly.span,\n+                        &format!(\"`?Trait` is not permitted in supertraits\"),\n+                    );\n+                    let path_str = pprust::path_to_string(&poly.trait_ref.path);\n+                    err.note(&format!(\"traits are `?{}` by default\", path_str));\n+                    err.emit();\n+                }\n+                (BoundKind::TraitObject, TraitBoundModifier::Maybe) => {\n+                    let mut err = self.err_handler().struct_span_err(\n+                        poly.span,\n+                        &format!(\"`?Trait` is not permitted in trait object types\"),\n+                    );\n+                    err.emit();\n+                }\n+                (_, TraitBoundModifier::MaybeConst) => {\n+                    if !self.is_tilde_const_allowed {\n+                        self.err_handler()\n+                            .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n+                            .note(\"only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\")\n+                            .emit();\n+                    }\n+                }\n+                (_, TraitBoundModifier::MaybeConstMaybe) => {\n                     self.err_handler()\n-                        .struct_span_err(bound.span(), \"`~const` is not allowed here\")\n-                        .note(\"only allowed on bounds on traits' associated types and functions, const fns, const impls and its associated functions\")\n-                        .emit();\n+                        .span_err(bound.span(), \"`~const` and `?` are mutually exclusive\");\n                 }\n+                _ => {}\n             }\n-\n-            GenericBound::Trait(_, TraitBoundModifier::MaybeConstMaybe) => {\n-                self.err_handler()\n-                    .span_err(bound.span(), \"`~const` and `?` are mutually exclusive\");\n-            }\n-\n-            _ => {}\n         }\n \n         visit::walk_param_bound(self, bound)\n@@ -1662,7 +1661,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 walk_list!(self, visit_attribute, &item.attrs);\n                 self.with_tilde_const_allowed(|this| {\n                     this.visit_generics(generics);\n-                    walk_list!(this, visit_param_bound, bounds);\n+                    walk_list!(this, visit_param_bound, bounds, BoundKind::Bound);\n                 });\n                 walk_list!(self, visit_ty, ty);\n             }"}, {"sha": "48b79809c1b97b0711aa34043902dfff7f239fa6", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=7417110cefda899a685a77557ac2bd7d7ee07e54", "patch": "@@ -76,7 +76,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_trait_ref(self, t)\n     }\n-    fn visit_param_bound(&mut self, bounds: &GenericBound) {\n+    fn visit_param_bound(&mut self, bounds: &GenericBound, _ctxt: BoundKind) {\n         self.count += 1;\n         walk_param_bound(self, bounds)\n     }"}, {"sha": "237a8abfabe7e918feb33896f8cde5d6956f6297", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=7417110cefda899a685a77557ac2bd7d7ee07e54", "patch": "@@ -3,6 +3,7 @@\n // completely accurate (some things might be counted twice, others missed).\n \n use rustc_ast::visit as ast_visit;\n+use rustc_ast::visit::BoundKind;\n use rustc_ast::{self as ast, AttrId, NodeId};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n@@ -302,7 +303,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_assoc_item(self, item, ctxt);\n     }\n \n-    fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound) {\n+    fn visit_param_bound(&mut self, bounds: &'v ast::GenericBound, _ctxt: BoundKind) {\n         self.record(\"GenericBound\", Id::None, bounds);\n         ast_visit::walk_param_bound(self, bounds)\n     }"}, {"sha": "50055f8030c6841c362cd1cb7fae94fd24d53dd8", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7417110cefda899a685a77557ac2bd7d7ee07e54/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=7417110cefda899a685a77557ac2bd7d7ee07e54", "patch": "@@ -12,7 +12,7 @@ use crate::{Module, ModuleOrUniformRoot, NameBinding, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n use rustc_ast::ptr::P;\n-use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n+use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::*;\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -835,7 +835,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         this.visit_generic_param_vec(&bound_generic_params, false);\n                         this.visit_ty(bounded_ty);\n                         for bound in bounds {\n-                            this.visit_param_bound(bound)\n+                            this.visit_param_bound(bound, BoundKind::Bound)\n                         }\n                     },\n                 );\n@@ -1026,12 +1026,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 match param.kind {\n                     GenericParamKind::Lifetime => {\n                         for bound in &param.bounds {\n-                            this.visit_param_bound(bound);\n+                            this.visit_param_bound(bound, BoundKind::Bound);\n                         }\n                     }\n                     GenericParamKind::Type { ref default } => {\n                         for bound in &param.bounds {\n-                            this.visit_param_bound(bound);\n+                            this.visit_param_bound(bound, BoundKind::Bound);\n                         }\n \n                         if let Some(ref ty) = default {\n@@ -1496,7 +1496,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             Res::SelfTy { trait_: Some(local_def_id), alias_to: None },\n                             |this| {\n                                 this.visit_generics(generics);\n-                                walk_list!(this, visit_param_bound, bounds);\n+                                walk_list!(this, visit_param_bound, bounds, BoundKind::SuperTraits);\n \n                                 let walk_assoc_item =\n                                     |this: &mut Self,\n@@ -1580,7 +1580,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             Res::SelfTy { trait_: Some(local_def_id), alias_to: None },\n                             |this| {\n                                 this.visit_generics(generics);\n-                                walk_list!(this, visit_param_bound, bounds);\n+                                walk_list!(this, visit_param_bound, bounds, BoundKind::Bound);\n                             },\n                         );\n                     },"}]}