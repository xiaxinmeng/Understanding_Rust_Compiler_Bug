{"sha": "cfdc84a009020c59e53e4039beae22eb59e41685", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZGM4NGEwMDkwMjBjNTllNTNlNDAzOWJlYWUyMmViNTllNDE2ODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-07T19:39:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-07T19:39:52Z"}, "message": "Auto merge of #60612 - Centril:rollup-61drhqt, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #60489 (Remove hamburger button from source code page)\n - #60535 (Correct handling of arguments in async fn)\n - #60579 (Rename `ParamTy::idx` to `ParamTy::index`)\n - #60583 (Fix parsing issue with negative literals as const generic arguments)\n - #60609 (Be a bit more explicit asserting over the vec rather than the len)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "e2cdaaaefd93cc4c364767b3034e7c05f8ecb977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2cdaaaefd93cc4c364767b3034e7c05f8ecb977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfdc84a009020c59e53e4039beae22eb59e41685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfdc84a009020c59e53e4039beae22eb59e41685", "html_url": "https://github.com/rust-lang/rust/commit/cfdc84a009020c59e53e4039beae22eb59e41685", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfdc84a009020c59e53e4039beae22eb59e41685/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17dba3b6e450c357a881c8cbe6cfce87b7b9d6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17dba3b6e450c357a881c8cbe6cfce87b7b9d6bd", "html_url": "https://github.com/rust-lang/rust/commit/17dba3b6e450c357a881c8cbe6cfce87b7b9d6bd"}, {"sha": "2d6da83763f934b392dd4c71b083922355ef8c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6da83763f934b392dd4c71b083922355ef8c87", "html_url": "https://github.com/rust-lang/rust/commit/2d6da83763f934b392dd4c71b083922355ef8c87"}], "stats": {"total": 437, "additions": 375, "deletions": 62}, "files": [{"sha": "9fb071d29524bee5abfc0694c77f155da4a1b405", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -665,8 +665,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// let mut v: Vec<i32> = vec![1, 2];\n ///\n /// let old_v = mem::replace(&mut v, vec![3, 4, 5]);\n-/// assert_eq!(2, old_v.len());\n-/// assert_eq!(3, v.len());\n+/// assert_eq!(vec![1, 2], old_v);\n+/// assert_eq!(vec![3, 4, 5], v);\n /// ```\n ///\n /// `replace` allows consumption of a struct field by replacing it with another value."}, {"sha": "d9ccbba69d5c09e61c11c63d7b996f6bb1a76e1d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -1453,7 +1453,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.infcx.tcx }\n \n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-                if let ty::Param(ty::ParamTy {name, ..}) = ty.sty {\n+                if let ty::Param(ty::ParamTy {name, .. }) = ty.sty {\n                     let infcx = self.infcx;\n                     self.var_map.entry(ty).or_insert_with(||\n                         infcx.next_ty_var("}, {"sha": "d68e2be9ea0860ef2439c4d6b5c9ee7873f6ebd7", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -3424,7 +3424,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 let mut found = false;\n                 for ty in field.walk() {\n                     if let ty::Param(p) = ty.sty {\n-                        ty_params.insert(p.idx as usize);\n+                        ty_params.insert(p.index as usize);\n                         found = true;\n                     }\n                 }"}, {"sha": "be29ea5701b2f70371fd80936639fc9e78ae5bbe", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -204,7 +204,7 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                            },\n \n                            Component::Param(p) => {\n-                               let ty = tcx.mk_ty_param(p.idx, p.name);\n+                               let ty = tcx.mk_ty_param(p.index, p.name);\n                                Some(ty::Predicate::TypeOutlives(\n                                    ty::Binder::dummy(ty::OutlivesPredicate(ty, r_min))))\n                            },"}, {"sha": "15524ca6e930ce322cd74cd3ad9050688e7bea76", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -2715,10 +2715,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_ty_param(self,\n-                       index: u32,\n-                       name: InternedString) -> Ty<'tcx> {\n-        self.mk_ty(Param(ParamTy { idx: index, name: name }))\n+    pub fn mk_ty_param(self, index: u32, name: InternedString) -> Ty<'tcx> {\n+        self.mk_ty(Param(ParamTy { index, name: name }))\n     }\n \n     #[inline]"}, {"sha": "7b749957c3ff5e8f4ad728bcda0addc6f3a5cc85", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -979,7 +979,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &'tcx GenericParamDef {\n-        if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n+        if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n             match param.kind {\n                 GenericParamDefKind::Type { .. } => param,"}, {"sha": "2049341327495bc822005f99a131df03f1ef1542", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -390,7 +390,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         }\n \n         (&ty::Param(ref a_p), &ty::Param(ref b_p))\n-            if a_p.idx == b_p.idx =>\n+            if a_p.index == b_p.index =>\n         {\n             Ok(a)\n         }"}, {"sha": "cf04d6eac3ae0b608db0fd0168be15138edd7a83", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -240,7 +240,7 @@ impl fmt::Debug for Ty<'tcx> {\n \n impl fmt::Debug for ty::ParamTy {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}/#{}\", self.name, self.idx)\n+        write!(f, \"{}/#{}\", self.name, self.index)\n     }\n }\n "}, {"sha": "760f3d60d0571c3a6c8a375fc203a65269d0c901", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -1111,13 +1111,13 @@ pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord,\n          Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct ParamTy {\n-    pub idx: u32,\n+    pub index: u32,\n     pub name: InternedString,\n }\n \n impl<'a, 'gcx, 'tcx> ParamTy {\n     pub fn new(index: u32, name: InternedString) -> ParamTy {\n-        ParamTy { idx: index, name: name }\n+        ParamTy { index, name: name }\n     }\n \n     pub fn for_self() -> ParamTy {\n@@ -1129,14 +1129,14 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n     }\n \n     pub fn to_ty(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n-        tcx.mk_ty_param(self.idx, self.name)\n+        tcx.mk_ty_param(self.index, self.name)\n     }\n \n     pub fn is_self(&self) -> bool {\n-        // FIXME(#50125): Ignoring `Self` with `idx != 0` might lead to weird behavior elsewhere,\n+        // FIXME(#50125): Ignoring `Self` with `index != 0` might lead to weird behavior elsewhere,\n         // but this should only be possible when using `-Z continue-parse-after-error` like\n         // `compile-fail/issue-36638.rs`.\n-        self.name == keywords::SelfUpper.name().as_str() && self.idx == 0\n+        self.name == keywords::SelfUpper.name().as_str() && self.index == 0\n     }\n }\n \n@@ -1763,7 +1763,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_param(&self, index: u32) -> bool {\n         match self.sty {\n-            ty::Param(ref data) => data.idx == index,\n+            ty::Param(ref data) => data.index == index,\n             _ => false,\n         }\n     }"}, {"sha": "72dfe581ba73586082b7848f030c4c190158448a", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for SubstFolder<'a, 'gcx, 'tcx> {\n impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n     fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {\n         // Look up the type in the substitutions. It really should be in there.\n-        let opt_ty = self.substs.get(p.idx as usize).map(|k| k.unpack());\n+        let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());\n         let ty = match opt_ty {\n             Some(UnpackedKind::Type(ty)) => ty,\n             Some(kind) => {\n@@ -558,7 +558,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n                      when substituting (root type={:?}) substs={:?}\",\n                     p,\n                     source_ty,\n-                    p.idx,\n+                    p.index,\n                     kind,\n                     self.root_ty,\n                     self.substs,\n@@ -572,7 +572,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n                      when substituting (root type={:?}) substs={:?}\",\n                     p,\n                     source_ty,\n-                    p.idx,\n+                    p.index,\n                     self.root_ty,\n                     self.substs,\n                 );"}, {"sha": "251400e65f3839f74eecf1e1234e2fa5421df04f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -757,8 +757,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         });\n     }\n \n-    fn assemble_inherent_candidates_from_param(&mut self,\n-                                               param_ty: ty::ParamTy) {\n+    fn assemble_inherent_candidates_from_param(&mut self, param_ty: ty::ParamTy) {\n         // FIXME -- Do we want to commit to this behavior for param bounds?\n \n         let bounds = self.param_env"}, {"sha": "64c8ff8ff8630319c8fff4e1baf9ba582fb6ef87", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -5793,9 +5793,9 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut types_used = vec![false; own_counts.types];\n \n     for leaf_ty in ty.walk() {\n-        if let ty::Param(ty::ParamTy { idx, .. }) = leaf_ty.sty {\n-            debug!(\"Found use of ty param num {}\", idx);\n-            types_used[idx as usize - own_counts.lifetimes] = true;\n+        if let ty::Param(ty::ParamTy { index, .. }) = leaf_ty.sty {\n+            debug!(\"Found use of ty param num {}\", index);\n+            types_used[index as usize - own_counts.lifetimes] = true;\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit\n             // an error for not using a type Parameter."}, {"sha": "fd7d6fe694ccd747ca08de924ecab3e8a37b928a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -494,7 +494,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n                 if let ty::Param(param) = t.sty {\n-                    self.params.insert(param.idx);\n+                    self.params.insert(param.index);\n                 }\n                 t.super_visit_with(self)\n             }"}, {"sha": "49910e39fed200727d43a13f07010b9e0eb85801", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -8,7 +8,7 @@ use syntax::source_map::Span;\n pub struct Parameter(pub u32);\n \n impl From<ty::ParamTy> for Parameter {\n-    fn from(param: ty::ParamTy) -> Self { Parameter(param.idx) }\n+    fn from(param: ty::ParamTy) -> Self { Parameter(param.index) }\n }\n \n impl From<ty::EarlyBoundRegion> for Parameter {"}, {"sha": "4f82978f01a5d5f9cbdf4ce388ae3f21c271ea5d", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::Param(ref data) => {\n-                self.add_constraint(current, data.idx, variance);\n+                self.add_constraint(current, data.index, variance);\n             }\n \n             ty::FnPtr(sig) => {"}, {"sha": "880b824335517a63f76f98104c66836d1b62a110", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -1052,6 +1052,10 @@ h3 > .collapse-toggle, h4 > .collapse-toggle {\n \t\theight: 45px;\n \t}\n \n+\t.rustdoc.source > .sidebar > .sidebar-menu {\n+\t\tdisplay: none;\n+\t}\n+\n \t.sidebar-elems {\n \t\tposition: fixed;\n \t\tz-index: 1;"}, {"sha": "921b857bf98e7dc81eeac3be97dcd6de4efcffe5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -1576,7 +1576,7 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n \n-            let d = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n+            let mut decl = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n                 // This is somewhat dubious; We don't want to allow\n                 // argument names to be left off if there is a\n                 // definition...\n@@ -1585,7 +1585,7 @@ impl<'a> Parser<'a> {\n                 p.parse_arg_general(p.span.rust_2018(), true, false)\n             })?;\n             generics.where_clause = self.parse_where_clause()?;\n-            self.construct_async_arguments(&mut asyncness, &d);\n+            self.construct_async_arguments(&mut asyncness, &mut decl);\n \n             let sig = ast::MethodSig {\n                 header: FnHeader {\n@@ -1594,7 +1594,7 @@ impl<'a> Parser<'a> {\n                     abi,\n                     asyncness,\n                 },\n-                decl: d,\n+                decl,\n             };\n \n             let body = match self.token {\n@@ -2319,7 +2319,8 @@ impl<'a> Parser<'a> {\n         let ident = self.parse_path_segment_ident()?;\n \n         let is_args_start = |token: &token::Token| match *token {\n-            token::Lt | token::BinOp(token::Shl) | token::OpenDelim(token::Paren) => true,\n+            token::Lt | token::BinOp(token::Shl) | token::OpenDelim(token::Paren)\n+            | token::LArrow => true,\n             _ => false,\n         };\n         let check_args_start = |this: &mut Self| {\n@@ -6056,8 +6057,6 @@ impl<'a> Parser<'a> {\n                         self.fatal(\"identifiers may currently not be used for const generics\")\n                     );\n                 } else {\n-                    // FIXME(const_generics): this currently conflicts with emplacement syntax\n-                    // with negative integer literals.\n                     self.parse_literal_maybe_minus()?\n                 };\n                 let value = AnonConst {\n@@ -6475,10 +6474,10 @@ impl<'a> Parser<'a> {\n                      -> PResult<'a, ItemInfo> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n         let allow_c_variadic = abi == Abi::C && unsafety == Unsafety::Unsafe;\n-        let decl = self.parse_fn_decl(allow_c_variadic)?;\n+        let mut decl = self.parse_fn_decl(allow_c_variadic)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        self.construct_async_arguments(&mut asyncness, &decl);\n+        self.construct_async_arguments(&mut asyncness, &mut decl);\n         let header = FnHeader { unsafety, asyncness, constness, abi };\n         Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n     }\n@@ -6662,9 +6661,9 @@ impl<'a> Parser<'a> {\n             let (constness, unsafety, mut asyncness, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n-            let decl = self.parse_fn_decl_with_self(|p| p.parse_arg())?;\n+            let mut decl = self.parse_fn_decl_with_self(|p| p.parse_arg())?;\n             generics.where_clause = self.parse_where_clause()?;\n-            self.construct_async_arguments(&mut asyncness, &decl);\n+            self.construct_async_arguments(&mut asyncness, &mut decl);\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n             let header = ast::FnHeader { abi, unsafety, constness, asyncness };\n@@ -8710,9 +8709,9 @@ impl<'a> Parser<'a> {\n     ///\n     /// The arguments of the function are replaced in HIR lowering with the arguments created by\n     /// this function and the statements created here are inserted at the top of the closure body.\n-    fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &FnDecl) {\n+    fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &mut FnDecl) {\n         if let IsAsync::Async { ref mut arguments, .. } = asyncness.node {\n-            for (index, input) in decl.inputs.iter().enumerate() {\n+            for (index, input) in decl.inputs.iter_mut().enumerate() {\n                 let id = ast::DUMMY_NODE_ID;\n                 let span = input.pat.span;\n \n@@ -8724,8 +8723,10 @@ impl<'a> Parser<'a> {\n                 // `let <pat> = __argN;` statement, instead just adding a `let <pat> = <pat>;`\n                 // statement.\n                 let (binding_mode, ident, is_simple_pattern) = match input.pat.node {\n-                    PatKind::Ident(binding_mode, ident, _) => (binding_mode, ident, true),\n-                    _ => (BindingMode::ByValue(Mutability::Immutable), ident, false),\n+                    PatKind::Ident(binding_mode @ BindingMode::ByValue(_), ident, _) => {\n+                        (binding_mode, ident, true)\n+                    }\n+                    _ => (BindingMode::ByValue(Mutability::Mutable), ident, false),\n                 };\n \n                 // Construct an argument representing `__argN: <ty>` to replace the argument of the\n@@ -8792,6 +8793,15 @@ impl<'a> Parser<'a> {\n                     })\n                 };\n \n+                // Remove mutability from arguments. If this is not a simple pattern,\n+                // those arguments are replaced by `__argN`, so there is no need to do this.\n+                if let PatKind::Ident(BindingMode::ByValue(mutability @ Mutability::Mutable), ..) =\n+                    &mut input.pat.node\n+                {\n+                    assert!(is_simple_pattern);\n+                    *mutability = Mutability::Immutable;\n+                }\n+\n                 let move_stmt = Stmt { id, node: StmtKind::Local(P(move_local)), span };\n                 arguments.push(AsyncArgument { ident, arg, pat_stmt, move_stmt });\n             }"}, {"sha": "3750c2bcb701a0172906cd7a7ca4a4832478fe47", "filename": "src/test/ui/async-await/argument-patterns.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -0,0 +1,30 @@\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![deny(unused_mut)]\n+#![feature(async_await)]\n+\n+type A = Vec<u32>;\n+\n+async fn a(n: u32, mut vec: A) {\n+    vec.push(n);\n+}\n+\n+async fn b(n: u32, ref mut vec: A) {\n+    vec.push(n);\n+}\n+\n+async fn c(ref vec: A) {\n+    vec.contains(&0);\n+}\n+\n+async fn d((a, mut b): (A, A)) {\n+    b.push(1);\n+}\n+\n+async fn f((ref mut a, ref b): (A, A)) {}\n+\n+async fn g(((ref a, ref mut b), (ref mut c, ref d)): ((A, A), (A, A))) {}\n+\n+fn main() {}"}, {"sha": "c2b59eecb999304092f9ca8ccbea128017293d6d", "filename": "src/test/ui/async-await/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -0,0 +1,271 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![feature(async_await, await_macro)]\n+\n+// Test that the drop order for parameters in a fn and async fn matches up. Also test that\n+// parameters (used or unused) are not dropped until the async fn completes execution.\n+// See also #54716.\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::marker::PhantomData;\n+use std::sync::Arc;\n+use std::rc::Rc;\n+use std::task::Context;\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+/// Check that unused bindings are dropped after the function is polled.\n+async fn foo_async(ref mut x: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn foo_sync(ref mut x: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns are dropped after the function is polled.\n+async fn bar_async(ref mut x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn bar_sync(ref mut x: D, _: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore patterns within more complex patterns are dropped after the function\n+/// is polled.\n+async fn baz_async((ref mut x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn baz_sync((ref mut x, _): (D, D)) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+/// Check that underscore and unused bindings within and outwith more complex patterns are dropped\n+/// after the function is polled.\n+async fn foobar_async(ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+fn foobar_sync(ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D) {\n+    x.1.borrow_mut().push(DropOrder::Function);\n+}\n+\n+struct Foo;\n+\n+impl Foo {\n+    /// Check that unused bindings are dropped after the method is polled.\n+    async fn foo_async(ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foo_sync(ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method is polled.\n+    async fn bar_async(ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn bar_sync(ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// is polled.\n+    async fn baz_async((ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn baz_sync((ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method is polled.\n+    async fn foobar_async(\n+        ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foobar_sync(\n+        ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+struct Bar<'a>(PhantomData<&'a ()>);\n+\n+impl<'a> Bar<'a> {\n+    /// Check that unused bindings are dropped after the method with self is polled.\n+    async fn foo_async(&'a self, ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foo_sync(&'a self, ref mut x: D, ref mut _y: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns are dropped after the method with self is polled.\n+    async fn bar_async(&'a self, ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn bar_sync(&'a self, ref mut x: D, _: D) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore patterns within more complex patterns are dropped after the method\n+    /// with self is polled.\n+    async fn baz_async(&'a self, (ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn baz_sync(&'a self, (ref mut x, _): (D, D)) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    /// Check that underscore and unused bindings within and outwith more complex patterns are\n+    /// dropped after the method with self is polled.\n+    async fn foobar_async(\n+        &'a self, ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+\n+    fn foobar_sync(\n+        &'a self, ref mut x: D, (ref mut a, _, ref mut _c): (D, D, D), _: D, ref mut _y: D,\n+    ) {\n+        x.1.borrow_mut().push(DropOrder::Function);\n+    }\n+}\n+\n+fn assert_drop_order_after_poll<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let _ = fut.as_mut().poll(&mut cx);\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    // Free functions (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods w/out self (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| Foo::foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| Foo::foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| Foo::bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| Foo::bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| Foo::baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| Foo::baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            Foo::foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            Foo::foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+\n+    // Methods (see doc comment on function for what it tests).\n+    let b = Bar(Default::default());\n+    assert_drop_order_after_poll(|l| b.foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| b.foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+    assert_drop_order_after_poll(|l| b.bar_async(D(\"x\", l.clone()), D(\"_\", l.clone())),\n+                                 |l| b.bar_sync(D(\"x\", l.clone()), D(\"_\", l.clone())));\n+    assert_drop_order_after_poll(|l| b.baz_async((D(\"x\", l.clone()), D(\"_\", l.clone()))),\n+                                 |l| b.baz_sync((D(\"x\", l.clone()), D(\"_\", l.clone()))));\n+    assert_drop_order_after_poll(\n+        |l| {\n+            b.foobar_async(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+        |l| {\n+            b.foobar_sync(\n+                D(\"x\", l.clone()),\n+                (D(\"a\", l.clone()), D(\"_\", l.clone()), D(\"_c\", l.clone())),\n+                D(\"_\", l.clone()),\n+                D(\"_y\", l.clone()),\n+            )\n+        },\n+    );\n+}"}, {"sha": "bcdb8878eb5d225333dfc6f15c6da9d61f4be331", "filename": "src/test/ui/async-await/drop-order-locals-are-hidden.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -8,4 +8,9 @@ async fn foobar_async(x: u32, (a, _, _c): (u32, u32, u32), _: u32, _y: u32) {\n     assert_eq!(__arg2, 4); //~ ERROR cannot find value `__arg2` in this scope [E0425]\n }\n \n+async fn baz_async(ref mut x: u32, ref y: u32) {\n+    assert_eq!(__arg0, 1); //~ ERROR cannot find value `__arg0` in this scope [E0425]\n+    assert_eq!(__arg1, 2); //~ ERROR cannot find value `__arg1` in this scope [E0425]\n+}\n+\n fn main() {}"}, {"sha": "484e1f4f4269ede5589f301a640046ca957eed2d", "filename": "src/test/ui/async-await/drop-order-locals-are-hidden.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order-locals-are-hidden.stderr?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -10,6 +10,18 @@ error[E0425]: cannot find value `__arg2` in this scope\n LL |     assert_eq!(__arg2, 4);\n    |                ^^^^^^ not found in this scope\n \n-error: aborting due to 2 previous errors\n+error[E0425]: cannot find value `__arg0` in this scope\n+  --> $DIR/drop-order-locals-are-hidden.rs:12:16\n+   |\n+LL |     assert_eq!(__arg0, 1);\n+   |                ^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `__arg1` in this scope\n+  --> $DIR/drop-order-locals-are-hidden.rs:13:16\n+   |\n+LL |     assert_eq!(__arg1, 2);\n+   |                ^^^^^^ not found in this scope\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "4d6dba74097ca77f240a4d6ff436b5466882924e", "filename": "src/test/ui/async-await/mutable-arguments.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17dba3b6e450c357a881c8cbe6cfce87b7b9d6bd/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17dba3b6e450c357a881c8cbe6cfce87b7b9d6bd/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs?ref=17dba3b6e450c357a881c8cbe6cfce87b7b9d6bd", "patch": "@@ -1,10 +0,0 @@\n-// edition:2018\n-// run-pass\n-\n-#![feature(async_await)]\n-\n-async fn foo(n: u32, mut vec: Vec<u32>) {\n-    vec.push(n);\n-}\n-\n-fn main() {}"}, {"sha": "22c6c351622817fd29a28338b59add36ffe24858", "filename": "src/test/ui/const-generics/const-expression-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.rs?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -6,7 +6,7 @@ fn i32_identity<const X: i32>() -> i32 {\n }\n \n fn foo_a() {\n-    i32_identity::<-1>(); //~ ERROR expected identifier, found `<-`\n+    i32_identity::<-1>(); // ok\n }\n \n fn foo_b() {"}, {"sha": "c255127c28079a436c170b36b02dd120ebbbeca1", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfdc84a009020c59e53e4039beae22eb59e41685/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=cfdc84a009020c59e53e4039beae22eb59e41685", "patch": "@@ -1,9 +1,3 @@\n-error: expected identifier, found `<-`\n-  --> $DIR/const-expression-parameter.rs:9:19\n-   |\n-LL |     i32_identity::<-1>();\n-   |                   ^^ expected identifier\n-\n error: expected one of `,` or `>`, found `+`\n   --> $DIR/const-expression-parameter.rs:13:22\n    |\n@@ -16,5 +10,5 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}