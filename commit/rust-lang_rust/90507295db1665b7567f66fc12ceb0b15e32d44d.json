{"sha": "90507295db1665b7567f66fc12ceb0b15e32d44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwNTA3Mjk1ZGIxNjY1Yjc1NjdmNjZmYzEyY2ViMGIxNWUzMmQ0NGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-18T04:26:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-18T06:33:20Z"}, "message": "Do not give incorrect label for return type mismatch", "tree": {"sha": "6a33af85d674f9cd66d72044a2851ba349a78227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a33af85d674f9cd66d72044a2851ba349a78227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90507295db1665b7567f66fc12ceb0b15e32d44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90507295db1665b7567f66fc12ceb0b15e32d44d", "html_url": "https://github.com/rust-lang/rust/commit/90507295db1665b7567f66fc12ceb0b15e32d44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90507295db1665b7567f66fc12ceb0b15e32d44d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "html_url": "https://github.com/rust-lang/rust/commit/daa53a52a2667533d5fe59bfcc5b8614b79c3d31"}], "stats": {"total": 145, "additions": 142, "deletions": 3}, "files": [{"sha": "d1c54f824fe9db4a35087eddd836b5afdf91a352", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=90507295db1665b7567f66fc12ceb0b15e32d44d", "patch": "@@ -1224,9 +1224,31 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n                             cause.span,\n                             blk_id,\n                         );\n-                        if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n-                            if !sp.overlaps(cause.span) {\n-                                db.span_label(*sp, reason_label);\n+                        // TODO: replace with navigating up the chain until hitting an fn or\n+                        // bailing if no \"pass-through\" Node is found, in order to provide a\n+                        // suggestion when encountering something like:\n+                        // ```\n+                        // fn foo(a: bool) -> impl Debug {\n+                        //     if a {\n+                        //         bar()?;\n+                        //     }\n+                        //     {\n+                        //         let x = unsafe { bar() };\n+                        //         x\n+                        //     }\n+                        // }\n+                        // ```\n+                        //\n+                        // Verify that this is a tail expression of a function, otherwise the\n+                        // label pointing out the cause for the type coercion will be wrong\n+                        // as prior return coercions would not be relevant (#57664).\n+                        let parent_id = fcx.tcx.hir().get_parent_node(blk_id);\n+                        let parent = fcx.tcx.hir().get(fcx.tcx.hir().get_parent_node(parent_id));\n+                        if fcx.get_node_fn_decl(parent).is_some() {\n+                            if let Some(sp) = fcx.ret_coercion_span.borrow().as_ref() {\n+                                if !sp.overlaps(cause.span) {\n+                                    db.span_label(*sp, reason_label);\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "50f1fe873cb5fa1cd96f0eb31a185c3c161d4299", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return-2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.rs?ref=90507295db1665b7567f66fc12ceb0b15e32d44d", "patch": "@@ -0,0 +1,17 @@\n+fn unrelated() -> Result<(), std::string::ParseError> {  // #57664\n+    let x = 0;\n+\n+    match x {\n+        1 => {\n+            let property_value_as_string = \"a\".parse()?;\n+        }\n+        2 => {\n+            let value: &bool = unsafe { &42 };\n+            //~^ ERROR mismatched types\n+        }\n+    };\n+\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "edaa60e5b8d8b84a8cd8025b62ca7321cc85b299", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return-2.stderr?ref=90507295db1665b7567f66fc12ceb0b15e32d44d", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return-2.rs:9:41\n+   |\n+LL |             let value: &bool = unsafe { &42 };\n+   |                                         ^^^ expected bool, found integer\n+   |\n+   = note: expected type `&bool`\n+              found type `&{integer}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "a27df240d07926332fb6dfb5b5fd856997755f57", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=90507295db1665b7567f66fc12ceb0b15e32d44d", "patch": "@@ -0,0 +1,36 @@\n+fn foo() -> impl std::fmt::Display {\n+    if false {\n+        return 0i32;\n+    }\n+    1u32\n+    //~^ ERROR mismatched types\n+}\n+\n+fn bar() -> impl std::fmt::Display {\n+    if false {\n+        return 0i32;\n+    } else {\n+        return 1u32;\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn baz() -> impl std::fmt::Display {\n+    if false {\n+    //~^ ERROR mismatched types\n+        return 0i32;\n+    } else {\n+        1u32\n+    }\n+}\n+\n+fn qux() -> impl std::fmt::Display {\n+    if false {\n+        //~^ ERROR if and else have incompatible types\n+        0i32\n+    } else {\n+        1u32\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "54f7b108c3dd4a67e666e18cfa0c558c15a14a39", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90507295db1665b7567f66fc12ceb0b15e32d44d/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=90507295db1665b7567f66fc12ceb0b15e32d44d", "patch": "@@ -0,0 +1,52 @@\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:5:5\n+   |\n+LL |         return 0i32;\n+   |                ---- expected because of this statement\n+LL |     }\n+LL |     1u32\n+   |     ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:13:16\n+   |\n+LL |         return 1u32;\n+   |                ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:19:5\n+   |\n+LL | /     if false {\n+LL | |     //~^ ERROR mismatched types\n+LL | |         return 0i32;\n+LL | |     } else {\n+LL | |         1u32\n+LL | |     }\n+   | |_____^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:28:5\n+   |\n+LL | /     if false {\n+LL | |         //~^ ERROR if and else have incompatible types\n+LL | |         0i32\n+LL | |     } else {\n+LL | |         1u32\n+LL | |     }\n+   | |_____^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}