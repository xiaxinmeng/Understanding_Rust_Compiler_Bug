{"sha": "83f659b4bb2212037ec62028b1979ec31d956fdd", "node_id": "C_kwDOAAsO6NoAKDgzZjY1OWI0YmIyMjEyMDM3ZWM2MjAyOGIxOTc5ZWMzMWQ5NTZmZGQ", "commit": {"author": {"name": "SparkyPotato", "email": "noob.sparkypotato@gmail.com", "date": "2022-04-05T20:06:46Z"}, "committer": {"name": "SparkyPotato", "email": "noob.sparkypotato@gmail.com", "date": "2022-04-05T20:06:46Z"}, "message": "formatting", "tree": {"sha": "29043b5268fa6f9bc4af0c0229eac459d6f9dc41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29043b5268fa6f9bc4af0c0229eac459d6f9dc41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f659b4bb2212037ec62028b1979ec31d956fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f659b4bb2212037ec62028b1979ec31d956fdd", "html_url": "https://github.com/rust-lang/rust/commit/83f659b4bb2212037ec62028b1979ec31d956fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f659b4bb2212037ec62028b1979ec31d956fdd/comments", "author": {"login": "SparkyPotato", "id": 64652557, "node_id": "MDQ6VXNlcjY0NjUyNTU3", "avatar_url": "https://avatars.githubusercontent.com/u/64652557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparkyPotato", "html_url": "https://github.com/SparkyPotato", "followers_url": "https://api.github.com/users/SparkyPotato/followers", "following_url": "https://api.github.com/users/SparkyPotato/following{/other_user}", "gists_url": "https://api.github.com/users/SparkyPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparkyPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparkyPotato/subscriptions", "organizations_url": "https://api.github.com/users/SparkyPotato/orgs", "repos_url": "https://api.github.com/users/SparkyPotato/repos", "events_url": "https://api.github.com/users/SparkyPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/SparkyPotato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparkyPotato", "id": 64652557, "node_id": "MDQ6VXNlcjY0NjUyNTU3", "avatar_url": "https://avatars.githubusercontent.com/u/64652557?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparkyPotato", "html_url": "https://github.com/SparkyPotato", "followers_url": "https://api.github.com/users/SparkyPotato/followers", "following_url": "https://api.github.com/users/SparkyPotato/following{/other_user}", "gists_url": "https://api.github.com/users/SparkyPotato/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparkyPotato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparkyPotato/subscriptions", "organizations_url": "https://api.github.com/users/SparkyPotato/orgs", "repos_url": "https://api.github.com/users/SparkyPotato/repos", "events_url": "https://api.github.com/users/SparkyPotato/events{/privacy}", "received_events_url": "https://api.github.com/users/SparkyPotato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9881bcd803390bfbc1e3b1c64ad66330b01103", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9881bcd803390bfbc1e3b1c64ad66330b01103", "html_url": "https://github.com/rust-lang/rust/commit/9e9881bcd803390bfbc1e3b1c64ad66330b01103"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "9dbac3c36ffb2871ce5e93f30dc3aef1fa94b9c3", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83f659b4bb2212037ec62028b1979ec31d956fdd/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f659b4bb2212037ec62028b1979ec31d956fdd/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=83f659b4bb2212037ec62028b1979ec31d956fdd", "patch": "@@ -168,7 +168,7 @@ impl<T, A: Allocator> RawVec<T, A> {\n \n     #[cfg(not(no_global_oom_handling))]\n     fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {\n-\t\t// Don't allocate here because `Drop` will not deallocate when `capacity` is 0.\n+        // Don't allocate here because `Drop` will not deallocate when `capacity` is 0.\n         if mem::size_of::<T>() == 0 || capacity == 0 {\n             Self::new_in(alloc)\n         } else {"}]}