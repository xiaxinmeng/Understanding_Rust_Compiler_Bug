{"sha": "9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZmM4YmYxMWUxNWI3YjlhNzgyZjE3NTdmOWEwZWJlMzI0YjE2ZTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-19T08:15:26Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-19T14:57:13Z"}, "message": "Add log_err to rustboot", "tree": {"sha": "688d5ac52ff6cdcdeb364dfe4b418370a9aee5ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688d5ac52ff6cdcdeb364dfe4b418370a9aee5ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "html_url": "https://github.com/rust-lang/rust/commit/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f90000ab6d823300c73a232715bb965935c932d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f90000ab6d823300c73a232715bb965935c932d", "html_url": "https://github.com/rust-lang/rust/commit/7f90000ab6d823300c73a232715bb965935c932d"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "f498fb0ee51e2cd9591c858737e9ec907d893bf9", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -229,6 +229,7 @@ and stmt' =\n   | STMT_join of lval\n   | STMT_send of (lval * lval)\n   | STMT_log of atom\n+  | STMT_log_err of atom\n   | STMT_note of atom\n   | STMT_prove of (constrs)\n   | STMT_check of (constrs * check_calls)\n@@ -1210,6 +1211,13 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n             fmt ff \";\"\n           end\n \n+      | STMT_log_err at ->\n+          begin\n+            fmt ff \"log_err \";\n+            fmt_atom ff at;\n+            fmt ff \";\"\n+          end\n+\n       | STMT_spawn (dst, domain, name, fn, args) ->\n           fmt_lval ff dst;\n           fmt ff \" = spawn \";"}, {"sha": "5f8a0d3092bd5300593d24160880e8ffee17981a", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -186,6 +186,11 @@ and parse_stmts_including_none (ps:pstate) : Ast.stmt array =\n           let (stmts, atom) = ctxt \"stmts: log value\" parse_expr_atom ps in\n             expect ps SEMI;\n             spans ps stmts apos (Ast.STMT_log atom)\n+      | LOG_ERR ->\n+          bump ps;\n+          let (stmts, atom) = ctxt \"stmts: log value\" parse_expr_atom ps in\n+            expect ps SEMI;\n+            spans ps stmts apos (Ast.STMT_log_err atom)\n       | BREAK ->\n           bump ps;\n           expect ps SEMI;"}, {"sha": "513818b3612780cd1f52d44ca779b6face975f90", "filename": "src/boot/fe/lexer.mll", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Flexer.mll", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Flexer.mll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Flexer.mll?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -117,6 +117,7 @@\n                 (\"const\", CONST);\n \n                 (\"log\", LOG);\n+                (\"log_err\", LOG_ERR);\n                 (\"break\", BREAK);\n                 (\"cont\", CONT);\n                 (\"spawn\", SPAWN);"}, {"sha": "7b4f04b267c8ebc71c52342e25b394324ae2f7bc", "filename": "src/boot/fe/token.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Ftoken.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Ffe%2Ftoken.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ftoken.ml?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -106,6 +106,7 @@ type token =\n \n   (* Magic runtime services *)\n   | LOG\n+  | LOG_ERR\n   | SPAWN\n   | BIND\n   | THREAD\n@@ -269,6 +270,7 @@ let rec string_of_tok t =\n \n     (* Magic runtime services *)\n     | LOG        -> \"log\"\n+    | LOG_ERR    -> \"log_err\"\n     | SPAWN      -> \"spawn\"\n     | BIND       -> \"bind\"\n     | THREAD     -> \"thread\""}, {"sha": "52a78cec9c9f2889564e8125a0196390c35ec62a", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -2663,11 +2663,11 @@ let trans_visitor\n          abi.Abi.abi_emit_native_void_call (emitter())\n            nabi_rust (upcall_fixup name) args);\n \n-  and trans_log_int (a:Ast.atom) : unit =\n-    trans_void_upcall \"upcall_log_int\" [| (trans_atom a) |]\n+  and trans_log_int lev (a:Ast.atom) : unit =\n+    trans_void_upcall \"upcall_log_int\" [| simm (Int64.of_int lev); (trans_atom a) |]\n \n-  and trans_log_str (a:Ast.atom) : unit =\n-    trans_void_upcall \"upcall_log_str\" [| (trans_atom a) |]\n+  and trans_log_str lev (a:Ast.atom) : unit =\n+    trans_void_upcall \"upcall_log_str\" [| simm (Int64.of_int lev); (trans_atom a) |]\n \n   and trans_spawn\n       ((*initializing*)_:bool)\n@@ -5236,17 +5236,17 @@ let trans_visitor\n         | _ -> bug () \"Calling unexpected lval.\"\n \n \n-  and trans_log id a =\n+  and trans_log lev id a =\n     match simplified_ty (atom_type cx a) with\n         (* NB: If you extend this, be sure to update the\n          * typechecking code in type.ml as well. *)\n-        Ast.TY_str -> trans_log_str a\n+        Ast.TY_str -> trans_log_str lev a\n       | Ast.TY_int | Ast.TY_uint | Ast.TY_bool\n       | Ast.TY_char | Ast.TY_mach (TY_u8)\n       | Ast.TY_mach (TY_u16) | Ast.TY_mach (TY_u32)\n       | Ast.TY_mach (TY_i8) | Ast.TY_mach (TY_i16)\n       | Ast.TY_mach (TY_i32) ->\n-          trans_log_int a\n+          trans_log_int lev a\n       | _ -> unimpl (Some id) \"logging type\"\n \n   and trans_while (id:node_id) (sw:Ast.stmt_while) : unit =\n@@ -5284,7 +5284,10 @@ let trans_visitor\n     match stmt.node with\n \n         Ast.STMT_log a ->\n-          trans_log stmt.id a\n+          trans_log 1 stmt.id a\n+\n+      | Ast.STMT_log_err a ->\n+          trans_log 0 stmt.id a\n \n       | Ast.STMT_check_expr e ->\n           trans_check_expr stmt.id e"}, {"sha": "b9aaf3601434a847c81d9b7f2ce47074346c31e3", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -1125,7 +1125,7 @@ let check_block (cx:Semant.ctxt) : (fn_ctx -> Ast.block -> unit) =\n             let value_ty = demand_chan (check_lval chan) in\n             infer_lval ~mut:Ast.MUT_immutable value_ty value\n \n-        | Ast.STMT_log x | Ast.STMT_note x ->\n+        | Ast.STMT_log x | Ast.STMT_note x | Ast.STMT_log_err x ->\n             (* always well-typed, just record type in passing. *)\n             ignore (check_atom x)\n "}, {"sha": "58b2f673ac4789396869f0247d5fc11d7c4963f3", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -697,7 +697,7 @@ let condition_assigning_visitor\n             let precond = slot_inits (lval_slots cx lval) in\n               raise_pre_post_cond s.id precond\n \n-        | Ast.STMT_log atom ->\n+        | Ast.STMT_log atom | Ast.STMT_log_err atom ->\n             let precond = slot_inits (atom_slots cx atom) in\n               raise_pre_post_cond s.id precond\n "}, {"sha": "131005e54c6d96714b57c360e76764ae3ea1b80e", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -387,7 +387,7 @@ and walk_stmt\n   in\n   let children _ =\n     match s.node with\n-        Ast.STMT_log a ->\n+        Ast.STMT_log a | Ast.STMT_log_err a ->\n           walk_atom v a\n \n       | Ast.STMT_new_rec (lv, atab, base) ->"}, {"sha": "cdfa363a7856360057257fdf8d01c3285d61168b", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -390,7 +390,7 @@ fn walk_expr(&ast_visitor v, @ast.expr e) {\n         case (ast.expr_be(?x, _)) {\n             walk_expr(v, x);\n         }\n-        case (ast.expr_log(?x, _)) {\n+        case (ast.expr_log(_,?x, _)) {\n             walk_expr(v, x);\n         }\n         case (ast.expr_check_expr(?x, _)) {"}, {"sha": "b022b8531a5fcc687950bc63bfd4d69db9f9a43e", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=9bfc8bf11e15b7b9a782f1757f9a0ebe324b16e4", "patch": "@@ -29,28 +29,28 @@ upcall_grow_task(rust_task *task, size_t n_frame_bytes) {\n }\n \n extern \"C\" CDECL\n-void upcall_log_int(rust_task *task, int32_t i) {\n+void upcall_log_int(rust_task *task, int32_t level, int32_t i) {\n     LOG_UPCALL_ENTRY(task);\n     LOG(task, rust_log::UPCALL | rust_log::ULOG,\n         \"rust: %\" PRId32 \" (0x%\" PRIx32 \")\", i, i);\n }\n \n extern \"C\" CDECL\n-void upcall_log_float(rust_task *task, float f) {\n+void upcall_log_float(rust_task *task, int32_t level, float f) {\n     LOG_UPCALL_ENTRY(task);\n     LOG(task, rust_log::UPCALL | rust_log::ULOG,\n         \"rust: %12.12f\", f);\n }\n \n extern \"C\" CDECL\n-void upcall_log_double(rust_task *task, double *f) {\n+void upcall_log_double(rust_task *task, int32_t level, double *f) {\n     LOG_UPCALL_ENTRY(task);\n     LOG(task, rust_log::UPCALL | rust_log::ULOG,\n               \"rust: %12.12f\", *f);\n }\n \n extern \"C\" CDECL void\n-upcall_log_str(rust_task *task, rust_str *str) {\n+upcall_log_str(rust_task *task, int32_t level, rust_str *str) {\n     LOG_UPCALL_ENTRY(task);\n     const char *c = str_buf(task, str);\n     LOG(task, rust_log::UPCALL | rust_log::ULOG, \"rust: %s\", c);"}]}