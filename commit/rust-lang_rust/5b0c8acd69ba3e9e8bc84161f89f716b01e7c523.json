{"sha": "5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMGM4YWNkNjliYTNlOWU4YmM4NDE2MWY4OWY3MTZiMDFlN2M1MjM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-26T14:19:37Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-26T16:20:34Z"}, "message": "typeck: boxed closures can't capture by value\n\ncloses #19141\ncloses #20193\ncloses #20228", "tree": {"sha": "af3a70fdc100a68df260835a53dcaf178cc3b7ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af3a70fdc100a68df260835a53dcaf178cc3b7ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "html_url": "https://github.com/rust-lang/rust/commit/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/comments", "author": null, "committer": null, "parents": [{"sha": "c43efee6def9a4a4e943feef0236d3e17b3f581d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c43efee6def9a4a4e943feef0236d3e17b3f581d", "html_url": "https://github.com/rust-lang/rust/commit/c43efee6def9a4a4e943feef0236d3e17b3f581d"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "c396dc5c6cb76346e82b9e664cff2fff5ab165e7", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "patch": "@@ -19,11 +19,13 @@ use middle::ty::{mod, Ty};\n use rscope::RegionScope;\n use syntax::abi;\n use syntax::ast;\n+use syntax::ast::CaptureClause::*;\n use syntax::ast_util;\n use util::ppaux::Repr;\n \n pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                    expr: &ast::Expr,\n+                                   capture: ast::CaptureClause,\n                                    opt_kind: Option<ast::UnboxedClosureKind>,\n                                    decl: &ast::FnDecl,\n                                    body: &ast::Block,\n@@ -48,12 +50,24 @@ pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n                                                                    fcx.infcx(),\n                                                                    expr.span,\n                                                                    &None);\n+\n                     check_boxed_closure(fcx,\n                                         expr,\n                                         ty::RegionTraitStore(region, ast::MutMutable),\n                                         decl,\n                                         body,\n                                         expected);\n+\n+                    match capture {\n+                        CaptureByValue => {\n+                            fcx.ccx.tcx.sess.span_err(\n+                                expr.span,\n+                                \"boxed closures can't capture by value, \\\n+                                if you want to use an unboxed closure, \\\n+                                explicitly annotate its kind: e.g. `move |:|`\");\n+                        },\n+                        CaptureByRef => {}\n+                    }\n                 }\n                 Some((sig, kind)) => {\n                     check_unboxed_closure(fcx, expr, kind, decl, body, Some(sig));"}, {"sha": "7660806f5b04d44282e56504eafcac997803cb7a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "patch": "@@ -3958,8 +3958,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n       ast::ExprMatch(ref discrim, ref arms, match_src) => {\n         _match::check_match(fcx, expr, &**discrim, arms.as_slice(), expected, match_src);\n       }\n-      ast::ExprClosure(_, opt_kind, ref decl, ref body) => {\n-          closure::check_expr_closure(fcx, expr, opt_kind, &**decl, &**body, expected);\n+      ast::ExprClosure(capture, opt_kind, ref decl, ref body) => {\n+          closure::check_expr_closure(fcx, expr, capture, opt_kind, &**decl, &**body, expected);\n       }\n       ast::ExprBlock(ref b) => {\n         check_block_with_expected(fcx, &**b, expected);"}, {"sha": "9c9641bccfa144de2d76e538df8f038f3b2c2ef3", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "patch": "@@ -11,6 +11,6 @@\n pub fn main() {\n     let bar = box 3;\n     let _g = || {\n-        let _h = move|| -> int { *bar }; //~ ERROR cannot move out of captured outer variable\n+        let _h = move |:| -> int { *bar }; //~ ERROR cannot move out of captured outer variable\n     };\n }"}, {"sha": "545e3f8acb139caf7eecd36d2df47779ae4d0bed", "filename": "src/test/compile-fail/issue-19141.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19141.rs?ref=5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let n = 0u;\n+\n+    let f = move || n += 1;  //~error boxed closures can't capture by value\n+}"}, {"sha": "e5d8d3327199b9dfc361d0c1c9c2014fcfbe2b71", "filename": "src/test/compile-fail/issue-20193.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-20193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-20193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20193.rs?ref=5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(t: &mut int){\n+    println!(\"{}\", t);\n+}\n+\n+fn main() {\n+    let test = 10;\n+\n+    let h = move || {  //~error boxed closures can't capture by value\n+        let mut r = &mut test.clone();\n+        foo(r);\n+    };\n+\n+    h();\n+}"}, {"sha": "3ff4557ae80ed3155449e1864ec15be361fb8a24", "filename": "src/test/compile-fail/issue-20228-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20228-1.rs?ref=5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl S {\n+    fn foo(&self) {\n+        let _ = move || { self };  //~error boxed closures can't capture by value\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "5fec4268bf7c2b78cb3cfa10b27babf86f8b4dbc", "filename": "src/test/compile-fail/issue-20228-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-20228-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b0c8acd69ba3e9e8bc84161f89f716b01e7c523/src%2Ftest%2Fcompile-fail%2Fissue-20228-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20228-2.rs?ref=5b0c8acd69ba3e9e8bc84161f89f716b01e7c523", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl S {\n+    fn foo(&self) {\n+        let _ = move || { self.foo() };  //~error boxed closures can't capture by value\n+    }\n+}\n+\n+fn main() {\n+}"}]}