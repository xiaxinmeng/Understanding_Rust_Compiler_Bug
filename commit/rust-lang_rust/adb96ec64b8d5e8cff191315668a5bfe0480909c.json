{"sha": "adb96ec64b8d5e8cff191315668a5bfe0480909c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYjk2ZWM2NGI4ZDVlOGNmZjE5MTMxNTY2OGE1YmZlMDQ4MDkwOWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-28T18:54:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-28T21:38:00Z"}, "message": "Provide specific label for patern parsing error", "tree": {"sha": "6da20949ab36d3cb203c1533d1ccf89da2776ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da20949ab36d3cb203c1533d1ccf89da2776ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adb96ec64b8d5e8cff191315668a5bfe0480909c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adb96ec64b8d5e8cff191315668a5bfe0480909c", "html_url": "https://github.com/rust-lang/rust/commit/adb96ec64b8d5e8cff191315668a5bfe0480909c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adb96ec64b8d5e8cff191315668a5bfe0480909c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d491734b15692038b963fd1bfeaaf39be393b638", "url": "https://api.github.com/repos/rust-lang/rust/commits/d491734b15692038b963fd1bfeaaf39be393b638", "html_url": "https://github.com/rust-lang/rust/commit/d491734b15692038b963fd1bfeaaf39be393b638"}], "stats": {"total": 84, "additions": 40, "deletions": 44}, "files": [{"sha": "84e40a7e4033de5dc305436460d8fc29e4d23544", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -1030,7 +1030,7 @@ impl<'a> Parser<'a> {\n                 }\n             },\n             AstFragmentKind::Ty => AstFragment::Ty(self.parse_ty()?),\n-            AstFragmentKind::Pat => AstFragment::Pat(self.parse_pat()?),\n+            AstFragmentKind::Pat => AstFragment::Pat(self.parse_pat(None)?),\n         })\n     }\n "}, {"sha": "37800a334c6daf7ca4d54efe97e76ef9fb902426", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -419,7 +419,7 @@ pub fn parse_item_panic(parser: &mut Parser) -> Option<P<Item>> {\n }\n \n pub fn parse_pat_panic(parser: &mut Parser) -> P<Pat> {\n-    panictry!(parser.parse_pat())\n+    panictry!(parser.parse_pat(None))\n }\n \n pub fn parse_arm_panic(parser: &mut Parser) -> Arm {"}, {"sha": "d6c95a3d7c8eca4d0f6d75f34121b3ad648f93ad", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -881,7 +881,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n                 FatalError.raise();\n             }\n         },\n-        \"pat\" => token::NtPat(panictry!(p.parse_pat())),\n+        \"pat\" => token::NtPat(panictry!(p.parse_pat(None))),\n         \"expr\" => token::NtExpr(panictry!(p.parse_expr())),\n         \"literal\" => token::NtLiteral(panictry!(p.parse_literal_maybe_minus())),\n         \"ty\" => token::NtTy(panictry!(p.parse_ty())),"}, {"sha": "d700e6066cb0ddb26746efb9fd7397fb37768406", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -1827,10 +1827,7 @@ impl<'a> Parser<'a> {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);\n             self.eat_incorrect_doc_comment(\"method arguments\");\n-            let pat = self.parse_pat().map_err(|mut err| {\n-                err.span_label(self.span, \"expected argument name\");\n-                err\n-            })?;\n+            let pat = self.parse_pat(Some(\"argument name\"))?;\n \n             if let Err(mut err) = self.expect(&token::Colon) {\n                 // If we find a pattern followed by an identifier, it could be an (incorrect)\n@@ -1879,7 +1876,7 @@ impl<'a> Parser<'a> {\n                     // Recover from attempting to parse the argument as a type without pattern.\n                     err.cancel();\n                     mem::replace(self, parser_snapshot_before_ty);\n-                    let pat = self.parse_pat()?;\n+                    let pat = self.parse_pat(Some(\"argument name\"))?;\n                     self.expect(&token::Colon)?;\n                     let ty = self.parse_ty()?;\n \n@@ -1917,7 +1914,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse an argument in a lambda header e.g. |arg, arg|\n     fn parse_fn_block_arg(&mut self) -> PResult<'a, Arg> {\n-        let pat = self.parse_pat()?;\n+        let pat = self.parse_pat(Some(\"argument name\"))?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?\n         } else {\n@@ -3784,7 +3781,7 @@ impl<'a> Parser<'a> {\n                                   \"`..` can only be used once per tuple or tuple struct pattern\");\n                 }\n             } else if !self.check(&token::CloseDelim(token::Paren)) {\n-                fields.push(self.parse_pat()?);\n+                fields.push(self.parse_pat(None)?);\n             } else {\n                 break\n             }\n@@ -3840,7 +3837,7 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n-            let subpat = self.parse_pat()?;\n+            let subpat = self.parse_pat(None)?;\n             if before_slice && self.eat(&token::DotDot) {\n                 slice = Some(subpat);\n                 before_slice = false;\n@@ -3865,7 +3862,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat()?;\n+            let pat = self.parse_pat(None)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {\n@@ -4067,7 +4064,7 @@ impl<'a> Parser<'a> {\n     /// \"top-level\" patterns in a match arm, `for` loop, `let`, &c. (in contrast\n     /// to subpatterns within such).\n     fn parse_top_level_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        let pat = self.parse_pat()?;\n+        let pat = self.parse_pat(None)?;\n         if self.token == token::Comma {\n             // An unexpected comma after a top-level pattern is a clue that the\n             // user (perhaps more accustomed to some other language) forgot the\n@@ -4099,13 +4096,17 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse a pattern.\n-    pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_with_range_pat(true)\n+    pub fn parse_pat(&mut self, expected: Option<&'static str>) -> PResult<'a, P<Pat>> {\n+        self.parse_pat_with_range_pat(true, expected)\n     }\n \n     /// Parse a pattern, with a setting whether modern range patterns e.g. `a..=b`, `a..b` are\n     /// allowed.\n-    fn parse_pat_with_range_pat(&mut self, allow_range_pat: bool) -> PResult<'a, P<Pat>> {\n+    fn parse_pat_with_range_pat(\n+        &mut self,\n+        allow_range_pat: bool,\n+        expected: Option<&'static str>,\n+    ) -> PResult<'a, P<Pat>> {\n         maybe_whole!(self, NtPat, |x| x);\n \n         let lo = self.span;\n@@ -4121,7 +4122,7 @@ impl<'a> Parser<'a> {\n                     err.span_label(self.span, \"unexpected lifetime\");\n                     return Err(err);\n                 }\n-                let subpat = self.parse_pat_with_range_pat(false)?;\n+                let subpat = self.parse_pat_with_range_pat(false, expected)?;\n                 pat = PatKind::Ref(subpat, mutbl);\n             }\n             token::OpenDelim(token::Paren) => {\n@@ -4167,7 +4168,7 @@ impl<'a> Parser<'a> {\n                 pat = self.parse_pat_ident(BindingMode::ByRef(mutbl))?;\n             } else if self.eat_keyword(keywords::Box) {\n                 // Parse box pat\n-                let subpat = self.parse_pat_with_range_pat(false)?;\n+                let subpat = self.parse_pat_with_range_pat(false, None)?;\n                 pat = PatKind::Box(subpat);\n             } else if self.token.is_ident() && !self.token.is_reserved_ident() &&\n                       self.parse_as_ident() {\n@@ -4267,9 +4268,14 @@ impl<'a> Parser<'a> {\n                     }\n                     Err(mut err) => {\n                         self.cancel(&mut err);\n-                        let msg = format!(\"expected pattern, found {}\", self.this_token_descr());\n+                        let expected = expected.unwrap_or(\"pattern\");\n+                        let msg = format!(\n+                            \"expected {}, found {}\",\n+                            expected,\n+                            self.this_token_descr(),\n+                        );\n                         let mut err = self.fatal(&msg);\n-                        err.span_label(self.span, \"expected pattern\");\n+                        err.span_label(self.span, format!(\"expected {}\", expected));\n                         return Err(err);\n                     }\n                 }\n@@ -4313,7 +4319,7 @@ impl<'a> Parser<'a> {\n                        -> PResult<'a, PatKind> {\n         let ident = self.parse_ident()?;\n         let sub = if self.eat(&token::At) {\n-            Some(self.parse_pat()?)\n+            Some(self.parse_pat(Some(\"binding pattern\"))?)\n         } else {\n             None\n         };"}, {"sha": "98e9272e6d8e50c06816aff3301c8d1fdb6ffc41", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -68,7 +68,7 @@ pub fn string_to_item (source_str : String) -> Option<P<ast::Item>> {\n pub fn string_to_pat(source_str: String) -> P<ast::Pat> {\n     let ps = ParseSess::new(FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| {\n-        p.parse_pat()\n+        p.parse_pat(None)\n     })\n }\n "}, {"sha": "7c3b84a5185d3323912cf1a7073196eaef079e2b", "filename": "src/test/ui/parser/issue-33413.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.rs?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -11,5 +11,6 @@\n // compile-flags: -Z parse-only\n \n impl S {\n-    fn f(*, a: u8) -> u8 {} //~ ERROR expected pattern, found `*`\n+    fn f(*, a: u8) -> u8 {}\n+    //~^ ERROR expected argument name, found `*`\n }"}, {"sha": "e0d69e596f24e62b3bb0d7774673ca0f81974874", "filename": "src/test/ui/parser/issue-33413.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-33413.stderr?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -1,11 +1,8 @@\n-error: expected pattern, found `*`\n+error: expected argument name, found `*`\n   --> $DIR/issue-33413.rs:14:10\n    |\n-LL |     fn f(*, a: u8) -> u8 {} //~ ERROR expected pattern, found `*`\n-   |          ^\n-   |          |\n-   |          expected pattern\n-   |          expected argument name\n+LL |     fn f(*, a: u8) -> u8 {}\n+   |          ^ expected argument name\n \n error: aborting due to previous error\n "}, {"sha": "86cc3c5b0cbe9df622dd772ab1facca808bf5014", "filename": "src/test/ui/parser/lifetime-in-pattern.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flifetime-in-pattern.stderr?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -2,10 +2,7 @@ error: unexpected lifetime `'a` in pattern\n   --> $DIR/lifetime-in-pattern.rs:13:10\n    |\n LL | fn test(&'a str) {\n-   |          ^^\n-   |          |\n-   |          unexpected lifetime\n-   |          expected argument name\n+   |          ^^ unexpected lifetime\n \n error: aborting due to previous error\n "}, {"sha": "c2f87d8afce0e948a15e6e37bf0f24e34c0c1a85", "filename": "src/test/ui/parser/removed-syntax-mode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.rs?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -10,4 +10,5 @@\n \n // compile-flags: -Z parse-only\n \n-fn f(+x: isize) {} //~ ERROR expected pattern, found `+`\n+fn f(+x: isize) {}\n+//~^ ERROR expected argument name, found `+`"}, {"sha": "7ad88471d5a9a13b8ad167302fb899135601a38e", "filename": "src/test/ui/parser/removed-syntax-mode.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-mode.stderr?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -1,11 +1,8 @@\n-error: expected pattern, found `+`\n+error: expected argument name, found `+`\n   --> $DIR/removed-syntax-mode.rs:13:6\n    |\n-LL | fn f(+x: isize) {} //~ ERROR expected pattern, found `+`\n-   |      ^\n-   |      |\n-   |      expected pattern\n-   |      expected argument name\n+LL | fn f(+x: isize) {}\n+   |      ^ expected argument name\n \n error: aborting due to previous error\n "}, {"sha": "765174331706a7d6a6af485d7fc153d639c50220", "filename": "src/test/ui/self/self-vs-path-ambiguity.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fself%2Fself-vs-path-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adb96ec64b8d5e8cff191315668a5bfe0480909c/src%2Ftest%2Fui%2Fself%2Fself-vs-path-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-vs-path-ambiguity.stderr?ref=adb96ec64b8d5e8cff191315668a5bfe0480909c", "patch": "@@ -2,10 +2,7 @@ error: unexpected lifetime `'a` in pattern\n   --> $DIR/self-vs-path-ambiguity.rs:19:11\n    |\n LL |     fn i(&'a self::S: &S) {} //~ ERROR unexpected lifetime `'a` in pattern\n-   |           ^^\n-   |           |\n-   |           unexpected lifetime\n-   |           expected argument name\n+   |           ^^ unexpected lifetime\n \n error: aborting due to previous error\n "}]}