{"sha": "490d820a25a37369f67a44fecf3805560835c527", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MGQ4MjBhMjVhMzczNjlmNjdhNDRmZWNmMzgwNTU2MDgzNWM1Mjc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-23T01:16:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-23T01:16:24Z"}, "message": "Rollup merge of #73586 - RalfJung:switch-ty, r=oli-obk\n\nswitch_ty is redundant\n\nThis field is redundant, but we cannot remove it currently as pretty-printing relies on it (and it does not have access to `mir::Body` to compute the type itself).\n\nCc @oli-obk @matthewjasper @jonas-schievink", "tree": {"sha": "a607ce8da1d928410040e89a6dbe82baa09c90ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a607ce8da1d928410040e89a6dbe82baa09c90ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/490d820a25a37369f67a44fecf3805560835c527", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8VfpCRBK7hj4Ov3rIwAAdHIIAAPCwcp/Wbjz7Uz+EzoUAesJ\nFoE9VGeDofJHbIyaeE1uiPaV1mzWEO2/O25xFrsbi1KJnEK2xT9xmxfICPyubnRH\nSZAWqklIMj5CS1YrJn9XgBWa9X+KsfFRqMvB4X2HrOT3YQbbyfDu/7Onp2sJrLm5\nUiVSxUjG0st/R5WvSQfTLKV7nMa7exQXFGzCHycTx925NjQ/8A50BEkmmLoTzdms\ntmmC0EjIq7k/W87CEcujli3STp1bx4wb2iupcOq9zGUSiIJDS1cooppsAeczNj06\nuD/SzeLQJ/mgpOoxcyOZrPhU5+VUHb7GrxyYRm90VMCVE5c8vm9UclaKWZ6Ui8M=\n=n10x\n-----END PGP SIGNATURE-----\n", "payload": "tree a607ce8da1d928410040e89a6dbe82baa09c90ca\nparent 963a4805e30fd8ac297d05ed8442d8f838005769\nparent 7447bf22013b18ecb1c07dae3ac7472622803337\nauthor Dylan DPC <dylan.dpc@gmail.com> 1592874984 +0200\ncommitter GitHub <noreply@github.com> 1592874984 +0200\n\nRollup merge of #73586 - RalfJung:switch-ty, r=oli-obk\n\nswitch_ty is redundant\n\nThis field is redundant, but we cannot remove it currently as pretty-printing relies on it (and it does not have access to `mir::Body` to compute the type itself).\n\nCc @oli-obk @matthewjasper @jonas-schievink\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/490d820a25a37369f67a44fecf3805560835c527", "html_url": "https://github.com/rust-lang/rust/commit/490d820a25a37369f67a44fecf3805560835c527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/490d820a25a37369f67a44fecf3805560835c527/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "963a4805e30fd8ac297d05ed8442d8f838005769", "url": "https://api.github.com/repos/rust-lang/rust/commits/963a4805e30fd8ac297d05ed8442d8f838005769", "html_url": "https://github.com/rust-lang/rust/commit/963a4805e30fd8ac297d05ed8442d8f838005769"}, {"sha": "7447bf22013b18ecb1c07dae3ac7472622803337", "url": "https://api.github.com/repos/rust-lang/rust/commits/7447bf22013b18ecb1c07dae3ac7472622803337", "html_url": "https://github.com/rust-lang/rust/commit/7447bf22013b18ecb1c07dae3ac7472622803337"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "5125ce779ed8e35d450279d132e4d89da282dcf5", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=490d820a25a37369f67a44fecf3805560835c527", "patch": "@@ -200,6 +200,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         targets: &Vec<mir::BasicBlock>,\n     ) {\n         let discr = self.codegen_operand(&mut bx, &discr);\n+        // `switch_ty` is redundant, sanity-check that.\n+        assert_eq!(discr.layout.ty, switch_ty);\n         if targets.len() == 2 {\n             // If there are two targets, emit br instead of switch\n             let lltrue = helper.llblock(self, targets[0]);"}, {"sha": "649766547990f264bf5b81fbcdd0705e383bebc6", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=490d820a25a37369f67a44fecf3805560835c527", "patch": "@@ -1075,6 +1075,8 @@ pub enum TerminatorKind<'tcx> {\n         discr: Operand<'tcx>,\n \n         /// The type of value being tested.\n+        /// This is always the same as the type of `discr`.\n+        /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.\n         switch_ty: Ty<'tcx>,\n \n         /// Possible values. The locations to branch to in each case"}, {"sha": "4681079a22ddf4f3ef7abca68251054098c2ed30", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=490d820a25a37369f67a44fecf3805560835c527", "patch": "@@ -24,9 +24,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Goto { target } => self.go_to_block(target),\n \n-            SwitchInt { ref discr, ref values, ref targets, .. } => {\n+            SwitchInt { ref discr, ref values, ref targets, switch_ty } => {\n                 let discr = self.read_immediate(self.eval_operand(discr, None)?)?;\n                 trace!(\"SwitchInt({:?})\", *discr);\n+                assert_eq!(discr.layout.ty, switch_ty);\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 assert!(!targets.is_empty());\n@@ -50,14 +51,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.go_to_block(target_block);\n             }\n \n-            Call {\n-                ref func,\n-                ref args,\n-                destination,\n-                ref cleanup,\n-                from_hir_call: _from_hir_call,\n-                fn_span: _,\n-            } => {\n+            Call { ref func, ref args, destination, ref cleanup, from_hir_call: _, fn_span: _ } => {\n                 let old_stack = self.frame_idx();\n                 let old_loc = self.frame().loc;\n                 let func = self.eval_operand(func, None)?;"}, {"sha": "c5343d9b5d014071e36f89cfacbcf17e02a12a3c", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/490d820a25a37369f67a44fecf3805560835c527/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=490d820a25a37369f67a44fecf3805560835c527", "patch": "@@ -121,7 +121,17 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             TerminatorKind::Goto { target } => {\n                 self.check_edge(location, *target, EdgeKind::Normal);\n             }\n-            TerminatorKind::SwitchInt { targets, values, .. } => {\n+            TerminatorKind::SwitchInt { targets, values, switch_ty, discr } => {\n+                let ty = discr.ty(&self.body.local_decls, self.tcx);\n+                if ty != *switch_ty {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"encountered `SwitchInt` terminator with type mismatch: {:?} != {:?}\",\n+                            ty, switch_ty,\n+                        ),\n+                    );\n+                }\n                 if targets.len() != values.len() + 1 {\n                     self.fail(\n                         location,"}]}