{"sha": "b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzQzMzI5MmRlY2MzZWExZDFjM2IzMThkMmMxZjZiN2M2NTQ0YWY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-23T15:42:14Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-10-23T15:42:14Z"}, "message": "Unsafety -> Safety in doc headings\n\nFollow https://doc.rust-lang.org/book/documentation.html#special-sections", "tree": {"sha": "823eab55ea9df100a11e0fe3e2a2309c01194300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/823eab55ea9df100a11e0fe3e2a2309c01194300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "html_url": "https://github.com/rust-lang/rust/commit/b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a855668fcc918071ecd1573abdeaccc6a99cbbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a855668fcc918071ecd1573abdeaccc6a99cbbb", "html_url": "https://github.com/rust-lang/rust/commit/9a855668fcc918071ecd1573abdeaccc6a99cbbb"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "81bf3bab36fb899210e13be83e21f06013a62887", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "patch": "@@ -254,7 +254,7 @@ impl str {\n     ///\n     /// Returns the substring from [`begin`..`end`).\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// Caller must check both UTF-8 sequence boundaries and the boundaries\n     /// of the entire slice as well."}, {"sha": "8217e694e2d5379113435c0b62798657f34f77ff", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "patch": "@@ -361,7 +361,7 @@ impl String {\n \n     /// Creates a new `String` from a length, capacity, and pointer.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This is _very_ unsafe because:\n     ///\n@@ -385,7 +385,7 @@ impl String {\n     ///\n     /// [fromutf8]: struct.String.html#method.from_utf8\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because it does not check that the bytes passed to\n     /// it are valid UTF-8. If this constraint is violated, undefined behavior"}, {"sha": "69530493aa11017df2440ebabcad579d2271d1e1", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "patch": "@@ -284,7 +284,7 @@ impl<T> Vec<T> {\n \n     /// Creates a `Vec<T>` directly from the raw components of another vector.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This is highly unsafe, due to the number of invariants that aren't\n     /// checked:"}, {"sha": "1dc989018ad26d11f602d8bd0e43ba2b693f2122", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "patch": "@@ -214,7 +214,7 @@ impl<T:Copy> Cell<T> {\n \n     /// Returns a reference to the underlying `UnsafeCell`.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is `unsafe` because `UnsafeCell`'s field is public.\n     ///\n@@ -813,7 +813,7 @@ impl<T> UnsafeCell<T> {\n \n     /// Unwraps the value.\n     ///\n-    /// # Unsafety\n+    /// # Safety\n     ///\n     /// This function is unsafe because this thread or another thread may currently be\n     /// inspecting the inner value."}, {"sha": "2178b68a4951dfa3cebd18d97fae31774f49ce2e", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "patch": "@@ -1430,7 +1430,7 @@ pub fn mut_ref_slice<A>(s: &mut A) -> &mut [A] {\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes.\n ///\n-/// # Unsafety\n+/// # Safety\n ///\n /// This function is unsafe as there is no guarantee that the given pointer is\n /// valid for `len` elements, nor whether the lifetime inferred is a suitable"}, {"sha": "b7adfa8b7f891a13c2eaba21286e5d824da69e56", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "patch": "@@ -247,7 +247,7 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n ///\n /// [fromutf8]: fn.from_utf8.html\n ///\n-/// # Unsafety\n+/// # Safety\n ///\n /// This function is unsafe because it does not check that the bytes passed to\n /// it are valid UTF-8. If this constraint is violated, undefined behavior"}, {"sha": "13902d674379eb6a13a4781d5e7867dfa3de4b08", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17433292decc3ea1d1c3b318d2c1f6b7c6544af/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=b17433292decc3ea1d1c3b318d2c1f6b7c6544af", "patch": "@@ -6163,7 +6163,7 @@ pub mod funcs {\n \n                 /// Exits the running program in a possibly dangerous manner.\n                 ///\n-                /// # Unsafety\n+                /// # Safety\n                 ///\n                 /// While this forces your program to exit, it does so in a way that has\n                 /// consequences. This will skip all unwinding code, which means that anything"}]}