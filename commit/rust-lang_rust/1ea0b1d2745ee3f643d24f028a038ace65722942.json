{"sha": "1ea0b1d2745ee3f643d24f028a038ace65722942", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTBiMWQyNzQ1ZWUzZjY0M2QyNGYwMjhhMDM4YWNlNjU3MjI5NDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-23T06:37:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-23T06:37:15Z"}, "message": "Rollup merge of #61046 - mark-i-m:transcribe-fix, r=petrochenkov\n\nFix ICE with inconsistent macro matchers\n\nFixes #61033\n\nr? @petrochenkov", "tree": {"sha": "90c1f096232a9d6c4f0173653445f1193e164ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c1f096232a9d6c4f0173653445f1193e164ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea0b1d2745ee3f643d24f028a038ace65722942", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5j+bCRBK7hj4Ov3rIwAAdHIIAI1UYU4q3cxtByWaZ50OqjaH\nBkpPFVOQiNGbALwzsqr11EUx23xo/ZNaUPld6YarSxaKC2rPM7FX5TKJSjfpZ3n8\n9B0iX/Zx5eUhB2Fj7sj4iBob5nH7WQ2alqeY/jzIM4r0n5gM6TEnaTOQ0rZ8Vunf\nF4F1Ph8j6qP7mKNAMhZFcwXAo3O5B9Anx/knet0UqkFODegl+aCA+CY9DQV5T9Fz\nU55yT8TEx1f1LgPc8jTySq6WjjGYduMof7LuqxlKs02ZbsqqnQzt2O5h30KSPH1v\nGGCFn4/9qzBnzj/Thsqywa7QI3XrkVnRl1xsM37uPAhMm/yIbVQzGCjABN5FbfA=\n=Iycq\n-----END PGP SIGNATURE-----\n", "payload": "tree 90c1f096232a9d6c4f0173653445f1193e164ef4\nparent 25c1dca1b3ad1b12068533a6701323f022a02fb2\nparent 5a9de557b3d0ee9314bf7720c9d631940082eb6c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558593435 +0200\ncommitter GitHub <noreply@github.com> 1558593435 +0200\n\nRollup merge of #61046 - mark-i-m:transcribe-fix, r=petrochenkov\n\nFix ICE with inconsistent macro matchers\n\nFixes #61033\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea0b1d2745ee3f643d24f028a038ace65722942", "html_url": "https://github.com/rust-lang/rust/commit/1ea0b1d2745ee3f643d24f028a038ace65722942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea0b1d2745ee3f643d24f028a038ace65722942/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c1dca1b3ad1b12068533a6701323f022a02fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c1dca1b3ad1b12068533a6701323f022a02fb2", "html_url": "https://github.com/rust-lang/rust/commit/25c1dca1b3ad1b12068533a6701323f022a02fb2"}, {"sha": "5a9de557b3d0ee9314bf7720c9d631940082eb6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9de557b3d0ee9314bf7720c9d631940082eb6c", "html_url": "https://github.com/rust-lang/rust/commit/5a9de557b3d0ee9314bf7720c9d631940082eb6c"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "e6b49e61937d6aae3e96670b44fd4e72213f2b02", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=1ea0b1d2745ee3f643d24f028a038ace65722942", "patch": "@@ -170,9 +170,11 @@ pub fn transcribe(\n                     }\n \n                     LockstepIterSize::Contradiction(ref msg) => {\n-                        // This should never happen because the macro parser should generate\n-                        // properly-sized matches for all meta-vars.\n-                        cx.span_bug(seq.span(), &msg[..]);\n+                        // FIXME: this really ought to be caught at macro definition time... It\n+                        // happens when two meta-variables are used in the same repetition in a\n+                        // sequence, but they come from different sequence matchers and repeat\n+                        // different amounts.\n+                        cx.span_fatal(seq.span(), &msg[..]);\n                     }\n \n                     LockstepIterSize::Constraint(len, _) => {\n@@ -187,9 +189,10 @@ pub fn transcribe(\n                         // Is the repetition empty?\n                         if len == 0 {\n                             if seq.op == quoted::KleeneOp::OneOrMore {\n-                                // This should be impossible because the macro parser would not\n-                                // match the given macro arm.\n-                                cx.span_bug(sp.entire(), \"this must repeat at least once\");\n+                                // FIXME: this really ought to be caught at macro definition\n+                                // time... It happens when the Kleene operator in the matcher and\n+                                // the body for the same meta-variable do not match.\n+                                cx.span_fatal(sp.entire(), \"this must repeat at least once\");\n                             }\n                         } else {\n                             // 0 is the initial counter (we have done 0 repretitions so far). `len`\n@@ -327,8 +330,7 @@ impl LockstepIterSize {\n                 LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,\n                 LockstepIterSize::Constraint(r_len, r_id) => {\n                     let msg = format!(\n-                        \"inconsistent lockstep iteration: \\\n-                         '{}' has {} items, but '{}' has {}\",\n+                        \"meta-variable `{}` repeats {} times, but `{}` repeats {} times\",\n                         l_id, l_len, r_id, r_len\n                     );\n                     LockstepIterSize::Contradiction(msg)"}, {"sha": "8f85dec017f2a0ee0b5c4c349bea9a72e066ea38", "filename": "src/test/ui/macros/issue-61033-1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.rs?ref=1ea0b1d2745ee3f643d24f028a038ace65722942", "patch": "@@ -0,0 +1,9 @@\n+// Regression test for issue #61033.\n+\n+macro_rules! test1 {\n+    ($x:ident, $($tt:tt)*) => { $($tt)+ } //~ERROR this must repeat at least once\n+}\n+\n+fn main() {\n+    test1!(x,);\n+}"}, {"sha": "f3c68f4928dbb3b343e6a1f70aa617715fb6a294", "filename": "src/test/ui/macros/issue-61033-1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-1.stderr?ref=1ea0b1d2745ee3f643d24f028a038ace65722942", "patch": "@@ -0,0 +1,8 @@\n+error: this must repeat at least once\n+  --> $DIR/issue-61033-1.rs:4:34\n+   |\n+LL |     ($x:ident, $($tt:tt)*) => { $($tt)+ }\n+   |                                  ^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "0799be10b96c71f7001ac50a5aa0936ac3dc5da4", "filename": "src/test/ui/macros/issue-61033-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.rs?ref=1ea0b1d2745ee3f643d24f028a038ace65722942", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #61033.\n+\n+macro_rules! test2 {\n+    (\n+        $(* $id1:ident)*\n+        $(+ $id2:ident)*\n+    ) => {\n+        $( //~ERROR meta-variable `id1` repeats 2 times\n+            $id1 + $id2 // $id1 and $id2 may repeat different numbers of times\n+        )*\n+    }\n+}\n+\n+fn main() {\n+    test2! {\n+        * a * b\n+        + a + b + c\n+    }\n+}"}, {"sha": "bf502919cf79488e1fb98aae0950e1a9a22eb3cc", "filename": "src/test/ui/macros/issue-61033-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ea0b1d2745ee3f643d24f028a038ace65722942/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-61033-2.stderr?ref=1ea0b1d2745ee3f643d24f028a038ace65722942", "patch": "@@ -0,0 +1,11 @@\n+error: meta-variable `id1` repeats 2 times, but `id2` repeats 3 times\n+  --> $DIR/issue-61033-2.rs:8:10\n+   |\n+LL |           $(\n+   |  __________^\n+LL | |             $id1 + $id2 // $id1 and $id2 may repeat different numbers of times\n+LL | |         )*\n+   | |_________^\n+\n+error: aborting due to previous error\n+"}]}