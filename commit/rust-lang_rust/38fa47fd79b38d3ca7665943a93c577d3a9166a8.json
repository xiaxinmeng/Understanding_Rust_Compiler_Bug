{"sha": "38fa47fd79b38d3ca7665943a93c577d3a9166a8", "node_id": "C_kwDOAAsO6NoAKDM4ZmE0N2ZkNzliMzhkM2NhNzY2NTk0M2E5M2M1NzdkM2E5MTY2YTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T13:09:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T13:09:37Z"}, "message": "Auto merge of #13290 - poliorcetics:multiple-targets, r=Veykril\n\nSupport multiple targets for checkOnSave (in conjunction with cargo 1.64.0+)\n\nThis PR adds support for the ability to pass multiple `--target` flags when using\n`cargo` 1.64.0+.\n\n## Questions\n\nI needed to change the type of two configurations options, but I did not plurialize the names to\navoid too much churn, should I ?\n\n## Zulip thread\n\nhttps://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Issue.2013282.20.28supporting.20multiple.20targets.20with.201.2E64.2B.29\n\n## Example\n\nTo see it working, on a macOS machine:\n\n```sh\n$ cd /tmp\n$ cargo new cargo-multiple-targets-support-ra-test\n$ cd !$\n$ mkdir .cargo\n$ echo '\n[build]\ntarget = [\n    \"aarch64-apple-darwin\",\n    \"x86_64-apple-darwin\",\n]\n' > .cargo/config.toml\n$ echo '\nfn main() {\n    #[cfg(all(target_arch = \"aarch64\", target_os = \"macos\"))]\n    {\n        let a = std::fs::read_to_string(\"/tmp/test-read\");\n    }\n\n    #[cfg(all(target_arch = \"x86_64\", target_os = \"macos\"))]\n    {\n        let a = std::fs::read_to_string(\"/tmp/test-read\");\n    }\n\n    #[cfg(all(target_arch = \"x86_64\", target_os = \"windows\"))]\n    {\n        let a = std::fs::read_to_string(\"/tmp/test-read\");\n    }\n}\n' > src/main.rs\n# launch your favorite editor with the version of RA from this PR\n#\n# You should see warnings under the first two `let a = ...` but not the third\n```\n\n## Screen\n\n![Two panes of a terminal emulator, on the left pane is the main.rs file described above, with warnings for the first two let a = declaration, on the right pane is a display of the .cargo/config.toml, an ls of the current files in the directory and a call to cargo build to show the same warnings as in the editor on the left pane](https://user-images.githubusercontent.com/7951708/192122707-7a00606a-e581-4534-b9d5-b81c92694e8e.png)\n\nHelps with #13282", "tree": {"sha": "8a8ce8e1c419dc1b1463a41955111ce81ce2c579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a8ce8e1c419dc1b1463a41955111ce81ce2c579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38fa47fd79b38d3ca7665943a93c577d3a9166a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38fa47fd79b38d3ca7665943a93c577d3a9166a8", "html_url": "https://github.com/rust-lang/rust/commit/38fa47fd79b38d3ca7665943a93c577d3a9166a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38fa47fd79b38d3ca7665943a93c577d3a9166a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d9ed4fd483e0caddab03dc78f805a37232463df", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9ed4fd483e0caddab03dc78f805a37232463df", "html_url": "https://github.com/rust-lang/rust/commit/2d9ed4fd483e0caddab03dc78f805a37232463df"}, {"sha": "0d4737adb68704a9db802614f6ac9ba933d81f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4737adb68704a9db802614f6ac9ba933d81f65", "html_url": "https://github.com/rust-lang/rust/commit/0d4737adb68704a9db802614f6ac9ba933d81f65"}], "stats": {"total": 122, "additions": 87, "deletions": 35}, "files": [{"sha": "8f93dad06e3f5d384b95b89907faee227e1db0eb", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=38fa47fd79b38d3ca7665943a93c577d3a9166a8", "patch": "@@ -40,7 +40,7 @@ pub enum InvocationLocation {\n pub enum FlycheckConfig {\n     CargoCommand {\n         command: String,\n-        target_triple: Option<String>,\n+        target_triples: Vec<String>,\n         all_targets: bool,\n         no_default_features: bool,\n         all_features: bool,\n@@ -286,7 +286,7 @@ impl FlycheckActor {\n         let (mut cmd, args) = match &self.config {\n             FlycheckConfig::CargoCommand {\n                 command,\n-                target_triple,\n+                target_triples,\n                 no_default_features,\n                 all_targets,\n                 all_features,\n@@ -300,7 +300,7 @@ impl FlycheckActor {\n                 cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"])\n                     .arg(self.root.join(\"Cargo.toml\").as_os_str());\n \n-                if let Some(target) = target_triple {\n+                for target in target_triples {\n                     cmd.args(&[\"--target\", target.as_str()]);\n                 }\n                 if *all_targets {"}, {"sha": "ae2b41f27d58efe226a66e667683cca74788cb47", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=38fa47fd79b38d3ca7665943a93c577d3a9166a8", "patch": "@@ -69,7 +69,7 @@ impl WorkspaceBuildScripts {\n                 cmd.args(&[\"check\", \"--quiet\", \"--workspace\", \"--message-format=json\"]);\n \n                 // --all-targets includes tests, benches and examples in addition to the\n-                // default lib and bins. This is an independent concept from the --targets\n+                // default lib and bins. This is an independent concept from the --target\n                 // flag below.\n                 cmd.arg(\"--all-targets\");\n "}, {"sha": "02ec7a4f6f992b60a60d0a593afce746150680f5", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=38fa47fd79b38d3ca7665943a93c577d3a9166a8", "patch": "@@ -270,11 +270,7 @@ impl CargoWorkspace {\n         config: &CargoConfig,\n         progress: &dyn Fn(String),\n     ) -> Result<cargo_metadata::Metadata> {\n-        let target = config\n-            .target\n-            .clone()\n-            .or_else(|| cargo_config_build_target(cargo_toml, &config.extra_env))\n-            .or_else(|| rustc_discover_host_triple(cargo_toml, &config.extra_env));\n+        let targets = find_list_of_build_targets(config, cargo_toml);\n \n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n@@ -294,8 +290,12 @@ impl CargoWorkspace {\n         }\n         meta.current_dir(current_dir.as_os_str());\n \n-        if let Some(target) = target {\n-            meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n+        if !targets.is_empty() {\n+            let other_options: Vec<_> = targets\n+                .into_iter()\n+                .flat_map(|target| [\"--filter-platform\".to_string(), target])\n+                .collect();\n+            meta.other_options(other_options);\n         }\n \n         // FIXME: Fetching metadata is a slow process, as it might require\n@@ -469,6 +469,19 @@ impl CargoWorkspace {\n     }\n }\n \n+fn find_list_of_build_targets(config: &CargoConfig, cargo_toml: &ManifestPath) -> Vec<String> {\n+    if let Some(target) = &config.target {\n+        return [target.into()].to_vec();\n+    }\n+\n+    let build_targets = cargo_config_build_target(cargo_toml, &config.extra_env);\n+    if !build_targets.is_empty() {\n+        return build_targets;\n+    }\n+\n+    rustc_discover_host_triple(cargo_toml, &config.extra_env).into_iter().collect()\n+}\n+\n fn rustc_discover_host_triple(\n     cargo_toml: &ManifestPath,\n     extra_env: &FxHashMap<String, String>,\n@@ -499,20 +512,29 @@ fn rustc_discover_host_triple(\n fn cargo_config_build_target(\n     cargo_toml: &ManifestPath,\n     extra_env: &FxHashMap<String, String>,\n-) -> Option<String> {\n+) -> Vec<String> {\n     let mut cargo_config = Command::new(toolchain::cargo());\n     cargo_config.envs(extra_env);\n     cargo_config\n         .current_dir(cargo_toml.parent())\n         .args(&[\"-Z\", \"unstable-options\", \"config\", \"get\", \"build.target\"])\n         .env(\"RUSTC_BOOTSTRAP\", \"1\");\n     // if successful we receive `build.target = \"target-triple\"`\n+    // or `build.target = [\"<target 1>\", ..]`\n     tracing::debug!(\"Discovering cargo config target by {:?}\", cargo_config);\n-    match utf8_stdout(cargo_config) {\n-        Ok(stdout) => stdout\n-            .strip_prefix(\"build.target = \\\"\")\n-            .and_then(|stdout| stdout.strip_suffix('\"'))\n-            .map(ToOwned::to_owned),\n-        Err(_) => None,\n+    utf8_stdout(cargo_config).map(parse_output_cargo_config_build_target).unwrap_or_default()\n+}\n+\n+fn parse_output_cargo_config_build_target(stdout: String) -> Vec<String> {\n+    let trimmed = stdout.trim_start_matches(\"build.target = \").trim_matches('\"');\n+\n+    if !trimmed.starts_with('[') {\n+        return [trimmed.to_string()].to_vec();\n+    }\n+\n+    let res = serde_json::from_str(trimmed);\n+    if let Err(e) = &res {\n+        tracing::warn!(\"Failed to parse `build.target` as an array of target: {}`\", e);\n     }\n+    res.unwrap_or_default()\n }"}, {"sha": "6b2f22faa7178b262fe08b2e5f57323f4f210e4a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38fa47fd79b38d3ca7665943a93c577d3a9166a8/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=38fa47fd79b38d3ca7665943a93c577d3a9166a8", "patch": "@@ -118,9 +118,11 @@ config_data! {\n         /// This option does not take effect until rust-analyzer is restarted.\n         cargo_sysroot: Option<String>    = \"\\\"discover\\\"\",\n         /// Compilation target override (target triple).\n+        // FIXME(@poliorcetics): move to multiple targets here too, but this will need more work\n+        // than `checkOnSave_target`\n         cargo_target: Option<String>     = \"null\",\n         /// Unsets `#[cfg(test)]` for the specified crates.\n-        cargo_unsetTest: Vec<String>   = \"[\\\"core\\\"]\",\n+        cargo_unsetTest: Vec<String>     = \"[\\\"core\\\"]\",\n \n         /// Check all targets and tests (`--all-targets`).\n         checkOnSave_allTargets: bool                     = \"true\",\n@@ -174,9 +176,13 @@ config_data! {\n         /// ```\n         /// .\n         checkOnSave_overrideCommand: Option<Vec<String>> = \"null\",\n-        /// Check for a specific target. Defaults to\n-        /// `#rust-analyzer.cargo.target#`.\n-        checkOnSave_target: Option<String>               = \"null\",\n+        /// Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n+        ///\n+        /// Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n+        /// `[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n+        ///\n+        /// Aliased as `\"checkOnSave.targets\"`.\n+        checkOnSave_target | checkOnSave_targets: CheckOnSaveTargets           = \"[]\",\n \n         /// Toggles the additional completions that automatically add imports when completed.\n         /// Note that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.\n@@ -1147,11 +1153,10 @@ impl Config {\n             }\n             Some(_) | None => FlycheckConfig::CargoCommand {\n                 command: self.data.checkOnSave_command.clone(),\n-                target_triple: self\n-                    .data\n-                    .checkOnSave_target\n-                    .clone()\n-                    .or_else(|| self.data.cargo_target.clone()),\n+                target_triples: match &self.data.checkOnSave_target.0[..] {\n+                    [] => self.data.cargo_target.clone().into_iter().collect(),\n+                    targets => targets.into(),\n+                },\n                 all_targets: self.data.checkOnSave_allTargets,\n                 no_default_features: self\n                     .data\n@@ -1657,6 +1662,9 @@ enum InvocationStrategy {\n     PerWorkspace,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+struct CheckOnSaveTargets(#[serde(deserialize_with = \"single_or_array\")] Vec<String>);\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum InvocationLocation {\n@@ -2118,6 +2126,17 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"The command will be executed in the project root.\"\n             ],\n         },\n+        \"CheckOnSaveTargets\" => set! {\n+            \"anyOf\": [\n+                {\n+                    \"type\": \"string\",\n+                },\n+                {\n+                    \"type\": \"array\",\n+                    \"items\": { \"type\": \"string\" }\n+                },\n+            ],\n+        },\n         _ => panic!(\"missing entry for {}: {}\", ty, default),\n     }\n "}, {"sha": "57f950034cbb7c0eb99c4cefee5e346d23a7694b", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38fa47fd79b38d3ca7665943a93c577d3a9166a8/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/38fa47fd79b38d3ca7665943a93c577d3a9166a8/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=38fa47fd79b38d3ca7665943a93c577d3a9166a8", "patch": "@@ -190,11 +190,15 @@ cargo check --workspace --message-format=json --all-targets\n ```\n .\n --\n-[[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `null`)::\n+[[rust-analyzer.checkOnSave.target]]rust-analyzer.checkOnSave.target (default: `[]`)::\n +\n --\n-Check for a specific target. Defaults to\n-`#rust-analyzer.cargo.target#`.\n+Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n+\n+Can be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n+`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n+\n+Aliased as `\"checkOnSave.targets\"`.\n --\n [[rust-analyzer.completion.autoimport.enable]]rust-analyzer.completion.autoimport.enable (default: `true`)::\n +"}, {"sha": "c4d4e428ea07d9d60cd855e2097ad6b178333ce4", "filename": "editors/code/package.json", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38fa47fd79b38d3ca7665943a93c577d3a9166a8/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/38fa47fd79b38d3ca7665943a93c577d3a9166a8/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=38fa47fd79b38d3ca7665943a93c577d3a9166a8", "patch": "@@ -639,11 +639,18 @@\n                     }\n                 },\n                 \"rust-analyzer.checkOnSave.target\": {\n-                    \"markdownDescription\": \"Check for a specific target. Defaults to\\n`#rust-analyzer.cargo.target#`.\",\n-                    \"default\": null,\n-                    \"type\": [\n-                        \"null\",\n-                        \"string\"\n+                    \"markdownDescription\": \"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\\n\\nCan be a single target, e.g. `\\\"x86_64-unknown-linux-gnu\\\"` or a list of targets, e.g.\\n`[\\\"aarch64-apple-darwin\\\", \\\"x86_64-apple-darwin\\\"]`.\\n\\nAliased as `\\\"checkOnSave.targets\\\"`.\",\n+                    \"default\": [],\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"string\"\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"string\"\n+                            }\n+                        }\n                     ]\n                 },\n                 \"rust-analyzer.completion.autoimport.enable\": {"}]}