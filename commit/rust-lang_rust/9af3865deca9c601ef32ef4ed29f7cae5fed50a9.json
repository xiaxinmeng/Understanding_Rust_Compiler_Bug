{"sha": "9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "node_id": "C_kwDOAAsO6NoAKDlhZjM4NjVkZWNhOWM2MDFlZjMyZWY0ZWQyOWY3Y2FlNWZlZDUwYTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T22:40:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-31T22:40:25Z"}, "message": "Auto merge of #110807 - petrochenkov:strictflavor, r=lqd,wesleywiser\n\nlinker: Report linker flavors incompatible with the current target\n\nThe linker flavor is checked for target compatibility even if linker is never used (e.g. we are producing a rlib).\nIf it causes trouble, we can move the check to `link.rs` so it will run if the linker (flavor) is actually used.\n\nAnd also feature gate explicitly specifying linker flavors for tier 3 targets.\n\nThe next step is supporting all the internal linker flavors in user-visible interfaces (command line and json).", "tree": {"sha": "9b4f29290771dce2af0473834aeb534f9bf3e32e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b4f29290771dce2af0473834aeb534f9bf3e32e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "html_url": "https://github.com/rust-lang/rust/commit/9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871b5952023139738f72eba235063575062bc2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/871b5952023139738f72eba235063575062bc2e9", "html_url": "https://github.com/rust-lang/rust/commit/871b5952023139738f72eba235063575062bc2e9"}, {"sha": "2f7328d970b1ee63d8b62646561923f7f137842e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7328d970b1ee63d8b62646561923f7f137842e", "html_url": "https://github.com/rust-lang/rust/commit/2f7328d970b1ee63d8b62646561923f7f137842e"}], "stats": {"total": 216, "additions": 156, "deletions": 60}, "files": [{"sha": "f8bb9bf2bb50bcc61fc4e0c66f395b96584bfd9a", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -23,7 +23,7 @@ use rustc_session::utils::NativeLibKind;\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::crt_objects::{CrtObjects, LinkSelfContainedDefault};\n-use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, LinkerFlavorCli, Lld, PanicStrategy};\n+use rustc_target::spec::{Cc, LinkOutputKind, LinkerFlavor, Lld, PanicStrategy};\n use rustc_target::spec::{RelocModel, RelroLevel, SanitizerSet, SplitDebuginfo};\n \n use super::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n@@ -1302,44 +1302,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n                     sess.emit_fatal(errors::LinkerFileStem);\n                 });\n-\n-                // Remove any version postfix.\n-                let stem = stem\n-                    .rsplit_once('-')\n-                    .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n-                    .unwrap_or(stem);\n-\n-                // GCC/Clang can have an optional target prefix.\n-                let flavor = if stem == \"emcc\" {\n-                    LinkerFlavor::EmCc\n-                } else if stem == \"gcc\"\n-                    || stem.ends_with(\"-gcc\")\n-                    || stem == \"g++\"\n-                    || stem.ends_with(\"-g++\")\n-                    || stem == \"clang\"\n-                    || stem.ends_with(\"-clang\")\n-                    || stem == \"clang++\"\n-                    || stem.ends_with(\"-clang++\")\n-                {\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Gcc, &sess.target)\n-                } else if stem == \"wasm-ld\" || stem.ends_with(\"-wasm-ld\") {\n-                    LinkerFlavor::WasmLld(Cc::No)\n-                } else if stem == \"ld\" || stem.ends_with(\"-ld\") {\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Ld, &sess.target)\n-                } else if stem == \"ld.lld\" {\n-                    LinkerFlavor::Gnu(Cc::No, Lld::Yes)\n-                } else if stem == \"link\" {\n-                    LinkerFlavor::Msvc(Lld::No)\n-                } else if stem == \"lld-link\" {\n-                    LinkerFlavor::Msvc(Lld::Yes)\n-                } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    let lld_flavor = sess.target.linker_flavor.lld_flavor();\n-                    LinkerFlavor::from_cli(LinkerFlavorCli::Lld(lld_flavor), &sess.target)\n-                } else {\n-                    // fall back to the value in the target spec\n-                    sess.target.linker_flavor\n-                };\n-\n+                let flavor = sess.target.linker_flavor.with_linker_hints(stem);\n                 Some((linker, flavor))\n             }\n             (None, None) => None,\n@@ -1349,7 +1312,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n     // linker and linker flavor specified via command line have precedence over what the target\n     // specification specifies\n     let linker_flavor =\n-        sess.opts.cg.linker_flavor.map(|flavor| LinkerFlavor::from_cli(flavor, &sess.target));\n+        sess.opts.cg.linker_flavor.map(|flavor| sess.target.linker_flavor.with_cli_hints(flavor));\n     if let Some(ret) = infer_from(sess, sess.opts.cg.linker.clone(), linker_flavor) {\n         return ret;\n     }"}, {"sha": "4897bd8d5daec84045d0a3084deaa920291b29ad", "filename": "compiler/rustc_session/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fmessages.ftl?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -27,6 +27,10 @@ session_feature_gate_error = {$explain}\n session_file_is_not_writeable = output file {$file} is not writeable -- check its permissions\n \n session_hexadecimal_float_literal_not_supported = hexadecimal float literal is not supported\n+\n+session_incompatible_linker_flavor = linker flavor `{$flavor}` is incompatible with the current target\n+    .note = compatible flavors are: {$compatible_list}\n+\n session_incorrect_cgu_reuse_type =\n     CGU-reuse for `{$cgu_user_name}` is `{$actual_reuse}` but should be {$at_least ->\n     [one] {\"at least \"}"}, {"sha": "0ce83e7909771ebcac9b8e19e782777cf2a94d75", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use rustc_data_structures::stable_hasher::{StableOrd, ToStableHashKey};\n use rustc_target::abi::Align;\n-use rustc_target::spec::{PanicStrategy, SanitizerSet, SplitDebuginfo};\n+use rustc_target::spec::{LinkerFlavorCli, PanicStrategy, SanitizerSet, SplitDebuginfo};\n use rustc_target::spec::{Target, TargetTriple, TargetWarnings, TARGETS};\n \n use crate::parse::{CrateCheckConfig, CrateConfig};\n@@ -2525,6 +2525,19 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         }\n     }\n \n+    if let Some(flavor) = cg.linker_flavor {\n+        if matches!(flavor, LinkerFlavorCli::BpfLinker | LinkerFlavorCli::PtxLinker)\n+            && !nightly_options::is_unstable_enabled(matches)\n+        {\n+            let msg = format!(\n+                \"linker flavor `{}` is unstable, `-Z unstable-options` \\\n+                 flag must also be passed to explicitly use it\",\n+                flavor.desc()\n+            );\n+            early_error(error_format, msg);\n+        }\n+    }\n+\n     let prints = collect_print_requests(&mut cg, &mut unstable_opts, matches, error_format);\n \n     let cg = cg;"}, {"sha": "4a3e668da111a91089c9b797beaa6ed5f10b9242", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -422,3 +422,11 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n pub struct OptimisationFuelExhausted {\n     pub msg: String,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(session_incompatible_linker_flavor)]\n+#[note]\n+pub struct IncompatibleLinkerFlavor {\n+    pub flavor: &'static str,\n+    pub compatible_list: String,\n+}"}, {"sha": "1eb54cee5a14c35907c5c6b295e07cb5fbeb308b", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -1675,6 +1675,13 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     if sess.opts.unstable_opts.instrument_xray.is_some() && !sess.target.options.supports_xray {\n         sess.emit_err(errors::InstrumentationNotSupported { us: \"XRay\".to_string() });\n     }\n+\n+    if let Some(flavor) = sess.opts.cg.linker_flavor {\n+        if let Some(compatible_list) = sess.target.linker_flavor.check_compatibility(flavor) {\n+            let flavor = flavor.desc();\n+            sess.emit_err(errors::IncompatibleLinkerFlavor { flavor, compatible_list });\n+        }\n+    }\n }\n \n /// Holds data on the current incremental compilation session, if there is one."}, {"sha": "a7b54766bc6234a4d625279222193c817e9301cf", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -11,6 +11,7 @@\n #![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n+#![feature(iter_intersperse)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "05cb7e87a9365458e808a55e63dd31d29a552e76", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 92, "deletions": 18, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -205,15 +205,11 @@ impl ToJson for LldFlavor {\n }\n \n impl LinkerFlavor {\n-    pub fn from_cli(cli: LinkerFlavorCli, target: &TargetOptions) -> LinkerFlavor {\n-        Self::from_cli_impl(cli, target.linker_flavor.lld_flavor(), target.linker_flavor.is_gnu())\n-    }\n-\n-    /// The passed CLI flavor is preferred over other args coming from the default target spec,\n-    /// so this function can produce a flavor that is incompatible with the current target.\n-    /// FIXME: Produce errors when `-Clinker-flavor` is set to something incompatible\n-    /// with the current target.\n-    fn from_cli_impl(cli: LinkerFlavorCli, lld_flavor: LldFlavor, is_gnu: bool) -> LinkerFlavor {\n+    /// At this point the target's reference linker flavor doesn't yet exist and we need to infer\n+    /// it. The inference always succeds and gives some result, and we don't report any flavor\n+    /// incompatibility errors for json target specs. The CLI flavor is used as the main source\n+    /// of truth, other flags are used in case of ambiguities.\n+    fn from_cli_json(cli: LinkerFlavorCli, lld_flavor: LldFlavor, is_gnu: bool) -> LinkerFlavor {\n         match cli {\n             LinkerFlavorCli::Gcc => match lld_flavor {\n                 LldFlavor::Ld if is_gnu => LinkerFlavor::Gnu(Cc::Yes, Lld::No),\n@@ -257,6 +253,85 @@ impl LinkerFlavor {\n         }\n     }\n \n+    fn infer_cli_hints(cli: LinkerFlavorCli) -> (Option<Cc>, Option<Lld>) {\n+        match cli {\n+            LinkerFlavorCli::Gcc | LinkerFlavorCli::Em => (Some(Cc::Yes), None),\n+            LinkerFlavorCli::Lld(_) => (Some(Cc::No), Some(Lld::Yes)),\n+            LinkerFlavorCli::Ld | LinkerFlavorCli::Msvc => (Some(Cc::No), Some(Lld::No)),\n+            LinkerFlavorCli::BpfLinker | LinkerFlavorCli::PtxLinker => (None, None),\n+        }\n+    }\n+\n+    fn infer_linker_hints(linker_stem: &str) -> (Option<Cc>, Option<Lld>) {\n+        // Remove any version postfix.\n+        let stem = linker_stem\n+            .rsplit_once('-')\n+            .and_then(|(lhs, rhs)| rhs.chars().all(char::is_numeric).then_some(lhs))\n+            .unwrap_or(linker_stem);\n+\n+        // GCC/Clang can have an optional target prefix.\n+        if stem == \"emcc\"\n+            || stem == \"gcc\"\n+            || stem.ends_with(\"-gcc\")\n+            || stem == \"g++\"\n+            || stem.ends_with(\"-g++\")\n+            || stem == \"clang\"\n+            || stem.ends_with(\"-clang\")\n+            || stem == \"clang++\"\n+            || stem.ends_with(\"-clang++\")\n+        {\n+            (Some(Cc::Yes), None)\n+        } else if stem == \"wasm-ld\"\n+            || stem.ends_with(\"-wasm-ld\")\n+            || stem == \"ld.lld\"\n+            || stem == \"lld\"\n+            || stem == \"rust-lld\"\n+            || stem == \"lld-link\"\n+        {\n+            (Some(Cc::No), Some(Lld::Yes))\n+        } else if stem == \"ld\" || stem.ends_with(\"-ld\") || stem == \"link\" {\n+            (Some(Cc::No), Some(Lld::No))\n+        } else {\n+            (None, None)\n+        }\n+    }\n+\n+    fn with_hints(self, (cc_hint, lld_hint): (Option<Cc>, Option<Lld>)) -> LinkerFlavor {\n+        match self {\n+            LinkerFlavor::Gnu(cc, lld) => {\n+                LinkerFlavor::Gnu(cc_hint.unwrap_or(cc), lld_hint.unwrap_or(lld))\n+            }\n+            LinkerFlavor::Darwin(cc, lld) => {\n+                LinkerFlavor::Darwin(cc_hint.unwrap_or(cc), lld_hint.unwrap_or(lld))\n+            }\n+            LinkerFlavor::WasmLld(cc) => LinkerFlavor::WasmLld(cc_hint.unwrap_or(cc)),\n+            LinkerFlavor::Unix(cc) => LinkerFlavor::Unix(cc_hint.unwrap_or(cc)),\n+            LinkerFlavor::Msvc(lld) => LinkerFlavor::Msvc(lld_hint.unwrap_or(lld)),\n+            LinkerFlavor::EmCc | LinkerFlavor::Bpf | LinkerFlavor::Ptx => self,\n+        }\n+    }\n+\n+    pub fn with_cli_hints(self, cli: LinkerFlavorCli) -> LinkerFlavor {\n+        self.with_hints(LinkerFlavor::infer_cli_hints(cli))\n+    }\n+\n+    pub fn with_linker_hints(self, linker_stem: &str) -> LinkerFlavor {\n+        self.with_hints(LinkerFlavor::infer_linker_hints(linker_stem))\n+    }\n+\n+    pub fn check_compatibility(self, cli: LinkerFlavorCli) -> Option<String> {\n+        // The CLI flavor should be compatible with the target if it survives this roundtrip.\n+        let compatible = |cli| cli == self.with_cli_hints(cli).to_cli();\n+        (!compatible(cli)).then(|| {\n+            LinkerFlavorCli::all()\n+                .iter()\n+                .filter(|cli| compatible(**cli))\n+                .map(|cli| cli.desc())\n+                .intersperse(\", \")\n+                .collect()\n+        })\n+    }\n+\n     pub fn lld_flavor(self) -> LldFlavor {\n         match self {\n             LinkerFlavor::Gnu(..)\n@@ -278,6 +353,10 @@ impl LinkerFlavor {\n macro_rules! linker_flavor_cli_impls {\n     ($(($($flavor:tt)*) $string:literal)*) => (\n         impl LinkerFlavorCli {\n+            const fn all() -> &'static [LinkerFlavorCli] {\n+                &[$($($flavor)*,)*]\n+            }\n+\n             pub const fn one_of() -> &'static str {\n                 concat!(\"one of: \", $($string, \" \",)*)\n             }\n@@ -289,8 +368,8 @@ macro_rules! linker_flavor_cli_impls {\n                 })\n             }\n \n-            pub fn desc(&self) -> &str {\n-                match *self {\n+            pub fn desc(self) -> &'static str {\n+                match self {\n                     $($($flavor)* => $string,)*\n                 }\n             }\n@@ -1801,7 +1880,7 @@ impl TargetOptions {\n     }\n \n     fn update_from_cli(&mut self) {\n-        self.linker_flavor = LinkerFlavor::from_cli_impl(\n+        self.linker_flavor = LinkerFlavor::from_cli_json(\n             self.linker_flavor_json,\n             self.lld_flavor_json,\n             self.linker_is_gnu_json,\n@@ -1815,12 +1894,7 @@ impl TargetOptions {\n         ] {\n             args.clear();\n             for (flavor, args_json) in args_json {\n-                // Cannot use `from_cli` due to borrow checker.\n-                let linker_flavor = LinkerFlavor::from_cli_impl(\n-                    *flavor,\n-                    self.lld_flavor_json,\n-                    self.linker_is_gnu_json,\n-                );\n+                let linker_flavor = self.linker_flavor.with_cli_hints(*flavor);\n                 // Normalize to no lld to avoid asserts.\n                 let linker_flavor = match linker_flavor {\n                     LinkerFlavor::Gnu(cc, _) => LinkerFlavor::Gnu(cc, Lld::No),"}, {"sha": "90c2b612f22da1d9def44190086316a4737f5fc0", "filename": "tests/ui/linkage-attr/incompatible-flavor.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: --target=x86_64-unknown-linux-gnu -C linker-flavor=msvc --crate-type=rlib\n+// error-pattern: linker flavor `msvc` is incompatible with the current target\n+// needs-llvm-components:\n+\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "e07e778521c0b65349e3a466daa41a1fb6e2ad3d", "filename": "tests/ui/linkage-attr/incompatible-flavor.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Fincompatible-flavor.stderr?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -0,0 +1,6 @@\n+error: linker flavor `msvc` is incompatible with the current target\n+   |\n+   = note: compatible flavors are: gcc, ld, ld.lld\n+\n+error: aborting due to previous error\n+"}, {"sha": "0df5d842cb2a01f5fb7ace7b14a83fc375565ac3", "filename": "tests/ui/linkage-attr/issue-10755.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Fissue-10755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Fissue-10755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Fissue-10755.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -1,6 +1,6 @@\n // build-fail\n // dont-check-compiler-stderr\n-// compile-flags: -C linker=llllll -C linker-flavor=ld\n+// compile-flags: -C linker=llllll\n // error-pattern: `llllll`\n \n // Before, the error-pattern checked for \"not found\". On WSL with appendWindowsPath=true, running"}, {"sha": "3346d12c20e8067fb50ca327881b121e59265ca5", "filename": "tests/ui/linkage-attr/unstable-flavor.bpf.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Funstable-flavor.bpf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Funstable-flavor.bpf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Funstable-flavor.bpf.stderr?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -0,0 +1,2 @@\n+error: linker flavor `bpf-linker` is unstable, `-Z unstable-options` flag must also be passed to explicitly use it\n+"}, {"sha": "03ca2a012460cb2b74b62b69216932101441aaf6", "filename": "tests/ui/linkage-attr/unstable-flavor.ptx.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Funstable-flavor.ptx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Funstable-flavor.ptx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Funstable-flavor.ptx.stderr?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -0,0 +1,2 @@\n+error: linker flavor `ptx-linker` is unstable, `-Z unstable-options` flag must also be passed to explicitly use it\n+"}, {"sha": "5487882dc24dcb8fc476f324198b57508a10a940", "filename": "tests/ui/linkage-attr/unstable-flavor.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Funstable-flavor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9af3865deca9c601ef32ef4ed29f7cae5fed50a9/tests%2Fui%2Flinkage-attr%2Funstable-flavor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkage-attr%2Funstable-flavor.rs?ref=9af3865deca9c601ef32ef4ed29f7cae5fed50a9", "patch": "@@ -0,0 +1,10 @@\n+// revisions: bpf ptx\n+// [bpf] compile-flags: --target=bpfel-unknown-none -C linker-flavor=bpf-linker --crate-type=rlib\n+// [bpf] error-pattern: linker flavor `bpf-linker` is unstable, `-Z unstable-options` flag\n+// [bpf] needs-llvm-components:\n+// [ptx] compile-flags: --target=nvptx64-nvidia-cuda -C linker-flavor=ptx-linker --crate-type=rlib\n+// [ptx] error-pattern: linker flavor `ptx-linker` is unstable, `-Z unstable-options` flag\n+// [ptx] needs-llvm-components:\n+\n+#![feature(no_core)]\n+#![no_core]"}]}