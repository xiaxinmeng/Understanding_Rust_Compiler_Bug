{"sha": "bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiODMyYzI1NjBjOGQyYzZkMWE0N2Q5YTliYjBlZWQ1MThmMGIzYWQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-03-18T08:02:57Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-03-18T08:02:57Z"}, "message": "some small HIR doc improvements", "tree": {"sha": "c8104b4bbb3bfb486354d6619019a2e69f4ce41a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8104b4bbb3bfb486354d6619019a2e69f4ce41a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad", "html_url": "https://github.com/rust-lang/rust/commit/bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03dafa7da38decbe74fcd8a23d7ec835e637c8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/03dafa7da38decbe74fcd8a23d7ec835e637c8e4", "html_url": "https://github.com/rust-lang/rust/commit/03dafa7da38decbe74fcd8a23d7ec835e637c8e4"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "8941158e561d161fd2ed791a60fb47e8f293d0c3", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=bb832c2560c8d2c6d1a47d9a9bb0eed518f0b3ad", "patch": "@@ -816,6 +816,9 @@ pub struct MacroDef {\n     pub legacy: bool,\n }\n \n+/// A block of statements `{ .. }`, which may have a label (in this case the\n+/// `targeted_by_break` field will be `true`) and may be `unsafe` by means of\n+/// the `rules` being anything but `DefaultBlock`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Block {\n     /// Statements in a block.\n@@ -1178,6 +1181,7 @@ impl fmt::Debug for Stmt {\n     }\n }\n \n+/// The contents of a statement.\n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum StmtKind {\n     /// A local (`let`) binding.\n@@ -1208,21 +1212,28 @@ impl StmtKind {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Local {\n     pub pat: P<Pat>,\n+    /// Type annotation, if any (otherwise the type will be inferred).\n     pub ty: Option<P<Ty>>,\n     /// Initializer expression to set the value, if any.\n     pub init: Option<P<Expr>>,\n     pub hir_id: HirId,\n     pub span: Span,\n     pub attrs: ThinVec<Attribute>,\n+    /// Can be `ForLoopDesugar` if the `let` statement is part of a `for` loop\n+    /// desugaring. Otherwise will be `Normal`.\n     pub source: LocalSource,\n }\n \n-/// Represents a single arm of a `match` expression.\n+/// Represents a single arm of a `match` expression, e.g.\n+/// `<pats> (if <guard>) => <body>`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Arm {\n     pub attrs: HirVec<Attribute>,\n+    /// Multiple patterns can be combined with `|`\n     pub pats: HirVec<P<Pat>>,\n+    /// Optional guard clause.\n     pub guard: Option<Guard>,\n+    /// The action to take if this arm matches.\n     pub body: P<Expr>,\n }\n "}]}