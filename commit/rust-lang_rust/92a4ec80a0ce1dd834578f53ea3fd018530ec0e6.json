{"sha": "92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYTRlYzgwYTBjZTFkZDgzNDU3OGY1M2VhM2ZkMDE4NTMwZWMwZTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-24T15:39:44Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-07-24T15:39:44Z"}, "message": "Only display experimental diagnostics when enabled", "tree": {"sha": "aaf25936999b07663e743646f256152fe3ec79cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaf25936999b07663e743646f256152fe3ec79cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "html_url": "https://github.com/rust-lang/rust/commit/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f49735e8070789a970cfd534695a5f2be33624", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f49735e8070789a970cfd534695a5f2be33624", "html_url": "https://github.com/rust-lang/rust/commit/f6f49735e8070789a970cfd534695a5f2be33624"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "897177d05d4f665ddd386c4a64b9cfcf0bf3376c", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "patch": "@@ -29,7 +29,11 @@ pub enum Severity {\n     WeakWarning,\n }\n \n-pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic> {\n+pub(crate) fn diagnostics(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    enable_experimental: bool,\n+) -> Vec<Diagnostic> {\n     let _p = profile(\"diagnostics\");\n     let sema = Semantics::new(db);\n     let parse = db.parse(file_id);\n@@ -116,6 +120,9 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n                 fix: missing_struct_field_fix(&sema, file_id, d),\n             })\n         })\n+        // Only collect experimental diagnostics when they're enabled.\n+        .filter(|diag| !diag.is_experimental() || enable_experimental)\n+        // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n             res.borrow_mut().push(Diagnostic {\n                 message: d.message(),\n@@ -301,7 +308,7 @@ mod tests {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n-        let diagnostic = analysis.diagnostics(file_position.file_id).unwrap().pop().unwrap();\n+        let diagnostic = analysis.diagnostics(file_position.file_id, true).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n@@ -327,7 +334,7 @@ mod tests {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n         let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n-        let diagnostic = analysis.diagnostics(current_file_id).unwrap().pop().unwrap();\n+        let diagnostic = analysis.diagnostics(current_file_id, true).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap();\n         let changed_file_id = edit.file_id;\n@@ -348,14 +355,14 @@ mod tests {\n         let analysis = mock.analysis();\n         let diagnostics = files\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id).unwrap())\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n             .collect::<Vec<_>>();\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n \n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n-        let diagnostics = analysis.diagnostics(file_id).unwrap();\n+        let diagnostics = analysis.diagnostics(file_id, true).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n "}, {"sha": "4c4d9f6fa9dd571d4f12fff570bd4d67a59242ca", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "patch": "@@ -487,8 +487,12 @@ impl Analysis {\n     }\n \n     /// Computes the set of diagnostics for the given file.\n-    pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| diagnostics::diagnostics(db, file_id))\n+    pub fn diagnostics(\n+        &self,\n+        file_id: FileId,\n+        enable_experimental: bool,\n+    ) -> Cancelable<Vec<Diagnostic>> {\n+        self.with_db(|db| diagnostics::diagnostics(db, file_id, enable_experimental))\n     }\n \n     /// Returns the edit required to rename reference at the position to the new"}, {"sha": "076184ad6e99c420a644ab3d1a9c6481ded5ad4e", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "patch": "@@ -70,7 +70,7 @@ pub fn analysis_bench(\n     match &what {\n         BenchWhat::Highlight { .. } => {\n             let res = do_work(&mut host, file_id, |analysis| {\n-                analysis.diagnostics(file_id).unwrap();\n+                analysis.diagnostics(file_id, true).unwrap();\n                 analysis.highlight_as_html(file_id, false).unwrap()\n             });\n             if verbosity.is_verbose() {"}, {"sha": "4ac8c8772eba344d3509e4d7ca44b0d4c63b9fd2", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "patch": "@@ -47,7 +47,7 @@ pub fn diagnostics(\n                 String::from(\"unknown\")\n             };\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n-            for diagnostic in analysis.diagnostics(file_id).unwrap() {\n+            for diagnostic in analysis.diagnostics(file_id, true).unwrap() {\n                 if matches!(diagnostic.severity, Severity::Error) {\n                     found_error = true;\n                 }"}, {"sha": "cd309ed744ca33c17814792b04b6dd23d8fe94a0", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92a4ec80a0ce1dd834578f53ea3fd018530ec0e6/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=92a4ec80a0ce1dd834578f53ea3fd018530ec0e6", "patch": "@@ -774,7 +774,7 @@ fn handle_fixes(\n         None => {}\n     };\n \n-    let diagnostics = snap.analysis.diagnostics(file_id)?;\n+    let diagnostics = snap.analysis.diagnostics(file_id, snap.config.experimental_diagnostics)?;\n \n     let fixes_from_diagnostics = diagnostics\n         .into_iter()\n@@ -1040,7 +1040,7 @@ pub(crate) fn publish_diagnostics(\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n-        .diagnostics(file_id)?\n+        .diagnostics(file_id, snap.config.experimental_diagnostics)?\n         .into_iter()\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),"}]}