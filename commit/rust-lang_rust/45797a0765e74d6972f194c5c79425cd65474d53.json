{"sha": "45797a0765e74d6972f194c5c79425cd65474d53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Nzk3YTA3NjVlNzRkNjk3MmYxOTRjNWM3OTQyNWNkNjU0NzRkNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-10T07:52:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-10T07:52:00Z"}, "message": "auto merge of #17037 : kmcallister/rust/no-stack-check, r=thestinger\n\nr? @brson \r\n\r\nFixes #16980.", "tree": {"sha": "ed735d2e6ba239ccac645e393bb58030944aa62f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed735d2e6ba239ccac645e393bb58030944aa62f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45797a0765e74d6972f194c5c79425cd65474d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45797a0765e74d6972f194c5c79425cd65474d53", "html_url": "https://github.com/rust-lang/rust/commit/45797a0765e74d6972f194c5c79425cd65474d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45797a0765e74d6972f194c5c79425cd65474d53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74208bc12390b168e4a342de27d806639d89ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74208bc12390b168e4a342de27d806639d89ffe", "html_url": "https://github.com/rust-lang/rust/commit/b74208bc12390b168e4a342de27d806639d89ffe"}, {"sha": "bc3831b7303b10781327d270dca2524cefdbff3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc3831b7303b10781327d270dca2524cefdbff3d", "html_url": "https://github.com/rust-lang/rust/commit/bc3831b7303b10781327d270dca2524cefdbff3d"}], "stats": {"total": 153, "additions": 121, "deletions": 32}, "files": [{"sha": "f5423b22fe2ef0b360ff4933cd8821a8250678fe", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -390,6 +390,8 @@ cgoptions!(\n         \"divide crate into N units to optimize in parallel\"),\n     remark: Passes = (SomePasses(Vec::new()), parse_passes,\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n+    no_stack_check: bool = (false, parse_bool,\n+        \"disable checks for stack exhaustion (a memory-safety hazard!)\"),\n )\n \n pub fn build_codegen_options(matches: &getopts::Matches) -> CodegenOptions"}, {"sha": "e0e16390e353fc82bc0a6901e5231660aef1d15a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -571,6 +571,7 @@ impl LintPass for UnusedAttribute {\n             \"no_builtins\",\n             \"no_mangle\",\n             \"no_split_stack\",\n+            \"no_stack_check\",\n             \"packed\",\n             \"static_assert\",\n             \"thread_local\","}, {"sha": "692017b67501136ef95c795f31980de8b94ed184", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -204,7 +204,7 @@ pub fn decl_fn(ccx: &CrateContext, name: &str, cc: llvm::CallConv,\n     // Function addresses in Rust are never significant, allowing functions to be merged.\n     llvm::SetUnnamedAddr(llfn, true);\n \n-    if ccx.is_split_stack_supported() {\n+    if ccx.is_split_stack_supported() && !ccx.sess().opts.cg.no_stack_check {\n         set_split_stack(llfn);\n     }\n \n@@ -245,7 +245,7 @@ fn get_extern_rust_fn(ccx: &CrateContext, fn_ty: ty::t, name: &str, did: ast::De\n     let f = decl_rust_fn(ccx, fn_ty, name);\n \n     csearch::get_item_attrs(&ccx.sess().cstore, did, |attrs| {\n-        set_llvm_fn_attrs(attrs.as_slice(), f)\n+        set_llvm_fn_attrs(ccx, attrs.as_slice(), f)\n     });\n \n     ccx.externs().borrow_mut().insert(name.to_string(), f);\n@@ -450,7 +450,7 @@ pub fn set_inline_hint(f: ValueRef) {\n     llvm::SetFunctionAttribute(f, llvm::InlineHintAttribute)\n }\n \n-pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n+pub fn set_llvm_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) {\n     use syntax::attr::*;\n     // Set the inline hint if there is one\n     match find_inline_attr(attrs) {\n@@ -460,16 +460,24 @@ pub fn set_llvm_fn_attrs(attrs: &[ast::Attribute], llfn: ValueRef) {\n         InlineNone   => { /* fallthrough */ }\n     }\n \n-    // Add the no-split-stack attribute if requested\n-    if contains_name(attrs, \"no_split_stack\") {\n-        unset_split_stack(llfn);\n-    }\n-\n-    if contains_name(attrs, \"cold\") {\n-        unsafe {\n-            llvm::LLVMAddFunctionAttribute(llfn,\n-                                           llvm::FunctionIndex as c_uint,\n-                                           llvm::ColdAttribute as uint64_t)\n+    for attr in attrs.iter() {\n+        let mut used = true;\n+        match attr.name().get() {\n+            \"no_stack_check\" => unset_split_stack(llfn),\n+            \"no_split_stack\" => {\n+                unset_split_stack(llfn);\n+                ccx.sess().span_warn(attr.span,\n+                                     \"no_split_stack is a deprecated synonym for no_stack_check\");\n+            }\n+            \"cold\" => unsafe {\n+                llvm::LLVMAddFunctionAttribute(llfn,\n+                                               llvm::FunctionIndex as c_uint,\n+                                               llvm::ColdAttribute as uint64_t)\n+            },\n+            _ => used = false,\n+        }\n+        if used {\n+            attr::mark_used(attr);\n         }\n     }\n }\n@@ -2732,7 +2740,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                                                                    sym,\n                                                                    i.id)\n                     };\n-                    set_llvm_fn_attrs(i.attrs.as_slice(), llfn);\n+                    set_llvm_fn_attrs(ccx, i.attrs.as_slice(), llfn);\n                     llfn\n                 }\n \n@@ -2874,7 +2882,7 @@ fn register_method(ccx: &CrateContext, id: ast::NodeId,\n     let sym = exported_name(ccx, id, mty, m.attrs.as_slice());\n \n     let llfn = register_fn(ccx, m.span, sym, id, mty);\n-    set_llvm_fn_attrs(m.attrs.as_slice(), llfn);\n+    set_llvm_fn_attrs(ccx, m.attrs.as_slice(), llfn);\n     llfn\n }\n "}, {"sha": "e47adb6bc0e0352777a819dd7b01703b3057cd6d", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -640,7 +640,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                id, t.repr(tcx));\n \n         let llfn = base::decl_internal_rust_fn(ccx, t, ps.as_slice());\n-        base::set_llvm_fn_attrs(attrs, llfn);\n+        base::set_llvm_fn_attrs(ccx, attrs, llfn);\n         base::trans_fn(ccx, decl, body, llfn, param_substs, id, []);\n         llfn\n     }"}, {"sha": "e2c1bf1d8d1a5a45465105538a71642533889fe3", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -149,7 +149,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n     };\n     let setup_lldecl = |lldecl, attrs: &[ast::Attribute]| {\n         base::update_linkage(ccx, lldecl, None, base::OriginalTranslation);\n-        set_llvm_fn_attrs(attrs, lldecl);\n+        set_llvm_fn_attrs(ccx, attrs, lldecl);\n \n         let is_first = !ccx.available_monomorphizations().borrow().contains(&s);\n         if is_first {"}, {"sha": "9a67e5c72acec1f9453b13b939e108f84e9c0546", "filename": "src/librustrt/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustrt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Flibrustrt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fthread.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -39,9 +39,9 @@ static DEFAULT_STACK_SIZE: uint = 1024 * 1024;\n \n // This is the starting point of rust os threads. The first thing we do\n // is make sure that we don't trigger __morestack (also why this has a\n-// no_split_stack annotation), and then we extract the main function\n+// no_stack_check annotation), and then we extract the main function\n // and invoke it.\n-#[no_split_stack]\n+#[no_stack_check]\n extern fn thread_start(main: *mut libc::c_void) -> imp::rust_thread_return {\n     unsafe {\n         stack::record_os_managed_stack_bounds(0, uint::MAX);"}, {"sha": "b68eec386a595fe14d8db4e5188fce25e81b7e7a", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -11,7 +11,7 @@\n // ignore-android: FIXME(#10381)\n \n // This test case checks if function arguments already have the correct value when breaking at the\n-// beginning of a function. Functions with the #[no_split_stack] attribute have the same prologue as\n+// beginning of a function. Functions with the #[no_stack_check] attribute have the same prologue as\n // regular C functions compiled with GCC or Clang and therefore are better handled by GDB. As a\n // consequence, and as opposed to regular Rust functions, we can set the breakpoints via the\n // function name (and don't have to fall back on using line numbers). For LLDB this shouldn't make\n@@ -246,7 +246,7 @@\n \n #![allow(unused_variable)]\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn immediate_args(a: int, b: bool, c: f64) {\n     ()\n }\n@@ -262,42 +262,42 @@ struct BigStruct {\n     h: u64\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn non_immediate_args(a: BigStruct, b: BigStruct) {\n     ()\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn binding(a: i64, b: u64, c: f64) {\n     let x = 0i;\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn assignment(mut a: u64, b: u64, c: f64) {\n     a = b;\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn function_call(x: u64, y: u64, z: f64) {\n     std::io::stdio::print(\"Hi!\")\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn identifier(x: u64, y: u64, z: f64) -> u64 {\n     x\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn return_expr(x: u64, y: u64, z: f64) -> u64 {\n     return x;\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn arithmetic_expr(x: u64, y: u64, z: f64) -> u64 {\n     x + y\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn if_expr(x: u64, y: u64, z: f64) -> u64 {\n     if x + y < 1000 {\n         x\n@@ -306,15 +306,15 @@ fn if_expr(x: u64, y: u64, z: f64) -> u64 {\n     }\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn while_expr(mut x: u64, y: u64, z: u64) -> u64 {\n     while x + y < 1000 {\n         x += z\n     }\n     return x;\n }\n \n-#[no_split_stack]\n+#[no_stack_check]\n fn loop_expr(mut x: u64, y: u64, z: u64) -> u64 {\n     loop {\n         x += z;", "previous_filename": "src/test/debuginfo/function-prologue-stepping-no-split-stack.rs"}, {"sha": "561056d719e60da25360aa25b2bd8aaeaf409afb", "filename": "src/test/run-make/no-stack-check/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-make%2Fno-stack-check%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-make%2Fno-stack-check%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-stack-check%2FMakefile?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -0,0 +1,15 @@\n+-include ../tools.mk\n+\n+ifndef IS_WINDOWS\n+all:\n+\t$(RUSTC) -O --emit asm attr.rs\n+\t! grep -q morestack $(TMPDIR)/attr.s\n+\t$(RUSTC) -O --emit asm flag.rs\n+\tgrep -q morestack $(TMPDIR)/flag.s\n+\t$(RUSTC) -O --emit asm -C no-stack-check flag.rs\n+\t! grep -q morestack $(TMPDIR)/flag.s\n+else\n+# On Windows we use __chkstk and it only appears in functions with large allocations,\n+# so this test wouldn't be reliable.\n+all:\n+endif"}, {"sha": "ef2db932b418d625eb4374479f142f1a6c2e7efe", "filename": "src/test/run-make/no-stack-check/attr.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-make%2Fno-stack-check%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-make%2Fno-stack-check%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-stack-check%2Fattr.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+extern {\n+    // Prevents optimizing away the stack buffer.\n+    // This symbol is undefined, but the code doesn't need to pass\n+    // the linker.\n+    fn black_box(ptr: *const u8);\n+}\n+\n+#[no_stack_check]\n+pub unsafe fn foo() {\n+    // Make sure we use the stack\n+    let x: [u8, ..50] = [0, ..50];\n+    black_box(x.as_ptr());\n+}"}, {"sha": "ee0364001e19a8258d8c677302d18c9fca6593be", "filename": "src/test/run-make/no-stack-check/flag.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-make%2Fno-stack-check%2Fflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-make%2Fno-stack-check%2Fflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-stack-check%2Fflag.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+extern {\n+    // Prevents optimizing away the stack buffer.\n+    // This symbol is undefined, but the code doesn't need to pass\n+    // the linker.\n+    fn black_box(ptr: *const u8);\n+}\n+\n+pub unsafe fn foo() {\n+    // Make sure we use the stack\n+    let x: [u8, ..50] = [0, ..50];\n+    black_box(x.as_ptr());\n+}"}, {"sha": "31ba5dde8155df9bd3b8a7433b34d045c799b023", "filename": "src/test/run-pass/deprecated-no-split-stack.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-pass%2Fdeprecated-no-split-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-pass%2Fdeprecated-no-split-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeprecated-no-split-stack.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//~ WARNING no_split_stack is a deprecated synonym for no_stack_check\n+#[no_split_stack]\n+fn main() {\n+}"}, {"sha": "65307c5e7b559d498c0a57cdfc8109140082a9a0", "filename": "src/test/run-pass/smallest-hello-world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45797a0765e74d6972f194c5c79425cd65474d53/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs?ref=45797a0765e74d6972f194c5c79425cd65474d53", "patch": "@@ -25,7 +25,7 @@ extern \"rust-intrinsic\" { fn transmute<T, U>(t: T) -> U; }\n #[lang = \"fail_fmt\"] fn fail_fmt() -> ! { loop {} }\n \n #[start]\n-#[no_split_stack]\n+#[no_stack_check]\n fn main(_: int, _: *const *const u8) -> int {\n     unsafe {\n         let (ptr, _): (*const u8, uint) = transmute(\"Hello!\\0\");"}]}