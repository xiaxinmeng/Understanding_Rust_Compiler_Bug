{"sha": "1d62e9536853723f3492c5ec722e163ab7849dfc", "node_id": "C_kwDOAAsO6NoAKDFkNjJlOTUzNjg1MzcyM2YzNDkyYzVlYzcyMmUxNjNhYjc4NDlkZmM", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-04-24T16:12:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-24T16:12:49Z"}, "message": "Merge pull request #164 from yvt/no-intel-syntax\n\nDon't emit `.intel_syntax` for non-x86 targets", "tree": {"sha": "4653fb8682a518f28d2d7adc3abac8010bf0fd78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4653fb8682a518f28d2d7adc3abac8010bf0fd78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d62e9536853723f3492c5ec722e163ab7849dfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZXcCCRBK7hj4Ov3rIwAAFWwIAJPZf6/Vh++H2+5RnPjaB3Bo\nrjFs3/gXkv4H28gNBZFbUNS4PAYGEHqFN6ym+2VJJYnJVKIZjW49EqaSDuf7WB82\nVJe0jCh5hI3LZDVRHG9+YrIDPDogqIc3qzWUDTG0eC4b+YvT0T0UDzKSCVo9TnEG\n2x5bbyLtcML/G8jd/sF8haFjx4Lic935Ejm+rMeEvExVbrqju5EO4ZjEB1DrUGe0\nx0/VnpyPBOCGvCajoTf50izi5t7NPuyBFqylMUVDosKntQ7S2TvlS7qGBlYYuYc6\nsnHhkPULphlHyBT01ogCuWnkXbIvNqFIxiKpQJdumyOVRPwr40hVyoucsGa4jsw=\n=n59f\n-----END PGP SIGNATURE-----\n", "payload": "tree 4653fb8682a518f28d2d7adc3abac8010bf0fd78\nparent b30a8f31f5db66c6b5519243b536acdaa74af757\nparent a0742bdd063192bb6af37d9bdcac4a43b09fb975\nauthor antoyo <antoyo@users.noreply.github.com> 1650816769 -0400\ncommitter GitHub <noreply@github.com> 1650816769 -0400\n\nMerge pull request #164 from yvt/no-intel-syntax\n\nDon't emit `.intel_syntax` for non-x86 targets"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d62e9536853723f3492c5ec722e163ab7849dfc", "html_url": "https://github.com/rust-lang/rust/commit/1d62e9536853723f3492c5ec722e163ab7849dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d62e9536853723f3492c5ec722e163ab7849dfc/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b30a8f31f5db66c6b5519243b536acdaa74af757", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30a8f31f5db66c6b5519243b536acdaa74af757", "html_url": "https://github.com/rust-lang/rust/commit/b30a8f31f5db66c6b5519243b536acdaa74af757"}, {"sha": "a0742bdd063192bb6af37d9bdcac4a43b09fb975", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0742bdd063192bb6af37d9bdcac4a43b09fb975", "html_url": "https://github.com/rust-lang/rust/commit/a0742bdd063192bb6af37d9bdcac4a43b09fb975"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "2d41fe425844c13325ea9997d6d85822400d434d", "filename": "src/asm.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d62e9536853723f3492c5ec722e163ab7849dfc/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d62e9536853723f3492c5ec722e163ab7849dfc/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=1d62e9536853723f3492c5ec722e163ab7849dfc", "patch": "@@ -116,7 +116,6 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n         let is_x86 = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64);\n         let att_dialect = is_x86 && options.contains(InlineAsmOptions::ATT_SYNTAX);\n-        let intel_dialect = is_x86 && !options.contains(InlineAsmOptions::ATT_SYNTAX);\n \n         // GCC index of an output operand equals its position in the array\n         let mut outputs = vec![];\n@@ -354,7 +353,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // 3. Build the template string\n \n         let mut template_str = String::with_capacity(estimate_template_length(template, constants_len, att_dialect));\n-        if !intel_dialect {\n+        if att_dialect {\n             template_str.push_str(ATT_SYNTAX_INS);\n         }\n \n@@ -436,7 +435,7 @@ impl<'a, 'gcc, 'tcx> AsmBuilderMethods<'tcx> for Builder<'a, 'gcc, 'tcx> {\n             }\n         }\n \n-        if !intel_dialect {\n+        if att_dialect {\n             template_str.push_str(INTEL_SYNTAX_INS);\n         }\n \n@@ -661,8 +660,8 @@ impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n         let asm_arch = self.tcx.sess.asm_arch.unwrap();\n \n         // Default to Intel syntax on x86\n-        let intel_syntax = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64)\n-            && !options.contains(InlineAsmOptions::ATT_SYNTAX);\n+        let att_dialect = matches!(asm_arch, InlineAsmArch::X86 | InlineAsmArch::X86_64)\n+            && options.contains(InlineAsmOptions::ATT_SYNTAX);\n \n         // Build the template string\n         let mut template_str = String::new();\n@@ -696,11 +695,11 @@ impl<'gcc, 'tcx> AsmMethods for CodegenCx<'gcc, 'tcx> {\n         }\n \n         let template_str =\n-            if intel_syntax {\n-                format!(\"{}\\n\\t.intel_syntax noprefix\", template_str)\n+            if att_dialect {\n+                format!(\".att_syntax\\n\\t{}\\n\\t.intel_syntax noprefix\", template_str)\n             }\n             else {\n-                format!(\".att_syntax\\n\\t{}\\n\\t.intel_syntax noprefix\", template_str)\n+                template_str\n             };\n         // NOTE: seems like gcc will put the asm in the wrong section, so set it to .text manually.\n         let template_str = format!(\".pushsection .text\\n{}\\n.popsection\", template_str);"}]}