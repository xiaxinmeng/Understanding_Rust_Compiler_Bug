{"sha": "d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YjE1MjcwMWViYTVmNzhiYjkyOTVjNGZhNjBhZDBhOWVjM2ZmNTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:40:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:36Z"}, "message": "librustc: De-`@mut` `building_library` in the session", "tree": {"sha": "a15b8f7d57fb5954e77ebd33ce34e9bbb02e6053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a15b8f7d57fb5954e77ebd33ce34e9bbb02e6053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "html_url": "https://github.com/rust-lang/rust/commit/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56bac7f409f0e555120894b12f3d4448ec07fe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56bac7f409f0e555120894b12f3d4448ec07fe5", "html_url": "https://github.com/rust-lang/rust/commit/c56bac7f409f0e555120894b12f3d4448ec07fe5"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "9eff923e651edda945c09ebfdbba5e62af25ffb4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -166,7 +166,7 @@ pub fn phase_2_configure_and_expand(sess: Session,\n                                     mut crate: ast::Crate) -> ast::Crate {\n     let time_passes = sess.time_passes();\n \n-    *sess.building_library = session::building_library(sess.opts, &crate);\n+    sess.building_library.set(session::building_library(sess.opts, &crate));\n     *sess.outputs = session::collect_outputs(sess.opts, crate.attrs);\n \n     time(time_passes, \"gated feature checking\", (), |_|\n@@ -878,7 +878,7 @@ pub fn build_session_(sopts: @session::options,\n         entry_type: Cell::new(None),\n         span_diagnostic: span_diagnostic_handler,\n         filesearch: filesearch,\n-        building_library: @mut false,\n+        building_library: Cell::new(false),\n         working_dir: os::getcwd(),\n         lints: RefCell::new(HashMap::new()),\n         node_id: Cell::new(1),\n@@ -1039,7 +1039,7 @@ pub fn build_output_filenames(input: &input,\n               }\n           }\n \n-          if *sess.building_library {\n+          if sess.building_library.get() {\n               out_path = dirpath.join(os::dll_filename(stem));\n               obj_path = {\n                   let mut p = dirpath.join(stem);\n@@ -1060,7 +1060,7 @@ pub fn build_output_filenames(input: &input,\n             out_file.with_extension(obj_suffix)\n         };\n \n-        if *sess.building_library {\n+        if sess.building_library.get() {\n             sess.warn(\"ignoring specified output filename for library.\");\n         }\n "}, {"sha": "8bcefbd7c76e0db9b6f6415d4464a2eb93f788fd", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -210,7 +210,7 @@ pub struct Session_ {\n     entry_type: Cell<Option<EntryFnType>>,\n     span_diagnostic: @mut diagnostic::span_handler,\n     filesearch: @filesearch::FileSearch,\n-    building_library: @mut bool,\n+    building_library: Cell<bool>,\n     working_dir: Path,\n     lints: RefCell<HashMap<ast::NodeId,\n                            ~[(lint::lint, codemap::Span, ~str)]>>,"}, {"sha": "03f9a3459a3a90243ff68a80acb2325e93ba75a6", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -69,7 +69,7 @@ impl fold::ast_fold for StandardLibraryInjector {\n             span: dummy_sp()\n         }];\n \n-        if use_uv(&crate) && !*self.sess.building_library {\n+        if use_uv(&crate) && !self.sess.building_library.get() {\n             vis.push(ast::view_item {\n                 node: ast::view_item_extern_mod(self.sess.ident_of(\"green\"),\n                                                 None,"}, {"sha": "47ef4b94058ba1cc32157c3d5753fee2f83dbf00", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -127,7 +127,7 @@ impl fold::ast_fold for TestHarnessGenerator {\n         // the one we're going to add. Only if compiling an executable.\n \n         fn nomain(cx: @TestCtxt, item: @ast::item) -> @ast::item {\n-            if !*cx.sess.building_library {\n+            if !cx.sess.building_library.get() {\n                 @ast::item {\n                     attrs: item.attrs.iter().filter_map(|attr| {\n                         if \"main\" != attr.name() {"}, {"sha": "53a8b93c232da086dd394eb4bf3daf9cfa782386", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -45,7 +45,7 @@ impl Visitor<()> for EntryContext {\n }\n \n pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map) {\n-    if *session.building_library {\n+    if session.building_library.get() {\n         // No need to find a main function\n         return;\n     }\n@@ -131,7 +131,7 @@ fn configure_main(this: &mut EntryContext) {\n         this.session.entry_fn.set(this.main_fn);\n         this.session.entry_type.set(Some(session::EntryMain));\n     } else {\n-        if !*this.session.building_library {\n+        if !this.session.building_library.get() {\n             // No main function\n             this.session.err(\"main function not found\");\n             if !this.non_main_fns.is_empty() {"}, {"sha": "9a5e08e41aa238e0c98f52e8a4d063a20b054fbc", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -303,7 +303,7 @@ impl ReachableContext {\n     fn propagate_node(&self, node: &ast_map::ast_node,\n                       search_item: ast::NodeId,\n                       visitor: &mut MarkSymbolVisitor) {\n-        if !*self.tcx.sess.building_library {\n+        if !self.tcx.sess.building_library.get() {\n             // If we are building an executable, then there's no need to flag\n             // anything as external except for `extern fn` types. These\n             // functions may still participate in some form of native interface,"}, {"sha": "0b2ee710e991324e011b552ddc82f303469f80c5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -2344,7 +2344,7 @@ fn finish_register_fn(ccx: @CrateContext, sp: Span, sym: ~str, node_id: ast::Nod\n         }\n     }\n \n-    if is_entry_fn(&ccx.sess, node_id) && !*ccx.sess.building_library {\n+    if is_entry_fn(&ccx.sess, node_id) && !ccx.sess.building_library.get() {\n         create_entry_wrapper(ccx, sp, llfn);\n     }\n }\n@@ -2678,7 +2678,7 @@ pub fn get_item_val(ccx: @CrateContext, id: ast::NodeId) -> ValueRef {\n                             // library then we've already declared the crate map\n                             // so use that instead.\n                             if attr::contains_name(ni.attrs, \"crate_map\") {\n-                                if *ccx.sess.building_library {\n+                                if ccx.sess.building_library.get() {\n                                     let s = \"_rust_crate_map_toplevel\";\n                                     let g = unsafe {\n                                         s.with_c_str(|buf| {\n@@ -3044,7 +3044,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let mut n_subcrates = 1;\n     let cstore = sess.cstore;\n     while cstore.have_crate_data(n_subcrates) { n_subcrates += 1; }\n-    let is_top = !*sess.building_library || sess.gen_crate_map();\n+    let is_top = !sess.building_library.get() || sess.gen_crate_map();\n     let sym_name = if is_top {\n         ~\"_rust_crate_map_toplevel\"\n     } else {\n@@ -3154,7 +3154,9 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::encode_\n pub fn write_metadata(cx: &CrateContext, crate: &ast::Crate) -> ~[u8] {\n     use extra::flate;\n \n-    if !*cx.sess.building_library { return ~[]; }\n+    if !cx.sess.building_library.get() {\n+        return ~[]\n+    }\n \n     let encode_inlined_item: encoder::encode_inlined_item =\n         |ecx, ebml_w, path, ii|\n@@ -3227,8 +3229,7 @@ pub fn trans_crate(sess: session::Session,\n     // __rust_crate_map_toplevel symbol (extra underscore) which it will\n     // subsequently fail to find. So to mitigate that we just introduce\n     // an alias from the symbol it expects to the one that actually exists.\n-    if ccx.sess.targ_cfg.os == OsWin32 &&\n-       !*ccx.sess.building_library {\n+    if ccx.sess.targ_cfg.os == OsWin32 && !ccx.sess.building_library.get() {\n \n         let maptype = val_ty(ccx.crate_map).to_ref();\n "}, {"sha": "9a1e6cbeaba039c387887698fbda1f8de48e35e7", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=d7b152701eba5f78bb9295c4fa60ad0a9ec3ff50", "patch": "@@ -438,7 +438,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n \n fn check_for_entry_fn(ccx: &CrateCtxt) {\n     let tcx = ccx.tcx;\n-    if !*tcx.sess.building_library {\n+    if !tcx.sess.building_library.get() {\n         match tcx.sess.entry_fn.get() {\n           Some((id, sp)) => match tcx.sess.entry_type.get() {\n               Some(session::EntryMain) => check_main_fn_ty(ccx, id, sp),"}]}