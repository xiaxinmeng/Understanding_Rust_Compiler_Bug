{"sha": "fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTE0YWE4OGE1MjVlYjZkNzhkMDMzMWZjNTlmYTJkMGE2MGIzYjY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-01-14T14:26:03Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: centralize region printing in ty::RegionKind's Print impl.", "tree": {"sha": "71827611e162ff5587143d07491e2f9378654596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71827611e162ff5587143d07491e2f9378654596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "html_url": "https://github.com/rust-lang/rust/commit/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafd83d1d5f81ac1ed74bf97a950120505009a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafd83d1d5f81ac1ed74bf97a950120505009a23", "html_url": "https://github.com/rust-lang/rust/commit/cafd83d1d5f81ac1ed74bf97a950120505009a23"}], "stats": {"total": 251, "additions": 72, "deletions": 179}, "files": [{"sha": "974b9c59ea42cb8f7f481f460fc4538994ce0549", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     self.hir().span_by_hir_id(node),\n                 ),\n                 _ => (\n-                    format!(\"the lifetime {} as defined on\", fr.bound_region),\n+                    format!(\"the lifetime {} as defined on\", region),\n                     cm.def_span(self.hir().span_by_hir_id(node)),\n                 ),\n             },\n@@ -1497,7 +1497,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         var_origin: RegionVariableOrigin,\n     ) -> DiagnosticBuilder<'tcx> {\n         let br_string = |br: ty::BoundRegion| {\n-            let mut s = br.to_string();\n+            let mut s = match br {\n+                ty::BrNamed(_, name) => name.to_string(),\n+                _ => String::new(),\n+            };\n             if !s.is_empty() {\n                 s.push_str(\" \");\n             }"}, {"sha": "4a3e814cf476de7d433158dd9a9039eab45f14df", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "patch": "@@ -71,6 +71,13 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             }\n         }\n \n+        let br_string = |br: ty::BoundRegion| {\n+            match br {\n+                ty::BrNamed(_, name) => format!(\" {}\", name),\n+                _ => String::new(),\n+            }\n+        };\n+\n         match *self {\n             CyclicTy(_) => write!(f, \"cyclic type of infinite size\"),\n             Mismatch => write!(f, \"types differ\"),\n@@ -105,15 +112,13 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             }\n             RegionsInsufficientlyPolymorphic(br, _) => {\n                 write!(f,\n-                       \"expected bound lifetime parameter{}{}, found concrete lifetime\",\n-                       if br.is_named() { \" \" } else { \"\" },\n-                       br)\n+                       \"expected bound lifetime parameter{}, found concrete lifetime\",\n+                       br_string(br))\n             }\n             RegionsOverlyPolymorphic(br, _) => {\n                 write!(f,\n-                       \"expected concrete lifetime, found bound lifetime parameter{}{}\",\n-                       if br.is_named() { \" \" } else { \"\" },\n-                       br)\n+                       \"expected concrete lifetime, found bound lifetime parameter{}\",\n+                       br_string(br))\n             }\n             RegionsPlaceholderMismatch => {\n                 write!(f, \"one type is more general than the other\")"}, {"sha": "4e1fdf657bd5f25dcd6e69eba3f17b6606126b4a", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "patch": "@@ -136,11 +136,6 @@ impl RegionHighlightMode {\n         assert!(self.highlight_bound_region.is_none());\n         self.highlight_bound_region = Some((br, number));\n     }\n-\n-    /// Returns `Some(N)` if the placeholder `p` is highlighted to print as \"`'N`\".\n-    pub(crate) fn placeholder_highlight(&self, p: ty::PlaceholderRegion) -> Option<usize> {\n-        self.region_highlighted(&ty::RePlaceholder(p))\n-    }\n }\n \n struct LateBoundRegionNameCollector(FxHashSet<InternedString>);"}, {"sha": "1ac6f3fea4c5a46044cbb6ff54e5c7d21cd250ad", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 56, "deletions": 166, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fc914aa88a525eb6d78d0331fc59fa2d0a60b3b6", "patch": "@@ -2,7 +2,6 @@ use crate::hir::def::Namespace;\n use crate::hir::def_id::DefId;\n use crate::middle::region;\n use crate::ty::subst::{Kind, Subst, SubstsRef, UnpackedKind};\n-use crate::ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use crate::ty::{Bool, Char, Adt};\n use crate::ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n use crate::ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n@@ -471,119 +470,34 @@ define_print! {\n     }\n }\n \n-define_print! {\n-    () ty::BoundRegion, (self, cx) {\n-        display {\n-            if cx.config.is_verbose {\n-                return self.print_debug(cx);\n-            }\n-\n-            if let BrNamed(_, name) = *self {\n-                if name != \"\" && name != \"'_\" {\n-                    p!(write(\"{}\", name));\n-                    return Ok(cx.printer);\n-                }\n-            }\n-\n-            let highlight = cx.printer.region_highlight_mode();\n-            if let Some((region, counter)) = highlight.highlight_bound_region {\n-                if *self == region {\n-                    p!(write(\"'{}\", counter));\n-                }\n-            }\n-        }\n-        debug {\n-            match *self {\n-                BrAnon(n) => p!(write(\"BrAnon({:?})\", n)),\n-                BrFresh(n) => p!(write(\"BrFresh({:?})\", n)),\n-                BrNamed(did, name) => {\n-                    p!(write(\"BrNamed({:?}:{:?}, {})\",\n-                           did.krate, did.index, name))\n-                }\n-                BrEnv => p!(write(\"BrEnv\")),\n-            }\n-        }\n-    }\n-}\n-\n-// HACK(eddyb) (see `ty::RegionKind::display_outputs_anything`)\n-//\n-// NB: this must be kept in sync with the printing logic above.\n-impl ty::BoundRegion {\n-    fn display_outputs_anything<P>(&self, cx: &PrintCx<'_, '_, '_, P>) -> bool\n-        where P: PrettyPrinter\n-    {\n-        if cx.config.is_verbose {\n-            return true;\n-        }\n-\n-        if let BrNamed(_, name) = *self {\n-            if name != \"\" && name != \"'_\" {\n-                return true;\n-            }\n-        }\n-\n-        let highlight = cx.printer.region_highlight_mode();\n-        if let Some((region, _)) = highlight.highlight_bound_region {\n-            if *self == region {\n-                return true;\n+impl fmt::Debug for ty::BoundRegion {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match *self {\n+            ty::BrAnon(n) => write!(f, \"BrAnon({:?})\", n),\n+            ty::BrFresh(n) => write!(f, \"BrFresh({:?})\", n),\n+            ty::BrNamed(did, name) => {\n+                write!(f, \"BrNamed({:?}:{:?}, {})\",\n+                        did.krate, did.index, name)\n             }\n+            ty::BrEnv => write!(f, \"BrEnv\"),\n         }\n-\n-        false\n     }\n }\n \n define_print! {\n-    () ty::PlaceholderRegion, (self, cx) {\n+    () ty::RegionKind, (self, cx) {\n         display {\n-            if cx.config.is_verbose {\n-                return self.print_debug(cx);\n-            }\n-\n+            // Watch out for region highlights.\n             let highlight = cx.printer.region_highlight_mode();\n-            if let Some(counter) = highlight.placeholder_highlight(*self) {\n-                p!(write(\"'{}\", counter));\n-            } else {\n-                p!(print_display(self.name));\n+            if let Some(n) = highlight.region_highlighted(self) {\n+                p!(write(\"'{}\", n));\n+                return Ok(cx.printer);\n             }\n-        }\n-    }\n-}\n-\n-// HACK(eddyb) (see `ty::RegionKind::display_outputs_anything`)\n-//\n-// NB: this must be kept in sync with the printing logic above.\n-impl ty::PlaceholderRegion {\n-    fn display_outputs_anything<P>(&self, cx: &PrintCx<'_, '_, '_, P>) -> bool\n-        where P: PrettyPrinter\n-    {\n-        if cx.config.is_verbose {\n-            return true;\n-        }\n-\n-        let highlight = cx.printer.region_highlight_mode();\n-        if highlight.placeholder_highlight(*self).is_some() {\n-            return true;\n-        }\n \n-        self.name.display_outputs_anything(cx)\n-    }\n-}\n-\n-define_print! {\n-    () ty::RegionKind, (self, cx) {\n-        display {\n             if cx.config.is_verbose {\n                 return self.print_debug(cx);\n             }\n \n-            // Watch out for region highlights.\n-            if let Some(n) = cx.printer.region_highlight_mode().region_highlighted(self) {\n-                p!(write(\"'{}\", n));\n-                return Ok(cx.printer);\n-            }\n-\n             // These printouts are concise.  They do not contain all the information\n             // the user might want to diagnose an error, but there is basically no way\n             // to fit that into a short string.  Hence the recommendation to use\n@@ -595,11 +509,20 @@ define_print! {\n                     }\n                 }\n                 ty::ReLateBound(_, br) |\n-                ty::ReFree(ty::FreeRegion { bound_region: br, .. }) => {\n-                    p!(print_display(br))\n-                }\n-                ty::RePlaceholder(p) => {\n-                    p!(print_display(p))\n+                ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n+                ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+                    if let ty::BrNamed(_, name) = br {\n+                        if name != \"\" && name != \"'_\" {\n+                            p!(write(\"{}\", name));\n+                            return Ok(cx.printer);\n+                        }\n+                    }\n+\n+                    if let Some((region, counter)) = highlight.highlight_bound_region {\n+                        if br == region {\n+                            p!(write(\"'{}\", counter));\n+                        }\n+                    }\n                 }\n                 ty::ReScope(scope) if cx.config.identify_regions => {\n                     match scope.data {\n@@ -619,11 +542,9 @@ define_print! {\n                     }\n                 }\n                 ty::ReVar(region_vid) if cx.config.identify_regions => {\n-                    p!(print_debug(region_vid))\n-                }\n-                ty::ReVar(region_vid) => {\n-                    p!(print_display(region_vid))\n+                    p!(write(\"{:?}\", region_vid));\n                 }\n+                ty::ReVar(_) => {}\n                 ty::ReScope(_) |\n                 ty::ReErased => {}\n                 ty::ReStatic => p!(write(\"'static\")),\n@@ -642,14 +563,11 @@ define_print! {\n                 }\n \n                 ty::ReClosureBound(ref vid) => {\n-                    p!(write(\"ReClosureBound({:?})\",\n-                           vid))\n+                    p!(write(\"ReClosureBound({:?})\", vid))\n                 }\n \n                 ty::ReLateBound(binder_id, ref bound_region) => {\n-                    p!(write(\"ReLateBound({:?}, \", binder_id),\n-                       print_debug(bound_region),\n-                       write(\")\"))\n+                    p!(write(\"ReLateBound({:?}, {:?})\", binder_id, bound_region))\n                 }\n \n                 ty::ReFree(ref fr) => p!(print_debug(fr)),\n@@ -661,11 +579,11 @@ define_print! {\n                 ty::ReStatic => p!(write(\"ReStatic\")),\n \n                 ty::ReVar(ref vid) => {\n-                    p!(print_debug(vid))\n+                    p!(write(\"{:?}\", vid));\n                 }\n \n                 ty::RePlaceholder(placeholder) => {\n-                    p!(write(\"RePlaceholder(\"), print_debug(placeholder), write(\")\"))\n+                    p!(write(\"RePlaceholder({:?})\", placeholder))\n                 }\n \n                 ty::ReEmpty => p!(write(\"ReEmpty\")),\n@@ -687,11 +605,12 @@ impl ty::RegionKind {\n     pub(crate) fn display_outputs_anything<P>(&self, cx: &PrintCx<'_, '_, '_, P>) -> bool\n         where P: PrettyPrinter\n     {\n-        if cx.config.is_verbose {\n+        let highlight = cx.printer.region_highlight_mode();\n+        if highlight.region_highlighted(self).is_some() {\n             return true;\n         }\n \n-        if cx.printer.region_highlight_mode().region_highlighted(self).is_some() {\n+        if cx.config.is_verbose {\n             return true;\n         }\n \n@@ -701,17 +620,27 @@ impl ty::RegionKind {\n             }\n \n             ty::ReLateBound(_, br) |\n-            ty::ReFree(ty::FreeRegion { bound_region: br, .. }) => {\n-                br.display_outputs_anything(cx)\n-            }\n+            ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n+            ty::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n+                if let ty::BrNamed(_, name) = br {\n+                    if name != \"\" && name != \"'_\" {\n+                        return true;\n+                    }\n+                }\n \n-            ty::RePlaceholder(p) => p.display_outputs_anything(cx),\n+                if let Some((region, _)) = highlight.highlight_bound_region {\n+                    if br == region {\n+                        return true;\n+                    }\n+                }\n+\n+                false\n+            }\n \n             ty::ReScope(_) |\n             ty::ReVar(_) if cx.config.identify_regions => true,\n \n-            ty::ReVar(region_vid) => region_vid.display_outputs_anything(cx),\n-\n+            ty::ReVar(_) |\n             ty::ReScope(_) |\n             ty::ReErased => false,\n \n@@ -788,48 +717,9 @@ impl fmt::Debug for ty::FloatVid {\n     }\n }\n \n-define_print! {\n-    () ty::RegionVid, (self, cx) {\n-        display {\n-            if cx.config.is_verbose {\n-                return self.print_debug(cx);\n-            }\n-\n-            let highlight = cx.printer.region_highlight_mode();\n-            if let Some(counter) = highlight.region_highlighted(&ty::ReVar(*self)) {\n-                p!(write(\"'{}\", counter));\n-            }\n-        }\n-        debug {\n-            // HACK(eddyb) this is duplicated from `display` printing,\n-            // to keep NLL borrowck working even with `-Zverbose`.\n-            let highlight = cx.printer.region_highlight_mode();\n-            if let Some(counter) = highlight.region_highlighted(&ty::ReVar(*self)) {\n-                p!(write(\"'{}\", counter));\n-            } else {\n-                p!(write(\"'_#{}r\", self.index()));\n-            }\n-        }\n-    }\n-}\n-\n-// HACK(eddyb) (see `ty::RegionKind::display_outputs_anything`)\n-//\n-// NB: this must be kept in sync with the printing logic above.\n-impl ty::RegionVid {\n-    fn display_outputs_anything<P>(&self, cx: &PrintCx<'_, '_, '_, P>) -> bool\n-        where P: PrettyPrinter\n-    {\n-        if cx.config.is_verbose {\n-            return true;\n-        }\n-\n-        let highlight = cx.printer.region_highlight_mode();\n-        if highlight.region_highlighted(&ty::ReVar(*self)).is_some() {\n-            return true;\n-        }\n-\n-        false\n+impl fmt::Debug for ty::RegionVid {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"'_#{}r\", self.index())\n     }\n }\n "}]}