{"sha": "b7e0969a4953f5fe63497aa2c4caed226c94175c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTA5NjlhNDk1M2Y1ZmU2MzQ5N2FhMmM0Y2FlZDIyNmM5NDE3NWM=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-09-11T00:04:51Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2014-09-14T19:35:48Z"}, "message": "Minimize the public interface and rename it to `map_in_place`", "tree": {"sha": "a59196b152c3b366fa0babd42bb54e7b7385ac27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a59196b152c3b366fa0babd42bb54e7b7385ac27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e0969a4953f5fe63497aa2c4caed226c94175c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e0969a4953f5fe63497aa2c4caed226c94175c", "html_url": "https://github.com/rust-lang/rust/commit/b7e0969a4953f5fe63497aa2c4caed226c94175c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e0969a4953f5fe63497aa2c4caed226c94175c/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5efa232160ff07de55cc0f62bfafdedb683789db", "url": "https://api.github.com/repos/rust-lang/rust/commits/5efa232160ff07de55cc0f62bfafdedb683789db", "html_url": "https://github.com/rust-lang/rust/commit/5efa232160ff07de55cc0f62bfafdedb683789db"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "e81c3b5a188b38525e5cf3355058336727d13861", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b7e0969a4953f5fe63497aa2c4caed226c94175c/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e0969a4953f5fe63497aa2c4caed226c94175c/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b7e0969a4953f5fe63497aa2c4caed226c94175c", "patch": "@@ -1713,7 +1713,7 @@ pub mod raw {\n /// An owned, partially type-converted vector.\n ///\n /// This struct takes two type parameters `T` and `U` which must be of the\n-/// same, non-zero size.\n+/// same, non-zero size having the same minimal alignment.\n ///\n /// No allocations are performed by usage, only a deallocation happens in the\n /// destructor which should only run when unwinding.\n@@ -1727,12 +1727,12 @@ pub mod raw {\n ///\n /// # Example\n ///\n-/// ```rust\n-/// let pv = PartialVec::from_vec(vec![0u, 1]);\n+/// ```ignore\n+/// let pv = PartialVec::from_vec(vec![0u32, 1]);\n /// assert_eq!(pv.pop(), Some(0));\n /// assert_eq!(pv.pop(), Some(1));\n /// assert_eq!(pv.pop(), None);\n-/// pv.push(2u);\n+/// pv.push(2u32);\n /// pv.push(3);\n /// assert_eq!(pv.into_vec().as_slice(), &[2, 3]);\n /// ```\n@@ -1759,7 +1759,7 @@ pub mod raw {\n //\n // (h) The `min_align_of` of `T` and `U` is equal.\n \n-pub struct PartialVec<T,U> {\n+struct PartialVec<T,U> {\n     vec: Vec<T>,\n \n     start_u: *mut U,\n@@ -1773,8 +1773,9 @@ impl<T,U> PartialVec<T,U> {\n     ///\n     /// # Failure\n     ///\n-    /// Fails if `T` and `U` have differing sizes or are zero-sized.\n-    pub fn from_vec(mut vec: Vec<T>) -> PartialVec<T,U> {\n+    /// Fails if `T` and `U` have differing sizes, are zero-sized or have\n+    /// differing minimal alignments.\n+    fn from_vec(mut vec: Vec<T>) -> PartialVec<T,U> {\n         // FIXME: Assert statically that the types `T` and `U` have the same\n         // size.\n         //\n@@ -1863,7 +1864,7 @@ impl<T,U> PartialVec<T,U> {\n     ///\n     /// Fails if not enough `T`s were popped to have enough space for the new\n     /// `U`.\n-    pub fn push(&mut self, value: U) {\n+    fn push(&mut self, value: U) {\n         // The assert assures that still `end_u <= start_t` (d) after\n         // the function.\n         assert!(self.end_u as *const () < self.start_t as *const (),\n@@ -1884,7 +1885,7 @@ impl<T,U> PartialVec<T,U> {\n     ///\n     /// Fails if not all `T`s were popped, also fails if not the same amount of\n     /// `U`s was pushed before calling `unwrap`.\n-    pub fn into_vec(mut self) -> Vec<U> {\n+    fn into_vec(mut self) -> Vec<U> {\n         // If `self.end_u == self.end_t`, we know from (e) that there are no\n         // more `T`s in `vec`, we also know that the whole length of `vec` is\n         // now used by `U`s, thus we can just interpret `vec` as a vector of\n@@ -1944,27 +1945,28 @@ impl<T,U> Iterator<T> for PartialVec<T,U> {\n \n impl<T> Vec<T> {\n     /// Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\n-    /// non-zero size.\n+    /// non-zero size and the same minimal alignment.\n     ///\n     /// # Failure\n     ///\n-    /// Fails if `T` and `U` have differing sizes or are zero-sized.\n+    /// Fails if `T` and `U` have differing sizes, are zero-sized or have\n+    /// differing minimal alignments.\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v = vec![0u, 1, 2];\n-    /// let w = v.map_inplace(|i| i + 3);\n+    /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(w.as_slice(), &[3, 4, 5]);\n     ///\n     /// let big_endian_u16s = vec![0x1122u16, 0x3344];\n-    /// let u8s = big_endian_u16s.map_inplace(|x| [\n+    /// let u8s = big_endian_u16s.map_in_place(|x| [\n     ///     ((x >> 8) & 0xff) as u8,\n     ///     (x & 0xff) as u8\n     /// ]);\n     /// assert_eq!(u8s.as_slice(), &[[0x11, 0x22], [0x33, 0x44]]);\n     /// ```\n-    pub fn map_inplace<U>(self, f: |T| -> U) -> Vec<U> {\n+    pub fn map_in_place<U>(self, f: |T| -> U) -> Vec<U> {\n         let mut pv = PartialVec::from_vec(self);\n         loop {\n             let maybe_t = pv.pop();\n@@ -2309,15 +2311,15 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n-    fn test_map_inplace_incompatible_types_fail() {\n+    fn test_map_inp_lace_incompatible_types_fail() {\n         let v = vec![0u, 1, 2];\n-        v.map_inplace(|_| ());\n+        v.map_in_place(|_| ());\n     }\n \n     #[test]\n-    fn test_map_inplace() {\n+    fn test_map_in_place() {\n         let v = vec![0u, 1, 2];\n-        assert_eq!(v.map_inplace(|i: uint| i as int - 1).as_slice(), &[-1i, 0, 1]);\n+        assert_eq!(v.map_in_place(|i: uint| i as int - 1).as_slice(), &[-1i, 0, 1]);\n     }\n \n     #[bench]"}]}