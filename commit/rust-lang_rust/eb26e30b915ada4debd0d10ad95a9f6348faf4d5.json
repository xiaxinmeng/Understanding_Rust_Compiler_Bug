{"sha": "eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMjZlMzBiOTE1YWRhNGRlYmQwZDEwYWQ5NWE5ZjYzNDhmYWY0ZDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T17:30:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:37Z"}, "message": "kill the `closure_kind` query", "tree": {"sha": "2cb1689e5f34acb7ec603972debe768486bc4ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb1689e5f34acb7ec603972debe768486bc4ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "html_url": "https://github.com/rust-lang/rust/commit/eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dff9a49e5be5857610336e585eb8e7267dd142e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dff9a49e5be5857610336e585eb8e7267dd142e", "html_url": "https://github.com/rust-lang/rust/commit/2dff9a49e5be5857610336e585eb8e7267dd142e"}], "stats": {"total": 31, "additions": 3, "deletions": 28}, "files": [{"sha": "b1a49b87acd253b854aa1493ede938794d4f7e42", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -498,7 +498,6 @@ define_dep_nodes!( <'tcx>\n     [] IsAutoImpl(DefId),\n     [] ImplTraitRef(DefId),\n     [] ImplPolarity(DefId),\n-    [] ClosureKind(DefId),\n     [] FnSignature(DefId),\n     [] GenSignature(DefId),\n     [] CoerceUnsizedInfo(DefId),"}, {"sha": "c27bc63ff8e826dce5d6d7e11eb9c5c0fbe1a20c", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -167,10 +167,6 @@ define_maps! { <'tcx>\n     /// for trans. This is also the only query that can fetch non-local MIR, at present.\n     [] fn optimized_mir: MirOptimized(DefId) -> &'tcx mir::Mir<'tcx>,\n \n-    /// Type of each closure. The def ID is the ID of the\n-    /// expression defining the closure.\n-    [] fn closure_kind: ClosureKind(DefId) -> ty::ClosureKind,\n-\n     /// The result of unsafety-checking this def-id.\n     [] fn unsafety_check_result: UnsafetyCheckResult(DefId) -> mir::UnsafetyCheckResult,\n "}, {"sha": "617712b87cf3b9fde05000b9cbb1614daf197554", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -782,7 +782,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::IsAutoImpl => { force!(is_auto_impl, def_id!()); }\n         DepKind::ImplTraitRef => { force!(impl_trait_ref, def_id!()); }\n         DepKind::ImplPolarity => { force!(impl_polarity, def_id!()); }\n-        DepKind::ClosureKind => { force!(closure_kind, def_id!()); }\n         DepKind::FnSignature => { force!(fn_sig, def_id!()); }\n         DepKind::GenSignature => { force!(generator_sig, def_id!()); }\n         DepKind::CoerceUnsizedInfo => { force!(coerce_unsized_info, def_id!()); }"}, {"sha": "d18816262c0253cfa546bba350463735f320e0aa", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -141,7 +141,6 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         (cdata.mir_const_qualif(def_id.index), Rc::new(IdxSetBuf::new_empty(0)))\n     }\n     typeck_tables_of => { cdata.item_body_tables(def_id.index, tcx) }\n-    closure_kind => { cdata.closure_kind(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_const_fn => { cdata.is_const_fn(def_id.index) }"}, {"sha": "349b1cd8828164292e024be5e7472699ec41dfdc", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -1020,13 +1020,6 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn closure_kind(&self, closure_id: DefIndex) -> ty::ClosureKind {\n-        match self.entry(closure_id).kind {\n-            EntryKind::Closure(data) => data.decode(self).kind,\n-            _ => bug!(),\n-        }\n-    }\n-\n     pub fn fn_sig(&self,\n                   id: DefIndex,\n                   tcx: TyCtxt<'a, 'tcx, 'tcx>)"}, {"sha": "6228eb0f3863aaeba371d4bff7f604a5043e4afa", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -1214,7 +1214,6 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             EntryKind::Generator(self.lazy(&data))\n         } else {\n             let data = ClosureData {\n-                kind: tcx.closure_kind(def_id),\n                 sig: self.lazy(&tcx.fn_sig(def_id)),\n             };\n             EntryKind::Closure(self.lazy(&data))"}, {"sha": "0593c3d8c0d3c5b287f8af3a1534640d6bd8c9ef", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -512,10 +512,9 @@ impl_stable_hash_for!(struct MethodData<'tcx> { fn_data, container, has_self });\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ClosureData<'tcx> {\n-    pub kind: ty::ClosureKind,\n     pub sig: Lazy<ty::PolyFnSig<'tcx>>,\n }\n-impl_stable_hash_for!(struct ClosureData<'tcx> { kind, sig });\n+impl_stable_hash_for!(struct ClosureData<'tcx> { sig });\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct GeneratorData<'tcx> {"}, {"sha": "00d7cdc0ff7a424c0035aba338e6d86293ca7646", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -713,8 +713,8 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             });\n             let region = cx.tcx.mk_region(region);\n \n-            let self_expr = if let ty::TyClosure(..) = closure_ty.sty {\n-                match cx.tcx.closure_kind(closure_def_id) {\n+            let self_expr = if let ty::TyClosure(_, closure_substs) = closure_ty.sty {\n+                match cx.infcx.closure_kind(closure_def_id, closure_substs).unwrap() {\n                     ty::ClosureKind::Fn => {\n                         let ref_closure_ty = cx.tcx.mk_ref(region,\n                                                            ty::TypeAndMut {"}, {"sha": "ce8c285f0e2438b074d85791126201f8d8e64c82", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb26e30b915ada4debd0d10ad95a9f6348faf4d5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eb26e30b915ada4debd0d10ad95a9f6348faf4d5", "patch": "@@ -722,7 +722,6 @@ pub fn provide(providers: &mut Providers) {\n         typeck_item_bodies,\n         typeck_tables_of,\n         has_typeck_tables,\n-        closure_kind,\n         generator_sig,\n         adt_destructor,\n         used_trait_imports,\n@@ -738,14 +737,6 @@ fn generator_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tcx.typeck_tables_of(def_id).generator_sigs()[hir_id].map(|s| ty::Binder(s))\n }\n \n-fn closure_kind<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                          def_id: DefId)\n-                          -> ty::ClosureKind {\n-    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n-    let hir_id = tcx.hir.node_to_hir_id(node_id);\n-    tcx.typeck_tables_of(def_id).closure_kinds()[hir_id].0\n-}\n-\n fn adt_destructor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             def_id: DefId)\n                             -> Option<ty::Destructor> {"}]}