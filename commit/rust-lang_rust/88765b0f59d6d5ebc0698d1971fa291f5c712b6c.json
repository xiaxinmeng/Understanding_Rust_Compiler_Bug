{"sha": "88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "node_id": "C_kwDOAAsO6NoAKDg4NzY1YjBmNTlkNmQ1ZWJjMDY5OGQxOTcxZmEyOTFmNWM3MTJiNmM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-11T20:08:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T20:08:07Z"}, "message": "Rollup merge of #106622 - estebank:issue-68972, r=davidtwco\n\nDetect out of bounds range pattern value\n\nFix #68972.", "tree": {"sha": "a1ece060f53f4635d3a842f73de6b639e2f2c73b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ece060f53f4635d3a842f73de6b639e2f2c73b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvxcnCRBK7hj4Ov3rIwAAnDsIAFzsomJJQFeqOK4vXrXiymEp\nOBozpWTCDrXSUm4MD6KLUyd5LdSCDD2pvoH1eV7+JPGFPGrITrPu7Gqa7/sgFYfA\n5R6OfS7yWrQTMt64eFAoL1pksh9f+ndMp7msGAaW0MVYNqKCTEiST85m2M4Nxq0s\nguvS/+HAnOSNCsThuzpSY0U30MWvwKmQ4GuLB0k/IIUBEzvFNxsdot0zktZAGGjj\n55R0MJpeh8EH8yW7zw/yCPbV2ao+kGSHOcylD4Wmv54pX+do56TuqETjx4Wnk/o2\nj3E2ETwbnVrFHiG5+1seYeAkWXxIFG18Yawnagc7sYiuNjMcw8BlFkKjRET6R6Y=\n=BDQh\n-----END PGP SIGNATURE-----\n", "payload": "tree a1ece060f53f4635d3a842f73de6b639e2f2c73b\nparent 7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a\nparent 52d534ef63294d93d3b3f711297e962396d5e0e4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673467687 +0100\ncommitter GitHub <noreply@github.com> 1673467687 +0100\n\nRollup merge of #106622 - estebank:issue-68972, r=davidtwco\n\nDetect out of bounds range pattern value\n\nFix #68972.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "html_url": "https://github.com/rust-lang/rust/commit/88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a", "html_url": "https://github.com/rust-lang/rust/commit/7ee3fd2edce794a452f9b91dd2cb8fe8f5bc151a"}, {"sha": "52d534ef63294d93d3b3f711297e962396d5e0e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d534ef63294d93d3b3f711297e962396d5e0e4", "html_url": "https://github.com/rust-lang/rust/commit/52d534ef63294d93d3b3f711297e962396d5e0e4"}], "stats": {"total": 121, "additions": 115, "deletions": 6}, "files": [{"sha": "aacaafeede6956e02b58b4f2ea0331ee5bcf10ea", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "patch": "@@ -206,6 +206,10 @@ mir_build_lower_range_bound_must_be_less_than_or_equal_to_upper =\n     .label = lower bound larger than upper bound\n     .teach_note = When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range.\n \n+mir_build_literal_in_range_out_of_bounds =\n+    literal out of range for `{$ty}`\n+    .label = this value doesn't fit in `{$ty}` whose maximum value is `{$max}`\n+\n mir_build_lower_range_bound_must_be_less_than_upper = lower range bound must be less than upper\n \n mir_build_leading_irrefutable_let_patterns = leading irrefutable {$count ->"}, {"sha": "233eecbd5b4ecb4a950d132a5196bf42f9bc60bf", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "patch": "@@ -493,6 +493,16 @@ pub struct LowerRangeBoundMustBeLessThanOrEqualToUpper {\n     pub teach: Option<()>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(mir_build_literal_in_range_out_of_bounds)]\n+pub struct LiteralOutOfRange<'tcx> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+    pub max: u128,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(mir_build_lower_range_bound_must_be_less_than_upper, code = \"E0579\")]\n pub struct LowerRangeBoundMustBeLessThanUpper {"}, {"sha": "7d4353c52926d7be6c5cd25c9b4360dbffd3fa02", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "patch": "@@ -129,10 +129,20 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         hi: mir::ConstantKind<'tcx>,\n         end: RangeEnd,\n         span: Span,\n+        lo_expr: Option<&hir::Expr<'tcx>>,\n+        hi_expr: Option<&hir::Expr<'tcx>>,\n     ) -> PatKind<'tcx> {\n         assert_eq!(lo.ty(), ty);\n         assert_eq!(hi.ty(), ty);\n         let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env);\n+        let max = || {\n+            self.tcx\n+                .layout_of(self.param_env.with_reveal_all_normalized(self.tcx).and(ty))\n+                .ok()\n+                .unwrap()\n+                .size\n+                .unsigned_int_max()\n+        };\n         match (end, cmp) {\n             // `x..y` where `x < y`.\n             // Non-empty because the range includes at least `x`.\n@@ -141,7 +151,27 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n             // `x..y` where `x >= y`. The range is empty => error.\n             (RangeEnd::Excluded, _) => {\n-                self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanUpper { span });\n+                let mut lower_overflow = false;\n+                let mut higher_overflow = false;\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = lo_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if lo.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        lower_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = hi_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if hi.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        higher_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if !lower_overflow && !higher_overflow {\n+                    self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanUpper { span });\n+                }\n                 PatKind::Wild\n             }\n             // `x..=y` where `x == y`.\n@@ -152,10 +182,34 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n             // `x..=y` where `x > y` hence the range is empty => error.\n             (RangeEnd::Included, _) => {\n-                self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n-                    span,\n-                    teach: if self.tcx.sess.teach(&error_code!(E0030)) { Some(()) } else { None },\n-                });\n+                let mut lower_overflow = false;\n+                let mut higher_overflow = false;\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = lo_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if lo.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        lower_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = hi_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if hi.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        higher_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if !lower_overflow && !higher_overflow {\n+                    self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n+                        span,\n+                        teach: if self.tcx.sess.teach(&error_code!(E0030)) {\n+                            Some(())\n+                        } else {\n+                            None\n+                        },\n+                    });\n+                }\n                 PatKind::Wild\n             }\n         }\n@@ -201,7 +255,9 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n                 let (lp, hp) = (lo.as_ref().map(|(x, _)| x), hi.as_ref().map(|(x, _)| x));\n                 let mut kind = match self.normalize_range_pattern_ends(ty, lp, hp) {\n-                    Some((lc, hc)) => self.lower_pattern_range(ty, lc, hc, end, lo_span),\n+                    Some((lc, hc)) => {\n+                        self.lower_pattern_range(ty, lc, hc, end, lo_span, lo_expr, hi_expr)\n+                    }\n                     None => {\n                         let msg = &format!(\n                             \"found bad range pattern `{:?}` outside of error recovery\","}, {"sha": "d02caff1febd2289e98237bd3fdeebd80b241d6e", "filename": "tests/ui/range/range-pattern-out-of-bounds-issue-68972.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.rs?ref=88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "patch": "@@ -0,0 +1,13 @@\n+#![feature(exclusive_range_pattern)]\n+#![allow(unreachable_patterns)]\n+fn main() {\n+    match 0u8 {\n+        251..257 => {}\n+        //~^ ERROR literal out of range\n+        //~| ERROR literal out of range\n+        251..=256 => {}\n+        //~^ ERROR literal out of range\n+        //~| ERROR literal out of range\n+        _ => {}\n+    }\n+}"}, {"sha": "7b8309b9bc2a1eafdf5339165d0e8bc0e38a6a07", "filename": "tests/ui/range/range-pattern-out-of-bounds-issue-68972.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88765b0f59d6d5ebc0698d1971fa291f5c712b6c/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.stderr?ref=88765b0f59d6d5ebc0698d1971fa291f5c712b6c", "patch": "@@ -0,0 +1,26 @@\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:5:14\n+   |\n+LL |         251..257 => {}\n+   |              ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:8:15\n+   |\n+LL |         251..=256 => {}\n+   |               ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:5:14\n+   |\n+LL |         251..257 => {}\n+   |              ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:8:15\n+   |\n+LL |         251..=256 => {}\n+   |               ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: aborting due to 4 previous errors\n+"}]}