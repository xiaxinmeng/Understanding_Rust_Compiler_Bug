{"sha": "d9821e1d9d036724defca0e7bc8d2037623206ca", "node_id": "C_kwDOAAsO6NoAKGQ5ODIxZTFkOWQwMzY3MjRkZWZjYTBlN2JjOGQyMDM3NjIzMjA2Y2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-28T13:21:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-28T13:21:14Z"}, "message": "Auto merge of #10542 - Alexendoo:items-after-statements, r=giraffate\n\nFix allow attribute, items from macros in `items_after_statements`\n\nFixes #10540\n\nchangelog: [`items_after_statements`]: Fixes `#[allow(clippy::items_after_statements)]` when applied to an item, and ignores items after statements from different macro contexts", "tree": {"sha": "36acbf227e26f5c5dcf286b5b64605ce9fbd0ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36acbf227e26f5c5dcf286b5b64605ce9fbd0ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9821e1d9d036724defca0e7bc8d2037623206ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9821e1d9d036724defca0e7bc8d2037623206ca", "html_url": "https://github.com/rust-lang/rust/commit/d9821e1d9d036724defca0e7bc8d2037623206ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9821e1d9d036724defca0e7bc8d2037623206ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70db22648bb1a79d2f6978adf6dc40240de59d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/70db22648bb1a79d2f6978adf6dc40240de59d89", "html_url": "https://github.com/rust-lang/rust/commit/70db22648bb1a79d2f6978adf6dc40240de59d89"}, {"sha": "b13f99c7e75e8769865dfe896b8ac3d2bb28cfb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13f99c7e75e8769865dfe896b8ac3d2bb28cfb1", "html_url": "https://github.com/rust-lang/rust/commit/b13f99c7e75e8769865dfe896b8ac3d2bb28cfb1"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "a7ec57e28505beeeea10087d118cb2fd0113aebe", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d9821e1d9d036724defca0e7bc8d2037623206ca/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9821e1d9d036724defca0e7bc8d2037623206ca/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=d9821e1d9d036724defca0e7bc8d2037623206ca", "patch": "@@ -1,8 +1,8 @@\n //! lint when items are used after statements\n \n-use clippy_utils::diagnostics::span_lint;\n-use rustc_ast::ast::{Block, ItemKind, StmtKind};\n-use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use clippy_utils::diagnostics::span_lint_hir;\n+use rustc_hir::{Block, ItemKind, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -52,33 +52,34 @@ declare_clippy_lint! {\n \n declare_lint_pass!(ItemsAfterStatements => [ITEMS_AFTER_STATEMENTS]);\n \n-impl EarlyLintPass for ItemsAfterStatements {\n-    fn check_block(&mut self, cx: &EarlyContext<'_>, item: &Block) {\n-        if in_external_macro(cx.sess(), item.span) {\n+impl LateLintPass<'_> for ItemsAfterStatements {\n+    fn check_block(&mut self, cx: &LateContext<'_>, block: &Block<'_>) {\n+        if in_external_macro(cx.sess(), block.span) {\n             return;\n         }\n \n-        // skip initial items and trailing semicolons\n-        let stmts = item\n+        // skip initial items\n+        let stmts = block\n             .stmts\n             .iter()\n-            .map(|stmt| &stmt.kind)\n-            .skip_while(|s| matches!(**s, StmtKind::Item(..) | StmtKind::Empty));\n+            .skip_while(|stmt| matches!(stmt.kind, StmtKind::Item(..)));\n \n         // lint on all further items\n         for stmt in stmts {\n-            if let StmtKind::Item(ref it) = *stmt {\n-                if in_external_macro(cx.sess(), it.span) {\n+            if let StmtKind::Item(item_id) = stmt.kind {\n+                let item = cx.tcx.hir().item(item_id);\n+                if in_external_macro(cx.sess(), item.span) || !item.span.eq_ctxt(block.span) {\n                     return;\n                 }\n-                if let ItemKind::MacroDef(..) = it.kind {\n+                if let ItemKind::Macro(..) = item.kind {\n                     // do not lint `macro_rules`, but continue processing further statements\n                     continue;\n                 }\n-                span_lint(\n+                span_lint_hir(\n                     cx,\n                     ITEMS_AFTER_STATEMENTS,\n-                    it.span,\n+                    item.hir_id(),\n+                    item.span,\n                     \"adding items after statements is confusing, since items exist from the \\\n                      start of the scope\",\n                 );"}, {"sha": "f6cea7e2daf6d8214b2f8fb2e97ed391023e76a0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9821e1d9d036724defca0e7bc8d2037623206ca/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9821e1d9d036724defca0e7bc8d2037623206ca/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d9821e1d9d036724defca0e7bc8d2037623206ca", "patch": "@@ -747,7 +747,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(unused_unit::UnusedUnit));\n     store.register_late_pass(|_| Box::new(returns::Return));\n     store.register_early_pass(|| Box::new(collapsible_if::CollapsibleIf));\n-    store.register_early_pass(|| Box::new(items_after_statements::ItemsAfterStatements));\n+    store.register_late_pass(|_| Box::new(items_after_statements::ItemsAfterStatements));\n     store.register_early_pass(|| Box::new(precedence::Precedence));\n     store.register_late_pass(|_| Box::new(needless_parens_on_range_literals::NeedlessParensOnRangeLiterals));\n     store.register_early_pass(|| Box::new(needless_continue::NeedlessContinue));"}, {"sha": "f12cb8f22e2703286c6218ea5d2891f1bf1de586", "filename": "tests/ui/items_after_statement.rs", "status": "renamed", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d9821e1d9d036724defca0e7bc8d2037623206ca/tests%2Fui%2Fitems_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9821e1d9d036724defca0e7bc8d2037623206ca/tests%2Fui%2Fitems_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_statement.rs?ref=d9821e1d9d036724defca0e7bc8d2037623206ca", "patch": "@@ -51,3 +51,20 @@ fn semicolon() {\n \n     let _ = S::new(3);\n }\n+\n+fn item_from_macro() {\n+    macro_rules! static_assert_size {\n+        ($ty:ty, $size:expr) => {\n+            const _: [(); $size] = [(); ::std::mem::size_of::<$ty>()];\n+        };\n+    }\n+\n+    let _ = 1;\n+    static_assert_size!(u32, 4);\n+}\n+\n+fn allow_attribute() {\n+    let _ = 1;\n+    #[allow(clippy::items_after_statements)]\n+    const _: usize = 1;\n+}", "previous_filename": "tests/ui/item_after_statement.rs"}, {"sha": "f69635a977bd7ca89a4cabb0f5a5c4dd2c22ada8", "filename": "tests/ui/items_after_statement.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9821e1d9d036724defca0e7bc8d2037623206ca/tests%2Fui%2Fitems_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9821e1d9d036724defca0e7bc8d2037623206ca/tests%2Fui%2Fitems_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitems_after_statement.stderr?ref=d9821e1d9d036724defca0e7bc8d2037623206ca", "patch": "@@ -1,5 +1,5 @@\n error: adding items after statements is confusing, since items exist from the start of the scope\n-  --> $DIR/item_after_statement.rs:13:5\n+  --> $DIR/items_after_statement.rs:13:5\n    |\n LL | /     fn foo() {\n LL | |         println!(\"foo\");\n@@ -9,15 +9,15 @@ LL | |     }\n    = note: `-D clippy::items-after-statements` implied by `-D warnings`\n \n error: adding items after statements is confusing, since items exist from the start of the scope\n-  --> $DIR/item_after_statement.rs:20:5\n+  --> $DIR/items_after_statement.rs:20:5\n    |\n LL | /     fn foo() {\n LL | |         println!(\"foo\");\n LL | |     }\n    | |_____^\n \n error: adding items after statements is confusing, since items exist from the start of the scope\n-  --> $DIR/item_after_statement.rs:33:13\n+  --> $DIR/items_after_statement.rs:33:13\n    |\n LL | /             fn say_something() {\n LL | |                 println!(\"something\");", "previous_filename": "tests/ui/item_after_statement.stderr"}]}