{"sha": "8532e742fc6ec210fab69b8192190bc40c685912", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MzJlNzQyZmM2ZWMyMTBmYWI2OWI4MTkyMTkwYmM0MGM2ODU5MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T06:59:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T06:59:44Z"}, "message": "Auto merge of #78267 - richkadel:llvm-coverage-counters-2.0.3r1, r=tmandry\n\nWorking expression optimization, and some improvements to branch-level source coverage\n\nThis replaces PR #78040 after reorganizing the original commits (by request) into a more logical sequence of major changes.\n\nMost of the work is in the MIR `transform/coverage/` directory (originally, `transform/instrument_coverage.rs`).\n\nNote this PR includes some significant additional debugging capabilities, to help myself and any future developer working on coverage improvements or issues.\n\nIn particular, there's a new Graphviz (.dot file) output for the coverage graph (the `BasicCoverageBlock` control flow graph) that provides ways to get some very good insight into the relationships between the MIR, the coverage graph BCBs, coverage spans, and counters. (There are also some cool debugging options, available via environment variable, to alter how some data in the graph appears.)\n\nAnd the code for this Graphviz view is actually generic... it can be used by any implementation of the Rust `Graph` traits.\n\nFinally (for now), I also now output information from `llvm-cov` that shows the actual counters and spans it found in the coverage map, and their counts (from the `--debug` flag). I found this to be enormously helpful in debugging some coverage issues, so I kept it in the test results as well for additional context.\n\n`@tmandry` `@wesleywiser`\n\nr? `@tmandry`\n\nHere's an example of the new coverage graph:\n\n* Within each `BasicCoverageBlock` (BCB), you can see each `CoverageSpan` and its contributing statements (MIR `Statement`s and/or `Terminator`s)\n* Each `CoverageSpan` has a `Counter` or and `Expression`, and `Expression`s show their Add/Subtract operation with nested operations. (This can be changed to show the Counter and Expression IDs instead, or in addition to, the BCB.)\n* The terminators of all MIR `BasicBlock`s in the BCB, including one final `Terminator`\n* If an \"edge counter\" is required (because we need to count an edge between blocks, in some cases) the edge's Counter or Expression is shown next to its label. (Not shown in the example below.) (FYI, Edge Counters are converted into a new MIR `BasicBlock` with `Goto`)\n\n<img width=\"1116\" alt=\"Screen Shot 2020-10-17 at 12 23 29 AM\" src=\"https://user-images.githubusercontent.com/3827298/96331095-616cb480-100f-11eb-8212-60f2d433e2d8.png\">\n\nr? `@tmandry`\nFYI: `@wesleywiser`", "tree": {"sha": "718896877b9dfd3aa7e94707d2f8765505144c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/718896877b9dfd3aa7e94707d2f8765505144c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8532e742fc6ec210fab69b8192190bc40c685912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8532e742fc6ec210fab69b8192190bc40c685912", "html_url": "https://github.com/rust-lang/rust/commit/8532e742fc6ec210fab69b8192190bc40c685912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8532e742fc6ec210fab69b8192190bc40c685912/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f92b931045dabb00b892519d3451cb41d41f2d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/f92b931045dabb00b892519d3451cb41d41f2d31", "html_url": "https://github.com/rust-lang/rust/commit/f92b931045dabb00b892519d3451cb41d41f2d31"}, {"sha": "68014e6b1ceb34da29b51a2804779138c6275fa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/68014e6b1ceb34da29b51a2804779138c6275fa4", "html_url": "https://github.com/rust-lang/rust/commit/68014e6b1ceb34da29b51a2804779138c6275fa4"}], "stats": {"total": 16189, "additions": 14070, "deletions": 2119}, "files": [{"sha": "41827a91ba4be27c0a66b86c42813c5a473eeb0e", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -129,7 +129,7 @@ impl CoverageMapGenerator {\n                 let (filenames_index, _) = self.filenames.insert_full(c_filename);\n                 virtual_file_mapping.push(filenames_index as u32);\n             }\n-            debug!(\"Adding counter {:?} to map for {:?}\", counter, region,);\n+            debug!(\"Adding counter {:?} to map for {:?}\", counter, region);\n             mapping_regions.push(CounterMappingRegion::code_region(\n                 counter,\n                 current_file_id,"}, {"sha": "e21e03822ebb3cda5a3147839a2d2345ed8307bd", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 41, "deletions": 22, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -12,7 +12,7 @@ use rustc_codegen_ssa::traits::{\n use rustc_data_structures::fx::FxHashMap;\n use rustc_llvm::RustString;\n use rustc_middle::mir::coverage::{\n-    CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionIndex, Op,\n+    CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionId, Op,\n };\n use rustc_middle::ty::Instance;\n \n@@ -27,16 +27,16 @@ const COVMAP_VAR_ALIGN_BYTES: usize = 8;\n \n /// A context object for maintaining all state needed by the coverageinfo module.\n pub struct CrateCoverageContext<'tcx> {\n-    // Coverage region data for each instrumented function identified by DefId.\n-    pub(crate) function_coverage_map: RefCell<FxHashMap<Instance<'tcx>, FunctionCoverage>>,\n+    // Coverage data for each instrumented function identified by DefId.\n+    pub(crate) function_coverage_map: RefCell<FxHashMap<Instance<'tcx>, FunctionCoverage<'tcx>>>,\n }\n \n impl<'tcx> CrateCoverageContext<'tcx> {\n     pub fn new() -> Self {\n         Self { function_coverage_map: Default::default() }\n     }\n \n-    pub fn take_function_coverage_map(&self) -> FxHashMap<Instance<'tcx>, FunctionCoverage> {\n+    pub fn take_function_coverage_map(&self) -> FxHashMap<Instance<'tcx>, FunctionCoverage<'tcx>> {\n         self.function_coverage_map.replace(FxHashMap::default())\n     }\n }\n@@ -58,47 +58,66 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMRustCoverageCreatePGOFuncNameVar(llfn, mangled_fn_name.as_ptr()) }\n     }\n \n-    fn add_counter_region(\n+    fn set_function_source_hash(\n         &mut self,\n         instance: Instance<'tcx>,\n         function_source_hash: u64,\n+    ) -> bool {\n+        if let Some(coverage_context) = self.coverage_context() {\n+            debug!(\n+                \"ensuring function source hash is set for instance={:?}; function_source_hash={}\",\n+                instance, function_source_hash,\n+            );\n+            let mut coverage_map = coverage_context.function_coverage_map.borrow_mut();\n+            coverage_map\n+                .entry(instance)\n+                .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n+                .set_function_source_hash(function_source_hash);\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+    fn add_coverage_counter(\n+        &mut self,\n+        instance: Instance<'tcx>,\n         id: CounterValueReference,\n         region: CodeRegion,\n     ) -> bool {\n         if let Some(coverage_context) = self.coverage_context() {\n             debug!(\n-                \"adding counter to coverage_regions: instance={:?}, function_source_hash={}, id={:?}, \\\n-                at {:?}\",\n-                instance, function_source_hash, id, region,\n+                \"adding counter to coverage_map: instance={:?}, id={:?}, region={:?}\",\n+                instance, id, region,\n             );\n-            let mut coverage_regions = coverage_context.function_coverage_map.borrow_mut();\n-            coverage_regions\n+            let mut coverage_map = coverage_context.function_coverage_map.borrow_mut();\n+            coverage_map\n                 .entry(instance)\n                 .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n-                .add_counter(function_source_hash, id, region);\n+                .add_counter(id, region);\n             true\n         } else {\n             false\n         }\n     }\n \n-    fn add_counter_expression_region(\n+    fn add_coverage_counter_expression(\n         &mut self,\n         instance: Instance<'tcx>,\n-        id: InjectedExpressionIndex,\n+        id: InjectedExpressionId,\n         lhs: ExpressionOperandId,\n         op: Op,\n         rhs: ExpressionOperandId,\n-        region: CodeRegion,\n+        region: Option<CodeRegion>,\n     ) -> bool {\n         if let Some(coverage_context) = self.coverage_context() {\n             debug!(\n-                \"adding counter expression to coverage_regions: instance={:?}, id={:?}, {:?} {:?} {:?}, \\\n-                at {:?}\",\n+                \"adding counter expression to coverage_map: instance={:?}, id={:?}, {:?} {:?} {:?}; \\\n+                region: {:?}\",\n                 instance, id, lhs, op, rhs, region,\n             );\n-            let mut coverage_regions = coverage_context.function_coverage_map.borrow_mut();\n-            coverage_regions\n+            let mut coverage_map = coverage_context.function_coverage_map.borrow_mut();\n+            coverage_map\n                 .entry(instance)\n                 .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n                 .add_counter_expression(id, lhs, op, rhs, region);\n@@ -108,14 +127,14 @@ impl CoverageInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         }\n     }\n \n-    fn add_unreachable_region(&mut self, instance: Instance<'tcx>, region: CodeRegion) -> bool {\n+    fn add_coverage_unreachable(&mut self, instance: Instance<'tcx>, region: CodeRegion) -> bool {\n         if let Some(coverage_context) = self.coverage_context() {\n             debug!(\n-                \"adding unreachable code to coverage_regions: instance={:?}, at {:?}\",\n+                \"adding unreachable code to coverage_map: instance={:?}, at {:?}\",\n                 instance, region,\n             );\n-            let mut coverage_regions = coverage_context.function_coverage_map.borrow_mut();\n-            coverage_regions\n+            let mut coverage_map = coverage_context.function_coverage_map.borrow_mut();\n+            coverage_map\n                 .entry(instance)\n                 .or_insert_with(|| FunctionCoverage::new(self.tcx, instance))\n                 .add_unreachable_region(region);"}, {"sha": "bcac2c90fdc20a1c12a3486da5087d968c2f4968", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/ffi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fffi.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::mir::coverage::{CounterValueReference, MappedExpressionIndex};\n /// Aligns with [llvm::coverage::Counter::CounterKind](https://github.com/rust-lang/llvm-project/blob/rustc/10.0-2020-05-05/llvm/include/llvm/ProfileData/Coverage/CoverageMapping.h#L91)\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n-enum CounterKind {\n+pub enum CounterKind {\n     Zero = 0,\n     CounterValueReference = 1,\n     Expression = 2,\n@@ -23,8 +23,8 @@ enum CounterKind {\n #[repr(C)]\n pub struct Counter {\n     // Important: The layout (order and types of fields) must match its C++ counterpart.\n-    kind: CounterKind,\n-    id: u32,\n+    pub kind: CounterKind,\n+    pub id: u32,\n }\n \n impl Counter {\n@@ -55,9 +55,9 @@ pub enum ExprKind {\n #[derive(Copy, Clone, Debug)]\n #[repr(C)]\n pub struct CounterExpression {\n-    kind: ExprKind,\n-    lhs: Counter,\n-    rhs: Counter,\n+    pub kind: ExprKind,\n+    pub lhs: Counter,\n+    pub rhs: Counter,\n }\n \n impl CounterExpression {"}, {"sha": "b0d7953f511c7969d7aff463d1ee4639d297f8df", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 87, "deletions": 38, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -2,18 +2,18 @@ pub use super::ffi::*;\n \n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::coverage::{\n-    CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionIndex,\n-    MappedExpressionIndex, Op,\n+    CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionId,\n+    InjectedExpressionIndex, MappedExpressionIndex, Op,\n };\n use rustc_middle::ty::Instance;\n use rustc_middle::ty::TyCtxt;\n \n #[derive(Clone, Debug)]\n-pub struct ExpressionRegion {\n+pub struct Expression {\n     lhs: ExpressionOperandId,\n     op: Op,\n     rhs: ExpressionOperandId,\n-    region: CodeRegion,\n+    region: Option<CodeRegion>,\n }\n \n /// Collects all of the coverage regions associated with (a) injected counters, (b) counter\n@@ -28,33 +28,42 @@ pub struct ExpressionRegion {\n /// only whitespace or comments). According to LLVM Code Coverage Mapping documentation, \"A count\n /// for a gap area is only used as the line execution count if there are no other regions on a\n /// line.\"\n-pub struct FunctionCoverage {\n+pub struct FunctionCoverage<'tcx> {\n+    instance: Instance<'tcx>,\n     source_hash: u64,\n     counters: IndexVec<CounterValueReference, Option<CodeRegion>>,\n-    expressions: IndexVec<InjectedExpressionIndex, Option<ExpressionRegion>>,\n+    expressions: IndexVec<InjectedExpressionIndex, Option<Expression>>,\n     unreachable_regions: Vec<CodeRegion>,\n }\n \n-impl FunctionCoverage {\n-    pub fn new<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n+impl<'tcx> FunctionCoverage<'tcx> {\n+    pub fn new(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n         let coverageinfo = tcx.coverageinfo(instance.def_id());\n+        debug!(\n+            \"FunctionCoverage::new(instance={:?}) has coverageinfo={:?}\",\n+            instance, coverageinfo\n+        );\n         Self {\n+            instance,\n             source_hash: 0, // will be set with the first `add_counter()`\n             counters: IndexVec::from_elem_n(None, coverageinfo.num_counters as usize),\n             expressions: IndexVec::from_elem_n(None, coverageinfo.num_expressions as usize),\n             unreachable_regions: Vec::new(),\n         }\n     }\n \n-    /// Adds a code region to be counted by an injected counter intrinsic.\n-    /// The source_hash (computed during coverage instrumentation) should also be provided, and\n-    /// should be the same for all counters in a given function.\n-    pub fn add_counter(&mut self, source_hash: u64, id: CounterValueReference, region: CodeRegion) {\n+    /// Sets the function source hash value. If called multiple times for the same function, all\n+    /// calls should have the same hash value.\n+    pub fn set_function_source_hash(&mut self, source_hash: u64) {\n         if self.source_hash == 0 {\n             self.source_hash = source_hash;\n         } else {\n             debug_assert_eq!(source_hash, self.source_hash);\n         }\n+    }\n+\n+    /// Adds a code region to be counted by an injected counter intrinsic.\n+    pub fn add_counter(&mut self, id: CounterValueReference, region: CodeRegion) {\n         self.counters[id].replace(region).expect_none(\"add_counter called with duplicate `id`\");\n     }\n \n@@ -74,15 +83,19 @@ impl FunctionCoverage {\n     /// counters and expressions have been added.\n     pub fn add_counter_expression(\n         &mut self,\n-        expression_id: InjectedExpressionIndex,\n+        expression_id: InjectedExpressionId,\n         lhs: ExpressionOperandId,\n         op: Op,\n         rhs: ExpressionOperandId,\n-        region: CodeRegion,\n+        region: Option<CodeRegion>,\n     ) {\n+        debug!(\n+            \"add_counter_expression({:?}, lhs={:?}, op={:?}, rhs={:?} at {:?}\",\n+            expression_id, lhs, op, rhs, region\n+        );\n         let expression_index = self.expression_index(u32::from(expression_id));\n         self.expressions[expression_index]\n-            .replace(ExpressionRegion { lhs, op, rhs, region })\n+            .replace(Expression { lhs, op, rhs, region })\n             .expect_none(\"add_counter_expression called with duplicate `id_descending_from_max`\");\n     }\n \n@@ -103,7 +116,11 @@ impl FunctionCoverage {\n     pub fn get_expressions_and_counter_regions<'a>(\n         &'a self,\n     ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &'a CodeRegion)>) {\n-        assert!(self.source_hash != 0);\n+        assert!(\n+            self.source_hash != 0,\n+            \"No counters provided the source_hash for function: {:?}\",\n+            self.instance\n+        );\n \n         let counter_regions = self.counter_regions();\n         let (counter_expressions, expression_regions) = self.expressions_with_regions();\n@@ -129,54 +146,78 @@ impl FunctionCoverage {\n     ) -> (Vec<CounterExpression>, impl Iterator<Item = (Counter, &'a CodeRegion)>) {\n         let mut counter_expressions = Vec::with_capacity(self.expressions.len());\n         let mut expression_regions = Vec::with_capacity(self.expressions.len());\n-        let mut new_indexes =\n-            IndexVec::from_elem_n(MappedExpressionIndex::from(u32::MAX), self.expressions.len());\n-        // Note, the initial value shouldn't matter since every index in use in `self.expressions`\n-        // will be set, and after that, `new_indexes` will only be accessed using those same\n-        // indexes.\n+        let mut new_indexes = IndexVec::from_elem_n(None, self.expressions.len());\n \n-        // Note that an `ExpressionRegion`s at any given index can include other expressions as\n+        // This closure converts any `Expression` operand (`lhs` or `rhs` of the `Op::Add` or\n+        // `Op::Subtract` operation) into its native `llvm::coverage::Counter::CounterKind` type\n+        // and value. Operand ID value `0` maps to `CounterKind::Zero`; values in the known range\n+        // of injected LLVM counters map to `CounterKind::CounterValueReference` (and the value\n+        // matches the injected counter index); and any other value is converted into a\n+        // `CounterKind::Expression` with the expression's `new_index`.\n+        //\n+        // Expressions will be returned from this function in a sequential vector (array) of\n+        // `CounterExpression`, so the expression IDs must be mapped from their original,\n+        // potentially sparse set of indexes, originally in reverse order from `u32::MAX`.\n+        //\n+        // An `Expression` as an operand will have already been encountered as an `Expression` with\n+        // operands, so its new_index will already have been generated (as a 1-up index value).\n+        // (If an `Expression` as an operand does not have a corresponding new_index, it was\n+        // probably optimized out, after the expression was injected into the MIR, so it will\n+        // get a `CounterKind::Zero` instead.)\n+        //\n+        // In other words, an `Expression`s at any given index can include other expressions as\n         // operands, but expression operands can only come from the subset of expressions having\n-        // `expression_index`s lower than the referencing `ExpressionRegion`. Therefore, it is\n+        // `expression_index`s lower than the referencing `Expression`. Therefore, it is\n         // reasonable to look up the new index of an expression operand while the `new_indexes`\n         // vector is only complete up to the current `ExpressionIndex`.\n         let id_to_counter =\n-            |new_indexes: &IndexVec<InjectedExpressionIndex, MappedExpressionIndex>,\n+            |new_indexes: &IndexVec<InjectedExpressionIndex, Option<MappedExpressionIndex>>,\n              id: ExpressionOperandId| {\n                 if id == ExpressionOperandId::ZERO {\n                     Some(Counter::zero())\n                 } else if id.index() < self.counters.len() {\n+                    // Note: Some codegen-injected Counters may be only referenced by `Expression`s,\n+                    // and may not have their own `CodeRegion`s,\n                     let index = CounterValueReference::from(id.index());\n-                    self.counters\n-                        .get(index)\n-                        .unwrap() // pre-validated\n-                        .as_ref()\n-                        .map(|_| Counter::counter_value_reference(index))\n+                    Some(Counter::counter_value_reference(index))\n                 } else {\n                     let index = self.expression_index(u32::from(id));\n                     self.expressions\n                         .get(index)\n                         .expect(\"expression id is out of range\")\n                         .as_ref()\n-                        .map(|_| Counter::expression(new_indexes[index]))\n+                        // If an expression was optimized out, assume it would have produced a count\n+                        // of zero. This ensures that expressions dependent on optimized-out\n+                        // expressions are still valid.\n+                        .map_or(Some(Counter::zero()), |_| {\n+                            new_indexes[index].map(|new_index| Counter::expression(new_index))\n+                        })\n                 }\n             };\n \n-        for (original_index, expression_region) in\n+        for (original_index, expression) in\n             self.expressions.iter_enumerated().filter_map(|(original_index, entry)| {\n                 // Option::map() will return None to filter out missing expressions. This may happen\n                 // if, for example, a MIR-instrumented expression is removed during an optimization.\n-                entry.as_ref().map(|region| (original_index, region))\n+                entry.as_ref().map(|expression| (original_index, expression))\n             })\n         {\n-            let region = &expression_region.region;\n-            let ExpressionRegion { lhs, op, rhs, .. } = *expression_region;\n+            let optional_region = &expression.region;\n+            let Expression { lhs, op, rhs, .. } = *expression;\n \n             if let Some(Some((lhs_counter, rhs_counter))) =\n                 id_to_counter(&new_indexes, lhs).map(|lhs_counter| {\n                     id_to_counter(&new_indexes, rhs).map(|rhs_counter| (lhs_counter, rhs_counter))\n                 })\n             {\n+                debug_assert!(\n+                    (lhs_counter.id as usize)\n+                        < usize::max(self.counters.len(), self.expressions.len())\n+                );\n+                debug_assert!(\n+                    (rhs_counter.id as usize)\n+                        < usize::max(self.counters.len(), self.expressions.len())\n+                );\n                 // Both operands exist. `Expression` operands exist in `self.expressions` and have\n                 // been assigned a `new_index`.\n                 let mapped_expression_index =\n@@ -190,12 +231,20 @@ impl FunctionCoverage {\n                     rhs_counter,\n                 );\n                 debug!(\n-                    \"Adding expression {:?} = {:?} at {:?}\",\n-                    mapped_expression_index, expression, region\n+                    \"Adding expression {:?} = {:?}, region: {:?}\",\n+                    mapped_expression_index, expression, optional_region\n                 );\n                 counter_expressions.push(expression);\n-                new_indexes[original_index] = mapped_expression_index;\n-                expression_regions.push((Counter::expression(mapped_expression_index), region));\n+                new_indexes[original_index] = Some(mapped_expression_index);\n+                if let Some(region) = optional_region {\n+                    expression_regions.push((Counter::expression(mapped_expression_index), region));\n+                }\n+            } else {\n+                debug!(\n+                    \"Ignoring expression with one or more missing operands: \\\n+                    original_index={:?}, lhs={:?}, op={:?}, rhs={:?}, region={:?}\",\n+                    original_index, lhs, op, rhs, optional_region,\n+                )\n             }\n         }\n         (counter_expressions, expression_regions.into_iter())"}, {"sha": "a115d35866638703ae589ec205f0ffeda3aa0605", "filename": "compiler/rustc_codegen_ssa/src/mir/coverageinfo.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fcoverageinfo.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -10,25 +10,37 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let Coverage { kind, code_region } = coverage;\n         match kind {\n             CoverageKind::Counter { function_source_hash, id } => {\n-                if bx.add_counter_region(self.instance, function_source_hash, id, code_region) {\n+                if bx.set_function_source_hash(self.instance, function_source_hash) {\n+                    // If `set_function_source_hash()` returned true, the coverage map is enabled,\n+                    // so continue adding the counter.\n+                    if let Some(code_region) = code_region {\n+                        // Note: Some counters do not have code regions, but may still be referenced\n+                        // from expressions. In that case, don't add the counter to the coverage map,\n+                        // but do inject the counter intrinsic.\n+                        bx.add_coverage_counter(self.instance, id, code_region);\n+                    }\n+\n                     let coverageinfo = bx.tcx().coverageinfo(self.instance.def_id());\n \n                     let fn_name = bx.create_pgo_func_name_var(self.instance);\n                     let hash = bx.const_u64(function_source_hash);\n                     let num_counters = bx.const_u32(coverageinfo.num_counters);\n-                    let id = bx.const_u32(u32::from(id));\n+                    let index = bx.const_u32(u32::from(id));\n                     debug!(\n                         \"codegen intrinsic instrprof.increment(fn_name={:?}, hash={:?}, num_counters={:?}, index={:?})\",\n-                        fn_name, hash, num_counters, id,\n+                        fn_name, hash, num_counters, index,\n                     );\n-                    bx.instrprof_increment(fn_name, hash, num_counters, id);\n+                    bx.instrprof_increment(fn_name, hash, num_counters, index);\n                 }\n             }\n             CoverageKind::Expression { id, lhs, op, rhs } => {\n-                bx.add_counter_expression_region(self.instance, id, lhs, op, rhs, code_region);\n+                bx.add_coverage_counter_expression(self.instance, id, lhs, op, rhs, code_region);\n             }\n             CoverageKind::Unreachable => {\n-                bx.add_unreachable_region(self.instance, code_region);\n+                bx.add_coverage_unreachable(\n+                    self.instance,\n+                    code_region.expect(\"unreachable regions always have code regions\"),\n+                );\n             }\n         }\n     }"}, {"sha": "95bddfb4b41d16d605a256615e305269d3eeb191", "filename": "compiler/rustc_codegen_ssa/src/traits/coverageinfo.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fcoverageinfo.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -9,29 +9,37 @@ pub trait CoverageInfoMethods: BackendTypes {\n pub trait CoverageInfoBuilderMethods<'tcx>: BackendTypes {\n     fn create_pgo_func_name_var(&self, instance: Instance<'tcx>) -> Self::Value;\n \n+    /// Returns true if the function source hash was added to the coverage map (even if it had\n+    /// already been added, for this instance). Returns false *only* if `-Z instrument-coverage` is\n+    /// not enabled (a coverage map is not being generated).\n+    fn set_function_source_hash(\n+        &mut self,\n+        instance: Instance<'tcx>,\n+        function_source_hash: u64,\n+    ) -> bool;\n+\n     /// Returns true if the counter was added to the coverage map; false if `-Z instrument-coverage`\n     /// is not enabled (a coverage map is not being generated).\n-    fn add_counter_region(\n+    fn add_coverage_counter(\n         &mut self,\n         instance: Instance<'tcx>,\n-        function_source_hash: u64,\n-        id: CounterValueReference,\n+        index: CounterValueReference,\n         region: CodeRegion,\n     ) -> bool;\n \n     /// Returns true if the expression was added to the coverage map; false if\n     /// `-Z instrument-coverage` is not enabled (a coverage map is not being generated).\n-    fn add_counter_expression_region(\n+    fn add_coverage_counter_expression(\n         &mut self,\n         instance: Instance<'tcx>,\n-        id: InjectedExpressionIndex,\n+        id: InjectedExpressionId,\n         lhs: ExpressionOperandId,\n         op: Op,\n         rhs: ExpressionOperandId,\n-        region: CodeRegion,\n+        region: Option<CodeRegion>,\n     ) -> bool;\n \n     /// Returns true if the region was added to the coverage map; false if `-Z instrument-coverage`\n     /// is not enabled (a coverage map is not being generated).\n-    fn add_unreachable_region(&mut self, instance: Instance<'tcx>, region: CodeRegion) -> bool;\n+    fn add_coverage_unreachable(&mut self, instance: Instance<'tcx>, region: CodeRegion) -> bool;\n }"}, {"sha": "9653ff022f19246a71a79eecceda2d89106356c3", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -643,6 +643,7 @@ where\n     }\n     if options.contains(&RenderOption::DarkTheme) {\n         graph_attrs.push(r#\"bgcolor=\"black\"\"#);\n+        graph_attrs.push(r#\"fontcolor=\"white\"\"#);\n         content_attrs.push(r#\"color=\"white\"\"#);\n         content_attrs.push(r#\"fontcolor=\"white\"\"#);\n     }"}, {"sha": "6b46d7c497d3e2cee63cd25f3b76c2752fec001a", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 65, "deletions": 9, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -7,6 +7,10 @@ use std::cmp::Ord;\n use std::fmt::{self, Debug, Formatter};\n \n rustc_index::newtype_index! {\n+    /// An ExpressionOperandId value is assigned directly from either a\n+    /// CounterValueReference.as_u32() (which ascend from 1) or an ExpressionOperandId.as_u32()\n+    /// (which _*descend*_ from u32::MAX). Id value `0` (zero) represents a virtual counter with a\n+    /// constant value of `0`.\n     pub struct ExpressionOperandId {\n         derive [HashStable]\n         DEBUG_FORMAT = \"ExpressionOperandId({})\",\n@@ -42,6 +46,20 @@ impl CounterValueReference {\n }\n \n rustc_index::newtype_index! {\n+    /// InjectedExpressionId.as_u32() converts to ExpressionOperandId.as_u32()\n+    ///\n+    /// Values descend from u32::MAX.\n+    pub struct InjectedExpressionId {\n+        derive [HashStable]\n+        DEBUG_FORMAT = \"InjectedExpressionId({})\",\n+        MAX = 0xFFFF_FFFF,\n+    }\n+}\n+\n+rustc_index::newtype_index! {\n+    /// InjectedExpressionIndex.as_u32() translates to u32::MAX - ExpressionOperandId.as_u32()\n+    ///\n+    /// Values ascend from 0.\n     pub struct InjectedExpressionIndex {\n         derive [HashStable]\n         DEBUG_FORMAT = \"InjectedExpressionIndex({})\",\n@@ -50,6 +68,9 @@ rustc_index::newtype_index! {\n }\n \n rustc_index::newtype_index! {\n+    /// MappedExpressionIndex values ascend from zero, and are recalculated indexes based on their\n+    /// array position in the LLVM coverage map \"Expressions\" array, which is assembled during the\n+    /// \"mapgen\" process. They cannot be computed algorithmically, from the other `newtype_index`s.\n     pub struct MappedExpressionIndex {\n         derive [HashStable]\n         DEBUG_FORMAT = \"MappedExpressionIndex({})\",\n@@ -64,21 +85,21 @@ impl From<CounterValueReference> for ExpressionOperandId {\n     }\n }\n \n-impl From<InjectedExpressionIndex> for ExpressionOperandId {\n+impl From<InjectedExpressionId> for ExpressionOperandId {\n     #[inline]\n-    fn from(v: InjectedExpressionIndex) -> ExpressionOperandId {\n+    fn from(v: InjectedExpressionId) -> ExpressionOperandId {\n         ExpressionOperandId::from(v.as_u32())\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub enum CoverageKind {\n     Counter {\n         function_source_hash: u64,\n         id: CounterValueReference,\n     },\n     Expression {\n-        id: InjectedExpressionIndex,\n+        id: InjectedExpressionId,\n         lhs: ExpressionOperandId,\n         op: Op,\n         rhs: ExpressionOperandId,\n@@ -88,12 +109,47 @@ pub enum CoverageKind {\n \n impl CoverageKind {\n     pub fn as_operand_id(&self) -> ExpressionOperandId {\n+        use CoverageKind::*;\n         match *self {\n-            CoverageKind::Counter { id, .. } => ExpressionOperandId::from(id),\n-            CoverageKind::Expression { id, .. } => ExpressionOperandId::from(id),\n-            CoverageKind::Unreachable => {\n-                bug!(\"Unreachable coverage cannot be part of an expression\")\n-            }\n+            Counter { id, .. } => ExpressionOperandId::from(id),\n+            Expression { id, .. } => ExpressionOperandId::from(id),\n+            Unreachable => bug!(\"Unreachable coverage cannot be part of an expression\"),\n+        }\n+    }\n+\n+    pub fn is_counter(&self) -> bool {\n+        match self {\n+            Self::Counter { .. } => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_expression(&self) -> bool {\n+        match self {\n+            Self::Expression { .. } => true,\n+            _ => false,\n+        }\n+    }\n+\n+    pub fn is_unreachable(&self) -> bool {\n+        *self == Self::Unreachable\n+    }\n+}\n+\n+impl Debug for CoverageKind {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n+        use CoverageKind::*;\n+        match self {\n+            Counter { id, .. } => write!(fmt, \"Counter({:?})\", id.index()),\n+            Expression { id, lhs, op, rhs } => write!(\n+                fmt,\n+                \"Expression({:?}) = {} {} {}\",\n+                id.index(),\n+                lhs.index(),\n+                if *op == Op::Add { \"+\" } else { \"-\" },\n+                rhs.index(),\n+            ),\n+            Unreachable => write!(fmt, \"Unreachable\"),\n         }\n     }\n }"}, {"sha": "5fe7b0f647dcdae7fd8c85153cdeb0e05dc43dae", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1585,21 +1585,10 @@ impl Debug for Statement<'_> {\n                 write!(fmt, \"AscribeUserType({:?}, {:?}, {:?})\", place, variance, c_ty)\n             }\n             Coverage(box ref coverage) => {\n-                let rgn = &coverage.code_region;\n-                match coverage.kind {\n-                    CoverageKind::Counter { id, .. } => {\n-                        write!(fmt, \"Coverage::Counter({:?}) for {:?}\", id.index(), rgn)\n-                    }\n-                    CoverageKind::Expression { id, lhs, op, rhs } => write!(\n-                        fmt,\n-                        \"Coverage::Expression({:?}) = {} {} {} for {:?}\",\n-                        id.index(),\n-                        lhs.index(),\n-                        if op == coverage::Op::Add { \"+\" } else { \"-\" },\n-                        rhs.index(),\n-                        rgn\n-                    ),\n-                    CoverageKind::Unreachable => write!(fmt, \"Coverage::Unreachable for {:?}\", rgn),\n+                if let Some(rgn) = &coverage.code_region {\n+                    write!(fmt, \"Coverage::{:?} for {:?}\", coverage.kind, rgn)\n+                } else {\n+                    write!(fmt, \"Coverage::{:?}\", coverage.kind)\n                 }\n             }\n             Nop => write!(fmt, \"nop\"),\n@@ -1610,7 +1599,7 @@ impl Debug for Statement<'_> {\n #[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub struct Coverage {\n     pub kind: CoverageKind,\n-    pub code_region: CodeRegion,\n+    pub code_region: Option<CodeRegion>,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "89fd803fe51400bd2aaab905867071e8b9e87faf", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -300,6 +300,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_target::spec::abi::Abi,\n     crate::mir::coverage::ExpressionOperandId,\n     crate::mir::coverage::CounterValueReference,\n+    crate::mir::coverage::InjectedExpressionId,\n     crate::mir::coverage::InjectedExpressionIndex,\n     crate::mir::coverage::MappedExpressionIndex,\n     crate::mir::Local,"}, {"sha": "d6c2f7f7aaf1d8812f67b581cb1a2a491012e73c", "filename": "compiler/rustc_mir/src/transform/coverage/counters.rs", "status": "added", "additions": 615, "deletions": 0, "changes": 615, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fcounters.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,615 @@\n+use super::Error;\n+\n+use super::debug;\n+use super::graph;\n+use super::spans;\n+\n+use debug::{DebugCounters, NESTED_INDENT};\n+use graph::{BasicCoverageBlock, BcbBranch, CoverageGraph, TraverseCoverageGraphWithLoops};\n+use spans::CoverageSpan;\n+\n+use rustc_data_structures::graph::WithNumNodes;\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::coverage::*;\n+\n+/// Manages the counter and expression indexes/IDs to generate `CoverageKind` components for MIR\n+/// `Coverage` statements.\n+pub(crate) struct CoverageCounters {\n+    function_source_hash: u64,\n+    next_counter_id: u32,\n+    num_expressions: u32,\n+    pub debug_counters: DebugCounters,\n+}\n+\n+impl CoverageCounters {\n+    pub fn new(function_source_hash: u64) -> Self {\n+        Self {\n+            function_source_hash,\n+            next_counter_id: CounterValueReference::START.as_u32(),\n+            num_expressions: 0,\n+            debug_counters: DebugCounters::new(),\n+        }\n+    }\n+\n+    /// Activate the `DebugCounters` data structures, to provide additional debug formatting\n+    /// features when formating `CoverageKind` (counter) values.\n+    pub fn enable_debug(&mut self) {\n+        self.debug_counters.enable();\n+    }\n+\n+    /// Makes `CoverageKind` `Counter`s and `Expressions` for the `BasicCoverageBlocks` directly or\n+    /// indirectly associated with `CoverageSpans`, and returns additional `Expression`s\n+    /// representing intermediate values.\n+    pub fn make_bcb_counters(\n+        &mut self,\n+        basic_coverage_blocks: &mut CoverageGraph,\n+        coverage_spans: &Vec<CoverageSpan>,\n+    ) -> Result<Vec<CoverageKind>, Error> {\n+        let mut bcb_counters = BcbCounters::new(self, basic_coverage_blocks);\n+        bcb_counters.make_bcb_counters(coverage_spans)\n+    }\n+\n+    fn make_counter<F>(&mut self, debug_block_label_fn: F) -> CoverageKind\n+    where\n+        F: Fn() -> Option<String>,\n+    {\n+        let counter = CoverageKind::Counter {\n+            function_source_hash: self.function_source_hash,\n+            id: self.next_counter(),\n+        };\n+        if self.debug_counters.is_enabled() {\n+            self.debug_counters.add_counter(&counter, (debug_block_label_fn)());\n+        }\n+        counter\n+    }\n+\n+    fn make_expression<F>(\n+        &mut self,\n+        lhs: ExpressionOperandId,\n+        op: Op,\n+        rhs: ExpressionOperandId,\n+        debug_block_label_fn: F,\n+    ) -> CoverageKind\n+    where\n+        F: Fn() -> Option<String>,\n+    {\n+        let id = self.next_expression();\n+        let expression = CoverageKind::Expression { id, lhs, op, rhs };\n+        if self.debug_counters.is_enabled() {\n+            self.debug_counters.add_counter(&expression, (debug_block_label_fn)());\n+        }\n+        expression\n+    }\n+\n+    pub fn make_identity_counter(&mut self, counter_operand: ExpressionOperandId) -> CoverageKind {\n+        let some_debug_block_label = if self.debug_counters.is_enabled() {\n+            self.debug_counters.some_block_label(counter_operand).cloned()\n+        } else {\n+            None\n+        };\n+        self.make_expression(counter_operand, Op::Add, ExpressionOperandId::ZERO, || {\n+            some_debug_block_label.clone()\n+        })\n+    }\n+\n+    /// Counter IDs start from one and go up.\n+    fn next_counter(&mut self) -> CounterValueReference {\n+        assert!(self.next_counter_id < u32::MAX - self.num_expressions);\n+        let next = self.next_counter_id;\n+        self.next_counter_id += 1;\n+        CounterValueReference::from(next)\n+    }\n+\n+    /// Expression IDs start from u32::MAX and go down because a Expression can reference\n+    /// (add or subtract counts) of both Counter regions and Expression regions. The counter\n+    /// expression operand IDs must be unique across both types.\n+    fn next_expression(&mut self) -> InjectedExpressionId {\n+        assert!(self.next_counter_id < u32::MAX - self.num_expressions);\n+        let next = u32::MAX - self.num_expressions;\n+        self.num_expressions += 1;\n+        InjectedExpressionId::from(next)\n+    }\n+}\n+\n+/// Traverse the `CoverageGraph` and add either a `Counter` or `Expression` to every BCB, to be\n+/// injected with `CoverageSpan`s. `Expressions` have no runtime overhead, so if a viable expression\n+/// (adding or subtracting two other counters or expressions) can compute the same result as an\n+/// embedded counter, an `Expression` should be used.\n+struct BcbCounters<'a> {\n+    coverage_counters: &'a mut CoverageCounters,\n+    basic_coverage_blocks: &'a mut CoverageGraph,\n+}\n+\n+// FIXME(richkadel): Add unit tests for `BcbCounters` functions/algorithms.\n+impl<'a> BcbCounters<'a> {\n+    fn new(\n+        coverage_counters: &'a mut CoverageCounters,\n+        basic_coverage_blocks: &'a mut CoverageGraph,\n+    ) -> Self {\n+        Self { coverage_counters, basic_coverage_blocks }\n+    }\n+\n+    /// If two `BasicCoverageBlock`s branch from another `BasicCoverageBlock`, one of the branches\n+    /// can be counted by `Expression` by subtracting the other branch from the branching\n+    /// block. Otherwise, the `BasicCoverageBlock` executed the least should have the `Counter`.\n+    /// One way to predict which branch executes the least is by considering loops. A loop is exited\n+    /// at a branch, so the branch that jumps to a `BasicCoverageBlock` outside the loop is almost\n+    /// always executed less than the branch that does not exit the loop.\n+    ///\n+    /// Returns any non-code-span expressions created to represent intermediate values (such as to\n+    /// add two counters so the result can be subtracted from another counter), or an Error with\n+    /// message for subsequent debugging.\n+    fn make_bcb_counters(\n+        &mut self,\n+        coverage_spans: &Vec<CoverageSpan>,\n+    ) -> Result<Vec<CoverageKind>, Error> {\n+        debug!(\"make_bcb_counters(): adding a counter or expression to each BasicCoverageBlock\");\n+        let num_bcbs = self.basic_coverage_blocks.num_nodes();\n+        let mut collect_intermediate_expressions = Vec::with_capacity(num_bcbs);\n+\n+        let mut bcbs_with_coverage = BitSet::new_empty(num_bcbs);\n+        for covspan in coverage_spans {\n+            bcbs_with_coverage.insert(covspan.bcb);\n+        }\n+\n+        // Walk the `CoverageGraph`. For each `BasicCoverageBlock` node with an associated\n+        // `CoverageSpan`, add a counter. If the `BasicCoverageBlock` branches, add a counter or\n+        // expression to each branch `BasicCoverageBlock` (if the branch BCB has only one incoming\n+        // edge) or edge from the branching BCB to the branch BCB (if the branch BCB has multiple\n+        // incoming edges).\n+        //\n+        // The `TraverseCoverageGraphWithLoops` traversal ensures that, when a loop is encountered,\n+        // all `BasicCoverageBlock` nodes in the loop are visited before visiting any node outside\n+        // the loop. The `traversal` state includes a `context_stack`, providing a way to know if\n+        // the current BCB is in one or more nested loops or not.\n+        let mut traversal = TraverseCoverageGraphWithLoops::new(&self.basic_coverage_blocks);\n+        while let Some(bcb) = traversal.next(self.basic_coverage_blocks) {\n+            if bcbs_with_coverage.contains(bcb) {\n+                debug!(\"{:?} has at least one `CoverageSpan`. Get or make its counter\", bcb);\n+                let branching_counter_operand =\n+                    self.get_or_make_counter_operand(bcb, &mut collect_intermediate_expressions)?;\n+\n+                if self.bcb_needs_branch_counters(bcb) {\n+                    self.make_branch_counters(\n+                        &mut traversal,\n+                        bcb,\n+                        branching_counter_operand,\n+                        &mut collect_intermediate_expressions,\n+                    )?;\n+                }\n+            } else {\n+                debug!(\n+                    \"{:?} does not have any `CoverageSpan`s. A counter will only be added if \\\n+                    and when a covered BCB has an expression dependency.\",\n+                    bcb,\n+                );\n+            }\n+        }\n+\n+        if traversal.is_complete() {\n+            Ok(collect_intermediate_expressions)\n+        } else {\n+            Error::from_string(format!(\n+                \"`TraverseCoverageGraphWithLoops` missed some `BasicCoverageBlock`s: {:?}\",\n+                traversal.unvisited(),\n+            ))\n+        }\n+    }\n+\n+    fn make_branch_counters(\n+        &mut self,\n+        traversal: &mut TraverseCoverageGraphWithLoops,\n+        branching_bcb: BasicCoverageBlock,\n+        branching_counter_operand: ExpressionOperandId,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+    ) -> Result<(), Error> {\n+        let branches = self.bcb_branches(branching_bcb);\n+        debug!(\n+            \"{:?} has some branch(es) without counters:\\n  {}\",\n+            branching_bcb,\n+            branches\n+                .iter()\n+                .map(|branch| {\n+                    format!(\"{:?}: {:?}\", branch, branch.counter(&self.basic_coverage_blocks))\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n  \"),\n+        );\n+\n+        // Use the `traversal` state to decide if a subset of the branches exit a loop, making it\n+        // likely that branch is executed less than branches that do not exit the same loop. In this\n+        // case, any branch that does not exit the loop (and has not already been assigned a\n+        // counter) should be counted by expression, if possible. (If a preferred expression branch\n+        // is not selected based on the loop context, select any branch without an existing\n+        // counter.)\n+        let expression_branch = self.choose_preferred_expression_branch(traversal, &branches);\n+\n+        // Assign a Counter or Expression to each branch, plus additional `Expression`s, as needed,\n+        // to sum up intermediate results.\n+        let mut some_sumup_counter_operand = None;\n+        for branch in branches {\n+            // Skip the selected `expression_branch`, if any. It's expression will be assigned after\n+            // all others.\n+            if branch != expression_branch {\n+                let branch_counter_operand = if branch.is_only_path_to_target() {\n+                    debug!(\n+                        \"  {:?} has only one incoming edge (from {:?}), so adding a \\\n+                        counter\",\n+                        branch, branching_bcb\n+                    );\n+                    self.get_or_make_counter_operand(\n+                        branch.target_bcb,\n+                        collect_intermediate_expressions,\n+                    )?\n+                } else {\n+                    debug!(\"  {:?} has multiple incoming edges, so adding an edge counter\", branch);\n+                    self.get_or_make_edge_counter_operand(\n+                        branching_bcb,\n+                        branch.target_bcb,\n+                        collect_intermediate_expressions,\n+                    )?\n+                };\n+                if let Some(sumup_counter_operand) =\n+                    some_sumup_counter_operand.replace(branch_counter_operand)\n+                {\n+                    let intermediate_expression = self.coverage_counters.make_expression(\n+                        branch_counter_operand,\n+                        Op::Add,\n+                        sumup_counter_operand,\n+                        || None,\n+                    );\n+                    debug!(\n+                        \"  [new intermediate expression: {}]\",\n+                        self.format_counter(&intermediate_expression)\n+                    );\n+                    let intermediate_expression_operand = intermediate_expression.as_operand_id();\n+                    collect_intermediate_expressions.push(intermediate_expression);\n+                    some_sumup_counter_operand.replace(intermediate_expression_operand);\n+                }\n+            }\n+        }\n+\n+        // Assign the final expression to the `expression_branch` by subtracting the total of all\n+        // other branches from the counter of the branching BCB.\n+        let sumup_counter_operand =\n+            some_sumup_counter_operand.expect(\"sumup_counter_operand should have a value\");\n+        debug!(\n+            \"Making an expression for the selected expression_branch: {:?} \\\n+            (expression_branch predecessors: {:?})\",\n+            expression_branch,\n+            self.bcb_predecessors(expression_branch.target_bcb),\n+        );\n+        let expression = self.coverage_counters.make_expression(\n+            branching_counter_operand,\n+            Op::Subtract,\n+            sumup_counter_operand,\n+            || Some(format!(\"{:?}\", expression_branch)),\n+        );\n+        debug!(\"{:?} gets an expression: {}\", expression_branch, self.format_counter(&expression));\n+        let bcb = expression_branch.target_bcb;\n+        if expression_branch.is_only_path_to_target() {\n+            self.basic_coverage_blocks[bcb].set_counter(expression)?;\n+        } else {\n+            self.basic_coverage_blocks[bcb].set_edge_counter_from(branching_bcb, expression)?;\n+        }\n+        Ok(())\n+    }\n+\n+    fn get_or_make_counter_operand(\n+        &mut self,\n+        bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        self.recursive_get_or_make_counter_operand(bcb, collect_intermediate_expressions, 1)\n+    }\n+\n+    fn recursive_get_or_make_counter_operand(\n+        &mut self,\n+        bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+        debug_indent_level: usize,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        // If the BCB already has a counter, return it.\n+        if let Some(counter_kind) = self.basic_coverage_blocks[bcb].counter() {\n+            debug!(\n+                \"{}{:?} already has a counter: {}\",\n+                NESTED_INDENT.repeat(debug_indent_level),\n+                bcb,\n+                self.format_counter(counter_kind),\n+            );\n+            return Ok(counter_kind.as_operand_id());\n+        }\n+\n+        // A BCB with only one incoming edge gets a simple `Counter` (via `make_counter()`).\n+        // Also, a BCB that loops back to itself gets a simple `Counter`. This may indicate the\n+        // program results in a tight infinite loop, but it should still compile.\n+        let one_path_to_target = self.bcb_has_one_path_to_target(bcb);\n+        if one_path_to_target || self.bcb_predecessors(bcb).contains(&bcb) {\n+            let counter_kind = self.coverage_counters.make_counter(|| Some(format!(\"{:?}\", bcb)));\n+            if one_path_to_target {\n+                debug!(\n+                    \"{}{:?} gets a new counter: {}\",\n+                    NESTED_INDENT.repeat(debug_indent_level),\n+                    bcb,\n+                    self.format_counter(&counter_kind),\n+                );\n+            } else {\n+                debug!(\n+                    \"{}{:?} has itself as its own predecessor. It can't be part of its own \\\n+                    Expression sum, so it will get its own new counter: {}. (Note, the compiled \\\n+                    code will generate an infinite loop.)\",\n+                    NESTED_INDENT.repeat(debug_indent_level),\n+                    bcb,\n+                    self.format_counter(&counter_kind),\n+                );\n+            }\n+            return self.basic_coverage_blocks[bcb].set_counter(counter_kind);\n+        }\n+\n+        // A BCB with multiple incoming edges can compute its count by `Expression`, summing up the\n+        // counters and/or expressions of its incoming edges. This will recursively get or create\n+        // counters for those incoming edges first, then call `make_expression()` to sum them up,\n+        // with additional intermediate expressions as needed.\n+        let mut predecessors = self.bcb_predecessors(bcb).clone().into_iter();\n+        debug!(\n+            \"{}{:?} has multiple incoming edges and will get an expression that sums them up...\",\n+            NESTED_INDENT.repeat(debug_indent_level),\n+            bcb,\n+        );\n+        let first_edge_counter_operand = self.recursive_get_or_make_edge_counter_operand(\n+            predecessors.next().unwrap(),\n+            bcb,\n+            collect_intermediate_expressions,\n+            debug_indent_level + 1,\n+        )?;\n+        let mut some_sumup_edge_counter_operand = None;\n+        for predecessor in predecessors {\n+            let edge_counter_operand = self.recursive_get_or_make_edge_counter_operand(\n+                predecessor,\n+                bcb,\n+                collect_intermediate_expressions,\n+                debug_indent_level + 1,\n+            )?;\n+            if let Some(sumup_edge_counter_operand) =\n+                some_sumup_edge_counter_operand.replace(edge_counter_operand)\n+            {\n+                let intermediate_expression = self.coverage_counters.make_expression(\n+                    sumup_edge_counter_operand,\n+                    Op::Add,\n+                    edge_counter_operand,\n+                    || None,\n+                );\n+                debug!(\n+                    \"{}new intermediate expression: {}\",\n+                    NESTED_INDENT.repeat(debug_indent_level),\n+                    self.format_counter(&intermediate_expression)\n+                );\n+                let intermediate_expression_operand = intermediate_expression.as_operand_id();\n+                collect_intermediate_expressions.push(intermediate_expression);\n+                some_sumup_edge_counter_operand.replace(intermediate_expression_operand);\n+            }\n+        }\n+        let counter_kind = self.coverage_counters.make_expression(\n+            first_edge_counter_operand,\n+            Op::Add,\n+            some_sumup_edge_counter_operand.unwrap(),\n+            || Some(format!(\"{:?}\", bcb)),\n+        );\n+        debug!(\n+            \"{}{:?} gets a new counter (sum of predecessor counters): {}\",\n+            NESTED_INDENT.repeat(debug_indent_level),\n+            bcb,\n+            self.format_counter(&counter_kind)\n+        );\n+        self.basic_coverage_blocks[bcb].set_counter(counter_kind)\n+    }\n+\n+    fn get_or_make_edge_counter_operand(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        self.recursive_get_or_make_edge_counter_operand(\n+            from_bcb,\n+            to_bcb,\n+            collect_intermediate_expressions,\n+            1,\n+        )\n+    }\n+\n+    fn recursive_get_or_make_edge_counter_operand(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bcb: BasicCoverageBlock,\n+        collect_intermediate_expressions: &mut Vec<CoverageKind>,\n+        debug_indent_level: usize,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        // If the source BCB has only one successor (assumed to be the given target), an edge\n+        // counter is unnecessary. Just get or make a counter for the source BCB.\n+        let successors = self.bcb_successors(from_bcb).iter();\n+        if successors.len() == 1 {\n+            return self.recursive_get_or_make_counter_operand(\n+                from_bcb,\n+                collect_intermediate_expressions,\n+                debug_indent_level + 1,\n+            );\n+        }\n+\n+        // If the edge already has a counter, return it.\n+        if let Some(counter_kind) = self.basic_coverage_blocks[to_bcb].edge_counter_from(from_bcb) {\n+            debug!(\n+                \"{}Edge {:?}->{:?} already has a counter: {}\",\n+                NESTED_INDENT.repeat(debug_indent_level),\n+                from_bcb,\n+                to_bcb,\n+                self.format_counter(counter_kind)\n+            );\n+            return Ok(counter_kind.as_operand_id());\n+        }\n+\n+        // Make a new counter to count this edge.\n+        let counter_kind =\n+            self.coverage_counters.make_counter(|| Some(format!(\"{:?}->{:?}\", from_bcb, to_bcb)));\n+        debug!(\n+            \"{}Edge {:?}->{:?} gets a new counter: {}\",\n+            NESTED_INDENT.repeat(debug_indent_level),\n+            from_bcb,\n+            to_bcb,\n+            self.format_counter(&counter_kind)\n+        );\n+        self.basic_coverage_blocks[to_bcb].set_edge_counter_from(from_bcb, counter_kind)\n+    }\n+\n+    /// Select a branch for the expression, either the recommended `reloop_branch`, or if none was\n+    /// found, select any branch.\n+    fn choose_preferred_expression_branch(\n+        &self,\n+        traversal: &TraverseCoverageGraphWithLoops,\n+        branches: &Vec<BcbBranch>,\n+    ) -> BcbBranch {\n+        let branch_needs_a_counter =\n+            |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n+\n+        let some_reloop_branch = self.find_some_reloop_branch(traversal, &branches);\n+        if let Some(reloop_branch_without_counter) =\n+            some_reloop_branch.filter(branch_needs_a_counter)\n+        {\n+            debug!(\n+                \"Selecting reloop_branch={:?} that still needs a counter, to get the \\\n+                `Expression`\",\n+                reloop_branch_without_counter\n+            );\n+            reloop_branch_without_counter\n+        } else {\n+            let &branch_without_counter = branches\n+                .iter()\n+                .find(|&&branch| branch.counter(&self.basic_coverage_blocks).is_none())\n+                .expect(\n+                    \"needs_branch_counters was `true` so there should be at least one \\\n+                    branch\",\n+                );\n+            debug!(\n+                \"Selecting any branch={:?} that still needs a counter, to get the \\\n+                `Expression` because there was no `reloop_branch`, or it already had a \\\n+                counter\",\n+                branch_without_counter\n+            );\n+            branch_without_counter\n+        }\n+    }\n+\n+    /// At most, one of the branches (or its edge, from the branching_bcb, if the branch has\n+    /// multiple incoming edges) can have a counter computed by expression.\n+    ///\n+    /// If at least one of the branches leads outside of a loop (`found_loop_exit` is\n+    /// true), and at least one other branch does not exit the loop (the first of which\n+    /// is captured in `some_reloop_branch`), it's likely any reloop branch will be\n+    /// executed far more often than loop exit branch, making the reloop branch a better\n+    /// candidate for an expression.\n+    fn find_some_reloop_branch(\n+        &self,\n+        traversal: &TraverseCoverageGraphWithLoops,\n+        branches: &Vec<BcbBranch>,\n+    ) -> Option<BcbBranch> {\n+        let branch_needs_a_counter =\n+            |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n+\n+        let mut some_reloop_branch: Option<BcbBranch> = None;\n+        for context in traversal.context_stack.iter().rev() {\n+            if let Some((backedge_from_bcbs, _)) = &context.loop_backedges {\n+                let mut found_loop_exit = false;\n+                for &branch in branches.iter() {\n+                    if backedge_from_bcbs.iter().any(|&backedge_from_bcb| {\n+                        self.bcb_is_dominated_by(backedge_from_bcb, branch.target_bcb)\n+                    }) {\n+                        if let Some(reloop_branch) = some_reloop_branch {\n+                            if reloop_branch.counter(&self.basic_coverage_blocks).is_none() {\n+                                // we already found a candidate reloop_branch that still\n+                                // needs a counter\n+                                continue;\n+                            }\n+                        }\n+                        // The path from branch leads back to the top of the loop. Set this\n+                        // branch as the `reloop_branch`. If this branch already has a\n+                        // counter, and we find another reloop branch that doesn't have a\n+                        // counter yet, that branch will be selected as the `reloop_branch`\n+                        // instead.\n+                        some_reloop_branch = Some(branch);\n+                    } else {\n+                        // The path from branch leads outside this loop\n+                        found_loop_exit = true;\n+                    }\n+                    if found_loop_exit\n+                        && some_reloop_branch.filter(branch_needs_a_counter).is_some()\n+                    {\n+                        // Found both a branch that exits the loop and a branch that returns\n+                        // to the top of the loop (`reloop_branch`), and the `reloop_branch`\n+                        // doesn't already have a counter.\n+                        break;\n+                    }\n+                }\n+                if !found_loop_exit {\n+                    debug!(\n+                        \"No branches exit the loop, so any branch without an existing \\\n+                        counter can have the `Expression`.\"\n+                    );\n+                    break;\n+                }\n+                if some_reloop_branch.is_some() {\n+                    debug!(\n+                        \"Found a branch that exits the loop and a branch the loops back to \\\n+                        the top of the loop (`reloop_branch`). The `reloop_branch` will \\\n+                        get the `Expression`, as long as it still needs a counter.\"\n+                    );\n+                    break;\n+                }\n+                // else all branches exited this loop context, so run the same checks with\n+                // the outer loop(s)\n+            }\n+        }\n+        some_reloop_branch\n+    }\n+\n+    #[inline]\n+    fn bcb_predecessors(&self, bcb: BasicCoverageBlock) -> &Vec<BasicCoverageBlock> {\n+        &self.basic_coverage_blocks.predecessors[bcb]\n+    }\n+\n+    #[inline]\n+    fn bcb_successors(&self, bcb: BasicCoverageBlock) -> &Vec<BasicCoverageBlock> {\n+        &self.basic_coverage_blocks.successors[bcb]\n+    }\n+\n+    #[inline]\n+    fn bcb_branches(&self, from_bcb: BasicCoverageBlock) -> Vec<BcbBranch> {\n+        self.bcb_successors(from_bcb)\n+            .iter()\n+            .map(|&to_bcb| BcbBranch::from_to(from_bcb, to_bcb, &self.basic_coverage_blocks))\n+            .collect::<Vec<_>>()\n+    }\n+\n+    fn bcb_needs_branch_counters(&self, bcb: BasicCoverageBlock) -> bool {\n+        let branch_needs_a_counter =\n+            |branch: &BcbBranch| branch.counter(&self.basic_coverage_blocks).is_none();\n+        let branches = self.bcb_branches(bcb);\n+        branches.len() > 1 && branches.iter().any(branch_needs_a_counter)\n+    }\n+\n+    /// Returns true if the BasicCoverageBlock has zero or one incoming edge. (If zero, it should be\n+    /// the entry point for the function.)\n+    #[inline]\n+    fn bcb_has_one_path_to_target(&self, bcb: BasicCoverageBlock) -> bool {\n+        self.bcb_predecessors(bcb).len() <= 1\n+    }\n+\n+    #[inline]\n+    fn bcb_is_dominated_by(&self, node: BasicCoverageBlock, dom: BasicCoverageBlock) -> bool {\n+        self.basic_coverage_blocks.is_dominated_by(node, dom)\n+    }\n+\n+    #[inline]\n+    fn format_counter(&self, counter_kind: &CoverageKind) -> String {\n+        self.coverage_counters.debug_counters.format_counter(counter_kind)\n+    }\n+}"}, {"sha": "cc697dfd7fe280d37e438dbbca6159b65d19c605", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "added", "additions": 836, "deletions": 0, "changes": 836, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,836 @@\n+//! The `InstrumentCoverage` MIR pass implementation includes debugging tools and options\n+//! to help developers understand and/or improve the analysis and instrumentation of a MIR.\n+//!\n+//! To enable coverage, include the rustc command line option:\n+//!\n+//!   * `-Z instrument-coverage`\n+//!\n+//! MIR Dump Files, with additional `CoverageGraph` graphviz and `CoverageSpan` spanview\n+//! ------------------------------------------------------------------------------------\n+//!\n+//! Additional debugging options include:\n+//!\n+//!   * `-Z dump-mir=InstrumentCoverage` - Generate `.mir` files showing the state of the MIR,\n+//!     before and after the `InstrumentCoverage` pass, for each compiled function.\n+//!\n+//!   * `-Z dump-mir-graphviz` - If `-Z dump-mir` is also enabled for the current MIR node path,\n+//!     each MIR dump is accompanied by a before-and-after graphical view of the MIR, in Graphviz\n+//!     `.dot` file format (which can be visually rendered as a graph using any of a number of free\n+//!     Graphviz viewers and IDE extensions).\n+//!\n+//!     For the `InstrumentCoverage` pass, this option also enables generation of an additional\n+//!     Graphviz `.dot` file for each function, rendering the `CoverageGraph`: the control flow\n+//!     graph (CFG) of `BasicCoverageBlocks` (BCBs), as nodes, internally labeled to show the\n+//!     `CoverageSpan`-based MIR elements each BCB represents (`BasicBlock`s, `Statement`s and\n+//!     `Terminator`s), assigned coverage counters and/or expressions, and edge counters, as needed.\n+//!\n+//!     (Note the additional option, `-Z graphviz-dark-mode`, can be added, to change the rendered\n+//!     output from its default black-on-white background to a dark color theme, if desired.)\n+//!\n+//!   * `-Z dump-mir-spanview` - If `-Z dump-mir` is also enabled for the current MIR node path,\n+//!     each MIR dump is accompanied by a before-and-after `.html` document showing the function's\n+//!     original source code, highlighted by it's MIR spans, at the `statement`-level (by default),\n+//!     `terminator` only, or encompassing span for the `Terminator` plus all `Statement`s, in each\n+//!     `block` (`BasicBlock`).\n+//!\n+//!     For the `InstrumentCoverage` pass, this option also enables generation of an additional\n+//!     spanview `.html` file for each function, showing the aggregated `CoverageSpan`s that will\n+//!     require counters (or counter expressions) for accurate coverage analysis.\n+//!\n+//! Debug Logging\n+//! -------------\n+//!\n+//! The `InstrumentCoverage` pass includes debug logging messages at various phases and decision\n+//! points, which can be enabled via environment variable:\n+//!\n+//! ```shell\n+//! RUSTC_LOG=rustc_mir::transform::coverage=debug\n+//! ```\n+//!\n+//! Other module paths with coverage-related debug logs may also be of interest, particularly for\n+//! debugging the coverage map data, injected as global variables in the LLVM IR (during rustc's\n+//! code generation pass). For example:\n+//!\n+//! ```shell\n+//! RUSTC_LOG=rustc_mir::transform::coverage,rustc_codegen_ssa::coverageinfo,rustc_codegen_llvm::coverageinfo=debug\n+//! ```\n+//!\n+//! Coverage Debug Options\n+//! ---------------------------------\n+//!\n+//! Additional debugging options can be enabled using the environment variable:\n+//!\n+//! ```shell\n+//! RUSTC_COVERAGE_DEBUG_OPTIONS=<options>\n+//! ```\n+//!\n+//! These options are comma-separated, and specified in the format `option-name=value`. For example:\n+//!\n+//! ```shell\n+//! $ RUSTC_COVERAGE_DEBUG_OPTIONS=counter-format=id+operation,allow-unused-expressions=yes cargo build\n+//! ```\n+//!\n+//! Coverage debug options include:\n+//!\n+//!   * `allow-unused-expressions=yes` or `no` (default: `no`)\n+//!\n+//!     The `InstrumentCoverage` algorithms _should_ only create and assign expressions to a\n+//!     `BasicCoverageBlock`, or an incoming edge, if that expression is either (a) required to\n+//!     count a `CoverageSpan`, or (b) a dependency of some other required counter expression.\n+//!\n+//!     If an expression is generated that does not map to a `CoverageSpan` or dependency, this\n+//!     probably indicates there was a bug in the algorithm that creates and assigns counters\n+//!     and expressions.\n+//!\n+//!     When this kind of bug is encountered, the rustc compiler will panic by default. Setting:\n+//!     `allow-unused-expressions=yes` will log a warning message instead of panicking (effectively\n+//!     ignoring the unused expressions), which may be helpful when debugging the root cause of\n+//!     the problem.\n+//!\n+//!   * `counter-format=<choices>`, where `<choices>` can be any plus-separated combination of `id`,\n+//!     `block`, and/or `operation` (default: `block+operation`)\n+//!\n+//!     This option effects both the `CoverageGraph` (graphviz `.dot` files) and debug logging, when\n+//!     generating labels for counters and expressions.\n+//!\n+//!     Depending on the values and combinations, counters can be labeled by:\n+//!\n+//!         * `id` - counter or expression ID (ascending counter IDs, starting at 1, or descending\n+//!           expression IDs, starting at `u32:MAX`)\n+//!         * `block` - the `BasicCoverageBlock` label (for example, `bcb0`) or edge label (for\n+//!           example `bcb0->bcb1`), for counters or expressions assigned to count a\n+//!           `BasicCoverageBlock` or edge. Intermediate expressions (not directly associated with\n+//!           a BCB or edge) will be labeled by their expression ID, unless `operation` is also\n+//!           specified.\n+//!         * `operation` - applied to expressions only, labels include the left-hand-side counter\n+//!           or expression label (lhs operand), the operator (`+` or `-`), and the right-hand-side\n+//!           counter or expression (rhs operand). Expression operand labels are generated\n+//!           recursively, generating labels with nested operations, enclosed in parentheses\n+//!           (for example: `bcb2 + (bcb0 - bcb1)`).\n+\n+use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n+use super::spans::CoverageSpan;\n+\n+use crate::util::generic_graphviz::GraphvizWriter;\n+use crate::util::pretty;\n+use crate::util::spanview::{self, SpanViewable};\n+\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_index::vec::Idx;\n+use rustc_middle::mir::coverage::*;\n+use rustc_middle::mir::{self, BasicBlock, TerminatorKind};\n+use rustc_middle::ty::TyCtxt;\n+\n+use std::lazy::SyncOnceCell;\n+\n+pub const NESTED_INDENT: &str = \"    \";\n+\n+const RUSTC_COVERAGE_DEBUG_OPTIONS: &str = \"RUSTC_COVERAGE_DEBUG_OPTIONS\";\n+\n+pub(crate) fn debug_options<'a>() -> &'a DebugOptions {\n+    static DEBUG_OPTIONS: SyncOnceCell<DebugOptions> = SyncOnceCell::new();\n+\n+    &DEBUG_OPTIONS.get_or_init(|| DebugOptions::from_env())\n+}\n+\n+/// Parses and maintains coverage-specific debug options captured from the environment variable\n+/// \"RUSTC_COVERAGE_DEBUG_OPTIONS\", if set.\n+#[derive(Debug, Clone)]\n+pub(crate) struct DebugOptions {\n+    pub allow_unused_expressions: bool,\n+    counter_format: ExpressionFormat,\n+}\n+\n+impl DebugOptions {\n+    fn from_env() -> Self {\n+        let mut allow_unused_expressions = true;\n+        let mut counter_format = ExpressionFormat::default();\n+\n+        if let Ok(env_debug_options) = std::env::var(RUSTC_COVERAGE_DEBUG_OPTIONS) {\n+            for setting_str in env_debug_options.replace(\" \", \"\").replace(\"-\", \"_\").split(\",\") {\n+                let mut setting = setting_str.splitn(2, \"=\");\n+                match setting.next() {\n+                    Some(option) if option == \"allow_unused_expressions\" => {\n+                        allow_unused_expressions = bool_option_val(option, setting.next());\n+                        debug!(\n+                            \"{} env option `allow_unused_expressions` is set to {}\",\n+                            RUSTC_COVERAGE_DEBUG_OPTIONS, allow_unused_expressions\n+                        );\n+                    }\n+                    Some(option) if option == \"counter_format\" => {\n+                        if let Some(strval) = setting.next() {\n+                            counter_format = counter_format_option_val(strval);\n+                            debug!(\n+                                \"{} env option `counter_format` is set to {:?}\",\n+                                RUSTC_COVERAGE_DEBUG_OPTIONS, counter_format\n+                            );\n+                        } else {\n+                            bug!(\n+                                \"`{}` option in environment variable {} requires one or more \\\n+                                plus-separated choices (a non-empty subset of \\\n+                                `id+block+operation`)\",\n+                                option,\n+                                RUSTC_COVERAGE_DEBUG_OPTIONS\n+                            );\n+                        }\n+                    }\n+                    Some(\"\") => {}\n+                    Some(invalid) => bug!(\n+                        \"Unsupported setting `{}` in environment variable {}\",\n+                        invalid,\n+                        RUSTC_COVERAGE_DEBUG_OPTIONS\n+                    ),\n+                    None => {}\n+                }\n+            }\n+        }\n+\n+        Self { allow_unused_expressions, counter_format }\n+    }\n+}\n+\n+fn bool_option_val(option: &str, some_strval: Option<&str>) -> bool {\n+    if let Some(val) = some_strval {\n+        if vec![\"yes\", \"y\", \"on\", \"true\"].contains(&val) {\n+            true\n+        } else if vec![\"no\", \"n\", \"off\", \"false\"].contains(&val) {\n+            false\n+        } else {\n+            bug!(\n+                \"Unsupported value `{}` for option `{}` in environment variable {}\",\n+                option,\n+                val,\n+                RUSTC_COVERAGE_DEBUG_OPTIONS\n+            )\n+        }\n+    } else {\n+        true\n+    }\n+}\n+\n+fn counter_format_option_val(strval: &str) -> ExpressionFormat {\n+    let mut counter_format = ExpressionFormat { id: false, block: false, operation: false };\n+    let components = strval.splitn(3, \"+\");\n+    for component in components {\n+        match component {\n+            \"id\" => counter_format.id = true,\n+            \"block\" => counter_format.block = true,\n+            \"operation\" => counter_format.operation = true,\n+            _ => bug!(\n+                \"Unsupported counter_format choice `{}` in environment variable {}\",\n+                component,\n+                RUSTC_COVERAGE_DEBUG_OPTIONS\n+            ),\n+        }\n+    }\n+    counter_format\n+}\n+\n+#[derive(Debug, Clone)]\n+struct ExpressionFormat {\n+    id: bool,\n+    block: bool,\n+    operation: bool,\n+}\n+\n+impl Default for ExpressionFormat {\n+    fn default() -> Self {\n+        Self { id: false, block: true, operation: true }\n+    }\n+}\n+\n+/// If enabled, this struct maintains a map from `CoverageKind` IDs (as `ExpressionOperandId`) to\n+/// the `CoverageKind` data and optional label (normally, the counter's associated\n+/// `BasicCoverageBlock` format string, if any).\n+///\n+/// Use `format_counter` to convert one of these `CoverageKind` counters to a debug output string,\n+/// as directed by the `DebugOptions`. This allows the format of counter labels in logs and dump\n+/// files (including the `CoverageGraph` graphviz file) to be changed at runtime, via environment\n+/// variable.\n+///\n+/// `DebugCounters` supports a recursive rendering of `Expression` counters, so they can be\n+/// presented as nested expressions such as `(bcb3 - (bcb0 + bcb1))`.\n+pub(crate) struct DebugCounters {\n+    some_counters: Option<FxHashMap<ExpressionOperandId, DebugCounter>>,\n+}\n+\n+impl DebugCounters {\n+    pub fn new() -> Self {\n+        Self { some_counters: None }\n+    }\n+\n+    pub fn enable(&mut self) {\n+        debug_assert!(!self.is_enabled());\n+        self.some_counters.replace(FxHashMap::default());\n+    }\n+\n+    pub fn is_enabled(&self) -> bool {\n+        self.some_counters.is_some()\n+    }\n+\n+    pub fn add_counter(&mut self, counter_kind: &CoverageKind, some_block_label: Option<String>) {\n+        if let Some(counters) = &mut self.some_counters {\n+            let id: ExpressionOperandId = match *counter_kind {\n+                CoverageKind::Counter { id, .. } => id.into(),\n+                CoverageKind::Expression { id, .. } => id.into(),\n+                _ => bug!(\n+                    \"the given `CoverageKind` is not an counter or expression: {:?}\",\n+                    counter_kind\n+                ),\n+            };\n+            counters\n+                .insert(id.into(), DebugCounter::new(counter_kind.clone(), some_block_label))\n+                .expect_none(\n+                    \"attempt to add the same counter_kind to DebugCounters more than once\",\n+                );\n+        }\n+    }\n+\n+    pub fn some_block_label(&self, operand: ExpressionOperandId) -> Option<&String> {\n+        self.some_counters.as_ref().map_or(None, |counters| {\n+            counters\n+                .get(&operand)\n+                .map_or(None, |debug_counter| debug_counter.some_block_label.as_ref())\n+        })\n+    }\n+\n+    pub fn format_counter(&self, counter_kind: &CoverageKind) -> String {\n+        match *counter_kind {\n+            CoverageKind::Counter { .. } => {\n+                format!(\"Counter({})\", self.format_counter_kind(counter_kind))\n+            }\n+            CoverageKind::Expression { .. } => {\n+                format!(\"Expression({})\", self.format_counter_kind(counter_kind))\n+            }\n+            CoverageKind::Unreachable { .. } => \"Unreachable\".to_owned(),\n+        }\n+    }\n+\n+    fn format_counter_kind(&self, counter_kind: &CoverageKind) -> String {\n+        let counter_format = &debug_options().counter_format;\n+        if let CoverageKind::Expression { id, lhs, op, rhs } = *counter_kind {\n+            if counter_format.operation {\n+                return format!(\n+                    \"{}{} {} {}\",\n+                    if counter_format.id || self.some_counters.is_none() {\n+                        format!(\"#{} = \", id.index())\n+                    } else {\n+                        String::new()\n+                    },\n+                    self.format_operand(lhs),\n+                    if op == Op::Add { \"+\" } else { \"-\" },\n+                    self.format_operand(rhs),\n+                );\n+            }\n+        }\n+\n+        let id: ExpressionOperandId = match *counter_kind {\n+            CoverageKind::Counter { id, .. } => id.into(),\n+            CoverageKind::Expression { id, .. } => id.into(),\n+            _ => {\n+                bug!(\"the given `CoverageKind` is not an counter or expression: {:?}\", counter_kind)\n+            }\n+        };\n+        if self.some_counters.is_some() && (counter_format.block || !counter_format.id) {\n+            let counters = self.some_counters.as_ref().unwrap();\n+            if let Some(DebugCounter { some_block_label: Some(block_label), .. }) =\n+                counters.get(&id.into())\n+            {\n+                return if counter_format.id {\n+                    format!(\"{}#{}\", block_label, id.index())\n+                } else {\n+                    format!(\"{}\", block_label)\n+                };\n+            }\n+        }\n+        format!(\"#{}\", id.index())\n+    }\n+\n+    fn format_operand(&self, operand: ExpressionOperandId) -> String {\n+        if operand.index() == 0 {\n+            return String::from(\"0\");\n+        }\n+        if let Some(counters) = &self.some_counters {\n+            if let Some(DebugCounter { counter_kind, some_block_label }) = counters.get(&operand) {\n+                if let CoverageKind::Expression { .. } = counter_kind {\n+                    if let Some(block_label) = some_block_label {\n+                        if debug_options().counter_format.block {\n+                            return format!(\n+                                \"{}:({})\",\n+                                block_label,\n+                                self.format_counter_kind(counter_kind)\n+                            );\n+                        }\n+                    }\n+                    return format!(\"({})\", self.format_counter_kind(counter_kind));\n+                }\n+                return format!(\"{}\", self.format_counter_kind(counter_kind));\n+            }\n+        }\n+        format!(\"#{}\", operand.index().to_string())\n+    }\n+}\n+\n+/// A non-public support class to `DebugCounters`.\n+#[derive(Debug)]\n+struct DebugCounter {\n+    counter_kind: CoverageKind,\n+    some_block_label: Option<String>,\n+}\n+\n+impl DebugCounter {\n+    fn new(counter_kind: CoverageKind, some_block_label: Option<String>) -> Self {\n+        Self { counter_kind, some_block_label }\n+    }\n+}\n+\n+/// If enabled, this data structure captures additional debugging information used when generating\n+/// a Graphviz (.dot file) representation of the `CoverageGraph`, for debugging purposes.\n+pub(crate) struct GraphvizData {\n+    some_bcb_to_coverage_spans_with_counters:\n+        Option<FxHashMap<BasicCoverageBlock, Vec<(CoverageSpan, CoverageKind)>>>,\n+    some_bcb_to_dependency_counters: Option<FxHashMap<BasicCoverageBlock, Vec<CoverageKind>>>,\n+    some_edge_to_counter: Option<FxHashMap<(BasicCoverageBlock, BasicBlock), CoverageKind>>,\n+}\n+\n+impl GraphvizData {\n+    pub fn new() -> Self {\n+        Self {\n+            some_bcb_to_coverage_spans_with_counters: None,\n+            some_bcb_to_dependency_counters: None,\n+            some_edge_to_counter: None,\n+        }\n+    }\n+\n+    pub fn enable(&mut self) {\n+        debug_assert!(!self.is_enabled());\n+        self.some_bcb_to_coverage_spans_with_counters = Some(FxHashMap::default());\n+        self.some_bcb_to_dependency_counters = Some(FxHashMap::default());\n+        self.some_edge_to_counter = Some(FxHashMap::default());\n+    }\n+\n+    pub fn is_enabled(&self) -> bool {\n+        self.some_bcb_to_coverage_spans_with_counters.is_some()\n+    }\n+\n+    pub fn add_bcb_coverage_span_with_counter(\n+        &mut self,\n+        bcb: BasicCoverageBlock,\n+        coverage_span: &CoverageSpan,\n+        counter_kind: &CoverageKind,\n+    ) {\n+        if let Some(bcb_to_coverage_spans_with_counters) =\n+            self.some_bcb_to_coverage_spans_with_counters.as_mut()\n+        {\n+            bcb_to_coverage_spans_with_counters\n+                .entry(bcb)\n+                .or_insert_with(|| Vec::new())\n+                .push((coverage_span.clone(), counter_kind.clone()));\n+        }\n+    }\n+\n+    pub fn get_bcb_coverage_spans_with_counters(\n+        &self,\n+        bcb: BasicCoverageBlock,\n+    ) -> Option<&Vec<(CoverageSpan, CoverageKind)>> {\n+        if let Some(bcb_to_coverage_spans_with_counters) =\n+            self.some_bcb_to_coverage_spans_with_counters.as_ref()\n+        {\n+            bcb_to_coverage_spans_with_counters.get(&bcb)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub fn add_bcb_dependency_counter(\n+        &mut self,\n+        bcb: BasicCoverageBlock,\n+        counter_kind: &CoverageKind,\n+    ) {\n+        if let Some(bcb_to_dependency_counters) = self.some_bcb_to_dependency_counters.as_mut() {\n+            bcb_to_dependency_counters\n+                .entry(bcb)\n+                .or_insert_with(|| Vec::new())\n+                .push(counter_kind.clone());\n+        }\n+    }\n+\n+    pub fn get_bcb_dependency_counters(\n+        &self,\n+        bcb: BasicCoverageBlock,\n+    ) -> Option<&Vec<CoverageKind>> {\n+        if let Some(bcb_to_dependency_counters) = self.some_bcb_to_dependency_counters.as_ref() {\n+            bcb_to_dependency_counters.get(&bcb)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub fn set_edge_counter(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bb: BasicBlock,\n+        counter_kind: &CoverageKind,\n+    ) {\n+        if let Some(edge_to_counter) = self.some_edge_to_counter.as_mut() {\n+            edge_to_counter.insert((from_bcb, to_bb), counter_kind.clone()).expect_none(\n+                \"invalid attempt to insert more than one edge counter for the same edge\",\n+            );\n+        }\n+    }\n+\n+    pub fn get_edge_counter(\n+        &self,\n+        from_bcb: BasicCoverageBlock,\n+        to_bb: BasicBlock,\n+    ) -> Option<&CoverageKind> {\n+        if let Some(edge_to_counter) = self.some_edge_to_counter.as_ref() {\n+            edge_to_counter.get(&(from_bcb, to_bb))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// If enabled, this struct captures additional data used to track whether expressions were used,\n+/// directly or indirectly, to compute the coverage counts for all `CoverageSpan`s, and any that are\n+/// _not_ used are retained in the `unused_expressions` Vec, to be included in debug output (logs\n+/// and/or a `CoverageGraph` graphviz output).\n+pub(crate) struct UsedExpressions {\n+    some_used_expression_operands:\n+        Option<FxHashMap<ExpressionOperandId, Vec<InjectedExpressionId>>>,\n+    some_unused_expressions:\n+        Option<Vec<(CoverageKind, Option<BasicCoverageBlock>, BasicCoverageBlock)>>,\n+}\n+\n+impl UsedExpressions {\n+    pub fn new() -> Self {\n+        Self { some_used_expression_operands: None, some_unused_expressions: None }\n+    }\n+\n+    pub fn enable(&mut self) {\n+        debug_assert!(!self.is_enabled());\n+        self.some_used_expression_operands = Some(FxHashMap::default());\n+        self.some_unused_expressions = Some(Vec::new());\n+    }\n+\n+    pub fn is_enabled(&self) -> bool {\n+        self.some_used_expression_operands.is_some()\n+    }\n+\n+    pub fn add_expression_operands(&mut self, expression: &CoverageKind) {\n+        if let Some(used_expression_operands) = self.some_used_expression_operands.as_mut() {\n+            if let CoverageKind::Expression { id, lhs, rhs, .. } = *expression {\n+                used_expression_operands.entry(lhs).or_insert_with(|| Vec::new()).push(id);\n+                used_expression_operands.entry(rhs).or_insert_with(|| Vec::new()).push(id);\n+            }\n+        }\n+    }\n+\n+    pub fn expression_is_used(&self, expression: &CoverageKind) -> bool {\n+        if let Some(used_expression_operands) = self.some_used_expression_operands.as_ref() {\n+            used_expression_operands.contains_key(&expression.as_operand_id())\n+        } else {\n+            false\n+        }\n+    }\n+\n+    pub fn add_unused_expression_if_not_found(\n+        &mut self,\n+        expression: &CoverageKind,\n+        edge_from_bcb: Option<BasicCoverageBlock>,\n+        target_bcb: BasicCoverageBlock,\n+    ) {\n+        if let Some(used_expression_operands) = self.some_used_expression_operands.as_ref() {\n+            if !used_expression_operands.contains_key(&expression.as_operand_id()) {\n+                self.some_unused_expressions.as_mut().unwrap().push((\n+                    expression.clone(),\n+                    edge_from_bcb,\n+                    target_bcb,\n+                ));\n+            }\n+        }\n+    }\n+\n+    /// Return the list of unused counters (if any) as a tuple with the counter (`CoverageKind`),\n+    /// optional `from_bcb` (if it was an edge counter), and `target_bcb`.\n+    pub fn get_unused_expressions(\n+        &self,\n+    ) -> Vec<(CoverageKind, Option<BasicCoverageBlock>, BasicCoverageBlock)> {\n+        if let Some(unused_expressions) = self.some_unused_expressions.as_ref() {\n+            unused_expressions.clone()\n+        } else {\n+            Vec::new()\n+        }\n+    }\n+\n+    /// If enabled, validate that every BCB or edge counter not directly associated with a coverage\n+    /// span is at least indirectly associated (it is a dependency of a BCB counter that _is_\n+    /// associated with a coverage span).\n+    pub fn validate(\n+        &mut self,\n+        bcb_counters_without_direct_coverage_spans: &Vec<(\n+            Option<BasicCoverageBlock>,\n+            BasicCoverageBlock,\n+            CoverageKind,\n+        )>,\n+    ) {\n+        if self.is_enabled() {\n+            let mut not_validated = bcb_counters_without_direct_coverage_spans\n+                .iter()\n+                .map(|(_, _, counter_kind)| counter_kind)\n+                .collect::<Vec<_>>();\n+            let mut validating_count = 0;\n+            while not_validated.len() != validating_count {\n+                let to_validate = not_validated.split_off(0);\n+                validating_count = to_validate.len();\n+                for counter_kind in to_validate {\n+                    if self.expression_is_used(counter_kind) {\n+                        self.add_expression_operands(counter_kind);\n+                    } else {\n+                        not_validated.push(counter_kind);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn alert_on_unused_expressions(&self, debug_counters: &DebugCounters) {\n+        if let Some(unused_expressions) = self.some_unused_expressions.as_ref() {\n+            for (counter_kind, edge_from_bcb, target_bcb) in unused_expressions {\n+                let unused_counter_message = if let Some(from_bcb) = edge_from_bcb.as_ref() {\n+                    format!(\n+                        \"non-coverage edge counter found without a dependent expression, in \\\n+                        {:?}->{:?}; counter={}\",\n+                        from_bcb,\n+                        target_bcb,\n+                        debug_counters.format_counter(&counter_kind),\n+                    )\n+                } else {\n+                    format!(\n+                        \"non-coverage counter found without a dependent expression, in {:?}; \\\n+                        counter={}\",\n+                        target_bcb,\n+                        debug_counters.format_counter(&counter_kind),\n+                    )\n+                };\n+\n+                if debug_options().allow_unused_expressions {\n+                    debug!(\"WARNING: {}\", unused_counter_message);\n+                } else {\n+                    bug!(\"{}\", unused_counter_message);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Generates the MIR pass `CoverageSpan`-specific spanview dump file.\n+pub(crate) fn dump_coverage_spanview(\n+    tcx: TyCtxt<'tcx>,\n+    mir_body: &mir::Body<'tcx>,\n+    basic_coverage_blocks: &CoverageGraph,\n+    pass_name: &str,\n+    coverage_spans: &Vec<CoverageSpan>,\n+) {\n+    let mir_source = mir_body.source;\n+    let def_id = mir_source.def_id();\n+\n+    let span_viewables = span_viewables(tcx, mir_body, basic_coverage_blocks, &coverage_spans);\n+    let mut file = pretty::create_dump_file(tcx, \"html\", None, pass_name, &0, mir_source)\n+        .expect(\"Unexpected error creating MIR spanview HTML file\");\n+    let crate_name = tcx.crate_name(def_id.krate);\n+    let item_name = tcx.def_path(def_id).to_filename_friendly_no_crate();\n+    let title = format!(\"{}.{} - Coverage Spans\", crate_name, item_name);\n+    spanview::write_document(tcx, def_id, span_viewables, &title, &mut file)\n+        .expect(\"Unexpected IO error dumping coverage spans as HTML\");\n+}\n+\n+/// Converts the computed `BasicCoverageBlockData`s into `SpanViewable`s.\n+fn span_viewables(\n+    tcx: TyCtxt<'tcx>,\n+    mir_body: &mir::Body<'tcx>,\n+    basic_coverage_blocks: &CoverageGraph,\n+    coverage_spans: &Vec<CoverageSpan>,\n+) -> Vec<SpanViewable> {\n+    let mut span_viewables = Vec::new();\n+    for coverage_span in coverage_spans {\n+        let tooltip = coverage_span.format_coverage_statements(tcx, mir_body);\n+        let CoverageSpan { span, bcb, .. } = coverage_span;\n+        let bcb_data = &basic_coverage_blocks[*bcb];\n+        let id = bcb_data.id();\n+        let leader_bb = bcb_data.leader_bb();\n+        span_viewables.push(SpanViewable { bb: leader_bb, span: *span, id, tooltip });\n+    }\n+    span_viewables\n+}\n+\n+/// Generates the MIR pass coverage-specific graphviz dump file.\n+pub(crate) fn dump_coverage_graphviz(\n+    tcx: TyCtxt<'tcx>,\n+    mir_body: &mir::Body<'tcx>,\n+    pass_name: &str,\n+    basic_coverage_blocks: &CoverageGraph,\n+    debug_counters: &DebugCounters,\n+    graphviz_data: &GraphvizData,\n+    intermediate_expressions: &Vec<CoverageKind>,\n+    debug_used_expressions: &UsedExpressions,\n+) {\n+    let mir_source = mir_body.source;\n+    let def_id = mir_source.def_id();\n+    let node_content = |bcb| {\n+        bcb_to_string_sections(\n+            tcx,\n+            mir_body,\n+            debug_counters,\n+            &basic_coverage_blocks[bcb],\n+            graphviz_data.get_bcb_coverage_spans_with_counters(bcb),\n+            graphviz_data.get_bcb_dependency_counters(bcb),\n+            // intermediate_expressions are injected into the mir::START_BLOCK, so\n+            // include them in the first BCB.\n+            if bcb.index() == 0 { Some(&intermediate_expressions) } else { None },\n+        )\n+    };\n+    let edge_labels = |from_bcb| {\n+        let from_bcb_data = &basic_coverage_blocks[from_bcb];\n+        let from_terminator = from_bcb_data.terminator(mir_body);\n+        let mut edge_labels = from_terminator.kind.fmt_successor_labels();\n+        edge_labels.retain(|label| label.to_string() != \"unreachable\");\n+        let edge_counters = from_terminator\n+            .successors()\n+            .map(|&successor_bb| graphviz_data.get_edge_counter(from_bcb, successor_bb));\n+        edge_labels\n+            .iter()\n+            .zip(edge_counters)\n+            .map(|(label, some_counter)| {\n+                if let Some(counter) = some_counter {\n+                    format!(\"{}\\n{}\", label, debug_counters.format_counter(counter))\n+                } else {\n+                    label.to_string()\n+                }\n+            })\n+            .collect::<Vec<_>>()\n+    };\n+    let graphviz_name = format!(\"Cov_{}_{}\", def_id.krate.index(), def_id.index.index());\n+    let mut graphviz_writer =\n+        GraphvizWriter::new(basic_coverage_blocks, &graphviz_name, node_content, edge_labels);\n+    let unused_expressions = debug_used_expressions.get_unused_expressions();\n+    if unused_expressions.len() > 0 {\n+        graphviz_writer.set_graph_label(&format!(\n+            \"Unused expressions:\\n  {}\",\n+            unused_expressions\n+                .as_slice()\n+                .iter()\n+                .map(|(counter_kind, edge_from_bcb, target_bcb)| {\n+                    if let Some(from_bcb) = edge_from_bcb.as_ref() {\n+                        format!(\n+                            \"{:?}->{:?}: {}\",\n+                            from_bcb,\n+                            target_bcb,\n+                            debug_counters.format_counter(&counter_kind),\n+                        )\n+                    } else {\n+                        format!(\n+                            \"{:?}: {}\",\n+                            target_bcb,\n+                            debug_counters.format_counter(&counter_kind),\n+                        )\n+                    }\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n  \")\n+        ));\n+    }\n+    let mut file = pretty::create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n+        .expect(\"Unexpected error creating BasicCoverageBlock graphviz DOT file\");\n+    graphviz_writer\n+        .write_graphviz(tcx, &mut file)\n+        .expect(\"Unexpected error writing BasicCoverageBlock graphviz DOT file\");\n+}\n+\n+fn bcb_to_string_sections(\n+    tcx: TyCtxt<'tcx>,\n+    mir_body: &mir::Body<'tcx>,\n+    debug_counters: &DebugCounters,\n+    bcb_data: &BasicCoverageBlockData,\n+    some_coverage_spans_with_counters: Option<&Vec<(CoverageSpan, CoverageKind)>>,\n+    some_dependency_counters: Option<&Vec<CoverageKind>>,\n+    some_intermediate_expressions: Option<&Vec<CoverageKind>>,\n+) -> Vec<String> {\n+    let len = bcb_data.basic_blocks.len();\n+    let mut sections = Vec::new();\n+    if let Some(collect_intermediate_expressions) = some_intermediate_expressions {\n+        sections.push(\n+            collect_intermediate_expressions\n+                .iter()\n+                .map(|expression| {\n+                    format!(\"Intermediate {}\", debug_counters.format_counter(expression))\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\"),\n+        );\n+    }\n+    if let Some(coverage_spans_with_counters) = some_coverage_spans_with_counters {\n+        sections.push(\n+            coverage_spans_with_counters\n+                .iter()\n+                .map(|(covspan, counter)| {\n+                    format!(\n+                        \"{} at {}\",\n+                        debug_counters.format_counter(counter),\n+                        covspan.format(tcx, mir_body)\n+                    )\n+                })\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\"),\n+        );\n+    }\n+    if let Some(dependency_counters) = some_dependency_counters {\n+        sections.push(format!(\n+            \"Non-coverage counters:\\n  {}\",\n+            dependency_counters\n+                .iter()\n+                .map(|counter| debug_counters.format_counter(counter))\n+                .collect::<Vec<_>>()\n+                .join(\"  \\n\"),\n+        ));\n+    }\n+    if let Some(counter_kind) = &bcb_data.counter_kind {\n+        sections.push(format!(\"{:?}\", counter_kind));\n+    }\n+    let non_term_blocks = bcb_data.basic_blocks[0..len - 1]\n+        .iter()\n+        .map(|&bb| format!(\"{:?}: {}\", bb, term_type(&mir_body[bb].terminator().kind)))\n+        .collect::<Vec<_>>();\n+    if non_term_blocks.len() > 0 {\n+        sections.push(non_term_blocks.join(\"\\n\"));\n+    }\n+    sections.push(format!(\n+        \"{:?}: {}\",\n+        bcb_data.basic_blocks.last().unwrap(),\n+        term_type(&bcb_data.terminator(mir_body).kind)\n+    ));\n+    sections\n+}\n+\n+/// Returns a simple string representation of a `TerminatorKind` variant, indenpendent of any\n+/// values it might hold.\n+pub(crate) fn term_type(kind: &TerminatorKind<'tcx>) -> &'static str {\n+    match kind {\n+        TerminatorKind::Goto { .. } => \"Goto\",\n+        TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n+        TerminatorKind::Resume => \"Resume\",\n+        TerminatorKind::Abort => \"Abort\",\n+        TerminatorKind::Return => \"Return\",\n+        TerminatorKind::Unreachable => \"Unreachable\",\n+        TerminatorKind::Drop { .. } => \"Drop\",\n+        TerminatorKind::DropAndReplace { .. } => \"DropAndReplace\",\n+        TerminatorKind::Call { .. } => \"Call\",\n+        TerminatorKind::Assert { .. } => \"Assert\",\n+        TerminatorKind::Yield { .. } => \"Yield\",\n+        TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n+        TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n+        TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n+        TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n+    }\n+}"}, {"sha": "c2ed2cbb10002abd7632f86db2f19f0c904e3aed", "filename": "compiler/rustc_mir/src/transform/coverage/graph.rs", "status": "added", "additions": 759, "deletions": 0, "changes": 759, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fgraph.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,759 @@\n+use super::Error;\n+\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::graph::dominators::{self, Dominators};\n+use rustc_data_structures::graph::{self, GraphSuccessors, WithNumNodes, WithStartNode};\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::coverage::*;\n+use rustc_middle::mir::{self, BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n+\n+use std::ops::{Index, IndexMut};\n+\n+const ID_SEPARATOR: &str = \",\";\n+\n+/// A coverage-specific simplification of the MIR control flow graph (CFG). The `CoverageGraph`s\n+/// nodes are `BasicCoverageBlock`s, which encompass one or more MIR `BasicBlock`s, plus a\n+/// `CoverageKind` counter (to be added by `CoverageCounters::make_bcb_counters`), and an optional\n+/// set of additional counters--if needed--to count incoming edges, if there are more than one.\n+/// (These \"edge counters\" are eventually converted into new MIR `BasicBlock`s.)\n+pub(crate) struct CoverageGraph {\n+    bcbs: IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n+    bb_to_bcb: IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n+    pub successors: IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>>,\n+    pub predecessors: IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>>,\n+    dominators: Option<Dominators<BasicCoverageBlock>>,\n+}\n+\n+impl CoverageGraph {\n+    pub fn from_mir(mir_body: &mir::Body<'tcx>) -> Self {\n+        let (bcbs, bb_to_bcb) = Self::compute_basic_coverage_blocks(mir_body);\n+\n+        // Pre-transform MIR `BasicBlock` successors and predecessors into the BasicCoverageBlock\n+        // equivalents. Note that since the BasicCoverageBlock graph has been fully simplified, the\n+        // each predecessor of a BCB leader_bb should be in a unique BCB, and each successor of a\n+        // BCB last_bb should bin in its own unique BCB. Therefore, collecting the BCBs using\n+        // `bb_to_bcb` should work without requiring a deduplication step.\n+\n+        let successors = IndexVec::from_fn_n(\n+            |bcb| {\n+                let bcb_data = &bcbs[bcb];\n+                let bcb_successors =\n+                    bcb_filtered_successors(&mir_body, &bcb_data.terminator(mir_body).kind)\n+                        .filter_map(|&successor_bb| bb_to_bcb[successor_bb])\n+                        .collect::<Vec<_>>();\n+                debug_assert!({\n+                    let mut sorted = bcb_successors.clone();\n+                    sorted.sort_unstable();\n+                    let initial_len = sorted.len();\n+                    sorted.dedup();\n+                    sorted.len() == initial_len\n+                });\n+                bcb_successors\n+            },\n+            bcbs.len(),\n+        );\n+\n+        let mut predecessors = IndexVec::from_elem_n(Vec::new(), bcbs.len());\n+        for (bcb, bcb_successors) in successors.iter_enumerated() {\n+            for &successor in bcb_successors {\n+                predecessors[successor].push(bcb);\n+            }\n+        }\n+\n+        let mut basic_coverage_blocks =\n+            Self { bcbs, bb_to_bcb, successors, predecessors, dominators: None };\n+        let dominators = dominators::dominators(&basic_coverage_blocks);\n+        basic_coverage_blocks.dominators = Some(dominators);\n+        basic_coverage_blocks\n+    }\n+\n+    fn compute_basic_coverage_blocks(\n+        mir_body: &mir::Body<'tcx>,\n+    ) -> (\n+        IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n+        IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n+    ) {\n+        let num_basic_blocks = mir_body.num_nodes();\n+        let mut bcbs = IndexVec::with_capacity(num_basic_blocks);\n+        let mut bb_to_bcb = IndexVec::from_elem_n(None, num_basic_blocks);\n+\n+        // Walk the MIR CFG using a Preorder traversal, which starts from `START_BLOCK` and follows\n+        // each block terminator's `successors()`. Coverage spans must map to actual source code,\n+        // so compiler generated blocks and paths can be ignored. To that end, the CFG traversal\n+        // intentionally omits unwind paths.\n+        // FIXME(#78544): MIR InstrumentCoverage: Improve coverage of `#[should_panic]` tests and\n+        // `catch_unwind()` handlers.\n+        let mir_cfg_without_unwind = ShortCircuitPreorder::new(&mir_body, bcb_filtered_successors);\n+\n+        let mut basic_blocks = Vec::new();\n+        for (bb, data) in mir_cfg_without_unwind {\n+            if let Some(last) = basic_blocks.last() {\n+                let predecessors = &mir_body.predecessors()[bb];\n+                if predecessors.len() > 1 || !predecessors.contains(last) {\n+                    // The `bb` has more than one _incoming_ edge, and should start its own\n+                    // `BasicCoverageBlockData`. (Note, the `basic_blocks` vector does not yet\n+                    // include `bb`; it contains a sequence of one or more sequential basic_blocks\n+                    // with no intermediate branches in or out. Save these as a new\n+                    // `BasicCoverageBlockData` before starting the new one.)\n+                    Self::add_basic_coverage_block(\n+                        &mut bcbs,\n+                        &mut bb_to_bcb,\n+                        basic_blocks.split_off(0),\n+                    );\n+                    debug!(\n+                        \"  because {}\",\n+                        if predecessors.len() > 1 {\n+                            \"predecessors.len() > 1\".to_owned()\n+                        } else {\n+                            format!(\"bb {} is not in precessors: {:?}\", bb.index(), predecessors)\n+                        }\n+                    );\n+                }\n+            }\n+            basic_blocks.push(bb);\n+\n+            let term = data.terminator();\n+\n+            match term.kind {\n+                TerminatorKind::Return { .. }\n+                // FIXME(richkadel): Add test(s) for `Abort` coverage.\n+                | TerminatorKind::Abort\n+                // FIXME(richkadel): Add test(s) for `Assert` coverage.\n+                // Should `Assert` be handled like `FalseUnwind` instead? Since we filter out unwind\n+                // branches when creating the BCB CFG, aren't `Assert`s (without unwinds) just like\n+                // `FalseUnwinds` (which are kind of like `Goto`s)?\n+                | TerminatorKind::Assert { .. }\n+                // FIXME(richkadel): Add test(s) for `Yield` coverage, and confirm coverage is\n+                // sensible for code using the `yield` keyword.\n+                | TerminatorKind::Yield { .. }\n+                // FIXME(richkadel): Also add coverage tests using async/await, and threading.\n+\n+                | TerminatorKind::SwitchInt { .. } => {\n+                    // The `bb` has more than one _outgoing_ edge, or exits the function. Save the\n+                    // current sequence of `basic_blocks` gathered to this point, as a new\n+                    // `BasicCoverageBlockData`.\n+                    Self::add_basic_coverage_block(\n+                        &mut bcbs,\n+                        &mut bb_to_bcb,\n+                        basic_blocks.split_off(0),\n+                    );\n+                    debug!(\"  because term.kind = {:?}\", term.kind);\n+                    // Note that this condition is based on `TerminatorKind`, even though it\n+                    // theoretically boils down to `successors().len() != 1`; that is, either zero\n+                    // (e.g., `Return`, `Abort`) or multiple successors (e.g., `SwitchInt`), but\n+                    // since the BCB CFG ignores things like unwind branches (which exist in the\n+                    // `Terminator`s `successors()` list) checking the number of successors won't\n+                    // work.\n+                }\n+                TerminatorKind::Goto { .. }\n+                | TerminatorKind::Resume\n+                | TerminatorKind::Unreachable\n+                | TerminatorKind::Drop { .. }\n+                | TerminatorKind::DropAndReplace { .. }\n+                | TerminatorKind::Call { .. }\n+                | TerminatorKind::GeneratorDrop\n+                | TerminatorKind::FalseEdge { .. }\n+                | TerminatorKind::FalseUnwind { .. }\n+                | TerminatorKind::InlineAsm { .. } => {}\n+            }\n+        }\n+\n+        if !basic_blocks.is_empty() {\n+            // process any remaining basic_blocks into a final `BasicCoverageBlockData`\n+            Self::add_basic_coverage_block(&mut bcbs, &mut bb_to_bcb, basic_blocks.split_off(0));\n+            debug!(\"  because the end of the MIR CFG was reached while traversing\");\n+        }\n+\n+        (bcbs, bb_to_bcb)\n+    }\n+\n+    fn add_basic_coverage_block(\n+        bcbs: &mut IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n+        bb_to_bcb: &mut IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n+        basic_blocks: Vec<BasicBlock>,\n+    ) {\n+        let bcb = BasicCoverageBlock::from_usize(bcbs.len());\n+        for &bb in basic_blocks.iter() {\n+            bb_to_bcb[bb] = Some(bcb);\n+        }\n+        let bcb_data = BasicCoverageBlockData::from(basic_blocks);\n+        debug!(\"adding bcb{}: {:?}\", bcb.index(), bcb_data);\n+        bcbs.push(bcb_data);\n+    }\n+\n+    #[inline(always)]\n+    pub fn iter_enumerated(\n+        &self,\n+    ) -> impl Iterator<Item = (BasicCoverageBlock, &BasicCoverageBlockData)> {\n+        self.bcbs.iter_enumerated()\n+    }\n+\n+    #[inline(always)]\n+    pub fn iter_enumerated_mut(\n+        &mut self,\n+    ) -> impl Iterator<Item = (BasicCoverageBlock, &mut BasicCoverageBlockData)> {\n+        self.bcbs.iter_enumerated_mut()\n+    }\n+\n+    #[inline(always)]\n+    pub fn bcb_from_bb(&self, bb: BasicBlock) -> Option<BasicCoverageBlock> {\n+        if bb.index() < self.bb_to_bcb.len() { self.bb_to_bcb[bb] } else { None }\n+    }\n+\n+    #[inline(always)]\n+    pub fn is_dominated_by(&self, node: BasicCoverageBlock, dom: BasicCoverageBlock) -> bool {\n+        self.dominators.as_ref().unwrap().is_dominated_by(node, dom)\n+    }\n+\n+    #[inline(always)]\n+    pub fn dominators(&self) -> &Dominators<BasicCoverageBlock> {\n+        self.dominators.as_ref().unwrap()\n+    }\n+}\n+\n+impl Index<BasicCoverageBlock> for CoverageGraph {\n+    type Output = BasicCoverageBlockData;\n+\n+    #[inline]\n+    fn index(&self, index: BasicCoverageBlock) -> &BasicCoverageBlockData {\n+        &self.bcbs[index]\n+    }\n+}\n+\n+impl IndexMut<BasicCoverageBlock> for CoverageGraph {\n+    #[inline]\n+    fn index_mut(&mut self, index: BasicCoverageBlock) -> &mut BasicCoverageBlockData {\n+        &mut self.bcbs[index]\n+    }\n+}\n+\n+impl graph::DirectedGraph for CoverageGraph {\n+    type Node = BasicCoverageBlock;\n+}\n+\n+impl graph::WithNumNodes for CoverageGraph {\n+    #[inline]\n+    fn num_nodes(&self) -> usize {\n+        self.bcbs.len()\n+    }\n+}\n+\n+impl graph::WithStartNode for CoverageGraph {\n+    #[inline]\n+    fn start_node(&self) -> Self::Node {\n+        self.bcb_from_bb(mir::START_BLOCK)\n+            .expect(\"mir::START_BLOCK should be in a BasicCoverageBlock\")\n+    }\n+}\n+\n+type BcbSuccessors<'graph> = std::slice::Iter<'graph, BasicCoverageBlock>;\n+\n+impl<'graph> graph::GraphSuccessors<'graph> for CoverageGraph {\n+    type Item = BasicCoverageBlock;\n+    type Iter = std::iter::Cloned<BcbSuccessors<'graph>>;\n+}\n+\n+impl graph::WithSuccessors for CoverageGraph {\n+    #[inline]\n+    fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {\n+        self.successors[node].iter().cloned()\n+    }\n+}\n+\n+impl graph::GraphPredecessors<'graph> for CoverageGraph {\n+    type Item = BasicCoverageBlock;\n+    type Iter = std::vec::IntoIter<BasicCoverageBlock>;\n+}\n+\n+impl graph::WithPredecessors for CoverageGraph {\n+    #[inline]\n+    fn predecessors(&self, node: Self::Node) -> <Self as graph::GraphPredecessors<'_>>::Iter {\n+        self.predecessors[node].clone().into_iter()\n+    }\n+}\n+\n+rustc_index::newtype_index! {\n+    /// A node in the [control-flow graph][CFG] of CoverageGraph.\n+    pub(crate) struct BasicCoverageBlock {\n+        DEBUG_FORMAT = \"bcb{}\",\n+    }\n+}\n+\n+/// A BasicCoverageBlockData (BCB) represents the maximal-length sequence of MIR BasicBlocks without\n+/// conditional branches, and form a new, simplified, coverage-specific Control Flow Graph, without\n+/// altering the original MIR CFG.\n+///\n+/// Note that running the MIR `SimplifyCfg` transform is not sufficient (and therefore not\n+/// necessary). The BCB-based CFG is a more aggressive simplification. For example:\n+///\n+///   * The BCB CFG ignores (trims) branches not relevant to coverage, such as unwind-related code,\n+///     that is injected by the Rust compiler but has no physical source code to count. This also\n+///     means a BasicBlock with a `Call` terminator can be merged into its primary successor target\n+///     block, in the same BCB. (But, note: Issue #78544: \"MIR InstrumentCoverage: Improve coverage\n+///     of `#[should_panic]` tests and `catch_unwind()` handlers\")\n+///   * Some BasicBlock terminators support Rust-specific concerns--like borrow-checking--that are\n+///     not relevant to coverage analysis. `FalseUnwind`, for example, can be treated the same as\n+///     a `Goto`, and merged with its successor into the same BCB.\n+///\n+/// Each BCB with at least one computed `CoverageSpan` will have no more than one `Counter`.\n+/// In some cases, a BCB's execution count can be computed by `Expression`. Additional\n+/// disjoint `CoverageSpan`s in a BCB can also be counted by `Expression` (by adding `ZERO`\n+/// to the BCB's primary counter or expression).\n+///\n+/// The BCB CFG is critical to simplifying the coverage analysis by ensuring graph path-based\n+/// queries (`is_dominated_by()`, `predecessors`, `successors`, etc.) have branch (control flow)\n+/// significance.\n+#[derive(Debug, Clone)]\n+pub(crate) struct BasicCoverageBlockData {\n+    pub basic_blocks: Vec<BasicBlock>,\n+    pub counter_kind: Option<CoverageKind>,\n+    edge_from_bcbs: Option<FxHashMap<BasicCoverageBlock, CoverageKind>>,\n+}\n+\n+impl BasicCoverageBlockData {\n+    pub fn from(basic_blocks: Vec<BasicBlock>) -> Self {\n+        assert!(basic_blocks.len() > 0);\n+        Self { basic_blocks, counter_kind: None, edge_from_bcbs: None }\n+    }\n+\n+    #[inline(always)]\n+    pub fn leader_bb(&self) -> BasicBlock {\n+        self.basic_blocks[0]\n+    }\n+\n+    #[inline(always)]\n+    pub fn last_bb(&self) -> BasicBlock {\n+        *self.basic_blocks.last().unwrap()\n+    }\n+\n+    #[inline(always)]\n+    pub fn terminator<'a, 'tcx>(&self, mir_body: &'a mir::Body<'tcx>) -> &'a Terminator<'tcx> {\n+        &mir_body[self.last_bb()].terminator()\n+    }\n+\n+    pub fn set_counter(\n+        &mut self,\n+        counter_kind: CoverageKind,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        debug_assert!(\n+            // If the BCB has an edge counter (to be injected into a new `BasicBlock`), it can also\n+            // have an expression (to be injected into an existing `BasicBlock` represented by this\n+            // `BasicCoverageBlock`).\n+            self.edge_from_bcbs.is_none() || counter_kind.is_expression(),\n+            \"attempt to add a `Counter` to a BCB target with existing incoming edge counters\"\n+        );\n+        let operand = counter_kind.as_operand_id();\n+        if let Some(replaced) = self.counter_kind.replace(counter_kind) {\n+            Error::from_string(format!(\n+                \"attempt to set a BasicCoverageBlock coverage counter more than once; \\\n+                {:?} already had counter {:?}\",\n+                self, replaced,\n+            ))\n+        } else {\n+            Ok(operand)\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn counter(&self) -> Option<&CoverageKind> {\n+        self.counter_kind.as_ref()\n+    }\n+\n+    #[inline(always)]\n+    pub fn take_counter(&mut self) -> Option<CoverageKind> {\n+        self.counter_kind.take()\n+    }\n+\n+    pub fn set_edge_counter_from(\n+        &mut self,\n+        from_bcb: BasicCoverageBlock,\n+        counter_kind: CoverageKind,\n+    ) -> Result<ExpressionOperandId, Error> {\n+        if level_enabled!(tracing::Level::DEBUG) {\n+            // If the BCB has an edge counter (to be injected into a new `BasicBlock`), it can also\n+            // have an expression (to be injected into an existing `BasicBlock` represented by this\n+            // `BasicCoverageBlock`).\n+            if !self.counter_kind.as_ref().map_or(true, |c| c.is_expression()) {\n+                return Error::from_string(format!(\n+                    \"attempt to add an incoming edge counter from {:?} when the target BCB already \\\n+                    has a `Counter`\",\n+                    from_bcb\n+                ));\n+            }\n+        }\n+        let operand = counter_kind.as_operand_id();\n+        if let Some(replaced) = self\n+            .edge_from_bcbs\n+            .get_or_insert_with(|| FxHashMap::default())\n+            .insert(from_bcb, counter_kind)\n+        {\n+            Error::from_string(format!(\n+                \"attempt to set an edge counter more than once; from_bcb: \\\n+                {:?} already had counter {:?}\",\n+                from_bcb, replaced,\n+            ))\n+        } else {\n+            Ok(operand)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn edge_counter_from(&self, from_bcb: BasicCoverageBlock) -> Option<&CoverageKind> {\n+        if let Some(edge_from_bcbs) = &self.edge_from_bcbs {\n+            edge_from_bcbs.get(&from_bcb)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn take_edge_counters(\n+        &mut self,\n+    ) -> Option<impl Iterator<Item = (BasicCoverageBlock, CoverageKind)>> {\n+        self.edge_from_bcbs.take().map_or(None, |m| Some(m.into_iter()))\n+    }\n+\n+    pub fn id(&self) -> String {\n+        format!(\n+            \"@{}\",\n+            self.basic_blocks\n+                .iter()\n+                .map(|bb| bb.index().to_string())\n+                .collect::<Vec<_>>()\n+                .join(ID_SEPARATOR)\n+        )\n+    }\n+}\n+\n+/// Represents a successor from a branching BasicCoverageBlock (such as the arms of a `SwitchInt`)\n+/// as either the successor BCB itself, if it has only one incoming edge, or the successor _plus_\n+/// the specific branching BCB, representing the edge between the two. The latter case\n+/// distinguishes this incoming edge from other incoming edges to the same `target_bcb`.\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub(crate) struct BcbBranch {\n+    pub edge_from_bcb: Option<BasicCoverageBlock>,\n+    pub target_bcb: BasicCoverageBlock,\n+}\n+\n+impl BcbBranch {\n+    pub fn from_to(\n+        from_bcb: BasicCoverageBlock,\n+        to_bcb: BasicCoverageBlock,\n+        basic_coverage_blocks: &CoverageGraph,\n+    ) -> Self {\n+        let edge_from_bcb = if basic_coverage_blocks.predecessors[to_bcb].len() > 1 {\n+            Some(from_bcb)\n+        } else {\n+            None\n+        };\n+        Self { edge_from_bcb, target_bcb: to_bcb }\n+    }\n+\n+    pub fn counter<'a>(\n+        &self,\n+        basic_coverage_blocks: &'a CoverageGraph,\n+    ) -> Option<&'a CoverageKind> {\n+        if let Some(from_bcb) = self.edge_from_bcb {\n+            basic_coverage_blocks[self.target_bcb].edge_counter_from(from_bcb)\n+        } else {\n+            basic_coverage_blocks[self.target_bcb].counter()\n+        }\n+    }\n+\n+    pub fn is_only_path_to_target(&self) -> bool {\n+        self.edge_from_bcb.is_none()\n+    }\n+}\n+\n+impl std::fmt::Debug for BcbBranch {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        if let Some(from_bcb) = self.edge_from_bcb {\n+            write!(fmt, \"{:?}->{:?}\", from_bcb, self.target_bcb)\n+        } else {\n+            write!(fmt, \"{:?}\", self.target_bcb)\n+        }\n+    }\n+}\n+\n+// Returns the `Terminator`s non-unwind successors.\n+// FIXME(#78544): MIR InstrumentCoverage: Improve coverage of `#[should_panic]` tests and\n+// `catch_unwind()` handlers.\n+fn bcb_filtered_successors<'a, 'tcx>(\n+    body: &'tcx &'a mir::Body<'tcx>,\n+    term_kind: &'tcx TerminatorKind<'tcx>,\n+) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a> {\n+    let mut successors = term_kind.successors();\n+    box match &term_kind {\n+        // SwitchInt successors are never unwind, and all of them should be traversed.\n+        TerminatorKind::SwitchInt { .. } => successors,\n+        // For all other kinds, return only the first successor, if any, and ignore unwinds.\n+        // NOTE: `chain(&[])` is required to coerce the `option::iter` (from\n+        // `next().into_iter()`) into the `mir::Successors` aliased type.\n+        _ => successors.next().into_iter().chain(&[]),\n+    }\n+    .filter(move |&&successor| body[successor].terminator().kind != TerminatorKind::Unreachable)\n+}\n+\n+/// Maintains separate worklists for each loop in the BasicCoverageBlock CFG, plus one for the\n+/// CoverageGraph outside all loops. This supports traversing the BCB CFG in a way that\n+/// ensures a loop is completely traversed before processing Blocks after the end of the loop.\n+// FIXME(richkadel): Add unit tests for TraversalContext.\n+#[derive(Debug)]\n+pub(crate) struct TraversalContext {\n+    /// From one or more backedges returning to a loop header.\n+    pub loop_backedges: Option<(Vec<BasicCoverageBlock>, BasicCoverageBlock)>,\n+\n+    /// worklist, to be traversed, of CoverageGraph in the loop with the given loop\n+    /// backedges, such that the loop is the inner inner-most loop containing these\n+    /// CoverageGraph\n+    pub worklist: Vec<BasicCoverageBlock>,\n+}\n+\n+pub(crate) struct TraverseCoverageGraphWithLoops {\n+    pub backedges: IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>>,\n+    pub context_stack: Vec<TraversalContext>,\n+    visited: BitSet<BasicCoverageBlock>,\n+}\n+\n+impl TraverseCoverageGraphWithLoops {\n+    pub fn new(basic_coverage_blocks: &CoverageGraph) -> Self {\n+        let start_bcb = basic_coverage_blocks.start_node();\n+        let backedges = find_loop_backedges(basic_coverage_blocks);\n+        let mut context_stack = Vec::new();\n+        context_stack.push(TraversalContext { loop_backedges: None, worklist: vec![start_bcb] });\n+        // `context_stack` starts with a `TraversalContext` for the main function context (beginning\n+        // with the `start` BasicCoverageBlock of the function). New worklists are pushed to the top\n+        // of the stack as loops are entered, and popped off of the stack when a loop's worklist is\n+        // exhausted.\n+        let visited = BitSet::new_empty(basic_coverage_blocks.num_nodes());\n+        Self { backedges, context_stack, visited }\n+    }\n+\n+    pub fn next(&mut self, basic_coverage_blocks: &CoverageGraph) -> Option<BasicCoverageBlock> {\n+        debug!(\n+            \"TraverseCoverageGraphWithLoops::next - context_stack: {:?}\",\n+            self.context_stack.iter().rev().collect::<Vec<_>>()\n+        );\n+        while let Some(next_bcb) = {\n+            // Strip contexts with empty worklists from the top of the stack\n+            while self.context_stack.last().map_or(false, |context| context.worklist.is_empty()) {\n+                self.context_stack.pop();\n+            }\n+            // Pop the next bcb off of the current context_stack. If none, all BCBs were visited.\n+            self.context_stack.last_mut().map_or(None, |context| context.worklist.pop())\n+        } {\n+            if !self.visited.insert(next_bcb) {\n+                debug!(\"Already visited: {:?}\", next_bcb);\n+                continue;\n+            }\n+            debug!(\"Visiting {:?}\", next_bcb);\n+            if self.backedges[next_bcb].len() > 0 {\n+                debug!(\"{:?} is a loop header! Start a new TraversalContext...\", next_bcb);\n+                self.context_stack.push(TraversalContext {\n+                    loop_backedges: Some((self.backedges[next_bcb].clone(), next_bcb)),\n+                    worklist: Vec::new(),\n+                });\n+            }\n+            self.extend_worklist(basic_coverage_blocks, next_bcb);\n+            return Some(next_bcb);\n+        }\n+        None\n+    }\n+\n+    pub fn extend_worklist(\n+        &mut self,\n+        basic_coverage_blocks: &CoverageGraph,\n+        bcb: BasicCoverageBlock,\n+    ) {\n+        let successors = &basic_coverage_blocks.successors[bcb];\n+        debug!(\"{:?} has {} successors:\", bcb, successors.len());\n+        for &successor in successors {\n+            if successor == bcb {\n+                debug!(\n+                    \"{:?} has itself as its own successor. (Note, the compiled code will \\\n+                    generate an infinite loop.)\",\n+                    bcb\n+                );\n+                // Don't re-add this successor to the worklist. We are already processing it.\n+                break;\n+            }\n+            for context in self.context_stack.iter_mut().rev() {\n+                // Add successors of the current BCB to the appropriate context. Successors that\n+                // stay within a loop are added to the BCBs context worklist. Successors that\n+                // exit the loop (they are not dominated by the loop header) must be reachable\n+                // from other BCBs outside the loop, and they will be added to a different\n+                // worklist.\n+                //\n+                // Branching blocks (with more than one successor) must be processed before\n+                // blocks with only one successor, to prevent unnecessarily complicating\n+                // `Expression`s by creating a Counter in a `BasicCoverageBlock` that the\n+                // branching block would have given an `Expression` (or vice versa).\n+                let (some_successor_to_add, some_loop_header) =\n+                    if let Some((_, loop_header)) = context.loop_backedges {\n+                        if basic_coverage_blocks.is_dominated_by(successor, loop_header) {\n+                            (Some(successor), Some(loop_header))\n+                        } else {\n+                            (None, None)\n+                        }\n+                    } else {\n+                        (Some(successor), None)\n+                    };\n+                if let Some(successor_to_add) = some_successor_to_add {\n+                    if basic_coverage_blocks.successors[successor_to_add].len() > 1 {\n+                        debug!(\n+                            \"{:?} successor is branching. Prioritize it at the beginning of \\\n+                            the {}\",\n+                            successor_to_add,\n+                            if let Some(loop_header) = some_loop_header {\n+                                format!(\"worklist for the loop headed by {:?}\", loop_header)\n+                            } else {\n+                                String::from(\"non-loop worklist\")\n+                            },\n+                        );\n+                        context.worklist.insert(0, successor_to_add);\n+                    } else {\n+                        debug!(\n+                            \"{:?} successor is non-branching. Defer it to the end of the {}\",\n+                            successor_to_add,\n+                            if let Some(loop_header) = some_loop_header {\n+                                format!(\"worklist for the loop headed by {:?}\", loop_header)\n+                            } else {\n+                                String::from(\"non-loop worklist\")\n+                            },\n+                        );\n+                        context.worklist.push(successor_to_add);\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn is_complete(&self) -> bool {\n+        self.visited.count() == self.visited.domain_size()\n+    }\n+\n+    pub fn unvisited(&self) -> Vec<BasicCoverageBlock> {\n+        let mut unvisited_set: BitSet<BasicCoverageBlock> =\n+            BitSet::new_filled(self.visited.domain_size());\n+        unvisited_set.subtract(&self.visited);\n+        unvisited_set.iter().collect::<Vec<_>>()\n+    }\n+}\n+\n+fn find_loop_backedges(\n+    basic_coverage_blocks: &CoverageGraph,\n+) -> IndexVec<BasicCoverageBlock, Vec<BasicCoverageBlock>> {\n+    let num_bcbs = basic_coverage_blocks.num_nodes();\n+    let mut backedges = IndexVec::from_elem_n(Vec::<BasicCoverageBlock>::new(), num_bcbs);\n+\n+    // Identify loops by their backedges.\n+    //\n+    // The computational complexity is bounded by: n(s) x d where `n` is the number of\n+    // `BasicCoverageBlock` nodes (the simplified/reduced representation of the CFG derived from the\n+    // MIR); `s` is the average number of successors per node (which is most likely less than 2, and\n+    // independent of the size of the function, so it can be treated as a constant);\n+    // and `d` is the average number of dominators per node.\n+    //\n+    // The average number of dominators depends on the size and complexity of the function, and\n+    // nodes near the start of the function's control flow graph typically have less dominators\n+    // than nodes near the end of the CFG. Without doing a detailed mathematical analysis, I\n+    // think the resulting complexity has the characteristics of O(n log n).\n+    //\n+    // The overall complexity appears to be comparable to many other MIR transform algorithms, and I\n+    // don't expect that this function is creating a performance hot spot, but if this becomes an\n+    // issue, there may be ways to optimize the `is_dominated_by` algorithm (as indicated by an\n+    // existing `FIXME` comment in that code), or possibly ways to optimize it's usage here, perhaps\n+    // by keeping track of results for visited `BasicCoverageBlock`s if they can be used to short\n+    // circuit downstream `is_dominated_by` checks.\n+    //\n+    // For now, that kind of optimization seems unnecessarily complicated.\n+    for (bcb, _) in basic_coverage_blocks.iter_enumerated() {\n+        for &successor in &basic_coverage_blocks.successors[bcb] {\n+            if basic_coverage_blocks.is_dominated_by(bcb, successor) {\n+                let loop_header = successor;\n+                let backedge_from_bcb = bcb;\n+                debug!(\n+                    \"Found BCB backedge: {:?} -> loop_header: {:?}\",\n+                    backedge_from_bcb, loop_header\n+                );\n+                backedges[loop_header].push(backedge_from_bcb);\n+            }\n+        }\n+    }\n+    backedges\n+}\n+\n+pub struct ShortCircuitPreorder<\n+    'a,\n+    'tcx,\n+    F: Fn(\n+        &'tcx &'a mir::Body<'tcx>,\n+        &'tcx TerminatorKind<'tcx>,\n+    ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a>,\n+> {\n+    body: &'tcx &'a mir::Body<'tcx>,\n+    visited: BitSet<BasicBlock>,\n+    worklist: Vec<BasicBlock>,\n+    filtered_successors: F,\n+}\n+\n+impl<\n+    'a,\n+    'tcx,\n+    F: Fn(\n+        &'tcx &'a mir::Body<'tcx>,\n+        &'tcx TerminatorKind<'tcx>,\n+    ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a>,\n+> ShortCircuitPreorder<'a, 'tcx, F>\n+{\n+    pub fn new(\n+        body: &'tcx &'a mir::Body<'tcx>,\n+        filtered_successors: F,\n+    ) -> ShortCircuitPreorder<'a, 'tcx, F> {\n+        let worklist = vec![mir::START_BLOCK];\n+\n+        ShortCircuitPreorder {\n+            body,\n+            visited: BitSet::new_empty(body.basic_blocks().len()),\n+            worklist,\n+            filtered_successors,\n+        }\n+    }\n+}\n+\n+impl<\n+    'a: 'tcx,\n+    'tcx,\n+    F: Fn(\n+        &'tcx &'a mir::Body<'tcx>,\n+        &'tcx TerminatorKind<'tcx>,\n+    ) -> Box<dyn Iterator<Item = &'a BasicBlock> + 'a>,\n+> Iterator for ShortCircuitPreorder<'a, 'tcx, F>\n+{\n+    type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n+\n+    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {\n+        while let Some(idx) = self.worklist.pop() {\n+            if !self.visited.insert(idx) {\n+                continue;\n+            }\n+\n+            let data = &self.body[idx];\n+\n+            if let Some(ref term) = data.terminator {\n+                self.worklist.extend((self.filtered_successors)(&self.body, &term.kind));\n+            }\n+\n+            return Some((idx, data));\n+        }\n+\n+        None\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        let size = self.body.basic_blocks().len() - self.visited.count();\n+        (size, Some(size))\n+    }\n+}"}, {"sha": "c55349239b0344fdf0362afc5e6e20ae9d5136c7", "filename": "compiler/rustc_mir/src/transform/coverage/mod.rs", "status": "added", "additions": 539, "deletions": 0, "changes": 539, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fmod.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,539 @@\n+pub mod query;\n+\n+mod counters;\n+mod debug;\n+mod graph;\n+mod spans;\n+\n+use counters::CoverageCounters;\n+use graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n+use spans::{CoverageSpan, CoverageSpans};\n+\n+use crate::transform::MirPass;\n+use crate::util::pretty;\n+\n+use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::graph::WithNumNodes;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::sync::Lrc;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::hir;\n+use rustc_middle::hir::map::blocks::FnLikeNode;\n+use rustc_middle::ich::StableHashingContext;\n+use rustc_middle::mir::coverage::*;\n+use rustc_middle::mir::{\n+    self, BasicBlock, BasicBlockData, Coverage, SourceInfo, Statement, StatementKind, Terminator,\n+    TerminatorKind,\n+};\n+use rustc_middle::ty::TyCtxt;\n+use rustc_span::def_id::DefId;\n+use rustc_span::{CharPos, Pos, SourceFile, Span, Symbol};\n+\n+/// A simple error message wrapper for `coverage::Error`s.\n+#[derive(Debug)]\n+pub(crate) struct Error {\n+    message: String,\n+}\n+\n+impl Error {\n+    pub fn from_string<T>(message: String) -> Result<T, Error> {\n+        Err(Self { message })\n+    }\n+}\n+\n+/// Inserts `StatementKind::Coverage` statements that either instrument the binary with injected\n+/// counters, via intrinsic `llvm.instrprof.increment`, and/or inject metadata used during codegen\n+/// to construct the coverage map.\n+pub struct InstrumentCoverage;\n+\n+impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, mir_body: &mut mir::Body<'tcx>) {\n+        let mir_source = mir_body.source;\n+\n+        // If the InstrumentCoverage pass is called on promoted MIRs, skip them.\n+        // See: https://github.com/rust-lang/rust/pull/73011#discussion_r438317601\n+        if mir_source.promoted.is_some() {\n+            trace!(\n+                \"InstrumentCoverage skipped for {:?} (already promoted for Miri evaluation)\",\n+                mir_source.def_id()\n+            );\n+            return;\n+        }\n+\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(mir_source.def_id().expect_local());\n+        let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n+\n+        // Only instrument functions, methods, and closures (not constants since they are evaluated\n+        // at compile time by Miri).\n+        // FIXME(#73156): Handle source code coverage in const eval, but note, if and when const\n+        // expressions get coverage spans, we will probably have to \"carve out\" space for const\n+        // expressions from coverage spans in enclosing MIR's, like we do for closures. (That might\n+        // be tricky if const expressions have no corresponding statements in the enclosing MIR.\n+        // Closures are carved out by their initial `Assign` statement.)\n+        if !is_fn_like {\n+            trace!(\"InstrumentCoverage skipped for {:?} (not an FnLikeNode)\", mir_source.def_id());\n+            return;\n+        }\n+\n+        trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());\n+        Instrumentor::new(&self.name(), tcx, mir_body).inject_counters();\n+        trace!(\"InstrumentCoverage starting for {:?}\", mir_source.def_id());\n+    }\n+}\n+\n+struct Instrumentor<'a, 'tcx> {\n+    pass_name: &'a str,\n+    tcx: TyCtxt<'tcx>,\n+    mir_body: &'a mut mir::Body<'tcx>,\n+    body_span: Span,\n+    basic_coverage_blocks: CoverageGraph,\n+    coverage_counters: CoverageCounters,\n+}\n+\n+impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n+    fn new(pass_name: &'a str, tcx: TyCtxt<'tcx>, mir_body: &'a mut mir::Body<'tcx>) -> Self {\n+        let hir_body = hir_body(tcx, mir_body.source.def_id());\n+        let body_span = hir_body.value.span;\n+        let function_source_hash = hash_mir_source(tcx, hir_body);\n+        let basic_coverage_blocks = CoverageGraph::from_mir(mir_body);\n+        Self {\n+            pass_name,\n+            tcx,\n+            mir_body,\n+            body_span,\n+            basic_coverage_blocks,\n+            coverage_counters: CoverageCounters::new(function_source_hash),\n+        }\n+    }\n+\n+    fn inject_counters(&'a mut self) {\n+        let tcx = self.tcx;\n+        let source_map = tcx.sess.source_map();\n+        let mir_source = self.mir_body.source;\n+        let def_id = mir_source.def_id();\n+        let body_span = self.body_span;\n+\n+        debug!(\"instrumenting {:?}, span: {}\", def_id, source_map.span_to_string(body_span));\n+\n+        let mut graphviz_data = debug::GraphvizData::new();\n+        let mut debug_used_expressions = debug::UsedExpressions::new();\n+\n+        let dump_mir = pretty::dump_enabled(tcx, self.pass_name, def_id);\n+        let dump_graphviz = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_graphviz;\n+        let dump_spanview = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_spanview.is_some();\n+\n+        if dump_graphviz {\n+            graphviz_data.enable();\n+            self.coverage_counters.enable_debug();\n+        }\n+\n+        if dump_graphviz || level_enabled!(tracing::Level::DEBUG) {\n+            debug_used_expressions.enable();\n+        }\n+\n+        ////////////////////////////////////////////////////\n+        // Compute `CoverageSpan`s from the `CoverageGraph`.\n+        let coverage_spans = CoverageSpans::generate_coverage_spans(\n+            &self.mir_body,\n+            body_span,\n+            &self.basic_coverage_blocks,\n+        );\n+\n+        if dump_spanview {\n+            debug::dump_coverage_spanview(\n+                tcx,\n+                self.mir_body,\n+                &self.basic_coverage_blocks,\n+                self.pass_name,\n+                &coverage_spans,\n+            );\n+        }\n+\n+        ////////////////////////////////////////////////////\n+        // Create an optimized mix of `Counter`s and `Expression`s for the `CoverageGraph`. Ensure\n+        // every `CoverageSpan` has a `Counter` or `Expression` assigned to its `BasicCoverageBlock`\n+        // and all `Expression` dependencies (operands) are also generated, for any other\n+        // `BasicCoverageBlock`s not already associated with a `CoverageSpan`.\n+        //\n+        // Intermediate expressions (used to compute other `Expression` values), which have no\n+        // direct associate to any `BasicCoverageBlock`, are returned in the method `Result`.\n+        let intermediate_expressions_or_error = self\n+            .coverage_counters\n+            .make_bcb_counters(&mut self.basic_coverage_blocks, &coverage_spans);\n+\n+        let (result, intermediate_expressions) = match intermediate_expressions_or_error {\n+            Ok(intermediate_expressions) => {\n+                // If debugging, add any intermediate expressions (which are not associated with any\n+                // BCB) to the `debug_used_expressions` map.\n+                if debug_used_expressions.is_enabled() {\n+                    for intermediate_expression in &intermediate_expressions {\n+                        debug_used_expressions.add_expression_operands(intermediate_expression);\n+                    }\n+                }\n+\n+                ////////////////////////////////////////////////////\n+                // Remove the counter or edge counter from of each `CoverageSpan`s associated\n+                // `BasicCoverageBlock`, and inject a `Coverage` statement into the MIR.\n+                //\n+                // `Coverage` statements injected from `CoverageSpan`s will include the code regions\n+                // (source code start and end positions) to be counted by the associated counter.\n+                //\n+                // These `CoverageSpan`-associated counters are removed from their associated\n+                // `BasicCoverageBlock`s so that the only remaining counters in the `CoverageGraph`\n+                // are indirect counters (to be injected next, without associated code regions).\n+                self.inject_coverage_span_counters(\n+                    coverage_spans,\n+                    &mut graphviz_data,\n+                    &mut debug_used_expressions,\n+                );\n+\n+                ////////////////////////////////////////////////////\n+                // For any remaining `BasicCoverageBlock` counters (that were not associated with\n+                // any `CoverageSpan`), inject `Coverage` statements (_without_ code region `Span`s)\n+                // to ensure `BasicCoverageBlock` counters that other `Expression`s may depend on\n+                // are in fact counted, even though they don't directly contribute to counting\n+                // their own independent code region's coverage.\n+                self.inject_indirect_counters(&mut graphviz_data, &mut debug_used_expressions);\n+\n+                // Intermediate expressions will be injected as the final step, after generating\n+                // debug output, if any.\n+                ////////////////////////////////////////////////////\n+\n+                (Ok(()), intermediate_expressions)\n+            }\n+            Err(e) => (Err(e), Vec::new()),\n+        };\n+\n+        if graphviz_data.is_enabled() {\n+            // Even if there was an error, a partial CoverageGraph can still generate a useful\n+            // graphviz output.\n+            debug::dump_coverage_graphviz(\n+                tcx,\n+                self.mir_body,\n+                self.pass_name,\n+                &self.basic_coverage_blocks,\n+                &self.coverage_counters.debug_counters,\n+                &graphviz_data,\n+                &intermediate_expressions,\n+                &debug_used_expressions,\n+            );\n+        }\n+\n+        if let Err(e) = result {\n+            bug!(\"Error processing: {:?}: {:?}\", self.mir_body.source.def_id(), e)\n+        };\n+\n+        // Depending on current `debug_options()`, `alert_on_unused_expressions()` could panic, so\n+        // this check is performed as late as possible, to allow other debug output (logs and dump\n+        // files), which might be helpful in analyzing unused expressions, to still be generated.\n+        debug_used_expressions.alert_on_unused_expressions(&self.coverage_counters.debug_counters);\n+\n+        ////////////////////////////////////////////////////\n+        // Finally, inject the intermediate expressions collected along the way.\n+        for intermediate_expression in intermediate_expressions {\n+            inject_intermediate_expression(self.mir_body, intermediate_expression);\n+        }\n+    }\n+\n+    /// Inject a counter for each `CoverageSpan`. There can be multiple `CoverageSpan`s for a given\n+    /// BCB, but only one actual counter needs to be incremented per BCB. `bb_counters` maps each\n+    /// `bcb` to its `Counter`, when injected. Subsequent `CoverageSpan`s for a BCB that already has\n+    /// a `Counter` will inject an `Expression` instead, and compute its value by adding `ZERO` to\n+    /// the BCB `Counter` value.\n+    ///\n+    /// If debugging, add every BCB `Expression` associated with a `CoverageSpan`s to the\n+    /// `used_expression_operands` map.\n+    fn inject_coverage_span_counters(\n+        &mut self,\n+        coverage_spans: Vec<CoverageSpan>,\n+        graphviz_data: &mut debug::GraphvizData,\n+        debug_used_expressions: &mut debug::UsedExpressions,\n+    ) {\n+        let tcx = self.tcx;\n+        let source_map = tcx.sess.source_map();\n+        let body_span = self.body_span;\n+        let source_file = source_map.lookup_source_file(body_span.lo());\n+        let file_name = Symbol::intern(&source_file.name.to_string());\n+\n+        let mut bcb_counters = IndexVec::from_elem_n(None, self.basic_coverage_blocks.num_nodes());\n+        for covspan in coverage_spans {\n+            let bcb = covspan.bcb;\n+            let span = covspan.span;\n+            let counter_kind = if let Some(&counter_operand) = bcb_counters[bcb].as_ref() {\n+                self.coverage_counters.make_identity_counter(counter_operand)\n+            } else if let Some(counter_kind) = self.bcb_data_mut(bcb).take_counter() {\n+                bcb_counters[bcb] = Some(counter_kind.as_operand_id());\n+                debug_used_expressions.add_expression_operands(&counter_kind);\n+                counter_kind\n+            } else {\n+                bug!(\"Every BasicCoverageBlock should have a Counter or Expression\");\n+            };\n+            graphviz_data.add_bcb_coverage_span_with_counter(bcb, &covspan, &counter_kind);\n+            // FIXME(#78542): Can spans for `TerminatorKind::Goto` be improved to avoid special\n+            // cases?\n+            let some_code_region = if self.is_code_region_redundant(bcb, span, body_span) {\n+                None\n+            } else {\n+                Some(make_code_region(file_name, &source_file, span, body_span))\n+            };\n+            inject_statement(self.mir_body, counter_kind, self.bcb_last_bb(bcb), some_code_region);\n+        }\n+    }\n+\n+    /// Returns true if the type of `BasicCoverageBlock` (specifically, it's `BasicBlock`s\n+    /// `TerminatorKind`) with the given `Span` (relative to the `body_span`) is known to produce\n+    /// a redundant coverage count.\n+    ///\n+    /// There is at least one case for this, and if it's not handled, the last line in a function\n+    /// will be double-counted.\n+    ///\n+    /// If this method returns `true`, the counter (which other `Expressions` may depend on) is\n+    /// still injected, but without an associated code region.\n+    // FIXME(#78542): Can spans for `TerminatorKind::Goto` be improved to avoid special cases?\n+    fn is_code_region_redundant(\n+        &self,\n+        bcb: BasicCoverageBlock,\n+        span: Span,\n+        body_span: Span,\n+    ) -> bool {\n+        if span.hi() == body_span.hi() {\n+            // All functions execute a `Return`-terminated `BasicBlock`, regardless of how the\n+            // function returns; but only some functions also _can_ return after a `Goto` block\n+            // that ends on the closing brace of the function (with the `Return`). When this\n+            // happens, the last character is counted 2 (or possibly more) times, when we know\n+            // the function returned only once (of course). By giving all `Goto` terminators at\n+            // the end of a function a `non-reportable` code region, they are still counted\n+            // if appropriate, but they don't increment the line counter, as long as their is\n+            // also a `Return` on that last line.\n+            if let TerminatorKind::Goto { .. } = self.bcb_terminator(bcb).kind {\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n+    /// `inject_coverage_span_counters()` looped through the `CoverageSpan`s and injected the\n+    /// counter from the `CoverageSpan`s `BasicCoverageBlock`, removing it from the BCB in the\n+    /// process (via `take_counter()`).\n+    ///\n+    /// Any other counter associated with a `BasicCoverageBlock`, or its incoming edge, but not\n+    /// associated with a `CoverageSpan`, should only exist if the counter is a `Expression`\n+    /// dependency (one of the expression operands). Collect them, and inject the additional\n+    /// counters into the MIR, without a reportable coverage span.\n+    fn inject_indirect_counters(\n+        &mut self,\n+        graphviz_data: &mut debug::GraphvizData,\n+        debug_used_expressions: &mut debug::UsedExpressions,\n+    ) {\n+        let mut bcb_counters_without_direct_coverage_spans = Vec::new();\n+        for (target_bcb, target_bcb_data) in self.basic_coverage_blocks.iter_enumerated_mut() {\n+            if let Some(counter_kind) = target_bcb_data.take_counter() {\n+                bcb_counters_without_direct_coverage_spans.push((None, target_bcb, counter_kind));\n+            }\n+            if let Some(edge_counters) = target_bcb_data.take_edge_counters() {\n+                for (from_bcb, counter_kind) in edge_counters {\n+                    bcb_counters_without_direct_coverage_spans.push((\n+                        Some(from_bcb),\n+                        target_bcb,\n+                        counter_kind,\n+                    ));\n+                }\n+            }\n+        }\n+\n+        // If debug is enabled, validate that every BCB or edge counter not directly associated\n+        // with a coverage span is at least indirectly associated (it is a dependency of a BCB\n+        // counter that _is_ associated with a coverage span).\n+        debug_used_expressions.validate(&bcb_counters_without_direct_coverage_spans);\n+\n+        for (edge_from_bcb, target_bcb, counter_kind) in bcb_counters_without_direct_coverage_spans\n+        {\n+            debug_used_expressions.add_unused_expression_if_not_found(\n+                &counter_kind,\n+                edge_from_bcb,\n+                target_bcb,\n+            );\n+\n+            match counter_kind {\n+                CoverageKind::Counter { .. } => {\n+                    let inject_to_bb = if let Some(from_bcb) = edge_from_bcb {\n+                        // The MIR edge starts `from_bb` (the outgoing / last BasicBlock in\n+                        // `from_bcb`) and ends at `to_bb` (the incoming / first BasicBlock in the\n+                        // `target_bcb`; also called the `leader_bb`).\n+                        let from_bb = self.bcb_last_bb(from_bcb);\n+                        let to_bb = self.bcb_leader_bb(target_bcb);\n+\n+                        let new_bb = inject_edge_counter_basic_block(self.mir_body, from_bb, to_bb);\n+                        graphviz_data.set_edge_counter(from_bcb, new_bb, &counter_kind);\n+                        debug!(\n+                            \"Edge {:?} (last {:?}) -> {:?} (leader {:?}) requires a new MIR \\\n+                            BasicBlock {:?}, for unclaimed edge counter {}\",\n+                            edge_from_bcb,\n+                            from_bb,\n+                            target_bcb,\n+                            to_bb,\n+                            new_bb,\n+                            self.format_counter(&counter_kind),\n+                        );\n+                        new_bb\n+                    } else {\n+                        let target_bb = self.bcb_last_bb(target_bcb);\n+                        graphviz_data.add_bcb_dependency_counter(target_bcb, &counter_kind);\n+                        debug!(\n+                            \"{:?} ({:?}) gets a new Coverage statement for unclaimed counter {}\",\n+                            target_bcb,\n+                            target_bb,\n+                            self.format_counter(&counter_kind),\n+                        );\n+                        target_bb\n+                    };\n+\n+                    inject_statement(self.mir_body, counter_kind, inject_to_bb, None);\n+                }\n+                CoverageKind::Expression { .. } => {\n+                    inject_intermediate_expression(self.mir_body, counter_kind)\n+                }\n+                _ => bug!(\"CoverageKind should be a counter\"),\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn bcb_leader_bb(&self, bcb: BasicCoverageBlock) -> BasicBlock {\n+        self.bcb_data(bcb).leader_bb()\n+    }\n+\n+    #[inline]\n+    fn bcb_last_bb(&self, bcb: BasicCoverageBlock) -> BasicBlock {\n+        self.bcb_data(bcb).last_bb()\n+    }\n+\n+    #[inline]\n+    fn bcb_terminator(&self, bcb: BasicCoverageBlock) -> &Terminator<'tcx> {\n+        self.bcb_data(bcb).terminator(self.mir_body)\n+    }\n+\n+    #[inline]\n+    fn bcb_data(&self, bcb: BasicCoverageBlock) -> &BasicCoverageBlockData {\n+        &self.basic_coverage_blocks[bcb]\n+    }\n+\n+    #[inline]\n+    fn bcb_data_mut(&mut self, bcb: BasicCoverageBlock) -> &mut BasicCoverageBlockData {\n+        &mut self.basic_coverage_blocks[bcb]\n+    }\n+\n+    #[inline]\n+    fn format_counter(&self, counter_kind: &CoverageKind) -> String {\n+        self.coverage_counters.debug_counters.format_counter(counter_kind)\n+    }\n+}\n+\n+fn inject_edge_counter_basic_block(\n+    mir_body: &mut mir::Body<'tcx>,\n+    from_bb: BasicBlock,\n+    to_bb: BasicBlock,\n+) -> BasicBlock {\n+    let span = mir_body[from_bb].terminator().source_info.span.shrink_to_hi();\n+    let new_bb = mir_body.basic_blocks_mut().push(BasicBlockData {\n+        statements: vec![], // counter will be injected here\n+        terminator: Some(Terminator {\n+            source_info: SourceInfo::outermost(span),\n+            kind: TerminatorKind::Goto { target: to_bb },\n+        }),\n+        is_cleanup: false,\n+    });\n+    let edge_ref = mir_body[from_bb]\n+        .terminator_mut()\n+        .successors_mut()\n+        .find(|successor| **successor == to_bb)\n+        .expect(\"from_bb should have a successor for to_bb\");\n+    *edge_ref = new_bb;\n+    new_bb\n+}\n+\n+fn inject_statement(\n+    mir_body: &mut mir::Body<'tcx>,\n+    counter_kind: CoverageKind,\n+    bb: BasicBlock,\n+    some_code_region: Option<CodeRegion>,\n+) {\n+    debug!(\n+        \"  injecting statement {:?} for {:?} at code region: {:?}\",\n+        counter_kind, bb, some_code_region\n+    );\n+    let data = &mut mir_body[bb];\n+    let source_info = data.terminator().source_info;\n+    let statement = Statement {\n+        source_info,\n+        kind: StatementKind::Coverage(box Coverage {\n+            kind: counter_kind,\n+            code_region: some_code_region,\n+        }),\n+    };\n+    data.statements.push(statement);\n+}\n+\n+// Non-code expressions are injected into the coverage map, without generating executable code.\n+fn inject_intermediate_expression(mir_body: &mut mir::Body<'tcx>, expression: CoverageKind) {\n+    debug_assert!(if let CoverageKind::Expression { .. } = expression { true } else { false });\n+    debug!(\"  injecting non-code expression {:?}\", expression);\n+    let inject_in_bb = mir::START_BLOCK;\n+    let data = &mut mir_body[inject_in_bb];\n+    let source_info = data.terminator().source_info;\n+    let statement = Statement {\n+        source_info,\n+        kind: StatementKind::Coverage(box Coverage { kind: expression, code_region: None }),\n+    };\n+    data.statements.push(statement);\n+}\n+\n+/// Convert the Span into its file name, start line and column, and end line and column\n+fn make_code_region(\n+    file_name: Symbol,\n+    source_file: &Lrc<SourceFile>,\n+    span: Span,\n+    body_span: Span,\n+) -> CodeRegion {\n+    let (start_line, mut start_col) = source_file.lookup_file_pos(span.lo());\n+    let (end_line, end_col) = if span.hi() == span.lo() {\n+        let (end_line, mut end_col) = (start_line, start_col);\n+        // Extend an empty span by one character so the region will be counted.\n+        let CharPos(char_pos) = start_col;\n+        if span.hi() == body_span.hi() {\n+            start_col = CharPos(char_pos - 1);\n+        } else {\n+            end_col = CharPos(char_pos + 1);\n+        }\n+        (end_line, end_col)\n+    } else {\n+        source_file.lookup_file_pos(span.hi())\n+    };\n+    CodeRegion {\n+        file_name,\n+        start_line: start_line as u32,\n+        start_col: start_col.to_u32() + 1,\n+        end_line: end_line as u32,\n+        end_col: end_col.to_u32() + 1,\n+    }\n+}\n+\n+fn hir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx rustc_hir::Body<'tcx> {\n+    let hir_node = tcx.hir().get_if_local(def_id).expect(\"expected DefId is local\");\n+    let fn_body_id = hir::map::associated_body(hir_node).expect(\"HIR node is a function with body\");\n+    tcx.hir().body(fn_body_id)\n+}\n+\n+fn hash_mir_source<'tcx>(tcx: TyCtxt<'tcx>, hir_body: &'tcx rustc_hir::Body<'tcx>) -> u64 {\n+    let mut hcx = tcx.create_no_span_stable_hashing_context();\n+    hash(&mut hcx, &hir_body.value).to_smaller_hash()\n+}\n+\n+fn hash(\n+    hcx: &mut StableHashingContext<'tcx>,\n+    node: &impl HashStable<StableHashingContext<'tcx>>,\n+) -> Fingerprint {\n+    let mut stable_hasher = StableHasher::new();\n+    node.hash_stable(hcx, &mut stable_hasher);\n+    stable_hasher.finish()\n+}"}, {"sha": "e86bb96d29c30937432d71ba0327c37e4a624015", "filename": "compiler/rustc_mir/src/transform/coverage/query.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fquery.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,125 @@\n+use rustc_middle::mir::coverage::*;\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::mir::{Coverage, CoverageInfo, Location};\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_span::def_id::DefId;\n+\n+/// The `query` provider for `CoverageInfo`, requested by `codegen_coverage()` (to inject each\n+/// counter) and `FunctionCoverage::new()` (to extract the coverage map metadata from the MIR).\n+pub(crate) fn provide(providers: &mut Providers) {\n+    providers.coverageinfo = |tcx, def_id| coverageinfo_from_mir(tcx, def_id);\n+}\n+\n+/// The `num_counters` argument to `llvm.instrprof.increment` is the max counter_id + 1, or in\n+/// other words, the number of counter value references injected into the MIR (plus 1 for the\n+/// reserved `ZERO` counter, which uses counter ID `0` when included in an expression). Injected\n+/// counters have a counter ID from `1..num_counters-1`.\n+///\n+/// `num_expressions` is the number of counter expressions added to the MIR body.\n+///\n+/// Both `num_counters` and `num_expressions` are used to initialize new vectors, during backend\n+/// code generate, to lookup counters and expressions by simple u32 indexes.\n+///\n+/// MIR optimization may split and duplicate some BasicBlock sequences, or optimize out some code\n+/// including injected counters. (It is OK if some counters are optimized out, but those counters\n+/// are still included in the total `num_counters` or `num_expressions`.) Simply counting the\n+/// calls may not work; but computing the number of counters or expressions by adding `1` to the\n+/// highest ID (for a given instrumented function) is valid.\n+///\n+/// This visitor runs twice, first with `add_missing_operands` set to `false`, to find the maximum\n+/// counter ID and maximum expression ID based on their enum variant `id` fields; then, as a\n+/// safeguard, with `add_missing_operands` set to `true`, to find any other counter or expression\n+/// IDs referenced by expression operands, if not already seen.\n+///\n+/// Ideally, each operand ID in a MIR `CoverageKind::Expression` will have a separate MIR `Coverage`\n+/// statement for the `Counter` or `Expression` with the referenced ID. but since current or future\n+/// MIR optimizations can theoretically optimize out segments of a MIR, it may not be possible to\n+/// guarantee this, so the second pass ensures the `CoverageInfo` counts include all referenced IDs.\n+struct CoverageVisitor {\n+    info: CoverageInfo,\n+    add_missing_operands: bool,\n+}\n+\n+impl CoverageVisitor {\n+    /// Updates `num_counters` to the maximum encountered zero-based counter_id plus 1. Note the\n+    /// final computed number of counters should be the number of all `CoverageKind::Counter`\n+    /// statements in the MIR *plus one* for the implicit `ZERO` counter.\n+    #[inline(always)]\n+    fn update_num_counters(&mut self, counter_id: u32) {\n+        self.info.num_counters = std::cmp::max(self.info.num_counters, counter_id + 1);\n+    }\n+\n+    /// Computes an expression index for each expression ID, and updates `num_expressions` to the\n+    /// maximum encountered index plus 1.\n+    #[inline(always)]\n+    fn update_num_expressions(&mut self, expression_id: u32) {\n+        let expression_index = u32::MAX - expression_id;\n+        self.info.num_expressions = std::cmp::max(self.info.num_expressions, expression_index + 1);\n+    }\n+\n+    fn update_from_expression_operand(&mut self, operand_id: u32) {\n+        if operand_id >= self.info.num_counters {\n+            let operand_as_expression_index = u32::MAX - operand_id;\n+            if operand_as_expression_index >= self.info.num_expressions {\n+                // The operand ID is outside the known range of counter IDs and also outside the\n+                // known range of expression IDs. In either case, the result of a missing operand\n+                // (if and when used in an expression) will be zero, so from a computation\n+                // perspective, it doesn't matter whether it is interepretted as a counter or an\n+                // expression.\n+                //\n+                // However, the `num_counters` and `num_expressions` query results are used to\n+                // allocate arrays when generating the coverage map (during codegen), so choose\n+                // the type that grows either `num_counters` or `num_expressions` the least.\n+                if operand_id - self.info.num_counters\n+                    < operand_as_expression_index - self.info.num_expressions\n+                {\n+                    self.update_num_counters(operand_id)\n+                } else {\n+                    self.update_num_expressions(operand_id)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl Visitor<'_> for CoverageVisitor {\n+    fn visit_coverage(&mut self, coverage: &Coverage, _location: Location) {\n+        if self.add_missing_operands {\n+            match coverage.kind {\n+                CoverageKind::Expression { lhs, rhs, .. } => {\n+                    self.update_from_expression_operand(u32::from(lhs));\n+                    self.update_from_expression_operand(u32::from(rhs));\n+                }\n+                _ => {}\n+            }\n+        } else {\n+            match coverage.kind {\n+                CoverageKind::Counter { id, .. } => {\n+                    self.update_num_counters(u32::from(id));\n+                }\n+                CoverageKind::Expression { id, .. } => {\n+                    self.update_num_expressions(u32::from(id));\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo {\n+    let mir_body = tcx.optimized_mir(def_id);\n+\n+    let mut coverage_visitor = CoverageVisitor {\n+        // num_counters always has at least the `ZERO` counter.\n+        info: CoverageInfo { num_counters: 1, num_expressions: 0 },\n+        add_missing_operands: false,\n+    };\n+\n+    coverage_visitor.visit_body(mir_body);\n+\n+    coverage_visitor.add_missing_operands = true;\n+    coverage_visitor.visit_body(mir_body);\n+\n+    coverage_visitor.info\n+}"}, {"sha": "cda4fc125442f9bfb539d6f880d153665371d4c7", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "added", "additions": 753, "deletions": 0, "changes": 753, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,753 @@\n+use super::debug::term_type;\n+use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n+\n+use crate::util::spanview::source_range_no_file;\n+\n+use rustc_data_structures::graph::WithNumNodes;\n+use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::{\n+    self, AggregateKind, BasicBlock, FakeReadCause, Rvalue, Statement, StatementKind, Terminator,\n+    TerminatorKind,\n+};\n+use rustc_middle::ty::TyCtxt;\n+\n+use rustc_span::source_map::original_sp;\n+use rustc_span::{BytePos, Span, SyntaxContext};\n+\n+use std::cmp::Ordering;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub(crate) enum CoverageStatement {\n+    Statement(BasicBlock, Span, usize),\n+    Terminator(BasicBlock, Span),\n+}\n+\n+impl CoverageStatement {\n+    pub fn format(&self, tcx: TyCtxt<'tcx>, mir_body: &'a mir::Body<'tcx>) -> String {\n+        match *self {\n+            Self::Statement(bb, span, stmt_index) => {\n+                let stmt = &mir_body[bb].statements[stmt_index];\n+                format!(\n+                    \"{}: @{}[{}]: {:?}\",\n+                    source_range_no_file(tcx, &span),\n+                    bb.index(),\n+                    stmt_index,\n+                    stmt\n+                )\n+            }\n+            Self::Terminator(bb, span) => {\n+                let term = mir_body[bb].terminator();\n+                format!(\n+                    \"{}: @{}.{}: {:?}\",\n+                    source_range_no_file(tcx, &span),\n+                    bb.index(),\n+                    term_type(&term.kind),\n+                    term.kind\n+                )\n+            }\n+        }\n+    }\n+\n+    pub fn span(&self) -> &Span {\n+        match self {\n+            Self::Statement(_, span, _) | Self::Terminator(_, span) => span,\n+        }\n+    }\n+}\n+\n+/// A BCB is deconstructed into one or more `Span`s. Each `Span` maps to a `CoverageSpan` that\n+/// references the originating BCB and one or more MIR `Statement`s and/or `Terminator`s.\n+/// Initially, the `Span`s come from the `Statement`s and `Terminator`s, but subsequent\n+/// transforms can combine adjacent `Span`s and `CoverageSpan` from the same BCB, merging the\n+/// `CoverageStatement` vectors, and the `Span`s to cover the extent of the combined `Span`s.\n+///\n+/// Note: A `CoverageStatement` merged into another CoverageSpan may come from a `BasicBlock` that\n+/// is not part of the `CoverageSpan` bcb if the statement was included because it's `Span` matches\n+/// or is subsumed by the `Span` associated with this `CoverageSpan`, and it's `BasicBlock`\n+/// `is_dominated_by()` the `BasicBlock`s in this `CoverageSpan`.\n+#[derive(Debug, Clone)]\n+pub(crate) struct CoverageSpan {\n+    pub span: Span,\n+    pub bcb: BasicCoverageBlock,\n+    pub coverage_statements: Vec<CoverageStatement>,\n+    pub is_closure: bool,\n+}\n+\n+impl CoverageSpan {\n+    pub fn for_statement(\n+        statement: &Statement<'tcx>,\n+        span: Span,\n+        bcb: BasicCoverageBlock,\n+        bb: BasicBlock,\n+        stmt_index: usize,\n+    ) -> Self {\n+        let is_closure = match statement.kind {\n+            StatementKind::Assign(box (\n+                _,\n+                Rvalue::Aggregate(box AggregateKind::Closure(_, _), _),\n+            )) => true,\n+            _ => false,\n+        };\n+\n+        Self {\n+            span,\n+            bcb,\n+            coverage_statements: vec![CoverageStatement::Statement(bb, span, stmt_index)],\n+            is_closure,\n+        }\n+    }\n+\n+    pub fn for_terminator(span: Span, bcb: BasicCoverageBlock, bb: BasicBlock) -> Self {\n+        Self {\n+            span,\n+            bcb,\n+            coverage_statements: vec![CoverageStatement::Terminator(bb, span)],\n+            is_closure: false,\n+        }\n+    }\n+\n+    pub fn merge_from(&mut self, mut other: CoverageSpan) {\n+        debug_assert!(self.is_mergeable(&other));\n+        self.span = self.span.to(other.span);\n+        if other.is_closure {\n+            self.is_closure = true;\n+        }\n+        self.coverage_statements.append(&mut other.coverage_statements);\n+    }\n+\n+    pub fn cutoff_statements_at(&mut self, cutoff_pos: BytePos) {\n+        self.coverage_statements.retain(|covstmt| covstmt.span().hi() <= cutoff_pos);\n+        if let Some(highest_covstmt) =\n+            self.coverage_statements.iter().max_by_key(|covstmt| covstmt.span().hi())\n+        {\n+            self.span = self.span.with_hi(highest_covstmt.span().hi());\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn is_mergeable(&self, other: &Self) -> bool {\n+        self.is_in_same_bcb(other) && !(self.is_closure || other.is_closure)\n+    }\n+\n+    #[inline]\n+    pub fn is_in_same_bcb(&self, other: &Self) -> bool {\n+        self.bcb == other.bcb\n+    }\n+\n+    pub fn format(&self, tcx: TyCtxt<'tcx>, mir_body: &'a mir::Body<'tcx>) -> String {\n+        format!(\n+            \"{}\\n    {}\",\n+            source_range_no_file(tcx, &self.span),\n+            self.format_coverage_statements(tcx, mir_body).replace(\"\\n\", \"\\n    \"),\n+        )\n+    }\n+\n+    pub fn format_coverage_statements(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        mir_body: &'a mir::Body<'tcx>,\n+    ) -> String {\n+        let mut sorted_coverage_statements = self.coverage_statements.clone();\n+        sorted_coverage_statements.sort_unstable_by_key(|covstmt| match *covstmt {\n+            CoverageStatement::Statement(bb, _, index) => (bb, index),\n+            CoverageStatement::Terminator(bb, _) => (bb, usize::MAX),\n+        });\n+        sorted_coverage_statements\n+            .iter()\n+            .map(|covstmt| covstmt.format(tcx, mir_body))\n+            .collect::<Vec<_>>()\n+            .join(\"\\n\")\n+    }\n+}\n+\n+/// Converts the initial set of `CoverageSpan`s (one per MIR `Statement` or `Terminator`) into a\n+/// minimal set of `CoverageSpan`s, using the BCB CFG to determine where it is safe and useful to:\n+///\n+///  * Remove duplicate source code coverage regions\n+///  * Merge spans that represent continuous (both in source code and control flow), non-branching\n+///    execution\n+///  * Carve out (leave uncovered) any span that will be counted by another MIR (notably, closures)\n+pub struct CoverageSpans<'a, 'tcx> {\n+    /// The MIR, used to look up `BasicBlockData`.\n+    mir_body: &'a mir::Body<'tcx>,\n+\n+    /// A `Span` covering the function body of the MIR (typically from left curly brace to right\n+    /// curly brace).\n+    body_span: Span,\n+\n+    /// The BasicCoverageBlock Control Flow Graph (BCB CFG).\n+    basic_coverage_blocks: &'a CoverageGraph,\n+\n+    /// The initial set of `CoverageSpan`s, sorted by `Span` (`lo` and `hi`) and by relative\n+    /// dominance between the `BasicCoverageBlock`s of equal `Span`s.\n+    sorted_spans_iter: Option<std::vec::IntoIter<CoverageSpan>>,\n+\n+    /// The current `CoverageSpan` to compare to its `prev`, to possibly merge, discard, force the\n+    /// discard of the `prev` (and or `pending_dups`), or keep both (with `prev` moved to\n+    /// `pending_dups`). If `curr` is not discarded or merged, it becomes `prev` for the next\n+    /// iteration.\n+    some_curr: Option<CoverageSpan>,\n+\n+    /// The original `span` for `curr`, in case the `curr` span is modified.\n+    curr_original_span: Span,\n+\n+    /// The CoverageSpan from a prior iteration; typically assigned from that iteration's `curr`.\n+    /// If that `curr` was discarded, `prev` retains its value from the previous iteration.\n+    some_prev: Option<CoverageSpan>,\n+\n+    /// Assigned from `curr_original_span` from the previous iteration.\n+    prev_original_span: Span,\n+\n+    /// One or more `CoverageSpan`s with the same `Span` but different `BasicCoverageBlock`s, and\n+    /// no `BasicCoverageBlock` in this list dominates another `BasicCoverageBlock` in the list.\n+    /// If a new `curr` span also fits this criteria (compared to an existing list of\n+    /// `pending_dups`), that `curr` `CoverageSpan` moves to `prev` before possibly being added to\n+    /// the `pending_dups` list, on the next iteration. As a result, if `prev` and `pending_dups`\n+    /// have the same `Span`, the criteria for `pending_dups` holds for `prev` as well: a `prev`\n+    /// with a matching `Span` does not dominate any `pending_dup` and no `pending_dup` dominates a\n+    /// `prev` with a matching `Span`)\n+    pending_dups: Vec<CoverageSpan>,\n+\n+    /// The final `CoverageSpan`s to add to the coverage map. A `Counter` or `Expression`\n+    /// will also be injected into the MIR for each `CoverageSpan`.\n+    refined_spans: Vec<CoverageSpan>,\n+}\n+\n+impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n+    pub(crate) fn generate_coverage_spans(\n+        mir_body: &'a mir::Body<'tcx>,\n+        body_span: Span,\n+        basic_coverage_blocks: &'a CoverageGraph,\n+    ) -> Vec<CoverageSpan> {\n+        let mut coverage_spans = CoverageSpans {\n+            mir_body,\n+            body_span,\n+            basic_coverage_blocks,\n+            sorted_spans_iter: None,\n+            refined_spans: Vec::with_capacity(basic_coverage_blocks.num_nodes() * 2),\n+            some_curr: None,\n+            curr_original_span: Span::with_root_ctxt(BytePos(0), BytePos(0)),\n+            some_prev: None,\n+            prev_original_span: Span::with_root_ctxt(BytePos(0), BytePos(0)),\n+            pending_dups: Vec::new(),\n+        };\n+\n+        let sorted_spans = coverage_spans.mir_to_initial_sorted_coverage_spans();\n+\n+        coverage_spans.sorted_spans_iter = Some(sorted_spans.into_iter());\n+        coverage_spans.some_prev = coverage_spans.sorted_spans_iter.as_mut().unwrap().next();\n+        coverage_spans.prev_original_span =\n+            coverage_spans.some_prev.as_ref().expect(\"at least one span\").span;\n+\n+        coverage_spans.to_refined_spans()\n+    }\n+\n+    /// Generate a minimal set of `CoverageSpan`s, each representing a contiguous code region to be\n+    /// counted.\n+    ///\n+    /// The basic steps are:\n+    ///\n+    /// 1. Extract an initial set of spans from the `Statement`s and `Terminator`s of each\n+    ///    `BasicCoverageBlockData`.\n+    /// 2. Sort the spans by span.lo() (starting position). Spans that start at the same position\n+    ///    are sorted with longer spans before shorter spans; and equal spans are sorted\n+    ///    (deterministically) based on \"dominator\" relationship (if any).\n+    /// 3. Traverse the spans in sorted order to identify spans that can be dropped (for instance,\n+    ///    if another span or spans are already counting the same code region), or should be merged\n+    ///    into a broader combined span (because it represents a contiguous, non-branching, and\n+    ///    uninterrupted region of source code).\n+    ///\n+    ///    Closures are exposed in their enclosing functions as `Assign` `Rvalue`s, and since\n+    ///    closures have their own MIR, their `Span` in their enclosing function should be left\n+    ///    \"uncovered\".\n+    ///\n+    /// Note the resulting vector of `CoverageSpan`s does may not be fully sorted (and does not need\n+    /// to be).\n+    fn mir_to_initial_sorted_coverage_spans(&self) -> Vec<CoverageSpan> {\n+        let mut initial_spans = Vec::<CoverageSpan>::with_capacity(self.mir_body.num_nodes() * 2);\n+        for (bcb, bcb_data) in self.basic_coverage_blocks.iter_enumerated() {\n+            for coverage_span in self.bcb_to_initial_coverage_spans(bcb, bcb_data) {\n+                initial_spans.push(coverage_span);\n+            }\n+        }\n+\n+        if initial_spans.is_empty() {\n+            // This can happen if, for example, the function is unreachable (contains only a\n+            // `BasicBlock`(s) with an `Unreachable` terminator).\n+            return initial_spans;\n+        }\n+\n+        initial_spans.sort_unstable_by(|a, b| {\n+            if a.span.lo() == b.span.lo() {\n+                if a.span.hi() == b.span.hi() {\n+                    if a.is_in_same_bcb(b) {\n+                        Some(Ordering::Equal)\n+                    } else {\n+                        // Sort equal spans by dominator relationship, in reverse order (so\n+                        // dominators always come after the dominated equal spans). When later\n+                        // comparing two spans in order, the first will either dominate the second,\n+                        // or they will have no dominator relationship.\n+                        self.basic_coverage_blocks.dominators().rank_partial_cmp(b.bcb, a.bcb)\n+                    }\n+                } else {\n+                    // Sort hi() in reverse order so shorter spans are attempted after longer spans.\n+                    // This guarantees that, if a `prev` span overlaps, and is not equal to, a\n+                    // `curr` span, the prev span either extends further left of the curr span, or\n+                    // they start at the same position and the prev span extends further right of\n+                    // the end of the curr span.\n+                    b.span.hi().partial_cmp(&a.span.hi())\n+                }\n+            } else {\n+                a.span.lo().partial_cmp(&b.span.lo())\n+            }\n+            .unwrap()\n+        });\n+\n+        initial_spans\n+    }\n+\n+    /// Iterate through the sorted `CoverageSpan`s, and return the refined list of merged and\n+    /// de-duplicated `CoverageSpan`s.\n+    fn to_refined_spans(mut self) -> Vec<CoverageSpan> {\n+        while self.next_coverage_span() {\n+            if self.curr().is_mergeable(self.prev()) {\n+                debug!(\"  same bcb (and neither is a closure), merge with prev={:?}\", self.prev());\n+                let prev = self.take_prev();\n+                self.curr_mut().merge_from(prev);\n+            // Note that curr.span may now differ from curr_original_span\n+            } else if self.prev_ends_before_curr() {\n+                debug!(\n+                    \"  different bcbs and disjoint spans, so keep curr for next iter, and add \\\n+                    prev={:?}\",\n+                    self.prev()\n+                );\n+                let prev = self.take_prev();\n+                self.refined_spans.push(prev);\n+            } else if self.prev().is_closure {\n+                // drop any equal or overlapping span (`curr`) and keep `prev` to test again in the\n+                // next iter\n+                debug!(\n+                    \"  curr overlaps a closure (prev). Drop curr and keep prev for next iter. \\\n+                    prev={:?}\",\n+                    self.prev()\n+                );\n+                self.discard_curr();\n+            } else if self.curr().is_closure {\n+                self.carve_out_span_for_closure();\n+            } else if self.prev_original_span == self.curr().span {\n+                // Note that this compares the new span to `prev_original_span`, which may not\n+                // be the full `prev.span` (if merged during the previous iteration).\n+                self.hold_pending_dups_unless_dominated();\n+            } else {\n+                self.cutoff_prev_at_overlapping_curr();\n+            }\n+        }\n+\n+        debug!(\"    AT END, adding last prev={:?}\", self.prev());\n+        let prev = self.take_prev();\n+        let CoverageSpans {\n+            mir_body, basic_coverage_blocks, pending_dups, mut refined_spans, ..\n+        } = self;\n+        for dup in pending_dups {\n+            debug!(\"    ...adding at least one pending dup={:?}\", dup);\n+            refined_spans.push(dup);\n+        }\n+        refined_spans.push(prev);\n+\n+        // Remove `CoverageSpan`s with empty spans ONLY if the empty `CoverageSpan`s BCB also has at\n+        // least one other non-empty `CoverageSpan`.\n+        let mut has_coverage = BitSet::new_empty(basic_coverage_blocks.num_nodes());\n+        for covspan in &refined_spans {\n+            if !covspan.span.is_empty() {\n+                has_coverage.insert(covspan.bcb);\n+            }\n+        }\n+        refined_spans.retain(|covspan| {\n+            !(covspan.span.is_empty()\n+                && is_goto(&basic_coverage_blocks[covspan.bcb].terminator(mir_body).kind)\n+                && has_coverage.contains(covspan.bcb))\n+        });\n+\n+        // Remove `CoverageSpan`s derived from closures, originally added to ensure the coverage\n+        // regions for the current function leave room for the closure's own coverage regions\n+        // (injected separately, from the closure's own MIR).\n+        refined_spans.retain(|covspan| !covspan.is_closure);\n+        refined_spans\n+    }\n+\n+    // Generate a set of `CoverageSpan`s from the filtered set of `Statement`s and `Terminator`s of\n+    // the `BasicBlock`(s) in the given `BasicCoverageBlockData`. One `CoverageSpan` is generated\n+    // for each `Statement` and `Terminator`. (Note that subsequent stages of coverage analysis will\n+    // merge some `CoverageSpan`s, at which point a `CoverageSpan` may represent multiple\n+    // `Statement`s and/or `Terminator`s.)\n+    fn bcb_to_initial_coverage_spans(\n+        &self,\n+        bcb: BasicCoverageBlock,\n+        bcb_data: &'a BasicCoverageBlockData,\n+    ) -> Vec<CoverageSpan> {\n+        bcb_data\n+            .basic_blocks\n+            .iter()\n+            .flat_map(|&bb| {\n+                let data = &self.mir_body[bb];\n+                data.statements\n+                    .iter()\n+                    .enumerate()\n+                    .filter_map(move |(index, statement)| {\n+                        filtered_statement_span(statement, self.body_span).map(|span| {\n+                            CoverageSpan::for_statement(statement, span, bcb, bb, index)\n+                        })\n+                    })\n+                    .chain(\n+                        filtered_terminator_span(data.terminator(), self.body_span)\n+                            .map(|span| CoverageSpan::for_terminator(span, bcb, bb)),\n+                    )\n+            })\n+            .collect()\n+    }\n+\n+    fn curr(&self) -> &CoverageSpan {\n+        self.some_curr\n+            .as_ref()\n+            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_curr\"))\n+    }\n+\n+    fn curr_mut(&mut self) -> &mut CoverageSpan {\n+        self.some_curr\n+            .as_mut()\n+            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_curr\"))\n+    }\n+\n+    fn prev(&self) -> &CoverageSpan {\n+        self.some_prev\n+            .as_ref()\n+            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_prev\"))\n+    }\n+\n+    fn prev_mut(&mut self) -> &mut CoverageSpan {\n+        self.some_prev\n+            .as_mut()\n+            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_prev\"))\n+    }\n+\n+    fn take_prev(&mut self) -> CoverageSpan {\n+        self.some_prev.take().unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_prev\"))\n+    }\n+\n+    /// If there are `pending_dups` but `prev` is not a matching dup (`prev.span` doesn't match the\n+    /// `pending_dups` spans), then one of the following two things happened during the previous\n+    /// iteration:\n+    ///   * the previous `curr` span (which is now `prev`) was not a duplicate of the pending_dups\n+    ///     (in which case there should be at least two spans in `pending_dups`); or\n+    ///   * the `span` of `prev` was modified by `curr_mut().merge_from(prev)` (in which case\n+    ///     `pending_dups` could have as few as one span)\n+    /// In either case, no more spans will match the span of `pending_dups`, so\n+    /// add the `pending_dups` if they don't overlap `curr`, and clear the list.\n+    fn check_pending_dups(&mut self) {\n+        if let Some(dup) = self.pending_dups.last() {\n+            if dup.span != self.prev().span {\n+                debug!(\n+                    \"    SAME spans, but pending_dups are NOT THE SAME, so BCBs matched on \\\n+                    previous iteration, or prev started a new disjoint span\"\n+                );\n+                if dup.span.hi() <= self.curr().span.lo() {\n+                    let pending_dups = self.pending_dups.split_off(0);\n+                    for dup in pending_dups.into_iter() {\n+                        debug!(\"    ...adding at least one pending={:?}\", dup);\n+                        self.refined_spans.push(dup);\n+                    }\n+                } else {\n+                    self.pending_dups.clear();\n+                }\n+            }\n+        }\n+    }\n+\n+    /// Advance `prev` to `curr` (if any), and `curr` to the next `CoverageSpan` in sorted order.\n+    fn next_coverage_span(&mut self) -> bool {\n+        if let Some(curr) = self.some_curr.take() {\n+            self.some_prev = Some(curr);\n+            self.prev_original_span = self.curr_original_span;\n+        }\n+        while let Some(curr) = self.sorted_spans_iter.as_mut().unwrap().next() {\n+            debug!(\"FOR curr={:?}\", curr);\n+            if self.prev_starts_after_next(&curr) {\n+                debug!(\n+                    \"  prev.span starts after curr.span, so curr will be dropped (skipping past \\\n+                    closure?); prev={:?}\",\n+                    self.prev()\n+                );\n+            } else {\n+                // Save a copy of the original span for `curr` in case the `CoverageSpan` is changed\n+                // by `self.curr_mut().merge_from(prev)`.\n+                self.curr_original_span = curr.span;\n+                self.some_curr.replace(curr);\n+                self.check_pending_dups();\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n+    /// If called, then the next call to `next_coverage_span()` will *not* update `prev` with the\n+    /// `curr` coverage span.\n+    fn discard_curr(&mut self) {\n+        self.some_curr = None;\n+    }\n+\n+    /// Returns true if the curr span should be skipped because prev has already advanced beyond the\n+    /// end of curr. This can only happen if a prior iteration updated `prev` to skip past a region\n+    /// of code, such as skipping past a closure.\n+    fn prev_starts_after_next(&self, next_curr: &CoverageSpan) -> bool {\n+        self.prev().span.lo() > next_curr.span.lo()\n+    }\n+\n+    /// Returns true if the curr span starts past the end of the prev span, which means they don't\n+    /// overlap, so we now know the prev can be added to the refined coverage spans.\n+    fn prev_ends_before_curr(&self) -> bool {\n+        self.prev().span.hi() <= self.curr().span.lo()\n+    }\n+\n+    /// If `prev`s span extends left of the closure (`curr`), carve out the closure's\n+    /// span from `prev`'s span. (The closure's coverage counters will be injected when\n+    /// processing the closure's own MIR.) Add the portion of the span to the left of the\n+    /// closure; and if the span extends to the right of the closure, update `prev` to\n+    /// that portion of the span. For any `pending_dups`, repeat the same process.\n+    fn carve_out_span_for_closure(&mut self) {\n+        let curr_span = self.curr().span;\n+        let left_cutoff = curr_span.lo();\n+        let right_cutoff = curr_span.hi();\n+        let has_pre_closure_span = self.prev().span.lo() < right_cutoff;\n+        let has_post_closure_span = self.prev().span.hi() > right_cutoff;\n+        let mut pending_dups = self.pending_dups.split_off(0);\n+        if has_pre_closure_span {\n+            let mut pre_closure = self.prev().clone();\n+            pre_closure.span = pre_closure.span.with_hi(left_cutoff);\n+            debug!(\"  prev overlaps a closure. Adding span for pre_closure={:?}\", pre_closure);\n+            if !pending_dups.is_empty() {\n+                for mut dup in pending_dups.iter().cloned() {\n+                    dup.span = dup.span.with_hi(left_cutoff);\n+                    debug!(\"    ...and at least one pre_closure dup={:?}\", dup);\n+                    self.refined_spans.push(dup);\n+                }\n+            }\n+            self.refined_spans.push(pre_closure);\n+        }\n+        if has_post_closure_span {\n+            // Update prev.span to start after the closure (and discard curr)\n+            self.prev_mut().span = self.prev().span.with_lo(right_cutoff);\n+            self.prev_original_span = self.prev().span;\n+            for dup in pending_dups.iter_mut() {\n+                dup.span = dup.span.with_lo(right_cutoff);\n+            }\n+            self.pending_dups.append(&mut pending_dups);\n+            self.discard_curr(); // since self.prev() was already updated\n+        } else {\n+            pending_dups.clear();\n+        }\n+    }\n+\n+    /// Called if `curr.span` equals `prev_original_span` (and potentially equal to all\n+    /// `pending_dups` spans, if any); but keep in mind, `prev.span` may start at a `Span.lo()` that\n+    /// is less than (further left of) `prev_original_span.lo()`.\n+    ///\n+    /// When two `CoverageSpan`s have the same `Span`, dominated spans can be discarded; but if\n+    /// neither `CoverageSpan` dominates the other, both (or possibly more than two) are held,\n+    /// until their disposition is determined. In this latter case, the `prev` dup is moved into\n+    /// `pending_dups` so the new `curr` dup can be moved to `prev` for the next iteration.\n+    fn hold_pending_dups_unless_dominated(&mut self) {\n+        // Equal coverage spans are ordered by dominators before dominated (if any), so it should be\n+        // impossible for `curr` to dominate any previous `CoverageSpan`.\n+        debug_assert!(!self.span_bcb_is_dominated_by(self.prev(), self.curr()));\n+\n+        let initial_pending_count = self.pending_dups.len();\n+        if initial_pending_count > 0 {\n+            let mut pending_dups = self.pending_dups.split_off(0);\n+            pending_dups.retain(|dup| !self.span_bcb_is_dominated_by(self.curr(), dup));\n+            self.pending_dups.append(&mut pending_dups);\n+            if self.pending_dups.len() < initial_pending_count {\n+                debug!(\n+                    \"  discarded {} of {} pending_dups that dominated curr\",\n+                    initial_pending_count - self.pending_dups.len(),\n+                    initial_pending_count\n+                );\n+            }\n+        }\n+\n+        if self.span_bcb_is_dominated_by(self.curr(), self.prev()) {\n+            debug!(\n+                \"  different bcbs but SAME spans, and prev dominates curr. Discard prev={:?}\",\n+                self.prev()\n+            );\n+            self.cutoff_prev_at_overlapping_curr();\n+        // If one span dominates the other, assocate the span with the code from the dominated\n+        // block only (`curr`), and discard the overlapping portion of the `prev` span. (Note\n+        // that if `prev.span` is wider than `prev_original_span`, a `CoverageSpan` will still\n+        // be created for `prev`s block, for the non-overlapping portion, left of `curr.span`.)\n+        //\n+        // For example:\n+        //     match somenum {\n+        //         x if x < 1 => { ... }\n+        //     }...\n+        //\n+        // The span for the first `x` is referenced by both the pattern block (every time it is\n+        // evaluated) and the arm code (only when matched). The counter will be applied only to\n+        // the dominated block. This allows coverage to track and highlight things like the\n+        // assignment of `x` above, if the branch is matched, making `x` available to the arm\n+        // code; and to track and highlight the question mark `?` \"try\" operator at the end of\n+        // a function call returning a `Result`, so the `?` is covered when the function returns\n+        // an `Err`, and not counted as covered if the function always returns `Ok`.\n+        } else {\n+            // Save `prev` in `pending_dups`. (`curr` will become `prev` in the next iteration.)\n+            // If the `curr` CoverageSpan is later discarded, `pending_dups` can be discarded as\n+            // well; but if `curr` is added to refined_spans, the `pending_dups` will also be added.\n+            debug!(\n+                \"  different bcbs but SAME spans, and neither dominates, so keep curr for \\\n+                next iter, and, pending upcoming spans (unless overlapping) add prev={:?}\",\n+                self.prev()\n+            );\n+            let prev = self.take_prev();\n+            self.pending_dups.push(prev);\n+        }\n+    }\n+\n+    /// `curr` overlaps `prev`. If `prev`s span extends left of `curr`s span, keep _only_\n+    /// statements that end before `curr.lo()` (if any), and add the portion of the\n+    /// combined span for those statements. Any other statements have overlapping spans\n+    /// that can be ignored because `curr` and/or other upcoming statements/spans inside\n+    /// the overlap area will produce their own counters. This disambiguation process\n+    /// avoids injecting multiple counters for overlapping spans, and the potential for\n+    /// double-counting.\n+    fn cutoff_prev_at_overlapping_curr(&mut self) {\n+        debug!(\n+            \"  different bcbs, overlapping spans, so ignore/drop pending and only add prev \\\n+            if it has statements that end before curr; prev={:?}\",\n+            self.prev()\n+        );\n+        if self.pending_dups.is_empty() {\n+            let curr_span = self.curr().span;\n+            self.prev_mut().cutoff_statements_at(curr_span.lo());\n+            if self.prev().coverage_statements.is_empty() {\n+                debug!(\"  ... no non-overlapping statements to add\");\n+            } else {\n+                debug!(\"  ... adding modified prev={:?}\", self.prev());\n+                let prev = self.take_prev();\n+                self.refined_spans.push(prev);\n+            }\n+        } else {\n+            // with `pending_dups`, `prev` cannot have any statements that don't overlap\n+            self.pending_dups.clear();\n+        }\n+    }\n+\n+    fn span_bcb_is_dominated_by(&self, covspan: &CoverageSpan, dom_covspan: &CoverageSpan) -> bool {\n+        self.basic_coverage_blocks.is_dominated_by(covspan.bcb, dom_covspan.bcb)\n+    }\n+}\n+\n+fn filtered_statement_span(statement: &'a Statement<'tcx>, body_span: Span) -> Option<Span> {\n+    match statement.kind {\n+        // These statements have spans that are often outside the scope of the executed source code\n+        // for their parent `BasicBlock`.\n+        StatementKind::StorageLive(_)\n+        | StatementKind::StorageDead(_)\n+        // Coverage should not be encountered, but don't inject coverage coverage\n+        | StatementKind::Coverage(_)\n+        // Ignore `Nop`s\n+        | StatementKind::Nop => None,\n+\n+        // FIXME(#78546): MIR InstrumentCoverage - Can the source_info.span for `FakeRead`\n+        // statements be more consistent?\n+        //\n+        // FakeReadCause::ForGuardBinding, in this example:\n+        //     match somenum {\n+        //         x if x < 1 => { ... }\n+        //     }...\n+        // The BasicBlock within the match arm code included one of these statements, but the span\n+        // for it covered the `1` in this source. The actual statements have nothing to do with that\n+        // source span:\n+        //     FakeRead(ForGuardBinding, _4);\n+        // where `_4` is:\n+        //     _4 = &_1; (at the span for the first `x`)\n+        // and `_1` is the `Place` for `somenum`.\n+        //\n+        // If and when the Issue is resolved, remove this special case match pattern:\n+        StatementKind::FakeRead(cause, _) if cause == FakeReadCause::ForGuardBinding => None,\n+\n+        // Retain spans from all other statements\n+        StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n+        | StatementKind::Assign(_)\n+        | StatementKind::SetDiscriminant { .. }\n+        | StatementKind::LlvmInlineAsm(_)\n+        | StatementKind::Retag(_, _)\n+        | StatementKind::AscribeUserType(_, _) => {\n+            Some(function_source_span(statement.source_info.span, body_span))\n+        }\n+    }\n+}\n+\n+fn filtered_terminator_span(terminator: &'a Terminator<'tcx>, body_span: Span) -> Option<Span> {\n+    match terminator.kind {\n+        // These terminators have spans that don't positively contribute to computing a reasonable\n+        // span of actually executed source code. (For example, SwitchInt terminators extracted from\n+        // an `if condition { block }` has a span that includes the executed block, if true,\n+        // but for coverage, the code region executed, up to *and* through the SwitchInt,\n+        // actually stops before the if's block.)\n+        TerminatorKind::Unreachable // Unreachable blocks are not connected to the MIR CFG\n+        | TerminatorKind::Assert { .. }\n+        | TerminatorKind::Drop { .. }\n+        | TerminatorKind::DropAndReplace { .. }\n+        | TerminatorKind::SwitchInt { .. }\n+        // For `FalseEdge`, only the `real` branch is taken, so it is similar to a `Goto`.\n+        // FIXME(richkadel): Note that `Goto` was moved to it's own match arm, for the reasons\n+        // described below. Add tests to confirm whether or not similar cases also apply to\n+        // `FalseEdge`.\n+        | TerminatorKind::FalseEdge { .. } => None,\n+\n+        // FIXME(#78542): Can spans for `TerminatorKind::Goto` be improved to avoid special cases?\n+        //\n+        // `Goto`s are often the targets of `SwitchInt` branches, and certain important\n+        // optimizations to replace some `Counter`s with `Expression`s require a separate\n+        // `BasicCoverageBlock` for each branch, to support the `Counter`, when needed.\n+        //\n+        // Also, some test cases showed that `Goto` terminators, and to some degree their `Span`s,\n+        // provided useful context for coverage, such as to count and show when `if` blocks\n+        // _without_ `else` blocks execute the `false` case (counting when the body of the `if`\n+        // was _not_ taken). In these cases, the `Goto` span is ultimately given a `CoverageSpan`\n+        // of 1 character, at the end of it's original `Span`.\n+        //\n+        // However, in other cases, a visible `CoverageSpan` is not wanted, but the `Goto`\n+        // block must still be counted (for example, to contribute its count to an `Expression`\n+        // that reports the execution count for some other block). In these cases, the code region\n+        // is set to `None`. (See `Instrumentor::is_code_region_redundant()`.)\n+        TerminatorKind::Goto { .. } => {\n+            Some(function_source_span(terminator.source_info.span.shrink_to_hi(), body_span))\n+        }\n+\n+        // Retain spans from all other terminators\n+        TerminatorKind::Resume\n+        | TerminatorKind::Abort\n+        | TerminatorKind::Return\n+        | TerminatorKind::Call { .. }\n+        | TerminatorKind::Yield { .. }\n+        | TerminatorKind::GeneratorDrop\n+        | TerminatorKind::FalseUnwind { .. }\n+        | TerminatorKind::InlineAsm { .. } => {\n+            Some(function_source_span(terminator.source_info.span, body_span))\n+        }\n+    }\n+}\n+\n+#[inline]\n+fn function_source_span(span: Span, body_span: Span) -> Span {\n+    let span = original_sp(span, body_span).with_ctxt(SyntaxContext::root());\n+    if body_span.contains(span) { span } else { body_span }\n+}\n+\n+#[inline(always)]\n+fn is_goto(term_kind: &TerminatorKind<'tcx>) -> bool {\n+    match term_kind {\n+        TerminatorKind::Goto { .. } => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "6824c73ab60a05f69ffa00f1813b6c709469890c", "filename": "compiler/rustc_mir/src/transform/instrument_coverage.rs", "status": "removed", "additions": 0, "deletions": 1271, "changes": 1271, "blob_url": "https://github.com/rust-lang/rust/blob/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92b931045dabb00b892519d3451cb41d41f2d31/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finstrument_coverage.rs?ref=f92b931045dabb00b892519d3451cb41d41f2d31", "patch": "@@ -1,1271 +0,0 @@\n-use crate::transform::MirPass;\n-use crate::util::pretty;\n-use crate::util::spanview::{self, SpanViewable};\n-\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_data_structures::sync::Lrc;\n-use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n-use rustc_middle::hir;\n-use rustc_middle::hir::map::blocks::FnLikeNode;\n-use rustc_middle::ich::StableHashingContext;\n-use rustc_middle::mir;\n-use rustc_middle::mir::coverage::*;\n-use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{\n-    AggregateKind, BasicBlock, BasicBlockData, Coverage, CoverageInfo, FakeReadCause, Location,\n-    Rvalue, SourceInfo, Statement, StatementKind, Terminator, TerminatorKind,\n-};\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n-use rustc_span::def_id::DefId;\n-use rustc_span::source_map::original_sp;\n-use rustc_span::{BytePos, CharPos, Pos, SourceFile, Span, Symbol, SyntaxContext};\n-\n-use std::cmp::Ordering;\n-\n-const ID_SEPARATOR: &str = \",\";\n-\n-/// Inserts `StatementKind::Coverage` statements that either instrument the binary with injected\n-/// counters, via intrinsic `llvm.instrprof.increment`, and/or inject metadata used during codegen\n-/// to construct the coverage map.\n-pub struct InstrumentCoverage;\n-\n-/// The `query` provider for `CoverageInfo`, requested by `codegen_coverage()` (to inject each\n-/// counter) and `FunctionCoverage::new()` (to extract the coverage map metadata from the MIR).\n-pub(crate) fn provide(providers: &mut Providers) {\n-    providers.coverageinfo = |tcx, def_id| coverageinfo_from_mir(tcx, def_id);\n-}\n-\n-/// The `num_counters` argument to `llvm.instrprof.increment` is the max counter_id + 1, or in\n-/// other words, the number of counter value references injected into the MIR (plus 1 for the\n-/// reserved `ZERO` counter, which uses counter ID `0` when included in an expression). Injected\n-/// counters have a counter ID from `1..num_counters-1`.\n-///\n-/// `num_expressions` is the number of counter expressions added to the MIR body.\n-///\n-/// Both `num_counters` and `num_expressions` are used to initialize new vectors, during backend\n-/// code generate, to lookup counters and expressions by simple u32 indexes.\n-///\n-/// MIR optimization may split and duplicate some BasicBlock sequences, or optimize out some code\n-/// including injected counters. (It is OK if some counters are optimized out, but those counters\n-/// are still included in the total `num_counters` or `num_expressions`.) Simply counting the\n-/// calls may not work; but computing the number of counters or expressions by adding `1` to the\n-/// highest ID (for a given instrumented function) is valid.\n-struct CoverageVisitor {\n-    info: CoverageInfo,\n-}\n-\n-impl Visitor<'_> for CoverageVisitor {\n-    fn visit_coverage(&mut self, coverage: &Coverage, _location: Location) {\n-        match coverage.kind {\n-            CoverageKind::Counter { id, .. } => {\n-                let counter_id = u32::from(id);\n-                self.info.num_counters = std::cmp::max(self.info.num_counters, counter_id + 1);\n-            }\n-            CoverageKind::Expression { id, .. } => {\n-                let expression_index = u32::MAX - u32::from(id);\n-                self.info.num_expressions =\n-                    std::cmp::max(self.info.num_expressions, expression_index + 1);\n-            }\n-            _ => {}\n-        }\n-    }\n-}\n-\n-fn coverageinfo_from_mir<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> CoverageInfo {\n-    let mir_body = tcx.optimized_mir(def_id);\n-\n-    let mut coverage_visitor =\n-        CoverageVisitor { info: CoverageInfo { num_counters: 0, num_expressions: 0 } };\n-\n-    coverage_visitor.visit_body(mir_body);\n-    coverage_visitor.info\n-}\n-\n-impl<'tcx> MirPass<'tcx> for InstrumentCoverage {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, mir_body: &mut mir::Body<'tcx>) {\n-        // If the InstrumentCoverage pass is called on promoted MIRs, skip them.\n-        // See: https://github.com/rust-lang/rust/pull/73011#discussion_r438317601\n-        if mir_body.source.promoted.is_some() {\n-            trace!(\n-                \"InstrumentCoverage skipped for {:?} (already promoted for Miri evaluation)\",\n-                mir_body.source.def_id()\n-            );\n-            return;\n-        }\n-\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(mir_body.source.def_id().expect_local());\n-        let is_fn_like = FnLikeNode::from_node(tcx.hir().get(hir_id)).is_some();\n-\n-        // Only instrument functions, methods, and closures (not constants since they are evaluated\n-        // at compile time by Miri).\n-        // FIXME(#73156): Handle source code coverage in const eval\n-        if !is_fn_like {\n-            trace!(\n-                \"InstrumentCoverage skipped for {:?} (not an FnLikeNode)\",\n-                mir_body.source.def_id(),\n-            );\n-            return;\n-        }\n-        // FIXME(richkadel): By comparison, the MIR pass `ConstProp` includes associated constants,\n-        // with functions, methods, and closures. I assume Miri is used for associated constants as\n-        // well. If not, we may need to include them here too.\n-\n-        trace!(\"InstrumentCoverage starting for {:?}\", mir_body.source.def_id());\n-        Instrumentor::new(&self.name(), tcx, mir_body).inject_counters();\n-        trace!(\"InstrumentCoverage starting for {:?}\", mir_body.source.def_id());\n-    }\n-}\n-\n-/// A BasicCoverageBlock (BCB) represents the maximal-length sequence of CFG (MIR) BasicBlocks\n-/// without conditional branches.\n-///\n-/// The BCB allows coverage analysis to be performed on a simplified projection of the underlying\n-/// MIR CFG, without altering the original CFG. Note that running the MIR `SimplifyCfg` transform,\n-/// is not sufficient, and therefore not necessary, since the BCB-based CFG projection is a more\n-/// aggressive simplification. For example:\n-///\n-///   * The BCB CFG projection ignores (trims) branches not relevant to coverage, such as unwind-\n-///     related code that is injected by the Rust compiler but has no physical source code to\n-///     count. This also means a BasicBlock with a `Call` terminator can be merged into its\n-///     primary successor target block, in the same BCB.\n-///   * Some BasicBlock terminators support Rust-specific concerns--like borrow-checking--that are\n-///     not relevant to coverage analysis. `FalseUnwind`, for example, can be treated the same as\n-///     a `Goto`, and merged with its successor into the same BCB.\n-///\n-/// Each BCB with at least one computed `CoverageSpan` will have no more than one `Counter`.\n-/// In some cases, a BCB's execution count can be computed by `CounterExpression`. Additional\n-/// disjoint `CoverageSpan`s in a BCB can also be counted by `CounterExpression` (by adding `ZERO`\n-/// to the BCB's primary counter or expression).\n-///\n-/// Dominator/dominated relationships (which are fundamental to the coverage analysis algorithm)\n-/// between two BCBs can be computed using the `mir::Body` `dominators()` with any `BasicBlock`\n-/// member of each BCB. (For consistency, BCB's use the first `BasicBlock`, also referred to as the\n-/// `bcb_leader_bb`.)\n-///\n-/// The BCB CFG projection is critical to simplifying the coverage analysis by ensuring graph\n-/// path-based queries (`is_dominated_by()`, `predecessors`, `successors`, etc.) have branch\n-/// (control flow) significance.\n-#[derive(Debug, Clone)]\n-struct BasicCoverageBlock {\n-    pub blocks: Vec<BasicBlock>,\n-}\n-\n-impl BasicCoverageBlock {\n-    pub fn leader_bb(&self) -> BasicBlock {\n-        self.blocks[0]\n-    }\n-\n-    pub fn id(&self) -> String {\n-        format!(\n-            \"@{}\",\n-            self.blocks\n-                .iter()\n-                .map(|bb| bb.index().to_string())\n-                .collect::<Vec<_>>()\n-                .join(ID_SEPARATOR)\n-        )\n-    }\n-}\n-\n-struct BasicCoverageBlocks {\n-    vec: IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n-}\n-\n-impl BasicCoverageBlocks {\n-    pub fn from_mir(mir_body: &mir::Body<'tcx>) -> Self {\n-        let mut basic_coverage_blocks =\n-            BasicCoverageBlocks { vec: IndexVec::from_elem_n(None, mir_body.basic_blocks().len()) };\n-        basic_coverage_blocks.extract_from_mir(mir_body);\n-        basic_coverage_blocks\n-    }\n-\n-    pub fn iter(&self) -> impl Iterator<Item = &BasicCoverageBlock> {\n-        self.vec.iter().filter_map(|option| option.as_ref())\n-    }\n-\n-    fn extract_from_mir(&mut self, mir_body: &mir::Body<'tcx>) {\n-        // Traverse the CFG but ignore anything following an `unwind`\n-        let cfg_without_unwind = ShortCircuitPreorder::new(mir_body, |term_kind| {\n-            let mut successors = term_kind.successors();\n-            match &term_kind {\n-                // SwitchInt successors are never unwind, and all of them should be traversed.\n-\n-                // NOTE: TerminatorKind::FalseEdge targets from SwitchInt don't appear to be\n-                // helpful in identifying unreachable code. I did test the theory, but the following\n-                // changes were not beneficial. (I assumed that replacing some constants with\n-                // non-deterministic variables might effect which blocks were targeted by a\n-                // `FalseEdge` `imaginary_target`. It did not.)\n-                //\n-                // Also note that, if there is a way to identify BasicBlocks that are part of the\n-                // MIR CFG, but not actually reachable, here are some other things to consider:\n-                //\n-                // Injecting unreachable code regions will probably require computing the set\n-                // difference between the basic blocks found without filtering out unreachable\n-                // blocks, and the basic blocks found with the filter; then computing the\n-                // `CoverageSpans` without the filter; and then injecting `Counter`s or\n-                // `CounterExpression`s for blocks that are not unreachable, or injecting\n-                // `Unreachable` code regions otherwise. This seems straightforward, but not\n-                // trivial.\n-                //\n-                // Alternatively, we might instead want to leave the unreachable blocks in\n-                // (bypass the filter here), and inject the counters. This will result in counter\n-                // values of zero (0) for unreachable code (and, notably, the code will be displayed\n-                // with a red background by `llvm-cov show`).\n-                //\n-                // TerminatorKind::SwitchInt { .. } => {\n-                //     let some_imaginary_target = successors.clone().find_map(|&successor| {\n-                //         let term = mir_body.basic_blocks()[successor].terminator();\n-                //         if let TerminatorKind::FalseEdge { imaginary_target, .. } = term.kind {\n-                //             if mir_body.predecessors()[imaginary_target].len() == 1 {\n-                //                 return Some(imaginary_target);\n-                //             }\n-                //         }\n-                //         None\n-                //     });\n-                //     if let Some(imaginary_target) = some_imaginary_target {\n-                //         box successors.filter(move |&&successor| successor != imaginary_target)\n-                //     } else {\n-                //         box successors\n-                //     }\n-                // }\n-                //\n-                // Note this also required changing the closure signature for the\n-                // `ShortCurcuitPreorder` to:\n-                //\n-                // F: Fn(&'tcx TerminatorKind<'tcx>) -> Box<dyn Iterator<Item = &BasicBlock> + 'a>,\n-                TerminatorKind::SwitchInt { .. } => successors,\n-\n-                // For all other kinds, return only the first successor, if any, and ignore unwinds\n-                _ => successors.next().into_iter().chain(&[]),\n-            }\n-        });\n-\n-        // Walk the CFG using a Preorder traversal, which starts from `START_BLOCK` and follows\n-        // each block terminator's `successors()`. Coverage spans must map to actual source code,\n-        // so compiler generated blocks and paths can be ignored. To that end the CFG traversal\n-        // intentionally omits unwind paths.\n-        let mut blocks = Vec::new();\n-        for (bb, data) in cfg_without_unwind {\n-            if let Some(last) = blocks.last() {\n-                let predecessors = &mir_body.predecessors()[bb];\n-                if predecessors.len() > 1 || !predecessors.contains(last) {\n-                    // The `bb` has more than one _incoming_ edge, and should start its own\n-                    // `BasicCoverageBlock`. (Note, the `blocks` vector does not yet include `bb`;\n-                    // it contains a sequence of one or more sequential blocks with no intermediate\n-                    // branches in or out. Save these as a new `BasicCoverageBlock` before starting\n-                    // the new one.)\n-                    self.add_basic_coverage_block(blocks.split_off(0));\n-                    debug!(\n-                        \"  because {}\",\n-                        if predecessors.len() > 1 {\n-                            \"predecessors.len() > 1\".to_owned()\n-                        } else {\n-                            format!(\"bb {} is not in precessors: {:?}\", bb.index(), predecessors)\n-                        }\n-                    );\n-                }\n-            }\n-            blocks.push(bb);\n-\n-            let term = data.terminator();\n-\n-            match term.kind {\n-                TerminatorKind::Return { .. }\n-                | TerminatorKind::Abort\n-                | TerminatorKind::Assert { .. }\n-                | TerminatorKind::Yield { .. }\n-                | TerminatorKind::SwitchInt { .. } => {\n-                    // The `bb` has more than one _outgoing_ edge, or exits the function. Save the\n-                    // current sequence of `blocks` gathered to this point, as a new\n-                    // `BasicCoverageBlock`.\n-                    self.add_basic_coverage_block(blocks.split_off(0));\n-                    debug!(\"  because term.kind = {:?}\", term.kind);\n-                    // Note that this condition is based on `TerminatorKind`, even though it\n-                    // theoretically boils down to `successors().len() != 1`; that is, either zero\n-                    // (e.g., `Return`, `Abort`) or multiple successors (e.g., `SwitchInt`), but\n-                    // since the Coverage graph (the BCB CFG projection) ignores things like unwind\n-                    // branches (which exist in the `Terminator`s `successors()` list) checking the\n-                    // number of successors won't work.\n-                }\n-                TerminatorKind::Goto { .. }\n-                | TerminatorKind::Resume\n-                | TerminatorKind::Unreachable\n-                | TerminatorKind::Drop { .. }\n-                | TerminatorKind::DropAndReplace { .. }\n-                | TerminatorKind::Call { .. }\n-                | TerminatorKind::GeneratorDrop\n-                | TerminatorKind::FalseEdge { .. }\n-                | TerminatorKind::FalseUnwind { .. }\n-                | TerminatorKind::InlineAsm { .. } => {}\n-            }\n-        }\n-\n-        if !blocks.is_empty() {\n-            // process any remaining blocks into a final `BasicCoverageBlock`\n-            self.add_basic_coverage_block(blocks.split_off(0));\n-            debug!(\"  because the end of the CFG was reached while traversing\");\n-        }\n-    }\n-\n-    fn add_basic_coverage_block(&mut self, blocks: Vec<BasicBlock>) {\n-        let leader_bb = blocks[0];\n-        let bcb = BasicCoverageBlock { blocks };\n-        debug!(\"adding BCB: {:?}\", bcb);\n-        self.vec[leader_bb] = Some(bcb);\n-    }\n-}\n-\n-impl std::ops::Index<BasicBlock> for BasicCoverageBlocks {\n-    type Output = BasicCoverageBlock;\n-\n-    fn index(&self, index: BasicBlock) -> &Self::Output {\n-        self.vec[index].as_ref().expect(\"is_some if BasicBlock is a BasicCoverageBlock leader\")\n-    }\n-}\n-\n-#[derive(Debug, Copy, Clone)]\n-enum CoverageStatement {\n-    Statement(BasicBlock, Span, usize),\n-    Terminator(BasicBlock, Span),\n-}\n-\n-impl CoverageStatement {\n-    pub fn format(&self, tcx: TyCtxt<'tcx>, mir_body: &'a mir::Body<'tcx>) -> String {\n-        match *self {\n-            Self::Statement(bb, span, stmt_index) => {\n-                let stmt = &mir_body.basic_blocks()[bb].statements[stmt_index];\n-                format!(\n-                    \"{}: @{}[{}]: {:?}\",\n-                    spanview::source_range_no_file(tcx, &span),\n-                    bb.index(),\n-                    stmt_index,\n-                    stmt\n-                )\n-            }\n-            Self::Terminator(bb, span) => {\n-                let term = mir_body.basic_blocks()[bb].terminator();\n-                format!(\n-                    \"{}: @{}.{}: {:?}\",\n-                    spanview::source_range_no_file(tcx, &span),\n-                    bb.index(),\n-                    term_type(&term.kind),\n-                    term.kind\n-                )\n-            }\n-        }\n-    }\n-\n-    pub fn span(&self) -> &Span {\n-        match self {\n-            Self::Statement(_, span, _) | Self::Terminator(_, span) => span,\n-        }\n-    }\n-}\n-\n-fn term_type(kind: &TerminatorKind<'tcx>) -> &'static str {\n-    match kind {\n-        TerminatorKind::Goto { .. } => \"Goto\",\n-        TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n-        TerminatorKind::Resume => \"Resume\",\n-        TerminatorKind::Abort => \"Abort\",\n-        TerminatorKind::Return => \"Return\",\n-        TerminatorKind::Unreachable => \"Unreachable\",\n-        TerminatorKind::Drop { .. } => \"Drop\",\n-        TerminatorKind::DropAndReplace { .. } => \"DropAndReplace\",\n-        TerminatorKind::Call { .. } => \"Call\",\n-        TerminatorKind::Assert { .. } => \"Assert\",\n-        TerminatorKind::Yield { .. } => \"Yield\",\n-        TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n-        TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n-        TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n-        TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n-    }\n-}\n-\n-/// A BCB is deconstructed into one or more `Span`s. Each `Span` maps to a `CoverageSpan` that\n-/// references the originating BCB and one or more MIR `Statement`s and/or `Terminator`s.\n-/// Initially, the `Span`s come from the `Statement`s and `Terminator`s, but subsequent\n-/// transforms can combine adjacent `Span`s and `CoverageSpan` from the same BCB, merging the\n-/// `CoverageStatement` vectors, and the `Span`s to cover the extent of the combined `Span`s.\n-///\n-/// Note: A `CoverageStatement` merged into another CoverageSpan may come from a `BasicBlock` that\n-/// is not part of the `CoverageSpan` bcb if the statement was included because it's `Span` matches\n-/// or is subsumed by the `Span` associated with this `CoverageSpan`, and it's `BasicBlock`\n-/// `is_dominated_by()` the `BasicBlock`s in this `CoverageSpan`.\n-#[derive(Debug, Clone)]\n-struct CoverageSpan {\n-    span: Span,\n-    bcb_leader_bb: BasicBlock,\n-    coverage_statements: Vec<CoverageStatement>,\n-    is_closure: bool,\n-}\n-\n-impl CoverageSpan {\n-    pub fn for_statement(\n-        statement: &Statement<'tcx>,\n-        span: Span,\n-        bcb: &BasicCoverageBlock,\n-        bb: BasicBlock,\n-        stmt_index: usize,\n-    ) -> Self {\n-        let is_closure = match statement.kind {\n-            StatementKind::Assign(box (\n-                _,\n-                Rvalue::Aggregate(box AggregateKind::Closure(_, _), _),\n-            )) => true,\n-            _ => false,\n-        };\n-\n-        Self {\n-            span,\n-            bcb_leader_bb: bcb.leader_bb(),\n-            coverage_statements: vec![CoverageStatement::Statement(bb, span, stmt_index)],\n-            is_closure,\n-        }\n-    }\n-\n-    pub fn for_terminator(span: Span, bcb: &'a BasicCoverageBlock, bb: BasicBlock) -> Self {\n-        Self {\n-            span,\n-            bcb_leader_bb: bcb.leader_bb(),\n-            coverage_statements: vec![CoverageStatement::Terminator(bb, span)],\n-            is_closure: false,\n-        }\n-    }\n-\n-    pub fn merge_from(&mut self, mut other: CoverageSpan) {\n-        debug_assert!(self.is_mergeable(&other));\n-        self.span = self.span.to(other.span);\n-        if other.is_closure {\n-            self.is_closure = true;\n-        }\n-        self.coverage_statements.append(&mut other.coverage_statements);\n-    }\n-\n-    pub fn cutoff_statements_at(&mut self, cutoff_pos: BytePos) {\n-        self.coverage_statements.retain(|covstmt| covstmt.span().hi() <= cutoff_pos);\n-        if let Some(highest_covstmt) =\n-            self.coverage_statements.iter().max_by_key(|covstmt| covstmt.span().hi())\n-        {\n-            self.span = self.span.with_hi(highest_covstmt.span().hi());\n-        }\n-    }\n-\n-    pub fn is_dominated_by(\n-        &self,\n-        other: &CoverageSpan,\n-        dominators: &Dominators<BasicBlock>,\n-    ) -> bool {\n-        debug_assert!(!self.is_in_same_bcb(other));\n-        dominators.is_dominated_by(self.bcb_leader_bb, other.bcb_leader_bb)\n-    }\n-\n-    pub fn is_mergeable(&self, other: &Self) -> bool {\n-        self.is_in_same_bcb(other) && !(self.is_closure || other.is_closure)\n-    }\n-\n-    pub fn is_in_same_bcb(&self, other: &Self) -> bool {\n-        self.bcb_leader_bb == other.bcb_leader_bb\n-    }\n-}\n-\n-struct Instrumentor<'a, 'tcx> {\n-    pass_name: &'a str,\n-    tcx: TyCtxt<'tcx>,\n-    mir_body: &'a mut mir::Body<'tcx>,\n-    hir_body: &'tcx rustc_hir::Body<'tcx>,\n-    dominators: Option<Dominators<BasicBlock>>,\n-    basic_coverage_blocks: Option<BasicCoverageBlocks>,\n-    function_source_hash: Option<u64>,\n-    next_counter_id: u32,\n-    num_expressions: u32,\n-}\n-\n-impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n-    fn new(pass_name: &'a str, tcx: TyCtxt<'tcx>, mir_body: &'a mut mir::Body<'tcx>) -> Self {\n-        let hir_body = hir_body(tcx, mir_body.source.def_id());\n-        Self {\n-            pass_name,\n-            tcx,\n-            mir_body,\n-            hir_body,\n-            dominators: None,\n-            basic_coverage_blocks: None,\n-            function_source_hash: None,\n-            next_counter_id: CounterValueReference::START.as_u32(),\n-            num_expressions: 0,\n-        }\n-    }\n-\n-    /// Counter IDs start from one and go up.\n-    fn next_counter(&mut self) -> CounterValueReference {\n-        assert!(self.next_counter_id < u32::MAX - self.num_expressions);\n-        let next = self.next_counter_id;\n-        self.next_counter_id += 1;\n-        CounterValueReference::from(next)\n-    }\n-\n-    /// Expression IDs start from u32::MAX and go down because a CounterExpression can reference\n-    /// (add or subtract counts) of both Counter regions and CounterExpression regions. The counter\n-    /// expression operand IDs must be unique across both types.\n-    fn next_expression(&mut self) -> InjectedExpressionIndex {\n-        assert!(self.next_counter_id < u32::MAX - self.num_expressions);\n-        let next = u32::MAX - self.num_expressions;\n-        self.num_expressions += 1;\n-        InjectedExpressionIndex::from(next)\n-    }\n-\n-    fn dominators(&self) -> &Dominators<BasicBlock> {\n-        self.dominators.as_ref().expect(\"dominators must be initialized before calling\")\n-    }\n-\n-    fn basic_coverage_blocks(&self) -> &BasicCoverageBlocks {\n-        self.basic_coverage_blocks\n-            .as_ref()\n-            .expect(\"basic_coverage_blocks must be initialized before calling\")\n-    }\n-\n-    fn function_source_hash(&mut self) -> u64 {\n-        match self.function_source_hash {\n-            Some(hash) => hash,\n-            None => {\n-                let hash = hash_mir_source(self.tcx, self.hir_body);\n-                self.function_source_hash.replace(hash);\n-                hash\n-            }\n-        }\n-    }\n-\n-    fn inject_counters(&mut self) {\n-        let tcx = self.tcx;\n-        let source_map = tcx.sess.source_map();\n-        let def_id = self.mir_body.source.def_id();\n-        let mir_body = &self.mir_body;\n-        let body_span = self.body_span();\n-        let source_file = source_map.lookup_source_file(body_span.lo());\n-        let file_name = Symbol::intern(&source_file.name.to_string());\n-\n-        debug!(\"instrumenting {:?}, span: {}\", def_id, source_map.span_to_string(body_span));\n-\n-        self.dominators.replace(mir_body.dominators());\n-        self.basic_coverage_blocks.replace(BasicCoverageBlocks::from_mir(mir_body));\n-\n-        let coverage_spans = self.coverage_spans();\n-\n-        let span_viewables = if pretty::dump_enabled(tcx, self.pass_name, def_id) {\n-            Some(self.span_viewables(&coverage_spans))\n-        } else {\n-            None\n-        };\n-\n-        // Inject a counter for each `CoverageSpan`. There can be multiple `CoverageSpan`s for a\n-        // given BCB, but only one actual counter needs to be incremented per BCB. `bb_counters`\n-        // maps each `bcb_leader_bb` to its `Counter`, when injected. Subsequent `CoverageSpan`s\n-        // for a BCB that already has a `Counter` will inject a `CounterExpression` instead, and\n-        // compute its value by adding `ZERO` to the BCB `Counter` value.\n-        let mut bb_counters = IndexVec::from_elem_n(None, mir_body.basic_blocks().len());\n-        for CoverageSpan { span, bcb_leader_bb: bb, .. } in coverage_spans {\n-            if let Some(&counter_operand) = bb_counters[bb].as_ref() {\n-                let expression =\n-                    self.make_expression(counter_operand, Op::Add, ExpressionOperandId::ZERO);\n-                debug!(\n-                    \"Injecting counter expression {:?} at: {:?}:\\n{}\\n==========\",\n-                    expression,\n-                    span,\n-                    source_map.span_to_snippet(span).expect(\"Error getting source for span\"),\n-                );\n-                self.inject_statement(file_name, &source_file, expression, span, bb);\n-            } else {\n-                let counter = self.make_counter();\n-                debug!(\n-                    \"Injecting counter {:?} at: {:?}:\\n{}\\n==========\",\n-                    counter,\n-                    span,\n-                    source_map.span_to_snippet(span).expect(\"Error getting source for span\"),\n-                );\n-                let counter_operand = counter.as_operand_id();\n-                bb_counters[bb] = Some(counter_operand);\n-                self.inject_statement(file_name, &source_file, counter, span, bb);\n-            }\n-        }\n-\n-        if let Some(span_viewables) = span_viewables {\n-            let mut file = pretty::create_dump_file(\n-                tcx,\n-                \"html\",\n-                None,\n-                self.pass_name,\n-                &0,\n-                self.mir_body.source,\n-            )\n-            .expect(\"Unexpected error creating MIR spanview HTML file\");\n-            let crate_name = tcx.crate_name(def_id.krate);\n-            let item_name = tcx.def_path(def_id).to_filename_friendly_no_crate();\n-            let title = format!(\"{}.{} - Coverage Spans\", crate_name, item_name);\n-            spanview::write_document(tcx, def_id, span_viewables, &title, &mut file)\n-                .expect(\"Unexpected IO error dumping coverage spans as HTML\");\n-        }\n-    }\n-\n-    fn make_counter(&mut self) -> CoverageKind {\n-        CoverageKind::Counter {\n-            function_source_hash: self.function_source_hash(),\n-            id: self.next_counter(),\n-        }\n-    }\n-\n-    fn make_expression(\n-        &mut self,\n-        lhs: ExpressionOperandId,\n-        op: Op,\n-        rhs: ExpressionOperandId,\n-    ) -> CoverageKind {\n-        CoverageKind::Expression { id: self.next_expression(), lhs, op, rhs }\n-    }\n-\n-    fn inject_statement(\n-        &mut self,\n-        file_name: Symbol,\n-        source_file: &Lrc<SourceFile>,\n-        coverage_kind: CoverageKind,\n-        span: Span,\n-        block: BasicBlock,\n-    ) {\n-        let code_region = make_code_region(file_name, source_file, span);\n-        debug!(\"  injecting statement {:?} covering {:?}\", coverage_kind, code_region);\n-\n-        let data = &mut self.mir_body[block];\n-        let source_info = data.terminator().source_info;\n-        let statement = Statement {\n-            source_info,\n-            kind: StatementKind::Coverage(box Coverage { kind: coverage_kind, code_region }),\n-        };\n-        data.statements.push(statement);\n-    }\n-\n-    /// Converts the computed `BasicCoverageBlock`s into `SpanViewable`s.\n-    fn span_viewables(&self, coverage_spans: &Vec<CoverageSpan>) -> Vec<SpanViewable> {\n-        let tcx = self.tcx;\n-        let mir_body = &self.mir_body;\n-        let mut span_viewables = Vec::new();\n-        for coverage_span in coverage_spans {\n-            let bcb = self.bcb_from_coverage_span(coverage_span);\n-            let CoverageSpan { span, bcb_leader_bb: bb, coverage_statements, .. } = coverage_span;\n-            let id = bcb.id();\n-            let mut sorted_coverage_statements = coverage_statements.clone();\n-            sorted_coverage_statements.sort_unstable_by_key(|covstmt| match *covstmt {\n-                CoverageStatement::Statement(bb, _, index) => (bb, index),\n-                CoverageStatement::Terminator(bb, _) => (bb, usize::MAX),\n-            });\n-            let tooltip = sorted_coverage_statements\n-                .iter()\n-                .map(|covstmt| covstmt.format(tcx, mir_body))\n-                .collect::<Vec<_>>()\n-                .join(\"\\n\");\n-            span_viewables.push(SpanViewable { bb: *bb, span: *span, id, tooltip });\n-        }\n-        span_viewables\n-    }\n-\n-    #[inline(always)]\n-    fn bcb_from_coverage_span(&self, coverage_span: &CoverageSpan) -> &BasicCoverageBlock {\n-        &self.basic_coverage_blocks()[coverage_span.bcb_leader_bb]\n-    }\n-\n-    #[inline(always)]\n-    fn body_span(&self) -> Span {\n-        self.hir_body.value.span\n-    }\n-\n-    // Generate a set of `CoverageSpan`s from the filtered set of `Statement`s and `Terminator`s of\n-    // the `BasicBlock`(s) in the given `BasicCoverageBlock`. One `CoverageSpan` is generated for\n-    // each `Statement` and `Terminator`. (Note that subsequent stages of coverage analysis will\n-    // merge some `CoverageSpan`s, at which point a `CoverageSpan` may represent multiple\n-    // `Statement`s and/or `Terminator`s.)\n-    fn extract_spans(&self, bcb: &'a BasicCoverageBlock) -> Vec<CoverageSpan> {\n-        let body_span = self.body_span();\n-        let mir_basic_blocks = self.mir_body.basic_blocks();\n-        bcb.blocks\n-            .iter()\n-            .map(|bbref| {\n-                let bb = *bbref;\n-                let data = &mir_basic_blocks[bb];\n-                data.statements\n-                    .iter()\n-                    .enumerate()\n-                    .filter_map(move |(index, statement)| {\n-                        filtered_statement_span(statement, body_span).map(|span| {\n-                            CoverageSpan::for_statement(statement, span, bcb, bb, index)\n-                        })\n-                    })\n-                    .chain(\n-                        filtered_terminator_span(data.terminator(), body_span)\n-                            .map(|span| CoverageSpan::for_terminator(span, bcb, bb)),\n-                    )\n-            })\n-            .flatten()\n-            .collect()\n-    }\n-\n-    /// Generate a minimal set of `CoverageSpan`s, each representing a contiguous code region to be\n-    /// counted.\n-    ///\n-    /// The basic steps are:\n-    ///\n-    /// 1. Extract an initial set of spans from the `Statement`s and `Terminator`s of each\n-    ///    `BasicCoverageBlock`.\n-    /// 2. Sort the spans by span.lo() (starting position). Spans that start at the same position\n-    ///    are sorted with longer spans before shorter spans; and equal spans are sorted\n-    ///    (deterministically) based on \"dominator\" relationship (if any).\n-    /// 3. Traverse the spans in sorted order to identify spans that can be dropped (for instance,\n-    ///    if another span or spans are already counting the same code region), or should be merged\n-    ///    into a broader combined span (because it represents a contiguous, non-branching, and\n-    ///    uninterrupted region of source code).\n-    ///\n-    ///    Closures are exposed in their enclosing functions as `Assign` `Rvalue`s, and since\n-    ///    closures have their own MIR, their `Span` in their enclosing function should be left\n-    ///    \"uncovered\".\n-    ///\n-    /// Note the resulting vector of `CoverageSpan`s does may not be fully sorted (and does not need\n-    /// to be).\n-    fn coverage_spans(&self) -> Vec<CoverageSpan> {\n-        let mut initial_spans =\n-            Vec::<CoverageSpan>::with_capacity(self.mir_body.basic_blocks().len() * 2);\n-        for bcb in self.basic_coverage_blocks().iter() {\n-            for coverage_span in self.extract_spans(bcb) {\n-                initial_spans.push(coverage_span);\n-            }\n-        }\n-\n-        if initial_spans.is_empty() {\n-            // This can happen if, for example, the function is unreachable (contains only a\n-            // `BasicBlock`(s) with an `Unreachable` terminator).\n-            return initial_spans;\n-        }\n-\n-        initial_spans.sort_unstable_by(|a, b| {\n-            if a.span.lo() == b.span.lo() {\n-                if a.span.hi() == b.span.hi() {\n-                    if a.is_in_same_bcb(b) {\n-                        Some(Ordering::Equal)\n-                    } else {\n-                        // Sort equal spans by dominator relationship, in reverse order (so\n-                        // dominators always come after the dominated equal spans). When later\n-                        // comparing two spans in order, the first will either dominate the second,\n-                        // or they will have no dominator relationship.\n-                        self.dominators().rank_partial_cmp(b.bcb_leader_bb, a.bcb_leader_bb)\n-                    }\n-                } else {\n-                    // Sort hi() in reverse order so shorter spans are attempted after longer spans.\n-                    // This guarantees that, if a `prev` span overlaps, and is not equal to, a `curr`\n-                    // span, the prev span either extends further left of the curr span, or they\n-                    // start at the same position and the prev span extends further right of the end\n-                    // of the curr span.\n-                    b.span.hi().partial_cmp(&a.span.hi())\n-                }\n-            } else {\n-                a.span.lo().partial_cmp(&b.span.lo())\n-            }\n-            .unwrap()\n-        });\n-\n-        let refinery = CoverageSpanRefinery::from_sorted_spans(initial_spans, self.dominators());\n-        refinery.to_refined_spans()\n-    }\n-}\n-\n-struct CoverageSpanRefinery<'a> {\n-    sorted_spans_iter: std::vec::IntoIter<CoverageSpan>,\n-    dominators: &'a Dominators<BasicBlock>,\n-    some_curr: Option<CoverageSpan>,\n-    curr_original_span: Span,\n-    some_prev: Option<CoverageSpan>,\n-    prev_original_span: Span,\n-    pending_dups: Vec<CoverageSpan>,\n-    refined_spans: Vec<CoverageSpan>,\n-}\n-\n-impl<'a> CoverageSpanRefinery<'a> {\n-    fn from_sorted_spans(\n-        sorted_spans: Vec<CoverageSpan>,\n-        dominators: &'a Dominators<BasicBlock>,\n-    ) -> Self {\n-        let refined_spans = Vec::with_capacity(sorted_spans.len());\n-        let mut sorted_spans_iter = sorted_spans.into_iter();\n-        let prev = sorted_spans_iter.next().expect(\"at least one span\");\n-        let prev_original_span = prev.span;\n-        Self {\n-            sorted_spans_iter,\n-            dominators,\n-            refined_spans,\n-            some_curr: None,\n-            curr_original_span: Span::with_root_ctxt(BytePos(0), BytePos(0)),\n-            some_prev: Some(prev),\n-            prev_original_span,\n-            pending_dups: Vec::new(),\n-        }\n-    }\n-\n-    /// Iterate through the sorted `CoverageSpan`s, and return the refined list of merged and\n-    /// de-duplicated `CoverageSpan`s.\n-    fn to_refined_spans(mut self) -> Vec<CoverageSpan> {\n-        while self.next_coverage_span() {\n-            if self.curr().is_mergeable(self.prev()) {\n-                debug!(\"  same bcb (and neither is a closure), merge with prev={:?}\", self.prev());\n-                let prev = self.take_prev();\n-                self.curr_mut().merge_from(prev);\n-            // Note that curr.span may now differ from curr_original_span\n-            } else if self.prev_ends_before_curr() {\n-                debug!(\n-                    \"  different bcbs and disjoint spans, so keep curr for next iter, and add \\\n-                    prev={:?}\",\n-                    self.prev()\n-                );\n-                let prev = self.take_prev();\n-                self.add_refined_span(prev);\n-            } else if self.prev().is_closure {\n-                // drop any equal or overlapping span (`curr`) and keep `prev` to test again in the\n-                // next iter\n-                debug!(\n-                    \"  curr overlaps a closure (prev). Drop curr and keep prev for next iter. \\\n-                    prev={:?}\",\n-                    self.prev()\n-                );\n-                self.discard_curr();\n-            } else if self.curr().is_closure {\n-                self.carve_out_span_for_closure();\n-            } else if self.prev_original_span == self.curr().span {\n-                self.hold_pending_dups_unless_dominated();\n-            } else {\n-                self.cutoff_prev_at_overlapping_curr();\n-            }\n-        }\n-        debug!(\"    AT END, adding last prev={:?}\", self.prev());\n-        let pending_dups = self.pending_dups.split_off(0);\n-        for dup in pending_dups.into_iter() {\n-            debug!(\"    ...adding at least one pending dup={:?}\", dup);\n-            self.add_refined_span(dup);\n-        }\n-        let prev = self.take_prev();\n-        self.add_refined_span(prev);\n-\n-        // FIXME(richkadel): Replace some counters with expressions if they can be calculated based\n-        // on branching. (For example, one branch of a SwitchInt can be computed from the counter\n-        // for the CoverageSpan just prior to the SwitchInt minus the sum of the counters of all\n-        // other branches).\n-\n-        self.to_refined_spans_without_closures()\n-    }\n-\n-    fn add_refined_span(&mut self, coverage_span: CoverageSpan) {\n-        self.refined_spans.push(coverage_span);\n-    }\n-\n-    /// Remove `CoverageSpan`s derived from closures, originally added to ensure the coverage\n-    /// regions for the current function leave room for the closure's own coverage regions\n-    /// (injected separately, from the closure's own MIR).\n-    fn to_refined_spans_without_closures(mut self) -> Vec<CoverageSpan> {\n-        self.refined_spans.retain(|covspan| !covspan.is_closure);\n-        self.refined_spans\n-    }\n-\n-    fn curr(&self) -> &CoverageSpan {\n-        self.some_curr\n-            .as_ref()\n-            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_curr\"))\n-    }\n-\n-    fn curr_mut(&mut self) -> &mut CoverageSpan {\n-        self.some_curr\n-            .as_mut()\n-            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_curr\"))\n-    }\n-\n-    fn prev(&self) -> &CoverageSpan {\n-        self.some_prev\n-            .as_ref()\n-            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_prev\"))\n-    }\n-\n-    fn prev_mut(&mut self) -> &mut CoverageSpan {\n-        self.some_prev\n-            .as_mut()\n-            .unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_prev\"))\n-    }\n-\n-    fn take_prev(&mut self) -> CoverageSpan {\n-        self.some_prev.take().unwrap_or_else(|| bug!(\"invalid attempt to unwrap a None some_prev\"))\n-    }\n-\n-    /// If there are `pending_dups` but `prev` is not a matching dup (`prev.span` doesn't match the\n-    /// `pending_dups` spans), then one of the following two things happened during the previous\n-    /// iteration:\n-    ///   * the `span` of prev was modified (by `curr_mut().merge_from(prev)`); or\n-    ///   * the `span` of prev advanced past the end of the span of pending_dups\n-    ///     (`prev().span.hi() <= curr().span.lo()`)\n-    /// In either case, no more spans will match the span of `pending_dups`, so\n-    /// add the `pending_dups` if they don't overlap `curr`, and clear the list.\n-    fn check_pending_dups(&mut self) {\n-        if let Some(dup) = self.pending_dups.last() {\n-            if dup.span != self.prev().span {\n-                debug!(\n-                    \"    SAME spans, but pending_dups are NOT THE SAME, so BCBs matched on \\\n-                    previous iteration, or prev started a new disjoint span\"\n-                );\n-                if dup.span.hi() <= self.curr().span.lo() {\n-                    let pending_dups = self.pending_dups.split_off(0);\n-                    for dup in pending_dups.into_iter() {\n-                        debug!(\"    ...adding at least one pending={:?}\", dup);\n-                        self.add_refined_span(dup);\n-                    }\n-                } else {\n-                    self.pending_dups.clear();\n-                }\n-            }\n-        }\n-    }\n-\n-    /// Advance `prev` to `curr` (if any), and `curr` to the next `CoverageSpan` in sorted order.\n-    fn next_coverage_span(&mut self) -> bool {\n-        if let Some(curr) = self.some_curr.take() {\n-            self.some_prev = Some(curr);\n-            self.prev_original_span = self.curr_original_span;\n-        }\n-        while let Some(curr) = self.sorted_spans_iter.next() {\n-            debug!(\"FOR curr={:?}\", curr);\n-            if self.prev_starts_after_next(&curr) {\n-                debug!(\n-                    \"  prev.span starts after curr.span, so curr will be dropped (skipping past \\\n-                    closure?); prev={:?}\",\n-                    self.prev()\n-                );\n-            } else {\n-                // Save a copy of the original span for `curr` in case the `CoverageSpan` is changed\n-                // by `self.curr_mut().merge_from(prev)`.\n-                self.curr_original_span = curr.span;\n-                self.some_curr.replace(curr);\n-                self.check_pending_dups();\n-                return true;\n-            }\n-        }\n-        false\n-    }\n-\n-    /// If called, then the next call to `next_coverage_span()` will *not* update `prev` with the\n-    /// `curr` coverage span.\n-    fn discard_curr(&mut self) {\n-        self.some_curr = None;\n-    }\n-\n-    /// Returns true if the curr span should be skipped because prev has already advanced beyond the\n-    /// end of curr. This can only happen if a prior iteration updated `prev` to skip past a region\n-    /// of code, such as skipping past a closure.\n-    fn prev_starts_after_next(&self, next_curr: &CoverageSpan) -> bool {\n-        self.prev().span.lo() > next_curr.span.lo()\n-    }\n-\n-    /// Returns true if the curr span starts past the end of the prev span, which means they don't\n-    /// overlap, so we now know the prev can be added to the refined coverage spans.\n-    fn prev_ends_before_curr(&self) -> bool {\n-        self.prev().span.hi() <= self.curr().span.lo()\n-    }\n-\n-    /// If `prev`s span extends left of the closure (`curr`), carve out the closure's\n-    /// span from `prev`'s span. (The closure's coverage counters will be injected when\n-    /// processing the closure's own MIR.) Add the portion of the span to the left of the\n-    /// closure; and if the span extends to the right of the closure, update `prev` to\n-    /// that portion of the span. For any `pending_dups`, repeat the same process.\n-    fn carve_out_span_for_closure(&mut self) {\n-        let curr_span = self.curr().span;\n-        let left_cutoff = curr_span.lo();\n-        let right_cutoff = curr_span.hi();\n-        let has_pre_closure_span = self.prev().span.lo() < right_cutoff;\n-        let has_post_closure_span = self.prev().span.hi() > right_cutoff;\n-        let mut pending_dups = self.pending_dups.split_off(0);\n-        if has_pre_closure_span {\n-            let mut pre_closure = self.prev().clone();\n-            pre_closure.span = pre_closure.span.with_hi(left_cutoff);\n-            debug!(\"  prev overlaps a closure. Adding span for pre_closure={:?}\", pre_closure);\n-            if !pending_dups.is_empty() {\n-                for mut dup in pending_dups.iter().cloned() {\n-                    dup.span = dup.span.with_hi(left_cutoff);\n-                    debug!(\"    ...and at least one pre_closure dup={:?}\", dup);\n-                    self.add_refined_span(dup);\n-                }\n-            }\n-            self.add_refined_span(pre_closure);\n-        }\n-        if has_post_closure_span {\n-            // Update prev.span to start after the closure (and discard curr)\n-            self.prev_mut().span = self.prev().span.with_lo(right_cutoff);\n-            self.prev_original_span = self.prev().span;\n-            for dup in pending_dups.iter_mut() {\n-                dup.span = dup.span.with_lo(right_cutoff);\n-            }\n-            self.pending_dups.append(&mut pending_dups);\n-            self.discard_curr(); // since self.prev() was already updated\n-        } else {\n-            pending_dups.clear();\n-        }\n-    }\n-\n-    /// When two `CoverageSpan`s have the same `Span`, dominated spans can be discarded; but if\n-    /// neither `CoverageSpan` dominates the other, both (or possibly more than two) are held,\n-    /// until their disposition is determined. In this latter case, the `prev` dup is moved into\n-    /// `pending_dups` so the new `curr` dup can be moved to `prev` for the next iteration.\n-    fn hold_pending_dups_unless_dominated(&mut self) {\n-        // equal coverage spans are ordered by dominators before dominated (if any)\n-        debug_assert!(!self.prev().is_dominated_by(self.curr(), self.dominators));\n-\n-        if self.curr().is_dominated_by(&self.prev(), self.dominators) {\n-            // If one span dominates the other, assocate the span with the dominator only.\n-            //\n-            // For example:\n-            //     match somenum {\n-            //         x if x < 1 => { ... }\n-            //     }...\n-            // The span for the first `x` is referenced by both the pattern block (every\n-            // time it is evaluated) and the arm code (only when matched). The counter\n-            // will be applied only to the dominator block.\n-            //\n-            // The dominator's (`prev`) execution count may be higher than the dominated\n-            // block's execution count, so drop `curr`.\n-            debug!(\n-                \"  different bcbs but SAME spans, and prev dominates curr. Drop curr and \\\n-                keep prev for next iter. prev={:?}\",\n-                self.prev()\n-            );\n-            self.discard_curr();\n-        } else {\n-            // Save `prev` in `pending_dups`. (`curr` will become `prev` in the next iteration.)\n-            // If the `curr` CoverageSpan is later discarded, `pending_dups` can be discarded as\n-            // well; but if `curr` is added to refined_spans, the `pending_dups` will also be added.\n-            debug!(\n-                \"  different bcbs but SAME spans, and neither dominates, so keep curr for \\\n-                next iter, and, pending upcoming spans (unless overlapping) add prev={:?}\",\n-                self.prev()\n-            );\n-            let prev = self.take_prev();\n-            self.pending_dups.push(prev);\n-        }\n-    }\n-\n-    /// `curr` overlaps `prev`. If `prev`s span extends left of `curr`s span, keep _only_\n-    /// statements that end before `curr.lo()` (if any), and add the portion of the\n-    /// combined span for those statements. Any other statements have overlapping spans\n-    /// that can be ignored because `curr` and/or other upcoming statements/spans inside\n-    /// the overlap area will produce their own counters. This disambiguation process\n-    /// avoids injecting multiple counters for overlapping spans, and the potential for\n-    /// double-counting.\n-    fn cutoff_prev_at_overlapping_curr(&mut self) {\n-        debug!(\n-            \"  different bcbs, overlapping spans, so ignore/drop pending and only add prev \\\n-            if it has statements that end before curr={:?}\",\n-            self.prev()\n-        );\n-        if self.pending_dups.is_empty() {\n-            let curr_span = self.curr().span;\n-            self.prev_mut().cutoff_statements_at(curr_span.lo());\n-            if self.prev().coverage_statements.is_empty() {\n-                debug!(\"  ... no non-overlapping statements to add\");\n-            } else {\n-                debug!(\"  ... adding modified prev={:?}\", self.prev());\n-                let prev = self.take_prev();\n-                self.add_refined_span(prev);\n-            }\n-        } else {\n-            // with `pending_dups`, `prev` cannot have any statements that don't overlap\n-            self.pending_dups.clear();\n-        }\n-    }\n-}\n-\n-fn filtered_statement_span(statement: &'a Statement<'tcx>, body_span: Span) -> Option<Span> {\n-    match statement.kind {\n-        // These statements have spans that are often outside the scope of the executed source code\n-        // for their parent `BasicBlock`.\n-        StatementKind::StorageLive(_)\n-        | StatementKind::StorageDead(_)\n-        // Coverage should not be encountered, but don't inject coverage coverage\n-        | StatementKind::Coverage(_)\n-        // Ignore `Nop`s\n-        | StatementKind::Nop => None,\n-\n-        // FIXME(richkadel): Look into a possible issue assigning the span to a\n-        // FakeReadCause::ForGuardBinding, in this example:\n-        //     match somenum {\n-        //         x if x < 1 => { ... }\n-        //     }...\n-        // The BasicBlock within the match arm code included one of these statements, but the span\n-        // for it covered the `1` in this source. The actual statements have nothing to do with that\n-        // source span:\n-        //     FakeRead(ForGuardBinding, _4);\n-        // where `_4` is:\n-        //     _4 = &_1; (at the span for the first `x`)\n-        // and `_1` is the `Place` for `somenum`.\n-        //\n-        // The arm code BasicBlock already has its own assignment for `x` itself, `_3 = 1`, and I've\n-        // decided it's reasonable for that span (even though outside the arm code) to be part of\n-        // the counted coverage of the arm code execution, but I can't justify including the literal\n-        // `1` in the arm code. I'm pretty sure that, if the `FakeRead(ForGuardBinding)` has a\n-        // purpose in codegen, it's probably in the right BasicBlock, but if so, the `Statement`s\n-        // `source_info.span` can't be right.\n-        //\n-        // Consider correcting the span assignment, assuming there is a better solution, and see if\n-        // the following pattern can be removed here:\n-        StatementKind::FakeRead(cause, _) if cause == FakeReadCause::ForGuardBinding => None,\n-\n-        // Retain spans from all other statements\n-        StatementKind::FakeRead(_, _) // Not including `ForGuardBinding`\n-        | StatementKind::Assign(_)\n-        | StatementKind::SetDiscriminant { .. }\n-        | StatementKind::LlvmInlineAsm(_)\n-        | StatementKind::Retag(_, _)\n-        | StatementKind::AscribeUserType(_, _) => {\n-            Some(source_info_span(&statement.source_info, body_span))\n-        }\n-    }\n-}\n-\n-fn filtered_terminator_span(terminator: &'a Terminator<'tcx>, body_span: Span) -> Option<Span> {\n-    match terminator.kind {\n-        // These terminators have spans that don't positively contribute to computing a reasonable\n-        // span of actually executed source code. (For example, SwitchInt terminators extracted from\n-        // an `if condition { block }` has a span that includes the executed block, if true,\n-        // but for coverage, the code region executed, up to *and* through the SwitchInt,\n-        // actually stops before the if's block.)\n-        TerminatorKind::Unreachable // Unreachable blocks are not connected to the CFG\n-        | TerminatorKind::Assert { .. }\n-        | TerminatorKind::Drop { .. }\n-        | TerminatorKind::DropAndReplace { .. }\n-        | TerminatorKind::SwitchInt { .. }\n-        | TerminatorKind::Goto { .. }\n-        // For `FalseEdge`, only the `real` branch is taken, so it is similar to a `Goto`.\n-        | TerminatorKind::FalseEdge { .. } => None,\n-\n-        // Retain spans from all other terminators\n-        TerminatorKind::Resume\n-        | TerminatorKind::Abort\n-        | TerminatorKind::Return\n-        | TerminatorKind::Call { .. }\n-        | TerminatorKind::Yield { .. }\n-        | TerminatorKind::GeneratorDrop\n-        | TerminatorKind::FalseUnwind { .. }\n-        | TerminatorKind::InlineAsm { .. } => {\n-            Some(source_info_span(&terminator.source_info, body_span))\n-        }\n-    }\n-}\n-\n-#[inline(always)]\n-fn source_info_span(source_info: &SourceInfo, body_span: Span) -> Span {\n-    let span = original_sp(source_info.span, body_span).with_ctxt(SyntaxContext::root());\n-    if body_span.contains(span) { span } else { body_span }\n-}\n-\n-/// Convert the Span into its file name, start line and column, and end line and column\n-fn make_code_region(file_name: Symbol, source_file: &Lrc<SourceFile>, span: Span) -> CodeRegion {\n-    let (start_line, mut start_col) = source_file.lookup_file_pos(span.lo());\n-    let (end_line, end_col) = if span.hi() == span.lo() {\n-        let (end_line, mut end_col) = (start_line, start_col);\n-        // Extend an empty span by one character so the region will be counted.\n-        let CharPos(char_pos) = start_col;\n-        if char_pos > 0 {\n-            start_col = CharPos(char_pos - 1);\n-        } else {\n-            end_col = CharPos(char_pos + 1);\n-        }\n-        (end_line, end_col)\n-    } else {\n-        source_file.lookup_file_pos(span.hi())\n-    };\n-    CodeRegion {\n-        file_name,\n-        start_line: start_line as u32,\n-        start_col: start_col.to_u32() + 1,\n-        end_line: end_line as u32,\n-        end_col: end_col.to_u32() + 1,\n-    }\n-}\n-\n-fn hir_body<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx rustc_hir::Body<'tcx> {\n-    let hir_node = tcx.hir().get_if_local(def_id).expect(\"expected DefId is local\");\n-    let fn_body_id = hir::map::associated_body(hir_node).expect(\"HIR node is a function with body\");\n-    tcx.hir().body(fn_body_id)\n-}\n-\n-fn hash_mir_source<'tcx>(tcx: TyCtxt<'tcx>, hir_body: &'tcx rustc_hir::Body<'tcx>) -> u64 {\n-    let mut hcx = tcx.create_no_span_stable_hashing_context();\n-    hash(&mut hcx, &hir_body.value).to_smaller_hash()\n-}\n-\n-fn hash(\n-    hcx: &mut StableHashingContext<'tcx>,\n-    node: &impl HashStable<StableHashingContext<'tcx>>,\n-) -> Fingerprint {\n-    let mut stable_hasher = StableHasher::new();\n-    node.hash_stable(hcx, &mut stable_hasher);\n-    stable_hasher.finish()\n-}\n-\n-pub struct ShortCircuitPreorder<\n-    'a,\n-    'tcx,\n-    F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>,\n-> {\n-    body: &'a mir::Body<'tcx>,\n-    visited: BitSet<BasicBlock>,\n-    worklist: Vec<BasicBlock>,\n-    filtered_successors: F,\n-}\n-\n-impl<'a, 'tcx, F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>>\n-    ShortCircuitPreorder<'a, 'tcx, F>\n-{\n-    pub fn new(\n-        body: &'a mir::Body<'tcx>,\n-        filtered_successors: F,\n-    ) -> ShortCircuitPreorder<'a, 'tcx, F> {\n-        let worklist = vec![mir::START_BLOCK];\n-\n-        ShortCircuitPreorder {\n-            body,\n-            visited: BitSet::new_empty(body.basic_blocks().len()),\n-            worklist,\n-            filtered_successors,\n-        }\n-    }\n-}\n-\n-impl<'a: 'tcx, 'tcx, F: Fn(&'tcx TerminatorKind<'tcx>) -> mir::Successors<'tcx>> Iterator\n-    for ShortCircuitPreorder<'a, 'tcx, F>\n-{\n-    type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n-\n-    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {\n-        while let Some(idx) = self.worklist.pop() {\n-            if !self.visited.insert(idx) {\n-                continue;\n-            }\n-\n-            let data = &self.body[idx];\n-\n-            if let Some(ref term) = data.terminator {\n-                self.worklist.extend((self.filtered_successors)(&term.kind));\n-            }\n-\n-            return Some((idx, data));\n-        }\n-\n-        None\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        let size = self.body.basic_blocks().len() - self.visited.count();\n-        (size, Some(size))\n-    }\n-}"}, {"sha": "e3fea2d2701e5a461c8b7b9548e21ea778552ec4", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -22,6 +22,7 @@ pub mod check_packed_ref;\n pub mod check_unsafety;\n pub mod cleanup_post_borrowck;\n pub mod const_prop;\n+pub mod coverage;\n pub mod deaggregator;\n pub mod dest_prop;\n pub mod dump_mir;\n@@ -31,7 +32,6 @@ pub mod function_item_references;\n pub mod generator;\n pub mod inline;\n pub mod instcombine;\n-pub mod instrument_coverage;\n pub mod match_branches;\n pub mod multiple_return_terminators;\n pub mod no_landing_pads;\n@@ -85,7 +85,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n         },\n         ..*providers\n     };\n-    instrument_coverage::provide(providers);\n+    coverage::query::provide(providers);\n }\n \n fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n@@ -306,7 +306,7 @@ fn mir_promoted(\n     ];\n \n     let opt_coverage: &[&dyn MirPass<'tcx>] = if tcx.sess.opts.debugging_opts.instrument_coverage {\n-        &[&instrument_coverage::InstrumentCoverage]\n+        &[&coverage::InstrumentCoverage]\n     } else {\n         &[]\n     };"}, {"sha": "91499bb61c287c81b512bd8c73e906aac89cabf7", "filename": "compiler/rustc_mir/src/util/generic_graphviz.rs", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgeneric_graphviz.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,185 @@\n+use rustc_data_structures::graph::{self, iterate};\n+use rustc_graphviz as dot;\n+use rustc_middle::ty::TyCtxt;\n+use std::io::{self, Write};\n+\n+pub struct GraphvizWriter<\n+    'a,\n+    G: graph::DirectedGraph + graph::WithSuccessors + graph::WithStartNode + graph::WithNumNodes,\n+    NodeContentFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n+    EdgeLabelsFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n+> {\n+    graph: &'a G,\n+    is_subgraph: bool,\n+    graphviz_name: String,\n+    graph_label: Option<String>,\n+    node_content_fn: NodeContentFn,\n+    edge_labels_fn: EdgeLabelsFn,\n+}\n+\n+impl<\n+    'a,\n+    G: graph::DirectedGraph + graph::WithSuccessors + graph::WithStartNode + graph::WithNumNodes,\n+    NodeContentFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n+    EdgeLabelsFn: Fn(<G as rustc_data_structures::graph::DirectedGraph>::Node) -> Vec<String>,\n+> GraphvizWriter<'a, G, NodeContentFn, EdgeLabelsFn>\n+{\n+    pub fn new(\n+        graph: &'a G,\n+        graphviz_name: &str,\n+        node_content_fn: NodeContentFn,\n+        edge_labels_fn: EdgeLabelsFn,\n+    ) -> Self {\n+        Self {\n+            graph,\n+            is_subgraph: false,\n+            graphviz_name: graphviz_name.to_owned(),\n+            graph_label: None,\n+            node_content_fn,\n+            edge_labels_fn,\n+        }\n+    }\n+\n+    pub fn new_subgraph(\n+        graph: &'a G,\n+        graphviz_name: &str,\n+        node_content_fn: NodeContentFn,\n+        edge_labels_fn: EdgeLabelsFn,\n+    ) -> Self {\n+        Self {\n+            graph,\n+            is_subgraph: true,\n+            graphviz_name: graphviz_name.to_owned(),\n+            graph_label: None,\n+            node_content_fn,\n+            edge_labels_fn,\n+        }\n+    }\n+\n+    pub fn set_graph_label(&mut self, graph_label: &str) {\n+        self.graph_label = Some(graph_label.to_owned());\n+    }\n+\n+    /// Write a graphviz DOT of the graph\n+    pub fn write_graphviz<'tcx, W>(&self, tcx: TyCtxt<'tcx>, w: &mut W) -> io::Result<()>\n+    where\n+        W: Write,\n+    {\n+        let kind = if self.is_subgraph { \"subgraph\" } else { \"digraph\" };\n+        let cluster = if self.is_subgraph { \"cluster_\" } else { \"\" }; // Print border around graph\n+        // FIXME(richkadel): If/when migrating the MIR graphviz to this generic implementation,\n+        // prepend \"Mir_\" to the graphviz_safe_def_name(def_id)\n+        writeln!(w, \"{} {}{} {{\", kind, cluster, self.graphviz_name)?;\n+\n+        // Global graph properties\n+        let font = format!(r#\"fontname=\"{}\"\"#, tcx.sess.opts.debugging_opts.graphviz_font);\n+        let mut graph_attrs = vec![&font[..]];\n+        let mut content_attrs = vec![&font[..]];\n+\n+        let dark_mode = tcx.sess.opts.debugging_opts.graphviz_dark_mode;\n+        if dark_mode {\n+            graph_attrs.push(r#\"bgcolor=\"black\"\"#);\n+            graph_attrs.push(r#\"fontcolor=\"white\"\"#);\n+            content_attrs.push(r#\"color=\"white\"\"#);\n+            content_attrs.push(r#\"fontcolor=\"white\"\"#);\n+        }\n+\n+        writeln!(w, r#\"    graph [{}];\"#, graph_attrs.join(\" \"))?;\n+        let content_attrs_str = content_attrs.join(\" \");\n+        writeln!(w, r#\"    node [{}];\"#, content_attrs_str)?;\n+        writeln!(w, r#\"    edge [{}];\"#, content_attrs_str)?;\n+\n+        // Graph label\n+        if let Some(graph_label) = &self.graph_label {\n+            self.write_graph_label(graph_label, w)?;\n+        }\n+\n+        // Nodes\n+        for node in iterate::post_order_from(self.graph, self.graph.start_node()) {\n+            self.write_node(node, dark_mode, w)?;\n+        }\n+\n+        // Edges\n+        for source in iterate::post_order_from(self.graph, self.graph.start_node()) {\n+            self.write_edges(source, w)?;\n+        }\n+        writeln!(w, \"}}\")\n+    }\n+\n+    /// Write a graphviz DOT node for the given node.\n+    pub fn write_node<W>(&self, node: G::Node, dark_mode: bool, w: &mut W) -> io::Result<()>\n+    where\n+        W: Write,\n+    {\n+        // Start a new node with the label to follow, in one of DOT's pseudo-HTML tables.\n+        write!(w, r#\"    {} [shape=\"none\", label=<\"#, self.node(node))?;\n+\n+        write!(w, r#\"<table border=\"0\" cellborder=\"1\" cellspacing=\"0\">\"#)?;\n+\n+        // FIXME(richkadel): Need generic way to know if node header should have a different color\n+        // let (blk, bgcolor) = if data.is_cleanup {\n+        //    (format!(\"{:?} (cleanup)\", node), \"lightblue\")\n+        // } else {\n+        //     let color = if dark_mode { \"dimgray\" } else { \"gray\" };\n+        //     (format!(\"{:?}\", node), color)\n+        // };\n+        let color = if dark_mode { \"dimgray\" } else { \"gray\" };\n+        let (blk, bgcolor) = (format!(\"{:?}\", node), color);\n+        write!(\n+            w,\n+            r#\"<tr><td bgcolor=\"{bgcolor}\" {attrs} colspan=\"{colspan}\">{blk}</td></tr>\"#,\n+            attrs = r#\"align=\"center\"\"#,\n+            colspan = 1,\n+            blk = blk,\n+            bgcolor = bgcolor\n+        )?;\n+\n+        for section in (self.node_content_fn)(node) {\n+            write!(\n+                w,\n+                r#\"<tr><td align=\"left\" balign=\"left\">{}</td></tr>\"#,\n+                dot::escape_html(&section).replace(\"\\n\", \"<br/>\")\n+            )?;\n+        }\n+\n+        // Close the table\n+        write!(w, \"</table>\")?;\n+\n+        // Close the node label and the node itself.\n+        writeln!(w, \">];\")\n+    }\n+\n+    /// Write graphviz DOT edges with labels between the given node and all of its successors.\n+    fn write_edges<W>(&self, source: G::Node, w: &mut W) -> io::Result<()>\n+    where\n+        W: Write,\n+    {\n+        let edge_labels = (self.edge_labels_fn)(source);\n+        for (index, target) in self.graph.successors(source).enumerate() {\n+            let src = self.node(source);\n+            let trg = self.node(target);\n+            let escaped_edge_label = if let Some(edge_label) = edge_labels.get(index) {\n+                dot::escape_html(edge_label).replace(\"\\n\", r#\"<br align=\"left\"/>\"#)\n+            } else {\n+                \"\".to_owned()\n+            };\n+            writeln!(w, r#\"    {} -> {} [label=<{}>];\"#, src, trg, escaped_edge_label)?;\n+        }\n+        Ok(())\n+    }\n+\n+    /// Write the graphviz DOT label for the overall graph. This is essentially a block of text that\n+    /// will appear below the graph.\n+    fn write_graph_label<W>(&self, label: &str, w: &mut W) -> io::Result<()>\n+    where\n+        W: Write,\n+    {\n+        let lines = label.split(\"\\n\").map(|s| dot::escape_html(s)).collect::<Vec<_>>();\n+        let escaped_label = lines.join(r#\"<br align=\"left\"/>\"#);\n+        writeln!(w, r#\"    label=<<br/><br/>{}<br align=\"left\"/><br/><br/><br/>>;\"#, escaped_label)\n+    }\n+\n+    fn node(&self, node: G::Node) -> String {\n+        format!(\"{:?}__{}\", node, self.graphviz_name)\n+    }\n+}"}, {"sha": "625f1a3e6844e1354bea9fb94d729fae65f6ec84", "filename": "compiler/rustc_mir/src/util/graphviz.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -62,6 +62,7 @@ where\n     let dark_mode = tcx.sess.opts.debugging_opts.graphviz_dark_mode;\n     if dark_mode {\n         graph_attrs.push(r#\"bgcolor=\"black\"\"#);\n+        graph_attrs.push(r#\"fontcolor=\"white\"\"#);\n         content_attrs.push(r#\"color=\"white\"\"#);\n         content_attrs.push(r#\"fontcolor=\"white\"\"#);\n     }\n@@ -112,7 +113,8 @@ where\n \n     // Basic block number at the top.\n     let (blk, bgcolor) = if data.is_cleanup {\n-        (format!(\"{} (cleanup)\", block.index()), \"lightblue\")\n+        let color = if dark_mode { \"royalblue\" } else { \"lightblue\" };\n+        (format!(\"{} (cleanup)\", block.index()), color)\n     } else {\n         let color = if dark_mode { \"dimgray\" } else { \"gray\" };\n         (format!(\"{}\", block.index()), color)"}, {"sha": "aaee0bc526db5511defa5660d57f1dd7aa2d3501", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -7,6 +7,7 @@ pub mod storage;\n mod alignment;\n pub mod collect_writes;\n mod find_self_call;\n+pub(crate) mod generic_graphviz;\n mod graphviz;\n pub(crate) mod pretty;\n pub(crate) mod spanview;"}, {"sha": "ceed730e25b08a1d5f2b0066235f64b0203575e6", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -887,12 +887,15 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     dump_mir_exclude_pass_number: bool = (false, parse_bool, [UNTRACKED],\n         \"exclude the pass number when dumping MIR (used in tests) (default: no)\"),\n     dump_mir_graphviz: bool = (false, parse_bool, [UNTRACKED],\n-        \"in addition to `.mir` files, create graphviz `.dot` files (default: no)\"),\n+        \"in addition to `.mir` files, create graphviz `.dot` files (and with \\\n+        `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived \\\n+        coverage graph) (default: no)\"),\n     dump_mir_spanview: Option<MirSpanview> = (None, parse_mir_spanview, [UNTRACKED],\n         \"in addition to `.mir` files, create `.html` files to view spans for \\\n         all `statement`s (including terminators), only `terminator` spans, or \\\n         computed `block` spans (one span encompassing a block's terminator and \\\n-        all statements).\"),\n+        all statements). If `-Z instrument-coverage` is also enabled, create \\\n+        an additional `.html` file showing the computed coverage spans.\"),\n     emit_future_incompat_report: bool = (false, parse_bool, [UNTRACKED],\n         \"emits a future-incompatibility report for lints (RFC 2834)\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "efc06bdea57a6e00f40bccdcdcd9ec888c716ce2", "filename": "src/test/mir-opt/coverage_graphviz.bar.InstrumentCoverage.0.dot", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.bar.InstrumentCoverage.0.dot?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,6 @@\n+digraph Cov_0_4 {\n+    graph [fontname=\"Courier, monospace\"];\n+    node [fontname=\"Courier, monospace\"];\n+    edge [fontname=\"Courier, monospace\"];\n+    bcb0__Cov_0_4 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 19:5-20:2<br/>    19:5-19:9: @0[0]: _0 = const true<br/>    20:2-20:2: @0.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb0: Return</td></tr></table>>];\n+}"}, {"sha": "5ddd112fe62e6ec270ff72051c32ce80ada26fcf", "filename": "src/test/mir-opt/coverage_graphviz.main.InstrumentCoverage.0.dot", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.main.InstrumentCoverage.0.dot?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,11 @@\n+digraph Cov_0_3 {\n+    graph [fontname=\"Courier, monospace\"];\n+    node [fontname=\"Courier, monospace\"];\n+    edge [fontname=\"Courier, monospace\"];\n+    bcb2__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb2</td></tr><tr><td align=\"left\" balign=\"left\">Expression(bcb0 - bcb1) at 14:6-14:6<br/>    14:6-14:6: @4.Goto: goto -&gt; bb0</td></tr><tr><td align=\"left\" balign=\"left\">bb4: Goto</td></tr></table>>];\n+    bcb1__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb1</td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb1) at 12:13-12:18<br/>    12:13-12:18: @5[0]: _0 = const ()<br/>Expression(bcb1 + 0) at 15:2-15:2<br/>    15:2-15:2: @5.Return: return</td></tr><tr><td align=\"left\" balign=\"left\">bb3: FalseEdge</td></tr><tr><td align=\"left\" balign=\"left\">bb5: Return</td></tr></table>>];\n+    bcb0__Cov_0_3 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">bcb0</td></tr><tr><td align=\"left\" balign=\"left\"></td></tr><tr><td align=\"left\" balign=\"left\">Counter(bcb0) at 11:12-11:17<br/>    11:12-11:17: @1.Call: _2 = bar() -&gt; [return: bb2, unwind: bb6]<br/>    11:12-11:17: @2[0]: FakeRead(ForMatchedPlace, _2)</td></tr><tr><td align=\"left\" balign=\"left\">bb0: FalseUnwind<br/>bb1: Call</td></tr><tr><td align=\"left\" balign=\"left\">bb2: SwitchInt</td></tr></table>>];\n+    bcb2__Cov_0_3 -> bcb0__Cov_0_3 [label=<>];\n+    bcb0__Cov_0_3 -> bcb2__Cov_0_3 [label=<false>];\n+    bcb0__Cov_0_3 -> bcb1__Cov_0_3 [label=<otherwise>];\n+}"}, {"sha": "b3c90c528377d6fe8787f758cf2d8902487d10f4", "filename": "src/test/mir-opt/coverage_graphviz.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcoverage_graphviz.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,20 @@\n+// Test that `-Z instrument-coverage` with `-Z dump-mir-graphviz` generates a graphviz (.dot file)\n+// rendering of the `BasicCoverageBlock` coverage control flow graph, with counters and\n+// expressions.\n+\n+// needs-profiler-support\n+// compile-flags: -Z instrument-coverage -Z dump-mir-graphviz\n+// EMIT_MIR coverage_graphviz.main.InstrumentCoverage.0.dot\n+// EMIT_MIR coverage_graphviz.bar.InstrumentCoverage.0.dot\n+fn main() {\n+    loop {\n+        if bar() {\n+            break;\n+        }\n+    }\n+}\n+\n+#[inline(never)]\n+fn bar() -> bool {\n+    true\n+}"}, {"sha": "c67d0e2ffe656f5d3e0b0ae84e3f00c633217305", "filename": "src/test/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -8,7 +8,6 @@\n       let mut _3: !;                       // in scope 0 at /the/src/instrument_coverage.rs:12:18: 14:10\n   \n       bb0: {\n-+         Coverage::Counter(1) for /the/src/instrument_coverage.rs:12:12 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           falseUnwind -> [real: bb1, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n@@ -22,23 +21,26 @@\n   \n       bb2: {\n           FakeRead(ForMatchedPlace, _2);   // scope 0 at /the/src/instrument_coverage.rs:12:12: 12:17\n++         Coverage::Counter(1) for /the/src/instrument_coverage.rs:12:12 - 12:17; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           switchInt(_2) -> [false: bb4, otherwise: bb3]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb3: {\n-+         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           falseEdge -> [real: bb5, imaginary: bb4]; // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n       }\n   \n       bb4: {\n           _1 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:12:9: 14:10\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n++         Coverage::Expression(4294967295) = 1 - 2 for /the/src/instrument_coverage.rs:15:6 - 15:7; // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n           goto -> bb0;                     // scope 0 at /the/src/instrument_coverage.rs:11:5: 15:6\n       }\n   \n       bb5: {\n           _0 = const ();                   // scope 0 at /the/src/instrument_coverage.rs:13:13: 13:18\n           StorageDead(_2);                 // scope 0 at /the/src/instrument_coverage.rs:15:5: 15:6\n++         Coverage::Counter(2) for /the/src/instrument_coverage.rs:13:13 - 13:18; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n++         Coverage::Expression(4294967294) = 2 + 0 for /the/src/instrument_coverage.rs:16:1 - 16:2; // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n           return;                          // scope 0 at /the/src/instrument_coverage.rs:16:2: 16:2\n       }\n   "}, {"sha": "18863edac97e49815f1f803ede41583adb99622b", "filename": "src/test/mir-opt/instrument_coverage.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,10 +1,10 @@\n-// Test that the initial version of Rust coverage injects Coverage statements at the top of each\n-// function. The Coverage Counter statements are later converted into LLVM instrprof.increment\n-// intrinsics, during codegen.\n+// Test that `-Z instrument-coverage` injects Coverage statements. The Coverage Counter statements\n+// are later converted into LLVM instrprof.increment intrinsics, during codegen.\n \n // needs-profiler-support\n // ignore-windows\n-// compile-flags: -Zinstrument-coverage --remap-path-prefix={{src-base}}=/the/src\n+// compile-flags: -Z instrument-coverage --remap-path-prefix={{src-base}}=/the/src\n+\n // EMIT_MIR instrument_coverage.main.InstrumentCoverage.diff\n // EMIT_MIR instrument_coverage.bar.InstrumentCoverage.diff\n fn main() {"}, {"sha": "bd2a2475d9e1050c4e39591692997f8556a358f9", "filename": "src/test/run-make-fulldeps/coverage-llvmir-base/filecheck.testprog.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir-base%2Ffilecheck.testprog.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir-base%2Ffilecheck.testprog.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir-base%2Ffilecheck.testprog.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -34,7 +34,7 @@ CHECK-SAME:   section \"llvm.metadata\"\n \n CHECK:        [[DEFINE_INTERNAL]] { {{.*}} } @_R{{[a-zA-Z0-9_]+}}testprog14will_be_called() unnamed_addr #{{[0-9]+}} {\n CHECK-NEXT:   start:\n-CHECK-NOT:    bb{{[0-9]+}}:\n+CHECK-NOT:    [[DEFINE_INTERNAL]]\n CHECK:        %pgocount = load i64, i64* getelementptr inbounds\n CHECK-SAME:   * @__profc__R{{[a-zA-Z0-9_]+}}testprog14will_be_called,\n "}, {"sha": "b175768e1996286d54f2a96b8f9ecffb368561eb", "filename": "src/test/run-make-fulldeps/coverage-reports-base/Makefile", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2FMakefile?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -13,6 +13,25 @@\n BASEDIR=../coverage-reports-base\n SOURCEDIR=../coverage\n \n+ifeq ($(UNAME),Darwin)\n+# FIXME(richkadel): It appears that --debug is not available on MacOS even when not running\n+# under CI.\n+NO_LLVM_ASSERTIONS=1\n+endif\n+\n+# The `llvm-cov show` flag `--debug`, used to generate the `counters` output files, is only enabled\n+# if LLVM assertions are enabled. Some CI builds disable debug assertions.\n+ifndef NO_LLVM_ASSERTIONS\n+DEBUG_FLAG=--debug\n+endif\n+\n+# When generating `expected_*` results (using `x.py test --bless`), the `--debug` flag is forced.\n+# If assertions are disabled, the command will fail with an error, rather than attempt to generate\n+# only partial results.\n+ifdef RUSTC_BLESS_TEST\n+DEBUG_FLAG=--debug\n+endif\n+\n all: $(patsubst $(SOURCEDIR)/%.rs,%,$(wildcard $(SOURCEDIR)/*.rs))\n \n # Ensure there are no `expected` results for tests that may have been removed or renamed\n@@ -21,6 +40,7 @@ clear_expected_if_blessed:\n ifdef RUSTC_BLESS_TEST\n \trm -f expected_export_coverage.*.json\n \trm -f expected_show_coverage.*.txt\n+\trm -f expected_show_coverage_counters.*.txt\n endif\n \n -include clear_expected_if_blessed\n@@ -49,19 +69,33 @@ endif\n \t\t\t\"$(TMPDIR)\"/$@.profraw \\\n \t\t\t-o \"$(TMPDIR)\"/$@.profdata\n \n-\t# Generate a coverage report using `llvm-cov show`. The output ordering\n-\t# can be non-deterministic, so ignore the return status. If the test fails\n-\t# when comparing the JSON `export`, the `show` output may be useful when\n-\t# debugging.\n+\t# Generate a coverage report using `llvm-cov show`.\n \t\"$(LLVM_BIN_DIR)\"/llvm-cov show \\\n+\t\t\t$(DEBUG_FLAG) \\\n \t\t\t--Xdemangler=\"$(RUST_DEMANGLER)\" \\\n \t\t\t--show-line-counts-or-regions \\\n \t\t\t--instr-profile=\"$(TMPDIR)\"/$@.profdata \\\n \t\t\t$(call BIN,\"$(TMPDIR)\"/$@) \\\n-\t\t> \"$(TMPDIR)\"/actual_show_coverage.$@.txt\n+\t\t> \"$(TMPDIR)\"/actual_show_coverage.$@.txt \\\n+\t\t2> \"$(TMPDIR)\"/show_coverage_stderr.$@.txt || \\\n+\t( status=$$? ; \\\n+\t\t>&2 cat \"$(TMPDIR)\"/show_coverage_stderr.$@.txt ; \\\n+\t\texit $$status \\\n+\t)\n+\n+ifdef DEBUG_FLAG\n+\t# The first line (beginning with \"Args:\" contains hard-coded, build-specific\n+\t# file paths. Strip that line and keep the remaining lines with counter debug\n+\t# data.\n+\ttail -n +2 \"$(TMPDIR)\"/show_coverage_stderr.$@.txt \\\n+\t\t> \"$(TMPDIR)\"/actual_show_coverage_counters.$@.txt\n+endif\n \n ifdef RUSTC_BLESS_TEST\n-\tcp \"$(TMPDIR)\"/actual_show_coverage.$@.txt expected_show_coverage.$@.txt\n+\tcp \"$(TMPDIR)\"/actual_show_coverage.$@.txt \\\n+\t\t\texpected_show_coverage.$@.txt\n+\tcp \"$(TMPDIR)\"/actual_show_coverage_counters.$@.txt \\\n+\t\t\texpected_show_coverage_counters.$@.txt\n else\n \t# Compare the show coverage output (`--bless` refreshes `typical` files)\n \t# Note `llvm-cov show` output for some programs can vary, but can be ignored\n@@ -75,6 +109,21 @@ else\n \t\t\tfalse \\\n \t\t)\n \n+ifdef DEBUG_FLAG\n+\t$(DIFF) expected_show_coverage_counters.$@.txt \"$(TMPDIR)\"/actual_show_coverage_counters.$@.txt || \\\n+\t\t( grep -q '^\\/\\/ ignore-llvm-cov-show-diffs' $(SOURCEDIR)/$@.rs && \\\n+\t\t\t>&2 echo 'diff failed, but suppressed with `// ignore-llvm-cov-show-diffs` in $(SOURCEDIR)/$@.rs' \\\n+\t\t) || \\\n+\t\t( >&2 echo 'diff failed, and not suppressed without `// ignore-llvm-cov-show-diffs` in $(SOURCEDIR)/$@.rs'; \\\n+\t\t\t>&2 echo '(Ignore anyway until mangled function names in \"counters\" files are demangled.)' \\\n+\t\t)\n+\n+\t\t# FIXME(richkadel): Apply the demangler to the `*_show_coverage_counters.*.txt` files,\n+\t\t# so the crate disambiguator differences will be stripped away. At that point, these files\n+\t\t# will be less likely to vary, and the last `echo` above (starting with \"Ignore anyway\")\n+\t\t# can be replaced with `false` to fail the test.\n+endif\n+\n endif\n \n \t# Generate a coverage report in JSON, using `llvm-cov export`, and fail if"}, {"sha": "bff55300b3ca3d210ad1d4f3e47976a4457e586a", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.closure.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.closure.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.closure.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.closure.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 91,\n-              \"covered\": 75,\n-              \"percent\": 82.41758241758241\n+              \"covered\": 77,\n+              \"percent\": 84.61538461538461\n             },\n             \"regions\": {\n-              \"count\": 21,\n-              \"covered\": 11,\n-              \"notcovered\": 10,\n-              \"percent\": 52.38095238095239\n+              \"count\": 25,\n+              \"covered\": 13,\n+              \"notcovered\": 12,\n+              \"percent\": 52\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 91,\n-          \"covered\": 75,\n-          \"percent\": 82.41758241758241\n+          \"covered\": 77,\n+          \"percent\": 84.61538461538461\n         },\n         \"regions\": {\n-          \"count\": 21,\n-          \"covered\": 11,\n-          \"notcovered\": 10,\n-          \"percent\": 52.38095238095239\n+          \"count\": 25,\n+          \"covered\": 13,\n+          \"notcovered\": 12,\n+          \"percent\": 52\n         }\n       }\n     }"}, {"sha": "ed937a1b13f38a9d0f6411d9d885d0c5819fa468", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.conditions.json", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.conditions.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.conditions.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.conditions.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -3,7 +3,7 @@\n     {\n       \"files\": [\n         {\n-          \"filename\": \"../coverage/various_conditions.rs\",\n+          \"filename\": \"../coverage/conditions.rs\",\n           \"summary\": {\n             \"functions\": {\n               \"count\": 1,\n@@ -21,10 +21,10 @@\n               \"percent\": 46.93877551020408\n             },\n             \"regions\": {\n-              \"count\": 51,\n-              \"covered\": 19,\n-              \"notcovered\": 32,\n-              \"percent\": 37.254901960784316\n+              \"count\": 69,\n+              \"covered\": 18,\n+              \"notcovered\": 51,\n+              \"percent\": 26.08695652173913\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 46.93877551020408\n         },\n         \"regions\": {\n-          \"count\": 51,\n-          \"covered\": 19,\n-          \"notcovered\": 32,\n-          \"percent\": 37.254901960784316\n+          \"count\": 69,\n+          \"covered\": 18,\n+          \"notcovered\": 51,\n+          \"percent\": 26.08695652173913\n         }\n       }\n     }", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.various_conditions.json"}, {"sha": "84dcc251f3f4b11f7cdfba0ea194e979a232a158", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.if.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.if.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.if.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.if.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 4,\n+              \"count\": 5,\n               \"covered\": 4,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"notcovered\": 1,\n+              \"percent\": 80\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 4,\n+          \"count\": 5,\n           \"covered\": 4,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"notcovered\": 1,\n+          \"percent\": 80\n         }\n       }\n     }"}, {"sha": "c178e7f93476f097fcaa839652a6ac762127d69e", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.inner_items.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.inner_items.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.inner_items.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.inner_items.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 13,\n+              \"count\": 15,\n               \"covered\": 13,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"notcovered\": 2,\n+              \"percent\": 86.66666666666667\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 13,\n+          \"count\": 15,\n           \"covered\": 13,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"notcovered\": 2,\n+          \"percent\": 86.66666666666667\n         }\n       }\n     }"}, {"sha": "5a953b90b423f2ebde0dc68a0c2ef12ea4ac136a", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.lazy_boolean.json", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.lazy_boolean.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.lazy_boolean.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.lazy_boolean.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 21,\n-              \"covered\": 19,\n-              \"percent\": 90.47619047619048\n+              \"count\": 40,\n+              \"covered\": 30,\n+              \"percent\": 75\n             },\n             \"regions\": {\n-              \"count\": 16,\n-              \"covered\": 14,\n-              \"notcovered\": 2,\n-              \"percent\": 87.5\n+              \"count\": 37,\n+              \"covered\": 26,\n+              \"notcovered\": 11,\n+              \"percent\": 70.27027027027027\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 21,\n-          \"covered\": 19,\n-          \"percent\": 90.47619047619048\n+          \"count\": 40,\n+          \"covered\": 30,\n+          \"percent\": 75\n         },\n         \"regions\": {\n-          \"count\": 16,\n-          \"covered\": 14,\n-          \"notcovered\": 2,\n-          \"percent\": 87.5\n+          \"count\": 37,\n+          \"covered\": 26,\n+          \"notcovered\": 11,\n+          \"percent\": 70.27027027027027\n         }\n       }\n     }"}, {"sha": "2dca41df9d24e6c75738a666344e46efed148c49", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.loops_branches.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.loops_branches.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.loops_branches.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.loops_branches.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/loops_branches.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 11,\n+              \"covered\": 11,\n+              \"percent\": 100\n+            },\n+            \"regions\": {\n+              \"count\": 9,\n+              \"covered\": 8,\n+              \"notcovered\": 1,\n+              \"percent\": 88.88888888888889\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 11,\n+          \"covered\": 11,\n+          \"percent\": 100\n+        },\n+        \"regions\": {\n+          \"count\": 9,\n+          \"covered\": 8,\n+          \"notcovered\": 1,\n+          \"percent\": 88.88888888888889\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "68163eb7636195b9855905e2d5139014c9efefac", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.nested_loops.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.nested_loops.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.nested_loops.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.nested_loops.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/nested_loops.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 21,\n+              \"covered\": 16,\n+              \"percent\": 76.19047619047619\n+            },\n+            \"regions\": {\n+              \"count\": 18,\n+              \"covered\": 14,\n+              \"notcovered\": 4,\n+              \"percent\": 77.77777777777779\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 21,\n+          \"covered\": 16,\n+          \"percent\": 76.19047619047619\n+        },\n+        \"regions\": {\n+          \"count\": 18,\n+          \"covered\": 14,\n+          \"notcovered\": 4,\n+          \"percent\": 77.77777777777779\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "a7b98247b6631e285eecc490d1277a69e70148b3", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.partial_eq.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.partial_eq.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.partial_eq.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.partial_eq.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/partial_eq.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 5,\n+              \"covered\": 5,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 5,\n+              \"covered\": 5,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 15,\n+              \"covered\": 15,\n+              \"percent\": 100\n+            },\n+            \"regions\": {\n+              \"count\": 6,\n+              \"covered\": 6,\n+              \"notcovered\": 0,\n+              \"percent\": 100\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 5,\n+          \"covered\": 5,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 5,\n+          \"covered\": 5,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 15,\n+          \"covered\": 15,\n+          \"percent\": 100\n+        },\n+        \"regions\": {\n+          \"count\": 6,\n+          \"covered\": 6,\n+          \"notcovered\": 0,\n+          \"percent\": 100\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "ada6bb062dd1eaf04d076a8dc2931361441840c0", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.simple_loop.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.simple_loop.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.simple_loop.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.simple_loop.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 18,\n-              \"covered\": 18,\n+              \"count\": 19,\n+              \"covered\": 19,\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 7,\n-              \"covered\": 7,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"count\": 9,\n+              \"covered\": 8,\n+              \"notcovered\": 1,\n+              \"percent\": 88.88888888888889\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 18,\n-          \"covered\": 18,\n+          \"count\": 19,\n+          \"covered\": 19,\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 7,\n-          \"covered\": 7,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"count\": 9,\n+          \"covered\": 8,\n+          \"notcovered\": 1,\n+          \"percent\": 88.88888888888889\n         }\n       }\n     }"}, {"sha": "63d1ae74c5f5d51759f22c7f82f7799ecc11c590", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.simple_match.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.simple_match.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.simple_match.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.simple_match.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 26,\n-              \"covered\": 26,\n+              \"count\": 24,\n+              \"covered\": 24,\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 9,\n-              \"covered\": 9,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"count\": 15,\n+              \"covered\": 14,\n+              \"notcovered\": 1,\n+              \"percent\": 93.33333333333333\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 26,\n-          \"covered\": 26,\n+          \"count\": 24,\n+          \"covered\": 24,\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 9,\n-          \"covered\": 9,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"count\": 15,\n+          \"covered\": 14,\n+          \"notcovered\": 1,\n+          \"percent\": 93.33333333333333\n         }\n       }\n     }"}, {"sha": "872560384eb907b8b38a2aa5847719304f7a7c8d", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.tight_inf_loop.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.tight_inf_loop.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.tight_inf_loop.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.tight_inf_loop.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/tight_inf_loop.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"percent\": 100\n+            },\n+            \"regions\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"notcovered\": 0,\n+              \"percent\": 100\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"percent\": 100\n+        },\n+        \"regions\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"notcovered\": 0,\n+          \"percent\": 100\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "78b935b15689a3326a8f88a24ba6cfce8aa07eb3", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.try_error_result.json", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.try_error_result.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 16,\n-              \"covered\": 15,\n-              \"percent\": 93.75\n+              \"count\": 20,\n+              \"covered\": 18,\n+              \"percent\": 90\n             },\n             \"regions\": {\n-              \"count\": 13,\n-              \"covered\": 12,\n-              \"notcovered\": 1,\n-              \"percent\": 92.3076923076923\n+              \"count\": 19,\n+              \"covered\": 14,\n+              \"notcovered\": 5,\n+              \"percent\": 73.68421052631578\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 16,\n-          \"covered\": 15,\n-          \"percent\": 93.75\n+          \"count\": 20,\n+          \"covered\": 18,\n+          \"percent\": 90\n         },\n         \"regions\": {\n-          \"count\": 13,\n-          \"covered\": 12,\n-          \"notcovered\": 1,\n-          \"percent\": 92.3076923076923\n+          \"count\": 19,\n+          \"covered\": 14,\n+          \"notcovered\": 5,\n+          \"percent\": 73.68421052631578\n         }\n       }\n     }"}, {"sha": "339c65556682a536269f2572466f8e9c4bc91e8a", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.while.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/while.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 4,\n+              \"covered\": 3,\n+              \"percent\": 75\n+            },\n+            \"regions\": {\n+              \"count\": 4,\n+              \"covered\": 3,\n+              \"notcovered\": 1,\n+              \"percent\": 75\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 4,\n+          \"covered\": 3,\n+          \"percent\": 75\n+        },\n+        \"regions\": {\n+          \"count\": 4,\n+          \"covered\": 3,\n+          \"notcovered\": 1,\n+          \"percent\": 75\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "ad43f5d992630ed3a5f405c318657a606623c365", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.while_early_ret.json", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_ret.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_ret.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_export_coverage.while_early_ret.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -3,7 +3,7 @@\n     {\n       \"files\": [\n         {\n-          \"filename\": \"../coverage/while_early_return.rs\",\n+          \"filename\": \"../coverage/while_early_ret.rs\",\n           \"summary\": {\n             \"functions\": {\n               \"count\": 1,\n@@ -16,9 +16,9 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 18,\n-              \"covered\": 16,\n-              \"percent\": 88.88888888888889\n+              \"count\": 17,\n+              \"covered\": 15,\n+              \"percent\": 88.23529411764706\n             },\n             \"regions\": {\n               \"count\": 9,\n@@ -41,9 +41,9 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 18,\n-          \"covered\": 16,\n-          \"percent\": 88.88888888888889\n+          \"count\": 17,\n+          \"covered\": 15,\n+          \"percent\": 88.23529411764706\n         },\n         \"regions\": {\n           \"count\": 9,", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.while_early_return.json"}, {"sha": "aef26a62e25fba8229ef1df99653976796419d4d", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.closure.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.closure.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -62,7 +62,7 @@\n    62|      1|                let mut countdown = 0;\n    63|      1|                if is_false {\n    64|      0|                    countdown = 10;\n-   65|      0|                }\n+   65|      1|                }\n    66|      1|                \"alt string 3\".to_owned()\n    67|      1|            }\n    68|      1|        )\n@@ -77,7 +77,7 @@\n    77|      1|        let mut countdown = 0;\n    78|      1|        if is_false {\n    79|      0|            countdown = 10;\n-   80|      0|        }\n+   80|      1|        }\n    81|      1|        \"alt string 4\".to_owned()\n    82|      1|    };\n    83|      1|    println!("}, {"sha": "173ff4aa4c48154b7c32ca11ed922d6887b0caeb", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.conditions.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.conditions.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.various_conditions.txt"}, {"sha": "85e6440ab3729f1275552d93d570d6ff6fc2f242", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.if.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.if.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.if.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.if.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -25,5 +25,6 @@\n    25|      1|            10\n    26|      1|        ;\n    27|      1|    }\n+                   ^0\n    28|      1|}\n "}, {"sha": "4a51f842a4bb22cbea878a2e0944013823dc42b6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.inner_items.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.inner_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.inner_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.inner_items.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -10,6 +10,7 @@\n    10|      1|    if is_true {\n    11|      1|        countdown = 10;\n    12|      1|    }\n+                   ^0\n    13|       |\n    14|       |    mod in_mod {\n    15|       |        const IN_MOD_CONST: u32 = 1000;\n@@ -48,6 +49,7 @@\n    48|      1|    if is_true {\n    49|      1|        in_func(countdown);\n    50|      1|    }\n+                   ^0\n    51|       |\n    52|      1|    let mut val = InStruct {\n    53|      1|        in_struct_field: 101,"}, {"sha": "1b503033911c5a4061e43b22c12e8e0dce4d6951", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.lazy_boolean.txt", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.lazy_boolean.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -12,12 +12,14 @@\n    12|      1|        b = 10;\n    13|      1|        c = 100;\n    14|      1|    }\n+                   ^0\n    15|       |    let\n    16|      1|        somebool\n    17|       |        =\n    18|      1|            a < b\n    19|       |        ||\n-   20|      0|            b < c\n+   20|      1|            b < c\n+                          ^0\n    21|       |    ;\n    22|       |    let\n    23|      1|        somebool\n@@ -26,19 +28,38 @@\n    26|       |        ||\n    27|      1|            b < c\n    28|       |    ;\n-   29|       |    let\n-   30|      1|        somebool\n-   31|       |        =\n-   32|      1|            a < b\n-   33|       |        &&\n-   34|      1|            b < c\n-   35|       |    ;\n-   36|       |    let\n-   37|      1|        somebool\n-   38|       |        =\n-   39|      1|            b < a\n-   40|       |        &&\n-   41|      0|            b < c\n-   42|       |    ;\n-   43|      1|}\n+   29|      1|    let somebool = a < b && b < c;\n+   30|      1|    let somebool = b < a && b < c;\n+                                          ^0\n+   31|       |\n+   32|       |    if\n+   33|      1|        !\n+   34|      1|        is_true\n+   35|      0|    {\n+   36|      0|        a = 2\n+   37|      0|        ;\n+   38|      1|    }\n+   39|       |\n+   40|       |    if\n+   41|      1|        is_true\n+   42|      1|    {\n+   43|      1|        b = 30\n+   44|      1|        ;\n+   45|      1|    }\n+   46|       |    else\n+   47|      0|    {\n+   48|      0|        c = 400\n+   49|      0|        ;\n+   50|      0|    }\n+   51|       |\n+   52|      1|    if !is_true {\n+   53|      0|        a = 2;\n+   54|      1|    }\n+   55|       |\n+   56|      1|    if is_true {\n+   57|      1|        b = 30;\n+   58|      1|    } else {\n+   59|      0|        c = 400;\n+   60|      0|    }\n+   61|      1|}\n "}, {"sha": "3a969a6b89869366e1bc2fd3a9defc1743e08861", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.loops_branches.txt", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.loops_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.loops_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.loops_branches.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,38 @@\n+    1|       |#![allow(unused_assignments)]\n+    2|       |\n+    3|       |// This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n+    4|       |// structure of this `fmt` function.\n+    5|       |\n+    6|       |struct DebugTest;\n+    7|       |\n+    8|       |impl std::fmt::Debug for DebugTest {\n+    9|       |    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+   10|      1|        if true {\n+   11|      1|            if false {\n+   12|       |                while true {\n+   13|       |                }\n+   14|      1|            }\n+   15|      1|            write!(f, \"error\")?;\n+                                            ^0\n+   16|       |        } else {\n+   17|      1|        }\n+   18|      1|        Ok(())\n+   19|      1|    }\n+   20|       |}\n+   21|       |\n+   22|      1|fn main() {\n+   23|      1|    let debug_test = DebugTest;\n+   24|      1|    println!(\"{:?}\", debug_test);\n+   25|      1|}\n+   26|       |\n+   27|       |/*\n+   28|       |\n+   29|       |This is the error message generated, before the issue was fixed:\n+   30|       |\n+   31|       |error: internal compiler error: compiler/rustc_mir/src/transform/coverage/mod.rs:374:42:\n+   32|       |Error processing: DefId(0:6 ~ bug_incomplete_cov_graph_traversal_simplified[317d]::{impl#0}::fmt):\n+   33|       |Error { message: \"`TraverseCoverageGraphWithLoops` missed some `BasicCoverageBlock`s:\n+   34|       |[bcb6, bcb7, bcb9]\" }\n+   35|       |\n+   36|       |*/\n+"}, {"sha": "c9f373bf6a7c07b1c949e8eb03f25ba4ffbefc9b", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.nested_loops.txt", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.nested_loops.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,26 @@\n+    1|       |fn main() {\n+    2|      1|    let is_true = std::env::args().len() == 1;\n+    3|      1|    let mut countdown = 10;\n+    4|       |\n+    5|      1|    'outer: while countdown > 0 {\n+    6|      1|        let mut a = 100;\n+    7|      1|        let mut b = 100;\n+    8|      3|        for _ in 0..50 {\n+    9|      3|            if a < 30 {\n+   10|      0|                break;\n+   11|       |            }\n+   12|      3|            a -= 5;\n+   13|      3|            b -= 5;\n+   14|      3|            if b < 90 {\n+   15|      1|                a -= 10;\n+   16|      1|                if is_true {\n+   17|      1|                    break 'outer;\n+   18|       |                } else {\n+   19|      0|                    a -= 2;\n+   20|      0|                }\n+   21|      2|            }\n+   22|      2|        }\n+   23|      0|        countdown -= 1;\n+   24|      0|    }\n+   25|      1|}\n+"}, {"sha": "310bf13a695af396ef4e1dc1433200831cee5ea4", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.partial_eq.txt", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.partial_eq.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,101 @@\n+    1|       |// This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n+    2|       |// structure of this test.\n+    3|       |\n+    4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+                                                    ^1       ^1\n+    5|       |pub struct Version {\n+    6|       |    major: usize,\n+    7|      1|    minor: usize,\n+    8|       |    patch: usize,\n+    9|       |}\n+   10|       |\n+   11|       |impl Version {\n+   12|       |    pub fn new(major: usize, minor: usize, patch: usize) -> Self {\n+   13|      2|        Self {\n+   14|      2|            major,\n+   15|      2|            minor,\n+   16|      2|            patch,\n+   17|      2|        }\n+   18|      2|    }\n+   19|       |}\n+   20|       |\n+   21|      1|fn main() {\n+   22|      1|    let version_3_2_1 = Version::new(3, 2, 1);\n+   23|      1|    let version_3_3_0 = Version::new(3, 3, 0);\n+   24|      1|\n+   25|      1|    println!(\"{:?} < {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 < version_3_3_0);\n+   26|      1|}\n+   27|       |\n+   28|       |/*\n+   29|       |\n+   30|       |This test verifies a bug was fixed that otherwise generated this error:\n+   31|       |\n+   32|       |thread 'rustc' panicked at 'No counters provided the source_hash for function:\n+   33|       |    Instance {\n+   34|       |        def: Item(WithOptConstParam {\n+   35|       |            did: DefId(0:101 ~ autocfg[c44a]::version::{impl#2}::partial_cmp),\n+   36|       |            const_param_did: None\n+   37|       |        }),\n+   38|       |        substs: []\n+   39|       |    }'\n+   40|       |The `PartialOrd` derived by `Version` happened to generate a MIR that generated coverage\n+   41|       |without a code region associated with any `Counter`. Code regions were associated with at least\n+   42|       |one expression, which is allowed, but the `function_source_hash` was only passed to the codegen\n+   43|       |(coverage mapgen) phase from a `Counter`s code region. A new method was added to pass the\n+   44|       |`function_source_hash` without a code region, if necessary.\n+   45|       |\n+   46|       |*/\n+   47|       |\n+   48|       |// FIXME(richkadel): It may be worth investigating why the coverage report for this test produces\n+   49|       |// the following results:\n+   50|       |\n+   51|       |/*\n+   52|       |\n+   53|       |1. Why are their two counts below different characters (first and last) of `PartialOrd`, on line 17?\n+   54|       |\n+   55|       |2. Line 17 is counted twice, but the `::lt` instance shows a line count of 1? Is there a missing\n+   56|       |   line count with a different instance? Or was it really only called once?\n+   57|       |\n+   58|       |3. Line 20 shows another line count (of 1) for a line within a `struct` declaration (on only one of\n+   59|       |   its 3 fields). I doubt the specific field (`minor`) is relevant, but rather I suspect there's a\n+   60|       |   problem computing the file position here, for some reason.\n+   61|       |\n+   62|       |<snip>\n+   63|       |   16|       |\n+   64|       |   17|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+   65|       |                                                    ^1       ^1\n+   66|       |------------------\n+   67|       ||Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::gt\n+   68|       |------------------\n+   69|       ||Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::le\n+   70|       |------------------\n+   71|       ||Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::ge\n+   72|       |------------------\n+   73|       ||<partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::lt:\n+   74|       ||  17|      1|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+   75|       |------------------\n+   76|       |   18|       |pub struct Version {\n+   77|       |   19|       |    major: usize,\n+   78|       |   20|      1|    minor: usize,\n+   79|       |   21|       |    patch: usize,\n+   80|       |   22|       |}\n+   81|       |   23|       |\n+   82|       |   24|       |impl Version {\n+   83|       |   25|       |    pub fn new(major: usize, minor: usize, patch: usize) -> Self {\n+   84|       |   26|      2|        Version {\n+   85|       |   27|      2|            major,\n+   86|       |   28|      2|            minor,\n+   87|       |   29|      2|            patch,\n+   88|       |   30|      2|        }\n+   89|       |   31|      2|    }\n+   90|       |   32|       |}\n+   91|       |   33|       |\n+   92|       |   34|      1|fn main() {\n+   93|       |   35|      1|    let version_3_2_1 = Version::new(3, 2, 1);\n+   94|       |   36|      1|    let version_3_3_0 = Version::new(3, 3, 0);\n+   95|       |   37|      1|\n+   96|       |   38|      1|    println!(\"{:?} < {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 < version\n+   97|       |_3_3_0);\n+   98|       |   39|      1|}\n+   99|       |*/\n+"}, {"sha": "064930dd75c93a4f4b1e83c228f155c38db36d3d", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.simple_loop.txt", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.simple_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.simple_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.simple_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,6 +16,7 @@\n    16|      1|            10\n    17|      1|        ;\n    18|      1|    }\n+                   ^0\n    19|       |\n    20|       |    loop\n    21|       |    {\n@@ -31,6 +32,6 @@\n    31|     10|        -=\n    32|     10|        1\n    33|       |        ;\n-   34|       |    }\n+   34|      1|    }\n    35|      1|}\n "}, {"sha": "1f7e71d3eb0e7bad42393553b43b6acac9b50222", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.simple_match.txt", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.simple_match.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.simple_match.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.simple_match.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -10,22 +10,24 @@\n    10|      1|    if is_true {\n    11|      1|        countdown = 0;\n    12|      1|    }\n+                   ^0\n    13|       |\n-   14|      3|    for\n-   15|      3|        _\n+   14|       |    for\n+   15|      2|        _\n    16|       |    in\n-   17|      1|        0..2\n+   17|      3|        0..2\n    18|       |    {\n    19|       |        let z\n    20|       |        ;\n    21|       |        match\n    22|      2|            countdown\n-   23|      2|        {\n-   24|      2|            x\n-   25|      2|            if\n+   23|       |        {\n+   24|      1|            x\n+   25|       |            if\n    26|      2|                x\n    27|      2|                    <\n    28|      2|                1\n+                               ^1\n    29|       |            =>\n    30|      1|            {\n    31|      1|                z = countdown\n@@ -39,6 +41,6 @@\n    39|       |            =>\n    40|      1|            {}\n    41|       |        }\n-   42|       |    }\n+   42|      3|    }\n    43|      1|}\n "}, {"sha": "e02eac03a6b1574c6c10534081581d67e120d0e0", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.tight_inf_loop.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.tight_inf_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.tight_inf_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.tight_inf_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,6 @@\n+    1|       |fn main() {\n+    2|      1|    if false {\n+    3|       |        loop {}\n+    4|       |    }\n+    5|      1|}\n+"}, {"sha": "6b3a8c39c6338a066f1afa7d6893068dc73ef98f", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.try_error_result.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -13,24 +13,26 @@\n    13|      1|    let mut\n    14|      1|        countdown = 10\n    15|       |    ;\n-   16|      6|    for\n+   16|       |    for\n    17|      6|        _\n    18|       |    in\n-   19|      1|        0..10\n+   19|      6|        0..10\n    20|       |    {\n    21|      6|        countdown\n    22|      6|            -= 1\n-   23|       |        ;\n-   24|       |        if\n+   23|      6|        ;\n+   24|      6|        if\n    25|      6|            countdown < 5\n    26|       |        {\n    27|      1|            call(/*return_error=*/ true)?;\n-   28|       |        }\n-   29|       |        else\n-   30|       |        {\n-   31|      5|            call(/*return_error=*/ false)?;\n-   32|       |        }\n-   33|       |    }\n-   34|      0|    Ok(())\n-   35|      1|}\n+   28|      0|            call(/*return_error=*/ false)?;\n+   29|       |        }\n+   30|       |        else\n+   31|       |        {\n+   32|      5|            call(/*return_error=*/ false)?;\n+                                                       ^0\n+   33|      5|        }\n+   34|      5|    }\n+   35|      0|    Ok(())\n+   36|      1|}\n "}, {"sha": "194325b6b9ecaac6c23117102cd38678ccecc704", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.while.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,6 @@\n+    1|       |fn main() {\n+    2|      1|    let num = 9;\n+    3|      1|    while num >= 10 {\n+    4|      0|    }\n+    5|      1|}\n+"}, {"sha": "26041136d2f4c460ac4a12f540857e5b2b6dade6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.while_early_ret.txt", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_ret.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_ret.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage.while_early_ret.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -3,7 +3,7 @@\n     3|       |\n     4|       |fn main() -> Result<(),u8> {\n     5|      1|    let mut countdown = 10;\n-    6|      7|    while\n+    6|       |    while\n     7|      7|        countdown\n     8|      7|            >\n     9|      7|        0", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.while_early_return.txt"}, {"sha": "fb797796e4e7dcc9e6d4e2ec785c1989bb760fc6", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.closure.txt", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.closure.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,94 @@\n+Counter in file 0 20:21 -> 20:38, #1\n+Counter in file 0 21:20 -> 21:28, (#1 + 0)\n+Counter in file 0 21:29 -> 23:18, #2\n+Counter in file 0 23:18 -> 23:19, (#1 - #2)\n+Counter in file 0 24:17 -> 25:14, (#2 + (#1 - #2))\n+Counter in file 0 3:11 -> 18:13, #1\n+Counter in file 0 25:14 -> 33:9, (#1 + 0)\n+Counter in file 0 40:6 -> 60:13, (#1 + 0)\n+Counter in file 0 67:14 -> 75:9, (#1 + 0)\n+Counter in file 0 82:6 -> 93:2, (#1 + 0)\n+Counter in file 0 77:13 -> 77:30, #1\n+Counter in file 0 78:12 -> 78:20, (#1 + 0)\n+Counter in file 0 78:21 -> 80:10, #2\n+Counter in file 0 80:10 -> 80:11, (#1 - #2)\n+Counter in file 0 81:9 -> 82:6, (#2 + (#1 - #2))\n+Counter in file 0 62:21 -> 62:38, #1\n+Counter in file 0 63:20 -> 63:28, (#1 + 0)\n+Counter in file 0 63:29 -> 65:18, #2\n+Counter in file 0 65:18 -> 65:19, (#1 - #2)\n+Counter in file 0 66:17 -> 67:14, (#2 + (#1 - #2))\n+Counter in file 0 35:13 -> 35:30, #1\n+Counter in file 0 36:12 -> 36:20, (#1 + 0)\n+Counter in file 0 36:21 -> 38:10, #2\n+Counter in file 0 38:10 -> 38:11, (#1 - #2)\n+Counter in file 0 39:9 -> 40:6, (#2 + (#1 - #2))\n+Emitting segments for file: ../coverage/closure.rs\n+Combined regions:\n+  3:11 -> 18:13 (count=1)\n+  20:21 -> 20:38 (count=0)\n+  21:20 -> 21:28 (count=0)\n+  21:29 -> 23:18 (count=0)\n+  23:18 -> 23:19 (count=0)\n+  24:17 -> 25:14 (count=0)\n+  25:14 -> 33:9 (count=1)\n+  35:13 -> 35:30 (count=0)\n+  36:12 -> 36:20 (count=0)\n+  36:21 -> 38:10 (count=0)\n+  38:10 -> 38:11 (count=0)\n+  39:9 -> 40:6 (count=0)\n+  40:6 -> 60:13 (count=1)\n+  62:21 -> 62:38 (count=1)\n+  63:20 -> 63:28 (count=1)\n+  63:29 -> 65:18 (count=0)\n+  65:18 -> 65:19 (count=1)\n+  66:17 -> 67:14 (count=1)\n+  67:14 -> 75:9 (count=1)\n+  77:13 -> 77:30 (count=1)\n+  78:12 -> 78:20 (count=1)\n+  78:21 -> 80:10 (count=0)\n+  80:10 -> 80:11 (count=1)\n+  81:9 -> 82:6 (count=1)\n+  82:6 -> 93:2 (count=1)\n+Segment at 3:11 (count = 1), RegionEntry\n+Segment at 18:13 (count = 0), Skipped\n+Segment at 20:21 (count = 0), RegionEntry\n+Segment at 20:38 (count = 0), Skipped\n+Segment at 21:20 (count = 0), RegionEntry\n+Segment at 21:28 (count = 0), Skipped\n+Segment at 21:29 (count = 0), RegionEntry\n+Segment at 23:18 (count = 0), RegionEntry\n+Segment at 23:19 (count = 0), Skipped\n+Segment at 24:17 (count = 0), RegionEntry\n+Segment at 25:14 (count = 1), RegionEntry\n+Segment at 33:9 (count = 0), Skipped\n+Segment at 35:13 (count = 0), RegionEntry\n+Segment at 35:30 (count = 0), Skipped\n+Segment at 36:12 (count = 0), RegionEntry\n+Segment at 36:20 (count = 0), Skipped\n+Segment at 36:21 (count = 0), RegionEntry\n+Segment at 38:10 (count = 0), RegionEntry\n+Segment at 38:11 (count = 0), Skipped\n+Segment at 39:9 (count = 0), RegionEntry\n+Segment at 40:6 (count = 1), RegionEntry\n+Segment at 60:13 (count = 0), Skipped\n+Segment at 62:21 (count = 1), RegionEntry\n+Segment at 62:38 (count = 0), Skipped\n+Segment at 63:20 (count = 1), RegionEntry\n+Segment at 63:28 (count = 0), Skipped\n+Segment at 63:29 (count = 0), RegionEntry\n+Segment at 65:18 (count = 1), RegionEntry\n+Segment at 65:19 (count = 0), Skipped\n+Segment at 66:17 (count = 1), RegionEntry\n+Segment at 67:14 (count = 1), RegionEntry\n+Segment at 75:9 (count = 0), Skipped\n+Segment at 77:13 (count = 1), RegionEntry\n+Segment at 77:30 (count = 0), Skipped\n+Segment at 78:12 (count = 1), RegionEntry\n+Segment at 78:20 (count = 0), Skipped\n+Segment at 78:21 (count = 0), RegionEntry\n+Segment at 80:10 (count = 1), RegionEntry\n+Segment at 80:11 (count = 0), Skipped\n+Segment at 81:9 (count = 1), RegionEntry\n+Segment at 82:6 (count = 1), RegionEntry\n+Segment at 93:2 (count = 0), Skipped"}, {"sha": "d48cd8074bebb6fa4d781fec581d1dc72c0e2d6b", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.conditions.txt", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.conditions.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,238 @@\n+Counter in file 0 4:9 -> 4:26, #1\n+Counter in file 0 5:8 -> 5:12, (#1 + 0)\n+Counter in file 0 5:13 -> 7:6, #2\n+Counter in file 0 10:9 -> 10:10, (#4 + #11)\n+Counter in file 0 10:16 -> 10:29, (#2 + 0)\n+Counter in file 0 11:9 -> 12:10, #4\n+Counter in file 0 13:15 -> 13:28, ((#2 + 0) - #3)\n+Counter in file 0 14:12 -> 14:25, #5\n+Counter in file 0 14:29 -> 14:42, (#5 - #13)\n+Counter in file 0 14:42 -> 14:43, (#13 + #14)\n+Counter in file 0 14:42 -> 14:43, ((#5 - #13) - #14)\n+Counter in file 0 14:46 -> 14:60, #21\n+Counter in file 0 14:60 -> 14:61, (#17 + #18)\n+Counter in file 0 14:60 -> 14:61, (#21 - #18)\n+Counter in file 0 14:61 -> 16:10, #22\n+Counter in file 0 16:10 -> 16:11, #23\n+Counter in file 0 17:9 -> 18:18, #11\n+Counter in file 0 20:9 -> 20:15, (((#2 + 0) - #3) - #5)\n+Counter in file 0 23:9 -> 23:26, ((#4 + #11) + 0)\n+Counter in file 0 24:8 -> 24:12, ((#4 + #11) + 0)\n+Counter in file 0 24:13 -> 26:6, #12\n+Counter in file 0 28:8 -> 28:21, (#12 + 0)\n+Counter in file 0 29:9 -> 29:23, #16\n+Counter in file 0 30:15 -> 30:28, ((#12 + 0) - #15)\n+Counter in file 0 31:12 -> 31:25, (((#12 + 0) - #15) - #8)\n+Counter in file 0 31:29 -> 31:42, ((((#12 + 0) - #15) - #8) - #24)\n+Counter in file 0 31:42 -> 31:43, (((((#12 + 0) - #15) - #8) - #24) - #25)\n+Counter in file 0 31:42 -> 31:43, (#24 + #25)\n+Counter in file 0 31:46 -> 31:60, #32\n+Counter in file 0 31:60 -> 31:61, (#28 + #29)\n+Counter in file 0 31:60 -> 31:61, (#32 - #29)\n+Counter in file 0 31:61 -> 33:10, #33\n+Counter in file 0 33:10 -> 33:11, #34\n+Counter in file 0 34:9 -> 34:23, #19\n+Counter in file 0 36:9 -> 36:15, #8\n+Counter in file 0 39:9 -> 39:26, (#16 + #19)\n+Counter in file 0 40:8 -> 40:12, ((#16 + #19) + 0)\n+Counter in file 0 40:13 -> 42:6, #20\n+Counter in file 0 44:9 -> 44:10, (#27 + #30)\n+Counter in file 0 44:16 -> 44:29, (#20 + 0)\n+Counter in file 0 45:9 -> 45:23, #27\n+Counter in file 0 46:15 -> 46:28, ((#20 + 0) - #26)\n+Counter in file 0 47:12 -> 47:25, (((#20 + 0) - #26) - #7)\n+Counter in file 0 47:29 -> 47:42, ((((#20 + 0) - #26) - #7) - #35)\n+Counter in file 0 47:42 -> 47:43, (#35 + #36)\n+Counter in file 0 47:42 -> 47:43, (((((#20 + 0) - #26) - #7) - #35) - #36)\n+Counter in file 0 47:46 -> 47:60, #41\n+Counter in file 0 47:60 -> 47:61, (#37 + #38)\n+Counter in file 0 47:60 -> 47:61, (#41 - #38)\n+Counter in file 0 47:61 -> 49:10, #42\n+Counter in file 0 49:10 -> 49:11, #43\n+Counter in file 0 50:9 -> 50:23, #30\n+Counter in file 0 52:13 -> 54:15, #7\n+Counter in file 0 57:9 -> 57:10, (#9 + #10)\n+Counter in file 0 57:16 -> 57:29, ((#27 + #30) + 0)\n+Counter in file 0 58:9 -> 58:23, #9\n+Counter in file 0 59:15 -> 59:28, ((#27 + #30) - #31)\n+Counter in file 0 60:12 -> 60:25, (((#27 + #30) - #31) - #6)\n+Counter in file 0 60:29 -> 60:42, ((((#27 + #30) - #31) - #6) - #39)\n+Counter in file 0 60:42 -> 60:43, (#39 + #40)\n+Counter in file 0 60:42 -> 60:43, (((((#27 + #30) - #31) - #6) - #39) - #40)\n+Counter in file 0 60:46 -> 60:60, #46\n+Counter in file 0 60:60 -> 60:61, (#46 - #45)\n+Counter in file 0 60:60 -> 60:61, (#44 + #45)\n+Counter in file 0 60:61 -> 62:10, #47\n+Counter in file 0 62:10 -> 62:11, #48\n+Counter in file 0 63:9 -> 63:23, #10\n+Counter in file 0 65:9 -> 65:15, #6\n+Counter in file 0 67:1 -> 67:2, ((#9 + #10) + (((#6 + #7) + #8) + (((#2 + 0) - #3) - #5)))\n+Emitting segments for file: ../coverage/conditions.rs\n+Combined regions:\n+  4:9 -> 4:26 (count=1)\n+  5:8 -> 5:12 (count=1)\n+  5:13 -> 7:6 (count=1)\n+  10:9 -> 10:10 (count=1)\n+  10:16 -> 10:29 (count=1)\n+  11:9 -> 12:10 (count=1)\n+  13:15 -> 13:28 (count=0)\n+  14:12 -> 14:25 (count=0)\n+  14:29 -> 14:42 (count=0)\n+  14:42 -> 14:43 (count=0)\n+  14:46 -> 14:60 (count=0)\n+  14:60 -> 14:61 (count=0)\n+  14:61 -> 16:10 (count=0)\n+  16:10 -> 16:11 (count=0)\n+  17:9 -> 18:18 (count=0)\n+  20:9 -> 20:15 (count=0)\n+  23:9 -> 23:26 (count=1)\n+  24:8 -> 24:12 (count=1)\n+  24:13 -> 26:6 (count=1)\n+  28:8 -> 28:21 (count=1)\n+  29:9 -> 29:23 (count=1)\n+  30:15 -> 30:28 (count=0)\n+  31:12 -> 31:25 (count=0)\n+  31:29 -> 31:42 (count=0)\n+  31:42 -> 31:43 (count=0)\n+  31:46 -> 31:60 (count=0)\n+  31:60 -> 31:61 (count=0)\n+  31:61 -> 33:10 (count=0)\n+  33:10 -> 33:11 (count=0)\n+  34:9 -> 34:23 (count=0)\n+  36:9 -> 36:15 (count=0)\n+  39:9 -> 39:26 (count=1)\n+  40:8 -> 40:12 (count=1)\n+  40:13 -> 42:6 (count=1)\n+  44:9 -> 44:10 (count=0)\n+  44:16 -> 44:29 (count=1)\n+  45:9 -> 45:23 (count=0)\n+  46:15 -> 46:28 (count=1)\n+  47:12 -> 47:25 (count=0)\n+  47:29 -> 47:42 (count=0)\n+  47:42 -> 47:43 (count=0)\n+  47:46 -> 47:60 (count=0)\n+  47:60 -> 47:61 (count=0)\n+  47:61 -> 49:10 (count=0)\n+  49:10 -> 49:11 (count=0)\n+  50:9 -> 50:23 (count=0)\n+  52:13 -> 54:15 (count=1)\n+  57:9 -> 57:10 (count=0)\n+  57:16 -> 57:29 (count=0)\n+  58:9 -> 58:23 (count=0)\n+  59:15 -> 59:28 (count=0)\n+  60:12 -> 60:25 (count=0)\n+  60:29 -> 60:42 (count=0)\n+  60:42 -> 60:43 (count=0)\n+  60:46 -> 60:60 (count=0)\n+  60:60 -> 60:61 (count=0)\n+  60:61 -> 62:10 (count=0)\n+  62:10 -> 62:11 (count=0)\n+  63:9 -> 63:23 (count=0)\n+  65:9 -> 65:15 (count=0)\n+  67:1 -> 67:2 (count=1)\n+Segment at 4:9 (count = 1), RegionEntry\n+Segment at 4:26 (count = 0), Skipped\n+Segment at 5:8 (count = 1), RegionEntry\n+Segment at 5:12 (count = 0), Skipped\n+Segment at 5:13 (count = 1), RegionEntry\n+Segment at 7:6 (count = 0), Skipped\n+Segment at 10:9 (count = 1), RegionEntry\n+Segment at 10:10 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 10:29 (count = 0), Skipped\n+Segment at 11:9 (count = 1), RegionEntry\n+Segment at 12:10 (count = 0), Skipped\n+Segment at 13:15 (count = 0), RegionEntry\n+Segment at 13:28 (count = 0), Skipped\n+Segment at 14:12 (count = 0), RegionEntry\n+Segment at 14:25 (count = 0), Skipped\n+Segment at 14:29 (count = 0), RegionEntry\n+Segment at 14:42 (count = 0), RegionEntry\n+Segment at 14:43 (count = 0), Skipped\n+Segment at 14:46 (count = 0), RegionEntry\n+Segment at 14:60 (count = 0), RegionEntry\n+Segment at 14:61 (count = 0), RegionEntry\n+Segment at 16:10 (count = 0), RegionEntry\n+Segment at 16:11 (count = 0), Skipped\n+Segment at 17:9 (count = 0), RegionEntry\n+Segment at 18:18 (count = 0), Skipped\n+Segment at 20:9 (count = 0), RegionEntry\n+Segment at 20:15 (count = 0), Skipped\n+Segment at 23:9 (count = 1), RegionEntry\n+Segment at 23:26 (count = 0), Skipped\n+Segment at 24:8 (count = 1), RegionEntry\n+Segment at 24:12 (count = 0), Skipped\n+Segment at 24:13 (count = 1), RegionEntry\n+Segment at 26:6 (count = 0), Skipped\n+Segment at 28:8 (count = 1), RegionEntry\n+Segment at 28:21 (count = 0), Skipped\n+Segment at 29:9 (count = 1), RegionEntry\n+Segment at 29:23 (count = 0), Skipped\n+Segment at 30:15 (count = 0), RegionEntry\n+Segment at 30:28 (count = 0), Skipped\n+Segment at 31:12 (count = 0), RegionEntry\n+Segment at 31:25 (count = 0), Skipped\n+Segment at 31:29 (count = 0), RegionEntry\n+Segment at 31:42 (count = 0), RegionEntry\n+Segment at 31:43 (count = 0), Skipped\n+Segment at 31:46 (count = 0), RegionEntry\n+Segment at 31:60 (count = 0), RegionEntry\n+Segment at 31:61 (count = 0), RegionEntry\n+Segment at 33:10 (count = 0), RegionEntry\n+Segment at 33:11 (count = 0), Skipped\n+Segment at 34:9 (count = 0), RegionEntry\n+Segment at 34:23 (count = 0), Skipped\n+Segment at 36:9 (count = 0), RegionEntry\n+Segment at 36:15 (count = 0), Skipped\n+Segment at 39:9 (count = 1), RegionEntry\n+Segment at 39:26 (count = 0), Skipped\n+Segment at 40:8 (count = 1), RegionEntry\n+Segment at 40:12 (count = 0), Skipped\n+Segment at 40:13 (count = 1), RegionEntry\n+Segment at 42:6 (count = 0), Skipped\n+Segment at 44:9 (count = 0), RegionEntry\n+Segment at 44:10 (count = 0), Skipped\n+Segment at 44:16 (count = 1), RegionEntry\n+Segment at 44:29 (count = 0), Skipped\n+Segment at 45:9 (count = 0), RegionEntry\n+Segment at 45:23 (count = 0), Skipped\n+Segment at 46:15 (count = 1), RegionEntry\n+Segment at 46:28 (count = 0), Skipped\n+Segment at 47:12 (count = 0), RegionEntry\n+Segment at 47:25 (count = 0), Skipped\n+Segment at 47:29 (count = 0), RegionEntry\n+Segment at 47:42 (count = 0), RegionEntry\n+Segment at 47:43 (count = 0), Skipped\n+Segment at 47:46 (count = 0), RegionEntry\n+Segment at 47:60 (count = 0), RegionEntry\n+Segment at 47:61 (count = 0), RegionEntry\n+Segment at 49:10 (count = 0), RegionEntry\n+Segment at 49:11 (count = 0), Skipped\n+Segment at 50:9 (count = 0), RegionEntry\n+Segment at 50:23 (count = 0), Skipped\n+Segment at 52:13 (count = 1), RegionEntry\n+Segment at 54:15 (count = 0), Skipped\n+Segment at 57:9 (count = 0), RegionEntry\n+Segment at 57:10 (count = 0), Skipped\n+Segment at 57:16 (count = 0), RegionEntry\n+Segment at 57:29 (count = 0), Skipped\n+Segment at 58:9 (count = 0), RegionEntry\n+Segment at 58:23 (count = 0), Skipped\n+Segment at 59:15 (count = 0), RegionEntry\n+Segment at 59:28 (count = 0), Skipped\n+Segment at 60:12 (count = 0), RegionEntry\n+Segment at 60:25 (count = 0), Skipped\n+Segment at 60:29 (count = 0), RegionEntry\n+Segment at 60:42 (count = 0), RegionEntry\n+Segment at 60:43 (count = 0), Skipped\n+Segment at 60:46 (count = 0), RegionEntry\n+Segment at 60:60 (count = 0), RegionEntry\n+Segment at 60:61 (count = 0), RegionEntry\n+Segment at 62:10 (count = 0), RegionEntry\n+Segment at 62:11 (count = 0), Skipped\n+Segment at 63:9 (count = 0), RegionEntry\n+Segment at 63:23 (count = 0), Skipped\n+Segment at 65:9 (count = 0), RegionEntry\n+Segment at 65:15 (count = 0), Skipped\n+Segment at 67:1 (count = 1), RegionEntry\n+Segment at 67:2 (count = 0), Skipped"}, {"sha": "375025fe8bcc2fefdf4b081025bab03d608ac582", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.drop_trait.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.drop_trait.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,22 @@\n+Counter in file 0 9:24 -> 11:6, #1\n+Counter in file 0 15:9 -> 17:42, #1\n+Counter in file 0 19:8 -> 19:12, (#1 + 0)\n+Counter in file 0 20:9 -> 21:22, #2\n+Counter in file 0 27:1 -> 27:2, (#2 + 0)\n+Emitting segments for file: ../coverage/drop_trait.rs\n+Combined regions:\n+  9:24 -> 11:6 (count=2)\n+  15:9 -> 17:42 (count=1)\n+  19:8 -> 19:12 (count=1)\n+  20:9 -> 21:22 (count=1)\n+  27:1 -> 27:2 (count=1)\n+Segment at 9:24 (count = 2), RegionEntry\n+Segment at 11:6 (count = 0), Skipped\n+Segment at 15:9 (count = 1), RegionEntry\n+Segment at 17:42 (count = 0), Skipped\n+Segment at 19:8 (count = 1), RegionEntry\n+Segment at 19:12 (count = 0), Skipped\n+Segment at 20:9 (count = 1), RegionEntry\n+Segment at 21:22 (count = 0), Skipped\n+Segment at 27:1 (count = 1), RegionEntry\n+Segment at 27:2 (count = 0), Skipped"}, {"sha": "013a69ed3983a35ce18506d14124930ac71b9599", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.generics.txt", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.generics.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,48 @@\n+Counter in file 0 17:24 -> 19:6, #1\n+Counter in file 0 17:24 -> 19:6, #1\n+Counter in file 0 23:9 -> 28:28, #1\n+Counter in file 0 30:8 -> 30:12, (#1 + 0)\n+Counter in file 0 31:9 -> 32:22, #2\n+Counter in file 0 38:1 -> 38:2, (#2 + 0)\n+Counter in file 0 10:49 -> 12:6, #1\n+Counter in file 0 10:49 -> 12:6, #1\n+Emitting segments for file: ../coverage/generics.rs\n+Combined regions:\n+  10:49 -> 12:6 (count=3)\n+  17:24 -> 19:6 (count=2)\n+  23:9 -> 28:28 (count=1)\n+  30:8 -> 30:12 (count=1)\n+  31:9 -> 32:22 (count=1)\n+  38:1 -> 38:2 (count=1)\n+Segment at 10:49 (count = 3), RegionEntry\n+Segment at 12:6 (count = 0), Skipped\n+Segment at 17:24 (count = 2), RegionEntry\n+Segment at 19:6 (count = 0), Skipped\n+Segment at 23:9 (count = 1), RegionEntry\n+Segment at 28:28 (count = 0), Skipped\n+Segment at 30:8 (count = 1), RegionEntry\n+Segment at 30:12 (count = 0), Skipped\n+Segment at 31:9 (count = 1), RegionEntry\n+Segment at 32:22 (count = 0), Skipped\n+Segment at 38:1 (count = 1), RegionEntry\n+Segment at 38:2 (count = 0), Skipped\n+Emitting segments for function: _RNvMCs4fqI2P2rA04_8genericsINtB2_8FireworkdE12set_strengthB2_\n+Combined regions:\n+  10:49 -> 12:6 (count=2)\n+Segment at 10:49 (count = 2), RegionEntry\n+Segment at 12:6 (count = 0), Skipped\n+Emitting segments for function: _RNvMCs4fqI2P2rA04_8genericsINtB2_8FireworklE12set_strengthB2_\n+Combined regions:\n+  10:49 -> 12:6 (count=1)\n+Segment at 10:49 (count = 1), RegionEntry\n+Segment at 12:6 (count = 0), Skipped\n+Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworklENtNtNtCs7f2nZg1zwMz_4core3ops4drop4Drop4dropB4_\n+Combined regions:\n+  17:24 -> 19:6 (count=1)\n+Segment at 17:24 (count = 1), RegionEntry\n+Segment at 19:6 (count = 0), Skipped\n+Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworkdENtNtNtCs7f2nZg1zwMz_4core3ops4drop4Drop4dropB4_\n+Combined regions:\n+  17:24 -> 19:6 (count=1)\n+Segment at 17:24 (count = 1), RegionEntry\n+Segment at 19:6 (count = 0), Skipped"}, {"sha": "c2bef365ea9d8fb437fd000aed438930974d925d", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.if.txt", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,21 @@\n+Counter in file 0 8:5 -> 18:10, #1\n+Counter in file 0 21:9 -> 21:16, (#1 + 0)\n+Counter in file 0 22:5 -> 27:6, #2\n+Counter in file 0 27:6 -> 27:7, (#1 - #2)\n+Counter in file 0 28:1 -> 28:2, (#2 + (#1 - #2))\n+Emitting segments for file: ../coverage/if.rs\n+Combined regions:\n+  8:5 -> 18:10 (count=1)\n+  21:9 -> 21:16 (count=1)\n+  22:5 -> 27:6 (count=1)\n+  27:6 -> 27:7 (count=0)\n+  28:1 -> 28:2 (count=1)\n+Segment at 8:5 (count = 1), RegionEntry\n+Segment at 18:10 (count = 0), Skipped\n+Segment at 21:9 (count = 1), RegionEntry\n+Segment at 21:16 (count = 0), Skipped\n+Segment at 22:5 (count = 1), RegionEntry\n+Segment at 27:6 (count = 0), RegionEntry\n+Segment at 27:7 (count = 0), Skipped\n+Segment at 28:1 (count = 1), RegionEntry\n+Segment at 28:2 (count = 0), Skipped"}, {"sha": "faf5c094bbaaa14b2e8cb4baebc89db4fe38afba", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.if_else.txt", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.if_else.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,30 @@\n+Counter in file 0 7:9 -> 11:16, #1\n+Counter in file 0 12:5 -> 17:6, #2\n+Counter in file 0 20:9 -> 22:16, (#1 - #2)\n+Counter in file 0 26:9 -> 26:16, (#2 + (#1 - #2))\n+Counter in file 0 27:5 -> 32:6, #3\n+Counter in file 0 34:5 -> 39:6, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 40:1 -> 40:2, (#3 + ((#2 + (#1 - #2)) - #3))\n+Emitting segments for file: ../coverage/if_else.rs\n+Combined regions:\n+  7:9 -> 11:16 (count=1)\n+  12:5 -> 17:6 (count=1)\n+  20:9 -> 22:16 (count=0)\n+  26:9 -> 26:16 (count=1)\n+  27:5 -> 32:6 (count=1)\n+  34:5 -> 39:6 (count=0)\n+  40:1 -> 40:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 11:16 (count = 0), Skipped\n+Segment at 12:5 (count = 1), RegionEntry\n+Segment at 17:6 (count = 0), Skipped\n+Segment at 20:9 (count = 0), RegionEntry\n+Segment at 22:16 (count = 0), Skipped\n+Segment at 26:9 (count = 1), RegionEntry\n+Segment at 26:16 (count = 0), Skipped\n+Segment at 27:5 (count = 1), RegionEntry\n+Segment at 32:6 (count = 0), Skipped\n+Segment at 34:5 (count = 0), RegionEntry\n+Segment at 39:6 (count = 0), Skipped\n+Segment at 40:1 (count = 1), RegionEntry\n+Segment at 40:2 (count = 0), Skipped"}, {"sha": "65cd6481af4cc86881793d6f02c081e095ae14ee", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.inner_items.txt", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.inner_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.inner_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.inner_items.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,60 @@\n+Counter in file 0 19:13 -> 19:18, #1\n+Counter in file 0 20:13 -> 20:14, #2\n+Counter in file 0 20:17 -> 20:22, (#1 + 0)\n+Counter in file 0 21:9 -> 22:6, (#2 + 0)\n+Counter in file 0 7:9 -> 9:26, #1\n+Counter in file 0 10:8 -> 10:15, (#1 + 0)\n+Counter in file 0 10:16 -> 12:6, #2\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 48:8 -> 48:15, (#2 + (#1 - #2))\n+Counter in file 0 48:16 -> 50:6, #3\n+Counter in file 0 50:6 -> 50:7, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 52:9 -> 57:2, (#3 + ((#2 + (#1 - #2)) - #3))\n+Counter in file 0 33:42 -> 36:10, #1\n+Counter in file 0 41:37 -> 41:41, #1\n+Counter in file 0 42:13 -> 43:10, #2\n+Emitting segments for file: ../coverage/inner_items.rs\n+Combined regions:\n+  7:9 -> 9:26 (count=1)\n+  10:8 -> 10:15 (count=1)\n+  10:16 -> 12:6 (count=1)\n+  12:6 -> 12:7 (count=0)\n+  19:13 -> 19:18 (count=3)\n+  20:13 -> 20:14 (count=3)\n+  20:17 -> 20:22 (count=3)\n+  21:9 -> 22:6 (count=3)\n+  33:42 -> 36:10 (count=1)\n+  41:37 -> 41:41 (count=1)\n+  42:13 -> 43:10 (count=1)\n+  48:8 -> 48:15 (count=1)\n+  48:16 -> 50:6 (count=1)\n+  50:6 -> 50:7 (count=0)\n+  52:9 -> 57:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:26 (count = 0), Skipped\n+Segment at 10:8 (count = 1), RegionEntry\n+Segment at 10:15 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 12:6 (count = 0), RegionEntry\n+Segment at 12:7 (count = 0), Skipped\n+Segment at 19:13 (count = 3), RegionEntry\n+Segment at 19:18 (count = 0), Skipped\n+Segment at 20:13 (count = 3), RegionEntry\n+Segment at 20:14 (count = 0), Skipped\n+Segment at 20:17 (count = 3), RegionEntry\n+Segment at 20:22 (count = 0), Skipped\n+Segment at 21:9 (count = 3), RegionEntry\n+Segment at 22:6 (count = 0), Skipped\n+Segment at 33:42 (count = 1), RegionEntry\n+Segment at 36:10 (count = 0), Skipped\n+Segment at 41:37 (count = 1), RegionEntry\n+Segment at 41:41 (count = 0), Skipped\n+Segment at 42:13 (count = 1), RegionEntry\n+Segment at 43:10 (count = 0), Skipped\n+Segment at 48:8 (count = 1), RegionEntry\n+Segment at 48:15 (count = 0), Skipped\n+Segment at 48:16 (count = 1), RegionEntry\n+Segment at 50:6 (count = 0), RegionEntry\n+Segment at 50:7 (count = 0), Skipped\n+Segment at 52:9 (count = 1), RegionEntry\n+Segment at 57:2 (count = 0), Skipped"}, {"sha": "8e56d79d9d2aa1af5d148cd416b7129f08e2388c", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.lazy_boolean.txt", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.lazy_boolean.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,131 @@\n+Counter in file 0 7:9 -> 9:42, #1\n+Counter in file 0 10:8 -> 10:15, (#1 + 0)\n+Counter in file 0 10:16 -> 14:6, #2\n+Counter in file 0 14:6 -> 14:7, (#1 - #2)\n+Counter in file 0 16:9 -> 16:17, ((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4))\n+Counter in file 0 18:13 -> 18:18, (#2 + (#1 - #2))\n+Counter in file 0 20:13 -> 20:18, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 20:18 -> 20:19, (#3 + #4)\n+Counter in file 0 20:18 -> 20:19, (((#2 + (#1 - #2)) - #3) - #4)\n+Counter in file 0 23:9 -> 23:17, ((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6))\n+Counter in file 0 25:13 -> 25:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) + 0)\n+Counter in file 0 27:13 -> 27:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5)\n+Counter in file 0 27:18 -> 27:19, (#5 + #6)\n+Counter in file 0 27:18 -> 27:19, ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)\n+Counter in file 0 29:9 -> 29:17, ((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8))\n+Counter in file 0 29:20 -> 29:25, (((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) + 0)\n+Counter in file 0 29:29 -> 29:34, #7\n+Counter in file 0 29:34 -> 29:35, ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)\n+Counter in file 0 29:34 -> 29:35, (#7 - #8)\n+Counter in file 0 30:9 -> 30:17, ((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10))\n+Counter in file 0 30:20 -> 30:25, (((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) + 0)\n+Counter in file 0 30:29 -> 30:34, #9\n+Counter in file 0 30:34 -> 30:35, ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)\n+Counter in file 0 30:34 -> 30:35, (#9 - #10)\n+Counter in file 0 33:9 -> 34:16, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) + 0)\n+Counter in file 0 35:5 -> 38:6, #11\n+Counter in file 0 38:6 -> 38:7, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)\n+Counter in file 0 41:9 -> 41:16, (#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11))\n+Counter in file 0 42:5 -> 45:6, #12\n+Counter in file 0 47:5 -> 50:6, ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)\n+Counter in file 0 52:8 -> 52:16, (#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12))\n+Counter in file 0 52:17 -> 54:6, #13\n+Counter in file 0 54:6 -> 54:7, ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)\n+Counter in file 0 56:8 -> 56:15, (#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13))\n+Counter in file 0 56:16 -> 58:6, #14\n+Counter in file 0 58:12 -> 60:6, ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14)\n+Counter in file 0 61:1 -> 61:2, (#14 + ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14))\n+Emitting segments for file: ../coverage/lazy_boolean.rs\n+Combined regions:\n+  7:9 -> 9:42 (count=1)\n+  10:8 -> 10:15 (count=1)\n+  10:16 -> 14:6 (count=1)\n+  14:6 -> 14:7 (count=0)\n+  16:9 -> 16:17 (count=1)\n+  18:13 -> 18:18 (count=1)\n+  20:13 -> 20:18 (count=0)\n+  20:18 -> 20:19 (count=1)\n+  23:9 -> 23:17 (count=1)\n+  25:13 -> 25:18 (count=1)\n+  27:13 -> 27:18 (count=1)\n+  27:18 -> 27:19 (count=1)\n+  29:9 -> 29:17 (count=1)\n+  29:20 -> 29:25 (count=1)\n+  29:29 -> 29:34 (count=1)\n+  29:34 -> 29:35 (count=1)\n+  30:9 -> 30:17 (count=1)\n+  30:20 -> 30:25 (count=1)\n+  30:29 -> 30:34 (count=0)\n+  30:34 -> 30:35 (count=1)\n+  33:9 -> 34:16 (count=1)\n+  35:5 -> 38:6 (count=0)\n+  38:6 -> 38:7 (count=1)\n+  41:9 -> 41:16 (count=1)\n+  42:5 -> 45:6 (count=1)\n+  47:5 -> 50:6 (count=0)\n+  52:8 -> 52:16 (count=1)\n+  52:17 -> 54:6 (count=0)\n+  54:6 -> 54:7 (count=1)\n+  56:8 -> 56:15 (count=1)\n+  56:16 -> 58:6 (count=1)\n+  58:12 -> 60:6 (count=0)\n+  61:1 -> 61:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:42 (count = 0), Skipped\n+Segment at 10:8 (count = 1), RegionEntry\n+Segment at 10:15 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 14:6 (count = 0), RegionEntry\n+Segment at 14:7 (count = 0), Skipped\n+Segment at 16:9 (count = 1), RegionEntry\n+Segment at 16:17 (count = 0), Skipped\n+Segment at 18:13 (count = 1), RegionEntry\n+Segment at 18:18 (count = 0), Skipped\n+Segment at 20:13 (count = 0), RegionEntry\n+Segment at 20:18 (count = 1), RegionEntry\n+Segment at 20:19 (count = 0), Skipped\n+Segment at 23:9 (count = 1), RegionEntry\n+Segment at 23:17 (count = 0), Skipped\n+Segment at 25:13 (count = 1), RegionEntry\n+Segment at 25:18 (count = 0), Skipped\n+Segment at 27:13 (count = 1), RegionEntry\n+Segment at 27:18 (count = 1), RegionEntry\n+Segment at 27:19 (count = 0), Skipped\n+Segment at 29:9 (count = 1), RegionEntry\n+Segment at 29:17 (count = 0), Skipped\n+Segment at 29:20 (count = 1), RegionEntry\n+Segment at 29:25 (count = 0), Skipped\n+Segment at 29:29 (count = 1), RegionEntry\n+Segment at 29:34 (count = 1), RegionEntry\n+Segment at 29:35 (count = 0), Skipped\n+Segment at 30:9 (count = 1), RegionEntry\n+Segment at 30:17 (count = 0), Skipped\n+Segment at 30:20 (count = 1), RegionEntry\n+Segment at 30:25 (count = 0), Skipped\n+Segment at 30:29 (count = 0), RegionEntry\n+Segment at 30:34 (count = 1), RegionEntry\n+Segment at 30:35 (count = 0), Skipped\n+Segment at 33:9 (count = 1), RegionEntry\n+Segment at 34:16 (count = 0), Skipped\n+Segment at 35:5 (count = 0), RegionEntry\n+Segment at 38:6 (count = 1), RegionEntry\n+Segment at 38:7 (count = 0), Skipped\n+Segment at 41:9 (count = 1), RegionEntry\n+Segment at 41:16 (count = 0), Skipped\n+Segment at 42:5 (count = 1), RegionEntry\n+Segment at 45:6 (count = 0), Skipped\n+Segment at 47:5 (count = 0), RegionEntry\n+Segment at 50:6 (count = 0), Skipped\n+Segment at 52:8 (count = 1), RegionEntry\n+Segment at 52:16 (count = 0), Skipped\n+Segment at 52:17 (count = 0), RegionEntry\n+Segment at 54:6 (count = 1), RegionEntry\n+Segment at 54:7 (count = 0), Skipped\n+Segment at 56:8 (count = 1), RegionEntry\n+Segment at 56:15 (count = 0), Skipped\n+Segment at 56:16 (count = 1), RegionEntry\n+Segment at 58:6 (count = 0), Skipped\n+Segment at 58:12 (count = 0), RegionEntry\n+Segment at 60:6 (count = 0), Skipped\n+Segment at 61:1 (count = 1), RegionEntry\n+Segment at 61:2 (count = 0), Skipped"}, {"sha": "a6144b8072aceb9c512342dd35747a3a8639129e", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.loop_break_value.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loop_break_value.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loop_break_value.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loop_break_value.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,6 @@\n+Counter in file 0 3:11 -> 13:2, #1\n+Emitting segments for file: ../coverage/loop_break_value.rs\n+Combined regions:\n+  3:11 -> 13:2 (count=1)\n+Segment at 3:11 (count = 1), RegionEntry\n+Segment at 13:2 (count = 0), Skipped"}, {"sha": "d8af6998964cf5c60323e20f09bf5f4685033815", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.loops_branches.txt", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.loops_branches.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,37 @@\n+Counter in file 0 10:12 -> 10:16, #1\n+Counter in file 0 11:16 -> 11:21, #2\n+Counter in file 0 14:14 -> 14:15, (#2 - #5)\n+Counter in file 0 15:13 -> 15:31, (0 + (#2 - #5))\n+Counter in file 0 15:31 -> 15:32, #4\n+Counter in file 0 17:10 -> 17:11, #3\n+Counter in file 0 18:9 -> 18:15, (#3 + 0)\n+Counter in file 0 19:5 -> 19:6, (#4 + (#3 + 0))\n+Counter in file 0 22:11 -> 25:2, #1\n+Emitting segments for file: ../coverage/loops_branches.rs\n+Combined regions:\n+  10:12 -> 10:16 (count=1)\n+  11:16 -> 11:21 (count=1)\n+  14:14 -> 14:15 (count=1)\n+  15:13 -> 15:31 (count=1)\n+  15:31 -> 15:32 (count=0)\n+  17:10 -> 17:11 (count=1)\n+  18:9 -> 18:15 (count=1)\n+  19:5 -> 19:6 (count=1)\n+  22:11 -> 25:2 (count=1)\n+Segment at 10:12 (count = 1), RegionEntry\n+Segment at 10:16 (count = 0), Skipped\n+Segment at 11:16 (count = 1), RegionEntry\n+Segment at 11:21 (count = 0), Skipped\n+Segment at 14:14 (count = 1), RegionEntry\n+Segment at 14:15 (count = 0), Skipped\n+Segment at 15:13 (count = 1), RegionEntry\n+Segment at 15:31 (count = 0), RegionEntry\n+Segment at 15:32 (count = 0), Skipped\n+Segment at 17:10 (count = 1), RegionEntry\n+Segment at 17:11 (count = 0), Skipped\n+Segment at 18:9 (count = 1), RegionEntry\n+Segment at 18:15 (count = 0), Skipped\n+Segment at 19:5 (count = 1), RegionEntry\n+Segment at 19:6 (count = 0), Skipped\n+Segment at 22:11 (count = 1), RegionEntry\n+Segment at 25:2 (count = 0), Skipped"}, {"sha": "f503007353319e2738be05f89f4fa203e4ca8806", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.nested_loops.txt", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.nested_loops.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,73 @@\n+Counter in file 0 2:9 -> 3:27, #1\n+Counter in file 0 5:19 -> 5:32, (#1 + #2)\n+Counter in file 0 6:13 -> 7:24, ((#1 + #2) - #3)\n+Counter in file 0 8:13 -> 8:14, ((((#1 + #2) - #3) + (#5 + #6)) - #7)\n+Counter in file 0 8:18 -> 8:23, (((#1 + #2) - #3) + (#5 + #6))\n+Counter in file 0 9:16 -> 9:22, (((((#1 + #2) - #3) + (#5 + #6)) - #7) + 0)\n+Counter in file 0 10:17 -> 10:22, #8\n+Counter in file 0 12:13 -> 12:19, #9\n+Counter in file 0 13:13 -> 13:19, #10\n+Counter in file 0 14:16 -> 14:22, (#10 + 0)\n+Counter in file 0 15:17 -> 16:27, #11\n+Counter in file 0 17:21 -> 17:33, #4\n+Counter in file 0 19:21 -> 21:14, #5\n+Counter in file 0 21:14 -> 21:15, #6\n+Counter in file 0 22:10 -> 22:11, (#5 + #6)\n+Counter in file 0 23:9 -> 23:23, #2\n+Counter in file 0 24:6 -> 24:7, #3\n+Counter in file 0 25:1 -> 25:2, (#4 + #3)\n+Emitting segments for file: ../coverage/nested_loops.rs\n+Combined regions:\n+  2:9 -> 3:27 (count=1)\n+  5:19 -> 5:32 (count=1)\n+  6:13 -> 7:24 (count=1)\n+  8:13 -> 8:14 (count=3)\n+  8:18 -> 8:23 (count=3)\n+  9:16 -> 9:22 (count=3)\n+  10:17 -> 10:22 (count=0)\n+  12:13 -> 12:19 (count=3)\n+  13:13 -> 13:19 (count=3)\n+  14:16 -> 14:22 (count=3)\n+  15:17 -> 16:27 (count=1)\n+  17:21 -> 17:33 (count=1)\n+  19:21 -> 21:14 (count=0)\n+  21:14 -> 21:15 (count=2)\n+  22:10 -> 22:11 (count=2)\n+  23:9 -> 23:23 (count=0)\n+  24:6 -> 24:7 (count=0)\n+  25:1 -> 25:2 (count=1)\n+Segment at 2:9 (count = 1), RegionEntry\n+Segment at 3:27 (count = 0), Skipped\n+Segment at 5:19 (count = 1), RegionEntry\n+Segment at 5:32 (count = 0), Skipped\n+Segment at 6:13 (count = 1), RegionEntry\n+Segment at 7:24 (count = 0), Skipped\n+Segment at 8:13 (count = 3), RegionEntry\n+Segment at 8:14 (count = 0), Skipped\n+Segment at 8:18 (count = 3), RegionEntry\n+Segment at 8:23 (count = 0), Skipped\n+Segment at 9:16 (count = 3), RegionEntry\n+Segment at 9:22 (count = 0), Skipped\n+Segment at 10:17 (count = 0), RegionEntry\n+Segment at 10:22 (count = 0), Skipped\n+Segment at 12:13 (count = 3), RegionEntry\n+Segment at 12:19 (count = 0), Skipped\n+Segment at 13:13 (count = 3), RegionEntry\n+Segment at 13:19 (count = 0), Skipped\n+Segment at 14:16 (count = 3), RegionEntry\n+Segment at 14:22 (count = 0), Skipped\n+Segment at 15:17 (count = 1), RegionEntry\n+Segment at 16:27 (count = 0), Skipped\n+Segment at 17:21 (count = 1), RegionEntry\n+Segment at 17:33 (count = 0), Skipped\n+Segment at 19:21 (count = 0), RegionEntry\n+Segment at 21:14 (count = 2), RegionEntry\n+Segment at 21:15 (count = 0), Skipped\n+Segment at 22:10 (count = 2), RegionEntry\n+Segment at 22:11 (count = 0), Skipped\n+Segment at 23:9 (count = 0), RegionEntry\n+Segment at 23:23 (count = 0), Skipped\n+Segment at 24:6 (count = 0), RegionEntry\n+Segment at 24:7 (count = 0), Skipped\n+Segment at 25:1 (count = 1), RegionEntry\n+Segment at 25:2 (count = 0), Skipped"}, {"sha": "cdef821c0aef29b36dc7da250238158acfaebb1f", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.partial_eq.txt", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.partial_eq.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,27 @@\n+Counter in file 0 7:5 -> 7:6, #1\n+Counter in file 0 21:11 -> 26:2, #1\n+Counter in file 0 4:17 -> 4:22, #1\n+Counter in file 0 13:9 -> 18:6, #1\n+Counter in file 0 4:39 -> 4:40, #1\n+Counter in file 0 4:48 -> 4:49, (#1 + 0)\n+Counter in file 0 8:5 -> 8:17, #1\n+Emitting segments for file: ../coverage/partial_eq.rs\n+Combined regions:\n+  4:17 -> 4:22 (count=2)\n+  4:39 -> 4:40 (count=1)\n+  4:48 -> 4:49 (count=1)\n+  7:5 -> 7:6 (count=1)\n+  13:9 -> 18:6 (count=2)\n+  21:11 -> 26:2 (count=1)\n+Segment at 4:17 (count = 2), RegionEntry\n+Segment at 4:22 (count = 0), Skipped\n+Segment at 4:39 (count = 1), RegionEntry\n+Segment at 4:40 (count = 0), Skipped\n+Segment at 4:48 (count = 1), RegionEntry\n+Segment at 4:49 (count = 0), Skipped\n+Segment at 7:5 (count = 1), RegionEntry\n+Segment at 7:6 (count = 0), Skipped\n+Segment at 13:9 (count = 2), RegionEntry\n+Segment at 18:6 (count = 0), Skipped\n+Segment at 21:11 (count = 1), RegionEntry\n+Segment at 26:2 (count = 0), Skipped"}, {"sha": "255173e5534d194a573bdf2667d8ccf23c65a4cd", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.simple_loop.txt", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,37 @@\n+Counter in file 0 7:9 -> 9:26, #1\n+Counter in file 0 12:9 -> 12:16, (#1 + 0)\n+Counter in file 0 13:5 -> 18:6, #2\n+Counter in file 0 18:6 -> 18:7, (#1 - #2)\n+Counter in file 0 23:13 -> 25:14, ((#2 + (#1 - #2)) + #3)\n+Counter in file 0 27:13 -> 27:18, #4\n+Counter in file 0 30:9 -> 32:10, #3\n+Counter in file 0 34:6 -> 34:7, (#2 + (#1 - #2))\n+Counter in file 0 35:1 -> 35:2, (#4 + 0)\n+Emitting segments for file: ../coverage/simple_loop.rs\n+Combined regions:\n+  7:9 -> 9:26 (count=1)\n+  12:9 -> 12:16 (count=1)\n+  13:5 -> 18:6 (count=1)\n+  18:6 -> 18:7 (count=0)\n+  23:13 -> 25:14 (count=11)\n+  27:13 -> 27:18 (count=1)\n+  30:9 -> 32:10 (count=10)\n+  34:6 -> 34:7 (count=1)\n+  35:1 -> 35:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:26 (count = 0), Skipped\n+Segment at 12:9 (count = 1), RegionEntry\n+Segment at 12:16 (count = 0), Skipped\n+Segment at 13:5 (count = 1), RegionEntry\n+Segment at 18:6 (count = 0), RegionEntry\n+Segment at 18:7 (count = 0), Skipped\n+Segment at 23:13 (count = 11), RegionEntry\n+Segment at 25:14 (count = 0), Skipped\n+Segment at 27:13 (count = 1), RegionEntry\n+Segment at 27:18 (count = 0), Skipped\n+Segment at 30:9 (count = 10), RegionEntry\n+Segment at 32:10 (count = 0), Skipped\n+Segment at 34:6 (count = 1), RegionEntry\n+Segment at 34:7 (count = 0), Skipped\n+Segment at 35:1 (count = 1), RegionEntry\n+Segment at 35:2 (count = 0), Skipped"}, {"sha": "1682a379bc0ff0c60e5c378cfcead525c38c4886", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.simple_match.txt", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_match.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_match.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.simple_match.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,57 @@\n+Counter in file 0 7:9 -> 9:26, #1\n+Counter in file 0 10:8 -> 10:15, (#1 + 0)\n+Counter in file 0 10:16 -> 12:6, #2\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 15:9 -> 15:10, (((#2 + (#1 - #2)) + (#3 + #4)) - #5)\n+Counter in file 0 17:9 -> 17:13, ((#2 + (#1 - #2)) + (#3 + #4))\n+Counter in file 0 22:13 -> 22:22, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 24:13 -> 24:14, #3\n+Counter in file 0 26:17 -> 28:18, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 28:18 -> 28:19, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) - #3)\n+Counter in file 0 30:13 -> 37:14, (#3 + 0)\n+Counter in file 0 40:13 -> 40:15, #4\n+Counter in file 0 42:6 -> 42:7, (#2 + (#1 - #2))\n+Counter in file 0 42:6 -> 42:7, (#3 + #4)\n+Counter in file 0 43:1 -> 43:2, #5\n+Emitting segments for file: ../coverage/simple_match.rs\n+Combined regions:\n+  7:9 -> 9:26 (count=1)\n+  10:8 -> 10:15 (count=1)\n+  10:16 -> 12:6 (count=1)\n+  12:6 -> 12:7 (count=0)\n+  15:9 -> 15:10 (count=2)\n+  17:9 -> 17:13 (count=3)\n+  22:13 -> 22:22 (count=2)\n+  24:13 -> 24:14 (count=1)\n+  26:17 -> 28:18 (count=2)\n+  28:18 -> 28:19 (count=1)\n+  30:13 -> 37:14 (count=1)\n+  40:13 -> 40:15 (count=1)\n+  42:6 -> 42:7 (count=3)\n+  43:1 -> 43:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:26 (count = 0), Skipped\n+Segment at 10:8 (count = 1), RegionEntry\n+Segment at 10:15 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 12:6 (count = 0), RegionEntry\n+Segment at 12:7 (count = 0), Skipped\n+Segment at 15:9 (count = 2), RegionEntry\n+Segment at 15:10 (count = 0), Skipped\n+Segment at 17:9 (count = 3), RegionEntry\n+Segment at 17:13 (count = 0), Skipped\n+Segment at 22:13 (count = 2), RegionEntry\n+Segment at 22:22 (count = 0), Skipped\n+Segment at 24:13 (count = 1), RegionEntry\n+Segment at 24:14 (count = 0), Skipped\n+Segment at 26:17 (count = 2), RegionEntry\n+Segment at 28:18 (count = 1), RegionEntry\n+Segment at 28:19 (count = 0), Skipped\n+Segment at 30:13 (count = 1), RegionEntry\n+Segment at 37:14 (count = 0), Skipped\n+Segment at 40:13 (count = 1), RegionEntry\n+Segment at 40:15 (count = 0), Skipped\n+Segment at 42:6 (count = 3), RegionEntry\n+Segment at 42:7 (count = 0), Skipped\n+Segment at 43:1 (count = 1), RegionEntry\n+Segment at 43:2 (count = 0), Skipped"}, {"sha": "5887658fe67a2fc3ffe04be831fefc25e062c73f", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.tight_inf_loop.txt", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.tight_inf_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.tight_inf_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.tight_inf_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,10 @@\n+Counter in file 0 2:8 -> 2:13, #1\n+Counter in file 0 5:1 -> 5:2, (#1 - #2)\n+Emitting segments for file: ../coverage/tight_inf_loop.rs\n+Combined regions:\n+  2:8 -> 2:13 (count=1)\n+  5:1 -> 5:2 (count=1)\n+Segment at 2:8 (count = 1), RegionEntry\n+Segment at 2:13 (count = 0), Skipped\n+Segment at 5:1 (count = 1), RegionEntry\n+Segment at 5:2 (count = 0), Skipped"}, {"sha": "a317cd792910dba7b07fab5192a00cc7f3c042b4", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.try_error_result.txt", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.try_error_result.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,72 @@\n+Counter in file 0 13:9 -> 14:23, #1\n+Counter in file 0 17:9 -> 17:10, ((#1 + (#2 + #3)) - #4)\n+Counter in file 0 19:9 -> 19:14, (#1 + (#2 + #3))\n+Counter in file 0 21:9 -> 25:26, #8\n+Counter in file 0 27:13 -> 27:41, #9\n+Counter in file 0 27:41 -> 27:42, #5\n+Counter in file 0 28:13 -> 28:42, (#9 - #5)\n+Counter in file 0 28:42 -> 28:43, #6\n+Counter in file 0 32:13 -> 32:42, (#8 - #9)\n+Counter in file 0 32:42 -> 32:43, #7\n+Counter in file 0 33:10 -> 33:11, #2\n+Counter in file 0 33:10 -> 33:11, #3\n+Counter in file 0 34:6 -> 34:7, (#2 + #3)\n+Counter in file 0 35:5 -> 35:11, #4\n+Counter in file 0 36:1 -> 36:2, ((#5 + (#6 + #7)) + #4)\n+Counter in file 0 5:8 -> 5:20, #1\n+Counter in file 0 6:9 -> 6:16, #2\n+Counter in file 0 8:9 -> 8:15, (#1 - #2)\n+Counter in file 0 10:1 -> 10:2, (#2 + (#1 - #2))\n+Emitting segments for file: ../coverage/try_error_result.rs\n+Combined regions:\n+  5:8 -> 5:20 (count=6)\n+  6:9 -> 6:16 (count=1)\n+  8:9 -> 8:15 (count=5)\n+  10:1 -> 10:2 (count=6)\n+  13:9 -> 14:23 (count=1)\n+  17:9 -> 17:10 (count=6)\n+  19:9 -> 19:14 (count=6)\n+  21:9 -> 25:26 (count=6)\n+  27:13 -> 27:41 (count=1)\n+  27:41 -> 27:42 (count=1)\n+  28:13 -> 28:42 (count=0)\n+  28:42 -> 28:43 (count=0)\n+  32:13 -> 32:42 (count=5)\n+  32:42 -> 32:43 (count=0)\n+  33:10 -> 33:11 (count=5)\n+  34:6 -> 34:7 (count=5)\n+  35:5 -> 35:11 (count=0)\n+  36:1 -> 36:2 (count=1)\n+Segment at 5:8 (count = 6), RegionEntry\n+Segment at 5:20 (count = 0), Skipped\n+Segment at 6:9 (count = 1), RegionEntry\n+Segment at 6:16 (count = 0), Skipped\n+Segment at 8:9 (count = 5), RegionEntry\n+Segment at 8:15 (count = 0), Skipped\n+Segment at 10:1 (count = 6), RegionEntry\n+Segment at 10:2 (count = 0), Skipped\n+Segment at 13:9 (count = 1), RegionEntry\n+Segment at 14:23 (count = 0), Skipped\n+Segment at 17:9 (count = 6), RegionEntry\n+Segment at 17:10 (count = 0), Skipped\n+Segment at 19:9 (count = 6), RegionEntry\n+Segment at 19:14 (count = 0), Skipped\n+Segment at 21:9 (count = 6), RegionEntry\n+Segment at 25:26 (count = 0), Skipped\n+Segment at 27:13 (count = 1), RegionEntry\n+Segment at 27:41 (count = 1), RegionEntry\n+Segment at 27:42 (count = 0), Skipped\n+Segment at 28:13 (count = 0), RegionEntry\n+Segment at 28:42 (count = 0), RegionEntry\n+Segment at 28:43 (count = 0), Skipped\n+Segment at 32:13 (count = 5), RegionEntry\n+Segment at 32:42 (count = 0), RegionEntry\n+Segment at 32:43 (count = 0), Skipped\n+Segment at 33:10 (count = 5), RegionEntry\n+Segment at 33:11 (count = 0), Skipped\n+Segment at 34:6 (count = 5), RegionEntry\n+Segment at 34:7 (count = 0), Skipped\n+Segment at 35:5 (count = 0), RegionEntry\n+Segment at 35:11 (count = 0), Skipped\n+Segment at 36:1 (count = 1), RegionEntry\n+Segment at 36:2 (count = 0), Skipped"}, {"sha": "b0e881da7c8cb5e09e1068d2e7ce1ad16ce5b01e", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.while.txt", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,18 @@\n+Counter in file 0 2:9 -> 2:16, #1\n+Counter in file 0 3:11 -> 3:20, (#1 + #2)\n+Counter in file 0 3:21 -> 4:6, #2\n+Counter in file 0 5:1 -> 5:2, ((#1 + #2) - #2)\n+Emitting segments for file: ../coverage/while.rs\n+Combined regions:\n+  2:9 -> 2:16 (count=1)\n+  3:11 -> 3:20 (count=1)\n+  3:21 -> 4:6 (count=0)\n+  5:1 -> 5:2 (count=1)\n+Segment at 2:9 (count = 1), RegionEntry\n+Segment at 2:16 (count = 0), Skipped\n+Segment at 3:11 (count = 1), RegionEntry\n+Segment at 3:20 (count = 0), Skipped\n+Segment at 3:21 (count = 0), RegionEntry\n+Segment at 4:6 (count = 0), Skipped\n+Segment at 5:1 (count = 1), RegionEntry\n+Segment at 5:2 (count = 0), Skipped"}, {"sha": "f541baec50c0bb0008a583f1017e77f8c0c4ef02", "filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage_counters.while_early_ret.txt", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_ret.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_ret.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-base%2Fexpected_show_coverage_counters.while_early_ret.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,38 @@\n+Counter in file 0 5:9 -> 5:27, #1\n+Counter in file 0 7:9 -> 9:10, (#1 + #2)\n+Counter in file 0 12:13 -> 14:14, ((#1 + #2) - #3)\n+Counter in file 0 18:21 -> 20:22, #6\n+Counter in file 0 22:21 -> 22:27, #4\n+Counter in file 0 26:21 -> 26:27, #5\n+Counter in file 0 30:9 -> 32:10, #2\n+Counter in file 0 35:5 -> 35:11, #3\n+Counter in file 0 36:1 -> 36:2, ((#4 + #5) + #3)\n+Emitting segments for file: ../coverage/while_early_ret.rs\n+Combined regions:\n+  5:9 -> 5:27 (count=1)\n+  7:9 -> 9:10 (count=7)\n+  12:13 -> 14:14 (count=7)\n+  18:21 -> 20:22 (count=1)\n+  22:21 -> 22:27 (count=0)\n+  26:21 -> 26:27 (count=1)\n+  30:9 -> 32:10 (count=6)\n+  35:5 -> 35:11 (count=0)\n+  36:1 -> 36:2 (count=1)\n+Segment at 5:9 (count = 1), RegionEntry\n+Segment at 5:27 (count = 0), Skipped\n+Segment at 7:9 (count = 7), RegionEntry\n+Segment at 9:10 (count = 0), Skipped\n+Segment at 12:13 (count = 7), RegionEntry\n+Segment at 14:14 (count = 0), Skipped\n+Segment at 18:21 (count = 1), RegionEntry\n+Segment at 20:22 (count = 0), Skipped\n+Segment at 22:21 (count = 0), RegionEntry\n+Segment at 22:27 (count = 0), Skipped\n+Segment at 26:21 (count = 1), RegionEntry\n+Segment at 26:27 (count = 0), Skipped\n+Segment at 30:9 (count = 6), RegionEntry\n+Segment at 32:10 (count = 0), Skipped\n+Segment at 35:5 (count = 0), RegionEntry\n+Segment at 35:11 (count = 0), Skipped\n+Segment at 36:1 (count = 1), RegionEntry\n+Segment at 36:2 (count = 0), Skipped"}, {"sha": "bff55300b3ca3d210ad1d4f3e47976a4457e586a", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.closure.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.closure.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.closure.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.closure.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -17,14 +17,14 @@\n             },\n             \"lines\": {\n               \"count\": 91,\n-              \"covered\": 75,\n-              \"percent\": 82.41758241758241\n+              \"covered\": 77,\n+              \"percent\": 84.61538461538461\n             },\n             \"regions\": {\n-              \"count\": 21,\n-              \"covered\": 11,\n-              \"notcovered\": 10,\n-              \"percent\": 52.38095238095239\n+              \"count\": 25,\n+              \"covered\": 13,\n+              \"notcovered\": 12,\n+              \"percent\": 52\n             }\n           }\n         }\n@@ -42,14 +42,14 @@\n         },\n         \"lines\": {\n           \"count\": 91,\n-          \"covered\": 75,\n-          \"percent\": 82.41758241758241\n+          \"covered\": 77,\n+          \"percent\": 84.61538461538461\n         },\n         \"regions\": {\n-          \"count\": 21,\n-          \"covered\": 11,\n-          \"notcovered\": 10,\n-          \"percent\": 52.38095238095239\n+          \"count\": 25,\n+          \"covered\": 13,\n+          \"notcovered\": 12,\n+          \"percent\": 52\n         }\n       }\n     }"}, {"sha": "ed937a1b13f38a9d0f6411d9d885d0c5819fa468", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.conditions.json", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.conditions.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.conditions.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.conditions.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -3,7 +3,7 @@\n     {\n       \"files\": [\n         {\n-          \"filename\": \"../coverage/various_conditions.rs\",\n+          \"filename\": \"../coverage/conditions.rs\",\n           \"summary\": {\n             \"functions\": {\n               \"count\": 1,\n@@ -21,10 +21,10 @@\n               \"percent\": 46.93877551020408\n             },\n             \"regions\": {\n-              \"count\": 51,\n-              \"covered\": 19,\n-              \"notcovered\": 32,\n-              \"percent\": 37.254901960784316\n+              \"count\": 69,\n+              \"covered\": 18,\n+              \"notcovered\": 51,\n+              \"percent\": 26.08695652173913\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 46.93877551020408\n         },\n         \"regions\": {\n-          \"count\": 51,\n-          \"covered\": 19,\n-          \"notcovered\": 32,\n-          \"percent\": 37.254901960784316\n+          \"count\": 69,\n+          \"covered\": 18,\n+          \"notcovered\": 51,\n+          \"percent\": 26.08695652173913\n         }\n       }\n     }", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_export_coverage.various_conditions.json"}, {"sha": "84dcc251f3f4b11f7cdfba0ea194e979a232a158", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.if.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.if.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.if.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.if.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 4,\n+              \"count\": 5,\n               \"covered\": 4,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"notcovered\": 1,\n+              \"percent\": 80\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 4,\n+          \"count\": 5,\n           \"covered\": 4,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"notcovered\": 1,\n+          \"percent\": 80\n         }\n       }\n     }"}, {"sha": "c178e7f93476f097fcaa839652a6ac762127d69e", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.inner_items.json", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.inner_items.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.inner_items.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.inner_items.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -21,10 +21,10 @@\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 13,\n+              \"count\": 15,\n               \"covered\": 13,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"notcovered\": 2,\n+              \"percent\": 86.66666666666667\n             }\n           }\n         }\n@@ -46,10 +46,10 @@\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 13,\n+          \"count\": 15,\n           \"covered\": 13,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"notcovered\": 2,\n+          \"percent\": 86.66666666666667\n         }\n       }\n     }"}, {"sha": "5a953b90b423f2ebde0dc68a0c2ef12ea4ac136a", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.lazy_boolean.json", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.lazy_boolean.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.lazy_boolean.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.lazy_boolean.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 21,\n-              \"covered\": 19,\n-              \"percent\": 90.47619047619048\n+              \"count\": 40,\n+              \"covered\": 30,\n+              \"percent\": 75\n             },\n             \"regions\": {\n-              \"count\": 16,\n-              \"covered\": 14,\n-              \"notcovered\": 2,\n-              \"percent\": 87.5\n+              \"count\": 37,\n+              \"covered\": 26,\n+              \"notcovered\": 11,\n+              \"percent\": 70.27027027027027\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 21,\n-          \"covered\": 19,\n-          \"percent\": 90.47619047619048\n+          \"count\": 40,\n+          \"covered\": 30,\n+          \"percent\": 75\n         },\n         \"regions\": {\n-          \"count\": 16,\n-          \"covered\": 14,\n-          \"notcovered\": 2,\n-          \"percent\": 87.5\n+          \"count\": 37,\n+          \"covered\": 26,\n+          \"notcovered\": 11,\n+          \"percent\": 70.27027027027027\n         }\n       }\n     }"}, {"sha": "2dca41df9d24e6c75738a666344e46efed148c49", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.loops_branches.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.loops_branches.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.loops_branches.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.loops_branches.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/loops_branches.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 11,\n+              \"covered\": 11,\n+              \"percent\": 100\n+            },\n+            \"regions\": {\n+              \"count\": 9,\n+              \"covered\": 8,\n+              \"notcovered\": 1,\n+              \"percent\": 88.88888888888889\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 11,\n+          \"covered\": 11,\n+          \"percent\": 100\n+        },\n+        \"regions\": {\n+          \"count\": 9,\n+          \"covered\": 8,\n+          \"notcovered\": 1,\n+          \"percent\": 88.88888888888889\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "68163eb7636195b9855905e2d5139014c9efefac", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.nested_loops.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.nested_loops.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.nested_loops.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.nested_loops.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/nested_loops.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 21,\n+              \"covered\": 16,\n+              \"percent\": 76.19047619047619\n+            },\n+            \"regions\": {\n+              \"count\": 18,\n+              \"covered\": 14,\n+              \"notcovered\": 4,\n+              \"percent\": 77.77777777777779\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 21,\n+          \"covered\": 16,\n+          \"percent\": 76.19047619047619\n+        },\n+        \"regions\": {\n+          \"count\": 18,\n+          \"covered\": 14,\n+          \"notcovered\": 4,\n+          \"percent\": 77.77777777777779\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "bc0d0088041a89fe95cd46e9b760d410cfe5a602", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.partial_eq.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.partial_eq.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.partial_eq.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.partial_eq.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/partial_eq.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 5,\n+              \"covered\": 5,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 8,\n+              \"covered\": 5,\n+              \"percent\": 62.5\n+            },\n+            \"lines\": {\n+              \"count\": 15,\n+              \"covered\": 15,\n+              \"percent\": 100\n+            },\n+            \"regions\": {\n+              \"count\": 6,\n+              \"covered\": 6,\n+              \"notcovered\": 0,\n+              \"percent\": 100\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 5,\n+          \"covered\": 5,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 8,\n+          \"covered\": 5,\n+          \"percent\": 62.5\n+        },\n+        \"lines\": {\n+          \"count\": 15,\n+          \"covered\": 15,\n+          \"percent\": 100\n+        },\n+        \"regions\": {\n+          \"count\": 6,\n+          \"covered\": 6,\n+          \"notcovered\": 0,\n+          \"percent\": 100\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "ada6bb062dd1eaf04d076a8dc2931361441840c0", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.simple_loop.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.simple_loop.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.simple_loop.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.simple_loop.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 18,\n-              \"covered\": 18,\n+              \"count\": 19,\n+              \"covered\": 19,\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 7,\n-              \"covered\": 7,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"count\": 9,\n+              \"covered\": 8,\n+              \"notcovered\": 1,\n+              \"percent\": 88.88888888888889\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 18,\n-          \"covered\": 18,\n+          \"count\": 19,\n+          \"covered\": 19,\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 7,\n-          \"covered\": 7,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"count\": 9,\n+          \"covered\": 8,\n+          \"notcovered\": 1,\n+          \"percent\": 88.88888888888889\n         }\n       }\n     }"}, {"sha": "63d1ae74c5f5d51759f22c7f82f7799ecc11c590", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.simple_match.json", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.simple_match.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.simple_match.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.simple_match.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 26,\n-              \"covered\": 26,\n+              \"count\": 24,\n+              \"covered\": 24,\n               \"percent\": 100\n             },\n             \"regions\": {\n-              \"count\": 9,\n-              \"covered\": 9,\n-              \"notcovered\": 0,\n-              \"percent\": 100\n+              \"count\": 15,\n+              \"covered\": 14,\n+              \"notcovered\": 1,\n+              \"percent\": 93.33333333333333\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 26,\n-          \"covered\": 26,\n+          \"count\": 24,\n+          \"covered\": 24,\n           \"percent\": 100\n         },\n         \"regions\": {\n-          \"count\": 9,\n-          \"covered\": 9,\n-          \"notcovered\": 0,\n-          \"percent\": 100\n+          \"count\": 15,\n+          \"covered\": 14,\n+          \"notcovered\": 1,\n+          \"percent\": 93.33333333333333\n         }\n       }\n     }"}, {"sha": "872560384eb907b8b38a2aa5847719304f7a7c8d", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.tight_inf_loop.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.tight_inf_loop.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.tight_inf_loop.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.tight_inf_loop.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/tight_inf_loop.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"percent\": 100\n+            },\n+            \"regions\": {\n+              \"count\": 2,\n+              \"covered\": 2,\n+              \"notcovered\": 0,\n+              \"percent\": 100\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"percent\": 100\n+        },\n+        \"regions\": {\n+          \"count\": 2,\n+          \"covered\": 2,\n+          \"notcovered\": 0,\n+          \"percent\": 100\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "78b935b15689a3326a8f88a24ba6cfce8aa07eb3", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.try_error_result.json", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.try_error_result.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,15 +16,15 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 16,\n-              \"covered\": 15,\n-              \"percent\": 93.75\n+              \"count\": 20,\n+              \"covered\": 18,\n+              \"percent\": 90\n             },\n             \"regions\": {\n-              \"count\": 13,\n-              \"covered\": 12,\n-              \"notcovered\": 1,\n-              \"percent\": 92.3076923076923\n+              \"count\": 19,\n+              \"covered\": 14,\n+              \"notcovered\": 5,\n+              \"percent\": 73.68421052631578\n             }\n           }\n         }\n@@ -41,15 +41,15 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 16,\n-          \"covered\": 15,\n-          \"percent\": 93.75\n+          \"count\": 20,\n+          \"covered\": 18,\n+          \"percent\": 90\n         },\n         \"regions\": {\n-          \"count\": 13,\n-          \"covered\": 12,\n-          \"notcovered\": 1,\n-          \"percent\": 92.3076923076923\n+          \"count\": 19,\n+          \"covered\": 14,\n+          \"notcovered\": 5,\n+          \"percent\": 73.68421052631578\n         }\n       }\n     }"}, {"sha": "339c65556682a536269f2572466f8e9c4bc91e8a", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.while.json", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,59 @@\n+{\n+  \"data\": [\n+    {\n+      \"files\": [\n+        {\n+          \"filename\": \"../coverage/while.rs\",\n+          \"summary\": {\n+            \"functions\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"instantiations\": {\n+              \"count\": 1,\n+              \"covered\": 1,\n+              \"percent\": 100\n+            },\n+            \"lines\": {\n+              \"count\": 4,\n+              \"covered\": 3,\n+              \"percent\": 75\n+            },\n+            \"regions\": {\n+              \"count\": 4,\n+              \"covered\": 3,\n+              \"notcovered\": 1,\n+              \"percent\": 75\n+            }\n+          }\n+        }\n+      ],\n+      \"totals\": {\n+        \"functions\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"instantiations\": {\n+          \"count\": 1,\n+          \"covered\": 1,\n+          \"percent\": 100\n+        },\n+        \"lines\": {\n+          \"count\": 4,\n+          \"covered\": 3,\n+          \"percent\": 75\n+        },\n+        \"regions\": {\n+          \"count\": 4,\n+          \"covered\": 3,\n+          \"notcovered\": 1,\n+          \"percent\": 75\n+        }\n+      }\n+    }\n+  ],\n+  \"type\": \"llvm.coverage.json.export\",\n+  \"version\": \"2.0.1\"\n+}"}, {"sha": "ad43f5d992630ed3a5f405c318657a606623c365", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.while_early_ret.json", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_ret.json", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_ret.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_export_coverage.while_early_ret.json?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -3,7 +3,7 @@\n     {\n       \"files\": [\n         {\n-          \"filename\": \"../coverage/while_early_return.rs\",\n+          \"filename\": \"../coverage/while_early_ret.rs\",\n           \"summary\": {\n             \"functions\": {\n               \"count\": 1,\n@@ -16,9 +16,9 @@\n               \"percent\": 100\n             },\n             \"lines\": {\n-              \"count\": 18,\n-              \"covered\": 16,\n-              \"percent\": 88.88888888888889\n+              \"count\": 17,\n+              \"covered\": 15,\n+              \"percent\": 88.23529411764706\n             },\n             \"regions\": {\n               \"count\": 9,\n@@ -41,9 +41,9 @@\n           \"percent\": 100\n         },\n         \"lines\": {\n-          \"count\": 18,\n-          \"covered\": 16,\n-          \"percent\": 88.88888888888889\n+          \"count\": 17,\n+          \"covered\": 15,\n+          \"percent\": 88.23529411764706\n         },\n         \"regions\": {\n           \"count\": 9,", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_export_coverage.while_early_return.json"}, {"sha": "aef26a62e25fba8229ef1df99653976796419d4d", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.closure.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.closure.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -62,7 +62,7 @@\n    62|      1|                let mut countdown = 0;\n    63|      1|                if is_false {\n    64|      0|                    countdown = 10;\n-   65|      0|                }\n+   65|      1|                }\n    66|      1|                \"alt string 3\".to_owned()\n    67|      1|            }\n    68|      1|        )\n@@ -77,7 +77,7 @@\n    77|      1|        let mut countdown = 0;\n    78|      1|        if is_false {\n    79|      0|            countdown = 10;\n-   80|      0|        }\n+   80|      1|        }\n    81|      1|        \"alt string 4\".to_owned()\n    82|      1|    };\n    83|      1|    println!("}, {"sha": "173ff4aa4c48154b7c32ca11ed922d6887b0caeb", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.conditions.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.conditions.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.various_conditions.txt"}, {"sha": "85e6440ab3729f1275552d93d570d6ff6fc2f242", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.if.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.if.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.if.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.if.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -25,5 +25,6 @@\n    25|      1|            10\n    26|      1|        ;\n    27|      1|    }\n+                   ^0\n    28|      1|}\n "}, {"sha": "4a51f842a4bb22cbea878a2e0944013823dc42b6", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.inner_items.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.inner_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.inner_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.inner_items.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -10,6 +10,7 @@\n    10|      1|    if is_true {\n    11|      1|        countdown = 10;\n    12|      1|    }\n+                   ^0\n    13|       |\n    14|       |    mod in_mod {\n    15|       |        const IN_MOD_CONST: u32 = 1000;\n@@ -48,6 +49,7 @@\n    48|      1|    if is_true {\n    49|      1|        in_func(countdown);\n    50|      1|    }\n+                   ^0\n    51|       |\n    52|      1|    let mut val = InStruct {\n    53|      1|        in_struct_field: 101,"}, {"sha": "1b503033911c5a4061e43b22c12e8e0dce4d6951", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.lazy_boolean.txt", "status": "modified", "additions": 37, "deletions": 16, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.lazy_boolean.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -12,12 +12,14 @@\n    12|      1|        b = 10;\n    13|      1|        c = 100;\n    14|      1|    }\n+                   ^0\n    15|       |    let\n    16|      1|        somebool\n    17|       |        =\n    18|      1|            a < b\n    19|       |        ||\n-   20|      0|            b < c\n+   20|      1|            b < c\n+                          ^0\n    21|       |    ;\n    22|       |    let\n    23|      1|        somebool\n@@ -26,19 +28,38 @@\n    26|       |        ||\n    27|      1|            b < c\n    28|       |    ;\n-   29|       |    let\n-   30|      1|        somebool\n-   31|       |        =\n-   32|      1|            a < b\n-   33|       |        &&\n-   34|      1|            b < c\n-   35|       |    ;\n-   36|       |    let\n-   37|      1|        somebool\n-   38|       |        =\n-   39|      1|            b < a\n-   40|       |        &&\n-   41|      0|            b < c\n-   42|       |    ;\n-   43|      1|}\n+   29|      1|    let somebool = a < b && b < c;\n+   30|      1|    let somebool = b < a && b < c;\n+                                          ^0\n+   31|       |\n+   32|       |    if\n+   33|      1|        !\n+   34|      1|        is_true\n+   35|      0|    {\n+   36|      0|        a = 2\n+   37|      0|        ;\n+   38|      1|    }\n+   39|       |\n+   40|       |    if\n+   41|      1|        is_true\n+   42|      1|    {\n+   43|      1|        b = 30\n+   44|      1|        ;\n+   45|      1|    }\n+   46|       |    else\n+   47|      0|    {\n+   48|      0|        c = 400\n+   49|      0|        ;\n+   50|      0|    }\n+   51|       |\n+   52|      1|    if !is_true {\n+   53|      0|        a = 2;\n+   54|      1|    }\n+   55|       |\n+   56|      1|    if is_true {\n+   57|      1|        b = 30;\n+   58|      1|    } else {\n+   59|      0|        c = 400;\n+   60|      0|    }\n+   61|      1|}\n "}, {"sha": "3a969a6b89869366e1bc2fd3a9defc1743e08861", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.loops_branches.txt", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.loops_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.loops_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.loops_branches.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,38 @@\n+    1|       |#![allow(unused_assignments)]\n+    2|       |\n+    3|       |// This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n+    4|       |// structure of this `fmt` function.\n+    5|       |\n+    6|       |struct DebugTest;\n+    7|       |\n+    8|       |impl std::fmt::Debug for DebugTest {\n+    9|       |    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+   10|      1|        if true {\n+   11|      1|            if false {\n+   12|       |                while true {\n+   13|       |                }\n+   14|      1|            }\n+   15|      1|            write!(f, \"error\")?;\n+                                            ^0\n+   16|       |        } else {\n+   17|      1|        }\n+   18|      1|        Ok(())\n+   19|      1|    }\n+   20|       |}\n+   21|       |\n+   22|      1|fn main() {\n+   23|      1|    let debug_test = DebugTest;\n+   24|      1|    println!(\"{:?}\", debug_test);\n+   25|      1|}\n+   26|       |\n+   27|       |/*\n+   28|       |\n+   29|       |This is the error message generated, before the issue was fixed:\n+   30|       |\n+   31|       |error: internal compiler error: compiler/rustc_mir/src/transform/coverage/mod.rs:374:42:\n+   32|       |Error processing: DefId(0:6 ~ bug_incomplete_cov_graph_traversal_simplified[317d]::{impl#0}::fmt):\n+   33|       |Error { message: \"`TraverseCoverageGraphWithLoops` missed some `BasicCoverageBlock`s:\n+   34|       |[bcb6, bcb7, bcb9]\" }\n+   35|       |\n+   36|       |*/\n+"}, {"sha": "c9f373bf6a7c07b1c949e8eb03f25ba4ffbefc9b", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.nested_loops.txt", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.nested_loops.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,26 @@\n+    1|       |fn main() {\n+    2|      1|    let is_true = std::env::args().len() == 1;\n+    3|      1|    let mut countdown = 10;\n+    4|       |\n+    5|      1|    'outer: while countdown > 0 {\n+    6|      1|        let mut a = 100;\n+    7|      1|        let mut b = 100;\n+    8|      3|        for _ in 0..50 {\n+    9|      3|            if a < 30 {\n+   10|      0|                break;\n+   11|       |            }\n+   12|      3|            a -= 5;\n+   13|      3|            b -= 5;\n+   14|      3|            if b < 90 {\n+   15|      1|                a -= 10;\n+   16|      1|                if is_true {\n+   17|      1|                    break 'outer;\n+   18|       |                } else {\n+   19|      0|                    a -= 2;\n+   20|      0|                }\n+   21|      2|            }\n+   22|      2|        }\n+   23|      0|        countdown -= 1;\n+   24|      0|    }\n+   25|      1|}\n+"}, {"sha": "d16a0a9c4c8c4f7b99892cadaace5315c2740f6b", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.partial_eq.txt", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.partial_eq.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,111 @@\n+    1|       |// This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n+    2|       |// structure of this test.\n+    3|       |\n+    4|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+                                                    ^1       ^1\n+  ------------------\n+  | Unexecuted instantiation: <partial_eq::Version as core::cmp::PartialOrd>::gt\n+  ------------------\n+  | Unexecuted instantiation: <partial_eq::Version as core::cmp::PartialOrd>::le\n+  ------------------\n+  | Unexecuted instantiation: <partial_eq::Version as core::cmp::PartialOrd>::ge\n+  ------------------\n+  | <partial_eq::Version as core::cmp::PartialOrd>::lt:\n+  |    4|      1|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+  ------------------\n+    5|       |pub struct Version {\n+    6|       |    major: usize,\n+    7|      1|    minor: usize,\n+    8|       |    patch: usize,\n+    9|       |}\n+   10|       |\n+   11|       |impl Version {\n+   12|       |    pub fn new(major: usize, minor: usize, patch: usize) -> Self {\n+   13|      2|        Self {\n+   14|      2|            major,\n+   15|      2|            minor,\n+   16|      2|            patch,\n+   17|      2|        }\n+   18|      2|    }\n+   19|       |}\n+   20|       |\n+   21|      1|fn main() {\n+   22|      1|    let version_3_2_1 = Version::new(3, 2, 1);\n+   23|      1|    let version_3_3_0 = Version::new(3, 3, 0);\n+   24|      1|\n+   25|      1|    println!(\"{:?} < {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 < version_3_3_0);\n+   26|      1|}\n+   27|       |\n+   28|       |/*\n+   29|       |\n+   30|       |This test verifies a bug was fixed that otherwise generated this error:\n+   31|       |\n+   32|       |thread 'rustc' panicked at 'No counters provided the source_hash for function:\n+   33|       |    Instance {\n+   34|       |        def: Item(WithOptConstParam {\n+   35|       |            did: DefId(0:101 ~ autocfg[c44a]::version::{impl#2}::partial_cmp),\n+   36|       |            const_param_did: None\n+   37|       |        }),\n+   38|       |        substs: []\n+   39|       |    }'\n+   40|       |The `PartialOrd` derived by `Version` happened to generate a MIR that generated coverage\n+   41|       |without a code region associated with any `Counter`. Code regions were associated with at least\n+   42|       |one expression, which is allowed, but the `function_source_hash` was only passed to the codegen\n+   43|       |(coverage mapgen) phase from a `Counter`s code region. A new method was added to pass the\n+   44|       |`function_source_hash` without a code region, if necessary.\n+   45|       |\n+   46|       |*/\n+   47|       |\n+   48|       |// FIXME(richkadel): It may be worth investigating why the coverage report for this test produces\n+   49|       |// the following results:\n+   50|       |\n+   51|       |/*\n+   52|       |\n+   53|       |1. Why are their two counts below different characters (first and last) of `PartialOrd`, on line 17?\n+   54|       |\n+   55|       |2. Line 17 is counted twice, but the `::lt` instance shows a line count of 1? Is there a missing\n+   56|       |   line count with a different instance? Or was it really only called once?\n+   57|       |\n+   58|       |3. Line 20 shows another line count (of 1) for a line within a `struct` declaration (on only one of\n+   59|       |   its 3 fields). I doubt the specific field (`minor`) is relevant, but rather I suspect there's a\n+   60|       |   problem computing the file position here, for some reason.\n+   61|       |\n+   62|       |<snip>\n+   63|       |   16|       |\n+   64|       |   17|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+   65|       |                                                    ^1       ^1\n+   66|       |------------------\n+   67|       ||Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::gt\n+   68|       |------------------\n+   69|       ||Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::le\n+   70|       |------------------\n+   71|       ||Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::ge\n+   72|       |------------------\n+   73|       ||<partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::lt:\n+   74|       ||  17|      1|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+   75|       |------------------\n+   76|       |   18|       |pub struct Version {\n+   77|       |   19|       |    major: usize,\n+   78|       |   20|      1|    minor: usize,\n+   79|       |   21|       |    patch: usize,\n+   80|       |   22|       |}\n+   81|       |   23|       |\n+   82|       |   24|       |impl Version {\n+   83|       |   25|       |    pub fn new(major: usize, minor: usize, patch: usize) -> Self {\n+   84|       |   26|      2|        Version {\n+   85|       |   27|      2|            major,\n+   86|       |   28|      2|            minor,\n+   87|       |   29|      2|            patch,\n+   88|       |   30|      2|        }\n+   89|       |   31|      2|    }\n+   90|       |   32|       |}\n+   91|       |   33|       |\n+   92|       |   34|      1|fn main() {\n+   93|       |   35|      1|    let version_3_2_1 = Version::new(3, 2, 1);\n+   94|       |   36|      1|    let version_3_3_0 = Version::new(3, 3, 0);\n+   95|       |   37|      1|\n+   96|       |   38|      1|    println!(\"{:?} < {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 < version\n+   97|       |_3_3_0);\n+   98|       |   39|      1|}\n+   99|       |*/\n+"}, {"sha": "064930dd75c93a4f4b1e83c228f155c38db36d3d", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.simple_loop.txt", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.simple_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.simple_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.simple_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -16,6 +16,7 @@\n    16|      1|            10\n    17|      1|        ;\n    18|      1|    }\n+                   ^0\n    19|       |\n    20|       |    loop\n    21|       |    {\n@@ -31,6 +32,6 @@\n    31|     10|        -=\n    32|     10|        1\n    33|       |        ;\n-   34|       |    }\n+   34|      1|    }\n    35|      1|}\n "}, {"sha": "1f7e71d3eb0e7bad42393553b43b6acac9b50222", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.simple_match.txt", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.simple_match.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.simple_match.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.simple_match.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -10,22 +10,24 @@\n    10|      1|    if is_true {\n    11|      1|        countdown = 0;\n    12|      1|    }\n+                   ^0\n    13|       |\n-   14|      3|    for\n-   15|      3|        _\n+   14|       |    for\n+   15|      2|        _\n    16|       |    in\n-   17|      1|        0..2\n+   17|      3|        0..2\n    18|       |    {\n    19|       |        let z\n    20|       |        ;\n    21|       |        match\n    22|      2|            countdown\n-   23|      2|        {\n-   24|      2|            x\n-   25|      2|            if\n+   23|       |        {\n+   24|      1|            x\n+   25|       |            if\n    26|      2|                x\n    27|      2|                    <\n    28|      2|                1\n+                               ^1\n    29|       |            =>\n    30|      1|            {\n    31|      1|                z = countdown\n@@ -39,6 +41,6 @@\n    39|       |            =>\n    40|      1|            {}\n    41|       |        }\n-   42|       |    }\n+   42|      3|    }\n    43|      1|}\n "}, {"sha": "e02eac03a6b1574c6c10534081581d67e120d0e0", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.tight_inf_loop.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.tight_inf_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.tight_inf_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.tight_inf_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,6 @@\n+    1|       |fn main() {\n+    2|      1|    if false {\n+    3|       |        loop {}\n+    4|       |    }\n+    5|      1|}\n+"}, {"sha": "6b3a8c39c6338a066f1afa7d6893068dc73ef98f", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.try_error_result.txt", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.try_error_result.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -13,24 +13,26 @@\n    13|      1|    let mut\n    14|      1|        countdown = 10\n    15|       |    ;\n-   16|      6|    for\n+   16|       |    for\n    17|      6|        _\n    18|       |    in\n-   19|      1|        0..10\n+   19|      6|        0..10\n    20|       |    {\n    21|      6|        countdown\n    22|      6|            -= 1\n-   23|       |        ;\n-   24|       |        if\n+   23|      6|        ;\n+   24|      6|        if\n    25|      6|            countdown < 5\n    26|       |        {\n    27|      1|            call(/*return_error=*/ true)?;\n-   28|       |        }\n-   29|       |        else\n-   30|       |        {\n-   31|      5|            call(/*return_error=*/ false)?;\n-   32|       |        }\n-   33|       |    }\n-   34|      0|    Ok(())\n-   35|      1|}\n+   28|      0|            call(/*return_error=*/ false)?;\n+   29|       |        }\n+   30|       |        else\n+   31|       |        {\n+   32|      5|            call(/*return_error=*/ false)?;\n+                                                       ^0\n+   33|      5|        }\n+   34|      5|    }\n+   35|      0|    Ok(())\n+   36|      1|}\n "}, {"sha": "194325b6b9ecaac6c23117102cd38678ccecc704", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.while.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,6 @@\n+    1|       |fn main() {\n+    2|      1|    let num = 9;\n+    3|      1|    while num >= 10 {\n+    4|      0|    }\n+    5|      1|}\n+"}, {"sha": "26041136d2f4c460ac4a12f540857e5b2b6dade6", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage.while_early_ret.txt", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_ret.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_ret.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage.while_early_ret.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -3,7 +3,7 @@\n     3|       |\n     4|       |fn main() -> Result<(),u8> {\n     5|      1|    let mut countdown = 10;\n-    6|      7|    while\n+    6|       |    while\n     7|      7|        countdown\n     8|      7|            >\n     9|      7|        0", "previous_filename": "src/test/run-make-fulldeps/coverage-reports-base/expected_show_coverage.while_early_return.txt"}, {"sha": "fb797796e4e7dcc9e6d4e2ec785c1989bb760fc6", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.closure.txt", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.closure.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.closure.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.closure.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,94 @@\n+Counter in file 0 20:21 -> 20:38, #1\n+Counter in file 0 21:20 -> 21:28, (#1 + 0)\n+Counter in file 0 21:29 -> 23:18, #2\n+Counter in file 0 23:18 -> 23:19, (#1 - #2)\n+Counter in file 0 24:17 -> 25:14, (#2 + (#1 - #2))\n+Counter in file 0 3:11 -> 18:13, #1\n+Counter in file 0 25:14 -> 33:9, (#1 + 0)\n+Counter in file 0 40:6 -> 60:13, (#1 + 0)\n+Counter in file 0 67:14 -> 75:9, (#1 + 0)\n+Counter in file 0 82:6 -> 93:2, (#1 + 0)\n+Counter in file 0 77:13 -> 77:30, #1\n+Counter in file 0 78:12 -> 78:20, (#1 + 0)\n+Counter in file 0 78:21 -> 80:10, #2\n+Counter in file 0 80:10 -> 80:11, (#1 - #2)\n+Counter in file 0 81:9 -> 82:6, (#2 + (#1 - #2))\n+Counter in file 0 62:21 -> 62:38, #1\n+Counter in file 0 63:20 -> 63:28, (#1 + 0)\n+Counter in file 0 63:29 -> 65:18, #2\n+Counter in file 0 65:18 -> 65:19, (#1 - #2)\n+Counter in file 0 66:17 -> 67:14, (#2 + (#1 - #2))\n+Counter in file 0 35:13 -> 35:30, #1\n+Counter in file 0 36:12 -> 36:20, (#1 + 0)\n+Counter in file 0 36:21 -> 38:10, #2\n+Counter in file 0 38:10 -> 38:11, (#1 - #2)\n+Counter in file 0 39:9 -> 40:6, (#2 + (#1 - #2))\n+Emitting segments for file: ../coverage/closure.rs\n+Combined regions:\n+  3:11 -> 18:13 (count=1)\n+  20:21 -> 20:38 (count=0)\n+  21:20 -> 21:28 (count=0)\n+  21:29 -> 23:18 (count=0)\n+  23:18 -> 23:19 (count=0)\n+  24:17 -> 25:14 (count=0)\n+  25:14 -> 33:9 (count=1)\n+  35:13 -> 35:30 (count=0)\n+  36:12 -> 36:20 (count=0)\n+  36:21 -> 38:10 (count=0)\n+  38:10 -> 38:11 (count=0)\n+  39:9 -> 40:6 (count=0)\n+  40:6 -> 60:13 (count=1)\n+  62:21 -> 62:38 (count=1)\n+  63:20 -> 63:28 (count=1)\n+  63:29 -> 65:18 (count=0)\n+  65:18 -> 65:19 (count=1)\n+  66:17 -> 67:14 (count=1)\n+  67:14 -> 75:9 (count=1)\n+  77:13 -> 77:30 (count=1)\n+  78:12 -> 78:20 (count=1)\n+  78:21 -> 80:10 (count=0)\n+  80:10 -> 80:11 (count=1)\n+  81:9 -> 82:6 (count=1)\n+  82:6 -> 93:2 (count=1)\n+Segment at 3:11 (count = 1), RegionEntry\n+Segment at 18:13 (count = 0), Skipped\n+Segment at 20:21 (count = 0), RegionEntry\n+Segment at 20:38 (count = 0), Skipped\n+Segment at 21:20 (count = 0), RegionEntry\n+Segment at 21:28 (count = 0), Skipped\n+Segment at 21:29 (count = 0), RegionEntry\n+Segment at 23:18 (count = 0), RegionEntry\n+Segment at 23:19 (count = 0), Skipped\n+Segment at 24:17 (count = 0), RegionEntry\n+Segment at 25:14 (count = 1), RegionEntry\n+Segment at 33:9 (count = 0), Skipped\n+Segment at 35:13 (count = 0), RegionEntry\n+Segment at 35:30 (count = 0), Skipped\n+Segment at 36:12 (count = 0), RegionEntry\n+Segment at 36:20 (count = 0), Skipped\n+Segment at 36:21 (count = 0), RegionEntry\n+Segment at 38:10 (count = 0), RegionEntry\n+Segment at 38:11 (count = 0), Skipped\n+Segment at 39:9 (count = 0), RegionEntry\n+Segment at 40:6 (count = 1), RegionEntry\n+Segment at 60:13 (count = 0), Skipped\n+Segment at 62:21 (count = 1), RegionEntry\n+Segment at 62:38 (count = 0), Skipped\n+Segment at 63:20 (count = 1), RegionEntry\n+Segment at 63:28 (count = 0), Skipped\n+Segment at 63:29 (count = 0), RegionEntry\n+Segment at 65:18 (count = 1), RegionEntry\n+Segment at 65:19 (count = 0), Skipped\n+Segment at 66:17 (count = 1), RegionEntry\n+Segment at 67:14 (count = 1), RegionEntry\n+Segment at 75:9 (count = 0), Skipped\n+Segment at 77:13 (count = 1), RegionEntry\n+Segment at 77:30 (count = 0), Skipped\n+Segment at 78:12 (count = 1), RegionEntry\n+Segment at 78:20 (count = 0), Skipped\n+Segment at 78:21 (count = 0), RegionEntry\n+Segment at 80:10 (count = 1), RegionEntry\n+Segment at 80:11 (count = 0), Skipped\n+Segment at 81:9 (count = 1), RegionEntry\n+Segment at 82:6 (count = 1), RegionEntry\n+Segment at 93:2 (count = 0), Skipped"}, {"sha": "d48cd8074bebb6fa4d781fec581d1dc72c0e2d6b", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.conditions.txt", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.conditions.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.conditions.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.conditions.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,238 @@\n+Counter in file 0 4:9 -> 4:26, #1\n+Counter in file 0 5:8 -> 5:12, (#1 + 0)\n+Counter in file 0 5:13 -> 7:6, #2\n+Counter in file 0 10:9 -> 10:10, (#4 + #11)\n+Counter in file 0 10:16 -> 10:29, (#2 + 0)\n+Counter in file 0 11:9 -> 12:10, #4\n+Counter in file 0 13:15 -> 13:28, ((#2 + 0) - #3)\n+Counter in file 0 14:12 -> 14:25, #5\n+Counter in file 0 14:29 -> 14:42, (#5 - #13)\n+Counter in file 0 14:42 -> 14:43, (#13 + #14)\n+Counter in file 0 14:42 -> 14:43, ((#5 - #13) - #14)\n+Counter in file 0 14:46 -> 14:60, #21\n+Counter in file 0 14:60 -> 14:61, (#17 + #18)\n+Counter in file 0 14:60 -> 14:61, (#21 - #18)\n+Counter in file 0 14:61 -> 16:10, #22\n+Counter in file 0 16:10 -> 16:11, #23\n+Counter in file 0 17:9 -> 18:18, #11\n+Counter in file 0 20:9 -> 20:15, (((#2 + 0) - #3) - #5)\n+Counter in file 0 23:9 -> 23:26, ((#4 + #11) + 0)\n+Counter in file 0 24:8 -> 24:12, ((#4 + #11) + 0)\n+Counter in file 0 24:13 -> 26:6, #12\n+Counter in file 0 28:8 -> 28:21, (#12 + 0)\n+Counter in file 0 29:9 -> 29:23, #16\n+Counter in file 0 30:15 -> 30:28, ((#12 + 0) - #15)\n+Counter in file 0 31:12 -> 31:25, (((#12 + 0) - #15) - #8)\n+Counter in file 0 31:29 -> 31:42, ((((#12 + 0) - #15) - #8) - #24)\n+Counter in file 0 31:42 -> 31:43, (((((#12 + 0) - #15) - #8) - #24) - #25)\n+Counter in file 0 31:42 -> 31:43, (#24 + #25)\n+Counter in file 0 31:46 -> 31:60, #32\n+Counter in file 0 31:60 -> 31:61, (#28 + #29)\n+Counter in file 0 31:60 -> 31:61, (#32 - #29)\n+Counter in file 0 31:61 -> 33:10, #33\n+Counter in file 0 33:10 -> 33:11, #34\n+Counter in file 0 34:9 -> 34:23, #19\n+Counter in file 0 36:9 -> 36:15, #8\n+Counter in file 0 39:9 -> 39:26, (#16 + #19)\n+Counter in file 0 40:8 -> 40:12, ((#16 + #19) + 0)\n+Counter in file 0 40:13 -> 42:6, #20\n+Counter in file 0 44:9 -> 44:10, (#27 + #30)\n+Counter in file 0 44:16 -> 44:29, (#20 + 0)\n+Counter in file 0 45:9 -> 45:23, #27\n+Counter in file 0 46:15 -> 46:28, ((#20 + 0) - #26)\n+Counter in file 0 47:12 -> 47:25, (((#20 + 0) - #26) - #7)\n+Counter in file 0 47:29 -> 47:42, ((((#20 + 0) - #26) - #7) - #35)\n+Counter in file 0 47:42 -> 47:43, (#35 + #36)\n+Counter in file 0 47:42 -> 47:43, (((((#20 + 0) - #26) - #7) - #35) - #36)\n+Counter in file 0 47:46 -> 47:60, #41\n+Counter in file 0 47:60 -> 47:61, (#37 + #38)\n+Counter in file 0 47:60 -> 47:61, (#41 - #38)\n+Counter in file 0 47:61 -> 49:10, #42\n+Counter in file 0 49:10 -> 49:11, #43\n+Counter in file 0 50:9 -> 50:23, #30\n+Counter in file 0 52:13 -> 54:15, #7\n+Counter in file 0 57:9 -> 57:10, (#9 + #10)\n+Counter in file 0 57:16 -> 57:29, ((#27 + #30) + 0)\n+Counter in file 0 58:9 -> 58:23, #9\n+Counter in file 0 59:15 -> 59:28, ((#27 + #30) - #31)\n+Counter in file 0 60:12 -> 60:25, (((#27 + #30) - #31) - #6)\n+Counter in file 0 60:29 -> 60:42, ((((#27 + #30) - #31) - #6) - #39)\n+Counter in file 0 60:42 -> 60:43, (#39 + #40)\n+Counter in file 0 60:42 -> 60:43, (((((#27 + #30) - #31) - #6) - #39) - #40)\n+Counter in file 0 60:46 -> 60:60, #46\n+Counter in file 0 60:60 -> 60:61, (#46 - #45)\n+Counter in file 0 60:60 -> 60:61, (#44 + #45)\n+Counter in file 0 60:61 -> 62:10, #47\n+Counter in file 0 62:10 -> 62:11, #48\n+Counter in file 0 63:9 -> 63:23, #10\n+Counter in file 0 65:9 -> 65:15, #6\n+Counter in file 0 67:1 -> 67:2, ((#9 + #10) + (((#6 + #7) + #8) + (((#2 + 0) - #3) - #5)))\n+Emitting segments for file: ../coverage/conditions.rs\n+Combined regions:\n+  4:9 -> 4:26 (count=1)\n+  5:8 -> 5:12 (count=1)\n+  5:13 -> 7:6 (count=1)\n+  10:9 -> 10:10 (count=1)\n+  10:16 -> 10:29 (count=1)\n+  11:9 -> 12:10 (count=1)\n+  13:15 -> 13:28 (count=0)\n+  14:12 -> 14:25 (count=0)\n+  14:29 -> 14:42 (count=0)\n+  14:42 -> 14:43 (count=0)\n+  14:46 -> 14:60 (count=0)\n+  14:60 -> 14:61 (count=0)\n+  14:61 -> 16:10 (count=0)\n+  16:10 -> 16:11 (count=0)\n+  17:9 -> 18:18 (count=0)\n+  20:9 -> 20:15 (count=0)\n+  23:9 -> 23:26 (count=1)\n+  24:8 -> 24:12 (count=1)\n+  24:13 -> 26:6 (count=1)\n+  28:8 -> 28:21 (count=1)\n+  29:9 -> 29:23 (count=1)\n+  30:15 -> 30:28 (count=0)\n+  31:12 -> 31:25 (count=0)\n+  31:29 -> 31:42 (count=0)\n+  31:42 -> 31:43 (count=0)\n+  31:46 -> 31:60 (count=0)\n+  31:60 -> 31:61 (count=0)\n+  31:61 -> 33:10 (count=0)\n+  33:10 -> 33:11 (count=0)\n+  34:9 -> 34:23 (count=0)\n+  36:9 -> 36:15 (count=0)\n+  39:9 -> 39:26 (count=1)\n+  40:8 -> 40:12 (count=1)\n+  40:13 -> 42:6 (count=1)\n+  44:9 -> 44:10 (count=0)\n+  44:16 -> 44:29 (count=1)\n+  45:9 -> 45:23 (count=0)\n+  46:15 -> 46:28 (count=1)\n+  47:12 -> 47:25 (count=0)\n+  47:29 -> 47:42 (count=0)\n+  47:42 -> 47:43 (count=0)\n+  47:46 -> 47:60 (count=0)\n+  47:60 -> 47:61 (count=0)\n+  47:61 -> 49:10 (count=0)\n+  49:10 -> 49:11 (count=0)\n+  50:9 -> 50:23 (count=0)\n+  52:13 -> 54:15 (count=1)\n+  57:9 -> 57:10 (count=0)\n+  57:16 -> 57:29 (count=0)\n+  58:9 -> 58:23 (count=0)\n+  59:15 -> 59:28 (count=0)\n+  60:12 -> 60:25 (count=0)\n+  60:29 -> 60:42 (count=0)\n+  60:42 -> 60:43 (count=0)\n+  60:46 -> 60:60 (count=0)\n+  60:60 -> 60:61 (count=0)\n+  60:61 -> 62:10 (count=0)\n+  62:10 -> 62:11 (count=0)\n+  63:9 -> 63:23 (count=0)\n+  65:9 -> 65:15 (count=0)\n+  67:1 -> 67:2 (count=1)\n+Segment at 4:9 (count = 1), RegionEntry\n+Segment at 4:26 (count = 0), Skipped\n+Segment at 5:8 (count = 1), RegionEntry\n+Segment at 5:12 (count = 0), Skipped\n+Segment at 5:13 (count = 1), RegionEntry\n+Segment at 7:6 (count = 0), Skipped\n+Segment at 10:9 (count = 1), RegionEntry\n+Segment at 10:10 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 10:29 (count = 0), Skipped\n+Segment at 11:9 (count = 1), RegionEntry\n+Segment at 12:10 (count = 0), Skipped\n+Segment at 13:15 (count = 0), RegionEntry\n+Segment at 13:28 (count = 0), Skipped\n+Segment at 14:12 (count = 0), RegionEntry\n+Segment at 14:25 (count = 0), Skipped\n+Segment at 14:29 (count = 0), RegionEntry\n+Segment at 14:42 (count = 0), RegionEntry\n+Segment at 14:43 (count = 0), Skipped\n+Segment at 14:46 (count = 0), RegionEntry\n+Segment at 14:60 (count = 0), RegionEntry\n+Segment at 14:61 (count = 0), RegionEntry\n+Segment at 16:10 (count = 0), RegionEntry\n+Segment at 16:11 (count = 0), Skipped\n+Segment at 17:9 (count = 0), RegionEntry\n+Segment at 18:18 (count = 0), Skipped\n+Segment at 20:9 (count = 0), RegionEntry\n+Segment at 20:15 (count = 0), Skipped\n+Segment at 23:9 (count = 1), RegionEntry\n+Segment at 23:26 (count = 0), Skipped\n+Segment at 24:8 (count = 1), RegionEntry\n+Segment at 24:12 (count = 0), Skipped\n+Segment at 24:13 (count = 1), RegionEntry\n+Segment at 26:6 (count = 0), Skipped\n+Segment at 28:8 (count = 1), RegionEntry\n+Segment at 28:21 (count = 0), Skipped\n+Segment at 29:9 (count = 1), RegionEntry\n+Segment at 29:23 (count = 0), Skipped\n+Segment at 30:15 (count = 0), RegionEntry\n+Segment at 30:28 (count = 0), Skipped\n+Segment at 31:12 (count = 0), RegionEntry\n+Segment at 31:25 (count = 0), Skipped\n+Segment at 31:29 (count = 0), RegionEntry\n+Segment at 31:42 (count = 0), RegionEntry\n+Segment at 31:43 (count = 0), Skipped\n+Segment at 31:46 (count = 0), RegionEntry\n+Segment at 31:60 (count = 0), RegionEntry\n+Segment at 31:61 (count = 0), RegionEntry\n+Segment at 33:10 (count = 0), RegionEntry\n+Segment at 33:11 (count = 0), Skipped\n+Segment at 34:9 (count = 0), RegionEntry\n+Segment at 34:23 (count = 0), Skipped\n+Segment at 36:9 (count = 0), RegionEntry\n+Segment at 36:15 (count = 0), Skipped\n+Segment at 39:9 (count = 1), RegionEntry\n+Segment at 39:26 (count = 0), Skipped\n+Segment at 40:8 (count = 1), RegionEntry\n+Segment at 40:12 (count = 0), Skipped\n+Segment at 40:13 (count = 1), RegionEntry\n+Segment at 42:6 (count = 0), Skipped\n+Segment at 44:9 (count = 0), RegionEntry\n+Segment at 44:10 (count = 0), Skipped\n+Segment at 44:16 (count = 1), RegionEntry\n+Segment at 44:29 (count = 0), Skipped\n+Segment at 45:9 (count = 0), RegionEntry\n+Segment at 45:23 (count = 0), Skipped\n+Segment at 46:15 (count = 1), RegionEntry\n+Segment at 46:28 (count = 0), Skipped\n+Segment at 47:12 (count = 0), RegionEntry\n+Segment at 47:25 (count = 0), Skipped\n+Segment at 47:29 (count = 0), RegionEntry\n+Segment at 47:42 (count = 0), RegionEntry\n+Segment at 47:43 (count = 0), Skipped\n+Segment at 47:46 (count = 0), RegionEntry\n+Segment at 47:60 (count = 0), RegionEntry\n+Segment at 47:61 (count = 0), RegionEntry\n+Segment at 49:10 (count = 0), RegionEntry\n+Segment at 49:11 (count = 0), Skipped\n+Segment at 50:9 (count = 0), RegionEntry\n+Segment at 50:23 (count = 0), Skipped\n+Segment at 52:13 (count = 1), RegionEntry\n+Segment at 54:15 (count = 0), Skipped\n+Segment at 57:9 (count = 0), RegionEntry\n+Segment at 57:10 (count = 0), Skipped\n+Segment at 57:16 (count = 0), RegionEntry\n+Segment at 57:29 (count = 0), Skipped\n+Segment at 58:9 (count = 0), RegionEntry\n+Segment at 58:23 (count = 0), Skipped\n+Segment at 59:15 (count = 0), RegionEntry\n+Segment at 59:28 (count = 0), Skipped\n+Segment at 60:12 (count = 0), RegionEntry\n+Segment at 60:25 (count = 0), Skipped\n+Segment at 60:29 (count = 0), RegionEntry\n+Segment at 60:42 (count = 0), RegionEntry\n+Segment at 60:43 (count = 0), Skipped\n+Segment at 60:46 (count = 0), RegionEntry\n+Segment at 60:60 (count = 0), RegionEntry\n+Segment at 60:61 (count = 0), RegionEntry\n+Segment at 62:10 (count = 0), RegionEntry\n+Segment at 62:11 (count = 0), Skipped\n+Segment at 63:9 (count = 0), RegionEntry\n+Segment at 63:23 (count = 0), Skipped\n+Segment at 65:9 (count = 0), RegionEntry\n+Segment at 65:15 (count = 0), Skipped\n+Segment at 67:1 (count = 1), RegionEntry\n+Segment at 67:2 (count = 0), Skipped"}, {"sha": "375025fe8bcc2fefdf4b081025bab03d608ac582", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.drop_trait.txt", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.drop_trait.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,22 @@\n+Counter in file 0 9:24 -> 11:6, #1\n+Counter in file 0 15:9 -> 17:42, #1\n+Counter in file 0 19:8 -> 19:12, (#1 + 0)\n+Counter in file 0 20:9 -> 21:22, #2\n+Counter in file 0 27:1 -> 27:2, (#2 + 0)\n+Emitting segments for file: ../coverage/drop_trait.rs\n+Combined regions:\n+  9:24 -> 11:6 (count=2)\n+  15:9 -> 17:42 (count=1)\n+  19:8 -> 19:12 (count=1)\n+  20:9 -> 21:22 (count=1)\n+  27:1 -> 27:2 (count=1)\n+Segment at 9:24 (count = 2), RegionEntry\n+Segment at 11:6 (count = 0), Skipped\n+Segment at 15:9 (count = 1), RegionEntry\n+Segment at 17:42 (count = 0), Skipped\n+Segment at 19:8 (count = 1), RegionEntry\n+Segment at 19:12 (count = 0), Skipped\n+Segment at 20:9 (count = 1), RegionEntry\n+Segment at 21:22 (count = 0), Skipped\n+Segment at 27:1 (count = 1), RegionEntry\n+Segment at 27:2 (count = 0), Skipped"}, {"sha": "013a69ed3983a35ce18506d14124930ac71b9599", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.generics.txt", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.generics.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,48 @@\n+Counter in file 0 17:24 -> 19:6, #1\n+Counter in file 0 17:24 -> 19:6, #1\n+Counter in file 0 23:9 -> 28:28, #1\n+Counter in file 0 30:8 -> 30:12, (#1 + 0)\n+Counter in file 0 31:9 -> 32:22, #2\n+Counter in file 0 38:1 -> 38:2, (#2 + 0)\n+Counter in file 0 10:49 -> 12:6, #1\n+Counter in file 0 10:49 -> 12:6, #1\n+Emitting segments for file: ../coverage/generics.rs\n+Combined regions:\n+  10:49 -> 12:6 (count=3)\n+  17:24 -> 19:6 (count=2)\n+  23:9 -> 28:28 (count=1)\n+  30:8 -> 30:12 (count=1)\n+  31:9 -> 32:22 (count=1)\n+  38:1 -> 38:2 (count=1)\n+Segment at 10:49 (count = 3), RegionEntry\n+Segment at 12:6 (count = 0), Skipped\n+Segment at 17:24 (count = 2), RegionEntry\n+Segment at 19:6 (count = 0), Skipped\n+Segment at 23:9 (count = 1), RegionEntry\n+Segment at 28:28 (count = 0), Skipped\n+Segment at 30:8 (count = 1), RegionEntry\n+Segment at 30:12 (count = 0), Skipped\n+Segment at 31:9 (count = 1), RegionEntry\n+Segment at 32:22 (count = 0), Skipped\n+Segment at 38:1 (count = 1), RegionEntry\n+Segment at 38:2 (count = 0), Skipped\n+Emitting segments for function: _RNvMCs4fqI2P2rA04_8genericsINtB2_8FireworkdE12set_strengthB2_\n+Combined regions:\n+  10:49 -> 12:6 (count=2)\n+Segment at 10:49 (count = 2), RegionEntry\n+Segment at 12:6 (count = 0), Skipped\n+Emitting segments for function: _RNvMCs4fqI2P2rA04_8genericsINtB2_8FireworklE12set_strengthB2_\n+Combined regions:\n+  10:49 -> 12:6 (count=1)\n+Segment at 10:49 (count = 1), RegionEntry\n+Segment at 12:6 (count = 0), Skipped\n+Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworklENtNtNtCs7f2nZg1zwMz_4core3ops4drop4Drop4dropB4_\n+Combined regions:\n+  17:24 -> 19:6 (count=1)\n+Segment at 17:24 (count = 1), RegionEntry\n+Segment at 19:6 (count = 0), Skipped\n+Emitting segments for function: _RNvXs_Cs4fqI2P2rA04_8genericsINtB4_8FireworkdENtNtNtCs7f2nZg1zwMz_4core3ops4drop4Drop4dropB4_\n+Combined regions:\n+  17:24 -> 19:6 (count=1)\n+Segment at 17:24 (count = 1), RegionEntry\n+Segment at 19:6 (count = 0), Skipped"}, {"sha": "c2bef365ea9d8fb437fd000aed438930974d925d", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.if.txt", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,21 @@\n+Counter in file 0 8:5 -> 18:10, #1\n+Counter in file 0 21:9 -> 21:16, (#1 + 0)\n+Counter in file 0 22:5 -> 27:6, #2\n+Counter in file 0 27:6 -> 27:7, (#1 - #2)\n+Counter in file 0 28:1 -> 28:2, (#2 + (#1 - #2))\n+Emitting segments for file: ../coverage/if.rs\n+Combined regions:\n+  8:5 -> 18:10 (count=1)\n+  21:9 -> 21:16 (count=1)\n+  22:5 -> 27:6 (count=1)\n+  27:6 -> 27:7 (count=0)\n+  28:1 -> 28:2 (count=1)\n+Segment at 8:5 (count = 1), RegionEntry\n+Segment at 18:10 (count = 0), Skipped\n+Segment at 21:9 (count = 1), RegionEntry\n+Segment at 21:16 (count = 0), Skipped\n+Segment at 22:5 (count = 1), RegionEntry\n+Segment at 27:6 (count = 0), RegionEntry\n+Segment at 27:7 (count = 0), Skipped\n+Segment at 28:1 (count = 1), RegionEntry\n+Segment at 28:2 (count = 0), Skipped"}, {"sha": "faf5c094bbaaa14b2e8cb4baebc89db4fe38afba", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.if_else.txt", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.if_else.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,30 @@\n+Counter in file 0 7:9 -> 11:16, #1\n+Counter in file 0 12:5 -> 17:6, #2\n+Counter in file 0 20:9 -> 22:16, (#1 - #2)\n+Counter in file 0 26:9 -> 26:16, (#2 + (#1 - #2))\n+Counter in file 0 27:5 -> 32:6, #3\n+Counter in file 0 34:5 -> 39:6, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 40:1 -> 40:2, (#3 + ((#2 + (#1 - #2)) - #3))\n+Emitting segments for file: ../coverage/if_else.rs\n+Combined regions:\n+  7:9 -> 11:16 (count=1)\n+  12:5 -> 17:6 (count=1)\n+  20:9 -> 22:16 (count=0)\n+  26:9 -> 26:16 (count=1)\n+  27:5 -> 32:6 (count=1)\n+  34:5 -> 39:6 (count=0)\n+  40:1 -> 40:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 11:16 (count = 0), Skipped\n+Segment at 12:5 (count = 1), RegionEntry\n+Segment at 17:6 (count = 0), Skipped\n+Segment at 20:9 (count = 0), RegionEntry\n+Segment at 22:16 (count = 0), Skipped\n+Segment at 26:9 (count = 1), RegionEntry\n+Segment at 26:16 (count = 0), Skipped\n+Segment at 27:5 (count = 1), RegionEntry\n+Segment at 32:6 (count = 0), Skipped\n+Segment at 34:5 (count = 0), RegionEntry\n+Segment at 39:6 (count = 0), Skipped\n+Segment at 40:1 (count = 1), RegionEntry\n+Segment at 40:2 (count = 0), Skipped"}, {"sha": "65cd6481af4cc86881793d6f02c081e095ae14ee", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.inner_items.txt", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.inner_items.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.inner_items.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.inner_items.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,60 @@\n+Counter in file 0 19:13 -> 19:18, #1\n+Counter in file 0 20:13 -> 20:14, #2\n+Counter in file 0 20:17 -> 20:22, (#1 + 0)\n+Counter in file 0 21:9 -> 22:6, (#2 + 0)\n+Counter in file 0 7:9 -> 9:26, #1\n+Counter in file 0 10:8 -> 10:15, (#1 + 0)\n+Counter in file 0 10:16 -> 12:6, #2\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 48:8 -> 48:15, (#2 + (#1 - #2))\n+Counter in file 0 48:16 -> 50:6, #3\n+Counter in file 0 50:6 -> 50:7, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 52:9 -> 57:2, (#3 + ((#2 + (#1 - #2)) - #3))\n+Counter in file 0 33:42 -> 36:10, #1\n+Counter in file 0 41:37 -> 41:41, #1\n+Counter in file 0 42:13 -> 43:10, #2\n+Emitting segments for file: ../coverage/inner_items.rs\n+Combined regions:\n+  7:9 -> 9:26 (count=1)\n+  10:8 -> 10:15 (count=1)\n+  10:16 -> 12:6 (count=1)\n+  12:6 -> 12:7 (count=0)\n+  19:13 -> 19:18 (count=3)\n+  20:13 -> 20:14 (count=3)\n+  20:17 -> 20:22 (count=3)\n+  21:9 -> 22:6 (count=3)\n+  33:42 -> 36:10 (count=1)\n+  41:37 -> 41:41 (count=1)\n+  42:13 -> 43:10 (count=1)\n+  48:8 -> 48:15 (count=1)\n+  48:16 -> 50:6 (count=1)\n+  50:6 -> 50:7 (count=0)\n+  52:9 -> 57:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:26 (count = 0), Skipped\n+Segment at 10:8 (count = 1), RegionEntry\n+Segment at 10:15 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 12:6 (count = 0), RegionEntry\n+Segment at 12:7 (count = 0), Skipped\n+Segment at 19:13 (count = 3), RegionEntry\n+Segment at 19:18 (count = 0), Skipped\n+Segment at 20:13 (count = 3), RegionEntry\n+Segment at 20:14 (count = 0), Skipped\n+Segment at 20:17 (count = 3), RegionEntry\n+Segment at 20:22 (count = 0), Skipped\n+Segment at 21:9 (count = 3), RegionEntry\n+Segment at 22:6 (count = 0), Skipped\n+Segment at 33:42 (count = 1), RegionEntry\n+Segment at 36:10 (count = 0), Skipped\n+Segment at 41:37 (count = 1), RegionEntry\n+Segment at 41:41 (count = 0), Skipped\n+Segment at 42:13 (count = 1), RegionEntry\n+Segment at 43:10 (count = 0), Skipped\n+Segment at 48:8 (count = 1), RegionEntry\n+Segment at 48:15 (count = 0), Skipped\n+Segment at 48:16 (count = 1), RegionEntry\n+Segment at 50:6 (count = 0), RegionEntry\n+Segment at 50:7 (count = 0), Skipped\n+Segment at 52:9 (count = 1), RegionEntry\n+Segment at 57:2 (count = 0), Skipped"}, {"sha": "8e56d79d9d2aa1af5d148cd416b7129f08e2388c", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.lazy_boolean.txt", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.lazy_boolean.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,131 @@\n+Counter in file 0 7:9 -> 9:42, #1\n+Counter in file 0 10:8 -> 10:15, (#1 + 0)\n+Counter in file 0 10:16 -> 14:6, #2\n+Counter in file 0 14:6 -> 14:7, (#1 - #2)\n+Counter in file 0 16:9 -> 16:17, ((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4))\n+Counter in file 0 18:13 -> 18:18, (#2 + (#1 - #2))\n+Counter in file 0 20:13 -> 20:18, ((#2 + (#1 - #2)) - #3)\n+Counter in file 0 20:18 -> 20:19, (#3 + #4)\n+Counter in file 0 20:18 -> 20:19, (((#2 + (#1 - #2)) - #3) - #4)\n+Counter in file 0 23:9 -> 23:17, ((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6))\n+Counter in file 0 25:13 -> 25:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) + 0)\n+Counter in file 0 27:13 -> 27:18, (((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5)\n+Counter in file 0 27:18 -> 27:19, (#5 + #6)\n+Counter in file 0 27:18 -> 27:19, ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)\n+Counter in file 0 29:9 -> 29:17, ((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8))\n+Counter in file 0 29:20 -> 29:25, (((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) + 0)\n+Counter in file 0 29:29 -> 29:34, #7\n+Counter in file 0 29:34 -> 29:35, ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)\n+Counter in file 0 29:34 -> 29:35, (#7 - #8)\n+Counter in file 0 30:9 -> 30:17, ((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10))\n+Counter in file 0 30:20 -> 30:25, (((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) + 0)\n+Counter in file 0 30:29 -> 30:34, #9\n+Counter in file 0 30:34 -> 30:35, ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)\n+Counter in file 0 30:34 -> 30:35, (#9 - #10)\n+Counter in file 0 33:9 -> 34:16, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) + 0)\n+Counter in file 0 35:5 -> 38:6, #11\n+Counter in file 0 38:6 -> 38:7, (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)\n+Counter in file 0 41:9 -> 41:16, (#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11))\n+Counter in file 0 42:5 -> 45:6, #12\n+Counter in file 0 47:5 -> 50:6, ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)\n+Counter in file 0 52:8 -> 52:16, (#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12))\n+Counter in file 0 52:17 -> 54:6, #13\n+Counter in file 0 54:6 -> 54:7, ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)\n+Counter in file 0 56:8 -> 56:15, (#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13))\n+Counter in file 0 56:16 -> 58:6, #14\n+Counter in file 0 58:12 -> 60:6, ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14)\n+Counter in file 0 61:1 -> 61:2, (#14 + ((#13 + ((#12 + ((#11 + (((#9 - #10) + ((((#7 - #8) + ((((#5 + #6) + ((((#3 + #4) + (((#2 + (#1 - #2)) - #3) - #4)) - #5) - #6)) - #7) + #8)) - #9) + #10)) - #11)) - #12)) - #13)) - #14))\n+Emitting segments for file: ../coverage/lazy_boolean.rs\n+Combined regions:\n+  7:9 -> 9:42 (count=1)\n+  10:8 -> 10:15 (count=1)\n+  10:16 -> 14:6 (count=1)\n+  14:6 -> 14:7 (count=0)\n+  16:9 -> 16:17 (count=1)\n+  18:13 -> 18:18 (count=1)\n+  20:13 -> 20:18 (count=0)\n+  20:18 -> 20:19 (count=1)\n+  23:9 -> 23:17 (count=1)\n+  25:13 -> 25:18 (count=1)\n+  27:13 -> 27:18 (count=1)\n+  27:18 -> 27:19 (count=1)\n+  29:9 -> 29:17 (count=1)\n+  29:20 -> 29:25 (count=1)\n+  29:29 -> 29:34 (count=1)\n+  29:34 -> 29:35 (count=1)\n+  30:9 -> 30:17 (count=1)\n+  30:20 -> 30:25 (count=1)\n+  30:29 -> 30:34 (count=0)\n+  30:34 -> 30:35 (count=1)\n+  33:9 -> 34:16 (count=1)\n+  35:5 -> 38:6 (count=0)\n+  38:6 -> 38:7 (count=1)\n+  41:9 -> 41:16 (count=1)\n+  42:5 -> 45:6 (count=1)\n+  47:5 -> 50:6 (count=0)\n+  52:8 -> 52:16 (count=1)\n+  52:17 -> 54:6 (count=0)\n+  54:6 -> 54:7 (count=1)\n+  56:8 -> 56:15 (count=1)\n+  56:16 -> 58:6 (count=1)\n+  58:12 -> 60:6 (count=0)\n+  61:1 -> 61:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:42 (count = 0), Skipped\n+Segment at 10:8 (count = 1), RegionEntry\n+Segment at 10:15 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 14:6 (count = 0), RegionEntry\n+Segment at 14:7 (count = 0), Skipped\n+Segment at 16:9 (count = 1), RegionEntry\n+Segment at 16:17 (count = 0), Skipped\n+Segment at 18:13 (count = 1), RegionEntry\n+Segment at 18:18 (count = 0), Skipped\n+Segment at 20:13 (count = 0), RegionEntry\n+Segment at 20:18 (count = 1), RegionEntry\n+Segment at 20:19 (count = 0), Skipped\n+Segment at 23:9 (count = 1), RegionEntry\n+Segment at 23:17 (count = 0), Skipped\n+Segment at 25:13 (count = 1), RegionEntry\n+Segment at 25:18 (count = 0), Skipped\n+Segment at 27:13 (count = 1), RegionEntry\n+Segment at 27:18 (count = 1), RegionEntry\n+Segment at 27:19 (count = 0), Skipped\n+Segment at 29:9 (count = 1), RegionEntry\n+Segment at 29:17 (count = 0), Skipped\n+Segment at 29:20 (count = 1), RegionEntry\n+Segment at 29:25 (count = 0), Skipped\n+Segment at 29:29 (count = 1), RegionEntry\n+Segment at 29:34 (count = 1), RegionEntry\n+Segment at 29:35 (count = 0), Skipped\n+Segment at 30:9 (count = 1), RegionEntry\n+Segment at 30:17 (count = 0), Skipped\n+Segment at 30:20 (count = 1), RegionEntry\n+Segment at 30:25 (count = 0), Skipped\n+Segment at 30:29 (count = 0), RegionEntry\n+Segment at 30:34 (count = 1), RegionEntry\n+Segment at 30:35 (count = 0), Skipped\n+Segment at 33:9 (count = 1), RegionEntry\n+Segment at 34:16 (count = 0), Skipped\n+Segment at 35:5 (count = 0), RegionEntry\n+Segment at 38:6 (count = 1), RegionEntry\n+Segment at 38:7 (count = 0), Skipped\n+Segment at 41:9 (count = 1), RegionEntry\n+Segment at 41:16 (count = 0), Skipped\n+Segment at 42:5 (count = 1), RegionEntry\n+Segment at 45:6 (count = 0), Skipped\n+Segment at 47:5 (count = 0), RegionEntry\n+Segment at 50:6 (count = 0), Skipped\n+Segment at 52:8 (count = 1), RegionEntry\n+Segment at 52:16 (count = 0), Skipped\n+Segment at 52:17 (count = 0), RegionEntry\n+Segment at 54:6 (count = 1), RegionEntry\n+Segment at 54:7 (count = 0), Skipped\n+Segment at 56:8 (count = 1), RegionEntry\n+Segment at 56:15 (count = 0), Skipped\n+Segment at 56:16 (count = 1), RegionEntry\n+Segment at 58:6 (count = 0), Skipped\n+Segment at 58:12 (count = 0), RegionEntry\n+Segment at 60:6 (count = 0), Skipped\n+Segment at 61:1 (count = 1), RegionEntry\n+Segment at 61:2 (count = 0), Skipped"}, {"sha": "a6144b8072aceb9c512342dd35747a3a8639129e", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.loop_break_value.txt", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loop_break_value.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loop_break_value.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loop_break_value.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,6 @@\n+Counter in file 0 3:11 -> 13:2, #1\n+Emitting segments for file: ../coverage/loop_break_value.rs\n+Combined regions:\n+  3:11 -> 13:2 (count=1)\n+Segment at 3:11 (count = 1), RegionEntry\n+Segment at 13:2 (count = 0), Skipped"}, {"sha": "d8af6998964cf5c60323e20f09bf5f4685033815", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.loops_branches.txt", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_branches.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_branches.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.loops_branches.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,37 @@\n+Counter in file 0 10:12 -> 10:16, #1\n+Counter in file 0 11:16 -> 11:21, #2\n+Counter in file 0 14:14 -> 14:15, (#2 - #5)\n+Counter in file 0 15:13 -> 15:31, (0 + (#2 - #5))\n+Counter in file 0 15:31 -> 15:32, #4\n+Counter in file 0 17:10 -> 17:11, #3\n+Counter in file 0 18:9 -> 18:15, (#3 + 0)\n+Counter in file 0 19:5 -> 19:6, (#4 + (#3 + 0))\n+Counter in file 0 22:11 -> 25:2, #1\n+Emitting segments for file: ../coverage/loops_branches.rs\n+Combined regions:\n+  10:12 -> 10:16 (count=1)\n+  11:16 -> 11:21 (count=1)\n+  14:14 -> 14:15 (count=1)\n+  15:13 -> 15:31 (count=1)\n+  15:31 -> 15:32 (count=0)\n+  17:10 -> 17:11 (count=1)\n+  18:9 -> 18:15 (count=1)\n+  19:5 -> 19:6 (count=1)\n+  22:11 -> 25:2 (count=1)\n+Segment at 10:12 (count = 1), RegionEntry\n+Segment at 10:16 (count = 0), Skipped\n+Segment at 11:16 (count = 1), RegionEntry\n+Segment at 11:21 (count = 0), Skipped\n+Segment at 14:14 (count = 1), RegionEntry\n+Segment at 14:15 (count = 0), Skipped\n+Segment at 15:13 (count = 1), RegionEntry\n+Segment at 15:31 (count = 0), RegionEntry\n+Segment at 15:32 (count = 0), Skipped\n+Segment at 17:10 (count = 1), RegionEntry\n+Segment at 17:11 (count = 0), Skipped\n+Segment at 18:9 (count = 1), RegionEntry\n+Segment at 18:15 (count = 0), Skipped\n+Segment at 19:5 (count = 1), RegionEntry\n+Segment at 19:6 (count = 0), Skipped\n+Segment at 22:11 (count = 1), RegionEntry\n+Segment at 25:2 (count = 0), Skipped"}, {"sha": "f503007353319e2738be05f89f4fa203e4ca8806", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.nested_loops.txt", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.nested_loops.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,73 @@\n+Counter in file 0 2:9 -> 3:27, #1\n+Counter in file 0 5:19 -> 5:32, (#1 + #2)\n+Counter in file 0 6:13 -> 7:24, ((#1 + #2) - #3)\n+Counter in file 0 8:13 -> 8:14, ((((#1 + #2) - #3) + (#5 + #6)) - #7)\n+Counter in file 0 8:18 -> 8:23, (((#1 + #2) - #3) + (#5 + #6))\n+Counter in file 0 9:16 -> 9:22, (((((#1 + #2) - #3) + (#5 + #6)) - #7) + 0)\n+Counter in file 0 10:17 -> 10:22, #8\n+Counter in file 0 12:13 -> 12:19, #9\n+Counter in file 0 13:13 -> 13:19, #10\n+Counter in file 0 14:16 -> 14:22, (#10 + 0)\n+Counter in file 0 15:17 -> 16:27, #11\n+Counter in file 0 17:21 -> 17:33, #4\n+Counter in file 0 19:21 -> 21:14, #5\n+Counter in file 0 21:14 -> 21:15, #6\n+Counter in file 0 22:10 -> 22:11, (#5 + #6)\n+Counter in file 0 23:9 -> 23:23, #2\n+Counter in file 0 24:6 -> 24:7, #3\n+Counter in file 0 25:1 -> 25:2, (#4 + #3)\n+Emitting segments for file: ../coverage/nested_loops.rs\n+Combined regions:\n+  2:9 -> 3:27 (count=1)\n+  5:19 -> 5:32 (count=1)\n+  6:13 -> 7:24 (count=1)\n+  8:13 -> 8:14 (count=3)\n+  8:18 -> 8:23 (count=3)\n+  9:16 -> 9:22 (count=3)\n+  10:17 -> 10:22 (count=0)\n+  12:13 -> 12:19 (count=3)\n+  13:13 -> 13:19 (count=3)\n+  14:16 -> 14:22 (count=3)\n+  15:17 -> 16:27 (count=1)\n+  17:21 -> 17:33 (count=1)\n+  19:21 -> 21:14 (count=0)\n+  21:14 -> 21:15 (count=2)\n+  22:10 -> 22:11 (count=2)\n+  23:9 -> 23:23 (count=0)\n+  24:6 -> 24:7 (count=0)\n+  25:1 -> 25:2 (count=1)\n+Segment at 2:9 (count = 1), RegionEntry\n+Segment at 3:27 (count = 0), Skipped\n+Segment at 5:19 (count = 1), RegionEntry\n+Segment at 5:32 (count = 0), Skipped\n+Segment at 6:13 (count = 1), RegionEntry\n+Segment at 7:24 (count = 0), Skipped\n+Segment at 8:13 (count = 3), RegionEntry\n+Segment at 8:14 (count = 0), Skipped\n+Segment at 8:18 (count = 3), RegionEntry\n+Segment at 8:23 (count = 0), Skipped\n+Segment at 9:16 (count = 3), RegionEntry\n+Segment at 9:22 (count = 0), Skipped\n+Segment at 10:17 (count = 0), RegionEntry\n+Segment at 10:22 (count = 0), Skipped\n+Segment at 12:13 (count = 3), RegionEntry\n+Segment at 12:19 (count = 0), Skipped\n+Segment at 13:13 (count = 3), RegionEntry\n+Segment at 13:19 (count = 0), Skipped\n+Segment at 14:16 (count = 3), RegionEntry\n+Segment at 14:22 (count = 0), Skipped\n+Segment at 15:17 (count = 1), RegionEntry\n+Segment at 16:27 (count = 0), Skipped\n+Segment at 17:21 (count = 1), RegionEntry\n+Segment at 17:33 (count = 0), Skipped\n+Segment at 19:21 (count = 0), RegionEntry\n+Segment at 21:14 (count = 2), RegionEntry\n+Segment at 21:15 (count = 0), Skipped\n+Segment at 22:10 (count = 2), RegionEntry\n+Segment at 22:11 (count = 0), Skipped\n+Segment at 23:9 (count = 0), RegionEntry\n+Segment at 23:23 (count = 0), Skipped\n+Segment at 24:6 (count = 0), RegionEntry\n+Segment at 24:7 (count = 0), Skipped\n+Segment at 25:1 (count = 1), RegionEntry\n+Segment at 25:2 (count = 0), Skipped"}, {"sha": "2b9285202f97f533432230f17e7d17389563773d", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.partial_eq.txt", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.partial_eq.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,53 @@\n+Counter in file 0 4:32 -> 4:33, (#3 + (#1 + #2))\n+Counter in file 0 4:48 -> 4:49, ((#1 + #2) + ((#3 + #4) + ((#5 + #6) + #7)))\n+Counter in file 0 21:11 -> 26:2, #1\n+Counter in file 0 8:5 -> 8:17, #1\n+Counter in file 0 8:5 -> 8:17, #1\n+Counter in file 0 4:39 -> 4:40, #1\n+Counter in file 0 4:48 -> 4:49, (#1 + 0)\n+Counter in file 0 4:39 -> 4:40, #1\n+Counter in file 0 4:48 -> 4:49, (#1 + 0)\n+Counter in file 0 8:5 -> 8:17, #1\n+Counter in file 0 4:32 -> 4:33, ((#4 + #5) + #6)\n+Counter in file 0 4:53 -> 4:54, (#1 + (#2 + (#3 + #4)))\n+Counter in file 0 13:9 -> 18:6, #1\n+Counter in file 0 4:39 -> 4:40, #1\n+Counter in file 0 4:48 -> 4:49, (#1 + 0)\n+Counter in file 0 7:5 -> 7:6, #1\n+Counter in file 0 4:10 -> 4:15, #1\n+Counter in file 0 4:35 -> 4:37, #1\n+Counter in file 0 7:5 -> 7:6, #1\n+Counter in file 0 7:5 -> 7:6, #1\n+Counter in file 0 4:17 -> 4:22, #1\n+Counter in file 0 8:5 -> 8:17, #1\n+Counter in file 0 4:39 -> 4:40, #1\n+Counter in file 0 4:48 -> 4:49, (#1 + 0)\n+Counter in file 0 7:5 -> 7:6, #1\n+Emitting segments for file: ../coverage/partial_eq.rs\n+Combined regions:\n+  4:17 -> 4:22 (count=2)\n+  4:39 -> 4:40 (count=1)\n+  4:48 -> 4:49 (count=1)\n+  7:5 -> 7:6 (count=1)\n+  13:9 -> 18:6 (count=2)\n+  21:11 -> 26:2 (count=1)\n+Segment at 4:17 (count = 2), RegionEntry\n+Segment at 4:22 (count = 0), Skipped\n+Segment at 4:39 (count = 1), RegionEntry\n+Segment at 4:40 (count = 0), Skipped\n+Segment at 4:48 (count = 1), RegionEntry\n+Segment at 4:49 (count = 0), Skipped\n+Segment at 7:5 (count = 1), RegionEntry\n+Segment at 7:6 (count = 0), Skipped\n+Segment at 13:9 (count = 2), RegionEntry\n+Segment at 18:6 (count = 0), Skipped\n+Segment at 21:11 (count = 1), RegionEntry\n+Segment at 26:2 (count = 0), Skipped\n+Emitting segments for function: _RNvXs0_Cs4fqI2P2rA04_10partial_eqNtB5_7VersionNtNtCs7f2nZg1zwMz_4core3cmp10PartialOrd2ltB5_\n+Combined regions:\n+  4:39 -> 4:40 (count=1)\n+  4:48 -> 4:49 (count=1)\n+Segment at 4:39 (count = 1), RegionEntry\n+Segment at 4:40 (count = 0), Skipped\n+Segment at 4:48 (count = 1), RegionEntry\n+Segment at 4:49 (count = 0), Skipped"}, {"sha": "255173e5534d194a573bdf2667d8ccf23c65a4cd", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.simple_loop.txt", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,37 @@\n+Counter in file 0 7:9 -> 9:26, #1\n+Counter in file 0 12:9 -> 12:16, (#1 + 0)\n+Counter in file 0 13:5 -> 18:6, #2\n+Counter in file 0 18:6 -> 18:7, (#1 - #2)\n+Counter in file 0 23:13 -> 25:14, ((#2 + (#1 - #2)) + #3)\n+Counter in file 0 27:13 -> 27:18, #4\n+Counter in file 0 30:9 -> 32:10, #3\n+Counter in file 0 34:6 -> 34:7, (#2 + (#1 - #2))\n+Counter in file 0 35:1 -> 35:2, (#4 + 0)\n+Emitting segments for file: ../coverage/simple_loop.rs\n+Combined regions:\n+  7:9 -> 9:26 (count=1)\n+  12:9 -> 12:16 (count=1)\n+  13:5 -> 18:6 (count=1)\n+  18:6 -> 18:7 (count=0)\n+  23:13 -> 25:14 (count=11)\n+  27:13 -> 27:18 (count=1)\n+  30:9 -> 32:10 (count=10)\n+  34:6 -> 34:7 (count=1)\n+  35:1 -> 35:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:26 (count = 0), Skipped\n+Segment at 12:9 (count = 1), RegionEntry\n+Segment at 12:16 (count = 0), Skipped\n+Segment at 13:5 (count = 1), RegionEntry\n+Segment at 18:6 (count = 0), RegionEntry\n+Segment at 18:7 (count = 0), Skipped\n+Segment at 23:13 (count = 11), RegionEntry\n+Segment at 25:14 (count = 0), Skipped\n+Segment at 27:13 (count = 1), RegionEntry\n+Segment at 27:18 (count = 0), Skipped\n+Segment at 30:9 (count = 10), RegionEntry\n+Segment at 32:10 (count = 0), Skipped\n+Segment at 34:6 (count = 1), RegionEntry\n+Segment at 34:7 (count = 0), Skipped\n+Segment at 35:1 (count = 1), RegionEntry\n+Segment at 35:2 (count = 0), Skipped"}, {"sha": "1682a379bc0ff0c60e5c378cfcead525c38c4886", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.simple_match.txt", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_match.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_match.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.simple_match.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,57 @@\n+Counter in file 0 7:9 -> 9:26, #1\n+Counter in file 0 10:8 -> 10:15, (#1 + 0)\n+Counter in file 0 10:16 -> 12:6, #2\n+Counter in file 0 12:6 -> 12:7, (#1 - #2)\n+Counter in file 0 15:9 -> 15:10, (((#2 + (#1 - #2)) + (#3 + #4)) - #5)\n+Counter in file 0 17:9 -> 17:13, ((#2 + (#1 - #2)) + (#3 + #4))\n+Counter in file 0 22:13 -> 22:22, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 24:13 -> 24:14, #3\n+Counter in file 0 26:17 -> 28:18, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) + 0)\n+Counter in file 0 28:18 -> 28:19, ((((#2 + (#1 - #2)) + (#3 + #4)) - #5) - #3)\n+Counter in file 0 30:13 -> 37:14, (#3 + 0)\n+Counter in file 0 40:13 -> 40:15, #4\n+Counter in file 0 42:6 -> 42:7, (#2 + (#1 - #2))\n+Counter in file 0 42:6 -> 42:7, (#3 + #4)\n+Counter in file 0 43:1 -> 43:2, #5\n+Emitting segments for file: ../coverage/simple_match.rs\n+Combined regions:\n+  7:9 -> 9:26 (count=1)\n+  10:8 -> 10:15 (count=1)\n+  10:16 -> 12:6 (count=1)\n+  12:6 -> 12:7 (count=0)\n+  15:9 -> 15:10 (count=2)\n+  17:9 -> 17:13 (count=3)\n+  22:13 -> 22:22 (count=2)\n+  24:13 -> 24:14 (count=1)\n+  26:17 -> 28:18 (count=2)\n+  28:18 -> 28:19 (count=1)\n+  30:13 -> 37:14 (count=1)\n+  40:13 -> 40:15 (count=1)\n+  42:6 -> 42:7 (count=3)\n+  43:1 -> 43:2 (count=1)\n+Segment at 7:9 (count = 1), RegionEntry\n+Segment at 9:26 (count = 0), Skipped\n+Segment at 10:8 (count = 1), RegionEntry\n+Segment at 10:15 (count = 0), Skipped\n+Segment at 10:16 (count = 1), RegionEntry\n+Segment at 12:6 (count = 0), RegionEntry\n+Segment at 12:7 (count = 0), Skipped\n+Segment at 15:9 (count = 2), RegionEntry\n+Segment at 15:10 (count = 0), Skipped\n+Segment at 17:9 (count = 3), RegionEntry\n+Segment at 17:13 (count = 0), Skipped\n+Segment at 22:13 (count = 2), RegionEntry\n+Segment at 22:22 (count = 0), Skipped\n+Segment at 24:13 (count = 1), RegionEntry\n+Segment at 24:14 (count = 0), Skipped\n+Segment at 26:17 (count = 2), RegionEntry\n+Segment at 28:18 (count = 1), RegionEntry\n+Segment at 28:19 (count = 0), Skipped\n+Segment at 30:13 (count = 1), RegionEntry\n+Segment at 37:14 (count = 0), Skipped\n+Segment at 40:13 (count = 1), RegionEntry\n+Segment at 40:15 (count = 0), Skipped\n+Segment at 42:6 (count = 3), RegionEntry\n+Segment at 42:7 (count = 0), Skipped\n+Segment at 43:1 (count = 1), RegionEntry\n+Segment at 43:2 (count = 0), Skipped"}, {"sha": "5887658fe67a2fc3ffe04be831fefc25e062c73f", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.tight_inf_loop.txt", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.tight_inf_loop.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.tight_inf_loop.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.tight_inf_loop.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,10 @@\n+Counter in file 0 2:8 -> 2:13, #1\n+Counter in file 0 5:1 -> 5:2, (#1 - #2)\n+Emitting segments for file: ../coverage/tight_inf_loop.rs\n+Combined regions:\n+  2:8 -> 2:13 (count=1)\n+  5:1 -> 5:2 (count=1)\n+Segment at 2:8 (count = 1), RegionEntry\n+Segment at 2:13 (count = 0), Skipped\n+Segment at 5:1 (count = 1), RegionEntry\n+Segment at 5:2 (count = 0), Skipped"}, {"sha": "a317cd792910dba7b07fab5192a00cc7f3c042b4", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.try_error_result.txt", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.try_error_result.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,72 @@\n+Counter in file 0 13:9 -> 14:23, #1\n+Counter in file 0 17:9 -> 17:10, ((#1 + (#2 + #3)) - #4)\n+Counter in file 0 19:9 -> 19:14, (#1 + (#2 + #3))\n+Counter in file 0 21:9 -> 25:26, #8\n+Counter in file 0 27:13 -> 27:41, #9\n+Counter in file 0 27:41 -> 27:42, #5\n+Counter in file 0 28:13 -> 28:42, (#9 - #5)\n+Counter in file 0 28:42 -> 28:43, #6\n+Counter in file 0 32:13 -> 32:42, (#8 - #9)\n+Counter in file 0 32:42 -> 32:43, #7\n+Counter in file 0 33:10 -> 33:11, #2\n+Counter in file 0 33:10 -> 33:11, #3\n+Counter in file 0 34:6 -> 34:7, (#2 + #3)\n+Counter in file 0 35:5 -> 35:11, #4\n+Counter in file 0 36:1 -> 36:2, ((#5 + (#6 + #7)) + #4)\n+Counter in file 0 5:8 -> 5:20, #1\n+Counter in file 0 6:9 -> 6:16, #2\n+Counter in file 0 8:9 -> 8:15, (#1 - #2)\n+Counter in file 0 10:1 -> 10:2, (#2 + (#1 - #2))\n+Emitting segments for file: ../coverage/try_error_result.rs\n+Combined regions:\n+  5:8 -> 5:20 (count=6)\n+  6:9 -> 6:16 (count=1)\n+  8:9 -> 8:15 (count=5)\n+  10:1 -> 10:2 (count=6)\n+  13:9 -> 14:23 (count=1)\n+  17:9 -> 17:10 (count=6)\n+  19:9 -> 19:14 (count=6)\n+  21:9 -> 25:26 (count=6)\n+  27:13 -> 27:41 (count=1)\n+  27:41 -> 27:42 (count=1)\n+  28:13 -> 28:42 (count=0)\n+  28:42 -> 28:43 (count=0)\n+  32:13 -> 32:42 (count=5)\n+  32:42 -> 32:43 (count=0)\n+  33:10 -> 33:11 (count=5)\n+  34:6 -> 34:7 (count=5)\n+  35:5 -> 35:11 (count=0)\n+  36:1 -> 36:2 (count=1)\n+Segment at 5:8 (count = 6), RegionEntry\n+Segment at 5:20 (count = 0), Skipped\n+Segment at 6:9 (count = 1), RegionEntry\n+Segment at 6:16 (count = 0), Skipped\n+Segment at 8:9 (count = 5), RegionEntry\n+Segment at 8:15 (count = 0), Skipped\n+Segment at 10:1 (count = 6), RegionEntry\n+Segment at 10:2 (count = 0), Skipped\n+Segment at 13:9 (count = 1), RegionEntry\n+Segment at 14:23 (count = 0), Skipped\n+Segment at 17:9 (count = 6), RegionEntry\n+Segment at 17:10 (count = 0), Skipped\n+Segment at 19:9 (count = 6), RegionEntry\n+Segment at 19:14 (count = 0), Skipped\n+Segment at 21:9 (count = 6), RegionEntry\n+Segment at 25:26 (count = 0), Skipped\n+Segment at 27:13 (count = 1), RegionEntry\n+Segment at 27:41 (count = 1), RegionEntry\n+Segment at 27:42 (count = 0), Skipped\n+Segment at 28:13 (count = 0), RegionEntry\n+Segment at 28:42 (count = 0), RegionEntry\n+Segment at 28:43 (count = 0), Skipped\n+Segment at 32:13 (count = 5), RegionEntry\n+Segment at 32:42 (count = 0), RegionEntry\n+Segment at 32:43 (count = 0), Skipped\n+Segment at 33:10 (count = 5), RegionEntry\n+Segment at 33:11 (count = 0), Skipped\n+Segment at 34:6 (count = 5), RegionEntry\n+Segment at 34:7 (count = 0), Skipped\n+Segment at 35:5 (count = 0), RegionEntry\n+Segment at 35:11 (count = 0), Skipped\n+Segment at 36:1 (count = 1), RegionEntry\n+Segment at 36:2 (count = 0), Skipped"}, {"sha": "b0e881da7c8cb5e09e1068d2e7ce1ad16ce5b01e", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.while.txt", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,18 @@\n+Counter in file 0 2:9 -> 2:16, #1\n+Counter in file 0 3:11 -> 3:20, (#1 + #2)\n+Counter in file 0 3:21 -> 4:6, #2\n+Counter in file 0 5:1 -> 5:2, ((#1 + #2) - #2)\n+Emitting segments for file: ../coverage/while.rs\n+Combined regions:\n+  2:9 -> 2:16 (count=1)\n+  3:11 -> 3:20 (count=1)\n+  3:21 -> 4:6 (count=0)\n+  5:1 -> 5:2 (count=1)\n+Segment at 2:9 (count = 1), RegionEntry\n+Segment at 2:16 (count = 0), Skipped\n+Segment at 3:11 (count = 1), RegionEntry\n+Segment at 3:20 (count = 0), Skipped\n+Segment at 3:21 (count = 0), RegionEntry\n+Segment at 4:6 (count = 0), Skipped\n+Segment at 5:1 (count = 1), RegionEntry\n+Segment at 5:2 (count = 0), Skipped"}, {"sha": "f541baec50c0bb0008a583f1017e77f8c0c4ef02", "filename": "src/test/run-make-fulldeps/coverage-reports-deadcode/expected_show_coverage_counters.while_early_ret.txt", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_ret.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_ret.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports-deadcode%2Fexpected_show_coverage_counters.while_early_ret.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,38 @@\n+Counter in file 0 5:9 -> 5:27, #1\n+Counter in file 0 7:9 -> 9:10, (#1 + #2)\n+Counter in file 0 12:13 -> 14:14, ((#1 + #2) - #3)\n+Counter in file 0 18:21 -> 20:22, #6\n+Counter in file 0 22:21 -> 22:27, #4\n+Counter in file 0 26:21 -> 26:27, #5\n+Counter in file 0 30:9 -> 32:10, #2\n+Counter in file 0 35:5 -> 35:11, #3\n+Counter in file 0 36:1 -> 36:2, ((#4 + #5) + #3)\n+Emitting segments for file: ../coverage/while_early_ret.rs\n+Combined regions:\n+  5:9 -> 5:27 (count=1)\n+  7:9 -> 9:10 (count=7)\n+  12:13 -> 14:14 (count=7)\n+  18:21 -> 20:22 (count=1)\n+  22:21 -> 22:27 (count=0)\n+  26:21 -> 26:27 (count=1)\n+  30:9 -> 32:10 (count=6)\n+  35:5 -> 35:11 (count=0)\n+  36:1 -> 36:2 (count=1)\n+Segment at 5:9 (count = 1), RegionEntry\n+Segment at 5:27 (count = 0), Skipped\n+Segment at 7:9 (count = 7), RegionEntry\n+Segment at 9:10 (count = 0), Skipped\n+Segment at 12:13 (count = 7), RegionEntry\n+Segment at 14:14 (count = 0), Skipped\n+Segment at 18:21 (count = 1), RegionEntry\n+Segment at 20:22 (count = 0), Skipped\n+Segment at 22:21 (count = 0), RegionEntry\n+Segment at 22:27 (count = 0), Skipped\n+Segment at 26:21 (count = 1), RegionEntry\n+Segment at 26:27 (count = 0), Skipped\n+Segment at 30:9 (count = 6), RegionEntry\n+Segment at 32:10 (count = 0), Skipped\n+Segment at 35:5 (count = 0), RegionEntry\n+Segment at 35:11 (count = 0), Skipped\n+Segment at 36:1 (count = 1), RegionEntry\n+Segment at 36:2 (count = 0), Skipped"}, {"sha": "fb9f5215fe8ee8e41a9c6989b6a1b24efc1eaa72", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/Makefile", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2FMakefile?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -6,8 +6,13 @@\n \n -include ../coverage/coverage_tools.mk\n \n+BASEDIR=../coverage-spanview-base\n SOURCEDIR=../coverage\n \n+ifeq ($(UNAME),Darwin)\n+SED_HAS_ISSUES=1\n+endif\n+\n all: $(patsubst $(SOURCEDIR)/%.rs,%,$(wildcard $(SOURCEDIR)/*.rs))\n \n # Ensure there are no `expected` results for tests that may have been removed or renamed\n@@ -25,8 +30,36 @@ endif\n \t\t\t-Zinstrument-coverage \\\n \t\t\t-Clink-dead-code=$(LINK_DEAD_CODE) \\\n \t\t\t-Zdump-mir=InstrumentCoverage \\\n+\t\t\t-Zdump-mir-spanview \\\n \t\t\t-Zdump-mir-dir=\"$(TMPDIR)\"/mir_dump.$@\n \n+ifdef SED_HAS_ISSUES\n+\t# FIXME(richkadel): MacOS's default sed has some significant limitations. Until I've come up\n+\t# with a better workaround, I'm disabling this test for MacOS.\n+\t#\n+\t# For future reference, see if `gsed` is available as an alternative.\n+\twhich gsed || echo \"no gsed\"\n+else\n+\n+\tfor path in \"$(TMPDIR)\"/mir_dump.$@/*; do \\\n+\t\techo $$path; \\\n+\t\tfile=\"$$(basename \"$$path\")\"; \\\n+\t\techo $$file; \\\n+\t\turlescaped=\"$$(\"$(PYTHON)\" $(BASEDIR)/escape_url.py $$file)\" || exit $$?; \\\n+\t\techo $$urlescaped; \\\n+\t\tsed -i -e '1a\\\n+<!--\\\n+\\\n+Preview this file as rendered HTML from the github source at:\\\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.$@/'\"$$urlescaped\"'\\\n+\\\n+For revisions in Pull Requests (PR):\\\n+  * Replace \"rust-lang\" with the github PR author\\\n+  * Replace \"master\" with the PR branch name\\\n+\\\n+-->' \"$$path\"; \\\n+\tdone && true # for/done ends in non-zero status\n+\n ifdef RUSTC_BLESS_TEST\n \tmkdir -p expected_mir_dump.$@\n \tcp \"$(TMPDIR)\"/mir_dump.$@/*InstrumentCoverage.0.html expected_mir_dump.$@/\n@@ -37,3 +70,5 @@ else\n \tcp \"$(TMPDIR)\"/mir_dump.$@/*InstrumentCoverage.0.html \"$(TMPDIR)\"/actual_mir_dump.$@/\n \t$(DIFF) -r expected_mir_dump.$@/ \"$(TMPDIR)\"/actual_mir_dump.$@/\n endif\n+\n+endif"}, {"sha": "b725ed46303020c357069dacd2af536f15e3a3de", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/escape_url.py", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fescape_url.py", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fescape_url.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fescape_url.py?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,12 @@\n+#!/usr/bin/env python\n+\n+import sys\n+\n+# Support python 2 or 3\n+try:\n+    from urllib.parse import quote\n+except ImportError:\n+    from urllib import quote\n+\n+# Converts the input string into a valid URL parameter string.\n+print (quote(' '.join(sys.argv[1:])))"}, {"sha": "2d179aa0f1147489bebf41691d8bbe499ab2ca99", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-{closure#0}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#0} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 35:13-35:26: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n 36:12-36:20: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+36:21-38:10: @3[1]: _3 = const ()\n+38:10-38:10: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\">            countdown = 10;</span></span>\n+36:21-38:10: @3[1]: _3 = const ()\n+38:10-38:10: @3.Goto: goto -&gt; bb4\">            countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n+36:21-38:10: @3[1]: _3 = const ()\n+38:10-38:10: @3.Goto: goto -&gt; bb4\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:10-38:10: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n 39:9-39:23: @4[5]: _5 = &amp;(*_6)\n 39:9-39:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 40:6-40:6: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 2\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n 39:9-39:23: @4[5]: _5 = &amp;(*_6)\n 39:9-39:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 40:6-40:6: @5.Return: return\">    }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "58e81a221d3a8ddfae1305650edeff88414d63ab", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-{closure#1}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#1} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 77:13-77:26: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n 78:12-78:20: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+78:21-80:10: @3[1]: _3 = const ()\n+80:10-80:10: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\">            countdown = 10;</span></span>\n+78:21-80:10: @3[1]: _3 = const ()\n+80:10-80:10: @3.Goto: goto -&gt; bb4\">            countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n+78:21-80:10: @3[1]: _3 = const ()\n+80:10-80:10: @3.Goto: goto -&gt; bb4\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:10-80:10: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n 81:9-81:23: @4[5]: _5 = &amp;(*_6)\n 81:9-81:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 82:6-82:6: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 4\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n 81:9-81:23: @4[5]: _5 = &amp;(*_6)\n 81:9-81:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 82:6-82:6: @5.Return: return\">    }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "0614da6cee27f1f9d7450ac08af5cffdedd1cc3a", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-{closure#2}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#2} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 20:21-20:34: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n 21:20-21:28: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+21:29-23:18: @3[1]: _3 = const ()\n+23:18-23:18: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\">                    countdown = 10;</span></span>\n+21:29-23:18: @3[1]: _3 = const ()\n+23:18-23:18: @3.Goto: goto -&gt; bb4\">                    countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n+21:29-23:18: @3[1]: _3 = const ()\n+23:18-23:18: @3.Goto: goto -&gt; bb4\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:18-23:18: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n 24:17-24:31: @4[5]: _5 = &amp;(*_6)\n 24:17-24:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 25:14-25:14: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 1\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n 24:17-24:31: @4[5]: _5 = &amp;(*_6)\n 24:17-24:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 25:14-25:14: @5.Return: return\">            }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "bbafb44017cf9c9b85f5f2d2e103adabcaa8b3c5", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-{closure#3}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#3} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 62:21-62:34: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n 63:20-63:28: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+63:29-65:18: @3[1]: _3 = const ()\n+65:18-65:18: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\">                    countdown = 10;</span></span>\n+63:29-65:18: @3[1]: _3 = const ()\n+65:18-65:18: @3.Goto: goto -&gt; bb4\">                    countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n+63:29-65:18: @3[1]: _3 = const ()\n+65:18-65:18: @3.Goto: goto -&gt; bb4\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"65:18-65:18: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n 66:17-66:31: @4[5]: _5 = &amp;(*_6)\n 66:17-66:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 67:14-67:14: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 3\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n 66:17-66:31: @4[5]: _5 = &amp;(*_6)\n 66:17-66:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 67:14-67:14: @5.Return: return\">            }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "8d1938c0922becab34dd6bf90febe71df00685c3", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.closure%2Fclosure.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main - Coverage Spans</title>"}, {"sha": "cda1040c29114148ca7254cbed081bf9231309cf", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.conditions/conditions.main.-------.InstrumentCoverage.0.html", "status": "renamed", "additions": 90, "deletions": 55, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,7 +1,17 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.conditions/conditions.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n-<title>various_conditions.main - Coverage Spans</title>\n+<title>conditions.main - Coverage Spans</title>\n <style>\n     .line {\n         counter-increment: line;\n@@ -64,32 +74,42 @@\n 4:9-4:22: @0[2]: FakeRead(ForLet, _1)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:12: @0[5]: _3 = const true\n 5:8-5:12: @0[6]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+5:13-7:6: @3[1]: _2 = const ()\n+7:6-7:6: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\">        countdown = 10;</span></span>\n+5:13-7:6: @3[1]: _2 = const ()\n+7:6-7:6: @3.Goto: goto -&gt; bb4\">        countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+5:13-7:6: @3[1]: _2 = const ()\n+7:6-7:6: @3.Goto: goto -&gt; bb4\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:6-7:6: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    const B: u32 = 100;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:10: @25[0]: FakeRead(ForLet, _4)\"><span class=\"annotation\">@25\u298a</span>x<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:16-10:25: @4[5]: _6 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:9-10:10: @25[0]: FakeRead(ForLet, _4)\"><span class=\"annotation\">@25\u298a</span>x<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:16-10:25: @4[5]: _6 = _1\n 10:16-10:29: @4[6]: _5 = Gt(move _6, const 7_u32)\n 10:16-10:29: @4[8]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@4\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"11:9-11:23: @7[0]: _7 = CheckedSub(_1, const 4_u32)\"><span class=\"annotation\">@5,7\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@5,7</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:10: @8[1]: _4 = const B\"><span class=\"annotation\">@8\u298a</span>B<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @8[0]: _1 = move (_7.0: u32)\n+12:9-12:10: @8[1]: _4 = const B\"><span class=\"annotation\">@8\u298a</span>countdown -= 4;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @8[0]: _1 = move (_7.0: u32)\n+12:9-12:10: @8[1]: _4 = const B\">        B<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:15-13:24: @6[2]: _9 = _1\n 13:15-13:28: @6[3]: _8 = Gt(move _9, const 2_u32)\n 13:15-13:28: @6[5]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@6\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:12-14:21: @11[5]: _14 = _1\n 14:12-14:25: @11[6]: _13 = Lt(move _14, const 1_u32)\"><span class=\"annotation\">@9,11\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@9,11</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:29-14:38: @18[2]: _16 = _1\n-14:29-14:42: @18[3]: _15 = Gt(move _16, const 5_u32)\"><span class=\"annotation\">@18\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:46-14:55: @14[2]: _18 = _1\n-14:46-14:60: @14[3]: _17 = Ne(move _18, const 9_u32)\"><span class=\"annotation\">@14\u298a</span>countdown != 9<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\"><span class=\"annotation\">@20,22\u298a</span>{</span></span>\n+14:29-14:42: @18[3]: _15 = Gt(move _16, const 5_u32)\"><span class=\"annotation\">@18\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@18</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:42-14:42: @16.Goto: goto -&gt; bb19\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:42-14:42: @17.Goto: goto -&gt; bb19\"><span class=\"annotation\">@17\u298a</span>\u2038<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:46-14:55: @14[2]: _18 = _1\n+14:46-14:60: @14[3]: _17 = Ne(move _18, const 9_u32)\"><span class=\"annotation\">@14\u298a</span>countdown != 9<span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:60-14:60: @12.Goto: goto -&gt; bb15\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:60-14:60: @13.Goto: goto -&gt; bb15\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n+14:61-16:10: @22[1]: _10 = const ()\n+16:10-16:10: @22.Goto: goto -&gt; bb23\"><span class=\"annotation\">@20,22\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\">            countdown = 0;</span></span>\n+14:61-16:10: @22[1]: _10 = const ()\n+16:10-16:10: @22.Goto: goto -&gt; bb23\">            countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\">        }<span class=\"annotation\">\u2989@20,22</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:23: @23[2]: _19 = CheckedSub(_1, const 5_u32)\"><span class=\"annotation\">@23\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:9-18:18: @24[1]: _4 = _1\"><span class=\"annotation\">@24\u298a</span>countdown<span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+14:61-16:10: @22[1]: _10 = const ()\n+16:10-16:10: @22.Goto: goto -&gt; bb23\">        }<span class=\"annotation\">\u2989@20,22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:10-16:10: @21.Goto: goto -&gt; bb23\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @24[0]: _1 = move (_19.0: u32)\n+18:9-18:18: @24[1]: _4 = _1\"><span class=\"annotation\">@24\u298a</span>countdown -= 5;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @24[0]: _1 = move (_19.0: u32)\n+18:9-18:18: @24[1]: _4 = _1\">        countdown<span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:9-20:15: @10[0]: _0 = const ()\"><span class=\"annotation\">@10\u298a</span>return<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    };</span></span>\n@@ -98,29 +118,35 @@\n 23:9-23:22: @25[4]: FakeRead(ForLet, _21)\"><span class=\"annotation\">@25\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:8-24:12: @25[7]: _23 = const true\n 24:8-24:12: @25[8]: FakeRead(ForMatchedPlace, _23)\"><span class=\"annotation\">@25\u298a</span>true<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\"><span class=\"annotation\">@26,28\u298a</span>{</span></span>\n+24:13-26:6: @28[1]: _22 = const ()\n+26:6-26:6: @28.Goto: goto -&gt; bb29\"><span class=\"annotation\">@26,28\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\">        countdown = 10;</span></span>\n+24:13-26:6: @28[1]: _22 = const ()\n+26:6-26:6: @28.Goto: goto -&gt; bb29\">        countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\">    }<span class=\"annotation\">\u2989@26,28</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+24:13-26:6: @28[1]: _22 = const ()\n+26:6-26:6: @28.Goto: goto -&gt; bb29\">    }<span class=\"annotation\">\u2989@26,28</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:6-26:6: @27.Goto: goto -&gt; bb29\"><span class=\"annotation\">@27\u298a</span>\u2038<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:8-28:17: @29[5]: _26 = _21\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:8-28:17: @29[5]: _26 = _21\n 28:8-28:21: @29[6]: _25 = Gt(move _26, const 7_i32)\n 28:8-28:21: @29[8]: FakeRead(ForMatchedPlace, _25)\"><span class=\"annotation\">@29\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:9-29:23: @32[0]: _27 = CheckedSub(_21, const 4_i32)\"><span class=\"annotation\">@30,32\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@30,32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:15-30:24: @31[2]: _29 = _21\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @33[0]: _21 = move (_27.0: i32)\"><span class=\"annotation\">@33\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:15-30:24: @31[2]: _29 = _21\n 30:15-30:28: @31[3]: _28 = Gt(move _29, const 2_i32)\n 30:15-30:28: @31[5]: FakeRead(ForMatchedPlace, _28)\"><span class=\"annotation\">@31\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:12-31:21: @36[5]: _34 = _21\n-31:12-31:25: @36[6]: _33 = Lt(move _34, const 1_i32)\"><span class=\"annotation\">@34,36\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@34,36</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:29-31:38: @43[2]: _36 = _21\n-31:29-31:42: @43[3]: _35 = Gt(move _36, const 5_i32)\"><span class=\"annotation\">@43\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@43</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:46-31:55: @39[2]: _38 = _21\n-31:46-31:60: @39[3]: _37 = Ne(move _38, const 9_i32)\"><span class=\"annotation\">@39\u298a</span>countdown != 9<span class=\"annotation\">\u2989@39</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\"><span class=\"annotation\">@45,47\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\">        }<span class=\"annotation\">\u2989@45,47</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:23: @48[2]: _39 = CheckedSub(_21, const 5_i32)\"><span class=\"annotation\">@48\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@48</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:12-31:21: @36[5]: _34 = _21\n+31:12-31:25: @36[6]: _33 = Lt(move _34, const 1_i32)\"><span class=\"annotation\">@34,36\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@34,36</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:29-31:38: @43[2]: _36 = _21\n+31:29-31:42: @43[3]: _35 = Gt(move _36, const 5_i32)\"><span class=\"annotation\">@43\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@43</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:42-31:42: @41.Goto: goto -&gt; bb44\"><span class=\"annotation\">@41\u298a</span>\u2038<span class=\"annotation\">\u2989@41</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:42-31:42: @42.Goto: goto -&gt; bb44\"><span class=\"annotation\">@42\u298a</span>\u2038<span class=\"annotation\">\u2989@42</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:46-31:55: @39[2]: _38 = _21\n+31:46-31:60: @39[3]: _37 = Ne(move _38, const 9_i32)\"><span class=\"annotation\">@39\u298a</span>countdown != 9<span class=\"annotation\">\u2989@39</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:60-31:60: @37.Goto: goto -&gt; bb40\"><span class=\"annotation\">@37\u298a</span>\u2038<span class=\"annotation\">\u2989@37</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:60-31:60: @38.Goto: goto -&gt; bb40\"><span class=\"annotation\">@38\u298a</span>\u2038<span class=\"annotation\">\u2989@38</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n+31:61-33:10: @47[1]: _30 = const ()\n+33:10-33:10: @47.Goto: goto -&gt; bb48\"><span class=\"annotation\">@45,47\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n+31:61-33:10: @47[1]: _30 = const ()\n+33:10-33:10: @47.Goto: goto -&gt; bb48\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n+31:61-33:10: @47[1]: _30 = const ()\n+33:10-33:10: @47.Goto: goto -&gt; bb48\">        }<span class=\"annotation\">\u2989@45,47</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:10-33:10: @46.Goto: goto -&gt; bb48\"><span class=\"annotation\">@46\u298a</span>\u2038<span class=\"annotation\">\u2989@46</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:23: @49[0]: _21 = move (_39.0: i32)\"><span class=\"annotation\">@49\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@49</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:15: @35[0]: _0 = const ()\"><span class=\"annotation\">@35\u298a</span>return<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n@@ -129,29 +155,35 @@\n 39:9-39:22: @50[4]: FakeRead(ForLet, _41)\"><span class=\"annotation\">@50\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@50</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"40:8-40:12: @50[7]: _43 = const true\n 40:8-40:12: @50[8]: FakeRead(ForMatchedPlace, _43)\"><span class=\"annotation\">@50\u298a</span>true<span class=\"annotation\">\u2989@50</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:22: @53[0]: _41 = const 1_i32\n-40:13-42:6: @53[1]: _42 = const ()\"><span class=\"annotation\">@51,53\u298a</span>{</span></span>\n+40:13-42:6: @53[1]: _42 = const ()\n+42:6-42:6: @53.Goto: goto -&gt; bb54\"><span class=\"annotation\">@51,53\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:22: @53[0]: _41 = const 1_i32\n-40:13-42:6: @53[1]: _42 = const ()\">        countdown = 1;</span></span>\n+40:13-42:6: @53[1]: _42 = const ()\n+42:6-42:6: @53.Goto: goto -&gt; bb54\">        countdown = 1;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:22: @53[0]: _41 = const 1_i32\n-40:13-42:6: @53[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@51,53</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+40:13-42:6: @53[1]: _42 = const ()\n+42:6-42:6: @53.Goto: goto -&gt; bb54\">    }<span class=\"annotation\">\u2989@51,53</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:6-42:6: @52.Goto: goto -&gt; bb54\"><span class=\"annotation\">@52\u298a</span>\u2038<span class=\"annotation\">\u2989@52</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:9-44:10: @77[0]: FakeRead(ForLet, _44)\"><span class=\"annotation\">@77\u298a</span>z<span class=\"annotation\">\u2989@77</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:16-44:25: @54[5]: _46 = _41\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:9-44:10: @77[0]: FakeRead(ForLet, _44)\"><span class=\"annotation\">@77\u298a</span>z<span class=\"annotation\">\u2989@77</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:16-44:25: @54[5]: _46 = _41\n 44:16-44:29: @54[6]: _45 = Gt(move _46, const 7_i32)\n 44:16-44:29: @54[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@54\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@54</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"45:9-45:23: @57[0]: _47 = CheckedSub(_41, const 4_i32)\"><span class=\"annotation\">@55,57\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@55,57</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:15-46:24: @56[2]: _49 = _41\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:9-45:23: @58[0]: _41 = move (_47.0: i32)\"><span class=\"annotation\">@58\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@58</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"46:15-46:24: @56[2]: _49 = _41\n 46:15-46:28: @56[3]: _48 = Gt(move _49, const 2_i32)\n 46:15-46:28: @56[5]: FakeRead(ForMatchedPlace, _48)\"><span class=\"annotation\">@56\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@56</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:12-47:21: @61[5]: _54 = _41\n-47:12-47:25: @61[6]: _53 = Lt(move _54, const 1_i32)\"><span class=\"annotation\">@59,61\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@59,61</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:29-47:38: @68[2]: _56 = _41\n-47:29-47:42: @68[3]: _55 = Gt(move _56, const 5_i32)\"><span class=\"annotation\">@68\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@68</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:46-47:55: @64[2]: _58 = _41\n-47:46-47:60: @64[3]: _57 = Ne(move _58, const 9_i32)\"><span class=\"annotation\">@64\u298a</span>countdown != 9<span class=\"annotation\">\u2989@64</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n-47:61-49:10: @72[1]: _50 = const ()\"><span class=\"annotation\">@70,72\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n-47:61-49:10: @72[1]: _50 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n-47:61-49:10: @72[1]: _50 = const ()\">        }<span class=\"annotation\">\u2989@70,72</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:9-50:23: @73[2]: _59 = CheckedSub(_41, const 5_i32)\"><span class=\"annotation\">@73\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@73</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:12-47:21: @61[5]: _54 = _41\n+47:12-47:25: @61[6]: _53 = Lt(move _54, const 1_i32)\"><span class=\"annotation\">@59,61\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@59,61</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:29-47:38: @68[2]: _56 = _41\n+47:29-47:42: @68[3]: _55 = Gt(move _56, const 5_i32)\"><span class=\"annotation\">@68\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@68</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:42-47:42: @66.Goto: goto -&gt; bb69\"><span class=\"annotation\">@66\u298a</span>\u2038<span class=\"annotation\">\u2989@66</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:42-47:42: @67.Goto: goto -&gt; bb69\"><span class=\"annotation\">@67\u298a</span>\u2038<span class=\"annotation\">\u2989@67</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:46-47:55: @64[2]: _58 = _41\n+47:46-47:60: @64[3]: _57 = Ne(move _58, const 9_i32)\"><span class=\"annotation\">@64\u298a</span>countdown != 9<span class=\"annotation\">\u2989@64</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:60-47:60: @62.Goto: goto -&gt; bb65\"><span class=\"annotation\">@62\u298a</span>\u2038<span class=\"annotation\">\u2989@62</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:60-47:60: @63.Goto: goto -&gt; bb65\"><span class=\"annotation\">@63\u298a</span>\u2038<span class=\"annotation\">\u2989@63</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n+47:61-49:10: @72[1]: _50 = const ()\n+49:10-49:10: @72.Goto: goto -&gt; bb73\"><span class=\"annotation\">@70,72\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n+47:61-49:10: @72[1]: _50 = const ()\n+49:10-49:10: @72.Goto: goto -&gt; bb73\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n+47:61-49:10: @72[1]: _50 = const ()\n+49:10-49:10: @72.Goto: goto -&gt; bb73\">        }<span class=\"annotation\">\u2989@70,72</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:10-49:10: @71.Goto: goto -&gt; bb73\"><span class=\"annotation\">@71\u298a</span>\u2038<span class=\"annotation\">\u2989@71</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:9-50:23: @74[0]: _41 = move (_59.0: i32)\"><span class=\"annotation\">@74\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@74</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:35-52:44: @60[1]: _61 = _41\n 52:13-52:32: @60[2]: FakeRead(ForLet, _61)\n@@ -206,23 +238,26 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:10: @98[0]: FakeRead(ForLet, _74)\"><span class=\"annotation\">@98\u298a</span>w<span class=\"annotation\">\u2989@98</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"57:16-57:25: @77[5]: _76 = _41\n 57:16-57:29: @77[6]: _75 = Gt(move _76, const 7_i32)\n 57:16-57:29: @77[8]: FakeRead(ForMatchedPlace, _75)\"><span class=\"annotation\">@77\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@77</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"58:9-58:23: @80[0]: _77 = CheckedSub(_41, const 4_i32)\"><span class=\"annotation\">@78,80\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@78,80</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"58:9-58:23: @81[0]: _41 = move (_77.0: i32)\"><span class=\"annotation\">@81\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@81</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:15-59:24: @79[2]: _79 = _41\n 59:15-59:28: @79[3]: _78 = Gt(move _79, const 2_i32)\n 59:15-59:28: @79[5]: FakeRead(ForMatchedPlace, _78)\"><span class=\"annotation\">@79\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@79</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:12-60:21: @84[5]: _84 = _41\n 60:12-60:25: @84[6]: _83 = Lt(move _84, const 1_i32)\"><span class=\"annotation\">@82,84\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@82,84</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:29-60:38: @91[2]: _86 = _41\n-60:29-60:42: @91[3]: _85 = Gt(move _86, const 5_i32)\"><span class=\"annotation\">@91\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@91</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:46-60:55: @87[2]: _88 = _41\n-60:46-60:60: @87[3]: _87 = Ne(move _88, const 9_i32)\"><span class=\"annotation\">@87\u298a</span>countdown != 9<span class=\"annotation\">\u2989@87</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n-60:61-62:10: @95[1]: _80 = const ()\"><span class=\"annotation\">@93,95\u298a</span>{</span></span>\n+60:29-60:42: @91[3]: _85 = Gt(move _86, const 5_i32)\"><span class=\"annotation\">@91\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@91</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:42-60:42: @89.Goto: goto -&gt; bb92\"><span class=\"annotation\">@89\u298a</span>\u2038<span class=\"annotation\">\u2989@89</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:42-60:42: @90.Goto: goto -&gt; bb92\"><span class=\"annotation\">@90\u298a</span>\u2038<span class=\"annotation\">\u2989@90</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:46-60:55: @87[2]: _88 = _41\n+60:46-60:60: @87[3]: _87 = Ne(move _88, const 9_i32)\"><span class=\"annotation\">@87\u298a</span>countdown != 9<span class=\"annotation\">\u2989@87</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:60-60:60: @85.Goto: goto -&gt; bb88\"><span class=\"annotation\">@85\u298a</span>\u2038<span class=\"annotation\">\u2989@85</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:60-60:60: @86.Goto: goto -&gt; bb88\"><span class=\"annotation\">@86\u298a</span>\u2038<span class=\"annotation\">\u2989@86</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n+60:61-62:10: @95[1]: _80 = const ()\n+62:10-62:10: @95.Goto: goto -&gt; bb96\"><span class=\"annotation\">@93,95\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n-60:61-62:10: @95[1]: _80 = const ()\">            countdown = 0;</span></span>\n+60:61-62:10: @95[1]: _80 = const ()\n+62:10-62:10: @95.Goto: goto -&gt; bb96\">            countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n-60:61-62:10: @95[1]: _80 = const ()\">        }<span class=\"annotation\">\u2989@93,95</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"63:9-63:23: @96[2]: _89 = CheckedSub(_41, const 5_i32)\"><span class=\"annotation\">@96\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@96</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+60:61-62:10: @95[1]: _80 = const ()\n+62:10-62:10: @95.Goto: goto -&gt; bb96\">        }<span class=\"annotation\">\u2989@93,95</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:10-62:10: @94.Goto: goto -&gt; bb96\"><span class=\"annotation\">@94\u298a</span>\u2038<span class=\"annotation\">\u2989@94</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"63:9-63:23: @97[0]: _41 = move (_89.0: i32)\"><span class=\"annotation\">@97\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@97</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"65:9-65:15: @83[0]: _0 = const ()\"><span class=\"annotation\">@83\u298a</span>return<span class=\"annotation\">\u2989@83</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:15: @83[0]: _0 = const ()\"><span class=\"annotation\">@83\u298a</span>return<span class=\"annotation\">\u2989@83</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    };</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:2-67:2: @102.Return: return\"><span class=\"annotation\">@102\u298a</span>\u2038<span class=\"annotation\">\u2989@102</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"67:2-67:2: @101.Goto: goto -&gt; bb102\"><span class=\"annotation\">@101\u298a</span>\u2038<span class=\"annotation\">\u2989@101</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:2-67:2: @102.Return: return\"><span class=\"annotation\">@102\u298a</span>\u2038<span class=\"annotation\">\u2989@102</span></span></span></span></div>\n </body>\n </html>", "previous_filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.various_conditions/various_conditions.main.-------.InstrumentCoverage.0.html"}, {"sha": "aebeb39fd51790f003eb9d6e6d30699f169b3aea", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>drop_trait.main - Coverage Spans</title>"}, {"sha": "577491a4e247c45ac92b7b0ade185041fcc311dc", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.drop_trait/drop_trait.{impl#0}-drop.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.drop_trait/drop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>drop_trait.{impl#0}-drop - Coverage Spans</title>"}, {"sha": "80a3d52fe43c94e1fa35f861c8282db1188056d5", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>generics.main - Coverage Spans</title>"}, {"sha": "bfd7f6b4bb5a00bad3c46bb1c72e40b65f16a24e", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.{impl#0}-set_strength.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>generics.{impl#0}-set_strength - Coverage Spans</title>"}, {"sha": "58a528e341bef7c94a5ee3b0c8242932377d7913", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.{impl#1}-drop.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>generics.{impl#1}-drop - Coverage Spans</title>"}, {"sha": "77983f853908608d0427824a25a57c4e5778aedf", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.if/if.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.if/if.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>if.main - Coverage Spans</title>\n@@ -146,17 +156,23 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:9-21:16: @3[5]: _6 = _1\n 21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        countdown</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">        countdown</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        =</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">        =</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">            10</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">            10</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        ;</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">        ;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:2-28:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:6-27:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:2-28:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "8716ac45d5714ca3bca4f4cbfddc0d57fce11440", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.if_else/if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.if_else/if_else.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>if_else.main - Coverage Spans</title>"}, {"sha": "9b57c6a7378175147be23f873e444a142a157369", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main-InTrait-default_trait_func - Coverage Spans</title>"}, {"sha": "31bb57be81b53a798f1a6b2d3c8ffb1e94ace7fb", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-in_func.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-in_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-in_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-in_func.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-in_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main-in_func - Coverage Spans</title>\n@@ -63,8 +73,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:17-19:18: @0[1]: _2 = const 1_u32\n 19:13-19:14: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>b = 1<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @1[3]: FakeRead(ForLet, _3)\"><span class=\"annotation\">@1,2,3,4\u298a</span>c<span class=\"annotation\">\u2989@1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:17-20:18: @0[5]: _4 = _1\n-20:21-20:22: @0[7]: _5 = _2\n-20:17-20:22: @0[8]: _6 = CheckedAdd(_4, _5)\"><span class=\"annotation\">@0\u298a</span>a + b<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+20:21-20:22: @0[7]: _5 = _2\"><span class=\"annotation\">@0\u298a</span>a + b<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:26: @1[9]: _23 = const in_func::promoted[0]\n 21:18-21:26: @1[10]: _11 = &amp;(*_23)\n 21:18-21:26: @1[11]: _10 = &amp;(*_11)"}, {"sha": "6c4ce72305e532c195e03dbd8110ead71ae71e45", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-{impl#0}-trait_func.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main-{impl#0}-trait_func - Coverage Spans</title>\n@@ -60,8 +70,7 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 39\"><span class=\"line\">        <span class=\"code\" style=\"--layer: 0\">fn trait_func(&amp;mut self, incr: u32) {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:37-41:41: @0[1]: _3 = _2\n-41:13-41:41: @0[2]: _4 = CheckedAdd(((*_1).0: u32), _3)\"><span class=\"annotation\">@0\u298a</span>self.in_struct_field += incr<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            self.in_struct_field += </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:37-41:41: @0[1]: _3 = _2\"><span class=\"annotation\">@0\u298a</span>incr<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:21-42:41: @1[4]: _6 = ((*_1).0: u32)\n 42:13-42:42: @1.Call: _5 = in_func(move _6) -&gt; [return: bb2, unwind: bb3]\n 43:10-43:10: @2.Return: return\"><span class=\"annotation\">@1,2\u298a</span>in_func(self.in_struct_field);</span></span>"}, {"sha": "815d5efbce69f80ff2b875e692c5357e85556580", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main - Coverage Spans</title>\n@@ -86,11 +96,14 @@\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\">    let mut countdown = 0<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:8-10:15: @3[6]: _7 = _1\n 10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\">        countdown = 10;</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">        countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    mod in_mod {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        const IN_MOD_CONST: u32 = 1000;</span></span>\n@@ -126,16 +139,19 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    type InType = String;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:8-48:15: @7[4]: _9 = _1\n-48:8-48:15: @7[5]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:8-48:15: @7[4]: _9 = _1\n+48:8-48:15: @7[5]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n 49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\"><span class=\"annotation\">@8,10,11\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n+48:16-50:6: @11[2]: _8 = const ()\n+50:6-50:6: @11.Goto: goto -&gt; bb12\"><span class=\"annotation\">@8,10,11\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n 49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\">        in_func(countdown);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n+48:16-50:6: @11[2]: _8 = const ()\n+50:6-50:6: @11.Goto: goto -&gt; bb12\">        in_func(countdown);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n 49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\">    }<span class=\"annotation\">\u2989@8,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+48:16-50:6: @11[2]: _8 = const ()\n+50:6-50:6: @11.Goto: goto -&gt; bb12\">    }<span class=\"annotation\">\u2989@8,10,11</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:6-50:6: @9.Goto: goto -&gt; bb12\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n 52:9-52:16: @12[4]: FakeRead(ForLet, _12)"}, {"sha": "0388ca42ac88be0114677552dffdc34b20cc2ed1", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.lazy_boolean/lazy_boolean.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 111, "deletions": 42, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.lazy_boolean/lazy_boolean.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>lazy_boolean.main - Coverage Spans</title>\n@@ -63,27 +73,27 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb25]\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb24]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb25]\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb24]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb25]\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb24]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n@@ -94,67 +104,126 @@\n 10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        a = 1;</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">        a = 1;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        b = 10;</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">        b = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        c = 100;</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">        c = 100;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:9-16:17: @11[2]: FakeRead(ForLet, _11)\"><span class=\"annotation\">@11\u298a</span>somebool<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:9-16:17: @11[2]: FakeRead(ForLet, _11)\"><span class=\"annotation\">@11\u298a</span>somebool<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:14: @7[5]: _13 = _5\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:13-18:14: @7[5]: _13 = _5\n 18:17-18:18: @7[7]: _14 = _6\n 18:13-18:18: @7[8]: _12 = Lt(move _13, move _14)\"><span class=\"annotation\">@7\u298a</span>a &lt; b<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ||</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:13-20:14: @10[2]: _16 = _6\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @10[2]: _16 = _6\n 20:17-20:18: @10[4]: _17 = _7\n-20:13-20:18: @10[5]: _15 = Lt(move _16, move _17)\"><span class=\"annotation\">@10\u298a</span>b &lt; c<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+20:13-20:18: @10[5]: _15 = Lt(move _16, move _17)\"><span class=\"annotation\">@10\u298a</span>b &lt; c<span class=\"annotation\">\u2989@10</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:18-20:18: @8.Goto: goto -&gt; bb11\"><span class=\"annotation\">@8\u298a</span>\u2038<span class=\"annotation\">\u2989@8</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:18-20:18: @9.Goto: goto -&gt; bb11\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:17: @15[2]: FakeRead(ForLet, _18)\"><span class=\"annotation\">@15\u298a</span>somebool<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:17: @15[2]: FakeRead(ForLet, _18)\"><span class=\"annotation\">@15\u298a</span>somebool<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:13-25:14: @11[6]: _20 = _6\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:13-25:14: @11[6]: _20 = _6\n 25:17-25:18: @11[8]: _21 = _5\n 25:13-25:18: @11[9]: _19 = Lt(move _20, move _21)\"><span class=\"annotation\">@11\u298a</span>b &lt; a<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ||</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:13-27:14: @14[2]: _23 = _6\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:14: @14[2]: _23 = _6\n 27:17-27:18: @14[4]: _24 = _7\n-27:13-27:18: @14[5]: _22 = Lt(move _23, move _24)\"><span class=\"annotation\">@14\u298a</span>b &lt; c<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+27:13-27:18: @14[5]: _22 = Lt(move _23, move _24)\"><span class=\"annotation\">@14\u298a</span>b &lt; c<span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:18-27:18: @12.Goto: goto -&gt; bb15\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:18-27:18: @13.Goto: goto -&gt; bb15\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-30:17: @19[2]: FakeRead(ForLet, _25)\"><span class=\"annotation\">@19\u298a</span>somebool<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:14: @15[6]: _27 = _5\n-32:17-32:18: @15[8]: _28 = _6\n-32:13-32:18: @15[9]: _26 = Lt(move _27, move _28)\"><span class=\"annotation\">@15\u298a</span>a &lt; b<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        &amp;&amp;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:13-34:14: @18[2]: _30 = _6\n-34:17-34:18: @18[4]: _31 = _7\n-34:13-34:18: @18[5]: _29 = Lt(move _30, move _31)\"><span class=\"annotation\">@18\u298a</span>b &lt; c<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:9-37:17: @23[2]: FakeRead(ForLet, _32)\"><span class=\"annotation\">@23\u298a</span>somebool<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"39:13-39:14: @19[6]: _34 = _6\n-39:17-39:18: @19[8]: _35 = _5\n-39:13-39:18: @19[9]: _33 = Lt(move _34, move _35)\"><span class=\"annotation\">@19\u298a</span>b &lt; a<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        &amp;&amp;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:13-41:14: @22[2]: _37 = _6\n-41:17-41:18: @22[4]: _38 = _7\n-41:13-41:18: @22[5]: _36 = Lt(move _37, move _38)\"><span class=\"annotation\">@22\u298a</span>b &lt; c<span class=\"annotation\">\u2989@22</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:2-43:2: @23.Return: return\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:9-29:17: @19[2]: FakeRead(ForLet, _25)\"><span class=\"annotation\">@19\u298a</span>somebool<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:20-29:21: @15[6]: _27 = _5\n+29:24-29:25: @15[8]: _28 = _6\n+29:20-29:25: @15[9]: _26 = Lt(move _27, move _28)\"><span class=\"annotation\">@15\u298a</span>a &lt; b<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:29-29:30: @18[2]: _30 = _6\n+29:33-29:34: @18[4]: _31 = _7\n+29:29-29:34: @18[5]: _29 = Lt(move _30, move _31)\"><span class=\"annotation\">@18\u298a</span>b &lt; c<span class=\"annotation\">\u2989@18</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:34-29:34: @16.Goto: goto -&gt; bb19\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:34-29:34: @17.Goto: goto -&gt; bb19\"><span class=\"annotation\">@17\u298a</span>\u2038<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-30:17: @23[2]: FakeRead(ForLet, _32)\"><span class=\"annotation\">@23\u298a</span>somebool<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:20-30:21: @19[6]: _34 = _6\n+30:24-30:25: @19[8]: _35 = _5\n+30:20-30:25: @19[9]: _33 = Lt(move _34, move _35)\"><span class=\"annotation\">@19\u298a</span>b &lt; a<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:29-30:30: @22[2]: _37 = _6\n+30:33-30:34: @22[4]: _38 = _7\n+30:29-30:34: @22[5]: _36 = Lt(move _37, move _38)\"><span class=\"annotation\">@22\u298a</span>b &lt; c<span class=\"annotation\">\u2989@22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:34-30:34: @20.Goto: goto -&gt; bb23\"><span class=\"annotation\">@20\u298a</span>\u2038<span class=\"annotation\">\u2989@20</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:34-30:34: @21.Goto: goto -&gt; bb23\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @23[6]: _41 = _1\n+33:9-34:16: @23[7]: _40 = Not(move _41)\n+33:9-34:16: @23[9]: FakeRead(ForMatchedPlace, _40)\"><span class=\"annotation\">@23\u298a</span>!</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @23[6]: _41 = _1\n+33:9-34:16: @23[7]: _40 = Not(move _41)\n+33:9-34:16: @23[9]: FakeRead(ForMatchedPlace, _40)\">        is_true<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\"><span class=\"annotation\">@24,26\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\">        a = 2</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\">        ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\">    }<span class=\"annotation\">\u2989@24,26</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:6-38:6: @25.Goto: goto -&gt; bb27\"><span class=\"annotation\">@25\u298a</span>\u2038<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:16: @27[4]: _43 = _1\n+41:9-41:16: @27[5]: FakeRead(ForMatchedPlace, _43)\"><span class=\"annotation\">@27\u298a</span>is_true<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\"><span class=\"annotation\">@28,30\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\">        b = 30</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@28,30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    else</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\"><span class=\"annotation\">@29\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\">        c = 400</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:9-52:16: @31[5]: _46 = _1\n+52:8-52:16: @31[6]: _45 = Not(move _46)\n+52:8-52:16: @31[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@31\u298a</span>!is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:17-54:6: @34[1]: _44 = const ()\n+54:6-54:6: @34.Goto: goto -&gt; bb35\"><span class=\"annotation\">@32,34\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:17-54:6: @34[1]: _44 = const ()\n+54:6-54:6: @34.Goto: goto -&gt; bb35\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:17-54:6: @34[1]: _44 = const ()\n+54:6-54:6: @34.Goto: goto -&gt; bb35\">    }<span class=\"annotation\">\u2989@32,34</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"54:6-54:6: @33.Goto: goto -&gt; bb35\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"56:8-56:15: @35[3]: _47 = _1\n+56:8-56:15: @35[4]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@35\u298a</span>is_true<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\"><span class=\"annotation\">@36,38\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\">        b = 30;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\"><span class=\"annotation\">@37\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\">        c = 400;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@37</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:2-61:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "941bfca76f321de009e19b1a71d0d1182c192bcc", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loop_break_value/loop_break_value.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loop_break_value%2Floop_break_value.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loop_break_value%2Floop_break_value.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loop_break_value%2Floop_break_value.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loop_break_value/loop_break_value.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>loop_break_value.main - Coverage Spans</title>"}, {"sha": "f1488d644d044b4345a29e7de3006d96930bba8c", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loops_branches/loops_branches.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_branches%2Floops_branches.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_branches%2Floops_branches.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_branches%2Floops_branches.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,161 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loops_branches/loops_branches.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>loops_branches.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 21\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\"><span class=\"annotation\">@0,1,2,3\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\">    let debug_test = DebugTest;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\">    println!(\"{:?}\", debug_test);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "334a64b0bb8f9fd6ebaf0bdf2329e0efd5023d23", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loops_branches/loops_branches.{impl#0}-fmt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,104 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loops_branches/loops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>loops_branches.{impl#0}-fmt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 8\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:12-10:16: @0[2]: _4 = const true\n+10:12-10:16: @0[3]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:16-11:21: @3[2]: _6 = const false\n+11:16-11:21: @3[3]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@1,3\u298a</span>false<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                while </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:23-12:27: @7[1]: _8 = const true\n+12:23-12:27: @7[2]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@6,7\u298a</span>true<span class=\"annotation\">\u2989@6,7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @10[0]: _7 = const ()\n+13:18-13:18: @10.Goto: goto -&gt; bb6\"><span class=\"annotation\">@8,10\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @10[0]: _7 = const ()\n+13:18-13:18: @10.Goto: goto -&gt; bb6\">                }<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:14-14:14: @9.Goto: goto -&gt; bb11\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:14-14:14: @5.Goto: goto -&gt; bb11\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:20-15:21: @11[6]: _13 = &amp;mut (*_2)\n+15:23-15:30: @11[11]: _32 = const &lt;DebugTest as Debug&gt;::fmt::promoted[1]\n+15:23-15:30: @11[12]: _17 = &amp;(*_32)\n+15:23-15:30: @11[13]: _16 = &amp;(*_17)\n+15:23-15:30: @11[14]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n+15:13-15:31: @11[20]: _23 = ()\n+15:13-15:31: @11[21]: FakeRead(ForMatchedPlace, _23)\n+15:13-15:31: @11[22]: _31 = const &lt;DebugTest as Debug&gt;::fmt::promoted[0]\n+15:13-15:31: @11[23]: _21 = &amp;(*_31)\n+15:13-15:31: @11[24]: _20 = &amp;(*_21)\n+15:13-15:31: @11[25]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+15:13-15:31: @11.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb12, unwind: bb23]\n+15:13-15:31: @12.Call: _12 = Formatter::write_fmt(move _13, move _14) -&gt; [return: bb13, unwind: bb23]\"><span class=\"annotation\">@11,12,13,14\u298a</span>write!(f, \"error\")<span class=\"annotation\">\u2989@11,12,13,14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:31-15:32: @18[1]: _25 = ((_11 as Err).0: std::fmt::Error)\n+15:31-15:32: @18[4]: _28 = _25\n+15:31-15:32: @18.Call: _27 = &lt;std::fmt::Error as From&lt;std::fmt::Error&gt;&gt;::from(move _28) -&gt; [return: bb19, unwind: bb23]\"><span class=\"annotation\">@16,18,19,20\u298a</span>?<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\">        }<span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:10-17:10: @15.Goto: goto -&gt; bb21\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:14: @21[3]: _30 = ()\n+18:9-18:15: @21[4]: _0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@21\u298a</span>Ok(())<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @22.Return: return\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "7fbda5d0b3d2cc0627edf581de8edc7b1f37418a", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.nested_loops/nested_loops.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,135 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.nested_loops/nested_loops.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>nested_loops.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb35]\n+2:19-2:35: @1[0]: _3 = &amp;_4\n+2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb34]\n+2:19-2:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+2:9-2:16: @2[3]: FakeRead(ForLet, _1)\n+3:25-3:27: @3[2]: _5 = const 10_i32\n+3:9-3:22: @3[3]: FakeRead(ForLet, _5)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb35]\n+2:19-2:35: @1[0]: _3 = &amp;_4\n+2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb34]\n+2:19-2:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+2:9-2:16: @2[3]: FakeRead(ForLet, _1)\n+3:25-3:27: @3[2]: _5 = const 10_i32\n+3:9-3:22: @3[3]: FakeRead(ForLet, _5)\">    let mut countdown = 10<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    'outer: while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:19-5:28: @5[2]: _8 = _5\n+5:19-5:32: @5[3]: _7 = Gt(move _8, const 0_i32)\n+5:19-5:32: @5[5]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@4,5\u298a</span>countdown &gt; 0<span class=\"annotation\">\u2989@4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:21-6:24: @8[1]: _9 = const 100_i32\n+6:13-6:18: @8[2]: FakeRead(ForLet, _9)\n+7:21-7:24: @8[4]: _10 = const 100_i32\n+7:13-7:18: @8[5]: FakeRead(ForLet, _10)\"><span class=\"annotation\">@6,8,9\u298a</span>mut a = 100;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:21-6:24: @8[1]: _9 = const 100_i32\n+6:13-6:18: @8[2]: FakeRead(ForLet, _9)\n+7:21-7:24: @8[4]: _10 = const 100_i32\n+7:13-7:18: @8[5]: FakeRead(ForLet, _10)\">        let mut b = 100<span class=\"annotation\">\u2989@6,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        for </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"8:13-8:14: @16[1]: _21 = ((_17 as Some).0: i32)\n+8:13-8:14: @16[3]: _22 = _21\n+8:13-8:14: @16[4]: _15 = move _22\n+8:13-8:14: @16[5]: _16 = const ()\"><span class=\"annotation\">@14,16\u298a</span>_<span class=\"annotation\">\u2989@14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> in </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:18-8:23: @11[5]: _19 = &amp;mut _14\n+8:18-8:23: @11[6]: _18 = &amp;mut (*_19)\n+8:18-8:23: @11.Call: _17 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _18) -&gt; [return: bb12, unwind: bb35]\n+8:18-8:23: @12[1]: FakeRead(ForMatchedPlace, _17)\"><span class=\"annotation\">@10,11,12\u298a</span>0..50<span class=\"annotation\">\u2989@10,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:16-9:17: @16[15]: _27 = _9\n+9:16-9:22: @16[16]: _26 = Lt(move _27, const 30_i32)\n+9:16-9:22: @16[18]: FakeRead(ForMatchedPlace, _26)\"><span class=\"annotation\">@14,16\u298a</span>a &lt; 30<span class=\"annotation\">\u2989@14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:17-10:22: @19[0]: _11 = const ()\"><span class=\"annotation\">@17,19\u298a</span>break<span class=\"annotation\">\u2989@17,19</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:13-12:19: @20[0]: _9 = move (_29.0: i32)\"><span class=\"annotation\">@20\u298a</span>a -= 5<span class=\"annotation\">\u2989@20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:13-13:19: @21[0]: _10 = move (_30.0: i32)\"><span class=\"annotation\">@21\u298a</span>b -= 5<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:16-14:17: @21[3]: _32 = _10\n+14:16-14:22: @21[4]: _31 = Lt(move _32, const 90_i32)\n+14:16-14:22: @21[6]: FakeRead(ForMatchedPlace, _31)\"><span class=\"annotation\">@21\u298a</span>b &lt; 90<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:17-15:24: @25[0]: _9 = move (_33.0: i32)\n+16:20-16:27: @25[2]: _34 = _1\n+16:20-16:27: @25[3]: FakeRead(ForMatchedPlace, _34)\"><span class=\"annotation\">@25\u298a</span>a -= 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"15:17-15:24: @25[0]: _9 = move (_33.0: i32)\n+16:20-16:27: @25[2]: _34 = _1\n+16:20-16:27: @25[3]: FakeRead(ForMatchedPlace, _34)\">                if is_true<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:21-17:33: @28[0]: _0 = const ()\"><span class=\"annotation\">@26,28\u298a</span>break 'outer<span class=\"annotation\">\u2989@26,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                } else {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n+21:14-21:14: @29.Goto: goto -&gt; bb30\"><span class=\"annotation\">@29\u298a</span>a -= 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n+21:14-21:14: @29.Goto: goto -&gt; bb30\">                }</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n+21:14-21:14: @29.Goto: goto -&gt; bb30\">            }<span class=\"annotation\">\u2989@29</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:14-21:14: @23.Goto: goto -&gt; bb30\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:10-22:10: @30.Goto: goto -&gt; bb10\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:23: @32[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@32\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:6-24:6: @7.Goto: goto -&gt; bb33\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:2-25:2: @33.Return: return\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a7830911376bf59aa36815d736ee8a04e31e89ea", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 295, "deletions": 0, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,295 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 20\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">    let version_3_2_1 = Version::new(3, 2, 1);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">    let version_3_3_0 = Version::new(3, 3, 0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">    println!(\"{:?} &lt; {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 &lt; version_3_3_0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a3c98e97bbd870cda723a13fd1372fc81dd386c2", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#0}-new.-------.InstrumentCoverage.0.html", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,104 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#0}-new - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 11\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">pub fn new(major: usize, minor: usize, patch: usize) -&gt; Self {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>Self {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">            major,</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">            minor,</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">            patch,</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">        }</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">    }<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "1a40b30099da673d25e90940bb5cc6cf9e9da79d", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#1}-cmp.-------.InstrumentCoverage.0.html", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,76 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#1}-cmp - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                                  <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">@14\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n+4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">@11,12\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>Ord<span class=\"annotation\">\u2989@13</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n+4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">\u2989@11,12</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:54-4:54: @15.Return: return\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "0fa59ade1398d2ce6e72e6fb9266fc19087fdce8", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-ge-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Less\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "5399895992e11ed7ed1e68816e284983e7596ced", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-ge-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "044dd7eb9f5774356d9018be5b7f4819c3d90b99", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-ge - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "30047ab79725bd2d566251fbdff8189b77e88de8", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-gt-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Less\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "00b5d91b1cf91ade64c6455df5d7441beb95822b", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-gt-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "f1f78e46639493dc3b13b23dc818285e45e6e32f", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-gt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "e8da313d18e0842a7c28bbc86553575bc10315db", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-le-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Greater\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "91bd3b4af8c2bc33b737f51d7df51adec0fa3595", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-le-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "49ebcfaafb54eda1caa865feda59f721aaeb95c3", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-le - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "55438a463c4209aea00c026722064232a3332dc0", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-lt-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Greater\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "812dc622ec038f12d8706a2a34181b4af7d312ee", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-lt-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "742b45773232b1718203861996bc3ca50d750b85", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-lt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "3714c774bae3f90b9b9a7605aee61a64b003d8b7", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#2}-partial_cmp.-------.InstrumentCoverage.0.html", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,78 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-partial_cmp - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">@17\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n+4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n+4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">@14,15\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @16.Goto: goto -&gt; bb17\"><span class=\"annotation\">@16\u298a</span>PartialOrd<span class=\"annotation\">\u2989@16</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n+4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n+4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">\u2989@14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">\u2989@17</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:49-4:49: @18.Return: return\"><span class=\"annotation\">@18\u298a</span>\u2038<span class=\"annotation\">\u2989@18</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "b908a35f1b799c2209f2debfe8c6cf3759aac140", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#4}-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,75 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#4}-assert_receiver_is_total_eq - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                  <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:35-4:37: @0[0]: _0 = const ()\n+4:37-4:37: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>Eq<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "c7970e368638b86dfd4d9deff53bdcf41172a590", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#6}-eq.-------.InstrumentCoverage.0.html", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,77 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#6}-eq - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                       <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:24-4:33: @1[0]: _0 = const true\n+4:24-4:33: @1.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1\u298a</span>PartialEq<span class=\"annotation\">\u2989@1</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:33-4:33: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "be1f7f7d2e726585250cc0c15511ad3dfda36e29", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#6}-ne.-------.InstrumentCoverage.0.html", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,81 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#6}-ne - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                       <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:24-4:33: @5[0]: _9 = const true\n+4:24-4:33: @5.Goto: goto -&gt; bb8\"><span class=\"annotation\">@5\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:24-4:33: @6[0]: _9 = const false\n+4:24-4:33: @6.Goto: goto -&gt; bb8\"><span class=\"annotation\">@6\u298a</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"4:24-4:33: @1[0]: _0 = const true\n+4:24-4:33: @1.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1\u298a</span>PartialEq<span class=\"annotation\">\u2989@1</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:24-4:33: @6[0]: _9 = const false\n+4:24-4:33: @6.Goto: goto -&gt; bb8\"><span class=\"annotation\">\u2989@6</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:24-4:33: @5[0]: _9 = const true\n+4:24-4:33: @5.Goto: goto -&gt; bb8\"><span class=\"annotation\">\u2989@5</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:33-4:33: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "65b95bae78d6e3a74f497c840ec0c53e1110b08f", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#7}-fmt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,109 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#7}-fmt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:17-4:22: @0[0]: FakeRead(ForMatchedPlace, (*_1))\n+4:17-4:22: @0[2]: _3 = &amp;((*_1).0: usize)\n+4:17-4:22: @0[4]: _4 = &amp;((*_1).1: usize)\n+4:17-4:22: @0[6]: _5 = &amp;((*_1).2: usize)\n+4:17-4:22: @0[9]: _7 = &amp;mut (*_2)\n+4:17-4:22: @0[12]: _9 = const &quot;Version&quot;\n+4:17-4:22: @0[13]: _8 = &amp;(*_9)\n+4:17-4:22: @0.Call: _6 = Formatter::debug_struct(move _7, move _8) -&gt; [return: bb1, unwind: bb6]\n+4:17-4:22: @1[2]: FakeRead(ForLet, _6)\n+4:17-4:22: @1[6]: _11 = &amp;mut _6\n+4:17-4:22: @1[9]: _13 = const &quot;major&quot;\n+4:17-4:22: @1[10]: _12 = &amp;(*_13)\n+4:17-4:22: @1[15]: _17 = &amp;(*_3)\n+4:17-4:22: @1[16]: _16 = &amp;_17\n+4:17-4:22: @1[17]: _15 = &amp;(*_16)\n+4:17-4:22: @1[18]: _14 = move _15 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @1.Call: _10 = DebugStruct::field(move _11, move _12, move _14) -&gt; [return: bb2, unwind: bb6]\n+4:17-4:22: @2[9]: _19 = &amp;mut _6\n+4:17-4:22: @2[12]: _21 = const &quot;minor&quot;\n+4:17-4:22: @2[13]: _20 = &amp;(*_21)\n+4:17-4:22: @2[18]: _25 = &amp;(*_4)\n+4:17-4:22: @2[19]: _24 = &amp;_25\n+4:17-4:22: @2[20]: _23 = &amp;(*_24)\n+4:17-4:22: @2[21]: _22 = move _23 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @2.Call: _18 = DebugStruct::field(move _19, move _20, move _22) -&gt; [return: bb3, unwind: bb6]\n+4:17-4:22: @3[9]: _27 = &amp;mut _6\n+4:17-4:22: @3[12]: _29 = const &quot;patch&quot;\n+4:17-4:22: @3[13]: _28 = &amp;(*_29)\n+4:17-4:22: @3[18]: _33 = &amp;(*_5)\n+4:17-4:22: @3[19]: _32 = &amp;_33\n+4:17-4:22: @3[20]: _31 = &amp;(*_32)\n+4:17-4:22: @3[21]: _30 = move _31 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @3.Call: _26 = DebugStruct::field(move _27, move _28, move _30) -&gt; [return: bb4, unwind: bb6]\n+4:17-4:22: @4[8]: _34 = &amp;mut _6\n+4:17-4:22: @4.Call: _0 = DebugStruct::finish(move _34) -&gt; [return: bb5, unwind: bb6]\n+4:22-4:22: @5.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5\u298a</span>Debug<span class=\"annotation\">\u2989@0,1,2,3,4,5</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a61d3cb8bdcb3c46fa8a9f54a3b5d04bffd35d0f", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.{impl#8}-clone.-------.InstrumentCoverage.0.html", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,88 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#8}-clone - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">         <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:10-4:15: @0[0]: FakeRead(ForMatchedPlace, (*_1))\n+4:10-4:15: @0[2]: _2 = &amp;((*_1).0: usize)\n+4:10-4:15: @0[4]: _3 = &amp;((*_1).1: usize)\n+4:10-4:15: @0[6]: _4 = &amp;((*_1).2: usize)\n+4:10-4:15: @0[10]: _7 = &amp;(*_2)\n+4:10-4:15: @0[11]: _6 = &amp;(*_7)\n+4:10-4:15: @0.Call: _5 = &lt;usize as Clone&gt;::clone(move _6) -&gt; [return: bb1, unwind: bb4]\n+4:10-4:15: @1[4]: _10 = &amp;(*_3)\n+4:10-4:15: @1[5]: _9 = &amp;(*_10)\n+4:10-4:15: @1.Call: _8 = &lt;usize as Clone&gt;::clone(move _9) -&gt; [return: bb2, unwind: bb4]\n+4:10-4:15: @2[4]: _13 = &amp;(*_4)\n+4:10-4:15: @2[5]: _12 = &amp;(*_13)\n+4:10-4:15: @2.Call: _11 = &lt;usize as Clone&gt;::clone(move _12) -&gt; [return: bb3, unwind: bb4]\n+4:10-4:15: @3[1]: _0 = Version { major: move _5, minor: move _8, patch: move _11 }\n+4:15-4:15: @3.Return: return\"><span class=\"annotation\">@0,1,2,3\u298a</span>Clone<span class=\"annotation\">\u2989@0,1,2,3</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "914e829faa0bd1e556418863624e3b6962f731fe", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.simple_loop/simple_loop.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.simple_loop/simple_loop.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>simple_loop.main - Coverage Spans</title>\n@@ -89,39 +99,45 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:9-12:16: @3[6]: _7 = _1\n 12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        countdown</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">        countdown</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        =</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">        =</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">            10</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">            10</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        ;</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">        ;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:6-18:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    loop</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n 23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n 23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@8,9\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n 23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n 23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\">                ==</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n 23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n 23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\">            0<span class=\"annotation\">\u2989@8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:13-27:18: @12[0]: _0 = const ()\"><span class=\"annotation\">@10,12\u298a</span>break<span class=\"annotation\">\u2989@10,12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:18: @12[0]: _0 = const ()\"><span class=\"annotation\">@10,12\u298a</span>break<span class=\"annotation\">\u2989@10,12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\"><span class=\"annotation\">@11\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\">        -=</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\">        1<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @13[0]: _5 = move (_13.0: i32)\"><span class=\"annotation\">@13\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @13[0]: _5 = move (_13.0: i32)\">        -=</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @13[0]: _5 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:6-34:6: @7.Goto: goto -&gt; bb8\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @12.Return: return\"><span class=\"annotation\">@10,12\u298a</span>\u2038<span class=\"annotation\">\u2989@10,12</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "2488ac563e77e5cecc8bef6f10536b7f9e987d7c", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.simple_match/simple_match.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.simple_match/simple_match.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>simple_match.main - Coverage Spans</title>\n@@ -86,51 +96,39 @@\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\">    let mut countdown = 1<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:8-10:15: @3[6]: _7 = _1\n 10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\">        countdown = 0;</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">        countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:9-15:10: @11[2]: _17 = discriminant(_14)\"><span class=\"annotation\">@9,10,11\u298a</span>for</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:9-15:10: @11[2]: _17 = discriminant(_14)\">        _<span class=\"annotation\">\u2989@9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    for</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:9-15:10: @15[1]: _18 = ((_14 as Some).0: i32)\n+15:9-15:10: @15[3]: _19 = _18\n+15:9-15:10: @15[4]: _12 = move _19\n+15:9-15:10: @15[5]: _13 = const ()\"><span class=\"annotation\">@13,15,17\u298a</span>_<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    in</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:13: @7[4]: _9 = std::ops::Range::&lt;i32&gt; { start: const 0_i32, end: const 2_i32 }\n-17:9-17:13: @7.Call: _8 = &lt;std::ops::Range&lt;i32&gt; as IntoIterator&gt;::into_iter(move _9) -&gt; [return: bb8, unwind: bb22]\n-17:9-17:13: @8[1]: FakeRead(ForMatchedPlace, _8)\n-17:9-17:13: @8[3]: _10 = move _8\"><span class=\"annotation\">@7,8\u298a</span>0..2<span class=\"annotation\">\u2989@7,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:13: @10[5]: _16 = &amp;mut _10\n+17:9-17:13: @10[6]: _15 = &amp;mut (*_16)\n+17:9-17:13: @10.Call: _14 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _15) -&gt; [return: bb11, unwind: bb22]\n+17:9-17:13: @11[1]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@9,10,11\u298a</span>0..2<span class=\"annotation\">\u2989@9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let z</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        match</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\"><span class=\"annotation\">@13,15,17\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">        {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">            x</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">            if</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                x</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@13,15,17\u298a</span>countdown<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:13-24:14: @18[3]: _23 = _5\"><span class=\"annotation\">@18\u298a</span>x<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n+26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\"><span class=\"annotation\">@13,15,17\u298a</span>x</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n 26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                    &lt;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                1<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n+26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                1<span class=\"annotation\">\u2989@13,15,17</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:18-28:18: @19.Goto: goto -&gt; bb16\"><span class=\"annotation\">@19\u298a</span>\u2038<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            =&gt;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n 31:17-31:30: @18[6]: _22 = move _27\n@@ -184,7 +182,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            =&gt;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:13-40:15: @16[0]: _21 = const ()\"><span class=\"annotation\">@16\u298a</span>{}<span class=\"annotation\">\u2989@16</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:6-42:6: @8.Goto: goto -&gt; bb9\"><span class=\"annotation\">@7,8\u298a</span>\u2038<span class=\"annotation\">\u2989@7,8</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:6-42:6: @20.Goto: goto -&gt; bb9\"><span class=\"annotation\">@20\u298a</span>\u2038<span class=\"annotation\">\u2989@20</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:2-43:2: @12.Return: return\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "033707a87bb69a3b79b99509f8996b0f2a6caa81", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.tight_inf_loop/tight_inf_loop.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,80 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.tight_inf_loop/tight_inf_loop.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>tight_inf_loop.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\n+2:8-2:13: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:9-3:16: @4.FalseUnwind: falseUnwind -&gt; [real: bb5, cleanup: bb6]\n+3:14-3:16: @5[0]: _3 = const ()\"><span class=\"annotation\">@4,5\u298a</span>loop {}<span class=\"annotation\">\u2989@4,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:16-3:16: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @2.Return: return\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "dfe2eb073aa1806c33ebbb280dbf5f5f73e7ce01", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>try_error_result.call - Coverage Spans</title>"}, {"sha": "5c9baee5d805064462fbc274e362f0c51cc320c2", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 52, "deletions": 25, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>try_error_result.main - Coverage Spans</title>\n@@ -65,37 +75,54 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:21-14:23: @0[1]: _1 = const 10_i32\n 13:9-14:18: @0[2]: FakeRead(ForLet, _1)\">        countdown = 10<span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:10: @4[2]: _12 = discriminant(_9)\"><span class=\"annotation\">@2,3,4\u298a</span>for</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:10: @4[2]: _12 = discriminant(_9)\">        _<span class=\"annotation\">\u2989@2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    for</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:10: @8[1]: _13 = ((_9 as Some).0: i32)\n+17:9-17:10: @8[3]: _14 = _13\n+17:9-17:10: @8[4]: _7 = move _14\n+17:9-17:10: @8[5]: _8 = const ()\"><span class=\"annotation\">@6,8\u298a</span>_<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    in</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:9-19:14: @0[6]: _4 = std::ops::Range::&lt;i32&gt; { start: const 0_i32, end: const 10_i32 }\n-19:9-19:14: @0.Call: _3 = &lt;std::ops::Range&lt;i32&gt; as IntoIterator&gt;::into_iter(move _4) -&gt; [return: bb1, unwind: bb32]\n-19:9-19:14: @1[1]: FakeRead(ForMatchedPlace, _3)\n-19:9-19:14: @1[3]: _5 = move _3\"><span class=\"annotation\">@0,1\u298a</span>0..10<span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:9-19:14: @3[5]: _11 = &amp;mut _5\n+19:9-19:14: @3[6]: _10 = &amp;mut (*_11)\n+19:9-19:14: @3.Call: _9 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _10) -&gt; [return: bb4, unwind: bb40]\n+19:9-19:14: @4[1]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@2,3,4\u298a</span>0..10<span class=\"annotation\">\u2989@2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\"><span class=\"annotation\">@6,8\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\">            -= 1<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:13-25:22: @9[3]: _19 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n 25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n-25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\"><span class=\"annotation\">@9\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\"><span class=\"annotation\">@9\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">            -= 1</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">        if</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">            countdown &lt; 5<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:13-27:41: @12.Call: _22 = call(const true) -&gt; [return: bb13, unwind: bb32]\n-27:13-27:42: @13.Call: _21 = &lt;std::result::Result&lt;(), ()&gt; as Try&gt;::into_result(move _22) -&gt; [return: bb14, unwind: bb32]\n-27:13-27:42: @14[1]: FakeRead(ForMatchedPlace, _21)\n-27:41-27:42: @14[2]: _23 = discriminant(_21)\"><span class=\"annotation\">@10,12,13,14\u298a</span>call(/*return_error=*/ true)?<span class=\"annotation\">\u2989@10,12,13,14</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:41: @12.Call: _22 = call(const true) -&gt; [return: bb13, unwind: bb40]\"><span class=\"annotation\">@10,12,13,14\u298a</span>call(/*return_error=*/ true)<span class=\"annotation\">\u2989@10,12,13,14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:41-27:42: @18[1]: _24 = ((_21 as Err).0: ())\n+27:41-27:42: @18[4]: _27 = _24\n+27:41-27:42: @18.Call: _26 = &lt;() as From&lt;()&gt;&gt;::from(move _27) -&gt; [return: bb19, unwind: bb40]\"><span class=\"annotation\">@16,18,19,20\u298a</span>?<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:13-28:42: @15.Call: _31 = call(const false) -&gt; [return: bb21, unwind: bb40]\"><span class=\"annotation\">@15,21,22\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@15,21,22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:42-28:43: @26[1]: _33 = ((_30 as Err).0: ())\n+28:42-28:43: @26[4]: _36 = _33\n+28:42-28:43: @26.Call: _35 = &lt;() as From&lt;()&gt;&gt;::from(move _36) -&gt; [return: bb27, unwind: bb40]\"><span class=\"annotation\">@24,26,27,28\u298a</span>?<span class=\"annotation\">\u2989@24,26,27,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        else</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:13-31:42: @11.Call: _31 = call(const false) -&gt; [return: bb21, unwind: bb32]\n-31:13-31:43: @21.Call: _30 = &lt;std::result::Result&lt;(), ()&gt; as Try&gt;::into_result(move _31) -&gt; [return: bb22, unwind: bb32]\n-31:13-31:43: @22[1]: FakeRead(ForMatchedPlace, _30)\n-31:42-31:43: @22[2]: _32 = discriminant(_30)\"><span class=\"annotation\">@11,21,22\u298a</span>call(/*return_error=*/ false)?<span class=\"annotation\">\u2989@11,21,22</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:8-34:10: @5[9]: _38 = ()\n-34:5-34:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _38)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @31.Return: return\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:42: @11.Call: _40 = call(const false) -&gt; [return: bb29, unwind: bb40]\"><span class=\"annotation\">@11,29,30\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@11,29,30</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:42-32:43: @34[1]: _42 = ((_39 as Err).0: ())\n+32:42-32:43: @34[4]: _45 = _42\n+32:42-32:43: @34.Call: _44 = &lt;() as From&lt;()&gt;&gt;::from(move _45) -&gt; [return: bb35, unwind: bb40]\"><span class=\"annotation\">@32,34,35,36\u298a</span>?<span class=\"annotation\">\u2989@32,34,35,36</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:10-33:10: @23.Goto: goto -&gt; bb37\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:10-33:10: @31.Goto: goto -&gt; bb37\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:6-34:6: @37.Goto: goto -&gt; bb2\"><span class=\"annotation\">@37\u298a</span>\u2038<span class=\"annotation\">\u2989@37</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @5[9]: _47 = ()\n+35:5-35:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _47)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @38.Goto: goto -&gt; bb39\"><span class=\"annotation\">@38\u298a</span>\u2038<span class=\"annotation\">\u2989@38</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3ba5135122b936bf9cb9407d0018ecc607f9dae2", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while/while.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,81 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while/while.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>while.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:15-2:16: @0[1]: _1 = const 9_i32\n+2:9-2:12: @0[2]: FakeRead(ForLet, _1)\"><span class=\"annotation\">@0\u298a</span>num = 9<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:11-3:14: @2[2]: _4 = _1\n+3:11-3:20: @2[3]: _3 = Ge(move _4, const 10_i32)\n+3:11-3:20: @2[5]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@1,2\u298a</span>num &gt;= 10<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\"><span class=\"annotation\">@3,5\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\">    }<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "765e3b62c11c2f02e83d5e824b9002cb909e7f70", "filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while_early_ret/while_early_ret.main.-------.InstrumentCoverage.0.html", "status": "renamed", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-base%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,7 +1,17 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while_early_ret/while_early_ret.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n-<title>while_early_return.main - Coverage Spans</title>\n+<title>while_early_ret.main - Coverage Spans</title>\n <style>\n     .line {\n         counter-increment: line;\n@@ -62,12 +72,10 @@\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() -&gt; Result&lt;(),u8&gt; {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:25-5:27: @0[1]: _1 = const 10_i32\n 5:9-5:22: @0[2]: FakeRead(ForLet, _1)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 10<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n 7:9-9:10: @2[3]: _4 = Gt(move _5, const 0_i32)\n-7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>while</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n-7:9-9:10: @2[3]: _4 = Gt(move _5, const 0_i32)\n-7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\">        countdown</span></span>\n+7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>countdown</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n 7:9-9:10: @2[3]: _4 = Gt(move _5, const 0_i32)\n 7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\">            &gt;</span></span>\n@@ -107,13 +115,13 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\"><span class=\"annotation\">@7\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\">            -=</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\">        1<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@12\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n 35:5-35:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\"><span class=\"annotation\">@4\u298a</span>Ok(())<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n </body>\n </html>", "previous_filename": "src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while_early_return/while_early_return.main.-------.InstrumentCoverage.0.html"}, {"sha": "2d179aa0f1147489bebf41691d8bbe499ab2ca99", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.closure/closure.main-{closure#0}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#0} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 35:13-35:26: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:12-36:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n 36:12-36:20: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+36:21-38:10: @3[1]: _3 = const ()\n+38:10-38:10: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\">            countdown = 10;</span></span>\n+36:21-38:10: @3[1]: _3 = const ()\n+38:10-38:10: @3.Goto: goto -&gt; bb4\">            countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"37:13-37:27: @3[0]: _2 = const 10_i32\n-36:21-38:10: @3[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n+36:21-38:10: @3[1]: _3 = const ()\n+38:10-38:10: @3.Goto: goto -&gt; bb4\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"38:10-38:10: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n 39:9-39:23: @4[5]: _5 = &amp;(*_6)\n 39:9-39:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 40:6-40:6: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 2\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"39:9-39:23: @4[4]: _6 = const &quot;alt string 2&quot;\n 39:9-39:23: @4[5]: _5 = &amp;(*_6)\n 39:9-39:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 40:6-40:6: @5.Return: return\">    }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "58e81a221d3a8ddfae1305650edeff88414d63ab", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.closure/closure.main-{closure#1}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%231%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#1} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 77:13-77:26: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"78:12-78:20: @0[5]: _4 = (*((*_1).0: &amp;bool))\n 78:12-78:20: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+78:21-80:10: @3[1]: _3 = const ()\n+80:10-80:10: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\">            countdown = 10;</span></span>\n+78:21-80:10: @3[1]: _3 = const ()\n+80:10-80:10: @3.Goto: goto -&gt; bb4\">            countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"79:13-79:27: @3[0]: _2 = const 10_i32\n-78:21-80:10: @3[1]: _3 = const ()\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n+78:21-80:10: @3[1]: _3 = const ()\n+80:10-80:10: @3.Goto: goto -&gt; bb4\">        }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"80:10-80:10: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n 81:9-81:23: @4[5]: _5 = &amp;(*_6)\n 81:9-81:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 82:6-82:6: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 4\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"81:9-81:23: @4[4]: _6 = const &quot;alt string 4&quot;\n 81:9-81:23: @4[5]: _5 = &amp;(*_6)\n 81:9-81:34: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 82:6-82:6: @5.Return: return\">    }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "0614da6cee27f1f9d7450ac08af5cffdedd1cc3a", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.closure/closure.main-{closure#2}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%232%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#2} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 20:21-20:34: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:20-21:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n 21:20-21:28: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+21:29-23:18: @3[1]: _3 = const ()\n+23:18-23:18: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\">                    countdown = 10;</span></span>\n+21:29-23:18: @3[1]: _3 = const ()\n+23:18-23:18: @3.Goto: goto -&gt; bb4\">                    countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"22:21-22:35: @3[0]: _2 = const 10_i32\n-21:29-23:18: @3[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n+21:29-23:18: @3[1]: _3 = const ()\n+23:18-23:18: @3.Goto: goto -&gt; bb4\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:18-23:18: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n 24:17-24:31: @4[5]: _5 = &amp;(*_6)\n 24:17-24:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 25:14-25:14: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 1\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"24:17-24:31: @4[4]: _6 = const &quot;alt string 1&quot;\n 24:17-24:31: @4[5]: _5 = &amp;(*_6)\n 24:17-24:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 25:14-25:14: @5.Return: return\">            }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "bbafb44017cf9c9b85f5f2d2e103adabcaa8b3c5", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.closure/closure.main-{closure#3}.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main-%7Bclosure%233%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main-{closure#3} - Coverage Spans</title>\n@@ -65,16 +75,19 @@\n 62:21-62:34: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"63:20-63:28: @0[5]: _4 = (*(_1.0: &amp;bool))\n 63:20-63:28: @0[6]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>is_false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+63:29-65:18: @3[1]: _3 = const ()\n+65:18-65:18: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\">                    countdown = 10;</span></span>\n+63:29-65:18: @3[1]: _3 = const ()\n+65:18-65:18: @3.Goto: goto -&gt; bb4\">                    countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"64:21-64:35: @3[0]: _2 = const 10_i32\n-63:29-65:18: @3[1]: _3 = const ()\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n+63:29-65:18: @3[1]: _3 = const ()\n+65:18-65:18: @3.Goto: goto -&gt; bb4\">                }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"65:18-65:18: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n 66:17-66:31: @4[5]: _5 = &amp;(*_6)\n 66:17-66:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 67:14-67:14: @5.Return: return\"><span class=\"annotation\">@4,5\u298a</span>\"alt string 3\".to_owned()</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"66:17-66:31: @4[4]: _6 = const &quot;alt string 3&quot;\n 66:17-66:31: @4[5]: _5 = &amp;(*_6)\n 66:17-66:42: @4.Call: _0 = &lt;str as ToOwned&gt;::to_owned(move _5) -&gt; [return: bb5, unwind: bb6]\n 67:14-67:14: @5.Return: return\">            }<span class=\"annotation\">\u2989@4,5</span></span></span></span></div>"}, {"sha": "8d1938c0922becab34dd6bf90febe71df00685c3", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.closure/closure.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.closure%2Fclosure.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.closure/closure.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>closure.main - Coverage Spans</title>"}, {"sha": "cda1040c29114148ca7254cbed081bf9231309cf", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.conditions/conditions.main.-------.InstrumentCoverage.0.html", "status": "renamed", "additions": 90, "deletions": 55, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.conditions%2Fconditions.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,7 +1,17 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.conditions/conditions.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n-<title>various_conditions.main - Coverage Spans</title>\n+<title>conditions.main - Coverage Spans</title>\n <style>\n     .line {\n         counter-increment: line;\n@@ -64,32 +74,42 @@\n 4:9-4:22: @0[2]: FakeRead(ForLet, _1)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:8-5:12: @0[5]: _3 = const true\n 5:8-5:12: @0[6]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n+5:13-7:6: @3[1]: _2 = const ()\n+7:6-7:6: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\">        countdown = 10;</span></span>\n+5:13-7:6: @3[1]: _2 = const ()\n+7:6-7:6: @3.Goto: goto -&gt; bb4\">        countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"6:9-6:23: @3[0]: _1 = const 10_u32\n-5:13-7:6: @3[1]: _2 = const ()\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+5:13-7:6: @3[1]: _2 = const ()\n+7:6-7:6: @3.Goto: goto -&gt; bb4\">    }<span class=\"annotation\">\u2989@1,3</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:6-7:6: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    const B: u32 = 100;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:9-10:10: @25[0]: FakeRead(ForLet, _4)\"><span class=\"annotation\">@25\u298a</span>x<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:16-10:25: @4[5]: _6 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"10:9-10:10: @25[0]: FakeRead(ForLet, _4)\"><span class=\"annotation\">@25\u298a</span>x<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:16-10:25: @4[5]: _6 = _1\n 10:16-10:29: @4[6]: _5 = Gt(move _6, const 7_u32)\n 10:16-10:29: @4[8]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@4\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"11:9-11:23: @7[0]: _7 = CheckedSub(_1, const 4_u32)\"><span class=\"annotation\">@5,7\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@5,7</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:9-12:10: @8[1]: _4 = const B\"><span class=\"annotation\">@8\u298a</span>B<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @8[0]: _1 = move (_7.0: u32)\n+12:9-12:10: @8[1]: _4 = const B\"><span class=\"annotation\">@8\u298a</span>countdown -= 4;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @8[0]: _1 = move (_7.0: u32)\n+12:9-12:10: @8[1]: _4 = const B\">        B<span class=\"annotation\">\u2989@8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:15-13:24: @6[2]: _9 = _1\n 13:15-13:28: @6[3]: _8 = Gt(move _9, const 2_u32)\n 13:15-13:28: @6[5]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@6\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@6</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:12-14:21: @11[5]: _14 = _1\n 14:12-14:25: @11[6]: _13 = Lt(move _14, const 1_u32)\"><span class=\"annotation\">@9,11\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@9,11</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:29-14:38: @18[2]: _16 = _1\n-14:29-14:42: @18[3]: _15 = Gt(move _16, const 5_u32)\"><span class=\"annotation\">@18\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:46-14:55: @14[2]: _18 = _1\n-14:46-14:60: @14[3]: _17 = Ne(move _18, const 9_u32)\"><span class=\"annotation\">@14\u298a</span>countdown != 9<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\"><span class=\"annotation\">@20,22\u298a</span>{</span></span>\n+14:29-14:42: @18[3]: _15 = Gt(move _16, const 5_u32)\"><span class=\"annotation\">@18\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@18</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:42-14:42: @16.Goto: goto -&gt; bb19\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:42-14:42: @17.Goto: goto -&gt; bb19\"><span class=\"annotation\">@17\u298a</span>\u2038<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:46-14:55: @14[2]: _18 = _1\n+14:46-14:60: @14[3]: _17 = Ne(move _18, const 9_u32)\"><span class=\"annotation\">@14\u298a</span>countdown != 9<span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:60-14:60: @12.Goto: goto -&gt; bb15\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:60-14:60: @13.Goto: goto -&gt; bb15\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n+14:61-16:10: @22[1]: _10 = const ()\n+16:10-16:10: @22.Goto: goto -&gt; bb23\"><span class=\"annotation\">@20,22\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\">            countdown = 0;</span></span>\n+14:61-16:10: @22[1]: _10 = const ()\n+16:10-16:10: @22.Goto: goto -&gt; bb23\">            countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:13-15:26: @22[0]: _1 = const 0_u32\n-14:61-16:10: @22[1]: _10 = const ()\">        }<span class=\"annotation\">\u2989@20,22</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:23: @23[2]: _19 = CheckedSub(_1, const 5_u32)\"><span class=\"annotation\">@23\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:9-18:18: @24[1]: _4 = _1\"><span class=\"annotation\">@24\u298a</span>countdown<span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+14:61-16:10: @22[1]: _10 = const ()\n+16:10-16:10: @22.Goto: goto -&gt; bb23\">        }<span class=\"annotation\">\u2989@20,22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:10-16:10: @21.Goto: goto -&gt; bb23\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @24[0]: _1 = move (_19.0: u32)\n+18:9-18:18: @24[1]: _4 = _1\"><span class=\"annotation\">@24\u298a</span>countdown -= 5;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:23: @24[0]: _1 = move (_19.0: u32)\n+18:9-18:18: @24[1]: _4 = _1\">        countdown<span class=\"annotation\">\u2989@24</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:9-20:15: @10[0]: _0 = const ()\"><span class=\"annotation\">@10\u298a</span>return<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    };</span></span>\n@@ -98,29 +118,35 @@\n 23:9-23:22: @25[4]: FakeRead(ForLet, _21)\"><span class=\"annotation\">@25\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:8-24:12: @25[7]: _23 = const true\n 24:8-24:12: @25[8]: FakeRead(ForMatchedPlace, _23)\"><span class=\"annotation\">@25\u298a</span>true<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\"><span class=\"annotation\">@26,28\u298a</span>{</span></span>\n+24:13-26:6: @28[1]: _22 = const ()\n+26:6-26:6: @28.Goto: goto -&gt; bb29\"><span class=\"annotation\">@26,28\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\">        countdown = 10;</span></span>\n+24:13-26:6: @28[1]: _22 = const ()\n+26:6-26:6: @28.Goto: goto -&gt; bb29\">        countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"25:9-25:23: @28[0]: _21 = const 10_i32\n-24:13-26:6: @28[1]: _22 = const ()\">    }<span class=\"annotation\">\u2989@26,28</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+24:13-26:6: @28[1]: _22 = const ()\n+26:6-26:6: @28.Goto: goto -&gt; bb29\">    }<span class=\"annotation\">\u2989@26,28</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"26:6-26:6: @27.Goto: goto -&gt; bb29\"><span class=\"annotation\">@27\u298a</span>\u2038<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:8-28:17: @29[5]: _26 = _21\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:8-28:17: @29[5]: _26 = _21\n 28:8-28:21: @29[6]: _25 = Gt(move _26, const 7_i32)\n 28:8-28:21: @29[8]: FakeRead(ForMatchedPlace, _25)\"><span class=\"annotation\">@29\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:9-29:23: @32[0]: _27 = CheckedSub(_21, const 4_i32)\"><span class=\"annotation\">@30,32\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@30,32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:15-30:24: @31[2]: _29 = _21\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:9-29:23: @33[0]: _21 = move (_27.0: i32)\"><span class=\"annotation\">@33\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:15-30:24: @31[2]: _29 = _21\n 30:15-30:28: @31[3]: _28 = Gt(move _29, const 2_i32)\n 30:15-30:28: @31[5]: FakeRead(ForMatchedPlace, _28)\"><span class=\"annotation\">@31\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:12-31:21: @36[5]: _34 = _21\n-31:12-31:25: @36[6]: _33 = Lt(move _34, const 1_i32)\"><span class=\"annotation\">@34,36\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@34,36</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:29-31:38: @43[2]: _36 = _21\n-31:29-31:42: @43[3]: _35 = Gt(move _36, const 5_i32)\"><span class=\"annotation\">@43\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@43</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:46-31:55: @39[2]: _38 = _21\n-31:46-31:60: @39[3]: _37 = Ne(move _38, const 9_i32)\"><span class=\"annotation\">@39\u298a</span>countdown != 9<span class=\"annotation\">\u2989@39</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\"><span class=\"annotation\">@45,47\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n-31:61-33:10: @47[1]: _30 = const ()\">        }<span class=\"annotation\">\u2989@45,47</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:23: @48[2]: _39 = CheckedSub(_21, const 5_i32)\"><span class=\"annotation\">@48\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@48</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:12-31:21: @36[5]: _34 = _21\n+31:12-31:25: @36[6]: _33 = Lt(move _34, const 1_i32)\"><span class=\"annotation\">@34,36\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@34,36</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:29-31:38: @43[2]: _36 = _21\n+31:29-31:42: @43[3]: _35 = Gt(move _36, const 5_i32)\"><span class=\"annotation\">@43\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@43</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:42-31:42: @41.Goto: goto -&gt; bb44\"><span class=\"annotation\">@41\u298a</span>\u2038<span class=\"annotation\">\u2989@41</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:42-31:42: @42.Goto: goto -&gt; bb44\"><span class=\"annotation\">@42\u298a</span>\u2038<span class=\"annotation\">\u2989@42</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:46-31:55: @39[2]: _38 = _21\n+31:46-31:60: @39[3]: _37 = Ne(move _38, const 9_i32)\"><span class=\"annotation\">@39\u298a</span>countdown != 9<span class=\"annotation\">\u2989@39</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:60-31:60: @37.Goto: goto -&gt; bb40\"><span class=\"annotation\">@37\u298a</span>\u2038<span class=\"annotation\">\u2989@37</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:60-31:60: @38.Goto: goto -&gt; bb40\"><span class=\"annotation\">@38\u298a</span>\u2038<span class=\"annotation\">\u2989@38</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n+31:61-33:10: @47[1]: _30 = const ()\n+33:10-33:10: @47.Goto: goto -&gt; bb48\"><span class=\"annotation\">@45,47\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n+31:61-33:10: @47[1]: _30 = const ()\n+33:10-33:10: @47.Goto: goto -&gt; bb48\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:26: @47[0]: _21 = const 0_i32\n+31:61-33:10: @47[1]: _30 = const ()\n+33:10-33:10: @47.Goto: goto -&gt; bb48\">        }<span class=\"annotation\">\u2989@45,47</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:10-33:10: @46.Goto: goto -&gt; bb48\"><span class=\"annotation\">@46\u298a</span>\u2038<span class=\"annotation\">\u2989@46</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:23: @49[0]: _21 = move (_39.0: i32)\"><span class=\"annotation\">@49\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@49</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:15: @35[0]: _0 = const ()\"><span class=\"annotation\">@35\u298a</span>return<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n@@ -129,29 +155,35 @@\n 39:9-39:22: @50[4]: FakeRead(ForLet, _41)\"><span class=\"annotation\">@50\u298a</span>mut countdown = 0<span class=\"annotation\">\u2989@50</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"40:8-40:12: @50[7]: _43 = const true\n 40:8-40:12: @50[8]: FakeRead(ForMatchedPlace, _43)\"><span class=\"annotation\">@50\u298a</span>true<span class=\"annotation\">\u2989@50</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:22: @53[0]: _41 = const 1_i32\n-40:13-42:6: @53[1]: _42 = const ()\"><span class=\"annotation\">@51,53\u298a</span>{</span></span>\n+40:13-42:6: @53[1]: _42 = const ()\n+42:6-42:6: @53.Goto: goto -&gt; bb54\"><span class=\"annotation\">@51,53\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:22: @53[0]: _41 = const 1_i32\n-40:13-42:6: @53[1]: _42 = const ()\">        countdown = 1;</span></span>\n+40:13-42:6: @53[1]: _42 = const ()\n+42:6-42:6: @53.Goto: goto -&gt; bb54\">        countdown = 1;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:22: @53[0]: _41 = const 1_i32\n-40:13-42:6: @53[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@51,53</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+40:13-42:6: @53[1]: _42 = const ()\n+42:6-42:6: @53.Goto: goto -&gt; bb54\">    }<span class=\"annotation\">\u2989@51,53</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:6-42:6: @52.Goto: goto -&gt; bb54\"><span class=\"annotation\">@52\u298a</span>\u2038<span class=\"annotation\">\u2989@52</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:9-44:10: @77[0]: FakeRead(ForLet, _44)\"><span class=\"annotation\">@77\u298a</span>z<span class=\"annotation\">\u2989@77</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:16-44:25: @54[5]: _46 = _41\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"44:9-44:10: @77[0]: FakeRead(ForLet, _44)\"><span class=\"annotation\">@77\u298a</span>z<span class=\"annotation\">\u2989@77</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"44:16-44:25: @54[5]: _46 = _41\n 44:16-44:29: @54[6]: _45 = Gt(move _46, const 7_i32)\n 44:16-44:29: @54[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@54\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@54</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"45:9-45:23: @57[0]: _47 = CheckedSub(_41, const 4_i32)\"><span class=\"annotation\">@55,57\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@55,57</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"46:15-46:24: @56[2]: _49 = _41\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"45:9-45:23: @58[0]: _41 = move (_47.0: i32)\"><span class=\"annotation\">@58\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@58</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"46:15-46:24: @56[2]: _49 = _41\n 46:15-46:28: @56[3]: _48 = Gt(move _49, const 2_i32)\n 46:15-46:28: @56[5]: FakeRead(ForMatchedPlace, _48)\"><span class=\"annotation\">@56\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@56</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:12-47:21: @61[5]: _54 = _41\n-47:12-47:25: @61[6]: _53 = Lt(move _54, const 1_i32)\"><span class=\"annotation\">@59,61\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@59,61</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:29-47:38: @68[2]: _56 = _41\n-47:29-47:42: @68[3]: _55 = Gt(move _56, const 5_i32)\"><span class=\"annotation\">@68\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@68</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:46-47:55: @64[2]: _58 = _41\n-47:46-47:60: @64[3]: _57 = Ne(move _58, const 9_i32)\"><span class=\"annotation\">@64\u298a</span>countdown != 9<span class=\"annotation\">\u2989@64</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n-47:61-49:10: @72[1]: _50 = const ()\"><span class=\"annotation\">@70,72\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n-47:61-49:10: @72[1]: _50 = const ()\">            countdown = 0;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n-47:61-49:10: @72[1]: _50 = const ()\">        }<span class=\"annotation\">\u2989@70,72</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:9-50:23: @73[2]: _59 = CheckedSub(_41, const 5_i32)\"><span class=\"annotation\">@73\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@73</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:12-47:21: @61[5]: _54 = _41\n+47:12-47:25: @61[6]: _53 = Lt(move _54, const 1_i32)\"><span class=\"annotation\">@59,61\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@59,61</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:29-47:38: @68[2]: _56 = _41\n+47:29-47:42: @68[3]: _55 = Gt(move _56, const 5_i32)\"><span class=\"annotation\">@68\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@68</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:42-47:42: @66.Goto: goto -&gt; bb69\"><span class=\"annotation\">@66\u298a</span>\u2038<span class=\"annotation\">\u2989@66</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:42-47:42: @67.Goto: goto -&gt; bb69\"><span class=\"annotation\">@67\u298a</span>\u2038<span class=\"annotation\">\u2989@67</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:46-47:55: @64[2]: _58 = _41\n+47:46-47:60: @64[3]: _57 = Ne(move _58, const 9_i32)\"><span class=\"annotation\">@64\u298a</span>countdown != 9<span class=\"annotation\">\u2989@64</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"47:60-47:60: @62.Goto: goto -&gt; bb65\"><span class=\"annotation\">@62\u298a</span>\u2038<span class=\"annotation\">\u2989@62</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"47:60-47:60: @63.Goto: goto -&gt; bb65\"><span class=\"annotation\">@63\u298a</span>\u2038<span class=\"annotation\">\u2989@63</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n+47:61-49:10: @72[1]: _50 = const ()\n+49:10-49:10: @72.Goto: goto -&gt; bb73\"><span class=\"annotation\">@70,72\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n+47:61-49:10: @72[1]: _50 = const ()\n+49:10-49:10: @72.Goto: goto -&gt; bb73\">            countdown = 0;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"48:13-48:26: @72[0]: _41 = const 0_i32\n+47:61-49:10: @72[1]: _50 = const ()\n+49:10-49:10: @72.Goto: goto -&gt; bb73\">        }<span class=\"annotation\">\u2989@70,72</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:10-49:10: @71.Goto: goto -&gt; bb73\"><span class=\"annotation\">@71\u298a</span>\u2038<span class=\"annotation\">\u2989@71</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:9-50:23: @74[0]: _41 = move (_59.0: i32)\"><span class=\"annotation\">@74\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@74</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:35-52:44: @60[1]: _61 = _41\n 52:13-52:32: @60[2]: FakeRead(ForLet, _61)\n@@ -206,23 +238,26 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:10: @98[0]: FakeRead(ForLet, _74)\"><span class=\"annotation\">@98\u298a</span>w<span class=\"annotation\">\u2989@98</span></span></span><span class=\"code\" style=\"--layer: 0\"> = if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"57:16-57:25: @77[5]: _76 = _41\n 57:16-57:29: @77[6]: _75 = Gt(move _76, const 7_i32)\n 57:16-57:29: @77[8]: FakeRead(ForMatchedPlace, _75)\"><span class=\"annotation\">@77\u298a</span>countdown &gt; 7<span class=\"annotation\">\u2989@77</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"58:9-58:23: @80[0]: _77 = CheckedSub(_41, const 4_i32)\"><span class=\"annotation\">@78,80\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@78,80</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"58:9-58:23: @81[0]: _41 = move (_77.0: i32)\"><span class=\"annotation\">@81\u298a</span>countdown -= 4<span class=\"annotation\">\u2989@81</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:15-59:24: @79[2]: _79 = _41\n 59:15-59:28: @79[3]: _78 = Gt(move _79, const 2_i32)\n 59:15-59:28: @79[5]: FakeRead(ForMatchedPlace, _78)\"><span class=\"annotation\">@79\u298a</span>countdown &gt; 2<span class=\"annotation\">\u2989@79</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:12-60:21: @84[5]: _84 = _41\n 60:12-60:25: @84[6]: _83 = Lt(move _84, const 1_i32)\"><span class=\"annotation\">@82,84\u298a</span>countdown &lt; 1<span class=\"annotation\">\u2989@82,84</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:29-60:38: @91[2]: _86 = _41\n-60:29-60:42: @91[3]: _85 = Gt(move _86, const 5_i32)\"><span class=\"annotation\">@91\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@91</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:46-60:55: @87[2]: _88 = _41\n-60:46-60:60: @87[3]: _87 = Ne(move _88, const 9_i32)\"><span class=\"annotation\">@87\u298a</span>countdown != 9<span class=\"annotation\">\u2989@87</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n-60:61-62:10: @95[1]: _80 = const ()\"><span class=\"annotation\">@93,95\u298a</span>{</span></span>\n+60:29-60:42: @91[3]: _85 = Gt(move _86, const 5_i32)\"><span class=\"annotation\">@91\u298a</span>countdown &gt; 5<span class=\"annotation\">\u2989@91</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:42-60:42: @89.Goto: goto -&gt; bb92\"><span class=\"annotation\">@89\u298a</span>\u2038<span class=\"annotation\">\u2989@89</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:42-60:42: @90.Goto: goto -&gt; bb92\"><span class=\"annotation\">@90\u298a</span>\u2038<span class=\"annotation\">\u2989@90</span></span></span><span class=\"code\" style=\"--layer: 0\"> || </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:46-60:55: @87[2]: _88 = _41\n+60:46-60:60: @87[3]: _87 = Ne(move _88, const 9_i32)\"><span class=\"annotation\">@87\u298a</span>countdown != 9<span class=\"annotation\">\u2989@87</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"60:60-60:60: @85.Goto: goto -&gt; bb88\"><span class=\"annotation\">@85\u298a</span>\u2038<span class=\"annotation\">\u2989@85</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"60:60-60:60: @86.Goto: goto -&gt; bb88\"><span class=\"annotation\">@86\u298a</span>\u2038<span class=\"annotation\">\u2989@86</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n+60:61-62:10: @95[1]: _80 = const ()\n+62:10-62:10: @95.Goto: goto -&gt; bb96\"><span class=\"annotation\">@93,95\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n-60:61-62:10: @95[1]: _80 = const ()\">            countdown = 0;</span></span>\n+60:61-62:10: @95[1]: _80 = const ()\n+62:10-62:10: @95.Goto: goto -&gt; bb96\">            countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"61:13-61:26: @95[0]: _41 = const 0_i32\n-60:61-62:10: @95[1]: _80 = const ()\">        }<span class=\"annotation\">\u2989@93,95</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"63:9-63:23: @96[2]: _89 = CheckedSub(_41, const 5_i32)\"><span class=\"annotation\">@96\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@96</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+60:61-62:10: @95[1]: _80 = const ()\n+62:10-62:10: @95.Goto: goto -&gt; bb96\">        }<span class=\"annotation\">\u2989@93,95</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"62:10-62:10: @94.Goto: goto -&gt; bb96\"><span class=\"annotation\">@94\u298a</span>\u2038<span class=\"annotation\">\u2989@94</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"63:9-63:23: @97[0]: _41 = move (_89.0: i32)\"><span class=\"annotation\">@97\u298a</span>countdown -= 5<span class=\"annotation\">\u2989@97</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    } else {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"65:9-65:15: @83[0]: _0 = const ()\"><span class=\"annotation\">@83\u298a</span>return<span class=\"annotation\">\u2989@83</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"65:9-65:15: @83[0]: _0 = const ()\"><span class=\"annotation\">@83\u298a</span>return<span class=\"annotation\">\u2989@83</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    };</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:2-67:2: @102.Return: return\"><span class=\"annotation\">@102\u298a</span>\u2038<span class=\"annotation\">\u2989@102</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"67:2-67:2: @101.Goto: goto -&gt; bb102\"><span class=\"annotation\">@101\u298a</span>\u2038<span class=\"annotation\">\u2989@101</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"67:2-67:2: @102.Return: return\"><span class=\"annotation\">@102\u298a</span>\u2038<span class=\"annotation\">\u2989@102</span></span></span></span></div>\n </body>\n </html>", "previous_filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.various_conditions/various_conditions.main.-------.InstrumentCoverage.0.html"}, {"sha": "aebeb39fd51790f003eb9d6e6d30699f169b3aea", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.drop_trait/drop_trait.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>drop_trait.main - Coverage Spans</title>"}, {"sha": "577491a4e247c45ac92b7b0ade185041fcc311dc", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.drop_trait/drop_trait.{impl#0}-drop.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.drop_trait%2Fdrop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.drop_trait/drop_trait.%7Bimpl%230%7D-drop.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>drop_trait.{impl#0}-drop - Coverage Spans</title>"}, {"sha": "80a3d52fe43c94e1fa35f861c8282db1188056d5", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>generics.main - Coverage Spans</title>"}, {"sha": "bfd7f6b4bb5a00bad3c46bb1c72e40b65f16a24e", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.generics/generics.{impl#0}-set_strength.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.%7Bimpl%230%7D-set_strength.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>generics.{impl#0}-set_strength - Coverage Spans</title>"}, {"sha": "58a528e341bef7c94a5ee3b0c8242932377d7913", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.generics/generics.{impl#1}-drop.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.generics%2Fgenerics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.generics/generics.%7Bimpl%231%7D-drop.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>generics.{impl#1}-drop - Coverage Spans</title>"}, {"sha": "77983f853908608d0427824a25a57c4e5778aedf", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.if/if.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if%2Fif.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.if/if.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>if.main - Coverage Spans</title>\n@@ -146,17 +156,23 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:9-21:16: @3[5]: _6 = _1\n 21:9-21:16: @3[6]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        countdown</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">        countdown</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        =</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">        =</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">            10</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">            10</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">        ;</span></span>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">        ;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-25:15: @6[0]: _5 = const 10_i32\n-22:5-27:6: @6[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:2-28:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n+22:5-27:6: @6[1]: _0 = const ()\n+27:6-27:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:6-27:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:2-28:2: @7.Return: return\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "8716ac45d5714ca3bca4f4cbfddc0d57fce11440", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.if_else/if_else.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.if_else%2Fif_else.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.if_else/if_else.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>if_else.main - Coverage Spans</title>"}, {"sha": "9b57c6a7378175147be23f873e444a142a157369", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.inner_items/inner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-InTrait-default_trait_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main-InTrait-default_trait_func - Coverage Spans</title>"}, {"sha": "31bb57be81b53a798f1a6b2d3c8ffb1e94ace7fb", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.inner_items/inner_items.main-in_func.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-in_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-in_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-in_func.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-in_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main-in_func - Coverage Spans</title>\n@@ -63,8 +73,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:17-19:18: @0[1]: _2 = const 1_u32\n 19:13-19:14: @0[2]: FakeRead(ForLet, _2)\"><span class=\"annotation\">@0\u298a</span>b = 1<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @1[3]: FakeRead(ForLet, _3)\"><span class=\"annotation\">@1,2,3,4\u298a</span>c<span class=\"annotation\">\u2989@1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:17-20:18: @0[5]: _4 = _1\n-20:21-20:22: @0[7]: _5 = _2\n-20:17-20:22: @0[8]: _6 = CheckedAdd(_4, _5)\"><span class=\"annotation\">@0\u298a</span>a + b<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+20:21-20:22: @0[7]: _5 = _2\"><span class=\"annotation\">@0\u298a</span>a + b<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:18-21:26: @1[9]: _23 = const in_func::promoted[0]\n 21:18-21:26: @1[10]: _11 = &amp;(*_23)\n 21:18-21:26: @1[11]: _10 = &amp;(*_11)"}, {"sha": "6c4ce72305e532c195e03dbd8110ead71ae71e45", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.inner_items/inner_items.main-{impl#0}-trait_func.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main-%7Bimpl%230%7D-trait_func.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main-{impl#0}-trait_func - Coverage Spans</title>\n@@ -60,8 +70,7 @@\n </head>\n <body>\n <div class=\"code\" style=\"counter-reset: line 39\"><span class=\"line\">        <span class=\"code\" style=\"--layer: 0\">fn trait_func(&amp;mut self, incr: u32) {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:37-41:41: @0[1]: _3 = _2\n-41:13-41:41: @0[2]: _4 = CheckedAdd(((*_1).0: u32), _3)\"><span class=\"annotation\">@0\u298a</span>self.in_struct_field += incr<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            self.in_struct_field += </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:37-41:41: @0[1]: _3 = _2\"><span class=\"annotation\">@0\u298a</span>incr<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:21-42:41: @1[4]: _6 = ((*_1).0: u32)\n 42:13-42:42: @1.Call: _5 = in_func(move _6) -&gt; [return: bb2, unwind: bb3]\n 43:10-43:10: @2.Return: return\"><span class=\"annotation\">@1,2\u298a</span>in_func(self.in_struct_field);</span></span>"}, {"sha": "815d5efbce69f80ff2b875e692c5357e85556580", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.inner_items/inner_items.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.inner_items%2Finner_items.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.inner_items/inner_items.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>inner_items.main - Coverage Spans</title>\n@@ -86,11 +96,14 @@\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\">    let mut countdown = 0<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:8-10:15: @3[6]: _7 = _1\n 10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\">        countdown = 10;</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">        countdown = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:23: @6[0]: _5 = const 10_u32\n-10:16-12:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    mod in_mod {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        const IN_MOD_CONST: u32 = 1000;</span></span>\n@@ -126,16 +139,19 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    type InType = String;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:8-48:15: @7[4]: _9 = _1\n-48:8-48:15: @7[5]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"48:8-48:15: @7[4]: _9 = _1\n+48:8-48:15: @7[5]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@7\u298a</span>is_true<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n 49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\"><span class=\"annotation\">@8,10,11\u298a</span>{</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n+48:16-50:6: @11[2]: _8 = const ()\n+50:6-50:6: @11.Goto: goto -&gt; bb12\"><span class=\"annotation\">@8,10,11\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n 49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\">        in_func(countdown);</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n+48:16-50:6: @11[2]: _8 = const ()\n+50:6-50:6: @11.Goto: goto -&gt; bb12\">        in_func(countdown);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"49:17-49:26: @10[2]: _11 = _5\n 49:9-49:27: @10.Call: _10 = in_func(move _11) -&gt; [return: bb11, unwind: bb15]\n-48:16-50:6: @11[2]: _8 = const ()\">    }<span class=\"annotation\">\u2989@8,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+48:16-50:6: @11[2]: _8 = const ()\n+50:6-50:6: @11.Goto: goto -&gt; bb12\">    }<span class=\"annotation\">\u2989@8,10,11</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"50:6-50:6: @9.Goto: goto -&gt; bb12\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"52:19-54:6: @12[3]: _12 = InStruct { in_struct_field: const 101_u32 }\n 52:9-52:16: @12[4]: FakeRead(ForLet, _12)"}, {"sha": "0388ca42ac88be0114677552dffdc34b20cc2ed1", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.lazy_boolean/lazy_boolean.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 111, "deletions": 42, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.lazy_boolean%2Flazy_boolean.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.lazy_boolean/lazy_boolean.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>lazy_boolean.main - Coverage Spans</title>\n@@ -63,27 +73,27 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // Initialize test constants in a way that cannot be determined at compile time, to ensure</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    // dependent conditions.</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb25]\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb24]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb25]\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb24]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n 9:10-9:15: @3[4]: _5 = (_8.0: i32)\n 9:17-9:22: @3[6]: _6 = (_8.1: i32)\n 9:24-9:29: @3[8]: _7 = (_8.2: i32)\"></span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb25]\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"7:19-7:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb41]\n 7:19-7:35: @1[0]: _3 = &amp;_4\n-7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb24]\n+7:19-7:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb40]\n 7:19-7:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n 7:9-7:16: @2[3]: FakeRead(ForLet, _1)\n 9:33-9:42: @3[2]: _8 = (const 0_i32, const 0_i32, const 0_i32)\n@@ -94,67 +104,126 @@\n 10:8-10:15: @3[13]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        a = 1;</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">        a = 1;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        b = 10;</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">        b = 10;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">        c = 100;</span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">        c = 100;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:14: @6[0]: _5 = const 1_i32\n 12:9-12:15: @6[1]: _6 = const 10_i32\n 13:9-13:16: @6[2]: _7 = const 100_i32\n-10:16-14:6: @6[3]: _9 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:16-14:6: @6[3]: _9 = const ()\n+14:6-14:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:6-14:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:9-16:17: @11[2]: FakeRead(ForLet, _11)\"><span class=\"annotation\">@11\u298a</span>somebool<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"16:9-16:17: @11[2]: FakeRead(ForLet, _11)\"><span class=\"annotation\">@11\u298a</span>somebool<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"18:13-18:14: @7[5]: _13 = _5\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:13-18:14: @7[5]: _13 = _5\n 18:17-18:18: @7[7]: _14 = _6\n 18:13-18:18: @7[8]: _12 = Lt(move _13, move _14)\"><span class=\"annotation\">@7\u298a</span>a &lt; b<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ||</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:13-20:14: @10[2]: _16 = _6\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:13-20:14: @10[2]: _16 = _6\n 20:17-20:18: @10[4]: _17 = _7\n-20:13-20:18: @10[5]: _15 = Lt(move _16, move _17)\"><span class=\"annotation\">@10\u298a</span>b &lt; c<span class=\"annotation\">\u2989@10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+20:13-20:18: @10[5]: _15 = Lt(move _16, move _17)\"><span class=\"annotation\">@10\u298a</span>b &lt; c<span class=\"annotation\">\u2989@10</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"20:18-20:18: @8.Goto: goto -&gt; bb11\"><span class=\"annotation\">@8\u298a</span>\u2038<span class=\"annotation\">\u2989@8</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"20:18-20:18: @9.Goto: goto -&gt; bb11\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:9-23:17: @15[2]: FakeRead(ForLet, _18)\"><span class=\"annotation\">@15\u298a</span>somebool<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:17: @15[2]: FakeRead(ForLet, _18)\"><span class=\"annotation\">@15\u298a</span>somebool<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:13-25:14: @11[6]: _20 = _6\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"25:13-25:14: @11[6]: _20 = _6\n 25:17-25:18: @11[8]: _21 = _5\n 25:13-25:18: @11[9]: _19 = Lt(move _20, move _21)\"><span class=\"annotation\">@11\u298a</span>b &lt; a<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ||</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:13-27:14: @14[2]: _23 = _6\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:14: @14[2]: _23 = _6\n 27:17-27:18: @14[4]: _24 = _7\n-27:13-27:18: @14[5]: _22 = Lt(move _23, move _24)\"><span class=\"annotation\">@14\u298a</span>b &lt; c<span class=\"annotation\">\u2989@14</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+27:13-27:18: @14[5]: _22 = Lt(move _23, move _24)\"><span class=\"annotation\">@14\u298a</span>b &lt; c<span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:18-27:18: @12.Goto: goto -&gt; bb15\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:18-27:18: @13.Goto: goto -&gt; bb15\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-30:17: @19[2]: FakeRead(ForLet, _25)\"><span class=\"annotation\">@19\u298a</span>somebool<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:13-32:14: @15[6]: _27 = _5\n-32:17-32:18: @15[8]: _28 = _6\n-32:13-32:18: @15[9]: _26 = Lt(move _27, move _28)\"><span class=\"annotation\">@15\u298a</span>a &lt; b<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        &amp;&amp;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:13-34:14: @18[2]: _30 = _6\n-34:17-34:18: @18[4]: _31 = _7\n-34:13-34:18: @18[5]: _29 = Lt(move _30, move _31)\"><span class=\"annotation\">@18\u298a</span>b &lt; c<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"37:9-37:17: @23[2]: FakeRead(ForLet, _32)\"><span class=\"annotation\">@23\u298a</span>somebool<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        =</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"39:13-39:14: @19[6]: _34 = _6\n-39:17-39:18: @19[8]: _35 = _5\n-39:13-39:18: @19[9]: _33 = Lt(move _34, move _35)\"><span class=\"annotation\">@19\u298a</span>b &lt; a<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        &amp;&amp;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"41:13-41:14: @22[2]: _37 = _6\n-41:17-41:18: @22[4]: _38 = _7\n-41:13-41:18: @22[5]: _36 = Lt(move _37, move _38)\"><span class=\"annotation\">@22\u298a</span>b &lt; c<span class=\"annotation\">\u2989@22</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"43:2-43:2: @23.Return: return\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:9-29:17: @19[2]: FakeRead(ForLet, _25)\"><span class=\"annotation\">@19\u298a</span>somebool<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:20-29:21: @15[6]: _27 = _5\n+29:24-29:25: @15[8]: _28 = _6\n+29:20-29:25: @15[9]: _26 = Lt(move _27, move _28)\"><span class=\"annotation\">@15\u298a</span>a &lt; b<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:29-29:30: @18[2]: _30 = _6\n+29:33-29:34: @18[4]: _31 = _7\n+29:29-29:34: @18[5]: _29 = Lt(move _30, move _31)\"><span class=\"annotation\">@18\u298a</span>b &lt; c<span class=\"annotation\">\u2989@18</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"29:34-29:34: @16.Goto: goto -&gt; bb19\"><span class=\"annotation\">@16\u298a</span>\u2038<span class=\"annotation\">\u2989@16</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"29:34-29:34: @17.Goto: goto -&gt; bb19\"><span class=\"annotation\">@17\u298a</span>\u2038<span class=\"annotation\">\u2989@17</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-30:17: @23[2]: FakeRead(ForLet, _32)\"><span class=\"annotation\">@23\u298a</span>somebool<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"> = </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:20-30:21: @19[6]: _34 = _6\n+30:24-30:25: @19[8]: _35 = _5\n+30:20-30:25: @19[9]: _33 = Lt(move _34, move _35)\"><span class=\"annotation\">@19\u298a</span>b &lt; a<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"> &amp;&amp; </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:29-30:30: @22[2]: _37 = _6\n+30:33-30:34: @22[4]: _38 = _7\n+30:29-30:34: @22[5]: _36 = Lt(move _37, move _38)\"><span class=\"annotation\">@22\u298a</span>b &lt; c<span class=\"annotation\">\u2989@22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:34-30:34: @20.Goto: goto -&gt; bb23\"><span class=\"annotation\">@20\u298a</span>\u2038<span class=\"annotation\">\u2989@20</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:34-30:34: @21.Goto: goto -&gt; bb23\"><span class=\"annotation\">@21\u298a</span>\u2038<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @23[6]: _41 = _1\n+33:9-34:16: @23[7]: _40 = Not(move _41)\n+33:9-34:16: @23[9]: FakeRead(ForMatchedPlace, _40)\"><span class=\"annotation\">@23\u298a</span>!</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"34:9-34:16: @23[6]: _41 = _1\n+33:9-34:16: @23[7]: _40 = Not(move _41)\n+33:9-34:16: @23[9]: FakeRead(ForMatchedPlace, _40)\">        is_true<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\"><span class=\"annotation\">@24,26\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\">        a = 2</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\">        ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"36:9-36:14: @26[0]: _5 = const 2_i32\n+35:5-38:6: @26[1]: _39 = const ()\n+38:6-38:6: @26.Goto: goto -&gt; bb27\">    }<span class=\"annotation\">\u2989@24,26</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"38:6-38:6: @25.Goto: goto -&gt; bb27\"><span class=\"annotation\">@25\u298a</span>\u2038<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"41:9-41:16: @27[4]: _43 = _1\n+41:9-41:16: @27[5]: FakeRead(ForMatchedPlace, _43)\"><span class=\"annotation\">@27\u298a</span>is_true<span class=\"annotation\">\u2989@27</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\"><span class=\"annotation\">@28,30\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\">        b = 30</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"43:9-43:15: @30[0]: _6 = const 30_i32\n+42:5-45:6: @30[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@28,30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    else</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\"><span class=\"annotation\">@29\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\">        c = 400</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\">        ;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"48:9-48:16: @29[0]: _7 = const 400_i32\n+47:5-50:6: @29[1]: _42 = const ()\">    }<span class=\"annotation\">\u2989@29</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"52:9-52:16: @31[5]: _46 = _1\n+52:8-52:16: @31[6]: _45 = Not(move _46)\n+52:8-52:16: @31[8]: FakeRead(ForMatchedPlace, _45)\"><span class=\"annotation\">@31\u298a</span>!is_true<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:17-54:6: @34[1]: _44 = const ()\n+54:6-54:6: @34.Goto: goto -&gt; bb35\"><span class=\"annotation\">@32,34\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:17-54:6: @34[1]: _44 = const ()\n+54:6-54:6: @34.Goto: goto -&gt; bb35\">        a = 2;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"53:9-53:14: @34[0]: _5 = const 2_i32\n+52:17-54:6: @34[1]: _44 = const ()\n+54:6-54:6: @34.Goto: goto -&gt; bb35\">    }<span class=\"annotation\">\u2989@32,34</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"54:6-54:6: @33.Goto: goto -&gt; bb35\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"56:8-56:15: @35[3]: _47 = _1\n+56:8-56:15: @35[4]: FakeRead(ForMatchedPlace, _47)\"><span class=\"annotation\">@35\u298a</span>is_true<span class=\"annotation\">\u2989@35</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\"><span class=\"annotation\">@36,38\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\">        b = 30;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"57:9-57:15: @38[0]: _6 = const 30_i32\n+56:16-58:6: @38[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@36,38</span></span></span><span class=\"code\" style=\"--layer: 0\"> else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\"><span class=\"annotation\">@37\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\">        c = 400;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"59:9-59:16: @37[0]: _7 = const 400_i32\n+58:12-60:6: @37[1]: _0 = const ()\">    }<span class=\"annotation\">\u2989@37</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"61:2-61:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "941bfca76f321de009e19b1a71d0d1182c192bcc", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.loop_break_value/loop_break_value.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loop_break_value%2Floop_break_value.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loop_break_value%2Floop_break_value.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loop_break_value%2Floop_break_value.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loop_break_value/loop_break_value.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>loop_break_value.main - Coverage Spans</title>"}, {"sha": "f1488d644d044b4345a29e7de3006d96930bba8c", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.loops_branches/loops_branches.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_branches%2Floops_branches.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_branches%2Floops_branches.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_branches%2Floops_branches.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,161 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loops_branches/loops_branches.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>loops_branches.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 21\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\"><span class=\"annotation\">@0,1,2,3\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\">    let debug_test = DebugTest;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\">    println!(\"{:?}\", debug_test);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:22-23:31: @0[1]: _1 = DebugTest\n+23:9-23:19: @0[2]: FakeRead(ForLet, _1)\n+24:14-24:20: @0[9]: _19 = const main::promoted[0]\n+24:14-24:20: @0[10]: _7 = &amp;(*_19)\n+24:14-24:20: @0[11]: _6 = &amp;(*_7)\n+24:14-24:20: @0[12]: _5 = move _6 as &amp;[&amp;str] (Pointer(Unsize))\n+24:22-24:32: @0[20]: _14 = &amp;_1\n+24:5-24:34: @0[21]: _13 = (move _14,)\n+24:5-24:34: @0[23]: FakeRead(ForMatchedPlace, _13)\n+24:5-24:34: @0[25]: _15 = (_13.0: &amp;DebugTest)\n+24:5-24:34: @0[28]: _17 = &amp;(*_15)\n+24:5-24:34: @0[30]: _18 = &lt;DebugTest as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r DebugTest, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+24:5-24:34: @0.Call: _16 = ArgumentV1::new::&lt;DebugTest&gt;(move _17, move _18) -&gt; [return: bb1, unwind: bb4]\n+24:5-24:34: @1[2]: _12 = [move _16]\n+24:5-24:34: @1[5]: _11 = &amp;_12\n+24:5-24:34: @1[6]: _10 = &amp;(*_11)\n+24:5-24:34: @1[7]: _9 = move _10 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+24:5-24:34: @1.Call: _4 = Arguments::new_v1(move _5, move _9) -&gt; [return: bb2, unwind: bb4]\n+24:5-24:34: @2.Call: _3 = _print(move _4) -&gt; [return: bb3, unwind: bb4]\n+24:5-24:34: @3[6]: _2 = const ()\n+22:11-25:2: @3[8]: _0 = const ()\n+25:2-25:2: @3.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "334a64b0bb8f9fd6ebaf0bdf2329e0efd5023d23", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.loops_branches/loops_branches.{impl#0}-fmt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.loops_branches%2Floops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,104 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.loops_branches/loops_branches.%7Bimpl%230%7D-fmt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>loops_branches.{impl#0}-fmt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 8\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:12-10:16: @0[2]: _4 = const true\n+10:12-10:16: @0[3]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@0\u298a</span>true<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:16-11:21: @3[2]: _6 = const false\n+11:16-11:21: @3[3]: FakeRead(ForMatchedPlace, _6)\"><span class=\"annotation\">@1,3\u298a</span>false<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                while </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:23-12:27: @7[1]: _8 = const true\n+12:23-12:27: @7[2]: FakeRead(ForMatchedPlace, _8)\"><span class=\"annotation\">@6,7\u298a</span>true<span class=\"annotation\">\u2989@6,7</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @10[0]: _7 = const ()\n+13:18-13:18: @10.Goto: goto -&gt; bb6\"><span class=\"annotation\">@8,10\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"12:28-13:18: @10[0]: _7 = const ()\n+13:18-13:18: @10.Goto: goto -&gt; bb6\">                }<span class=\"annotation\">\u2989@8,10</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:14-14:14: @9.Goto: goto -&gt; bb11\"><span class=\"annotation\">@9\u298a</span>\u2038<span class=\"annotation\">\u2989@9</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:14-14:14: @5.Goto: goto -&gt; bb11\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:20-15:21: @11[6]: _13 = &amp;mut (*_2)\n+15:23-15:30: @11[11]: _32 = const &lt;DebugTest as Debug&gt;::fmt::promoted[1]\n+15:23-15:30: @11[12]: _17 = &amp;(*_32)\n+15:23-15:30: @11[13]: _16 = &amp;(*_17)\n+15:23-15:30: @11[14]: _15 = move _16 as &amp;[&amp;str] (Pointer(Unsize))\n+15:13-15:31: @11[20]: _23 = ()\n+15:13-15:31: @11[21]: FakeRead(ForMatchedPlace, _23)\n+15:13-15:31: @11[22]: _31 = const &lt;DebugTest as Debug&gt;::fmt::promoted[0]\n+15:13-15:31: @11[23]: _21 = &amp;(*_31)\n+15:13-15:31: @11[24]: _20 = &amp;(*_21)\n+15:13-15:31: @11[25]: _19 = move _20 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+15:13-15:31: @11.Call: _14 = Arguments::new_v1(move _15, move _19) -&gt; [return: bb12, unwind: bb23]\n+15:13-15:31: @12.Call: _12 = Formatter::write_fmt(move _13, move _14) -&gt; [return: bb13, unwind: bb23]\"><span class=\"annotation\">@11,12,13,14\u298a</span>write!(f, \"error\")<span class=\"annotation\">\u2989@11,12,13,14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:31-15:32: @18[1]: _25 = ((_11 as Err).0: std::fmt::Error)\n+15:31-15:32: @18[4]: _28 = _25\n+15:31-15:32: @18.Call: _27 = &lt;std::fmt::Error as From&lt;std::fmt::Error&gt;&gt;::from(move _28) -&gt; [return: bb19, unwind: bb23]\"><span class=\"annotation\">@16,18,19,20\u298a</span>?<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        } else </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\"><span class=\"annotation\">@2\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"16:16-17:10: @2[0]: _3 = const ()\">        }<span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:10-17:10: @15.Goto: goto -&gt; bb21\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:12-18:14: @21[3]: _30 = ()\n+18:9-18:15: @21[4]: _0 = std::result::Result::&lt;(), std::fmt::Error&gt;::Ok(move _30)\"><span class=\"annotation\">@21\u298a</span>Ok(())<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:6-19:6: @22.Return: return\"><span class=\"annotation\">@22\u298a</span>\u2038<span class=\"annotation\">\u2989@22</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "7fbda5d0b3d2cc0627edf581de8edc7b1f37418a", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.nested_loops/nested_loops.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.nested_loops%2Fnested_loops.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,135 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.nested_loops/nested_loops.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>nested_loops.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb35]\n+2:19-2:35: @1[0]: _3 = &amp;_4\n+2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb34]\n+2:19-2:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+2:9-2:16: @2[3]: FakeRead(ForLet, _1)\n+3:25-3:27: @3[2]: _5 = const 10_i32\n+3:9-3:22: @3[3]: FakeRead(ForLet, _5)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true = std::env::args().len() == 1;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"2:19-2:35: @0.Call: _4 = args() -&gt; [return: bb1, unwind: bb35]\n+2:19-2:35: @1[0]: _3 = &amp;_4\n+2:19-2:41: @1.Call: _2 = &lt;Args as ExactSizeIterator&gt;::len(move _3) -&gt; [return: bb2, unwind: bb34]\n+2:19-2:46: @2[1]: _1 = Eq(move _2, const 1_usize)\n+2:9-2:16: @2[3]: FakeRead(ForLet, _1)\n+3:25-3:27: @3[2]: _5 = const 10_i32\n+3:9-3:22: @3[3]: FakeRead(ForLet, _5)\">    let mut countdown = 10<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    'outer: while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:19-5:28: @5[2]: _8 = _5\n+5:19-5:32: @5[3]: _7 = Gt(move _8, const 0_i32)\n+5:19-5:32: @5[5]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@4,5\u298a</span>countdown &gt; 0<span class=\"annotation\">\u2989@4,5</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"6:21-6:24: @8[1]: _9 = const 100_i32\n+6:13-6:18: @8[2]: FakeRead(ForLet, _9)\n+7:21-7:24: @8[4]: _10 = const 100_i32\n+7:13-7:18: @8[5]: FakeRead(ForLet, _10)\"><span class=\"annotation\">@6,8,9\u298a</span>mut a = 100;</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"6:21-6:24: @8[1]: _9 = const 100_i32\n+6:13-6:18: @8[2]: FakeRead(ForLet, _9)\n+7:21-7:24: @8[4]: _10 = const 100_i32\n+7:13-7:18: @8[5]: FakeRead(ForLet, _10)\">        let mut b = 100<span class=\"annotation\">\u2989@6,8,9</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        for </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"8:13-8:14: @16[1]: _21 = ((_17 as Some).0: i32)\n+8:13-8:14: @16[3]: _22 = _21\n+8:13-8:14: @16[4]: _15 = move _22\n+8:13-8:14: @16[5]: _16 = const ()\"><span class=\"annotation\">@14,16\u298a</span>_<span class=\"annotation\">\u2989@14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> in </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:18-8:23: @11[5]: _19 = &amp;mut _14\n+8:18-8:23: @11[6]: _18 = &amp;mut (*_19)\n+8:18-8:23: @11.Call: _17 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _18) -&gt; [return: bb12, unwind: bb35]\n+8:18-8:23: @12[1]: FakeRead(ForMatchedPlace, _17)\"><span class=\"annotation\">@10,11,12\u298a</span>0..50<span class=\"annotation\">\u2989@10,11,12</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"9:16-9:17: @16[15]: _27 = _9\n+9:16-9:22: @16[16]: _26 = Lt(move _27, const 30_i32)\n+9:16-9:22: @16[18]: FakeRead(ForMatchedPlace, _26)\"><span class=\"annotation\">@14,16\u298a</span>a &lt; 30<span class=\"annotation\">\u2989@14,16</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:17-10:22: @19[0]: _11 = const ()\"><span class=\"annotation\">@17,19\u298a</span>break<span class=\"annotation\">\u2989@17,19</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"12:13-12:19: @20[0]: _9 = move (_29.0: i32)\"><span class=\"annotation\">@20\u298a</span>a -= 5<span class=\"annotation\">\u2989@20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"13:13-13:19: @21[0]: _10 = move (_30.0: i32)\"><span class=\"annotation\">@21\u298a</span>b -= 5<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:16-14:17: @21[3]: _32 = _10\n+14:16-14:22: @21[4]: _31 = Lt(move _32, const 90_i32)\n+14:16-14:22: @21[6]: FakeRead(ForMatchedPlace, _31)\"><span class=\"annotation\">@21\u298a</span>b &lt; 90<span class=\"annotation\">\u2989@21</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:17-15:24: @25[0]: _9 = move (_33.0: i32)\n+16:20-16:27: @25[2]: _34 = _1\n+16:20-16:27: @25[3]: FakeRead(ForMatchedPlace, _34)\"><span class=\"annotation\">@25\u298a</span>a -= 10;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"15:17-15:24: @25[0]: _9 = move (_33.0: i32)\n+16:20-16:27: @25[2]: _34 = _1\n+16:20-16:27: @25[3]: FakeRead(ForMatchedPlace, _34)\">                if is_true<span class=\"annotation\">\u2989@25</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:21-17:33: @28[0]: _0 = const ()\"><span class=\"annotation\">@26,28\u298a</span>break 'outer<span class=\"annotation\">\u2989@26,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                } else {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n+21:14-21:14: @29.Goto: goto -&gt; bb30\"><span class=\"annotation\">@29\u298a</span>a -= 2;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n+21:14-21:14: @29.Goto: goto -&gt; bb30\">                }</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"19:21-19:27: @29[0]: _9 = move (_36.0: i32)\n+21:14-21:14: @29.Goto: goto -&gt; bb30\">            }<span class=\"annotation\">\u2989@29</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"21:14-21:14: @23.Goto: goto -&gt; bb30\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:10-22:10: @30.Goto: goto -&gt; bb10\"><span class=\"annotation\">@30\u298a</span>\u2038<span class=\"annotation\">\u2989@30</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:9-23:23: @32[0]: _5 = move (_37.0: i32)\"><span class=\"annotation\">@32\u298a</span>countdown -= 1<span class=\"annotation\">\u2989@32</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"24:6-24:6: @7.Goto: goto -&gt; bb33\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:2-25:2: @33.Return: return\"><span class=\"annotation\">@33\u298a</span>\u2038<span class=\"annotation\">\u2989@33</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a7830911376bf59aa36815d736ee8a04e31e89ea", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 295, "deletions": 0, "changes": 295, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,295 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 20\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5,6,7,8\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">    let version_3_2_1 = Version::new(3, 2, 1);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">    let version_3_3_0 = Version::new(3, 3, 0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\"></span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">    println!(\"{:?} &lt; {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 &lt; version_3_3_0);</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:25-22:46: @0.Call: _1 = Version::new(const 3_usize, const 2_usize, const 1_usize) -&gt; [return: bb1, unwind: bb9]\n+22:9-22:22: @1[0]: FakeRead(ForLet, _1)\n+23:25-23:46: @1.Call: _2 = Version::new(const 3_usize, const 3_usize, const 0_usize) -&gt; [return: bb2, unwind: bb9]\n+23:9-23:22: @2[0]: FakeRead(ForLet, _2)\n+25:14-25:32: @2[7]: _33 = const main::promoted[0]\n+25:14-25:32: @2[8]: _8 = &amp;(*_33)\n+25:14-25:32: @2[9]: _7 = &amp;(*_8)\n+25:14-25:32: @2[10]: _6 = move _7 as &amp;[&amp;str] (Pointer(Unsize))\n+25:34-25:47: @2[18]: _15 = &amp;_1\n+25:49-25:62: @2[20]: _16 = &amp;_2\n+25:64-25:77: @2[24]: _19 = &amp;_1\n+25:80-25:93: @2[26]: _20 = &amp;_2\n+25:64-25:93: @2.Call: _18 = &lt;Version as PartialOrd&gt;::lt(move _19, move _20) -&gt; [return: bb3, unwind: bb9]\n+25:64-25:93: @3[2]: _17 = &amp;_18\n+25:5-25:95: @3[3]: _14 = (move _15, move _16, move _17)\n+25:5-25:95: @3[7]: FakeRead(ForMatchedPlace, _14)\n+25:5-25:95: @3[9]: _21 = (_14.0: &amp;Version)\n+25:5-25:95: @3[11]: _22 = (_14.1: &amp;Version)\n+25:5-25:95: @3[13]: _23 = (_14.2: &amp;bool)\n+25:5-25:95: @3[16]: _25 = &amp;(*_21)\n+25:5-25:95: @3[18]: _26 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @3.Call: _24 = ArgumentV1::new::&lt;Version&gt;(move _25, move _26) -&gt; [return: bb4, unwind: bb9]\n+25:5-25:95: @4[4]: _28 = &amp;(*_22)\n+25:5-25:95: @4[6]: _29 = &lt;Version as Debug&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r Version, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @4.Call: _27 = ArgumentV1::new::&lt;Version&gt;(move _28, move _29) -&gt; [return: bb5, unwind: bb9]\n+25:5-25:95: @5[4]: _31 = &amp;(*_23)\n+25:5-25:95: @5[6]: _32 = &lt;bool as std::fmt::Display&gt;::fmt as for&lt;&#39;r, &#39;s, &#39;t0&gt; fn(&amp;&#39;r bool, &amp;&#39;s mut std::fmt::Formatter&lt;&#39;t0&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt; (Pointer(ReifyFnPointer))\n+25:5-25:95: @5.Call: _30 = ArgumentV1::new::&lt;bool&gt;(move _31, move _32) -&gt; [return: bb6, unwind: bb9]\n+25:5-25:95: @6[2]: _13 = [move _24, move _27, move _30]\n+25:5-25:95: @6[9]: _12 = &amp;_13\n+25:5-25:95: @6[10]: _11 = &amp;(*_12)\n+25:5-25:95: @6[11]: _10 = move _11 as &amp;[std::fmt::ArgumentV1] (Pointer(Unsize))\n+25:5-25:95: @6.Call: _5 = Arguments::new_v1(move _6, move _10) -&gt; [return: bb7, unwind: bb9]\n+25:5-25:95: @7.Call: _4 = _print(move _5) -&gt; [return: bb8, unwind: bb9]\n+25:5-25:95: @8[7]: _3 = const ()\n+21:11-26:2: @8[9]: _0 = const ()\n+26:2-26:2: @8.Return: return\">}<span class=\"annotation\">\u2989@0,1,2,3,4,5,6,7,8</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a3c98e97bbd870cda723a13fd1372fc81dd386c2", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#0}-new.-------.InstrumentCoverage.0.html", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,104 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%230%7D-new.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#0}-new - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 11\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">pub fn new(major: usize, minor: usize, patch: usize) -&gt; Self {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>Self {</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">            major,</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">            minor,</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">            patch,</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">        }</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:13-14:18: @0[1]: _4 = _1\n+15:13-15:18: @0[3]: _5 = _2\n+16:13-16:18: @0[5]: _6 = _3\n+13:9-17:10: @0[6]: _0 = Version { major: move _4, minor: move _5, patch: move _6 }\n+18:6-18:6: @0.Return: return\">    }<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "1a40b30099da673d25e90940bb5cc6cf9e9da79d", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#1}-cmp.-------.InstrumentCoverage.0.html", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,76 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%231%7D-cmp.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#1}-cmp - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                                  <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">@14\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n+4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">@11,12\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:51-4:54: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>Ord<span class=\"annotation\">\u2989@13</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:51-4:54: @12[0]: _0 = Equal\n+4:51-4:54: @12.Goto: goto -&gt; bb13\"><span class=\"annotation\">\u2989@11,12</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:51-4:54: @14.Goto: goto -&gt; bb15\"><span class=\"annotation\">\u2989@14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:54-4:54: @15.Return: return\"><span class=\"annotation\">@15\u298a</span>\u2038<span class=\"annotation\">\u2989@15</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "0fa59ade1398d2ce6e72e6fb9266fc19087fdce8", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-ge-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Less\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "5399895992e11ed7ed1e68816e284983e7596ced", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-ge-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "044dd7eb9f5774356d9018be5b7f4819c3d90b99", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-ge.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-ge.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-ge - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "30047ab79725bd2d566251fbdff8189b77e88de8", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-gt-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Less\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "00b5d91b1cf91ade64c6455df5d7441beb95822b", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-gt-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "f1f78e46639493dc3b13b23dc818285e45e6e32f", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-gt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-gt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-gt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "e8da313d18e0842a7c28bbc86553575bc10315db", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-le-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Greater\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "91bd3b4af8c2bc33b737f51d7df51adec0fa3595", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-le-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "49ebcfaafb54eda1caa865feda59f721aaeb95c3", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-le.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-le.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-le - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "55438a463c4209aea00c026722064232a3332dc0", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt-{closure#0}-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,82 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-lt-{closure#0}-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 6\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">minor: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"8:5-8:17: @0[3]: _4 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+8:5-8:17: @0[4]: _3 = &amp;(*_4)\n+8:5-8:17: @0[7]: _6 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+8:5-8:17: @0[8]: _5 = &amp;(*_6)\n+8:5-8:17: @0.Call: _2 = &lt;usize as PartialOrd&gt;::partial_cmp(move _3, move _5) -&gt; [return: bb1, unwind: bb3]\n+8:5-8:17: @1[3]: _7 = Greater\n+8:5-8:17: @1.Call: _0 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _2, move _7) -&gt; [return: bb2, unwind: bb3]\n+8:5-8:17: @2.Return: return\"><span class=\"annotation\">@0,1,2\u298a</span>patch: usize<span class=\"annotation\">\u2989@0,1,2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "812dc622ec038f12d8706a2a34181b4af7d312ee", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt-{closure#0}.-------.InstrumentCoverage.0.html", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,83 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt-%7Bclosure%230%7D.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-lt-{closure#0} - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 5\"><span class=\"line\">    <span class=\"code\" style=\"--layer: 0\">major: usize,</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"7:5-7:17: @0[4]: _5 = &amp;(*(*(_1.0: &amp;&amp;usize)))\n+7:5-7:17: @0[5]: _4 = &amp;(*_5)\n+7:5-7:17: @0[8]: _7 = &amp;(*(*(_1.1: &amp;&amp;usize)))\n+7:5-7:17: @0[9]: _6 = &amp;(*_7)\n+7:5-7:17: @0.Call: _3 = &lt;usize as PartialOrd&gt;::partial_cmp(move _4, move _6) -&gt; [return: bb1, unwind: bb4]\n+7:5-7:17: @1[3]: _8 = Equal\n+7:5-7:17: @1.Call: _2 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _3, move _8) -&gt; [return: bb2, unwind: bb4]\n+7:5-7:17: @2[4]: _10 = &amp;(*(_1.2: &amp;&amp;usize))\n+7:5-7:17: @2[6]: _11 = &amp;(*(_1.3: &amp;&amp;usize))\"><span class=\"annotation\">@0,1,2,3\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">minor: usize</span></span></div>\n+</body>\n+</html>"}, {"sha": "742b45773232b1718203861996bc3ca50d750b85", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-lt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,92 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-lt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-lt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @0[0]: FakeRead(ForMatchedPlace, (*_2))\n+4:39-4:49: @0[2]: _3 = &amp;((*_2).0: usize)\n+4:39-4:49: @0[4]: _4 = &amp;((*_2).1: usize)\n+4:39-4:49: @0[6]: _5 = &amp;((*_2).2: usize)\n+4:39-4:49: @0[7]: FakeRead(ForMatchedPlace, (*_1))\n+4:39-4:49: @0[9]: _6 = &amp;((*_1).0: usize)\n+4:39-4:49: @0[11]: _7 = &amp;((*_1).1: usize)\n+4:39-4:49: @0[13]: _8 = &amp;((*_1).2: usize)\n+4:39-4:49: @0[20]: _14 = &amp;(*_6)\n+4:39-4:49: @0[21]: _13 = &amp;(*_14)\n+4:39-4:49: @0[24]: _16 = &amp;(*_3)\n+4:39-4:49: @0[25]: _15 = &amp;(*_16)\n+4:39-4:49: @0.Call: _12 = &lt;usize as PartialOrd&gt;::partial_cmp(move _13, move _15) -&gt; [return: bb1, unwind: bb5]\n+4:39-4:49: @1[3]: _17 = Equal\n+4:39-4:49: @1.Call: _11 = Option::&lt;std::cmp::Ordering&gt;::unwrap_or(move _12, move _17) -&gt; [return: bb2, unwind: bb5]\n+4:39-4:49: @2[4]: _19 = &amp;_7\n+4:39-4:49: @2[6]: _20 = &amp;_4\n+4:39-4:49: @2[8]: _21 = &amp;_8\n+4:39-4:49: @2[10]: _22 = &amp;_5\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\">PartialOrd</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:49-4:49: @4.Return: return\"><span class=\"annotation\">@0,1,2,3,4\u298a</span>\u2038<span class=\"annotation\">\u2989@0,1,2,3,4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "3714c774bae3f90b9b9a7605aee61a64b003d8b7", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#2}-partial_cmp.-------.InstrumentCoverage.0.html", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,78 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%232%7D-partial_cmp.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#2}-partial_cmp - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                      <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">@17\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n+4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n+4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">@14,15\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:39-4:49: @16.Goto: goto -&gt; bb17\"><span class=\"annotation\">@16\u298a</span>PartialOrd<span class=\"annotation\">\u2989@16</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:39-4:49: @15[1]: _30 = Equal\n+4:39-4:49: @15[2]: _0 = Option::&lt;std::cmp::Ordering&gt;::Some(move _30)\n+4:39-4:49: @15.Goto: goto -&gt; bb16\"><span class=\"annotation\">\u2989@14,15</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:39-4:49: @17.Goto: goto -&gt; bb18\"><span class=\"annotation\">\u2989@17</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:49-4:49: @18.Return: return\"><span class=\"annotation\">@18\u298a</span>\u2038<span class=\"annotation\">\u2989@18</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "b908a35f1b799c2209f2debfe8c6cf3759aac140", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#4}-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,75 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%234%7D-assert_receiver_is_total_eq.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#4}-assert_receiver_is_total_eq - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                                  <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:35-4:37: @0[0]: _0 = const ()\n+4:37-4:37: @0.Return: return\"><span class=\"annotation\">@0\u298a</span>Eq<span class=\"annotation\">\u2989@0</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "c7970e368638b86dfd4d9deff53bdcf41172a590", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#6}-eq.-------.InstrumentCoverage.0.html", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,77 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%236%7D-eq.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#6}-eq - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                       <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:24-4:33: @1[0]: _0 = const true\n+4:24-4:33: @1.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1\u298a</span>PartialEq<span class=\"annotation\">\u2989@1</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:33-4:33: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "be1f7f7d2e726585250cc0c15511ad3dfda36e29", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#6}-ne.-------.InstrumentCoverage.0.html", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,81 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%236%7D-ne.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#6}-ne - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                       <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">@2\u298a</span></span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:24-4:33: @5[0]: _9 = const true\n+4:24-4:33: @5.Goto: goto -&gt; bb8\"><span class=\"annotation\">@5\u298a</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:24-4:33: @6[0]: _9 = const false\n+4:24-4:33: @6.Goto: goto -&gt; bb8\"><span class=\"annotation\">@6\u298a</span></span><span class=\"code even\" style=\"--layer: 4\" title=\"4:24-4:33: @1[0]: _0 = const true\n+4:24-4:33: @1.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1\u298a</span>PartialEq<span class=\"annotation\">\u2989@1</span></span><span class=\"code even\" style=\"--layer: 3\" title=\"4:24-4:33: @6[0]: _9 = const false\n+4:24-4:33: @6.Goto: goto -&gt; bb8\"><span class=\"annotation\">\u2989@6</span></span><span class=\"code even\" style=\"--layer: 2\" title=\"4:24-4:33: @5[0]: _9 = const true\n+4:24-4:33: @5.Goto: goto -&gt; bb8\"><span class=\"annotation\">\u2989@5</span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"4:24-4:33: @2[0]: _0 = const false\n+4:24-4:33: @2.Goto: goto -&gt; bb4\"><span class=\"annotation\">\u2989@2</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"4:33-4:33: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "65b95bae78d6e3a74f497c840ec0c53e1110b08f", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#7}-fmt.-------.InstrumentCoverage.0.html", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,109 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%237%7D-fmt.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#7}-fmt - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">                <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:17-4:22: @0[0]: FakeRead(ForMatchedPlace, (*_1))\n+4:17-4:22: @0[2]: _3 = &amp;((*_1).0: usize)\n+4:17-4:22: @0[4]: _4 = &amp;((*_1).1: usize)\n+4:17-4:22: @0[6]: _5 = &amp;((*_1).2: usize)\n+4:17-4:22: @0[9]: _7 = &amp;mut (*_2)\n+4:17-4:22: @0[12]: _9 = const &quot;Version&quot;\n+4:17-4:22: @0[13]: _8 = &amp;(*_9)\n+4:17-4:22: @0.Call: _6 = Formatter::debug_struct(move _7, move _8) -&gt; [return: bb1, unwind: bb6]\n+4:17-4:22: @1[2]: FakeRead(ForLet, _6)\n+4:17-4:22: @1[6]: _11 = &amp;mut _6\n+4:17-4:22: @1[9]: _13 = const &quot;major&quot;\n+4:17-4:22: @1[10]: _12 = &amp;(*_13)\n+4:17-4:22: @1[15]: _17 = &amp;(*_3)\n+4:17-4:22: @1[16]: _16 = &amp;_17\n+4:17-4:22: @1[17]: _15 = &amp;(*_16)\n+4:17-4:22: @1[18]: _14 = move _15 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @1.Call: _10 = DebugStruct::field(move _11, move _12, move _14) -&gt; [return: bb2, unwind: bb6]\n+4:17-4:22: @2[9]: _19 = &amp;mut _6\n+4:17-4:22: @2[12]: _21 = const &quot;minor&quot;\n+4:17-4:22: @2[13]: _20 = &amp;(*_21)\n+4:17-4:22: @2[18]: _25 = &amp;(*_4)\n+4:17-4:22: @2[19]: _24 = &amp;_25\n+4:17-4:22: @2[20]: _23 = &amp;(*_24)\n+4:17-4:22: @2[21]: _22 = move _23 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @2.Call: _18 = DebugStruct::field(move _19, move _20, move _22) -&gt; [return: bb3, unwind: bb6]\n+4:17-4:22: @3[9]: _27 = &amp;mut _6\n+4:17-4:22: @3[12]: _29 = const &quot;patch&quot;\n+4:17-4:22: @3[13]: _28 = &amp;(*_29)\n+4:17-4:22: @3[18]: _33 = &amp;(*_5)\n+4:17-4:22: @3[19]: _32 = &amp;_33\n+4:17-4:22: @3[20]: _31 = &amp;(*_32)\n+4:17-4:22: @3[21]: _30 = move _31 as &amp;dyn std::fmt::Debug (Pointer(Unsize))\n+4:17-4:22: @3.Call: _26 = DebugStruct::field(move _27, move _28, move _30) -&gt; [return: bb4, unwind: bb6]\n+4:17-4:22: @4[8]: _34 = &amp;mut _6\n+4:17-4:22: @4.Call: _0 = DebugStruct::finish(move _34) -&gt; [return: bb5, unwind: bb6]\n+4:22-4:22: @5.Return: return\"><span class=\"annotation\">@0,1,2,3,4,5\u298a</span>Debug<span class=\"annotation\">\u2989@0,1,2,3,4,5</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "a61d3cb8bdcb3c46fa8a9f54a3b5d04bffd35d0f", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.partial_eq/partial_eq.{impl#8}-clone.-------.InstrumentCoverage.0.html", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.partial_eq%2Fpartial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,88 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.partial_eq/partial_eq.%7Bimpl%238%7D-clone.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>partial_eq.{impl#8}-clone - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\">         <span><span class=\"code even\" style=\"--layer: 1\" title=\"4:10-4:15: @0[0]: FakeRead(ForMatchedPlace, (*_1))\n+4:10-4:15: @0[2]: _2 = &amp;((*_1).0: usize)\n+4:10-4:15: @0[4]: _3 = &amp;((*_1).1: usize)\n+4:10-4:15: @0[6]: _4 = &amp;((*_1).2: usize)\n+4:10-4:15: @0[10]: _7 = &amp;(*_2)\n+4:10-4:15: @0[11]: _6 = &amp;(*_7)\n+4:10-4:15: @0.Call: _5 = &lt;usize as Clone&gt;::clone(move _6) -&gt; [return: bb1, unwind: bb4]\n+4:10-4:15: @1[4]: _10 = &amp;(*_3)\n+4:10-4:15: @1[5]: _9 = &amp;(*_10)\n+4:10-4:15: @1.Call: _8 = &lt;usize as Clone&gt;::clone(move _9) -&gt; [return: bb2, unwind: bb4]\n+4:10-4:15: @2[4]: _13 = &amp;(*_4)\n+4:10-4:15: @2[5]: _12 = &amp;(*_13)\n+4:10-4:15: @2.Call: _11 = &lt;usize as Clone&gt;::clone(move _12) -&gt; [return: bb3, unwind: bb4]\n+4:10-4:15: @3[1]: _0 = Version { major: move _5, minor: move _8, patch: move _11 }\n+4:15-4:15: @3.Return: return\"><span class=\"annotation\">@0,1,2,3\u298a</span>Clone<span class=\"annotation\">\u2989@0,1,2,3</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "914e829faa0bd1e556418863624e3b6962f731fe", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.simple_loop/simple_loop.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.simple_loop%2Fsimple_loop.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.simple_loop/simple_loop.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>simple_loop.main - Coverage Spans</title>\n@@ -89,39 +99,45 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:9-12:16: @3[6]: _7 = _1\n 12:9-12:16: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        countdown</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">        countdown</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        =</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">        =</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">            10</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">            10</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">        ;</span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">        ;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"14:9-16:15: @6[0]: _5 = const 10_i32\n-13:5-18:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+13:5-18:6: @6[1]: _6 = const ()\n+18:6-18:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"18:6-18:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    loop</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n 23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n 23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\"><span class=\"annotation\">@8,9\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n 23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n 23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\">                ==</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"23:13-23:22: @9[3]: _11 = _5\n 23:13-25:14: @9[4]: _10 = Eq(move _11, const 0_i32)\n 23:13-25:14: @9[6]: FakeRead(ForMatchedPlace, _10)\">            0<span class=\"annotation\">\u2989@8,9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:13-27:18: @12[0]: _0 = const ()\"><span class=\"annotation\">@10,12\u298a</span>break<span class=\"annotation\">\u2989@10,12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:18: @12[0]: _0 = const ()\"><span class=\"annotation\">@10,12\u298a</span>break<span class=\"annotation\">\u2989@10,12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\"><span class=\"annotation\">@11\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\">        -=</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @11[3]: _13 = CheckedSub(_5, const 1_i32)\">        1<span class=\"annotation\">\u2989@11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @13[0]: _5 = move (_13.0: i32)\"><span class=\"annotation\">@13\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @13[0]: _5 = move (_13.0: i32)\">        -=</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"30:9-32:10: @13[0]: _5 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@13</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:6-34:6: @7.Goto: goto -&gt; bb8\"><span class=\"annotation\">@7\u298a</span>\u2038<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:2-35:2: @12.Return: return\"><span class=\"annotation\">@10,12\u298a</span>\u2038<span class=\"annotation\">\u2989@10,12</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "2488ac563e77e5cecc8bef6f10536b7f9e987d7c", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.simple_match/simple_match.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.simple_match%2Fsimple_match.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.simple_match/simple_match.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>simple_match.main - Coverage Spans</title>\n@@ -86,51 +96,39 @@\n 9:9-9:22: @3[3]: FakeRead(ForLet, _5)\">    let mut countdown = 1<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"10:8-10:15: @3[6]: _7 = _1\n 10:8-10:15: @3[7]: FakeRead(ForMatchedPlace, _7)\"><span class=\"annotation\">@0,1,2,3\u298a</span>is_true<span class=\"annotation\">\u2989@0,1,2,3</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\"><span class=\"annotation\">@4,6\u298a</span>{</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\">        countdown = 0;</span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">        countdown = 0;</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"11:9-11:22: @6[0]: _5 = const 0_i32\n-10:16-12:6: @6[1]: _6 = const ()\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+10:16-12:6: @6[1]: _6 = const ()\n+12:6-12:6: @6.Goto: goto -&gt; bb7\">    }<span class=\"annotation\">\u2989@4,6</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"12:6-12:6: @5.Goto: goto -&gt; bb7\"><span class=\"annotation\">@5\u298a</span>\u2038<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"15:9-15:10: @11[2]: _17 = discriminant(_14)\"><span class=\"annotation\">@9,10,11\u298a</span>for</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"15:9-15:10: @11[2]: _17 = discriminant(_14)\">        _<span class=\"annotation\">\u2989@9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    for</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"15:9-15:10: @15[1]: _18 = ((_14 as Some).0: i32)\n+15:9-15:10: @15[3]: _19 = _18\n+15:9-15:10: @15[4]: _12 = move _19\n+15:9-15:10: @15[5]: _13 = const ()\"><span class=\"annotation\">@13,15,17\u298a</span>_<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    in</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:13: @7[4]: _9 = std::ops::Range::&lt;i32&gt; { start: const 0_i32, end: const 2_i32 }\n-17:9-17:13: @7.Call: _8 = &lt;std::ops::Range&lt;i32&gt; as IntoIterator&gt;::into_iter(move _9) -&gt; [return: bb8, unwind: bb22]\n-17:9-17:13: @8[1]: FakeRead(ForMatchedPlace, _8)\n-17:9-17:13: @8[3]: _10 = move _8\"><span class=\"annotation\">@7,8\u298a</span>0..2<span class=\"annotation\">\u2989@7,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"17:9-17:13: @10[5]: _16 = &amp;mut _10\n+17:9-17:13: @10[6]: _15 = &amp;mut (*_16)\n+17:9-17:13: @10.Call: _14 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _15) -&gt; [return: bb11, unwind: bb22]\n+17:9-17:13: @11[1]: FakeRead(ForMatchedPlace, _14)\"><span class=\"annotation\">@9,10,11\u298a</span>0..2<span class=\"annotation\">\u2989@9,10,11</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        let z</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        match</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\"><span class=\"annotation\">@13,15,17\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">        {</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">            x</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">            if</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                x</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\"><span class=\"annotation\">@13,15,17\u298a</span>countdown<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"24:13-24:14: @18[3]: _23 = _5\"><span class=\"annotation\">@18\u298a</span>x<span class=\"annotation\">\u2989@18</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            if</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n+26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\"><span class=\"annotation\">@13,15,17\u298a</span>x</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n 26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                    &lt;</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"22:13-22:22: @15[13]: FakeRead(ForMatchedPlace, _5)\n-24:13-24:14: @17[1]: _24 = &amp;_5\n-26:17-26:18: @17[4]: _26 = (*_24)\n-26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                1<span class=\"annotation\">\u2989@13,15,17</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"26:17-26:18: @17[4]: _26 = (*_24)\n+26:17-28:18: @17[5]: _25 = Lt(move _26, const 1_i32)\">                1<span class=\"annotation\">\u2989@13,15,17</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:18-28:18: @19.Goto: goto -&gt; bb16\"><span class=\"annotation\">@19\u298a</span>\u2038<span class=\"annotation\">\u2989@19</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            =&gt;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"31:21-31:30: @18[5]: _27 = _5\n 31:17-31:30: @18[6]: _22 = move _27\n@@ -184,7 +182,7 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            =&gt;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"40:13-40:15: @16[0]: _21 = const ()\"><span class=\"annotation\">@16\u298a</span>{}<span class=\"annotation\">\u2989@16</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"42:6-42:6: @8.Goto: goto -&gt; bb9\"><span class=\"annotation\">@7,8\u298a</span>\u2038<span class=\"annotation\">\u2989@7,8</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"42:6-42:6: @20.Goto: goto -&gt; bb9\"><span class=\"annotation\">@20\u298a</span>\u2038<span class=\"annotation\">\u2989@20</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"43:2-43:2: @12.Return: return\"><span class=\"annotation\">@12\u298a</span>\u2038<span class=\"annotation\">\u2989@12</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "033707a87bb69a3b79b99509f8996b0f2a6caa81", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.tight_inf_loop/tight_inf_loop.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.tight_inf_loop%2Ftight_inf_loop.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,80 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.tight_inf_loop/tight_inf_loop.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>tight_inf_loop.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    if </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:8-2:13: @0[1]: _1 = const false\n+2:8-2:13: @0[2]: FakeRead(ForMatchedPlace, _1)\"><span class=\"annotation\">@0\u298a</span>false<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\"> {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:9-3:16: @4.FalseUnwind: falseUnwind -&gt; [real: bb5, cleanup: bb6]\n+3:14-3:16: @5[0]: _3 = const ()\"><span class=\"annotation\">@4,5\u298a</span>loop {}<span class=\"annotation\">\u2989@4,5</span></span></span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:16-3:16: @3.Goto: goto -&gt; bb4\"><span class=\"annotation\">@1,3\u298a</span>\u2038<span class=\"annotation\">\u2989@1,3</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @2.Return: return\"><span class=\"annotation\">@2\u298a</span>\u2038<span class=\"annotation\">\u2989@2</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "dfe2eb073aa1806c33ebbb280dbf5f5f73e7ce01", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.call.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.call.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>try_error_result.call - Coverage Spans</title>"}, {"sha": "5c9baee5d805064462fbc274e362f0c51cc320c2", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html", "status": "modified", "additions": 52, "deletions": 25, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.try_error_result%2Ftry_error_result.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,4 +1,14 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.try_error_result/try_error_result.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n <title>try_error_result.main - Coverage Spans</title>\n@@ -65,37 +75,54 @@\n <span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"14:21-14:23: @0[1]: _1 = const 10_i32\n 13:9-14:18: @0[2]: FakeRead(ForLet, _1)\">        countdown = 10<span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:10: @4[2]: _12 = discriminant(_9)\"><span class=\"annotation\">@2,3,4\u298a</span>for</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:10: @4[2]: _12 = discriminant(_9)\">        _<span class=\"annotation\">\u2989@2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    for</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"17:9-17:10: @8[1]: _13 = ((_9 as Some).0: i32)\n+17:9-17:10: @8[3]: _14 = _13\n+17:9-17:10: @8[4]: _7 = move _14\n+17:9-17:10: @8[5]: _8 = const ()\"><span class=\"annotation\">@6,8\u298a</span>_<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    in</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:9-19:14: @0[6]: _4 = std::ops::Range::&lt;i32&gt; { start: const 0_i32, end: const 10_i32 }\n-19:9-19:14: @0.Call: _3 = &lt;std::ops::Range&lt;i32&gt; as IntoIterator&gt;::into_iter(move _4) -&gt; [return: bb1, unwind: bb32]\n-19:9-19:14: @1[1]: FakeRead(ForMatchedPlace, _3)\n-19:9-19:14: @1[3]: _5 = move _3\"><span class=\"annotation\">@0,1\u298a</span>0..10<span class=\"annotation\">\u2989@0,1</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"19:9-19:14: @3[5]: _11 = &amp;mut _5\n+19:9-19:14: @3[6]: _10 = &amp;mut (*_11)\n+19:9-19:14: @3.Call: _9 = &lt;std::ops::Range&lt;i32&gt; as Iterator&gt;::next(move _10) -&gt; [return: bb4, unwind: bb40]\n+19:9-19:14: @4[1]: FakeRead(ForMatchedPlace, _9)\"><span class=\"annotation\">@2,3,4\u298a</span>0..10<span class=\"annotation\">\u2989@2,3,4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\"><span class=\"annotation\">@6,8\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @8[12]: _17 = CheckedSub(_1, const 1_i32)\">            -= 1<span class=\"annotation\">\u2989@6,8</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        if</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"25:13-25:22: @9[3]: _19 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n 25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n-25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\"><span class=\"annotation\">@9\u298a</span>countdown &lt; 5<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\"><span class=\"annotation\">@9\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">            -= 1</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">        ;</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">        if</span></span>\n+<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"21:9-22:17: @9[0]: _1 = move (_17.0: i32)\n+25:13-25:22: @9[3]: _19 = _1\n+25:13-25:26: @9[4]: _18 = Lt(move _19, const 5_i32)\n+25:13-25:26: @9[6]: FakeRead(ForMatchedPlace, _18)\">            countdown &lt; 5<span class=\"annotation\">\u2989@9</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:13-27:41: @12.Call: _22 = call(const true) -&gt; [return: bb13, unwind: bb32]\n-27:13-27:42: @13.Call: _21 = &lt;std::result::Result&lt;(), ()&gt; as Try&gt;::into_result(move _22) -&gt; [return: bb14, unwind: bb32]\n-27:13-27:42: @14[1]: FakeRead(ForMatchedPlace, _21)\n-27:41-27:42: @14[2]: _23 = discriminant(_21)\"><span class=\"annotation\">@10,12,13,14\u298a</span>call(/*return_error=*/ true)?<span class=\"annotation\">\u2989@10,12,13,14</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"27:13-27:41: @12.Call: _22 = call(const true) -&gt; [return: bb13, unwind: bb40]\"><span class=\"annotation\">@10,12,13,14\u298a</span>call(/*return_error=*/ true)<span class=\"annotation\">\u2989@10,12,13,14</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"27:41-27:42: @18[1]: _24 = ((_21 as Err).0: ())\n+27:41-27:42: @18[4]: _27 = _24\n+27:41-27:42: @18.Call: _26 = &lt;() as From&lt;()&gt;&gt;::from(move _27) -&gt; [return: bb19, unwind: bb40]\"><span class=\"annotation\">@16,18,19,20\u298a</span>?<span class=\"annotation\">\u2989@16,18,19,20</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"28:13-28:42: @15.Call: _31 = call(const false) -&gt; [return: bb21, unwind: bb40]\"><span class=\"annotation\">@15,21,22\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@15,21,22</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"28:42-28:43: @26[1]: _33 = ((_30 as Err).0: ())\n+28:42-28:43: @26[4]: _36 = _33\n+28:42-28:43: @26.Call: _35 = &lt;() as From&lt;()&gt;&gt;::from(move _36) -&gt; [return: bb27, unwind: bb40]\"><span class=\"annotation\">@24,26,27,28\u298a</span>?<span class=\"annotation\">\u2989@24,26,27,28</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        else</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        {</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"31:13-31:42: @11.Call: _31 = call(const false) -&gt; [return: bb21, unwind: bb32]\n-31:13-31:43: @21.Call: _30 = &lt;std::result::Result&lt;(), ()&gt; as Try&gt;::into_result(move _31) -&gt; [return: bb22, unwind: bb32]\n-31:13-31:43: @22[1]: FakeRead(ForMatchedPlace, _30)\n-31:42-31:43: @22[2]: _32 = discriminant(_30)\"><span class=\"annotation\">@11,21,22\u298a</span>call(/*return_error=*/ false)?<span class=\"annotation\">\u2989@11,21,22</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"34:8-34:10: @5[9]: _38 = ()\n-34:5-34:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _38)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"35:2-35:2: @31.Return: return\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">            </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"32:13-32:42: @11.Call: _40 = call(const false) -&gt; [return: bb29, unwind: bb40]\"><span class=\"annotation\">@11,29,30\u298a</span>call(/*return_error=*/ false)<span class=\"annotation\">\u2989@11,29,30</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"32:42-32:43: @34[1]: _42 = ((_39 as Err).0: ())\n+32:42-32:43: @34[4]: _45 = _42\n+32:42-32:43: @34.Call: _44 = &lt;() as From&lt;()&gt;&gt;::from(move _45) -&gt; [return: bb35, unwind: bb40]\"><span class=\"annotation\">@32,34,35,36\u298a</span>?<span class=\"annotation\">\u2989@32,34,35,36</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"33:10-33:10: @23.Goto: goto -&gt; bb37\"><span class=\"annotation\">@23\u298a</span>\u2038<span class=\"annotation\">\u2989@23</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"33:10-33:10: @31.Goto: goto -&gt; bb37\"><span class=\"annotation\">@31\u298a</span>\u2038<span class=\"annotation\">\u2989@31</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"34:6-34:6: @37.Goto: goto -&gt; bb2\"><span class=\"annotation\">@37\u298a</span>\u2038<span class=\"annotation\">\u2989@37</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @5[9]: _47 = ()\n+35:5-35:11: @5[10]: _0 = std::result::Result::&lt;(), ()&gt;::Ok(move _47)\"><span class=\"annotation\">@5\u298a</span>Ok(())<span class=\"annotation\">\u2989@5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @38.Goto: goto -&gt; bb39\"><span class=\"annotation\">@38\u298a</span>\u2038<span class=\"annotation\">\u2989@38</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @39.Return: return\"><span class=\"annotation\">@39\u298a</span>\u2038<span class=\"annotation\">\u2989@39</span></span></span></span></div>\n </body>\n </html>"}, {"sha": "3ba5135122b936bf9cb9407d0018ecc607f9dae2", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.while/while.main.-------.InstrumentCoverage.0.html", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while%2Fwhile.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,81 @@\n+<!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while/while.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n+<html>\n+<head>\n+<title>while.main - Coverage Spans</title>\n+<style>\n+    .line {\n+        counter-increment: line;\n+    }\n+    .line:before {\n+        content: counter(line) \": \";\n+        font-family: Menlo, Monaco, monospace;\n+        font-style: italic;\n+        width: 3.8em;\n+        display: inline-block;\n+        text-align: right;\n+        filter: opacity(50%);\n+        -webkit-user-select: none;\n+    }\n+    .code {\n+        color: #dddddd;\n+        background-color: #222222;\n+        font-family: Menlo, Monaco, monospace;\n+        line-height: 1.4em;\n+        border-bottom: 2px solid #222222;\n+        white-space: pre;\n+        display: inline-block;\n+    }\n+    .odd {\n+        background-color: #55bbff;\n+        color: #223311;\n+    }\n+    .even {\n+        background-color: #ee7756;\n+        color: #551133;\n+    }\n+    .code {\n+        --index: calc(var(--layer) - 1);\n+        padding-top: calc(var(--index) * 0.15em);\n+        filter:\n+            hue-rotate(calc(var(--index) * 25deg))\n+            saturate(calc(100% - (var(--index) * 2%)))\n+            brightness(calc(100% - (var(--index) * 1.5%)));\n+    }\n+    .annotation {\n+        color: #4444ff;\n+        font-family: monospace;\n+        font-style: italic;\n+        display: none;\n+        -webkit-user-select: none;\n+    }\n+    body:active .annotation {\n+        /* requires holding mouse down anywhere on the page */\n+        display: inline-block;\n+    }\n+    span:hover .annotation {\n+        /* requires hover over a span ONLY on its first line */\n+        display: inline-block;\n+    }\n+</style>\n+</head>\n+<body>\n+<div class=\"code\" style=\"counter-reset: line 0\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() {</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"2:15-2:16: @0[1]: _1 = const 9_i32\n+2:9-2:12: @0[2]: FakeRead(ForLet, _1)\"><span class=\"annotation\">@0\u298a</span>num = 9<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"3:11-3:14: @2[2]: _4 = _1\n+3:11-3:20: @2[3]: _3 = Ge(move _4, const 10_i32)\n+3:11-3:20: @2[5]: FakeRead(ForMatchedPlace, _3)\"><span class=\"annotation\">@1,2\u298a</span>num &gt;= 10<span class=\"annotation\">\u2989@1,2</span></span></span><span class=\"code\" style=\"--layer: 0\"> </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\"><span class=\"annotation\">@3,5\u298a</span>{</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"3:21-4:6: @5[0]: _2 = const ()\">    }<span class=\"annotation\">\u2989@3,5</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"5:2-5:2: @4.Return: return\"><span class=\"annotation\">@4\u298a</span>\u2038<span class=\"annotation\">\u2989@4</span></span></span></span></div>\n+</body>\n+</html>"}, {"sha": "765e3b62c11c2f02e83d5e824b9002cb909e7f70", "filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.while_early_ret/while_early_ret.main.-------.InstrumentCoverage.0.html", "status": "renamed", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-spanview-deadcode%2Fexpected_mir_dump.while_early_ret%2Fwhile_early_ret.main.-------.InstrumentCoverage.0.html?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -1,7 +1,17 @@\n <!DOCTYPE html>\n+<!--\n+\n+Preview this file as rendered HTML from the github source at:\n+https://htmlpreview.github.io/?https://github.com/rust-lang/rust/blob/master/src/test/run-make-fulldeps/coverage-spanview-base/expected_mir_dump.while_early_ret/while_early_ret.main.-------.InstrumentCoverage.0.html\n+\n+For revisions in Pull Requests (PR):\n+  * Replace \"rust-lang\" with the github PR author\n+  * Replace \"master\" with the PR branch name\n+\n+-->\n <html>\n <head>\n-<title>while_early_return.main - Coverage Spans</title>\n+<title>while_early_ret.main - Coverage Spans</title>\n <style>\n     .line {\n         counter-increment: line;\n@@ -62,12 +72,10 @@\n <div class=\"code\" style=\"counter-reset: line 3\"><span class=\"line\"><span class=\"code\" style=\"--layer: 0\">fn main() -&gt; Result&lt;(),u8&gt; {</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    let </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"5:25-5:27: @0[1]: _1 = const 10_i32\n 5:9-5:22: @0[2]: FakeRead(ForLet, _1)\"><span class=\"annotation\">@0\u298a</span>mut countdown = 10<span class=\"annotation\">\u2989@0</span></span></span><span class=\"code\" style=\"--layer: 0\">;</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    while</span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n 7:9-9:10: @2[3]: _4 = Gt(move _5, const 0_i32)\n-7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>while</span></span>\n-<span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n-7:9-9:10: @2[3]: _4 = Gt(move _5, const 0_i32)\n-7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\">        countdown</span></span>\n+7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\"><span class=\"annotation\">@1,2\u298a</span>countdown</span></span>\n <span class=\"line\"><span class=\"code odd\" style=\"--layer: 1\" title=\"7:9-7:18: @2[2]: _5 = _1\n 7:9-9:10: @2[3]: _4 = Gt(move _5, const 0_i32)\n 7:9-9:10: @2[5]: FakeRead(ForMatchedPlace, _4)\">            &gt;</span></span>\n@@ -107,13 +115,13 @@\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">                ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        }</span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\"><span class=\"annotation\">@7\u298a</span>countdown</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\">            -=</span></span>\n-<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @7[3]: _13 = CheckedSub(_1, const 1_i32)\">        1<span class=\"annotation\">\u2989@7</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        </span><span><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\"><span class=\"annotation\">@12\u298a</span>countdown</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">            -=</span></span>\n+<span class=\"line\"><span class=\"code even\" style=\"--layer: 1\" title=\"30:9-32:10: @12[0]: _1 = move (_13.0: i32)\">        1<span class=\"annotation\">\u2989@12</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">        ;</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    }</span></span>\n <span class=\"line\"><span class=\"code\" style=\"--layer: 0\">    </span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"35:8-35:10: @4[4]: _15 = ()\n 35:5-35:11: @4[5]: _0 = std::result::Result::&lt;(), u8&gt;::Ok(move _15)\"><span class=\"annotation\">@4\u298a</span>Ok(())<span class=\"annotation\">\u2989@4</span></span></span><span class=\"code\" style=\"--layer: 0\"></span></span>\n-<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n+<span class=\"line\"><span class=\"code\" style=\"--layer: 0\">}</span><span><span class=\"code even\" style=\"--layer: 1\" title=\"36:2-36:2: @13.Goto: goto -&gt; bb14\"><span class=\"annotation\">@13\u298a</span>\u2038<span class=\"annotation\">\u2989@13</span></span></span><span><span class=\"code odd\" style=\"--layer: 1\" title=\"36:2-36:2: @14.Return: return\"><span class=\"annotation\">@14\u298a</span>\u2038<span class=\"annotation\">\u2989@14</span></span></span></span></div>\n </body>\n </html>", "previous_filename": "src/test/run-make-fulldeps/coverage-spanview-deadcode/expected_mir_dump.while_early_return/while_early_return.main.-------.InstrumentCoverage.0.html"}, {"sha": "6a1403b8a0004687c3314ae05749cfe404b04948", "filename": "src/test/run-make-fulldeps/coverage/WARNING_KEEP_NAMES_SHORT.txt", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2FWARNING_KEEP_NAMES_SHORT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2FWARNING_KEEP_NAMES_SHORT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2FWARNING_KEEP_NAMES_SHORT.txt?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,10 @@\n+IMPORTANT: The Rust test programs in this directory generate various output\n+files in the `../coverage*` directories (`expected` and `actual` files).\n+\n+Microsoft Windows has a relatively short limit on file paths (not individual\n+path components, but the entire path). The files generated by these\n+`../coverage*` tests typically have file paths that include the program\n+source file name plus function and type names (depending on the program).\n+\n+Keep the test file names short, and keep function names and other symbols\n+short as well, to avoid hitting the Windows limits."}, {"sha": "da206e28f31dad815fe4501da87f187a6af3fc39", "filename": "src/test/run-make-fulldeps/coverage/conditions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fconditions.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "previous_filename": "src/test/run-make-fulldeps/coverage/various_conditions.rs"}, {"sha": "17f7696a8cf1dc0ccbe70821d37a590ff8d2008d", "filename": "src/test/run-make-fulldeps/coverage/coverage_tools.mk", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fcoverage_tools.mk?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -37,3 +37,8 @@ endif\n # tests can be simplified to always test with `-C link-dead-code`.\n \n UNAME = $(shell uname)\n+\n+# FIXME(richkadel): Can any of the features tested by `run-make-fulldeps/coverage-*` tests be tested\n+# just as completely by more focused unit tests of the code logic itself, to reduce the number of\n+# test result files generated and maintained, and to help identify specific test failures and root\n+# causes more easily?"}, {"sha": "bb6219e851c8a80e5b501599fec4b88098519aec", "filename": "src/test/run-make-fulldeps/coverage/lazy_boolean.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flazy_boolean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flazy_boolean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flazy_boolean.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -26,18 +26,36 @@ fn main() {\n         ||\n             b < c\n     ;\n-    let\n-        somebool\n-        =\n-            a < b\n-        &&\n-            b < c\n-    ;\n-    let\n-        somebool\n-        =\n-            b < a\n-        &&\n-            b < c\n-    ;\n+    let somebool = a < b && b < c;\n+    let somebool = b < a && b < c;\n+\n+    if\n+        !\n+        is_true\n+    {\n+        a = 2\n+        ;\n+    }\n+\n+    if\n+        is_true\n+    {\n+        b = 30\n+        ;\n+    }\n+    else\n+    {\n+        c = 400\n+        ;\n+    }\n+\n+    if !is_true {\n+        a = 2;\n+    }\n+\n+    if is_true {\n+        b = 30;\n+    } else {\n+        c = 400;\n+    }\n }"}, {"sha": "a9df7e0fab75f021c388598795ba791ad282114d", "filename": "src/test/run-make-fulldeps/coverage/loops_branches.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Floops_branches.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,36 @@\n+#![allow(unused_assignments)]\n+\n+// This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n+// structure of this `fmt` function.\n+\n+struct DebugTest;\n+\n+impl std::fmt::Debug for DebugTest {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        if true {\n+            if false {\n+                while true {\n+                }\n+            }\n+            write!(f, \"error\")?;\n+        } else {\n+        }\n+        Ok(())\n+    }\n+}\n+\n+fn main() {\n+    let debug_test = DebugTest;\n+    println!(\"{:?}\", debug_test);\n+}\n+\n+/*\n+\n+This is the error message generated, before the issue was fixed:\n+\n+error: internal compiler error: compiler/rustc_mir/src/transform/coverage/mod.rs:374:42:\n+Error processing: DefId(0:6 ~ bug_incomplete_cov_graph_traversal_simplified[317d]::{impl#0}::fmt):\n+Error { message: \"`TraverseCoverageGraphWithLoops` missed some `BasicCoverageBlock`s:\n+[bcb6, bcb7, bcb9]\" }\n+\n+*/"}, {"sha": "4c7c784279650463b163f0897e5baf62cb509e41", "filename": "src/test/run-make-fulldeps/coverage/nested_loops.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fnested_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fnested_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fnested_loops.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,25 @@\n+fn main() {\n+    let is_true = std::env::args().len() == 1;\n+    let mut countdown = 10;\n+\n+    'outer: while countdown > 0 {\n+        let mut a = 100;\n+        let mut b = 100;\n+        for _ in 0..50 {\n+            if a < 30 {\n+                break;\n+            }\n+            a -= 5;\n+            b -= 5;\n+            if b < 90 {\n+                a -= 10;\n+                if is_true {\n+                    break 'outer;\n+                } else {\n+                    a -= 2;\n+                }\n+            }\n+        }\n+        countdown -= 1;\n+    }\n+}"}, {"sha": "334fb3364ccc433796ffee2276e7568024e4414c", "filename": "src/test/run-make-fulldeps/coverage/partial_eq.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fpartial_eq.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,99 @@\n+// This test confirms an earlier problem was resolved, supporting the MIR graph generated by the\n+// structure of this test.\n+\n+#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+pub struct Version {\n+    major: usize,\n+    minor: usize,\n+    patch: usize,\n+}\n+\n+impl Version {\n+    pub fn new(major: usize, minor: usize, patch: usize) -> Self {\n+        Self {\n+            major,\n+            minor,\n+            patch,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let version_3_2_1 = Version::new(3, 2, 1);\n+    let version_3_3_0 = Version::new(3, 3, 0);\n+\n+    println!(\"{:?} < {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 < version_3_3_0);\n+}\n+\n+/*\n+\n+This test verifies a bug was fixed that otherwise generated this error:\n+\n+thread 'rustc' panicked at 'No counters provided the source_hash for function:\n+    Instance {\n+        def: Item(WithOptConstParam {\n+            did: DefId(0:101 ~ autocfg[c44a]::version::{impl#2}::partial_cmp),\n+            const_param_did: None\n+        }),\n+        substs: []\n+    }'\n+The `PartialOrd` derived by `Version` happened to generate a MIR that generated coverage\n+without a code region associated with any `Counter`. Code regions were associated with at least\n+one expression, which is allowed, but the `function_source_hash` was only passed to the codegen\n+(coverage mapgen) phase from a `Counter`s code region. A new method was added to pass the\n+`function_source_hash` without a code region, if necessary.\n+\n+*/\n+\n+// FIXME(richkadel): It may be worth investigating why the coverage report for this test produces\n+// the following results:\n+\n+/*\n+\n+1. Why are their two counts below different characters (first and last) of `PartialOrd`, on line 17?\n+\n+2. Line 17 is counted twice, but the `::lt` instance shows a line count of 1? Is there a missing\n+   line count with a different instance? Or was it really only called once?\n+\n+3. Line 20 shows another line count (of 1) for a line within a `struct` declaration (on only one of\n+   its 3 fields). I doubt the specific field (`minor`) is relevant, but rather I suspect there's a\n+   problem computing the file position here, for some reason.\n+\n+<snip>\n+   16|       |\n+   17|      2|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+                                                    ^1       ^1\n+------------------\n+|Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::gt\n+------------------\n+|Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::le\n+------------------\n+|Unexecuted instantiation: <partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::ge\n+------------------\n+|<partial_eq_counter_without_region::Version as core::cmp::PartialOrd>::lt:\n+|  17|      1|#[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+------------------\n+   18|       |pub struct Version {\n+   19|       |    major: usize,\n+   20|      1|    minor: usize,\n+   21|       |    patch: usize,\n+   22|       |}\n+   23|       |\n+   24|       |impl Version {\n+   25|       |    pub fn new(major: usize, minor: usize, patch: usize) -> Self {\n+   26|      2|        Version {\n+   27|      2|            major,\n+   28|      2|            minor,\n+   29|      2|            patch,\n+   30|      2|        }\n+   31|      2|    }\n+   32|       |}\n+   33|       |\n+   34|      1|fn main() {\n+   35|      1|    let version_3_2_1 = Version::new(3, 2, 1);\n+   36|      1|    let version_3_3_0 = Version::new(3, 3, 0);\n+   37|      1|\n+   38|      1|    println!(\"{:?} < {:?} = {}\", version_3_2_1, version_3_3_0, version_3_2_1 < version\n+_3_3_0);\n+   39|      1|}\n+*/"}, {"sha": "cef99027aaa4fa30f1e8a416bea74372d83926bf", "filename": "src/test/run-make-fulldeps/coverage/tight_inf_loop.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftight_inf_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftight_inf_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftight_inf_loop.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    if false {\n+        loop {}\n+    }\n+}"}, {"sha": "13c455172dd11554563ecc4ec755c6e339b2000c", "filename": "src/test/run-make-fulldeps/coverage/try_error_result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Ftry_error_result.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -25,6 +25,7 @@ fn main() -> Result<(),()> {\n             countdown < 5\n         {\n             call(/*return_error=*/ true)?;\n+            call(/*return_error=*/ false)?;\n         }\n         else\n         {"}, {"sha": "781b90b35663ec50bc6ae8189f329f333f39ca00", "filename": "src/test/run-make-fulldeps/coverage/while.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fwhile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fwhile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fwhile.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let num = 9;\n+    while num >= 10 {\n+    }\n+}"}, {"sha": "14ba36238d62f522077aa97c7a03decbf3f6ec0d", "filename": "src/test/run-make-fulldeps/coverage/while_early_ret.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fwhile_early_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8532e742fc6ec210fab69b8192190bc40c685912/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fwhile_early_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Fwhile_early_ret.rs?ref=8532e742fc6ec210fab69b8192190bc40c685912", "previous_filename": "src/test/run-make-fulldeps/coverage/while_early_return.rs"}]}