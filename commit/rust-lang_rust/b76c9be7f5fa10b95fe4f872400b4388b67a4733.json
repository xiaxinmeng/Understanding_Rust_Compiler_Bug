{"sha": "b76c9be7f5fa10b95fe4f872400b4388b67a4733", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NmM5YmU3ZjVmYTEwYjk1ZmU0Zjg3MjQwMGI0Mzg4YjY3YTQ3MzM=", "commit": {"author": {"name": "William Bain", "email": "bain.william.a@gmail.com", "date": "2020-12-19T21:52:19Z"}, "committer": {"name": "William Bain", "email": "bain.william.a@gmail.com", "date": "2020-12-20T01:37:51Z"}, "message": "Handle desugaring in impl trait bound suggestion", "tree": {"sha": "9ca7a328d5c7bcfc634ba8bd899ba9f941b1d951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ca7a328d5c7bcfc634ba8bd899ba9f941b1d951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b76c9be7f5fa10b95fe4f872400b4388b67a4733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b76c9be7f5fa10b95fe4f872400b4388b67a4733", "html_url": "https://github.com/rust-lang/rust/commit/b76c9be7f5fa10b95fe4f872400b4388b67a4733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b76c9be7f5fa10b95fe4f872400b4388b67a4733/comments", "author": {"login": "wabain", "id": 7651435, "node_id": "MDQ6VXNlcjc2NTE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7651435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wabain", "html_url": "https://github.com/wabain", "followers_url": "https://api.github.com/users/wabain/followers", "following_url": "https://api.github.com/users/wabain/following{/other_user}", "gists_url": "https://api.github.com/users/wabain/gists{/gist_id}", "starred_url": "https://api.github.com/users/wabain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wabain/subscriptions", "organizations_url": "https://api.github.com/users/wabain/orgs", "repos_url": "https://api.github.com/users/wabain/repos", "events_url": "https://api.github.com/users/wabain/events{/privacy}", "received_events_url": "https://api.github.com/users/wabain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wabain", "id": 7651435, "node_id": "MDQ6VXNlcjc2NTE0MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7651435?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wabain", "html_url": "https://github.com/wabain", "followers_url": "https://api.github.com/users/wabain/followers", "following_url": "https://api.github.com/users/wabain/following{/other_user}", "gists_url": "https://api.github.com/users/wabain/gists{/gist_id}", "starred_url": "https://api.github.com/users/wabain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wabain/subscriptions", "organizations_url": "https://api.github.com/users/wabain/orgs", "repos_url": "https://api.github.com/users/wabain/repos", "events_url": "https://api.github.com/users/wabain/events{/privacy}", "received_events_url": "https://api.github.com/users/wabain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b6b06a03a00a7c9f156bff130b72e90b79e1127", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6b06a03a00a7c9f156bff130b72e90b79e1127", "html_url": "https://github.com/rust-lang/rust/commit/1b6b06a03a00a7c9f156bff130b72e90b79e1127"}], "stats": {"total": 108, "additions": 95, "deletions": 13}, "files": [{"sha": "79fea83a6674d3021b6e19122e4bd7ad8f62b346", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b76c9be7f5fa10b95fe4f872400b4388b67a4733/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76c9be7f5fa10b95fe4f872400b4388b67a4733/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b76c9be7f5fa10b95fe4f872400b4388b67a4733", "patch": "@@ -254,27 +254,21 @@ fn suggest_restriction(\n         let pred = trait_ref.without_const().to_predicate(tcx).to_string();\n         let pred = pred.replace(&impl_trait_str, &type_param_name);\n         let mut sugg = vec![\n+            // Find the last of the generic parameters contained within the span of\n+            // the generics\n             match generics\n                 .params\n                 .iter()\n-                .filter(|p| match p.kind {\n-                    hir::GenericParamKind::Type {\n-                        synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                        ..\n-                    } => false,\n-                    _ => true,\n-                })\n-                .last()\n+                .map(|p| p.bounds_span().unwrap_or(p.span))\n+                .filter(|&span| generics.span.contains(span) && span.desugaring_kind().is_none())\n+                .max_by_key(|span| span.hi())\n             {\n                 // `fn foo(t: impl Trait)`\n                 //        ^ suggest `<T: Trait>` here\n                 None => (generics.span, format!(\"<{}>\", type_param)),\n                 // `fn foo<A>(t: impl Trait)`\n                 //        ^^^ suggest `<A, T: Trait>` here\n-                Some(param) => (\n-                    param.bounds_span().unwrap_or(param.span).shrink_to_hi(),\n-                    format!(\", {}\", type_param),\n-                ),\n+                Some(span) => (span.shrink_to_hi(), format!(\", {}\", type_param)),\n             },\n             // `fn foo(t: impl Trait)`\n             //                       ^ suggest `where <T as Trait>::A: Bound`"}, {"sha": "949b23600715a7f9a980d88cb3f60b505efe30d1", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.rs?ref=b76c9be7f5fa10b95fe4f872400b4388b67a4733", "patch": "@@ -39,6 +39,14 @@ fn bak(constraints: impl  Iterator + std::fmt::Debug) {\n     }\n }\n \n+#[rustfmt::skip]\n+fn baw<>(constraints: impl Iterator) {\n+    for constraint in constraints {\n+        qux(constraint);\n+//~^ ERROR `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n+    }\n+}\n+\n fn qux(_: impl std::fmt::Debug) {}\n \n fn main() {}"}, {"sha": "0de3b9aec19e1aeca8775a916c5bfdd962f878d7", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=b76c9be7f5fa10b95fe4f872400b4388b67a4733", "patch": "@@ -73,6 +73,21 @@ help: introduce a type parameter with a trait bound instead of using `impl Trait\n LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as Iterator>::Item: Debug {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:45:13\n+   |\n+LL |         qux(constraint);\n+   |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+...\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                --------------- required by this bound in `qux`\n+   |\n+   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | fn baw<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n+   |       ^^^^^^^^^^^^^              ^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "3cd6d336e13456ec8ff25b26b1752e9ab6544eaf", "filename": "src/test/ui/suggestions/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.rs?ref=b76c9be7f5fa10b95fe4f872400b4388b67a4733", "patch": "@@ -0,0 +1,32 @@\n+// Regression test: if we suggest replacing an `impl Trait` argument to an async\n+// fn with a named type parameter in order to add bounds, the suggested function\n+// signature should be well-formed.\n+//\n+// edition:2018\n+\n+trait Foo {\n+    type Bar;\n+    fn bar(&self) -> Self::Bar;\n+}\n+\n+async fn run(_: &(), foo: impl Foo) -> std::io::Result<()> {\n+    let bar = foo.bar();\n+    assert_is_send(&bar);\n+//~^ ERROR: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+\n+    Ok(())\n+}\n+\n+// Test our handling of cases where there is a generic parameter list in the\n+// source, but only synthetic generic parameters\n+async fn run2< >(_: &(), foo: impl Foo) -> std::io::Result<()> {\n+    let bar = foo.bar();\n+    assert_is_send(&bar);\n+//~^ ERROR: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+\n+    Ok(())\n+}\n+\n+fn assert_is_send<T: Send>(_: &T) {}\n+\n+fn main() {}"}, {"sha": "9404c3bb583172fa2b9d0170b904ca34a09106cd", "filename": "src/test/ui/suggestions/issue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b76c9be7f5fa10b95fe4f872400b4388b67a4733/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr?ref=b76c9be7f5fa10b95fe4f872400b4388b67a4733", "patch": "@@ -0,0 +1,33 @@\n+error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+  --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:14:20\n+   |\n+LL |     assert_is_send(&bar);\n+   |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+...\n+LL | fn assert_is_send<T: Send>(_: &T) {}\n+   |                      ---- required by this bound in `assert_is_send`\n+   |\n+   = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | async fn run<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send {\n+   |             ^^^^^^^^              ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+  --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:24:20\n+   |\n+LL |     assert_is_send(&bar);\n+   |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n+...\n+LL | fn assert_is_send<T: Send>(_: &T) {}\n+   |                      ---- required by this bound in `assert_is_send`\n+   |\n+   = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | async fn run2<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send {\n+   |              ^^^^^^^^              ^                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}