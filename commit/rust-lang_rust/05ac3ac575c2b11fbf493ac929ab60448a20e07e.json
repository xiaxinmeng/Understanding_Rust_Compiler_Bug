{"sha": "05ac3ac575c2b11fbf493ac929ab60448a20e07e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YWMzYWM1NzVjMmIxMWZiZjQ5M2FjOTI5YWI2MDQ0OGEyMGUwN2U=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-08T01:17:18Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Define `super_combine_consts`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "7d93f0712f7b13f93c77a6b0f099ce7abe4056cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d93f0712f7b13f93c77a6b0f099ce7abe4056cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05ac3ac575c2b11fbf493ac929ab60448a20e07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05ac3ac575c2b11fbf493ac929ab60448a20e07e", "html_url": "https://github.com/rust-lang/rust/commit/05ac3ac575c2b11fbf493ac929ab60448a20e07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05ac3ac575c2b11fbf493ac929ab60448a20e07e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4e0951fff2161827e7fb83e346af37718759a2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e0951fff2161827e7fb83e346af37718759a2b", "html_url": "https://github.com/rust-lang/rust/commit/d4e0951fff2161827e7fb83e346af37718759a2b"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "16b0595b23371dc315bb58b701fcbc220d811b2e", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/05ac3ac575c2b11fbf493ac929ab60448a20e07e/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ac3ac575c2b11fbf493ac929ab60448a20e07e/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=05ac3ac575c2b11fbf493ac929ab60448a20e07e", "patch": "@@ -28,11 +28,13 @@ use super::{InferCtxt, MiscVariable, TypeTrace};\n use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n+use super::const_variable::ConstVariableValue;\n \n use crate::hir::def_id::DefId;\n+use crate::mir::interpret::ConstValue;\n use crate::ty::{IntType, UintType};\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::error::TypeError;\n+use crate::ty::{self, Ty, TyCtxt, InferConst, LazyConst};\n+use crate::ty::error::{ConstError, TypeError};\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::SubstsRef;\n use crate::traits::{Obligation, PredicateObligations};\n@@ -107,13 +109,68 @@ impl<'infcx, 'gcx, 'tcx> InferCtxt<'infcx, 'gcx, 'tcx> {\n                 Err(TypeError::Sorts(ty::relate::expected_found(relation, &a, &b)))\n             }\n \n-\n             _ => {\n                 ty::relate::super_relate_tys(relation, a, b)\n             }\n         }\n     }\n \n+    pub fn super_combine_consts<R>(\n+        &self,\n+        relation: &mut R,\n+        a: &'tcx LazyConst<'tcx>,\n+        b: &'tcx LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx LazyConst<'tcx>>\n+    where\n+        R: TypeRelation<'infcx, 'gcx, 'tcx>,\n+    {\n+        let a_is_expected = relation.a_is_expected();\n+\n+        if let (&ty::LazyConst::Evaluated(a_eval), &ty::LazyConst::Evaluated(b_eval)) = (a, b) {\n+            match (a_eval.val, b_eval.val) {\n+                (ConstValue::Infer(InferConst::Var(a_vid)),\n+                 ConstValue::Infer(InferConst::Var(b_vid))) => {\n+                    self.const_unification_table\n+                        .borrow_mut()\n+                        .unify_var_var(a_vid, b_vid)\n+                        .map_err(|e| const_unification_error(a_is_expected, e))?;\n+                    return Ok(a);\n+                }\n+\n+                // All other cases of inference with other variables are errors.\n+                (ConstValue::Infer(InferConst::Var(_)), ConstValue::Infer(_)) |\n+                (ConstValue::Infer(_), ConstValue::Infer(InferConst::Var(_))) => {\n+                    bug!(\"tried to combine ConstValue::Infer/ConstValue::Infer(InferConst::Var)\")\n+                }\n+\n+                (ConstValue::Infer(InferConst::Var(vid)), _) => {\n+                    return self.unify_const_variable(a_is_expected, vid, b);\n+                }\n+\n+                (_, ConstValue::Infer(InferConst::Var(vid))) => {\n+                    return self.unify_const_variable(!a_is_expected, vid, a);\n+                }\n+\n+                _ => {}\n+            }\n+        }\n+\n+        ty::relate::super_relate_consts(relation, a, b)\n+    }\n+\n+    pub fn unify_const_variable(\n+        &self,\n+        vid_is_expected: bool,\n+        vid: ty::ConstVid<'tcx>,\n+        value: &'tcx LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx LazyConst<'tcx>> {\n+        self.const_unification_table\n+            .borrow_mut()\n+            .unify_var_value(vid, ConstVariableValue::Known { value })\n+            .map_err(|e| const_unification_error(vid_is_expected, e))?;\n+        Ok(value)\n+    }\n+\n     fn unify_integral_variable(&self,\n                                vid_is_expected: bool,\n                                vid: ty::IntVid,"}]}