{"sha": "dbcce10bb1c3e9651b83f1d9396813c0cd1054f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiY2NlMTBiYjFjM2U5NjUxYjgzZjFkOTM5NjgxM2MwY2QxMDU0ZjY=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-01-09T02:47:32Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-01-09T02:47:32Z"}, "message": "Remove unused `struct ClosureUpvar`", "tree": {"sha": "2c6d866d9bd5b965490fa7b6c1b22d556186d18d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6d866d9bd5b965490fa7b6c1b22d556186d18d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6", "html_url": "https://github.com/rust-lang/rust/commit/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e393b5b3b543d355ae16c1940cf98b6c7fcb8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e393b5b3b543d355ae16c1940cf98b6c7fcb8aa", "html_url": "https://github.com/rust-lang/rust/commit/7e393b5b3b543d355ae16c1940cf98b6c7fcb8aa"}], "stats": {"total": 15, "additions": 1, "deletions": 14}, "files": [{"sha": "0aacc5feec374c03145050c94d3b0fb7c8aea2c1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=dbcce10bb1c3e9651b83f1d9396813c0cd1054f6", "patch": "@@ -809,13 +809,6 @@ pub struct UpvarBorrow<'tcx> {\n pub type UpvarListMap = FxHashMap<DefId, FxIndexMap<hir::HirId, UpvarId>>;\n pub type UpvarCaptureMap<'tcx> = FxHashMap<UpvarId, UpvarCapture<'tcx>>;\n \n-#[derive(Copy, Clone, TypeFoldable)]\n-pub struct ClosureUpvar<'tcx> {\n-    pub res: Res,\n-    pub span: Span,\n-    pub ty: Ty<'tcx>,\n-}\n-\n #[derive(Clone, Copy, PartialEq, Eq)]\n pub enum IntVarValue {\n     IntType(ast::IntTy),"}, {"sha": "5e24c843025bfb78800e21df3ffc59a0c3b34d89", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=dbcce10bb1c3e9651b83f1d9396813c0cd1054f6", "patch": "@@ -45,12 +45,6 @@ impl fmt::Debug for ty::AdtDef {\n     }\n }\n \n-impl fmt::Debug for ty::ClosureUpvar<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"ClosureUpvar({:?},{:?})\", self.res, self.ty)\n-    }\n-}\n-\n impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let name = ty::tls::with(|tcx| tcx.hir().name(self.var_path.hir_id));"}, {"sha": "a1922166fe2657aa863c5a0fbccc42fbc1cd930b", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbcce10bb1c3e9651b83f1d9396813c0cd1054f6/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=dbcce10bb1c3e9651b83f1d9396813c0cd1054f6", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    // Returns a list of `ClosureUpvar`s for each upvar.\n+    // Returns a list of `Ty`s for each upvar.\n     fn final_upvar_tys(&self, closure_id: hir::HirId) -> Vec<Ty<'tcx>> {\n         // Presently an unboxed closure type cannot \"escape\" out of a\n         // function, so we will only encounter ones that originated in the"}]}