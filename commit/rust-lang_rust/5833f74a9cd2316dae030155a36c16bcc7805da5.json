{"sha": "5833f74a9cd2316dae030155a36c16bcc7805da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MzNmNzRhOWNkMjMxNmRhZTAzMDE1NWEzNmMxNmJjYzc4MDVkYTU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-11T17:19:51Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-11T22:02:19Z"}, "message": "use if let Some(x) = ..  instead of ...map(|x|) to conditionally run fns that return () (clippy::option_map_unit_fn)", "tree": {"sha": "8f3303d531eee9b8c5fb9c826a5967da060402a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3303d531eee9b8c5fb9c826a5967da060402a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5833f74a9cd2316dae030155a36c16bcc7805da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5833f74a9cd2316dae030155a36c16bcc7805da5", "html_url": "https://github.com/rust-lang/rust/commit/5833f74a9cd2316dae030155a36c16bcc7805da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5833f74a9cd2316dae030155a36c16bcc7805da5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7795e135a642df024fc9bfee72abf7981c89ec8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7795e135a642df024fc9bfee72abf7981c89ec8", "html_url": "https://github.com/rust-lang/rust/commit/b7795e135a642df024fc9bfee72abf7981c89ec8"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "0edd44d4bf1eb9d3c7df00bc6981440b474e0968", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5833f74a9cd2316dae030155a36c16bcc7805da5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5833f74a9cd2316dae030155a36c16bcc7805da5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=5833f74a9cd2316dae030155a36c16bcc7805da5", "patch": "@@ -616,8 +616,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n                 self.block_context.push(BlockFrame::SubExpr);\n                 unpack!(block = self.into(destination, dest_scope, block, value));\n-                dest_scope\n-                    .map(|scope| self.unschedule_drop(scope, destination.as_local().unwrap()));\n+                if let Some(scope) = dest_scope {\n+                    self.unschedule_drop(scope, destination.as_local().unwrap())\n+                };\n                 self.block_context.pop();\n             } else {\n                 self.cfg.push_assign_unit(block, source_info, destination, self.hir.tcx())"}, {"sha": "5c185dc4a9f1aa24b4ca10f3c0b26e1d32e03f3d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5833f74a9cd2316dae030155a36c16bcc7805da5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5833f74a9cd2316dae030155a36c16bcc7805da5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5833f74a9cd2316dae030155a36c16bcc7805da5", "patch": "@@ -1448,31 +1448,30 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             });\n         };\n \n-        typeck_results\n+        if let Some(cause) = typeck_results\n             .generator_interior_types\n             .iter()\n             .find(|ty::GeneratorInteriorTypeCause { ty, .. }| ty_matches(ty))\n-            .map(|cause| {\n-                // Check to see if any awaited expressions have the target type.\n-                let from_awaited_ty = visitor\n-                    .awaits\n-                    .into_iter()\n-                    .map(|id| hir.expect_expr(id))\n-                    .find(|await_expr| {\n-                        let ty = typeck_results.expr_ty_adjusted(&await_expr);\n-                        debug!(\n-                            \"maybe_note_obligation_cause_for_async_await: await_expr={:?}\",\n-                            await_expr\n-                        );\n-                        ty_matches(ty)\n-                    })\n-                    .map(|expr| expr.span);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n-                    cause;\n+        {\n+            // Check to see if any awaited expressions have the target type.\n+            let from_awaited_ty = visitor\n+                .awaits\n+                .into_iter()\n+                .map(|id| hir.expect_expr(id))\n+                .find(|await_expr| {\n+                    let ty = typeck_results.expr_ty_adjusted(&await_expr);\n+                    debug!(\n+                        \"maybe_note_obligation_cause_for_async_await: await_expr={:?}\",\n+                        await_expr\n+                    );\n+                    ty_matches(ty)\n+                })\n+                .map(|expr| expr.span);\n+            let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } = cause;\n \n-                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n-                interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n-            });\n+            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n+            interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n+        };\n \n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: interior_or_upvar={:?} \\"}]}