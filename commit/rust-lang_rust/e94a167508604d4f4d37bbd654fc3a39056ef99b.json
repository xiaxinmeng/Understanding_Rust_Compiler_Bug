{"sha": "e94a167508604d4f4d37bbd654fc3a39056ef99b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NGExNjc1MDg2MDRkNGY0ZDM3YmJkNjU0ZmMzYTM5MDU2ZWY5OWI=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T04:48:57Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Rename `mul_add` test file and add general improvements", "tree": {"sha": "d4aaa501e523b09b0ae19467542c80e8cdbdfc9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4aaa501e523b09b0ae19467542c80e8cdbdfc9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e94a167508604d4f4d37bbd654fc3a39056ef99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a167508604d4f4d37bbd654fc3a39056ef99b", "html_url": "https://github.com/rust-lang/rust/commit/e94a167508604d4f4d37bbd654fc3a39056ef99b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e94a167508604d4f4d37bbd654fc3a39056ef99b/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4065ca9c8c4586e99688de53c7cf654c7693fc63", "url": "https://api.github.com/repos/rust-lang/rust/commits/4065ca9c8c4586e99688de53c7cf654c7693fc63", "html_url": "https://github.com/rust-lang/rust/commit/4065ca9c8c4586e99688de53c7cf654c7693fc63"}], "stats": {"total": 154, "additions": 82, "deletions": 72}, "files": [{"sha": "542ea5132de892d532417fee0ce1440ef40c2155", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/e94a167508604d4f4d37bbd654fc3a39056ef99b/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94a167508604d4f4d37bbd654fc3a39056ef99b/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=e94a167508604d4f4d37bbd654fc3a39056ef99b", "patch": "@@ -9,6 +9,8 @@ use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+\n use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n use sugg::{format_numeric_literal, Sugg};\n@@ -138,26 +140,29 @@ fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>])\n // TODO: Lint expressions of the form `(x + y).ln()` where y > 1 and\n // suggest usage of `(x + (y - 1)).ln_1p()` instead\n fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n-    if_chain! {\n-        if let ExprKind::Binary(op, ref lhs, ref rhs) = &args[0].kind;\n-        if op.node == BinOpKind::Add;\n-        then {\n-            let recv = match (constant(cx, cx.tables, lhs), constant(cx, cx.tables, rhs)) {\n-                (Some((value, _)), _) if F32(1.0) == value || F64(1.0) == value => rhs,\n-                (_, Some((value, _))) if F32(1.0) == value || F64(1.0) == value => lhs,\n-                _ => return,\n-            };\n+    if let ExprKind::Binary(\n+        Spanned {\n+            node: BinOpKind::Add, ..\n+        },\n+        lhs,\n+        rhs,\n+    ) = &args[0].kind\n+    {\n+        let recv = match (constant(cx, cx.tables, lhs), constant(cx, cx.tables, rhs)) {\n+            (Some((value, _)), _) if F32(1.0) == value || F64(1.0) == value => rhs,\n+            (_, Some((value, _))) if F32(1.0) == value || F64(1.0) == value => lhs,\n+            _ => return,\n+        };\n \n-            span_lint_and_sugg(\n-                cx,\n-                SUBOPTIMAL_FLOPS,\n-                expr.span,\n-                \"ln(1 + x) can be computed more accurately\",\n-                \"consider using\",\n-                format!(\"{}.ln_1p()\", prepare_receiver_sugg(cx, recv)),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+        span_lint_and_sugg(\n+            cx,\n+            SUBOPTIMAL_FLOPS,\n+            expr.span,\n+            \"ln(1 + x) can be computed more accurately\",\n+            \"consider using\",\n+            format!(\"{}.ln_1p()\", prepare_receiver_sugg(cx, recv)),\n+            Applicability::MachineApplicable,\n+        );\n     }\n }\n \n@@ -249,8 +254,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n // and suggest usage of `x.exp_m1() - (y - 1)` instead\n fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n     if_chain! {\n-        if let ExprKind::Binary(op, ref lhs, ref rhs) = expr.kind;\n-        if op.node == BinOpKind::Sub;\n+        if let ExprKind::Binary(Spanned { node: BinOpKind::Sub, .. }, ref lhs, ref rhs) = expr.kind;\n         if cx.tables.expr_ty(lhs).is_floating_point();\n         if let Some((value, _)) = constant(cx, cx.tables, rhs);\n         if F32(1.0) == value || F64(1.0) == value;\n@@ -276,8 +280,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n \n fn is_float_mul_expr<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'a>) -> Option<(&'a Expr<'a>, &'a Expr<'a>)> {\n     if_chain! {\n-        if let ExprKind::Binary(op, ref lhs, ref rhs) = &expr.kind;\n-        if let BinOpKind::Mul = op.node;\n+        if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref lhs, ref rhs) = &expr.kind;\n         if cx.tables.expr_ty(lhs).is_floating_point();\n         if cx.tables.expr_ty(rhs).is_floating_point();\n         then {\n@@ -289,34 +292,37 @@ fn is_float_mul_expr<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'a>) -> Option\n }\n \n // TODO: Fix rust-lang/rust-clippy#4735\n-fn check_fma(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n-    if_chain! {\n-        if let ExprKind::Binary(op, lhs, rhs) = &expr.kind;\n-        if let BinOpKind::Add = op.node;\n-        then {\n-            let (recv, arg1, arg2) = if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, lhs) {\n-                (inner_lhs, inner_rhs, rhs)\n-            } else if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, rhs) {\n-                (inner_lhs, inner_rhs, lhs)\n-            } else {\n-                return;\n-            };\n+fn check_mul_add(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+    if let ExprKind::Binary(\n+        Spanned {\n+            node: BinOpKind::Add, ..\n+        },\n+        lhs,\n+        rhs,\n+    ) = &expr.kind\n+    {\n+        let (recv, arg1, arg2) = if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, lhs) {\n+            (inner_lhs, inner_rhs, rhs)\n+        } else if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, rhs) {\n+            (inner_lhs, inner_rhs, lhs)\n+        } else {\n+            return;\n+        };\n \n-            span_lint_and_sugg(\n-                cx,\n-                SUBOPTIMAL_FLOPS,\n-                expr.span,\n-                \"multiply and add expressions can be calculated more efficiently and accurately\",\n-                \"consider using\",\n-                format!(\n-                    \"{}.mul_add({}, {})\",\n-                    prepare_receiver_sugg(cx, recv),\n-                    Sugg::hir(cx, arg1, \"..\"),\n-                    Sugg::hir(cx, arg2, \"..\"),\n-                ),\n-                Applicability::MachineApplicable,\n-            );\n-        }\n+        span_lint_and_sugg(\n+            cx,\n+            SUBOPTIMAL_FLOPS,\n+            expr.span,\n+            \"multiply and add expressions can be calculated more efficiently and accurately\",\n+            \"consider using\",\n+            format!(\n+                \"{}.mul_add({}, {})\",\n+                prepare_receiver_sugg(cx, recv),\n+                Sugg::hir(cx, arg1, \"..\"),\n+                Sugg::hir(cx, arg2, \"..\"),\n+            ),\n+            Applicability::MachineApplicable,\n+        );\n     }\n }\n \n@@ -335,7 +341,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatingPointArithmetic {\n             }\n         } else {\n             check_expm1(cx, expr);\n-            check_fma(cx, expr);\n+            check_mul_add(cx, expr);\n         }\n     }\n }"}, {"sha": "e343c37740da5f8207c5999238b2f48655914e35", "filename": "tests/ui/floating_point_mul_add.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_mul_add.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_mul_add.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.fixed?ref=e94a167508604d4f4d37bbd654fc3a39056ef99b", "previous_filename": "tests/ui/floating_point_fma.fixed"}, {"sha": "810f929c8568b9bc1573e6c0ad976ac55933a785", "filename": "tests/ui/floating_point_mul_add.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_mul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_mul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.rs?ref=e94a167508604d4f4d37bbd654fc3a39056ef99b", "previous_filename": "tests/ui/floating_point_fma.rs"}, {"sha": "2dfbf562d15fc0c6a16bc2960ae02488870fad3f", "filename": "tests/ui/floating_point_mul_add.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_mul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_mul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.stderr?ref=e94a167508604d4f4d37bbd654fc3a39056ef99b", "patch": "@@ -1,55 +1,55 @@\n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:10:13\n+  --> $DIR/floating_point_mul_add.rs:10:13\n    |\n LL |     let _ = a * b + c;\n    |             ^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n    |\n    = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:11:13\n+  --> $DIR/floating_point_mul_add.rs:11:13\n    |\n LL |     let _ = c + a * b;\n    |             ^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:12:13\n+  --> $DIR/floating_point_mul_add.rs:12:13\n    |\n LL |     let _ = a + 2.0 * 4.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4.0, a)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:13:13\n+  --> $DIR/floating_point_mul_add.rs:13:13\n    |\n LL |     let _ = a + 2. * 4.;\n    |             ^^^^^^^^^^^ help: consider using: `2.0f64.mul_add(4., a)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:15:13\n+  --> $DIR/floating_point_mul_add.rs:15:13\n    |\n LL |     let _ = (a * b) + c;\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:16:13\n+  --> $DIR/floating_point_mul_add.rs:16:13\n    |\n LL |     let _ = c + (a * b);\n    |             ^^^^^^^^^^^ help: consider using: `a.mul_add(b, c)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:17:13\n+  --> $DIR/floating_point_mul_add.rs:17:13\n    |\n LL |     let _ = a * b * c + d;\n    |             ^^^^^^^^^^^^^ help: consider using: `(a * b).mul_add(c, d)`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:19:13\n+  --> $DIR/floating_point_mul_add.rs:19:13\n    |\n LL |     let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c))`\n \n error: multiply and add expressions can be calculated more efficiently and accurately\n-  --> $DIR/floating_point_fma.rs:20:13\n+  --> $DIR/floating_point_mul_add.rs:20:13\n    |\n LL |     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`", "previous_filename": "tests/ui/floating_point_fma.stderr"}, {"sha": "c5d900de32948b3f2e75987e7585ae918951c8c1", "filename": "tests/ui/floating_point_powf.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_powf.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_powf.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.fixed?ref=e94a167508604d4f4d37bbd654fc3a39056ef99b", "patch": "@@ -15,6 +15,7 @@ fn main() {\n     let _ = x.powi(-2);\n     let _ = x.powi(16_777_215);\n     let _ = x.powi(-16_777_215);\n+    // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n     let _ = x.powf(16_777_216.0);\n@@ -33,6 +34,7 @@ fn main() {\n     let _ = x.powi(-2);\n     let _ = x.powi(-2_147_483_648);\n     let _ = x.powi(2_147_483_647);\n+    // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n     let _ = x.powf(-2_147_483_649.0);"}, {"sha": "cc75e230f7d003e7f195e790c5a95159b7f7a1bd", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=e94a167508604d4f4d37bbd654fc3a39056ef99b", "patch": "@@ -15,6 +15,7 @@ fn main() {\n     let _ = x.powf(-2.0);\n     let _ = x.powf(16_777_215.0);\n     let _ = x.powf(-16_777_215.0);\n+    // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n     let _ = x.powf(16_777_216.0);\n@@ -33,6 +34,7 @@ fn main() {\n     let _ = x.powf(-2.0);\n     let _ = x.powf(-2_147_483_648.0);\n     let _ = x.powf(2_147_483_647.0);\n+    // Cases where the lint shouldn't be applied\n     let _ = x.powf(2.1);\n     let _ = x.powf(-2.1);\n     let _ = x.powf(-2_147_483_649.0);"}, {"sha": "8f0544d4b582bb129b9a073af903fed1b9142457", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e94a167508604d4f4d37bbd654fc3a39056ef99b/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=e94a167508604d4f4d37bbd654fc3a39056ef99b", "patch": "@@ -73,73 +73,73 @@ LL |     let _ = x.powf(-16_777_215.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-16_777_215)`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:24:13\n+  --> $DIR/floating_point_powf.rs:25:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:25:13\n+  --> $DIR/floating_point_powf.rs:26:13\n    |\n LL |     let _ = 2f64.powf(3.1);\n    |             ^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:26:13\n+  --> $DIR/floating_point_powf.rs:27:13\n    |\n LL |     let _ = 2f64.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:27:13\n+  --> $DIR/floating_point_powf.rs:28:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:28:13\n+  --> $DIR/floating_point_powf.rs:29:13\n    |\n LL |     let _ = std::f64::consts::E.powf(3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:29:13\n+  --> $DIR/floating_point_powf.rs:30:13\n    |\n LL |     let _ = std::f64::consts::E.powf(-3.1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp()`\n \n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:30:13\n+  --> $DIR/floating_point_powf.rs:31:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:31:13\n+  --> $DIR/floating_point_powf.rs:32:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:32:13\n+  --> $DIR/floating_point_powf.rs:33:13\n    |\n LL |     let _ = x.powf(2.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:33:13\n+  --> $DIR/floating_point_powf.rs:34:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:34:13\n+  --> $DIR/floating_point_powf.rs:35:13\n    |\n LL |     let _ = x.powf(-2_147_483_648.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(-2_147_483_648)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:35:13\n+  --> $DIR/floating_point_powf.rs:36:13\n    |\n LL |     let _ = x.powf(2_147_483_647.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2_147_483_647)`"}]}