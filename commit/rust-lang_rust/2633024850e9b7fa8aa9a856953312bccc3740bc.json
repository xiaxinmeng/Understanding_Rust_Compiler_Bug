{"sha": "2633024850e9b7fa8aa9a856953312bccc3740bc", "node_id": "C_kwDOAAsO6NoAKDI2MzMwMjQ4NTBlOWI3ZmE4YWE5YTg1Njk1MzMxMmJjY2MzNzQwYmM", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T17:55:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T17:55:57Z"}, "message": "Don't monomorphize the simd helpers for each closure\n\nThis halves the total amount of llvm ir lines for simd related functions\nfrom 18227 to 9604.", "tree": {"sha": "ef5d525853433b0676d30025b36ab5de0884bf28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef5d525853433b0676d30025b36ab5de0884bf28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2633024850e9b7fa8aa9a856953312bccc3740bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2633024850e9b7fa8aa9a856953312bccc3740bc", "html_url": "https://github.com/rust-lang/rust/commit/2633024850e9b7fa8aa9a856953312bccc3740bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2633024850e9b7fa8aa9a856953312bccc3740bc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7", "html_url": "https://github.com/rust-lang/rust/commit/b60eced4057791f9a5c94ac5c9a1c26d015dd2b7"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "8bcfbc945fbf596972f5aebcaff8abc6eb5f70b8", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2633024850e9b7fa8aa9a856953312bccc3740bc/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2633024850e9b7fa8aa9a856953312bccc3740bc/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=2633024850e9b7fa8aa9a856953312bccc3740bc", "patch": "@@ -73,7 +73,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n                 kind => unreachable!(\"kind {:?}\", kind),\n             };\n \n-            simd_pair_for_each_lane(fx, x, y, ret, |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n                 let res_lane = match lane_layout.ty.kind() {\n                     ty::Float(_) => fx.bcx.ins().fcmp(flt_cc, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n@@ -83,7 +83,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         \"llvm.x86.sse2.psrli.d\", (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _res_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _res_lane_layout, lane| {\n                 match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),\n@@ -92,7 +92,7 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n         };\n         \"llvm.x86.sse2.pslli.d\", (c a, o imm8) {\n             let imm8 = crate::constant::mir_operand_get_const_val(fx, imm8).expect(\"llvm.x86.sse2.psrli.d imm8 not const\");\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _res_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _res_lane_layout, lane| {\n                 match imm8.try_to_bits(Size::from_bytes(4)).unwrap_or_else(|| panic!(\"imm8 not scalar: {:?}\", imm8)) {\n                     imm8 if imm8 < 32 => fx.bcx.ins().ishl_imm(lane, i64::from(imm8 as u8)),\n                     _ => fx.bcx.ins().iconst(types::I32, 0),"}, {"sha": "473afd16827943b7a7256167d9f400ad3e39ebb3", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2633024850e9b7fa8aa9a856953312bccc3740bc/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2633024850e9b7fa8aa9a856953312bccc3740bc/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=2633024850e9b7fa8aa9a856953312bccc3740bc", "patch": "@@ -108,7 +108,7 @@ fn simd_for_each_lane<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     val: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n-    f: impl Fn(\n+    f: &dyn Fn(\n         &mut FunctionCx<'_, '_, 'tcx>,\n         TyAndLayout<'tcx>,\n         TyAndLayout<'tcx>,\n@@ -138,7 +138,7 @@ fn simd_pair_for_each_lane<'tcx>(\n     x: CValue<'tcx>,\n     y: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n-    f: impl Fn(\n+    f: &dyn Fn(\n         &mut FunctionCx<'_, '_, 'tcx>,\n         TyAndLayout<'tcx>,\n         TyAndLayout<'tcx>,\n@@ -171,7 +171,7 @@ fn simd_reduce<'tcx>(\n     val: CValue<'tcx>,\n     acc: Option<Value>,\n     ret: CPlace<'tcx>,\n-    f: impl Fn(&mut FunctionCx<'_, '_, 'tcx>, TyAndLayout<'tcx>, Value, Value) -> Value,\n+    f: &dyn Fn(&mut FunctionCx<'_, '_, 'tcx>, TyAndLayout<'tcx>, Value, Value) -> Value,\n ) {\n     let (lane_count, lane_ty) = val.layout().ty.simd_size_and_type(fx.tcx);\n     let lane_layout = fx.layout_of(lane_ty);\n@@ -192,7 +192,7 @@ fn simd_reduce_bool<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     val: CValue<'tcx>,\n     ret: CPlace<'tcx>,\n-    f: impl Fn(&mut FunctionCx<'_, '_, 'tcx>, Value, Value) -> Value,\n+    f: &dyn Fn(&mut FunctionCx<'_, '_, 'tcx>, Value, Value) -> Value,\n ) {\n     let (lane_count, _lane_ty) = val.layout().ty.simd_size_and_type(fx.tcx);\n     assert!(ret.layout().ty.is_bool());"}, {"sha": "dc04c7643b2a4913a3952cb07963619d79d153dc", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2633024850e9b7fa8aa9a856953312bccc3740bc/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2633024850e9b7fa8aa9a856953312bccc3740bc/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=2633024850e9b7fa8aa9a856953312bccc3740bc", "patch": "@@ -22,7 +22,7 @@ macro simd_cmp($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident)\n         $x,\n         $y,\n         $ret,\n-        |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n+        &|fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n             let res_lane = match lane_layout.ty.kind() {\n                 ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n                 ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n@@ -45,7 +45,7 @@ macro simd_int_binop($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $r\n         $x,\n         $y,\n         $ret,\n-        |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+        &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n             match lane_layout.ty.kind() {\n                 ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n                 ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n@@ -62,7 +62,7 @@ macro simd_int_flt_binop($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident,\n         $x,\n         $y,\n         $ret,\n-        |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+        &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n             match lane_layout.ty.kind() {\n                 ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n                 ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n@@ -80,7 +80,7 @@ macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n         $x,\n         $y,\n         $ret,\n-        |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+        &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n             match lane_layout.ty.kind() {\n                 ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n                 _ => unreachable!(\"{:?}\", lane_layout.ty),\n@@ -105,7 +105,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_cast, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_layout, ret_lane_layout, lane| {\n                 let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n \n                 let from_signed = type_sign(lane_layout.ty);\n@@ -277,7 +277,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_neg, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_layout, _ret_lane_layout, lane| {\n                 match lane_layout.ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n                     ty::Float(_) => fx.bcx.ins().fneg(lane),\n@@ -288,14 +288,14 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_fabs, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n                 fx.bcx.ins().fabs(lane)\n             });\n         };\n \n         simd_fsqrt, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n                 fx.bcx.ins().sqrt(lane)\n             });\n         };\n@@ -318,7 +318,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n         simd_rem, (c x, c y) {\n             validate_simd_type(fx, intrinsic, span, x.layout().ty);\n-            simd_pair_for_each_lane(fx, x, y, ret, |fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n+            simd_pair_for_each_lane(fx, x, y, ret, &|fx, lane_layout, _ret_lane_layout, x_lane, y_lane| {\n                 match lane_layout.ty.kind() {\n                     ty::Uint(_) => fx.bcx.ins().urem(x_lane, y_lane),\n                     ty::Int(_) => fx.bcx.ins().srem(x_lane, y_lane),\n@@ -393,7 +393,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_round, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_layout, _ret_lane_layout, lane| {\n                 match lane_layout.ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n                         \"roundf\",\n@@ -413,26 +413,26 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n         simd_ceil, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n                 fx.bcx.ins().ceil(lane)\n             });\n         };\n         simd_floor, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n                 fx.bcx.ins().floor(lane)\n             });\n         };\n         simd_trunc, (c a) {\n             validate_simd_type(fx, intrinsic, span, a.layout().ty);\n-            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, _ret_lane_layout, lane| {\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_layout, _ret_lane_layout, lane| {\n                 fx.bcx.ins().trunc(lane)\n             });\n         };\n \n         simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, Some(acc), ret, |fx, lane_layout, a, b| {\n+            simd_reduce(fx, v, Some(acc), ret, &|fx, lane_layout, a, b| {\n                 if lane_layout.ty.is_floating_point() {\n                     fx.bcx.ins().fadd(a, b)\n                 } else {\n@@ -443,7 +443,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, Some(acc), ret, |fx, lane_layout, a, b| {\n+            simd_reduce(fx, v, Some(acc), ret, &|fx, lane_layout, a, b| {\n                 if lane_layout.ty.is_floating_point() {\n                     fx.bcx.ins().fmul(a, b)\n                 } else {\n@@ -454,32 +454,32 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_reduce_all, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().band(a, b));\n+            simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().band(a, b));\n         };\n \n         simd_reduce_any, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().bor(a, b));\n+            simd_reduce_bool(fx, v, ret, &|fx, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         simd_reduce_and, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().band(a, b));\n+            simd_reduce(fx, v, None, ret, &|fx, _layout, a, b| fx.bcx.ins().band(a, b));\n         };\n \n         simd_reduce_or, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().bor(a, b));\n+            simd_reduce(fx, v, None, ret, &|fx, _layout, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         simd_reduce_xor, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().bxor(a, b));\n+            simd_reduce(fx, v, None, ret, &|fx, _layout, a, b| fx.bcx.ins().bxor(a, b));\n         };\n \n         simd_reduce_min, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n+            simd_reduce(fx, v, None, ret, &|fx, layout, a, b| {\n                 let lt = match layout.ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedLessThan, a, b),\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::UnsignedLessThan, a, b),\n@@ -492,7 +492,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         simd_reduce_max, (c v) {\n             validate_simd_type(fx, intrinsic, span, v.layout().ty);\n-            simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n+            simd_reduce(fx, v, None, ret, &|fx, layout, a, b| {\n                 let gt = match layout.ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedGreaterThan, a, b),\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, a, b),"}]}