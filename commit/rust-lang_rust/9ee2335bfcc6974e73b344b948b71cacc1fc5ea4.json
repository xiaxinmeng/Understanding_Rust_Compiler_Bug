{"sha": "9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTIzMzViZmNjNjk3NGU3M2IzNDRiOTQ4YjcxY2FjYzFmYzVlYTQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-05T16:39:27Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-19T14:42:14Z"}, "message": "Fix test fallout, and add some rather comprehensive tests.", "tree": {"sha": "c7a0cb66bf3d3ee72244b72f7363a98344f81f20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7a0cb66bf3d3ee72244b72f7363a98344f81f20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "html_url": "https://github.com/rust-lang/rust/commit/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83acebc46213e30eac3e9e71b213440104914f4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/83acebc46213e30eac3e9e71b213440104914f4c", "html_url": "https://github.com/rust-lang/rust/commit/83acebc46213e30eac3e9e71b213440104914f4c"}], "stats": {"total": 394, "additions": 359, "deletions": 35}, "files": [{"sha": "7c32e31d23b24f4a92a6d262eeaae2bcb0f66b38", "filename": "src/test/compile-fail/cast-ptr-to-int-const.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-ptr-to-int-const.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    const X: u32 = main as u32; //~ ERROR E0018\n+    const Y: u32 = 0;\n+    const Z: u32 = &Y as *const u32 as u32; //~ ERROR E0018\n+}"}, {"sha": "3aa866677a80edc8d4528ee69765d449a56b91d5", "filename": "src/test/compile-fail/cast-rfc0401.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-rfc0401.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn illegal_cast<U:?Sized,V:?Sized>(u: *const U) -> *const V\n+{\n+    u as *const V //~ ERROR vtable kinds\n+}\n+\n+fn illegal_cast_2<U:?Sized>(u: *const U) -> *const str\n+{\n+    u as *const str //~ ERROR vtable kinds\n+}\n+\n+trait Foo { fn foo(&self) {} }\n+impl<T> Foo for T {}\n+\n+enum E {\n+    A, B\n+}\n+\n+fn main()\n+{\n+    let f: f32 = 1.2;\n+    let v = 0 as *const u8;\n+    let fat_v : *const [u8] = unsafe { &*(0 as *const [u8; 1])};\n+    let foo: &Foo = &f;\n+\n+    let _ = v as &u8; //~ ERROR non-scalar\n+    let _ = v as E; //~ ERROR non-scalar\n+    let _ = v as fn(); //~ ERROR non-scalar\n+    let _ = v as (u32,); //~ ERROR non-scalar\n+    let _ = Some(&v) as *const u8; //~ ERROR non-scalar\n+\n+    let _ = v as f32; //~ ERROR through a usize first\n+    let _ = main as f64; //~ ERROR through a usize first\n+    let _ = &v as usize; //~ ERROR through a raw pointer first\n+    let _ = f as *const u8; //~ ERROR through a usize first\n+    let _ = 3 as bool; //~ ERROR compare with zero\n+    let _ = E::A as bool; //~ ERROR compare with zero\n+    let _ = 0x61u32 as char; //~ ERROR only `u8` can be cast\n+\n+    let _ = false as f32; //~ ERROR through an integer first\n+    let _ = E::A as f32; //~ ERROR through an integer first\n+    let _ = 'a' as f32; //~ ERROR through an integer first\n+\n+    let _ = false as *const u8; //~ ERROR through a usize first\n+    let _ = E::A as *const u8; //~ ERROR through a usize first\n+    let _ = 'a' as *const u8; //~ ERROR through a usize first\n+\n+    let _ = 42usize as *const [u8]; //~ ERROR illegal cast\n+    let _ = v as *const [u8]; //~ ERROR illegal cast\n+    let _ = fat_v as *const Foo; //~ ERROR illegal cast\n+    let _ = foo as *const str; //~ ERROR illegal cast\n+    let _ = foo as *mut str; //~ ERROR illegal cast\n+    let _ = main as *mut str; //~ ERROR illegal cast\n+    let _ = &f as *mut f32; //~ ERROR illegal cast\n+    let _ = &f as *const f64; //~ ERROR illegal cast\n+    let _ = fat_v as usize; //~ ERROR through a raw pointer first\n+\n+    // check no error cascade\n+    let _ = main.f as *const u32; //~ ERROR attempted access of field\n+\n+}"}, {"sha": "7cc5c727bc7df786e045124167adf0757df82167", "filename": "src/test/compile-fail/cast-to-bare-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -13,7 +13,7 @@ fn foo(_x: isize) { }\n fn main() {\n     let v: u64 = 5;\n     let x = foo as extern \"C\" fn() -> isize;\n-    //~^ ERROR mismatched types\n+    //~^ ERROR non-scalar cast\n     let y = v as extern \"Rust\" fn(isize) -> (isize, isize);\n     //~^ ERROR non-scalar cast\n     y(x());"}, {"sha": "e6851f02cb6079b3734119a355ecfd317274a7aa", "filename": "src/test/compile-fail/const-cast-different-types.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-cast-different-types.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -9,18 +9,8 @@\n // except according to those terms.\n \n static a: &'static str = \"foo\";\n-static b: *const u8 = a as *const u8;\n-//~^ ERROR mismatched types\n-//~| expected *const u8\n-//~| found &'static str\n-//~| expected u8\n-//~| found str\n-static c: *const u8 = &a as *const u8;\n-//~^ ERROR mismatched types\n-//~| expected *const u8\n-//~| found &&'static str\n-//~| expected u8\n-//~| found &-ptr\n+static b: *const u8 = a as *const u8; //~ ERROR illegal cast\n+static c: *const u8 = &a as *const u8; //~ ERROR illegal cast\n \n fn main() {\n }"}, {"sha": "f6633547a7b5b6f20e5a8b53d41df2f84ba953a2", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -9,9 +9,6 @@\n // except according to those terms.\n \n // Make sure casts between thin-pointer <-> fat pointer obey RFC401\n-\n-pub trait Trait {}\n-\n fn main() {\n     let a: &[i32] = &[1, 2, 3];\n     let b: Box<[i32]> = Box::new([1, 2, 3]);"}, {"sha": "219f08ad35a845917eb139e83b9352440a20e372", "filename": "src/test/compile-fail/issue-14845.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14845.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -15,18 +15,8 @@ struct X {\n \n fn main() {\n     let x = X { a: [0] };\n-    let _f = &x.a as *mut u8;\n-    //~^ ERROR mismatched types\n-    //~| expected `*mut u8`\n-    //~| found `&[u8; 1]`\n-    //~| expected u8\n-    //~| found array of 1 elements\n+    let _f = &x.a as *mut u8; //~ ERROR illegal cast\n \n     let local: [u8; 1] = [0];\n-    let _v = &local as *mut u8;\n-    //~^ ERROR mismatched types\n-    //~| expected `*mut u8`\n-    //~| found `&[u8; 1]`\n-    //~| expected u8,\n-    //~| found array of 1 elements\n+    let _v = &local as *mut u8; //~ ERROR illegal cast\n }"}, {"sha": "a079161d42efaf836b452dba541bdc33371a7e6c", "filename": "src/test/compile-fail/issue-17444.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17444.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -14,5 +14,5 @@ enum Test {\n \n fn main() {\n     let _x = Test::Foo as *const isize;\n-    //~^ ERROR illegal cast; cast through an integer first: `Test` as `*const isize`\n+    //~^ ERROR illegal cast; cast through a usize first: `Test` as `*const isize`\n }"}, {"sha": "16ce84715b154ce17e1c4bd1b883d140aaa8c577", "filename": "src/test/compile-fail/issue-21554.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21554.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -11,5 +11,5 @@\n struct Inches(i32);\n \n fn main() {\n-    Inches as f32; //~ ERROR illegal cast; cast through an integer first\n+    Inches as f32; //~ ERROR illegal cast; cast through a usize first\n }"}, {"sha": "e10a76c65bcf1f0efa00bc8c54c2772625c4d096", "filename": "src/test/compile-fail/typeck-cast-pointer-to-float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-cast-pointer-to-float.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     let x : i16 = 22;\n     ((&x) as *const i16) as f32;\n-    //~^ ERROR illegal cast; cast through an integer first: `*const i16` as `f32`\n+    //~^ ERROR illegal cast; cast through a usize first: `*const i16` as `f32`\n }"}, {"sha": "10227f1820d96b0c04a71732dc69f0b090dd93ff", "filename": "src/test/compile-fail/vector-cast-weirdness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-cast-weirdness.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -28,7 +28,7 @@ fn main() {\n     let mut x1 = X { y: [0, 0] };\n \n     // This is still an error since we don't allow casts from &mut [T; n] to *mut T.\n-    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR mismatched types\n+    let p1: *mut u8 = &mut x1.y as *mut _;  //~ ERROR illegal cast\n     let t1: *mut [u8; 2] = &mut x1.y as *mut _;\n     let h1: *mut [u8; 2] = &mut x1.y as *mut [u8; 2];\n }"}, {"sha": "0bc1e33ce46956fa2d100ca62c5c4871a79b5bbd", "filename": "src/test/run-pass/cast-enum-with-dtor.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fcast-enum-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fcast-enum-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-enum-with-dtor.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+// check dtor calling order when casting enums.\n+\n+use std::sync::atomic;\n+use std::sync::atomic::Ordering;\n+use std::mem;\n+\n+enum E {\n+    A = 0,\n+    B = 1,\n+    C = 2\n+}\n+\n+static FLAG: atomic::AtomicUsize = atomic::ATOMIC_USIZE_INIT;\n+\n+impl Drop for E {\n+    fn drop(&mut self) {\n+        // avoid dtor loop\n+        unsafe { mem::forget(mem::replace(self, E::B)) };\n+\n+        FLAG.store(FLAG.load(Ordering::SeqCst)+1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n+    {\n+        let e = E::C;\n+        assert_eq!(e as u32, 2);\n+        assert_eq!(FLAG.load(Ordering::SeqCst), 0);\n+    }\n+    assert_eq!(FLAG.load(Ordering::SeqCst), 1);\n+}"}, {"sha": "76516a69f7960ea362ceb7a5d0b2b1ba577032ff", "filename": "src/test/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<T> {\n+    fn foo(&self, _: T) -> u32 { 42 }\n+}\n+\n+trait Bar {\n+    fn bar(&self) { println!(\"Bar!\"); }\n+}\n+\n+impl<T> Foo<T> for () {}\n+impl Foo<u32> for u32 { fn foo(&self, _: u32) -> u32 { self+43 } }\n+impl Bar for () {}\n+\n+unsafe fn fool<'a>(t: *const (Foo<u32>+'a)) -> u32 {\n+    let bar : *const Bar = t as *const Bar;\n+    let foo_e : *const Foo<u16> = t as *const _;\n+    let r_1 = foo_e as *mut Foo<u32>;\n+\n+    (&*r_1).foo(0)*(&*(bar as *const Foo<u32>)).foo(0)\n+}\n+\n+#[repr(C)]\n+struct FooS<T:?Sized>(T);\n+#[repr(C)]\n+struct BarS<T:?Sized>(T);\n+\n+fn foo_to_bar<T:?Sized>(u: *const FooS<T>) -> *const BarS<T> {\n+    u as *const BarS<T>\n+}\n+\n+fn main() {\n+    let x = 4u32;\n+    let y : &Foo<u32> = &x;\n+    let fl = unsafe { fool(y as *const Foo<u32>) };\n+    assert_eq!(fl, (43+4)*(43+4));\n+\n+    let s = FooS([0,1,2]);\n+    let u: &FooS<[u32]> = &s;\n+    let u: *const FooS<[u32]> = u;\n+    let bar_ref : *const BarS<[u32]> = foo_to_bar(u);\n+    let z : &BarS<[u32]> = unsafe{&*bar_ref};\n+    assert_eq!(&z.0, &[0,1,2]);\n+}"}, {"sha": "92fc2f846ba857dadf14707c44d53d03cb100746", "filename": "src/test/run-pass/cast-rfc0401.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-rfc0401.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -0,0 +1,169 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+use std::vec;\n+\n+enum Simple {\n+    A,\n+    B,\n+    C\n+}\n+\n+enum Valued {\n+    H8=163,\n+    Z=0,\n+    X=256,\n+    H7=67,\n+}\n+\n+enum ValuedSigned {\n+    M1=-1,\n+    P1=1\n+}\n+\n+fn main()\n+{\n+    // coercion-cast\n+    let mut it = vec![137].into_iter();\n+    let itr: &mut vec::IntoIter<u32> = &mut it;\n+    assert_eq!((itr as &mut Iterator<Item=u32>).next(), Some(137));\n+    assert_eq!((itr as &mut Iterator<Item=u32>).next(), None);\n+\n+    assert_eq!(Some(4u32) as Option<u32>, Some(4u32));\n+    assert_eq!((1u32,2u32) as (u32,u32), (1,2));\n+\n+    // this isn't prim-int-cast. Check that it works.\n+    assert_eq!(false as bool, false);\n+    assert_eq!(true as bool, true);\n+\n+    // numeric-cast\n+    let l: u64 = 0x8090a0b0c0d0e0f0;\n+    let lsz: usize = l as usize;\n+    assert_eq!(l as u32, 0xc0d0e0f0);\n+\n+    // numeric-cast\n+    assert_eq!(l as u8, 0xf0);\n+    assert_eq!(l as i8,-0x10);\n+    assert_eq!(l as u32, 0xc0d0e0f0);\n+    assert_eq!(l as u32 as usize as u32, l as u32);\n+    assert_eq!(l as i32,-0x3f2f1f10);\n+    assert_eq!(l as i32 as isize as i32, l as i32);\n+    assert_eq!(l as i64,-0x7f6f5f4f3f2f1f10);\n+\n+    assert_eq!(0 as f64, 0f64);\n+    assert_eq!(1 as f64, 1f64);\n+\n+    assert_eq!(l as f64, 9264081114510712022f64);\n+\n+    assert_eq!(l as i64 as f64, -9182662959198838444f64);\n+//  float overflow : needs fixing\n+//  assert_eq!(l as f32 as i64 as u64, 9264082620822882088u64);\n+//  assert_eq!(l as i64 as f32 as i64, 9182664080220408446i64);\n+\n+    assert_eq!(4294967040f32 as u32, 0xffffff00u32);\n+    assert_eq!(1.844674407370955e19f64 as u64, 0xfffffffffffff800u64);\n+\n+    assert_eq!(9.223372036854775e18f64 as i64, 0x7ffffffffffffc00i64);\n+    assert_eq!(-9.223372036854776e18f64 as i64, 0x8000000000000000u64 as i64);\n+\n+\n+    // addr-ptr-cast/ptr-addr-cast (thin ptr)\n+    let p: *const [u8; 1] = lsz as *const [u8; 1];\n+    assert_eq!(p as usize, lsz);\n+\n+    // ptr-ptr-cast (thin ptr)\n+    let w: *const () = p as *const ();\n+    assert_eq!(w as usize, lsz);\n+\n+    // ptr-ptr-cast (fat->thin)\n+    let u: *const [u8] = unsafe{&*p};    assert_eq!(u as *const u8, p as *const u8);\n+\n+    // ptr-ptr-cast (both vk=Length)\n+    let mut l : [u8; 2] = [0,1];\n+    let w: *mut [u16; 2] = &mut l as *mut [u8; 2] as *mut _;\n+    let w: *mut [u16] = unsafe {&mut *w};\n+    let w_u8 : *const [u8] = w as *const [u8];\n+    assert_eq!(unsafe{&*w_u8}, &l);\n+\n+    let s: *mut str = w as *mut str;\n+    let l_via_str = unsafe{&*(s as *const [u8])};\n+    assert_eq!(&l, l_via_str);\n+\n+    // enum-cast\n+    assert_eq!(Simple::A as u8, 0);\n+    assert_eq!(Simple::B as u8, 1);\n+\n+    assert_eq!(Valued::H8 as i8, -93);\n+    assert_eq!(Valued::H7 as i8, 67);\n+    assert_eq!(Valued::Z as i8, 0);\n+\n+    assert_eq!(Valued::H8 as u8, 163);\n+    assert_eq!(Valued::H7 as u8, 67);\n+    assert_eq!(Valued::Z as u8, 0);\n+\n+    assert_eq!(Valued::H8 as u16, 163);\n+    assert_eq!(Valued::Z as u16, 0);\n+    assert_eq!(Valued::H8 as u16, 163);\n+    assert_eq!(Valued::Z as u16, 0);\n+\n+    assert_eq!(ValuedSigned::M1 as u16, 65535);\n+    assert_eq!(ValuedSigned::M1 as i16, -1);\n+    assert_eq!(ValuedSigned::P1 as u16, 1);\n+    assert_eq!(ValuedSigned::P1 as i16, 1);\n+\n+    // prim-int-cast\n+    assert_eq!(false as u16, 0);\n+    assert_eq!(true as u16, 1);\n+    assert_eq!(false as i64, 0);\n+    assert_eq!(true as i64, 1);\n+    assert_eq!('a' as u32, 0x61);\n+    assert_eq!('a' as u16, 0x61);\n+    assert_eq!('a' as u8, 0x61);\n+    assert_eq!('\u05d0' as u8, 0xd0);\n+    assert_eq!('\u05d0' as u16, 0x5d0);\n+    assert_eq!('\u05d0' as u32, 0x5d0);\n+    assert_eq!('\ud83d\udc35' as u8, 0x35);\n+    assert_eq!('\ud83d\udc35' as u16, 0xf435);\n+    assert_eq!('\ud83d\udc35' as u32, 0x1f435);\n+    assert_eq!('\u82f1' as i16, -0x7d0f);\n+    assert_eq!('\u82f1' as u16, 0x82f1);\n+\n+    // u8-char-cast\n+    assert_eq!(0x61 as char, 'a');\n+    assert_eq!(0u8 as char, '\\0');\n+    assert_eq!(0xd7 as char, '\u00d7');\n+\n+    // array-ptr-cast\n+    let x = [1,2,3];\n+    let first : *const u32 = &x[0];\n+\n+    assert_eq!(first, &x as *const _);\n+    assert_eq!(first, &x as *const u32);\n+\n+    // fptr-addr-cast\n+    fn foo() {\n+        println!(\"foo!\");\n+    }\n+    fn bar() {\n+        println!(\"bar!\");\n+    }\n+\n+    assert!(foo as usize != bar as usize);\n+\n+    assert_eq!(foo as i16, foo as usize as i16);\n+\n+    // fptr-ptr-cast\n+\n+    assert_eq!(foo as *const u8 as usize, foo as usize);\n+    assert!(foo as *const u32 != first);\n+}\n+fn foo() { }"}, {"sha": "a47ae52f5902cfabfbaa8d1183d3d30b54087aff", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee2335bfcc6974e73b344b948b71cacc1fc5ea4/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=9ee2335bfcc6974e73b344b948b71cacc1fc5ea4", "patch": "@@ -181,7 +181,6 @@ pub fn main() {\n \n   println!(\"{:?}\", true as isize);\n   println!(\"{:?}\", true as usize);\n-  println!(\"{:?}\", true as *const libc::FILE);\n   println!(\"{:?}\", true as i8);\n   println!(\"{:?}\", true as i16);\n   println!(\"{:?}\", true as i32);\n@@ -190,8 +189,6 @@ pub fn main() {\n   println!(\"{:?}\", true as u16);\n   println!(\"{:?}\", true as u32);\n   println!(\"{:?}\", true as u64);\n-  println!(\"{:?}\", true as f32);\n-  println!(\"{:?}\", true as f64);\n \n   println!(\"{:?}\", 1f32 as isize);\n   println!(\"{:?}\", 1f32 as usize);"}]}