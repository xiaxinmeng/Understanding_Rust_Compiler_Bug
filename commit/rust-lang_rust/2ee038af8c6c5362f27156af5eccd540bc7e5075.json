{"sha": "2ee038af8c6c5362f27156af5eccd540bc7e5075", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZTAzOGFmOGM2YzUzNjJmMjcxNTZhZjVlY2NkNTQwYmM3ZTUwNzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-28T07:43:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-28T07:43:39Z"}, "message": "Rollup merge of #59448 - benesch:macro-doc, r=Centril\n\nUse consistent phrasing for all macro summaries\n\nNone", "tree": {"sha": "153c2b8c00444bfab444726d62211372c1d852c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153c2b8c00444bfab444726d62211372c1d852c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ee038af8c6c5362f27156af5eccd540bc7e5075", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnHsrCRBK7hj4Ov3rIwAAdHIIAJyJQRAVtI4HDG7WDSzw6Uip\nh3jUffOGeVd0fQbG/NZGoeQp/B4HzzcLZfxOqbpVawAiomhu2EKLpk4mbZ7CS0H1\nN3ZkqFBHRzNb+q0M1dYJyqzsWzfDk3WisNFlCgKa1i6naPXFZyn+pPjE8qwBjKmD\n6Pzd7Rw+kpx8YbMp/g3X2/tW7ajE0LeX8HyjPtMPXaizyRdPyy2NjwMiorXGIDwU\nnCZWgWO5wtbh4FsfXnrWrKHYlDjOKf9/idnpBc2w/OhBzPTzPAkKWz9DZ8MqYOPL\n5TvaXUDfe3U1BI3bOQRAkaQ01QWLbcrAYmywMSxMcrSeBZ+WrZLu9wspEfnTU9s=\n=fPgV\n-----END PGP SIGNATURE-----\n", "payload": "tree 153c2b8c00444bfab444726d62211372c1d852c7\nparent 02c1e3dfc12b9498c45ac25e39e7abc921e758f4\nparent 3e0db7cecd77dc7f780de0983beffd0d2f8caea7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553759019 +0100\ncommitter GitHub <noreply@github.com> 1553759019 +0100\n\nRollup merge of #59448 - benesch:macro-doc, r=Centril\n\nUse consistent phrasing for all macro summaries\n\nNone\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee038af8c6c5362f27156af5eccd540bc7e5075", "html_url": "https://github.com/rust-lang/rust/commit/2ee038af8c6c5362f27156af5eccd540bc7e5075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ee038af8c6c5362f27156af5eccd540bc7e5075/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c1e3dfc12b9498c45ac25e39e7abc921e758f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c1e3dfc12b9498c45ac25e39e7abc921e758f4", "html_url": "https://github.com/rust-lang/rust/commit/02c1e3dfc12b9498c45ac25e39e7abc921e758f4"}, {"sha": "3e0db7cecd77dc7f780de0983beffd0d2f8caea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0db7cecd77dc7f780de0983beffd0d2f8caea7", "html_url": "https://github.com/rust-lang/rust/commit/3e0db7cecd77dc7f780de0983beffd0d2f8caea7"}], "stats": {"total": 91, "additions": 47, "deletions": 44}, "files": [{"sha": "d2ee9b11b3640c2ffd32c64e9e0fc26ee809a2c6", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2ee038af8c6c5362f27156af5eccd540bc7e5075/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee038af8c6c5362f27156af5eccd540bc7e5075/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=2ee038af8c6c5362f27156af5eccd540bc7e5075", "patch": "@@ -1,4 +1,6 @@\n-/// Entry point of thread panic. For details, see `std::macros`.\n+/// Panics the current thread.\n+///\n+/// For details, see `std::macros`.\n #[macro_export]\n #[allow_internal_unstable(core_panic, __rust_unstable_column)]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n@@ -132,7 +134,7 @@ macro_rules! assert_ne {\n     });\n }\n \n-/// Ensure that a boolean expression is `true` at runtime.\n+/// Asserts that a boolean expression is `true` at runtime.\n ///\n /// This will invoke the [`panic!`] macro if the provided expression cannot be\n /// evaluated to `true` at runtime.\n@@ -236,8 +238,7 @@ macro_rules! debug_assert_ne {\n     ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_ne!($($arg)*); })\n }\n \n-/// Helper macro for reducing boilerplate code for matching `Result` together\n-/// with converting downstream errors.\n+/// Unwraps a result or propagates its error.\n ///\n /// The `?` operator was added to replace `try!` and should be used instead.\n /// Furthermore, `try` is a reserved word in Rust 2018, so if you must use\n@@ -312,7 +313,7 @@ macro_rules! r#try {\n     ($expr:expr,) => (r#try!($expr));\n }\n \n-/// Write formatted data into a buffer.\n+/// Writes formatted data into a buffer.\n ///\n /// This macro accepts a format string, a list of arguments, and a 'writer'. Arguments will be\n /// formatted according to the specified format string and the result will be passed to the writer.\n@@ -434,7 +435,7 @@ macro_rules! writeln {\n     );\n }\n \n-/// A utility macro for indicating unreachable code.\n+/// Indicates unreachable code.\n ///\n /// This is useful any time that the compiler can't determine that some code is unreachable. For\n /// example:\n@@ -502,7 +503,7 @@ macro_rules! unreachable {\n     });\n }\n \n-/// A standardized placeholder for marking unfinished code.\n+/// Indicates unfinished code.\n ///\n /// This can be useful if you are prototyping and are just looking to have your\n /// code type-check, or if you're implementing a trait that requires multiple\n@@ -559,10 +560,10 @@ macro_rules! unimplemented {\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n }\n \n-/// A standardized placeholder for marking unfinished code.\n+/// Indicates unfinished code.\n ///\n /// This can be useful if you are prototyping and are just looking to have your\n-/// code typecheck. `todo!` works exactly like `unimplemented!`, there only\n+/// code typecheck. `todo!` works exactly like `unimplemented!`. The only\n /// difference between the two macros is the name.\n ///\n /// # Panics\n@@ -618,7 +619,7 @@ macro_rules! todo {\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n }\n \n-/// A macro to create an array of [`MaybeUninit`]\n+/// Creates an array of [`MaybeUninit`].\n ///\n /// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`.\n ///\n@@ -645,7 +646,7 @@ macro_rules! uninitialized_array {\n #[cfg(rustdoc)]\n mod builtin {\n \n-    /// Unconditionally causes compilation to fail with the given error message when encountered.\n+    /// Causes compilation to fail with the given error message when encountered.\n     ///\n     /// For more information, see the documentation for [`std::compile_error!`].\n     ///\n@@ -657,7 +658,7 @@ mod builtin {\n         ($msg:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// The core macro for formatted string creation & output.\n+    /// Constructs parameters for the other string-formatting macros.\n     ///\n     /// For more information, see the documentation for [`std::format_args!`].\n     ///\n@@ -669,7 +670,7 @@ mod builtin {\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n     }\n \n-    /// Inspect an environment variable at compile time.\n+    /// Inspects an environment variable at compile time.\n     ///\n     /// For more information, see the documentation for [`std::env!`].\n     ///\n@@ -681,7 +682,7 @@ mod builtin {\n         ($name:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// Optionally inspect an environment variable at compile time.\n+    /// Optionally inspects an environment variable at compile time.\n     ///\n     /// For more information, see the documentation for [`std::option_env!`].\n     ///\n@@ -693,7 +694,7 @@ mod builtin {\n         ($name:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// Concatenate identifiers into one identifier.\n+    /// Concatenates identifiers into one identifier.\n     ///\n     /// For more information, see the documentation for [`std::concat_idents!`].\n     ///\n@@ -717,7 +718,7 @@ mod builtin {\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n     }\n \n-    /// A macro which expands to the line number on which it was invoked.\n+    /// Expands to the line number on which it was invoked.\n     ///\n     /// For more information, see the documentation for [`std::line!`].\n     ///\n@@ -726,7 +727,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n-    /// A macro which expands to the column number on which it was invoked.\n+    /// Expands to the column number on which it was invoked.\n     ///\n     /// For more information, see the documentation for [`std::column!`].\n     ///\n@@ -735,7 +736,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n-    /// A macro which expands to the file name from which it was invoked.\n+    /// Expands to the file name from which it was invoked.\n     ///\n     /// For more information, see the documentation for [`std::file!`].\n     ///\n@@ -744,7 +745,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n-    /// A macro which stringifies its arguments.\n+    /// Stringifies its arguments.\n     ///\n     /// For more information, see the documentation for [`std::stringify!`].\n     ///\n@@ -786,7 +787,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n-    /// Boolean evaluation of configuration flags, at compile-time.\n+    /// Evaluates boolean combinations of configuration flags, at compile-time.\n     ///\n     /// For more information, see the documentation for [`std::cfg!`].\n     ///\n@@ -795,7 +796,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n-    /// Parse a file as an expression or an item according to the context.\n+    /// Parses a file as an expression or an item according to the context.\n     ///\n     /// For more information, see the documentation for [`std::include!`].\n     ///\n@@ -807,7 +808,7 @@ mod builtin {\n         ($file:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// Ensure that a boolean expression is `true` at runtime.\n+    /// Asserts that a boolean expression is `true` at runtime.\n     ///\n     /// For more information, see the documentation for [`std::assert!`].\n     ///"}, {"sha": "d5afd069d7f29a1e8a2c57eec6e04147b735a3e8", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2ee038af8c6c5362f27156af5eccd540bc7e5075/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee038af8c6c5362f27156af5eccd540bc7e5075/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=2ee038af8c6c5362f27156af5eccd540bc7e5075", "patch": "@@ -4,7 +4,7 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-/// The entry point for panic of Rust threads.\n+/// Panics the current thread.\n ///\n /// This allows a program to terminate immediately and provide feedback\n /// to the caller of the program. `panic!` should be used when a program reaches\n@@ -70,7 +70,7 @@ macro_rules! panic {\n     });\n }\n \n-/// Macro for printing to the standard output.\n+/// Prints to the standard output.\n ///\n /// Equivalent to the [`println!`] macro except that a newline is not printed at\n /// the end of the message.\n@@ -116,7 +116,7 @@ macro_rules! print {\n     ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n }\n \n-/// Macro for printing to the standard output, with a newline.\n+/// Prints to the standard output, with a newline.\n ///\n /// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`) alone\n /// (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n@@ -151,7 +151,7 @@ macro_rules! println {\n     })\n }\n \n-/// Macro for printing to the standard error.\n+/// Prints to the standard error.\n ///\n /// Equivalent to the [`print!`] macro, except that output goes to\n /// [`io::stderr`] instead of `io::stdout`. See [`print!`] for\n@@ -179,7 +179,7 @@ macro_rules! eprint {\n     ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n }\n \n-/// Macro for printing to the standard error, with a newline.\n+/// Prints to the standard error, with a newline.\n ///\n /// Equivalent to the [`println!`] macro, except that output goes to\n /// [`io::stderr`] instead of `io::stdout`. See [`println!`] for\n@@ -210,8 +210,10 @@ macro_rules! eprintln {\n     })\n }\n \n-/// A macro for quick and dirty debugging with which you can inspect\n-/// the value of a given expression. An example:\n+/// Prints and returns the value of a given expression for quick and dirty\n+/// debugging.\n+///\n+/// An example:\n ///\n /// ```rust\n /// let a = 2;\n@@ -328,7 +330,7 @@ macro_rules! dbg {\n     }\n }\n \n-/// A macro to await on an async call.\n+/// Awaits the completion of an async call.\n #[macro_export]\n #[unstable(feature = \"await_macro\", issue = \"50547\")]\n #[allow_internal_unstable(gen_future, generators)]\n@@ -351,7 +353,7 @@ macro_rules! r#await {\n     } }\n }\n \n-/// A macro to select an event from a number of receivers.\n+/// Selects the first successful receive event from a number of receivers.\n ///\n /// This macro is used to wait for the first event to occur on a number of\n /// receivers. It places no restrictions on the types of receivers given to\n@@ -423,7 +425,7 @@ macro_rules! assert_approx_eq {\n #[cfg(rustdoc)]\n mod builtin {\n \n-    /// Unconditionally causes compilation to fail with the given error message when encountered.\n+    /// Causes compilation to fail with the given error message when encountered.\n     ///\n     /// This macro should be used when a crate uses a conditional compilation strategy to provide\n     /// better error messages for erroneous conditions. It's the compiler-level form of [`panic!`],\n@@ -465,7 +467,7 @@ mod builtin {\n         ($msg:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// The core macro for formatted string creation & output.\n+    /// Constructs parameters for the other string-formatting macros.\n     ///\n     /// This macro functions by taking a formatting string literal containing\n     /// `{}` for each additional argument passed. `format_args!` prepares the\n@@ -517,7 +519,7 @@ mod builtin {\n         ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n     }\n \n-    /// Inspect an environment variable at compile time.\n+    /// Inspects an environment variable at compile time.\n     ///\n     /// This macro will expand to the value of the named environment variable at\n     /// compile time, yielding an expression of type `&'static str`.\n@@ -555,7 +557,7 @@ mod builtin {\n         ($name:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// Optionally inspect an environment variable at compile time.\n+    /// Optionally inspects an environment variable at compile time.\n     ///\n     /// If the named environment variable is present at compile time, this will\n     /// expand into an expression of type `Option<&'static str>` whose value is\n@@ -581,7 +583,7 @@ mod builtin {\n         ($name:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// Concatenate identifiers into one identifier.\n+    /// Concatenates identifiers into one identifier.\n     ///\n     /// This macro takes any number of comma-separated identifiers, and\n     /// concatenates them all into one, yielding an expression which is a new\n@@ -634,7 +636,7 @@ mod builtin {\n         ($($e:expr,)*) => ({ /* compiler built-in */ });\n     }\n \n-    /// A macro which expands to the line number on which it was invoked.\n+    /// Expands to the line number on which it was invoked.\n     ///\n     /// With [`column!`] and [`file!`], these macros provide debugging information for\n     /// developers about the location within the source.\n@@ -659,7 +661,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! line { () => ({ /* compiler built-in */ }) }\n \n-    /// A macro which expands to the column number on which it was invoked.\n+    /// Expands to the column number at which it was invoked.\n     ///\n     /// With [`line!`] and [`file!`], these macros provide debugging information for\n     /// developers about the location within the source.\n@@ -684,7 +686,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! column { () => ({ /* compiler built-in */ }) }\n \n-    /// A macro which expands to the file name from which it was invoked.\n+    /// Expands to the file name in which it was invoked.\n     ///\n     /// With [`line!`] and [`column!`], these macros provide debugging information for\n     /// developers about the location within the source.\n@@ -708,7 +710,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! file { () => ({ /* compiler built-in */ }) }\n \n-    /// A macro which stringifies its arguments.\n+    /// Stringifies its arguments.\n     ///\n     /// This macro will yield an expression of type `&'static str` which is the\n     /// stringification of all the tokens passed to the macro. No restrictions\n@@ -822,7 +824,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n \n-    /// Boolean evaluation of configuration flags, at compile-time.\n+    /// Evaluates boolean combinations of configuration flags at compile-time.\n     ///\n     /// In addition to the `#[cfg]` attribute, this macro is provided to allow\n     /// boolean expression evaluation of configuration flags. This frequently\n@@ -844,7 +846,7 @@ mod builtin {\n     #[rustc_doc_only_macro]\n     macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n \n-    /// Parse a file as an expression or an item according to the context.\n+    /// Parses a file as an expression or an item according to the context.\n     ///\n     /// The file is located relative to the current file (similarly to how\n     /// modules are found).\n@@ -890,7 +892,7 @@ mod builtin {\n         ($file:expr,) => ({ /* compiler built-in */ });\n     }\n \n-    /// Ensure that a boolean expression is `true` at runtime.\n+    /// Asserts that a boolean expression is `true` at runtime.\n     ///\n     /// This will invoke the [`panic!`] macro if the provided expression cannot be\n     /// evaluated to `true` at runtime.\n@@ -944,7 +946,7 @@ mod builtin {\n     }\n }\n \n-/// A macro for defining `#[cfg]` if-else statements.\n+/// Defines `#[cfg]` if-else statements.\n ///\n /// This is similar to the `if/elif` C preprocessor macro by allowing definition\n /// of a cascade of `#[cfg]` cases, emitting the implementation which matches"}]}