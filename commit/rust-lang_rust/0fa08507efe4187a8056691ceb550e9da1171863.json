{"sha": "0fa08507efe4187a8056691ceb550e9da1171863", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYTA4NTA3ZWZlNDE4N2E4MDU2NjkxY2ViNTUwZTlkYTExNzE4NjM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-09T09:23:31Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-05-09T09:23:31Z"}, "message": "Rollup merge of #50525 - nnethercote:lit_token, r=michaelwoerister\n\nOptimize string handling in lit_token().\n\nIn the common case, the string value in a string literal Token is the\nsame as the string value in a string literal LitKind. (The exception is\nwhen escapes or \\r are involved.) This patch takes advantage of that to\navoid calling str_lit() and re-interning the string in that case. This\nspeeds up incremental builds for a few of the rustc-benchmarks, the best\nby 3%.\n\nBenchmarks that got a speedup of 1% or more:\n```\ncoercions\n        avg: -1.1%      min: -3.5%      max: 0.4%\nregex-check\n        avg: -1.2%      min: -1.5%      max: -0.6%\nfutures-check\n        avg: -0.9%      min: -1.4%      max: -0.3%\nfutures\n        avg: -0.8%      min: -1.3%      max: -0.3%\nfutures-opt\n        avg: -0.7%      min: -1.2%      max: -0.1%\nregex\n        avg: -0.5%      min: -1.2%      max: -0.1%\nregex-opt\n        avg: -0.5%      min: -1.1%      max: -0.1%\nhyper-check\n        avg: -0.7%      min: -1.0%      max: -0.3%\n```", "tree": {"sha": "6b8260d2cf192a4fa0fad7967d867f974a7c8d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b8260d2cf192a4fa0fad7967d867f974a7c8d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fa08507efe4187a8056691ceb550e9da1171863", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlryvhMACgkQ/vbIBR0O\nATyDiw//YPj1+PyH2RxDnY6c47vJNAgaEvM2syOgA+uEV/rPNOatyTs3gPH6Wrqw\nmaU37gw7VoNB9VfarLQXYQnqCV9cqVtYs3WMKBLvsOjSXVnBXCMYmbiw8IIghf2d\nMB0wJQtB6oKUiI5IqfGRQRibGURaVeCo2OHNdA8GtIsULHgO6odgb22pxEAnhnFI\n84nMyJSHGqPra9zptiG878EbXDeIhvIIlmBSQ2VVQ8oKe5RYzL6iQSZMDmAei+9J\nolVTjL5kHQY3rQVQ9BHZRjFdnrXzF4J1jajzpv+tq3YLoWsUQMhF4NjDIzyizBhb\nIHGmwvyY4jwzhBdZ1aIkrul0jhZIUjwXH3n+8ZtN+X9ZXcfT6yavdffWFHDhe1DT\ncQnpWS/EUx0y3fgvOlrV1Ng+6dUnhTfvq7CgKhr+Z3oRNLbYmJTpQDBk77begZMX\n2F7dNihYmWtjYh84DGRwQ9AkLBETRWZyVIalZL4UFc2lxkaGWWWBoEOZeUEDbfHl\nz/dmy8eKJ6lWPfnHfAgMwt2KrnoQuS+v7lYpUWFOsXbPu1PWMnOGDxEIUTVSUxN8\n9nyI5xJx8kUFNL3iYYpu5HqjVn40RbwOq1aLHyl69t9Soka8n0EpND23cWaEtQho\ndWnJV1sIvVUdEypVNidch2QxlVHQysjdwhkzCokoU28ZXpRvTCA=\n=hodE\n-----END PGP SIGNATURE-----", "payload": "tree 6b8260d2cf192a4fa0fad7967d867f974a7c8d91\nparent e6a309e352e10a4758a911f7ea7d2cdfd24943c3\nparent 65ea0ff29d32ca4fea30477f7fb1a1d43342dc26\nauthor kennytm <kennytm@gmail.com> 1525857811 +0800\ncommitter kennytm <kennytm@gmail.com> 1525857811 +0800\n\nRollup merge of #50525 - nnethercote:lit_token, r=michaelwoerister\n\nOptimize string handling in lit_token().\n\nIn the common case, the string value in a string literal Token is the\nsame as the string value in a string literal LitKind. (The exception is\nwhen escapes or \\r are involved.) This patch takes advantage of that to\navoid calling str_lit() and re-interning the string in that case. This\nspeeds up incremental builds for a few of the rustc-benchmarks, the best\nby 3%.\n\nBenchmarks that got a speedup of 1% or more:\n```\ncoercions\n        avg: -1.1%      min: -3.5%      max: 0.4%\nregex-check\n        avg: -1.2%      min: -1.5%      max: -0.6%\nfutures-check\n        avg: -0.9%      min: -1.4%      max: -0.3%\nfutures\n        avg: -0.8%      min: -1.3%      max: -0.3%\nfutures-opt\n        avg: -0.7%      min: -1.2%      max: -0.1%\nregex\n        avg: -0.5%      min: -1.2%      max: -0.1%\nregex-opt\n        avg: -0.5%      min: -1.1%      max: -0.1%\nhyper-check\n        avg: -0.7%      min: -1.0%      max: -0.3%\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa08507efe4187a8056691ceb550e9da1171863", "html_url": "https://github.com/rust-lang/rust/commit/0fa08507efe4187a8056691ceb550e9da1171863", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fa08507efe4187a8056691ceb550e9da1171863/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a309e352e10a4758a911f7ea7d2cdfd24943c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a309e352e10a4758a911f7ea7d2cdfd24943c3", "html_url": "https://github.com/rust-lang/rust/commit/e6a309e352e10a4758a911f7ea7d2cdfd24943c3"}, {"sha": "65ea0ff29d32ca4fea30477f7fb1a1d43342dc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26", "html_url": "https://github.com/rust-lang/rust/commit/65ea0ff29d32ca4fea30477f7fb1a1d43342dc26"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "f26a6a5307401cb8645517e69e6dda98862f0b22", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0fa08507efe4187a8056691ceb550e9da1171863/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fa08507efe4187a8056691ceb550e9da1171863/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0fa08507efe4187a8056691ceb550e9da1171863", "patch": "@@ -419,13 +419,24 @@ pub fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Hand\n         token::Integer(s) => (false, integer_lit(&s.as_str(), suf, diag)),\n         token::Float(s) => (false, float_lit(&s.as_str(), suf, diag)),\n \n-        token::Str_(s) => {\n-            let s = Symbol::intern(&str_lit(&s.as_str(), diag));\n-            (true, Some(LitKind::Str(s, ast::StrStyle::Cooked)))\n+        token::Str_(mut sym) => {\n+            // If there are no characters requiring special treatment we can\n+            // reuse the symbol from the Token. Otherwise, we must generate a\n+            // new symbol because the string in the LitKind is different to the\n+            // string in the Token.\n+            let s = &sym.as_str();\n+            if s.as_bytes().iter().any(|&c| c == b'\\\\' || c == b'\\r') {\n+                sym = Symbol::intern(&str_lit(s, diag));\n+            }\n+            (true, Some(LitKind::Str(sym, ast::StrStyle::Cooked)))\n         }\n-        token::StrRaw(s, n) => {\n-            let s = Symbol::intern(&raw_str_lit(&s.as_str()));\n-            (true, Some(LitKind::Str(s, ast::StrStyle::Raw(n))))\n+        token::StrRaw(mut sym, n) => {\n+            // Ditto.\n+            let s = &sym.as_str();\n+            if s.contains('\\r') {\n+                sym = Symbol::intern(&raw_str_lit(s));\n+            }\n+            (true, Some(LitKind::Str(sym, ast::StrStyle::Raw(n))))\n         }\n         token::ByteStr(i) => {\n             (true, Some(LitKind::ByteStr(byte_str_lit(&i.as_str()))))"}]}