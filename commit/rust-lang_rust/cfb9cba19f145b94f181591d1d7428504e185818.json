{"sha": "cfb9cba19f145b94f181591d1d7428504e185818", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjljYmExOWYxNDViOTRmMTgxNTkxZDFkNzQyODUwNGUxODU4MTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T00:19:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:27Z"}, "message": "Convert str::from_chars, to_chars to ivecs", "tree": {"sha": "1ab9a8b9de70b9ef852bfdac7ce69d0252291872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab9a8b9de70b9ef852bfdac7ce69d0252291872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb9cba19f145b94f181591d1d7428504e185818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb9cba19f145b94f181591d1d7428504e185818", "html_url": "https://github.com/rust-lang/rust/commit/cfb9cba19f145b94f181591d1d7428504e185818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb9cba19f145b94f181591d1d7428504e185818/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878fbac2781a2eb55ca32789fe1ce7c45579ffdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/878fbac2781a2eb55ca32789fe1ce7c45579ffdf", "html_url": "https://github.com/rust-lang/rust/commit/878fbac2781a2eb55ca32789fe1ce7c45579ffdf"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "08f78d002f65ea4ba7b322cc0d189c9fa252e628", "filename": "src/lib/str.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cfb9cba19f145b94f181591d1d7428504e185818/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb9cba19f145b94f181591d1d7428504e185818/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=cfb9cba19f145b94f181591d1d7428504e185818", "patch": "@@ -241,7 +241,7 @@ fn from_char(ch: char) -> str {\n     ret buf;\n }\n \n-fn from_chars(chs: vec[char]) -> str {\n+fn from_chars(chs: &[char]) -> str {\n     let buf = \"\";\n     for ch: char  in chs { push_utf8_bytes(buf, ch); }\n     ret buf;\n@@ -300,13 +300,13 @@ fn char_len(s: str) -> uint {\n     ret len;\n }\n \n-fn to_chars(s: str) -> vec[char] {\n-    let buf: vec[char] = [];\n+fn to_chars(s: str) -> [char] {\n+    let buf: [char] = ~[];\n     let i = 0u;\n     let len = byte_len(s);\n     while i < len {\n         let cur = char_range_at(s, i);\n-        vec::push[char](buf, cur.ch);\n+        buf += ~[cur.ch];\n         i = cur.next;\n     }\n     ret buf;\n@@ -524,13 +524,13 @@ fn replace(s: str, from: str, to: str) : is_not_empty(from) -> str {\n \n // FIXME: Also not efficient\n fn char_slice(s: &str, begin: uint, end: uint) -> str {\n-    from_chars(vec::slice(to_chars(s), begin, end))\n+    from_chars(ivec::slice(to_chars(s), begin, end))\n }\n \n fn trim_left(s: &str) -> str {\n-    fn count_whities(s: &vec[char]) -> uint {\n+    fn count_whities(s: &[char]) -> uint {\n         let i = 0u;\n-        while i < vec::len(s) {\n+        while i < ivec::len(s) {\n             if !char::is_whitespace(s.(i)) {\n                 break;\n             }\n@@ -540,12 +540,12 @@ fn trim_left(s: &str) -> str {\n     }\n     let chars = to_chars(s);\n     let whities = count_whities(chars);\n-    ret from_chars(vec::slice(chars, whities, vec::len(chars)));\n+    ret from_chars(ivec::slice(chars, whities, ivec::len(chars)));\n }\n \n fn trim_right(s: &str) -> str {\n-    fn count_whities(s: &vec[char]) -> uint {\n-        let i = vec::len(s);\n+    fn count_whities(s: &[char]) -> uint {\n+        let i = ivec::len(s);\n         while 0u < i {\n             if !char::is_whitespace(s.(i - 1u)) {\n                 break;\n@@ -556,7 +556,7 @@ fn trim_right(s: &str) -> str {\n     }\n     let chars = to_chars(s);\n     let whities = count_whities(chars);\n-    ret from_chars(vec::slice(chars, 0u, whities));\n+    ret from_chars(ivec::slice(chars, 0u, whities));\n }\n \n fn trim(s: &str) -> str {"}, {"sha": "44e841ce6a0ce52f202187ad4ce218f05df254a0", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cfb9cba19f145b94f181591d1d7428504e185818/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb9cba19f145b94f181591d1d7428504e185818/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=cfb9cba19f145b94f181591d1d7428504e185818", "patch": "@@ -1,17 +1,16 @@\n use std;\n import std::str;\n-import std::vec;\n import std::io;\n import std::ivec;\n \n fn main() {\n     // Chars of 1, 2, 3, and 4 bytes\n-    let chs: vec[char] = ['e', '\u00e9', '\u20ac', 0x10000 as char];\n+    let chs: [char] = ~['e', '\u00e9', '\u20ac', 0x10000 as char];\n     let s: str = str::from_chars(chs);\n \n     assert (str::byte_len(s) == 10u);\n     assert (str::char_len(s) == 4u);\n-    assert (vec::len[char](str::to_chars(s)) == 4u);\n+    assert (ivec::len[char](str::to_chars(s)) == 4u);\n     assert (str::eq(str::from_chars(str::to_chars(s)), s));\n     assert (str::char_at(s, 0u) == 'e');\n     assert (str::char_at(s, 1u) == '\u00e9');"}]}