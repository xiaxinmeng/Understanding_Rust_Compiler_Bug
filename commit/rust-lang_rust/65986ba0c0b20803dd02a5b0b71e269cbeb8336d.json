{"sha": "65986ba0c0b20803dd02a5b0b71e269cbeb8336d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OTg2YmEwYzBiMjA4MDNkZDAyYTViMGI3MWUyNjljYmViODMzNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T11:12:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T11:12:43Z"}, "message": "auto merge of #5215 : jld/rust/fn-const-env, r=graydon\n\nFixes #5210; unblocks #5183.", "tree": {"sha": "1fd4c8804e44088151d647ee5e2ad12dd1002a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd4c8804e44088151d647ee5e2ad12dd1002a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65986ba0c0b20803dd02a5b0b71e269cbeb8336d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65986ba0c0b20803dd02a5b0b71e269cbeb8336d", "html_url": "https://github.com/rust-lang/rust/commit/65986ba0c0b20803dd02a5b0b71e269cbeb8336d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65986ba0c0b20803dd02a5b0b71e269cbeb8336d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "url": "https://api.github.com/repos/rust-lang/rust/commits/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53", "html_url": "https://github.com/rust-lang/rust/commit/eddefbc893f16ddec44dbb6b5be6adf7d84c2b53"}, {"sha": "eb1c632201a9b9f03abfef816fb9625d3f014600", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1c632201a9b9f03abfef816fb9625d3f014600", "html_url": "https://github.com/rust-lang/rust/commit/eb1c632201a9b9f03abfef816fb9625d3f014600"}], "stats": {"total": 65, "additions": 60, "deletions": 5}, "files": [{"sha": "e61afbdce25052eec2eff9de6128bb0cbf085748", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/65986ba0c0b20803dd02a5b0b71e269cbeb8336d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65986ba0c0b20803dd02a5b0b71e269cbeb8336d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=65986ba0c0b20803dd02a5b0b71e269cbeb8336d", "patch": "@@ -20,6 +20,7 @@ use middle::trans::expr;\n use middle::trans::machine;\n use middle::trans::type_of;\n use middle::ty;\n+use util::ppaux::{expr_repr, ty_to_str};\n \n use core::libc::c_uint;\n use syntax::{ast, ast_util, codemap, ast_map};\n@@ -150,6 +151,24 @@ pub fn get_const_val(cx: @CrateContext, def_id: ast::def_id) -> ValueRef {\n }\n \n pub fn const_expr(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n+    let ety = ty::expr_ty_adjusted(cx.tcx, e);\n+    let llty = type_of::sizing_type_of(cx, ety);\n+    let llconst = const_expr_unchecked(cx, e);\n+    let csize = machine::llsize_of_alloc(cx, val_ty(llconst));\n+    let tsize = machine::llsize_of_alloc(cx, llty);\n+    if csize != tsize {\n+        unsafe {\n+            llvm::LLVMDumpValue(llconst);\n+            llvm::LLVMDumpValue(C_null(llty));\n+        }\n+        cx.sess.bug(fmt!(\"const %s of type %s has size %u instead of %u\",\n+                         expr_repr(cx.tcx, e), ty_to_str(cx.tcx, ety),\n+                         csize, tsize));\n+    }\n+    llconst\n+}\n+\n+fn const_expr_unchecked(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n     unsafe {\n         let _icx = cx.insn_ctxt(\"const_expr\");\n         return match /*bad*/copy e.node {\n@@ -394,13 +413,22 @@ pub fn const_expr(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n           ast::expr_path(pth) => {\n             assert pth.types.len() == 0;\n             match cx.tcx.def_map.find(&e.id) {\n-                Some(ast::def_fn(def_id, purity)) => {\n+                Some(ast::def_fn(def_id, _purity)) => {\n                     assert ast_util::is_local(def_id);\n                     let f = base::get_item_val(cx, def_id.node);\n-                    match purity {\n-                      ast::extern_fn =>\n-                        llvm::LLVMConstPointerCast(f, T_ptr(T_i8())),\n-                      _ => C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n+                    let ety = ty::expr_ty_adjusted(cx.tcx, e);\n+                    match ty::get(ety).sty {\n+                        ty::ty_bare_fn(*) | ty::ty_ptr(*) => {\n+                            llvm::LLVMConstPointerCast(f, T_ptr(T_i8()))\n+                        }\n+                        ty::ty_closure(*) => {\n+                            C_struct(~[f, C_null(T_opaque_box_ptr(cx))])\n+                        }\n+                        _ => {\n+                            cx.sess.span_bug(e.span, fmt!(\n+                                \"unexpected const fn type: %s\",\n+                                ty_to_str(cx.tcx, ety)))\n+                        }\n                     }\n                 }\n                 Some(ast::def_const(def_id)) => {"}, {"sha": "bf7472aeb3612670d22e7c89a967b33a1e077490", "filename": "src/test/run-pass/const-vec-of-fns.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65986ba0c0b20803dd02a5b0b71e269cbeb8336d/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65986ba0c0b20803dd02a5b0b71e269cbeb8336d/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vec-of-fns.rs?ref=65986ba0c0b20803dd02a5b0b71e269cbeb8336d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+ * Try to double-check that const fns have the right size (with or\n+ * without dummy env ptr, as appropriate) by iterating a size-2 array.\n+ * If the const size differs from the runtime size, the second element\n+ * should be read as a null or otherwise wrong pointer and crash.\n+ */\n+\n+fn f() { }\n+const bare_fns: &[extern fn()] = &[f, f];\n+// NOTE Why does this not type without the struct?\n+struct S(&fn());\n+const closures: &[S] = &[S(f), S(f)];\n+\n+pub fn main() {\n+    for bare_fns.each |&bare_fn| { bare_fn() }\n+    for closures.each |&closure| { (*closure)() }\n+}"}]}