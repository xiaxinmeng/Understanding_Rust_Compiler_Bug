{"sha": "a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f", "node_id": "C_kwDOAAsO6NoAKGE5YzNlYjkxZTlmNWE4ZGEyNGNiNmVmODI1NDQ1OGE2NWJmY2I3N2Y", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2023-02-13T18:44:14Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2023-02-20T18:38:28Z"}, "message": "Bind header+u32 to variable for clearer math", "tree": {"sha": "c7ecb34c0f2e370bce4b74cda5133e0ad57ea8d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ecb34c0f2e370bce4b74cda5133e0ad57ea8d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAmPzviQACgkQfsyTL4ss\ncx5M6A/8CtOrWaIzA8XdUNwPrSHYajMTFN3tiHsCv2Pj5qJyZGWK0Vh/Hr2wjBGc\n8cqAMNW2SGrkQP0B+4s6iiAN+p9B7wczwm3+r93QPNqLeA59jLRf7K+QVoGyQX2V\nyOnSprxYJSrhNOaPy7CTHOoWCxDN3gk2+OwVseMen3VUiNTUWZ+RF0PWr7e826K1\nDNwfrHzhCDv09e1qAVPiuIgL5JXysRh0EQXv6emlqCfXSFuAf7zeBy2A1VDL7zZp\nKSrH6GgHND0Q56ly6T7v7PdtkJF8tCxenqCaTsh3dvLx75aOcxCKX1wMFu4L23dJ\n48weJpE78fmfdMEFnxWovTNF0AOkDCPNu033ZOC0rySzuECNtw+00dXIk+RH0AaL\nlg68gr1JAJ64GSFomh0vNE8llkPC9Mwk/6YqUKfpZ1J/C/UuH1HnBuRBimqANFyW\nfmRzH2WrKkzGPMN4b1VjHp2cZpjcxTS1ibJqc5kDbA2+8cRwfOO3kVnLWG4HGYJo\nkisvxoXUHcCfDDHk0ZuMSMpS8iWeB99kjK/rTJje48YkZc81Bx4OCczamAR0yBrw\nwYp2Kc+Wp8QTlXaeQBhRBsFUtavAZcvZxIn7okFVv+3wKg6DSGyLxDVcnHlvUxZx\nRZIMXKVf3SIJFvO+9JGQaUINj8d/T+Yzn8FRmhS100+650ik8T8=\n=stNI\n-----END PGP SIGNATURE-----", "payload": "tree c7ecb34c0f2e370bce4b74cda5133e0ad57ea8d0\nparent 7df53d5e18cc5b39d9452e4aa3c653d0efa9f65f\nauthor Rune Tynan <runetynan@gmail.com> 1676313854 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1676918308 -0500\n\nBind header+u32 to variable for clearer math\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f", "html_url": "https://github.com/rust-lang/rust/commit/a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7df53d5e18cc5b39d9452e4aa3c653d0efa9f65f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7df53d5e18cc5b39d9452e4aa3c653d0efa9f65f", "html_url": "https://github.com/rust-lang/rust/commit/7df53d5e18cc5b39d9452e4aa3c653d0efa9f65f"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "82a321334ae1114ace87b937ad534ec06501e321", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=a9c3eb91e9f5a8da24cb6ef8254458a65bfcb77f", "patch": "@@ -789,6 +789,9 @@ fn get_metadata_section<'p>(\n                 loader.get_dylib_metadata(target, filename).map_err(MetadataError::LoadFailure)?;\n             // The header is uncompressed\n             let header_len = METADATA_HEADER.len();\n+            let u32_len = core::mem::size_of::<u32>();\n+            let data_start = header_len + u32_len;\n+\n             debug!(\"checking {} bytes of metadata-version stamp\", header_len);\n             let header = &buf[..cmp::min(header_len, buf.len())];\n             if header != METADATA_HEADER {\n@@ -799,14 +802,13 @@ fn get_metadata_section<'p>(\n             }\n \n             // Length of the compressed stream - this allows linkers to pad the section if they want\n-            let u32_len = core::mem::size_of::<u32>();\n-            let Ok(len_bytes) = <[u8; 4]>::try_from(&buf[header_len..cmp::min(header_len + u32_len, buf.len())]) else {\n+            let Ok(len_bytes) = <[u8; 4]>::try_from(&buf[header_len..cmp::min(data_start, buf.len())]) else {\n                 return Err(MetadataError::LoadFailure(\"invalid metadata length found\".to_string()));\n             };\n             let compressed_len = u32::from_be_bytes(len_bytes) as usize;\n \n             // Header is okay -> inflate the actual metadata\n-            let compressed_bytes = &buf[(header_len + u32_len)..(compressed_len + header_len + u32_len)];\n+            let compressed_bytes = &buf[data_start..(data_start + compressed_len)];\n             debug!(\"inflating {} bytes of compressed metadata\", compressed_bytes.len());\n             // Assume the decompressed data will be at least the size of the compressed data, so we\n             // don't have to grow the buffer as much."}]}