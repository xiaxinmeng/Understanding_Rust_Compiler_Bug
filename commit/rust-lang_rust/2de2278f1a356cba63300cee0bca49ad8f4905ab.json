{"sha": "2de2278f1a356cba63300cee0bca49ad8f4905ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZTIyNzhmMWEzNTZjYmE2MzMwMGNlZTBiY2E0OWFkOGY0OTA1YWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-17T20:55:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-18T07:48:56Z"}, "message": "syntax: Move `default_transparency` into `ExpnInfo`", "tree": {"sha": "31498fa62f1bc1eddf0d307bb6430d091016855a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31498fa62f1bc1eddf0d307bb6430d091016855a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2de2278f1a356cba63300cee0bca49ad8f4905ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2de2278f1a356cba63300cee0bca49ad8f4905ab", "html_url": "https://github.com/rust-lang/rust/commit/2de2278f1a356cba63300cee0bca49ad8f4905ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2de2278f1a356cba63300cee0bca49ad8f4905ab/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec502eecdccec643ae6631a323dc6f38b490269", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec502eecdccec643ae6631a323dc6f38b490269", "html_url": "https://github.com/rust-lang/rust/commit/8ec502eecdccec643ae6631a323dc6f38b490269"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "9430661f75ab79b3d19878c147a161a33c55c556", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=2de2278f1a356cba63300cee0bca49ad8f4905ab", "patch": "@@ -391,10 +391,17 @@ impl_stable_hash_for!(enum ::syntax::ast::MetaItemKind {\n     NameValue(lit)\n });\n \n+impl_stable_hash_for!(enum ::syntax_pos::hygiene::Transparency {\n+    Transparent,\n+    SemiTransparent,\n+    Opaque,\n+});\n+\n impl_stable_hash_for!(struct ::syntax_pos::hygiene::ExpnInfo {\n     call_site,\n-    def_site,\n     format,\n+    def_site,\n+    default_transparency,\n     allow_internal_unstable,\n     allow_internal_unsafe,\n     local_inner_macros,"}, {"sha": "a7c98842fa3e3855d99dee2f64ddd0955c08cfd1", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=2de2278f1a356cba63300cee0bca49ad8f4905ab", "patch": "@@ -226,7 +226,6 @@ impl<'a> base::Resolver for Resolver<'a> {\n                 self.macro_def_scope(invoc.expansion_data.mark).normal_ancestor_id;\n             self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.mark,\n                                                             normal_module_def_id);\n-            invoc.expansion_data.mark.set_default_transparency(ext.default_transparency);\n         }\n \n         Ok(Some(ext))"}, {"sha": "e0fbdedd24bd70b14740096cb9448715adb2d4d8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=2de2278f1a356cba63300cee0bca49ad8f4905ab", "patch": "@@ -680,8 +680,9 @@ impl SyntaxExtension {\n     crate fn expn_info(&self, call_site: Span, format: &str) -> ExpnInfo {\n         ExpnInfo {\n             call_site,\n-            def_site: self.def_info.map(|(_, span)| span),\n             format: self.expn_format(Symbol::intern(format)),\n+            def_site: self.def_info.map(|(_, span)| span),\n+            default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),\n             allow_internal_unsafe: self.allow_internal_unsafe,\n             local_inner_macros: self.local_inner_macros,"}, {"sha": "67b6e9da477f55b5ab6dabf9b4254e80245820f7", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de2278f1a356cba63300cee0bca49ad8f4905ab/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=2de2278f1a356cba63300cee0bca49ad8f4905ab", "patch": "@@ -59,13 +59,12 @@ pub struct Mark(u32);\n #[derive(Clone, Debug)]\n struct MarkData {\n     parent: Mark,\n-    default_transparency: Transparency,\n     expn_info: Option<ExpnInfo>,\n }\n \n /// A property of a macro expansion that determines how identifiers\n /// produced by that expansion are resolved.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub enum Transparency {\n     /// Identifier produced by a transparent expansion is always resolved at call-site.\n     /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.\n@@ -85,12 +84,7 @@ pub enum Transparency {\n impl Mark {\n     pub fn fresh(parent: Mark) -> Self {\n         HygieneData::with(|data| {\n-            data.marks.push(MarkData {\n-                parent,\n-                // By default expansions behave like `macro_rules`.\n-                default_transparency: Transparency::SemiTransparent,\n-                expn_info: None,\n-            });\n+            data.marks.push(MarkData { parent, expn_info: None });\n             Mark(data.marks.len() as u32 - 1)\n         })\n     }\n@@ -126,12 +120,6 @@ impl Mark {\n         HygieneData::with(|data| data.marks[self.0 as usize].expn_info = Some(info))\n     }\n \n-    #[inline]\n-    pub fn set_default_transparency(self, transparency: Transparency) {\n-        assert_ne!(self, Mark::root());\n-        HygieneData::with(|data| data.marks[self.0 as usize].default_transparency = transparency)\n-    }\n-\n     pub fn is_descendant_of(self, ancestor: Mark) -> bool {\n         HygieneData::with(|data| data.is_descendant_of(self, ancestor))\n     }\n@@ -172,9 +160,8 @@ impl Mark {\n     #[inline]\n     pub fn looks_like_proc_macro_derive(self) -> bool {\n         HygieneData::with(|data| {\n-            let mark_data = &data.marks[self.0 as usize];\n-            if mark_data.default_transparency == Transparency::Opaque {\n-                if let Some(expn_info) = &mark_data.expn_info {\n+            if data.default_transparency(self) == Transparency::Opaque {\n+                if let Some(expn_info) = &data.marks[self.0 as usize].expn_info {\n                     if let ExpnFormat::MacroAttribute(name) = expn_info.format {\n                         if name.as_str().starts_with(\"derive(\") {\n                             return true;\n@@ -199,9 +186,6 @@ impl HygieneData {\n         HygieneData {\n             marks: vec![MarkData {\n                 parent: Mark::root(),\n-                // If the root is opaque, then loops searching for an opaque mark\n-                // will automatically stop after reaching it.\n-                default_transparency: Transparency::Opaque,\n                 expn_info: None,\n             }],\n             syntax_contexts: vec![SyntaxContextData {\n@@ -235,7 +219,9 @@ impl HygieneData {\n     }\n \n     fn default_transparency(&self, mark: Mark) -> Transparency {\n-        self.marks[mark.0 as usize].default_transparency\n+        self.marks[mark.0 as usize].expn_info.as_ref().map_or(\n+            Transparency::SemiTransparent, |einfo| einfo.default_transparency\n+        )\n     }\n \n     fn modern(&self, ctxt: SyntaxContext) -> SyntaxContext {\n@@ -427,7 +413,6 @@ impl SyntaxContext {\n         HygieneData::with(|data| {\n             data.marks.push(MarkData {\n                 parent: Mark::root(),\n-                default_transparency: Transparency::SemiTransparent,\n                 expn_info: Some(expansion_info),\n             });\n \n@@ -651,6 +636,7 @@ impl fmt::Debug for SyntaxContext {\n /// Extra information for tracking spans of macro and syntax sugar expansion\n #[derive(Clone, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct ExpnInfo {\n+    // --- The part unique to each expansion.\n     /// The location of the actual macro invocation or syntax sugar , e.g.\n     /// `let x = foo!();` or `if let Some(y) = x {}`\n     ///\n@@ -661,13 +647,18 @@ pub struct ExpnInfo {\n     /// call_site span would have its own ExpnInfo, with the call_site\n     /// pointing to the `foo!` invocation.\n     pub call_site: Span,\n+    /// The format with which the macro was invoked.\n+    pub format: ExpnFormat,\n+\n+    // --- The part specific to the macro/desugaring definition.\n+    // --- FIXME: Share it between expansions with the same definition.\n     /// The span of the macro definition itself. The macro may not\n     /// have a sensible definition span (e.g., something defined\n     /// completely inside libsyntax) in which case this is None.\n     /// This span serves only informational purpose and is not used for resolution.\n     pub def_site: Option<Span>,\n-    /// The format with which the macro was invoked.\n-    pub format: ExpnFormat,\n+    /// Transparency used by `apply_mark` for mark with this expansion info by default.\n+    pub default_transparency: Transparency,\n     /// List of #[unstable]/feature-gated features that the macro is allowed to use\n     /// internally without forcing the whole crate to opt-in\n     /// to them.\n@@ -687,8 +678,9 @@ impl ExpnInfo {\n     pub fn default(format: ExpnFormat, call_site: Span, edition: Edition) -> ExpnInfo {\n         ExpnInfo {\n             call_site,\n-            def_site: None,\n             format,\n+            def_site: None,\n+            default_transparency: Transparency::SemiTransparent,\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,"}]}