{"sha": "d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "node_id": "C_kwDOAAsO6NoAKGQ1YTdkZGQ5OWY1ZTQzMTE2ZWM0NTI3NzdmMDhmZGRiZGU3ZjQyZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T07:30:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T07:30:23Z"}, "message": "Auto merge of #106284 - estebank:merge-mut-errors, r=jyn514\n\nMerge multiple mutable borrows of immutable binding errors\n\nFix #53466.", "tree": {"sha": "3061e2a9858a21c04f33f95129da18893295cdcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3061e2a9858a21c04f33f95129da18893295cdcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "html_url": "https://github.com/rust-lang/rust/commit/d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "html_url": "https://github.com/rust-lang/rust/commit/c5cb156caa27655bc8dcf135de4d026ac4b25a4a"}, {"sha": "545406528a229f24844305b1a925cd6c743ea8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/545406528a229f24844305b1a925cd6c743ea8ed", "html_url": "https://github.com/rust-lang/rust/commit/545406528a229f24844305b1a925cd6c743ea8ed"}], "stats": {"total": 813, "additions": 547, "deletions": 266}, "files": [{"sha": "e4942f9b666e0e837389503cd2d1099895b318da", "filename": "compiler/rustc_borrowck/src/borrowck_errors.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrowck_errors.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -12,7 +12,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         place: &str,\n         borrow_place: &str,\n         value_place: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         self.infcx.tcx.sess.create_err(crate::session_diagnostics::MoveBorrow {\n             place,\n             span,\n@@ -28,7 +28,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         borrow_span: Span,\n         borrow_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -50,7 +50,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         old_loan_span: Span,\n         old_opt_via: &str,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let via =\n             |msg: &str| if msg.is_empty() { \"\".to_string() } else { format!(\" (via {})\", msg) };\n         let mut err = struct_span_err!(\n@@ -98,7 +98,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         desc: &str,\n         old_loan_span: Span,\n         old_load_end_span: Option<Span>,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             new_loan_span,\n@@ -269,7 +269,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n@@ -348,7 +348,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         span: Span,\n         path: &str,\n         reason: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0596, \"cannot borrow {} as mutable{}\", path, reason,)\n     }\n \n@@ -359,7 +359,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         immutable_place: &str,\n         immutable_section: &str,\n         action: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             mutate_span,\n@@ -378,7 +378,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         yield_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -392,7 +392,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     pub(crate) fn cannot_borrow_across_destructor(\n         &self,\n         borrow_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(\n             self,\n             borrow_span,\n@@ -405,7 +405,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         span: Span,\n         path: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0597, \"{} does not live long enough\", path,)\n     }\n \n@@ -415,7 +415,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         return_kind: &str,\n         reference_desc: &str,\n         path_desc: &str,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             span,\n@@ -440,7 +440,7 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n         closure_kind: &str,\n         borrowed_path: &str,\n         capture_span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let mut err = struct_span_err!(\n             self,\n             closure_span,\n@@ -458,14 +458,14 @@ impl<'cx, 'tcx> crate::MirBorrowckCtxt<'cx, 'tcx> {\n     pub(crate) fn thread_local_value_does_not_live_long_enough(\n         &self,\n         span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0712, \"thread-local variable borrowed past end of function\",)\n     }\n \n     pub(crate) fn temporary_value_borrowed_for_too_long(\n         &self,\n         span: Span,\n-    ) -> DiagnosticBuilder<'cx, ErrorGuaranteed> {\n+    ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         struct_span_err!(self, span, E0716, \"temporary value dropped while borrowed\",)\n     }\n "}, {"sha": "6f6d1b01bd4294a7f95195f858e0266a8a6f9c45", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 69, "deletions": 21, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -180,6 +180,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         // the verbs used in some diagnostic messages.\n         let act;\n         let acted_on;\n+        let mut suggest = true;\n+        let mut mut_error = None;\n+        let mut count = 1;\n \n         let span = match error_access {\n             AccessKind::Mutate => {\n@@ -194,15 +197,50 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 let borrow_spans = self.borrow_spans(span, location);\n                 let borrow_span = borrow_spans.args_or_use();\n-                err = self.cannot_borrow_path_as_mutable_because(borrow_span, &item_msg, &reason);\n-                borrow_spans.var_span_label(\n-                    &mut err,\n-                    format!(\n-                        \"mutable borrow occurs due to use of {} in closure\",\n-                        self.describe_any_place(access_place.as_ref()),\n-                    ),\n-                    \"mutable\",\n-                );\n+                match the_place_err {\n+                    PlaceRef { local, projection: [] }\n+                        if self.body.local_decls[local].can_be_made_mutable() =>\n+                    {\n+                        let span = self.body.local_decls[local].source_info.span;\n+                        mut_error = Some(span);\n+                        if let Some((buffer, c)) = self.get_buffered_mut_error(span) {\n+                            // We've encountered a second (or more) attempt to mutably borrow an\n+                            // immutable binding, so the likely problem is with the binding\n+                            // declaration, not the use. We collect these in a single diagnostic\n+                            // and make the binding the primary span of the error.\n+                            err = buffer;\n+                            count = c + 1;\n+                            if count == 2 {\n+                                err.replace_span_with(span, false);\n+                                err.span_label(span, \"not mutable\");\n+                            }\n+                            suggest = false;\n+                        } else {\n+                            err = self.cannot_borrow_path_as_mutable_because(\n+                                borrow_span,\n+                                &item_msg,\n+                                &reason,\n+                            );\n+                        }\n+                    }\n+                    _ => {\n+                        err = self.cannot_borrow_path_as_mutable_because(\n+                            borrow_span,\n+                            &item_msg,\n+                            &reason,\n+                        );\n+                    }\n+                }\n+                if suggest {\n+                    borrow_spans.var_span_label(\n+                        &mut err,\n+                        format!(\n+                            \"mutable borrow occurs due to use of {} in closure\",\n+                            self.describe_any_place(access_place.as_ref()),\n+                        ),\n+                        \"mutable\",\n+                    );\n+                }\n                 borrow_span\n             }\n         };\n@@ -276,7 +314,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 pat_span: _,\n                             },\n                         )))) => {\n-                            err.span_note(sp, \"the binding is already a mutable borrow\");\n+                            if suggest {\n+                                err.span_note(sp, \"the binding is already a mutable borrow\");\n+                            }\n                         }\n                         _ => {\n                             err.span_note(\n@@ -333,16 +373,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let local_decl = &self.body.local_decls[local];\n                 assert_eq!(local_decl.mutability, Mutability::Not);\n \n-                err.span_label(span, format!(\"cannot {act}\"));\n-                err.span_suggestion(\n-                    local_decl.source_info.span,\n-                    \"consider changing this to be mutable\",\n-                    format!(\"mut {}\", self.local_names[local].unwrap()),\n-                    Applicability::MachineApplicable,\n-                );\n-                let tcx = self.infcx.tcx;\n-                if let ty::Closure(id, _) = *the_place_err.ty(self.body, tcx).ty.kind() {\n-                    self.show_mutating_upvar(tcx, id.expect_local(), the_place_err, &mut err);\n+                if count < 10 {\n+                    err.span_label(span, format!(\"cannot {act}\"));\n+                }\n+                if suggest {\n+                    err.span_suggestion_verbose(\n+                        local_decl.source_info.span.shrink_to_lo(),\n+                        \"consider changing this to be mutable\",\n+                        \"mut \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    let tcx = self.infcx.tcx;\n+                    if let ty::Closure(id, _) = *the_place_err.ty(self.body, tcx).ty.kind() {\n+                        self.show_mutating_upvar(tcx, id.expect_local(), the_place_err, &mut err);\n+                    }\n                 }\n             }\n \n@@ -615,7 +659,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        self.buffer_error(err);\n+        if let Some(span) = mut_error {\n+            self.buffer_mut_error(span, err, count);\n+        } else {\n+            self.buffer_error(err);\n+        }\n     }\n \n     fn suggest_map_index_mut_alternatives(&self, ty: Ty<'tcx>, err: &mut Diagnostic, span: Span) {"}, {"sha": "ae1bea008b6cede53a067e4a3dddf619752478ce", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -2270,6 +2270,7 @@ mod error {\n         /// same primary span come out in a consistent order.\n         buffered_move_errors:\n             BTreeMap<Vec<MoveOutIndex>, (PlaceRef<'tcx>, DiagnosticBuilder<'tcx, ErrorGuaranteed>)>,\n+        buffered_mut_errors: FxHashMap<Span, (DiagnosticBuilder<'tcx, ErrorGuaranteed>, usize)>,\n         /// Diagnostics to be reported buffer.\n         buffered: Vec<Diagnostic>,\n         /// Set to Some if we emit an error during borrowck\n@@ -2281,6 +2282,7 @@ mod error {\n             BorrowckErrors {\n                 tcx,\n                 buffered_move_errors: BTreeMap::new(),\n+                buffered_mut_errors: Default::default(),\n                 buffered: Default::default(),\n                 tainted_by_errors: None,\n             }\n@@ -2331,12 +2333,34 @@ mod error {\n             }\n         }\n \n+        pub fn get_buffered_mut_error(\n+            &mut self,\n+            span: Span,\n+        ) -> Option<(DiagnosticBuilder<'tcx, ErrorGuaranteed>, usize)> {\n+            self.errors.buffered_mut_errors.remove(&span)\n+        }\n+\n+        pub fn buffer_mut_error(\n+            &mut self,\n+            span: Span,\n+            t: DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+            count: usize,\n+        ) {\n+            self.errors.buffered_mut_errors.insert(span, (t, count));\n+        }\n+\n         pub fn emit_errors(&mut self) -> Option<ErrorGuaranteed> {\n             // Buffer any move errors that we collected and de-duplicated.\n             for (_, (_, diag)) in std::mem::take(&mut self.errors.buffered_move_errors) {\n                 // We have already set tainted for this error, so just buffer it.\n                 diag.buffer(&mut self.errors.buffered);\n             }\n+            for (_, (mut diag, count)) in std::mem::take(&mut self.errors.buffered_mut_errors) {\n+                if count > 10 {\n+                    diag.note(&format!(\"...and {} other attempted mutable borrows\", count - 10));\n+                }\n+                diag.buffer(&mut self.errors.buffered);\n+            }\n \n             if !self.errors.buffered.is_empty() {\n                 self.errors.buffered.sort_by_key(|diag| diag.sort_span);"}, {"sha": "e19a6fe0ee9bff2d5a0a5c28a7ace6c976c2fa9a", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -365,12 +365,12 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn replace_span_with(&mut self, after: Span) -> &mut Self {\n+    pub fn replace_span_with(&mut self, after: Span, keep_label: bool) -> &mut Self {\n         let before = self.span.clone();\n         self.set_span(after);\n         for span_label in before.span_labels() {\n             if let Some(label) = span_label.label {\n-                if span_label.is_primary {\n+                if span_label.is_primary && keep_label {\n                     self.span.push_span_label(after, label);\n                 } else {\n                     self.span.push_span_label(span_label.span, label);"}, {"sha": "3a38d7a966960bb8857ebe489d959a4cabdbe65f", "filename": "compiler/rustc_expand/src/mbe/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fdiagnostics.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -198,12 +198,12 @@ pub(super) fn emit_frag_parse_err(\n         );\n         if !e.span.is_dummy() {\n             // early end of macro arm (#52866)\n-            e.replace_span_with(parser.token.span.shrink_to_hi());\n+            e.replace_span_with(parser.token.span.shrink_to_hi(), true);\n         }\n     }\n     if e.span.is_dummy() {\n         // Get around lack of span in error (#30128)\n-        e.replace_span_with(site_span);\n+        e.replace_span_with(site_span, true);\n         if !parser.sess.source_map().is_imported(arm_span) {\n             e.span_label(arm_span, \"in this macro arm\");\n         }"}, {"sha": "7c21a1047bcbfc5c3a04de884663780a3b56f66f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -3237,7 +3237,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         })) = call_node\n         {\n             if Some(rcvr.span) == err.span.primary_span() {\n-                err.replace_span_with(path.ident.span);\n+                err.replace_span_with(path.ident.span, true);\n             }\n         }\n         if let Some(Node::Expr(hir::Expr {"}, {"sha": "89f2b3bb7d0fe2e9fef3c90d3ec1fe91d205029e", "filename": "src/test/ui/asm/aarch64/type-check-2-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -25,12 +25,10 @@ fn main() {\n \n         // Outputs require mutable places\n \n-        let v: Vec<u64> = vec![0, 1, 2];\n+        let v: Vec<u64> = vec![0, 1, 2]; //~ ERROR cannot borrow `v` as mutable\n         asm!(\"{}\", in(reg) v[0]);\n         asm!(\"{}\", out(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n         asm!(\"{}\", inout(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n \n         // Sym operands must point to a function or static\n     }"}, {"sha": "41f7c01dc82b1f1878d277ced92289e156d4d6a8", "filename": "src/test/ui/asm/aarch64/type-check-2-2.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2-2.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -25,24 +25,22 @@ LL |         let mut y: u64 = 0;\n    |                        +++\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2-2.rs:30:29\n+  --> $DIR/type-check-2-2.rs:28:13\n    |\n LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n+   |             ^ not mutable\n LL |         asm!(\"{}\", in(reg) v[0]);\n LL |         asm!(\"{}\", out(reg) v[0]);\n-   |                             ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-2-2.rs:32:31\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-...\n+   |                             - cannot borrow as mutable\n LL |         asm!(\"{}\", inout(reg) v[0]);\n-   |                               ^ cannot borrow as mutable\n+   |                               - cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut v: Vec<u64> = vec![0, 1, 2];\n+   |             +++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0381, E0596.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "1d579ccc90eec1eaaf9eb58209dc79f247c99c80", "filename": "src/test/ui/asm/x86_64/type-check-5.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -22,11 +22,10 @@ fn main() {\n         // Outputs require mutable places\n \n         let v: Vec<u64> = vec![0, 1, 2];\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n         asm!(\"{}\", in(reg) v[0]);\n         asm!(\"{}\", out(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n         asm!(\"{}\", inout(reg) v[0]);\n-        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n \n         // Sym operands must point to a function or static\n "}, {"sha": "7970e76d6a1f4e74ae49531248cb057d79af9cae", "filename": "src/test/ui/asm/x86_64/type-check-5.stderr", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-5.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -25,24 +25,22 @@ LL |         let mut y: u64 = 0;\n    |                        +++\n \n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-5.rs:26:29\n+  --> $DIR/type-check-5.rs:24:13\n    |\n LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n-LL |         asm!(\"{}\", in(reg) v[0]);\n-LL |         asm!(\"{}\", out(reg) v[0]);\n-   |                             ^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n-  --> $DIR/type-check-5.rs:28:31\n-   |\n-LL |         let v: Vec<u64> = vec![0, 1, 2];\n-   |             - help: consider changing this to be mutable: `mut v`\n+   |             ^ not mutable\n ...\n+LL |         asm!(\"{}\", out(reg) v[0]);\n+   |                             - cannot borrow as mutable\n LL |         asm!(\"{}\", inout(reg) v[0]);\n-   |                               ^ cannot borrow as mutable\n+   |                               - cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut v: Vec<u64> = vec![0, 1, 2];\n+   |             +++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0381, E0596.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "bf50443288032c74ada58b0664b71563b1cc570f", "filename": "src/test/ui/async-await/issue-61452.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/issue-61452.rs:4:5\n    |\n-LL | pub async fn f(x: Option<usize>) {\n-   |                - help: consider changing this to be mutable: `mut x`\n LL |     x.take();\n    |     ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | pub async fn f(mut x: Option<usize>) {\n+   |                +++\n \n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/issue-61452.rs:9:5"}, {"sha": "e58f74546899ba16f109a820b887bc592e8154db", "filename": "src/test/ui/async-await/issues/issue-61187.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `data` as mutable, as it is not declared as mutable\n   --> $DIR/issue-61187.rs:6:5\n    |\n-LL | async fn response(data: Vec<u8>) {\n-   |                   ---- help: consider changing this to be mutable: `mut data`\n LL |     data.reverse();\n    |     ^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | async fn response(mut data: Vec<u8>) {\n+   |                   +++\n \n error: aborting due to previous error\n "}, {"sha": "20c7fb3a98395bddc9bf07788364b7630dd9d867", "filename": "src/test/ui/augmented-assignments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -19,7 +19,7 @@ fn main() {\n \n     let y = Int(2);\n     //~^ HELP consider changing this to be mutable\n-    //~| SUGGESTION mut y\n+    //~| SUGGESTION mut\n     y   //~ ERROR cannot borrow `y` as mutable, as it is not declared as mutable\n         //~| cannot borrow as mutable\n     +="}, {"sha": "2910c910d55241bf4c660f667df359b0ac38289f", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -10,11 +10,13 @@ LL |     x;\n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/augmented-assignments.rs:23:5\n    |\n-LL |     let y = Int(2);\n-   |         - help: consider changing this to be mutable: `mut y`\n-...\n LL |     y\n    |     ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut y = Int(2);\n+   |         +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a7748209187121bdd6f779b8d9e5644f0eaa0582", "filename": "src/test/ui/borrowck/borrow-raw-address-of-mutability.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-mutability.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrow-raw-address-of-mutability.rs:5:13\n    |\n-LL |     let x = 0;\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     let y = &raw mut x;\n    |             ^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x = 0;\n+   |         +++\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrow-raw-address-of-mutability.rs:11:17\n@@ -18,13 +21,16 @@ LL |         let y = &raw mut x;\n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n   --> $DIR/borrow-raw-address-of-mutability.rs:21:5\n    |\n-LL |     let f = || {\n-   |         - help: consider changing this to be mutable: `mut f`\n LL |         let y = &raw mut x;\n    |                          - calling `f` requires mutable binding due to mutable borrow of `x`\n LL |     };\n LL |     f();\n    |     ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut f = || {\n+   |         +++\n \n error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/borrow-raw-address-of-mutability.rs:29:17"}, {"sha": "26f3e2bbdb775901eaaed75553e50ca2b2c9c38e", "filename": "src/test/ui/borrowck/borrowck-access-permissions.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-access-permissions.rs:9:19\n    |\n-LL |     let x = 1;\n-   |         - help: consider changing this to be mutable: `mut x`\n-...\n LL |         let _y1 = &mut x;\n    |                   ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x = 1;\n+   |         +++\n \n error[E0596]: cannot borrow immutable static item `static_x` as mutable\n   --> $DIR/borrowck-access-permissions.rs:14:19\n@@ -16,11 +18,13 @@ LL |         let _y1 = &mut static_x;\n error[E0596]: cannot borrow `*box_x` as mutable, as `box_x` is not declared as mutable\n   --> $DIR/borrowck-access-permissions.rs:22:19\n    |\n-LL |         let box_x = Box::new(1);\n-   |             ----- help: consider changing this to be mutable: `mut box_x`\n-...\n LL |         let _y1 = &mut *box_x;\n    |                   ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut box_x = Box::new(1);\n+   |             +++\n \n error[E0596]: cannot borrow `*ref_x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-access-permissions.rs:30:19"}, {"sha": "1c992dfccebfbd95b775536183f5c766c93021a0", "filename": "src/test/ui/borrowck/borrowck-argument.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,34 +1,46 @@\n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:10:5\n    |\n-LL | fn func(arg: S) {\n-   |         --- help: consider changing this to be mutable: `mut arg`\n LL |     arg.mutate();\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn func(mut arg: S) {\n+   |         +++\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:15:9\n    |\n-LL |     fn method(&self, arg: S) {\n-   |                      --- help: consider changing this to be mutable: `mut arg`\n LL |         arg.mutate();\n    |         ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     fn method(&self, mut arg: S) {\n+   |                      +++\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:21:9\n    |\n-LL |     fn default(&self, arg: S) {\n-   |                       --- help: consider changing this to be mutable: `mut arg`\n LL |         arg.mutate();\n    |         ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     fn default(&self, mut arg: S) {\n+   |                       +++\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:32:17\n    |\n LL |     (|arg: S| { arg.mutate() })(s);\n-   |       ---       ^^^^^^^^^^^^ cannot borrow as mutable\n-   |       |\n-   |       help: consider changing this to be mutable: `mut arg`\n+   |                 ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     (|mut arg: S| { arg.mutate() })(s);\n+   |       +++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "19ef0301a2d76b3b5b8d560caf6d0ccce2d276d5", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-auto-mut-ref-to-immut-var.rs:15:5\n    |\n-LL |     let x = Foo { x: 3 };\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     x.printme();\n    |     ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x = Foo { x: 3 };\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "c2351aacdae62a35706b5e52a5e194f82816ed19", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -105,10 +105,13 @@ LL |     *bar1;\n error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:122:16\n    |\n-LL |     let foo = make_foo();\n-   |         --- help: consider changing this to be mutable: `mut foo`\n LL |     let bar1 = &mut foo.bar1;\n    |                ^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut foo = make_foo();\n+   |         +++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "8fcaaa883b22c6520869d9a7e757a64ac28578ca", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -105,10 +105,13 @@ LL |     *bar1;\n error[E0596]: cannot borrow `foo.bar1` as mutable, as `foo` is not declared as mutable\n   --> $DIR/borrowck-borrow-from-stack-variable.rs:120:16\n    |\n-LL |     let foo = make_foo();\n-   |         --- help: consider changing this to be mutable: `mut foo`\n LL |     let bar1 = &mut foo.bar1;\n    |                ^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut foo = make_foo();\n+   |         +++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "3c28ff56e4196158358496cfc3f7953744f97e28", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `*a` as mutable, as `a` is not declared as mutable\n   --> $DIR/borrowck-borrow-immut-deref-of-box-as-mut.rs:12:5\n    |\n-LL |     let a: Box<_> = Box::new(A);\n-   |         - help: consider changing this to be mutable: `mut a`\n LL |     a.foo();\n    |     ^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut a: Box<_> = Box::new(A);\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "20528e3f0ee089d6fb949b186a0d66b15a1f6002", "filename": "src/test/ui/borrowck/borrowck-mut-addr-of-imm-var.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-mut-addr-of-imm-var.rs:3:25\n    |\n-LL |     let x: isize = 3;\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     let y: &mut isize = &mut x;\n    |                         ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x: isize = 3;\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "8ab472e64c7a929093691ef97102d71092900d89", "filename": "src/test/ui/borrowck/borrowck-mut-slice-of-imm-vec.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-mut-slice-of-imm-vec.rs:7:11\n    |\n-LL |     let v = vec![1, 2, 3];\n-   |         - help: consider changing this to be mutable: `mut v`\n LL |     write(&mut v);\n    |           ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut v = vec![1, 2, 3];\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "723b19f4124ac10b6877486bd215d201fa6107bf", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -11,11 +11,13 @@ LL |     use_mut(sp);\n error[E0596]: cannot borrow `s` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-overloaded-call.rs:67:5\n    |\n-LL |     let s = SFnMut {\n-   |         - help: consider changing this to be mutable: `mut s`\n-...\n LL |     s(3);\n    |     ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut s = SFnMut {\n+   |         +++\n \n error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-call.rs:75:5"}, {"sha": "5cfd81bd00428e1644e215476b8e76656a204398", "filename": "src/test/ui/borrowck/borrowck-ref-mut-of-imm.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n   --> $DIR/borrowck-ref-mut-of-imm.rs:4:12\n    |\n-LL | fn destructure(x: Option<isize>) -> isize {\n-   |                - help: consider changing this to be mutable: `mut x`\n-...\n LL |       Some(ref mut v) => *v\n    |            ^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn destructure(mut x: Option<isize>) -> isize {\n+   |                +++\n \n error: aborting due to previous error\n "}, {"sha": "3634676463c62f516be4f82a4da52570b14778b4", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -11,10 +11,13 @@ LL |     use_mut(g);\n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-unboxed-closures.rs:7:5\n    |\n-LL | fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n-   |                                      - help: consider changing this to be mutable: `mut f`\n LL |     f(1, 2);\n    |     ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn b<F:FnMut(isize, isize) -> isize>(mut f: F) {\n+   |                                      +++\n \n error[E0382]: use of moved value: `f`\n   --> $DIR/borrowck-unboxed-closures.rs:12:5"}, {"sha": "d5392e7d66fa4cbbe8e27adef49c5799599c4a2f", "filename": "src/test/ui/borrowck/immut-function-arguments.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmut-function-arguments.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,18 +1,24 @@\n error[E0594]: cannot assign to `*y`, as `y` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:2:5\n    |\n-LL | fn f(y: Box<isize>) {\n-   |      - help: consider changing this to be mutable: `mut y`\n LL |     *y = 5;\n    |     ^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn f(mut y: Box<isize>) {\n+   |      +++\n \n error[E0594]: cannot assign to `*q`, as `q` is not declared as mutable\n   --> $DIR/immut-function-arguments.rs:6:35\n    |\n LL |     let _frob = |q: Box<isize>| { *q = 2; };\n-   |                  -                ^^^^^^ cannot assign\n-   |                  |\n-   |                  help: consider changing this to be mutable: `mut q`\n+   |                                   ^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let _frob = |mut q: Box<isize>| { *q = 2; };\n+   |                  +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "774b6cf0ea6d23277ba9824bfe379c00d32b5f72", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,11 +1,13 @@\n error[E0594]: cannot assign to `t.0`, as `t` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:13:9\n    |\n-LL |         let t: Tuple = (S(0), 0);\n-   |             - help: consider changing this to be mutable: `mut t`\n-LL |         drop(t);\n LL |         t.0 = S(1);\n    |         ^^^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut t: Tuple = (S(0), 0);\n+   |             +++\n \n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:13:9\n@@ -20,20 +22,24 @@ LL |         t.0 = S(1);\n error[E0594]: cannot assign to `t.1`, as `t` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:16:9\n    |\n-LL |         let t: Tuple = (S(0), 0);\n-   |             - help: consider changing this to be mutable: `mut t`\n-...\n LL |         t.1 = 2;\n    |         ^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut t: Tuple = (S(0), 0);\n+   |             +++\n \n error[E0594]: cannot assign to `u.0`, as `u` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:24:9\n    |\n-LL |         let u: Tpair = Tpair(S(0), 0);\n-   |             - help: consider changing this to be mutable: `mut u`\n-LL |         drop(u);\n LL |         u.0 = S(1);\n    |         ^^^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut u: Tpair = Tpair(S(0), 0);\n+   |             +++\n \n error[E0382]: assign to part of moved value: `u`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:24:9\n@@ -48,20 +54,24 @@ LL |         u.0 = S(1);\n error[E0594]: cannot assign to `u.1`, as `u` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:27:9\n    |\n-LL |         let u: Tpair = Tpair(S(0), 0);\n-   |             - help: consider changing this to be mutable: `mut u`\n-...\n LL |         u.1 = 2;\n    |         ^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut u: Tpair = Tpair(S(0), 0);\n+   |             +++\n \n error[E0594]: cannot assign to `v.x`, as `v` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:35:9\n    |\n-LL |         let v: Spair = Spair { x: S(0), y: 0 };\n-   |             - help: consider changing this to be mutable: `mut v`\n-LL |         drop(v);\n LL |         v.x = S(1);\n    |         ^^^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut v: Spair = Spair { x: S(0), y: 0 };\n+   |             +++\n \n error[E0382]: assign to part of moved value: `v`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:35:9\n@@ -76,11 +86,13 @@ LL |         v.x = S(1);\n error[E0594]: cannot assign to `v.y`, as `v` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:38:9\n    |\n-LL |         let v: Spair = Spair { x: S(0), y: 0 };\n-   |             - help: consider changing this to be mutable: `mut v`\n-...\n LL |         v.y = 2;\n    |         ^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |         let mut v: Spair = Spair { x: S(0), y: 0 };\n+   |             +++\n \n error: aborting due to 9 previous errors\n "}, {"sha": "3e6ea9d25d9105660ca61aa019f0b30b06a7c940", "filename": "src/test/ui/borrowck/many-mutable-borrows.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -0,0 +1,18 @@\n+fn main() {\n+    let v = Vec::new(); //~ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+    v.push(0);\n+}"}, {"sha": "aa0cbcffd952ba77576a4f1ec90d32f54386cdd2", "filename": "src/test/ui/borrowck/many-mutable-borrows.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmany-mutable-borrows.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -0,0 +1,33 @@\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/many-mutable-borrows.rs:2:9\n+   |\n+LL |     let v = Vec::new();\n+   |         ^ not mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+LL |     v.push(0);\n+   |     --------- cannot borrow as mutable\n+   |\n+   = note: ...and 5 other attempted mutable borrows\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut v = Vec::new();\n+   |         +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "477a2aa48d5dcb42e3eab13b0ab0f5562327dab9", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -2,15 +2,14 @@\n #![crate_type = \"rlib\"]\n \n pub fn f(b: &mut i32) {\n-    //~^ NOTE the binding is already a mutable borrow\n+    //~^ ERROR cannot borrow\n+    //~| NOTE not mutable\n     //~| NOTE the binding is already a mutable borrow\n     h(&mut b);\n-    //~^ ERROR cannot borrow\n-    //~| NOTE cannot borrow as mutable\n+    //~^ NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n     g(&mut &mut b);\n-    //~^ ERROR cannot borrow\n-    //~| NOTE cannot borrow as mutable\n+    //~^ NOTE cannot borrow as mutable\n     //~| HELP try removing `&mut` here\n }\n "}, {"sha": "c6f75b1c0d022f5b7fb83d38a382a7fb4e3efc7a", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,8 +1,14 @@\n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:7:7\n+  --> $DIR/mut-borrow-of-mut-ref.rs:4:10\n    |\n+LL | pub fn f(b: &mut i32) {\n+   |          ^ not mutable\n+...\n LL |     h(&mut b);\n-   |       ^^^^^^ cannot borrow as mutable\n+   |       ------ cannot borrow as mutable\n+...\n+LL |     g(&mut &mut b);\n+   |            ------ cannot borrow as mutable\n    |\n note: the binding is already a mutable borrow\n   --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n@@ -14,32 +20,20 @@ help: try removing `&mut` here\n LL -     h(&mut b);\n LL +     h(b);\n    |\n-\n-error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:11:12\n-   |\n-LL |     g(&mut &mut b);\n-   |            ^^^^^^ cannot borrow as mutable\n-   |\n-note: the binding is already a mutable borrow\n-  --> $DIR/mut-borrow-of-mut-ref.rs:4:13\n-   |\n-LL | pub fn f(b: &mut i32) {\n-   |             ^^^^^^^^\n help: try removing `&mut` here\n    |\n LL -     g(&mut &mut b);\n LL +     g(&mut b);\n    |\n \n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:18:12\n+  --> $DIR/mut-borrow-of-mut-ref.rs:17:12\n    |\n LL |     h(&mut &mut b);\n    |            ^^^^^^ cannot borrow as mutable\n    |\n note: the binding is already a mutable borrow\n-  --> $DIR/mut-borrow-of-mut-ref.rs:17:13\n+  --> $DIR/mut-borrow-of-mut-ref.rs:16:13\n    |\n LL | pub fn g(b: &mut i32) {\n    |             ^^^^^^^^\n@@ -50,7 +44,7 @@ LL +     h(&mut b);\n    |\n \n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n-  --> $DIR/mut-borrow-of-mut-ref.rs:35:5\n+  --> $DIR/mut-borrow-of-mut-ref.rs:34:5\n    |\n LL |     f.bar();\n    |     ^^^^^^^ cannot borrow as mutable\n@@ -60,6 +54,6 @@ help: consider making the binding mutable\n LL | pub fn baz(mut f: &mut String) {\n    |            +++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "82116425f06ca478b24ae570c54fd6287b8402bb", "filename": "src/test/ui/borrowck/mutability-errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -50,9 +50,9 @@ fn ref_closure(mut x: (i32,)) {\n     });\n }\n \n-fn imm_local(x: (i32,)) {\n-    &mut x; //~ ERROR\n-    &mut x.0; //~ ERROR\n+fn imm_local(x: (i32,)) { //~ ERROR\n+    &mut x;\n+    &mut x.0;\n }\n \n fn imm_capture(x: (i32,)) {"}, {"sha": "d7c602718f1736ccf54fa451f4d2aff9e8d0f1e3", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -245,21 +245,19 @@ LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/mutability-errors.rs:54:5\n+  --> $DIR/mutability-errors.rs:53:14\n    |\n LL | fn imm_local(x: (i32,)) {\n-   |              - help: consider changing this to be mutable: `mut x`\n-LL |     &mut x;\n-   |     ^^^^^^ cannot borrow as mutable\n-\n-error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n-  --> $DIR/mutability-errors.rs:55:5\n-   |\n-LL | fn imm_local(x: (i32,)) {\n-   |              - help: consider changing this to be mutable: `mut x`\n+   |              ^ not mutable\n LL |     &mut x;\n+   |     ------ cannot borrow as mutable\n LL |     &mut x.0;\n-   |     ^^^^^^^^ cannot borrow as mutable\n+   |     -------- cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn imm_local(mut x: (i32,)) {\n+   |              +++\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:60:9\n@@ -357,7 +355,7 @@ error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n LL |     &mut X.0;\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 37 previous errors\n \n Some errors have detailed explanations: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "81e5bc45d4d38bbadc11c530131be0f0888ec90b", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -11,11 +11,13 @@ LL |     x.a = 1;\n error[E0594]: cannot assign to `x.b`, as `x` is not declared as mutable\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:13:5\n    |\n-LL |     let x: Foo;\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     x.a = 1;\n LL |     x.b = 22;\n    |     ^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x: Foo;\n+   |         +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ba0457809ad43b591c49f2227ea852dcf2344e6a", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,11 +1,13 @@\n error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n   --> $DIR/reassignment_immutable_fields_twice.rs:7:5\n    |\n-LL |     let x: (u32, u32);\n-   |         - help: consider changing this to be mutable: `mut x`\n-LL |     x = (22, 44);\n LL |     x.0 = 1;\n    |     ^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x: (u32, u32);\n+   |         +++\n \n error[E0381]: partially assigned binding `x` isn't fully initialized\n   --> $DIR/reassignment_immutable_fields_twice.rs:12:5"}, {"sha": "239f071ca92b3152f60c86e011ce4b22fc74106f", "filename": "src/test/ui/closures/issue-80313-mutable-borrow-in-closure.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-closure.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,13 +1,16 @@\n error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n   --> $DIR/issue-80313-mutable-borrow-in-closure.rs:6:5\n    |\n-LL |     let callback = || {\n-   |         -------- help: consider changing this to be mutable: `mut callback`\n LL |         &mut my_var;\n    |              ------ calling `callback` requires mutable binding due to mutable borrow of `my_var`\n LL |     };\n LL |     callback();\n    |     ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut callback = || {\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "1ec279f03eff5ff24369ea55dd03769424d0b889", "filename": "src/test/ui/closures/issue-80313-mutable-borrow-in-move-closure.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutable-borrow-in-move-closure.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,13 +1,16 @@\n error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n   --> $DIR/issue-80313-mutable-borrow-in-move-closure.rs:6:5\n    |\n-LL |     let callback = move || {\n-   |         -------- help: consider changing this to be mutable: `mut callback`\n LL |         &mut my_var;\n    |              ------ calling `callback` requires mutable binding due to possible mutation of `my_var`\n LL |     };\n LL |     callback();\n    |     ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut callback = move || {\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "22a62ce735053f2596b6ea0860e0b8f2a56792ae", "filename": "src/test/ui/closures/issue-80313-mutation-in-closure.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-closure.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,13 +1,16 @@\n error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n   --> $DIR/issue-80313-mutation-in-closure.rs:6:5\n    |\n-LL |     let callback = || {\n-   |         -------- help: consider changing this to be mutable: `mut callback`\n LL |         my_var = true;\n    |         ------ calling `callback` requires mutable binding due to mutable borrow of `my_var`\n LL |     };\n LL |     callback();\n    |     ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut callback = || {\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "a2222f8cc9570bd21d1afa21cdcee4f15e926af6", "filename": "src/test/ui/closures/issue-80313-mutation-in-move-closure.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-80313-mutation-in-move-closure.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,13 +1,16 @@\n error[E0596]: cannot borrow `callback` as mutable, as it is not declared as mutable\n   --> $DIR/issue-80313-mutation-in-move-closure.rs:6:5\n    |\n-LL |     let callback = move || {\n-   |         -------- help: consider changing this to be mutable: `mut callback`\n LL |         my_var = true;\n    |         ------ calling `callback` requires mutable binding due to possible mutation of `my_var`\n LL |     };\n LL |     callback();\n    |     ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut callback = move || {\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "03b18c3f70c63ae59dfb5b938b2dbcf69d1fed8b", "filename": "src/test/ui/closures/issue-81700-mut-borrow.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-81700-mut-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-81700-mut-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-81700-mut-borrow.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -2,11 +2,14 @@ error[E0596]: cannot borrow `bar` as mutable, as it is not declared as mutable\n   --> $DIR/issue-81700-mut-borrow.rs:3:5\n    |\n LL |     let bar = || { foo(x); };\n-   |         ---            - calling `bar` requires mutable binding due to mutable borrow of `x`\n-   |         |\n-   |         help: consider changing this to be mutable: `mut bar`\n+   |                        - calling `bar` requires mutable binding due to mutable borrow of `x`\n LL |     bar();\n    |     ^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut bar = || { foo(x); };\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "f0951b7d10873e73ec31645f30ba598707bdacdf", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `c` as mutable, as it is not declared as mutable\n   --> $DIR/issue-82438-mut-without-upvar.rs:27:27\n    |\n-LL |     let c = |a, b, c, d| {};\n-   |         - help: consider changing this to be mutable: `mut c`\n-LL |\n LL |     A.f(participant_name, &mut c);\n    |                           ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut c = |a, b, c, d| {};\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "5335a056cd89f16042846c102149823fdd159453", "filename": "src/test/ui/closures/issue-84044-drop-non-mut.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-84044-drop-non-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fclosures%2Fissue-84044-drop-non-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-84044-drop-non-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n   --> $DIR/issue-84044-drop-non-mut.rs:5:10\n    |\n-LL |     let f = || {};\n-   |         - help: consider changing this to be mutable: `mut f`\n LL |     drop(&mut f);\n    |          ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut f = || {};\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "9f8ce3b6183f2c7f2f37e77c9308a6789085d8ff", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/huge_multispan_highlight.rs:90:13\n    |\n-LL |     let x = \"foo\";\n-   |         - help: consider changing this to be mutable: `mut x`\n-...\n LL |     let y = &mut x;\n    |             ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x = \"foo\";\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "1670da55957d073097397d628acc8f0225dea82d", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,26 +1,35 @@\n error[E0596]: cannot borrow `f.v` as mutable, as `f` is not declared as mutable\n   --> $DIR/issue-35937.rs:7:5\n    |\n-LL |     let f = Foo { v: Vec::new() };\n-   |         - help: consider changing this to be mutable: `mut f`\n LL |     f.v.push(\"cat\".to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut f = Foo { v: Vec::new() };\n+   |         +++\n \n error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:16:5\n    |\n-LL |     let s = S { x: 42 };\n-   |         - help: consider changing this to be mutable: `mut s`\n LL |     s.x += 1;\n    |     ^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut s = S { x: 42 };\n+   |         +++\n \n error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:20:5\n    |\n-LL | fn bar(s: S) {\n-   |        - help: consider changing this to be mutable: `mut s`\n LL |     s.x += 1;\n    |     ^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn bar(mut s: S) {\n+   |        +++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8dc0512a9453dbafd54f2d28c73803ba9abcee84", "filename": "src/test/ui/did_you_mean/issue-39544.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n   --> $DIR/issue-39544.rs:11:13\n    |\n-LL |     let z = Z { x: X::Y };\n-   |         - help: consider changing this to be mutable: `mut z`\n LL |     let _ = &mut z.x;\n    |             ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut z = Z { x: X::Y };\n+   |         +++\n \n error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:16:17\n@@ -97,10 +100,13 @@ LL |     fn foo4(other: &mut Z) {\n error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n   --> $DIR/issue-39544.rs:41:13\n    |\n-LL | pub fn with_arg(z: Z, w: &Z) {\n-   |                 - help: consider changing this to be mutable: `mut z`\n LL |     let _ = &mut z.x;\n    |             ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | pub fn with_arg(mut z: Z, w: &Z) {\n+   |                 +++\n \n error[E0596]: cannot borrow `w.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:42:13"}, {"sha": "3f9aebcc8aeadca8739d4114b0956d42616beb6f", "filename": "src/test/ui/error-codes/E0596.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Ferror-codes%2FE0596.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Ferror-codes%2FE0596.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0596.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/E0596.rs:3:13\n    |\n-LL |     let x = 1;\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     let y = &mut x;\n    |             ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x = 1;\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "5b753c69d5d10a419e720d44054f263f3e032558", "filename": "src/test/ui/issues/issue-36400.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fissues%2Fissue-36400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fissues%2Fissue-36400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36400.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n   --> $DIR/issue-36400.rs:5:7\n    |\n-LL |     let x = Box::new(3);\n-   |         - help: consider changing this to be mutable: `mut x`\n LL |     f(&mut *x);\n    |       ^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut x = Box::new(3);\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "cc2447b1877500969643db39e02dd8cec7dae309", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -16,10 +16,13 @@ LL | fn foo<'a>(x:fn(&u8, &u8), y: Vec<&'a u8>, z: &'a u8) {\n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n    |\n-LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-   |                        - help: consider changing this to be mutable: `mut y`\n LL |   y.push(z);\n    |   ^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn foo(x:fn(&u8, &u8), mut y: Vec<&u8>, z: &u8) {\n+   |                        +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2ba5afa808d734af4f66474b92e25d291d6f62b3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -16,10 +16,13 @@ LL | fn foo<'a>(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&'a u8>, z: &'a u8) {\n error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n    |\n-LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-   |                                  - help: consider changing this to be mutable: `mut y`\n LL |   y.push(z);\n    |   ^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , mut y: Vec<&u8>, z: &u8) {\n+   |                                  +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e57347b362dd4faaea384624031cca90310ad816", "filename": "src/test/ui/macros/span-covering-argument-1.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,15 +1,17 @@\n error[E0596]: cannot borrow `foo` as mutable, as it is not declared as mutable\n   --> $DIR/span-covering-argument-1.rs:5:14\n    |\n-LL |             let $s = 0;\n-   |                 -- help: consider changing this to be mutable: `mut foo`\n LL |             *&mut $s = 0;\n    |              ^^^^^^^ cannot borrow as mutable\n ...\n LL |     bad!(foo whatever);\n    |     ------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `bad` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider changing this to be mutable\n+   |\n+LL |             let mut $s = 0;\n+   |                 +++\n \n error: aborting due to previous error\n "}, {"sha": "8c269d1e727643e96a43a28f115014bfa30a1c00", "filename": "src/test/ui/mut/mut-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.rs?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -8,15 +8,15 @@ impl S {\n \n fn func(arg: S) {\n     //~^ HELP consider changing this to be mutable\n-    //~| SUGGESTION mut arg\n+    //~| SUGGESTION mut\n     arg.mutate();\n     //~^ ERROR cannot borrow `arg` as mutable, as it is not declared as mutable\n }\n \n fn main() {\n     let local = S;\n     //~^ HELP consider changing this to be mutable\n-    //~| SUGGESTION mut local\n+    //~| SUGGESTION mut\n     local.mutate();\n     //~^ ERROR cannot borrow `local` as mutable, as it is not declared as mutable\n }"}, {"sha": "d89c8b41304af7ed3a7d370da726771e46e954d6", "filename": "src/test/ui/mut/mut-suggestion.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,20 +1,24 @@\n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/mut-suggestion.rs:12:5\n    |\n-LL | fn func(arg: S) {\n-   |         --- help: consider changing this to be mutable: `mut arg`\n-...\n LL |     arg.mutate();\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn func(mut arg: S) {\n+   |         +++\n \n error[E0596]: cannot borrow `local` as mutable, as it is not declared as mutable\n   --> $DIR/mut-suggestion.rs:20:5\n    |\n-LL |     let local = S;\n-   |         ----- help: consider changing this to be mutable: `mut local`\n-...\n LL |     local.mutate();\n    |     ^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut local = S;\n+   |         +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1d731be8a855db5d550d23c0bbab88869abdbbc1", "filename": "src/test/ui/mut/mutable-class-fields.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-class-fields.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0594]: cannot assign to `nyan.how_hungry`, as `nyan` is not declared as mutable\n   --> $DIR/mutable-class-fields.rs:15:3\n    |\n-LL |   let nyan : Cat = cat(52, 99);\n-   |       ---- help: consider changing this to be mutable: `mut nyan`\n LL |   nyan.how_hungry = 0;\n    |   ^^^^^^^^^^^^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |   let mut nyan : Cat = cat(52, 99);\n+   |       +++\n \n error: aborting due to previous error\n "}, {"sha": "27b1f8705ff1c163840726f7b110d80e730b0012", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -30,10 +30,13 @@ LL |         (&mut self).bar();\n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:13:9\n    |\n-LL |     fn imm(self) {\n-   |            ---- help: consider changing this to be mutable: `mut self`\n LL |         (&mut self).bar();\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     fn imm(mut self) {\n+   |            +++\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:22:9"}, {"sha": "54118dc367770cc90c2a71bbcbd40c9499045594", "filename": "src/test/ui/pattern/bindings-after-at/nested-binding-modes-mut.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fnested-binding-modes-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,20 +1,24 @@\n error[E0596]: cannot borrow `not_mut` as mutable, as it is not declared as mutable\n   --> $DIR/nested-binding-modes-mut.rs:4:5\n    |\n-LL |     let mut is_mut @ not_mut = 42;\n-   |                      ------- help: consider changing this to be mutable: `mut not_mut`\n-LL |     &mut is_mut;\n LL |     &mut not_mut;\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut is_mut @ mut not_mut = 42;\n+   |                      +++\n \n error[E0596]: cannot borrow `not_mut` as mutable, as it is not declared as mutable\n   --> $DIR/nested-binding-modes-mut.rs:9:5\n    |\n-LL |     let not_mut @ mut is_mut = 42;\n-   |         ------- help: consider changing this to be mutable: `mut not_mut`\n-LL |     &mut is_mut;\n LL |     &mut not_mut;\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut not_mut @ mut is_mut = 42;\n+   |         +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "570328fc211f98b052a9ae7185d053312fb2fbcd", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:53:24\n    |\n-LL | fn deref_mut_field1(x: Own<Point>) {\n-   |                     - help: consider changing this to be mutable: `mut x`\n LL |     let __isize = &mut x.y;\n    |                        ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn deref_mut_field1(mut x: Own<Point>) {\n+   |                     +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:65:10\n@@ -30,10 +33,13 @@ LL |     use_mut(_x);\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:88:5\n    |\n-LL | fn assign_field1<'a>(x: Own<Point>) {\n-   |                      - help: consider changing this to be mutable: `mut x`\n LL |     x.y = 3;\n    |     ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn assign_field1<'a>(mut x: Own<Point>) {\n+   |                      +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:92:5\n@@ -59,10 +65,13 @@ LL |     use_mut(_p);\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:109:5\n    |\n-LL | fn deref_mut_method1(x: Own<Point>) {\n-   |                      - help: consider changing this to be mutable: `mut x`\n LL |     x.set(0, 0);\n    |     ^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn deref_mut_method1(mut x: Own<Point>) {\n+   |                      +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:121:5\n@@ -78,10 +87,13 @@ LL | fn deref_extend_mut_method1(x: &mut Own<Point>) -> &mut isize {\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:129:6\n    |\n-LL | fn assign_method1<'a>(x: Own<Point>) {\n-   |                       - help: consider changing this to be mutable: `mut x`\n LL |     *x.y_mut() = 3;\n    |      ^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn assign_method1<'a>(mut x: Own<Point>) {\n+   |                       +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:133:6"}, {"sha": "3fed7b3f4dcf3afd2da5944de1cc0278429df860", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:29:25\n    |\n-LL | fn deref_mut1(x: Own<isize>) {\n-   |               - help: consider changing this to be mutable: `mut x`\n LL |     let __isize = &mut *x;\n    |                         ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn deref_mut1(mut x: Own<isize>) {\n+   |               +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:41:11\n@@ -20,10 +23,13 @@ LL | fn deref_extend_mut1<'a>(x: &'a mut Own<isize>) -> &'a mut isize {\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:49:6\n    |\n-LL | fn assign1<'a>(x: Own<isize>) {\n-   |                - help: consider changing this to be mutable: `mut x`\n LL |     *x = 3;\n    |      ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn assign1<'a>(mut x: Own<isize>) {\n+   |                +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:53:6"}, {"sha": "b6517e0b3095dc3430306bf7aa3373d544cc234a", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -12,11 +12,13 @@ LL | fn borrowed_receiver(x: &mut dyn Foo) {\n error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n   --> $DIR/borrowck-object-mutability.rs:18:5\n    |\n-LL | fn owned_receiver(x: Box<dyn Foo>) {\n-   |                   - help: consider changing this to be mutable: `mut x`\n-LL |     x.borrowed();\n LL |     x.borrowed_mut();\n    |     ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL | fn owned_receiver(mut x: Box<dyn Foo>) {\n+   |                   +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5c93ed6d7f70f471ae74f2b826bc6279745baea6", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -12,13 +12,16 @@ LL |         tick1();\n error[E0596]: cannot borrow `tick2` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:19:5\n    |\n-LL |     let tick2 = || {\n-   |         ----- help: consider changing this to be mutable: `mut tick2`\n LL |         tick1();\n    |         ----- calling `tick2` requires mutable binding due to mutable borrow of `tick1`\n ...\n LL |     tick2();\n    |     ^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut tick2 = || {\n+   |         +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3f539c42d9b311150db5ba0f4305132cb14853c3", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-missing-mut.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-missing-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -2,11 +2,14 @@ error[E0596]: cannot borrow `tick` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-missing-mut.rs:7:5\n    |\n LL |     let tick = || counter += 1;\n-   |         ----      ------- calling `tick` requires mutable binding due to mutable borrow of `counter`\n-   |         |\n-   |         help: consider changing this to be mutable: `mut tick`\n+   |                   ------- calling `tick` requires mutable binding due to mutable borrow of `counter`\n LL |     tick();\n    |     ^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut tick = || counter += 1;\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "e3b19297b9c18d086b25f99c19d8de856bfa9986", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-move-missing-mut.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-move-missing-mut.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -2,11 +2,14 @@ error[E0596]: cannot borrow `tick` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-move-missing-mut.rs:7:5\n    |\n LL |     let tick = move || counter += 1;\n-   |         ----           ------- calling `tick` requires mutable binding due to possible mutation of `counter`\n-   |         |\n-   |         help: consider changing this to be mutable: `mut tick`\n+   |                        ------- calling `tick` requires mutable binding due to possible mutation of `counter`\n LL |     tick();\n    |     ^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut tick = move || counter += 1;\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "286267c3834abc3b5e5f3fe7ea61fb23b74ba549", "filename": "src/test/ui/writing-to-immutable-vec.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5a7ddd99f5e43116ec452777f08fddbde7f42fd/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwriting-to-immutable-vec.stderr?ref=d5a7ddd99f5e43116ec452777f08fddbde7f42fd", "patch": "@@ -1,10 +1,13 @@\n error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n   --> $DIR/writing-to-immutable-vec.rs:3:5\n    |\n-LL |     let v: Vec<isize> = vec![1, 2, 3];\n-   |         - help: consider changing this to be mutable: `mut v`\n LL |     v[1] = 4;\n    |     ^ cannot borrow as mutable\n+   |\n+help: consider changing this to be mutable\n+   |\n+LL |     let mut v: Vec<isize> = vec![1, 2, 3];\n+   |         +++\n \n error: aborting due to previous error\n "}]}