{"sha": "c0fa5e2246457df10e92c2e11c971f2f40921793", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZmE1ZTIyNDY0NTdkZjEwZTkyYzJlMTFjOTcxZjJmNDA5MjE3OTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T11:33:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-18T11:33:16Z"}, "message": "Rename the binary to rust-analyzer", "tree": {"sha": "323d890c830b14c222113fa8617070c3b1fde3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/323d890c830b14c222113fa8617070c3b1fde3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0fa5e2246457df10e92c2e11c971f2f40921793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0fa5e2246457df10e92c2e11c971f2f40921793", "html_url": "https://github.com/rust-lang/rust/commit/c0fa5e2246457df10e92c2e11c971f2f40921793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0fa5e2246457df10e92c2e11c971f2f40921793/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977", "html_url": "https://github.com/rust-lang/rust/commit/4d307ff8024c8d2d533bc3ab7aac1d63ca5c5977"}], "stats": {"total": 214, "additions": 107, "deletions": 107}, "files": [{"sha": "a697c0071ad8c7d87267286f7f29def80a116510", "filename": ".github/workflows/release.yaml", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/.github%2Fworkflows%2Frelease.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/.github%2Fworkflows%2Frelease.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yaml?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -44,29 +44,29 @@ jobs:\n           CC: clang\n         with:\n           command: build\n-          args: --package ra_lsp_server --bin ra_lsp_server --release --target x86_64-unknown-linux-musl\n+          args: --package rust-analyzer --bin rust-analyzer --release --target x86_64-unknown-linux-musl\n \n       - name: Build\n         if: matrix.os != 'ubuntu-latest'\n         uses: actions-rs/cargo@v1\n         with:\n           command: build\n-          args: --package ra_lsp_server --bin ra_lsp_server --release\n+          args: --package rust-analyzer --bin rust-analyzer --release\n \n       - name: Create distribution dir\n         run: mkdir ./dist\n \n       - name: Copy binary\n         if: matrix.os == 'ubuntu-latest'\n-        run: cp ./target/x86_64-unknown-linux-musl/release/ra_lsp_server ./dist/ra_lsp_server-linux && strip ./dist/ra_lsp_server-linux\n+        run: cp ./target/x86_64-unknown-linux-musl/release/rust-analyzer ./dist/rust-analyzer-linux && strip ./dist/rust-analyzer-linux\n \n       - name: Copy binary\n         if: matrix.os == 'macos-latest'\n-        run: cp ./target/release/ra_lsp_server ./dist/ra_lsp_server-mac\n+        run: cp ./target/release/rust-analyzer ./dist/rust-analyzer-mac\n \n       - name: Copy binary\n         if: matrix.os == 'windows-latest'\n-        run: copy ./target/release/ra_lsp_server.exe ./dist/ra_lsp_server-windows.exe\n+        run: copy ./target/release/rust-analyzer.exe ./dist/rust-analyzer-windows.exe\n \n       - name: Upload artifacts\n         uses: actions/upload-artifact@v1\n@@ -153,26 +153,26 @@ jobs:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n         with:\n           upload_url: ${{ steps.create_release.outputs.upload_url }}\n-          asset_path: ./dist/ra_lsp_server-linux\n-          asset_name: ra_lsp_server-linux\n+          asset_path: ./dist/rust-analyzer-linux\n+          asset_name: rust-analyzer-linux\n           asset_content_type: application/octet-stream\n \n       - uses: actions/upload-release-asset@v1.0.1\n         env:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n         with:\n           upload_url: ${{ steps.create_release.outputs.upload_url }}\n-          asset_path: ./dist/ra_lsp_server-mac\n-          asset_name: ra_lsp_server-mac\n+          asset_path: ./dist/rust-analyzer-mac\n+          asset_name: rust-analyzer-mac\n           asset_content_type: application/octet-stream\n \n       - uses: actions/upload-release-asset@v1.0.1\n         env:\n           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n         with:\n           upload_url: ${{ steps.create_release.outputs.upload_url }}\n-          asset_path: ./dist/ra_lsp_server-windows.exe\n-          asset_name: ra_lsp_server-windows.exe\n+          asset_path: ./dist/rust-analyzer-windows.exe\n+          asset_name: rust-analyzer-windows.exe\n           asset_content_type: application/octet-stream\n \n       - uses: actions/upload-release-asset@v1.0.1"}, {"sha": "2e5c61735f827f8938154e6abf11b3e31069b8da", "filename": ".vscode/launch.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Flaunch.json?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -45,7 +45,7 @@\n         \"<node_internals>/**/*.js\"\n       ],\n       \"env\": {\n-        \"__RA_LSP_SERVER_DEBUG\": \"${workspaceFolder}/target/debug/ra_lsp_server\"\n+        \"__RA_LSP_SERVER_DEBUG\": \"${workspaceFolder}/target/debug/rust-analyzer\"\n       }\n     },\n     {\n@@ -59,7 +59,7 @@\n       \"name\": \"Attach To Server\",\n       \"type\": \"lldb\",\n       \"request\": \"attach\",\n-      \"program\": \"${workspaceFolder}/target/debug/ra_lsp_server\",\n+      \"program\": \"${workspaceFolder}/target/debug/rust-analyzer\",\n       \"pid\": \"${command:pickMyProcess}\",\n       \"sourceLanguages\": [\n         \"rust\""}, {"sha": "4037e7cce112f85378a24a9680858f2f3bda8caa", "filename": ".vscode/tasks.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/.vscode%2Ftasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/.vscode%2Ftasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.vscode%2Ftasks.json?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -19,7 +19,7 @@\n       \"label\": \"Build Server\",\n       \"group\": \"build\",\n       \"type\": \"shell\",\n-      \"command\": \"cargo build --package ra_lsp_server\",\n+      \"command\": \"cargo build --package rust-analyzer\",\n       \"problemMatcher\": \"$rustc\"\n     },\n   ]"}, {"sha": "c10d72aa4c5610f1fcaf199c29788b7883b7f4af", "filename": "Cargo.lock", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -1094,44 +1094,6 @@ dependencies = [\n  \"unicase\",\n ]\n \n-[[package]]\n-name = \"ra_lsp_server\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"anyhow\",\n- \"crossbeam-channel\",\n- \"either\",\n- \"env_logger\",\n- \"globset\",\n- \"itertools\",\n- \"jod-thread\",\n- \"log\",\n- \"lsp-server\",\n- \"lsp-types\",\n- \"parking_lot\",\n- \"pico-args\",\n- \"ra_cargo_watch\",\n- \"ra_db\",\n- \"ra_hir\",\n- \"ra_hir_def\",\n- \"ra_hir_ty\",\n- \"ra_ide\",\n- \"ra_prof\",\n- \"ra_project_model\",\n- \"ra_syntax\",\n- \"ra_text_edit\",\n- \"ra_vfs\",\n- \"rand\",\n- \"relative-path\",\n- \"rustc-hash\",\n- \"serde\",\n- \"serde_json\",\n- \"tempfile\",\n- \"test_utils\",\n- \"threadpool\",\n- \"winapi 0.3.8\",\n-]\n-\n [[package]]\n name = \"ra_mbe\"\n version = \"0.1.0\"\n@@ -1353,6 +1315,44 @@ dependencies = [\n  \"thin-dst\",\n ]\n \n+[[package]]\n+name = \"rust-analyzer\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"anyhow\",\n+ \"crossbeam-channel\",\n+ \"either\",\n+ \"env_logger\",\n+ \"globset\",\n+ \"itertools\",\n+ \"jod-thread\",\n+ \"log\",\n+ \"lsp-server\",\n+ \"lsp-types\",\n+ \"parking_lot\",\n+ \"pico-args\",\n+ \"ra_cargo_watch\",\n+ \"ra_db\",\n+ \"ra_hir\",\n+ \"ra_hir_def\",\n+ \"ra_hir_ty\",\n+ \"ra_ide\",\n+ \"ra_prof\",\n+ \"ra_project_model\",\n+ \"ra_syntax\",\n+ \"ra_text_edit\",\n+ \"ra_vfs\",\n+ \"rand\",\n+ \"relative-path\",\n+ \"rustc-hash\",\n+ \"serde\",\n+ \"serde_json\",\n+ \"tempfile\",\n+ \"test_utils\",\n+ \"threadpool\",\n+ \"winapi 0.3.8\",\n+]\n+\n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.16\""}, {"sha": "13d81d4ae8a4b62614d9a71bb01c646ff84ab884", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -35,7 +35,7 @@ $ git clone https://github.com/rust-analyzer/rust-analyzer && cd rust-analyzer\n # install both the language server and VS Code extension\n $ cargo xtask install\n \n-# alternatively, install only the server. Binary name is `ra_lsp_server`.\n+# alternatively, install only the server. Binary name is `rust-analyzer`.\n $ cargo xtask install --server\n ```\n "}, {"sha": "1b4b472159eba9d50c13eb352860c602124e5123", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -3,7 +3,7 @@\n //! derived from this input.\n //!\n //! Note that neither this module, nor any other part of the analyzer's core do\n-//! actual IO. See `vfs` and `project_model` in the `ra_lsp_server` crate for how\n+//! actual IO. See `vfs` and `project_model` in the `rust-analyzer` crate for how\n //! actual IO is done and lowered to input.\n \n use std::{fmt, str::FromStr};"}, {"sha": "76655f572c5b1e837cf8f2147a05d213d818201c", "filename": "crates/ra_ide_db/src/feature_flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -13,7 +13,7 @@ use rustc_hash::FxHashMap;\n /// checked at compile time, to keep things simple and flexible.\n ///\n /// Also note that, at the moment, `FeatureFlags` also store features for\n-/// `ra_lsp_server`. This should be benign layering violation.\n+/// `rust-analyzer`. This should be benign layering violation.\n #[derive(Debug)]\n pub struct FeatureFlags {\n     flags: FxHashMap<String, bool>,"}, {"sha": "3dae43d2a4a4bdccf1d9247c8a3dfd7814a0f34c", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -1,6 +1,6 @@\n [package]\n edition = \"2018\"\n-name = \"ra_lsp_server\"\n+name = \"rust-analyzer\"\n version = \"0.1.0\"\n authors = [\"rust-analyzer developers\"]\n autobins = false\n@@ -9,7 +9,7 @@ autobins = false\n doctest = false\n \n [[bin]]\n-name = \"ra_lsp_server\"\n+name = \"rust-analyzer\"\n path = \"./src/bin/main.rs\"\n \n [dependencies]"}, {"sha": "5ad3963a2ef15f141e9ce0c55891d685bee867ac", "filename": "crates/ra_lsp_server/src/bin/args.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fargs.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -5,7 +5,7 @@\n \n use anyhow::{bail, Result};\n use pico_args::Arguments;\n-use ra_lsp_server::cli::{BenchWhat, Position, Verbosity};\n+use rust_analyzer::cli::{BenchWhat, Position, Verbosity};\n \n use std::{fmt::Write, path::PathBuf};\n \n@@ -74,7 +74,7 @@ impl Args {\n ra-cli-parse\n \n USAGE:\n-    ra_lsp_server parse [FLAGS]\n+    rust-analyzer parse [FLAGS]\n \n FLAGS:\n     -h, --help       Prints help inforamtion\n@@ -94,7 +94,7 @@ FLAGS:\n ra-cli-symbols\n \n USAGE:\n-    ra_lsp_server highlight [FLAGS]\n+    rust-analyzer highlight [FLAGS]\n \n FLAGS:\n     -h, --help    Prints help inforamtion\"\n@@ -113,7 +113,7 @@ FLAGS:\n ra-cli-highlight\n \n USAGE:\n-    ra_lsp_server highlight [FLAGS]\n+    rust-analyzer highlight [FLAGS]\n \n FLAGS:\n     -h, --help       Prints help information\n@@ -133,7 +133,7 @@ FLAGS:\n ra-cli-analysis-stats\n \n USAGE:\n-    ra_lsp_server analysis-stats [FLAGS] [OPTIONS] [PATH]\n+    rust-analyzer analysis-stats [FLAGS] [OPTIONS] [PATH]\n \n FLAGS:\n     -h, --help            Prints help information\n@@ -168,10 +168,10 @@ ARGS:\n                 if matches.contains([\"-h\", \"--help\"]) {\n                     eprintln!(\n                         \"\\\n-ra_lsp_server-analysis-bench\n+rust-analyzer-analysis-bench\n \n USAGE:\n-    ra_lsp_server analysis-bench [FLAGS] [OPTIONS] [PATH]\n+    rust-analyzer analysis-bench [FLAGS] [OPTIONS] [PATH]\n \n FLAGS:\n     -h, --help        Prints help information\n@@ -207,7 +207,7 @@ ARGS:\n ra-cli\n \n USAGE:\n-    ra_lsp_server <SUBCOMMAND>\n+    rust-analyzer <SUBCOMMAND>\n \n FLAGS:\n     -h, --help        Prints help information"}, {"sha": "69e709a25c8951c6b80a64db23c599c9741cad0f", "filename": "crates/ra_lsp_server/src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fbin%2Fmain.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -4,8 +4,8 @@\n mod args;\n \n use lsp_server::Connection;\n-use ra_lsp_server::{cli, from_json, show_message, Result, ServerConfig};\n use ra_prof;\n+use rust_analyzer::{cli, from_json, show_message, Result, ServerConfig};\n \n use crate::args::HelpPrinted;\n \n@@ -51,7 +51,7 @@ fn run_server() -> Result<()> {\n     log::info!(\"lifecycle: server started\");\n \n     let (connection, io_threads) = Connection::stdio();\n-    let server_capabilities = serde_json::to_value(ra_lsp_server::server_capabilities()).unwrap();\n+    let server_capabilities = serde_json::to_value(rust_analyzer::server_capabilities()).unwrap();\n \n     let initialize_params = connection.initialize(server_capabilities)?;\n     let initialize_params =\n@@ -84,7 +84,7 @@ fn run_server() -> Result<()> {\n         })\n         .unwrap_or_default();\n \n-    ra_lsp_server::main_loop(\n+    rust_analyzer::main_loop(\n         workspace_roots,\n         initialize_params.capabilities,\n         server_config,"}, {"sha": "dc16a234da45c1702dbcad4de48028e39baa5e85", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -1,4 +1,4 @@\n-//! The main loop of `ra_lsp_server` responsible for dispatching LSP\n+//! The main loop of `rust-analyzer` responsible for dispatching LSP\n //! requests/replies and notifications back to the client.\n \n mod handlers;"}, {"sha": "3af63d9cf01d75095b0e158257cc7d64a9e7be5e", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -7,7 +7,7 @@ use lsp_types::{\n     PartialResultParams, Position, Range, TextDocumentItem, TextDocumentPositionParams,\n     WorkDoneProgressParams,\n };\n-use ra_lsp_server::req::{\n+use rust_analyzer::req::{\n     CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n     Formatting, OnEnter, Runnables, RunnablesParams,\n };"}, {"sha": "5b90b32188cb27c90b4ba729295791b464443bc5", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -19,7 +19,7 @@ use serde_json::{to_string_pretty, Value};\n use tempfile::TempDir;\n use test_utils::{find_mismatch, parse_fixture};\n \n-use ra_lsp_server::{main_loop, req, ServerConfig};\n+use rust_analyzer::{main_loop, req, ServerConfig};\n \n pub struct Project<'a> {\n     fixture: &'a str,"}, {"sha": "c267bc85fab3bdd706617a93e5a167614eaa4416", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -351,13 +351,13 @@ impl Drop for Scope {\n /// 2. Build with `cpu_profiler` feature.\n /// 3. Tun the code, the *raw* output would be in the `./out.profile` file.\n /// 4. Install pprof for visualization (https://github.com/google/pprof).\n-/// 5. Use something like `pprof -svg target/release/ra_lsp_server ./out.profile` to see the results.\n+/// 5. Use something like `pprof -svg target/release/rust-analyzer ./out.profile` to see the results.\n ///\n /// For example, here's how I run profiling on NixOS:\n ///\n /// ```bash\n /// $ nix-shell -p gperftools --run \\\n-///     'cargo run --release -p ra_lsp_server -- parse < ~/projects/rustbench/parser.rs > /dev/null'\n+///     'cargo run --release -p rust-analyzer -- parse < ~/projects/rustbench/parser.rs > /dev/null'\n /// ```\n #[derive(Debug)]\n pub struct CpuProfiler {"}, {"sha": "cb72972c5d4e9ea9029baca011032a9167f37dda", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -22,7 +22,7 @@ ra_text_edit = { path = \"../ra_text_edit\" }\n ra_parser = { path = \"../ra_parser\" }\n \n # This crate transitively depends on `smol_str` via `rowan`.\n-# ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n+# ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations\n smol_str = { version = \"0.1.12\", features = [\"serde\"] }\n serde = { version = \"1\", features = [\"derive\"] }"}, {"sha": "c9601fdcc043c808b19f492731706c4d3284c3c7", "filename": "crates/ra_tt/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_tt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/crates%2Fra_tt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2FCargo.toml?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -8,6 +8,6 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-# ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n+# ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations\n smol_str = { version = \"0.1.12\", features = [\"serde\"] }"}, {"sha": "9da2eb0144a0831303975530751160865c8129f7", "filename": "docs/dev/README.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -80,25 +80,25 @@ In general, I use one of the following workflows for fixing bugs and\n implementing features.\n \n If the problem concerns only internal parts of rust-analyzer (ie, I don't need\n-to touch `ra_lsp_server` crate or typescript code), there is a unit-test for it.\n+to touch `rust-analyzer` crate or typescript code), there is a unit-test for it.\n So, I use **Rust Analyzer: Run** action in VS Code to run this single test, and\n then just do printf-driven development/debugging. As a sanity check after I'm\n done, I use `cargo xtask install --server` and **Reload Window** action in VS\n Code to sanity check that the thing works as I expect.\n \n If the problem concerns only the VS Code extension, I use **Run Extension**\n launch configuration from `launch.json`. Notably, this uses the usual\n-`ra_lsp_server` binary from `PATH`. For this it is important to have the following\n+`rust-analyzer` binary from `PATH`. For this it is important to have the following\n in `setting.json` file:\n ```json\n {\n-    \"rust-analyzer.raLspServerPath\": \"ra_lsp_server\"\n+    \"rust-analyzer.raLspServerPath\": \"rust-analyzer\"\n }\n ```\n After I am done with the fix, I use `cargo\n xtask install --client-code` to try the new extension for real.\n \n-If I need to fix something in the `ra_lsp_server` crate, I feel sad because it's\n+If I need to fix something in the `rust-analyzer` crate, I feel sad because it's\n on the boundary between the two processes, and working there is slow. I usually\n just `cargo xtask install --server` and poke changes from my live environment.\n Note that this uses `--release`, which is usually faster overall, because\n@@ -113,7 +113,7 @@ communication, and `print!` would break it.\n If I need to fix something simultaneously in the server and in the client, I\n feel even more sad. I don't have a specific workflow for this case.\n \n-Additionally, I use `cargo run --release -p ra_lsp_server -- analysis-stats\n+Additionally, I use `cargo run --release -p rust-analyzer -- analysis-stats\n path/to/some/rust/crate` to run a batch analysis. This is primarily useful for\n performance optimizations, or for bug minimization.\n \n@@ -148,7 +148,7 @@ There's also two VS Code commands which might be of interest:\n * `Rust Analyzer: Status` shows some memory-usage statistics. To take full\n   advantage of it, you need to compile rust-analyzer with jemalloc support:\n   ```\n-  $ cargo install --path crates/ra_lsp_server --force --features jemalloc\n+  $ cargo install --path crates/rust-analyzer --force --features jemalloc\n   ```\n \n   There's an alias for this: `cargo xtask install --server --jemalloc`.\n@@ -170,12 +170,12 @@ In particular, I have `export RA_PROFILE='*>10'` in my shell profile.\n To measure time for from-scratch analysis, use something like this:\n \n ```\n-$ cargo run --release -p ra_lsp_server -- analysis-stats ../chalk/\n+$ cargo run --release -p rust-analyzer -- analysis-stats ../chalk/\n ```\n \n For measuring time of incremental analysis, use either of these:\n \n ```\n-$ cargo run --release -p ra_lsp_server -- analysis-bench ../chalk/ --highlight ../chalk/chalk-engine/src/logic.rs\n-$ cargo run --release -p ra_lsp_server -- analysis-bench ../chalk/ --complete ../chalk/chalk-engine/src/logic.rs:94:0\n+$ cargo run --release -p rust-analyzer -- analysis-bench ../chalk/ --highlight ../chalk/chalk-engine/src/logic.rs\n+$ cargo run --release -p rust-analyzer -- analysis-bench ../chalk/ --complete ../chalk/chalk-engine/src/logic.rs:94:0\n ```"}, {"sha": "0343b6c81f41dbeae0b603ceaaa890bf7dd4890e", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -134,7 +134,7 @@ APIs in this crate are IDE centric: they take text offsets as input and produce\n offsets and strings as output. This works on top of rich code model powered by\n `hir`.\n \n-### `crates/ra_lsp_server`\n+### `crates/rust-analyzer`\n \n An LSP implementation which wraps `ra_ide` into a language server protocol.\n \n@@ -153,7 +153,7 @@ Rust Analyzer has three interesting [systems\n boundaries](https://www.tedinski.com/2018/04/10/making-tests-a-positive-influence-on-design.html)\n to concentrate tests on.\n \n-The outermost boundary is the `ra_lsp_server` crate, which defines an LSP\n+The outermost boundary is the `rust-analyzer` crate, which defines an LSP\n interface in terms of stdio. We do integration testing of this component, by\n feeding it with a stream of LSP requests and checking responses. These tests are\n known as \"heavy\", because they interact with Cargo and read real files from\n@@ -162,7 +162,7 @@ in a statically typed language, it's hard to make an error in the protocol\n itself if messages are themselves typed.\n \n The middle, and most important, boundary is `ra_ide`. Unlike\n-`ra_lsp_server`, which exposes API, `ide` uses Rust API and is intended to\n+`rust-analyzer`, which exposes API, `ide` uses Rust API and is intended to\n use by various tools. Typical test creates an `AnalysisHost`, calls some\n `Analysis` functions and compares the results against expectation.\n "}, {"sha": "bece6a57204445d89a44606b68e84719f19f9043", "filename": "docs/dev/debugging.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fdev%2Fdebugging.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fdev%2Fdebugging.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fdebugging.md?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -22,8 +22,8 @@ where **only** the `rust-analyzer` extension being debugged is enabled.\n \n ## Debug TypeScript VSCode extension\n \n-- `Run Extension` - runs the extension with the globally installed `ra_lsp_server` binary.\n-- `Run Extension (Dev Server)` - runs extension with the locally built LSP server (`target/debug/ra_lsp_server`).\n+- `Run Extension` - runs the extension with the globally installed `rust-analyzer` binary.\n+- `Run Extension (Dev Server)` - runs extension with the locally built LSP server (`target/debug/rust-analyzer`).\n \n TypeScript debugging is configured to watch your source edits and recompile.\n To apply changes to an already running debug process press <kbd>Ctrl+Shift+P</kbd> and run the following command in your `[Extension Development Host]`\n@@ -47,13 +47,13 @@ To apply changes to an already running debug process press <kbd>Ctrl+Shift+P</kb\n     debug = 2\n   ```\n \n-- Select `Run Extension (Dev Server)` to run your locally built `target/debug/ra_lsp_server`.\n+- Select `Run Extension (Dev Server)` to run your locally built `target/debug/rust-analyzer`.\n \n - In the original VSCode window once again select the `Attach To Server` debug configuration.\n \n-- A list of running processes should appear. Select the `ra_lsp_server` from this repo.\n+- A list of running processes should appear. Select the `rust-analyzer` from this repo.\n \n-- Navigate to `crates/ra_lsp_server/src/main_loop.rs` and add a breakpoint to the `on_task` function.\n+- Navigate to `crates/rust-analyzer/src/main_loop.rs` and add a breakpoint to the `on_task` function.\n \n - Go back to the `[Extension Development Host]` instance and hover over a Rust variable and your breakpoint should hit.\n \n@@ -64,15 +64,15 @@ To apply changes to an already running debug process press <kbd>Ctrl+Shift+P</kb\n \n ## Troubleshooting\n \n-### Can't find the `ra_lsp_server` process\n+### Can't find the `rust-analyzer` process\n \n It could be a case of just jumping the gun.\n \n-The `ra_lsp_server` is only started once the `onLanguage:rust` activation.\n+The `rust-analyzer` is only started once the `onLanguage:rust` activation.\n \n Make sure you open a rust file in the `[Extension Development Host]` and try again.\n \n-### Can't connect to `ra_lsp_server`\n+### Can't connect to `rust-analyzer`\n \n Make sure you have run `echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope`.\n "}, {"sha": "aa1994b4929735c3a9183e6c407a07d6efc31306", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -64,14 +64,14 @@ To make VS Code use the freshly build server, add this to the settings:\n \n [source,json]\n ----\n-{ \"rust-analyzer.raLspServerPath\": \"ra_lsp_server\" }\n+{ \"rust-analyzer.raLspServerPath\": \"rust-analyzer\" }\n ----\n \n Note that installing via `xtask install` does not work for VS Code Remote, instead you'll need to install the `.vsix` manually.\n \n === Language Server Binary\n \n-Other editors generally require `ra_lsp_server` binary to be in `$PATH`.\n+Other editors generally require `rust-analyzer` binary to be in `$PATH`.\n You can download pre-build binary from\n https://github.com/rust-analyzer/rust-analyzer/releases[releases]\n page, or you can install it from source using the following command:\n@@ -117,7 +117,7 @@ The are several LSP client implementations for vim:\n [source,vim]\n ----\n let g:LanguageClient_serverCommands = {\n-\\ 'rust': ['ra_lsp_server'],\n+\\ 'rust': ['rust-analyzer'],\n \\ }\n ----\n \n@@ -142,7 +142,7 @@ Installation:\n [source,json]\n ----\n \"rust-analyzer\": {\n-    \"command\": [\"ra_lsp_server\"],\n+    \"command\": [\"rust-analyzer\"],\n     \"languageId\": \"rust\",\n     \"scopes\": [\"source.rust\"],\n     \"syntaxes\": ["}, {"sha": "2a03043763ccbe55e18167aab6c2d07e24ce8e95", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -185,7 +185,7 @@\n                         \"string\"\n                     ],\n                     \"default\": null,\n-                    \"description\": \"Path to ra_lsp_server executable (points to bundled binary by default)\"\n+                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default)\"\n                 },\n                 \"rust-analyzer.excludeGlobs\": {\n                     \"type\": \"array\",\n@@ -245,7 +245,7 @@\n                         \"Full log\"\n                     ],\n                     \"default\": \"off\",\n-                    \"description\": \"Trace requests to the ra_lsp_server\"\n+                    \"description\": \"Trace requests to the rust-analyzer\"\n                 },\n                 \"rust-analyzer.lruCapacity\": {\n                     \"type\": ["}, {"sha": "7142f72af287301aa4875aef3820ad9c6d023a73", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -76,7 +76,7 @@ export class Config {\n     }\n \n     /**\n-     * Name of the binary artifact for `ra_lsp_server` that is published for\n+     * Name of the binary artifact for `rust-analyzer` that is published for\n      * `platform` on GitHub releases. (It is also stored under the same name when\n      * downloaded by the extension).\n      */\n@@ -91,12 +91,12 @@ export class Config {\n                     case \"arm\":\n                     case \"arm64\": return null;\n \n-                    default: return \"ra_lsp_server-linux\";\n+                    default: return \"rust-analyzer-linux\";\n                 }\n             }\n \n-            case \"darwin\": return \"ra_lsp_server-mac\";\n-            case \"win32\": return \"ra_lsp_server-windows.exe\";\n+            case \"darwin\": return \"rust-analyzer-mac\";\n+            case \"win32\": return \"rust-analyzer-windows.exe\";\n \n             // Users on these platforms yet need to manually build from sources\n             case \"aix\":"}, {"sha": "247a2bca48fd7598f3eed0571203dabd849ae2ae", "filename": "xtask/src/install.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0fa5e2246457df10e92c2e11c971f2f40921793/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0fa5e2246457df10e92c2e11c971f2f40921793/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=c0fa5e2246457df10e92c2e11c971f2f40921793", "patch": "@@ -39,7 +39,7 @@ impl InstallCmd {\n                 \"\n     Installation complete.\n \n-    Add `\\\"rust-analyzer.raLspServerPath\\\": \\\"ra_lsp_server\\\",` to VS Code settings,\n+    Add `\\\"rust-analyzer.raLspServerPath\\\": \\\"rust-analyzer\\\",` to VS Code settings,\n     otherwise it will use the latest release from GitHub.\n \"\n             )\n@@ -142,7 +142,7 @@ fn install_server(opts: ServerOpt) -> Result<()> {\n     }\n \n     let jemalloc = if opts.jemalloc { \"--features jemalloc\" } else { \"\" };\n-    let res = run!(\"cargo install --path crates/ra_lsp_server --locked --force {}\", jemalloc);\n+    let res = run!(\"cargo install --path crates/rust-analyzer --locked --force {}\", jemalloc);\n \n     if res.is_err() && old_rust {\n         eprintln!("}]}