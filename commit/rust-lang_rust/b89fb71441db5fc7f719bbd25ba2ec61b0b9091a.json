{"sha": "b89fb71441db5fc7f719bbd25ba2ec61b0b9091a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OWZiNzE0NDFkYjVmYzdmNzE5YmJkMjViYTJlYzYxYjBiOTA5MWE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-26T15:43:49Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-03-28T11:17:12Z"}, "message": "Clarify network byte order conversions for integer / IP address conversions.\n\nOpened primarily to address https://github.com/rust-lang/rust/issues/48819.", "tree": {"sha": "4efdddcb761359c81c572ec3a43d31090704fc7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4efdddcb761359c81c572ec3a43d31090704fc7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b89fb71441db5fc7f719bbd25ba2ec61b0b9091a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b89fb71441db5fc7f719bbd25ba2ec61b0b9091a", "html_url": "https://github.com/rust-lang/rust/commit/b89fb71441db5fc7f719bbd25ba2ec61b0b9091a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b89fb71441db5fc7f719bbd25ba2ec61b0b9091a/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "184156ed97a0a1256e80a17b8673749569407c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/184156ed97a0a1256e80a17b8673749569407c94", "html_url": "https://github.com/rust-lang/rust/commit/184156ed97a0a1256e80a17b8673749569407c94"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "8115f50f09b68fe28e0be381fd7effd697d498ae", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b89fb71441db5fc7f719bbd25ba2ec61b0b9091a/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b89fb71441db5fc7f719bbd25ba2ec61b0b9091a/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=b89fb71441db5fc7f719bbd25ba2ec61b0b9091a", "patch": "@@ -769,7 +769,16 @@ impl FromInner<c::in_addr> for Ipv4Addr {\n \n #[stable(feature = \"ip_u32\", since = \"1.1.0\")]\n impl From<Ipv4Addr> for u32 {\n-    /// It performs the conversion in network order (big-endian).\n+    /// Convert an `Ipv4Addr` into a host byte order `u32`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::new(13, 12, 11, 10);\n+    /// assert_eq!(0x0d0c0b0au32, u32::from(addr));\n+    /// ```\n     fn from(ip: Ipv4Addr) -> u32 {\n         let ip = ip.octets();\n         ((ip[0] as u32) << 24) + ((ip[1] as u32) << 16) + ((ip[2] as u32) << 8) + (ip[3] as u32)\n@@ -778,21 +787,48 @@ impl From<Ipv4Addr> for u32 {\n \n #[stable(feature = \"ip_u32\", since = \"1.1.0\")]\n impl From<u32> for Ipv4Addr {\n-    /// It performs the conversion in network order (big-endian).\n+    /// Convert a host byte order `u32` into an `Ipv4Addr`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::from(0x0d0c0b0au32);\n+    /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n+    /// ```\n     fn from(ip: u32) -> Ipv4Addr {\n         Ipv4Addr::new((ip >> 24) as u8, (ip >> 16) as u8, (ip >> 8) as u8, ip as u8)\n     }\n }\n \n #[stable(feature = \"from_slice_v4\", since = \"1.9.0\")]\n impl From<[u8; 4]> for Ipv4Addr {\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::Ipv4Addr;\n+    ///\n+    /// let addr = Ipv4Addr::from([13u8, 12u8, 11u8, 10u8]);\n+    /// assert_eq!(Ipv4Addr::new(13, 12, 11, 10), addr);\n+    /// ```\n     fn from(octets: [u8; 4]) -> Ipv4Addr {\n         Ipv4Addr::new(octets[0], octets[1], octets[2], octets[3])\n     }\n }\n \n #[stable(feature = \"ip_from_slice\", since = \"1.17.0\")]\n impl From<[u8; 4]> for IpAddr {\n+    /// Create an `IpAddr::V4` from a four element byte array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv4Addr};\n+    ///\n+    /// let addr = IpAddr::from([13u8, 12u8, 11u8, 10u8]);\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(13, 12, 11, 10)), addr);\n+    /// ```\n     fn from(octets: [u8; 4]) -> IpAddr {\n         IpAddr::V4(Ipv4Addr::from(octets))\n     }\n@@ -1386,13 +1422,55 @@ impl From<[u16; 8]> for Ipv6Addr {\n \n #[stable(feature = \"ip_from_slice\", since = \"1.17.0\")]\n impl From<[u8; 16]> for IpAddr {\n+    /// Create an `IpAddr::V6` from a sixteen element byte array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv6Addr};\n+    ///\n+    /// let addr = IpAddr::from([\n+    ///     25u8, 24u8, 23u8, 22u8, 21u8, 20u8, 19u8, 18u8,\n+    ///     17u8, 16u8, 15u8, 14u8, 13u8, 12u8, 11u8, 10u8,\n+    /// ]);\n+    /// assert_eq!(\n+    ///     IpAddr::V6(Ipv6Addr::new(\n+    ///         0x1918, 0x1716,\n+    ///         0x1514, 0x1312,\n+    ///         0x1110, 0x0f0e,\n+    ///         0x0d0c, 0x0b0a\n+    ///     )),\n+    ///     addr\n+    /// );\n+    /// ```\n     fn from(octets: [u8; 16]) -> IpAddr {\n         IpAddr::V6(Ipv6Addr::from(octets))\n     }\n }\n \n #[stable(feature = \"ip_from_slice\", since = \"1.17.0\")]\n impl From<[u16; 8]> for IpAddr {\n+    /// Create an `IpAddr::V6` from an eight element 16-bit array.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::net::{IpAddr, Ipv6Addr};\n+    ///\n+    /// let addr = IpAddr::from([\n+    ///     525u16, 524u16, 523u16, 522u16,\n+    ///     521u16, 520u16, 519u16, 518u16,\n+    /// ]);\n+    /// assert_eq!(\n+    ///     IpAddr::V6(Ipv6Addr::new(\n+    ///         0x20d, 0x20c,\n+    ///         0x20b, 0x20a,\n+    ///         0x209, 0x208,\n+    ///         0x207, 0x206\n+    ///     )),\n+    ///     addr\n+    /// );\n+    /// ```\n     fn from(segments: [u16; 8]) -> IpAddr {\n         IpAddr::V6(Ipv6Addr::from(segments))\n     }"}]}