{"sha": "6d736df76bb37e019728cea50a4902c23fb09e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNzM2ZGY3NmJiMzdlMDE5NzI4Y2VhNTBhNDkwMmMyM2ZiMDllMWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-10T05:19:58Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-10T05:59:20Z"}, "message": "doc tests: use the filename from the source file for doc test programs, rather than a dummy name", "tree": {"sha": "fbe6d778de90d06daf655a14c02292ec58b62e58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbe6d778de90d06daf655a14c02292ec58b62e58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d736df76bb37e019728cea50a4902c23fb09e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d736df76bb37e019728cea50a4902c23fb09e1b", "html_url": "https://github.com/rust-lang/rust/commit/6d736df76bb37e019728cea50a4902c23fb09e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d736df76bb37e019728cea50a4902c23fb09e1b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "177cbe01bee8cd7ee0929253b5cab0e8f5df0ce1", "url": "https://api.github.com/repos/rust-lang/rust/commits/177cbe01bee8cd7ee0929253b5cab0e8f5df0ce1", "html_url": "https://github.com/rust-lang/rust/commit/177cbe01bee8cd7ee0929253b5cab0e8f5df0ce1"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "4b40ee76b4bf98890326c76553ecf7391c0df5b7", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d736df76bb37e019728cea50a4902c23fb09e1b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d736df76bb37e019728cea50a4902c23fb09e1b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6d736df76bb37e019728cea50a4902c23fb09e1b", "patch": "@@ -191,8 +191,8 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     .map(|l| map_line(l).for_code())\n                     .collect::<Vec<&str>>().join(\"\\n\");\n                 let krate = krate.as_ref().map(|s| &**s);\n-                let test = test::maketest(&test, krate, false,\n-                                        &Default::default());\n+                let test = test::make_test(&test, krate, false,\n+                                           &Default::default());\n                 let channel = if test.contains(\"#![feature(\") {\n                     \"&amp;version=nightly\"\n                 } else {\n@@ -585,8 +585,8 @@ pub fn render(w: &mut fmt::Formatter,\n                         .map(|l| map_line(l).for_code())\n                         .collect::<Vec<&str>>().join(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n-                    let test = test::maketest(&test, krate, false,\n-                                              &Default::default());\n+                    let test = test::make_test(&test, krate, false,\n+                                               &Default::default());\n                     let channel = if test.contains(\"#![feature(\") {\n                         \"&amp;version=nightly\"\n                     } else {"}, {"sha": "247789726fc6c2042b01b1613f5a34549444bb36", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6d736df76bb37e019728cea50a4902c23fb09e1b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d736df76bb37e019728cea50a4902c23fb09e1b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6d736df76bb37e019728cea50a4902c23fb09e1b", "patch": "@@ -167,16 +167,16 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n     opts\n }\n \n-fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n-           externs: Externs,\n-           should_panic: bool, no_run: bool, as_test_harness: bool,\n-           compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-           maybe_sysroot: Option<PathBuf>) {\n+fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs: SearchPaths,\n+            externs: Externs,\n+            should_panic: bool, no_run: bool, as_test_harness: bool,\n+            compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n+            maybe_sysroot: Option<PathBuf>) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = maketest(test, Some(cratename), as_test_harness, opts);\n+    let test = make_test(test, Some(cratename), as_test_harness, opts);\n     let input = config::Input::Str {\n-        name: driver::anon_src(),\n+        name: filename.to_owned(),\n         input: test.to_owned(),\n     };\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n@@ -313,8 +313,11 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     }\n }\n \n-pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n-                opts: &TestOptions) -> String {\n+pub fn make_test(s: &str,\n+                 cratename: Option<&str>,\n+                 dont_insert_main: bool,\n+                 opts: &TestOptions)\n+                 -> String {\n     let (crate_attrs, everything_else) = partition_source(s);\n \n     let mut prog = String::new();\n@@ -498,18 +501,19 @@ impl Collector {\n                     rustc_driver::in_rustc_thread(move || {\n                         io::set_panic(panic);\n                         io::set_print(print);\n-                        runtest(&test,\n-                                &cratename,\n-                                cfgs,\n-                                libs,\n-                                externs,\n-                                should_panic,\n-                                no_run,\n-                                as_test_harness,\n-                                compile_fail,\n-                                error_codes,\n-                                &opts,\n-                                maybe_sysroot)\n+                        run_test(&test,\n+                                 &cratename,\n+                                 &filename,\n+                                 cfgs,\n+                                 libs,\n+                                 externs,\n+                                 should_panic,\n+                                 no_run,\n+                                 as_test_harness,\n+                                 compile_fail,\n+                                 error_codes,\n+                                 &opts,\n+                                 maybe_sysroot)\n                     })\n                 } {\n                     Ok(()) => (),"}, {"sha": "6ac341d8b02249e8a21aceccc37701b48e57b8c8", "filename": "src/test/rustdoc/issue-43153.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d736df76bb37e019728cea50a4902c23fb09e1b/src%2Ftest%2Frustdoc%2Fissue-43153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d736df76bb37e019728cea50a4902c23fb09e1b/src%2Ftest%2Frustdoc%2Fissue-43153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-43153.rs?ref=6d736df76bb37e019728cea50a4902c23fb09e1b", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `include!` in a doc test searches relative to the directory in\n+// which the test is declared.\n+\n+// compile-flags:--test\n+\n+/// ```rust\n+/// include!(\"auxiliary/empty.rs\");\n+/// fn main() {}\n+/// ```\n+pub struct Foo;"}]}