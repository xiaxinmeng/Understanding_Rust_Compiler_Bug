{"sha": "90167500cf68dd3d1e31eab4c0da44dc21493c89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMTY3NTAwY2Y2OGRkM2QxZTMxZWFiNGMwZGE0NGRjMjE0OTNjODk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-02T04:03:02Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-22T02:15:28Z"}, "message": "Move the allocation interner out of InterpretInternerInner", "tree": {"sha": "e3ba08824110769bb38d0914b7845c614bae71dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3ba08824110769bb38d0914b7845c614bae71dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90167500cf68dd3d1e31eab4c0da44dc21493c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90167500cf68dd3d1e31eab4c0da44dc21493c89", "html_url": "https://github.com/rust-lang/rust/commit/90167500cf68dd3d1e31eab4c0da44dc21493c89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90167500cf68dd3d1e31eab4c0da44dc21493c89/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aace842a08c241d5d68dae9ccf597d21ab72567c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aace842a08c241d5d68dae9ccf597d21ab72567c", "html_url": "https://github.com/rust-lang/rust/commit/aace842a08c241d5d68dae9ccf597d21ab72567c"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "4eda5ba6848d79fbe4ccff66d4d7360ad22f700d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/90167500cf68dd3d1e31eab4c0da44dc21493c89/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90167500cf68dd3d1e31eab4c0da44dc21493c89/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=90167500cf68dd3d1e31eab4c0da44dc21493c89", "patch": "@@ -32,6 +32,7 @@ use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;\n use mir::{self, Mir, interpret};\n+use mir::interpret::Allocation;\n use ty::subst::{Kind, Substs, Subst};\n use ty::ReprOptions;\n use ty::Instance;\n@@ -914,6 +915,9 @@ pub struct GlobalCtxt<'tcx> {\n \n     stability_interner: Lock<FxHashSet<&'tcx attr::Stability>>,\n \n+    /// Stores the value of constants (and deduplicates the actual memory)\n+    allocation_interner: Lock<FxHashSet<&'tcx Allocation>>,\n+\n     pub interpret_interner: InterpretInterner<'tcx>,\n \n     layout_interner: Lock<FxHashSet<&'tcx LayoutDetails>>,\n@@ -937,9 +941,6 @@ pub struct InterpretInterner<'tcx> {\n \n #[derive(Debug, Default)]\n struct InterpretInternerInner<'tcx> {\n-    /// Stores the value of constants (and deduplicates the actual memory)\n-    allocs: FxHashSet<&'tcx interpret::Allocation>,\n-\n     /// Allows obtaining function instance handles via a unique identifier\n     functions: FxHashMap<interpret::AllocId, Instance<'tcx>>,\n \n@@ -1104,9 +1105,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn intern_const_alloc(\n         self,\n-        alloc: interpret::Allocation,\n-    ) -> &'gcx interpret::Allocation {\n-        let allocs = &mut self.interpret_interner.inner.borrow_mut().allocs;\n+        alloc: Allocation,\n+    ) -> &'gcx Allocation {\n+        let allocs = &mut self.allocation_interner.borrow_mut();\n         if let Some(alloc) = allocs.get(&alloc) {\n             return alloc;\n         }\n@@ -1277,6 +1278,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data_layout,\n             layout_interner: Lock::new(FxHashSet()),\n             stability_interner: Lock::new(FxHashSet()),\n+            allocation_interner: Lock::new(FxHashSet()),\n             interpret_interner: Default::default(),\n             tx_to_llvm_workers: Lock::new(tx),\n             output_filenames: Arc::new(output_filenames.clone()),\n@@ -2007,7 +2009,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n         println!(\"Region interner: #{}\", self.interners.region.borrow().len());\n         println!(\"Stability interner: #{}\", self.stability_interner.borrow().len());\n-        println!(\"Interpret interner: #{}\", self.interpret_interner.inner.borrow().allocs.len());\n+        println!(\"Allocation interner: #{}\", self.allocation_interner.borrow().len());\n         println!(\"Layout interner: #{}\", self.layout_interner.borrow().len());\n     }\n }"}]}