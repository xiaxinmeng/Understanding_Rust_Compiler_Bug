{"sha": "10d272b2e2678544f108d6ce573333cd11c27234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZDI3MmIyZTI2Nzg1NDRmMTA4ZDZjZTU3MzMzM2NkMTFjMjcyMzQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-20T01:32:36Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-20T01:32:36Z"}, "message": "Update Clippy testcases\n\nUpdate the test `redundant_pattern_matching`: check if `is_ok` and `is_err` are suggested within const contexts.\nAlso removes the `redundant_pattern_matching_const_result` test, as it is no longer needed.", "tree": {"sha": "7119635159f78a9065eb633483781e068c6c56bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7119635159f78a9065eb633483781e068c6c56bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d272b2e2678544f108d6ce573333cd11c27234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d272b2e2678544f108d6ce573333cd11c27234", "html_url": "https://github.com/rust-lang/rust/commit/10d272b2e2678544f108d6ce573333cd11c27234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d272b2e2678544f108d6ce573333cd11c27234/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282c59820b8e1d8c76f440484b81a190c576f91b", "url": "https://api.github.com/repos/rust-lang/rust/commits/282c59820b8e1d8c76f440484b81a190c576f91b", "html_url": "https://github.com/rust-lang/rust/commit/282c59820b8e1d8c76f440484b81a190c576f91b"}], "stats": {"total": 276, "additions": 93, "deletions": 183}, "files": [{"sha": "08bfe7c78d38b10d6105a9b119ba31b30b168358", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/10d272b2e2678544f108d6ce573333cd11c27234/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/10d272b2e2678544f108d6ce573333cd11c27234/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=10d272b2e2678544f108d6ce573333cd11c27234", "patch": "@@ -77,6 +77,7 @@ fn main() {\n \n     issue5504();\n     issue5697();\n+    issue6067();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -131,31 +132,14 @@ fn issue5504() {\n // None of these should be linted because none of the suggested methods\n // are `const fn` without toggling a feature.\n const fn issue5697() {\n-    if let Ok(_) = Ok::<i32, i32>(42) {}\n-\n-    if let Err(_) = Err::<i32, i32>(42) {}\n-\n     if let Some(_) = Some(42) {}\n \n     if let None = None::<()> {}\n \n-    while let Ok(_) = Ok::<i32, i32>(10) {}\n-\n-    while let Err(_) = Ok::<i32, i32>(10) {}\n-\n     while let Some(_) = Some(42) {}\n \n     while let None = None::<()> {}\n \n-    match Ok::<i32, i32>(42) {\n-        Ok(_) => true,\n-        Err(_) => false,\n-    };\n-\n-    match Err::<i32, i32>(42) {\n-        Ok(_) => false,\n-        Err(_) => true,\n-    };\n     match Some(42) {\n         Some(_) => true,\n         None => false,\n@@ -166,3 +150,20 @@ const fn issue5697() {\n         None => true,\n     };\n }\n+\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n+    if Ok::<i32, i32>(42).is_ok() {}\n+\n+    if Err::<i32, i32>(42).is_err() {}\n+\n+    while Ok::<i32, i32>(10).is_ok() {}\n+\n+    while Ok::<i32, i32>(10).is_err() {}\n+\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Err::<i32, i32>(42).is_err();\n+}"}, {"sha": "c0660c6ac394707d41b2f4a8d66ee289e397a633", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/10d272b2e2678544f108d6ce573333cd11c27234/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d272b2e2678544f108d6ce573333cd11c27234/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=10d272b2e2678544f108d6ce573333cd11c27234", "patch": "@@ -98,6 +98,7 @@ fn main() {\n \n     issue5504();\n     issue5697();\n+    issue6067();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -152,31 +153,14 @@ fn issue5504() {\n // None of these should be linted because none of the suggested methods\n // are `const fn` without toggling a feature.\n const fn issue5697() {\n-    if let Ok(_) = Ok::<i32, i32>(42) {}\n-\n-    if let Err(_) = Err::<i32, i32>(42) {}\n-\n     if let Some(_) = Some(42) {}\n \n     if let None = None::<()> {}\n \n-    while let Ok(_) = Ok::<i32, i32>(10) {}\n-\n-    while let Err(_) = Ok::<i32, i32>(10) {}\n-\n     while let Some(_) = Some(42) {}\n \n     while let None = None::<()> {}\n \n-    match Ok::<i32, i32>(42) {\n-        Ok(_) => true,\n-        Err(_) => false,\n-    };\n-\n-    match Err::<i32, i32>(42) {\n-        Ok(_) => false,\n-        Err(_) => true,\n-    };\n     match Some(42) {\n         Some(_) => true,\n         None => false,\n@@ -187,3 +171,26 @@ const fn issue5697() {\n         None => true,\n     };\n }\n+\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+}"}, {"sha": "efd2f9903ec9cff563ef2491f60637f79572bd63", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/10d272b2e2678544f108d6ce573333cd11c27234/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d272b2e2678544f108d6ce573333cd11c27234/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=10d272b2e2678544f108d6ce573333cd11c27234", "patch": "@@ -149,52 +149,94 @@ LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:102:20\n+  --> $DIR/redundant_pattern_matching.rs:103:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:104:19\n+  --> $DIR/redundant_pattern_matching.rs:105:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:106:19\n+  --> $DIR/redundant_pattern_matching.rs:107:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:108:19\n+  --> $DIR/redundant_pattern_matching.rs:109:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:141:19\n+  --> $DIR/redundant_pattern_matching.rs:142:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:142:16\n+  --> $DIR/redundant_pattern_matching.rs:143:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:148:12\n+  --> $DIR/redundant_pattern_matching.rs:149:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:149:15\n+  --> $DIR/redundant_pattern_matching.rs:150:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n-error: aborting due to 29 previous errors\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:179:12\n+   |\n+LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:181:12\n+   |\n+LL |     if let Err(_) = Err::<i32, i32>(42) {}\n+   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:183:15\n+   |\n+LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:185:15\n+   |\n+LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:187:5\n+   |\n+LL | /     match Ok::<i32, i32>(42) {\n+LL | |         Ok(_) => true,\n+LL | |         Err(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching.rs:192:5\n+   |\n+LL | /     match Err::<i32, i32>(42) {\n+LL | |         Ok(_) => false,\n+LL | |         Err(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n+\n+error: aborting due to 35 previous errors\n "}, {"sha": "de3fe00d5fa689b81591706e9acd4693f1073053", "filename": "tests/ui/redundant_pattern_matching_const_result.fixed", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/282c59820b8e1d8c76f440484b81a190c576f91b/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/282c59820b8e1d8c76f440484b81a190c576f91b/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.fixed?ref=282c59820b8e1d8c76f440484b81a190c576f91b", "patch": "@@ -1,44 +0,0 @@\n-// run-rustfix\n-\n-#![feature(const_result)]\n-#![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::match_like_matches_macro, unused)]\n-\n-// Test that results are linted with the feature enabled.\n-\n-const fn issue_5697() {\n-    if Ok::<i32, i32>(42).is_ok() {}\n-\n-    if Err::<i32, i32>(42).is_err() {}\n-\n-    while Ok::<i32, i32>(10).is_ok() {}\n-\n-    while Ok::<i32, i32>(10).is_err() {}\n-\n-    Ok::<i32, i32>(42).is_ok();\n-\n-    Err::<i32, i32>(42).is_err();\n-\n-    // These should not be linted until `const_option` is implemented.\n-    // See https://github.com/rust-lang/rust/issues/67441\n-\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n-fn main() {}"}, {"sha": "b77969d53d92df3def12d657c545d7c62e5ee39d", "filename": "tests/ui/redundant_pattern_matching_const_result.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/282c59820b8e1d8c76f440484b81a190c576f91b/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282c59820b8e1d8c76f440484b81a190c576f91b/tests%2Fui%2Fredundant_pattern_matching_const_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.rs?ref=282c59820b8e1d8c76f440484b81a190c576f91b", "patch": "@@ -1,50 +0,0 @@\n-// run-rustfix\n-\n-#![feature(const_result)]\n-#![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::match_like_matches_macro, unused)]\n-\n-// Test that results are linted with the feature enabled.\n-\n-const fn issue_5697() {\n-    if let Ok(_) = Ok::<i32, i32>(42) {}\n-\n-    if let Err(_) = Err::<i32, i32>(42) {}\n-\n-    while let Ok(_) = Ok::<i32, i32>(10) {}\n-\n-    while let Err(_) = Ok::<i32, i32>(10) {}\n-\n-    match Ok::<i32, i32>(42) {\n-        Ok(_) => true,\n-        Err(_) => false,\n-    };\n-\n-    match Err::<i32, i32>(42) {\n-        Ok(_) => false,\n-        Err(_) => true,\n-    };\n-\n-    // These should not be linted until `const_option` is implemented.\n-    // See https://github.com/rust-lang/rust/issues/67441\n-\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n-fn main() {}"}, {"sha": "8ecd72158d33c8c86271578c4e60730199b1b9d0", "filename": "tests/ui/redundant_pattern_matching_const_result.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/282c59820b8e1d8c76f440484b81a190c576f91b/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/282c59820b8e1d8c76f440484b81a190c576f91b/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_const_result.stderr?ref=282c59820b8e1d8c76f440484b81a190c576f91b", "patch": "@@ -1,46 +0,0 @@\n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:10:12\n-   |\n-LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n-   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n-   |\n-   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n-\n-error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n-   |\n-LL |     if let Err(_) = Err::<i32, i32>(42) {}\n-   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n-\n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:14:15\n-   |\n-LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n-   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n-\n-error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n-   |\n-LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n-   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n-\n-error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:18:5\n-   |\n-LL | /     match Ok::<i32, i32>(42) {\n-LL | |         Ok(_) => true,\n-LL | |         Err(_) => false,\n-LL | |     };\n-   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n-\n-error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_const_result.rs:23:5\n-   |\n-LL | /     match Err::<i32, i32>(42) {\n-LL | |         Ok(_) => false,\n-LL | |         Err(_) => true,\n-LL | |     };\n-   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n-\n-error: aborting due to 6 previous errors\n-"}]}