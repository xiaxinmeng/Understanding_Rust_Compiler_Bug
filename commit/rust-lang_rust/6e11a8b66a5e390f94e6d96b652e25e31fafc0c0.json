{"sha": "6e11a8b66a5e390f94e6d96b652e25e31fafc0c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMTFhOGI2NmE1ZTM5MGY5NGU2ZDk2YjY1MmUyNWUzMWZhZmMwYzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-14T16:47:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-14T16:47:00Z"}, "message": "expand: Remove redundant calls to configure\n\nStarting from https://github.com/rust-lang/rust/pull/63468 cfg attributes on variants, fields, fn params etc. are processed together with other attributes (via `configure!`).", "tree": {"sha": "e418b3ed7c0c5b45e75f231a9da5f4fe90320468", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e418b3ed7c0c5b45e75f231a9da5f4fe90320468"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0", "html_url": "https://github.com/rust-lang/rust/commit/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18c94b3eddc424717bb4be14a23b8173c93cccc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/18c94b3eddc424717bb4be14a23b8173c93cccc7", "html_url": "https://github.com/rust-lang/rust/commit/18c94b3eddc424717bb4be14a23b8173c93cccc7"}], "stats": {"total": 24, "additions": 3, "deletions": 21}, "files": [{"sha": "c5d0927760b6aed29d47466426f40ce7c7a2e3f8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e11a8b66a5e390f94e6d96b652e25e31fafc0c0/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=6e11a8b66a5e390f94e6d96b652e25e31fafc0c0", "patch": "@@ -1067,8 +1067,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {\n         self.cfg.configure_expr(expr);\n         visit_clobber(expr.deref_mut(), |mut expr| {\n-            self.cfg.configure_expr_kind(&mut expr.kind);\n-\n             if let Some(attr) = self.take_first_attr(&mut expr) {\n                 // Collect the invoc regardless of whether or not attributes are permitted here\n                 // expansion will eat the attribute so it won't error later.\n@@ -1166,8 +1164,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn filter_map_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n         let expr = configure!(self, expr);\n         expr.filter_map(|mut expr| {\n-            self.cfg.configure_expr_kind(&mut expr.kind);\n-\n             if let Some(attr) = self.take_first_attr(&mut expr) {\n                 self.cfg.maybe_emit_expr_attr_err(&attr.0);\n \n@@ -1192,7 +1188,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     }\n \n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n-        self.cfg.configure_pat(pat);\n         match pat.kind {\n             PatKind::MacCall(_) => {}\n             _ => return noop_visit_pat(pat, self),\n@@ -1406,15 +1401,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         });\n     }\n \n-    fn visit_foreign_mod(&mut self, foreign_mod: &mut ast::ForeignMod) {\n-        self.cfg.configure_foreign_mod(foreign_mod);\n-        noop_visit_foreign_mod(foreign_mod, self);\n-    }\n-\n     fn flat_map_foreign_item(\n         &mut self,\n-        mut foreign_item: P<ast::ForeignItem>,\n+        foreign_item: P<ast::ForeignItem>,\n     ) -> SmallVec<[P<ast::ForeignItem>; 1]> {\n+        let mut foreign_item = configure!(self, foreign_item);\n+\n         if let Some(attr) = self.take_first_attr(&mut foreign_item) {\n             return self\n                 .collect_attr(\n@@ -1439,11 +1431,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn visit_item_kind(&mut self, item: &mut ast::ItemKind) {\n-        self.cfg.configure_item_kind(item);\n-        noop_visit_item_kind(item, self);\n-    }\n-\n     fn flat_map_generic_param(\n         &mut self,\n         param: ast::GenericParam,\n@@ -1602,11 +1589,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             *id = self.cx.resolver.next_node_id()\n         }\n     }\n-\n-    fn visit_fn_decl(&mut self, mut fn_decl: &mut P<ast::FnDecl>) {\n-        self.cfg.configure_fn_decl(&mut fn_decl);\n-        noop_visit_fn_decl(fn_decl, self);\n-    }\n }\n \n pub struct ExpansionConfig<'feat> {"}]}