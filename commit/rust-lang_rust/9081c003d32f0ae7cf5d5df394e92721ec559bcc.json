{"sha": "9081c003d32f0ae7cf5d5df394e92721ec559bcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwODFjMDAzZDMyZjBhZTdjZjVkNWRmMzk0ZTkyNzIxZWM1NTliY2M=", "commit": {"author": {"name": "Mathieu Border\u00e9", "email": "mathieu@Mathieus-MacBook-Pro.local", "date": "2016-10-03T18:28:44Z"}, "committer": {"name": "Mathieu Border\u00e9", "email": "mathieu@Mathieus-MacBook-Pro.local", "date": "2016-10-05T04:46:04Z"}, "message": "ICH - Add test cases for function interfaces", "tree": {"sha": "9220fd1c15c62c8b9f418df73044484607d60684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9220fd1c15c62c8b9f418df73044484607d60684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9081c003d32f0ae7cf5d5df394e92721ec559bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9081c003d32f0ae7cf5d5df394e92721ec559bcc", "html_url": "https://github.com/rust-lang/rust/commit/9081c003d32f0ae7cf5d5df394e92721ec559bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9081c003d32f0ae7cf5d5df394e92721ec559bcc/comments", "author": null, "committer": null, "parents": [{"sha": "fd065a838180aaf00cbeca46c9529a0e22747fc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd065a838180aaf00cbeca46c9529a0e22747fc1", "html_url": "https://github.com/rust-lang/rust/commit/fd065a838180aaf00cbeca46c9529a0e22747fc1"}], "stats": {"total": 382, "additions": 382, "deletions": 0}, "files": [{"sha": "50f3729f1c65273cc41a7dcd9db56beba9dff2b7", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "added", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/rust-lang/rust/blob/9081c003d32f0ae7cf5d5df394e92721ec559bcc/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9081c003d32f0ae7cf5d5df394e92721ec559bcc/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=9081c003d32f0ae7cf5d5df394e92721ec559bcc", "patch": "@@ -0,0 +1,382 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for function interfaces.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+\n+#![allow(warnings)]\n+#![feature(conservative_impl_trait)]\n+#![feature(intrinsics)]\n+#![feature(linkage)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Add Parameter ---------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn add_parameter() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_parameter(p: i32) {}\n+\n+\n+// Add Return Type -------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn add_return_type() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_return_type() -> () {}\n+\n+\n+// Change Parameter Type -------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn type_of_parameter(p: i32) {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn type_of_parameter(p: i64) {}\n+\n+\n+// Change Parameter Type Reference ---------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn type_of_parameter_ref(p: &i32) {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn type_of_parameter_ref(p: &mut i32) {}\n+\n+\n+// Change Parameter Order ------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn order_of_parameters(p1: i32, p2: i32) {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn order_of_parameters(p2: i32, p1: i32) {}\n+\n+\n+// Unsafe ----------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn make_unsafe() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+unsafe fn make_unsafe() {}\n+\n+\n+// Extern ----------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn make_extern() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern fn make_extern() {}\n+\n+\n+// Extern C Extern Rust-Intrinsic ----------------------------------------------\n+\n+#[cfg(cfail1)]\n+extern \"C\" fn make_intrinsic() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern \"rust-intrinsic\" fn make_intrinsic() {}\n+\n+\n+// Type Parameter --------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn type_parameter() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn type_parameter<T>() {}\n+\n+\n+// Lifetime Parameter ----------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn lifetime_parameter() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn lifetime_parameter<'a>() {}\n+\n+\n+// Trait Bound -----------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn trait_bound<T>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn trait_bound<T: Eq>() {}\n+\n+\n+// Builtin Bound ---------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn builtin_bound<T>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn builtin_bound<T: Send>() {}\n+\n+\n+// Lifetime Bound --------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn lifetime_bound<T>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn lifetime_bound<'a, T: 'a>() {}\n+\n+\n+// Second Trait Bound ----------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn second_trait_bound<T: Eq>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn second_trait_bound<T: Eq + Clone>() {}\n+\n+\n+// Second Builtin Bound --------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn second_builtin_bound<T: Send>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn second_builtin_bound<T: Send + Sized>() {}\n+\n+\n+// Second Lifetime Bound -------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn second_lifetime_bound<'a, T: 'a>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n+\n+\n+// Inline ----------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn inline() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[inline]\n+fn inline() {}\n+\n+\n+// Inline Never ----------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn inline_never() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[inline(never)]\n+fn inline_never() {}\n+\n+\n+// No Mangle -------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn no_mangle() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[no_mangle]\n+fn no_mangle() {}\n+\n+\n+// Linkage ---------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn linkage() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[linkage]\n+fn linkage() {}\n+\n+\n+// Return Impl Trait -----------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn return_impl_trait() -> i32 {\n+    0\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn return_impl_trait() -> impl Clone {\n+    0\n+}\n+\n+\n+// Change Return Type Indirectly -----------------------------------------------\n+\n+struct ReferencedType1;\n+struct ReferencedType2;\n+\n+mod change_return_type_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as ReturnType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as ReturnType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_return_type() -> ReturnType {\n+        ReturnType {}\n+    }\n+}\n+\n+\n+// Change Parameter Type Indirectly --------------------------------------------\n+\n+mod change_parameter_type_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as ParameterType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as ParameterType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_parameter_type(p: ParameterType) {}\n+}\n+\n+\n+// Change Trait Bound Indirectly -----------------------------------------------\n+\n+trait ReferencedTrait1 {}\n+trait ReferencedTrait2 {}\n+\n+mod change_trait_bound_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_trait_bound<T: Trait>(p: T) {}\n+}\n+\n+\n+// Change Trait Bound Indirectly In Where Clause -------------------------------\n+\n+mod change_trait_bound_indirectly_in_where_clause {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_trait_bound_where<T>(p: T) where T: Trait {}\n+}"}]}