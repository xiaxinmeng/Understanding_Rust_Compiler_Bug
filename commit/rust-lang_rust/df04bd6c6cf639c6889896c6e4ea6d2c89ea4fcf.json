{"sha": "df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMDRiZDZjNmNmNjM5YzY4ODk4OTZjNmU0ZWE2ZDJjODllYTRmY2Y=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T03:58:07Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:21:57Z"}, "message": "Revert RIMOV to compile-fail tests", "tree": {"sha": "c08e3a97baf13cb8b773f9ba49087876a6530d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08e3a97baf13cb8b773f9ba49087876a6530d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "html_url": "https://github.com/rust-lang/rust/commit/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c", "html_url": "https://github.com/rust-lang/rust/commit/3e2ed18a4cd816ea8f29cdffe2c6ef0826919a8c"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "cd85cb197781ff7a12bd87d44d88bc3f058acc46", "filename": "src/test/compile-fail/alt-vec-tail-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-vec-tail-move.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let mut a = [1, 2, 3, 4];\n+    let a = [mut 1, 2, 3, 4];\n     let _ = match a {\n         [1, 2, ..move tail] => tail,\n         _ => core::util::unreachable()"}, {"sha": "a728a64f53b656ef16839448c0c88d39d8d337bd", "filename": "src/test/compile-fail/assign-super.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fassign-super.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-super.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut x: ~[int] = ~[3];\n+    let mut x: ~[mut int] = ~[mut 3];\n     let y: ~[int] = ~[3];\n     x = y; //~ ERROR values differ in mutability\n }\n\\ No newline at end of file"}, {"sha": "21236dc4a83c5b5f1e969e3aff07ffe5e34fedbf", "filename": "src/test/compile-fail/borrowck-assign-comp-idx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-assign-comp-idx.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -11,7 +11,7 @@\n type point = { x: int, y: int };\n \n fn a() {\n-    let mut p = ~[1];\n+    let mut p = ~[mut 1];\n \n     // Create an immutable pointer into p's contents:\n     let _q: &int = &p[0]; //~ NOTE loan of mutable vec content granted here\n@@ -25,7 +25,7 @@ fn b() {\n     // here we alias the mutable vector into an imm slice and try to\n     // modify the original:\n \n-    let mut p = ~[1];\n+    let mut p = ~[mut 1];\n \n     do borrow(p) { //~ NOTE loan of mutable vec content granted here\n         p[0] = 5; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n@@ -35,7 +35,7 @@ fn b() {\n fn c() {\n     // Legal because the scope of the borrow does not include the\n     // modification:\n-    let mut p = ~[1];\n+    let mut p = ~[mut 1];\n     borrow(p, ||{});\n     p[0] = 5;\n }"}, {"sha": "1423eac4ab875bcca15e197718b0ddee4e536576", "filename": "src/test/compile-fail/borrowck-loan-vec-content.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-vec-content.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -17,13 +17,13 @@ fn takes_imm_elt(_v: &int, f: fn()) {\n }\n \n fn has_mut_vec_and_does_not_try_to_change_it() {\n-    let mut v = ~[1, 2, 3];\n+    let v = ~[mut 1, 2, 3];\n     do takes_imm_elt(&v[0]) {\n     }\n }\n \n fn has_mut_vec_but_tries_to_change_it() {\n-    let mut v = ~[1, 2, 3];\n+    let v = ~[mut 1, 2, 3];\n     do takes_imm_elt(&v[0]) { //~ NOTE loan of mutable vec content granted here\n         v[1] = 4; //~ ERROR assigning to mutable vec content prohibited due to outstanding loan\n     }\n@@ -34,7 +34,7 @@ fn takes_const_elt(_v: &const int, f: fn()) {\n }\n \n fn has_mut_vec_and_tries_to_change_it() {\n-    let mut v = ~[1, 2, 3];\n+    let v = ~[mut 1, 2, 3];\n     do takes_const_elt(&const v[0]) {\n         v[1] = 4;\n     }"}, {"sha": "51448d6061e2c9f384e61d2e117f7d3dda88cd48", "filename": "src/test/compile-fail/borrowck-mut-slice-of-imm-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-slice-of-imm-vec.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn write(v: &mut [int]) {\n+fn write(v: &[mut int]) {\n     v[0] += 1;\n }\n "}, {"sha": "88263df954b22ffd3c76f48d85b506ad49c9e3e5", "filename": "src/test/compile-fail/borrowck-mut-vec-as-imm-slice-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-vec-as-imm-slice-bad.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -14,11 +14,11 @@ fn want_slice(v: &[int]) -> int {\n     return sum;\n }\n \n-fn has_mut_vec(+v: @~[int]) -> int {\n+fn has_mut_vec(+v: @~[mut int]) -> int {\n     want_slice(*v) //~ ERROR illegal borrow unless pure\n         //~^ NOTE impure due to access to impure function\n }\n \n fn main() {\n-    assert has_mut_vec(@~[1, 2, 3]) == 6;\n+    assert has_mut_vec(@~[mut 1, 2, 3]) == 6;\n }\n\\ No newline at end of file"}, {"sha": "2684289d70f73e69f64fea76429c3e2e5af41f16", "filename": "src/test/compile-fail/issue-2548.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2548.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -33,8 +33,8 @@ fn main() {\n     {\n         let mut res = foo(x);\n \n-        let mut v = ~[];\n-        v = move ~[(move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `&static`, missing `copy`)\n+        let mut v = ~[mut];\n+        v = move ~[mut (move res)] + v; //~ ERROR instantiating a type parameter with an incompatible type (needs `copy`, got `&static`, missing `copy`)\n         assert (v.len() == 2);\n     }\n "}, {"sha": "5e1b9397247d9b85303c6ea9579bf0d2ab931540", "filename": "src/test/compile-fail/issue-2969.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2969.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -12,7 +12,7 @@\n fn main()\n {\n // See #2969 -- error message should be improved\n-   let mut x = [1, 2, 4];\n+   let mut x = [mut 1, 2, 4];\n    let v : &int = &x[2];\n    x[2] = 6;\n    assert *v == 6;"}, {"sha": "4a09e93deff3ddebae6fb06fa100f544d4be91a3", "filename": "src/test/compile-fail/issue-3243.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3243.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n-fn function() -> &mut [int] {\n-    let mut x: &static/[int] = &[1,2,3];\n+fn function() -> &[mut int] {\n+    let mut x: &static/[mut int] = &[mut 1,2,3];\n     x[0] = 12345;\n     x //~ ERROR bad\n }"}, {"sha": "ffd5ce3d10801d390594f24dc5e7f883cfa7df03", "filename": "src/test/compile-fail/lub-in-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flub-in-args.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -11,7 +11,7 @@\n fn two_args<T>(x: T, y: T) { }\n \n fn main() {\n-    let mut x: ~[int] = ~[3];\n+    let x: ~[mut int] = ~[mut 3];\n     let y: ~[int] = ~[3];\n     let a: @mut int = @mut 3;\n     let b: @int = @3;"}, {"sha": "316c832f0119e574f58001e2924f459f90086188", "filename": "src/test/compile-fail/mutable-huh-variance-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-box.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let v = @mut ~[0];\n \n     fn f(&&v: @mut ~[const int]) {\n-        *v = ~[3]\n+        *v = ~[mut 3]\n     }\n \n     f(v);"}, {"sha": "4f0c6d7a4c87d7e59fe43e02593241c1b9ae0a4a", "filename": "src/test/compile-fail/mutable-huh-variance-deep.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-deep.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -11,9 +11,9 @@\n // error-pattern: mismatched types\n \n fn main() {\n-    let mut v = ~[@mut ~mut ~[0]];\n+    let v = ~[mut @mut ~mut ~[0]];\n \n-    fn f(&&v: ~[@mut ~mut ~[const int]]) {\n+    fn f(&&v: ~[mut @mut ~mut ~[const int]]) {\n     }\n \n     f(v);"}, {"sha": "e2299597c2f58c8419aa956d86e751833fefe9f1", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -18,7 +18,7 @@ fn main() {\n \n     fn f(&&v: *mut ~[const int]) {\n         unsafe {\n-            *v = ~[3]\n+            *v = ~[mut 3]\n         }\n     }\n "}, {"sha": "1ee2bb18321c3b536f49aa6c9d287ee8aa350098", "filename": "src/test/compile-fail/mutable-huh-variance-rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-rec.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let v = {mut g: ~[0]};\n \n     fn f(&&v: {mut g: ~[const int]}) {\n-        v.g = ~[3]\n+        v.g = ~[mut 3]\n     }\n \n     f(v);"}, {"sha": "f2188911346e99fb825884cb4bf2e5bd394d87e8", "filename": "src/test/compile-fail/mutable-huh-variance-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-unique.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let v = ~mut ~[0];\n \n     fn f(&&v: ~mut ~[const int]) {\n-        *v = ~[3]\n+        *v = ~[mut 3]\n     }\n \n     f(v);"}, {"sha": "c3f4636f898b19f892886a9184b4713db9c1ea44", "filename": "src/test/compile-fail/mutable-huh-variance-vec1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec1.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -11,11 +11,11 @@\n fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n-    // and assigns a type of ~[~[const int]].\n-    let mut v: ~[~[int]] = ~[~[0]];\n+    // and assigns a type of ~[mut ~[const int]].\n+    let v: ~[mut ~[int]] = ~[mut ~[0]];\n \n-    fn f(&&v: ~[~[const int]]) {\n-        v[0] = ~[3]\n+    fn f(&&v: ~[mut ~[const int]]) {\n+        v[0] = ~[mut 3]\n     }\n \n     f(v); //~ ERROR (values differ in mutability)"}, {"sha": "aeb06324341f46eae6c6b7cfd7debb335bb0c12b", "filename": "src/test/compile-fail/mutable-huh-variance-vec2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec2.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -11,10 +11,10 @@\n fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n-    // and assigns a type of ~[~[const int]].\n-    let mut v: ~[~[int]] = ~[~[0]];\n+    // and assigns a type of ~[mut ~[const int]].\n+    let v: ~[mut ~[mut int]] = ~[mut ~[mut 0]];\n \n-    fn f(&&v: ~[~[const int]]) {\n+    fn f(&&v: ~[mut ~[const int]]) {\n         v[0] = ~[3]\n     }\n "}, {"sha": "edc66536e9bac2f271b3701c55ff324fc6dd9ee5", "filename": "src/test/compile-fail/mutable-huh-variance-vec3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec3.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -11,11 +11,11 @@\n fn main() {\n     // Note: explicit type annot is required here\n     // because otherwise the inference gets smart\n-    // and assigns a type of ~[~[const int]].\n-    let mut v: ~[~[~[int]]] = ~[~[~[0]]];\n+    // and assigns a type of ~[mut ~[const int]].\n+    let v: ~[mut ~[mut ~[int]]] = ~[mut ~[mut ~[0]]];\n \n-    fn f(&&v: ~[~[~[const int]]]) {\n-        v[0][1] = ~[3]\n+    fn f(&&v: ~[mut ~[mut ~[const int]]]) {\n+        v[0][1] = ~[mut 3]\n     }\n \n     f(v); //~ ERROR (values differ in mutability)"}, {"sha": "e0980826a2a599f2057fa387559524c238354bf2", "filename": "src/test/compile-fail/mutable-huh-variance-vec4.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-vec4.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -13,23 +13,23 @@ fn main() {\n     // Note: here we do not have any type annotations\n     // but we do express conflicting requirements:\n \n-    let mut v = ~[~[0]];\n-    let mut w = ~[~[0]];\n-    let mut x = ~[~[0]];\n+    let v = ~[mut ~[0]];\n+    let w = ~[mut ~[mut 0]];\n+    let x = ~[mut ~[mut 0]];\n \n-    fn f(&&v: ~[~[int]]) {\n+    fn f(&&v: ~[mut ~[int]]) {\n         v[0] = ~[3]\n     }\n \n     fn g(&&v: ~[const ~[const int]]) {\n     }\n \n-    fn h(&&v: ~[~[int]]) {\n-        v[0] = ~[3]\n+    fn h(&&v: ~[mut ~[mut int]]) {\n+        v[0] = ~[mut 3]\n     }\n \n-    fn i(&&v: ~[~[const int]]) {\n-        v[0] = ~[3]\n+    fn i(&&v: ~[mut ~[const int]]) {\n+        v[0] = ~[mut 3]\n     }\n \n     fn j(&&v: ~[~[const int]]) {\n@@ -48,7 +48,7 @@ fn main() {\n     j(w); //~ ERROR (values differ in mutability)\n \n     // Note that without adding f() or h() to the mix, it is valid for\n-    // x to have the type ~[~[const int]], and thus we can safely\n+    // x to have the type ~[mut ~[const int]], and thus we can safely\n     // call g() and i() but not j():\n     g(x);\n     i(x);"}, {"sha": "b8c7eb4a204bc050ec9db195845d909287fad4ef", "filename": "src/test/compile-fail/non-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fnon-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-const.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -44,7 +44,7 @@ fn main() {\n     foo({f: 3});\n     foo({mut f: 3}); //~ ERROR missing `const`\n     foo(~[1]);\n-    foo(~[1]); //~ ERROR missing `const`\n+    foo(~[mut 1]); //~ ERROR missing `const`\n     foo(~1);\n     foo(~mut 1); //~ ERROR missing `const`\n     foo(@1);"}, {"sha": "523b48f2aff7e3fb7c77a848062b92d3d50b5010", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-2.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct invariant {\n-    f: @mut [&int]\n+    f: @[mut &int]\n }\n \n fn to_same_lifetime(bi: invariant/&r) {\n@@ -25,4 +25,4 @@ fn to_longer_lifetime(bi: invariant/&r) -> invariant/&static {\n }\n \n fn main() {\n-}\n+}\n\\ No newline at end of file"}, {"sha": "0eaf40e110f10b8fb682da0bb5d0ac51acbcf73d", "filename": "src/test/compile-fail/vec-add.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf/src%2Ftest%2Fcompile-fail%2Fvec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-add.rs?ref=df04bd6c6cf639c6889896c6e4ea6d2c89ea4fcf", "patch": "@@ -14,7 +14,7 @@\n // the right hand side in all cases. We are getting compiler errors\n // about this now, so I'm xfailing the test for now. -eholk\n \n-fn add(i: ~[int], m: ~[int], c: ~[const int]) {\n+fn add(i: ~[int], m: ~[mut int], c: ~[const int]) {\n \n     // Check that:\n     //  (1) vectors of any two mutabilities can be added\n@@ -24,9 +24,9 @@ fn add(i: ~[int], m: ~[int], c: ~[const int]) {\n        m + ~[3],\n        ~[3]);\n \n-   add(i + ~[3],\n-       m + ~[3],\n-       ~[3]);\n+   add(i + ~[mut 3],\n+       m + ~[mut 3],\n+       ~[mut 3]);\n \n    add(i + i,\n        m + i,\n@@ -54,19 +54,19 @@ fn add(i: ~[int], m: ~[int], c: ~[const int]) {\n                 //~^ mismatched types\n        ~[3]);\n \n-   add(m + ~[3], //~ ERROR mismatched types\n-       m + ~[3],\n-       m + ~[3]);\n+   add(m + ~[mut 3], //~ ERROR mismatched types\n+       m + ~[mut 3],\n+       m + ~[mut 3]);\n \n-   add(i + ~[3],\n-       i + ~[3], //~ ERROR mismatched types\n-       i + ~[3]);\n+   add(i + ~[mut 3],\n+       i + ~[mut 3], //~ ERROR mismatched types\n+       i + ~[mut 3]);\n \n-   add(c + ~[3], //~ ERROR binary operation + cannot be applied\n+   add(c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n                     //~^ mismatched types\n-       c + ~[3], //~ ERROR binary operation + cannot be applied\n+       c + ~[mut 3], //~ ERROR binary operation + cannot be applied\n                     //~^ mismatched types\n-       ~[3]);\n+       ~[mut 3]);\n \n    add(m + i, //~ ERROR mismatched types\n        m + i,"}]}