{"sha": "c5dea5753fd1c1a77813b7829573025e28c214b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZGVhNTc1M2ZkMWMxYTc3ODEzYjc4Mjk1NzMwMjVlMjhjMjE0YjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-25T19:53:59Z"}, "committer": {"name": "Re\u0301my Rakic", "email": "remy.rakic@gmail.com", "date": "2019-01-27T09:52:43Z"}, "message": "break apart tests", "tree": {"sha": "aa079f6906d9d3106e01dc26239698e4fcdb318e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa079f6906d9d3106e01dc26239698e4fcdb318e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5dea5753fd1c1a77813b7829573025e28c214b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5dea5753fd1c1a77813b7829573025e28c214b5", "html_url": "https://github.com/rust-lang/rust/commit/c5dea5753fd1c1a77813b7829573025e28c214b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5dea5753fd1c1a77813b7829573025e28c214b5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5a74d40d9ceef0d27d8d60e1b867e6cbf3f6883", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a74d40d9ceef0d27d8d60e1b867e6cbf3f6883", "html_url": "https://github.com/rust-lang/rust/commit/f5a74d40d9ceef0d27d8d60e1b867e6cbf3f6883"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "fe6b69f00977dd89a2a8ec22c0dcffa19faba52c", "filename": "src/test/ui/issues/issue-57362-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5dea5753fd1c1a77813b7829573025e28c214b5/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dea5753fd1c1a77813b7829573025e28c214b5/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.rs?ref=c5dea5753fd1c1a77813b7829573025e28c214b5", "patch": "@@ -0,0 +1,23 @@\n+// Test for issue #57362, ensuring that the self ty is shown in cases of higher-ranked lifetimes\n+// conflicts: the `expected` and `found` trait refs would otherwise be printed the same, leading\n+// to confusing notes such as:\n+//  = note: expected type `Trait`\n+//             found type `Trait`\n+\n+// from issue #57362\n+trait Trait {\n+    fn f(self);\n+}\n+\n+impl<T> Trait for fn(&T) {\n+    fn f(self) {\n+        println!(\"f\");\n+    }\n+}\n+\n+fn f() {\n+    let a: fn(_) = |_: &u8| {};\n+    a.f(); //~ ERROR not general enough\n+}\n+\n+fn main() {}"}, {"sha": "d7886e5af2710d366fcf90111ca5984ff39ad215", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c5dea5753fd1c1a77813b7829573025e28c214b5/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5dea5753fd1c1a77813b7829573025e28c214b5/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=c5dea5753fd1c1a77813b7829573025e28c214b5", "previous_filename": "src/test/ui/issues/issue-57362.stderr"}, {"sha": "436a4a904576dff5fffcec53d883b1db3e7d5c7d", "filename": "src/test/ui/issues/issue-57362-2.rs", "status": "renamed", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5dea5753fd1c1a77813b7829573025e28c214b5/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5dea5753fd1c1a77813b7829573025e28c214b5/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-2.rs?ref=c5dea5753fd1c1a77813b7829573025e28c214b5", "patch": "@@ -4,22 +4,6 @@\n //  = note: expected type `Trait`\n //             found type `Trait`\n \n-// from issue #57362\n-trait Trait {\n-    fn f(self);\n-}\n-\n-impl<T> Trait for fn(&T) {\n-    fn f(self) {\n-        println!(\"f\");\n-    }\n-}\n-\n-fn f() {\n-    let a: fn(_) = |_: &u8| {};\n-    a.f(); //~ ERROR not general enough\n-}\n-\n // extracted from a similar issue: #57642\n trait X {\n     type G;\n@@ -38,4 +22,4 @@ fn g() {\n     let x = <fn (&())>::make_g(); //~ ERROR not general enough\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}", "previous_filename": "src/test/ui/issues/issue-57362.rs"}]}