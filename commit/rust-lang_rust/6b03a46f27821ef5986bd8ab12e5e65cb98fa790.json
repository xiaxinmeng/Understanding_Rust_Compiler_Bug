{"sha": "6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "node_id": "C_kwDOAAsO6NoAKDZiMDNhNDZmMjc4MjFlZjU5ODZiZDhhYjEyZTVlNjVjYjk4ZmE3OTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-02-24T20:42:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-24T20:42:15Z"}, "message": "Rollup merge of #94242 - compiler-errors:fat-uninhabitable-pointer, r=michaelwoerister\n\nproperly handle fat pointers to uninhabitable types\n\nCalculate the pointee metadata size by using `tcx.struct_tail_erasing_lifetimes` instead of duplicating the logic in `fat_pointer_kind`. Open to alternatively suggestions on how to fix this.\n\nFixes #94149\n\nr? ````@michaelwoerister```` since you touched this code last, I think!", "tree": {"sha": "bdf368f3b7a8449ae1a688b7e98f23cabd7dd2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf368f3b7a8449ae1a688b7e98f23cabd7dd2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiF+2nCRBK7hj4Ov3rIwAAgTsIAFpKua+oCXK2IuC9zXp6hyFW\nAbXB6+HhDHJ+cFINWnm0nuBkG6nrbg8AeWjRXIznV6Ukm8ZSZB68InZH1VLVS6Wr\npfjjjMFdPoV0Lm9dFDtfUh7ZrL5DXq6k/sp3q8KWJWWpiUxvVAUQd8seaWZ0iDnA\n16UDHG3umStyclcVcx5tSQNOosKiobgYTaQMhRdOlDZHtyF/sia+p1JI+mj0DzXV\nP3XHmuiKtXVD8EmrWEbgu/uCfCOZE0EdywA+988ZlR2J8qszquu9b9w5EcYaBJxP\nbB5fQNwCqGvHx3SPSLg3T7av1+JT+s3YX5kefl7qjxG7Z3/6P8I/tnQInHLgBzI=\n=cpjr\n-----END PGP SIGNATURE-----\n", "payload": "tree bdf368f3b7a8449ae1a688b7e98f23cabd7dd2bd\nparent 7fb55b4c3a308d09a4926d6d7dcce5c13c64eb7f\nparent c73a2f8a652134bd7bf00ca61ca65bd7adb8aec7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1645735335 +0100\ncommitter GitHub <noreply@github.com> 1645735335 +0100\n\nRollup merge of #94242 - compiler-errors:fat-uninhabitable-pointer, r=michaelwoerister\n\nproperly handle fat pointers to uninhabitable types\n\nCalculate the pointee metadata size by using `tcx.struct_tail_erasing_lifetimes` instead of duplicating the logic in `fat_pointer_kind`. Open to alternatively suggestions on how to fix this.\n\nFixes #94149\n\nr? ````@michaelwoerister```` since you touched this code last, I think!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "html_url": "https://github.com/rust-lang/rust/commit/6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb55b4c3a308d09a4926d6d7dcce5c13c64eb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb55b4c3a308d09a4926d6d7dcce5c13c64eb7f", "html_url": "https://github.com/rust-lang/rust/commit/7fb55b4c3a308d09a4926d6d7dcce5c13c64eb7f"}, {"sha": "c73a2f8a652134bd7bf00ca61ca65bd7adb8aec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73a2f8a652134bd7bf00ca61ca65bd7adb8aec7", "html_url": "https://github.com/rust-lang/rust/commit/c73a2f8a652134bd7bf00ca61ca65bd7adb8aec7"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "d515502d445a9050b55a7ab0ba396c4495f3a0eb", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "patch": "@@ -449,7 +449,10 @@ fn pointer_or_reference_metadata<'ll, 'tcx>(\n             // This is a thin pointer. Create a regular pointer type and give it the correct name.\n             debug_assert_eq!(\n                 (thin_pointer_size, thin_pointer_align),\n-                cx.size_and_align_of(ptr_type)\n+                cx.size_and_align_of(ptr_type),\n+                \"ptr_type={}, pointee_type={}\",\n+                ptr_type,\n+                pointee_type,\n             );\n \n             unsafe {"}, {"sha": "fa75463067f4766f16a6aed0f63c709252d1a986", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/utils.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs?ref=6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "patch": "@@ -4,9 +4,9 @@ use super::namespace::item_namespace;\n use super::CrateDebugContext;\n \n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::layout::LayoutOf;\n+use rustc_middle::ty::layout::{HasParamEnv, LayoutOf};\n use rustc_middle::ty::{self, DefIdTree, Ty};\n-use rustc_target::abi::Variants;\n+use tracing::trace;\n \n use crate::common::CodegenCx;\n use crate::llvm;\n@@ -63,38 +63,37 @@ pub(crate) fn fat_pointer_kind<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     pointee_ty: Ty<'tcx>,\n ) -> Option<FatPtrKind> {\n-    let layout = cx.layout_of(pointee_ty);\n+    let pointee_tail_ty = cx.tcx.struct_tail_erasing_lifetimes(pointee_ty, cx.param_env());\n+    let layout = cx.layout_of(pointee_tail_ty);\n+    trace!(\n+        \"fat_pointer_kind: {:?} has layout {:?} (is_unsized? {})\",\n+        pointee_tail_ty,\n+        layout,\n+        layout.is_unsized()\n+    );\n \n     if !layout.is_unsized() {\n         return None;\n     }\n \n-    match *pointee_ty.kind() {\n+    match *pointee_tail_ty.kind() {\n         ty::Str | ty::Slice(_) => Some(FatPtrKind::Slice),\n         ty::Dynamic(..) => Some(FatPtrKind::Dyn),\n-        ty::Adt(..) | ty::Tuple(..) if matches!(layout.variants, Variants::Single { .. }) => {\n-            let last_field_index = layout.fields.count() - 1;\n-            debug_assert!(\n-                (0..last_field_index)\n-                    .all(|field_index| { !layout.field(cx, field_index).is_unsized() })\n-            );\n-\n-            let unsized_field = layout.field(cx, last_field_index);\n-            debug_assert!(unsized_field.is_unsized());\n-            fat_pointer_kind(cx, unsized_field.ty)\n-        }\n         ty::Foreign(_) => {\n             // Assert that pointers to foreign types really are thin:\n             debug_assert_eq!(\n-                cx.size_of(cx.tcx.mk_imm_ptr(pointee_ty)),\n+                cx.size_of(cx.tcx.mk_imm_ptr(pointee_tail_ty)),\n                 cx.size_of(cx.tcx.mk_imm_ptr(cx.tcx.types.u8))\n             );\n             None\n         }\n         _ => {\n             // For all other pointee types we should already have returned None\n             // at the beginning of the function.\n-            panic!(\"fat_pointer_kind() - Encountered unexpected `pointee_ty`: {:?}\", pointee_ty)\n+            panic!(\n+                \"fat_pointer_kind() - Encountered unexpected `pointee_tail_ty`: {:?}\",\n+                pointee_tail_ty\n+            )\n         }\n     }\n }"}, {"sha": "043011b3316a7c195f3e8817df0de3fc73f8e45a", "filename": "src/test/ui/debuginfo/debuginfo-emit-llvm-ir-and-split-debuginfo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo-emit-llvm-ir-and-split-debuginfo.rs?ref=6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "previous_filename": "src/test/ui/debuginfo-emit-llvm-ir-and-split-debuginfo.rs"}, {"sha": "833a4726acb0fb20a6e375448b08054ca62b553f", "filename": "src/test/ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo_with_uninhabitable_field_and_unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b03a46f27821ef5986bd8ab12e5e65cb98fa790/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo_with_uninhabitable_field_and_unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fdebuginfo_with_uninhabitable_field_and_unsized.rs?ref=6b03a46f27821ef5986bd8ab12e5e65cb98fa790", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+// compile-flags: -Cdebuginfo=2\n+// fixes issue #94149\n+\n+#![allow(dead_code)]\n+\n+pub fn main() {\n+    let _ = Foo::<dyn FooTrait>::new();\n+}\n+\n+pub struct Foo<T: FooTrait + ?Sized> {\n+    base: FooBase,\n+    value: T,\n+}\n+\n+impl<T: FooTrait + ?Sized> Foo<T> {\n+    pub fn new() -> Box<Foo<T>> {\n+        todo!()\n+    }\n+}\n+\n+pub trait FooTrait {}\n+\n+pub struct FooBase {\n+    cls: Bar,\n+}\n+\n+// Bar *must* be a fieldless enum\n+pub enum Bar {}"}]}