{"sha": "844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "node_id": "C_kwDOAAsO6NoAKDg0NGMwNmE3YzdjMDFjNmQwZjZmYzM2ZTM0ZWI1ZDYzMGE4ZDEzODA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T06:16:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T06:16:14Z"}, "message": "Auto merge of #8964 - tamaroning:read_zero_byte_vec, r=dswij\n\nWarn about read into zero-length `Vec`\n\nCloses #8886\n\n- \\[x] Followed [lint naming conventions][lint_naming]\n- \\[x] Added passing UI tests (including committed `.stderr` file)\n- \\[x] `cargo test` passes locally\n- \\[x] Executed `cargo dev update_lints`\n- \\[x] Added lint documentation\n- \\[x] Run `cargo dev fmt`\n\nchangelog: none", "tree": {"sha": "effcaf1aad531d8fb25c3ddfe4ddc7fa2505cca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/effcaf1aad531d8fb25c3ddfe4ddc7fa2505cca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "html_url": "https://github.com/rust-lang/rust/commit/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a86c086eefd51c66c7952f2e4c4da8563a1e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/32a86c086eefd51c66c7952f2e4c4da8563a1e6f", "html_url": "https://github.com/rust-lang/rust/commit/32a86c086eefd51c66c7952f2e4c4da8563a1e6f"}, {"sha": "14478bb94b340c34d1ddc33cc0088119c9715358", "url": "https://api.github.com/repos/rust-lang/rust/commits/14478bb94b340c34d1ddc33cc0088119c9715358", "html_url": "https://github.com/rust-lang/rust/commit/14478bb94b340c34d1ddc33cc0088119c9715358"}], "stats": {"total": 299, "additions": 299, "deletions": 0}, "files": [{"sha": "6aaf12ed9324adba257cd237e71c74a162818163", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -3678,6 +3678,7 @@ Released 2018-09-13\n [`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n [`rc_clone_in_vec_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_clone_in_vec_init\n [`rc_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex\n+[`read_zero_byte_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#read_zero_byte_vec\n [`recursive_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone"}, {"sha": "8a2cfbff953ecc1859f8be30cf398bbdbaf927b4", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -271,6 +271,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n     LintId::of(ranges::REVERSED_EMPTY_RANGES),\n     LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n+    LintId::of(read_zero_byte_vec::READ_ZERO_BYTE_VEC),\n     LintId::of(redundant_clone::REDUNDANT_CLONE),\n     LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n     LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),"}, {"sha": "92a3a0aabf1cabe7f846f2acb85fadfb3caec6bd", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -55,6 +55,7 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n     LintId::of(ptr::MUT_FROM_REF),\n     LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(read_zero_byte_vec::READ_ZERO_BYTE_VEC),\n     LintId::of(regex::INVALID_REGEX),\n     LintId::of(self_assignment::SELF_ASSIGNMENT),\n     LintId::of(serde_api::SERDE_API_MISUSE),"}, {"sha": "8ad984c68b8ec4685a2227dfa0e83bc03c369f6d", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -459,6 +459,7 @@ store.register_lints(&[\n     ranges::RANGE_ZIP_WITH_LEN,\n     ranges::REVERSED_EMPTY_RANGES,\n     rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT,\n+    read_zero_byte_vec::READ_ZERO_BYTE_VEC,\n     redundant_clone::REDUNDANT_CLONE,\n     redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n     redundant_else::REDUNDANT_ELSE,"}, {"sha": "84898eae05ac419e1dc9faf1426c71d6656bffaf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -348,6 +348,7 @@ mod pub_use;\n mod question_mark;\n mod ranges;\n mod rc_clone_in_vec_init;\n+mod read_zero_byte_vec;\n mod redundant_clone;\n mod redundant_closure_call;\n mod redundant_else;\n@@ -908,6 +909,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n     store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n     store.register_late_pass(|| Box::new(as_underscore::AsUnderscore));\n+    store.register_late_pass(|| Box::new(read_zero_byte_vec::ReadZeroByteVec));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "9538a8104739ee544e516c3997f1f52884b5bfea", "filename": "clippy_lints/src/read_zero_byte_vec.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -0,0 +1,142 @@\n+use clippy_utils::{\n+    diagnostics::{span_lint, span_lint_and_sugg},\n+    higher::{get_vec_init_kind, VecInitKind},\n+    source::snippet,\n+    visitors::expr_visitor_no_bodies,\n+};\n+use hir::{intravisit::Visitor, ExprKind, Local, PatKind, PathSegment, QPath, StmtKind};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// This lint catches reads into a zero-length `Vec`.\n+    /// Especially in the case of a call to `with_capacity`, this lint warns that read\n+    /// gets the number of bytes from the `Vec`'s length, not its capacity.\n+    ///\n+    /// ### Why is this bad?\n+    /// Reading zero bytes is almost certainly not the intended behavior.\n+    ///\n+    /// ### Known problems\n+    /// In theory, a very unusual read implementation could assign some semantic meaning\n+    /// to zero-byte reads. But it seems exceptionally unlikely that code intending to do\n+    /// a zero-byte read would allocate a `Vec` for it.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::io;\n+    /// fn foo<F: io::Read>(mut f: F) {\n+    ///     let mut data = Vec::with_capacity(100);\n+    ///     f.read(&mut data).unwrap();\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::io;\n+    /// fn foo<F: io::Read>(mut f: F) {\n+    ///     let mut data = Vec::with_capacity(100);\n+    ///     data.resize(100, 0);\n+    ///     f.read(&mut data).unwrap();\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.63.0\"]\n+    pub READ_ZERO_BYTE_VEC,\n+    correctness,\n+    \"checks for reads into a zero-length `Vec`\"\n+}\n+declare_lint_pass!(ReadZeroByteVec => [READ_ZERO_BYTE_VEC]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ReadZeroByteVec {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &hir::Block<'tcx>) {\n+        for (idx, stmt) in block.stmts.iter().enumerate() {\n+            if !stmt.span.from_expansion()\n+                // matches `let v = Vec::new();`\n+                && let StmtKind::Local(local) = stmt.kind\n+                && let Local { pat, init: Some(init), .. } = local\n+                && let PatKind::Binding(_, _, ident, _) = pat.kind\n+                && let Some(vec_init_kind) = get_vec_init_kind(cx, init)\n+            {\n+                // finds use of `_.read(&mut v)`\n+                let mut read_found = false;\n+                let mut visitor = expr_visitor_no_bodies(|expr| {\n+                    if let ExprKind::MethodCall(path, [_self, arg], _) = expr.kind\n+                        && let PathSegment { ident: read_or_read_exact, .. } = *path\n+                        && matches!(read_or_read_exact.as_str(), \"read\" | \"read_exact\")\n+                        && let ExprKind::AddrOf(_, hir::Mutability::Mut, inner) = arg.kind\n+                        && let ExprKind::Path(QPath::Resolved(None, inner_path)) = inner.kind\n+                        && let [inner_seg] = inner_path.segments\n+                        && ident.name == inner_seg.ident.name\n+                    {\n+                        read_found = true;\n+                    }\n+                    !read_found\n+                });\n+\n+                let next_stmt_span;\n+                if idx == block.stmts.len() - 1 {\n+                    // case { .. stmt; expr }\n+                    if let Some(e) = block.expr {\n+                        visitor.visit_expr(e);\n+                        next_stmt_span = e.span;\n+                    } else {\n+                        return;\n+                    }\n+                } else {\n+                    // case { .. stmt; stmt; .. }\n+                    let next_stmt = &block.stmts[idx + 1];\n+                    visitor.visit_stmt(next_stmt);\n+                    next_stmt_span = next_stmt.span;\n+                }\n+                drop(visitor);\n+\n+                if read_found && !next_stmt_span.from_expansion() {\n+                    let applicability = Applicability::MaybeIncorrect;\n+                    match vec_init_kind {\n+                        VecInitKind::WithConstCapacity(len) => {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                READ_ZERO_BYTE_VEC,\n+                                next_stmt_span,\n+                                \"reading zero byte data to `Vec`\",\n+                                \"try\",\n+                                format!(\"{}.resize({}, 0); {}\",\n+                                    ident.as_str(),\n+                                    len,\n+                                    snippet(cx, next_stmt_span, \"..\")\n+                                ),\n+                                applicability,\n+                            );\n+                        }\n+                        VecInitKind::WithExprCapacity(hir_id) => {\n+                            let e = cx.tcx.hir().expect_expr(hir_id);\n+                            span_lint_and_sugg(\n+                                cx,\n+                                READ_ZERO_BYTE_VEC,\n+                                next_stmt_span,\n+                                \"reading zero byte data to `Vec`\",\n+                                \"try\",\n+                                format!(\"{}.resize({}, 0); {}\",\n+                                    ident.as_str(),\n+                                    snippet(cx, e.span, \"..\"),\n+                                    snippet(cx, next_stmt_span, \"..\")\n+                                ),\n+                                applicability,\n+                            );\n+                        }\n+                        _ => {\n+                            span_lint(\n+                                cx,\n+                                READ_ZERO_BYTE_VEC,\n+                                next_stmt_span,\n+                                \"reading zero byte data to `Vec`\",\n+                            );\n+\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "30807e0f8b92fd62b77911593a705f78525f4bea", "filename": "tests/ui/read_zero_byte_vec.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/tests%2Fui%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/tests%2Fui%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fread_zero_byte_vec.rs?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -0,0 +1,87 @@\n+#![warn(clippy::read_zero_byte_vec)]\n+#![allow(clippy::unused_io_amount)]\n+use std::fs::File;\n+use std::io;\n+use std::io::prelude::*;\n+\n+extern crate futures;\n+use futures::io::{AsyncRead, AsyncReadExt};\n+use tokio::io::{AsyncRead as TokioAsyncRead, AsyncReadExt as _, AsyncWrite as TokioAsyncWrite, AsyncWriteExt as _};\n+\n+fn test() -> io::Result<()> {\n+    let cap = 1000;\n+    let mut f = File::open(\"foo.txt\").unwrap();\n+\n+    // should lint\n+    let mut data = Vec::with_capacity(20);\n+    f.read_exact(&mut data).unwrap();\n+\n+    // should lint\n+    let mut data2 = Vec::with_capacity(cap);\n+    f.read_exact(&mut data2)?;\n+\n+    // should lint\n+    let mut data3 = Vec::new();\n+    f.read_exact(&mut data3)?;\n+\n+    // should lint\n+    let mut data4 = vec![];\n+    let _ = f.read(&mut data4)?;\n+\n+    // should lint\n+    let _ = {\n+        let mut data5 = Vec::new();\n+        f.read(&mut data5)\n+    };\n+\n+    // should lint\n+    let _ = {\n+        let mut data6: Vec<u8> = Default::default();\n+        f.read(&mut data6)\n+    };\n+\n+    // should not lint\n+    let mut buf = [0u8; 100];\n+    f.read(&mut buf)?;\n+\n+    // should not lint\n+    let mut empty = vec![];\n+    let mut data7 = vec![];\n+    f.read(&mut empty);\n+\n+    // should not lint\n+    f.read(&mut data7);\n+\n+    // should not lint\n+    let mut data8 = Vec::new();\n+    data8.resize(100, 0);\n+    f.read_exact(&mut data8)?;\n+\n+    // should not lint\n+    let mut data9 = vec![1, 2, 3];\n+    f.read_exact(&mut data9)?;\n+\n+    Ok(())\n+}\n+\n+async fn test_futures<R: AsyncRead + Unpin>(r: &mut R) {\n+    // should lint\n+    let mut data = Vec::new();\n+    r.read(&mut data).await.unwrap();\n+\n+    // should lint\n+    let mut data2 = Vec::new();\n+    r.read_exact(&mut data2).await.unwrap();\n+}\n+\n+async fn test_tokio<R: TokioAsyncRead + Unpin>(r: &mut R) {\n+    // should lint\n+    let mut data = Vec::new();\n+    r.read(&mut data).await.unwrap();\n+\n+    // should lint\n+    let mut data2 = Vec::new();\n+    r.read_exact(&mut data2).await.unwrap();\n+}\n+\n+fn main() {}"}, {"sha": "08ba9753d7c411256d45ddfb3afef91fd2dce84c", "filename": "tests/ui/read_zero_byte_vec.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/tests%2Fui%2Fread_zero_byte_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380/tests%2Fui%2Fread_zero_byte_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fread_zero_byte_vec.stderr?ref=844c06a7c7c01c6d0f6fc36e34eb5d630a8d1380", "patch": "@@ -0,0 +1,64 @@\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:17:5\n+   |\n+LL |     f.read_exact(&mut data).unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `data.resize(20, 0); f.read_exact(&mut data).unwrap();`\n+   |\n+   = note: `-D clippy::read-zero-byte-vec` implied by `-D warnings`\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:21:5\n+   |\n+LL |     f.read_exact(&mut data2)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `data2.resize(cap, 0); f.read_exact(&mut data2)?;`\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:25:5\n+   |\n+LL |     f.read_exact(&mut data3)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:29:5\n+   |\n+LL |     let _ = f.read(&mut data4)?;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:34:9\n+   |\n+LL |         f.read(&mut data5)\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:40:9\n+   |\n+LL |         f.read(&mut data6)\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:70:5\n+   |\n+LL |     r.read(&mut data).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:74:5\n+   |\n+LL |     r.read_exact(&mut data2).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:80:5\n+   |\n+LL |     r.read(&mut data).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: reading zero byte data to `Vec`\n+  --> $DIR/read_zero_byte_vec.rs:84:5\n+   |\n+LL |     r.read_exact(&mut data2).await.unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+"}]}