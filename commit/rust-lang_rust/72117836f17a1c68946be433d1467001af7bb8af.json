{"sha": "72117836f17a1c68946be433d1467001af7bb8af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTE3ODM2ZjE3YTFjNjg5NDZiZTQzM2QxNDY3MDAxYWY3YmI4YWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-12-06T02:21:34Z"}, "committer": {"name": "ggomez", "email": "ggomez@ggo.ifr.lan", "date": "2015-12-07T12:16:59Z"}, "message": "Add check on redundant _ bindings in structs", "tree": {"sha": "7dc9ceca2f02e77a0e28b3e3a3b74b3f21b6b171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dc9ceca2f02e77a0e28b3e3a3b74b3f21b6b171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72117836f17a1c68946be433d1467001af7bb8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72117836f17a1c68946be433d1467001af7bb8af", "html_url": "https://github.com/rust-lang/rust/commit/72117836f17a1c68946be433d1467001af7bb8af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72117836f17a1c68946be433d1467001af7bb8af/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b660bfa09e88f5da9f7844fb0cd9c5e986a76df3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b660bfa09e88f5da9f7844fb0cd9c5e986a76df3", "html_url": "https://github.com/rust-lang/rust/commit/b660bfa09e88f5da9f7844fb0cd9c5e986a76df3"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "af4c3e80437cf98ad84db4e99d8b8c8283585be6", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 81 lints included in this crate:\n+There are 82 lints included in this crate:\n \n name                                                                                                     | default | meaning\n ---------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -81,6 +81,7 @@ name\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                       | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                     | warn    | comparing unit values (which is always `true` or `false`, respectively)\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)         | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n+[unneeded_binding](https://github.com/Manishearth/rust-clippy/wiki#unneeded_binding)                     | warn    | Type fields are bound when not necessary\n [unstable_as_mut_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice)           | warn    | as_mut_slice is not stable and can be replaced by &mut v[..]see https://github.com/rust-lang/rust/issues/27729\n [unstable_as_slice](https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice)                   | warn    | as_slice is not stable and can be replaced by & v[..]see https://github.com/rust-lang/rust/issues/27729\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                         | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop"}, {"sha": "abb3f0425df0dd0798e695e2c9dcbfb146ccfc36", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -65,6 +65,7 @@ pub mod temporary_assignment;\n pub mod transmute;\n pub mod cyclomatic_complexity;\n pub mod escape;\n+pub mod misc_early;\n \n mod reexport {\n     pub use syntax::ast::{Name, Ident, NodeId};\n@@ -118,6 +119,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box transmute::UselessTransmute);\n     reg.register_late_lint_pass(box cyclomatic_complexity::CyclomaticComplexity::new(25));\n     reg.register_late_lint_pass(box escape::EscapePass);\n+    reg.register_early_lint_pass(box misc_early::MiscEarly);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -181,6 +183,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::MODULO_ONE,\n         misc::REDUNDANT_PATTERN,\n         misc::TOPLEVEL_REF_ARG,\n+        misc_early::UNNEEDED_BINDING,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n         needless_bool::NEEDLESS_BOOL,"}, {"sha": "5bec753d3ebd36cd5f7f527f965bb897df012872", "filename": "src/misc_early.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -0,0 +1,48 @@\n+//use rustc_front::hir::*;\n+\n+use rustc::lint::*;\n+\n+use syntax::ast::*;\n+\n+use utils::span_lint;\n+\n+declare_lint!(pub UNNEEDED_BINDING, Warn,\n+              \"Type fields are bound when not necessary\");\n+\n+#[derive(Copy, Clone)]\n+pub struct MiscEarly;\n+\n+impl LintPass for MiscEarly {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNNEEDED_BINDING)\n+    }\n+}\n+\n+impl EarlyLintPass for MiscEarly {\n+    fn check_pat(&mut self, cx: &EarlyContext, pat: &Pat) {\n+        if let PatStruct(_, ref pfields, _) = pat.node {\n+            let mut wilds = 0;\n+\n+            for field in pfields {\n+                if field.node.pat.node == PatWild {\n+                    wilds += 1;\n+                }\n+            }\n+            if !pfields.is_empty() && wilds == pfields.len() {\n+                span_lint(cx, UNNEEDED_BINDING, pat.span,\n+                          \"All the struct fields are matched to a wildcard pattern, \\\n+                           consider using `..`.\");\n+                return;\n+            }\n+            if wilds > 0 {\n+                for field in pfields {\n+                    if field.node.pat.node == PatWild {\n+                        span_lint(cx, UNNEEDED_BINDING, field.span,\n+                                  \"You matched a field with a wildcard pattern. \\\n+                                   Consider using `..` instead\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "06f76479c590f310586a0f810680d3196308cbfa", "filename": "src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -41,7 +41,7 @@ fn check_expr_mut(cx: &LateContext, expr: &Expr) {\n     unwrap_addr(expr).map_or((), |e| {\n         unwrap_addr(e).map_or_else(\n             || {\n-                if let TyRef(_, TypeAndMut{ty: _, mutbl: MutMutable}) =\n+                if let TyRef(_, TypeAndMut{mutbl: MutMutable, ..}) =\n                     cx.tcx.expr_ty(e).sty {\n                         span_lint(cx, MUT_MUT, expr.span,\n                                   \"this expression mutably borrows a mutable reference. \\"}, {"sha": "8e089378929a7717c6987339ab27d0fadca5e24a", "filename": "src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -58,8 +58,8 @@ fn check_arguments(cx: &LateContext, arguments: &[P<Expr>], type_definition: &Ty\n         let parameters = &fn_type.sig.skip_binder().inputs;\n         for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n             match parameter.sty {\n-                TypeVariants::TyRef(_, TypeAndMut {ty: _, mutbl: MutImmutable}) |\n-                TypeVariants::TyRawPtr(TypeAndMut {ty: _, mutbl: MutImmutable}) => {\n+                TypeVariants::TyRef(_, TypeAndMut {mutbl: MutImmutable, ..}) |\n+                TypeVariants::TyRawPtr(TypeAndMut {mutbl: MutImmutable, ..}) => {\n                     if let ExprAddrOf(MutMutable, _) = argument.node {\n                         span_lint(cx, UNNECESSARY_MUT_PASSED, \n                                   argument.span, &format!(\"The function/method \\\"{}\\\" \\"}, {"sha": "dd375d58a6016fefc8a996148621eb33a79b4fb6", "filename": "src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -58,7 +58,7 @@ fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<(OpenOp\n             \n             let argument_option = match arguments[1].node {\n                 ExprLit(ref span) => {\n-                    if let Spanned {node: LitBool(lit), span: _} = **span {\n+                    if let Spanned {node: LitBool(lit), ..} = **span {\n                         if lit {Argument::True} else {Argument::False}\n                     } else {\n                         return; // The function is called with a literal"}, {"sha": "60197fcf9df539f8f3942435949a4d9f15b65457", "filename": "src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -62,7 +62,7 @@ fn check_decl(cx: &LateContext, decl: &Decl, bindings: &mut Vec<(Name, Span)>) {\n     if in_external_macro(cx, decl.span) { return; }\n     if is_from_for_desugar(decl) { return; }\n     if let DeclLocal(ref local) = decl.node {\n-        let Local{ ref pat, ref ty, ref init, id: _, span, attrs: _ } = **local;\n+        let Local{ ref pat, ref ty, ref init, span, .. } = **local;\n         if let Some(ref t) = *ty { check_ty(cx, t, bindings) }\n         if let Some(ref o) = *init {\n             check_expr(cx, o, bindings);"}, {"sha": "a602902d45fd910428be310c5241dbd9eac7dee1", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72117836f17a1c68946be433d1467001af7bb8af/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72117836f17a1c68946be433d1467001af7bb8af/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=72117836f17a1c68946be433d1467001af7bb8af", "patch": "@@ -167,8 +167,8 @@ pub fn get_item_name(cx: &LateContext, expr: &Expr) -> Option<Name> {\n     let parent_id = cx.tcx.map.get_parent(expr.id);\n     match cx.tcx.map.find(parent_id) {\n         Some(NodeItem(&Item{ ref name, .. })) |\n-        Some(NodeTraitItem(&TraitItem{ id: _, ref name, .. })) |\n-        Some(NodeImplItem(&ImplItem{ id: _, ref name, .. })) => {\n+        Some(NodeTraitItem(&TraitItem{ ref name, .. })) |\n+        Some(NodeImplItem(&ImplItem{ ref name, .. })) => {\n             Some(*name)\n         }\n         _ => None,"}]}