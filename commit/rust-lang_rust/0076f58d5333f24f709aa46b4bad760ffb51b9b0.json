{"sha": "0076f58d5333f24f709aa46b4bad760ffb51b9b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzZmNThkNTMzM2YyNGY3MDlhYTQ2YjRiYWQ3NjBmZmI1MWI5YjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T21:04:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-12T21:04:34Z"}, "message": "Auto merge of #55992 - cramertj:pin-docs, r=alexcrichton\n\nExpand std::pin module docs and rename std::pin::Pinned to PhantomPinned\n\ncc https://github.com/rust-lang/rust/issues/49150, https://github.com/rust-lang/rust/issues/55766\n\nr? @withoutboats", "tree": {"sha": "66b387fe2d361342c10098e511a7da1ff63ecc5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b387fe2d361342c10098e511a7da1ff63ecc5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0076f58d5333f24f709aa46b4bad760ffb51b9b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0076f58d5333f24f709aa46b4bad760ffb51b9b0", "html_url": "https://github.com/rust-lang/rust/commit/0076f58d5333f24f709aa46b4bad760ffb51b9b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0076f58d5333f24f709aa46b4bad760ffb51b9b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8fc7dc06dea00afbd365468cf4804f68a3531c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8fc7dc06dea00afbd365468cf4804f68a3531c", "html_url": "https://github.com/rust-lang/rust/commit/dd8fc7dc06dea00afbd365468cf4804f68a3531c"}, {"sha": "709b7515e744cdf242ab53806414aa295ea6977f", "url": "https://api.github.com/repos/rust-lang/rust/commits/709b7515e744cdf242ab53806414aa295ea6977f", "html_url": "https://github.com/rust-lang/rust/commit/709b7515e744cdf242ab53806414aa295ea6977f"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "d3d16127ed5fe117a42b78e8982cd2122defaa89", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0076f58d5333f24f709aa46b4bad760ffb51b9b0/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0076f58d5333f24f709aa46b4bad760ffb51b9b0/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=0076f58d5333f24f709aa46b4bad760ffb51b9b0", "patch": "@@ -640,15 +640,15 @@ unsafe impl<T: ?Sized> Freeze for &mut T {}\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub auto trait Unpin {}\n \n-/// A type which does not implement `Unpin`.\n+/// A marker type which does not implement `Unpin`.\n ///\n-/// If a type contains a `Pinned`, it will not implement `Unpin` by default.\n+/// If a type contains a `PhantomPinned`, it will not implement `Unpin` by default.\n #[unstable(feature = \"pin\", issue = \"49150\")]\n #[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n-pub struct Pinned;\n+pub struct PhantomPinned;\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl !Unpin for Pinned {}\n+impl !Unpin for PhantomPinned {}\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<'a, T: ?Sized + 'a> Unpin for &'a T {}"}, {"sha": "0ad6e8c7c1c7dcc5d7c1eda0a3a0ab11e62b72eb", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0076f58d5333f24f709aa46b4bad760ffb51b9b0/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0076f58d5333f24f709aa46b4bad760ffb51b9b0/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=0076f58d5333f24f709aa46b4bad760ffb51b9b0", "patch": "@@ -7,23 +7,33 @@\n //! since moving an object with pointers to itself will invalidate them,\n //! which could cause undefined behavior.\n //!\n-//! In order to prevent objects from moving, they must be pinned\n-//! by wrapping a pointer to the data in the [`Pin`] type. A pointer wrapped\n-//! in a `Pin` is otherwise equivalent to its normal version, e.g., `Pin<Box<T>>`\n-//! and `Box<T>` work the same way except that the first is pinning the value\n-//! of `T` in place.\n+//! By default, all types in Rust are movable. Rust allows passing all types by-value,\n+//! and common smart-pointer types such as `Box`, `Rc`, and `&mut` allow replacing and\n+//! moving the values they contain. In order to prevent objects from moving, they must\n+//! be pinned by wrapping a pointer to the data in the [`Pin`] type.\n+//! Doing this prohibits moving the value behind the pointer.\n+//! For example, `Pin<Box<T>>` functions much like a regular `Box<T>`,\n+//! but doesn't allow moving `T`. The pointer value itself (the `Box`) can still be moved,\n+//! but the value behind it cannot.\n //!\n-//! First of all, these are pointer types because pinned data mustn't be passed around by value\n-//! (that would change its location in memory).\n-//! Secondly, since data can be moved out of `&mut` and `Box` with functions such as [`swap`],\n-//! which causes their contents to swap places in memory,\n-//! we need dedicated types that prohibit such operations.\n+//! Since data can be moved out of `&mut` and `Box` with functions such as [`swap`],\n+//! changing the location of the underlying data, [`Pin`] prohibits accessing the\n+//! underlying pointer type (the `&mut` or `Box`) directly, and provides its own set of\n+//! APIs for accessing and using the value. [`Pin`] also guarantees that no other\n+//! functions will move the pointed-to value. This allows for the creation of\n+//! self-references and other special behaviors that are only possible for unmovable\n+//! values.\n //!\n-//! However, these restrictions are usually not necessary,\n-//! so most types implement the [`Unpin`] auto-trait,\n-//! which indicates that the type can be moved out safely.\n-//! Doing so removes the limitations of pinning types,\n-//! making them the same as their non-pinning counterparts.\n+//! However, these restrictions are usually not necessary. Many types are always freely\n+//! movable. These types implement the [`Unpin`] auto-trait, which nullifies the affect\n+//! of [`Pin`]. For `T: Unpin`, `Pin<Box<T>>` and `Box<T>` function identically, as do\n+//! `Pin<&mut T>` and `&mut T`.\n+//!\n+//! Note that pinning and `Unpin` only affect the pointed-to type. For example, whether\n+//! or not `Box<T>` is `Unpin` has no affect on the behavior of `Pin<Box<T>>`. Similarly,\n+//! `Pin<Box<T>>` and `Pin<&mut T>` are always `Unpin` themselves, even though the\n+//! `T` underneath them isn't, because the pointers in `Pin<Box<_>>` and `Pin<&mut _>`\n+//! are always freely movable, even if the data they point to isn't.\n //!\n //! [`Pin`]: struct.Pin.html\n //! [`Unpin`]: trait.Unpin.html\n@@ -36,7 +46,7 @@\n //! #![feature(pin)]\n //!\n //! use std::pin::Pin;\n-//! use std::marker::Pinned;\n+//! use std::marker::PhantomPinned;\n //! use std::ptr::NonNull;\n //!\n //! // This is a self-referential struct since the slice field points to the data field.\n@@ -47,7 +57,7 @@\n //! struct Unmovable {\n //!     data: String,\n //!     slice: NonNull<String>,\n-//!     _pin: Pinned,\n+//!     _pin: PhantomPinned,\n //! }\n //!\n //! impl Unmovable {\n@@ -60,7 +70,7 @@\n //!             // we only create the pointer once the data is in place\n //!             // otherwise it will have already moved before we even started\n //!             slice: NonNull::dangling(),\n-//!             _pin: Pinned,\n+//!             _pin: PhantomPinned,\n //!         };\n //!         let mut boxed = Box::pinned(res);\n //!"}]}