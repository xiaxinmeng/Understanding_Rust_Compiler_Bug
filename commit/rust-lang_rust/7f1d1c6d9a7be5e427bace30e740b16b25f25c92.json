{"sha": "7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMWQxYzZkOWE3YmU1ZTQyN2JhY2UzMGU3NDBiMTZiMjVmMjVjOTI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-10T20:12:59Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-02-13T18:41:24Z"}, "message": "Fix up links\n\nmdbook and rustdoc generate links differently, so we need to change all\nthese links.", "tree": {"sha": "b7425e4b7d51eeee32281f9429edd91fe28cb64e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7425e4b7d51eeee32281f9429edd91fe28cb64e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "html_url": "https://github.com/rust-lang/rust/commit/7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775726092eaa4d0e0e397e9032467c2d1d06ed37", "url": "https://api.github.com/repos/rust-lang/rust/commits/775726092eaa4d0e0e397e9032467c2d1d06ed37", "html_url": "https://github.com/rust-lang/rust/commit/775726092eaa4d0e0e397e9032467c2d1d06ed37"}], "stats": {"total": 192, "additions": 96, "deletions": 96}, "files": [{"sha": "2f6730be6651f4de65843b5bcb6110f7c0cad878", "filename": "src/doc/book/src/casting-between-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcasting-between-types.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -8,7 +8,7 @@ most dangerous features of Rust!\n # Coercion\n \n Coercion between types is implicit and has no syntax of its own, but can\n-be spelled out with [`as`](#explicit-coercions).\n+be spelled out with [`as`](#Explicit%20coercions).\n \n Coercion occurs in `let`, `const`, and `static` statements; in\n function call arguments; in field values in struct initialization; and in a"}, {"sha": "2f6d5039f4d4375757e8f843e6ca4314695609a1", "filename": "src/doc/book/src/closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fclosures.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -463,7 +463,7 @@ fn factory() -> &(Fn(i32) -> i32) {\n \n Right. Because we have a reference, we need to give it a lifetime. But\n our `factory()` function takes no arguments, so\n-[elision](lifetimes.html#lifetime-elision) doesn\u2019t kick in here. Then what\n+[elision](lifetimes.html#Lifetime%20Elision) doesn\u2019t kick in here. Then what\n choices do we have? Try `'static`:\n \n ```rust,ignore"}, {"sha": "47c5e5c82915552501693117e3c7f6582b3696be", "filename": "src/doc/book/src/compiler-plugins.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fcompiler-plugins.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -127,7 +127,7 @@ enum.  For a more involved macro example, see\n \n ## Tips and tricks\n \n-Some of the [macro debugging tips](macros.html#debugging-macro-code) are applicable.\n+Some of the [macro debugging tips](macros.html#Debugging%20macro%20code) are applicable.\n \n You can use `syntax::parse` to turn token trees into\n higher-level syntax elements like expressions:"}, {"sha": "e5bc7ecdd0b28c2b5c6217cc6c5cef5740cb6106", "filename": "src/doc/book/src/concurrency.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fconcurrency.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -55,7 +55,7 @@ For sharing references across threads, Rust provides a wrapper type called\n `Arc<T>`. `Arc<T>` implements `Send` and `Sync` if and only if `T` implements\n both `Send` and `Sync`. For example, an object of type `Arc<RefCell<U>>` cannot\n be transferred across threads because\n-[`RefCell`](choosing-your-guarantees.html#refcellt) does not implement\n+[`RefCell`](choosing-your-guarantees.html#RefCell%3CT%3E) does not implement\n `Sync`, consequently `Arc<RefCell<U>>` would not implement `Send`.\n \n These two traits allow you to use the type system to make strong guarantees\n@@ -126,7 +126,7 @@ closure only captures a _reference to `x`_. This is a problem, because the\n thread may outlive the scope of `x`, leading to a dangling pointer.\n \n To fix this, we use a `move` closure as mentioned in the error message. `move`\n-closures are explained in depth [here](closures.html#move-closures); basically\n+closures are explained in depth [here](closures.html#move%20closures); basically\n they move variables from their environment into themselves.\n \n ```rust"}, {"sha": "1b0d2453275fc0d22a519a661a735e340238a88d", "filename": "src/doc/book/src/error-handling.md", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ferror-handling.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -21,35 +21,35 @@ sum types and combinators, and try to motivate the way Rust does error handling\n incrementally. As such, programmers with experience in other expressive type\n systems may want to jump around.\n \n-* [The Basics](#the-basics)\n-    * [Unwrapping explained](#unwrapping-explained)\n-    * [The `Option` type](#the-option-type)\n-        * [Composing `Option<T>` values](#composing-optiont-values)\n-    * [The `Result` type](#the-result-type)\n-        * [Parsing integers](#parsing-integers)\n-        * [The `Result` type alias idiom](#the-result-type-alias-idiom)\n-    * [A brief interlude: unwrapping isn't evil](#a-brief-interlude-unwrapping-isnt-evil)\n-* [Working with multiple error types](#working-with-multiple-error-types)\n-    * [Composing `Option` and `Result`](#composing-option-and-result)\n-    * [The limits of combinators](#the-limits-of-combinators)\n-    * [Early returns](#early-returns)\n-    * [The `try!` macro](#the-try-macro)\n-    * [Defining your own error type](#defining-your-own-error-type)\n-* [Standard library traits used for error handling](#standard-library-traits-used-for-error-handling)\n-    * [The `Error` trait](#the-error-trait)\n-    * [The `From` trait](#the-from-trait)\n-    * [The real `try!` macro](#the-real-try-macro)\n-    * [Composing custom error types](#composing-custom-error-types)\n-    * [Advice for library writers](#advice-for-library-writers)\n-* [Case study: A program to read population data](#case-study-a-program-to-read-population-data)\n-    * [Initial setup](#initial-setup)\n-    * [Argument parsing](#argument-parsing)\n-    * [Writing the logic](#writing-the-logic)\n-    * [Error handling with `Box<Error>`](#error-handling-with-boxerror)\n-    * [Reading from stdin](#reading-from-stdin)\n-    * [Error handling with a custom type](#error-handling-with-a-custom-type)\n-    * [Adding functionality](#adding-functionality)\n-* [The short story](#the-short-story)\n+* [The Basics](#The%20Basics)\n+    * [Unwrapping explained](#Unwrapping%20explained)\n+    * [The `Option` type](#The%20Option%20type)\n+        * [Composing `Option<T>` values](#Composing%20Option%3CT%3E%20values)\n+    * [The `Result` type](#The%20Result%20type)\n+        * [Parsing integers](#Parsing%20integers)\n+        * [The `Result` type alias idiom](#The%20Result%20type%20alias%20idiom)\n+    * [A brief interlude: unwrapping isn't evil](#A%20brief%20interlude:%20unwrapping%20isnt%20evil)\n+* [Working with multiple error types](#Working%20with%20multiple%20error%20types)\n+    * [Composing `Option` and `Result`](#Composing%20Option%20and%20Result)\n+    * [The limits of combinators](#The%20limits%20of%20combinators)\n+    * [Early returns](#Early%20returns)\n+    * [The `try!` macro](#The%20try%20macro)\n+    * [Defining your own error type](#Defining%20your%20own%20error%20type)\n+* [Standard library traits used for error handling](#Standard%20library%20traits%20used%20for%20error%20handling)\n+    * [The `Error` trait](#The%20Error%20trait)\n+    * [The `From` trait](#The%20From%20trait)\n+    * [The real `try!` macro](#The%20real%20try%20macro)\n+    * [Composing custom error types](#Composing%20custom%20error%20types)\n+    * [Advice for library writers](#Advice%20for%20library%20writers)\n+* [Case study: A program to read population data](#Case%20study:%20A%20program%20to%20read%20population%20data)\n+    * [Initial setup](#Initial%20setup)\n+    * [Argument parsing](#Argument%20parsing)\n+    * [Writing the logic](#Writing%20the%20logic)\n+    * [Error handling with `Box<Error>`](#Error%20handling%20with%20Box%3CError%3E)\n+    * [Reading from stdin](#Reading%20from%20stdin)\n+    * [Error handling with a custom type](#Error%20handling%20with%20a%20custom%20type)\n+    * [Adding functionality](#Adding%20functionality)\n+* [The short story](#The%20short%20story)\n \n # The Basics\n \n@@ -796,7 +796,7 @@ because of the return types of\n [`std::fs::File::open`](../std/fs/struct.File.html#method.open) and\n [`std::io::Read::read_to_string`](../std/io/trait.Read.html#method.read_to_string).\n (Note that they both use the [`Result` type alias\n-idiom](#the-result-type-alias-idiom) described previously. If you\n+idiom](#The%20Result%20type%20alias%20idiom) described previously. If you\n click on the `Result` type, you'll [see the type\n alias](../std/io/type.Result.html), and consequently, the underlying\n `io::Error` type.)  The third problem is described by the\n@@ -1120,7 +1120,7 @@ returns an `&Error`, which is itself a trait object. We'll revisit the\n \n For now, it suffices to show an example implementing the `Error` trait. Let's\n use the error type we defined in the\n-[previous section](#defining-your-own-error-type):\n+[previous section](#Defining%20your%20own%20error%20type):\n \n ```rust\n use std::io;\n@@ -1493,19 +1493,19 @@ representation. But certainly, this will vary depending on use cases.\n At a minimum, you should probably implement the\n [`Error`](../std/error/trait.Error.html)\n trait. This will give users of your library some minimum flexibility for\n-[composing errors](#the-real-try-macro). Implementing the `Error` trait also\n+[composing errors](#The%20real%20try%20macro). Implementing the `Error` trait also\n means that users are guaranteed the ability to obtain a string representation\n of an error (because it requires impls for both `fmt::Debug` and\n `fmt::Display`).\n \n Beyond that, it can also be useful to provide implementations of `From` on your\n error types. This allows you (the library author) and your users to\n-[compose more detailed errors](#composing-custom-error-types). For example,\n+[compose more detailed errors](#Composing%20custom%20error%20types). For example,\n [`csv::Error`](http://burntsushi.net/rustdoc/csv/enum.Error.html)\n provides `From` impls for both `io::Error` and `byteorder::Error`.\n \n Finally, depending on your tastes, you may also want to define a\n-[`Result` type alias](#the-result-type-alias-idiom), particularly if your\n+[`Result` type alias](#The%20Result%20type%20alias%20idiom), particularly if your\n library defines a single error type. This is used in the standard library\n for [`io::Result`](../std/io/type.Result.html)\n and [`fmt::Result`](../std/fmt/type.Result.html).\n@@ -1538,7 +1538,7 @@ and [`rustc-serialize`](https://crates.io/crates/rustc-serialize) crates.\n \n We're not going to spend a lot of time on setting up a project with\n Cargo because it is already covered well in [the Cargo\n-section](getting-started.html#hello-cargo) and [Cargo's documentation][14].\n+section](getting-started.html#Hello%20Cargo) and [Cargo's documentation][14].\n \n To get started from scratch, run `cargo new --bin city-pop` and make sure your\n `Cargo.toml` looks something like this:\n@@ -1729,7 +1729,7 @@ error types and you don't need any `From` implementations. The downside is that\n since `Box<Error>` is a trait object, it *erases the type*, which means the\n compiler can no longer reason about its underlying type.\n \n-[Previously](#the-limits-of-combinators) we started refactoring our code by\n+[Previously](#The%20limits%20of%20combinators) we started refactoring our code by\n changing the type of our function from `T` to `Result<T, OurErrorType>`. In\n this case, `OurErrorType` is only `Box<Error>`. But what's `T`? And can we add\n a return type to `main`?"}, {"sha": "b2994d2a29cbbf899b9d137117fab204d066269d", "filename": "src/doc/book/src/ffi.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fffi.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -680,7 +680,7 @@ pub extern fn hello_rust() -> *const u8 {\n \n The `extern` makes this function adhere to the C calling convention, as\n discussed above in \"[Foreign Calling\n-Conventions](ffi.html#foreign-calling-conventions)\". The `no_mangle`\n+Conventions](ffi.html#Foreign%20calling%20conventions)\". The `no_mangle`\n attribute turns off Rust's name mangling, so that it is easier to link to.\n \n # FFI and panics"}, {"sha": "93846644c398e53b8bc24a9e5a6f0abee9e82d74", "filename": "src/doc/book/src/getting-started.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fgetting-started.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -236,7 +236,7 @@ language]*, which means that most things are expressions, rather than\n statements. The `;` indicates that this expression is over, and the next one is\n ready to begin. Most lines of Rust code end with a `;`.\n \n-[expression-oriented language]: glossary.html#expression-oriented-language\n+[expression-oriented language]: glossary.html#Expression-Oriented%20Language\n \n ## Compiling and Running Are Separate Steps\n "}, {"sha": "49821d86a92007433f69b00f1a8aa8b9d773ac96", "filename": "src/doc/book/src/glossary.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fglossary.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -56,7 +56,7 @@ They can be used to manage control flow in a modular fashion.\n \n A type without a statically known size or alignment. ([more info][link])\n \n-[link]: ../nomicon/exotic-sizes.html#dynamically-sized-types-dsts\n+[link]: ../nomicon/exotic-sizes.html#Dynamically%20Sized%20Types%20(DSTs)\n \n ### Expression\n \n@@ -76,8 +76,8 @@ In an expression-oriented language, (nearly) every statement is an expression\n and therefore returns a value. Consequently, these expression statements can\n themselves form part of larger expressions.\n \n-[expression]: glossary.html#expression\n-[statement]: glossary.html#statement\n+[expression]: glossary.html#Expression\n+[statement]: glossary.html#Statement\n \n ### Statement\n "}, {"sha": "216db25cd95640c96b2bd1503c6577872c849eb6", "filename": "src/doc/book/src/guessing-game.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fguessing-game.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -119,7 +119,7 @@ there are no arguments, and `{` starts the body of the function. Because\n we didn\u2019t include a return type, it\u2019s assumed to be `()`, an empty\n [tuple][tuples].\n \n-[tuples]: primitive-types.html#tuples\n+[tuples]: primitive-types.html#Tuples\n \n ```rust,ignore\n     println!(\"Guess the number!\");\n@@ -727,7 +727,7 @@ thirty-two bit integer. Rust has [a number of built-in number types][number],\n but we\u2019ve chosen `u32`. It\u2019s a good default choice for a small positive number.\n \n [parse]: ../std/primitive.str.html#method.parse\n-[number]: primitive-types.html#numeric-types\n+[number]: primitive-types.html#Numeric%20types\n \n Just like `read_line()`, our call to `parse()` could cause an error. What if\n our string contained `A\ud83d\udc4d%`? There\u2019d be no way to convert that to a number. As"}, {"sha": "c00815f49c74010fe88a29ed0c60699a0a6cccea", "filename": "src/doc/book/src/lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Flifetimes.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -139,7 +139,7 @@ associated with it, but the compiler lets you elide (i.e. omit, see\n [\"Lifetime Elision\"][lifetime-elision] below) them in common cases. Before we\n get to that, though, let\u2019s look at a short example with explicit lifetimes:\n \n-[lifetime-elision]: #lifetime-elision\n+[lifetime-elision]: #Lifetime%20Elision\n \n ```rust,ignore\n fn bar<'a>(...)"}, {"sha": "3ccbeb05f01db80f6ae8b5a11173116532d65836", "filename": "src/doc/book/src/macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmacros.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -432,7 +432,7 @@ Even when Rust code contains un-expanded macros, it can be parsed as a full\n tools that process code. It also has a few consequences for the design of\n Rust\u2019s macro system.\n \n-[ast]: glossary.html#abstract-syntax-tree\n+[ast]: glossary.html#Abstract%20Syntax%20Tree\n \n One consequence is that Rust must determine, when it parses a macro invocation,\n whether the macro stands in for"}, {"sha": "7e96849220a9559cc73cf48ff8446106eef6a4b0", "filename": "src/doc/book/src/mutability.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fmutability.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -89,7 +89,7 @@ philosophy, memory safety, and the mechanism by which Rust guarantees it, the\n > * exactly one mutable reference (`&mut T`).\n \n [ownership]: ownership.html\n-[borrowing]: references-and-borrowing.html#borrowing\n+[borrowing]: references-and-borrowing.html#Borrowing\n \n So, that\u2019s the real definition of \u2018immutability\u2019: is this safe to have two\n pointers to? In `Arc<T>`\u2019s case, yes: the mutation is entirely contained inside"}, {"sha": "e7bf3cec55e4720ca85b264b9b5a0bc77f4edfb7", "filename": "src/doc/book/src/ownership.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fownership.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -65,10 +65,10 @@ elements onto them.\n Vectors have a [generic type][generics] `Vec<T>`, so in this example `v` will have type\n `Vec<i32>`. We'll cover [generics] in detail in a later chapter.\n \n-[arrays]: primitive-types.html#arrays\n+[arrays]: primitive-types.html#Arrays\n [vectors]: vectors.html\n-[heap]: the-stack-and-the-heap.html#the-heap\n-[stack]: the-stack-and-the-heap.html#the-stack\n+[heap]: the-stack-and-the-heap.html#The%20Heap\n+[stack]: the-stack-and-the-heap.html#The%20Stack\n [bindings]: variable-bindings.html\n [generics]: generics.html\n \n@@ -136,7 +136,7 @@ Rust allocates memory for an integer [i32] on the [stack][sh], copies the bit\n pattern representing the value of 10 to the allocated memory and binds the\n variable name x to this memory region for future reference.\n \n-[i32]: primitive-types.html#numeric-types\n+[i32]: primitive-types.html#Numeric%20types\n \n Now consider the following code fragment:\n "}, {"sha": "67d71ceba0cc349f21b4280a4793cdca28b28b8e", "filename": "src/doc/book/src/primitive-types.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprimitive-types.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -232,7 +232,7 @@ soon.\n You can assign one tuple into another, if they have the same contained types\n and [arity]. Tuples have the same arity when they have the same length.\n \n-[arity]: glossary.html#arity\n+[arity]: glossary.html#Arity\n \n ```rust\n let mut x = (1, 2); // x: (i32, i32)"}, {"sha": "1e1d811a1d8b18769e68b923181e4344131feda4", "filename": "src/doc/book/src/syntax-index.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fsyntax-index.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -196,18 +196,18 @@\n [Associated Types]: associated-types.html\n [Attributes]: attributes.html\n [Casting Between Types (`as`)]: casting-between-types.html#as\n-[Closures (`move` closures)]: closures.html#move-closures\n+[Closures (`move` closures)]: closures.html#move%20closures\n [Closures]: closures.html\n [Comments]: comments.html\n-[Crates and Modules (Defining Modules)]: crates-and-modules.html#defining-modules\n-[Crates and Modules (Exporting a Public Interface)]: crates-and-modules.html#exporting-a-public-interface\n-[Crates and Modules (Importing External Crates)]: crates-and-modules.html#importing-external-crates\n-[Crates and Modules (Importing Modules with `use`)]: crates-and-modules.html#importing-modules-with-use\n-[Crates and Modules (Re-exporting with `pub use`)]: crates-and-modules.html#re-exporting-with-pub-use\n-[Diverging Functions]: functions.html#diverging-functions\n+[Crates and Modules (Defining Modules)]: crates-and-modules.html#Defining%20modules\n+[Crates and Modules (Exporting a Public Interface)]: crates-and-modules.html#Exporting%20a%20public%20interface\n+[Crates and Modules (Importing External Crates)]: crates-and-modules.html#Importing%20external%20crates\n+[Crates and Modules (Importing Modules with `use`)]: crates-and-modules.html#Importing%20modules%20with%20use\n+[Crates and Modules (Re-exporting with `pub use`)]: crates-and-modules.html#Re-exporting%20with%20pub%20use\n+[Diverging Functions]: functions.html#Diverging%20functions\n [Enums]: enums.html\n [Foreign Function Interface]: ffi.html\n-[Functions (Early Returns)]: functions.html#early-returns\n+[Functions (Early Returns)]: functions.html#Early%20returns\n [Functions]: functions.html\n [Generics]: generics.html\n [Iterators]: iterators.html\n@@ -216,38 +216,38 @@\n [Loops (`for`)]: loops.html#for\n [Loops (`loop`)]: loops.html#loop\n [Loops (`while`)]: loops.html#while\n-[Loops (Ending Iteration Early)]: loops.html#ending-iteration-early\n-[Loops (Loops Labels)]: loops.html#loop-labels\n+[Loops (Ending Iteration Early)]: loops.html#Ending%20iteration%20early\n+[Loops (Loops Labels)]: loops.html#Loop%20labels\n [Macros]: macros.html\n [Match]: match.html\n-[Method Syntax (Method Calls)]: method-syntax.html#method-calls\n+[Method Syntax (Method Calls)]: method-syntax.html#Method%20calls\n [Method Syntax]: method-syntax.html\n [Mutability]: mutability.html\n [Operators and Overloading]: operators-and-overloading.html\n-[Patterns (`ref` and `ref mut`)]: patterns.html#ref-and-ref-mut\n-[Patterns (Bindings)]: patterns.html#bindings\n-[Patterns (Ignoring bindings)]: patterns.html#ignoring-bindings\n-[Patterns (Multiple patterns)]: patterns.html#multiple-patterns\n-[Patterns (Ranges)]: patterns.html#ranges\n+[Patterns (`ref` and `ref mut`)]: patterns.html#ref%20and%20ref%20mut\n+[Patterns (Bindings)]: patterns.html#Bindings\n+[Patterns (Ignoring bindings)]: patterns.html#Ignoring%20bindings\n+[Patterns (Multiple patterns)]: patterns.html#Multiple%20patterns\n+[Patterns (Ranges)]: patterns.html#Ranges\n [Primitive Types (`char`)]: primitive-types.html#char\n-[Primitive Types (Arrays)]: primitive-types.html#arrays\n-[Primitive Types (Booleans)]: primitive-types.html#booleans\n-[Primitive Types (Tuple Indexing)]: primitive-types.html#tuple-indexing\n-[Primitive Types (Tuples)]: primitive-types.html#tuples\n+[Primitive Types (Arrays)]: primitive-types.html#Arrays\n+[Primitive Types (Booleans)]: primitive-types.html#Booleans\n+[Primitive Types (Tuple Indexing)]: primitive-types.html#Tuple%20indexing\n+[Primitive Types (Tuples)]: primitive-types.html#Tuples\n [Raw Pointers]: raw-pointers.html\n [Reference (Byte String Literals)]: ../reference.html#byte-string-literals\n [Reference (Integer literals)]: ../reference.html#integer-literals\n [Reference (Raw Byte String Literals)]: ../reference.html#raw-byte-string-literals\n [Reference (Raw String Literals)]: ../reference.html#raw-string-literals\n [References and Borrowing]: references-and-borrowing.html\n [Strings]: strings.html\n-[Structs (Update syntax)]: structs.html#update-syntax\n+[Structs (Update syntax)]: structs.html#Update%20syntax\n [Structs]: structs.html\n-[Traits (`where` clause)]: traits.html#where-clause\n-[Traits (Multiple Trait Bounds)]: traits.html#multiple-trait-bounds\n+[Traits (`where` clause)]: traits.html#Where%20clause\n+[Traits (Multiple Trait Bounds)]: traits.html#Multiple%20trait%20bounds\n [Traits]: traits.html\n [Universal Function Call Syntax]: ufcs.html\n-[Universal Function Call Syntax (Angle-bracket Form)]: ufcs.html#angle-bracket-form\n+[Universal Function Call Syntax (Angle-bracket Form)]: ufcs.html#Angle-bracket%20Form\n [Unsafe]: unsafe.html\n-[Unsized Types (`?Sized`)]: unsized-types.html#sized\n+[Unsized Types (`?Sized`)]: unsized-types.html#Sized\n [Variable Bindings]: variable-bindings.html"}, {"sha": "a6d1c3d1d231df9661c6a053b86b3f6f796b31b6", "filename": "src/doc/book/src/traits.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftraits.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -81,7 +81,7 @@ Traits are useful because they allow a type to make certain promises about its\n behavior. Generic functions can exploit this to constrain, or [bound][bounds], the types they\n accept. Consider this function, which does not compile:\n \n-[bounds]: glossary.html#bounds\n+[bounds]: glossary.html#Bounds\n \n ```rust,ignore\n fn print_area<T>(shape: T) {"}, {"sha": "b1ce068528381bc8fb08703378467bc56aa0a8fa", "filename": "src/doc/book/src/type-aliases.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Ftype-aliases.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -55,7 +55,7 @@ if x == y {\n This compiles without error. Values of a `Num` type are the same as a value of\n type `i32`, in every way. You can use [tuple struct] to really get a new type.\n \n-[tuple struct]: structs.html#tuple-structs\n+[tuple struct]: structs.html#Tuple%20structs\n \n You can also use type aliases with generics:\n "}, {"sha": "9b293880cdc03a02519c7839813207b4ada79f8f", "filename": "src/doc/book/src/vectors.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fvectors.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -151,6 +151,6 @@ API documentation][vec].\n [vec]: ../std/vec/index.html\n [box]: ../std/boxed/index.html\n [generic]: generics.html\n-[panic]: concurrency.html#panics\n+[panic]: concurrency.html#Panics\n [get]: ../std/vec/struct.Vec.html#method.get\n [get_mut]: ../std/vec/struct.Vec.html#method.get_mut"}, {"sha": "08627130590c0f2b8b37869b98c00e68bfda6387", "filename": "src/doc/nomicon/src/lifetime-mismatch.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Flifetime-mismatch.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -78,4 +78,4 @@ TODO: other common problems? SEME regions stuff, mostly?\n \n \n \n-[ex2]: lifetimes.html#example-aliasing-a-mutable-reference\n+[ex2]: lifetimes.html#Example%3A%20aliasing%20a%20mutable%20reference"}, {"sha": "98411e041be078e1efdac7e279838403fb36b92e", "filename": "src/doc/nomicon/src/repr-rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fsrc%2Frepr-rust.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -151,4 +151,4 @@ use fairly elaborate algorithms to cache bits throughout nested types with\n special constrained representations. As such it is *especially* desirable that\n we leave enum layout unspecified today.\n \n-[dst]: exotic-sizes.html#dynamically-sized-types-dsts\n+[dst]: exotic-sizes.html#Dynamically%20Sized%20Types%20(DSTs)"}, {"sha": "7155641e2c28a790ca06f788889137f163e6839e", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -2108,7 +2108,7 @@ On `struct`s:\n   list of names `#[macro_use(foo, bar)]` restricts the import to just those\n   macros named.  The `extern crate` must appear at the crate root, not inside\n   `mod`, which ensures proper function of the [`$crate` macro\n-  variable](book/macros.html#the-variable-crate).\n+  variable](book/macros.html#The%20variable%20%24crate).\n \n - `macro_reexport` on an `extern crate` \u2014 re-export the named macros.\n \n@@ -2118,7 +2118,7 @@ On `struct`s:\n   link it into the output.\n \n See the [macros section of the\n-book](book/macros.html#scoping-and-macro-importexport) for more information on\n+book](book/macros.html#Scoping%20and%20macro%20import%2Fexport) for more information on\n macro scope.\n \n \n@@ -2277,7 +2277,7 @@ For any lint check `C`:\n \n The lint checks supported by the compiler can be found via `rustc -W help`,\n along with their default settings.  [Compiler\n-plugins](book/compiler-plugins.html#lint-plugins) can provide additional lint checks.\n+plugins](book/compiler-plugins.html#Lint%20plugins) can provide additional lint checks.\n \n ```{.ignore}\n pub mod m1 {"}, {"sha": "210917b68a2aae8c5a2cfebc8622b705b7c01c73", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -102,7 +102,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [downgrade]: struct.Arc.html#method.downgrade\n /// [upgrade]: struct.Weak.html#method.upgrade\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-/// [assoc]: ../../book/method-syntax.html#associated-functions\n+/// [assoc]: ../../book/method-syntax.html#Associated%20functions\n ///\n /// # Examples\n ///"}, {"sha": "a874e938a40cdee1e4350b8a5fb89b7ef76f2eea", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -215,7 +215,7 @@\n //! [downgrade]: struct.Rc.html#method.downgrade\n //! [upgrade]: struct.Weak.html#method.upgrade\n //! [`None`]: ../../std/option/enum.Option.html#variant.None\n-//! [assoc]: ../../book/method-syntax.html#associated-functions\n+//! [assoc]: ../../book/method-syntax.html#Associated%20functions\n //! [mutability]: ../../std/cell/index.html#introducing-mutability-inside-of-something-immutable\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "5655fd066047ccf5e2852573bb3dd0e247efb20a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -525,7 +525,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// it will not release any borrows, as borrows are based on lexical scope.\n ///\n /// This effectively does nothing for\n-/// [types which implement `Copy`](../../book/ownership.html#copy-types),\n+/// [types which implement `Copy`](../../book/ownership.html#Copy%20types),\n /// e.g. integers. Such values are copied and _then_ moved into the function,\n /// so the value persists after this function call.\n ///"}, {"sha": "652b139f1e608b4ffdef820ff55fa7533d189696", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -25,7 +25,7 @@\n /// Book][moreinfo] contains more details about the precise nature of\n /// these internals.\n ///\n-/// [moreinfo]: ../../book/trait-objects.html#representation\n+/// [moreinfo]: ../../book/trait-objects.html#Representation\n ///\n /// `TraitObject` is guaranteed to match layouts, but it is not the\n /// type of trait objects (e.g. the fields are not directly accessible"}, {"sha": "88c2310a86e22eb3e33d8891e112a221f0ef8151", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -189,8 +189,8 @@\n //! [`sync`]: sync/index.html\n //! [`thread`]: thread/index.html\n //! [`use std::env`]: env/index.html\n-//! [`use`]: ../book/crates-and-modules.html#importing-modules-with-use\n-//! [crate root]: ../book/crates-and-modules.html#basic-terminology-crates-and-modules\n+//! [`use`]: ../book/crates-and-modules.html#Importing%20Modules%20with%20use\n+//! [crate root]: ../book/crates-and-modules.html#Basic%20terminology%3A%20Crates%20and%20Modules\n //! [crates.io]: https://crates.io\n //! [deref coercions]: ../book/deref-coercions.html\n //! [files]: fs/struct.File.html"}, {"sha": "1b3e17c300e4d547803fc75849e411eb1e0fdeac", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f1d1c6d9a7be5e427bace30e740b16b25f25c92/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=7f1d1c6d9a7be5e427bace30e740b16b25f25c92", "patch": "@@ -490,7 +490,7 @@ mod prim_str { }\n /// assert_eq!(tuple.2, 'c');\n /// ```\n ///\n-/// For more about tuples, see [the book](../book/primitive-types.html#tuples).\n+/// For more about tuples, see [the book](../book/primitive-types.html#Tuples).\n ///\n /// # Trait implementations\n ///"}]}