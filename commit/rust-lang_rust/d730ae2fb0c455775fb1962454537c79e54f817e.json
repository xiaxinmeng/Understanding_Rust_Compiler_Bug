{"sha": "d730ae2fb0c455775fb1962454537c79e54f817e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzBhZTJmYjBjNDU1Nzc1ZmIxOTYyNDU0NTM3Yzc5ZTU0ZjgxN2U=", "commit": {"author": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-05-05T07:08:34Z"}, "committer": {"name": "Valerii Hiora", "email": "valerii.hiora@gmail.com", "date": "2014-06-12T17:24:08Z"}, "message": "Runtime support for arm on iOS", "tree": {"sha": "c8c6c744b50b0e2de0b444807cfbaaaec124bac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8c6c744b50b0e2de0b444807cfbaaaec124bac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d730ae2fb0c455775fb1962454537c79e54f817e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d730ae2fb0c455775fb1962454537c79e54f817e", "html_url": "https://github.com/rust-lang/rust/commit/d730ae2fb0c455775fb1962454537c79e54f817e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d730ae2fb0c455775fb1962454537c79e54f817e/comments", "author": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vhbit", "id": 140199, "node_id": "MDQ6VXNlcjE0MDE5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/140199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vhbit", "html_url": "https://github.com/vhbit", "followers_url": "https://api.github.com/users/vhbit/followers", "following_url": "https://api.github.com/users/vhbit/following{/other_user}", "gists_url": "https://api.github.com/users/vhbit/gists{/gist_id}", "starred_url": "https://api.github.com/users/vhbit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vhbit/subscriptions", "organizations_url": "https://api.github.com/users/vhbit/orgs", "repos_url": "https://api.github.com/users/vhbit/repos", "events_url": "https://api.github.com/users/vhbit/events{/privacy}", "received_events_url": "https://api.github.com/users/vhbit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e90a5e72c760cee268b714aced54ed30d04fa3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e90a5e72c760cee268b714aced54ed30d04fa3c", "html_url": "https://github.com/rust-lang/rust/commit/9e90a5e72c760cee268b714aced54ed30d04fa3c"}], "stats": {"total": 147, "additions": 111, "deletions": 36}, "files": [{"sha": "aac773f6f859e685763b24b1ce63d1bb07142d83", "filename": "src/librustrt/stack.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Flibrustrt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Flibrustrt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fstack.rs?ref=d730ae2fb0c455775fb1962454537c79e54f817e", "patch": "@@ -24,6 +24,28 @@\n //! detection is not guaranteed to continue in the future. Usage of this module\n //! is discouraged unless absolutely necessary.\n \n+// iOS related notes\n+//\n+// It is possible to implement it using idea from\n+// http://www.opensource.apple.com/source/Libc/Libc-825.40.1/pthreads/pthread_machdep.h\n+//\n+// In short: _pthread_{get,set}_specific_direct allows extremely fast\n+// access, exactly what is required for segmented stack\n+// There is a pool of reserved slots for Apple internal use (0..119)\n+// First dynamic allocated pthread key starts with 257 (on iOS7)\n+// So using slot 149 should be pretty safe ASSUMING space is reserved\n+// for every key < first dynamic key\n+//\n+// There is also an opportunity to steal keys reserved for Garbage Collection\n+// ranges 80..89 and 110..119, especially considering the fact Garbage Collection\n+// never supposed to work on iOS. But as everybody knows it - there is a chance\n+// that those slots will be re-used, like it happened with key 95 (moved from\n+// JavaScriptCore to CoreText)\n+//\n+// Unfortunately Apple rejected patch to LLVM which generated\n+// corresponding prolog, decision was taken to disable segmented\n+// stack support on iOS.\n+\n pub static RED_ZONE: uint = 20 * 1024;\n \n /// This function is invoked from rust's current __morestack function. Segmented\n@@ -193,14 +215,19 @@ pub unsafe fn record_sp_limit(limit: uint) {\n     // mips, arm - Some brave soul can port these to inline asm, but it's over\n     //             my head personally\n     #[cfg(target_arch = \"mips\")]\n-    #[cfg(target_arch = \"arm\")] #[inline(always)]\n+    #[cfg(target_arch = \"arm\", not(target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_record_sp_limit(limit: uint) {\n         use libc::c_void;\n         return record_sp_limit(limit as *c_void);\n         extern {\n             fn record_sp_limit(limit: *c_void);\n         }\n     }\n+\n+    // iOS segmented stack is disabled for now, see related notes\n+    #[cfg(target_arch = \"arm\", target_os = \"ios\")] #[inline(always)]\n+    unsafe fn target_record_sp_limit(_: uint) {\n+    }\n }\n \n /// The counterpart of the function above, this function will fetch the current\n@@ -267,12 +294,20 @@ pub unsafe fn get_sp_limit() -> uint {\n     // mips, arm - Some brave soul can port these to inline asm, but it's over\n     //             my head personally\n     #[cfg(target_arch = \"mips\")]\n-    #[cfg(target_arch = \"arm\")] #[inline(always)]\n+    #[cfg(target_arch = \"arm\", not(target_os = \"ios\"))] #[inline(always)]\n     unsafe fn target_get_sp_limit() -> uint {\n         use libc::c_void;\n         return get_sp_limit() as uint;\n         extern {\n             fn get_sp_limit() -> *c_void;\n         }\n     }\n+\n+    // iOS doesn't support segmented stacks yet. This function might\n+    // be called by runtime though so it is unsafe to mark it as\n+    // unreachable, let's return a fixed constant.\n+    #[cfg(target_arch = \"arm\", target_os = \"ios\")] #[inline(always)]\n+    unsafe fn target_get_sp_limit() -> uint {\n+        1024\n+    }\n }"}, {"sha": "38fc4827f5861e811ded6db100301a08f6af6b09", "filename": "src/rt/arch/arm/_context.S", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Frt%2Farch%2Farm%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Frt%2Farch%2Farm%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2F_context.S?ref=d730ae2fb0c455775fb1962454537c79e54f817e", "patch": "@@ -12,8 +12,16 @@\n .align\n #endif\n \n-.globl rust_swap_registers\n-rust_swap_registers:\n+#if defined(__APPLE__)\n+  #define SWAP_REGISTERS  _rust_swap_registers\n+  #define BOOTSTRAP_TASK  _rust_bootstrap_green_task\n+#else\n+  #define SWAP_REGISTERS  rust_swap_registers\n+  #define BOOTSTRAP_TASK  rust_bootstrap_green_task\n+#endif\n+        \n+.globl SWAP_REGISTERS\n+SWAP_REGISTERS:\n \tstr r0, [r0, #0]\n \tstr r3, [r0, #12]\n \tstr r4, [r0, #16]\n@@ -53,9 +61,9 @@ rust_swap_registers:\n \tmov pc, lr\n \n // For reasons of this existence, see the comments in x86_64/_context.S\n-.globl rust_bootstrap_green_task\n-rust_bootstrap_green_task:\n-        mov r0, r0\n-        mov r1, r3\n-        mov r2, r4\n-        mov pc, r5\n+.globl BOOTSTRAP_TASK\n+BOOTSTRAP_TASK:\n+    mov r0, r0\n+    mov r1, r3\n+    mov r2, r4\n+    mov pc, r5"}, {"sha": "0b9012cc2a80a27a48cc7fd4b6d0531aae349196", "filename": "src/rt/arch/arm/morestack.S", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Frt%2Farch%2Farm%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Frt%2Farch%2Farm%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fmorestack.S?ref=d730ae2fb0c455775fb1962454537c79e54f817e", "patch": "@@ -8,33 +8,63 @@\n .text\n .code 32\n .arm\n+#if defined(__APPLE__)\n+.align 2\n+#else\n .align\n+#endif\n+\n+#if defined(__APPLE__)\n+#define MORESTACK ___morestack\n+#define STACK_EXHAUSTED _rust_stack_exhausted\n+#else\n+#define MORESTACK __morestack\n+#define STACK_EXHAUSTED rust_stack_exhausted\n+#endif\n+\n+.global STACK_EXHAUSTED\n+.global MORESTACK\n+\n+// Unfortunately LLVM yet doesn't support emitting correct debug\n+// DWARF information for non-ELF targets so to make it compile\n+// on iOS all that directives are simply commented out\n+#if defined(__APPLE__)\n+#define UNWIND @\n+#else\n+#define UNWIND\n+#endif\n \n-.global rust_stack_exhausted\n-.global __morestack\n-.hidden __morestack\n+#if defined(__APPLE__)\n+.private_extern MORESTACK\n+#else\n+.hidden MORESTACK\n+#endif\n+\n+#if !defined(__APPLE__)\n+   .type MORESTACK,%function\n+#endif\n \n // r4 and r5 are scratch registers for __morestack due to llvm\n // ARMFrameLowering::adjustForSegmentedStacks() implementation.\n- .type __morestack,%function\n-__morestack:\n-\t.fnstart\n-\t// Save frame pointer and return address\n-\t.save {r4, r5}\n-\t.save {lr}\n-\t.save {r6, fp, lr}\n+MORESTACK:\n+    UNWIND .fnstart\n+\n+    // Save frame pointer and return address\n+    UNWIND .save {r4, r5}\n+    UNWIND .save {lr}\n+    UNWIND .save {r6, fp, lr}\n     push {r6, fp, lr}\n \n-\t.movsp r6\n-\tmov r6, sp\n-\t.setfp fp, sp, #4\n-\tadd fp, sp, #4\n+    UNWIND .movsp r6\n+    mov r6, sp\n+    UNWIND .setfp fp, sp, #4\n+    add fp, sp, #4\n \n     // Save argument registers of the original function\n     push {r0, r1, r2, r3, lr}\n \n     // Create new stack\n-    bl rust_stack_exhausted@plt\n+    bl STACK_EXHAUSTED@plt\n \n     // the above function ensures that it never returns\n-    .fnend\n+    UNWIND  .fnend"}, {"sha": "94cfcff039e4a3f50d86686c7a42d577d0894030", "filename": "src/rt/arch/arm/record_sp.S", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Frt%2Farch%2Farm%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/d730ae2fb0c455775fb1962454537c79e54f817e/src%2Frt%2Farch%2Farm%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Frecord_sp.S?ref=d730ae2fb0c455775fb1962454537c79e54f817e", "patch": "@@ -1,3 +1,5 @@\n+// Do not compile anything here for iOS\n+#if !defined(__APPLE__)\n // Mark stack as non-executable\n #if defined(__linux__) && defined(__ELF__)\n .section\t.note.GNU-stack, \"\", %progbits\n@@ -6,16 +8,15 @@\n .text\n .code 32\n .arm\n-#if defined(__APPLE__)\n-.align 2\n-#else\n .align\n-#endif\n \n-.globl record_sp_limit\n-.globl get_sp_limit\n+#define RECORD_SP_LIMIT record_sp_limit\n+#define GET_SP_LIMIT    get_sp_limit\n+\n+.globl \tRECORD_SP_LIMIT\n+.globl\tGET_SP_LIMIT\n \n-record_sp_limit:\n+RECORD_SP_LIMIT:\n \t// First, try to read TLS address from coprocessor\n \tmrc p15, #0, r3, c13, c0, #3\n \tcmp r3, #0\n@@ -27,12 +28,12 @@ record_sp_limit:\n \tadd r3, r3, #252\n #elif __linux__\n \tadd r3, r3, #4\n-#endif\n+#endif // ANDROID\n \n \tstr r0, [r3]\n \tmov pc, lr\n \n-get_sp_limit:\n+GET_SP_LIMIT:\n \t// First, try to read TLS address from coprocessor\n \tmrc p15, #0, r3, c13, c0, #3\n \tcmp r3, #0\n@@ -44,7 +45,8 @@ get_sp_limit:\n \tadd r3, r3, #252\n #elif __linux__\n \tadd r3, r3, #4\n-#endif\n+#endif  // __ANDROID__\n \n \tldr r0, [r3]\n \tmov pc, lr\n+#endif"}]}