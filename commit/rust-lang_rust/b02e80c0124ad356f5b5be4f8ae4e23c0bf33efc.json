{"sha": "b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMmU4MGMwMTI0YWQzNTZmNWI1YmU0ZjhhZTRlMjNjMGJmMzNlZmM=", "commit": {"author": {"name": "swgillespie", "email": "sean.william.g@gmail.com", "date": "2015-10-12T02:22:13Z"}, "committer": {"name": "swgillespie", "email": "sean.william.g@gmail.com", "date": "2015-10-12T02:26:23Z"}, "message": "implement 0.0/0.0 -> NaN lint as described in #370\n\ncasing of NaN", "tree": {"sha": "27cec49cd1e21dcbf450627219141dfd79c8ab4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27cec49cd1e21dcbf450627219141dfd79c8ab4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "html_url": "https://github.com/rust-lang/rust/commit/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/comments", "author": {"login": "swgillespie", "id": 1871912, "node_id": "MDQ6VXNlcjE4NzE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1871912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swgillespie", "html_url": "https://github.com/swgillespie", "followers_url": "https://api.github.com/users/swgillespie/followers", "following_url": "https://api.github.com/users/swgillespie/following{/other_user}", "gists_url": "https://api.github.com/users/swgillespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/swgillespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swgillespie/subscriptions", "organizations_url": "https://api.github.com/users/swgillespie/orgs", "repos_url": "https://api.github.com/users/swgillespie/repos", "events_url": "https://api.github.com/users/swgillespie/events{/privacy}", "received_events_url": "https://api.github.com/users/swgillespie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "swgillespie", "id": 1871912, "node_id": "MDQ6VXNlcjE4NzE5MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1871912?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swgillespie", "html_url": "https://github.com/swgillespie", "followers_url": "https://api.github.com/users/swgillespie/followers", "following_url": "https://api.github.com/users/swgillespie/following{/other_user}", "gists_url": "https://api.github.com/users/swgillespie/gists{/gist_id}", "starred_url": "https://api.github.com/users/swgillespie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swgillespie/subscriptions", "organizations_url": "https://api.github.com/users/swgillespie/orgs", "repos_url": "https://api.github.com/users/swgillespie/repos", "events_url": "https://api.github.com/users/swgillespie/events{/privacy}", "received_events_url": "https://api.github.com/users/swgillespie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bb4cbe85959b5d1cf4e1bb72481e55ebd9a1efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb4cbe85959b5d1cf4e1bb72481e55ebd9a1efe", "html_url": "https://github.com/rust-lang/rust/commit/0bb4cbe85959b5d1cf4e1bb72481e55ebd9a1efe"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "44262eba8a1be4aa573671059f1082cfc5c274ac", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 59 lints included in this crate:\n+There are 60 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -68,6 +68,7 @@ name\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                       | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention) | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n [wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)         | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n+[zero_divided_by_zero](https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero)           | warn    | usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\n [zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                   | deny    | using a zero-width space in a string literal, which is confusing\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!"}, {"sha": "8675eb01527c25c86e30abde7b0be117846bcda3", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "patch": "@@ -47,6 +47,7 @@ pub mod loops;\n pub mod ranges;\n pub mod matches;\n pub mod precedence;\n+pub mod zero_div_zero;\n \n mod reexport {\n     pub use syntax::ast::{Name, Ident, NodeId};\n@@ -88,6 +89,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box matches::MatchPass);\n     reg.register_late_lint_pass(box misc::PatternPass);\n     reg.register_late_lint_pass(box minmax::MinMaxPass);\n+    reg.register_late_lint_pass(box zero_div_zero::ZeroDivZeroPass);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         methods::OPTION_UNWRAP_USED,\n@@ -152,5 +154,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         types::TYPE_COMPLEXITY,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n+        zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n }"}, {"sha": "37d5d8904e124cc1094686672fafe8fe21c34145", "filename": "src/zero_div_zero.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/src%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/src%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fzero_div_zero.rs?ref=b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "patch": "@@ -0,0 +1,50 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+\n+use utils::{span_help_and_lint};\n+use consts::{Constant, constant_simple, FloatWidth};\n+\n+/// ZeroDivZeroPass is a pass that checks for a binary expression that consists\n+/// of 0.0/0.0, which is always NaN. It is more clear to replace instances of\n+/// 0.0/0.0 with std::f32::NaN or std::f64::NaN, depending on the precision.\n+pub struct ZeroDivZeroPass;\n+\n+declare_lint!(pub ZERO_DIVIDED_BY_ZERO, Warn,\n+              \"usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\");\n+\n+impl LintPass for ZeroDivZeroPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ZERO_DIVIDED_BY_ZERO)\n+    }\n+}\n+\n+impl LateLintPass for ZeroDivZeroPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        // check for instances of 0.0/0.0\n+        if_let_chain! {\n+            [\n+                let ExprBinary(ref op, ref left, ref right) = expr.node,\n+                let BinOp_::BiDiv = op.node,\n+                // TODO - constant_simple does not fold many operations involving floats.\n+                // That's probably fine for this lint - it's pretty unlikely that someone would\n+                // do something like 0.0/(2.0 - 2.0), but it would be nice to warn on that case too.\n+                let Some(Constant::ConstantFloat(ref lhs_value, lhs_width)) = constant_simple(left),\n+                let Some(Constant::ConstantFloat(ref rhs_value, rhs_width)) = constant_simple(right),\n+                let Some(0.0) = lhs_value.parse().ok(),\n+                let Some(0.0) = rhs_value.parse().ok()\n+            ],\n+            {\n+                // since we're about to suggest a use of std::f32::NaN or std::f64::NaN,\n+                // match the precision of the literals that are given.\n+                let float_type = match (lhs_width, rhs_width) {\n+                    (FloatWidth::Fw64, _)\n+                    | (_, FloatWidth::Fw64) => \"f64\",\n+                    _ => \"f32\"\n+                };\n+                span_help_and_lint(cx, ZERO_DIVIDED_BY_ZERO, expr.span,\n+                    \"constant division of 0.0 with 0.0 will always result in NaN\",\n+                    &format!(\"Consider using `std::{}::NAN` if you would like a constant representing NaN\", float_type));\n+            }\n+        }\n+    }\n+}"}, {"sha": "8c40923d3ed120e31fde3fcf8225b36d0f845a1f", "filename": "tests/compile-fail/zero_div_zero.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/tests%2Fcompile-fail%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc/tests%2Fcompile-fail%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzero_div_zero.rs?ref=b02e80c0124ad356f5b5be4f8ae4e23c0bf33efc", "patch": "@@ -0,0 +1,16 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[allow(unused_variables)]\n+#[deny(zero_divided_by_zero)]\n+fn main() {\n+    let nan = 0.0 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+    let f64_nan = 0.0 / 0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+    let other_f64_nan = 0.0f64 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+    let one_more_f64_nan = 0.0f64/0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+    let zero = 0.0;\n+    let other_zero = 0.0;\n+    let other_nan = zero / other_zero; // fine - this lint doesn't propegate constants.\n+    let not_nan = 2.0/0.0; // not an error: 2/0 = inf\n+    let also_not_nan = 0.0/2.0; // not an error: 0/2 = 0\n+}"}]}