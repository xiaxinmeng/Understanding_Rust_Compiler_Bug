{"sha": "df914e89041bd6a133c6fb642144668bafae5a80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOTE0ZTg5MDQxYmQ2YTEzM2M2ZmI2NDIxNDQ2NjhiYWZhZTVhODA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T22:56:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-11T22:56:23Z"}, "message": "rustc: Intern all types. 4s regression.", "tree": {"sha": "89a782c25693e1da037f868c5f65eeb6a693d7f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a782c25693e1da037f868c5f65eeb6a693d7f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df914e89041bd6a133c6fb642144668bafae5a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df914e89041bd6a133c6fb642144668bafae5a80", "html_url": "https://github.com/rust-lang/rust/commit/df914e89041bd6a133c6fb642144668bafae5a80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df914e89041bd6a133c6fb642144668bafae5a80/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ab36afb1e3bdce8c6cd995aa964d2730aec268", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ab36afb1e3bdce8c6cd995aa964d2730aec268", "html_url": "https://github.com/rust-lang/rust/commit/26ab36afb1e3bdce8c6cd995aa964d2730aec268"}], "stats": {"total": 18, "additions": 1, "deletions": 17}, "files": [{"sha": "04adb69007775f77aca9f7499b1d281b9de37715", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df914e89041bd6a133c6fb642144668bafae5a80/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df914e89041bd6a133c6fb642144668bafae5a80/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=df914e89041bd6a133c6fb642144668bafae5a80", "patch": "@@ -362,12 +362,6 @@ fn mk_ty_full(&sty st, &Option.t[str] cname) -> t {\n fn gen_ty_full(&ctxt cx, &sty st, &Option.t[str] cname) -> t {\n     auto new_type = mk_ty_full(st, cname);\n \n-    // Do not intern anything with locals or vars; it'll be nearly\n-    // single-use anyways, easier to regenerate than fill up the table.\n-    if (new_type.has_locals || new_type.has_vars) {\n-        ret new_type;\n-    }\n-\n     // Is it interned?\n     alt (cx.ts.others.find(new_type)) {\n         case (some[t](?typ)) {\n@@ -1542,17 +1536,7 @@ fn eq_ty_full(&t a, &t b) -> bool {\n \n // This is the equality function the public should use. It works as long as\n // the types are interned.\n-fn eq_ty(&t a, &t b) -> bool {\n-    let bool full = false;\n-    full = full || a.has_vars;\n-    full = full || a.has_locals;\n-    full = full || b.has_vars;\n-    full = full || b.has_locals;\n-    if (full) {\n-        ret eq_ty_full(a, b);\n-    }\n-    ret Box.ptr_eq[raw_t](a, b);\n-}\n+fn eq_ty(&t a, &t b) -> bool { ret Box.ptr_eq[raw_t](a, b); }\n \n \n fn ann_to_type(&ast.ann ann) -> t {"}]}