{"sha": "ecccc0d649088720a8c4af86e1722b9a26ca31dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2NjMGQ2NDkwODg3MjBhOGM0YWY4NmUxNzIyYjlhMjZjYTMxZGM=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-10T06:37:50Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-12T08:03:34Z"}, "message": "Parse inline assembly.", "tree": {"sha": "21b5b6c04db0961eae8bac489905fe6b2d2df05a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b5b6c04db0961eae8bac489905fe6b2d2df05a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecccc0d649088720a8c4af86e1722b9a26ca31dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecccc0d649088720a8c4af86e1722b9a26ca31dc", "html_url": "https://github.com/rust-lang/rust/commit/ecccc0d649088720a8c4af86e1722b9a26ca31dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecccc0d649088720a8c4af86e1722b9a26ca31dc/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e350c7ce7574259dd0aad9f981e615b2b917d20", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e350c7ce7574259dd0aad9f981e615b2b917d20", "html_url": "https://github.com/rust-lang/rust/commit/4e350c7ce7574259dd0aad9f981e615b2b917d20"}], "stats": {"total": 80, "additions": 72, "deletions": 8}, "files": [{"sha": "ccd1ddc243047525c838550603f0e0b7b6f1e55f", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -11,7 +11,7 @@ elseif exists(\"b:current_syntax\")\n endif\n \n syn match     rustAssert      \"\\<assert\\(\\w\\)*\"\n-syn keyword   rustKeyword     as break\n+syn keyword   rustKeyword     __asm__ as break\n syn keyword   rustKeyword     copy do drop else extern\n syn keyword   rustKeyword     for if impl let log\n syn keyword   rustKeyword     loop match mod once priv pub pure"}, {"sha": "629ed75cfdac19b356d92878e12d69038dda2106", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -1433,6 +1433,11 @@ pub mod llvm {\n \n         /** Enables LLVM debug output. */\n         pub unsafe fn LLVMSetDebug(Enabled: c_int);\n+\n+        /** Prepares inline assembly. */\n+        pub unsafe fn LLVMInlineAsm(Ty: TypeRef, AsmString: *c_char,\n+                                    Constraints: *c_char, SideEffects: Bool,\n+                                    AlignStack: Bool) -> ValueRef;\n     }\n }\n "}, {"sha": "d300698da59d131124a790f7df88d4c7e64ad9e7", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -620,7 +620,8 @@ fn visit_expr(expr: @expr, &&self: @mut IrMaps, vt: vt<@mut IrMaps>) {\n       expr_do_body(*) | expr_cast(*) | expr_unary(*) | expr_break(_) |\n       expr_again(_) | expr_lit(_) | expr_ret(*) | expr_block(*) |\n       expr_assign(*) | expr_swap(*) | expr_assign_op(*) | expr_mac(*) |\n-      expr_struct(*) | expr_repeat(*) | expr_paren(*) => {\n+      expr_struct(*) | expr_repeat(*) | expr_paren(*) |\n+      expr_inline_asm(*) => {\n           visit::visit_expr(expr, self, vt);\n       }\n     }\n@@ -1345,6 +1346,7 @@ pub impl Liveness {\n             self.propagate_through_expr(e, succ)\n           }\n \n+          expr_inline_asm(*) |\n           expr_lit(*) => {\n             succ\n           }\n@@ -1618,7 +1620,7 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n       expr_cast(*) | expr_unary(*) | expr_ret(*) | expr_break(*) |\n       expr_again(*) | expr_lit(_) | expr_block(*) | expr_swap(*) |\n       expr_mac(*) | expr_addr_of(*) | expr_struct(*) | expr_repeat(*) |\n-      expr_paren(*) => {\n+      expr_paren(*) | expr_inline_asm(*) => {\n         visit::visit_expr(expr, self, vt);\n       }\n     }"}, {"sha": "5881f95f298693439042a18f5c9531294642442b", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -447,7 +447,7 @@ pub impl mem_categorization_ctxt {\n           ast::expr_while(*) | ast::expr_block(*) | ast::expr_loop(*) |\n           ast::expr_match(*) | ast::expr_lit(*) | ast::expr_break(*) |\n           ast::expr_mac(*) | ast::expr_again(*) | ast::expr_struct(*) |\n-          ast::expr_repeat(*) => {\n+          ast::expr_repeat(*) | ast::expr_inline_asm(*) => {\n             return self.cat_rvalue(expr, expr_ty);\n           }\n         }"}, {"sha": "734f4651f3bede040a04f4561ddb7b78e9c3b30d", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -560,7 +560,8 @@ pub impl VisitContext {\n \n             expr_break(*) |\n             expr_again(*) |\n-            expr_lit(*) => {}\n+            expr_lit(*)   |\n+            expr_inline_asm(*) => {}\n \n             expr_loop(ref blk, _) => {\n                 self.consume_block(blk, visitor);"}, {"sha": "93459042d23c07450d5d9d43374cbffb0e8f9c70", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -18,7 +18,7 @@ use syntax::codemap::span;\n \n use core::prelude::*;\n use core::cast;\n-use core::libc::{c_uint, c_int, c_ulonglong};\n+use core::libc::{c_uint, c_int, c_ulonglong, c_char};\n use core::libc;\n use core::option::Some;\n use core::ptr;\n@@ -872,6 +872,17 @@ pub fn add_comment(bcx: block, text: &str) {\n     }\n }\n \n+pub fn InlineAsmCall(cx: block, asm: *c_char, cons: *c_char) -> ValueRef {\n+    unsafe {\n+        count_insn(cx, \"inlineasm\");\n+\n+        let llfty = T_fn(~[], T_void());\n+        let v = llvm::LLVMInlineAsm(llfty, asm, cons, False, False);\n+\n+        Call(cx, v, ~[])\n+    }\n+}\n+\n pub fn Call(cx: block, Fn: ValueRef, Args: &[ValueRef]) -> ValueRef {\n     if cx.unreachable { return _UndefReturn(cx, Fn); }\n     unsafe {"}, {"sha": "9012d2587185cba0249a1285603cb94ed2c69096", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -691,6 +691,14 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_assign_op(op, dst, src) => {\n             return trans_assign_op(bcx, expr, op, dst, src);\n         }\n+        ast::expr_inline_asm(asm, cons) => {\n+            do str::as_c_str(*asm) |a| {\n+                do str::as_c_str(*cons) |c| {\n+                    InlineAsmCall(bcx, a, c);\n+                }\n+            }\n+            return bcx;\n+        }\n         _ => {\n             bcx.tcx().sess.span_bug(\n                 expr.span,"}, {"sha": "9a0c330d2d106a8a8b79050e3a864b4ad653f7d7", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -353,7 +353,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n       expr_match(*) | expr_block(_) | expr_if(*) | expr_while(*) |\n       expr_break(_) | expr_again(_) | expr_unary(_, _) | expr_lit(_) |\n       expr_mac(_) | expr_addr_of(_, _) | expr_ret(_) | expr_loop(_, _) |\n-      expr_loop_body(_) | expr_do_body(_) => ()\n+      expr_loop_body(_) | expr_do_body(_) | expr_inline_asm(*) => ()\n     }\n }\n "}, {"sha": "6e21439fc3563174d14514457d6751bd4de340a4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -3076,6 +3076,7 @@ pub fn expr_kind(tcx: ctxt,\n         ast::expr_block(*) |\n         ast::expr_copy(*) |\n         ast::expr_repeat(*) |\n+        ast::expr_inline_asm(*) |\n         ast::expr_lit(@codemap::spanned {node: lit_str(_), _}) |\n         ast::expr_vstore(_, ast::expr_vstore_slice) |\n         ast::expr_vstore(_, ast::expr_vstore_mut_slice) |"}, {"sha": "bd36eb1cf5603e05043371ab009c38845de01331", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -2303,6 +2303,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let region_lb = ty::re_scope(expr.id);\n         instantiate_path(fcx, pth, tpt, expr.span, expr.id, region_lb);\n       }\n+      ast::expr_inline_asm(*) => { fcx.write_nil(id); }\n       ast::expr_mac(_) => tcx.sess.bug(~\"unexpanded macro\"),\n       ast::expr_break(_) => { fcx.write_bot(id); bot = true; }\n       ast::expr_again(_) => { fcx.write_bot(id); bot = true; }"}, {"sha": "1dd88e6408ba0e8d8058fcf45dcbbefbcd0466ef", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -682,6 +682,7 @@ pub mod guarantor {\n \n             // All of these expressions are rvalues and hence their\n             // value is not guaranteed by a region pointer.\n+            ast::expr_inline_asm(*) |\n             ast::expr_mac(*) |\n             ast::expr_lit(_) |\n             ast::expr_unary(*) |"}, {"sha": "b7c30360613f9d0ea1a8b1ac1d985481282e7ee6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -600,6 +600,8 @@ pub enum expr_ {\n     expr_again(Option<ident>),\n     expr_ret(Option<@expr>),\n     expr_log(log_level, @expr, @expr),\n+    \n+    expr_inline_asm(@~str /* asm */, @~str /* constraints */),\n \n     expr_mac(mac),\n "}, {"sha": "15097f57b02e03e1fc830757a3b8af30f43e8aec", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -560,6 +560,7 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 fld.fold_expr(e)\n             )\n         }\n+        expr_inline_asm(*) => copy *e,\n         expr_mac(ref mac) => expr_mac(fold_mac((*mac))),\n         expr_struct(path, ref fields, maybe_expr) => {\n             expr_struct("}, {"sha": "6076ad0ce0ea3d577b22584fe80a377232d36b3b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -27,7 +27,7 @@ use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n-use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n+use ast::{expr_vec, expr_vstore, expr_vstore_mut_box, expr_inline_asm};\n use ast::{expr_vstore_fixed, expr_vstore_slice, expr_vstore_box};\n use ast::{expr_vstore_mut_slice, expr_while, extern_fn, field, fn_decl};\n use ast::{expr_vstore_uniq, TyClosure, TyBareFn, Onceness, Once, Many};\n@@ -1184,6 +1184,14 @@ pub impl Parser {\n                 }\n             }\n             hi = self.span.hi;\n+        } else if self.eat_keyword(&~\"__asm__\") {\n+            self.expect(&token::LPAREN);\n+            let asm = self.parse_str();\n+            self.expect(&token::COMMA);\n+            let cons = self.parse_str();\n+            ex = expr_inline_asm(asm, cons);\n+            hi = self.span.hi;\n+            self.expect(&token::RPAREN);\n         } else if self.eat_keyword(&~\"log\") {\n             self.expect(&token::LPAREN);\n             let lvl = self.parse_expr();"}, {"sha": "5cfe0bef9b86075f8acdd77f807784343b4040d3", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -488,6 +488,7 @@ pub fn temporary_keyword_table() -> HashMap<~str, ()> {\n pub fn strict_keyword_table() -> HashMap<~str, ()> {\n     let words = HashMap();\n     let keys = ~[\n+        ~\"__asm__\",\n         ~\"as\", ~\"assert\",\n         ~\"break\",\n         ~\"const\", ~\"copy\","}, {"sha": "350ab0cf9b29732168fcd74c8406e0cdf86eba01", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -1398,6 +1398,14 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n           }\n         }\n       }\n+      ast::expr_inline_asm(a, c) => {\n+        word(s.s, ~\"__asm__\");\n+        popen(s);\n+        print_string(s, *a);\n+        word_space(s, ~\", \");\n+        print_string(s, *c);\n+        pclose(s);\n+      }\n       ast::expr_mac(ref m) => print_mac(s, (*m)),\n       ast::expr_paren(e) => {\n           popen(s);"}, {"sha": "95ab603f584330804e888b989a1c00a3801b3dbf", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -562,6 +562,7 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         }\n         expr_mac(ref mac) => visit_mac((*mac), e, v),\n         expr_paren(x) => (v.visit_expr)(x, e, v),\n+        expr_inline_asm(*) => (),\n     }\n     (v.visit_expr_post)(ex, e, v);\n }"}, {"sha": "f5efed5f3a01db7626cfcb54bbe2ba47f09f9c96", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -15,6 +15,7 @@\n //\n //===----------------------------------------------------------------------===\n \n+#include \"llvm/InlineAsm.h\"\n #include \"llvm/LLVMContext.h\"\n #include \"llvm/Linker.h\"\n #include \"llvm/PassManager.h\"\n@@ -539,3 +540,14 @@ extern \"C\" void LLVMSetDebug(int Enabled) {\n   DebugFlag = Enabled;\n #endif\n }\n+\n+extern \"C\" LLVMValueRef LLVMInlineAsm(LLVMTypeRef Ty,\n+                                      char *AsmString,\n+                                      char *Constraints,\n+                                      LLVMBool HasSideEffects,\n+                                      LLVMBool IsAlignStack) {\n+    return wrap(InlineAsm::get(unwrap<FunctionType>(Ty), AsmString,\n+                               Constraints, HasSideEffects,\n+                               IsAlignStack));\n+//                               IsAlignStack, InlineAsm::AD_Intel));\n+}"}, {"sha": "8b1c9d5ec7fbcc4587e2130101de2d661e9b5902", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/ecccc0d649088720a8c4af86e1722b9a26ca31dc/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=ecccc0d649088720a8c4af86e1722b9a26ca31dc", "patch": "@@ -583,3 +583,4 @@ LLVMX86MMXTypeInContext\n LLVMConstNamedStruct\n LLVMStructCreateNamed\n LLVMStructSetBody\n+LLVMInlineAsm"}]}