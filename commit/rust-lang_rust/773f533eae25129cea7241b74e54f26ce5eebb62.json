{"sha": "773f533eae25129cea7241b74e54f26ce5eebb62", "node_id": "C_kwDOAAsO6NoAKDc3M2Y1MzNlYWUyNTEyOWNlYTcyNDFiNzRlNTRmMjZjZTVlZWJiNjI", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-04-02T21:54:51Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-04-18T19:50:56Z"}, "message": "Synthesis object file for `#[used]` and exported symbols", "tree": {"sha": "966b18c563ba92671a3f7e39d63e496bd43f63ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/966b18c563ba92671a3f7e39d63e496bd43f63ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/773f533eae25129cea7241b74e54f26ce5eebb62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/773f533eae25129cea7241b74e54f26ce5eebb62", "html_url": "https://github.com/rust-lang/rust/commit/773f533eae25129cea7241b74e54f26ce5eebb62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/773f533eae25129cea7241b74e54f26ce5eebb62/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1dae4bc9d708bfea8a8bb5996e96de5c5180f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1dae4bc9d708bfea8a8bb5996e96de5c5180f7f", "html_url": "https://github.com/rust-lang/rust/commit/a1dae4bc9d708bfea8a8bb5996e96de5c5180f7f"}], "stats": {"total": 190, "additions": 182, "deletions": 8}, "files": [{"sha": "45ae5ffc5131e93b91d2ead4dac0b4c031d48e43", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=773f533eae25129cea7241b74e54f26ce5eebb62", "patch": "@@ -7,6 +7,7 @@ use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::dependency_format::Linkage;\n+use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, SplitDwarfKind};\n use rustc_session::cstore::DllImport;\n@@ -1654,6 +1655,67 @@ fn add_post_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor\n     }\n }\n \n+/// Add a synthetic object file that contains reference to all symbols that we want to expose to\n+/// the linker.\n+///\n+/// Background: we implement rlibs as static library (archives). Linkers treat archives\n+/// differently from object files: all object files participate in linking, while archives will\n+/// only participate in linking if they can satisfy at least one undefined reference (version\n+/// scripts doesn't count). This causes `#[no_mangle]` or `#[used]` items to be ignored by the\n+/// linker, and since they never participate in the linking, using `KEEP` in the linker scripts\n+/// can't keep them either. This causes #47384.\n+///\n+/// To keep them around, we could use `--whole-archive` and equivalents to force rlib to\n+/// participate in linking like object files, but this proves to be expensive (#93791). Therefore\n+/// we instead just introduce an undefined reference to them. This could be done by `-u` command\n+/// line option to the linker or `EXTERN(...)` in linker scripts, however they does not only\n+/// introduce an undefined reference, but also make them the GC roots, preventing `--gc-sections`\n+/// from removing them, and this is especially problematic for embedded programming where every\n+/// byte counts.\n+///\n+/// This method creates a synthetic object file, which contains undefined references to all symbols\n+/// that are necessary for the linking. They are only present in symbol table but not actually\n+/// used in any sections, so the linker will therefore pick relevant rlibs for linking, but\n+/// unused `#[no_mangle]` or `#[used]` can still be discard by GC sections.\n+fn add_linked_symbol_object(\n+    cmd: &mut dyn Linker,\n+    sess: &Session,\n+    tmpdir: &Path,\n+    symbols: &[(String, SymbolExportKind)],\n+) {\n+    if symbols.is_empty() {\n+        return;\n+    }\n+\n+    let Some(mut file) = super::metadata::create_object_file(sess) else {\n+        return;\n+    };\n+\n+    for (sym, kind) in symbols.iter() {\n+        file.add_symbol(object::write::Symbol {\n+            name: sym.clone().into(),\n+            value: 0,\n+            size: 0,\n+            kind: match kind {\n+                SymbolExportKind::Text => object::SymbolKind::Text,\n+                SymbolExportKind::Data => object::SymbolKind::Data,\n+                SymbolExportKind::Tls => object::SymbolKind::Tls,\n+            },\n+            scope: object::SymbolScope::Unknown,\n+            weak: false,\n+            section: object::write::SymbolSection::Undefined,\n+            flags: object::SymbolFlags::None,\n+        });\n+    }\n+\n+    let path = tmpdir.join(\"symbols.o\");\n+    let result = std::fs::write(&path, file.write().unwrap());\n+    if let Err(e) = result {\n+        sess.fatal(&format!(\"failed to write {}: {}\", path.display(), e));\n+    }\n+    cmd.add_object(&path);\n+}\n+\n /// Add object files containing code from the current crate.\n fn add_local_crate_regular_objects(cmd: &mut dyn Linker, codegen_results: &CodegenResults) {\n     for obj in codegen_results.modules.iter().filter_map(|m| m.object.as_ref()) {\n@@ -1794,6 +1856,13 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // Pre-link CRT objects.\n     add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n \n+    add_linked_symbol_object(\n+        cmd,\n+        sess,\n+        tmpdir,\n+        &codegen_results.crate_info.linked_symbols[&crate_type],\n+    );\n+\n     // Sanitizer libraries.\n     add_sanitizer_libraries(sess, crate_type, cmd);\n "}, {"sha": "044dd9556fed07f9fbd9510f0c1a9a9cb1f6a3c3", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=773f533eae25129cea7241b74e54f26ce5eebb62", "patch": "@@ -12,6 +12,7 @@ use std::{env, mem, str};\n \n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::dependency_format::Linkage;\n+use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::{json, Encoder};\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n@@ -1557,6 +1558,51 @@ pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<St\n     symbols\n }\n \n+pub(crate) fn linked_symbols(\n+    tcx: TyCtxt<'_>,\n+    crate_type: CrateType,\n+) -> Vec<(String, SymbolExportKind)> {\n+    match crate_type {\n+        CrateType::Executable | CrateType::Cdylib => (),\n+        CrateType::Staticlib | CrateType::ProcMacro | CrateType::Rlib | CrateType::Dylib => {\n+            return Vec::new();\n+        }\n+    }\n+\n+    let mut symbols = Vec::new();\n+\n+    let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n+    for &(symbol, info) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n+        if info.level.is_below_threshold(export_threshold) || info.used {\n+            symbols.push((\n+                symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, LOCAL_CRATE),\n+                info.kind,\n+            ));\n+        }\n+    }\n+\n+    let formats = tcx.dependency_formats(());\n+    let deps = formats.iter().find_map(|(t, list)| (*t == crate_type).then_some(list)).unwrap();\n+\n+    for (index, dep_format) in deps.iter().enumerate() {\n+        let cnum = CrateNum::new(index + 1);\n+        // For each dependency that we are linking to statically ...\n+        if *dep_format == Linkage::Static {\n+            // ... we add its symbol list to our export list.\n+            for &(symbol, info) in tcx.exported_symbols(cnum).iter() {\n+                if info.level.is_below_threshold(export_threshold) || info.used {\n+                    symbols.push((\n+                        symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum),\n+                        info.kind,\n+                    ));\n+                }\n+            }\n+        }\n+    }\n+\n+    symbols\n+}\n+\n /// Much simplified and explicit CLI for the NVPTX linker. The linker operates\n /// with bitcode and uses LLVM backend to generate a PTX assembly.\n pub struct PtxLinker<'a> {"}, {"sha": "2e42272805682ec71881c2fc07162ac265f1872b", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=773f533eae25129cea7241b74e54f26ce5eebb62", "patch": "@@ -94,7 +94,7 @@ fn search_for_metadata<'a>(\n         .map_err(|e| format!(\"failed to read {} section in '{}': {}\", section, path.display(), e))\n }\n \n-fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n+pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n     let endianness = match sess.target.options.endian {\n         Endian::Little => Endianness::Little,\n         Endian::Big => Endianness::Big,"}, {"sha": "56159cc2e08c54c8947736a3d79144e37993409b", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=773f533eae25129cea7241b74e54f26ce5eebb62", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::{\n-    metadata_symbol_name, ExportedSymbol, SymbolExportInfo, SymbolExportLevel,\n+    metadata_symbol_name, ExportedSymbol, SymbolExportInfo, SymbolExportKind, SymbolExportLevel,\n };\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n@@ -124,21 +124,37 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n             } else {\n                 symbol_export_level(tcx, def_id.to_def_id())\n             };\n+            let codegen_attrs = tcx.codegen_fn_attrs(def_id.to_def_id());\n             debug!(\n                 \"EXPORTED SYMBOL (local): {} ({:?})\",\n                 tcx.symbol_name(Instance::mono(tcx, def_id.to_def_id())),\n                 export_level\n             );\n             (def_id.to_def_id(), SymbolExportInfo {\n                 level: export_level,\n+                kind: if tcx.is_static(def_id.to_def_id()) {\n+                    if codegen_attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL) {\n+                        SymbolExportKind::Tls\n+                    } else {\n+                        SymbolExportKind::Data\n+                    }\n+                } else {\n+                    SymbolExportKind::Text\n+                },\n+                used: codegen_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+                    || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER),\n             })\n         })\n         .collect();\n \n     if let Some(id) = tcx.proc_macro_decls_static(()) {\n         reachable_non_generics.insert(\n             id.to_def_id(),\n-            SymbolExportInfo { level: SymbolExportLevel::C },\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::C,\n+                kind: SymbolExportKind::Data,\n+                used: false,\n+            },\n         );\n     }\n \n@@ -180,7 +196,11 @@ fn exported_symbols_provider_local<'tcx>(\n \n         symbols.push((\n             exported_symbol,\n-            SymbolExportInfo { level: SymbolExportLevel::C },\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::C,\n+                kind: SymbolExportKind::Text,\n+                used: false,\n+            },\n         ));\n     }\n \n@@ -191,7 +211,11 @@ fn exported_symbols_provider_local<'tcx>(\n \n             symbols.push((\n                 exported_symbol,\n-                SymbolExportInfo { level: SymbolExportLevel::Rust },\n+                SymbolExportInfo {\n+                    level: SymbolExportLevel::Rust,\n+                    kind: SymbolExportKind::Text,\n+                    used: false,\n+                },\n             ));\n         }\n     }\n@@ -207,7 +231,11 @@ fn exported_symbols_provider_local<'tcx>(\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n             (\n                 exported_symbol,\n-                SymbolExportInfo { level: SymbolExportLevel::C },\n+                SymbolExportInfo {\n+                    level: SymbolExportLevel::C,\n+                    kind: SymbolExportKind::Data,\n+                    used: false,\n+                },\n             )\n         }));\n     }\n@@ -220,7 +248,11 @@ fn exported_symbols_provider_local<'tcx>(\n             let exported_symbol = ExportedSymbol::NoDefId(SymbolName::new(tcx, sym));\n             (\n                 exported_symbol,\n-                SymbolExportInfo { level: SymbolExportLevel::C },\n+                SymbolExportInfo {\n+                    level: SymbolExportLevel::C,\n+                    kind: SymbolExportKind::Data,\n+                    used: false,\n+                },\n             )\n         }));\n     }\n@@ -231,7 +263,11 @@ fn exported_symbols_provider_local<'tcx>(\n \n         symbols.push((\n             exported_symbol,\n-            SymbolExportInfo { level: SymbolExportLevel::Rust },\n+            SymbolExportInfo {\n+                level: SymbolExportLevel::Rust,\n+                kind: SymbolExportKind::Data,\n+                used: false,\n+            },\n         ));\n     }\n \n@@ -269,6 +305,8 @@ fn exported_symbols_provider_local<'tcx>(\n                             symbol,\n                             SymbolExportInfo {\n                                 level: SymbolExportLevel::Rust,\n+                                kind: SymbolExportKind::Text,\n+                                used: false,\n                             },\n                         ));\n                     }\n@@ -283,6 +321,8 @@ fn exported_symbols_provider_local<'tcx>(\n                         ExportedSymbol::DropGlue(ty),\n                         SymbolExportInfo {\n                             level: SymbolExportLevel::Rust,\n+                            kind: SymbolExportKind::Text,\n+                            used: false,\n                         },\n                     ));\n                 }"}, {"sha": "5a1d0208842785691343ee3287ae178b6d672228", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=773f533eae25129cea7241b74e54f26ce5eebb62", "patch": "@@ -801,6 +801,12 @@ impl CrateInfo {\n             .iter()\n             .map(|&c| (c, crate::back::linker::exported_symbols(tcx, c)))\n             .collect();\n+        let linked_symbols = tcx\n+            .sess\n+            .crate_types()\n+            .iter()\n+            .map(|&c| (c, crate::back::linker::linked_symbols(tcx, c)))\n+            .collect();\n         let local_crate_name = tcx.crate_name(LOCAL_CRATE);\n         let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n         let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n@@ -834,6 +840,7 @@ impl CrateInfo {\n         let mut info = CrateInfo {\n             target_cpu,\n             exported_symbols,\n+            linked_symbols,\n             local_crate_name,\n             compiler_builtins: None,\n             profiler_runtime: None,"}, {"sha": "f3d5bb4bc624a5c4bff38c2b329fc43f64c9a35f", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=773f533eae25129cea7241b74e54f26ce5eebb62", "patch": "@@ -28,6 +28,7 @@ use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n+use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n@@ -140,6 +141,7 @@ impl From<&cstore::NativeLib> for NativeLib {\n pub struct CrateInfo {\n     pub target_cpu: String,\n     pub exported_symbols: FxHashMap<CrateType, Vec<String>>,\n+    pub linked_symbols: FxHashMap<CrateType, Vec<(String, SymbolExportKind)>>,\n     pub local_crate_name: Symbol,\n     pub compiler_builtins: Option<CrateNum>,\n     pub profiler_runtime: Option<CrateNum>,"}, {"sha": "631fd09ec4cf6e10916ec9a5a589bee48ebf046b", "filename": "compiler/rustc_middle/src/middle/exported_symbols.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f533eae25129cea7241b74e54f26ce5eebb62/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fexported_symbols.rs?ref=773f533eae25129cea7241b74e54f26ce5eebb62", "patch": "@@ -21,11 +21,21 @@ impl SymbolExportLevel {\n     }\n }\n \n+/// Kind of exported symbols.\n+#[derive(Eq, PartialEq, Debug, Copy, Clone, Encodable, Decodable, HashStable)]\n+pub enum SymbolExportKind {\n+    Text,\n+    Data,\n+    Tls,\n+}\n+\n /// The `SymbolExportInfo` of a symbols specifies symbol-related information\n /// that is relevant to code generation and linking.\n #[derive(Eq, PartialEq, Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub struct SymbolExportInfo {\n     pub level: SymbolExportLevel,\n+    pub kind: SymbolExportKind,\n+    pub used: bool,\n }\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]"}]}