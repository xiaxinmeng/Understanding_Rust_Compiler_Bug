{"sha": "529fd2da894ff290668d6c1524909ba218d5822b", "node_id": "C_kwDOAAsO6NoAKDUyOWZkMmRhODk0ZmYyOTA2NjhkNmMxNTI0OTA5YmEyMThkNTgyMmI", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-08T08:07:35Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-08T08:07:35Z"}, "message": "suggest adding `{ .. }` around a const function with arguments", "tree": {"sha": "a4389c223922884f3203573bae237cc8cff1d093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4389c223922884f3203573bae237cc8cff1d093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529fd2da894ff290668d6c1524909ba218d5822b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529fd2da894ff290668d6c1524909ba218d5822b", "html_url": "https://github.com/rust-lang/rust/commit/529fd2da894ff290668d6c1524909ba218d5822b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529fd2da894ff290668d6c1524909ba218d5822b/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53e19540e7e201042c8b07a236e5351de085a42", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53e19540e7e201042c8b07a236e5351de085a42", "html_url": "https://github.com/rust-lang/rust/commit/d53e19540e7e201042c8b07a236e5351de085a42"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "0bccf4dc2cef63ef40061095a48467ab97dd9f25", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/529fd2da894ff290668d6c1524909ba218d5822b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529fd2da894ff290668d6c1524909ba218d5822b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=529fd2da894ff290668d6c1524909ba218d5822b", "patch": "@@ -624,9 +624,18 @@ impl<'a> Parser<'a> {\n             GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n             // Parse type argument.\n+            let is_const_fn = self.look_ahead(1, |t| t.kind == token::OpenDelim(token::Paren));\n+            let mut snapshot = self.clone();\n             match self.parse_ty() {\n                 Ok(ty) => GenericArg::Type(ty),\n                 Err(err) => {\n+                    if is_const_fn {\n+                        if let Ok(expr) = snapshot.parse_expr_res(Restrictions::CONST_EXPR, None) {\n+                            *self = snapshot;\n+                            return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n+                        }\n+                    }\n+                    // self.parse_fn_call_expr();\n                     // Try to recover from possible `const` arg without braces.\n                     return self.recover_const_arg(start, err).map(Some);\n                 }"}, {"sha": "c8d2683e53f47267f7dee7c466444886eeff93d7", "filename": "src/test/ui/const-generics/const-generic-function.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/529fd2da894ff290668d6c1524909ba218d5822b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529fd2da894ff290668d6c1524909ba218d5822b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs?ref=529fd2da894ff290668d6c1524909ba218d5822b", "patch": "@@ -0,0 +1,21 @@\n+fn foo<const N: i32>() -> i32 {\n+    N\n+}\n+\n+const fn bar(n: i32, m: i32) -> i32 {\n+    n\n+}\n+\n+const fn baz() -> i32 {\n+    1\n+}\n+\n+const FOO: i32 = 3;\n+\n+fn main() {\n+    foo::<baz()>(); //~ ERROR expected type, found function `baz`\n+    //~| ERROR unresolved item provided when a constant was expected\n+    foo::<bar(bar(1, 1), bar(1, 1))>(); //~ ERROR expected type, found `1`\n+    foo::<bar(1, 1)>(); //~ ERROR expected type, found `1`\n+    foo::<bar(FOO, 2)>(); //~ ERROR expected type, found `2`\n+}"}, {"sha": "5ad3f1006c17d59e7652cb4f8ea82d0df68b2f3a", "filename": "src/test/ui/const-generics/const-generic-function.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/529fd2da894ff290668d6c1524909ba218d5822b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/529fd2da894ff290668d6c1524909ba218d5822b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr?ref=529fd2da894ff290668d6c1524909ba218d5822b", "patch": "@@ -0,0 +1,54 @@\n+error: expected type, found `1`\n+  --> $DIR/const-generic-function.rs:18:19\n+   |\n+LL |     foo::<bar(bar(1, 1), bar(1, 1))>();\n+   |                   ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(bar(1, 1), bar(1, 1)) }>();\n+   |           +                           +\n+\n+error: expected type, found `1`\n+  --> $DIR/const-generic-function.rs:19:15\n+   |\n+LL |     foo::<bar(1, 1)>();\n+   |               ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(1, 1) }>();\n+   |           +           +\n+\n+error: expected type, found `2`\n+  --> $DIR/const-generic-function.rs:20:20\n+   |\n+LL |     foo::<bar(FOO, 2)>();\n+   |                    ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(FOO, 2) }>();\n+   |           +             +\n+\n+error[E0573]: expected type, found function `baz`\n+  --> $DIR/const-generic-function.rs:16:11\n+   |\n+LL |     foo::<baz()>();\n+   |           ^^^^^ not a type\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-generic-function.rs:16:11\n+   |\n+LL |     foo::<baz()>();\n+   |           ^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     foo::<{ baz() }>();\n+   |           +       +\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0573, E0747.\n+For more information about an error, try `rustc --explain E0573`."}]}