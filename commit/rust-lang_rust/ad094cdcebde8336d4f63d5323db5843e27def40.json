{"sha": "ad094cdcebde8336d4f63d5323db5843e27def40", "node_id": "C_kwDOAAsO6NoAKGFkMDk0Y2RjZWJkZTgzMzZkNGY2M2Q1MzIzZGI1ODQzZTI3ZGVmNDA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-16T18:58:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-11-23T12:24:42Z"}, "message": "Use ObligationCtxt intead of dyn TraitEngine", "tree": {"sha": "4211073ef06569c28ff1be7332ce13878a27b0b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4211073ef06569c28ff1be7332ce13878a27b0b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad094cdcebde8336d4f63d5323db5843e27def40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmN+EQoACgkQgTGiTgx5\n76/WvA/+Jw29nI6PQcD2NvFX1SFSN2yV2to2NLoiRnRcqqHlaNED1RWa0R/47r3u\nZ4/d8+sIeuupaXnLFAPuJ6EN7bnhBIknmDX/ql44oN3kKW4YrlPV4kAWRTv+JNFv\nkoi0tjzy+4CiC1XEX/vjaGSPtLKoCWIXscYhXFBzSh90cLcvbsLgDcri7p5w2Mp2\nqBdLcML+KjmIIiuZAVadMovvALovkvt8SFLJHiH+zPWyPsCJuNSK2fxNvLVqdcHi\n1ooo01QFNJgVVfeMZzgHR2Tp1Gz9T3ssp1lbqgx66HQKIWY1UdS4bmoYfpebEaY4\nc/vZcDFDY+CaMKWVKHcHIrccAaxGaeOqz19CZ2wSUhBwTFfSTcZ8XI4WBFPqZFRk\n00J/HiC7ZP/Y9NvLDdPeZbVHMscOqL2qOr65tx5A9KLgE3MM1f1PD+cyJKnDW8um\nPpZbZTXLPSGgviU9rO354AcWUDh39avPITpv7bJ0oi7C/hJXm5Fi/4ADfQzDPUYY\nnu4knTpuYgiJRS4lYHTtEQL8yePlgXL9BqeKfKveubBxTEk9WlsIN9x4vm9CBg8U\nE77n8vzPNzgS9PF/fUunG4WEwa119jGMztOGW80N1ACWL65SUd9CHoUQ6ZEEHSN8\n7ebCWh3ZqEJBsZEqiiWKngNiuR8ePTe9PeYlFUgkDK1kJ6PW09s=\n=Fd2x\n-----END PGP SIGNATURE-----", "payload": "tree 4211073ef06569c28ff1be7332ce13878a27b0b2\nparent 3f2b2eee8f46f2252d2919d7a57bf3068d7df285\nauthor Santiago Pastorino <spastorino@gmail.com> 1668625128 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1669206282 -0300\n\nUse ObligationCtxt intead of dyn TraitEngine\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad094cdcebde8336d4f63d5323db5843e27def40", "html_url": "https://github.com/rust-lang/rust/commit/ad094cdcebde8336d4f63d5323db5843e27def40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad094cdcebde8336d4f63d5323db5843e27def40/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2b2eee8f46f2252d2919d7a57bf3068d7df285", "html_url": "https://github.com/rust-lang/rust/commit/3f2b2eee8f46f2252d2919d7a57bf3068d7df285"}], "stats": {"total": 77, "additions": 30, "deletions": 47}, "files": [{"sha": "3f0d0a76027f45ca49a0bc3473037f465bfe799c", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=ad094cdcebde8336d4f63d5323db5843e27def40", "patch": "@@ -46,7 +46,7 @@ use rustc_hir::Expr;\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n-use rustc_infer::traits::{Obligation, TraitEngine, TraitEngineExt};\n+use rustc_infer::traits::Obligation;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n@@ -62,8 +62,7 @@ use rustc_span::{self, BytePos, DesugaringKind, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::TraitEngineExt as _;\n-use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n+use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, ObligationCtxt};\n \n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n@@ -1055,9 +1054,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let Ok(ok) = coerce.coerce(source, target) else {\n                 return false;\n             };\n-            let mut fcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n-            fcx.register_predicate_obligations(self, ok.obligations);\n-            fcx.select_where_possible(&self).is_empty()\n+            let ocx = ObligationCtxt::new_in_snapshot(self);\n+            ocx.register_obligations(ok.obligations);\n+            ocx.select_where_possible().is_empty()\n         })\n     }\n "}, {"sha": "de31eb1aa571941879d902b032618533ea9900af", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ad094cdcebde8336d4f63d5323db5843e27def40", "patch": "@@ -4,13 +4,12 @@ pub mod suggestions;\n \n use super::{\n     FulfillmentError, FulfillmentErrorCode, MismatchedProjectionTypes, Obligation, ObligationCause,\n-    ObligationCauseCode, OutputTypeParameterMismatch, Overflow, PredicateObligation,\n-    SelectionContext, SelectionError, TraitNotObjectSafe,\n+    ObligationCauseCode, ObligationCtxt, OutputTypeParameterMismatch, Overflow,\n+    PredicateObligation, SelectionContext, SelectionError, TraitNotObjectSafe,\n };\n use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCode};\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n-use crate::traits::engine::TraitEngineExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n use crate::traits::query::normalize::AtExt as _;\n use crate::traits::specialize::to_pretty_impl_header;\n@@ -30,7 +29,6 @@ use rustc_hir::Item;\n use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::TypeTrace;\n-use rustc_infer::traits::TraitEngine;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -354,9 +352,9 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     param_env,\n                     ty.rebind(ty::TraitPredicate { trait_ref, constness, polarity }),\n                 );\n-                let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n-                fulfill_cx.register_predicate_obligation(self, obligation);\n-                if fulfill_cx.select_all_or_error(self).is_empty() {\n+                let ocx = ObligationCtxt::new_in_snapshot(self);\n+                ocx.register_obligation(obligation);\n+                if ocx.select_all_or_error().is_empty() {\n                     return Ok((\n                         ty::ClosureKind::from_def_id(self.tcx, trait_def_id)\n                             .expect(\"expected to map DefId to ClosureKind\"),"}, {"sha": "8a42bf4113a458fe3665f2546f981819c6db5789", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ad094cdcebde8336d4f63d5323db5843e27def40", "patch": "@@ -31,7 +31,6 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n@@ -403,9 +402,9 @@ pub fn fully_solve_obligation<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     obligation: PredicateObligation<'tcx>,\n ) -> Vec<FulfillmentError<'tcx>> {\n-    let mut engine = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n-    engine.register_predicate_obligation(infcx, obligation);\n-    engine.select_all_or_error(infcx)\n+    let ocx = ObligationCtxt::new(infcx);\n+    ocx.register_obligation(obligation);\n+    ocx.select_all_or_error()\n }\n \n /// Process a set of obligations (and any nested obligations that come from them)\n@@ -414,9 +413,9 @@ pub fn fully_solve_obligations<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     obligations: impl IntoIterator<Item = PredicateObligation<'tcx>>,\n ) -> Vec<FulfillmentError<'tcx>> {\n-    let mut engine = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n-    engine.register_predicate_obligations(infcx, obligations);\n-    engine.select_all_or_error(infcx)\n+    let ocx = ObligationCtxt::new(infcx);\n+    ocx.register_obligations(obligations);\n+    ocx.select_all_or_error()\n }\n \n /// Process a bound (and any nested obligations that come from it) to completion.\n@@ -429,9 +428,9 @@ pub fn fully_solve_bound<'tcx>(\n     ty: Ty<'tcx>,\n     bound: DefId,\n ) -> Vec<FulfillmentError<'tcx>> {\n-    let mut engine = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n-    engine.register_bound(infcx, param_env, ty, bound, cause);\n-    engine.select_all_or_error(infcx)\n+    let ocx = ObligationCtxt::new(infcx);\n+    ocx.register_bound(cause, param_env, ty, bound);\n+    ocx.select_all_or_error()\n }\n \n /// Normalizes the predicates and checks whether they hold in an empty environment. If this"}, {"sha": "9a3c0707c7ce950102b9e99a36cac2c10f8a7644", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=ad094cdcebde8336d4f63d5323db5843e27def40", "patch": "@@ -10,14 +10,14 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/specialization.html\n \n pub mod specialization_graph;\n-use rustc_infer::traits::{TraitEngine, TraitEngineExt as _};\n use specialization_graph::GraphExt;\n \n use crate::errors::NegativePositiveConflict;\n use crate::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n-use crate::traits::engine::TraitEngineExt as _;\n use crate::traits::select::IntercrateAmbiguityCause;\n-use crate::traits::{self, coherence, FutureCompatOverlapErrorKind, ObligationCause};\n+use crate::traits::{\n+    self, coherence, FutureCompatOverlapErrorKind, ObligationCause, ObligationCtxt,\n+};\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{error_code, DelayDm, Diagnostic};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -204,12 +204,12 @@ fn fulfill_implication<'tcx>(\n \n     // Needs to be `in_snapshot` because this function is used to rebase\n     // substitutions, which may happen inside of a select within a probe.\n-    let mut engine = <dyn TraitEngine<'tcx>>::new_in_snapshot(infcx.tcx);\n+    let ocx = ObligationCtxt::new_in_snapshot(infcx);\n     // attempt to prove all of the predicates for impl2 given those for impl1\n     // (which are packed up in penv)\n-    engine.register_predicate_obligations(infcx, obligations.chain(more_obligations));\n+    ocx.register_obligations(obligations.chain(more_obligations));\n \n-    let errors = engine.select_all_or_error(infcx);\n+    let errors = ocx.select_all_or_error();\n     if !errors.is_empty() {\n         // no dice!\n         debug!("}, {"sha": "40dbe0b3ff063d927dc78c3de0e2eefb1ab3b113", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad094cdcebde8336d4f63d5323db5843e27def40/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=ad094cdcebde8336d4f63d5323db5843e27def40", "patch": "@@ -1,6 +1,5 @@\n use crate::infer::{InferCtxt, TyCtxtInferExt};\n-use crate::traits::ObligationCause;\n-use crate::traits::{TraitEngine, TraitEngineExt};\n+use crate::traits::{ObligationCause, ObligationCtxt};\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n@@ -72,28 +71,16 @@ fn type_marked_structural<'tcx>(\n     adt_ty: Ty<'tcx>,\n     cause: ObligationCause<'tcx>,\n ) -> bool {\n-    let mut fulfillment_cx = <dyn TraitEngine<'tcx>>::new(infcx.tcx);\n+    let ocx = ObligationCtxt::new(infcx);\n     // require `#[derive(PartialEq)]`\n     let structural_peq_def_id =\n         infcx.tcx.require_lang_item(LangItem::StructuralPeq, Some(cause.span));\n-    fulfillment_cx.register_bound(\n-        infcx,\n-        ty::ParamEnv::empty(),\n-        adt_ty,\n-        structural_peq_def_id,\n-        cause.clone(),\n-    );\n+    ocx.register_bound(cause.clone(), ty::ParamEnv::empty(), adt_ty, structural_peq_def_id);\n     // for now, require `#[derive(Eq)]`. (Doing so is a hack to work around\n     // the type `for<'a> fn(&'a ())` failing to implement `Eq` itself.)\n     let structural_teq_def_id =\n         infcx.tcx.require_lang_item(LangItem::StructuralTeq, Some(cause.span));\n-    fulfillment_cx.register_bound(\n-        infcx,\n-        ty::ParamEnv::empty(),\n-        adt_ty,\n-        structural_teq_def_id,\n-        cause,\n-    );\n+    ocx.register_bound(cause, ty::ParamEnv::empty(), adt_ty, structural_teq_def_id);\n \n     // We deliberately skip *reporting* fulfillment errors (via\n     // `report_fulfillment_errors`), for two reasons:\n@@ -104,7 +91,7 @@ fn type_marked_structural<'tcx>(\n     //\n     // 2. We are sometimes doing future-incompatibility lints for\n     //    now, so we do not want unconditional errors here.\n-    fulfillment_cx.select_all_or_error(infcx).is_empty()\n+    ocx.select_all_or_error().is_empty()\n }\n \n /// This implements the traversal over the structure of a given type to try to"}]}