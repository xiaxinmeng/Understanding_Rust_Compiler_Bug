{"sha": "bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODc0YTlkNWQ1OWUzMmU3ZTFhZmI2YzhiYWM0Nzc2ZGM1NWQ0ZDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-15T17:48:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-15T17:48:52Z"}, "message": "make check_ptr_access_align work on function pointer allocations", "tree": {"sha": "9600c4db61195d89fbae211046fa65b590847a1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9600c4db61195d89fbae211046fa65b590847a1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1", "html_url": "https://github.com/rust-lang/rust/commit/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbe7554d7fa3d0dffae9aa291607d66e6649c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbe7554d7fa3d0dffae9aa291607d66e6649c84", "html_url": "https://github.com/rust-lang/rust/commit/adbe7554d7fa3d0dffae9aa291607d66e6649c84"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "564b3429c056534cad84a229c5cb14ff0463bdc8", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=bd874a9d5d59e32e7e1afb6c8bac4776dc55d4d1", "patch": "@@ -232,8 +232,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             M::GLOBAL_KIND.map(MemoryKind::Machine),\n             \"dynamically allocating global memory\"\n         );\n-        let alloc =\n-            M::init_allocation_extra(self, id, Cow::Owned(alloc), Some(kind));\n+        let alloc = M::init_allocation_extra(self, id, Cow::Owned(alloc), Some(kind));\n         self.alloc_map.insert(id, (kind, alloc.into_owned()));\n         M::tag_alloc_base_pointer(self, Pointer::from(id))\n     }\n@@ -372,7 +371,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         )\n     }\n \n-    /// Check if the given pointer is allowed to do a memory access of given `size` and `align`\n+    /// Check if the given pointerpoints to live memory of given `size` and `align`\n     /// (ignoring `M::enforce_alignment`). The caller can control the error message for the\n     /// out-of-bounds case.\n     #[inline(always)]\n@@ -384,7 +383,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         msg: CheckInAllocMsg,\n     ) -> InterpResult<'tcx> {\n         self.check_and_deref_ptr(ptr, size, Some(align), msg, |alloc_id, _, _| {\n-            let (size, align) = self.get_size_and_align(alloc_id, AllocCheck::Dereferenceable)?;\n+            let check = match msg {\n+                CheckInAllocMsg::DerefTest | CheckInAllocMsg::MemoryAccessTest => {\n+                    AllocCheck::Dereferenceable\n+                }\n+                CheckInAllocMsg::PointerArithmeticTest | CheckInAllocMsg::InboundsTest => {\n+                    AllocCheck::Live\n+                }\n+            };\n+            let (size, align) = self.get_size_and_align(alloc_id, check)?;\n             Ok((size, align, ()))\n         })?;\n         Ok(())\n@@ -551,8 +558,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // `get_global_alloc` that we can actually use directly without inserting anything anywhere.\n         // So the error type is `InterpResult<'tcx, &Allocation<M::PointerTag>>`.\n         let a = self.alloc_map.get_or(id, || {\n-            let alloc = self.get_global_alloc(id, /*is_write*/ false)\n-                .map_err(Err)?;\n+            let alloc = self.get_global_alloc(id, /*is_write*/ false).map_err(Err)?;\n             match alloc {\n                 Cow::Borrowed(alloc) => {\n                     // We got a ref, cheaply return that as an \"error\" so that the"}]}