{"sha": "b6633ffaf7b7b721538ad929c3abae972bd984b6", "node_id": "C_kwDOAAsO6NoAKGI2NjMzZmZhZjdiN2I3MjE1MzhhZDkyOWMzYWJhZTk3MmJkOTg0YjY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-04-10T08:43:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-10T08:43:14Z"}, "message": "Rollup merge of #110044 - scottmcm:more-size-of-val, r=ChrisDenton\n\nAvoid some manual slice length calculation\n\nNo need for us to write the multiplication when `size_of_val` does exactly what we need.\n\n(https://github.com/rust-lang/rust-clippy/pull/10601)", "tree": {"sha": "2e656ef82d55cec6439f0c0fb42e38261d786691", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e656ef82d55cec6439f0c0fb42e38261d786691"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6633ffaf7b7b721538ad929c3abae972bd984b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkM8wiCRBK7hj4Ov3rIwAAFIwIAAl9+vj2ku2e9kK026zbQb2Q\n61xURYVGcYPhCb+XgaIcurPe1T5vFPFTeFUVjn5Yh3Gg03bapaUhjBBYvkxtW30M\n8bZsh/IvKSMOjGgFLWaSOIboj1oPgUdHz+eAfb+gcKJrH0ITSuugDBpRgMpHasjA\nSiZG//T9GZPNw9K4v8LGRUN7LfBtynKdQiFGmY6I/xsU+lBWM8KSQcVcGw+poIhz\nbrs37x5Dgy3t916KSaeurwkGvFJe4Ob0P+3VQfDQFWK18IXVn8Igl8F9P68/4hhT\ny3XomBhKFIAb4XoZSLWOC1gepwq19HlwSZmhKokqUyLeKXgvg+ZqRHF1cMc1L/I=\n=XZHg\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e656ef82d55cec6439f0c0fb42e38261d786691\nparent b8725520af466783f1c99c6aaae1b233cfa0a508\nparent 1042b5df9bbfa29e87c09edb54aaeb667336d1b4\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1681116194 +0530\ncommitter GitHub <noreply@github.com> 1681116194 +0530\n\nRollup merge of #110044 - scottmcm:more-size-of-val, r=ChrisDenton\n\nAvoid some manual slice length calculation\n\nNo need for us to write the multiplication when `size_of_val` does exactly what we need.\n\n(https://github.com/rust-lang/rust-clippy/pull/10601)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6633ffaf7b7b721538ad929c3abae972bd984b6", "html_url": "https://github.com/rust-lang/rust/commit/b6633ffaf7b7b721538ad929c3abae972bd984b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6633ffaf7b7b721538ad929c3abae972bd984b6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8725520af466783f1c99c6aaae1b233cfa0a508", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8725520af466783f1c99c6aaae1b233cfa0a508", "html_url": "https://github.com/rust-lang/rust/commit/b8725520af466783f1c99c6aaae1b233cfa0a508"}, {"sha": "1042b5df9bbfa29e87c09edb54aaeb667336d1b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1042b5df9bbfa29e87c09edb54aaeb667336d1b4", "html_url": "https://github.com/rust-lang/rust/commit/1042b5df9bbfa29e87c09edb54aaeb667336d1b4"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "9c6d48675a6b1ada6dbc5d3b09b4152f75db411e", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6633ffaf7b7b721538ad929c3abae972bd984b6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6633ffaf7b7b721538ad929c3abae972bd984b6/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=b6633ffaf7b7b721538ad929c3abae972bd984b6", "patch": "@@ -1241,13 +1241,9 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n     pub fn slice_as_bytes(this: &[MaybeUninit<T>]) -> &[MaybeUninit<u8>] {\n+        let bytes = mem::size_of_val(this);\n         // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n-        unsafe {\n-            slice::from_raw_parts(\n-                this.as_ptr() as *const MaybeUninit<u8>,\n-                this.len() * mem::size_of::<T>(),\n-            )\n-        }\n+        unsafe { slice::from_raw_parts(this.as_ptr() as *const MaybeUninit<u8>, bytes) }\n     }\n \n     /// Returns the contents of this mutable slice of `MaybeUninit` as a mutable slice of\n@@ -1274,13 +1270,9 @@ impl<T> MaybeUninit<T> {\n     /// ```\n     #[unstable(feature = \"maybe_uninit_as_bytes\", issue = \"93092\")]\n     pub fn slice_as_bytes_mut(this: &mut [MaybeUninit<T>]) -> &mut [MaybeUninit<u8>] {\n+        let bytes = mem::size_of_val(this);\n         // SAFETY: MaybeUninit<u8> is always valid, even for padding bytes\n-        unsafe {\n-            slice::from_raw_parts_mut(\n-                this.as_mut_ptr() as *mut MaybeUninit<u8>,\n-                this.len() * mem::size_of::<T>(),\n-            )\n-        }\n+        unsafe { slice::from_raw_parts_mut(this.as_mut_ptr() as *mut MaybeUninit<u8>, bytes) }\n     }\n }\n "}]}