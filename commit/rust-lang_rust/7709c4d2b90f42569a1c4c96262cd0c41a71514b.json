{"sha": "7709c4d2b90f42569a1c4c96262cd0c41a71514b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MDljNGQyYjkwZjQyNTY5YTFjNGM5NjI2MmNkMGM0MWE3MTUxNGI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-08T15:19:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T15:19:49Z"}, "message": "Rollup merge of #39529 - dylanmckay:llvm-4.0-align32, r=alexcrichton\n\n[LLVM 4.0] Use 32-bits for alignment\n\nLLVM 4.0 changes this. This change is fine to make for LLVM 3.9 as we\nwon't have alignments greater than 2^32-1.", "tree": {"sha": "4e65f474234c8b58a126b388d72971f498c9a4bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e65f474234c8b58a126b388d72971f498c9a4bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7709c4d2b90f42569a1c4c96262cd0c41a71514b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7709c4d2b90f42569a1c4c96262cd0c41a71514b", "html_url": "https://github.com/rust-lang/rust/commit/7709c4d2b90f42569a1c4c96262cd0c41a71514b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7709c4d2b90f42569a1c4c96262cd0c41a71514b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96bf9ba94da034a5999e71b5bdbed60559d7b373", "url": "https://api.github.com/repos/rust-lang/rust/commits/96bf9ba94da034a5999e71b5bdbed60559d7b373", "html_url": "https://github.com/rust-lang/rust/commit/96bf9ba94da034a5999e71b5bdbed60559d7b373"}, {"sha": "c7bea760917dcbff5025ac7b5dc62f54308c5530", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bea760917dcbff5025ac7b5dc62f54308c5530", "html_url": "https://github.com/rust-lang/rust/commit/c7bea760917dcbff5025ac7b5dc62f54308c5530"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "07d36448ab0f8dcd4a4403b0525a4106e012569e", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=7709c4d2b90f42569a1c4c96262cd0c41a71514b", "patch": "@@ -1369,14 +1369,14 @@ extern \"C\" {\n     pub fn LLVMRustDIBuilderCreateBasicType(Builder: DIBuilderRef,\n                                             Name: *const c_char,\n                                             SizeInBits: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Encoding: c_uint)\n                                             -> DIBasicType;\n \n     pub fn LLVMRustDIBuilderCreatePointerType(Builder: DIBuilderRef,\n                                               PointeeTy: DIType,\n                                               SizeInBits: u64,\n-                                              AlignInBits: u64,\n+                                              AlignInBits: u32,\n                                               Name: *const c_char)\n                                               -> DIDerivedType;\n \n@@ -1386,7 +1386,7 @@ extern \"C\" {\n                                              File: DIFile,\n                                              LineNumber: c_uint,\n                                              SizeInBits: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              Flags: DIFlags,\n                                              DerivedFrom: DIType,\n                                              Elements: DIArray,\n@@ -1401,7 +1401,7 @@ extern \"C\" {\n                                              File: DIFile,\n                                              LineNo: c_uint,\n                                              SizeInBits: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              OffsetInBits: u64,\n                                              Flags: DIFlags,\n                                              Ty: DIType)\n@@ -1429,7 +1429,7 @@ extern \"C\" {\n                                                  isLocalToUnit: bool,\n                                                  Val: ValueRef,\n                                                  Decl: DIDescriptor,\n-                                                 AlignInBits: u64)\n+                                                 AlignInBits: u32)\n                                                  -> DIGlobalVariable;\n \n     pub fn LLVMRustDIBuilderCreateVariable(Builder: DIBuilderRef,\n@@ -1442,19 +1442,19 @@ extern \"C\" {\n                                            AlwaysPreserve: bool,\n                                            Flags: DIFlags,\n                                            ArgNo: c_uint,\n-                                           AlignInBits: u64)\n+                                           AlignInBits: u32)\n                                            -> DIVariable;\n \n     pub fn LLVMRustDIBuilderCreateArrayType(Builder: DIBuilderRef,\n                                             Size: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Ty: DIType,\n                                             Subscripts: DIArray)\n                                             -> DIType;\n \n     pub fn LLVMRustDIBuilderCreateVectorType(Builder: DIBuilderRef,\n                                              Size: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              Ty: DIType,\n                                              Subscripts: DIArray)\n                                              -> DIType;\n@@ -1489,7 +1489,7 @@ extern \"C\" {\n                                                   File: DIFile,\n                                                   LineNumber: c_uint,\n                                                   SizeInBits: u64,\n-                                                  AlignInBits: u64,\n+                                                  AlignInBits: u32,\n                                                   Elements: DIArray,\n                                                   ClassType: DIType)\n                                                   -> DIType;\n@@ -1500,7 +1500,7 @@ extern \"C\" {\n                                             File: DIFile,\n                                             LineNumber: c_uint,\n                                             SizeInBits: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Flags: DIFlags,\n                                             Elements: DIArray,\n                                             RunTimeLang: c_uint,"}, {"sha": "7578cc74dbf34bf990436ef8a412daaf56c8e99f", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=7709c4d2b90f42569a1c4c96262cd0c41a71514b", "patch": "@@ -1783,7 +1783,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n                                                     is_local_to_unit,\n                                                     global,\n                                                     ptr::null_mut(),\n-                                                    global_align as u64,\n+                                                    global_align,\n         );\n     }\n }"}, {"sha": "729eae15ad696ae85693f1f7c43d47d3cffa7064", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=7709c4d2b90f42569a1c4c96262cd0c41a71514b", "patch": "@@ -464,7 +464,7 @@ pub fn declare_local<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                     cx.sess().opts.optimize != config::OptLevel::No,\n                     DIFlags::FlagZero,\n                     argument_index,\n-                    align as u64,\n+                    align,\n                 )\n             };\n             source_loc::set_debug_location(bcx,"}, {"sha": "15a1c990aadc6aa674f83abde74b3cd8da235673", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=7709c4d2b90f42569a1c4c96262cd0c41a71514b", "patch": "@@ -24,6 +24,8 @@ use type_::Type;\n use syntax_pos::{self, Span};\n use syntax::ast;\n \n+use std::ops;\n+\n pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n {\n     // The is_local_to_unit flag indicates whether a function is local to the\n@@ -49,12 +51,13 @@ pub fn span_start(cx: &CrateContext, span: Span) -> syntax_pos::Loc {\n     cx.sess().codemap().lookup_char_pos(span.lo)\n }\n \n-pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u64) {\n-    (machine::llsize_of_alloc(cx, llvm_type), machine::llalign_of_min(cx, llvm_type) as u64)\n+pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u32) {\n+    (machine::llsize_of_alloc(cx, llvm_type), machine::llalign_of_min(cx, llvm_type))\n }\n \n-pub fn bytes_to_bits(bytes: u64) -> u64 {\n-    bytes * 8\n+pub fn bytes_to_bits<T>(bytes: T) -> T\n+    where T: ops::Mul<Output=T> + From<u8> {\n+    bytes * 8u8.into()\n }\n \n #[inline]"}, {"sha": "4e201c254e39f4f9bc9bb17e029368b468f580ea", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7709c4d2b90f42569a1c4c96262cd0c41a71514b/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=7709c4d2b90f42569a1c4c96262cd0c41a71514b", "patch": "@@ -513,7 +513,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n-                                 uint64_t SizeInBits, uint64_t AlignInBits,\n+                                 uint64_t SizeInBits, uint32_t AlignInBits,\n                                  unsigned Encoding) {\n   return wrap(Builder->createBasicType(Name, SizeInBits,\n #if LLVM_VERSION_LE(3, 9)\n@@ -524,15 +524,15 @@ LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef PointeeTy,\n-    uint64_t SizeInBits, uint64_t AlignInBits, const char *Name) {\n+    uint64_t SizeInBits, uint32_t AlignInBits, const char *Name) {\n   return wrap(Builder->createPointerType(unwrapDI<DIType>(PointeeTy),\n                                          SizeInBits, AlignInBits, Name));\n }\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustDIFlags Flags,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef DerivedFrom, LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang, LLVMRustMetadataRef VTableHolder,\n     const char *UniqueId) {\n@@ -546,7 +546,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n-    uint64_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n+    uint32_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef Ty) {\n   return wrap(Builder->createMemberType(unwrapDI<DIDescriptor>(Scope), Name,\n                                         unwrapDI<DIFile>(File), LineNo,\n@@ -573,7 +573,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Context, const char *Name,\n     const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n     LLVMRustMetadataRef Ty, bool IsLocalToUnit, LLVMValueRef V,\n-    LLVMRustMetadataRef Decl = nullptr, uint64_t AlignInBits = 0) {\n+    LLVMRustMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n   Constant *InitVal = cast<Constant>(unwrap(V));\n \n #if LLVM_VERSION_GE(4, 0)\n@@ -612,7 +612,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n     LLVMRustDIBuilderRef Builder, unsigned Tag, LLVMRustMetadataRef Scope,\n     const char *Name, LLVMRustMetadataRef File, unsigned LineNo,\n     LLVMRustMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n-    unsigned ArgNo, uint64_t AlignInBits) {\n+    unsigned ArgNo, uint32_t AlignInBits) {\n #if LLVM_VERSION_GE(3, 8)\n   if (Tag == 0x100) { // DW_TAG_auto_variable\n     return wrap(Builder->createAutoVariable(\n@@ -637,7 +637,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                 uint64_t AlignInBits, LLVMRustMetadataRef Ty,\n+                                 uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n                                  LLVMRustMetadataRef Subscripts) {\n   return wrap(\n       Builder->createArrayType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n@@ -646,7 +646,7 @@ LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateVectorType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                  uint64_t AlignInBits, LLVMRustMetadataRef Ty,\n+                                  uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n                                   LLVMRustMetadataRef Subscripts) {\n   return wrap(\n       Builder->createVectorType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n@@ -687,7 +687,7 @@ LLVMRustDIBuilderCreateEnumerator(LLVMRustDIBuilderRef Builder,\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustMetadataRef Elements,\n+    uint32_t AlignInBits, LLVMRustMetadataRef Elements,\n     LLVMRustMetadataRef ClassTy) {\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n@@ -698,7 +698,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang, const char *UniqueId) {\n   return wrap(Builder->createUnionType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,"}]}