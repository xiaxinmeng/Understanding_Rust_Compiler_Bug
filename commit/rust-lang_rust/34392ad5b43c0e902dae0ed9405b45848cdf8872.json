{"sha": "34392ad5b43c0e902dae0ed9405b45848cdf8872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzkyYWQ1YjQzYzBlOTAyZGFlMGVkOTQwNWI0NTg0OGNkZjg4NzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-25T23:11:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-26T16:20:40Z"}, "message": "rustdoc: Add type bounds to impls", "tree": {"sha": "796485db7f8d168921c93dbf94bf663b3d3c8e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/796485db7f8d168921c93dbf94bf663b3d3c8e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34392ad5b43c0e902dae0ed9405b45848cdf8872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34392ad5b43c0e902dae0ed9405b45848cdf8872", "html_url": "https://github.com/rust-lang/rust/commit/34392ad5b43c0e902dae0ed9405b45848cdf8872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34392ad5b43c0e902dae0ed9405b45848cdf8872/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e", "html_url": "https://github.com/rust-lang/rust/commit/0a0d3c7bd9e35ff11d5f3696c05234f1ccb6273e"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "5eecbf58cc6530a534d926ef51f686032e9a0ff3", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=34392ad5b43c0e902dae0ed9405b45848cdf8872", "patch": "@@ -135,6 +135,7 @@ pub struct MethodDoc {\n #[deriving(Eq)]\n pub struct ImplDoc {\n     item: ItemDoc,\n+    bounds_str: Option<~str>,\n     trait_types: ~[~str],\n     self_ty: Option<~str>,\n     methods: ~[MethodDoc]"}, {"sha": "08a5928ac3dfb9bb781e69ed47387eb0e5b756f4", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=34392ad5b43c0e902dae0ed9405b45848cdf8872", "patch": "@@ -277,6 +277,7 @@ fn impldoc_from_impl(\n ) -> doc::ImplDoc {\n     doc::ImplDoc {\n         item: itemdoc,\n+        bounds_str: None,\n         trait_types: ~[],\n         self_ty: None,\n         methods: do vec::map(methods) |method| {"}, {"sha": "05f1c7242def01a9ce1e6b4f45a6f531bd835a95", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=34392ad5b43c0e902dae0ed9405b45848cdf8872", "patch": "@@ -249,6 +249,11 @@ pub fn header_name(doc: doc::ItemTag) -> ~str {\n       }\n       &doc::ImplTag(ref doc) => {\n         fail_unless!(doc.self_ty.is_some());\n+          let bounds = if (&doc.bounds_str).is_some() {\n+              fmt!(\" where %s\", (&doc.bounds_str).get())\n+          } else {\n+              ~\"\"\n+          };\n         let self_ty = (&doc.self_ty).get();\n         let mut trait_part = ~\"\";\n         for doc.trait_types.eachi |i, trait_type| {\n@@ -259,7 +264,7 @@ pub fn header_name(doc: doc::ItemTag) -> ~str {\n             }\n             trait_part += *trait_type;\n         }\n-        fmt!(\"%s for %s\", trait_part, self_ty)\n+        fmt!(\"%s for %s%s\", trait_part, self_ty, bounds)\n       }\n       _ => {\n         doc.name()\n@@ -271,11 +276,18 @@ pub fn header_text(doc: doc::ItemTag) -> ~str {\n     match &doc {\n       &doc::ImplTag(ref ImplDoc) => {\n         let header_kind = header_kind(copy doc);\n+          let bounds = if (&ImplDoc.bounds_str).is_some() {\n+              fmt!(\" where `%s`\", (&ImplDoc.bounds_str).get())\n+          } else {\n+              ~\"\"\n+          };\n         let desc = if ImplDoc.trait_types.is_empty() {\n-            fmt!(\"for `%s`\", (&ImplDoc.self_ty).get())\n+            fmt!(\"for `%s`%s\", (&ImplDoc.self_ty).get(), bounds)\n         } else {\n-            fmt!(\"of `%s` for `%s`\", ImplDoc.trait_types[0],\n-                 (&ImplDoc.self_ty).get())\n+            fmt!(\"of `%s` for `%s`%s\",\n+                 ImplDoc.trait_types[0],\n+                 (&ImplDoc.self_ty).get(),\n+                 bounds)\n         };\n         return fmt!(\"%s %s\", header_kind, desc);\n       }\n@@ -749,6 +761,12 @@ fn should_write_impl_header() {\n     fail_unless!(str::contains(markdown, ~\"## Implementation for `int`\"));\n }\n \n+#[test]\n+fn should_write_impl_header_with_bounds() {\n+    let markdown = test::render(~\"impl <T> int<T> { }\");\n+    fail_unless!(str::contains(markdown, ~\"## Implementation for `int<T>` where `<T>`\"));\n+}\n+\n #[test]\n fn should_write_impl_header_with_trait() {\n     let markdown = test::render(~\"impl j for int { fn a() { } }\");"}, {"sha": "d93518fabafd10284fff7e816d88f2f3531089d5", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34392ad5b43c0e902dae0ed9405b45848cdf8872/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=34392ad5b43c0e902dae0ed9405b45848cdf8872", "patch": "@@ -271,17 +271,20 @@ fn fold_impl(\n \n     let srv = fold.ctxt.clone();\n \n-    let (trait_types, self_ty) = {\n+    let (bounds, trait_types, self_ty) = {\n         let doc = copy doc;\n         do astsrv::exec(srv) |ctxt| {\n             match ctxt.ast_map.get(&doc.id()) {\n                 ast_map::node_item(@ast::item {\n-                    node: ast::item_impl(_, opt_trait_type, self_ty, _), _\n+                    node: ast::item_impl(ref generics, opt_trait_type, self_ty, _), _\n                 }, _) => {\n+                    let bounds = pprust::generics_to_str(generics, extract::interner());\n+                    let bounds = if bounds.is_empty() { None } else { Some(bounds) };\n                     let trait_types = opt_trait_type.map_default(~[], |p| {\n                         ~[pprust::path_to_str(p.path, extract::interner())]\n                     });\n-                    (trait_types,\n+                    (bounds,\n+                     trait_types,\n                      Some(pprust::ty_to_str(\n                          self_ty, extract::interner())))\n                 }\n@@ -291,13 +294,20 @@ fn fold_impl(\n     };\n \n     doc::ImplDoc {\n+        bounds_str: bounds,\n         trait_types: trait_types,\n         self_ty: self_ty,\n         methods: merge_methods(fold.ctxt.clone(), doc.id(), copy doc.methods),\n         .. doc\n     }\n }\n \n+#[test]\n+fn should_add_impl_bounds() {\n+    let doc = test::mk_doc(~\"impl<T, U: Copy, V: Copy + Clone> Option<T, U, V> { }\");\n+    fail_unless!(doc.cratemod().impls()[0].bounds_str == Some(~\"<T, U: Copy, V: Copy + Clone>\"));\n+}\n+\n #[test]\n fn should_add_impl_trait_types() {\n     let doc = test::mk_doc(~\"impl j for int { fn a<T>() { } }\");"}]}