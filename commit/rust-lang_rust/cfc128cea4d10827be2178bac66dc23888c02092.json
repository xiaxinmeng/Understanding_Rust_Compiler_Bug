{"sha": "cfc128cea4d10827be2178bac66dc23888c02092", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYzEyOGNlYTRkMTA4MjdiZTIxNzhiYWM2NmRjMjM4ODhjMDIwOTI=", "commit": {"author": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2017-07-19T23:36:09Z"}, "committer": {"name": "MaulingMonkey", "email": "git@maulingmonkey.com", "date": "2017-07-19T23:36:09Z"}, "message": "Expand one-liners, rename is_like_msvc to cpp_like_names and explain.", "tree": {"sha": "d87a5dc488115141511dc8342a3ba84bcf6f1b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87a5dc488115141511dc8342a3ba84bcf6f1b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfc128cea4d10827be2178bac66dc23888c02092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc128cea4d10827be2178bac66dc23888c02092", "html_url": "https://github.com/rust-lang/rust/commit/cfc128cea4d10827be2178bac66dc23888c02092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfc128cea4d10827be2178bac66dc23888c02092/comments", "author": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaulingMonkey", "id": 75894, "node_id": "MDQ6VXNlcjc1ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/75894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaulingMonkey", "html_url": "https://github.com/MaulingMonkey", "followers_url": "https://api.github.com/users/MaulingMonkey/followers", "following_url": "https://api.github.com/users/MaulingMonkey/following{/other_user}", "gists_url": "https://api.github.com/users/MaulingMonkey/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaulingMonkey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaulingMonkey/subscriptions", "organizations_url": "https://api.github.com/users/MaulingMonkey/orgs", "repos_url": "https://api.github.com/users/MaulingMonkey/repos", "events_url": "https://api.github.com/users/MaulingMonkey/events{/privacy}", "received_events_url": "https://api.github.com/users/MaulingMonkey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e10c4d55d5a21c879c01c57211579239f08d0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e10c4d55d5a21c879c01c57211579239f08d0b0", "html_url": "https://github.com/rust-lang/rust/commit/8e10c4d55d5a21c879c01c57211579239f08d0b0"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "6e36073107b561ef60747cf558001443bcf2f860", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cfc128cea4d10827be2178bac66dc23888c02092/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfc128cea4d10827be2178bac66dc23888c02092/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=cfc128cea4d10827be2178bac66dc23888c02092", "patch": "@@ -36,6 +36,10 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                           t: Ty<'tcx>,\n                                           qualified: bool,\n                                           output: &mut String) {\n+    // When targeting MSVC, emit C++ style type names for compatability with\n+    // .natvis visualizers (and perhaps other existing native debuggers?)\n+    let cpp_like_names = cx.sess().target.target.options.is_like_msvc;\n+\n     match t.sty {\n         ty::TyBool => output.push_str(\"bool\"),\n         ty::TyChar => output.push_str(\"char\"),\n@@ -61,27 +65,33 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push(')');\n         },\n         ty::TyRawPtr(ty::TypeAndMut { ty: inner_type, mutbl } ) => {\n-            let is_like_msvc = cx.sess().target.target.options.is_like_msvc;\n-\n-            if !is_like_msvc {output.push('*');}\n+            if !cpp_like_names {\n+                output.push('*');\n+            }\n             match mutbl {\n                 hir::MutImmutable => output.push_str(\"const \"),\n                 hir::MutMutable => output.push_str(\"mut \"),\n             }\n \n             push_debuginfo_type_name(cx, inner_type, true, output);\n-            if is_like_msvc {output.push('*');}\n+\n+            if cpp_like_names {\n+                output.push('*');\n+            }\n         },\n         ty::TyRef(_, ty::TypeAndMut { ty: inner_type, mutbl }) => {\n-            let is_like_msvc = cx.sess().target.target.options.is_like_msvc;\n-\n-            if !is_like_msvc {output.push('&');}\n+            if !cpp_like_names {\n+                output.push('&');\n+            }\n             if mutbl == hir::MutMutable {\n                 output.push_str(\"mut \");\n             }\n \n             push_debuginfo_type_name(cx, inner_type, true, output);\n-            if is_like_msvc {output.push('*');}\n+\n+            if cpp_like_names {\n+                output.push('*');\n+            }\n         },\n         ty::TyArray(inner_type, len) => {\n             output.push('[');\n@@ -90,10 +100,19 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             output.push(']');\n         },\n         ty::TySlice(inner_type) => {\n-            let is_like_msvc = cx.sess().target.target.options.is_like_msvc;\n-            output.push_str(if is_like_msvc {\"slice<\"} else {\"[\"});\n+            if cpp_like_names {\n+                output.push_str(\"slice<\");\n+            } else {\n+                output.push('[');\n+            }\n+\n             push_debuginfo_type_name(cx, inner_type, true, output);\n-            output.push(if is_like_msvc {'>'} else {']'});\n+\n+            if cpp_like_names {\n+                output.push('>');\n+            } else {\n+                output.push(']');\n+            }\n         },\n         ty::TyDynamic(ref trait_data, ..) => {\n             if let Some(principal) = trait_data.principal() {"}]}