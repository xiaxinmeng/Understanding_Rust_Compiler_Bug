{"sha": "aaefa947ac507ff77049d27f927ddffe1b73cb18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZWZhOTQ3YWM1MDdmZjc3MDQ5ZDI3ZjkyN2RkZmZlMWI3M2NiMTg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-20T15:11:28Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-20T16:09:59Z"}, "message": "Bring back old fallback semantics: Without feature(never_type), fallback to `()`, not `!`.\n\nNote that this commit, since it is trying to be minimal in order to\nease backporting to the beta and release channels, does *not* include\nthe old future-proofing warnings that we used to have associated with\nsuch fallback to `()`; see discussion at this comment:\n\nhttps://github.com/rust-lang/rust/issues/49691#issuecomment-381266730", "tree": {"sha": "0298befc23541521ad321c42242217525b00195e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0298befc23541521ad321c42242217525b00195e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaefa947ac507ff77049d27f927ddffe1b73cb18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaefa947ac507ff77049d27f927ddffe1b73cb18", "html_url": "https://github.com/rust-lang/rust/commit/aaefa947ac507ff77049d27f927ddffe1b73cb18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaefa947ac507ff77049d27f927ddffe1b73cb18/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2", "html_url": "https://github.com/rust-lang/rust/commit/fadabd6fbbfe1a401bbdd4ba0919b21ba4f7c5d2"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "f3a2aa519465c9933e5269b10c287c571fc09dc9", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=aaefa947ac507ff77049d27f927ddffe1b73cb18", "patch": "@@ -2374,6 +2374,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.intern_tup(&[])\n     }\n \n+    pub fn mk_diverging_default(self) -> Ty<'tcx> {\n+        if self.features().never_type {\n+            self.types.never\n+        } else {\n+            self.intern_tup(&[])\n+        }\n+    }\n+\n     pub fn mk_bool(self) -> Ty<'tcx> {\n         self.mk_ty(TyBool)\n     }"}, {"sha": "acde10a6396936b445b83aae2f97e72f40519c1c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aaefa947ac507ff77049d27f927ddffe1b73cb18", "patch": "@@ -2217,7 +2217,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n-    // Non-numerics get replaced with !, unconstrained ints with i32,\n+    // Non-numerics get replaced with ! or () (depending on whether\n+    // feature(never_type) is enabled, unconstrained ints with i32,\n     // unconstrained floats with f64.\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to TyError.\n@@ -2231,7 +2232,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             _ if self.is_tainted_by_errors() => self.tcx().types.err,\n             UnconstrainedInt => self.tcx.types.i32,\n             UnconstrainedFloat => self.tcx.types.f64,\n-            Neither if self.type_var_diverges(ty) => self.tcx.types.never,\n+            Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n             Neither => return false,\n         };\n         debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);"}, {"sha": "ac8ac85824edcc34783e3d161d76cdc9280f30f2", "filename": "src/test/compile-fail/defaulted-never-note.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefaulted-never-note.rs?ref=aaefa947ac507ff77049d27f927ddffe1b73cb18", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// We need to opt inot the `!` feature in order to trigger the\n+// requirement that this is testing.\n+#![feature(never_type)]\n+\n #![allow(unused)]\n \n trait Deserialize: Sized {"}, {"sha": "75b60aa8d10b7b392033577ec1c78cb197b1969f", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=aaefa947ac507ff77049d27f927ddffe1b73cb18", "patch": "@@ -31,5 +31,5 @@ trait Add<RHS=Self> {\n fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n-    //~^ ERROR the trait bound `!: Add<A>` is not satisfied\n+    //~^ ERROR the trait bound `(): Add<A>` is not satisfied\n }"}, {"sha": "7924ab74444065190b82382e7bf4a606ea90853e", "filename": "src/test/ui/associated-types-ICE-when-projecting-out-of-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaefa947ac507ff77049d27f927ddffe1b73cb18/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types-ICE-when-projecting-out-of-err.stderr?ref=aaefa947ac507ff77049d27f927ddffe1b73cb18", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `!: Add<A>` is not satisfied\n+error[E0277]: the trait bound `(): Add<A>` is not satisfied\n   --> $DIR/associated-types-ICE-when-projecting-out-of-err.rs:33:11\n    |\n LL |     r = r + a;\n-   |           ^ the trait `Add<A>` is not implemented for `!`\n+   |           ^ the trait `Add<A>` is not implemented for `()`\n \n error: aborting due to previous error\n "}]}