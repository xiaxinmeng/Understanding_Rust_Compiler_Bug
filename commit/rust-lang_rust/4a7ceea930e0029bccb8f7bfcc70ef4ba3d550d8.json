{"sha": "4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhN2NlZWE5MzBlMDAyOWJjY2I4ZjdiZmNjNzBlZjRiYTNkNTUwZDg=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-04-17T18:56:07Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-05-06T18:37:45Z"}, "message": "Better rustc_on_unimplemented, and UI test fixes", "tree": {"sha": "cdae36834d6ed2f24890b380fc4220ebd4031867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdae36834d6ed2f24890b380fc4220ebd4031867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "html_url": "https://github.com/rust-lang/rust/commit/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b99485a391e21caf3e0312969ed00ccbc6c167", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b99485a391e21caf3e0312969ed00ccbc6c167", "html_url": "https://github.com/rust-lang/rust/commit/47b99485a391e21caf3e0312969ed00ccbc6c167"}], "stats": {"total": 830, "additions": 564, "deletions": 266}, "files": [{"sha": "4fca2898b56b41db290731a5612ed87e0293d929", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -187,7 +187,7 @@ pub use self::range::{Bound, RangeBounds, RangeInclusive, RangeToInclusive};\n pub use self::r#try::Try;\n \n #[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n-pub use self::r#try::Try as TryV1;\n+pub(crate) use self::r#try::Try as TryV1;\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub use self::try_trait::FromResidual;\n@@ -197,7 +197,7 @@ pub use self::try_trait::FromResidual;\n pub use self::try_trait::Try;\n \n #[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n-pub use self::try_trait::Try as TryV2;\n+pub(crate) use self::try_trait::Try as TryV2;\n \n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n pub use self::generator::{Generator, GeneratorState};"}, {"sha": "35989d2bc052c91dca2cbf27b304ba75f85ad3b5", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -115,6 +115,21 @@ use crate::ops::ControlFlow;\n /// }\n /// ```\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n+#[rustc_on_unimplemented(\n+    on(\n+        all(from_method = \"from_output\", from_desugaring = \"TryBlock\"),\n+        message = \"a `try` block must return `Result` or `Option` \\\n+                    (or another type that implements `{Try}`)\",\n+        label = \"could not wrap the final value of the block as `{Self}` doesn't implement `Try`\",\n+    ),\n+    on(\n+        all(from_method = \"branch\", from_desugaring = \"QuestionMark\"),\n+        message = \"the `?` operator can only be applied to values \\\n+                    that implement `{Try}`\",\n+        label = \"the `?` operator cannot be applied to type `{Self}`\"\n+    )\n+)]\n+#[doc(alias = \"?\")]\n #[cfg_attr(not(bootstrap), lang = \"Try\")]\n pub trait Try: FromResidual {\n     /// The type of the value produced by `?` when *not* short-circuiting.\n@@ -212,6 +227,70 @@ pub trait Try: FromResidual {\n /// Every `Try` type needs to be recreatable from its own associated\n /// `Residual` type, but can also have additional `FromResidual` implementations\n /// to support interconversion with other `Try` types.\n+#[rustc_on_unimplemented(\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+            R = \"std::option::Option<std::convert::Infallible>\"\n+        ),\n+        message = \"the `?` operator can only be used on `Result`s, not `Option`s, \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"use `.ok_or(...)?` to provide an error compatible with `{Self}`\",\n+        enclosing_scope = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::result::Result<T, E>\",\n+        ),\n+        // There's a special error message in the trait selection code for\n+        // `From` in `?`, so this is not shown for result-in-result errors,\n+        // and thus it can be phrased more strongly than `ControlFlow`'s.\n+        message = \"the `?` operator can only be used on `Result`s \\\n+            in {ItemContext} that returns `Result`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        enclosing_scope = \"this function returns a `Result`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::option::Option<T>\",\n+        ),\n+        // `Option`-in-`Option` always works, as there's only one possible\n+        // residual, so this can also be phrased strongly.\n+        message = \"the `?` operator can only be used on `Option`s \\\n+            in {ItemContext} that returns `Option`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        enclosing_scope = \"this function returns an `Option`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\",\n+            _Self = \"std::ops::ControlFlow<B, C>\",\n+        ),\n+        message = \"the `?` operator can only be used on `ControlFlow<B, _>`s \\\n+            in {ItemContext} that returns `ControlFlow<B, _>`\",\n+        label = \"this `?` produces `{R}`, which is incompatible with `{Self}`\",\n+        enclosing_scope = \"this function returns a `ControlFlow`\",\n+        note = \"unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\"\n+    ),\n+    on(\n+        all(\n+            from_method = \"from_residual\",\n+            from_desugaring = \"QuestionMark\"\n+        ),\n+        message = \"the `?` operator can only be used in {ItemContext} \\\n+                    that returns `Result` or `Option` \\\n+                    (or another type that implements `{FromResidual}`)\",\n+        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n+        enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n+    ),\n+)]\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     /// Constructs the type from a compatible `Residual` type."}, {"sha": "9fe3313ee6cc67b6be36c46226102ecf0488df6c", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -42,7 +42,7 @@ async fn bar() -> Result<(), ()> {\n     foo()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `impl Future`\n     //~| HELP the trait `Try` is not implemented for `impl Future`\n-    //~| NOTE required by `into_result`\n+    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`\n@@ -65,7 +65,7 @@ async fn baz() -> Result<(), ()> {\n     t?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n     //~^ NOTE the `?` operator cannot be applied to type `T`\n     //~| HELP the trait `Try` is not implemented for `T`\n-    //~| NOTE required by `into_result`\n+    //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n     //~| NOTE in this expansion of desugaring of operator `?`"}, {"sha": "ad661fb2833fa08e7992ea0d4de9a6eff2372da0", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -5,7 +5,7 @@ LL |     foo()?;\n    |     ^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n    = help: the trait `Try` is not implemented for `impl Future`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n help: consider `await`ing on the `Future`\n    |\n LL |     foo().await?;\n@@ -18,7 +18,7 @@ LL |     t?;\n    |     ^^ the `?` operator cannot be applied to type `T`\n    |\n    = help: the trait `Try` is not implemented for `T`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n help: consider `await`ing on the `Future`\n    |\n LL |     t.await?;"}, {"sha": "a3f122a466361fc4e3dd033c6f002a739ce0d92d", "filename": "src/test/ui/async-await/try-on-option-in-async.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftry-on-option-in-async.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,47 +1,47 @@\n-error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-in-async.rs:8:9\n+error[E0277]: the `?` operator can only be used in an async block that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-in-async.rs:8:10\n    |\n LL |       async {\n    |  ___________-\n LL | |         let x: Option<u32> = None;\n LL | |         x?;\n-   | |         ^^ cannot use the `?` operator in an async block that returns `{integer}`\n+   | |          ^ cannot use the `?` operator in an async block that returns `{integer}`\n LL | |         22\n LL | |     }\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-in-async.rs:17:9\n+error[E0277]: the `?` operator can only be used in an async closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-in-async.rs:17:10\n    |\n LL |       let async_closure = async || {\n    |  __________________________________-\n LL | |         let x: Option<u32> = None;\n LL | |         x?;\n-   | |         ^^ cannot use the `?` operator in an async closure that returns `u32`\n+   | |          ^ cannot use the `?` operator in an async closure that returns `u32`\n LL | |         22_u32\n LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-in-async.rs:26:5\n+error[E0277]: the `?` operator can only be used in an async function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-in-async.rs:26:6\n    |\n LL |   async fn an_async_function() -> u32 {\n    |  _____________________________________-\n LL | |     let x: Option<u32> = None;\n LL | |     x?;\n-   | |     ^^ cannot use the `?` operator in an async function that returns `u32`\n+   | |      ^ cannot use the `?` operator in an async function that returns `u32`\n LL | |     22\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7beb2db3969c8c1d055de34781f76ceb2eced49e", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -10,8 +10,8 @@ fn make_unit() -> Result<(), Error> {\n \n fn main() {\n     let fut = async {\n-        make_unit()?; //~ ERROR type annotations needed\n+        make_unit()?;\n \n-        Ok(())\n+        Ok(()) //~ ERROR type annotations needed\n     };\n }"}, {"sha": "8e632fbc1de1ba0a70fdc27390c66c0a9a6663ef", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -8,14 +8,13 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n \n error[E0282]: type annotations needed for `impl Future`\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:20\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:15:9\n    |\n LL |     let fut = async {\n-   |         --- consider giving `fut` the explicit type `impl Future`, with the type parameters specified\n-LL |         make_unit()?;\n-   |                    ^ cannot infer type of error for `?` operator\n-   |\n-   = note: `?` implicitly converts the error value into a type implementing `From<std::io::Error>`\n+   |         --- consider giving `fut` the explicit type `impl Future`, where the type parameter `E` is specified\n+...\n+LL |         Ok(())\n+   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "e7fabd0ffbc8bd178b4457d0c82598b9c5fbccf7", "filename": "src/test/ui/inference/cannot-infer-async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -8,8 +8,8 @@ fn make_unit() -> Result<(), Error> {\n \n fn main() {\n     let fut = async {\n-        make_unit()?; //~ ERROR type annotations needed\n+        make_unit()?;\n \n-        Ok(())\n+        Ok(()) //~ ERROR type annotations needed\n     };\n }"}, {"sha": "233604833612aa4a79fd283e43eb235fa6cc4dbb", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,12 +1,11 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-async.rs:11:20\n+  --> $DIR/cannot-infer-async.rs:13:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` a type\n-LL |         make_unit()?;\n-   |                    ^ cannot infer type of error for `?` operator\n-   |\n-   = note: `?` implicitly converts the error value into a type implementing `From<std::io::Error>`\n+...\n+LL |         Ok(())\n+   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n \n error: aborting due to previous error\n "}, {"sha": "a6ddb7ae908fc0fbacb9423d5fde5da0e152cfd5", "filename": "src/test/ui/inference/cannot-infer-closure-circular.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed for `Result<(), E>`\n   --> $DIR/cannot-infer-closure-circular.rs:7:14\n    |\n LL |     let x = |r| {\n-   |              ^ consider giving this closure parameter the explicit type `Result<(), E>`, with the type parameters specified\n+   |              ^ consider giving this closure parameter the explicit type `Result<(), E>`, where the type parameter `E` is specified\n \n error: aborting due to previous error\n "}, {"sha": "6e84b6d5ad0bddb7206966f1954bb23d77833526", "filename": "src/test/ui/inference/cannot-infer-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = |a: (), b: ()| {\n-        Err(a)?; //~ ERROR type annotations needed for the closure\n-        Ok(b)\n+        Err(a)?;\n+        Ok(b) //~ ERROR type annotations needed for the closure\n     };\n }"}, {"sha": "e055d1a94ffe98c06356c90581dcad1fbc4c626a", "filename": "src/test/ui/inference/cannot-infer-closure.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,10 +1,9 @@\n error[E0282]: type annotations needed for the closure `fn((), ()) -> Result<(), _>`\n-  --> $DIR/cannot-infer-closure.rs:3:15\n+  --> $DIR/cannot-infer-closure.rs:4:9\n    |\n-LL |         Err(a)?;\n-   |               ^ cannot infer type of error for `?` operator\n+LL |         Ok(b)\n+   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`\n    |\n-   = note: `?` implicitly converts the error value into a type implementing `From<()>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = |a: (), b: ()| -> Result<(), _> {"}, {"sha": "c394f6efbda9b3527671d1ecfbd51d040f092a74", "filename": "src/test/ui/inference/cannot-infer-partial-try-return.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-partial-try-return.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -2,9 +2,8 @@ error[E0282]: type annotations needed for the closure `fn() -> Result<(), Qualif\n   --> $DIR/cannot-infer-partial-try-return.rs:19:9\n    |\n LL |         infallible()?;\n-   |         ^^^^^^^^^^^^^ cannot infer type of error for `?` operator\n+   |         ^^^^^^^^^^^^^ cannot infer type\n    |\n-   = note: `?` implicitly converts the error value into `QualifiedError<_>` using its implementation of `From<Infallible>`\n help: give this closure an explicit return type without `_` placeholders\n    |\n LL |     let x = || -> Result<(), QualifiedError<_>> {"}, {"sha": "2d020188198af843ff55c811fd2f122c211fd24a", "filename": "src/test/ui/issues/issue-32709.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32709.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -7,7 +7,8 @@ LL |     Err(5)?;\n    |           ^ the trait `From<{integer}>` is not implemented for `()`\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n+   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, {integer}>>` for `Result<i32, ()>`\n+   = note: required by `from_residual`\n \n error: aborting due to previous error\n "}, {"sha": "551b9f4650aac17d7fe04675a1e58b4f80fb7426", "filename": "src/test/ui/option-to-result.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fui%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fui%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-to-result.stderr?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -1,35 +0,0 @@\n-error[E0277]: `?` couldn't convert the error to `()`\n-  --> $DIR/option-to-result.rs:5:6\n-   |\n-LL | fn test_result() -> Result<(),()> {\n-   |                     ------------- expected `()` because of this\n-LL |     let a:Option<()> = Some(());\n-LL |     a?;\n-   |      ^ the trait `From<NoneError>` is not implemented for `()`\n-   |\n-   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n-help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n-   |\n-LL |     a.ok_or_else(|| /* error value */)?;\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `?` couldn't convert the error to `NoneError`\n-  --> $DIR/option-to-result.rs:11:6\n-   |\n-LL | fn test_option() -> Option<i32>{\n-   |                     ----------- expected `NoneError` because of this\n-LL |     let a:Result<i32, i32> = Ok(5);\n-LL |     a?;\n-   |      ^ the trait `From<i32>` is not implemented for `NoneError`\n-   |\n-   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n-help: consider converting the `Result<T, _>` into an `Option<T>` using `Result::ok`\n-   |\n-LL |     a.ok()?;\n-   |      ^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "db5042b40d8bcfa10e339fb1be41990cd3eb571e", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,16 +1,15 @@\n-error[E0283]: type annotations needed\n+error[E0284]: type annotations needed\n   --> $DIR/question-mark-type-infer.rs:12:21\n    |\n LL |     l.iter().map(f).collect()?\n    |                     ^^^^^^^ cannot infer type\n    |\n-   = note: cannot satisfy `_: Try`\n-   = note: required by `into_result`\n+   = note: cannot satisfy `<_ as Try>::Residual == _`\n help: consider specifying the type argument in the method call\n    |\n LL |     l.iter().map(f).collect::<B>()?\n    |                            ^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0283`.\n+For more information about this error, try `rustc --explain E0284`."}, {"sha": "6985f1b71a8db806b8aa7871e424a82029fd6634", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -502,25 +502,25 @@ LL |     if (let 0 = 0)? {}\n    |        ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/disallowed-positions.rs:46:8\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/disallowed-positions.rs:46:19\n    |\n LL | / fn nested_within_if_expr() {\n LL | |     if &let 0 = 0 {}\n LL | |\n LL | |\n ...  |\n LL | |     if (let 0 = 0)? {}\n-   | |        ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                   ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n LL | |     if let true = let true = true {}\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:56:8\n@@ -660,7 +660,7 @@ LL |         if let 0 = 0? {}\n    |                    ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:96:11\n@@ -690,25 +690,25 @@ LL |     while (let 0 = 0)? {}\n    |           ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/disallowed-positions.rs:110:11\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/disallowed-positions.rs:110:22\n    |\n LL | / fn nested_within_while_expr() {\n LL | |     while &let 0 = 0 {}\n LL | |\n LL | |\n ...  |\n LL | |     while (let 0 = 0)? {}\n-   | |           ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                      ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n LL | |     while let true = let true = true {}\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:120:11\n@@ -848,7 +848,7 @@ LL |         while let 0 = 0? {}\n    |                       ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:173:5\n@@ -869,25 +869,25 @@ LL |     (let 0 = 0)?;\n    |     ^^^^^^^^^^^^ the `?` operator cannot be applied to type `bool`\n    |\n    = help: the trait `Try` is not implemented for `bool`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/disallowed-positions.rs:183:5\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/disallowed-positions.rs:183:16\n    |\n LL | / fn outside_if_and_while_expr() {\n LL | |     &let 0 = 0;\n LL | |\n LL | |     !let 0 = 0;\n ...  |\n LL | |     (let 0 = 0)?;\n-   | |     ^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                ^ cannot use the `?` operator in a function that returns `()`\n ...  |\n LL | |\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:198:10\n@@ -916,7 +916,7 @@ LL |         let 0 = 0?;\n    |                 ^^ the `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n error: aborting due to 104 previous errors; 2 warnings emitted\n "}, {"sha": "eb67170d47cdf10c51e145be9582de38803b46d0", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -5,7 +5,7 @@ LL |     SadGirl {}.call()?;\n    |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n    |\n    = help: the trait `Try` is not implemented for `impl Future`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n help: consider `await`ing on the `Future`\n    |\n LL |     SadGirl {}.call().await?;"}, {"sha": "30ae96763c0e291d5d45d3baa18dec91b78d2949", "filename": "src/test/ui/try-block/try-block-bad-type.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -15,8 +15,7 @@ pub fn main() {\n     let res: Result<i32, i32> = try { }; //~ ERROR type mismatch\n \n     let res: () = try { };\n-    //~^ ERROR the trait bound `(): Try` is not satisfied\n-    //~| ERROR the trait bound `(): Try` is not satisfied\n+    //~^ ERROR a `try` block must return `Result` or `Option`\n \n-    let res: i32 = try { 5 }; //~ ERROR the trait bound `i32: Try` is not satisfied\n+    let res: i32 = try { 5 }; //~ ERROR a `try` block must return `Result` or `Option`\n }"}, {"sha": "ec5e91f10c28614bb3cef54ee7064d200d1ec4e2", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -7,43 +7,40 @@ LL |         Err(\"\")?;\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = help: the following implementations were found:\n              <TryFromSliceError as From<Infallible>>\n-   = note: required by `from`\n+   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, &str>>` for `Result<u32, TryFromSliceError>`\n+   = note: required by `from_residual`\n \n-error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Ok == &str`\n+error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == &str`\n   --> $DIR/try-block-bad-type.rs:12:9\n    |\n LL |         \"\"\n    |         ^^ expected `i32`, found `&str`\n \n-error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Ok == ()`\n+error[E0271]: type mismatch resolving `<Result<i32, i32> as Try>::Output == ()`\n   --> $DIR/try-block-bad-type.rs:15:39\n    |\n LL |     let res: Result<i32, i32> = try { };\n    |                                       ^ expected `i32`, found `()`\n \n-error[E0277]: the trait bound `(): Try` is not satisfied\n+error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-block-bad-type.rs:17:25\n    |\n LL |     let res: () = try { };\n-   |                         ^ the trait `Try` is not implemented for `()`\n+   |                         ^ could not wrap the final value of the block as `()` doesn't implement `Try`\n    |\n-   = note: required by `from_ok`\n+   = help: the trait `Try` is not implemented for `()`\n+   = note: required by `from_output`\n \n-error[E0277]: the trait bound `(): Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:17:25\n-   |\n-LL |     let res: () = try { };\n-   |                         ^ the trait `Try` is not implemented for `()`\n-\n-error[E0277]: the trait bound `i32: Try` is not satisfied\n-  --> $DIR/try-block-bad-type.rs:21:26\n+error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n+  --> $DIR/try-block-bad-type.rs:20:26\n    |\n LL |     let res: i32 = try { 5 };\n-   |                          ^ the trait `Try` is not implemented for `i32`\n+   |                          ^ could not wrap the final value of the block as `i32` doesn't implement `Try`\n    |\n-   = note: required by `from_ok`\n+   = help: the trait `Try` is not implemented for `i32`\n+   = note: required by `from_output`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0271, E0277.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "69793df525e7714f8d154b58e23d75b129391f29", "filename": "src/test/ui/try-block/try-block-in-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -4,5 +4,5 @@\n \n fn main() {\n     while try { false } {}\n-    //~^ ERROR the trait bound `bool: Try` is not satisfied\n+    //~^ ERROR a `try` block must\n }"}, {"sha": "c83351d5c434634766476d45340a5b533cb38494", "filename": "src/test/ui/try-block/try-block-in-while.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-while.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,10 +1,11 @@\n-error[E0277]: the trait bound `bool: Try` is not satisfied\n+error[E0277]: a `try` block must return `Result` or `Option` (or another type that implements `Try`)\n   --> $DIR/try-block-in-while.rs:6:17\n    |\n LL |     while try { false } {}\n-   |                 ^^^^^ the trait `Try` is not implemented for `bool`\n+   |                 ^^^^^ could not wrap the final value of the block as `bool` doesn't implement `Try`\n    |\n-   = note: required by `from_ok`\n+   = help: the trait `Try` is not implemented for `bool`\n+   = note: required by `from_output`\n \n error: aborting due to previous error\n "}, {"sha": "3e9a584a5510a1ff9b91a8ff42ea3444bcd01fb8", "filename": "src/test/ui/try-block/try-block-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-type-error.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<Option<f32> as Try>::Ok == {integer}`\n+error[E0271]: type mismatch resolving `<Option<f32> as Try>::Output == {integer}`\n   --> $DIR/try-block-type-error.rs:10:9\n    |\n LL |         42\n@@ -7,7 +7,7 @@ LL |         42\n    |         expected `f32`, found integer\n    |         help: use a float literal: `42.0`\n \n-error[E0271]: type mismatch resolving `<Option<i32> as Try>::Ok == ()`\n+error[E0271]: type mismatch resolving `<Option<i32> as Try>::Output == ()`\n   --> $DIR/try-block-type-error.rs:16:5\n    |\n LL |     };"}, {"sha": "ecd12c430f1f6a421e9887a637c43860021b38a1", "filename": "src/test/ui/try-on-option.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -1,33 +0,0 @@\n-error[E0277]: `?` couldn't convert the error to `()`\n-  --> $DIR/try-on-option.rs:7:6\n-   |\n-LL | fn foo() -> Result<u32, ()> {\n-   |             --------------- expected `()` because of this\n-LL |     let x: Option<u32> = None;\n-LL |     x?;\n-   |      ^ the trait `From<NoneError>` is not implemented for `()`\n-   |\n-   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n-   = note: required by `from`\n-help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n-   |\n-LL |     x.ok_or_else(|| /* error value */)?;\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option.rs:13:5\n-   |\n-LL | / fn bar() -> u32 {\n-LL | |     let x: Option<u32> = None;\n-LL | |     x?;\n-   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n-LL | |     22\n-LL | | }\n-   | |_- this function should return `Result` or `Option` to accept `?`\n-   |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "9993061ea61552690458d39845f28c3b7908ba75", "filename": "src/test/ui/try-operator-custom.rs", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fui%2Ftry-operator-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47b99485a391e21caf3e0312969ed00ccbc6c167/src%2Ftest%2Fui%2Ftry-operator-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-custom.rs?ref=47b99485a391e21caf3e0312969ed00ccbc6c167", "patch": "@@ -1,63 +0,0 @@\n-// run-pass\n-\n-#![feature(try_trait)]\n-\n-use std::ops::Try;\n-\n-enum MyResult<T, U> {\n-    Awesome(T),\n-    Terrible(U)\n-}\n-\n-impl<U, V> Try for MyResult<U, V> {\n-    type Ok = U;\n-    type Error = V;\n-\n-    fn from_ok(u: U) -> MyResult<U, V> {\n-        MyResult::Awesome(u)\n-    }\n-\n-    fn from_error(e: V) -> MyResult<U, V> {\n-        MyResult::Terrible(e)\n-    }\n-\n-    fn into_result(self) -> Result<U, V> {\n-        match self {\n-            MyResult::Awesome(u) => Ok(u),\n-            MyResult::Terrible(e) => Err(e),\n-        }\n-    }\n-}\n-\n-fn f(x: i32) -> Result<i32, String> {\n-    if x == 0 {\n-        Ok(42)\n-    } else {\n-        let y = g(x)?;\n-        Ok(y)\n-    }\n-}\n-\n-fn g(x: i32) -> MyResult<i32, String> {\n-    let _y = f(x - 1)?;\n-    MyResult::Terrible(\"Hello\".to_owned())\n-}\n-\n-fn h() -> MyResult<i32, String> {\n-    let a: Result<i32, &'static str> = Err(\"Hello\");\n-    let b = a?;\n-    MyResult::Awesome(b)\n-}\n-\n-fn i() -> MyResult<i32, String> {\n-    let a: MyResult<i32, &'static str> = MyResult::Terrible(\"Hello\");\n-    let b = a?;\n-    MyResult::Awesome(b)\n-}\n-\n-fn main() {\n-    assert!(f(0) == Ok(42));\n-    assert!(f(10) == Err(\"Hello\".to_owned()));\n-    let _ = h();\n-    let _ = i();\n-}"}, {"sha": "87585822f5719dc5c5682d0dd9b72fc3f0ebb5eb", "filename": "src/test/ui/try-trait/bad-interconversion.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -0,0 +1,48 @@\n+#![feature(control_flow_enum)]\n+\n+use std::ops::ControlFlow;\n+\n+fn result_to_result() -> Result<u64, u8> {\n+    Ok(Err(123_i32)?)\n+    //~^ ERROR `?` couldn't convert the error to `u8`\n+}\n+\n+fn option_to_result() -> Result<u64, String> {\n+    Some(3)?;\n+    //~^ ERROR the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+    Ok(10)\n+}\n+\n+fn control_flow_to_result() -> Result<u64, String> {\n+    Ok(ControlFlow::Break(123)?)\n+    //~^ ERROR the `?` operator can only be used on `Result`s in a function that returns `Result`\n+}\n+\n+fn result_to_option() -> Option<u16> {\n+    Some(Err(\"hello\")?)\n+    //~^ ERROR the `?` operator can only be used on `Option`s in a function that returns `Option`\n+}\n+\n+fn control_flow_to_option() -> Option<u64> {\n+    Some(ControlFlow::Break(123)?)\n+    //~^ ERROR the `?` operator can only be used on `Option`s in a function that returns `Option`\n+}\n+\n+fn result_to_control_flow() -> ControlFlow<String> {\n+    ControlFlow::Continue(Err(\"hello\")?)\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+}\n+\n+fn option_to_control_flow() -> ControlFlow<u64> {\n+    Some(3)?;\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+    ControlFlow::Break(10)\n+}\n+\n+fn control_flow_to_control_flow() -> ControlFlow<i64> {\n+    ControlFlow::Break(4_u8)?;\n+    //~^ ERROR the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+    ControlFlow::Continue(())\n+}\n+\n+fn main() {}"}, {"sha": "e396256de2245fad5a45f04b0dbd808acd902176", "filename": "src/test/ui/try-trait/bad-interconversion.stderr", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Fbad-interconversion.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -0,0 +1,115 @@\n+error[E0277]: `?` couldn't convert the error to `u8`\n+  --> $DIR/bad-interconversion.rs:6:20\n+   |\n+LL | fn result_to_result() -> Result<u64, u8> {\n+   |                          --------------- expected `u8` because of this\n+LL |     Ok(Err(123_i32)?)\n+   |                    ^ the trait `From<i32>` is not implemented for `u8`\n+   |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = help: the following implementations were found:\n+             <u8 as From<NonZeroU8>>\n+             <u8 as From<bool>>\n+   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, i32>>` for `Result<u64, u8>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+  --> $DIR/bad-interconversion.rs:11:12\n+   |\n+LL | / fn option_to_result() -> Result<u64, String> {\n+LL | |     Some(3)?;\n+   | |            ^ use `.ok_or(...)?` to provide an error compatible with `Result<u64, String>`\n+LL | |\n+LL | |     Ok(10)\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u64, String>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Result`s in a function that returns `Result`\n+  --> $DIR/bad-interconversion.rs:17:31\n+   |\n+LL | / fn control_flow_to_result() -> Result<u64, String> {\n+LL | |     Ok(ControlFlow::Break(123)?)\n+   | |                               ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Result<u64, String>`\n+LL | |\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Result<u64, String>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+  --> $DIR/bad-interconversion.rs:22:22\n+   |\n+LL | / fn result_to_option() -> Option<u16> {\n+LL | |     Some(Err(\"hello\")?)\n+   | |                      ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `Option<u16>`\n+LL | |\n+LL | | }\n+   | |_- this function returns an `Option`\n+   |\n+   = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `Option<u16>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+  --> $DIR/bad-interconversion.rs:27:33\n+   |\n+LL | / fn control_flow_to_option() -> Option<u64> {\n+LL | |     Some(ControlFlow::Break(123)?)\n+   | |                                 ^ this `?` produces `ControlFlow<{integer}, Infallible>`, which is incompatible with `Option<u64>`\n+LL | |\n+LL | | }\n+   | |_- this function returns an `Option`\n+   |\n+   = help: the trait `FromResidual<ControlFlow<{integer}, Infallible>>` is not implemented for `Option<u64>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+  --> $DIR/bad-interconversion.rs:32:39\n+   |\n+LL | / fn result_to_control_flow() -> ControlFlow<String> {\n+LL | |     ControlFlow::Continue(Err(\"hello\")?)\n+   | |                                       ^ this `?` produces `Result<Infallible, &str>`, which is incompatible with `ControlFlow<String>`\n+LL | |\n+LL | | }\n+   | |_- this function returns a `ControlFlow`\n+   |\n+   = help: the trait `FromResidual<Result<Infallible, &str>>` is not implemented for `ControlFlow<String>`\n+   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+  --> $DIR/bad-interconversion.rs:37:12\n+   |\n+LL | / fn option_to_control_flow() -> ControlFlow<u64> {\n+LL | |     Some(3)?;\n+   | |            ^ this `?` produces `Option<Infallible>`, which is incompatible with `ControlFlow<u64>`\n+LL | |\n+LL | |     ControlFlow::Break(10)\n+LL | | }\n+   | |_- this function returns a `ControlFlow`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `ControlFlow<u64>`\n+   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `ControlFlow<B, _>`s in a function that returns `ControlFlow<B, _>`\n+  --> $DIR/bad-interconversion.rs:43:29\n+   |\n+LL | / fn control_flow_to_control_flow() -> ControlFlow<i64> {\n+LL | |     ControlFlow::Break(4_u8)?;\n+   | |                             ^ this `?` produces `ControlFlow<u8, Infallible>`, which is incompatible with `ControlFlow<i64>`\n+LL | |\n+LL | |     ControlFlow::Continue(())\n+LL | | }\n+   | |_- this function returns a `ControlFlow`\n+   |\n+   = help: the trait `FromResidual<ControlFlow<u8, Infallible>>` is not implemented for `ControlFlow<i64>`\n+   = note: unlike `Result`, there's no `From`-conversion performed for `ControlFlow`\n+   = note: required by `from_residual`\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "45aaf361a9c0e0e2977e9c9770f181440bb9ceef", "filename": "src/test/ui/try-trait/option-to-result.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -2,12 +2,12 @@ fn main(){ }\n \n fn test_result() -> Result<(),()> {\n     let a:Option<()> = Some(());\n-    a?;//~ ERROR `?` couldn't convert the error\n+    a?;//~ ERROR the `?` operator can only be used\n     Ok(())\n }\n \n fn test_option() -> Option<i32>{\n     let a:Result<i32, i32> = Ok(5);\n-    a?;//~ ERROR `?` couldn't convert the error\n+    a?;//~ ERROR the `?` operator can only be used\n     Some(5)\n }", "previous_filename": "src/test/ui/option-to-result.rs"}, {"sha": "92087c2aba2527293b375da2ffad34434c9b7505", "filename": "src/test/ui/try-trait/option-to-result.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Foption-to-result.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -0,0 +1,31 @@\n+error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+  --> $DIR/option-to-result.rs:5:6\n+   |\n+LL | / fn test_result() -> Result<(),()> {\n+LL | |     let a:Option<()> = Some(());\n+LL | |     a?;\n+   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<(), ()>`\n+LL | |     Ok(())\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<(), ()>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used on `Option`s in a function that returns `Option`\n+  --> $DIR/option-to-result.rs:11:6\n+   |\n+LL | / fn test_option() -> Option<i32>{\n+LL | |     let a:Result<i32, i32> = Ok(5);\n+LL | |     a?;\n+   | |      ^ this `?` produces `Result<Infallible, i32>`, which is incompatible with `Option<i32>`\n+LL | |     Some(5)\n+LL | | }\n+   | |_- this function returns an `Option`\n+   |\n+   = help: the trait `FromResidual<Result<Infallible, i32>>` is not implemented for `Option<i32>`\n+   = note: required by `from_residual`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "cf09838b304b3a55a09f344b852da6131bcb569d", "filename": "src/test/ui/try-trait/try-as-monad.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-as-monad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-as-monad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-as-monad.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+\n+#![feature(try_trait_v2)]\n+\n+use std::ops::Try;\n+\n+fn monad_unit<T: Try>(x: <T as Try>::Output) -> T {\n+    T::from_output(x)\n+}\n+\n+fn monad_bind<T1: Try<Residual = R>, T2: Try<Residual = R>, R>(\n+    mx: T1,\n+    f: impl FnOnce(<T1 as Try>::Output) -> T2)\n+-> T2 {\n+    let x = mx?;\n+    f(x)\n+}\n+\n+fn main() {\n+    let mx: Option<i32> = monad_unit(1);\n+    let my = monad_bind(mx, |x| Some(x + 1));\n+    let mz = monad_bind(my, |x| Some(-x));\n+    assert_eq!(mz, Some(-2));\n+}"}, {"sha": "63d17414c313bab96f509f4f12ed99b2dbf61a54", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "previous_filename": "src/test/ui/try-on-option-diagnostics.rs"}, {"sha": "e7c67c21bb3e3f1e9155733303f7fd28ec51b687", "filename": "src/test/ui/try-trait/try-on-option-diagnostics.stderr", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option-diagnostics.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,57 +1,57 @@\n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:7:5\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:7:6\n    |\n LL | / fn a_function() -> u32 {\n LL | |     let x: Option<u32> = None;\n LL | |     x?;\n-   | |     ^^ cannot use the `?` operator in a function that returns `u32`\n+   | |      ^ cannot use the `?` operator in a function that returns `u32`\n LL | |     22\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `u32`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:14:9\n+error[E0277]: the `?` operator can only be used in a closure that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:14:10\n    |\n LL |       let a_closure = || {\n    |  _____________________-\n LL | |         let x: Option<u32> = None;\n LL | |         x?;\n-   | |         ^^ cannot use the `?` operator in a closure that returns `{integer}`\n+   | |          ^ cannot use the `?` operator in a closure that returns `{integer}`\n LL | |         22\n LL | |     };\n    | |_____- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `{integer}`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `{integer}`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:26:13\n+error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:26:14\n    |\n LL | /         fn a_method() {\n LL | |             let x: Option<u32> = None;\n LL | |             x?;\n-   | |             ^^ cannot use the `?` operator in a method that returns `()`\n+   | |              ^ cannot use the `?` operator in a method that returns `()`\n LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n-error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-on-option-diagnostics.rs:39:13\n+error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option-diagnostics.rs:39:14\n    |\n LL | /         fn a_trait_method() {\n LL | |             let x: Option<u32> = None;\n LL | |             x?;\n-   | |             ^^ cannot use the `?` operator in a trait method that returns `()`\n+   | |              ^ cannot use the `?` operator in a trait method that returns `()`\n LL | |         }\n    | |_________- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error: aborting due to 4 previous errors\n ", "previous_filename": "src/test/ui/try-on-option-diagnostics.stderr"}, {"sha": "f2012936a1174394daaf77eabbcbb32650895b1e", "filename": "src/test/ui/try-trait/try-on-option.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -4,7 +4,7 @@ fn main() {}\n \n fn foo() -> Result<u32, ()> {\n     let x: Option<u32> = None;\n-    x?; //~ ERROR `?` couldn't convert the error\n+    x?; //~ ERROR the `?` operator\n     Ok(22)\n }\n ", "previous_filename": "src/test/ui/try-on-option.rs"}, {"sha": "604baa8550b45837b07679775fd87f4b24040ea5", "filename": "src/test/ui/try-trait/try-on-option.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-on-option.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -0,0 +1,31 @@\n+error[E0277]: the `?` operator can only be used on `Result`s, not `Option`s, in a function that returns `Result`\n+  --> $DIR/try-on-option.rs:7:6\n+   |\n+LL | / fn foo() -> Result<u32, ()> {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |      ^ use `.ok_or(...)?` to provide an error compatible with `Result<u32, ()>`\n+LL | |     Ok(22)\n+LL | | }\n+   | |_- this function returns a `Result`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `Result<u32, ()>`\n+   = note: required by `from_residual`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-on-option.rs:13:6\n+   |\n+LL | / fn bar() -> u32 {\n+LL | |     let x: Option<u32> = None;\n+LL | |     x?;\n+   | |      ^ cannot use the `?` operator in a function that returns `u32`\n+LL | |     22\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `FromResidual<Option<Infallible>>` is not implemented for `u32`\n+   = note: required by `from_residual`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "45636a7fceddf427fc38d322e9a29a5e4988d1c3", "filename": "src/test/ui/try-trait/try-operator-custom.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-custom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-custom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-custom.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -0,0 +1,91 @@\n+// run-pass\n+\n+#![feature(control_flow_enum)]\n+#![feature(try_trait_v2)]\n+\n+use std::ops::{ControlFlow, FromResidual, Try};\n+\n+enum MyResult<T, U> {\n+    Awesome(T),\n+    Terrible(U)\n+}\n+\n+enum Never {}\n+\n+impl<U, V> Try for MyResult<U, V> {\n+    type Output = U;\n+    type Residual = MyResult<Never, V>;\n+\n+    fn from_output(u: U) -> MyResult<U, V> {\n+        MyResult::Awesome(u)\n+    }\n+\n+    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n+        match self {\n+            MyResult::Awesome(u) => ControlFlow::Continue(u),\n+            MyResult::Terrible(e) => ControlFlow::Break(MyResult::Terrible(e)),\n+        }\n+    }\n+}\n+\n+impl<U, V, W> FromResidual<MyResult<Never, V>> for MyResult<U, W> where V: Into<W> {\n+    fn from_residual(x: MyResult<Never, V>) -> Self {\n+        match x {\n+            MyResult::Awesome(u) => match u {},\n+            MyResult::Terrible(e) => MyResult::Terrible(e.into()),\n+        }\n+    }\n+}\n+\n+type ResultResidual<E> = Result<std::convert::Infallible, E>;\n+\n+impl<U, V, W> FromResidual<ResultResidual<V>> for MyResult<U, W> where V: Into<W> {\n+    fn from_residual(x: ResultResidual<V>) -> Self {\n+        match x {\n+            Ok(v) => match v {}\n+            Err(e) => MyResult::Terrible(e.into()),\n+        }\n+    }\n+}\n+\n+impl<U, V, W> FromResidual<MyResult<Never, V>> for Result<U, W> where V: Into<W> {\n+    fn from_residual(x: MyResult<Never, V>) -> Self {\n+        match x {\n+            MyResult::Awesome(u) => match u {},\n+            MyResult::Terrible(e) => Err(e.into()),\n+        }\n+    }\n+}\n+\n+fn f(x: i32) -> Result<i32, String> {\n+    if x == 0 {\n+        Ok(42)\n+    } else {\n+        let y = g(x)?;\n+        Ok(y)\n+    }\n+}\n+\n+fn g(x: i32) -> MyResult<i32, String> {\n+    let _y = f(x - 1)?;\n+    MyResult::Terrible(\"Hello\".to_owned())\n+}\n+\n+fn h() -> MyResult<i32, String> {\n+    let a: Result<i32, &'static str> = Err(\"Hello\");\n+    let b = a?;\n+    MyResult::Awesome(b)\n+}\n+\n+fn i() -> MyResult<i32, String> {\n+    let a: MyResult<i32, &'static str> = MyResult::Terrible(\"Hello\");\n+    let b = a?;\n+    MyResult::Awesome(b)\n+}\n+\n+fn main() {\n+    assert!(f(0) == Ok(42));\n+    assert!(f(10) == Err(\"Hello\".to_owned()));\n+    let _ = h();\n+    let _ = i();\n+}"}, {"sha": "3b364f7e7d39d47560fe684f61be33a78ef00cdd", "filename": "src/test/ui/try-trait/try-operator-on-main.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,4 +1,4 @@\n-#![feature(try_trait)]\n+#![feature(try_trait_v2)]\n \n use std::ops::Try;\n \n@@ -7,14 +7,13 @@ fn main() {\n     std::fs::File::open(\"foo\")?; //~ ERROR the `?` operator can only\n \n     // a non-`Try` type on a non-`Try` fn\n-    ()?; //~ ERROR the `?` operator can only\n+    ()?; //~ ERROR the `?` operator can only be applied to\n+    //~^ ERROR the `?` operator can only be used in a function that\n \n     // an unrelated use of `Try`\n     try_trait_generic::<()>(); //~ ERROR the trait bound\n }\n \n-\n-\n fn try_trait_generic<T: Try>() -> T {\n     // and a non-`Try` object on a `Try` fn.\n     ()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`", "previous_filename": "src/test/ui/try-operator-on-main.rs"}, {"sha": "7d42c2e4d10d367cdb4938a7493740ff74f039df", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "renamed", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "patch": "@@ -1,18 +1,18 @@\n-error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\n-  --> $DIR/try-operator-on-main.rs:7:5\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-operator-on-main.rs:7:31\n    |\n LL | / fn main() {\n LL | |     // error for a `Try` type on a non-`Try` fn\n LL | |     std::fs::File::open(\"foo\")?;\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n+   | |                               ^ cannot use the `?` operator in a function that returns `()`\n LL | |\n ...  |\n LL | |     try_trait_generic::<()>();\n LL | | }\n    | |_- this function should return `Result` or `Option` to accept `?`\n    |\n-   = help: the trait `Try` is not implemented for `()`\n-   = note: required by `from_error`\n+   = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/try-operator-on-main.rs:10:5\n@@ -21,10 +21,28 @@ LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n+\n+error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n+  --> $DIR/try-operator-on-main.rs:10:7\n+   |\n+LL | / fn main() {\n+LL | |     // error for a `Try` type on a non-`Try` fn\n+LL | |     std::fs::File::open(\"foo\")?;\n+LL | |\n+LL | |     // a non-`Try` type on a non-`Try` fn\n+LL | |     ()?;\n+   | |       ^ cannot use the `?` operator in a function that returns `()`\n+...  |\n+LL | |     try_trait_generic::<()>();\n+LL | | }\n+   | |_- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `FromResidual<_>` is not implemented for `()`\n+   = note: required by `from_residual`\n \n error[E0277]: the trait bound `(): Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:13:25\n+  --> $DIR/try-operator-on-main.rs:14:25\n    |\n LL |     try_trait_generic::<()>();\n    |                         ^^ the trait `Try` is not implemented for `()`\n@@ -33,14 +51,14 @@ LL | fn try_trait_generic<T: Try>() -> T {\n    |                         --- required by this bound in `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n-  --> $DIR/try-operator-on-main.rs:20:5\n+  --> $DIR/try-operator-on-main.rs:19:5\n    |\n LL |     ()?;\n    |     ^^^ the `?` operator cannot be applied to type `()`\n    |\n    = help: the trait `Try` is not implemented for `()`\n-   = note: required by `into_result`\n+   = note: required by `branch`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`.", "previous_filename": "src/test/ui/try-operator-on-main.stderr"}, {"sha": "d42e51c7405ba327db90733b23e455f2dc0a632f", "filename": "src/test/ui/try-trait/try-poll.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-poll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8/src%2Ftest%2Fui%2Ftry-trait%2Ftry-poll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-poll.rs?ref=4a7ceea930e0029bccb8f7bfcc70ef4ba3d550d8", "previous_filename": "src/test/ui/try-poll.rs"}]}