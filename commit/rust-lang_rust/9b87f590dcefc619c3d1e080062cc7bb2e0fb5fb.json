{"sha": "9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODdmNTkwZGNlZmM2MTljM2QxZTA4MDA2MmNjN2JiMmUwZmI1ZmI=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-23T18:16:02Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:15Z"}, "message": "Implement `is_coinductive`\n\nFixes #55096.", "tree": {"sha": "78487068bd8bd5f1d264a30b13595350ab26c933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78487068bd8bd5f1d264a30b13595350ab26c933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb", "html_url": "https://github.com/rust-lang/rust/commit/9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b92174e3c25e54156efcbdc105a48d50afb6be", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b92174e3c25e54156efcbdc105a48d50afb6be", "html_url": "https://github.com/rust-lang/rust/commit/f2b92174e3c25e54156efcbdc105a48d50afb6be"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "41b7e73e5537e6a834436845f09f1b269092d5e7", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=9b87f590dcefc619c3d1e080062cc7bb2e0fb5fb", "patch": "@@ -155,12 +155,29 @@ impl context::AggregateOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n }\n \n impl context::ContextOps<ChalkArenas<'gcx>> for ChalkContext<'cx, 'gcx> {\n-    /// True if this is a coinductive goal -- e.g., proving an auto trait.\n+    /// True if this is a coinductive goal: basically proving that an auto trait\n+    /// is implemented or proving that a trait reference is well-formed.\n     fn is_coinductive(\n         &self,\n-        _goal: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>\n+        goal: &Canonical<'gcx, InEnvironment<'gcx, Goal<'gcx>>>\n     ) -> bool {\n-        unimplemented!()\n+        use rustc::traits::{WellFormed, WhereClause};\n+\n+        let mut goal = goal.value.goal;\n+        loop {\n+            match goal {\n+                GoalKind::DomainGoal(domain_goal) => match domain_goal {\n+                    DomainGoal::WellFormed(WellFormed::Trait(..)) => return true,\n+                    DomainGoal::Holds(WhereClause::Implemented(trait_predicate)) => {\n+                        return self.tcx.trait_is_auto(trait_predicate.def_id());\n+                    }\n+                    _ => return false,\n+                }\n+\n+                GoalKind::Quantified(_, bound_goal) => goal = *bound_goal.skip_binder(),\n+                _ => return false,\n+            }\n+        }\n     }\n \n     /// Create an inference table for processing a new goal and instantiate that goal"}]}