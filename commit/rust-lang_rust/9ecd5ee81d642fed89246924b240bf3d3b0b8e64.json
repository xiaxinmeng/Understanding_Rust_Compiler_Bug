{"sha": "9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllY2Q1ZWU4MWQ2NDJmZWQ4OTI0NjkyNGIyNDBiZjNkM2IwYjhlNjQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-25T05:42:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-25T05:42:54Z"}, "message": "rustc: Split diagnostics into \"span diagnostics\" and \"diagnostics\".\n\nThe former contain a codemap (which is per-crate), and the latter don't. This\nwill be useful in order to allow more than one crate to be compiled in one run\nof the compiler.", "tree": {"sha": "c165baf881e05c443b37a1b965c8b54a8f9a3406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c165baf881e05c443b37a1b965c8b54a8f9a3406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "html_url": "https://github.com/rust-lang/rust/commit/9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d096a8c860b0f7ff0933a8606f6e39398aebaae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d096a8c860b0f7ff0933a8606f6e39398aebaae", "html_url": "https://github.com/rust-lang/rust/commit/4d096a8c860b0f7ff0933a8606f6e39398aebaae"}], "stats": {"total": 194, "additions": 114, "deletions": 80}, "files": [{"sha": "69546118c49b33c80a118f5dc25b87645d3bb2f9", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -100,10 +100,11 @@ fn load_link(mis: [@ast::meta_item]) -> (option::t<str>,\n \n fn load_pkg(filename: str) -> option::t<pkg> {\n     let cm = codemap::new_codemap();\n+    let handler = diagnostic::mk_handler(none);\n     let sess = @{\n         cm: cm,\n         mutable next_id: 1,\n-        diagnostic: diagnostic::mk_handler(cm, none),\n+        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n         mutable chpos: 0u,\n         mutable byte_pos: 0u\n     };"}, {"sha": "3d7cbf3701e2a476ea4c721b0f6d2cf4b2abb259", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 60, "deletions": 36, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -5,51 +5,82 @@ import codemap::span;\n \n export emitter, emit;\n export level, fatal, error, warning, note;\n-export handler, mk_handler;\n+export span_handler, handler, mk_span_handler, mk_handler;\n+export codemap_span_handler, codemap_handler;\n export ice_msg;\n \n type emitter = fn@(cmsp: option<(codemap::codemap, span)>,\n                    msg: str, lvl: level);\n \n \n-iface handler {\n+iface span_handler {\n     fn span_fatal(sp: span, msg: str) -> !;\n-    fn fatal(msg: str) -> !;\n     fn span_err(sp: span, msg: str);\n+    fn span_warn(sp: span, msg: str);\n+    fn span_note(sp: span, msg: str);\n+    fn span_bug(sp: span, msg: str) -> !;\n+    fn span_unimpl(sp: span, msg: str) -> !;\n+    fn handler() -> handler;\n+}\n+\n+iface handler {\n+    fn fatal(msg: str) -> !;\n     fn err(msg: str);\n+    fn bump_err_count();\n     fn has_errors() -> bool;\n     fn abort_if_errors();\n-    fn span_warn(sp: span, msg: str);\n     fn warn(msg: str);\n-    fn span_note(sp: span, msg: str);\n     fn note(msg: str);\n-    fn span_bug(sp: span, msg: str) -> !;\n     fn bug(msg: str) -> !;\n-    fn span_unimpl(sp: span, msg: str) -> !;\n     fn unimpl(msg: str) -> !;\n+    fn emit(cmsp: option<(codemap::codemap, span)>, msg: str, lvl: level);\n }\n \n-type codemap_t = @{\n-    cm: codemap::codemap,\n+type handler_t = @{\n     mutable err_count: uint,\n-    emit: emitter\n+    _emit: emitter\n+};\n+\n+type codemap_t = @{\n+    handler: handler,\n+    cm: codemap::codemap\n };\n \n-impl codemap_handler of handler for codemap_t {\n+impl codemap_span_handler of span_handler for codemap_t {\n     fn span_fatal(sp: span, msg: str) -> ! {\n-        self.emit(some((self.cm, sp)), msg, fatal);\n+        self.handler.emit(some((self.cm, sp)), msg, fatal);\n         fail;\n     }\n+    fn span_err(sp: span, msg: str) {\n+        self.handler.emit(some((self.cm, sp)), msg, error);\n+        self.handler.bump_err_count();\n+    }\n+    fn span_warn(sp: span, msg: str) {\n+        self.handler.emit(some((self.cm, sp)), msg, warning);\n+    }\n+    fn span_note(sp: span, msg: str) {\n+        self.handler.emit(some((self.cm, sp)), msg, note);\n+    }\n+    fn span_bug(sp: span, msg: str) -> ! {\n+        self.span_fatal(sp, ice_msg(msg));\n+    }\n+    fn span_unimpl(sp: span, msg: str) -> ! {\n+        self.span_bug(sp, \"unimplemented \" + msg);\n+    }\n+    fn handler() -> handler {\n+        self.handler\n+    }\n+}\n+\n+impl codemap_handler of handler for handler_t {\n     fn fatal(msg: str) -> ! {\n-        self.emit(none, msg, fatal);\n+        self._emit(none, msg, fatal);\n         fail;\n     }\n-    fn span_err(sp: span, msg: str) {\n-        self.emit(some((self.cm, sp)), msg, error);\n-        self.err_count += 1u;\n-    }\n     fn err(msg: str) {\n-        self.emit(none, msg, error);\n+        self._emit(none, msg, error);\n+    }\n+    fn bump_err_count() {\n         self.err_count += 1u;\n     }\n     fn has_errors() -> bool { self.err_count > 0u }\n@@ -58,36 +89,30 @@ impl codemap_handler of handler for codemap_t {\n             self.fatal(\"aborting due to previous errors\");\n         }\n     }\n-    fn span_warn(sp: span, msg: str) {\n-        self.emit(some((self.cm, sp)), msg, warning);\n-    }\n     fn warn(msg: str) {\n-        self.emit(none, msg, warning);\n-    }\n-    fn span_note(sp: span, msg: str) {\n-        self.emit(some((self.cm, sp)), msg, note);\n+        self._emit(none, msg, warning);\n     }\n     fn note(msg: str) {\n-        self.emit(none, msg, note);\n-    }\n-    fn span_bug(sp: span, msg: str) -> ! {\n-        self.span_fatal(sp, ice_msg(msg));\n+        self._emit(none, msg, note);\n     }\n     fn bug(msg: str) -> ! {\n         self.fatal(ice_msg(msg));\n     }\n-    fn span_unimpl(sp: span, msg: str) -> ! {\n-        self.span_bug(sp, \"unimplemented \" + msg);\n-    }\n     fn unimpl(msg: str) -> ! { self.bug(\"unimplemented \" + msg); }\n+    fn emit(cmsp: option<(codemap::codemap, span)>, msg: str, lvl: level) {\n+        self._emit(cmsp, msg, lvl);\n+    }\n }\n \n fn ice_msg(msg: str) -> str {\n     #fmt[\"internal compiler error %s\", msg]\n }\n \n-fn mk_handler(cm: codemap::codemap,\n-              emitter: option<emitter>) -> handler {\n+fn mk_span_handler(handler: handler, cm: codemap::codemap) -> span_handler {\n+    @{ handler: handler, cm: cm } as span_handler\n+}\n+\n+fn mk_handler(emitter: option<emitter>) -> handler {\n \n     let emit = alt emitter {\n       some(e) { e }\n@@ -101,9 +126,8 @@ fn mk_handler(cm: codemap::codemap,\n     };\n \n     @{\n-        cm: cm,\n         mutable err_count: 0u,\n-        emit: emit\n+        _emit: emit\n     } as handler\n }\n "}, {"sha": "f500936aa73801de7b240a36549d53eac354b64e", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -299,7 +299,7 @@ fn pretty_print_input(sess: session, cfg: ast::crate_cfg, input: str,\n       }\n       ppm_expanded | ppm_normal {}\n     }\n-    pprust::print_crate(sess.codemap, sess.diagnostic, crate, input,\n+    pprust::print_crate(sess.codemap, sess.span_diagnostic, crate, input,\n                         io::string_reader(src), io::stdout(), ann);\n }\n \n@@ -481,21 +481,23 @@ fn build_session(sopts: @session::options, input: str,\n         sopts.addl_lib_search_paths);\n     let codemap = codemap::new_codemap();\n     let diagnostic_handler =\n-        diagnostic::mk_handler(codemap, some(demitter));\n+        diagnostic::mk_handler(some(demitter));\n+    let span_diagnostic_handler =\n+        diagnostic::mk_span_handler(diagnostic_handler, codemap);\n     @{targ_cfg: target_cfg,\n       opts: sopts,\n       cstore: cstore,\n       parse_sess: @{\n           cm: codemap,\n           mutable next_id: 1,\n-          diagnostic: diagnostic_handler,\n+          span_diagnostic: span_diagnostic_handler,\n           mutable chpos: 0u,\n           mutable byte_pos: 0u\n       },\n       codemap: codemap,\n       // For a library crate, this is always none\n       mutable main_fn: none,\n-      diagnostic: diagnostic_handler,\n+      span_diagnostic: span_diagnostic_handler,\n       filesearch: filesearch,\n       mutable building_library: false,\n       working_dir: fs::dirname(input)}"}, {"sha": "31ddd3d241f00237db707a95affbee17569db679", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -60,53 +60,53 @@ type session = @{targ_cfg: @config,\n                  codemap: codemap::codemap,\n                  // For a library crate, this is always none\n                  mutable main_fn: option::t<node_id>,\n-                 diagnostic: diagnostic::handler,\n+                 span_diagnostic: diagnostic::span_handler,\n                  filesearch: filesearch::filesearch,\n                  mutable building_library: bool,\n                  working_dir: str};\n \n impl session for session {\n     fn span_fatal(sp: span, msg: str) -> ! {\n-        self.diagnostic.span_fatal(sp, msg)\n+        self.span_diagnostic.span_fatal(sp, msg)\n     }\n     fn fatal(msg: str) -> ! {\n-        self.diagnostic.fatal(msg)\n+        self.span_diagnostic.handler().fatal(msg)\n     }\n     fn span_err(sp: span, msg: str) {\n-        self.diagnostic.span_err(sp, msg)\n+        self.span_diagnostic.span_err(sp, msg)\n     }\n     fn err(msg: str) {\n-        self.diagnostic.err(msg)\n+        self.span_diagnostic.handler().err(msg)\n     }\n     fn has_errors() -> bool {\n-        self.diagnostic.has_errors()\n+        self.span_diagnostic.handler().has_errors()\n     }\n     fn abort_if_errors() {\n-        self.diagnostic.abort_if_errors()\n+        self.span_diagnostic.handler().abort_if_errors()\n     }\n     fn span_warn(sp: span, msg: str) {\n-        self.diagnostic.span_warn(sp, msg)\n+        self.span_diagnostic.span_warn(sp, msg)\n     }\n     fn warn(msg: str) {\n-        self.diagnostic.warn(msg)\n+        self.span_diagnostic.handler().warn(msg)\n     }\n     fn span_note(sp: span, msg: str) {\n-        self.diagnostic.span_note(sp, msg)\n+        self.span_diagnostic.span_note(sp, msg)\n     }\n     fn note(msg: str) {\n-        self.diagnostic.note(msg)\n+        self.span_diagnostic.handler().note(msg)\n     }\n     fn span_bug(sp: span, msg: str) -> ! {\n-        self.diagnostic.span_bug(sp, msg)\n+        self.span_diagnostic.span_bug(sp, msg)\n     }\n     fn bug(msg: str) -> ! {\n-        self.diagnostic.bug(msg)\n+        self.span_diagnostic.handler().bug(msg)\n     }\n     fn span_unimpl(sp: span, msg: str) -> ! {\n-        self.diagnostic.span_unimpl(sp, msg)\n+        self.span_diagnostic.span_unimpl(sp, msg)\n     }\n     fn unimpl(msg: str) -> ! {\n-        self.diagnostic.unimpl(msg)\n+        self.span_diagnostic.handler().unimpl(msg)\n     }\n     fn next_node_id() -> ast::node_id {\n         ret syntax::parse::parser::next_node_id(self.parse_sess);"}, {"sha": "f51838ef28e3a03cc19433f57a7728c9ea334838", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -10,7 +10,7 @@ import driver::diagnostic;\n \n type reader = @{\n     cm: codemap::codemap,\n-    diagnostic: diagnostic::handler,\n+    span_diagnostic: diagnostic::span_handler,\n     src: str,\n     len: uint,\n     mutable col: uint,\n@@ -49,17 +49,18 @@ impl reader for reader {\n         } else { self.curr = -1 as char; }\n     }\n     fn fatal(m: str) -> ! {\n-        self.diagnostic.span_fatal(\n+        self.span_diagnostic.span_fatal(\n             ast_util::mk_sp(self.chpos, self.chpos),\n             m)\n     }\n }\n \n fn new_reader(cm: codemap::codemap,\n-              diagnostic: diagnostic::handler,\n+              span_diagnostic: diagnostic::span_handler,\n               src: str, filemap: codemap::filemap,\n               itr: @interner::interner<str>) -> reader {\n-    let r = @{cm: cm, diagnostic: diagnostic,\n+    let r = @{cm: cm,\n+              span_diagnostic: span_diagnostic,\n               src: src, len: str::byte_len(src),\n               mutable col: 0u, mutable pos: 0u, mutable curr: -1 as char,\n               mutable chpos: filemap.start_pos.ch, mutable strs: [],\n@@ -667,13 +668,13 @@ fn is_lit(t: token::token) -> bool {\n type lit = {lit: str, pos: uint};\n \n fn gather_comments_and_literals(cm: codemap::codemap,\n-                                diagnostic: diagnostic::handler,\n+                                span_diagnostic: diagnostic::span_handler,\n                                 path: str,\n                                 srdr: io::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n     let src = str::unsafe_from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk::<str>(str::hash, str::eq);\n-    let rdr = new_reader(cm, diagnostic, src,\n+    let rdr = new_reader(cm, span_diagnostic, src,\n                          codemap::new_filemap(path, 0u, 0u), itr);\n     let comments: [cmnt] = [];\n     let literals: [lit] = [];"}, {"sha": "504a37647b843d5b45b882253360b28725549579", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -24,7 +24,7 @@ enum file_type { CRATE_FILE, SOURCE_FILE, }\n type parse_sess = @{\n     cm: codemap::codemap,\n     mutable next_id: node_id,\n-    diagnostic: diagnostic::handler,\n+    span_diagnostic: diagnostic::span_handler,\n     // these two must be kept up to date\n     mutable chpos: uint,\n     mutable byte_pos: uint\n@@ -78,13 +78,13 @@ impl parser for parser {\n         ret self.buffer[distance - 1u].tok;\n     }\n     fn fatal(m: str) -> ! {\n-        self.sess.diagnostic.span_fatal(self.span, m)\n+        self.sess.span_diagnostic.span_fatal(self.span, m)\n     }\n     fn span_fatal(sp: span, m: str) -> ! {\n-        self.sess.diagnostic.span_fatal(sp, m)\n+        self.sess.span_diagnostic.span_fatal(sp, m)\n     }\n     fn warn(m: str) {\n-        self.sess.diagnostic.span_warn(self.span, m)\n+        self.sess.span_diagnostic.span_warn(self.span, m)\n     }\n     fn get_str(i: token::str_num) -> str {\n         interner::get(*self.reader.interner, i)\n@@ -101,14 +101,14 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n         src\n       }\n       result::err(e) {\n-        sess.diagnostic.fatal(e)\n+        sess.span_diagnostic.handler().fatal(e)\n       }\n     };\n     let filemap = codemap::new_filemap(path, sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.cm, sess.diagnostic,\n-                                src, filemap, itr);\n+    let rdr = lexer::new_reader(sess.cm, sess.span_diagnostic, src, filemap,\n+                                itr);\n     ret new_parser(sess, cfg, rdr, ftype);\n }\n \n@@ -118,8 +118,8 @@ fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n     let filemap = codemap::new_filemap(name, sess.chpos, sess.byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.cm, sess.diagnostic,\n-                                source, filemap, itr);\n+    let rdr = lexer::new_reader(sess.cm, sess.span_diagnostic, source,\n+                                filemap, itr);\n     ret new_parser(sess, cfg, rdr, ftype);\n }\n \n@@ -2628,7 +2628,8 @@ fn parse_crate_from_file(input: str, cfg: ast::crate_cfg, sess: parse_sess) ->\n     } else if str::ends_with(input, \".rs\") {\n         parse_crate_from_source_file(input, cfg, sess)\n     } else {\n-        sess.diagnostic.fatal(\"unknown input file type: \" + input)\n+        sess.span_diagnostic.handler().fatal(\"unknown input file type: \" +\n+                                             input)\n     }\n }\n "}, {"sha": "1f09436361d404299f3f701a5db5da4706848b53", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -60,11 +60,12 @@ const default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-fn print_crate(cm: codemap, diagnostic: diagnostic::handler,\n+fn print_crate(cm: codemap, span_diagnostic: diagnostic::span_handler,\n                crate: @ast::crate, filename: str, in: io::reader,\n                out: io::writer, ann: pp_ann) {\n     let boxes: [pp::breaks] = [];\n-    let r = lexer::gather_comments_and_literals(cm, diagnostic, filename, in);\n+    let r = lexer::gather_comments_and_literals(cm, span_diagnostic, filename,\n+                                                in);\n     let s =\n         @{s: pp::mk_printer(out, default_columns),\n           cm: some(cm),"}, {"sha": "8ca129dbe5034b7e5987dfc4811efeac5c07847d", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -259,10 +259,11 @@ fn check_variants_T<T: copy>(\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but testing the\n                 // string for stability is easier and ok for now.\n+                let handler = diagnostic::mk_handler(none);\n                 let str3 =\n                     as_str(bind pprust::print_crate(\n                         codemap,\n-                        diagnostic::mk_handler(codemap, none),\n+                        diagnostic::mk_span_handler(handler, codemap),\n                         crate2,\n                         filename,\n                         io::string_reader(\"\"), _,\n@@ -416,18 +417,19 @@ fn check_compiling(filename: str) -> happiness {\n fn parse_and_print(code: str) -> str {\n     let filename = \"tmp.rs\";\n     let cm = codemap::new_codemap();\n+    let handler = diagnostic::mk_handler(none);\n     let sess = @{\n         cm: cm,\n         mutable next_id: 0,\n-        diagnostic: diagnostic::mk_handler(cm, none),\n+        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n         mutable chpos: 0u,\n         mutable byte_pos: 0u\n     };\n     write_file(filename, code);\n     let crate = parser::parse_crate_from_source_str(\n         filename, code, [], sess);\n     ret as_str(bind pprust::print_crate(sess.cm,\n-                                        sess.diagnostic,\n+                                        sess.span_diagnostic,\n                                         crate,\n                                         filename,\n                                         io::string_reader(code), _,\n@@ -565,10 +567,11 @@ fn check_variants(files: [str], cx: context) {\n \n         log(error, \"check_variants: \" + file);\n         let cm = codemap::new_codemap();\n+        let handler = diagnostic::mk_handler(none);\n         let sess = @{\n             cm: cm,\n             mutable next_id: 0,\n-            diagnostic: diagnostic::mk_handler(cm, none),\n+            span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n             mutable chpos: 0u,\n             mutable byte_pos: 0u\n         };\n@@ -578,7 +581,7 @@ fn check_variants(files: [str], cx: context) {\n                 s, [], sess);\n         #error(\"%s\",\n                as_str(bind pprust::print_crate(sess.cm,\n-                                               sess.diagnostic,\n+                                               sess.span_diagnostic,\n                                                crate,\n                                                file,\n                                                io::string_reader(s), _,"}, {"sha": "9be1c996451fe5b320031f10002f13edcac349cd", "filename": "src/rustdoc/parse.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Frustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ecd5ee81d642fed89246924b240bf3d3b0b8e64/src%2Frustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fparse.rs?ref=9ecd5ee81d642fed89246924b240bf3d3b0b8e64", "patch": "@@ -9,10 +9,11 @@ export from_file, from_str;\n \n fn new_parse_sess() -> parser::parse_sess {\n     let cm = codemap::new_codemap();\n+    let handler = diagnostic::mk_handler(none);\n     let sess = @{\n         cm: cm,\n         mutable next_id: 1,\n-        diagnostic: diagnostic::mk_handler(cm, none),\n+        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n         mutable chpos: 0u,\n         mutable byte_pos: 0u\n     };"}]}