{"sha": "285e9a65cd61520a4da1f912d1b41e523cd3a5e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NWU5YTY1Y2Q2MTUyMGE0ZGExZjkxMmQxYjQxZTUyM2NkM2E1ZTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-21T11:20:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-21T11:20:22Z"}, "message": "Merge pull request #778 from christianpoveda/master\n\nUpdate tag methods to match Machine changes", "tree": {"sha": "ca123c2e3d87c4221e0c73534f9b89d511eaf05e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca123c2e3d87c4221e0c73534f9b89d511eaf05e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285e9a65cd61520a4da1f912d1b41e523cd3a5e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdDL12CRBK7hj4Ov3rIwAAdHIIAIRkmNLRcCRvj97TbvkPL6Xv\nwRJ7Kz4M01y+/OV5G/gBAKIwO39e6a9wCXRBc27447nqofCPg97nXsZ86HiTXK7G\n28oy/DnsIX4uw7mk8jkl+DzsXMcr8rIZla9JdBhR7PEsuwLivktyKLbNANClOBM3\nmtM15VACTVp8z5BCefxClRy5IcWVHEG7fsg5phRP0mR9h2xn116uaQuwTahuqWfA\nk2Rc4Dw9HI84xK8qjmYJMCisjeqW03rCaGuWpq/615CkZatO6q8lqkExuCVZ5iPW\ng7BJPijQskDf8n6/pyQRqZssTi517BP7KegOs1BG5RLHFl2ndigj+CZP95uf59Y=\n=mAc3\n-----END PGP SIGNATURE-----\n", "payload": "tree ca123c2e3d87c4221e0c73534f9b89d511eaf05e\nparent 03cc719b92cf2187b6919e014f8af9d1113cf323\nparent 5edb9c915f8f36ffd70f0a0022ae64be008db87c\nauthor Ralf Jung <post@ralfj.de> 1561116022 +0200\ncommitter GitHub <noreply@github.com> 1561116022 +0200\n\nMerge pull request #778 from christianpoveda/master\n\nUpdate tag methods to match Machine changes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285e9a65cd61520a4da1f912d1b41e523cd3a5e4", "html_url": "https://github.com/rust-lang/rust/commit/285e9a65cd61520a4da1f912d1b41e523cd3a5e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03cc719b92cf2187b6919e014f8af9d1113cf323", "url": "https://api.github.com/repos/rust-lang/rust/commits/03cc719b92cf2187b6919e014f8af9d1113cf323", "html_url": "https://github.com/rust-lang/rust/commit/03cc719b92cf2187b6919e014f8af9d1113cf323"}, {"sha": "5edb9c915f8f36ffd70f0a0022ae64be008db87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5edb9c915f8f36ffd70f0a0022ae64be008db87c", "html_url": "https://github.com/rust-lang/rust/commit/5edb9c915f8f36ffd70f0a0022ae64be008db87c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "f09338fca150fc5bd7d12a8559b21e7a638faebd", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=285e9a65cd61520a4da1f912d1b41e523cd3a5e4", "patch": "@@ -1 +1 @@\n-4fb77a0398d0339f35f1b18595b375428babd431\n+56a12b2ad058f22f1ef090713df15598525ba4a4"}, {"sha": "9072f141f89d9d3759873c71791352741b03f83f", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=285e9a65cd61520a4da1f912d1b41e523cd3a5e4", "patch": "@@ -508,21 +508,21 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n         let (extra, base_tag) = Stacks::new_allocation(\n             id,\n             Size::from_bytes(alloc.bytes.len() as u64),\n-            Rc::clone(memory_extra),\n+            Rc::clone(&memory.extra),\n             kind,\n         );\n         if kind != MiriMemoryKind::Static.into() {\n             assert!(alloc.relocations.is_empty(), \"Only statics can come initialized with inner pointers\");\n             // Now we can rely on the inner pointers being static, too.\n         }\n-        let mut memory_extra = memory_extra.borrow_mut();\n+        let mut memory_extra = memory.extra.borrow_mut();\n         let alloc: Allocation<Tag, Self::AllocExtra> = Allocation {\n             bytes: alloc.bytes,\n             relocations: Relocations::from_presorted(\n@@ -543,9 +543,9 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn tag_static_base_pointer(\n         id: AllocId,\n-        memory_extra: &Self::MemoryExtra,\n+        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> Self::PointerTag {\n-        memory_extra.borrow_mut().static_base_ptr(id)\n+        memory.extra.borrow_mut().static_base_ptr(id)\n     }\n \n     #[inline(always)]"}]}