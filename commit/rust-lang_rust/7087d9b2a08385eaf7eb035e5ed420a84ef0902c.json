{"sha": "7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "node_id": "C_kwDOAAsO6NoAKDcwODdkOWIyYTA4Mzg1ZWFmN2ViMDM1ZTVlZDQyMGE4NGVmMDkwMmM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T11:27:18Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-28T17:27:20Z"}, "message": "Remove `tcx.mk_const_var`\n\n... `tcx.mk_const` can now be used instead", "tree": {"sha": "50fe5bbdc87417e5b741d7d6a204ccf02421e7f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50fe5bbdc87417e5b741d7d6a204ccf02421e7f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "html_url": "https://github.com/rust-lang/rust/commit/7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20e506f7df271e933827a2290c0e0a704146443", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20e506f7df271e933827a2290c0e0a704146443", "html_url": "https://github.com/rust-lang/rust/commit/e20e506f7df271e933827a2290c0e0a704146443"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "ec2017b3d89591f320bc81d5029ec8efd0be6b08", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "patch": "@@ -753,7 +753,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                                 origin: var_value.origin,\n                                 val: ConstVariableValue::Unknown { universe: self.for_universe },\n                             });\n-                            Ok(self.tcx().mk_const_var(new_var_id, c.ty()))\n+                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n                         }\n                     }\n                 }\n@@ -975,7 +975,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                                         },\n                                     },\n                                 );\n-                            Ok(self.tcx().mk_const_var(new_var_id, c.ty()))\n+                            Ok(self.tcx().mk_const(new_var_id, c.ty()))\n                         }\n                     }\n                 }"}, {"sha": "f6946929bd23f58dbdd62d37fbbcedb6572f3831", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "patch": "@@ -102,7 +102,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n             Entry::Vacant(entry) => {\n                 let index = self.const_freshen_count;\n                 self.const_freshen_count += 1;\n-                let ct = self.infcx.tcx.mk_const_infer(freshener(index), ty);\n+                let ct = self.infcx.tcx.mk_const(freshener(index), ty);\n                 entry.insert(ct);\n                 ct\n             }"}, {"sha": "df00ed0cb9cc28477beb1f93e3761a868083b7e0", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "patch": "@@ -1065,7 +1065,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     }\n \n     pub fn next_const_var(&self, ty: Ty<'tcx>, origin: ConstVariableOrigin) -> ty::Const<'tcx> {\n-        self.tcx.mk_const_var(self.next_const_var_id(origin), ty)\n+        self.tcx.mk_const(self.next_const_var_id(origin), ty)\n     }\n \n     pub fn next_const_var_in_universe(\n@@ -1079,7 +1079,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             .borrow_mut()\n             .const_unification_table()\n             .new_key(ConstVarValue { origin, val: ConstVariableValue::Unknown { universe } });\n-        self.tcx.mk_const_var(vid, ty)\n+        self.tcx.mk_const(vid, ty)\n     }\n \n     pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {\n@@ -1195,7 +1195,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                         origin,\n                         val: ConstVariableValue::Unknown { universe: self.universe() },\n                     });\n-                self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()\n+                self.tcx.mk_const(const_var_id, self.tcx.type_of(param.def_id)).into()\n             }\n         }\n     }"}, {"sha": "f6bc4db0d59dfc5466f3927e3a6c10ce55d552c3", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "patch": "@@ -1087,7 +1087,7 @@ where\n                             origin: var_value.origin,\n                             val: ConstVariableValue::Unknown { universe: self.universe },\n                         });\n-                        Ok(self.tcx().mk_const_var(new_var_id, a.ty()))\n+                        Ok(self.tcx().mk_const(new_var_id, a.ty()))\n                     }\n                 }\n             }"}, {"sha": "83b6bdedcde20402243c5f3e608dcbde24a98d97", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7087d9b2a08385eaf7eb035e5ed420a84ef0902c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7087d9b2a08385eaf7eb035e5ed420a84ef0902c", "patch": "@@ -17,8 +17,8 @@ use crate::traits;\n use crate::ty::query::{self, TyCtxtAt};\n use crate::ty::{\n     self, AdtDef, AdtDefData, AdtKind, Binder, BindingMode, BoundVar, CanonicalPolyFnSig,\n-    ClosureSizeProfileData, Const, ConstS, ConstVid, DefIdTree, FloatTy, FloatVar, FloatVid,\n-    GenericParamDefKind, InferConst, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n+    ClosureSizeProfileData, Const, ConstS, DefIdTree, FloatTy, FloatVar, FloatVid,\n+    GenericParamDefKind, InferTy, IntTy, IntVar, IntVid, List, ParamConst, ParamTy,\n     PolyExistentialPredicate, PolyFnSig, Predicate, PredicateKind, PredicateS, ProjectionTy,\n     Region, RegionKind, ReprOptions, TraitObjectVisitor, Ty, TyKind, TyS, TyVar, TyVid, TypeAndMut,\n     UintTy, Visibility,\n@@ -2602,11 +2602,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_const_internal(ty::ConstS { kind: kind.into(), ty })\n     }\n \n-    #[inline]\n-    pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstKind::Infer(InferConst::Var(v)), ty)\n-    }\n-\n     #[inline]\n     pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {\n         self.mk_ty_infer(IntVar(v))\n@@ -2622,30 +2617,23 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Infer(it))\n     }\n \n-    #[inline]\n-    pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n-        self.mk_const(ty::ConstKind::Infer(ic), ty)\n-    }\n-\n     #[inline]\n     pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {\n         self.mk_ty(Param(ParamTy { index, name }))\n     }\n \n-    #[inline]\n-    pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> Const<'tcx> {\n-        self.mk_const(ty::ConstKind::Param(ParamConst { index, name }), ty)\n-    }\n-\n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n                 self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()\n             }\n             GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),\n-            GenericParamDefKind::Const { .. } => {\n-                self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()\n-            }\n+            GenericParamDefKind::Const { .. } => self\n+                .mk_const(\n+                    ParamConst { index: param.index, name: param.name },\n+                    self.type_of(param.def_id),\n+                )\n+                .into(),\n         }\n     }\n "}]}