{"sha": "644df2fd23450c8c859c1bce10c51087a3c254f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NGRmMmZkMjM0NTBjOGM4NTljMWJjZTEwYzUxMDg3YTNjMjU0Zjg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-26T19:43:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-26T19:43:20Z"}, "message": "Rollup merge of #81195 - estebank:suggest-bound-on-trait-with-params, r=oli-obk\n\nAccount for generics when suggesting bound\n\nFix #81175.", "tree": {"sha": "d727010809ebdcb6c5afd3d139794d7897ec7a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d727010809ebdcb6c5afd3d139794d7897ec7a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644df2fd23450c8c859c1bce10c51087a3c254f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgEHDYCRBK7hj4Ov3rIwAAdHIIAEUoiJE0yeR6Ugb3DybfTMb/\nDNC2Qpbz6+598RPEZXY3IRaI9M5vloEYvcN0c4/zXJNtnRslsiGvJ6BRayLlHj4d\nMU7TQ1zICBrsoixssVHzpUHUBibv2RQ6PvPHezD/osLEAwaNIyUJUhhgoiqd2Z6/\ncdkBUbOE07jxDJosib7uO6Nppk60Vvxmyb9JAyt3odlN8/bXa7HwxvudV/R7+aAt\n3p79R5+1yYwXGlPSpFCTdepMv5xHlJf/QBxu/F1OCOOd0BfToDhUWnsHK/gX0yBw\n4Iv4Knav3TaG/o9/tqWM1YaQ1kRItz7lplv0Tp5KdEK+DfE0xLR+XvJWjC2WZQc=\n=Yu22\n-----END PGP SIGNATURE-----\n", "payload": "tree d727010809ebdcb6c5afd3d139794d7897ec7a70\nparent 8299105821327f2a316d0ffa925e55e770b65ad2\nparent 088c89d9ffe47fb6d1b51c8edfd8ad652ee2a7f7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611690200 +0900\ncommitter GitHub <noreply@github.com> 1611690200 +0900\n\nRollup merge of #81195 - estebank:suggest-bound-on-trait-with-params, r=oli-obk\n\nAccount for generics when suggesting bound\n\nFix #81175.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644df2fd23450c8c859c1bce10c51087a3c254f8", "html_url": "https://github.com/rust-lang/rust/commit/644df2fd23450c8c859c1bce10c51087a3c254f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644df2fd23450c8c859c1bce10c51087a3c254f8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8299105821327f2a316d0ffa925e55e770b65ad2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8299105821327f2a316d0ffa925e55e770b65ad2", "html_url": "https://github.com/rust-lang/rust/commit/8299105821327f2a316d0ffa925e55e770b65ad2"}, {"sha": "088c89d9ffe47fb6d1b51c8edfd8ad652ee2a7f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/088c89d9ffe47fb6d1b51c8edfd8ad652ee2a7f7", "html_url": "https://github.com/rust-lang/rust/commit/088c89d9ffe47fb6d1b51c8edfd8ad652ee2a7f7"}], "stats": {"total": 171, "additions": 156, "deletions": 15}, "files": [{"sha": "0ab00fddfafc8583eded13c61fa38b686a113c4d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/644df2fd23450c8c859c1bce10c51087a3c254f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644df2fd23450c8c859c1bce10c51087a3c254f8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=644df2fd23450c8c859c1bce10c51087a3c254f8", "patch": "@@ -286,21 +286,32 @@ fn suggest_restriction(\n         );\n     } else {\n         // Trivial case: `T` needs an extra bound: `T: Bound`.\n-        let (sp, suggestion) = match super_traits {\n-            None => predicate_constraint(\n+        let (sp, suggestion) = match (\n+            generics\n+                .params\n+                .iter()\n+                .filter(\n+                    |p| !matches!(p.kind, hir::GenericParamKind::Type { synthetic: Some(_), ..}),\n+                )\n+                .next(),\n+            super_traits,\n+        ) {\n+            (_, None) => predicate_constraint(\n                 generics,\n                 trait_ref.without_const().to_predicate(tcx).to_string(),\n             ),\n-            Some((ident, bounds)) => match bounds {\n-                [.., bound] => (\n-                    bound.span().shrink_to_hi(),\n-                    format!(\" + {}\", trait_ref.print_only_trait_path().to_string()),\n-                ),\n-                [] => (\n-                    ident.span.shrink_to_hi(),\n-                    format!(\": {}\", trait_ref.print_only_trait_path().to_string()),\n-                ),\n-            },\n+            (None, Some((ident, []))) => (\n+                ident.span.shrink_to_hi(),\n+                format!(\": {}\", trait_ref.print_only_trait_path().to_string()),\n+            ),\n+            (_, Some((_, [.., bounds]))) => (\n+                bounds.span().shrink_to_hi(),\n+                format!(\" + {}\", trait_ref.print_only_trait_path().to_string()),\n+            ),\n+            (Some(_), Some((_, []))) => (\n+                generics.span.shrink_to_hi(),\n+                format!(\": {}\", trait_ref.print_only_trait_path().to_string()),\n+            ),\n         };\n \n         err.span_suggestion_verbose("}, {"sha": "be61b7dda256aa3f045333896f379528ec200bcd", "filename": "src/test/ui/bound-suggestions.fixed", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/644df2fd23450c8c859c1bce10c51087a3c254f8/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/644df2fd23450c8c859c1bce10c51087a3c254f8/src%2Ftest%2Fui%2Fbound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.fixed?ref=644df2fd23450c8c859c1bce10c51087a3c254f8", "patch": "@@ -40,4 +40,29 @@ fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n     //~^ ERROR doesn't implement\n }\n \n-pub fn main() { }\n+trait Foo<T>: Sized {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bar: std::fmt::Display + Sized {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Baz: Sized where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Qux<T>: Sized where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bat<T>: std::fmt::Display + Sized {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+fn main() { }"}, {"sha": "86f708d42f5e7c37b464a1179c7b68838fcb9376", "filename": "src/test/ui/bound-suggestions.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/644df2fd23450c8c859c1bce10c51087a3c254f8/src%2Ftest%2Fui%2Fbound-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644df2fd23450c8c859c1bce10c51087a3c254f8/src%2Ftest%2Fui%2Fbound-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.rs?ref=644df2fd23450c8c859c1bce10c51087a3c254f8", "patch": "@@ -40,4 +40,29 @@ fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized {\n     //~^ ERROR doesn't implement\n }\n \n-pub fn main() { }\n+trait Foo<T> {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bar: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Baz where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Qux<T> where Self: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+trait Bat<T>: std::fmt::Display {\n+    const SIZE: usize = core::mem::size_of::<Self>();\n+    //~^ ERROR the size for values of type `Self` cannot be known at compilation time\n+}\n+\n+fn main() { }"}, {"sha": "12e67e90265abab07190ac790aeba243e94ec44d", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/644df2fd23450c8c859c1bce10c51087a3c254f8/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/644df2fd23450c8c859c1bce10c51087a3c254f8/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=644df2fd23450c8c859c1bce10c51087a3c254f8", "patch": "@@ -76,6 +76,86 @@ help: consider further restricting type parameter `X`\n LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: Debug {\n    |                                                            ^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:44:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Foo<T>: Sized {\n+   |             ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:49:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Bar: std::fmt::Display + Sized {\n+   |                              ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:54:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Baz: Sized where Self: std::fmt::Display {\n+   |          ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:59:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Qux<T>: Sized where Self: std::fmt::Display {\n+   |             ^^^^^^^\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/bound-suggestions.rs:64:46\n+   |\n+LL |     const SIZE: usize = core::mem::size_of::<Self>();\n+   |                                              ^^^^ doesn't have a size known at compile-time\n+   | \n+  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      - required by this bound in `std::mem::size_of`\n+   |\n+help: consider further restricting `Self`\n+   |\n+LL | trait Bat<T>: std::fmt::Display + Sized {\n+   |                                 ^^^^^^^\n+\n+error: aborting due to 11 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}