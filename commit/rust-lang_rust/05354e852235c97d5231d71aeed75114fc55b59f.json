{"sha": "05354e852235c97d5231d71aeed75114fc55b59f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MzU0ZTg1MjIzNWM5N2Q1MjMxZDcxYWVlZDc1MTE0ZmM1NWI1OWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T00:38:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-19T02:54:36Z"}, "message": "Rollup merge of #23462 - alexcrichton:stabilize-cloned, r=aturon\n\n This commit stabilizes the `cloned` iterator after tweaking the signature to\nrequire that the iterator is over `&T` instead of `U: Deref<T>`. This method has\nhad time to bake for awhile now and it's not clear whether the `Deref` bound is\nworth it. Additionally, there aren't clear conventions on when to bound and/or\nimplement the `Deref` trait, so for now the conservative route is to require\nreferences instead of `U: Deref<T>`.\n\nTo change this signature to using `Deref` would technically be a\nbackwards-incompatible change, but it is doubtful that any code will actually\nbreak in practice.", "tree": {"sha": "0c73cf9db22ab42e88aab0a13bb3dcc94f53908d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c73cf9db22ab42e88aab0a13bb3dcc94f53908d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05354e852235c97d5231d71aeed75114fc55b59f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05354e852235c97d5231d71aeed75114fc55b59f", "html_url": "https://github.com/rust-lang/rust/commit/05354e852235c97d5231d71aeed75114fc55b59f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05354e852235c97d5231d71aeed75114fc55b59f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48df3fb678d0a6a3eb1407410673de7ef8a1ae2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/48df3fb678d0a6a3eb1407410673de7ef8a1ae2f", "html_url": "https://github.com/rust-lang/rust/commit/48df3fb678d0a6a3eb1407410673de7ef8a1ae2f"}, {"sha": "7c333e99bffd4d93a17b0db3495b30e0a8552b5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c333e99bffd4d93a17b0db3495b30e0a8552b5b", "html_url": "https://github.com/rust-lang/rust/commit/7c333e99bffd4d93a17b0db3495b30e0a8552b5b"}], "stats": {"total": 47, "additions": 19, "deletions": 28}, "files": [{"sha": "fe752d5a7e1904d0741f50d3ad056e4f5ea21f08", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05354e852235c97d5231d71aeed75114fc55b59f/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05354e852235c97d5231d71aeed75114fc55b59f/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=05354e852235c97d5231d71aeed75114fc55b59f", "patch": "@@ -360,7 +360,7 @@ fn test_mut_rev_iter_wrap() {\n     assert_eq!(d.pop_front(), Some(1));\n     d.push_back(4);\n \n-    assert_eq!(d.iter_mut().rev().cloned().collect::<Vec<_>>(),\n+    assert_eq!(d.iter_mut().rev().map(|x| *x).collect::<Vec<_>>(),\n                vec![4, 3, 2]);\n }\n "}, {"sha": "4f8b1c21ab2e517bd5112ac9fea70a44b5824420", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/05354e852235c97d5231d71aeed75114fc55b59f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05354e852235c97d5231d71aeed75114fc55b59f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=05354e852235c97d5231d71aeed75114fc55b59f", "patch": "@@ -65,7 +65,7 @@ use default::Default;\n use marker;\n use mem;\n use num::{ToPrimitive, Int};\n-use ops::{Add, Deref, FnMut, RangeFrom};\n+use ops::{Add, FnMut, RangeFrom};\n use option::Option;\n use option::Option::{Some, None};\n use marker::Sized;\n@@ -976,12 +976,11 @@ pub trait IteratorExt: Iterator + Sized {\n         (ts, us)\n     }\n \n-    /// Creates an iterator that clones the elements it yields. Useful for converting an\n-    /// Iterator<&T> to an Iterator<T>.\n-    #[unstable(feature = \"core\", reason = \"recent addition\")]\n-    fn cloned(self) -> Cloned<Self> where\n-        Self::Item: Deref,\n-        <Self::Item as Deref>::Target: Clone,\n+    /// Creates an iterator that clones the elements it yields. Useful for\n+    /// converting an Iterator<&T> to an Iterator<T>.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n+        where Self: Iterator<Item=&'a T>, T: Clone\n     {\n         Cloned { it: self }\n     }\n@@ -1279,14 +1278,12 @@ pub struct Cloned<I> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> Iterator for Cloned<I> where\n-    I: Iterator,\n-    I::Item: Deref,\n-    <I::Item as Deref>::Target: Clone\n+impl<'a, I, T: 'a> Iterator for Cloned<I>\n+    where I: Iterator<Item=&'a T>, T: Clone\n {\n-    type Item = <I::Item as Deref>::Target;\n+    type Item = T;\n \n-    fn next(&mut self) -> Option<<Self as Iterator>::Item> {\n+    fn next(&mut self) -> Option<T> {\n         self.it.next().cloned()\n     }\n \n@@ -1296,36 +1293,30 @@ impl<I> Iterator for Cloned<I> where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> DoubleEndedIterator for Cloned<I> where\n-    I: DoubleEndedIterator,\n-    I::Item: Deref,\n-    <I::Item as Deref>::Target: Clone\n+impl<'a, I, T: 'a> DoubleEndedIterator for Cloned<I>\n+    where I: DoubleEndedIterator<Item=&'a T>, T: Clone\n {\n-    fn next_back(&mut self) -> Option<<Self as Iterator>::Item> {\n+    fn next_back(&mut self) -> Option<T> {\n         self.it.next_back().cloned()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ExactSizeIterator for Cloned<I> where\n-    I: ExactSizeIterator,\n-    I::Item: Deref,\n-    <I::Item as Deref>::Target: Clone\n+impl<'a, I, T: 'a> ExactSizeIterator for Cloned<I>\n+    where I: ExactSizeIterator<Item=&'a T>, T: Clone\n {}\n \n #[unstable(feature = \"core\", reason = \"trait is experimental\")]\n-impl<I> RandomAccessIterator for Cloned<I> where\n-    I: RandomAccessIterator,\n-    I::Item: Deref,\n-    <I::Item as Deref>::Target: Clone\n+impl<'a, I, T: 'a> RandomAccessIterator for Cloned<I>\n+    where I: RandomAccessIterator<Item=&'a T>, T: Clone\n {\n     #[inline]\n     fn indexable(&self) -> usize {\n         self.it.indexable()\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: usize) -> Option<<Self as Iterator>::Item> {\n+    fn idx(&mut self, index: usize) -> Option<T> {\n         self.it.idx(index).cloned()\n     }\n }"}]}