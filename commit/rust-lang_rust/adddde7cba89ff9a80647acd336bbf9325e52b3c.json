{"sha": "adddde7cba89ff9a80647acd336bbf9325e52b3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZGRkZTdjYmE4OWZmOWE4MDY0N2FjZDMzNmJiZjkzMjVlNTJiM2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-14T11:35:38Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-14T11:35:38Z"}, "message": "Implement more float intrinsics", "tree": {"sha": "f73f8ffc3d3d11dba20e2d7803091539d7ea7acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f73f8ffc3d3d11dba20e2d7803091539d7ea7acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adddde7cba89ff9a80647acd336bbf9325e52b3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adddde7cba89ff9a80647acd336bbf9325e52b3c", "html_url": "https://github.com/rust-lang/rust/commit/adddde7cba89ff9a80647acd336bbf9325e52b3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adddde7cba89ff9a80647acd336bbf9325e52b3c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80be25e705b0c9b3e8cb43bc0fb4fae3108172bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/80be25e705b0c9b3e8cb43bc0fb4fae3108172bf", "html_url": "https://github.com/rust-lang/rust/commit/80be25e705b0c9b3e8cb43bc0fb4fae3108172bf"}], "stats": {"total": 147, "additions": 133, "deletions": 14}, "files": [{"sha": "2ee4d2440537e8d4e6eb33d3b00a07fb477ae9eb", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 66, "deletions": 14, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/adddde7cba89ff9a80647acd336bbf9325e52b3c/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adddde7cba89ff9a80647acd336bbf9325e52b3c/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=adddde7cba89ff9a80647acd336bbf9325e52b3c", "patch": "@@ -207,14 +207,50 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 return self.eval_drop_impls(drops, span);\n             }\n \n-            \"fabsf32\" => {\n+            \"sinf32\" | \"fabsf32\" | \"cosf32\" |\n+            \"sqrtf32\" | \"expf32\" | \"exp2f32\" |\n+            \"logf32\" | \"log10f32\" | \"log2f32\" |\n+            \"floorf32\" | \"ceilf32\" | \"truncf32\" => {\n                 let f = self.value_to_primval(arg_vals[0], f32)?.to_f32()?;\n-                self.write_primval(dest, PrimVal::from_f32(f.abs()), dest_ty)?;\n+                let f = match intrinsic_name {\n+                    \"sinf32\" => f.sin(),\n+                    \"fabsf32\" => f.abs(),\n+                    \"cosf32\" => f.cos(),\n+                    \"sqrtf32\" => f.sqrt(),\n+                    \"expf32\" => f.exp(),\n+                    \"exp2f32\" => f.exp2(),\n+                    \"logf32\" => f.ln(),\n+                    \"log10f32\" => f.log10(),\n+                    \"log2f32\" => f.log2(),\n+                    \"floorf32\" => f.floor(),\n+                    \"ceilf32\" => f.ceil(),\n+                    \"truncf32\" => f.trunc(),\n+                    _ => bug!(),\n+                };\n+                self.write_primval(dest, PrimVal::from_f32(f), dest_ty)?;\n             }\n \n-            \"fabsf64\" => {\n+            \"sinf64\" | \"fabsf64\" | \"cosf64\" |\n+            \"sqrtf64\" | \"expf64\" | \"exp2f64\" |\n+            \"logf64\" | \"log10f64\" | \"log2f64\" |\n+            \"floorf64\" | \"ceilf64\" | \"truncf64\" => {\n                 let f = self.value_to_primval(arg_vals[0], f64)?.to_f64()?;\n-                self.write_primval(dest, PrimVal::from_f64(f.abs()), dest_ty)?;\n+                let f = match intrinsic_name {\n+                    \"sinf64\" => f.sin(),\n+                    \"fabsf64\" => f.abs(),\n+                    \"cosf64\" => f.cos(),\n+                    \"sqrtf64\" => f.sqrt(),\n+                    \"expf64\" => f.exp(),\n+                    \"exp2f64\" => f.exp2(),\n+                    \"logf64\" => f.ln(),\n+                    \"log10f64\" => f.log10(),\n+                    \"log2f64\" => f.log2(),\n+                    \"floorf64\" => f.floor(),\n+                    \"ceilf64\" => f.ceil(),\n+                    \"truncf64\" => f.trunc(),\n+                    _ => bug!(),\n+                };\n+                self.write_primval(dest, PrimVal::from_f64(f), dest_ty)?;\n             }\n \n             \"fadd_fast\" | \"fsub_fast\" | \"fmul_fast\" | \"fdiv_fast\" | \"frem_fast\" => {\n@@ -320,26 +356,42 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.intrinsic_overflowing(mir::BinOp::Add, &args[0], &args[1], dest, dest_ty)?;\n             }\n \n-            \"powif32\" => {\n+            \"powf32\" => {\n                 let f = self.value_to_primval(arg_vals[0], f32)?.to_f32()?;\n-                let i = self.value_to_primval(arg_vals[1], i32)?.to_i128()?;\n-                self.write_primval(dest, PrimVal::from_f32(f.powi(i as i32)), dest_ty)?;\n+                let f2 = self.value_to_primval(arg_vals[1], f32)?.to_f32()?;\n+                self.write_primval(dest, PrimVal::from_f32(f.powf(f2)), dest_ty)?;\n             }\n \n-            \"powif64\" => {\n+            \"powf64\" => {\n                 let f = self.value_to_primval(arg_vals[0], f64)?.to_f64()?;\n-                let i = self.value_to_primval(arg_vals[1], i32)?.to_i128()?;\n-                self.write_primval(dest, PrimVal::from_f64(f.powi(i as i32)), dest_ty)?;\n+                let f2 = self.value_to_primval(arg_vals[1], f64)?.to_f64()?;\n+                self.write_primval(dest, PrimVal::from_f64(f.powf(f2)), dest_ty)?;\n             }\n \n-            \"sqrtf32\" => {\n+            \"fmaf32\" => {\n+                let a = self.value_to_primval(arg_vals[0], f32)?.to_f32()?;\n+                let b = self.value_to_primval(arg_vals[1], f32)?.to_f32()?;\n+                let c = self.value_to_primval(arg_vals[2], f32)?.to_f32()?;\n+                self.write_primval(dest, PrimVal::from_f32(a * b + c), dest_ty)?;\n+            }\n+\n+            \"fmaf64\" => {\n+                let a = self.value_to_primval(arg_vals[0], f64)?.to_f64()?;\n+                let b = self.value_to_primval(arg_vals[1], f64)?.to_f64()?;\n+                let c = self.value_to_primval(arg_vals[2], f64)?.to_f64()?;\n+                self.write_primval(dest, PrimVal::from_f64(a * b + c), dest_ty)?;\n+            }\n+\n+            \"powif32\" => {\n                 let f = self.value_to_primval(arg_vals[0], f32)?.to_f32()?;\n-                self.write_primval(dest, PrimVal::from_f32(f.sqrt()), dest_ty)?;\n+                let i = self.value_to_primval(arg_vals[1], i32)?.to_i128()?;\n+                self.write_primval(dest, PrimVal::from_f32(f.powi(i as i32)), dest_ty)?;\n             }\n \n-            \"sqrtf64\" => {\n+            \"powif64\" => {\n                 let f = self.value_to_primval(arg_vals[0], f64)?.to_f64()?;\n-                self.write_primval(dest, PrimVal::from_f64(f.sqrt()), dest_ty)?;\n+                let i = self.value_to_primval(arg_vals[1], i32)?.to_i128()?;\n+                self.write_primval(dest, PrimVal::from_f64(f.powi(i as i32)), dest_ty)?;\n             }\n \n             \"size_of\" => {"}, {"sha": "a2c55634749cbfef24f225727b07a2af0f74577a", "filename": "tests/run-pass/intrinsics-math.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/adddde7cba89ff9a80647acd336bbf9325e52b3c/tests%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adddde7cba89ff9a80647acd336bbf9325e52b3c/tests%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-math.rs?ref=adddde7cba89ff9a80647acd336bbf9325e52b3c", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! assert_approx_eq {\n+    ($a:expr, $b:expr) => ({\n+        let (a, b) = (&$a, &$b);\n+        assert!((*a - *b).abs() < 1.0e-6,\n+                \"{} is not approximately equal to {}\", *a, *b);\n+    })\n+}\n+\n+pub fn main() {\n+    use std::f32;\n+    use std::f64;\n+\n+    assert_approx_eq!(64f32.sqrt(), 8f32);\n+    assert_approx_eq!(64f64.sqrt(), 8f64);\n+\n+    assert_approx_eq!(25f32.powi(-2), 0.0016f32);\n+    assert_approx_eq!(23.2f64.powi(2), 538.24f64);\n+\n+    assert_approx_eq!(0f32.sin(), 0f32);\n+    assert_approx_eq!((f64::consts::PI / 2f64).sin(), 1f64);\n+\n+    assert_approx_eq!(0f32.cos(), 1f32);\n+    assert_approx_eq!((f64::consts::PI * 2f64).cos(), 1f64);\n+\n+    assert_approx_eq!(25f32.powf(-2f32), 0.0016f32);\n+    assert_approx_eq!(400f64.powf(0.5f64), 20f64);\n+\n+    assert_approx_eq!((1f32.exp() - f32::consts::E).abs(), 0f32);\n+    assert_approx_eq!(1f64.exp(), f64::consts::E);\n+\n+    assert_approx_eq!(10f32.exp2(), 1024f32);\n+    assert_approx_eq!(50f64.exp2(), 1125899906842624f64);\n+\n+    assert_approx_eq!((f32::consts::E.ln() - 1f32).abs(), 0f32);\n+    assert_approx_eq!(1f64.ln(), 0f64);\n+\n+    assert_approx_eq!(10f32.log10(), 1f32);\n+    assert_approx_eq!(f64::consts::E.log10(), f64::consts::LOG10_E);\n+\n+    assert_approx_eq!(8f32.log2(), 3f32);\n+    assert_approx_eq!(f64::consts::E.log2(), f64::consts::LOG2_E);\n+\n+    assert_approx_eq!(1.0f32.mul_add(2.0f32, 5.0f32), 7.0f32);\n+    assert_approx_eq!(0.0f64.mul_add(-2.0f64, f64::consts::E), f64::consts::E);\n+\n+    assert_approx_eq!((-1.0f32).abs(), 1.0f32);\n+    assert_approx_eq!(34.2f64.abs(), 34.2f64);\n+\n+    assert_approx_eq!(3.8f32.floor(), 3.0f32);\n+    assert_approx_eq!((-1.1f64).floor(), -2.0f64);\n+\n+    assert_approx_eq!((-2.3f32).ceil(), -2.0f32);\n+    assert_approx_eq!(3.8f64.ceil(), 4.0f64);\n+\n+    assert_approx_eq!(0.1f32.trunc(), 0.0f32);\n+    assert_approx_eq!((-0.1f64).trunc(), 0.0f64);\n+}"}]}