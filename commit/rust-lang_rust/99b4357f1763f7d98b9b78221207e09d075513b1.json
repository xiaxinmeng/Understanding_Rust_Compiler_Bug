{"sha": "99b4357f1763f7d98b9b78221207e09d075513b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YjQzNTdmMTc2M2Y3ZDk4YjliNzgyMjEyMDdlMDlkMDc1NTEzYjE=", "commit": {"author": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2020-02-12T15:56:09Z"}, "committer": {"name": "Andreas Molzer", "email": "andreas.molzer@gmx.de", "date": "2020-02-12T15:59:30Z"}, "message": "Add tracking number, adjust documentation wording", "tree": {"sha": "a150ea6ba873ff3d98d696225bf9789450526e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a150ea6ba873ff3d98d696225bf9789450526e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99b4357f1763f7d98b9b78221207e09d075513b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEEajVa7TuPw8nK0RJocg2sqYVfHe4FAl5EIOQWHGFuZHJlYXMu\nbW9semVyQGdteC5kZQAKCRByDayphV8d7jarB/9BOZ8WVgjfn4ui3q1VWjMYPWxG\nHD4PWBbkyhx8t3ql863qhEeTGLB+op0xWrUX4pUu6ku/TK7hsSaZjuFghGS1E4pf\ncBdFPzFC+JoQocAJswFQLVrGAPlwMz2YyFeabmy9TEleZMrfHoXIrhmkXl9H0Pyq\nXr2HkDK14OazMcNyVn4oYVc8TuvKZC3Zjp6GylfGhErQOPuzhxHxdfFqmtJRPvee\nqEePDhBZcZTUcauO0MNBzOx8VaVTuHawz293YRHWpqPwyhHCqWYwAjEJEUIamBYl\n74dKG13A5XR20HW7gQ4/Yx8X9puXUPpgFgXymwXlIvjQfp2GsUBL9h8VzpmO\n=dt5U\n-----END PGP SIGNATURE-----", "payload": "tree a150ea6ba873ff3d98d696225bf9789450526e6b\nparent 14999dd74b38ca79b80772f4f33425574faff89a\nauthor Andreas Molzer <andreas.molzer@gmx.de> 1581522969 +0100\ncommitter Andreas Molzer <andreas.molzer@gmx.de> 1581523170 +0100\n\nAdd tracking number, adjust documentation wording\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99b4357f1763f7d98b9b78221207e09d075513b1", "html_url": "https://github.com/rust-lang/rust/commit/99b4357f1763f7d98b9b78221207e09d075513b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99b4357f1763f7d98b9b78221207e09d075513b1/comments", "author": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HeroicKatora", "id": 5550310, "node_id": "MDQ6VXNlcjU1NTAzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5550310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HeroicKatora", "html_url": "https://github.com/HeroicKatora", "followers_url": "https://api.github.com/users/HeroicKatora/followers", "following_url": "https://api.github.com/users/HeroicKatora/following{/other_user}", "gists_url": "https://api.github.com/users/HeroicKatora/gists{/gist_id}", "starred_url": "https://api.github.com/users/HeroicKatora/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HeroicKatora/subscriptions", "organizations_url": "https://api.github.com/users/HeroicKatora/orgs", "repos_url": "https://api.github.com/users/HeroicKatora/repos", "events_url": "https://api.github.com/users/HeroicKatora/events{/privacy}", "received_events_url": "https://api.github.com/users/HeroicKatora/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14999dd74b38ca79b80772f4f33425574faff89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14999dd74b38ca79b80772f4f33425574faff89a", "html_url": "https://github.com/rust-lang/rust/commit/14999dd74b38ca79b80772f4f33425574faff89a"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "17222b27b2d705d097efdfd03a05762ba8df3127", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99b4357f1763f7d98b9b78221207e09d075513b1/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99b4357f1763f7d98b9b78221207e09d075513b1/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=99b4357f1763f7d98b9b78221207e09d075513b1", "patch": "@@ -1249,8 +1249,9 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// Convert into a reference to the underlying data.\n     ///\n     /// The underlying `RefCell` can never be mutably borrowed from again and will always appear\n-    /// already immutably borrowed. It can still be immutably borrowed until more than `isize::MAX`\n-    /// `Ref`s of this `RefCell` have been leaked, through this function or another leak, in total.\n+    /// already immutably borrowed. It is not a good idea to leak more than a constant number of\n+    /// references. The `RefCell` can be immutably borrowed again if only a smaller number of leaks\n+    /// have occurred in total.\n     ///\n     /// This is an associated function that needs to be used as\n     /// `Ref::leak(...)`. A method would interfere with methods of the\n@@ -1269,7 +1270,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// assert!(cell.try_borrow().is_ok());\n     /// assert!(cell.try_borrow_mut().is_err());\n     /// ```\n-    #[unstable(feature = \"cell_leak\", issue = \"none\")]\n+    #[unstable(feature = \"cell_leak\", issue = \"69099\")]\n     pub fn leak(orig: Ref<'b, T>) -> &'b T {\n         // By forgetting this BorrowRefMut we ensure that the borrow counter in the RefCell never\n         // goes back to UNUSED again. No further references can be created from the original cell,\n@@ -1385,7 +1386,7 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     ///\n     /// assert!(cell.try_borrow_mut().is_err());\n     /// ```\n-    #[unstable(feature = \"cell_leak\", issue = \"none\")]\n+    #[unstable(feature = \"cell_leak\", issue = \"69099\")]\n     pub fn leak(orig: RefMut<'b, T>) -> &'b mut T {\n         // By forgetting this BorrowRefMut we ensure that the borrow counter in the RefCell never\n         // goes back to UNUSED again. No further references can be created from the original cell,"}]}