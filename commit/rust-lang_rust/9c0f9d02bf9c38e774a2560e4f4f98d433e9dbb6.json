{"sha": "9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6", "node_id": "C_kwDOAAsO6NoAKDljMGY5ZDAyYmY5YzM4ZTc3NGEyNTYwZTRmNGY5OGQ0MzNlOWRiYjY", "commit": {"author": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-10T14:53:43Z"}, "committer": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-10T14:53:43Z"}, "message": "feat: trait fn: add panicking example only if default panicks", "tree": {"sha": "7f236afb1e2168f037230588d02032040f1acc04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f236afb1e2168f037230588d02032040f1acc04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6", "html_url": "https://github.com/rust-lang/rust/commit/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6/comments", "author": null, "committer": null, "parents": [{"sha": "f5e0998402c4087613992092f34f96f0c90b2a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0998402c4087613992092f34f96f0c90b2a86", "html_url": "https://github.com/rust-lang/rust/commit/f5e0998402c4087613992092f34f96f0c90b2a86"}], "stats": {"total": 122, "additions": 121, "deletions": 1}, "files": [{"sha": "113fe7c92c5fa3f3b86ea95939eebe1d8bc74efa", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 121, "deletions": 1, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=9c0f9d02bf9c38e774a2560e4f4f98d433e9dbb6", "patch": "@@ -96,7 +96,11 @@ fn introduction_builder(ast_func: &ast::Fn) -> String {\n fn examples_builder(ast_func: &ast::Fn, ctx: &AssistContext) -> Option<Vec<String>> {\n     let (no_panic_ex, panic_ex) = if is_in_trait_def(ast_func, ctx) {\n         let message = \"// Example template not implemented for trait functions\";\n-        (Some(vec![message.into()]), Some(vec![message.into()]))\n+        let panic_ex = match can_panic(ast_func) {\n+            Some(true) => Some(vec![message.into()]),\n+            _ => None,\n+        };\n+        (Some(vec![message.into()]), panic_ex)\n     } else {\n         let panic_ex = match can_panic(ast_func) {\n             Some(true) => gen_panic_ex_template(ast_func, ctx),\n@@ -912,6 +916,122 @@ impl MyStruct {\n         );\n     }\n \n+    #[test]\n+    fn supports_fn_in_trait() {\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n+pub trait MyTrait {\n+    fn fun$0ction_trait();\n+}\n+\"#,\n+            r#\"\n+pub trait MyTrait {\n+    /// .\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// // Example template not implemented for trait functions\n+    /// ```\n+    fn function_trait();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn supports_unsafe_fn_in_trait() {\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n+pub trait MyTrait {\n+    unsafe fn unsafe_funct$0ion_trait();\n+}\n+\"#,\n+            r#\"\n+pub trait MyTrait {\n+    /// .\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// // Example template not implemented for trait functions\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// .\n+    unsafe fn unsafe_function_trait();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn supports_fn_in_trait_with_default_panicking() {\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n+pub trait MyTrait {\n+    fn function_trait_with_$0default_panicking() {\n+        panic!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub trait MyTrait {\n+    /// .\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// // Example template not implemented for trait functions\n+    /// ```\n+    ///\n+    /// ```should_panic\n+    /// // Example template not implemented for trait functions\n+    /// ```\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if .\n+    fn function_trait_with_default_panicking() {\n+        panic!()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn supports_fn_in_trait_returning_result() {\n+        check_assist(\n+            generate_documentation_template,\n+            r#\"\n+pub trait MyTrait {\n+    fn function_tr$0ait_returning_result() -> Result<(), std::io::Error>;\n+}\n+\"#,\n+            r#\"\n+pub trait MyTrait {\n+    /// .\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// // Example template not implemented for trait functions\n+    /// ```\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an error if .\n+    fn function_trait_returning_result() -> Result<(), std::io::Error>;\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn detects_new() {\n         check_assist("}]}