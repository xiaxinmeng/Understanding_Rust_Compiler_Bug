{"sha": "e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "node_id": "C_kwDOAAsO6NoAKGUwNDhlZTJhYzFjNjVmYTkyOGU3ZDFjNWY4YTUzODQ0MGRkYjAwMTQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-05T04:36:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-05T04:36:29Z"}, "message": "Rollup merge of #106478 - estebank:tweak-fn-mismatch, r=compiler-errors\n\nTweak wording of fn call with wrong number of args", "tree": {"sha": "60acd844105d16dc90b954d240a152f19b9dd944", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60acd844105d16dc90b954d240a152f19b9dd944"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtlPNCRBK7hj4Ov3rIwAAZpkIAB37uUDCZYA8bSHQTqIsY6Wh\n66Bc2pnT8yYwpkY6kXcSPvCADDnxyanN+Tpletbi4BE7FdY06QfOoFMnIYkEv/lx\nHK383ig2GWRpLE2211PKuPAkmR9WFoCXL/m83seFrM7rDYqm6Ryd8GDTAl6MsX34\nQxjSxOfYVrLv4xZgDi6Fp1gfD7xn0d8/ZpRY4G0P9pY6lr7EJJs9zvi2KlSjns+t\nokIchSiccT+/DjrRQU9AQsF9WtztdWZaoXThLh8O4AJn2OToBlNtPowuumElOfs0\nMOV8tfYvP7wbydzFoRp6UQOysDIMJwjDqvW+RAgY8KiS0PvSFit3Q4QolbRpN30=\n=T9mJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 60acd844105d16dc90b954d240a152f19b9dd944\nparent 27292f5cbb9bb789b1e72a721f24d6ebf7c1bbae\nparent 5393c6bbd172bb87b49033e755f538228b14440b\nauthor Michael Goulet <michael@errs.io> 1672893389 -0800\ncommitter GitHub <noreply@github.com> 1672893389 -0800\n\nRollup merge of #106478 - estebank:tweak-fn-mismatch, r=compiler-errors\n\nTweak wording of fn call with wrong number of args\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "html_url": "https://github.com/rust-lang/rust/commit/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27292f5cbb9bb789b1e72a721f24d6ebf7c1bbae", "url": "https://api.github.com/repos/rust-lang/rust/commits/27292f5cbb9bb789b1e72a721f24d6ebf7c1bbae", "html_url": "https://github.com/rust-lang/rust/commit/27292f5cbb9bb789b1e72a721f24d6ebf7c1bbae"}, {"sha": "5393c6bbd172bb87b49033e755f538228b14440b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5393c6bbd172bb87b49033e755f538228b14440b", "html_url": "https://github.com/rust-lang/rust/commit/5393c6bbd172bb87b49033e755f538228b14440b"}], "stats": {"total": 289, "additions": 143, "deletions": 146}, "files": [{"sha": "55280487adda42b38eca2b05e7dd78b9801737a6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -473,38 +473,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         call_expr: &hir::Expr<'tcx>,\n     ) {\n         // Next, let's construct the error\n-        let (error_span, full_call_span, ctor_of, is_method) = match &call_expr.kind {\n+        let (error_span, full_call_span, call_name, is_method) = match &call_expr.kind {\n             hir::ExprKind::Call(\n                 hir::Expr { hir_id, span, kind: hir::ExprKind::Path(qpath), .. },\n                 _,\n             ) => {\n                 if let Res::Def(DefKind::Ctor(of, _), _) =\n                     self.typeck_results.borrow().qpath_res(qpath, *hir_id)\n                 {\n-                    (call_span, *span, Some(of), false)\n+                    let name = match of {\n+                        CtorOf::Struct => \"struct\",\n+                        CtorOf::Variant => \"enum variant\",\n+                    };\n+                    (call_span, *span, name, false)\n                 } else {\n-                    (call_span, *span, None, false)\n+                    (call_span, *span, \"function\", false)\n                 }\n             }\n-            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, None, false),\n+            hir::ExprKind::Call(hir::Expr { span, .. }, _) => (call_span, *span, \"function\", false),\n             hir::ExprKind::MethodCall(path_segment, _, _, span) => {\n                 let ident_span = path_segment.ident.span;\n                 let ident_span = if let Some(args) = path_segment.args {\n                     ident_span.with_hi(args.span_ext.hi())\n                 } else {\n                     ident_span\n                 };\n-                // methods are never ctors\n-                (*span, ident_span, None, true)\n+                (*span, ident_span, \"method\", true)\n             }\n             k => span_bug!(call_span, \"checking argument types on a non-call: `{:?}`\", k),\n         };\n         let args_span = error_span.trim_start(full_call_span).unwrap_or(error_span);\n-        let call_name = match ctor_of {\n-            Some(CtorOf::Struct) => \"struct\",\n-            Some(CtorOf::Variant) => \"enum variant\",\n-            None => \"function\",\n-        };\n \n         // Don't print if it has error types or is just plain `_`\n         fn has_error_or_infer<'tcx>(tys: impl IntoIterator<Item = Ty<'tcx>>) -> bool {\n@@ -690,8 +688,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err = tcx.sess.struct_span_err_with_code(\n                             full_call_span,\n                             &format!(\n-                                \"this {} takes {}{} but {} {} supplied\",\n-                                call_name,\n+                                \"{call_name} takes {}{} but {} {} supplied\",\n                                 if c_variadic { \"at least \" } else { \"\" },\n                                 potentially_plural_count(\n                                     formal_and_expected_inputs.len(),"}, {"sha": "ea9ad39a70d81d2b6db694dcc56d406a2dcca461", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -7,7 +7,7 @@\n struct Layout;\n \n #[alloc_error_handler]\n-fn oom() -> ! { //~ ERROR this function takes 0 arguments but 1 argument was supplied\n+fn oom() -> ! { //~ ERROR function takes 0 arguments but 1 argument was supplied\n     loop {}\n }\n "}, {"sha": "961e7a50e56381129abb247f3ae8023674b22a0b", "filename": "src/test/ui/argument-suggestions/basic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fbasic.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -18,11 +18,11 @@ fn permuted(_x: X, _y: Y, _z: Z) {}\n \n fn main() {\n     invalid(1.0); //~ ERROR mismatched types\n-    extra(\"\"); //~ ERROR this function takes\n-    missing(); //~ ERROR this function takes\n+    extra(\"\"); //~ ERROR function takes\n+    missing(); //~ ERROR function takes\n     swapped(\"\", 1); //~ ERROR arguments to this function are incorrect\n     permuted(Y {}, Z {}, X {}); //~ ERROR arguments to this function are incorrect\n \n     let closure = |x| x;\n-    closure(); //~ ERROR this function takes\n+    closure(); //~ ERROR function takes\n }"}, {"sha": "acb61f543088a5062ca9bc7387b99fb8839ecd05", "filename": "src/test/ui/argument-suggestions/display-is-suggestable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fdisplay-is-suggestable.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,5 +4,5 @@ fn foo(x: &(dyn Display + Send)) {}\n \n fn main() {\n     foo();\n-    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 0 arguments were supplied\n }"}, {"sha": "569a39a2b450dbbe10c46e2f5b0658900b0723b1", "filename": "src/test/ui/argument-suggestions/exotic-calls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fexotic-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fexotic-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fexotic-calls.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,11 +1,11 @@\n fn foo<T: Fn()>(t: T) {\n     t(1i32);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn bar(t: impl Fn()) {\n     t(1i32);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn baz() -> impl Fn() {\n@@ -14,13 +14,13 @@ fn baz() -> impl Fn() {\n \n fn baz2() {\n     baz()(1i32)\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn qux() {\n     let x = || {};\n     x(1i32);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n }\n \n fn main() {}"}, {"sha": "df2fd6624cd0ce183321be488293c1a35e562224", "filename": "src/test/ui/argument-suggestions/extern-fn-arg-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fextern-fn-arg-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fextern-fn-arg-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fextern-fn-arg-names.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -5,5 +5,5 @@ extern \"Rust\" {\n \n fn main() {\n     dstfn(1);\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "3f83de95e2d549cfdf4f1b4fd4426419517af23a", "filename": "src/test/ui/argument-suggestions/extra_arguments.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fextra_arguments.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,30 +4,30 @@ fn two_arg_same(_a: i32, _b: i32) {}\n fn two_arg_diff(_a: i32, _b: &str) {}\n \n fn main() {\n-  empty(\"\"); //~ ERROR this function takes\n+  empty(\"\"); //~ ERROR function takes\n \n-  one_arg(1, 1); //~ ERROR this function takes\n-  one_arg(1, \"\"); //~ ERROR this function takes\n-  one_arg(1, \"\", 1.0); //~ ERROR this function takes\n+  one_arg(1, 1); //~ ERROR function takes\n+  one_arg(1, \"\"); //~ ERROR function takes\n+  one_arg(1, \"\", 1.0); //~ ERROR function takes\n \n-  two_arg_same(1, 1, 1); //~ ERROR this function takes\n-  two_arg_same(1, 1, 1.0); //~ ERROR this function takes\n+  two_arg_same(1, 1, 1); //~ ERROR function takes\n+  two_arg_same(1, 1, 1.0); //~ ERROR function takes\n \n-  two_arg_diff(1, 1, \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, \"\", \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, 1, \"\", \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, \"\", 1, \"\"); //~ ERROR this function takes\n+  two_arg_diff(1, 1, \"\"); //~ ERROR function takes\n+  two_arg_diff(1, \"\", \"\"); //~ ERROR function takes\n+  two_arg_diff(1, 1, \"\", \"\"); //~ ERROR function takes\n+  two_arg_diff(1, \"\", 1, \"\"); //~ ERROR function takes\n \n   // Check with weird spacing and newlines\n-  two_arg_same(1, 1,     \"\"); //~ ERROR this function takes\n-  two_arg_diff(1, 1,     \"\"); //~ ERROR this function takes\n-  two_arg_same( //~ ERROR this function takes\n+  two_arg_same(1, 1,     \"\"); //~ ERROR function takes\n+  two_arg_diff(1, 1,     \"\"); //~ ERROR function takes\n+  two_arg_same( //~ ERROR function takes\n     1,\n     1,\n     \"\"\n   );\n \n-  two_arg_diff( //~ ERROR this function takes\n+  two_arg_diff( //~ ERROR function takes\n     1,\n     1,\n     \"\""}, {"sha": "fb0af05e9dc553cf3509a70564aa61a0e1978e3a", "filename": "src/test/ui/argument-suggestions/issue-100154.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100154.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -2,6 +2,6 @@ fn foo(i: impl std::fmt::Display) {}\n \n fn main() {\n     foo::<()>(());\n-    //~^ ERROR this function takes 0 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR function takes 0 generic arguments but 1 generic argument was supplied\n     //~| ERROR `()` doesn't implement `std::fmt::Display`\n }"}, {"sha": "fb50fa115376b3a9a6a9eb08d042aadbdcc9a1dc", "filename": "src/test/ui/argument-suggestions/issue-100478.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-100478.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -31,7 +31,7 @@ fn three_diff(_a: T1, _b: T2, _c: T3) {}\n fn four_shuffle(_a: T1, _b: T2, _c: T3, _d: T4) {}\n \n fn main() {\n-    three_diff(T2::new(0)); //~ ERROR this function takes\n+    three_diff(T2::new(0)); //~ ERROR function takes\n     four_shuffle(T3::default(), T4::default(), T1::default(), T2::default()); //~ ERROR 35:5: 35:17: arguments to this function are incorrect [E0308]\n     four_shuffle(T3::default(), T2::default(), T1::default(), T3::default()); //~ ERROR 36:5: 36:17: arguments to this function are incorrect [E0308]\n "}, {"sha": "25f7f58379923cc53a6d29a464649e2f91bf9df3", "filename": "src/test/ui/argument-suggestions/issue-101097.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-101097.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -13,7 +13,7 @@ fn f(\n ) {}\n \n fn main() {\n-    f(C, A, A, A, B, B, C); //~ ERROR this function takes 6 arguments but 7 arguments were supplied [E0061]\n+    f(C, A, A, A, B, B, C); //~ ERROR function takes 6 arguments but 7 arguments were supplied [E0061]\n     f(C, C, A, A, B, B);  //~ ERROR arguments to this function are incorrect [E0308]\n     f(A, A, D, D, B, B);  //~ arguments to this function are incorrect [E0308]\n     f(C, C, B, B, A, A);  //~ arguments to this function are incorrect [E0308]"}, {"sha": "5e720f174c24015ea652077854103afb24c152ad", "filename": "src/test/ui/argument-suggestions/issue-96638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-96638.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -5,5 +5,5 @@ fn arg<T>() -> T { todo!() }\n fn main() {\n     let x = arg(); // `x` must be inferred\n     // The reference on `&x` is important to reproduce the ICE\n-    f(&x, \"\"); //~ ERROR this function takes 3 arguments but 2 arguments were supplied\n+    f(&x, \"\"); //~ ERROR function takes 3 arguments but 2 arguments were supplied\n }"}, {"sha": "4c22608ae6a476ca2420057d94a7f0e6bcdbdb84", "filename": "src/test/ui/argument-suggestions/issue-97197.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     g((), ());\n-    //~^ ERROR this function takes 6 arguments but 2 arguments were supplied\n+    //~^ ERROR function takes 6 arguments but 2 arguments were supplied\n }\n \n pub fn g(a1: (), a2: bool, a3: bool, a4: bool, a5: bool, a6: ()) -> () {}"}, {"sha": "9e537b0c35f96bceb3cd3a86f3e41431d5a5b594", "filename": "src/test/ui/argument-suggestions/issue-97484.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -10,5 +10,5 @@ fn foo(a: &A, d: D, e: &E, g: G) {}\n \n fn main() {\n     foo(&&A, B, C, D, E, F, G);\n-    //~^ ERROR this function takes 4 arguments but 7 arguments were supplied\n+    //~^ ERROR function takes 4 arguments but 7 arguments were supplied\n }"}, {"sha": "e421eba97758e6de8ede6363c69b049043f33d40", "filename": "src/test/ui/argument-suggestions/issue-98894.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98894.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98894.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98894.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     (|_, ()| ())(if true {} else {return;});\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "27734f74dee78420506485adbcce02342a691c9c", "filename": "src/test/ui/argument-suggestions/issue-98897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-98897.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     (|_, ()| ())([return, ()]);\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "7bbb39f8d62e2824d43b48cc22f89697e0acd625", "filename": "src/test/ui/argument-suggestions/issue-99482.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-99482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-99482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-99482.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let f = |_: (), f: fn()| f;\n     let _f = f(main);\n-    //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 2 arguments but 1 argument was supplied\n }"}, {"sha": "c26564641cb9f77b72b4f54a0c880b9e84079e61", "filename": "src/test/ui/argument-suggestions/missing_arguments.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -7,34 +7,34 @@ fn four_repeated(_a: i32, _b: f32, _c: f32, _d: &str) {}\n fn complex(_a: i32, _b: f32, _c: i32, _d: f32, _e: &str) {}\n \n fn main() {\n-  one_arg(); //~ ERROR this function takes\n+  one_arg(); //~ ERROR function takes\n   // The headers here show the types expected,\n   // with formatting to emphasize which arguments are missing\n   /*         i32     f32    */\n-  two_same(               ); //~ ERROR this function takes\n-  two_same(   1           ); //~ ERROR this function takes\n-  two_diff(               ); //~ ERROR this function takes\n-  two_diff(   1           ); //~ ERROR this function takes\n-  two_diff(          1.0  ); //~ ERROR this function takes\n+  two_same(               ); //~ ERROR function takes\n+  two_same(   1           ); //~ ERROR function takes\n+  two_diff(               ); //~ ERROR function takes\n+  two_diff(   1           ); //~ ERROR function takes\n+  two_diff(          1.0  ); //~ ERROR function takes\n \n   /*           i32     i32     i32    */\n-  three_same(                       ); //~ ERROR this function takes\n-  three_same(   1                   ); //~ ERROR this function takes\n-  three_same(   1,      1           ); //~ ERROR this function takes\n+  three_same(                       ); //~ ERROR function takes\n+  three_same(   1                   ); //~ ERROR function takes\n+  three_same(   1,      1           ); //~ ERROR function takes\n \n   /*           i32     f32     &str   */\n-  three_diff(          1.0,     \"\"  ); //~ ERROR this function takes\n-  three_diff(   1,              \"\"  ); //~ ERROR this function takes\n-  three_diff(   1,     1.0          ); //~ ERROR this function takes\n-  three_diff(                   \"\"  ); //~ ERROR this function takes\n-  three_diff(          1.0          ); //~ ERROR this function takes\n-  three_diff(   1                   ); //~ ERROR this function takes\n+  three_diff(          1.0,     \"\"  ); //~ ERROR function takes\n+  three_diff(   1,              \"\"  ); //~ ERROR function takes\n+  three_diff(   1,     1.0          ); //~ ERROR function takes\n+  three_diff(                   \"\"  ); //~ ERROR function takes\n+  three_diff(          1.0          ); //~ ERROR function takes\n+  three_diff(   1                   ); //~ ERROR function takes\n \n   /*              i32     f32     f32     &str   */\n-  four_repeated(                               ); //~ ERROR this function takes\n-  four_repeated(   1,                     \"\"   ); //~ ERROR this function takes\n+  four_repeated(                               ); //~ ERROR function takes\n+  four_repeated(   1,                     \"\"   ); //~ ERROR function takes\n \n   /*        i32   f32   i32   f32   &str   */\n-  complex(                               ); //~ ERROR this function takes\n-  complex(   1,                     \"\"   ); //~ ERROR this function takes\n+  complex(                               ); //~ ERROR function takes\n+  complex(   1,                     \"\"   ); //~ ERROR function takes\n }"}, {"sha": "86e94a4382c0d31b89da6341c5b40e582e118d36", "filename": "src/test/ui/argument-suggestions/mixed_cases.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmixed_cases.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -7,11 +7,11 @@ fn three_args(_a: i32, _b: f32, _c: &str) {}\n \n fn main() {\n   // Extra + Invalid\n-  two_args(1, \"\", X {}); //~ ERROR this function takes\n-  three_args(1, \"\", X {}, \"\"); //~ ERROR this function takes\n+  two_args(1, \"\", X {}); //~ ERROR function takes\n+  three_args(1, \"\", X {}, \"\"); //~ ERROR function takes\n \n   // Missing and Invalid\n-  three_args(1, X {}); //~ ERROR this function takes\n+  three_args(1, X {}); //~ ERROR function takes\n \n   // Missing and Extra\n   three_args(1, \"\", X {}); //~ ERROR arguments to this function are incorrect\n@@ -20,5 +20,5 @@ fn main() {\n   three_args(\"\", X {}, 1); //~ ERROR arguments to this function are incorrect\n \n   // Swapped and missing\n-  three_args(\"\", 1); //~ ERROR this function takes\n+  three_args(\"\", 1); //~ ERROR function takes\n }"}, {"sha": "4928943294bf54ae81a2a3c3988c051904a3fda5", "filename": "src/test/ui/argument-suggestions/too-long.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Ftoo-long.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     qux.foo(a, b, c, d, e, f, g, h, i, j, k, l);\n    |         ---                ^ expected `i32`, found `&i32`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this method are incorrect\n    |\n note: associated function defined here\n   --> $DIR/too-long.rs:4:8"}, {"sha": "d6b18d4ed32e7e907aa77455f73c3666030e5c6b", "filename": "src/test/ui/associated-types/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-type-projection-from-supertrait.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n LL | fn f() { ModelT.chip_paint(Blue); }\n    |                 ---------- ^^^^ expected struct `Black`, found struct `Blue`\n    |                 |\n-   |                 arguments to this function are incorrect\n+   |                 arguments to this method are incorrect\n    |\n note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n LL | fn g() { ModelU.chip_paint(Black); }\n    |                 ---------- ^^^^^ expected struct `Blue`, found struct `Black`\n    |                 |\n-   |                 arguments to this function are incorrect\n+   |                 arguments to this method are incorrect\n    |\n note: associated function defined here\n   --> $DIR/associated-type-projection-from-supertrait.rs:12:8"}, {"sha": "acd8a25dc533bd6120419dc82c5483e92f6243ff", "filename": "src/test/ui/c-variadic/variadic-ffi-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -19,8 +19,8 @@ extern \"C\" fn bar(f: isize, x: u8) {}\n \n fn main() {\n     unsafe {\n-        foo(); //~ ERROR this function takes at least 2 arguments but 0 arguments were supplied\n-        foo(1); //~ ERROR this function takes at least 2 arguments but 1 argument was supplied\n+        foo(); //~ ERROR function takes at least 2 arguments but 0 arguments were supplied\n+        foo(1); //~ ERROR function takes at least 2 arguments but 1 argument was supplied\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo; //~ ERROR mismatched types\n         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar; //~ ERROR mismatched types"}, {"sha": "10247ce6bcafd142dfc2dd66976b7842c4c53329", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-76595.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-76595.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -13,5 +13,5 @@ fn test<T, const P: usize>() where Bool<{core::mem::size_of::<T>() > 4}>: True {\n \n fn main() {\n     test::<2>();\n-    //~^ ERROR this function takes 2 generic arguments\n+    //~^ ERROR function takes 2 generic arguments\n }"}, {"sha": "8660cb2fb541d859188d1f0a080acbd925cad919", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,8 +4,8 @@ fn foo<const X: usize, const Y: usize>() -> usize {\n \n fn main() {\n     foo::<0>();\n-    //~^ ERROR this function takes 2\n+    //~^ ERROR function takes 2\n \n     foo::<0, 0, 0>();\n-    //~^ ERROR this function takes 2\n+    //~^ ERROR function takes 2\n }"}, {"sha": "19bee733ec068c83be742e3d0171dd89892fd50d", "filename": "src/test/ui/fn/issue-3044.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ffn%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ffn%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-3044.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let needlesArr: Vec<char> = vec!['a', 'f'];\n     needlesArr.iter().fold(|x, y| {\n-        //~^ ERROR this function takes 2 arguments but 1 argument was supplied\n+        //~^ ERROR this method takes 2 arguments but 1 argument was supplied\n     });\n }"}, {"sha": "2690ad7117621a21240672c2ee21f1c32762897f", "filename": "src/test/ui/fn/issue-3044.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ffn%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ffn%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-3044.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+error[E0061]: this method takes 2 arguments but 1 argument was supplied\n   --> $DIR/issue-3044.rs:3:23\n    |\n LL |       needlesArr.iter().fold(|x, y| {"}, {"sha": "35acd5cd727c2713b2d6e8e4088d50418fa363f4", "filename": "src/test/ui/generator/issue-102645.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -14,7 +14,7 @@ fn main() {\n         a = d;\n     };\n     Pin::new(&mut b).resume();\n-    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR this method takes 1 argument but 0 arguments were supplied\n     // This type error is required to reproduce the ICE...\n }\n "}, {"sha": "f6d2440295e8d3c691ef499e93884a29e1403a36", "filename": "src/test/ui/generator/issue-102645.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-102645.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/issue-102645.rs:16:22\n    |\n LL |     Pin::new(&mut b).resume();"}, {"sha": "6006a108c5cc6e3adc7c69ea31e6aa1970d4dfa8", "filename": "src/test/ui/higher-rank-trait-bounds/issue-58451.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-58451.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -9,5 +9,5 @@ where\n {}\n \n fn main() {\n-    f(&[f()]); //~ ERROR this function takes 1 argument\n+    f(&[f()]); //~ ERROR function takes 1 argument\n }"}, {"sha": "a93bdb1788f94af05e203fd97dd805e8729defcc", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -2,5 +2,5 @@ fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n \n fn main() {\n     f::<[u8]>(\"a\", b\"a\");\n-    //~^ ERROR: this function takes 2 generic arguments but 1 generic argument was supplied\n+    //~^ ERROR function takes 2 generic arguments but 1 generic argument was supplied\n }"}, {"sha": "ace77814a3a99d6aeffe811f76805ba85b7c579d", "filename": "src/test/ui/issues/issue-11374.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11374.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -6,7 +6,7 @@ LL |     c.read_to(v);\n    |       |       |\n    |       |       expected `&mut [u8]`, found struct `Vec`\n    |       |       help: consider mutably borrowing here: `&mut v`\n-   |       arguments to this function are incorrect\n+   |       arguments to this method are incorrect\n    |\n    = note: expected mutable reference `&mut [u8]`\n                          found struct `Vec<_>`"}, {"sha": "d3d670aa92aeb23f30f39050dde6041894241caa", "filename": "src/test/ui/issues/issue-26094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26094.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -8,6 +8,6 @@ fn some_function() {} //~ NOTE defined here\n \n fn main() {\n     some_macro!(some_function);\n-    //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~^ ERROR function takes 0 arguments but 1 argument was supplied\n     //~| NOTE in this expansion of some_macro!\n }"}, {"sha": "60bbfc0c6e2696336ce75aa8992697784fa8829e", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     b\"\".starts_with(stringify!(foo))\n    |         ----------- ^^^^^^^^^^^^^^^ expected slice `[u8]`, found `str`\n    |         |\n-   |         arguments to this function are incorrect\n+   |         arguments to this method are incorrect\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`"}, {"sha": "c95020a0c006c9176186239a3b33f8d5246f7427", "filename": "src/test/ui/issues/issue-4935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4935.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -3,4 +3,4 @@\n fn foo(a: usize) {}\n //~^ defined here\n fn main() { foo(5, 6) }\n-//~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+//~^ ERROR function takes 1 argument but 2 arguments were supplied"}, {"sha": "4bec3b3415bbc075419ff48d377d651f3ac38a52", "filename": "src/test/ui/lifetimes/issue-26638.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Flifetimes%2Fissue-26638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Flifetimes%2Fissue-26638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-26638.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -5,7 +5,7 @@ fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next()\n fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n //~^ ERROR missing lifetime specifier [E0106]\n //~| ERROR mismatched types\n-//~| ERROR this function takes 1 argument but 0 arguments were supplied\n+//~| ERROR function takes 1 argument but 0 arguments were supplied\n \n fn parse_type_3() -> &str { unimplemented!() }\n //~^ ERROR missing lifetime specifier [E0106]"}, {"sha": "3e73b950a14e0af982857231d4c358519371dbc1", "filename": "src/test/ui/methods/issues/issue-61525.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-61525.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n LL |         1.query::<dyn ToString>(\"\")\n    |           --------------------- ^^ expected trait object `dyn ToString`, found `&str`\n    |           |\n-   |           arguments to this function are incorrect\n+   |           arguments to this method are incorrect\n    |\n    = note: expected trait object `dyn ToString`\n                  found reference `&'static str`"}, {"sha": "4807a956aa2366550daaa727f6250157b93b3905", "filename": "src/test/ui/methods/method-call-err-msg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -10,13 +10,13 @@ impl Foo {\n \n fn main() {\n     let x = Foo;\n-    x.zero(0)   //~ ERROR this function takes 0 arguments but 1 argument was supplied\n-     .one()     //~ ERROR this function takes 1 argument but 0 arguments were supplied\n-     .two(0);   //~ ERROR this function takes 2 arguments but 1 argument was supplied\n+    x.zero(0)   //~ ERROR this method takes 0 arguments but 1 argument was supplied\n+     .one()     //~ ERROR this method takes 1 argument but 0 arguments were supplied\n+     .two(0);   //~ ERROR this method takes 2 arguments but 1 argument was supplied\n \n     let y = Foo;\n     y.zero()\n      .take()    //~ ERROR not an iterator\n      .one(0);\n-    y.three::<usize>(); //~ ERROR this function takes 3 arguments but 0 arguments were supplied\n+    y.three::<usize>(); //~ ERROR this method takes 3 arguments but 0 arguments were supplied\n }"}, {"sha": "81269b73b9a751bbd66155e80b620b66227633c3", "filename": "src/test/ui/methods/method-call-err-msg.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-err-msg.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 0 arguments but 1 argument was supplied\n+error[E0061]: this method takes 0 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:13:7\n    |\n LL |     x.zero(0)\n@@ -14,7 +14,7 @@ help: remove the extra argument\n LL |     x.zero()\n    |           ~~\n \n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:14:7\n    |\n LL |      .one()\n@@ -30,7 +30,7 @@ help: provide the argument\n LL |      .one(/* isize */)\n    |          ~~~~~~~~~~~~~\n \n-error[E0061]: this function takes 2 arguments but 1 argument was supplied\n+error[E0061]: this method takes 2 arguments but 1 argument was supplied\n   --> $DIR/method-call-err-msg.rs:15:7\n    |\n LL |      .two(0);\n@@ -67,7 +67,7 @@ note: the trait `Iterator` must be implemented\n    = note: the following trait defines an item `take`, perhaps you need to implement it:\n            candidate #1: `Iterator`\n \n-error[E0061]: this function takes 3 arguments but 0 arguments were supplied\n+error[E0061]: this method takes 3 arguments but 0 arguments were supplied\n   --> $DIR/method-call-err-msg.rs:21:7\n    |\n LL |     y.three::<usize>();"}, {"sha": "5b1804d825d824773d8823fb46c0958c234b326c", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -33,9 +33,9 @@ fn main() {\n     let ans = s(\"what\");\n     //~^ ERROR mismatched types\n     let ans = s();\n-    //~^ ERROR this function takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 0 arguments were supplied\n     let ans = s(\"burma\", \"shave\");\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n \n     F(\"\");\n     //~^ ERROR mismatched types"}, {"sha": "4a2ea5e44c71adec08866bd3e5a85471470cf1ac", "filename": "src/test/ui/not-enough-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fnot-enough-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -25,7 +25,7 @@ fn bar(\n \n fn main() {\n   foo(1, 2, 3);\n-  //~^ ERROR this function takes 4 arguments but 3\n+  //~^ ERROR function takes 4 arguments but 3\n   bar(1, 2, 3);\n-  //~^ ERROR this function takes 6 arguments but 3\n+  //~^ ERROR function takes 6 arguments but 3\n }"}, {"sha": "05cabd9e3cd010abe162364718e37ce2c3798d8c", "filename": "src/test/ui/resolve/resolve-primitive-fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // Make sure primitive type fallback doesn't work in value namespace\n     std::mem::size_of(u16);\n     //~^ ERROR expected value, found builtin type `u16`\n-    //~| ERROR this function takes 0 arguments but 1 argument was supplied\n+    //~| ERROR function takes 0 arguments but 1 argument was supplied\n \n     // Make sure primitive type fallback doesn't work with global paths\n     let _: ::u8;"}, {"sha": "9227ee482dfa554e4ada93fd38b16d798ebb7130", "filename": "src/test/ui/span/issue-34264.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-34264.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,8 +4,8 @@ fn bar(x, y: usize) {} //~ ERROR expected one of\n \n fn main() {\n     foo(Some(42), 2);\n-    foo(Some(42), 2, \"\"); //~ ERROR this function takes\n+    foo(Some(42), 2, \"\"); //~ ERROR function takes\n     bar(\"\", \"\"); //~ ERROR mismatched types\n     bar(1, 2);\n-    bar(1, 2, 3); //~ ERROR this function takes\n+    bar(1, 2, 3); //~ ERROR function takes\n }"}, {"sha": "db96ae223d92b941884b6a321f03609d206358fb", "filename": "src/test/ui/span/missing-unit-argument.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -9,9 +9,9 @@ impl S {\n \n fn main() {\n     let _: Result<(), String> = Ok(); //~ ERROR this enum variant takes\n-    foo(); //~ ERROR this function takes\n-    foo(()); //~ ERROR this function takes\n-    bar(); //~ ERROR this function takes\n-    S.baz(); //~ ERROR this function takes\n-    S.generic::<()>(); //~ ERROR this function takes\n+    foo(); //~ ERROR function takes\n+    foo(()); //~ ERROR function takes\n+    bar(); //~ ERROR function takes\n+    S.baz(); //~ ERROR this method takes\n+    S.generic::<()>(); //~ ERROR this method takes\n }"}, {"sha": "ef4d732b51d2dbc1d2bdb66d3b4192608584dda1", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -59,7 +59,7 @@ help: provide the argument\n LL |     bar(());\n    |        ~~~~\n \n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:15:7\n    |\n LL |     S.baz();\n@@ -75,7 +75,7 @@ help: provide the argument\n LL |     S.baz(());\n    |          ~~~~\n \n-error[E0061]: this function takes 1 argument but 0 arguments were supplied\n+error[E0061]: this method takes 1 argument but 0 arguments were supplied\n   --> $DIR/missing-unit-argument.rs:16:7\n    |\n LL |     S.generic::<()>();"}, {"sha": "f5931a1baea11d83872b2d4ce86e55ce3f4b31d7", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let _: Option<(i32, bool)> = Some(1, 2);\n     //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n     int_bool(1, 2);\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n \n     let _: Option<(i8,)> = Some();\n     //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied"}, {"sha": "f913995d7e28bd385a9858c92b6f55844eec3af8", "filename": "src/test/ui/suggestions/args-instead-of-tuple.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.fixed?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -5,21 +5,21 @@\n \n fn main() {\n     let _: Result<(i32, i8), ()> = Ok((1, 2));\n-    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 2 arguments were supplied\n     let _: Option<(i32, i8, &'static str)> = Some((1, 2, \"hi\"));\n-    //~^ ERROR this enum variant takes 1 argument but 3 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 3 arguments were supplied\n     let _: Option<()> = Some(());\n-    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 0 arguments were supplied\n \n     let _: Option<(i32,)> = Some((3,));\n     //~^ ERROR mismatched types\n \n     let _: Option<(i32,)> = Some((3,));\n     //~^ ERROR mismatched types\n \n-    two_ints((1, 2)); //~ ERROR this function takes 1 argument\n+    two_ints((1, 2)); //~ ERROR function takes 1 argument\n \n-    with_generic((3, 4)); //~ ERROR this function takes 1 argument\n+    with_generic((3, 4)); //~ ERROR function takes 1 argument\n }\n \n fn two_ints(_: (i32, i32)) {\n@@ -28,6 +28,6 @@ fn two_ints(_: (i32, i32)) {\n fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n     if false {\n         // test generics/bound handling\n-        with_generic((a, b)); //~ ERROR this function takes 1 argument\n+        with_generic((a, b)); //~ ERROR function takes 1 argument\n     }\n }"}, {"sha": "1c65407b3955e8551b27a9be658e5875e0ebb33d", "filename": "src/test/ui/suggestions/args-instead-of-tuple.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -5,21 +5,21 @@\n \n fn main() {\n     let _: Result<(i32, i8), ()> = Ok(1, 2);\n-    //~^ ERROR this enum variant takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 2 arguments were supplied\n     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n-    //~^ ERROR this enum variant takes 1 argument but 3 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 3 arguments were supplied\n     let _: Option<()> = Some();\n-    //~^ ERROR this enum variant takes 1 argument but 0 arguments were supplied\n+    //~^ ERROR enum variant takes 1 argument but 0 arguments were supplied\n \n     let _: Option<(i32,)> = Some(3);\n     //~^ ERROR mismatched types\n \n     let _: Option<(i32,)> = Some((3));\n     //~^ ERROR mismatched types\n \n-    two_ints(1, 2); //~ ERROR this function takes 1 argument\n+    two_ints(1, 2); //~ ERROR function takes 1 argument\n \n-    with_generic(3, 4); //~ ERROR this function takes 1 argument\n+    with_generic(3, 4); //~ ERROR function takes 1 argument\n }\n \n fn two_ints(_: (i32, i32)) {\n@@ -28,6 +28,6 @@ fn two_ints(_: (i32, i32)) {\n fn with_generic<T: Copy + Send>((a, b): (i32, T)) {\n     if false {\n         // test generics/bound handling\n-        with_generic(a, b); //~ ERROR this function takes 1 argument\n+        with_generic(a, b); //~ ERROR function takes 1 argument\n     }\n }"}, {"sha": "3ed9dbf4abbc63118d9ca64344ec23a81df6f7d7", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n+error[E0061]: enum variant takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:7:36\n    |\n LL |     let _: Result<(i32, i8), ()> = Ok(1, 2);\n@@ -11,7 +11,7 @@ help: wrap these arguments in parentheses to construct a tuple\n LL |     let _: Result<(i32, i8), ()> = Ok((1, 2));\n    |                                       +    +\n \n-error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n+error[E0061]: enum variant takes 1 argument but 3 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:9:46\n    |\n LL |     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n@@ -71,7 +71,7 @@ help: use a trailing comma to create a tuple with one element\n LL |     let _: Option<(i32,)> = Some((3,));\n    |                                    +\n \n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:20:5\n    |\n LL |     two_ints(1, 2);\n@@ -87,7 +87,7 @@ help: wrap these arguments in parentheses to construct a tuple\n LL |     two_ints((1, 2));\n    |              +    +\n \n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:22:5\n    |\n LL |     with_generic(3, 4);\n@@ -103,7 +103,7 @@ help: wrap these arguments in parentheses to construct a tuple\n LL |     with_generic((3, 4));\n    |                  +    +\n \n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/args-instead-of-tuple.rs:31:9\n    |\n LL |         with_generic(a, b);"}, {"sha": "be4394031047f897673211556edbb8f4f8b48b17", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -3,6 +3,6 @@\n fn two_type_params<A, B>(_: B) {}\n \n fn main() {\n-    two_type_params::<String, _>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String, _>(100); //~ ERROR function takes 2 generic arguments\n     two_type_params::<String, _>(100);\n }"}, {"sha": "d444998d35bf9959f9df5e6457d9ce042034abf9", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -3,6 +3,6 @@\n fn two_type_params<A, B>(_: B) {}\n \n fn main() {\n-    two_type_params::<String>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String>(100); //~ ERROR function takes 2 generic arguments\n     two_type_params::<String, _>(100);\n }"}, {"sha": "5f59d0f541c99433e116610108335abbe02e9a0c", "filename": "src/test/ui/suggestions/sugg-else-for-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsugg-else-for-closure.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _s = y.unwrap_or(|| x.split('.').nth(1).unwrap());\n    |                --------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&str`, found closure\n    |                |\n-   |                arguments to this function are incorrect\n+   |                arguments to this method are incorrect\n    |\n    = note: expected reference `&str`\n                 found closure `[closure@$DIR/sugg-else-for-closure.rs:6:26: 6:28]`"}, {"sha": "f520d88c6ba3b0cd838ba6596966e1afa71db7fb", "filename": "src/test/ui/suggestions/trait-with-missing-associated-type-restriction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftrait-with-missing-associated-type-restriction.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -78,7 +78,7 @@ error[E0308]: mismatched types\n LL |     x.funk(3);\n    |       ---- ^ expected associated type, found integer\n    |       |\n-   |       arguments to this function are incorrect\n+   |       arguments to this method are incorrect\n    |\n    = note: expected associated type `<T as Trait<i32>>::A`\n                          found type `{integer}`"}, {"sha": "7924d3db06f36efb7ce39b5e0740200fc312099e", "filename": "src/test/ui/traits/issue-52893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-52893.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -7,7 +7,7 @@ LL | impl<F, Name, P> AddClass<Name, F> for Class<P>\n LL |         builder.push(output);\n    |                 ---- ^^^^^^ expected type parameter `F`, found struct `Class`\n    |                 |\n-   |                 arguments to this function are incorrect\n+   |                 arguments to this method are incorrect\n    |\n    = note: expected type parameter `F`\n                       found struct `Class<P>`"}, {"sha": "01b13b29fb4ccb3f6cc3b3549b6e5cec2b619e11", "filename": "src/test/ui/tuple/add-tuple-within-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,7 +4,7 @@ fn bar(s: &str, a: (&str,), s2: &str) {}\n \n fn main() {\n     foo(\"hi\", 1, 2, \"hi\");\n-    //~^ ERROR this function takes 3 arguments but 4 arguments were supplied\n+    //~^ ERROR function takes 3 arguments but 4 arguments were supplied\n     bar(\"hi\", \"hi\", \"hi\");\n     //~^ ERROR mismatched types\n }"}, {"sha": "2e20a4cca0845dff2b8ef166c3b77856456bbd0e", "filename": "src/test/ui/tuple/add-tuple-within-arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fadd-tuple-within-arguments.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 3 arguments but 4 arguments were supplied\n+error[E0061]: function takes 3 arguments but 4 arguments were supplied\n   --> $DIR/add-tuple-within-arguments.rs:6:5\n    |\n LL |     foo(\"hi\", 1, 2, \"hi\");"}, {"sha": "e1c1d748fec0a601051cde1c2fd7322e128b0ee4", "filename": "src/test/ui/tuple/wrong_argument_ice-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -11,7 +11,7 @@ impl Foo {\n fn bar() {\n     let x = Foo;\n     test(x.qux(), x.qux());\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n }\n \n fn main() {}"}, {"sha": "41244209214e7e2006e69db4ed4cb29c2ae2ea3b", "filename": "src/test/ui/tuple/wrong_argument_ice-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-2.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: function takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-2.rs:13:5\n    |\n LL |     test(x.qux(), x.qux());"}, {"sha": "96633180b57eb320480999f955a22cf5b061d4a5", "filename": "src/test/ui/tuple/wrong_argument_ice-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -7,7 +7,7 @@ fn test(process: &Process, groups: Vec<Group>) -> Vec<Group> {\n \n     if groups.capacity() == 0 {\n         groups.push(new_group, vec![process]);\n-        //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+        //~^ ERROR this method takes 1 argument but 2 arguments were supplied\n         return groups;\n     }\n "}, {"sha": "0a503e1fe58c1a503c2e81fb136d0e70368dd24d", "filename": "src/test/ui/tuple/wrong_argument_ice-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-3.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: this method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice-3.rs:9:16\n    |\n LL |         groups.push(new_group, vec![process]);"}, {"sha": "883d92dcce1437a26eaa95028a69e725f0419c48", "filename": "src/test/ui/tuple/wrong_argument_ice-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     (|| {})(|| {\n-        //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+        //~^ ERROR function takes 0 arguments but 1 argument was supplied\n         let b = 1;\n     });\n }"}, {"sha": "b7e0225feb76dad8ee8ba0a3d52f2b85f867d5a3", "filename": "src/test/ui/tuple/wrong_argument_ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -9,7 +9,7 @@ pub struct BuildPlanBuilder {\n impl BuildPlanBuilder {\n     pub fn or(&mut self) -> &mut Self {\n         self.acc.push_back(self.current_provides, self.current_requires);\n-        //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+        //~^ ERROR method takes 1 argument but 2 arguments were supplied\n         self\n     }\n }"}, {"sha": "f1b00ae0b9242265bcb8a3e6a87742e04a2b9752", "filename": "src/test/ui/tuple/wrong_argument_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice.stderr?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n-error[E0061]: this function takes 1 argument but 2 arguments were supplied\n+error[E0061]: method takes 1 argument but 2 arguments were supplied\n   --> $DIR/wrong_argument_ice.rs:11:18\n    |\n LL |         self.acc.push_back(self.current_provides, self.current_requires);"}, {"sha": "8978c85ed493232f4f8db6ae916a9db3adf0b525", "filename": "src/test/ui/type/type-ascription-instead-of-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-initializer.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x: Vec::with_capacity(10, 20);  //~ ERROR expected type, found `10`\n-    //~^ ERROR this function takes 1 argument\n+    //~^ ERROR function takes 1 argument\n }"}, {"sha": "d09306bf7941fd10070ecd7916bf6fb303232cb2", "filename": "src/test/ui/typeck/remove-extra-argument.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.fixed?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,6 +4,6 @@ fn l(_a: Vec<u8>) {}\n \n fn main() {\n     l(vec![])\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n     //~| HELP remove the extra argument\n }"}, {"sha": "2181c37cee913a5904222a74a7baca472d2efb35", "filename": "src/test/ui/typeck/remove-extra-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e048ee2ac1c65fa928e7d1c5f8a538440ddb0014/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fremove-extra-argument.rs?ref=e048ee2ac1c65fa928e7d1c5f8a538440ddb0014", "patch": "@@ -4,6 +4,6 @@ fn l(_a: Vec<u8>) {}\n \n fn main() {\n     l(vec![], vec![])\n-    //~^ ERROR this function takes 1 argument but 2 arguments were supplied\n+    //~^ ERROR function takes 1 argument but 2 arguments were supplied\n     //~| HELP remove the extra argument\n }"}]}