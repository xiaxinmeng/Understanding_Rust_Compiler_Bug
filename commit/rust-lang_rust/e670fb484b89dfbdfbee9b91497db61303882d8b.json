{"sha": "e670fb484b89dfbdfbee9b91497db61303882d8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NzBmYjQ4NGI4OWRmYmRmYmVlOWI5MTQ5N2RiNjEzMDM4ODJkOGI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-30T03:14:01Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-05T01:30:51Z"}, "message": "Apply explicit stabilities to unicode parts of CharExt.", "tree": {"sha": "726af3f55775e785b1c668a0d9321922779e60b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/726af3f55775e785b1c668a0d9321922779e60b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e670fb484b89dfbdfbee9b91497db61303882d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e670fb484b89dfbdfbee9b91497db61303882d8b", "html_url": "https://github.com/rust-lang/rust/commit/e670fb484b89dfbdfbee9b91497db61303882d8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e670fb484b89dfbdfbee9b91497db61303882d8b/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0302d379776fca82d3eb693046239dc66998f691", "url": "https://api.github.com/repos/rust-lang/rust/commits/0302d379776fca82d3eb693046239dc66998f691", "html_url": "https://github.com/rust-lang/rust/commit/0302d379776fca82d3eb693046239dc66998f691"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "5693c222de123262b874b37e9d5e737eaab80332", "filename": "src/libunicode/u_char.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e670fb484b89dfbdfbee9b91497db61303882d8b/src%2Flibunicode%2Fu_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e670fb484b89dfbdfbee9b91497db61303882d8b/src%2Flibunicode%2Fu_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_char.rs?ref=e670fb484b89dfbdfbee9b91497db61303882d8b", "patch": "@@ -19,7 +19,7 @@ use core::option::Option;\n use tables::{derived_property, property, general_category, conversions, charwidth};\n \n /// Functionality for manipulating `char`.\n-#[experimental = \"pending prelude organization\"]\n+#[stable]\n pub trait CharExt {\n     /// Checks if a `char` parses as a numeric digit in the given radix.\n     ///\n@@ -103,6 +103,7 @@ pub trait CharExt {\n \n     /// Returns whether the specified character is considered a Unicode\n     /// alphabetic code point.\n+    #[stable]\n     fn is_alphabetic(self) -> bool;\n \n     /// Returns whether the specified character satisfies the 'XID_Start'\n@@ -111,6 +112,7 @@ pub trait CharExt {\n     /// 'XID_Start' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to ID_Start but modified for closure under NFKx.\n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_start(self) -> bool;\n \n     /// Returns whether the specified `char` satisfies the 'XID_Continue'\n@@ -119,38 +121,45 @@ pub trait CharExt {\n     /// 'XID_Continue' is a Unicode Derived Property specified in\n     /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n     /// mostly similar to 'ID_Continue' but modified for closure under NFKx.\n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_continue(self) -> bool;\n \n     /// Indicates whether a character is in lowercase.\n     ///\n     /// This is defined according to the terms of the Unicode Derived Core\n     /// Property `Lowercase`.\n+    #[stable]\n     fn is_lowercase(self) -> bool;\n \n     /// Indicates whether a character is in uppercase.\n     ///\n     /// This is defined according to the terms of the Unicode Derived Core\n     /// Property `Uppercase`.\n+    #[stable]\n     fn is_uppercase(self) -> bool;\n \n     /// Indicates whether a character is whitespace.\n     ///\n     /// Whitespace is defined in terms of the Unicode Property `White_Space`.\n+    #[stable]\n     fn is_whitespace(self) -> bool;\n \n     /// Indicates whether a character is alphanumeric.\n     ///\n     /// Alphanumericness is defined in terms of the Unicode General Categories\n     /// 'Nd', 'Nl', 'No' and the Derived Core Property 'Alphabetic'.\n+    #[stable]\n     fn is_alphanumeric(self) -> bool;\n \n     /// Indicates whether a character is a control code point.\n     ///\n     /// Control code points are defined in terms of the Unicode General\n     /// Category `Cc`.\n+    #[stable]\n     fn is_control(self) -> bool;\n \n     /// Indicates whether the character is numeric (Nd, Nl, or No).\n+    #[stable]\n     fn is_numeric(self) -> bool;\n \n     /// Converts a character to its lowercase equivalent.\n@@ -162,6 +171,7 @@ pub trait CharExt {\n     ///\n     /// Returns the lowercase equivalent of the character, or the character\n     /// itself if no conversion is possible.\n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_lowercase(self) -> char;\n \n     /// Converts a character to its uppercase equivalent.\n@@ -184,6 +194,7 @@ pub trait CharExt {\n     /// [`SpecialCasing`.txt`]: ftp://ftp.unicode.org/Public/UNIDATA/SpecialCasing.txt\n     ///\n     /// [2]: http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf#G33992\n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_uppercase(self) -> char;\n \n     /// Returns this character's displayed width in columns, or `None` if it is a\n@@ -199,7 +210,7 @@ pub trait CharExt {\n     fn width(self, is_cjk: bool) -> Option<uint>;\n }\n \n-#[experimental = \"pending prelude organization\"]\n+#[stable]\n impl CharExt for char {\n     #[unstable = \"pending integer conventions\"]\n     fn is_digit(self, radix: uint) -> bool { C::is_digit(self, radix) }\n@@ -218,6 +229,7 @@ impl CharExt for char {\n     #[unstable = \"pending decision about Iterator/Writer/Reader\"]\n     fn encode_utf16(self, dst: &mut [u16]) -> Option<uint> { C::encode_utf16(self, dst) }\n \n+    #[stable]\n     fn is_alphabetic(self) -> bool {\n         match self {\n             'a' ... 'z' | 'A' ... 'Z' => true,\n@@ -226,10 +238,13 @@ impl CharExt for char {\n         }\n     }\n \n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_start(self) -> bool { derived_property::XID_Start(self) }\n \n+    #[experimental = \"mainly needed for compiler internals\"]\n     fn is_xid_continue(self) -> bool { derived_property::XID_Continue(self) }\n \n+    #[stable]\n     fn is_lowercase(self) -> bool {\n         match self {\n             'a' ... 'z' => true,\n@@ -238,6 +253,7 @@ impl CharExt for char {\n         }\n     }\n \n+    #[stable]\n     fn is_uppercase(self) -> bool {\n         match self {\n             'A' ... 'Z' => true,\n@@ -246,6 +262,7 @@ impl CharExt for char {\n         }\n     }\n \n+    #[stable]\n     fn is_whitespace(self) -> bool {\n         match self {\n             ' ' | '\\x09' ... '\\x0d' => true,\n@@ -254,12 +271,15 @@ impl CharExt for char {\n         }\n     }\n \n+    #[stable]\n     fn is_alphanumeric(self) -> bool {\n         self.is_alphabetic() || self.is_numeric()\n     }\n \n+    #[stable]\n     fn is_control(self) -> bool { general_category::Cc(self) }\n \n+    #[stable]\n     fn is_numeric(self) -> bool {\n         match self {\n             '0' ... '9' => true,\n@@ -268,8 +288,10 @@ impl CharExt for char {\n         }\n     }\n \n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_lowercase(self) -> char { conversions::to_lower(self) }\n \n+    #[experimental = \"pending case transformation decisions\"]\n     fn to_uppercase(self) -> char { conversions::to_upper(self) }\n \n     #[experimental = \"needs expert opinion. is_cjk flag stands out as ugly\"]"}]}