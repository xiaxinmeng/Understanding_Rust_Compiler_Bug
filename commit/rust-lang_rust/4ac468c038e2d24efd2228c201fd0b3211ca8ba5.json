{"sha": "4ac468c038e2d24efd2228c201fd0b3211ca8ba5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzQ2OGMwMzhlMmQyNGVmZDIyMjhjMjAxZmQwYjMyMTFjYThiYTU=", "commit": {"author": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2020-02-08T06:13:36Z"}, "committer": {"name": "Michael Bradshaw", "email": "mjbshaw@google.com", "date": "2020-02-08T18:42:23Z"}, "message": "Mark several functions and methods in core::cmp as #[must_use]", "tree": {"sha": "41c07c28eb5d59175b18c647c5fd306ae280200b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41c07c28eb5d59175b18c647c5fd306ae280200b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac468c038e2d24efd2228c201fd0b3211ca8ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac468c038e2d24efd2228c201fd0b3211ca8ba5", "html_url": "https://github.com/rust-lang/rust/commit/4ac468c038e2d24efd2228c201fd0b3211ca8ba5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac468c038e2d24efd2228c201fd0b3211ca8ba5/comments", "author": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjbshaw", "id": 1204698, "node_id": "MDQ6VXNlcjEyMDQ2OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1204698?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjbshaw", "html_url": "https://github.com/mjbshaw", "followers_url": "https://api.github.com/users/mjbshaw/followers", "following_url": "https://api.github.com/users/mjbshaw/following{/other_user}", "gists_url": "https://api.github.com/users/mjbshaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjbshaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjbshaw/subscriptions", "organizations_url": "https://api.github.com/users/mjbshaw/orgs", "repos_url": "https://api.github.com/users/mjbshaw/repos", "events_url": "https://api.github.com/users/mjbshaw/events{/privacy}", "received_events_url": "https://api.github.com/users/mjbshaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8498c5f5b02dbb4ed58a1eb4901b0b733342c35f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8498c5f5b02dbb4ed58a1eb4901b0b733342c35f", "html_url": "https://github.com/rust-lang/rust/commit/8498c5f5b02dbb4ed58a1eb4901b0b733342c35f"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "604be7d5f68d0f78f8617ee809c1149b468d517d", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ac468c038e2d24efd2228c201fd0b3211ca8ba5/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac468c038e2d24efd2228c201fd0b3211ca8ba5/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=4ac468c038e2d24efd2228c201fd0b3211ca8ba5", "patch": "@@ -361,6 +361,7 @@ impl Ordering {\n     /// assert!(data == b);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reverse(self) -> Ordering {\n         match self {\n@@ -398,6 +399,7 @@ impl Ordering {\n     /// assert_eq!(result, Ordering::Less);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"ordering_chaining\", since = \"1.17.0\")]\n     pub fn then(self, other: Ordering) -> Ordering {\n         match self {\n@@ -435,6 +437,7 @@ impl Ordering {\n     /// assert_eq!(result, Ordering::Less);\n     /// ```\n     #[inline]\n+    #[must_use]\n     #[stable(feature = \"ordering_chaining\", since = \"1.17.0\")]\n     pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {\n         match self {\n@@ -576,6 +579,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert_eq!(10.cmp(&5), Ordering::Greater);\n     /// assert_eq!(5.cmp(&5), Ordering::Equal);\n     /// ```\n+    #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cmp(&self, other: &Self) -> Ordering;\n \n@@ -591,6 +595,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n+    #[must_use]\n     fn max(self, other: Self) -> Self\n     where\n         Self: Sized,\n@@ -610,6 +615,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// ```\n     #[stable(feature = \"ord_max_min\", since = \"1.21.0\")]\n     #[inline]\n+    #[must_use]\n     fn min(self, other: Self) -> Self\n     where\n         Self: Sized,\n@@ -635,6 +641,7 @@ pub trait Ord: Eq + PartialOrd<Self> {\n     /// assert!(0.clamp(-2, 1) == 0);\n     /// assert!(2.clamp(-2, 1) == 1);\n     /// ```\n+    #[must_use]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]\n     fn clamp(self, min: Self, max: Self) -> Self\n     where\n@@ -915,6 +922,7 @@ pub macro PartialOrd($item:item) {\n /// assert_eq!(2, cmp::min(2, 2));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn min<T: Ord>(v1: T, v2: T) -> T {\n     v1.min(v2)\n@@ -935,6 +943,7 @@ pub fn min<T: Ord>(v1: T, v2: T) -> T {\n /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n     match compare(&v1, &v2) {\n@@ -958,6 +967,7 @@ pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n     min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n@@ -978,6 +988,7 @@ pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n /// assert_eq!(2, cmp::max(2, 2));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn max<T: Ord>(v1: T, v2: T) -> T {\n     v1.max(v2)\n@@ -998,6 +1009,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n     match compare(&v1, &v2) {\n@@ -1021,6 +1033,7 @@ pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n /// assert_eq!(cmp::max_by_key(-2, 2, |x: &i32| x.abs()), 2);\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"cmp_min_max_by\", issue = \"64460\")]\n pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n     max_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))"}]}