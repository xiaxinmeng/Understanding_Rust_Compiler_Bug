{"sha": "a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGQwOTBjM2NmNjIyM2I5MGM1YTM5ZTY2ZGRlZjNlMTkzMmM3Yzc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T03:45:18Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:43:24Z"}, "message": "librand: use `#[deriving(Copy)]`", "tree": {"sha": "eef28239c4190e1e45f543e9f3df7fec453f5d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eef28239c4190e1e45f543e9f3df7fec453f5d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "html_url": "https://github.com/rust-lang/rust/commit/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/comments", "author": null, "committer": null, "parents": [{"sha": "e0a88a78da2632f615f387a2bdd45777f74f073f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a88a78da2632f615f387a2bdd45777f74f073f", "html_url": "https://github.com/rust-lang/rust/commit/e0a88a78da2632f615f387a2bdd45777f74f073f"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "6fc92e1e94fcbdcbbedbf74b2e326b50bf8dff99", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "patch": "@@ -29,14 +29,13 @@ const CHACHA_ROUNDS: uint = 20; // Cryptographically secure from 8 upwards as of\n /// [1]: D. J. Bernstein, [*ChaCha, a variant of\n /// Salsa20*](http://cr.yp.to/chacha.html)\n \n+#[deriving(Copy)]\n pub struct ChaChaRng {\n     buffer:  [u32, ..STATE_WORDS], // Internal buffer of output\n     state:   [u32, ..STATE_WORDS], // Initial state\n     index:   uint,                 // Index into state\n }\n \n-impl Copy for ChaChaRng {}\n-\n static EMPTY: ChaChaRng = ChaChaRng {\n     buffer:  [0, ..STATE_WORDS],\n     state:   [0, ..STATE_WORDS],"}, {"sha": "431a530726a083291ab0a38cf547e304d3d191cb", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "patch": "@@ -10,7 +10,6 @@\n \n //! The exponential distribution.\n \n-use core::kinds::Copy;\n use core::num::Float;\n \n use {Rng, Rand};\n@@ -30,10 +29,9 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n+#[deriving(Copy)]\n pub struct Exp1(pub f64);\n \n-impl Copy for Exp1 {}\n-\n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n impl Rand for Exp1 {\n     #[inline]\n@@ -69,13 +67,12 @@ impl Rand for Exp1 {\n /// let v = exp.ind_sample(&mut rand::task_rng());\n /// println!(\"{} is from a Exp(2) distribution\", v);\n /// ```\n+#[deriving(Copy)]\n pub struct Exp {\n     /// `lambda` stored as `1/lambda`, since this is what we scale by.\n     lambda_inverse: f64\n }\n \n-impl Copy for Exp {}\n-\n impl Exp {\n     /// Construct a new `Exp` with the given shape parameter\n     /// `lambda`. Panics if `lambda <= 0`."}, {"sha": "16413af626739ed8fa65817f20d3aba8573359d3", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "patch": "@@ -10,7 +10,6 @@\n \n //! The normal and derived distributions.\n \n-use core::kinds::Copy;\n use core::num::Float;\n \n use {Rng, Rand, Open01};\n@@ -29,10 +28,9 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n+#[deriving(Copy)]\n pub struct StandardNormal(pub f64);\n \n-impl Copy for StandardNormal {}\n-\n impl Rand for StandardNormal {\n     fn rand<R:Rng>(rng: &mut R) -> StandardNormal {\n         #[inline]\n@@ -86,13 +84,12 @@ impl Rand for StandardNormal {\n /// let v = normal.ind_sample(&mut rand::task_rng());\n /// println!(\"{} is from a N(2, 9) distribution\", v)\n /// ```\n+#[deriving(Copy)]\n pub struct Normal {\n     mean: f64,\n     std_dev: f64,\n }\n \n-impl Copy for Normal {}\n-\n impl Normal {\n     /// Construct a new `Normal` distribution with the given mean and\n     /// standard deviation.\n@@ -135,12 +132,11 @@ impl IndependentSample<f64> for Normal {\n /// let v = log_normal.ind_sample(&mut rand::task_rng());\n /// println!(\"{} is from an ln N(2, 9) distribution\", v)\n /// ```\n+#[deriving(Copy)]\n pub struct LogNormal {\n     norm: Normal\n }\n \n-impl Copy for LogNormal {}\n-\n impl LogNormal {\n     /// Construct a new `LogNormal` distribution with the given mean\n     /// and standard deviation."}, {"sha": "3cb1f51a6a80102d472271934b1d7780983c14bd", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "patch": "@@ -29,6 +29,7 @@ const RAND_SIZE_UINT: uint = 1 << (RAND_SIZE_LEN as uint);\n ///\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n+#[deriving(Copy)]\n pub struct IsaacRng {\n     cnt: u32,\n     rsl: [u32, ..RAND_SIZE_UINT],\n@@ -38,8 +39,6 @@ pub struct IsaacRng {\n     c: u32\n }\n \n-impl Copy for IsaacRng {}\n-\n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n     rsl: [0, ..RAND_SIZE_UINT],\n@@ -265,6 +264,7 @@ const RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n ///\n /// [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number\n /// generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)\n+#[deriving(Copy)]\n pub struct Isaac64Rng {\n     cnt: uint,\n     rsl: [u64, .. RAND_SIZE_64],\n@@ -274,8 +274,6 @@ pub struct Isaac64Rng {\n     c: u64,\n }\n \n-impl Copy for Isaac64Rng {}\n-\n static EMPTY_64: Isaac64Rng = Isaac64Rng {\n     cnt: 0,\n     rsl: [0, .. RAND_SIZE_64],"}, {"sha": "514ff81da518ec789c5614c169b197aa7a9887b0", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "patch": "@@ -501,6 +501,7 @@ pub struct Closed01<F>(pub F);\n #[cfg(not(test))]\n mod std {\n     pub use core::{option, fmt}; // panic!()\n+    pub use core::kinds;\n }\n \n #[cfg(test)]"}, {"sha": "94a11c040e49758e7a8f34e1cafc7a84310b6aa1", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18d090c3cf6223b90c5a39e66ddef3e1932c7c7/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=a18d090c3cf6223b90c5a39e66ddef3e1932c7c7", "patch": "@@ -133,10 +133,9 @@ pub trait Reseeder<R> {\n \n /// Reseed an RNG using a `Default` instance. This reseeds by\n /// replacing the RNG with the result of a `Default::default` call.\n+#[deriving(Copy)]\n pub struct ReseedWithDefault;\n \n-impl Copy for ReseedWithDefault {}\n-\n impl<R: Rng + Default> Reseeder<R> for ReseedWithDefault {\n     fn reseed(&mut self, rng: &mut R) {\n         *rng = Default::default();"}]}