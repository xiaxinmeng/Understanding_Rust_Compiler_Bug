{"sha": "c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNTRhMGM3ZWIyMmY3YTRiYzFjN2FkZjhlMmVkMzRlZTk2NDI4YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-02T05:37:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-02T05:37:35Z"}, "message": "auto merge of #6896 : nickdesaulniers/rust/issue4501, r=brson\n\nreview? @brson", "tree": {"sha": "675d25a764043bfaff2360da96bfdf4d5e005bb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/675d25a764043bfaff2360da96bfdf4d5e005bb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "html_url": "https://github.com/rust-lang/rust/commit/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c331053ea9d2661cfd9c81351f4b3815cf5e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c331053ea9d2661cfd9c81351f4b3815cf5e3d", "html_url": "https://github.com/rust-lang/rust/commit/14c331053ea9d2661cfd9c81351f4b3815cf5e3d"}, {"sha": "ecd08b989ae006660929bce6b719d9f7bc34a7fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd08b989ae006660929bce6b719d9f7bc34a7fe", "html_url": "https://github.com/rust-lang/rust/commit/ecd08b989ae006660929bce6b719d9f7bc34a7fe"}], "stats": {"total": 111, "additions": 47, "deletions": 64}, "files": [{"sha": "f0c353c8d62b6a8c3d775531c46826cc991f664f", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -376,7 +376,7 @@ mod pipesy {\n         priv use core::kinds::Owned;\n         use ptr::to_mut_unsafe_ptr;\n \n-        pub fn init<T: Owned>() -> (client::Oneshot<T>, server::Oneshot<T>) {\n+        pub fn init<T: Owned>() -> (server::Oneshot<T>, client::Oneshot<T>) {\n             pub use core::pipes::HasBuffer;\n \n             let buffer = ~::core::pipes::Buffer {\n@@ -466,7 +466,7 @@ mod pipesy {\n \n     /// Initialiase a (send-endpoint, recv-endpoint) oneshot pipe pair.\n     pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n-        let (chan, port) = oneshot::init();\n+        let (port, chan) = oneshot::init();\n         (PortOne::new(port), ChanOne::new(chan))\n     }\n \n@@ -550,7 +550,7 @@ mod pipesy {\n     pub mod streamp {\n         priv use core::kinds::Owned;\n \n-        pub fn init<T: Owned>() -> (client::Open<T>, server::Open<T>) {\n+        pub fn init<T: Owned>() -> (server::Open<T>, client::Open<T>) {\n             pub use core::pipes::HasBuffer;\n             ::core::pipes::entangle()\n         }\n@@ -567,7 +567,7 @@ mod pipesy {\n                 ::core::option::Option<Open<T>> {\n                 {\n                     use super::data;\n-                    let (c, s) = ::core::pipes::entangle();\n+                    let (s, c) = ::core::pipes::entangle();\n                     let message = data(x_0, s);\n                     if ::core::pipes::send(pipe, message) {\n                         ::core::pipes::rt::make_some(c)\n@@ -579,7 +579,7 @@ mod pipesy {\n             pub fn data<T: Owned>(pipe: Open<T>, x_0: T) -> Open<T> {\n                 {\n                     use super::data;\n-                    let (c, s) = ::core::pipes::entangle();\n+                    let (s, c) = ::core::pipes::entangle();\n                     let message = data(x_0, s);\n                     ::core::pipes::send(pipe, message);\n                     c\n@@ -615,7 +615,7 @@ mod pipesy {\n \n     */\n     pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n-        let (c, s) = streamp::init();\n+        let (s, c) = streamp::init();\n \n         (Port {\n             endp: Some(s)"}, {"sha": "365e192da66f731b419b41195170856b16f33096", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -237,11 +237,11 @@ pub fn packet<T>() -> *mut Packet<T> {\n pub fn entangle_buffer<T:Owned,Tstart:Owned>(\n     mut buffer: ~Buffer<T>,\n     init: &fn(*libc::c_void, x: &mut T) -> *mut Packet<Tstart>)\n-    -> (SendPacketBuffered<Tstart, T>, RecvPacketBuffered<Tstart, T>) {\n+    -> (RecvPacketBuffered<Tstart, T>, SendPacketBuffered<Tstart, T>) {\n     unsafe {\n         let p = init(transmute_copy(&buffer), &mut buffer.data);\n         forget(buffer);\n-        (SendPacketBuffered(p), RecvPacketBuffered(p))\n+        (RecvPacketBuffered(p), SendPacketBuffered(p))\n     }\n }\n \n@@ -775,9 +775,9 @@ pub fn RecvPacketBuffered<T,Tbuffer>(p: *mut Packet<T>)\n     }\n }\n \n-pub fn entangle<T>() -> (SendPacket<T>, RecvPacket<T>) {\n+pub fn entangle<T>() -> (RecvPacket<T>, SendPacket<T>) {\n     let p = packet();\n-    (SendPacket(p), RecvPacket(p))\n+    (RecvPacket(p), SendPacket(p))\n }\n \n /** Receives a message from one of two endpoints."}, {"sha": "83cafcd8a6aa12c9d604848b2bb29af6262c40a2", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -89,10 +89,10 @@ impl gen_send for message {\n             }\n             else {\n                 let pat = match (this.dir, next.dir) {\n-                  (send, send) => \"(c, s)\",\n-                  (send, recv) => \"(s, c)\",\n-                  (recv, send) => \"(s, c)\",\n-                  (recv, recv) => \"(c, s)\"\n+                  (send, send) => \"(s, c)\",\n+                  (send, recv) => \"(c, s)\",\n+                  (recv, send) => \"(c, s)\",\n+                  (recv, recv) => \"(s, c)\"\n                 };\n \n                 body += fmt!(\"let %s = ::std::pipes::entangle();\\n\", pat);\n@@ -317,30 +317,13 @@ impl gen_init for protocol {\n         let start_state = self.states[0];\n \n         let body = if !self.is_bounded() {\n-            match start_state.dir {\n-              send => quote_expr!( ::std::pipes::entangle() ),\n-              recv => {\n-                quote_expr!({\n-                    let (s, c) = ::std::pipes::entangle();\n-                    (c, s)\n-                })\n-              }\n-            }\n+            quote_expr!( ::std::pipes::entangle() )\n         }\n         else {\n-            let body = self.gen_init_bounded(ext_cx);\n-            match start_state.dir {\n-              send => body,\n-              recv => {\n-                  quote_expr!({\n-                      let (s, c) = $body;\n-                      (c, s)\n-                  })\n-              }\n-            }\n+            self.gen_init_bounded(ext_cx)\n         };\n \n-        cx.parse_item(fmt!(\"pub fn init%s() -> (client::%s, server::%s)\\\n+        cx.parse_item(fmt!(\"pub fn init%s() -> (server::%s, client::%s)\\\n                             { pub use std::pipes::HasBuffer; %s }\",\n                            start_state.generics.to_source(cx),\n                            start_state.to_ty(cx).to_source(cx),"}, {"sha": "2cc9e8882c754be98ecb7c24fc575774e6d8ca86", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -73,7 +73,7 @@ fn main() {\n     let num_tasks = uint::from_str(args[1]).get();\n     let msg_per_task = uint::from_str(args[2]).get();\n \n-    let (num_chan, num_port) = ring::init();\n+    let (num_port, num_chan) = ring::init();\n     let mut num_chan = Cell(num_chan);\n \n     let start = time::precise_time_s();\n@@ -83,7 +83,7 @@ fn main() {\n \n     for uint::range(1u, num_tasks) |i| {\n         //error!(\"spawning %?\", i);\n-        let (new_chan, num_port) = ring::init();\n+        let (num_port, new_chan) = ring::init();\n         let num_chan2 = Cell(num_chan.take());\n         let num_port = Cell(num_port);\n         let new_future = do future::spawn || {"}, {"sha": "9a8c0656e84adfa4cdf01a2e00eb50a70759041e", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -83,11 +83,11 @@ endpoint is passed to the new task.\n \n */\n pub fn spawn_service<T:Owned,Tb:Owned>(\n-            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n-                                  RecvPacketBuffered<T, Tb>),\n+            init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n+                                  SendPacketBuffered<T, Tb>),\n             service: ~fn(v: RecvPacketBuffered<T, Tb>))\n         -> SendPacketBuffered<T, Tb> {\n-    let (client, server) = init();\n+    let (server, client) = init();\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n@@ -104,11 +104,11 @@ receive state.\n \n */\n pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n-        init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n-                              SendPacketBuffered<T, Tb>),\n+        init: extern fn() -> (SendPacketBuffered<T, Tb>,\n+                              RecvPacketBuffered<T, Tb>),\n         service: ~fn(v: SendPacketBuffered<T, Tb>))\n         -> RecvPacketBuffered<T, Tb> {\n-    let (client, server) = init();\n+    let (server, client) = init();\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task."}, {"sha": "5d3a2d2331c90b7ec00739d09179486aa7745ea5", "filename": "src/test/run-pass/issue-2834.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2834.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -18,7 +18,7 @@ proto! streamp (\n )\n \n fn rendezvous() {\n-    let (c, s) = streamp::init();\n+    let (s, c) = streamp::init();\n     let streams: ~[streamp::client::open<int>] = ~[c];\n \n     error!(\"%?\", streams[0]);"}, {"sha": "cfce19826d7e0c399948c1675ad87fe940f1e9c5", "filename": "src/test/run-pass/issue-2930.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2930.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -15,7 +15,7 @@ proto! stream (\n )\n \n pub fn main() {\n-    let (bc, _bp) = stream::init();\n+    let (_bp, bc) = stream::init();\n \n     stream::client::send(bc, ~\"abc\");\n }"}, {"sha": "a347fde422c6408e97aba51776a1a43586721822", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -31,7 +31,7 @@ proto! oneshot (\n pub fn main() {\n     let iotask = &uv::global_loop::get();\n \n-    let (chan, port) = oneshot::init();\n+    let (port, chan) = oneshot::init();\n     let port = Cell(port);\n     do spawn {\n         match try_recv(port.take()) {\n@@ -47,7 +47,7 @@ pub fn main() {\n \n // Make sure the right thing happens during failure.\n fn failtest() {\n-    let (c, p) = oneshot::init();\n+    let (p, c) = oneshot::init();\n \n     do task::spawn_with(c) |_c| {\n         fail!();"}, {"sha": "8d8c96c6f5140a320b2f5cf7fcea2e209f5b8f07", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -22,7 +22,7 @@ proto! oneshot (\n )\n \n pub fn main() {\n-    let mut (c, p) = oneshot::init();\n+    let mut (p, c) = oneshot::init();\n \n     assert!(!pipes::peek(&mut p));\n "}, {"sha": "8a0589f55ea4bcd7a955545ea5064f5676ee4528", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -30,7 +30,7 @@ mod pingpong {\n         pong: Packet<pong>,\n     }\n \n-    pub fn init() -> (client::ping, server::ping) {\n+    pub fn init() -> (server::ping, client::ping) {\n         let buffer = ~Buffer {\n             header: BufferHeader(),\n             data: Packets {\n@@ -112,7 +112,7 @@ mod test {\n }\n \n pub fn main() {\n-    let (client_, server_) = ::pingpong::init();\n+    let (server_, client_) = ::pingpong::init();\n     let client_ = Cell(client_);\n     let server_ = Cell(server_);\n     do task::spawn {"}, {"sha": "c993dafa489f0feddb50a91be31b79ecacd915c9", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -50,7 +50,7 @@ mod test {\n }\n \n pub fn main() {\n-    let (client_, server_) = pingpong::init();\n+    let (server_, client_) = pingpong::init();\n     let client_ = Cell(client_);\n     let server_ = Cell(server_);\n "}, {"sha": "8e28d3d12d9c95b2fdd21360026345c7b8cedbac", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -35,11 +35,11 @@ proto! stream (\n )\n \n pub fn spawn_service<T:Owned,Tb:Owned>(\n-            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n-                                  RecvPacketBuffered<T, Tb>),\n+            init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n+                                  SendPacketBuffered<T, Tb>),\n             service: ~fn(v: RecvPacketBuffered<T, Tb>))\n         -> SendPacketBuffered<T, Tb> {\n-    let (client, server) = init();\n+    let (server, client) = init();\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n@@ -83,17 +83,17 @@ pub fn main() {\n         }\n     });\n \n-    let (c1, p1) = oneshot::init();\n-    let (_c2, p2) = oneshot::init();\n+    let (p1, c1) = oneshot::init();\n+    let (p2, _c2) = oneshot::init();\n \n     let c = send(c, (p1, p2));\n \n     sleep(iotask, 100);\n \n     signal(c1);\n \n-    let (_c1, p1) = oneshot::init();\n-    let (c2, p2) = oneshot::init();\n+    let (p1, _c1) = oneshot::init();\n+    let (p2, c2) = oneshot::init();\n \n     send(c, (p1, p2));\n \n@@ -105,8 +105,8 @@ pub fn main() {\n }\n \n fn test_select2() {\n-    let (ac, ap) = stream::init();\n-    let (bc, bp) = stream::init();\n+    let (ap, ac) = stream::init();\n+    let (bp, bc) = stream::init();\n \n     stream::client::send(ac, 42);\n \n@@ -119,8 +119,8 @@ fn test_select2() {\n \n     error!(\"done with first select2\");\n \n-    let (ac, ap) = stream::init();\n-    let (bc, bp) = stream::init();\n+    let (ap, ac) = stream::init();\n+    let (bp, bc) = stream::init();\n \n     stream::client::send(bc, ~\"abc\");\n "}, {"sha": "a6a81229e2846dffb7119698d22f11bfc4df80dd", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=c354a0c7eb22f7a4bc1c7adf8e2ed34ee96428aa", "patch": "@@ -34,11 +34,11 @@ endpoint is passed to the new task.\n \n */\n pub fn spawn_service<T:Owned,Tb:Owned>(\n-            init: extern fn() -> (SendPacketBuffered<T, Tb>,\n-                                  RecvPacketBuffered<T, Tb>),\n+            init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n+                                  SendPacketBuffered<T, Tb>),\n             service: ~fn(v: RecvPacketBuffered<T, Tb>))\n         -> SendPacketBuffered<T, Tb> {\n-    let (client, server) = init();\n+    let (server, client) = init();\n \n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task."}]}