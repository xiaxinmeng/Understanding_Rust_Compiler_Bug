{"sha": "5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZTUzNjFjZGQ3YjRlNTE4ZDY3MzNmYjcyNjUyMTU2M2Q1YjRjZmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-29T01:11:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-29T01:11:24Z"}, "message": "Auto merge of #50475 - csmoe:debr, r=nikomatsakis\n\nRefactor DebruijnIndex to be 0-based\n\nFixes #49813", "tree": {"sha": "f0ea314a86a0bc91fbe86941dd1e9967dc36ca63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ea314a86a0bc91fbe86941dd1e9967dc36ca63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "html_url": "https://github.com/rust-lang/rust/commit/5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a489be94436d81d102beecfec933ca6f97fbc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9a489be94436d81d102beecfec933ca6f97fbc9", "html_url": "https://github.com/rust-lang/rust/commit/e9a489be94436d81d102beecfec933ca6f97fbc9"}, {"sha": "783fe4f8804ad80c60fdac34eb68b0553dde5de9", "url": "https://api.github.com/repos/rust-lang/rust/commits/783fe4f8804ad80c60fdac34eb68b0553dde5de9", "html_url": "https://github.com/rust-lang/rust/commit/783fe4f8804ad80c60fdac34eb68b0553dde5de9"}], "stats": {"total": 544, "additions": 360, "deletions": 184}, "files": [{"sha": "04e57883c77530b0055abbac1eb97f725150293f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -104,16 +104,16 @@ for ty::RegionKind {\n                 c.hash_stable(hcx, hasher);\n             }\n             ty::ReLateBound(db, ty::BrAnon(i)) => {\n-                db.depth.hash_stable(hcx, hasher);\n+                db.hash_stable(hcx, hasher);\n                 i.hash_stable(hcx, hasher);\n             }\n             ty::ReLateBound(db, ty::BrNamed(def_id, name)) => {\n-                db.depth.hash_stable(hcx, hasher);\n+                db.hash_stable(hcx, hasher);\n                 def_id.hash_stable(hcx, hasher);\n                 name.hash_stable(hcx, hasher);\n             }\n             ty::ReLateBound(db, ty::BrEnv) => {\n-                db.depth.hash_stable(hcx, hasher);\n+                db.hash_stable(hcx, hasher);\n             }\n             ty::ReEarlyBound(ty::EarlyBoundRegion { def_id, index, name }) => {\n                 def_id.hash_stable(hcx, hasher);\n@@ -821,10 +821,6 @@ impl_stable_hash_for!(enum ::middle::resolve_lifetime::Region {\n     Free(call_site_scope_data, decl)\n });\n \n-impl_stable_hash_for!(struct ty::DebruijnIndex {\n-    depth\n-});\n-\n impl_stable_hash_for!(enum ty::cast::CastKind {\n     CoercionCast,\n     PtrPtrCast,"}, {"sha": "13c849ec0b764d72823eae0d824859d30e30fcdd", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             tcx: self.tcx,\n             bound_region: *br,\n             found_type: None,\n-            depth: 1,\n+            current_index: ty::DebruijnIndex::INNERMOST,\n         };\n         nested_visitor.visit_ty(arg);\n         nested_visitor.found_type\n@@ -99,7 +99,7 @@ struct FindNestedTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     // The type where the anonymous lifetime appears\n     // for e.g. Vec<`&u8`> and <`&u8`>\n     found_type: Option<&'gcx hir::Ty>,\n-    depth: u32,\n+    current_index: ty::DebruijnIndex,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -110,16 +110,16 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n     fn visit_ty(&mut self, arg: &'gcx hir::Ty) {\n         match arg.node {\n             hir::TyBareFn(_) => {\n-                self.depth += 1;\n+                self.current_index.shift_in(1);\n                 intravisit::walk_ty(self, arg);\n-                self.depth -= 1;\n+                self.current_index.shift_out(1);\n                 return;\n             }\n \n             hir::TyTraitObject(ref bounds, _) => for bound in bounds {\n-                self.depth += 1;\n+                self.current_index.shift_in(1);\n                 self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n-                self.depth -= 1;\n+                self.current_index.shift_out(1);\n             },\n \n             hir::TyRptr(ref lifetime, _) => {\n@@ -135,11 +135,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     ) => {\n                         debug!(\n                             \"LateBoundAnon depth = {:?} anon_index = {:?} br_index={:?}\",\n-                            debruijn_index.depth,\n+                            debruijn_index,\n                             anon_index,\n                             br_index\n                         );\n-                        if debruijn_index.depth == self.depth && anon_index == br_index {\n+                        if debruijn_index == self.current_index && anon_index == br_index {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -170,11 +170,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     ) => {\n                         debug!(\n                             \"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n-                            debruijn_index.depth\n+                            debruijn_index\n                         );\n                         debug!(\"self.infcx.tcx.hir.local_def_id(id)={:?}\", id);\n                         debug!(\"def_id={:?}\", def_id);\n-                        if debruijn_index.depth == self.depth && id == def_id {\n+                        if debruijn_index == self.current_index && id == def_id {\n                             self.found_type = Some(arg);\n                             return; // we can stop visiting now\n                         }\n@@ -196,7 +196,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindNestedTypeVisitor<'a, 'gcx, 'tcx> {\n                     tcx: self.tcx,\n                     found_it: false,\n                     bound_region: self.bound_region,\n-                    depth: self.depth,\n+                    current_index: self.current_index,\n                 };\n                 intravisit::walk_ty(subvisitor, arg); // call walk_ty; as visit_ty is empty,\n                                                       // this will visit only outermost type\n@@ -222,7 +222,7 @@ struct TyPathVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     found_it: bool,\n     bound_region: ty::BoundRegion,\n-    depth: u32,\n+    current_index: ty::DebruijnIndex,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n@@ -235,7 +235,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n         match (self.tcx.named_region(hir_id), self.bound_region) {\n             // the lifetime of the TyPath!\n             (Some(rl::Region::LateBoundAnon(debruijn_index, anon_index)), ty::BrAnon(br_index)) => {\n-                if debruijn_index.depth == self.depth && anon_index == br_index {\n+                if debruijn_index == self.current_index && anon_index == br_index {\n                     self.found_it = true;\n                     return;\n                 }\n@@ -257,11 +257,11 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for TyPathVisitor<'a, 'gcx, 'tcx> {\n             (Some(rl::Region::LateBound(debruijn_index, id, _)), ty::BrNamed(def_id, _)) => {\n                 debug!(\n                     \"FindNestedTypeVisitor::visit_ty: LateBound depth = {:?}\",\n-                    debruijn_index.depth\n+                    debruijn_index,\n                 );\n                 debug!(\"id={:?}\", id);\n                 debug!(\"def_id={:?}\", def_id);\n-                if debruijn_index.depth == self.depth && id == def_id {\n+                if debruijn_index == self.current_index && id == def_id {\n                     self.found_it = true;\n                     return; // we can stop visiting now\n                 }"}, {"sha": "cd73da9adc8adcb7a5fa2dc8f397eaa8366d6f7f", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -417,7 +417,8 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         {\n             for (a_br, a_r) in a_map {\n                 if *a_r == r {\n-                    return infcx.tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), *a_br));\n+                    return infcx.tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n+                                                               *a_br));\n                 }\n             }\n             span_bug!(\n@@ -473,7 +474,7 @@ fn fold_regions_in<'a, 'gcx, 'tcx, T, F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             _ => true\n         });\n \n-        fldr(region, ty::DebruijnIndex::new(current_depth))\n+        fldr(region, current_depth)\n     })\n }\n \n@@ -734,7 +735,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     // trait checking, and all of the skolemized regions\n                     // appear inside predicates, which always have\n                     // binders, so this assert is satisfied.\n-                    assert!(current_depth > 1);\n+                    assert!(current_depth > ty::DebruijnIndex::INNERMOST);\n \n                     // since leak-check passed, this skolemized region\n                     // should only have incoming edges from variables\n@@ -750,7 +751,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         r, br);\n \n                     self.tcx.mk_region(ty::ReLateBound(\n-                        ty::DebruijnIndex::new(current_depth - 1), br.clone()))\n+                        current_depth.shifted_out(1),\n+                        br.clone(),\n+                    ))\n                 }\n             }\n         });"}, {"sha": "da6340b5f615f11d20fd4afb1aa280925d1b8f44", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -71,6 +71,7 @@\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(macro_at_most_once_rep)]\n+#![feature(inclusive_range_methods)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "53d51d9429fb585b9c2e76f7c989510ea775c2a8", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -98,7 +98,7 @@ impl Region {\n     }\n \n     fn late(hir_map: &Map, def: &hir::LifetimeDef) -> (hir::LifetimeName, Region) {\n-        let depth = ty::DebruijnIndex::new(1);\n+        let depth = ty::DebruijnIndex::INNERMOST;\n         let def_id = hir_map.local_def_id(def.lifetime.id);\n         let origin = LifetimeDefOrigin::from_is_in_band(def.in_band);\n         (def.lifetime.name, Region::LateBound(depth, def_id, origin))\n@@ -107,7 +107,7 @@ impl Region {\n     fn late_anon(index: &Cell<u32>) -> Region {\n         let i = index.get();\n         index.set(i + 1);\n-        let depth = ty::DebruijnIndex::new(1);\n+        let depth = ty::DebruijnIndex::INNERMOST;\n         Region::LateBoundAnon(depth, i)\n     }\n \n@@ -123,29 +123,25 @@ impl Region {\n \n     fn shifted(self, amount: u32) -> Region {\n         match self {\n-            Region::LateBound(depth, id, origin) => {\n-                Region::LateBound(depth.shifted(amount), id, origin)\n+            Region::LateBound(debruijn, id, origin) => {\n+                Region::LateBound(debruijn.shifted_in(amount), id, origin)\n             }\n-            Region::LateBoundAnon(depth, index) => {\n-                Region::LateBoundAnon(depth.shifted(amount), index)\n+            Region::LateBoundAnon(debruijn, index) => {\n+                Region::LateBoundAnon(debruijn.shifted_in(amount), index)\n             }\n             _ => self,\n         }\n     }\n \n-    fn from_depth(self, depth: u32) -> Region {\n+    fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region {\n         match self {\n             Region::LateBound(debruijn, id, origin) => Region::LateBound(\n-                ty::DebruijnIndex {\n-                    depth: debruijn.depth - (depth - 1),\n-                },\n+                debruijn.shifted_out_to_binder(binder),\n                 id,\n                 origin,\n             ),\n             Region::LateBoundAnon(debruijn, index) => Region::LateBoundAnon(\n-                ty::DebruijnIndex {\n-                    depth: debruijn.depth - (depth - 1),\n-                },\n+                debruijn.shifted_out_to_binder(binder),\n                 index,\n             ),\n             _ => self,\n@@ -1858,7 +1854,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             .map(|(i, input)| {\n                 let mut gather = GatherLifetimes {\n                     map: self.map,\n-                    binder_depth: 1,\n+                    outer_index: ty::DebruijnIndex::INNERMOST,\n                     have_bound_regions: false,\n                     lifetimes: FxHashSet(),\n                 };\n@@ -1899,7 +1895,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         struct GatherLifetimes<'a> {\n             map: &'a NamedRegionMap,\n-            binder_depth: u32,\n+            outer_index: ty::DebruijnIndex,\n             have_bound_regions: bool,\n             lifetimes: FxHashSet<Region>,\n         }\n@@ -1911,7 +1907,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             fn visit_ty(&mut self, ty: &hir::Ty) {\n                 if let hir::TyBareFn(_) = ty.node {\n-                    self.binder_depth += 1;\n+                    self.outer_index.shift_in(1);\n                 }\n                 if let hir::TyTraitObject(ref bounds, ref lifetime) = ty.node {\n                     for bound in bounds {\n@@ -1927,7 +1923,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     intravisit::walk_ty(self, ty);\n                 }\n                 if let hir::TyBareFn(_) = ty.node {\n-                    self.binder_depth -= 1;\n+                    self.outer_index.shift_out(1);\n                 }\n             }\n \n@@ -1946,22 +1942,22 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 trait_ref: &hir::PolyTraitRef,\n                 modifier: hir::TraitBoundModifier,\n             ) {\n-                self.binder_depth += 1;\n+                self.outer_index.shift_in(1);\n                 intravisit::walk_poly_trait_ref(self, trait_ref, modifier);\n-                self.binder_depth -= 1;\n+                self.outer_index.shift_out(1);\n             }\n \n             fn visit_lifetime(&mut self, lifetime_ref: &hir::Lifetime) {\n                 if let Some(&lifetime) = self.map.defs.get(&lifetime_ref.id) {\n                     match lifetime {\n                         Region::LateBound(debruijn, _, _) | Region::LateBoundAnon(debruijn, _)\n-                            if debruijn.depth < self.binder_depth =>\n+                            if debruijn < self.outer_index =>\n                         {\n                             self.have_bound_regions = true;\n                         }\n                         _ => {\n                             self.lifetimes\n-                                .insert(lifetime.from_depth(self.binder_depth));\n+                                .insert(lifetime.shifted_out_to_binder(self.outer_index));\n                         }\n                     }\n                 }"}, {"sha": "a533e1a5b9b895ebff64cd80599c6d5dbeddd74e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -181,7 +181,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             let ty_struct = TyS {\n                 sty: st,\n                 flags: flags.flags,\n-                region_depth: flags.depth,\n+                outer_exclusive_binder: flags.outer_exclusive_binder,\n             };\n \n             // Make sure we don't end up with inference\n@@ -205,7 +205,7 @@ impl<'gcx: 'tcx, 'tcx> CtxtInterners<'tcx> {\n             let ty_struct = TyS {\n                 sty: st,\n                 flags: flags.flags,\n-                region_depth: flags.depth,\n+                outer_exclusive_binder: flags.outer_exclusive_binder,\n             };\n \n             // This is safe because all the types the ty_struct can point to"}, {"sha": "ebbdc928b5dda858366847bbf4acd3787407cd41", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -16,13 +16,16 @@ use ty::{self, Ty, TypeFlags, TypeFoldable};\n pub struct FlagComputation {\n     pub flags: TypeFlags,\n \n-    // maximum depth of any bound region that we have seen thus far\n-    pub depth: u32,\n+    // see `TyS::outer_exclusive_binder` for details\n+    pub outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n impl FlagComputation {\n     fn new() -> FlagComputation {\n-        FlagComputation { flags: TypeFlags::empty(), depth: 0 }\n+        FlagComputation {\n+            flags: TypeFlags::empty(),\n+            outer_exclusive_binder: ty::DebruijnIndex::INNERMOST,\n+        }\n     }\n \n     pub fn for_sty(st: &ty::TypeVariants) -> FlagComputation {\n@@ -35,10 +38,17 @@ impl FlagComputation {\n         self.flags = self.flags | (flags & TypeFlags::NOMINAL_FLAGS);\n     }\n \n-    fn add_depth(&mut self, depth: u32) {\n-        if depth > self.depth {\n-            self.depth = depth;\n-        }\n+    /// indicates that `self` refers to something at binding level `binder`\n+    fn add_binder(&mut self, binder: ty::DebruijnIndex) {\n+        let exclusive_binder = binder.shifted_in(1);\n+        self.add_exclusive_binder(exclusive_binder);\n+    }\n+\n+    /// indicates that `self` refers to something *inside* binding\n+    /// level `binder` -- not bound by `binder`, but bound by the next\n+    /// binder internal to it\n+    fn add_exclusive_binder(&mut self, exclusive_binder: ty::DebruijnIndex) {\n+        self.outer_exclusive_binder = self.outer_exclusive_binder.max(exclusive_binder);\n     }\n \n     /// Adds the flags/depth from a set of types that appear within the current type, but within a\n@@ -49,9 +59,11 @@ impl FlagComputation {\n         // The types that contributed to `computation` occurred within\n         // a region binder, so subtract one from the region depth\n         // within when adding the depth to `self`.\n-        let depth = computation.depth;\n-        if depth > 0 {\n-            self.add_depth(depth - 1);\n+        let outer_exclusive_binder = computation.outer_exclusive_binder;\n+        if outer_exclusive_binder > ty::DebruijnIndex::INNERMOST {\n+            self.add_exclusive_binder(outer_exclusive_binder.shifted_out(1));\n+        } else {\n+            // otherwise, this binder captures nothing\n         }\n     }\n \n@@ -194,7 +206,7 @@ impl FlagComputation {\n \n     fn add_ty(&mut self, ty: Ty) {\n         self.add_flags(ty.flags);\n-        self.add_depth(ty.region_depth);\n+        self.add_exclusive_binder(ty.outer_exclusive_binder);\n     }\n \n     fn add_tys(&mut self, tys: &[Ty]) {\n@@ -215,7 +227,7 @@ impl FlagComputation {\n     fn add_region(&mut self, r: ty::Region) {\n         self.add_flags(r.type_flags());\n         if let ty::ReLateBound(debruijn, _) = *r {\n-            self.add_depth(debruijn.depth);\n+            self.add_binder(debruijn);\n         }\n     }\n "}, {"sha": "dea33ca6947fa4a18581697edadd82e798b8e21d", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 129, "deletions": 61, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -63,11 +63,22 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.super_visit_with(visitor)\n     }\n \n-    fn has_regions_escaping_depth(&self, depth: u32) -> bool {\n-        self.visit_with(&mut HasEscapingRegionsVisitor { depth: depth })\n+    /// True if `self` has any late-bound regions that are either\n+    /// bound by `binder` or bound by some binder outside of `binder`.\n+    /// If `binder` is `ty::DebruijnIndex::INNERMOST`, this indicates whether\n+    /// there are any late-bound regions that appear free.\n+    fn has_regions_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n+        self.visit_with(&mut HasEscapingRegionsVisitor { outer_index: binder })\n     }\n+\n+    /// True if this `self` has any regions that escape `binder` (and\n+    /// hence are not bound by it).\n+    fn has_regions_bound_above(&self, binder: ty::DebruijnIndex) -> bool {\n+        self.has_regions_bound_at_or_above(binder.shifted_in(1))\n+    }\n+\n     fn has_escaping_regions(&self) -> bool {\n-        self.has_regions_escaping_depth(0)\n+        self.has_regions_bound_at_or_above(ty::DebruijnIndex::INNERMOST)\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n@@ -207,7 +218,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let mut have_bound_regions = false;\n         self.fold_regions(value, &mut have_bound_regions, |r, d| {\n-            region_set.insert(self.mk_region(r.from_depth(d)));\n+            region_set.insert(self.mk_region(r.shifted_out_to_binder(d)));\n             r\n         });\n         have_bound_regions\n@@ -216,13 +227,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// Folds the escaping and free regions in `value` using `f`, and\n     /// sets `skipped_regions` to true if any late-bound region was found\n     /// and skipped.\n-    pub fn fold_regions<T,F>(self,\n+    pub fn fold_regions<T>(\n+        self,\n         value: &T,\n         skipped_regions: &mut bool,\n-        mut f: F)\n-        -> T\n-        where F : FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx>,\n-              T : TypeFoldable<'tcx>,\n+        mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n+    ) -> T\n+    where\n+        T : TypeFoldable<'tcx>,\n     {\n         value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))\n     }\n@@ -233,27 +245,47 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         where F: FnMut(ty::Region<'tcx>),\n               T: TypeFoldable<'tcx>,\n     {\n-        value.visit_with(&mut RegionVisitor { current_depth: 0, callback });\n+        value.visit_with(&mut RegionVisitor {\n+            outer_index: ty::DebruijnIndex::INNERMOST,\n+            callback\n+        });\n \n         struct RegionVisitor<F> {\n-            current_depth: u32,\n+            /// The index of a binder *just outside* the things we have\n+            /// traversed. If we encounter a bound region bound by this\n+            /// binder or one outer to it, it appears free. Example:\n+            ///\n+            /// ```\n+            ///    for<'a> fn(for<'b> fn(), T)\n+            /// ^          ^          ^     ^\n+            /// |          |          |     | here, would be shifted in 1\n+            /// |          |          | here, would be shifted in 2\n+            /// |          | here, would be INNTERMOST shifted in by 1\n+            /// | here, initially, binder would be INNERMOST\n+            /// ```\n+            ///\n+            /// You see that, initially, *any* bound value is free,\n+            /// because we've not traversed any binders. As we pass\n+            /// through a binder, we shift the `outer_index` by 1 to\n+            /// account for the new binder that encloses us.\n+            outer_index: ty::DebruijnIndex,\n             callback: F,\n         }\n \n         impl<'tcx, F> TypeVisitor<'tcx> for RegionVisitor<F>\n             where F : FnMut(ty::Region<'tcx>)\n         {\n             fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n-                self.current_depth += 1;\n+                self.outer_index.shift_in(1);\n                 t.skip_binder().visit_with(self);\n-                self.current_depth -= 1;\n+                self.outer_index.shift_out(1);\n \n                 false // keep visiting\n             }\n \n             fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n                 match *r {\n-                    ty::ReLateBound(debruijn, _) if debruijn.depth <= self.current_depth => {\n+                    ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n                         /* ignore bound regions */\n                     }\n                     _ => (self.callback)(r),\n@@ -277,21 +309,32 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n pub struct RegionFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     skipped_regions: &'a mut bool,\n-    current_depth: u32,\n-    fld_r: &'a mut (dyn FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx> + 'a),\n+\n+    /// Stores the index of a binder *just outside* the stuff we have\n+    /// visited.  So this begins as INNERMOST; when we pass through a\n+    /// binder, it is incremented (via `shift_in`).\n+    current_index: ty::DebruijnIndex,\n+\n+    /// Callback invokes for each free region. The `DebruijnIndex`\n+    /// points to the binder *just outside* the ones we have passed\n+    /// through.\n+    fold_region_fn: &'a mut (dyn FnMut(\n+        ty::Region<'tcx>,\n+        ty::DebruijnIndex,\n+    ) -> ty::Region<'tcx> + 'a),\n }\n \n impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n-    pub fn new<F>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                  skipped_regions: &'a mut bool,\n-                  fld_r: &'a mut F) -> RegionFolder<'a, 'gcx, 'tcx>\n-        where F : FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx>\n-    {\n+    pub fn new(\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        skipped_regions: &'a mut bool,\n+        fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n+    ) -> RegionFolder<'a, 'gcx, 'tcx> {\n         RegionFolder {\n             tcx,\n             skipped_regions,\n-            current_depth: 1,\n-            fld_r,\n+            current_index: ty::DebruijnIndex::INNERMOST,\n+            fold_region_fn,\n         }\n     }\n }\n@@ -300,24 +343,24 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFolder<'a, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }\n \n     fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n-        self.current_depth += 1;\n+        self.current_index.shift_in(1);\n         let t = t.super_fold_with(self);\n-        self.current_depth -= 1;\n+        self.current_index.shift_out(1);\n         t\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReLateBound(debruijn, _) if debruijn.depth < self.current_depth => {\n-                debug!(\"RegionFolder.fold_region({:?}) skipped bound region (current depth={})\",\n-                       r, self.current_depth);\n+            ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {\n+                debug!(\"RegionFolder.fold_region({:?}) skipped bound region (current index={:?})\",\n+                       r, self.current_index);\n                 *self.skipped_regions = true;\n                 r\n             }\n             _ => {\n-                debug!(\"RegionFolder.fold_region({:?}) folding free region (current_depth={})\",\n-                       r, self.current_depth);\n-                (self.fld_r)(r, self.current_depth)\n+                debug!(\"RegionFolder.fold_region({:?}) folding free region (current_index={:?})\",\n+                       r, self.current_index);\n+                (self.fold_region_fn)(r, self.current_index)\n             }\n         }\n     }\n@@ -330,7 +373,11 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFolder<'a, 'gcx, 'tcx> {\n \n struct RegionReplacer<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    current_depth: u32,\n+\n+    /// As with `RegionFolder`, represents the index of a binder *just outside*\n+    /// the ones we have visited.\n+    current_index: ty::DebruijnIndex,\n+\n     fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n     map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>\n }\n@@ -372,20 +419,22 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }).0\n     }\n \n-    /// Flattens two binding levels into one. So `for<'a> for<'b> Foo`\n+    /// Flattens multiple binding levels into one. So `for<'a> for<'b> Foo`\n     /// becomes `for<'a,'b> Foo`.\n     pub fn flatten_late_bound_regions<T>(self, bound2_value: &Binder<Binder<T>>)\n                                          -> Binder<T>\n         where T: TypeFoldable<'tcx>\n     {\n         let bound0_value = bound2_value.skip_binder().skip_binder();\n-        let value = self.fold_regions(bound0_value, &mut false,\n-                                      |region, current_depth| {\n+        let value = self.fold_regions(bound0_value, &mut false, |region, current_depth| {\n             match *region {\n-                ty::ReLateBound(debruijn, br) if debruijn.depth >= current_depth => {\n-                    // should be true if no escaping regions from bound2_value\n-                    assert!(debruijn.depth - current_depth <= 1);\n-                    self.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(current_depth), br))\n+                ty::ReLateBound(debruijn, br) => {\n+                    // We assume no regions bound *outside* of the\n+                    // binders in `bound2_value` (nmatsakis added in\n+                    // the course of this PR; seems like a reasonable\n+                    // sanity check though).\n+                    assert!(debruijn == current_depth);\n+                    self.mk_region(ty::ReLateBound(current_depth, br))\n                 }\n                 _ => {\n                     region\n@@ -446,7 +495,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let mut counter = 0;\n         Binder::bind(self.replace_late_bound_regions(sig, |_| {\n             counter += 1;\n-            self.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrAnon(counter)))\n+            self.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrAnon(counter)))\n         }).0)\n     }\n }\n@@ -458,7 +507,7 @@ impl<'a, 'gcx, 'tcx> RegionReplacer<'a, 'gcx, 'tcx> {\n     {\n         RegionReplacer {\n             tcx,\n-            current_depth: 1,\n+            current_index: ty::DebruijnIndex::INNERMOST,\n             fld_r,\n             map: BTreeMap::default()\n         }\n@@ -469,14 +518,14 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }\n \n     fn fold_binder<T: TypeFoldable<'tcx>>(&mut self, t: &ty::Binder<T>) -> ty::Binder<T> {\n-        self.current_depth += 1;\n+        self.current_index.shift_in(1);\n         let t = t.super_fold_with(self);\n-        self.current_depth -= 1;\n+        self.current_index.shift_out(1);\n         t\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.has_regions_escaping_depth(self.current_depth-1) {\n+        if !t.has_regions_bound_at_or_above(self.current_index) {\n             return t;\n         }\n \n@@ -485,14 +534,15 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReLateBound(debruijn, br) if debruijn.depth == self.current_depth => {\n+            ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {\n                 let fld_r = &mut self.fld_r;\n                 let region = *self.map.entry(br).or_insert_with(|| fld_r(br));\n                 if let ty::ReLateBound(debruijn1, br) = *region {\n                     // If the callback returns a late-bound region,\n-                    // that region should always use depth 1. Then we\n-                    // adjust it to the correct depth.\n-                    assert_eq!(debruijn1.depth, 1);\n+                    // that region should always use the INNERMOST\n+                    // debruijn index. Then we adjust it to the\n+                    // correct depth.\n+                    assert_eq!(debruijn1, ty::DebruijnIndex::INNERMOST);\n                     self.tcx.mk_region(ty::ReLateBound(debruijn, br))\n                 } else {\n                     region\n@@ -515,7 +565,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n pub fn shift_region(region: ty::RegionKind, amount: u32) -> ty::RegionKind {\n     match region {\n         ty::ReLateBound(debruijn, br) => {\n-            ty::ReLateBound(debruijn.shifted(amount), br)\n+            ty::ReLateBound(debruijn.shifted_in(amount), br)\n         }\n         _ => {\n             region\n@@ -531,7 +581,7 @@ pub fn shift_region_ref<'a, 'gcx, 'tcx>(\n {\n     match region {\n         &ty::ReLateBound(debruijn, br) if amount > 0 => {\n-            tcx.mk_region(ty::ReLateBound(debruijn.shifted(amount), br))\n+            tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), br))\n         }\n         _ => {\n             region\n@@ -575,23 +625,32 @@ pub fn shift_regions<'a, 'gcx, 'tcx, T>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n /// represent the scope to which it is attached, etc. An escaping region represents a bound region\n /// for which this processing has not yet been done.\n struct HasEscapingRegionsVisitor {\n-    depth: u32,\n+    /// Anything bound by `outer_index` or \"above\" is escaping\n+    outer_index: ty::DebruijnIndex,\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingRegionsVisitor {\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n-        self.depth += 1;\n+        self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n-        self.depth -= 1;\n+        self.outer_index.shift_out(1);\n         result\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-        t.region_depth > self.depth\n+        // If the outer-exclusive-binder is *strictly greater* than\n+        // `outer_index`, that means that `t` contains some content\n+        // bound at `outer_index` or above (because\n+        // `outer_exclusive_binder` is always 1 higher than the\n+        // content in `t`). Therefore, `t` has some escaping regions.\n+        t.outer_exclusive_binder > self.outer_index\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n-        r.escapes_depth(self.depth)\n+        // If the region is bound by `outer_index` or anything outside\n+        // of outer index, then it escapes the binders we have\n+        // visited.\n+        r.bound_at_or_above_binder(self.outer_index)\n     }\n }\n \n@@ -623,17 +682,26 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     }\n }\n \n-/// Collects all the late-bound regions it finds into a hash set.\n+/// Collects all the late-bound regions at the innermost binding level\n+/// into a hash set.\n struct LateBoundRegionsCollector {\n-    current_depth: u32,\n+    current_index: ty::DebruijnIndex,\n     regions: FxHashSet<ty::BoundRegion>,\n+\n+    /// If true, we only want regions that are known to be\n+    /// \"constrained\" when you equate this type with another type. In\n+    /// partcular, if you have e.g. `&'a u32` and `&'b u32`, equating\n+    /// them constraints `'a == 'b`.  But if you have `<&'a u32 as\n+    /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those\n+    /// types may mean that `'a` and `'b` don't appear in the results,\n+    /// so they are not considered *constrained*.\n     just_constrained: bool,\n }\n \n impl LateBoundRegionsCollector {\n     fn new(just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n-            current_depth: 1,\n+            current_index: ty::DebruijnIndex::INNERMOST,\n             regions: FxHashSet(),\n             just_constrained,\n         }\n@@ -642,9 +710,9 @@ impl LateBoundRegionsCollector {\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n     fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n-        self.current_depth += 1;\n+        self.current_index.shift_in(1);\n         let result = t.super_visit_with(self);\n-        self.current_depth -= 1;\n+        self.current_index.shift_out(1);\n         result\n     }\n \n@@ -664,7 +732,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         match *r {\n-            ty::ReLateBound(debruijn, br) if debruijn.depth == self.current_depth => {\n+            ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {\n                 self.regions.insert(br);\n             }\n             _ => { }"}, {"sha": "646c60c139c85f3d59b9f4c7864fefc4e5a5a964", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -488,8 +488,24 @@ pub struct TyS<'tcx> {\n     pub sty: TypeVariants<'tcx>,\n     pub flags: TypeFlags,\n \n-    // the maximal depth of any bound regions appearing in this type.\n-    region_depth: u32,\n+    /// This is a kind of confusing thing: it stores the smallest\n+    /// binder such that\n+    ///\n+    /// (a) the binder itself captures nothing but\n+    /// (b) all the late-bound things within the type are captured\n+    ///     by some sub-binder.\n+    ///\n+    /// So, for a type without any late-bound things, like `u32`, this\n+    /// will be INNERMOST, because that is the innermost binder that\n+    /// captures nothing. But for a type `&'D u32`, where `'D` is a\n+    /// late-bound region with debruijn index D, this would be D+1 --\n+    /// the binder itself does not capture D, but D is captured by an\n+    /// inner binder.\n+    ///\n+    /// We call this concept an \"exclusive\" binder D (because all\n+    /// debruijn indices within the type are contained within `0..D`\n+    /// (exclusive)).\n+    outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n impl<'tcx> Ord for TyS<'tcx> {\n@@ -560,7 +576,8 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::TyS<'gcx> {\n             // The other fields just provide fast access to information that is\n             // also contained in `sty`, so no need to hash them.\n             flags: _,\n-            region_depth: _,\n+\n+            outer_exclusive_binder: _,\n         } = *self;\n \n         sty.hash_stable(hcx, hasher);"}, {"sha": "f484fda2ae1529c8ff129c5a3f389f808e96ab01", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 94, "deletions": 20, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -989,11 +989,11 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n ///     for<'a> fn(for<'b> fn(&'b isize, &'a isize), &'a char)\n ///     ^          ^            |        |         |\n ///     |          |            |        |         |\n-///     |          +------------+ 1      |         |\n+///     |          +------------+ 0      |         |\n ///     |                                |         |\n-///     +--------------------------------+ 2       |\n+///     +--------------------------------+ 1       |\n ///     |                                          |\n-///     +------------------------------------------+ 1\n+///     +------------------------------------------+ 0\n ///\n /// In this type, there are two binders (the outer fn and the inner\n /// fn). We need to be able to determine, for any given region, which\n@@ -1005,9 +1005,9 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n ///\n /// Let's start with the reference type `&'b isize` that is the first\n /// argument to the inner function. This region `'b` is assigned a De\n-/// Bruijn index of 1, meaning \"the innermost binder\" (in this case, a\n+/// Bruijn index of 0, meaning \"the innermost binder\" (in this case, a\n /// fn). The region `'a` that appears in the second argument type (`&'a\n-/// isize`) would then be assigned a De Bruijn index of 2, meaning \"the\n+/// isize`) would then be assigned a De Bruijn index of 1, meaning \"the\n /// second-innermost binder\". (These indices are written on the arrays\n /// in the diagram).\n ///\n@@ -1017,15 +1017,15 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n /// the outermost fn. But this time, this reference is not nested within\n /// any other binders (i.e., it is not an argument to the inner fn, but\n /// rather the outer one). Therefore, in this case, it is assigned a\n-/// De Bruijn index of 1, because the innermost binder in that location\n+/// De Bruijn index of 0, because the innermost binder in that location\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy, PartialOrd, Ord)]\n pub struct DebruijnIndex {\n     /// We maintain the invariant that this is never 0. So 1 indicates\n-    /// the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n-    pub depth: u32,\n+    /// the innermost binder.\n+    index: u32,\n }\n \n pub type Region<'tcx> = &'tcx RegionKind;\n@@ -1259,16 +1259,70 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n }\n \n impl DebruijnIndex {\n-    pub fn new(depth: u32) -> DebruijnIndex {\n-        assert!(depth > 0);\n-        DebruijnIndex { depth: depth }\n+    pub const INNERMOST: DebruijnIndex = DebruijnIndex { index: 0 };\n+\n+    /// Returns the resulting index when this value is moved into\n+    /// `amount` number of new binders. So e.g. if you had\n+    ///\n+    ///    for<'a> fn(&'a x)\n+    ///\n+    /// and you wanted to change to\n+    ///\n+    ///    for<'a> fn(for<'b> fn(&'a x))\n+    ///\n+    /// you would need to shift the index for `'a` into 1 new binder.\n+    #[must_use]\n+    pub const fn shifted_in(self, amount: u32) -> DebruijnIndex {\n+        DebruijnIndex { index: self.index + amount }\n+    }\n+\n+    /// Update this index in place by shifting it \"in\" through\n+    /// `amount` number of binders.\n+    pub fn shift_in(&mut self, amount: u32) {\n+        *self = self.shifted_in(amount);\n+    }\n+\n+    /// Returns the resulting index when this value is moved out from\n+    /// `amount` number of new binders.\n+    #[must_use]\n+    pub const fn shifted_out(self, amount: u32) -> DebruijnIndex {\n+        DebruijnIndex { index: self.index - amount }\n+    }\n+\n+    /// Update in place by shifting out from `amount` binders.\n+    pub fn shift_out(&mut self, amount: u32) {\n+        *self = self.shifted_out(amount);\n     }\n \n-    pub fn shifted(&self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex { depth: self.depth + amount }\n+    /// Adjusts any Debruijn Indices so as to make `to_binder` the\n+    /// innermost binder. That is, if we have something bound at `to_binder`,\n+    /// it will now be bound at INNERMOST. This is an appropriate thing to do\n+    /// when moving a region out from inside binders:\n+    ///\n+    /// ```\n+    ///             for<'a>   fn(for<'b>   for<'c>   fn(&'a u32), _)\n+    /// // Binder:  D3           D2        D1            ^^\n+    /// ```\n+    ///\n+    /// Here, the region `'a` would have the debruijn index D3,\n+    /// because it is the bound 3 binders out. However, if we wanted\n+    /// to refer to that region `'a` in the second argument (the `_`),\n+    /// those two binders would not be in scope. In that case, we\n+    /// might invoke `shift_out_to_binder(D3)`. This would adjust the\n+    /// debruijn index of `'a` to D1 (the innermost binder).\n+    ///\n+    /// If we invoke `shift_out_to_binder` and the region is in fact\n+    /// bound by one of the binders we are shifting out of, that is an\n+    /// error (and should fail an assertion failure).\n+    pub fn shifted_out_to_binder(self, to_binder: DebruijnIndex) -> Self {\n+        self.shifted_out(to_binder.index - Self::INNERMOST.index)\n     }\n }\n \n+impl_stable_hash_for!(struct DebruijnIndex {\n+    index\n+});\n+\n /// Region utilities\n impl RegionKind {\n     pub fn is_late_bound(&self) -> bool {\n@@ -1278,19 +1332,39 @@ impl RegionKind {\n         }\n     }\n \n-    pub fn escapes_depth(&self, depth: u32) -> bool {\n+    pub fn bound_at_or_above_binder(&self, index: DebruijnIndex) -> bool {\n         match *self {\n-            ty::ReLateBound(debruijn, _) => debruijn.depth > depth,\n+            ty::ReLateBound(debruijn, _) => debruijn >= index,\n             _ => false,\n         }\n     }\n \n-    /// Returns the depth of `self` from the (1-based) binding level `depth`\n-    pub fn from_depth(&self, depth: u32) -> RegionKind {\n+    /// Adjusts any Debruijn Indices so as to make `to_binder` the\n+    /// innermost binder. That is, if we have something bound at `to_binder`,\n+    /// it will now be bound at INNERMOST. This is an appropriate thing to do\n+    /// when moving a region out from inside binders:\n+    ///\n+    /// ```\n+    ///             for<'a>   fn(for<'b>   for<'c>   fn(&'a u32), _)\n+    /// // Binder:  D3           D2        D1            ^^\n+    /// ```\n+    ///\n+    /// Here, the region `'a` would have the debruijn index D3,\n+    /// because it is the bound 3 binders out. However, if we wanted\n+    /// to refer to that region `'a` in the second argument (the `_`),\n+    /// those two binders would not be in scope. In that case, we\n+    /// might invoke `shift_out_to_binder(D3)`. This would adjust the\n+    /// debruijn index of `'a` to D1 (the innermost binder).\n+    ///\n+    /// If we invoke `shift_out_to_binder` and the region is in fact\n+    /// bound by one of the binders we are shifting out of, that is an\n+    /// error (and should fail an assertion failure).\n+    pub fn shifted_out_to_binder(&self, to_binder: ty::DebruijnIndex) -> RegionKind {\n         match *self {\n-            ty::ReLateBound(debruijn, r) => ty::ReLateBound(DebruijnIndex {\n-                depth: debruijn.depth - (depth - 1)\n-            }, r),\n+            ty::ReLateBound(debruijn, r) => ty::ReLateBound(\n+                debruijn.shifted_out_to_binder(to_binder),\n+                r,\n+            ),\n             r => r\n         }\n     }"}, {"sha": "9ef3308efe6d98fda0643e986d21af1db7d42be0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -555,7 +555,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                           -> Option<ty::Binder<Ty<'tcx>>>\n     {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n-        let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n+        let env_region = ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrEnv);\n         let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self);\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {"}, {"sha": "4e7df0cac128b8215249f82d1d1234abb68936b8", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -526,7 +526,7 @@ impl PrintContext {\n                     ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID), name)\n                 }\n             };\n-            tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1), br))\n+            tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST, br))\n         }).0;\n         start_or_continue(f, \"\", \"> \")?;\n "}, {"sha": "ab99d1f0f30229d7ba1d181f73c7cfed0115f9d8", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -425,7 +425,7 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             let tcx = cx.tcx;\n             let sig = substs.poly_sig(def_id, cx.tcx);\n \n-            let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n+            let env_region = ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrEnv);\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n             sig.map_bound(|sig| {"}, {"sha": "b22817a066c43b2a51e77bf555c976c559a13574", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -183,6 +183,9 @@ fn test_env_with_pool<F>(\n     });\n }\n \n+const D1: ty::DebruijnIndex = ty::DebruijnIndex::INNERMOST;\n+const D2: ty::DebruijnIndex = D1.shifted_in(1);\n+\n impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     pub fn tcx(&self) -> TyCtxt<'a, 'gcx, 'tcx> {\n         self.infcx.tcx\n@@ -332,7 +335,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_rptr_late_bound(&self, id: u32) -> Ty<'tcx> {\n-        let r = self.re_late_bound_with_debruijn(id, ty::DebruijnIndex::new(1));\n+        let r = self.re_late_bound_with_debruijn(id, D1);\n         self.infcx.tcx.mk_imm_ref(r, self.tcx().types.isize)\n     }\n \n@@ -489,7 +492,7 @@ fn subst_ty_renumber_bound() {\n \n         // t_expected = fn(&'a isize)\n         let t_expected = {\n-            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+            let t_ptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n             env.t_fn(&[t_ptr_bound2], env.t_nil())\n         };\n \n@@ -526,7 +529,7 @@ fn subst_ty_renumber_some_bounds() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n             env.t_pair(t_rptr_bound1, env.t_fn(&[t_rptr_bound2], env.t_nil()))\n         };\n \n@@ -554,10 +557,10 @@ fn escaping() {\n         let t_rptr_free1 = env.t_rptr_free(1);\n         assert!(!t_rptr_free1.has_escaping_regions());\n \n-        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1));\n+        let t_rptr_bound1 = env.t_rptr_late_bound_with_debruijn(1, D1);\n         assert!(t_rptr_bound1.has_escaping_regions());\n \n-        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+        let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n         assert!(t_rptr_bound2.has_escaping_regions());\n \n         // t_fn = fn(A)\n@@ -573,7 +576,7 @@ fn escaping() {\n #[test]\n fn subst_region_renumber_region() {\n     test_env(EMPTY_SOURCE_STR, errors(&[]), |env| {\n-        let re_bound1 = env.re_late_bound_with_debruijn(1, ty::DebruijnIndex::new(1));\n+        let re_bound1 = env.re_late_bound_with_debruijn(1, D1);\n \n         // type t_source<'a> = fn(&'a isize)\n         let t_source = {\n@@ -588,7 +591,7 @@ fn subst_region_renumber_region() {\n         //\n         // but not that the Debruijn index is different in the different cases.\n         let t_expected = {\n-            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, ty::DebruijnIndex::new(2));\n+            let t_rptr_bound2 = env.t_rptr_late_bound_with_debruijn(1, D2);\n             env.t_fn(&[t_rptr_bound2], env.t_nil())\n         };\n "}, {"sha": "67245bec7fb898f3f6906fbb86c239c62e41ec74", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -19,8 +19,8 @@ use rustc::infer::LateBoundRegionConversionTime;\n use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::error_reporting::ArgKind;\n use rustc::ty::{self, ToPolyTraitRef, Ty, GenericParamDefKind};\n+use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Substs;\n-use rustc::ty::TypeFoldable;\n use std::cmp;\n use std::iter;\n use rustc_target::spec::abi::Abi;\n@@ -465,7 +465,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Create a `PolyFnSig`. Note the oddity that late bound\n         // regions appearing free in `expected_sig` are now bound up\n         // in this binder we are creating.\n-        assert!(!expected_sig.sig.has_regions_escaping_depth(1));\n+        assert!(!expected_sig.sig.has_regions_bound_above(ty::DebruijnIndex::INNERMOST));\n         let bound_sig = ty::Binder::bind(self.tcx.mk_fn_sig(\n             expected_sig.sig.inputs().iter().cloned(),\n             expected_sig.sig.output(),"}, {"sha": "e234e2f01925f1422f22a705ff8e3b6ad49310e7", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -125,8 +125,7 @@ pub fn resolve_interior<'a, 'gcx, 'tcx>(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n     let mut counter = 0;\n     let type_list = fcx.tcx.fold_regions(&type_list, &mut false, |_, current_depth| {\n         counter += 1;\n-        fcx.tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(current_depth),\n-                                        ty::BrAnon(counter)))\n+        fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n     });\n \n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));"}, {"sha": "215a3163a9c0a9b167de09372e45a49c06aa3c75", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -119,7 +119,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"pref_align_of\" | \"min_align_of\" => (1, Vec::new(), tcx.types.usize),\n             \"size_of_val\" |  \"min_align_of_val\" => {\n                 (1, vec![\n-                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1),\n+                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n                                                                   ty::BrAnon(0))),\n                                     param(0))\n                  ], tcx.types.usize)\n@@ -298,7 +298,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"unlikely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n \n             \"discriminant_value\" => (1, vec![\n-                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::new(1),\n+                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n                                                                   ty::BrAnon(0))),\n                                    param(0))], tcx.types.u64),\n "}, {"sha": "a982724f957e9b88cc5881d483b184224515c324", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -689,7 +689,7 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                     -> Option<Span> {\n     struct LateBoundRegionsDetector<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        binder_depth: u32,\n+        outer_index: ty::DebruijnIndex,\n         has_late_bound_regions: Option<Span>,\n     }\n \n@@ -702,9 +702,9 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if self.has_late_bound_regions.is_some() { return }\n             match ty.node {\n                 hir::TyBareFn(..) => {\n-                    self.binder_depth += 1;\n+                    self.outer_index.shift_in(1);\n                     intravisit::walk_ty(self, ty);\n-                    self.binder_depth -= 1;\n+                    self.outer_index.shift_out(1);\n                 }\n                 _ => intravisit::walk_ty(self, ty)\n             }\n@@ -714,9 +714,9 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                 tr: &'tcx hir::PolyTraitRef,\n                                 m: hir::TraitBoundModifier) {\n             if self.has_late_bound_regions.is_some() { return }\n-            self.binder_depth += 1;\n+            self.outer_index.shift_in(1);\n             intravisit::walk_poly_trait_ref(self, tr, m);\n-            self.binder_depth -= 1;\n+            self.outer_index.shift_out(1);\n         }\n \n         fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {\n@@ -727,8 +727,13 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 Some(rl::Region::Static) | Some(rl::Region::EarlyBound(..)) => {}\n                 Some(rl::Region::LateBound(debruijn, _, _)) |\n                 Some(rl::Region::LateBoundAnon(debruijn, _))\n-                    if debruijn.depth < self.binder_depth => {}\n-                _ => self.has_late_bound_regions = Some(lt.span),\n+                    if debruijn < self.outer_index => {}\n+                Some(rl::Region::LateBound(..)) |\n+                Some(rl::Region::LateBoundAnon(..)) |\n+                Some(rl::Region::Free(..)) |\n+                None => {\n+                    self.has_late_bound_regions = Some(lt.span);\n+                }\n             }\n         }\n     }\n@@ -738,7 +743,9 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         decl: &'tcx hir::FnDecl)\n                                         -> Option<Span> {\n         let mut visitor = LateBoundRegionsDetector {\n-            tcx, binder_depth: 1, has_late_bound_regions: None\n+            tcx,\n+            outer_index: ty::DebruijnIndex::INNERMOST,\n+            has_late_bound_regions: None,\n         };\n         for lifetime in generics.lifetimes() {\n             let hir_id = tcx.hir.node_to_hir_id(lifetime.lifetime.id);"}, {"sha": "a0ad8ee43809504182577774403ef7b09b505c02", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -18,7 +18,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0/1:9 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) i32))\n+               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) i32))\n            ]\n \n note: No external requirements"}, {"sha": "6aeb8d4fcd5c3123d9615d41c000336b460917ab", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0/1:9 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32))\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32))\n            ]\n \n note: No external requirements"}, {"sha": "26ad522f6f4d66dcb5cac58d976d9dca6b2d90dd", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -24,7 +24,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0/1:20 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n \n note: No external requirements"}, {"sha": "537e951ddf1c398c7327240ccb3079e41a702919", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r"}, {"sha": "93ae534b25c95a790719a7a8f59e3deb39b5cc20", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -23,7 +23,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0/1:12 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n            ]\n \n note: No external requirements\n@@ -51,7 +51,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0/1:13 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r"}, {"sha": "4081ec65f8030000fc02d279283aea58b472797f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r"}, {"sha": "7a745bb09642f0c4e1d770e53064138f3e4d1028", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#0r"}, {"sha": "4e2680585e9d444984e57e7a9ffb59d3aed19e4f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r"}, {"sha": "2cc9a11dbc3cf11175ef1aa85fc25647bfea903f", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -16,7 +16,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0/1:16 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r"}, {"sha": "e53ece696c9f09488325c63efb718d9c38e66494", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -24,7 +24,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n \n note: No external requirements"}, {"sha": "45f308b2323cd79738d79ae7368b8ff1c3e27e34", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -24,7 +24,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n \n note: No external requirements"}, {"sha": "9e6fd28565e691ce85e23ccb384686c53f560235", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -18,7 +18,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32\n            ]\n \n note: No external requirements"}, {"sha": "70bda0d7a186f8effd2dce92fa4e901997786ce1", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae5361cdd7b4e518d6733fb726521563d5b4cfa/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=5ae5361cdd7b4e518d6733fb726521563d5b4cfa", "patch": "@@ -25,7 +25,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0/1:14 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n@@ -55,7 +55,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { depth: 1 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r"}]}