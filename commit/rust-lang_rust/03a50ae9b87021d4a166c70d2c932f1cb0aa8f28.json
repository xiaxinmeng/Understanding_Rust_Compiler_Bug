{"sha": "03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYTUwYWU5Yjg3MDIxZDRhMTY2YzcwZDJjOTMyZjFjYjBhYThmMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T07:38:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-28T07:38:49Z"}, "message": "Auto merge of #65188 - matthewjasper:stabilize-const-constructor, r=Centril\n\nStabilize `const_constructor`\n\n# Stabilization proposal\n\nI propose that we stabilize `#![feature(const_constructor)]`.\n\nTracking issue: https://github.com/rust-lang/rust/issues/61456\nVersion target: 1.40 (2019-11-05 => beta, 2019-12-19 => stable).\n\n## What is stabilized\n\n### User guide\n\nTuple struct and tuple variant constructors are now considered to be constant functions. As such a call expression where the callee has a tuple struct or variant constructor \"function item\" type can be called:\n\n```rust\nconst fn make_options() {\n    // These already work because they are special cased:\n    Some(0);\n    (Option::Some)(1);\n    // These also work now:\n    let f = Option::Some;\n    f(2);\n    {Option::Some}(3);\n    <Option<_>>::Some(5);\n}\n```\n\n### Motivation\n\nConsistency with other `const fn`. Consistency between syntactic path forms.\n\nThis should also ensure that constructors implement `const Fn` traits and can be coerced to `const fn` function pointers, if they are introduced.\n\n## Tests\n\n* [ui/consts/const_constructor/const-construct-call.rs](https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src/test/ui/consts/const_constructor/const-construct-call.rs) - Tests various syntactic forms, use in both `const fn` and `const` items, and constructors in both the current and extern crates.\n* [ui/consts/const_constructor/const_constructor_qpath.rs](https://github.com/rust-lang/rust/blob/1850dfcdabf8258a1f023f26c2c59e96b869dd95/src/test/ui/consts/const_constructor/const_constructor_qpath.rs) - Tests that type qualified paths to enum variants are also considered to be `const fn`.(#64247)\n\nr? @oli-obk\n\nCloses #61456\nCloses  #64247", "tree": {"sha": "dff9cfee9afb9b5dc1d48c03411ad1286fe29be8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff9cfee9afb9b5dc1d48c03411ad1286fe29be8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "html_url": "https://github.com/rust-lang/rust/commit/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9285d401a6070094747465962bc49969b93e14c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9285d401a6070094747465962bc49969b93e14c5", "html_url": "https://github.com/rust-lang/rust/commit/9285d401a6070094747465962bc49969b93e14c5"}, {"sha": "170718c93f3defba2edee69bae7abd64d1672355", "url": "https://api.github.com/repos/rust-lang/rust/commits/170718c93f3defba2edee69bae7abd64d1672355", "html_url": "https://github.com/rust-lang/rust/commit/170718c93f3defba2edee69bae7abd64d1672355"}], "stats": {"total": 154, "additions": 45, "deletions": 109}, "files": [{"sha": "676916f530a4d9cbe0ae7c450cd442059ed569ea", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "patch": "@@ -2,7 +2,7 @@ use crate::ty::query::Providers;\n use crate::hir::def_id::DefId;\n use crate::hir;\n use crate::ty::TyCtxt;\n-use syntax_pos::symbol::{sym, Symbol};\n+use syntax_pos::symbol::Symbol;\n use crate::hir::map::blocks::FnLikeNode;\n use syntax::attr;\n \n@@ -13,14 +13,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.is_const_fn_raw(def_id) && match self.is_unstable_const_fn(def_id) {\n             Some(feature_name) => {\n                 // has a `rustc_const_unstable` attribute, check whether the user enabled the\n-                // corresponding feature gate, const_constructor is not a lib feature, so has\n-                // to be checked separately.\n+                // corresponding feature gate.\n                 self.features()\n                     .declared_lib_features\n                     .iter()\n                     .any(|&(sym, _)| sym == feature_name)\n-                    || (feature_name == sym::const_constructor\n-                        && self.features().const_constructor)\n             },\n             // functions without const stability are either stable user written\n             // const fn or the user is using feature gates and we thus don't\n@@ -31,9 +28,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n     pub fn is_unstable_const_fn(self, def_id: DefId) -> Option<Symbol> {\n-        if self.is_constructor(def_id) {\n-            Some(sym::const_constructor)\n-        } else if self.is_const_fn_raw(def_id) {\n+        if self.is_const_fn_raw(def_id) {\n             self.lookup_stability(def_id)?.const_stability\n         } else {\n             None"}, {"sha": "d309a17298baa3471f42d7d954185149be348b22", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "patch": "@@ -249,6 +249,8 @@ declare_features! (\n     (accepted, macros_in_extern, \"1.40.0\", Some(49476), None),\n     /// Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n     (accepted, non_exhaustive, \"1.40.0\", Some(44109), None),\n+    /// Allows calling constructor functions in `const fn`.\n+    (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "3754a3d6fe97875ed3f429133339ff0fdb43c13b", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "patch": "@@ -488,9 +488,6 @@ declare_features! (\n     /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n-    /// Allows calling constructor functions in `const fn`.\n-    (active, const_constructor, \"1.37.0\", Some(61456), None),\n-\n     /// Allows `if/while p && let q = r && ...` chains.\n     (active, let_chains, \"1.37.0\", Some(53667), None),\n "}, {"sha": "d883d3fa6e40ee51b3526fcb843e6e7fc0e6c124", "filename": "src/test/ui/consts/const_constructor/const-construct-call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs?ref=03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "patch": "@@ -6,8 +6,6 @@\n \n #![cfg_attr(const_fn, feature(const_fn))]\n \n-#![feature(const_constructor)]\n-\n // Ctor(..) is transformed to Ctor { 0: ... } in HAIR lowering, so directly\n // calling constructors doesn't require them to be const.\n "}, {"sha": "18aa3d8e816b4721319a91e8127065f6006e126f", "filename": "src/test/ui/consts/const_constructor/const_constructor_qpath.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst_constructor_qpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst_constructor_qpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst_constructor_qpath.rs?ref=03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "patch": "@@ -0,0 +1,40 @@\n+// revisions: min_const_fn const_fn\n+// run-pass\n+\n+#![cfg_attr(const_fn, feature(const_fn))]\n+\n+trait ConstDefault {\n+    const DEFAULT: Self;\n+}\n+\n+#[derive(PartialEq)]\n+enum E {\n+    V(i32),\n+    W(usize),\n+}\n+\n+impl ConstDefault for E {\n+    const DEFAULT: Self = Self::V(23);\n+}\n+\n+impl ConstDefault for Option<i32> {\n+    const DEFAULT: Self = Self::Some(23);\n+}\n+\n+impl E {\n+    const NON_DEFAULT: Self = Self::W(12);\n+    const fn local_fn() -> Self {\n+        Self::V(23)\n+    }\n+}\n+\n+const fn explicit_qpath() -> E {\n+    let _x = <Option<usize>>::Some(23);\n+    <E>::W(12)\n+}\n+\n+fn main() {\n+    assert!(E::DEFAULT == E::local_fn());\n+    assert!(Option::DEFAULT == Some(23));\n+    assert!(E::NON_DEFAULT == explicit_qpath());\n+}"}, {"sha": "fa4f83ed01e157ff62ee43b000cdc409cd1108f6", "filename": "src/test/ui/consts/const_constructor/feature-gate-const_constructor.const_fn.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.const_fn.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,34 +0,0 @@\n-error: `std::prelude::v1::Some` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:9:37\n-   |\n-LL | const EXTERNAL_CONST: Option<i32> = {Some}(1);\n-   |                                     ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: `E::V` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:12:24\n-   |\n-LL | const LOCAL_CONST: E = {E::V}(1);\n-   |                        ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: `std::prelude::v1::Some` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:17:13\n-   |\n-LL |     let _ = {Some}(1);\n-   |             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: `E::V` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:23:13\n-   |\n-LL |     let _ = {E::V}(1);\n-   |             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "fa4f83ed01e157ff62ee43b000cdc409cd1108f6", "filename": "src/test/ui/consts/const_constructor/feature-gate-const_constructor.min_const_fn.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.min_const_fn.stderr?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,34 +0,0 @@\n-error: `std::prelude::v1::Some` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:9:37\n-   |\n-LL | const EXTERNAL_CONST: Option<i32> = {Some}(1);\n-   |                                     ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: `E::V` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:12:24\n-   |\n-LL | const LOCAL_CONST: E = {E::V}(1);\n-   |                        ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: `std::prelude::v1::Some` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:17:13\n-   |\n-LL |     let _ = {Some}(1);\n-   |             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: `E::V` is not yet stable as a const fn\n-  --> $DIR/feature-gate-const_constructor.rs:23:13\n-   |\n-LL |     let _ = {E::V}(1);\n-   |             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "b37fd2fd243d1318942e1fb5a2eb1f0af8f1c743", "filename": "src/test/ui/consts/const_constructor/feature-gate-const_constructor.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9285d401a6070094747465962bc49969b93e14c5/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.rs?ref=9285d401a6070094747465962bc49969b93e14c5", "patch": "@@ -1,28 +0,0 @@\n-// revisions: min_const_fn const_fn\n-\n-#![cfg_attr(const_fn, feature(const_fn))]\n-\n-enum E {\n-    V(i32),\n-}\n-\n-const EXTERNAL_CONST: Option<i32> = {Some}(1);\n-//[min_const_fn]~^ ERROR is not yet stable as a const fn\n-//[const_fn]~^^ ERROR is not yet stable as a const fn\n-const LOCAL_CONST: E = {E::V}(1);\n-//[min_const_fn]~^ ERROR is not yet stable as a const fn\n-//[const_fn]~^^ ERROR is not yet stable as a const fn\n-\n-const fn external_fn() {\n-    let _ = {Some}(1);\n-    //[min_const_fn]~^ ERROR is not yet stable as a const fn\n-    //[const_fn]~^^ ERROR is not yet stable as a const fn\n-}\n-\n-const fn local_fn() {\n-    let _ = {E::V}(1);\n-    //[min_const_fn]~^ ERROR is not yet stable as a const fn\n-    //[const_fn]~^^ ERROR is not yet stable as a const fn\n-}\n-\n-fn main() {}"}]}