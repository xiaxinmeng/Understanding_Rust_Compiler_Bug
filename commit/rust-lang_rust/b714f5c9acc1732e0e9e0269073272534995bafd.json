{"sha": "b714f5c9acc1732e0e9e0269073272534995bafd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MTRmNWM5YWNjMTczMmUwZTllMDI2OTA3MzI3MjUzNDk5NWJhZmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-31T10:03:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-31T10:03:24Z"}, "message": "Rollup merge of #72715 - estebank:trailing-comma-where, r=petrochenkov\n\nAccount for trailing comma when suggesting `where` clauses\n\nFix #72693.", "tree": {"sha": "3fc83c414998372560a41c2d8b6a99f97c1ec9d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fc83c414998372560a41c2d8b6a99f97c1ec9d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b714f5c9acc1732e0e9e0269073272534995bafd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe04DsCRBK7hj4Ov3rIwAAdHIIABOx1e/U2hI823cyUzUKEkXN\nSyuZVB1xr9WSZSEYZBrI+KqLDHvV3KSoLKmqx0hA4YUXLB0D7CqLzKNkyB0jp+lP\nPp5MJCbWe/bSys/JpRCk0Tb/fzIMI8/bSvybgr70GlT09QnOMgen6/29QE9XcCA/\nBnYXVUXYN1QwcR0rR/I8F1XAIzPFy5F5p7hHXWNsZSFE7K4pIHR0xdA3BTDyKnbx\nYq871Sf1qHggWj5N7i7AK0t5VBVAal1oCIvyEvaL6p3+Ci3vLnlW0L3QwEj4D04I\nGLkhkBtBp0N4PwTJHOAPt98Br7zfc8iPXx0LXjvjv3s3OGoQAfguR/jcDnuTE6E=\n=/KWi\n-----END PGP SIGNATURE-----\n", "payload": "tree 3fc83c414998372560a41c2d8b6a99f97c1ec9d2\nparent 3bbb475f0048b3ef009e31194c56d5265da65447\nparent 0d18136b776cd7cda2c4932f447e6484377f42b2\nauthor Ralf Jung <post@ralfj.de> 1590919404 +0200\ncommitter GitHub <noreply@github.com> 1590919404 +0200\n\nRollup merge of #72715 - estebank:trailing-comma-where, r=petrochenkov\n\nAccount for trailing comma when suggesting `where` clauses\n\nFix #72693.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b714f5c9acc1732e0e9e0269073272534995bafd", "html_url": "https://github.com/rust-lang/rust/commit/b714f5c9acc1732e0e9e0269073272534995bafd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b714f5c9acc1732e0e9e0269073272534995bafd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bbb475f0048b3ef009e31194c56d5265da65447", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbb475f0048b3ef009e31194c56d5265da65447", "html_url": "https://github.com/rust-lang/rust/commit/3bbb475f0048b3ef009e31194c56d5265da65447"}, {"sha": "0d18136b776cd7cda2c4932f447e6484377f42b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d18136b776cd7cda2c4932f447e6484377f42b2", "html_url": "https://github.com/rust-lang/rust/commit/0d18136b776cd7cda2c4932f447e6484377f42b2"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "1e305c6d32d6ad2a0fd5310890c0f5208707120f", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=b714f5c9acc1732e0e9e0269073272534995bafd", "patch": "@@ -524,6 +524,13 @@ impl WhereClause<'_> {\n     pub fn span_for_predicates_or_empty_place(&self) -> Span {\n         self.span\n     }\n+\n+    /// `Span` where further predicates would be suggested, accounting for trailing commas, like\n+    ///  in `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n+    pub fn tail_span_for_suggestion(&self) -> Span {\n+        let end = self.span_for_predicates_or_empty_place().shrink_to_hi();\n+        self.predicates.last().map(|p| p.span()).unwrap_or(end).shrink_to_hi().to(end)\n+    }\n }\n \n /// A single predicate in a where-clause."}, {"sha": "2e9aa724ac5af744fde06c944550ff3f760777fb", "filename": "src/librustc_middle/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fdiagnostics.rs?ref=b714f5c9acc1732e0e9e0269073272534995bafd", "patch": "@@ -7,7 +7,6 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n-use rustc_span::{BytePos, Span};\n \n impl<'tcx> TyS<'tcx> {\n     /// Similar to `TyS::is_primitive`, but also considers inferred numeric values to be primitive.\n@@ -221,24 +220,11 @@ pub fn suggest_constraining_type_param(\n             }\n         }\n \n-        let where_clause_span = generics.where_clause.span_for_predicates_or_empty_place();\n-        // Account for `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n-        let mut trailing_comma = false;\n-        if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(where_clause_span) {\n-            trailing_comma = snippet.ends_with(',');\n-        }\n-        let where_clause_span = if trailing_comma {\n-            let hi = where_clause_span.hi();\n-            Span::new(hi - BytePos(1), hi, where_clause_span.ctxt())\n-        } else {\n-            where_clause_span.shrink_to_hi()\n-        };\n-\n         match &param_spans[..] {\n             &[&param_span] => suggest_restrict(param_span.shrink_to_hi()),\n             _ => {\n                 err.span_suggestion_verbose(\n-                    where_clause_span,\n+                    generics.where_clause.tail_span_for_suggestion(),\n                     &msg_restrict_type_further,\n                     format!(\", {}: {}\", param_name, constraint),\n                     Applicability::MachineApplicable,"}, {"sha": "cfbea9ee0f19607a7c430ed41938aaa44ce141f7", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b714f5c9acc1732e0e9e0269073272534995bafd", "patch": "@@ -170,7 +170,7 @@ pub trait InferCtxtExt<'tcx> {\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n     (\n-        generics.where_clause.span_for_predicates_or_empty_place().shrink_to_hi(),\n+        generics.where_clause.tail_span_for_suggestion(),\n         format!(\n             \"{} {}\",\n             if !generics.where_clause.predicates.is_empty() { \",\" } else { \" where\" },"}, {"sha": "562dec9f080de55e89350c49b20ab13e27bb2443", "filename": "src/test/ui/bound-suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Ftest%2Fui%2Fbound-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b714f5c9acc1732e0e9e0269073272534995bafd/src%2Ftest%2Fui%2Fbound-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.rs?ref=b714f5c9acc1732e0e9e0269073272534995bafd", "patch": "@@ -19,7 +19,7 @@ fn test_one_bound<T: Sized>(t: T) {\n }\n \n #[allow(dead_code)]\n-fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug {\n+fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, {\n     println!(\"{:?} {:?}\", x, y);\n     //~^ ERROR doesn't implement\n }"}]}