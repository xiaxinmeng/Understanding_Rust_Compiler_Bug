{"sha": "c55325e0f7252d67bda60695497751b63f51931d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTMyNWUwZjcyNTJkNjdiZGE2MDY5NTQ5Nzc1MWI2M2Y1MTkzMWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-03-16T20:52:12Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-04-09T20:30:34Z"}, "message": "Build an RLS package as part of the dist target", "tree": {"sha": "77c9d1c0bcab1b809f5167baf1739cc155247493", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77c9d1c0bcab1b809f5167baf1739cc155247493"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55325e0f7252d67bda60695497751b63f51931d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55325e0f7252d67bda60695497751b63f51931d", "html_url": "https://github.com/rust-lang/rust/commit/c55325e0f7252d67bda60695497751b63f51931d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55325e0f7252d67bda60695497751b63f51931d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7da12c8541c1977757f8f0e2368d3e5ef817de84", "url": "https://api.github.com/repos/rust-lang/rust/commits/7da12c8541c1977757f8f0e2368d3e5ef817de84", "html_url": "https://github.com/rust-lang/rust/commit/7da12c8541c1977757f8f0e2368d3e5ef817de84"}], "stats": {"total": 119, "additions": 118, "deletions": 1}, "files": [{"sha": "d2c9e248e03a881d3f2baa2e31041a0f0b2c97c1", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c55325e0f7252d67bda60695497751b63f51931d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55325e0f7252d67bda60695497751b63f51931d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c55325e0f7252d67bda60695497751b63f51931d", "patch": "@@ -393,6 +393,7 @@ pub fn rust_src(build: &Build) {\n         \"man\",\n         \"src\",\n         \"cargo\",\n+        \"rls\",\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -593,6 +594,43 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     build.run(&mut cmd);\n }\n \n+pub fn rls(build: &Build, stage: u32, target: &str) {\n+    println!(\"Dist RLS stage{} ({})\", stage, target);\n+    let compiler = Compiler::new(stage, &build.config.build);\n+\n+    let src = build.src.join(\"rls\");\n+    let release_num = build.rls_release_num();\n+    let name = format!(\"rls-{}\", build.package_vers(&release_num));\n+\n+    let tmp = tmpdir(build);\n+    let image = tmp.join(\"rls-image\");\n+    drop(fs::remove_dir_all(&image));\n+    t!(fs::create_dir_all(&image));\n+\n+    // Prepare the image directory\n+    let rls = build.cargo_out(&compiler, Mode::Tool, target)\n+                     .join(exe(\"rls\", target));\n+    install(&rls, &image.join(\"bin\"), 0o755);\n+    let doc = image.join(\"share/doc/rls\");\n+    install(&src.join(\"README.md\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n+\n+    // Generate the installer tarball\n+    let mut cmd = Command::new(\"sh\");\n+    cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n+       .arg(\"--product-name=Rust\")\n+       .arg(\"--rel-manifest-dir=rustlib\")\n+       .arg(\"--success-message=RLS-ready-to-serve.\")\n+       .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n+       .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n+       .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--package-name={}-{}\", name, target))\n+       .arg(\"--component-name=rls\")\n+       .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n+    build.run(&mut cmd);\n+}\n+\n /// Creates a combined installer for the specified target in the provided stage.\n pub fn extended(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist extended stage{} ({})\", stage, target);\n@@ -604,6 +642,11 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     let cargo_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                             pkgname(build, \"cargo\"),\n                                             target));\n+    let rls_installer = dist.join(format!(\"{}.tar.gz\",\n+                                          pkgname(build, \"rls\")));\n+    let analysis_installer = dist.join(format!(\"{}-{}.tar.gz\",\n+                                               pkgname(build, \"rust-analysis\"),\n+                                               target));\n     let docs_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                            pkgname(build, \"rust-docs\"),\n                                            target));\n@@ -631,9 +674,11 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n     // the std files during uninstall. To do this ensure that rustc comes\n     // before rust-std in the list below.\n-    let mut input_tarballs = format!(\"{},{},{},{}\",\n+    let mut input_tarballs = format!(\"{},{},{},{},{},{}\",\n                                      sanitize_sh(&rustc_installer),\n                                      sanitize_sh(&cargo_installer),\n+                                     sanitize_sh(&rls_installer),\n+                                     sanitize_sh(&analysis_installer),\n                                      sanitize_sh(&docs_installer),\n                                      sanitize_sh(&std_installer));\n     if target.contains(\"pc-windows-gnu\") {\n@@ -675,20 +720,28 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         let _ = fs::remove_dir_all(&pkg);\n         t!(fs::create_dir_all(pkg.join(\"rustc\")));\n         t!(fs::create_dir_all(pkg.join(\"cargo\")));\n+        t!(fs::create_dir_all(pkg.join(\"rls\")));\n+        t!(fs::create_dir_all(pkg.join(\"rust-analysis\")));\n         t!(fs::create_dir_all(pkg.join(\"rust-docs\")));\n         t!(fs::create_dir_all(pkg.join(\"rust-std\")));\n \n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target)),\n              &pkg.join(\"rustc\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"cargo\"), target)),\n              &pkg.join(\"cargo\"));\n+        cp_r(&work.join(pkgname(build, \"rls\")),\n+             &pkg.join(\"rls\"));\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-analysis\"), target)),\n+             &pkg.join(\"rust-analysis\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-docs\"), target)),\n              &pkg.join(\"rust-docs\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-std\"), target)),\n              &pkg.join(\"rust-std\"));\n \n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rustc\"), 0o755);\n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"cargo\"), 0o755);\n+        install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rls\"), 0o755);\n+        install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rust-analysis\"), 0o755);\n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rust-docs\"), 0o755);\n         install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"rust-std\"), 0o755);\n \n@@ -702,6 +755,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         };\n         pkgbuild(\"rustc\");\n         pkgbuild(\"cargo\");\n+        pkgbuild(\"rls\");\n+        pkgbuild(\"rust-analysis\");\n         pkgbuild(\"rust-docs\");\n         pkgbuild(\"rust-std\");\n \n@@ -727,6 +782,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         let _ = fs::remove_dir_all(&exe);\n         t!(fs::create_dir_all(exe.join(\"rustc\")));\n         t!(fs::create_dir_all(exe.join(\"cargo\")));\n+        t!(fs::create_dir_all(exe.join(\"rls\")));\n+        t!(fs::create_dir_all(exe.join(\"rust-analysis\")));\n         t!(fs::create_dir_all(exe.join(\"rust-docs\")));\n         t!(fs::create_dir_all(exe.join(\"rust-std\")));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rustc\"), target))\n@@ -735,6 +792,12 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"cargo\"), target))\n                   .join(\"cargo\"),\n              &exe.join(\"cargo\"));\n+        cp_r(&work.join(pkgname(build, \"rls\"))\n+                  .join(\"rls\"),\n+             &exe.join(\"rls\"));\n+        cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-analysis\"), target))\n+                  .join(\"rust-analysis\"),\n+             &exe.join(\"rust-analysis\"));\n         cp_r(&work.join(&format!(\"{}-{}\", pkgname(build, \"rust-docs\"), target))\n                   .join(\"rust-docs\"),\n              &exe.join(\"rust-docs\"));\n@@ -744,6 +807,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n \n         t!(fs::remove_file(exe.join(\"rustc/manifest.in\")));\n         t!(fs::remove_file(exe.join(\"cargo/manifest.in\")));\n+        t!(fs::remove_file(exe.join(\"rls/manifest.in\")));\n+        t!(fs::remove_file(exe.join(\"rust-analysis/manifest.in\")));\n         t!(fs::remove_file(exe.join(\"rust-docs/manifest.in\")));\n         t!(fs::remove_file(exe.join(\"rust-std/manifest.in\")));\n \n@@ -800,6 +865,26 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n                         .arg(\"-var\").arg(\"var.DocsDir\")\n                         .arg(\"-out\").arg(exe.join(\"DocsGroup.wxs\"))\n                         .arg(\"-t\").arg(etc.join(\"msi/squash-components.xsl\")));\n+        build.run(Command::new(&heat)\n+                        .current_dir(&exe)\n+                        .arg(\"dir\")\n+                        .arg(\"rls\")\n+                        .args(&heat_flags)\n+                        .arg(\"-cg\").arg(\"RlsGroup\")\n+                        .arg(\"-dr\").arg(\"Rls\")\n+                        .arg(\"-var\").arg(\"var.RlsDir\")\n+                        .arg(\"-out\").arg(exe.join(\"RlsGroup.wxs\"))\n+                        .arg(\"-t\").arg(etc.join(\"msi/squash-components.xsl\")));\n+        build.run(Command::new(&heat)\n+                        .current_dir(&exe)\n+                        .arg(\"dir\")\n+                        .arg(\"rust-analysis\")\n+                        .args(&heat_flags)\n+                        .arg(\"-cg\").arg(\"AnalysisGroup\")\n+                        .arg(\"-dr\").arg(\"Analysis\")\n+                        .arg(\"-var\").arg(\"var.AnalysisDir\")\n+                        .arg(\"-out\").arg(exe.join(\"AnalysisGroup.wxs\"))\n+                        .arg(\"-t\").arg(etc.join(\"msi/squash-components.xsl\")));\n         build.run(Command::new(&heat)\n                         .current_dir(&exe)\n                         .arg(\"dir\")\n@@ -840,6 +925,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n                .arg(\"-nologo\")\n                .arg(\"-dRustcDir=rustc\")\n                .arg(\"-dDocsDir=rust-docs\")\n+               .arg(\"-dRlsDir=rls\")\n+               .arg(\"-dAnalysisDir=rust-analysis\")\n                .arg(\"-dCargoDir=cargo\")\n                .arg(\"-dStdDir=rust-std\")\n                .arg(\"-arch\").arg(&arch)\n@@ -857,6 +944,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n         candle(&etc.join(\"msi/rustwelcomedlg.wxs\"));\n         candle(\"RustcGroup.wxs\".as_ref());\n         candle(\"DocsGroup.wxs\".as_ref());\n+        candle(\"RlsGroup.wxs\".as_ref());\n+        candle(\"AnalysisGroup.wxs\".as_ref());\n         candle(\"CargoGroup.wxs\".as_ref());\n         candle(\"StdGroup.wxs\".as_ref());\n \n@@ -879,6 +968,8 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n            .arg(\"rustwelcomedlg.wixobj\")\n            .arg(\"RustcGroup.wixobj\")\n            .arg(\"DocsGroup.wixobj\")\n+           .arg(\"RlsGroup.wixobj\")\n+           .arg(\"AnalysisGroup.wixobj\")\n            .arg(\"CargoGroup.wixobj\")\n            .arg(\"StdGroup.wixobj\")\n            .current_dir(&exe);"}, {"sha": "81ab2b0d1cef2b75d9989fa04ceff8fc1202741b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c55325e0f7252d67bda60695497751b63f51931d/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55325e0f7252d67bda60695497751b63f51931d/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c55325e0f7252d67bda60695497751b63f51931d", "patch": "@@ -1044,6 +1044,21 @@ impl Build {\n         panic!(\"failed to find version in cargo's Cargo.toml\")\n     }\n \n+    /// Returns the `a.b.c` version that the RLS is at.\n+    fn rls_release_num(&self) -> String {\n+        let mut toml = String::new();\n+        t!(t!(File::open(self.src.join(\"rls/Cargo.toml\"))).read_to_string(&mut toml));\n+        for line in toml.lines() {\n+            let prefix = \"version = \\\"\";\n+            let suffix = \"\\\"\";\n+            if line.starts_with(prefix) && line.ends_with(suffix) {\n+                return line[prefix.len()..line.len() - suffix.len()].to_string()\n+            }\n+        }\n+\n+        panic!(\"failed to find version in the RLS's Cargo.toml\")\n+    }\n+\n     /// Returns whether unstable features should be enabled for the compiler\n     /// we're building.\n     fn unstable_features(&self) -> bool {"}, {"sha": "d1581576957dc001a537df0bed522b58e97184fe", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c55325e0f7252d67bda60695497751b63f51931d/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55325e0f7252d67bda60695497751b63f51931d/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=c55325e0f7252d67bda60695497751b63f51931d", "patch": "@@ -570,6 +570,10 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n               .host(&build.config.build)\n          })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n+    rules.build(\"tool-rls\", \"rls\")\n+         .host(true)\n+         .dep(|s| s.name(\"libstd\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"rls\"));\n \n     // ========================================================================\n     // Documentation targets\n@@ -694,6 +698,11 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .default(true)\n          .only_host_build(true)\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n+    rules.dist(\"dist-rls\", \"rls\")\n+         .host(true)\n+         .only_host_build(true)\n+         .dep(|s| s.name(\"tool-rls\"))\n+         .run(move |s| dist::rls(build, s.stage, s.target));\n     rules.dist(\"install\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"default:dist\"))\n          .run(move |s| install::install(build, s.stage, s.target));\n@@ -711,6 +720,8 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .dep(|d| d.name(\"dist-mingw\"))\n          .dep(|d| d.name(\"dist-docs\"))\n          .dep(|d| d.name(\"dist-cargo\"))\n+         .dep(|d| d.name(\"dist-rls\"))\n+         .dep(|d| d.name(\"dist-analysis\"))\n          .run(move |s| dist::extended(build, s.stage, s.target));\n \n     rules.dist(\"dist-sign\", \"hash-and-sign\")"}]}