{"sha": "72898acdba32e2ccc3fd1bc6deced97a8e1ad001", "node_id": "C_kwDOAAsO6NoAKDcyODk4YWNkYmEzMmUyY2NjM2ZkMWJjNmRlY2VkOTdhOGUxYWQwMDE", "commit": {"author": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-30T03:04:31Z"}, "committer": {"name": "Jane Losare-Lusby", "email": "jlusby@yaah.dev", "date": "2022-04-30T03:32:41Z"}, "message": "spicy", "tree": {"sha": "c418a3096bad7d2aaab39c3ae8509f373c474704", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c418a3096bad7d2aaab39c3ae8509f373c474704"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72898acdba32e2ccc3fd1bc6deced97a8e1ad001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72898acdba32e2ccc3fd1bc6deced97a8e1ad001", "html_url": "https://github.com/rust-lang/rust/commit/72898acdba32e2ccc3fd1bc6deced97a8e1ad001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72898acdba32e2ccc3fd1bc6deced97a8e1ad001/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00a315c515654698e70ca5bb1c20eae8a4f67a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/00a315c515654698e70ca5bb1c20eae8a4f67a6a", "html_url": "https://github.com/rust-lang/rust/commit/00a315c515654698e70ca5bb1c20eae8a4f67a6a"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "99d39b7011c430644e5039cf608ac277d71723ec", "filename": "library/core/src/result.rs", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/72898acdba32e2ccc3fd1bc6deced97a8e1ad001/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72898acdba32e2ccc3fd1bc6deced97a8e1ad001/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=72898acdba32e2ccc3fd1bc6deced97a8e1ad001", "patch": "@@ -1026,56 +1026,74 @@ impl<T, E> Result<T, E> {\n     ///\n     /// # Common Message Styles\n     ///\n-    /// There are two common styles for how people word `expect` messages. Using the message to\n-    /// present information to users encountering a panic (\"expect as error message\") or using the\n-    /// message to present information to developers debugging the panic (\"expect as\n-    /// precondition\").\n+    /// There are two common styles for how people word `expect` messages. Using\n+    /// the message to present information to users encountering a panic\n+    /// (\"expect as error message\") or using the message to present information\n+    /// to developers debugging the panic (\"expect as precondition\").\n     ///\n-    /// In the former case the expect message is used to describe the error that has occurred which\n-    /// is considered a bug. Consider the following example:\n+    /// In the former case the expect message is used to describe the error that\n+    /// has occurred which is considered a bug. Consider the following example:\n     ///\n     /// ```should_panic\n     /// // Read environment variable, panic if it is not present\n     /// let path = std::env::var(\"IMPORTANT_PATH\").unwrap();\n     /// ```\n     ///\n-    /// In the \"expect as error message\" style we would use expect to describe that the environment\n-    /// variable was not set when it should have been:\n+    /// In the \"expect as error message\" style we would use expect to describe\n+    /// that the environment variable was not set when it should have been:\n     ///\n     /// ```should_panic\n     /// let path = std::env::var(\"IMPORTANT_PATH\")\n     ///     .expect(\"env variable `IMPORTANT_PATH` is not set\");\n     /// ```\n     ///\n-    /// In the \"expect as precondition\" style, we would instead describe the reason we _expect_ the\n-    /// `Result` will always be `Ok`. With this style we would prefer to write:\n+    /// In the \"expect as precondition\" style, we would instead describe the\n+    /// reason we _expect_ the `Result` should be `Ok`. With this style we would\n+    /// prefer to write:\n     ///\n     /// ```should_panic\n     /// let path = std::env::var(\"IMPORTANT_PATH\")\n-    ///     .expect(\"env variable `IMPORTANT_PATH` is always set by `wrapper_script.sh`\");\n+    ///     .expect(\"env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`\");\n     /// ```\n     ///\n-    /// The \"expect as error message\" style has the advantage of giving a more user friendly error\n-    /// message, and is more consistent with the default output of the [panic hook] provided by\n-    /// `std`.\n+    /// The \"expect as error message\" style does not work as well with the\n+    /// default output of the std panic hooks, and often ends up repeating\n+    /// information that is already communicated by the source error being\n+    /// unwrapped:\n     ///\n     /// ```text\n     /// thread 'main' panicked at 'env variable `IMPORTANT_PATH` is not set: NotPresent', src/main.rs:4:6\n     /// ```\n     ///\n-    /// The \"expect as precondition\" style instead focuses on source code readability, making it\n-    /// easier to understand what must have gone wrong in situations where panics are being used to\n-    /// represent bugs exclusively. But this extra information often looks confusing when presented\n-    /// directly to users with the default `std` panic hook's report format:\n+    /// In this example we end up mentioning that an env variable is not set,\n+    /// followed by our source message that says the env is not present, the\n+    /// only additional information we're communicating is the name of the\n+    /// environment variable being checked.\n     ///\n-    /// ```text\n-    /// thread 'main' panicked at 'env variable `IMPORTANT_PATH` is always set by `wrapper_script.sh`: NotPresent', src/main.rs:4:6\n-    /// ```\n+    /// The \"expect as precondition\" style instead focuses on source code\n+    /// readability, making it easier to understand what must have gone wrong in\n+    /// situations where panics are being used to represent bugs exclusively.\n+    /// Also, by framing our expect in terms of what \"SHOULD\" have happened to\n+    /// prevent the source error, we end up introducing new information that is\n+    /// independent from our source error.\n     ///\n-    /// This style works best when paired with a custom [panic hook] like the one provided by the\n-    /// CLI working group library, [`human-panic`], which dumps the panic messages to a crash\n-    /// report file while showing users a more friendly \"Oops, something went wrong!\" message with\n-    /// a suggestion to send the crash report file back to the developers.\n+    /// ```text\n+    /// thread 'main' panicked at 'env variable `IMPORTANT_PATH` should be set by `wrapper_script.sh`: NotPresent', src/main.rs:4:6\n+    /// ```\n+    ///\n+    /// In this example we are communicating not only the name of the\n+    /// environment variable that should have been set, but also an explanation\n+    /// for why it should have been set, and we let the source error display as\n+    /// a clear contradiction to our expectation.\n+    ///\n+    /// For programs where panics may be user facing, either style works best\n+    /// when paired with a custom [panic hook] like the one provided by the CLI\n+    /// working group library, [`human-panic`]. This panic hook dumps the panic\n+    /// messages to a crash report file while showing users a more friendly\n+    /// \"Oops, something went wrong!\" message with a suggestion to send the\n+    /// crash report file back to the developers. Panic messages should be used\n+    /// to represent bugs, and the information provided back is context intended\n+    /// for the developer, not the user.\n     ///\n     /// [panic hook]: https://doc.rust-lang.org/stable/std/panic/fn.set_hook.html\n     /// [`human-panic`]: https://docs.rs/human-panic"}]}