{"sha": "0f85cf180a430c066d5b86db0998d124f8dff03b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODVjZjE4MGE0MzBjMDY2ZDViODZkYjA5OThkMTI0ZjhkZmYwM2I=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-19T10:06:33Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-19T11:22:20Z"}, "message": "iterator: add skip and take", "tree": {"sha": "63a5ebaa3b79a7680088b3d61b748118713f9c54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a5ebaa3b79a7680088b3d61b748118713f9c54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f85cf180a430c066d5b86db0998d124f8dff03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f85cf180a430c066d5b86db0998d124f8dff03b", "html_url": "https://github.com/rust-lang/rust/commit/0f85cf180a430c066d5b86db0998d124f8dff03b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f85cf180a430c066d5b86db0998d124f8dff03b/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3a58f37979496efdf15bf016ebccc17b007a6cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3a58f37979496efdf15bf016ebccc17b007a6cc", "html_url": "https://github.com/rust-lang/rust/commit/d3a58f37979496efdf15bf016ebccc17b007a6cc"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "996951e82192a0f1ad48b9ddbd3b9c709438bebe", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0f85cf180a430c066d5b86db0998d124f8dff03b/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f85cf180a430c066d5b86db0998d124f8dff03b/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=0f85cf180a430c066d5b86db0998d124f8dff03b", "patch": "@@ -24,6 +24,8 @@ pub trait IteratorUtil<A> {\n     fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, Self>;\n     fn dropwhile<'r>(self, predicate: &'r fn(&A) -> bool) -> DropWhileIterator<'r, A, Self>;\n     fn takewhile<'r>(self, predicate: &'r fn(&A) -> bool) -> TakeWhileIterator<'r, A, Self>;\n+    fn skip(self, n: uint) -> SkipIterator<Self>;\n+    fn take(self, n: uint) -> TakeIterator<Self>;\n     fn enumerate(self) -> EnumerateIterator<Self>;\n     fn advance(&mut self, f: &fn(A) -> bool);\n }\n@@ -60,6 +62,16 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n         TakeWhileIterator{iter: self, flag: false, predicate: predicate}\n     }\n \n+    #[inline(always)]\n+    fn skip(self, n: uint) -> SkipIterator<T> {\n+        SkipIterator{iter: self, n: n}\n+    }\n+\n+    #[inline(always)]\n+    fn take(self, n: uint) -> TakeIterator<T> {\n+        TakeIterator{iter: self, n: n}\n+    }\n+\n     /// A shim implementing the `for` loop iteration protocol for iterator objects\n     #[inline]\n     fn advance(&mut self, f: &fn(A) -> bool) {\n@@ -199,3 +211,52 @@ impl<'self, A, T: Iterator<A>> Iterator<A> for TakeWhileIterator<'self, A, T> {\n         }\n     }\n }\n+\n+pub struct SkipIterator<T> {\n+    priv iter: T,\n+    priv n: uint\n+}\n+\n+impl<A, T: Iterator<A>> Iterator<A> for SkipIterator<T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        let mut next = self.iter.next();\n+        if self.n == 0 {\n+            next\n+        } else {\n+            let n = self.n;\n+            for n.times {\n+                match next {\n+                    Some(_) => {\n+                        next = self.iter.next();\n+                        loop\n+                    }\n+                    None => {\n+                        self.n = 0;\n+                        return None\n+                    }\n+                }\n+            }\n+            self.n = 0;\n+            next\n+        }\n+    }\n+}\n+\n+pub struct TakeIterator<T> {\n+    priv iter: T,\n+    priv n: uint\n+}\n+\n+impl<A, T: Iterator<A>> Iterator<A> for TakeIterator<T> {\n+    #[inline]\n+    fn next(&mut self) -> Option<A> {\n+        let next = self.iter.next();\n+        if self.n != 0 {\n+            self.n -= 1;\n+            next\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "9ebc72c6f409c6b160c5348732d22645d157e161", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0f85cf180a430c066d5b86db0998d124f8dff03b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f85cf180a430c066d5b86db0998d124f8dff03b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=0f85cf180a430c066d5b86db0998d124f8dff03b", "patch": "@@ -4512,4 +4512,32 @@ mod tests {\n         }\n         assert_eq!(i, ys.len());\n     }\n+\n+    #[test]\n+    fn test_iterator_skip() {\n+        use iterator::*;\n+        let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19, 20, 30];\n+        let ys = [13, 15, 16, 17, 19, 20, 30];\n+        let mut it = xs.iter().skip(5);\n+        let mut i = 0;\n+        for it.advance |&x: &uint| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, ys.len());\n+    }\n+\n+    #[test]\n+    fn test_iterator_take() {\n+        use iterator::*;\n+        let xs = [0u, 1, 2, 3, 5, 13, 15, 16, 17, 19];\n+        let ys = [0u, 1, 2, 3, 5];\n+        let mut it = xs.iter().take(5);\n+        let mut i = 0;\n+        for it.advance |&x: &uint| {\n+            assert_eq!(x, ys[i]);\n+            i += 1;\n+        }\n+        assert_eq!(i, ys.len());\n+    }\n }"}]}