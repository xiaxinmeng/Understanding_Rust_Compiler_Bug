{"sha": "7822822d51ecde145747c19a8cf57444666e9a3b", "node_id": "C_kwDOAAsO6NoAKDc4MjI4MjJkNTFlY2RlMTQ1NzQ3YzE5YThjZjU3NDQ0NjY2ZTlhM2I", "commit": {"author": {"name": "akida31", "email": "akida3@protonmail.com", "date": "2022-10-11T15:02:56Z"}, "committer": {"name": "akida31", "email": "akida3@protonmail.com", "date": "2022-12-13T15:29:10Z"}, "message": "change error message", "tree": {"sha": "1eee5fb24132f548fc52b3f011b4e4755425491f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eee5fb24132f548fc52b3f011b4e4755425491f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7822822d51ecde145747c19a8cf57444666e9a3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ20GAFrM+jef+hIIAuGvLD2ft8kFAmOYmkgACgkQAuGvLD2f\nt8nXrQ//eqbQ6BaOWiAIapSgPXmNWqOK+k7rNa0mtG3dkIjWcbhniKHoC3j3jp3R\nkIGBa2Nzd/a5JxQUTcRuxDgpisCNjpvnTymysuEJS2MeS9vT6icRPiCJNCd2BgS1\ni1AY4pPXUdBy3BpL0gtQrXoXljx8tLDjX44WdO6P/NaZsOcca8erYFF+41e7WYmy\n1URpi0fB4E0FKX/rjjTpYhRInvzlbckG5sKHsghATQ4v6VcfndsIQluUG+oxa8FA\ngfr+5KkcsALyavsu3oCtNK9/4jPC/1Rpd3YNszGUVPKGVr78vhWdx6KeZVU5Gmrn\nckk0jqvsdkJX+PK4Lg6CItChXXuDNAMiMiXMJA25rajzFPUixiWIsQdLgIRRLfB3\nmiflzhrTf/myv/8igE8EVVORzO1G4HcBtf1yZPKNOUuKdsHIjNwefiN9DwVbfrZZ\nkLECIysSSufxV+Y4nhj3uQJjz5kOkpRsEGR7A5MgKBrhmlHtUdi8SEAWeSNBjYKQ\nSxUrNfmRA8dkEgjKb6uryp0xLCClYEj9ZBM+FgHr8Sm+1tYhJ+WwMhcjl/tioOBF\nEd3XqKI5CULEUxvrLWnqw5iswD9PWuCDphb7qa++E1QImmJdQXuyMnaAaiYt7TP5\n/r2ZTisV4UN1KXEtUIvCN0/7fydl/YE8Nds7G1N2ZXMsuBl2HBM=\n=q/Ed\n-----END PGP SIGNATURE-----", "payload": "tree 1eee5fb24132f548fc52b3f011b4e4755425491f\nparent b1d74306579f310b33afd21c8a853afdc53d1fd2\nauthor akida31 <akida3@protonmail.com> 1665500576 +0200\ncommitter akida31 <akida3@protonmail.com> 1670945350 +0100\n\nchange error message\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7822822d51ecde145747c19a8cf57444666e9a3b", "html_url": "https://github.com/rust-lang/rust/commit/7822822d51ecde145747c19a8cf57444666e9a3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7822822d51ecde145747c19a8cf57444666e9a3b/comments", "author": {"login": "Akida31", "id": 47895118, "node_id": "MDQ6VXNlcjQ3ODk1MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/47895118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akida31", "html_url": "https://github.com/Akida31", "followers_url": "https://api.github.com/users/Akida31/followers", "following_url": "https://api.github.com/users/Akida31/following{/other_user}", "gists_url": "https://api.github.com/users/Akida31/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akida31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akida31/subscriptions", "organizations_url": "https://api.github.com/users/Akida31/orgs", "repos_url": "https://api.github.com/users/Akida31/repos", "events_url": "https://api.github.com/users/Akida31/events{/privacy}", "received_events_url": "https://api.github.com/users/Akida31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Akida31", "id": 47895118, "node_id": "MDQ6VXNlcjQ3ODk1MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/47895118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Akida31", "html_url": "https://github.com/Akida31", "followers_url": "https://api.github.com/users/Akida31/followers", "following_url": "https://api.github.com/users/Akida31/following{/other_user}", "gists_url": "https://api.github.com/users/Akida31/gists{/gist_id}", "starred_url": "https://api.github.com/users/Akida31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Akida31/subscriptions", "organizations_url": "https://api.github.com/users/Akida31/orgs", "repos_url": "https://api.github.com/users/Akida31/repos", "events_url": "https://api.github.com/users/Akida31/events{/privacy}", "received_events_url": "https://api.github.com/users/Akida31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d74306579f310b33afd21c8a853afdc53d1fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d74306579f310b33afd21c8a853afdc53d1fd2", "html_url": "https://github.com/rust-lang/rust/commit/b1d74306579f310b33afd21c8a853afdc53d1fd2"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "f20cecdb74fc59f925162af10fb86bf067d73cb4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7822822d51ecde145747c19a8cf57444666e9a3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7822822d51ecde145747c19a8cf57444666e9a3b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7822822d51ecde145747c19a8cf57444666e9a3b", "patch": "@@ -3449,11 +3449,11 @@ fn hint_missing_borrow<'tcx>(\n \n         if found_ty == expected_ty {\n             let hint = if found_refs < expected_refs {\n-                \"consider borrowing here:\"\n+                \"consider borrowing the argument\"\n             } else if found_refs == expected_refs {\n                 continue;\n             } else {\n-                \"consider removing the borrow:\"\n+                \"do not borrow the argument\"\n             };\n             err.span_suggestion_verbose(\n                 arg_span,"}, {"sha": "2e5f7a51b6e2d2a94eaa566ed0cd01544958c4dd", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=7822822d51ecde145747c19a8cf57444666e9a3b", "patch": "@@ -13,11 +13,11 @@ note: required by a bound in `f1`\n    |\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n    |                         ^^^^^^^^^^^^ required by this bound in `f1`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f1(|_: &(), _: ()| {});\n    |            ~~~\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f1(|_: (), _: &()| {});\n    |                   ~~~\n@@ -37,11 +37,11 @@ note: required by a bound in `f2`\n    |\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f2`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f2(|_: &'a (), _: ()| {});\n    |            ~~~~~~\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f2(|_: (), _: &()| {});\n    |                   ~~~\n@@ -61,11 +61,11 @@ note: required by a bound in `f3`\n    |\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n    |                             ^^^^^^^^^^^^^^^ required by this bound in `f3`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f3(|_: &(), _: ()| {});\n    |            ~~~\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f3(|_: (), _: &()| {});\n    |                   ~~~\n@@ -85,11 +85,11 @@ note: required by a bound in `f4`\n    |\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f4`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f4(|_: &(), _: ()| {});\n    |            ~~~\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f4(|_: (), _: &'r ()| {});\n    |                   ~~~~~~\n@@ -109,11 +109,11 @@ note: required by a bound in `f5`\n    |\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f5`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f5(|_: &'r (), _: ()| {});\n    |            ~~~~~~\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     f5(|_: (), _: &'r ()| {});\n    |                   ~~~~~~\n@@ -133,7 +133,7 @@ note: required by a bound in `g1`\n    |\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g1`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     g1(|_: &(), _: ()| {});\n    |            ~~~\n@@ -153,7 +153,7 @@ note: required by a bound in `g2`\n    |\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n    |                         ^^^^^^^^^^^^^^^^ required by this bound in `g2`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     g2(|_: &(), _: ()| {});\n    |            ~~~\n@@ -173,7 +173,7 @@ note: required by a bound in `g3`\n    |\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g3`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     g3(|_: &'s (), _: ()| {});\n    |            ~~~~~~\n@@ -193,7 +193,7 @@ note: required by a bound in `g4`\n    |\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g4`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     g4(|_: &(), _: ()| {});\n    |            ~~~\n@@ -213,11 +213,11 @@ note: required by a bound in `h1`\n    |\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h1`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     h1(|_: &(), _: (), _: (), _: ()| {});\n    |            ~~~\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     h1(|_: (), _: (), _: &(), _: ()| {});\n    |                          ~~~\n@@ -237,11 +237,11 @@ note: required by a bound in `h2`\n    |\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h2`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     h2(|_: &(), _: (), _: (), _: ()| {});\n    |            ~~~\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     h2(|_: (), _: (), _: &'t0 (), _: ()| {});\n    |                          ~~~~~~~"}, {"sha": "32a1edb0024c0da0e3bafa83f17d5f022d3432fc", "filename": "src/test/ui/closures/multiple-fn-bounds.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr?ref=7822822d51ecde145747c19a8cf57444666e9a3b", "patch": "@@ -18,6 +18,10 @@ note: required by a bound in `foo`\n    |\n LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n    |                               ^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+help: do not borrow the argument\n+   |\n+LL |     foo(move |char| v);\n+   |               ~~~~\n \n error: aborting due to previous error\n "}, {"sha": "67dff5f92aab56e96e3e0a3400d204dfd3fa36d0", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=7822822d51ecde145747c19a8cf57444666e9a3b", "patch": "@@ -13,7 +13,7 @@ note: required by a bound in `map`\n    |\n LL |         F: FnMut(Self::Item) -> B,\n    |            ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::map`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     a.iter().map(|_: &(u32, u32)| 45);\n    |                      ~~~~~~~~~~~"}, {"sha": "d66e3b3812313fa9a5de7e332a29cd1730bc3570", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7822822d51ecde145747c19a8cf57444666e9a3b/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=7822822d51ecde145747c19a8cf57444666e9a3b", "patch": "@@ -13,7 +13,7 @@ note: required by a bound in `filter`\n    |\n LL |         P: FnMut(&Self::Item) -> bool,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::filter`\n-help: consider borrowing here:\n+help: consider borrowing the argument\n    |\n LL |     once::<&str>(\"str\").fuse().filter(|a: &&str| true).count();\n    |                                           ~~~~~"}]}