{"sha": "539cd252620dcad43f1fe78cd7626521e5ac9adb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOWNkMjUyNjIwZGNhZDQzZjFmZTc4Y2Q3NjI2NTIxZTVhYzlhZGI=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2020-01-04T19:19:14Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2020-01-04T19:19:14Z"}, "message": "External macro check for missing_*_doc", "tree": {"sha": "02810477a836405a4d7a32ded085f7bd3e93810a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02810477a836405a4d7a32ded085f7bd3e93810a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539cd252620dcad43f1fe78cd7626521e5ac9adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539cd252620dcad43f1fe78cd7626521e5ac9adb", "html_url": "https://github.com/rust-lang/rust/commit/539cd252620dcad43f1fe78cd7626521e5ac9adb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539cd252620dcad43f1fe78cd7626521e5ac9adb/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9d20138eca14444b4ceeae837040f63c851d059", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9d20138eca14444b4ceeae837040f63c851d059", "html_url": "https://github.com/rust-lang/rust/commit/d9d20138eca14444b4ceeae837040f63c851d059"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "644b0ca5b8f92513116f329689ff2b8e8f6d40e3", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/539cd252620dcad43f1fe78cd7626521e5ac9adb/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539cd252620dcad43f1fe78cd7626521e5ac9adb/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=539cd252620dcad43f1fe78cd7626521e5ac9adb", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{match_type, paths, return_ty, span_lint};\n use itertools::Itertools;\n use rustc::hir;\n use rustc::impl_lint_pass;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_session::declare_tool_lint;\n use rustc_span::source_map::{BytePos, MultiSpan, Span};\n@@ -153,7 +153,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n             hir::ItemKind::Fn(ref sig, ..) => {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+                if !in_external_macro(cx.tcx.sess, item.span) {\n+                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+                }\n             },\n             hir::ItemKind::Impl(_, _, _, _, ref trait_ref, ..) => {\n                 self.in_trait_impl = trait_ref.is_some();\n@@ -171,13 +173,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+            if !in_external_macro(cx.tcx.sess, item.span) {\n+                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+            }\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n-        if self.in_trait_impl {\n+        if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n         if let hir::ImplItemKind::Method(ref sig, ..) = item.kind {"}, {"sha": "869672d1eda5e7c549105fb7dd9d42404865935c", "filename": "tests/ui/auxiliary/doc_unsafe_macros.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539cd252620dcad43f1fe78cd7626521e5ac9adb/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539cd252620dcad43f1fe78cd7626521e5ac9adb/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fdoc_unsafe_macros.rs?ref=539cd252620dcad43f1fe78cd7626521e5ac9adb", "patch": "@@ -0,0 +1,8 @@\n+#[macro_export]\n+macro_rules! undocd_unsafe {\n+    () => {\n+        pub unsafe fn oy_vey() {\n+            unimplemented!();\n+        }\n+    };\n+}"}, {"sha": "c44f3c62a98e40cac2b146b368456e8cc7c2b40f", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/539cd252620dcad43f1fe78cd7626521e5ac9adb/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539cd252620dcad43f1fe78cd7626521e5ac9adb/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=539cd252620dcad43f1fe78cd7626521e5ac9adb", "patch": "@@ -1,3 +1,8 @@\n+// aux-build:doc_unsafe_macros.rs\n+\n+#[macro_use]\n+extern crate doc_unsafe_macros;\n+\n /// This is not sufficiently documented\n pub unsafe fn destroy_the_planet() {\n     unimplemented!();\n@@ -63,6 +68,26 @@ impl Struct {\n     }\n }\n \n+macro_rules! very_unsafe {\n+    () => {\n+        pub unsafe fn whee() {\n+            unimplemented!()\n+        }\n+\n+        /// # Safety\n+        ///\n+        /// Please keep the seat belt fastened\n+        pub unsafe fn drive() {\n+            whee()\n+        }\n+    };\n+}\n+\n+very_unsafe!();\n+\n+// we don't lint code from external macros\n+undocd_unsafe!();\n+\n #[allow(clippy::let_unit_value)]\n fn main() {\n     unsafe {\n@@ -71,5 +96,6 @@ fn main() {\n         let mut universe = ();\n         apocalypse(&mut universe);\n         private_mod::only_crate_wide_accessible();\n+        drive();\n     }\n }"}, {"sha": "9c8666419ff0bec9453728d77a467fdd3cccd488", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/539cd252620dcad43f1fe78cd7626521e5ac9adb/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539cd252620dcad43f1fe78cd7626521e5ac9adb/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=539cd252620dcad43f1fe78cd7626521e5ac9adb", "patch": "@@ -1,5 +1,5 @@\n error: unsafe function's docs miss `# Safety` section\n-  --> $DIR/doc_unsafe.rs:2:1\n+  --> $DIR/doc_unsafe.rs:7:1\n    |\n LL | / pub unsafe fn destroy_the_planet() {\n LL | |     unimplemented!();\n@@ -9,26 +9,37 @@ LL | | }\n    = note: `-D clippy::missing-safety-doc` implied by `-D warnings`\n \n error: unsafe function's docs miss `# Safety` section\n-  --> $DIR/doc_unsafe.rs:25:5\n+  --> $DIR/doc_unsafe.rs:30:5\n    |\n LL | /     pub unsafe fn republished() {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n error: unsafe function's docs miss `# Safety` section\n-  --> $DIR/doc_unsafe.rs:33:5\n+  --> $DIR/doc_unsafe.rs:38:5\n    |\n LL |     unsafe fn woefully_underdocumented(self);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsafe function's docs miss `# Safety` section\n-  --> $DIR/doc_unsafe.rs:52:5\n+  --> $DIR/doc_unsafe.rs:57:5\n    |\n LL | /     pub unsafe fn more_undocumented_unsafe() -> Self {\n LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n \n-error: aborting due to 4 previous errors\n+error: unsafe function's docs miss `# Safety` section\n+  --> $DIR/doc_unsafe.rs:73:9\n+   |\n+LL | /         pub unsafe fn whee() {\n+LL | |             unimplemented!()\n+LL | |         }\n+   | |_________^\n+...\n+LL |   very_unsafe!();\n+   |   --------------- in this macro invocation\n+\n+error: aborting due to 5 previous errors\n "}]}