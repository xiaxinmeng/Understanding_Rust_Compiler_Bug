{"sha": "c91dd22870d40315c3e0e5b45077516286e918fd", "node_id": "C_kwDOAAsO6NoAKGM5MWRkMjI4NzBkNDAzMTVjM2UwZTViNDUwNzc1MTYyODZlOTE4ZmQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-29T02:36:00Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-02T02:49:19Z"}, "message": "Remove `token::Lit` from `ast::MetaItemLit`.\n\n`token::Lit` contains a `kind` field that indicates what kind of literal\nit is. `ast::MetaItemLit` currently wraps a `token::Lit` but also has\nits own `kind` field. This means that `ast::MetaItemLit` encodes the\nliteral kind in two different ways.\n\nThis commit changes `ast::MetaItemLit` so it no longer wraps\n`token::Lit`. It now contains the `symbol` and `suffix` fields from\n`token::Lit`, but not the `kind` field, eliminating the redundancy.", "tree": {"sha": "92764d2075648883c9c1f191bab4ab2a02d4aba3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92764d2075648883c9c1f191bab4ab2a02d4aba3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c91dd22870d40315c3e0e5b45077516286e918fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c91dd22870d40315c3e0e5b45077516286e918fd", "html_url": "https://github.com/rust-lang/rust/commit/c91dd22870d40315c3e0e5b45077516286e918fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c91dd22870d40315c3e0e5b45077516286e918fd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7e4abd44469d20fad3033608d7ece501609ed34", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e4abd44469d20fad3033608d7ece501609ed34", "html_url": "https://github.com/rust-lang/rust/commit/c7e4abd44469d20fad3033608d7ece501609ed34"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "c503eeeb9b3b950e387d7b8b0e6a82dcd40a226b", "filename": "src/attr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c91dd22870d40315c3e0e5b45077516286e918fd/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c91dd22870d40315c3e0e5b45077516286e918fd/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=c91dd22870d40315c3e0e5b45077516286e918fd", "patch": "@@ -260,7 +260,9 @@ impl Rewrite for ast::NestedMetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         match self {\n             ast::NestedMetaItem::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n-            ast::NestedMetaItem::Lit(ref l) => rewrite_literal(context, l.token_lit, l.span, shape),\n+            ast::NestedMetaItem::Lit(ref l) => {\n+                rewrite_literal(context, l.as_token_lit(), l.span, shape)\n+            }\n         }\n     }\n }\n@@ -308,18 +310,18 @@ impl Rewrite for ast::MetaItem {\n                     }),\n                 )?\n             }\n-            ast::MetaItemKind::NameValue(ref literal) => {\n+            ast::MetaItemKind::NameValue(ref lit) => {\n                 let path = rewrite_path(context, PathContext::Type, &None, &self.path, shape)?;\n                 // 3 = ` = `\n                 let lit_shape = shape.shrink_left(path.len() + 3)?;\n-                // `rewrite_literal` returns `None` when `literal` exceeds max\n+                // `rewrite_literal` returns `None` when `lit` exceeds max\n                 // width. Since a literal is basically unformattable unless it\n                 // is a string literal (and only if `format_strings` is set),\n                 // we might be better off ignoring the fact that the attribute\n                 // is longer than the max width and continue on formatting.\n                 // See #2479 for example.\n-                let value = rewrite_literal(context, literal.token_lit, literal.span, lit_shape)\n-                    .unwrap_or_else(|| context.snippet(literal.span).to_owned());\n+                let value = rewrite_literal(context, lit.as_token_lit(), lit.span, lit_shape)\n+                    .unwrap_or_else(|| context.snippet(lit.span).to_owned());\n                 format!(\"{} = {}\", path, value)\n             }\n         })"}]}