{"sha": "c9acdb0bd4e7b1dc0a565926467b1b6365dbda14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YWNkYjBiZDRlN2IxZGMwYTU2NTkyNjQ2N2IxYjYzNjVkYmRhMTQ=", "commit": {"author": {"name": "Without Boats", "email": "woboats@gmail.com", "date": "2020-01-31T16:01:41Z"}, "committer": {"name": "Without Boats", "email": "woboats@gmail.com", "date": "2020-03-23T14:45:30Z"}, "message": "Improve safety implementation, fix typos", "tree": {"sha": "1411344d23a926fb7ec1f81481bea7ea72490f0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1411344d23a926fb7ec1f81481bea7ea72490f0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9acdb0bd4e7b1dc0a565926467b1b6365dbda14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9acdb0bd4e7b1dc0a565926467b1b6365dbda14", "html_url": "https://github.com/rust-lang/rust/commit/c9acdb0bd4e7b1dc0a565926467b1b6365dbda14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9acdb0bd4e7b1dc0a565926467b1b6365dbda14/comments", "author": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "committer": {"login": "withoutboats", "id": 9063376, "node_id": "MDQ6VXNlcjkwNjMzNzY=", "avatar_url": "https://avatars.githubusercontent.com/u/9063376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/withoutboats", "html_url": "https://github.com/withoutboats", "followers_url": "https://api.github.com/users/withoutboats/followers", "following_url": "https://api.github.com/users/withoutboats/following{/other_user}", "gists_url": "https://api.github.com/users/withoutboats/gists{/gist_id}", "starred_url": "https://api.github.com/users/withoutboats/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/withoutboats/subscriptions", "organizations_url": "https://api.github.com/users/withoutboats/orgs", "repos_url": "https://api.github.com/users/withoutboats/repos", "events_url": "https://api.github.com/users/withoutboats/events{/privacy}", "received_events_url": "https://api.github.com/users/withoutboats/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a835f1a13efab31c59fab615ce6926b3a047bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a835f1a13efab31c59fab615ce6926b3a047bf", "html_url": "https://github.com/rust-lang/rust/commit/d8a835f1a13efab31c59fab615ce6926b3a047bf"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "3fb148e8e34cbea9cc867a4f55527bd971818984", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9acdb0bd4e7b1dc0a565926467b1b6365dbda14/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9acdb0bd4e7b1dc0a565926467b1b6365dbda14/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=c9acdb0bd4e7b1dc0a565926467b1b6365dbda14", "patch": "@@ -1,20 +1,20 @@\n #![unstable(feature = \"wake_trait\", issue = \"0\")]\n //! Types and Traits for working with asynchronous tasks.\n-use core::mem;\n-use core::task::{Waker, RawWaker, RawWakerVTable};\n+use core::mem::{self, ManuallyDrop};\n+use core::task::{RawWaker, RawWakerVTable, Waker};\n \n use crate::sync::Arc;\n \n /// The implementation of waking a task on an executor.\n-/// \n+///\n /// This trait can be used to create a [`Waker`]. An executor can define an\n /// implementation of this trait, and use that to construct a Waker to pass\n /// to the tasks that are executed on that executor.\n ///\n /// This trait is a memory-safe and ergonomic alternative to constructing a\n /// [`RawWaker`]. It supports the common executor design in which the data\n /// used to wake up a task is stored in an [`Arc`]. Some executors (especially\n-/// those for embedded systems) cannot use this API, which is way [`RawWaker`]\n+/// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n /// exists as an alternative for those systems.\n #[unstable(feature = \"wake_trait\", issue = \"0\")]\n pub trait Wake {\n@@ -36,9 +36,9 @@ pub trait Wake {\n #[unstable(feature = \"wake_trait\", issue = \"0\")]\n impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n     fn from(waker: Arc<W>) -> Waker {\n-        unsafe {\n-            Waker::from_raw(raw_waker(waker))\n-        }\n+        // SAFETY: This is safe because raw_waker safely constructs\n+        // a RawWaker from Arc<W>.\n+        unsafe { Waker::from_raw(raw_waker(waker)) }\n     }\n }\n \n@@ -56,7 +56,6 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n // explicitly.\n #[inline(always)]\n fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n-\n     // Increment the reference count of the arc to clone it.\n     unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n         let waker: Arc<W> = Arc::from_raw(waker as *const W);\n@@ -70,22 +69,19 @@ fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n         Wake::wake(waker);\n     }\n \n-    // Wake by reference, forgetting the Arc to avoid decrementing the reference count\n+    // Wake by reference, wrap the waker in ManuallyDrop to avoid dropping it\n     unsafe fn wake_by_ref<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n-        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        let waker: ManuallyDrop<Arc<W>> = ManuallyDrop::new(Arc::from_raw(waker as *const W));\n         Wake::wake_by_ref(&waker);\n-        mem::forget(waker);\n     }\n \n     // Decrement the reference count of the Arc on drop\n     unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n         mem::drop(Arc::from_raw(waker as *const W));\n     }\n \n-    RawWaker::new(Arc::into_raw(waker) as *const (), &RawWakerVTable::new(\n-        clone_waker::<W>,\n-        wake::<W>,\n-        wake_by_ref::<W>,\n-        drop_waker::<W>,\n+    RawWaker::new(\n+        Arc::into_raw(waker) as *const (),\n+        &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n     ))\n }"}]}