{"sha": "096a69dd19dc70c6583be329bef7a54010b8ce23", "node_id": "C_kwDOAAsO6NoAKDA5NmE2OWRkMTlkYzcwYzY1ODNiZTMyOWJlZjdhNTQwMTBiOGNlMjM", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-27T15:46:25Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:21Z"}, "message": "lint: port non-standard style diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "a47c8de71694c0e0daa63a5df9ae90ea57e84b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a47c8de71694c0e0daa63a5df9ae90ea57e84b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/096a69dd19dc70c6583be329bef7a54010b8ce23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/096a69dd19dc70c6583be329bef7a54010b8ce23", "html_url": "https://github.com/rust-lang/rust/commit/096a69dd19dc70c6583be329bef7a54010b8ce23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/096a69dd19dc70c6583be329bef7a54010b8ce23/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee4aa700321d0dc2a763a324fd1c0828d73f70f", "html_url": "https://github.com/rust-lang/rust/commit/7ee4aa700321d0dc2a763a324fd1c0828d73f70f"}], "stats": {"total": 56, "additions": 38, "deletions": 18}, "files": [{"sha": "f0ce4fc02b4a0de3cdfd436fbb6b8c92b6fcc5ef", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/096a69dd19dc70c6583be329bef7a54010b8ce23/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/096a69dd19dc70c6583be329bef7a54010b8ce23/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=096a69dd19dc70c6583be329bef7a54010b8ce23", "patch": "@@ -108,3 +108,19 @@ lint-non-fmt-panic-braces =\n     }\n     .note = this message is not used as a format string, but will be in Rust 2021\n     .suggestion = add a \"{\"{\"}{\"}\"}\" format string to use the message literally\n+\n+lint-non-camel-case-type = {$sort} `{$name}` should have an upper camel case name\n+    .suggestion = convert the identifier to upper camel case\n+    .label = should have an UpperCamelCase name\n+\n+lint-non-snake-case = {$sort} `{$name}` should have a snake case name\n+    .rename-or-convert-suggestion = rename the identifier or convert it to a snake case raw identifier\n+    .cannot-convert-note = `{$sc}` cannot be used as a raw identifier\n+    .rename-suggestion = rename the identifier\n+    .convert-suggestion = convert the identifier to snake case\n+    .help = convert the identifier to snake case: `{$sc}`\n+    .label = should have a snake_case name\n+\n+lint-non-upper_case-global = {$sort} `{$name}` should have an upper case name\n+    .suggestion = convert the identifier to upper case\n+    .label = should have an UPPER_CASE name"}, {"sha": "33ac2ed02aa00c0ef89c222247d89a917f08ef18", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/096a69dd19dc70c6583be329bef7a54010b8ce23/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/096a69dd19dc70c6583be329bef7a54010b8ce23/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=096a69dd19dc70c6583be329bef7a54010b8ce23", "patch": "@@ -1,7 +1,7 @@\n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_errors::Applicability;\n+use rustc_errors::{fluent, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::FnKind;\n@@ -137,22 +137,23 @@ impl NonCamelCaseTypes {\n \n         if !is_camel_case(name) {\n             cx.struct_span_lint(NON_CAMEL_CASE_TYPES, ident.span, |lint| {\n-                let msg = format!(\"{} `{}` should have an upper camel case name\", sort, name);\n-                let mut err = lint.build(&msg);\n+                let mut err = lint.build(fluent::lint::non_camel_case_type);\n                 let cc = to_camel_case(name);\n                 // We cannot provide meaningful suggestions\n                 // if the characters are in the category of \"Lowercase Letter\".\n                 if *name != cc {\n                     err.span_suggestion(\n                         ident.span,\n-                        \"convert the identifier to upper camel case\",\n+                        fluent::lint::suggestion,\n                         to_camel_case(name),\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {\n-                    err.span_label(ident.span, \"should have an UpperCamelCase name\");\n+                    err.span_label(ident.span, fluent::lint::label);\n                 }\n \n+                err.set_arg(\"sort\", sort);\n+                err.set_arg(\"name\", name);\n                 err.emit();\n             })\n         }\n@@ -281,11 +282,10 @@ impl NonSnakeCase {\n         if !is_snake_case(name) {\n             cx.struct_span_lint(NON_SNAKE_CASE, ident.span, |lint| {\n                 let sc = NonSnakeCase::to_snake_case(name);\n-                let msg = format!(\"{} `{}` should have a snake case name\", sort, name);\n-                let mut err = lint.build(&msg);\n+                let mut err = lint.build(fluent::lint::non_snake_case);\n                 // We cannot provide meaningful suggestions\n                 // if the characters are in the category of \"Uppercase Letter\".\n-                if *name != sc {\n+                if name != sc {\n                     // We have a valid span in almost all cases, but we don't have one when linting a crate\n                     // name provided via the command line.\n                     if !ident.span.is_dummy() {\n@@ -295,13 +295,13 @@ impl NonSnakeCase {\n                             // Instead, recommend renaming the identifier entirely or, if permitted,\n                             // escaping it to create a raw identifier.\n                             if sc_ident.name.can_be_raw() {\n-                                (\"rename the identifier or convert it to a snake case raw identifier\", sc_ident.to_string())\n+                                (fluent::lint::rename_or_convert_suggestion, sc_ident.to_string())\n                             } else {\n-                                err.note(&format!(\"`{}` cannot be used as a raw identifier\", sc));\n-                                (\"rename the identifier\", String::new())\n+                                err.note(fluent::lint::cannot_convert_note);\n+                                (fluent::lint::rename_suggestion, String::new())\n                             }\n                         } else {\n-                            (\"convert the identifier to snake case\", sc)\n+                            (fluent::lint::convert_suggestion, sc.clone())\n                         };\n \n                         err.span_suggestion(\n@@ -311,12 +311,15 @@ impl NonSnakeCase {\n                             Applicability::MaybeIncorrect,\n                         );\n                     } else {\n-                        err.help(&format!(\"convert the identifier to snake case: `{}`\", sc));\n+                        err.help(fluent::lint::help);\n                     }\n                 } else {\n-                    err.span_label(ident.span, \"should have a snake_case name\");\n+                    err.span_label(ident.span, fluent::lint::label);\n                 }\n \n+                err.set_arg(\"sort\", sort);\n+                err.set_arg(\"name\", name);\n+                err.set_arg(\"sc\", sc);\n                 err.emit();\n             });\n         }\n@@ -488,21 +491,22 @@ impl NonUpperCaseGlobals {\n         if name.chars().any(|c| c.is_lowercase()) {\n             cx.struct_span_lint(NON_UPPER_CASE_GLOBALS, ident.span, |lint| {\n                 let uc = NonSnakeCase::to_snake_case(&name).to_uppercase();\n-                let mut err =\n-                    lint.build(&format!(\"{} `{}` should have an upper case name\", sort, name));\n+                let mut err = lint.build(fluent::lint::non_upper_case_global);\n                 // We cannot provide meaningful suggestions\n                 // if the characters are in the category of \"Lowercase Letter\".\n                 if *name != uc {\n                     err.span_suggestion(\n                         ident.span,\n-                        \"convert the identifier to upper case\",\n+                        fluent::lint::suggestion,\n                         uc,\n                         Applicability::MaybeIncorrect,\n                     );\n                 } else {\n-                    err.span_label(ident.span, \"should have an UPPER_CASE name\");\n+                    err.span_label(ident.span, fluent::lint::label);\n                 }\n \n+                err.set_arg(\"sort\", sort);\n+                err.set_arg(\"name\", name);\n                 err.emit();\n             })\n         }"}]}