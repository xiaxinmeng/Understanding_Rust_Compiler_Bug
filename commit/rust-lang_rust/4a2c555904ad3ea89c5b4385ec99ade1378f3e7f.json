{"sha": "4a2c555904ad3ea89c5b4385ec99ade1378f3e7f", "node_id": "C_kwDOAAsO6NoAKDRhMmM1NTU5MDRhZDNlYTg5YzViNDM4NWVjOTlhZGUxMzc4ZjNlN2Y", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-02-27T18:31:09Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-02-27T19:05:19Z"}, "message": "Add `Atomic*::from_ptr`", "tree": {"sha": "3e0d264b6d540f585e0245b74e39d7b297894d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e0d264b6d540f585e0245b74e39d7b297894d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a2c555904ad3ea89c5b4385ec99ade1378f3e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2c555904ad3ea89c5b4385ec99ade1378f3e7f", "html_url": "https://github.com/rust-lang/rust/commit/4a2c555904ad3ea89c5b4385ec99ade1378f3e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a2c555904ad3ea89c5b4385ec99ade1378f3e7f/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58136ffa92c81ec9e6ac1f91773254914da2ca01", "url": "https://api.github.com/repos/rust-lang/rust/commits/58136ffa92c81ec9e6ac1f91773254914da2ca01", "html_url": "https://github.com/rust-lang/rust/commit/58136ffa92c81ec9e6ac1f91773254914da2ca01"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "7ada26e1e15f0d0fcd8dfbca635f94a0274a7dbb", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/4a2c555904ad3ea89c5b4385ec99ade1378f3e7f/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2c555904ad3ea89c5b4385ec99ade1378f3e7f/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=4a2c555904ad3ea89c5b4385ec99ade1378f3e7f", "patch": "@@ -305,6 +305,50 @@ impl AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n \n+    /// Creates a new `AtomicBool` from a pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+    /// use std::sync::atomic::{self, AtomicBool};\n+    /// use std::mem::align_of;\n+    ///\n+    /// // Get a pointer to an allocated value\n+    /// let ptr: *mut bool = Box::into_raw(Box::new(false));\n+    ///\n+    /// assert!(ptr.is_aligned_to(align_of::<AtomicBool>()));\n+    ///\n+    /// {\n+    ///     // Create an atomic view of the allocated value\n+    ///     let atomic = unsafe { AtomicBool::from_ptr(ptr) };\n+    ///\n+    ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+    ///     atomic.store(true, atomic::Ordering::Relaxed);\n+    /// }\n+    ///\n+    /// // It's ok to non-atomically access the value behind `ptr`,\n+    /// // since the reference to the atomic ended its lifetime in the block above\n+    /// assert_eq!(unsafe { *ptr }, true);\n+    ///\n+    /// // Deallocate the value\n+    /// unsafe { drop(Box::from_raw(ptr)) }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `ptr` must be aligned to `align_of::<AtomicBool>()` (note that on some platforms this can be bigger than `align_of::<bool>()`).\n+    /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+    /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+    ///\n+    /// [valid]: crate::ptr#safety\n+    #[unstable(feature = \"atomic_from_ptr\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"none\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *mut bool) -> &'a AtomicBool {\n+        // SAFETY: guaranteed by the caller\n+        unsafe { &*ptr.cast() }\n+    }\n+\n     /// Returns a mutable reference to the underlying [`bool`].\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n@@ -1017,6 +1061,50 @@ impl<T> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n \n+    /// Creates a new `AtomicPtr` from a pointer.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+    /// use std::sync::atomic::{self, AtomicPtr};\n+    /// use std::mem::align_of;\n+    ///\n+    /// // Get a pointer to an allocated value\n+    /// let ptr: *mut *mut u8 = Box::into_raw(Box::new(std::ptr::null_mut()));\n+    ///\n+    /// assert!(ptr.is_aligned_to(align_of::<AtomicPtr<u8>>()));\n+    ///\n+    /// {\n+    ///     // Create an atomic view of the allocated value\n+    ///     let atomic = unsafe { AtomicPtr::from_ptr(ptr) };\n+    ///\n+    ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+    ///     atomic.store(std::ptr::NonNull::dangling().as_ptr(), atomic::Ordering::Relaxed);\n+    /// }\n+    ///\n+    /// // It's ok to non-atomically access the value behind `ptr`,\n+    /// // since the reference to the atomic ended its lifetime in the block above\n+    /// assert!(!unsafe { *ptr }.is_null());\n+    ///\n+    /// // Deallocate the value\n+    /// unsafe { drop(Box::from_raw(ptr)) }\n+    /// ```\n+    ///\n+    /// # Safety\n+    ///\n+    /// * `ptr` must be aligned to `align_of::<AtomicPtr<T>>()` (note that on some platforms this can be bigger than `align_of::<*mut T>()`).\n+    /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+    /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+    ///\n+    /// [valid]: crate::ptr#safety\n+    #[unstable(feature = \"atomic_from_ptr\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"none\")]\n+    pub const unsafe fn from_ptr<'a>(ptr: *mut *mut T) -> &'a AtomicPtr<T> {\n+        // SAFETY: guaranteed by the caller\n+        unsafe { &*ptr.cast() }\n+    }\n+\n     /// Returns a mutable reference to the underlying pointer.\n     ///\n     /// This is safe because the mutable reference guarantees that no other threads are\n@@ -1958,6 +2046,53 @@ macro_rules! atomic_int {\n                 Self {v: UnsafeCell::new(v)}\n             }\n \n+            /// Creates a new reference to an atomic integer from a pointer.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_ptr, pointer_is_aligned)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{self, \", stringify!($atomic_type), \"};\")]\n+            /// use std::mem::align_of;\n+            ///\n+            /// // Get a pointer to an allocated value\n+            #[doc = concat!(\"let ptr: *mut \", stringify!($int_type), \" = Box::into_raw(Box::new(0));\")]\n+            ///\n+            #[doc = concat!(\"assert!(ptr.is_aligned_to(align_of::<\", stringify!($atomic_type), \">()));\")]\n+            ///\n+            /// {\n+            ///     // Create an atomic view of the allocated value\n+            // SAFETY: this is a doc comment, tidy, it can't hurt you (also guaranteed by the construction of `ptr` and the assert above)\n+            #[doc = concat!(\"    let atomic = unsafe {\", stringify!($atomic_type), \"::from_ptr(ptr) };\")]\n+            ///\n+            ///     // Use `atomic` for atomic operations, possibly share it with other threads\n+            ///     atomic.store(1, atomic::Ordering::Relaxed);\n+            /// }\n+            ///\n+            /// // It's ok to non-atomically access the value behind `ptr`,\n+            /// // since the reference to the atomic ended its lifetime in the block above\n+            /// assert_eq!(unsafe { *ptr }, 1);\n+            ///\n+            /// // Deallocate the value\n+            /// unsafe { drop(Box::from_raw(ptr)) }\n+            /// ```\n+            ///\n+            /// # Safety\n+            ///\n+            /// * `ptr` must be aligned to `align_of::<AtomicBool>()` (note that on some platforms this can be bigger than `align_of::<bool>()`).\n+            #[doc = concat!(\" * `ptr` must be aligned to `align_of::<\", stringify!($atomic_type), \">()` (note that on some platforms this can be bigger than `align_of::<\", stringify!($int_type), \">()`).\")]\n+            /// * `ptr` must be [valid] for both reads and writes for the whole lifetime `'a`.\n+            /// * The value behind `ptr` must not be accessed through non-atomic operations for the whole lifetime `'a`.\n+            ///\n+            /// [valid]: crate::ptr#safety\n+            #[unstable(feature = \"atomic_from_ptr\", issue = \"none\")]\n+            #[rustc_const_unstable(feature = \"atomic_from_ptr\", issue = \"none\")]\n+            pub const unsafe fn from_ptr<'a>(ptr: *mut $int_type) -> &'a $atomic_type {\n+                // SAFETY: guaranteed by the caller\n+                unsafe { &*ptr.cast() }\n+            }\n+\n+\n             /// Returns a mutable reference to the underlying integer.\n             ///\n             /// This is safe because the mutable reference guarantees that no other threads are"}]}