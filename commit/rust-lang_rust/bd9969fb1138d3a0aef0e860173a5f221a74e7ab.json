{"sha": "bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOTk2OWZiMTEzOGQzYTBhZWYwZTg2MDE3M2E1ZjIyMWE3NGU3YWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-09T18:51:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-09T18:51:16Z"}, "message": "Rollup merge of #37428 - estebank:generic-type-error-span, r=sanxiyn\n\nPoint to type argument span when used as trait\n\nGiven the following code:\n\n``` rust\nstruct Foo<T: Clone>(T);\n\nuse std::ops::Add;\n\nimpl<T: Clone, Add> Add for Foo<T> {\n  type Output = usize;\n\n  fn add(self, rhs: Self) -> Self::Output {\n    unimplemented!();\n  }\n}\n```\n\npresent the following output:\n\n``` nocode\nerror[E0404]: `Add` is not a trait\n --> file3.rs:5:21\n  |\n5 | impl<T: Clone, Add> Add for Okok<T> {\n  |                ---  ^^^ expected trait, found type parameter\n  |                |\n  |                type parameter defined here\n```\n\nFixes #35987.", "tree": {"sha": "be8c2ef9dc91f2a1232f8df2fa84ea272148720d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be8c2ef9dc91f2a1232f8df2fa84ea272148720d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "html_url": "https://github.com/rust-lang/rust/commit/bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2853fda3773d4f9ec28484ba3592d5e825ca59", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2853fda3773d4f9ec28484ba3592d5e825ca59", "html_url": "https://github.com/rust-lang/rust/commit/7f2853fda3773d4f9ec28484ba3592d5e825ca59"}, {"sha": "3edb4fc56345ba2d33a04e952e1d402b08bc676c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edb4fc56345ba2d33a04e952e1d402b08bc676c", "html_url": "https://github.com/rust-lang/rust/commit/3edb4fc56345ba2d33a04e952e1d402b08bc676c"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "0c7c1a55a618207477adaa43032d33dfaf8f7b06", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "patch": "@@ -108,7 +108,7 @@ enum ResolutionError<'a> {\n     /// error E0403: the name is already used for a type parameter in this type parameter list\n     NameAlreadyUsedInTypeParameterList(Name, &'a Span),\n     /// error E0404: is not a trait\n-    IsNotATrait(&'a str),\n+    IsNotATrait(&'a str, &'a str),\n     /// error E0405: use of undeclared trait name\n     UndeclaredTraitName(&'a str, SuggestedCandidates),\n     /// error E0407: method is not a member of trait\n@@ -223,13 +223,13 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n              err\n \n         }\n-        ResolutionError::IsNotATrait(name) => {\n+        ResolutionError::IsNotATrait(name, kind_name) => {\n             let mut err = struct_span_err!(resolver.session,\n                                            span,\n                                            E0404,\n                                            \"`{}` is not a trait\",\n                                            name);\n-            err.span_label(span, &format!(\"not a trait\"));\n+            err.span_label(span, &format!(\"expected trait, found {}\", kind_name));\n             err\n         }\n         ResolutionError::UndeclaredTraitName(name, candidates) => {\n@@ -555,7 +555,7 @@ impl<'a> Visitor for Resolver<'a> {\n         self.resolve_type(ty);\n     }\n     fn visit_poly_trait_ref(&mut self, tref: &ast::PolyTraitRef, m: &ast::TraitBoundModifier) {\n-        match self.resolve_trait_reference(tref.trait_ref.ref_id, &tref.trait_ref.path, 0) {\n+        match self.resolve_trait_reference(tref.trait_ref.ref_id, &tref.trait_ref.path, 0, None) {\n             Ok(def) => self.record_def(tref.trait_ref.ref_id, def),\n             Err(_) => {\n                 // error already reported\n@@ -1699,7 +1699,7 @@ impl<'a> Resolver<'a> {\n             }\n \n             ItemKind::DefaultImpl(_, ref trait_ref) => {\n-                self.with_optional_trait_ref(Some(trait_ref), |_, _| {});\n+                self.with_optional_trait_ref(Some(trait_ref), |_, _| {}, None);\n             }\n             ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n                 self.resolve_implementation(generics,\n@@ -1889,7 +1889,8 @@ impl<'a> Resolver<'a> {\n     fn resolve_trait_reference(&mut self,\n                                id: NodeId,\n                                trait_path: &Path,\n-                               path_depth: usize)\n+                               path_depth: usize,\n+                               generics: Option<&Generics>)\n                                -> Result<PathResolution, ()> {\n         self.resolve_path(id, trait_path, path_depth, TypeNS).and_then(|path_res| {\n             match path_res.base_def {\n@@ -1902,8 +1903,16 @@ impl<'a> Resolver<'a> {\n             }\n \n             let mut err = resolve_struct_error(self, trait_path.span, {\n-                ResolutionError::IsNotATrait(&path_names_to_string(trait_path, path_depth))\n+                ResolutionError::IsNotATrait(&path_names_to_string(trait_path, path_depth),\n+                                             path_res.base_def.kind_name())\n             });\n+            if let Some(generics) = generics {\n+                if let Some(span) = generics.span_for_name(\n+                    &path_names_to_string(trait_path, path_depth)) {\n+\n+                    err.span_label(span, &\"type parameter defined here\");\n+                }\n+            }\n \n             // If it's a typedef, give a note\n             if let Def::TyAlias(..) = path_res.base_def {\n@@ -1948,15 +1957,20 @@ impl<'a> Resolver<'a> {\n         result\n     }\n \n-    fn with_optional_trait_ref<T, F>(&mut self, opt_trait_ref: Option<&TraitRef>, f: F) -> T\n+    fn with_optional_trait_ref<T, F>(&mut self,\n+                                     opt_trait_ref: Option<&TraitRef>,\n+                                     f: F,\n+                                     generics: Option<&Generics>)\n+        -> T\n         where F: FnOnce(&mut Resolver, Option<DefId>) -> T\n     {\n         let mut new_val = None;\n         let mut new_id = None;\n         if let Some(trait_ref) = opt_trait_ref {\n             if let Ok(path_res) = self.resolve_trait_reference(trait_ref.ref_id,\n                                                                &trait_ref.path,\n-                                                               0) {\n+                                                               0,\n+                                                               generics) {\n                 assert!(path_res.depth == 0);\n                 self.record_def(trait_ref.ref_id, path_res);\n                 new_val = Some((path_res.base_def.def_id(), trait_ref.clone()));\n@@ -2044,7 +2058,7 @@ impl<'a> Resolver<'a> {\n                         }\n                     });\n                 });\n-            });\n+            }, Some(&generics));\n         });\n     }\n \n@@ -2494,7 +2508,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 max_assoc_types = path.segments.len() - qself.position;\n                 // Make sure the trait is valid.\n-                let _ = self.resolve_trait_reference(id, path, max_assoc_types);\n+                let _ = self.resolve_trait_reference(id, path, max_assoc_types, None);\n             }\n             None => {\n                 max_assoc_types = path.segments.len();"}, {"sha": "9751ad6aa43c3d5aec16fb6fa6607fd7f4f9a739", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "patch": "@@ -399,6 +399,14 @@ impl Generics {\n     pub fn is_parameterized(&self) -> bool {\n         self.is_lt_parameterized() || self.is_type_parameterized()\n     }\n+    pub fn span_for_name(&self, name: &str) -> Option<Span> {\n+        for t in &self.ty_params {\n+            if t.ident.name.as_str() == name {\n+                return Some(t.span);\n+            }\n+        }\n+        None\n+    }\n }\n \n impl Default for Generics {"}, {"sha": "86906ed9af2063117182176dc1f828bff541cca6", "filename": "src/test/compile-fail/issue-3907.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs?ref=bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "patch": "@@ -18,7 +18,7 @@ struct S {\n }\n \n impl Foo for S { //~ ERROR: `Foo` is not a trait\n-                 //~| NOTE: not a trait\n+                 //~| NOTE: expected trait, found type alias\n                  //~| NOTE: type aliases cannot be used for traits\n     fn bar() { }\n }"}, {"sha": "8ebcba47134001d32600e1bbac93ed552f91802b", "filename": "src/test/compile-fail/issue-5035.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035.rs?ref=bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "patch": "@@ -11,7 +11,7 @@\n trait I {}\n type K = I;\n impl K for isize {} //~ ERROR: `K` is not a trait\n-                    //~| NOTE: not a trait\n+                    //~| NOTE: expected trait, found type alias\n                     //~| NOTE: aliases cannot be used for traits\n \n use ImportError; //~ ERROR unresolved import `ImportError` [E0432]"}, {"sha": "d05e6eb2bbe4da144b184bf1a3d8ddf5b8250ca7", "filename": "src/test/ui/codemap_tests/two_files.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr?ref=bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "patch": "@@ -2,7 +2,7 @@ error[E0404]: `Bar` is not a trait\n   --> $DIR/two_files.rs:15:6\n    |\n 15 | impl Bar for Baz { }\n-   |      ^^^ not a trait\n+   |      ^^^ expected trait, found type alias\n    |\n    = note: type aliases cannot be used for traits\n "}, {"sha": "8ff5f3b83986ce14dd90cfc16ec10ced146ac349", "filename": "src/test/ui/span/issue-35987.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fui%2Fspan%2Fissue-35987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fui%2Fspan%2Fissue-35987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.rs?ref=bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<T: Clone>(T);\n+\n+use std::ops::Add;\n+\n+impl<T: Clone, Add> Add for Foo<T> {\n+    type Output = usize;\n+\n+    fn add(self, rhs: Self) -> Self::Output {\n+        unimplemented!();\n+    }\n+}"}, {"sha": "2370b3d6c612edea41f0011319bc476cf7993022", "filename": "src/test/ui/span/issue-35987.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd9969fb1138d3a0aef0e860173a5f221a74e7ab/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=bd9969fb1138d3a0aef0e860173a5f221a74e7ab", "patch": "@@ -0,0 +1,12 @@\n+error[E0404]: `Add` is not a trait\n+  --> $DIR/issue-35987.rs:15:21\n+   |\n+15 | impl<T: Clone, Add> Add for Foo<T> {\n+   |                ---  ^^^ expected trait, found type parameter\n+   |                |\n+   |                type parameter defined here\n+\n+error: main function not found\n+\n+error: cannot continue compilation due to previous error\n+"}]}