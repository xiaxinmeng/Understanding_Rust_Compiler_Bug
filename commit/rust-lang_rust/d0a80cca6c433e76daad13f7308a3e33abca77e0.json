{"sha": "d0a80cca6c433e76daad13f7308a3e33abca77e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYTgwY2NhNmM0MzNlNzZkYWFkMTNmNzMwOGEzZTMzYWJjYTc3ZTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-28T18:09:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-31T22:47:36Z"}, "message": "rpass/cfail: Update field privacy where necessary", "tree": {"sha": "8775763b793015dabb661fc95f007ada107679c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8775763b793015dabb661fc95f007ada107679c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0a80cca6c433e76daad13f7308a3e33abca77e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0a80cca6c433e76daad13f7308a3e33abca77e0", "html_url": "https://github.com/rust-lang/rust/commit/d0a80cca6c433e76daad13f7308a3e33abca77e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0a80cca6c433e76daad13f7308a3e33abca77e0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b36e9d913c3321206e6c783b2498aae18d950b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b36e9d913c3321206e6c783b2498aae18d950b8", "html_url": "https://github.com/rust-lang/rust/commit/0b36e9d913c3321206e6c783b2498aae18d950b8"}], "stats": {"total": 156, "additions": 76, "deletions": 80}, "files": [{"sha": "666d2569c42b41275f3f7596ef77af22bfec6557", "filename": "src/test/auxiliary/anon_trait_static_method_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub struct Foo {\n-    x: int\n+    pub x: int\n }\n \n impl Foo {"}, {"sha": "50116b397372f6319e97e31000d3c6d1a9b7a9ad", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,9 +10,9 @@\n \n pub mod kitties {\n     pub struct cat {\n-      priv meows : uint,\n+      meows : uint,\n \n-      how_hungry : int,\n+      pub how_hungry : int,\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat  {"}, {"sha": "55fb424205eb82de2a389bfdd178375391592438", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,9 +10,9 @@\n \n pub mod kitties {\n     pub struct cat {\n-      priv meows : uint,\n+      meows : uint,\n \n-      how_hungry : int,\n+      pub how_hungry : int,\n \n     }\n "}, {"sha": "6a57bb36663c362e9e988ce063bbd7cc0efd82d9", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,9 +10,9 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv meows : uint,\n+        meows : uint,\n \n-        how_hungry : int,\n+        pub how_hungry : int,\n     }\n \n     impl cat {"}, {"sha": "733509753d3846beb8ffdc0fe3db6ff12af2b484", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,10 +10,10 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv meows : uint,\n+        meows : uint,\n \n-        how_hungry : int,\n-        name : ~str,\n+        pub how_hungry : int,\n+        pub name : ~str,\n     }\n \n     impl cat {"}, {"sha": "d113859a6bdc773100df08f3e9e477c38fa9c0d4", "filename": "src/test/auxiliary/cci_class_5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_5.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,8 +10,8 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv meows : uint,\n-        how_hungry : int,\n+        meows : uint,\n+        pub how_hungry : int,\n     }\n \n     impl cat {"}, {"sha": "71552f4c97efce71317c439c77c218467c395cf2", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -11,10 +11,10 @@\n pub mod kitties {\n \n     pub struct cat<U> {\n-        priv info : Vec<U> ,\n-        priv meows : uint,\n+        info : Vec<U> ,\n+        meows : uint,\n \n-        how_hungry : int,\n+        pub how_hungry : int,\n     }\n \n     impl<U> cat<U> {"}, {"sha": "2ce4f818659e887224be01346a334176d08365b0", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -12,9 +12,9 @@ pub mod kitty {\n     use std::fmt;\n \n     pub struct cat {\n-      priv meows : uint,\n-      how_hungry : int,\n-      name : ~str,\n+      meows : uint,\n+      pub how_hungry : int,\n+      pub name : ~str,\n     }\n \n     impl fmt::Show for cat {"}, {"sha": "4a1a481091979698964a6aa4eccf1ad37989de86", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -12,7 +12,7 @@\n \n #[crate_type = \"lib\"];\n \n-pub struct NameVal { name: ~str, val: int }\n+pub struct NameVal { pub name: ~str, pub val: int }\n \n pub fn struct_nameval() -> NameVal {\n     NameVal { name: ~\"crateresolve5\", val: 10 }"}, {"sha": "f2896ec6ecbd23e6bbbd61309bb3007057a89f7e", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -12,7 +12,7 @@\n \n #[crate_type = \"lib\"];\n \n-pub struct NameVal { name: ~str, val: int }\n+pub struct NameVal { pub name: ~str, pub val: int }\n pub fn struct_nameval() -> NameVal {\n     NameVal { name: ~\"crateresolve5\", val: 10 }\n }"}, {"sha": "e482e8c62cab23604ac39c517cf6bb43c79c0c5d", "filename": "src/test/auxiliary/explicit_self_xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fexplicit_self_xcrate.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -14,7 +14,7 @@ pub trait Foo {\n }\n \n pub struct Bar {\n-    x: ~str\n+    pub x: ~str\n }\n \n impl Foo for Bar {"}, {"sha": "de182c48c41f8a1fc8091825ac5f00ba5d5cf3db", "filename": "src/test/auxiliary/impl_privacy_xc_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_1.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -11,7 +11,7 @@\n #[crate_type = \"lib\"];\n \n pub struct Fish {\n-    x: int\n+    pub x: int\n }\n \n impl Fish {"}, {"sha": "b98e86fc3b0053c0240a500277f7367fcb22d5a3", "filename": "src/test/auxiliary/impl_privacy_xc_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fimpl_privacy_xc_2.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -11,7 +11,7 @@\n #[crate_type = \"lib\"];\n \n pub struct Fish {\n-    x: int\n+    pub x: int\n }\n \n mod unexported {"}, {"sha": "12b871b566b7a93ecff2bcbf3ea062b428ba8cde", "filename": "src/test/auxiliary/issue-8044.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fissue-8044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-8044.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -11,11 +11,11 @@\n #[feature(struct_variant)];\n \n pub struct BTree<V> {\n-    node: TreeItem<V>,\n+    pub node: TreeItem<V>,\n }\n \n pub enum TreeItem<V> {\n-    TreeLeaf { value: V },\n+    TreeLeaf { pub value: V },\n }\n \n pub fn leaf<V>(value: V) -> TreeItem<V> {"}, {"sha": "72fe2bcec97755367cf371dedd01bf022b7cbfc4", "filename": "src/test/auxiliary/issue2378b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378b.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -14,7 +14,7 @@ extern crate issue2378a;\n \n use issue2378a::maybe;\n \n-pub struct two_maybes<T> {a: maybe<T>, b: maybe<T>}\n+pub struct two_maybes<T> {pub a: maybe<T>, pub b: maybe<T>}\n \n impl<T:Clone> Index<uint,(T,T)> for two_maybes<T> {\n     fn index(&self, idx: &uint) -> (T, T) {"}, {"sha": "30224912d9265666eeec2b9b7ce6cc75b463496f", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -116,18 +116,18 @@ pub trait Trait {\n impl Trait for MethodTester {}\n \n #[deprecated]\n-pub struct DeprecatedStruct { i: int }\n+pub struct DeprecatedStruct { pub i: int }\n #[experimental]\n-pub struct ExperimentalStruct { i: int }\n+pub struct ExperimentalStruct { pub i: int }\n #[unstable]\n-pub struct UnstableStruct { i: int }\n-pub struct UnmarkedStruct { i: int }\n+pub struct UnstableStruct { pub i: int }\n+pub struct UnmarkedStruct { pub i: int }\n #[stable]\n-pub struct StableStruct { i: int }\n+pub struct StableStruct { pub i: int }\n #[frozen]\n-pub struct FrozenStruct { i: int }\n+pub struct FrozenStruct { pub i: int }\n #[locked]\n-pub struct LockedStruct { i: int }\n+pub struct LockedStruct { pub i: int }\n \n #[deprecated]\n pub struct DeprecatedUnitStruct;"}, {"sha": "850050fe3a5a2eb21bfd1059a1dc0028f38a1e74", "filename": "src/test/auxiliary/overloaded_autoderef_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -11,7 +11,7 @@\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {\n-    helper: H\n+    pub helper: H\n }\n \n trait Helper<T> {"}, {"sha": "8e1e591d94fca8dcc227ac8ae087b8269c828661", "filename": "src/test/auxiliary/pub_use_xcrate1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate1.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub struct Foo {\n-    name: int\n+    pub name: int\n }"}, {"sha": "e2c16ae8b5c492c6e9bedaacc27ea5bd39cdd9fb", "filename": "src/test/auxiliary/struct-field-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct-field-privacy.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -14,6 +14,6 @@ struct A {\n }\n \n pub struct B {\n-    a: int,\n-    priv b: int,\n+    pub a: int,\n+    b: int,\n }"}, {"sha": "328383313636f53811299fedb12406b78fc37b62", "filename": "src/test/auxiliary/struct_destructuring_cross_crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_destructuring_cross_crate.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -11,6 +11,6 @@\n #[crate_type=\"lib\"];\n \n pub struct S {\n-    x: int,\n-    y: int\n+    pub x: int,\n+    pub y: int,\n }"}, {"sha": "1a756e432c3d8a54de537968c7abd9d7be3af0ac", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -14,5 +14,5 @@\n #![feature(struct_variant)]\n \n pub enum Enum {\n-    Variant { arg: u8 }\n+    Variant { pub arg: u8 }\n }"}, {"sha": "535ebebc7223263708d44e77eaabae79c28e3947", "filename": "src/test/auxiliary/trait_default_method_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,7 +10,7 @@\n \n #[crate_id=\"trait_default_method_xc_aux\"];\n \n-pub struct Something { x: int }\n+pub struct Something { pub x: int }\n \n pub trait A {\n     fn f(&self) -> int;"}, {"sha": "984264a969cec8af2ce99f2c41fb21c5f2dc5f8c", "filename": "src/test/auxiliary/trait_default_method_xc_aux_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -13,7 +13,7 @@\n extern crate aux = \"trait_default_method_xc_aux\";\n use aux::A;\n \n-pub struct a_struct { x: int }\n+pub struct a_struct { pub x: int }\n \n impl A for a_struct {\n     fn f(&self) -> int { 10 }"}, {"sha": "9ef53795a26b44534c1ff0dc65cff8ac9c98d4e9", "filename": "src/test/auxiliary/trait_inheritance_auto_xc_2_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_auto_xc_2_aux.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -12,7 +12,7 @@ pub trait Foo { fn f(&self) -> int; }\n pub trait Bar { fn g(&self) -> int; }\n pub trait Baz { fn h(&self) -> int; }\n \n-pub struct A { x: int }\n+pub struct A { pub x: int }\n \n impl Foo for A { fn f(&self) -> int { 10 } }\n impl Bar for A { fn g(&self) -> int { 20 } }"}, {"sha": "0a84595124a12d366664db795398cc048377fc8e", "filename": "src/test/auxiliary/trait_inheritance_cross_trait_call_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_cross_trait_call_xc_aux.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -14,7 +14,7 @@ pub trait Foo {\n }\n \n pub struct A {\n-    x: int\n+    pub x: int\n }\n \n impl Foo for A {"}, {"sha": "4b7a72f50430c0eb044fb0664d198de2378101c8", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -15,7 +15,7 @@ pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + Eq {\n \n #[deriving(Show)]\n pub struct MyInt {\n-    val: int\n+    pub val: int\n }\n \n impl Add<MyInt, MyInt> for MyInt {"}, {"sha": "b9f15f1c54ea6a1ce5715fef16b9d439e2306833", "filename": "src/test/auxiliary/xc_private_method_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxc_private_method_lib.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -11,7 +11,7 @@\n #[crate_type=\"lib\"];\n \n pub struct Struct {\n-    x: int\n+    pub x: int\n }\n \n impl Struct {"}, {"sha": "736ac55aef545e7256124da3c724df08975f7a15", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -12,7 +12,7 @@\n \n mod my_mod {\n     pub struct MyStruct {\n-        priv priv_field: int\n+        priv_field: int\n     }\n     pub fn MyStruct () -> MyStruct {\n         MyStruct {priv_field: 4}"}, {"sha": "bf8933220bcd6165425e8937de703b8fd80c40c1", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -24,14 +24,14 @@ struct Foo {\n }\n \n pub struct PubFoo { //~ ERROR: missing documentation\n-    a: int,      //~ ERROR: missing documentation\n-    priv b: int,\n+    pub a: int,      //~ ERROR: missing documentation\n+    b: int,\n }\n \n #[allow(missing_doc)]\n pub struct PubFoo2 {\n-    a: int,\n-    c: int,\n+    pub a: int,\n+    pub c: int,\n }\n \n mod module_no_dox {}\n@@ -106,8 +106,8 @@ enum Baz {\n \n pub enum PubBaz { //~ ERROR: missing documentation\n     PubBazA { //~ ERROR: missing documentation\n-        a: int, //~ ERROR: missing documentation\n-        priv b: int\n+        pub a: int, //~ ERROR: missing documentation\n+        b: int\n     },\n \n     priv PubBazB\n@@ -118,17 +118,17 @@ pub enum PubBaz2 {\n     /// dox\n     PubBaz2A {\n         /// dox\n-        a: int,\n-        priv b: int\n+        pub a: int,\n+        b: int\n     },\n     priv PubBaz2B\n }\n \n #[allow(missing_doc)]\n pub enum PubBaz3 {\n     PubBaz3A {\n-        a: int,\n-        priv b: int\n+        pub a: int,\n+        b: int\n     },\n     priv PubBaz3B\n }"}, {"sha": "a25b211e481bf9f914b23bbaebdbe0050a680f8e", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -40,8 +40,8 @@ mod test {\n }\n \n mod foo {\n-    pub struct Point{x: int, y: int}\n-    pub struct Square{p: Point, h: uint, w: uint}\n+    pub struct Point{pub x: int, pub y: int}\n+    pub struct Square{pub p: Point, pub h: uint, pub w: uint}\n }\n \n mod bar {"}, {"sha": "7c387d0cf5642cac305150c28cb5f04da7984ea5", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -46,8 +46,8 @@ fn y(_: Private<int>) {}\n \n \n pub struct Foo {\n-    x: Private<int>, //~ ERROR private type in exported type signature\n-    priv y: Private<int>\n+    pub x: Private<int>, //~ ERROR private type in exported type signature\n+    y: Private<int>\n }\n \n struct Bar {\n@@ -57,8 +57,8 @@ struct Bar {\n pub enum Baz {\n     Baz1(Private<int>), //~ ERROR private type in exported type signature\n     Baz2 {\n-        x: Private<int>, //~ ERROR private type in exported type signature\n-        priv y: Private<int>\n+        pub x: Private<int>, //~ ERROR private type in exported type signature\n+        y: Private<int>\n     },\n \n     priv Baz3(Private<int>),"}, {"sha": "fe5908b40ab4fa4373d9da004a5977184c8160d6", "filename": "src/test/compile-fail/private-impl-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-impl-method.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,7 +10,7 @@\n \n mod a {\n     pub struct Foo {\n-        x: int\n+        pub x: int\n     }\n \n     impl Foo {"}, {"sha": "a5cee47d4e39a30dee2d355a9e07a03bac787363", "filename": "src/test/compile-fail/private-struct-field-ctor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-ctor.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,7 +10,7 @@\n \n mod a {\n     pub struct Foo {\n-        priv x: int\n+        x: int\n     }\n }\n "}, {"sha": "ee1303b99dd52dd398b3d390cc7bedd2cc6488a3", "filename": "src/test/compile-fail/private-struct-field-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-pattern.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -12,7 +12,7 @@ use a::Foo;\n \n mod a {\n     pub struct Foo {\n-        priv x: int\n+        x: int\n     }\n \n     pub fn make() -> Foo {"}, {"sha": "52e979342f57df732e3fe9b1096996269e388eca", "filename": "src/test/compile-fail/private-struct-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,7 +10,7 @@\n \n mod cat {\n     pub struct Cat {\n-        priv meows: uint\n+        meows: uint\n     }\n \n     pub fn new_cat() -> Cat {"}, {"sha": "b6ae7235bb3de75e1e09200550519bd3c53acedc", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -20,12 +20,10 @@ mod inner {\n     struct A {\n         a: int,\n         pub b: int,\n-        priv c: int, //~ ERROR: unnecessary `priv` visibility\n     }\n     pub struct B {\n-        a: int,\n-        priv b: int,\n-        pub c: int,\n+        pub a: int,\n+        b: int,\n     }\n }\n \n@@ -36,10 +34,8 @@ fn test(a: A, b: inner::A, c: inner::B, d: xc::A, e: xc::B) {\n     a.a;\n     b.a; //~ ERROR: field `a` is private\n     b.b;\n-    b.c; //~ ERROR: field `c` is private\n     c.a;\n     c.b; //~ ERROR: field `b` is private\n-    c.c;\n \n     d.a; //~ ERROR: field `a` is private\n     d.b;"}, {"sha": "9216c8aa1aef92c9218ac182cd3c43bf8e5e2f62", "filename": "src/test/run-pass/issue-3847.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Fissue-3847.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Fissue-3847.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3847.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod buildings {\n-    pub struct Tower { height: uint }\n+    pub struct Tower { pub height: uint }\n }\n \n pub fn main() {"}, {"sha": "168389bf2b879c06dcfb3a4f82079a5f48e5e826", "filename": "src/test/run-pass/issue-4830.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Fissue-4830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Fissue-4830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4830.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,7 +10,7 @@\n \n pub struct Scheduler {\n     /// The event loop used to drive the scheduler and perform I/O\n-    priv event_loop: ~int\n+    event_loop: ~int\n }\n \n pub fn main() { }"}, {"sha": "b1c1b64ba40033ef98c1f81f343d61320cc1aa2d", "filename": "src/test/run-pass/module-qualified-struct-destructure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-qualified-struct-destructure.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -10,8 +10,8 @@\n \n mod m {\n     pub struct S {\n-        x: int,\n-        y: int\n+        pub x: int,\n+        pub y: int\n     }\n }\n "}, {"sha": "1276171853f1cf6e92fd6b0fd0004127522060bd", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -29,8 +29,8 @@ impl<X, Y> Deref<Y> for DerefWrapper<X, Y> {\n \n mod priv_test {\n     pub struct DerefWrapperHideX<X, Y> {\n-        priv x: X,\n-        y: Y\n+        x: X,\n+        pub y: Y\n     }\n \n     impl<X, Y> DerefWrapperHideX<X, Y> {"}, {"sha": "0974efa00eef5d603bab620547d114dbc275d10c", "filename": "src/test/run-pass/trait-default-method-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0a80cca6c433e76daad13f7308a3e33abca77e0/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc.rs?ref=d0a80cca6c433e76daad13f7308a3e33abca77e0", "patch": "@@ -24,7 +24,7 @@ fn welp<T>(i: int, _x: &T) -> int {\n }\n \n mod stuff {\n-    pub struct thing { x: int }\n+    pub struct thing { pub x: int }\n }\n \n impl A for stuff::thing {"}]}