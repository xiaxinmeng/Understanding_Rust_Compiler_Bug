{"sha": "0f0f5db465de96b6c12e71f0c7d3e475f618b104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMGY1ZGI0NjVkZTk2YjZjMTJlNzFmMGM3ZDNlNDc1ZjYxOGIxMDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-02T10:06:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-02T10:06:32Z"}, "message": "Auto merge of #44959 - arielb1:generic-errors, r=eddyb\n\nhandle nested generics in Generics::type_param/region_param\n\nFixes #44952.\n\nr? @eddyb", "tree": {"sha": "fb11f65c37a760446c377baf92dbcc51e59100ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb11f65c37a760446c377baf92dbcc51e59100ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f0f5db465de96b6c12e71f0c7d3e475f618b104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f0f5db465de96b6c12e71f0c7d3e475f618b104", "html_url": "https://github.com/rust-lang/rust/commit/0f0f5db465de96b6c12e71f0c7d3e475f618b104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f0f5db465de96b6c12e71f0c7d3e475f618b104/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae6ed78acf9dc865e2300a7db556389eed9692d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae6ed78acf9dc865e2300a7db556389eed9692d", "html_url": "https://github.com/rust-lang/rust/commit/9ae6ed78acf9dc865e2300a7db556389eed9692d"}, {"sha": "706e52e2cc1e1ffab4face61f5906164236a0da8", "url": "https://api.github.com/repos/rust-lang/rust/commits/706e52e2cc1e1ffab4face61f5906164236a0da8", "html_url": "https://github.com/rust-lang/rust/commit/706e52e2cc1e1ffab4face61f5906164236a0da8"}], "stats": {"total": 147, "additions": 133, "deletions": 14}, "files": [{"sha": "895894a0bb2fc5ee1613f0d97ad2f6475ebb82db", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0f0f5db465de96b6c12e71f0c7d3e475f618b104", "patch": "@@ -794,8 +794,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let generics = self.tcx.generics_of(did);\n                     // Account for the case where `did` corresponds to `Self`, which doesn't have\n                     // the expected type argument.\n-                    if generics.types.len() > 0 {\n-                        let type_param = generics.type_param(param);\n+                    if !param.is_self() {\n+                        let type_param = generics.type_param(param, self.tcx);\n                         let hir = &self.tcx.hir;\n                         hir.as_local_node_id(type_param.def_id).map(|id| {\n                             // Get the `hir::TyParam` to verify wether it already has any bounds."}, {"sha": "bc5a056dd3386d396408a10ecc9d7364041c4db1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=0f0f5db465de96b6c12e71f0c7d3e475f618b104", "patch": "@@ -713,6 +713,13 @@ impl ty::EarlyBoundRegion {\n \n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to hir::Generics.\n+///\n+/// Note that in the presence of a `Self` parameter, the ordering here\n+/// is different from the ordering in a Substs. Substs are ordered as\n+///     Self, *Regions, *Other Type Params, (...child generics)\n+/// while this struct is ordered as\n+///     regions = Regions\n+///     types = [Self, *Other Type Params]\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct Generics {\n     pub parent: Option<DefId>,\n@@ -729,7 +736,7 @@ pub struct Generics {\n     pub has_late_bound_regions: Option<Span>,\n }\n \n-impl Generics {\n+impl<'a, 'gcx, 'tcx> Generics {\n     pub fn parent_count(&self) -> usize {\n         self.parent_regions as usize + self.parent_types as usize\n     }\n@@ -742,14 +749,52 @@ impl Generics {\n         self.parent_count() + self.own_count()\n     }\n \n-    pub fn region_param(&self, param: &EarlyBoundRegion) -> &RegionParameterDef {\n-        assert_eq!(self.parent_count(), 0);\n-        &self.regions[param.index as usize - self.has_self as usize]\n-    }\n-\n-    pub fn type_param(&self, param: &ParamTy) -> &TypeParameterDef {\n-        assert_eq!(self.parent_count(), 0);\n-        &self.types[param.idx as usize - self.has_self as usize - self.regions.len()]\n+    pub fn region_param(&'tcx self,\n+                        param: &EarlyBoundRegion,\n+                        tcx: TyCtxt<'a, 'gcx, 'tcx>)\n+                        -> &'tcx RegionParameterDef\n+    {\n+        if let Some(index) = param.index.checked_sub(self.parent_count() as u32) {\n+            &self.regions[index as usize - self.has_self as usize]\n+        } else {\n+            tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n+                .region_param(param, tcx)\n+        }\n+    }\n+\n+    /// Returns the `TypeParameterDef` associated with this `ParamTy`.\n+    pub fn type_param(&'tcx self,\n+                      param: &ParamTy,\n+                      tcx: TyCtxt<'a, 'gcx, 'tcx>)\n+                      -> &TypeParameterDef {\n+        if let Some(idx) = param.idx.checked_sub(self.parent_count() as u32) {\n+            // non-Self type parameters are always offset by exactly\n+            // `self.regions.len()`. In the absence of a Self, this is obvious,\n+            // but even in the absence of a `Self` we just have to \"compensate\"\n+            // for the regions:\n+            //\n+            // For example, for `trait Foo<'a, 'b, T1, T2>`, the\n+            // situation is:\n+            //     Substs:\n+            //         0   1  2  3  4\n+            //       Self 'a 'b  T1 T2\n+            //     generics.types:\n+            //         0  1  2\n+            //       Self T1 T2\n+            // And it can be seen that to move from a substs offset to a\n+            // generics offset you just have to offset by the number of regions.\n+            let type_param_offset = self.regions.len();\n+            if let Some(idx) = (idx as usize).checked_sub(type_param_offset) {\n+                assert!(!(self.has_self && idx == 0));\n+                &self.types[idx]\n+            } else {\n+                assert!(self.has_self && idx == 0);\n+                &self.types[0]\n+            }\n+        } else {\n+            tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n+                .type_param(param, tcx)\n+        }\n     }\n }\n "}, {"sha": "c8037ce081a71e6b5e47ef7e03db742b81069cd4", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0f0f5db465de96b6c12e71f0c7d3e475f618b104", "patch": "@@ -515,11 +515,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let result = item_substs.iter().zip(impl_substs.iter())\n             .filter(|&(_, &k)| {\n                 if let Some(&ty::RegionKind::ReEarlyBound(ref ebr)) = k.as_region() {\n-                    !impl_generics.region_param(ebr).pure_wrt_drop\n+                    !impl_generics.region_param(ebr, self).pure_wrt_drop\n                 } else if let Some(&ty::TyS {\n                     sty: ty::TypeVariants::TyParam(ref pt), ..\n                 }) = k.as_type() {\n-                    !impl_generics.type_param(pt).pure_wrt_drop\n+                    !impl_generics.type_param(pt, self).pure_wrt_drop\n                 } else {\n                     // not a type or region param - this should be reported\n                     // as an error."}, {"sha": "242520cdb32c73e027fda9d03bc01451bfbb242b", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.rs?ref=0f0f5db465de96b6c12e71f0c7d3e475f618b104", "patch": "@@ -28,4 +28,18 @@ struct Foo<T> {\n     foo: &'static T\n }\n \n+trait X<K>: Sized {\n+    fn foo<'a, L: X<&'a Nested<K>>>();\n+    // check that we give a sane error for `Self`\n+    fn bar<'a, L: X<&'a Nested<Self>>>();\n+}\n+\n+struct Nested<K>(K);\n+impl<K> Nested<K> {\n+    fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+    }\n+    fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "42e4f28260ea2bf202ec85aacf55fd2a17fc806b", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f0f5db465de96b6c12e71f0c7d3e475f618b104/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=0f0f5db465de96b6c12e71f0c7d3e475f618b104", "patch": "@@ -26,5 +26,65 @@ note: ...so that the reference type `&'static T` does not outlive the data it po\n 28 |     foo: &'static T\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0309]: the parameter type `K` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n+   |\n+31 | trait X<K>: Sized {\n+   |         - help: consider adding an explicit lifetime bound `K: 'a`...\n+32 |     fn foo<'a, L: X<&'a Nested<K>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:32:5\n+   |\n+32 |     fn foo<'a, L: X<&'a Nested<K>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `Self` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:34:5\n+   |\n+34 |     fn bar<'a, L: X<&'a Nested<Self>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding an explicit lifetime bound `Self: 'a`...\n+note: ...so that the reference type `&'a Nested<Self>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:34:5\n+   |\n+34 |     fn bar<'a, L: X<&'a Nested<Self>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0309]: the parameter type `K` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:39:5\n+   |\n+38 |   impl<K> Nested<K> {\n+   |        - help: consider adding an explicit lifetime bound `K: 'a`...\n+39 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+40 | |     }\n+   | |_____^\n+   |\n+note: ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:39:5\n+   |\n+39 | /     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+40 | |     }\n+   | |_____^\n+\n+error[E0309]: the parameter type `M` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n+   |\n+41 |       fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+   |       ^                                                -- help: consider adding an explicit lifetime bound `M: 'a`...\n+   |  _____|\n+   | |\n+42 | |     }\n+   | |_____^\n+   |\n+note: ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:5\n+   |\n+41 | /     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+42 | |     }\n+   | |_____^\n+\n+error: aborting due to 6 previous errors\n "}]}