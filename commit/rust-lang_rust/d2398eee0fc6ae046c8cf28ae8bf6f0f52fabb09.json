{"sha": "d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzk4ZWVlMGZjNmFlMDQ2YzhjZjI4YWU4YmY2ZjBmNTJmYWJiMDk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-12T07:08:34Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-12T07:08:34Z"}, "message": "allow escaping bound vars when normalizing `ty::Opaque`", "tree": {"sha": "5de8d54bc1f4c758136b859f960253d2e1cd4b6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de8d54bc1f4c758136b859f960253d2e1cd4b6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09", "html_url": "https://github.com/rust-lang/rust/commit/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "html_url": "https://github.com/rust-lang/rust/commit/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "316181ce7d4a9291f53f19464a9e0ad16dbac0bb", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09", "patch": "@@ -324,8 +324,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n \n         let ty = ty.super_fold_with(self);\n         match ty.kind {\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n-                // (*)\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty,\n@@ -353,9 +352,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             }\n \n             ty::Projection(ref data) if !data.has_escaping_bound_vars() => {\n-                // (*)\n-\n-                // (*) This is kind of hacky -- we need to be able to\n+                // This is kind of hacky -- we need to be able to\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait"}, {"sha": "93652329305a5bc98482ff0b0eaeee2aaa5f5d5c", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09", "patch": "@@ -101,8 +101,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n \n         let ty = ty.super_fold_with(self);\n         match ty.kind {\n-            ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {\n-                // (*)\n+            ty::Opaque(def_id, substs) => {\n                 // Only normalize `impl Trait` after type-checking, usually in codegen.\n                 match self.param_env.reveal() {\n                     Reveal::UserFacing => ty,\n@@ -140,8 +139,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             }\n \n             ty::Projection(ref data) if !data.has_escaping_bound_vars() => {\n-                // (*)\n-                // (*) This is kind of hacky -- we need to be able to\n+                // This is kind of hacky -- we need to be able to\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait"}, {"sha": "a8741befb0cfe176d844804f0f539b579cc108c2", "filename": "src/test/ui/mir/issue-75419-validation-impl-trait.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09/src%2Ftest%2Fui%2Fmir%2Fissue-75419-validation-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09/src%2Ftest%2Fui%2Fmir%2Fissue-75419-validation-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75419-validation-impl-trait.rs?ref=d2398eee0fc6ae046c8cf28ae8bf6f0f52fabb09", "patch": "@@ -0,0 +1,13 @@\n+// build-pass\n+\n+// This used to fail MIR validation due to the types on both sides of\n+// an assignment not being equal.\n+// The failure doesn't occur with a check-only build.\n+\n+fn iter_slice<'a, T>(xs: &'a [T]) -> impl Iterator<Item = &'a T> {\n+    xs.iter()\n+}\n+\n+fn main() {\n+    iter_slice::<()> as fn(_) -> _;\n+}"}]}