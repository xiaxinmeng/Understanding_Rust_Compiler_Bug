{"sha": "1cb22e4138ad977c51d66744e40ce2a22d7cd528", "node_id": "C_kwDOAAsO6NoAKDFjYjIyZTQxMzhhZDk3N2M1MWQ2Njc0NGU0MGNlMmEyMmQ3Y2Q1Mjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-31T05:58:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T05:58:29Z"}, "message": "Rollup merge of #93155 - dtolnay:blockindent, r=nagisa\n\nSwitch pretty printer to block-based indentation\n\nThis PR backports https://github.com/dtolnay/prettyplease/commit/401d60c04213e6c66565e0e69a95b4588db5fdba from the `prettyplease` crate into `rustc_ast_pretty`.\n\nA before and after:\n\n```diff\n- let res =\n-     ((::alloc::fmt::format as\n-          for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n-                                                             as\n-                                                             fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                                                                                                                          as\n-                                                                                                                                          &str)]\n-                                                                                                                                        as\n-                                                                                                                                        [&str; 1])\n-                                                                                                                                      as\n-                                                                                                                                      &[&str; 1]),\n-                                                                                                                                  (&([]\n-                                                                                                                                        as\n-                                                                                                                                        [ArgumentV1; 0])\n-                                                                                                                                      as\n-                                                                                                                                      &[ArgumentV1; 0]))\n-                                                            as\n-                                                            Arguments))\n-         as String);\n+ let res =\n+     ((::alloc::fmt::format as\n+             for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n+                 as\n+                 fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                             as &str)] as [&str; 1]) as\n+                 &[&str; 1]),\n+             (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n+             Arguments)) as String);\n```\n\nPreviously the pretty printer would compute indentation always relative to whatever column a block begins at, like this:\n\n```rust\nfn demo(arg1: usize,\n        arg2: usize);\n```\n\nThis is never the thing to do in the dominant contemporary Rust style. Rustfmt's default and the style used by the vast majority of Rust codebases is block indentation:\n\n```rust\nfn demo(\n    arg1: usize,\n    arg2: usize,\n);\n```\n\nwhere every indentation level is a multiple of 4 spaces and each level is indented relative to the indentation of the previous line, not the position that the block starts in.\n\nBy itself this PR doesn't get perfect formatting in all cases, but it is the smallest possible step in clearly the right direction. More backports from `prettyplease` to tune the ibox/cbox indent levels around various AST node types are upcoming.", "tree": {"sha": "483bae83e901745b9ef6cf1d14dce924ec71908b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483bae83e901745b9ef6cf1d14dce924ec71908b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cb22e4138ad977c51d66744e40ce2a22d7cd528", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh93qFCRBK7hj4Ov3rIwAAWFQIAJQKg2xpky5aJTaA7harPf2C\nxjhZF4t+J7wcRTVC6SZpCO6XtfsSD/3gD/wpRBU/gkSwsod6ts8AIuTdJEhmRQeo\nYXarsXszq8e92rufEHr/fOmc0X+ueZcWolNhCNz6YgKj6MP69ZQdDw1XqA7dCztY\ny6/CQjlHGTGY9VLHMIcIrnWi7uAYRcMfpcraubCh4utPZhEDJf10tI0n/U3GR5lG\nemSosF1DsXvhXHJ4YiAIs4a5GybJQQAyI8KxlPR7qmEw4Mvsuq0n/bYHNioHNlm3\neuiUBBFRBpiSEFd9hfptHssQrlVo+DhaURtorVhNWFD+tVwqCcWyUM56VMCeVAk=\n=ANQG\n-----END PGP SIGNATURE-----\n", "payload": "tree 483bae83e901745b9ef6cf1d14dce924ec71908b\nparent 71efe90889bd5f91d1e67549b6a19d8a2c795da5\nparent 125c729e05e563b1e20b52c1b7203e3ac4feab7c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643608709 +0100\ncommitter GitHub <noreply@github.com> 1643608709 +0100\n\nRollup merge of #93155 - dtolnay:blockindent, r=nagisa\n\nSwitch pretty printer to block-based indentation\n\nThis PR backports https://github.com/dtolnay/prettyplease/commit/401d60c04213e6c66565e0e69a95b4588db5fdba from the `prettyplease` crate into `rustc_ast_pretty`.\n\nA before and after:\n\n```diff\n- let res =\n-     ((::alloc::fmt::format as\n-          for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n-                                                             as\n-                                                             fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                                                                                                                          as\n-                                                                                                                                          &str)]\n-                                                                                                                                        as\n-                                                                                                                                        [&str; 1])\n-                                                                                                                                      as\n-                                                                                                                                      &[&str; 1]),\n-                                                                                                                                  (&([]\n-                                                                                                                                        as\n-                                                                                                                                        [ArgumentV1; 0])\n-                                                                                                                                      as\n-                                                                                                                                      &[ArgumentV1; 0]))\n-                                                            as\n-                                                            Arguments))\n-         as String);\n+ let res =\n+     ((::alloc::fmt::format as\n+             for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n+                 as\n+                 fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                             as &str)] as [&str; 1]) as\n+                 &[&str; 1]),\n+             (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n+             Arguments)) as String);\n```\n\nPreviously the pretty printer would compute indentation always relative to whatever column a block begins at, like this:\n\n```rust\nfn demo(arg1: usize,\n        arg2: usize);\n```\n\nThis is never the thing to do in the dominant contemporary Rust style. Rustfmt's default and the style used by the vast majority of Rust codebases is block indentation:\n\n```rust\nfn demo(\n    arg1: usize,\n    arg2: usize,\n);\n```\n\nwhere every indentation level is a multiple of 4 spaces and each level is indented relative to the indentation of the previous line, not the position that the block starts in.\n\nBy itself this PR doesn't get perfect formatting in all cases, but it is the smallest possible step in clearly the right direction. More backports from `prettyplease` to tune the ibox/cbox indent levels around various AST node types are upcoming.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb22e4138ad977c51d66744e40ce2a22d7cd528", "html_url": "https://github.com/rust-lang/rust/commit/1cb22e4138ad977c51d66744e40ce2a22d7cd528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cb22e4138ad977c51d66744e40ce2a22d7cd528/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71efe90889bd5f91d1e67549b6a19d8a2c795da5", "url": "https://api.github.com/repos/rust-lang/rust/commits/71efe90889bd5f91d1e67549b6a19d8a2c795da5", "html_url": "https://github.com/rust-lang/rust/commit/71efe90889bd5f91d1e67549b6a19d8a2c795da5"}, {"sha": "125c729e05e563b1e20b52c1b7203e3ac4feab7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/125c729e05e563b1e20b52c1b7203e3ac4feab7c", "html_url": "https://github.com/rust-lang/rust/commit/125c729e05e563b1e20b52c1b7203e3ac4feab7c"}], "stats": {"total": 539, "additions": 276, "deletions": 263}, "files": [{"sha": "e1f43cb20dc383672f9cb923cc3739f6e93f7628", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -146,6 +146,22 @@ pub enum Breaks {\n     Inconsistent,\n }\n \n+#[derive(Clone, Copy)]\n+enum IndentStyle {\n+    /// Vertically aligned under whatever column this block begins at.\n+    ///\n+    ///     fn demo(arg1: usize,\n+    ///             arg2: usize);\n+    Visual,\n+    /// Indented relative to the indentation level of the previous line.\n+    ///\n+    ///     fn demo(\n+    ///         arg1: usize,\n+    ///         arg2: usize,\n+    ///     );\n+    Block { offset: isize },\n+}\n+\n #[derive(Clone, Copy)]\n pub struct BreakToken {\n     offset: isize,\n@@ -154,7 +170,7 @@ pub struct BreakToken {\n \n #[derive(Clone, Copy)]\n pub struct BeginToken {\n-    offset: isize,\n+    indent: IndentStyle,\n     breaks: Breaks,\n }\n \n@@ -178,7 +194,7 @@ impl Token {\n #[derive(Copy, Clone)]\n enum PrintFrame {\n     Fits,\n-    Broken { offset: isize, breaks: Breaks },\n+    Broken { indent: usize, breaks: Breaks },\n }\n \n const SIZE_INFINITY: isize = 0xffff;\n@@ -204,6 +220,8 @@ pub struct Printer {\n     scan_stack: VecDeque<usize>,\n     /// Stack of blocks-in-progress being flushed by print\n     print_stack: Vec<PrintFrame>,\n+    /// Level of indentation of current line\n+    indent: usize,\n     /// Buffered indentation to avoid writing trailing whitespace\n     pending_indentation: isize,\n     /// The token most recently popped from the left boundary of the\n@@ -229,6 +247,7 @@ impl Printer {\n             right_total: 0,\n             scan_stack: VecDeque::new(),\n             print_stack: Vec::new(),\n+            indent: 0,\n             pending_indentation: 0,\n             last_printed: None,\n         }\n@@ -368,38 +387,41 @@ impl Printer {\n         *self\n             .print_stack\n             .last()\n-            .unwrap_or(&PrintFrame::Broken { offset: 0, breaks: Breaks::Inconsistent })\n+            .unwrap_or(&PrintFrame::Broken { indent: 0, breaks: Breaks::Inconsistent })\n     }\n \n     fn print_begin(&mut self, token: BeginToken, size: isize) {\n         if size > self.space {\n-            let col = self.margin - self.space + token.offset;\n-            self.print_stack.push(PrintFrame::Broken { offset: col, breaks: token.breaks });\n+            self.print_stack.push(PrintFrame::Broken { indent: self.indent, breaks: token.breaks });\n+            self.indent = match token.indent {\n+                IndentStyle::Block { offset } => (self.indent as isize + offset) as usize,\n+                IndentStyle::Visual => (self.margin - self.space) as usize,\n+            };\n         } else {\n             self.print_stack.push(PrintFrame::Fits);\n         }\n     }\n \n     fn print_end(&mut self) {\n-        self.print_stack.pop().unwrap();\n+        if let PrintFrame::Broken { indent, .. } = self.print_stack.pop().unwrap() {\n+            self.indent = indent;\n+        }\n     }\n \n     fn print_break(&mut self, token: BreakToken, size: isize) {\n-        let break_offset =\n-            match self.get_top() {\n-                PrintFrame::Fits => None,\n-                PrintFrame::Broken { offset, breaks: Breaks::Consistent } => Some(offset),\n-                PrintFrame::Broken { offset, breaks: Breaks::Inconsistent } => {\n-                    if size > self.space { Some(offset) } else { None }\n-                }\n-            };\n-        if let Some(offset) = break_offset {\n-            self.out.push('\\n');\n-            self.pending_indentation = offset + token.offset;\n-            self.space = self.margin - (offset + token.offset);\n-        } else {\n+        let fits = match self.get_top() {\n+            PrintFrame::Fits => true,\n+            PrintFrame::Broken { breaks: Breaks::Consistent, .. } => false,\n+            PrintFrame::Broken { breaks: Breaks::Inconsistent, .. } => size <= self.space,\n+        };\n+        if fits {\n             self.pending_indentation += token.blank_space;\n             self.space -= token.blank_space;\n+        } else {\n+            self.out.push('\\n');\n+            let indent = self.indent as isize + token.offset;\n+            self.pending_indentation = indent;\n+            self.space = self.margin - indent;\n         }\n     }\n \n@@ -422,7 +444,10 @@ impl Printer {\n \n     /// \"raw box\"\n     pub fn rbox(&mut self, indent: usize, breaks: Breaks) {\n-        self.scan_begin(BeginToken { offset: indent as isize, breaks })\n+        self.scan_begin(BeginToken {\n+            indent: IndentStyle::Block { offset: indent as isize },\n+            breaks,\n+        })\n     }\n \n     /// Inconsistent breaking box\n@@ -435,6 +460,10 @@ impl Printer {\n         self.rbox(indent, Breaks::Consistent)\n     }\n \n+    pub fn visual_align(&mut self) {\n+        self.scan_begin(BeginToken { indent: IndentStyle::Visual, breaks: Breaks::Consistent });\n+    }\n+\n     pub fn break_offset(&mut self, n: usize, off: isize) {\n         self.scan_break(BreakToken { offset: off, blank_space: n as isize })\n     }"}, {"sha": "b575dc21961337b0976f5ae4c0d06deabc33988b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -315,7 +315,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n                     self.word(cmnt.lines[0].clone());\n                     self.hardbreak()\n                 } else {\n-                    self.ibox(0);\n+                    self.visual_align();\n                     for line in &cmnt.lines {\n                         if !line.is_empty() {\n                             self.word(line.clone());\n@@ -655,7 +655,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         // Outer-box is consistent.\n         self.cbox(INDENT_UNIT);\n         // Head-box is inconsistent.\n-        self.ibox(w.len() + 1);\n+        self.ibox(0);\n         // Keyword that starts the head.\n         if !w.is_empty() {\n             self.word_nbsp(w);"}, {"sha": "6a5bba30b8bca8b1ef0a0ad8faf5703d321a8ec3", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -320,7 +320,9 @@ impl<'a> State<'a> {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");\n                 }\n-                self.head(\"while\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"while\");\n                 self.print_expr_as_cond(test);\n                 self.space();\n                 self.print_block_with_attrs(blk, attrs);\n@@ -330,7 +332,9 @@ impl<'a> State<'a> {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");\n                 }\n-                self.head(\"for\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"for\");\n                 self.print_pat(pat);\n                 self.space();\n                 self.word_space(\"in\");\n@@ -343,12 +347,14 @@ impl<'a> State<'a> {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");\n                 }\n-                self.head(\"loop\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"loop\");\n                 self.print_block_with_attrs(blk, attrs);\n             }\n             ast::ExprKind::Match(ref expr, ref arms) => {\n-                self.cbox(INDENT_UNIT);\n-                self.ibox(INDENT_UNIT);\n+                self.cbox(0);\n+                self.ibox(0);\n                 self.word_nbsp(\"match\");\n                 self.print_expr_as_cond(expr);\n                 self.space();\n@@ -388,7 +394,7 @@ impl<'a> State<'a> {\n                     self.word_space(\":\");\n                 }\n                 // containing cbox, will be closed by print-block at }\n-                self.cbox(INDENT_UNIT);\n+                self.cbox(0);\n                 // head-box, will be closed by print-block after {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n@@ -397,7 +403,7 @@ impl<'a> State<'a> {\n                 self.word_nbsp(\"async\");\n                 self.print_capture_clause(capture_clause);\n                 // cbox/ibox in analogy to the `ExprKind::Block` arm above\n-                self.cbox(INDENT_UNIT);\n+                self.cbox(0);\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n@@ -500,7 +506,9 @@ impl<'a> State<'a> {\n                 self.word(\"?\")\n             }\n             ast::ExprKind::TryBlock(ref blk) => {\n-                self.head(\"try\");\n+                self.cbox(0);\n+                self.ibox(0);\n+                self.word_nbsp(\"try\");\n                 self.print_block_with_attrs(blk, attrs)\n             }\n             ast::ExprKind::Err => {"}, {"sha": "dac84ae9d5fc87fcbf4fda40a9f247d88e29bd5e", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -1,5 +1,5 @@\n use crate::pp::Breaks::Inconsistent;\n-use crate::pprust::state::{AnnNode, PrintState, State, INDENT_UNIT};\n+use crate::pprust::state::{AnnNode, PrintState, State};\n \n use rustc_ast as ast;\n use rustc_ast::GenericBound;\n@@ -377,7 +377,7 @@ impl<'a> State<'a> {\n             self.space_if_not_bol();\n             self.maybe_print_comment(v.span.lo());\n             self.print_outer_attributes(&v.attrs);\n-            self.ibox(INDENT_UNIT);\n+            self.ibox(0);\n             self.print_variant(v);\n             self.word(\",\");\n             self.end();"}, {"sha": "2404b321942890ed841d897e8df1913493b646bb", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -28,67 +28,67 @@ fn syntax() {\n     let _ = #[attr] (x as Y);\n     let _ =\n         #[attr] while true {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] while let Some(false) = true {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] for x in y {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] loop {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] match true {\n-                    #![attr]\n-                            #[attr]\n-                            _ => false,\n-                };\n+            #![attr]\n+                #[attr]\n+                _ => false,\n+        };\n     let _ = #[attr] || #[attr] foo;\n     let _ = #[attr] move || #[attr] foo;\n     let _ =\n         #[attr] ||\n-                    #[attr] {\n-                                #![attr]\n-                                foo\n-                            };\n+            #[attr] {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] move ||\n-                    #[attr] {\n-                                #![attr]\n-                                foo\n-                            };\n+            #[attr] {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] ||\n-                    {\n-                        #![attr]\n-                        foo\n-                    };\n+            {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] move ||\n-                    {\n-                        #![attr]\n-                        foo\n-                    };\n+            {\n+                #![attr]\n+                foo\n+            };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                };\n+            #![attr]\n+        };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                };\n+            #![attr]\n+            let _ = ();\n+        };\n     let _ =\n         #[attr] {\n-                    #![attr]\n-                    let _ = ();\n-                    foo\n-                };\n+            #![attr]\n+            let _ = ();\n+            foo\n+        };\n     let _ = #[attr] x = y;\n     let _ = #[attr] (x = y);\n     let _ = #[attr] x += y;"}, {"sha": "8c8580b07c218873f5bb8672289ed5853e1c8cca", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -93,9 +93,9 @@\n     // Taken from https://www.unicode.org/Public/UNIDATA/PropList.txt\n     let chars =\n         ['\\x0A', '\\x0B', '\\x0C', '\\x0D', '\\x20', '\\u{85}', '\\u{A0}',\n-         '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n-         '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n-         '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n-         '\\u{205F}', '\\u{3000}'];\n+                '\\u{1680}', '\\u{2000}', '\\u{2001}', '\\u{2002}', '\\u{2003}',\n+                '\\u{2004}', '\\u{2005}', '\\u{2006}', '\\u{2007}', '\\u{2008}',\n+                '\\u{2009}', '\\u{200A}', '\\u{2028}', '\\u{2029}', '\\u{202F}',\n+                '\\u{205F}', '\\u{3000}'];\n     for c in &chars { let ws = c.is_whitespace(); println!(\"{} {}\", c, ws); }\n }"}, {"sha": "c7c9277faf69ebc18e01474ece4237c20f6cfb93", "filename": "src/test/pretty/delimited-token-groups.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdelimited-token-groups.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -17,32 +17,32 @@ mac! {\n \n mac! {\n     a(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-      aaaaaaaa aaaaaaaa) a\n+    aaaaaaaa aaaaaaaa) a\n     [aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa] a\n+    aaaaaaaa aaaaaaaa] a\n     {\n         aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n         aaaaaaaa aaaaaaaa aaaaaaaa\n     } a\n }\n \n mac!(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa);\n+aaaaaaaa aaaaaaaa);\n mac![aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-     aaaaaaaa aaaaaaaa];\n+aaaaaaaa aaaaaaaa];\n mac! {\n     aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n     aaaaaaaa aaaaaaaa\n }\n \n #[rustc_dummy(aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-              aaaaaaaa aaaaaaaa aaaaaaaa)]\n+aaaaaaaa aaaaaaaa aaaaaaaa)]\n #[rustc_dummy[aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-              aaaaaaaa aaaaaaaa aaaaaaaa]]\n+aaaaaaaa aaaaaaaa aaaaaaaa]]\n #[rustc_dummy {\n-      aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n-      aaaaaaaa aaaaaaaa\n-  }]\n+    aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\n+    aaaaaaaa aaaaaaaa\n+}]\n #[rustc_dummy =\n-  \"aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\"]\n+\"aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa\"]\n fn main() {}"}, {"sha": "3830c3aa6c9f191beb7a50ba2499d18b3a31a03c", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -11,15 +11,15 @@\n pub fn foo(_: [i32; (3 as usize)]) ({ } as ())\n \n pub fn bar() ({\n-                  const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n-                  let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n+        const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n+        let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n \n-                  let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n+        let _: [(); (1 as usize)] = ([(() as ())] as [(); 1]);\n \n-                  let _ =\n-                      (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])\n-                            as &[i32; 3]) as *const _ as *const [i32; 3]) as\n-                          *const [i32; (3 as usize)] as *const [i32; 3]);\n+        let _ =\n+            (((&([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3]) as\n+                        &[i32; 3]) as *const _ as *const [i32; 3]) as\n+                *const [i32; (3 as usize)] as *const [i32; 3]);\n \n \n \n@@ -29,29 +29,19 @@\n \n \n \n-                  ({\n-                       let res =\n-                           ((::alloc::fmt::format as\n-                                for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n-                                                                                   as\n-                                                                                   fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n-                                                                                                                                                                as\n-                                                                                                                                                                &str)]\n-                                                                                                                                                              as\n-                                                                                                                                                              [&str; 1])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[&str; 1]),\n-                                                                                                                                                        (&([]\n-                                                                                                                                                              as\n-                                                                                                                                                              [ArgumentV1; 0])\n-                                                                                                                                                            as\n-                                                                                                                                                            &[ArgumentV1; 0]))\n-                                                                                  as\n-                                                                                  Arguments))\n-                               as String);\n-                       (res as String)\n-                   } as String);\n-              } as ())\n+        ({\n+                let res =\n+                    ((::alloc::fmt::format as\n+                            for<'r> fn(Arguments<'r>) -> String {format})(((::core::fmt::Arguments::new_v1\n+                                as\n+                                fn(&[&'static str], &[ArgumentV1]) -> Arguments {Arguments::new_v1})((&([(\"test\"\n+                                            as &str)] as [&str; 1]) as\n+                                &[&str; 1]),\n+                            (&([] as [ArgumentV1; 0]) as &[ArgumentV1; 0])) as\n+                            Arguments)) as String);\n+                (res as String)\n+            } as String);\n+    } as ())\n pub type Foo = [i32; (3 as usize)];\n pub struct Bar {\n     pub x: [i32; (3 as usize)],\n@@ -60,19 +50,9 @@\n pub enum Baz { BazVariant([i32; (5 as usize)]), }\n pub fn id<T>(x: T) -> T ({ (x as T) } as T)\n pub fn use_id() ({\n-                     let _ =\n-                         ((id::<[i32; (3 as usize)]> as\n-                              fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1\n-                                                                               as\n-                                                                               i32),\n-                                                                           (2\n-                                                                               as\n-                                                                               i32),\n-                                                                           (3\n-                                                                               as\n-                                                                               i32)]\n-                                                                             as\n-                                                                             [i32; 3]))\n-                             as [i32; 3]);\n-                 } as ())\n+        let _ =\n+            ((id::<[i32; (3 as usize)]> as\n+                    fn([i32; 3]) -> [i32; 3] {id::<[i32; 3]>})(([(1 as i32),\n+                        (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3]);\n+    } as ())\n fn main() ({ } as ())"}, {"sha": "87f525a6178e63ac6eb4c805a4d4cb5ef5440252", "filename": "src/test/pretty/issue-68710-field-attr-proc-mac-lost.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-68710-field-attr-proc-mac-lost.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -9,8 +9,8 @@ struct C {\n #[allow()]\n const C: C =\n     C{\n-      #[cfg(debug_assertions)]\n-      field: 0,\n+        #[cfg(debug_assertions)]\n+        field: 0,\n \n-      #[cfg(not(debug_assertions))]\n-      field: 1,};\n+        #[cfg(not(debug_assertions))]\n+        field: 1,};"}, {"sha": "01adb14133b3536f5cdf42715c8fec0217398de2", "filename": "src/test/pretty/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro_rules.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -12,8 +12,8 @@ macro_rules! matcher_brackets {\n \n macro_rules! all_fragments {\n     ($b : block, $e : expr, $i : ident, $it : item, $l : lifetime, $lit :\n-     literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n-     $vis : vis) => {} ;\n+    literal, $m : meta, $p : pat, $pth : path, $s : stmt, $tt : tt, $ty : ty,\n+    $vis : vis) => {} ;\n }\n \n fn main() {}"}, {"sha": "836af99002d65cd0282c00c8f1b52944e6b8530d", "filename": "src/test/pretty/match-naked-expr-medium.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmatch-naked-expr-medium.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -5,10 +5,10 @@ fn main() {\n     let _y =\n         match x {\n             Some(_) =>\n-            [\"some(_)\".to_string(), \"not\".to_string(), \"SO\".to_string(),\n-             \"long\".to_string(), \"string\".to_string()],\n+                [\"some(_)\".to_string(), \"not\".to_string(), \"SO\".to_string(),\n+                        \"long\".to_string(), \"string\".to_string()],\n             None =>\n-            [\"none\".to_string(), \"a\".to_string(), \"a\".to_string(),\n-             \"a\".to_string(), \"a\".to_string()],\n+                [\"none\".to_string(), \"a\".to_string(), \"a\".to_string(),\n+                        \"a\".to_string(), \"a\".to_string()],\n         };\n }"}, {"sha": "96bde96200af9a3312a1067a290b8330eec8108a", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -48,9 +48,9 @@ fn _4() {\n \n     let _ =\n         #[rustc_dummy] match () {\n-                           #![rustc_dummy]\n-                           () => (),\n-                       };\n+            #![rustc_dummy]\n+            () => (),\n+        };\n }\n \n fn _5() {\n@@ -156,56 +156,56 @@ fn _11() {\n     let _ = #[rustc_dummy] 0 as usize;\n     let _ =\n         #[rustc_dummy] while false {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] while let None = Some(()) {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] for _ in 0..0 {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] loop {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] match false {\n-                           #![rustc_dummy]\n-                           _ => (),\n-                       };\n+            #![rustc_dummy]\n+            _ => (),\n+        };\n     let _ = #[rustc_dummy] || #[rustc_dummy] ();\n     let _ = #[rustc_dummy] move || #[rustc_dummy] ();\n     let _ =\n         #[rustc_dummy] ||\n-                           {\n-                               #![rustc_dummy]\n-                               #[rustc_dummy]\n-                               ()\n-                           };\n+            {\n+                #![rustc_dummy]\n+                #[rustc_dummy]\n+                ()\n+            };\n     let _ =\n         #[rustc_dummy] move ||\n-                           {\n-                               #![rustc_dummy]\n-                               #[rustc_dummy]\n-                               ()\n-                           };\n+            {\n+                #![rustc_dummy]\n+                #[rustc_dummy]\n+                ()\n+            };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                       };\n+            #![rustc_dummy]\n+        };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                           let _ = ();\n-                       };\n+            #![rustc_dummy]\n+            let _ = ();\n+        };\n     let _ =\n         #[rustc_dummy] {\n-                           #![rustc_dummy]\n-                           let _ = ();\n-                           ()\n-                       };\n+            #![rustc_dummy]\n+            let _ = ();\n+            ()\n+        };\n     let mut x = 0;\n     let _ = #[rustc_dummy] x = 15;\n     let _ = #[rustc_dummy] x += 15;"}, {"sha": "f2f807c59de99cf9b184476aa7940041a2c3e5a7", "filename": "src/test/pretty/vec-comments.pp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fvec-comments.pp", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fpretty%2Fvec-comments.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fvec-comments.pp?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -4,26 +4,26 @@\n fn main() {\n     let _v1 =\n         [\n-         // Comment\n-         0,\n-         // Comment\n-         1,\n-         // Comment\n-         2];\n+                // Comment\n+                0,\n+                // Comment\n+                1,\n+                // Comment\n+                2];\n     let _v2 =\n         [0, // Comment\n-         1, // Comment\n-         2]; // Comment\n+                1, // Comment\n+                2]; // Comment\n     let _v3 =\n         [\n-         /* Comment */\n-         0,\n-         /* Comment */\n-         1,\n-         /* Comment */\n-         2];\n+                /* Comment */\n+                0,\n+                /* Comment */\n+                1,\n+                /* Comment */\n+                2];\n     let _v4 =\n         [0, /* Comment */\n-         1, /* Comment */\n-         2]; /* Comment */\n+                1, /* Comment */\n+                2]; /* Comment */\n }"}, {"sha": "1b7cb76b55366d194c452fec72f66a0c4de67686", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -16,11 +16,11 @@ LL | bug!();\n    = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `{\n-           let res =\n-               ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n-                                                                   &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n-           res\n-       }.as_str()`\n+               let res =\n+                   ::alloc::fmt::format(::core::fmt::Arguments::new_v1(&[\"\"],\n+                           &[::core::fmt::ArgumentV1::new_display(&\"u8\")]));\n+               res\n+           }.as_str()`\n   --> $DIR/key-value-expansion.rs:48:23\n    |\n LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}"}, {"sha": "121138605f1a2f1a50ce63da1c4da4f34a486587", "filename": "src/test/ui/const-generics/defaults/pretty-printing-ast.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fpretty-printing-ast.stdout?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -15,4 +15,4 @@ trait Foo<const KIND : bool = true> {}\n fn foo<const SIZE : usize = 5>() {}\n \n struct Range<const FROM : usize = 0, const LEN : usize = 0, const TO : usize =\n-             FROM>;\n+    FROM>;"}, {"sha": "2054d43c40957d9f4075aa9fcb9c844bcc615a71", "filename": "src/test/ui/match/issue-82392.stdout", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-82392.stdout?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -7,13 +7,11 @@ extern crate std;\n // check-pass\n \n pub fn main() ({\n-                   (if (true as bool)\n-                       ({ } as\n-                           ()) else if (let Some(a) =\n-                                           ((Some as\n-                                                fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n-                                                                                                  as\n-                                                                                                  i32))\n-                                               as Option<i32>) as bool)\n-                              ({ } as ()) as ())\n-                             } as ())\n+        (if (true as bool)\n+                ({ } as\n+                    ()) else if (let Some(a) =\n+                       ((Some as\n+                               fn(i32) -> Option<i32> {Option::<i32>::Some})((3\n+                               as i32)) as Option<i32>) as bool) ({ } as ())\n+                   as ())\n+               } as ())"}, {"sha": "9d25def587cd60bcd0bff622382540472bf56b33", "filename": "src/test/ui/proc-macro/cfg-eval-inner.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcfg-eval-inner.stdout?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -1,9 +1,9 @@\n PRINT-ATTR INPUT (DISPLAY): impl Foo <\n [u8 ;\n- {\n-     #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n-     { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n- }] > { #! [rustc_dummy(evaluated_attr)] fn bar() {} }\n+{\n+    #! [rustc_dummy(cursed_inner)] #! [allow(unused)] struct Inner\n+    { field : [u8 ; { #! [rustc_dummy(another_cursed_inner)] 1 }] } 0\n+}] > { #! [rustc_dummy(evaluated_attr)] fn bar() {} }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"impl\","}, {"sha": "c81fa201cbcf5e41f67b297bd12b64d9b8d652c7", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -4,23 +4,23 @@ struct Foo < #[cfg(FALSE)] A, B >\n     #[cfg(FALSE)] first : String, #[cfg_attr(FALSE, deny(warnings))] second :\n     bool, third :\n     [u8 ;\n-     {\n-         #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n-         #[cfg(FALSE)] let a = 25 ; match true\n-         {\n-             #[cfg(FALSE)] true => {},\n-             #[cfg_attr(not(FALSE), allow(warnings))] false => {}, _ => {}\n-         } ; #[print_helper(should_be_removed)] fn removed_fn()\n-         { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn\n-         kept_fn() { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n-         {\n-             Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n-                 #[cfg(FALSE)] String, u8)\n-         } struct\n-         TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n-                     #[cfg(FALSE)] bool, u8) ; fn plain_removed_fn()\n-         { #! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n-     }], #[print_helper(d)] fourth : B\n+    {\n+        #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n+        #[cfg(FALSE)] let a = 25 ; match true\n+        {\n+            #[cfg(FALSE)] true => {}, #[cfg_attr(not(FALSE), allow(warnings))]\n+            false => {}, _ => {}\n+        } ; #[print_helper(should_be_removed)] fn removed_fn()\n+        { #! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn kept_fn()\n+        { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+        {\n+            Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n+            #[cfg(FALSE)] String, u8)\n+        } struct\n+        TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n+        #[cfg(FALSE)] bool, u8) ; fn plain_removed_fn()\n+        { #! [cfg_attr(not(FALSE), cfg(FALSE))] } 0\n+    }], #[print_helper(d)] fourth : B\n }\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Punct {\n@@ -1276,14 +1276,14 @@ PRINT-DERIVE INPUT (DISPLAY): #[print_helper(a)] #[allow(dead_code)] #[print_hel\n {\n     second : bool, third :\n     [u8 ;\n-     {\n-         #[cfg(not(FALSE))] struct Inner ; match true\n-         { #[allow(warnings)] false => {}, _ => {} } ; #[print_helper(c)]\n-         #[cfg(not(FALSE))] fn kept_fn()\n-         { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n-         { Foo(#[cfg(not(FALSE))] i32, u8) } struct\n-         TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n-     }], #[print_helper(d)] fourth : B\n+    {\n+        #[cfg(not(FALSE))] struct Inner ; match true\n+        { #[allow(warnings)] false => {}, _ => {} } ; #[print_helper(c)]\n+        #[cfg(not(FALSE))] fn kept_fn()\n+        { #! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+        { Foo(#[cfg(not(FALSE))] i32, u8) } struct\n+        TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n+    }], #[print_helper(d)] fourth : B\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Punct {"}, {"sha": "74641058ef3d23a87751020f1d283411dece4439", "filename": "src/test/ui/proc-macro/macro-rules-derive-cfg.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive-cfg.stdout?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -2,10 +2,10 @@ PRINT-DERIVE INPUT (DISPLAY): struct Foo\n {\n     val :\n     [bool ;\n-     {\n-         let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n-         { #! [allow(unused)] 30 } ; 0\n-     }]\n+    {\n+        let a = #[rustc_dummy(first)] #[rustc_dummy(second)]\n+        { #! [allow(unused)] 30 } ; 0\n+    }]\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {"}, {"sha": "79651f01b9534cebade236661bff41b135cda97b", "filename": "src/test/ui/proc-macro/quote-debug.stdout", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fquote-debug.stdout?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -19,29 +19,27 @@ extern crate proc_macro;\n \n fn main() {\n     [crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"let\",\n-                                                                        crate::Span::recover_proc_macro_span(0)))),\n-     crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n-                                                                        crate::Span::recover_proc_macro_span(1)))),\n-     crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n-                                                                        crate::Spacing::Alone))),\n-     crate::TokenStream::from(crate::TokenTree::Literal({\n-                                                            let mut iter =\n-                                                                \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n-                                                            if let (Some(crate::TokenTree::Literal(mut lit)),\n-                                                                    None) =\n-                                                                   (iter.next(),\n-                                                                    iter.next())\n-                                                               {\n-                                                                lit.set_span(crate::Span::recover_proc_macro_span(2));\n-                                                                lit\n-                                                            } else {\n-                                                                {\n-                                                                    ::core::panicking::panic(\"internal error: entered unreachable code\")\n-                                                                }\n-                                                            }\n-                                                        })),\n-     crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n-                                                                        crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n+                                    crate::Span::recover_proc_macro_span(0)))),\n+                        crate::TokenStream::from(crate::TokenTree::Ident(crate::Ident::new(\"hello\",\n+                                    crate::Span::recover_proc_macro_span(1)))),\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3d}',\n+                                    crate::Spacing::Alone))),\n+                        crate::TokenStream::from(crate::TokenTree::Literal({\n+                                    let mut iter =\n+                                        \"\\\"world\\\"\".parse::<crate::TokenStream>().unwrap().into_iter();\n+                                    if let (Some(crate::TokenTree::Literal(mut lit)),\n+                                                None) =\n+                                                (iter.next(), iter.next()) {\n+                                            lit.set_span(crate::Span::recover_proc_macro_span(2));\n+                                            lit\n+                                        } else {\n+                                           {\n+                                               ::core::panicking::panic(\"internal error: entered unreachable code\")\n+                                           }\n+                                       }\n+                                })),\n+                        crate::TokenStream::from(crate::TokenTree::Punct(crate::Punct::new('\\u{3b}',\n+                                    crate::Spacing::Alone)))].iter().cloned().collect::<crate::TokenStream>()\n }\n const _: () =\n     {"}, {"sha": "82c4120b4c789c70d38cbe9173c9787102fe1d2c", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -37,7 +37,7 @@ checker!(rename_params, r#\"impl Foo\n     fn hello(#[angery(true)] a : i32, #[a2] b : i32, #[what = \"how\"] c : u32)\n     {} fn\n     hello2(#[a1] #[a2] a : i32, #[what = \"how\"] b : i32, #[angery(true)] c :\n-           u32) {} fn\n+    u32) {} fn\n     hello_self(#[a1] #[a2] & self, #[a1] #[a2] a : i32, #[what = \"how\"] b :\n-               i32, #[angery(true)] c : u32) {}\n+    i32, #[angery(true)] c : u32) {}\n }\"#);"}, {"sha": "a46047d91743d899d83ca79db0bc1e75553de94d", "filename": "src/test/ui/type-alias-impl-trait/issue-60662.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1cb22e4138ad977c51d66744e40ce2a22d7cd528/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60662.stdout?ref=1cb22e4138ad977c51d66744e40ce2a22d7cd528", "patch": "@@ -10,5 +10,5 @@ extern crate std;\n trait Animal { }\n \n fn main() {\n-              pub type ServeFut = /*impl Trait*/;\n-          }\n+        pub type ServeFut = /*impl Trait*/;\n+    }"}]}