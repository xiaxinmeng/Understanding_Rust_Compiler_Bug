{"sha": "2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmRlNTUzOTViM2U4NjhmZjg4YWYzOWZjNGQyNWM3MGJmYTMxZjQ=", "commit": {"author": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-03T12:49:43Z"}, "committer": {"name": "Irina Popa", "email": "irinagpopa@gmail.com", "date": "2018-07-30T15:36:30Z"}, "message": "rustc_codegen_llvm: use safe references for Builder.", "tree": {"sha": "dd8b20dfa9d81366d4abad33e372d8ce1ca136d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd8b20dfa9d81366d4abad33e372d8ce1ca136d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "html_url": "https://github.com/rust-lang/rust/commit/2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbde55395b3e868ff88af39fc4d25c70bfa31f4/comments", "author": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "irinagpopa", "id": 32459019, "node_id": "MDQ6VXNlcjMyNDU5MDE5", "avatar_url": "https://avatars.githubusercontent.com/u/32459019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irinagpopa", "html_url": "https://github.com/irinagpopa", "followers_url": "https://api.github.com/users/irinagpopa/followers", "following_url": "https://api.github.com/users/irinagpopa/following{/other_user}", "gists_url": "https://api.github.com/users/irinagpopa/gists{/gist_id}", "starred_url": "https://api.github.com/users/irinagpopa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irinagpopa/subscriptions", "organizations_url": "https://api.github.com/users/irinagpopa/orgs", "repos_url": "https://api.github.com/users/irinagpopa/repos", "events_url": "https://api.github.com/users/irinagpopa/events{/privacy}", "received_events_url": "https://api.github.com/users/irinagpopa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d04e66d1144a66198422dd380254e8e943d46a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/d04e66d1144a66198422dd380254e8e943d46a49", "html_url": "https://github.com/rust-lang/rust/commit/d04e66d1144a66198422dd380254e8e943d46a49"}], "stats": {"total": 286, "additions": 142, "deletions": 144}, "files": [{"sha": "841b0add89b731e5505b6f2f96d7b04360d4e98c", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dbde55395b3e868ff88af39fc4d25c70bfa31f4/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbde55395b3e868ff88af39fc4d25c70bfa31f4/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "patch": "@@ -13,7 +13,7 @@\n use llvm;\n use llvm::{AtomicRmwBinOp, AtomicOrdering, SynchronizationScope, AsmDialect};\n use llvm::{Opcode, IntPredicate, RealPredicate, False, OperandBundleDef};\n-use llvm::{ValueRef, BasicBlockRef, BuilderRef};\n+use llvm::{ValueRef, BasicBlockRef};\n use common::*;\n use type_::Type;\n use value::Value;\n@@ -32,7 +32,7 @@ use syntax_pos::Span;\n // All Builders must have an llfn associated with them\n #[must_use]\n pub struct Builder<'a, 'll: 'a, 'tcx: 'll> {\n-    pub llbuilder: BuilderRef,\n+    pub llbuilder: &'ll llvm::Builder,\n     pub cx: &'a CodegenCx<'ll, 'tcx>,\n }\n \n@@ -599,7 +599,6 @@ impl Builder<'a, 'll, 'tcx> {\n         flags: MemFlags,\n     ) -> ValueRef {\n         debug!(\"Store {:?} -> {:?} ({:?})\", Value(val), Value(ptr), flags);\n-        assert!(!self.llbuilder.is_null());\n         self.count_insn(\"store\");\n         let ptr = self.check_store(val, ptr);\n         unsafe {"}, {"sha": "532fe1026a9b69a22037bf863bebf6ec6e6c44ec", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 140, "deletions": 141, "changes": 281, "blob_url": "https://github.com/rust-lang/rust/blob/2dbde55395b3e868ff88af39fc4d25c70bfa31f4/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbde55395b3e868ff88af39fc4d25c70bfa31f4/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=2dbde55395b3e868ff88af39fc4d25c70bfa31f4", "patch": "@@ -384,8 +384,7 @@ extern { pub type Metadata_opaque; }\n pub type MetadataRef = *mut Metadata_opaque;\n extern { pub type BasicBlock_opaque; }\n pub type BasicBlockRef = *mut BasicBlock_opaque;\n-extern { pub type Builder_opaque; }\n-pub type BuilderRef = *mut Builder_opaque;\n+extern { pub type Builder; }\n extern { pub type ExecutionEngine_opaque; }\n pub type ExecutionEngineRef = *mut ExecutionEngine_opaque;\n extern { pub type MemoryBuffer_opaque; }\n@@ -762,35 +761,35 @@ extern \"C\" {\n                            Count: c_uint);\n \n     // Instruction builders\n-    pub fn LLVMCreateBuilderInContext(C: &Context) -> BuilderRef;\n-    pub fn LLVMPositionBuilder(Builder: BuilderRef, Block: BasicBlockRef, Instr: ValueRef);\n-    pub fn LLVMPositionBuilderBefore(Builder: BuilderRef, Instr: ValueRef);\n-    pub fn LLVMPositionBuilderAtEnd(Builder: BuilderRef, Block: BasicBlockRef);\n-    pub fn LLVMGetInsertBlock(Builder: BuilderRef) -> BasicBlockRef;\n-    pub fn LLVMDisposeBuilder(Builder: BuilderRef);\n+    pub fn LLVMCreateBuilderInContext(C: &Context) -> &Builder;\n+    pub fn LLVMPositionBuilder(Builder: &Builder, Block: BasicBlockRef, Instr: ValueRef);\n+    pub fn LLVMPositionBuilderBefore(Builder: &Builder, Instr: ValueRef);\n+    pub fn LLVMPositionBuilderAtEnd(Builder: &Builder, Block: BasicBlockRef);\n+    pub fn LLVMGetInsertBlock(Builder: &Builder) -> BasicBlockRef;\n+    pub fn LLVMDisposeBuilder(Builder: &Builder);\n \n     // Metadata\n-    pub fn LLVMSetCurrentDebugLocation(Builder: BuilderRef, L: Option<NonNull<Value_opaque>>);\n-    pub fn LLVMGetCurrentDebugLocation(Builder: BuilderRef) -> ValueRef;\n-    pub fn LLVMSetInstDebugLocation(Builder: BuilderRef, Inst: ValueRef);\n+    pub fn LLVMSetCurrentDebugLocation(Builder: &Builder, L: Option<NonNull<Value_opaque>>);\n+    pub fn LLVMGetCurrentDebugLocation(Builder: &Builder) -> ValueRef;\n+    pub fn LLVMSetInstDebugLocation(Builder: &Builder, Inst: ValueRef);\n \n     // Terminators\n-    pub fn LLVMBuildRetVoid(B: BuilderRef) -> ValueRef;\n-    pub fn LLVMBuildRet(B: BuilderRef, V: ValueRef) -> ValueRef;\n-    pub fn LLVMBuildAggregateRet(B: BuilderRef, RetVals: *const ValueRef, N: c_uint) -> ValueRef;\n-    pub fn LLVMBuildBr(B: BuilderRef, Dest: BasicBlockRef) -> ValueRef;\n-    pub fn LLVMBuildCondBr(B: BuilderRef,\n+    pub fn LLVMBuildRetVoid(B: &Builder) -> ValueRef;\n+    pub fn LLVMBuildRet(B: &Builder, V: ValueRef) -> ValueRef;\n+    pub fn LLVMBuildAggregateRet(B: &Builder, RetVals: *const ValueRef, N: c_uint) -> ValueRef;\n+    pub fn LLVMBuildBr(B: &Builder, Dest: BasicBlockRef) -> ValueRef;\n+    pub fn LLVMBuildCondBr(B: &Builder,\n                            If: ValueRef,\n                            Then: BasicBlockRef,\n                            Else: BasicBlockRef)\n                            -> ValueRef;\n-    pub fn LLVMBuildSwitch(B: BuilderRef,\n+    pub fn LLVMBuildSwitch(B: &Builder,\n                            V: ValueRef,\n                            Else: BasicBlockRef,\n                            NumCases: c_uint)\n                            -> ValueRef;\n-    pub fn LLVMBuildIndirectBr(B: BuilderRef, Addr: ValueRef, NumDests: c_uint) -> ValueRef;\n-    pub fn LLVMRustBuildInvoke(B: BuilderRef,\n+    pub fn LLVMBuildIndirectBr(B: &Builder, Addr: ValueRef, NumDests: c_uint) -> ValueRef;\n+    pub fn LLVMRustBuildInvoke(B: &Builder,\n                                Fn: ValueRef,\n                                Args: *const ValueRef,\n                                NumArgs: c_uint,\n@@ -799,33 +798,33 @@ extern \"C\" {\n                                Bundle: Option<NonNull<OperandBundleDef_opaque>>,\n                                Name: *const c_char)\n                                -> ValueRef;\n-    pub fn LLVMBuildLandingPad(B: BuilderRef,\n-                               Ty: &Type,\n+    pub fn LLVMBuildLandingPad(B: &'a Builder,\n+                               Ty: &'a Type,\n                                PersFn: ValueRef,\n                                NumClauses: c_uint,\n                                Name: *const c_char)\n                                -> ValueRef;\n-    pub fn LLVMBuildResume(B: BuilderRef, Exn: ValueRef) -> ValueRef;\n-    pub fn LLVMBuildUnreachable(B: BuilderRef) -> ValueRef;\n+    pub fn LLVMBuildResume(B: &Builder, Exn: ValueRef) -> ValueRef;\n+    pub fn LLVMBuildUnreachable(B: &Builder) -> ValueRef;\n \n-    pub fn LLVMRustBuildCleanupPad(B: BuilderRef,\n+    pub fn LLVMRustBuildCleanupPad(B: &Builder,\n                                    ParentPad: Option<NonNull<Value_opaque>>,\n                                    ArgCnt: c_uint,\n                                    Args: *const ValueRef,\n                                    Name: *const c_char)\n                                    -> ValueRef;\n-    pub fn LLVMRustBuildCleanupRet(B: BuilderRef,\n+    pub fn LLVMRustBuildCleanupRet(B: &Builder,\n                                    CleanupPad: ValueRef,\n                                    UnwindBB: Option<NonNull<BasicBlock_opaque>>)\n                                    -> ValueRef;\n-    pub fn LLVMRustBuildCatchPad(B: BuilderRef,\n+    pub fn LLVMRustBuildCatchPad(B: &Builder,\n                                  ParentPad: ValueRef,\n                                  ArgCnt: c_uint,\n                                  Args: *const ValueRef,\n                                  Name: *const c_char)\n                                  -> ValueRef;\n-    pub fn LLVMRustBuildCatchRet(B: BuilderRef, Pad: ValueRef, BB: BasicBlockRef) -> ValueRef;\n-    pub fn LLVMRustBuildCatchSwitch(Builder: BuilderRef,\n+    pub fn LLVMRustBuildCatchRet(B: &Builder, Pad: ValueRef, BB: BasicBlockRef) -> ValueRef;\n+    pub fn LLVMRustBuildCatchSwitch(Builder: &Builder,\n                                     ParentPad: Option<NonNull<Value_opaque>>,\n                                     BB: Option<NonNull<BasicBlock_opaque>>,\n                                     NumHandlers: c_uint,\n@@ -844,408 +843,408 @@ extern \"C\" {\n     pub fn LLVMSetCleanup(LandingPad: ValueRef, Val: Bool);\n \n     // Arithmetic\n-    pub fn LLVMBuildAdd(B: BuilderRef,\n+    pub fn LLVMBuildAdd(B: &Builder,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n                         Name: *const c_char)\n                         -> ValueRef;\n-    pub fn LLVMBuildNSWAdd(B: BuilderRef,\n+    pub fn LLVMBuildNSWAdd(B: &Builder,\n                            LHS: ValueRef,\n                            RHS: ValueRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildNUWAdd(B: BuilderRef,\n+    pub fn LLVMBuildNUWAdd(B: &Builder,\n                            LHS: ValueRef,\n                            RHS: ValueRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildFAdd(B: BuilderRef,\n+    pub fn LLVMBuildFAdd(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildSub(B: BuilderRef,\n+    pub fn LLVMBuildSub(B: &Builder,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n                         Name: *const c_char)\n                         -> ValueRef;\n-    pub fn LLVMBuildNSWSub(B: BuilderRef,\n+    pub fn LLVMBuildNSWSub(B: &Builder,\n                            LHS: ValueRef,\n                            RHS: ValueRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildNUWSub(B: BuilderRef,\n+    pub fn LLVMBuildNUWSub(B: &Builder,\n                            LHS: ValueRef,\n                            RHS: ValueRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildFSub(B: BuilderRef,\n+    pub fn LLVMBuildFSub(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildMul(B: BuilderRef,\n+    pub fn LLVMBuildMul(B: &Builder,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n                         Name: *const c_char)\n                         -> ValueRef;\n-    pub fn LLVMBuildNSWMul(B: BuilderRef,\n+    pub fn LLVMBuildNSWMul(B: &Builder,\n                            LHS: ValueRef,\n                            RHS: ValueRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildNUWMul(B: BuilderRef,\n+    pub fn LLVMBuildNUWMul(B: &Builder,\n                            LHS: ValueRef,\n                            RHS: ValueRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildFMul(B: BuilderRef,\n+    pub fn LLVMBuildFMul(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildUDiv(B: BuilderRef,\n+    pub fn LLVMBuildUDiv(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildExactUDiv(B: BuilderRef,\n+    pub fn LLVMBuildExactUDiv(B: &Builder,\n                               LHS: ValueRef,\n                               RHS: ValueRef,\n                               Name: *const c_char)\n                               -> ValueRef;\n-    pub fn LLVMBuildSDiv(B: BuilderRef,\n+    pub fn LLVMBuildSDiv(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildExactSDiv(B: BuilderRef,\n+    pub fn LLVMBuildExactSDiv(B: &Builder,\n                               LHS: ValueRef,\n                               RHS: ValueRef,\n                               Name: *const c_char)\n                               -> ValueRef;\n-    pub fn LLVMBuildFDiv(B: BuilderRef,\n+    pub fn LLVMBuildFDiv(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildURem(B: BuilderRef,\n+    pub fn LLVMBuildURem(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildSRem(B: BuilderRef,\n+    pub fn LLVMBuildSRem(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildFRem(B: BuilderRef,\n+    pub fn LLVMBuildFRem(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildShl(B: BuilderRef,\n+    pub fn LLVMBuildShl(B: &Builder,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n                         Name: *const c_char)\n                         -> ValueRef;\n-    pub fn LLVMBuildLShr(B: BuilderRef,\n+    pub fn LLVMBuildLShr(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildAShr(B: BuilderRef,\n+    pub fn LLVMBuildAShr(B: &Builder,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildAnd(B: BuilderRef,\n+    pub fn LLVMBuildAnd(B: &Builder,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n                         Name: *const c_char)\n                         -> ValueRef;\n-    pub fn LLVMBuildOr(B: BuilderRef,\n+    pub fn LLVMBuildOr(B: &Builder,\n                        LHS: ValueRef,\n                        RHS: ValueRef,\n                        Name: *const c_char)\n                        -> ValueRef;\n-    pub fn LLVMBuildXor(B: BuilderRef,\n+    pub fn LLVMBuildXor(B: &Builder,\n                         LHS: ValueRef,\n                         RHS: ValueRef,\n                         Name: *const c_char)\n                         -> ValueRef;\n-    pub fn LLVMBuildBinOp(B: BuilderRef,\n+    pub fn LLVMBuildBinOp(B: &Builder,\n                           Op: Opcode,\n                           LHS: ValueRef,\n                           RHS: ValueRef,\n                           Name: *const c_char)\n                           -> ValueRef;\n-    pub fn LLVMBuildNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMBuildNSWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMBuildNUWNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMBuildFNeg(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMBuildNot(B: BuilderRef, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildNeg(B: &Builder, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildNSWNeg(B: &Builder, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildNUWNeg(B: &Builder, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildFNeg(B: &Builder, V: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildNot(B: &Builder, V: ValueRef, Name: *const c_char) -> ValueRef;\n     pub fn LLVMRustSetHasUnsafeAlgebra(Instr: ValueRef);\n \n     // Memory\n-    pub fn LLVMBuildAlloca(B: BuilderRef, Ty: &Type, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMBuildFree(B: BuilderRef, PointerVal: ValueRef) -> ValueRef;\n-    pub fn LLVMBuildLoad(B: BuilderRef, PointerVal: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildAlloca(B: &Builder, Ty: &Type, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildFree(B: &Builder, PointerVal: ValueRef) -> ValueRef;\n+    pub fn LLVMBuildLoad(B: &Builder, PointerVal: ValueRef, Name: *const c_char) -> ValueRef;\n \n-    pub fn LLVMBuildStore(B: BuilderRef, Val: ValueRef, Ptr: ValueRef) -> ValueRef;\n+    pub fn LLVMBuildStore(B: &Builder, Val: ValueRef, Ptr: ValueRef) -> ValueRef;\n \n-    pub fn LLVMBuildGEP(B: BuilderRef,\n+    pub fn LLVMBuildGEP(B: &Builder,\n                         Pointer: ValueRef,\n                         Indices: *const ValueRef,\n                         NumIndices: c_uint,\n                         Name: *const c_char)\n                         -> ValueRef;\n-    pub fn LLVMBuildInBoundsGEP(B: BuilderRef,\n+    pub fn LLVMBuildInBoundsGEP(B: &Builder,\n                                 Pointer: ValueRef,\n                                 Indices: *const ValueRef,\n                                 NumIndices: c_uint,\n                                 Name: *const c_char)\n                                 -> ValueRef;\n-    pub fn LLVMBuildStructGEP(B: BuilderRef,\n+    pub fn LLVMBuildStructGEP(B: &Builder,\n                               Pointer: ValueRef,\n                               Idx: c_uint,\n                               Name: *const c_char)\n                               -> ValueRef;\n-    pub fn LLVMBuildGlobalString(B: BuilderRef,\n+    pub fn LLVMBuildGlobalString(B: &Builder,\n                                  Str: *const c_char,\n                                  Name: *const c_char)\n                                  -> ValueRef;\n-    pub fn LLVMBuildGlobalStringPtr(B: BuilderRef,\n+    pub fn LLVMBuildGlobalStringPtr(B: &Builder,\n                                     Str: *const c_char,\n                                     Name: *const c_char)\n                                     -> ValueRef;\n \n     // Casts\n-    pub fn LLVMBuildTrunc(B: BuilderRef,\n+    pub fn LLVMBuildTrunc(B: &'a Builder,\n                           Val: ValueRef,\n-                          DestTy: &Type,\n+                          DestTy: &'a Type,\n                           Name: *const c_char)\n                           -> ValueRef;\n-    pub fn LLVMBuildZExt(B: BuilderRef,\n+    pub fn LLVMBuildZExt(B: &'a Builder,\n                          Val: ValueRef,\n-                         DestTy: &Type,\n+                         DestTy: &'a Type,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildSExt(B: BuilderRef,\n+    pub fn LLVMBuildSExt(B: &'a Builder,\n                          Val: ValueRef,\n-                         DestTy: &Type,\n+                         DestTy: &'a Type,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildFPToUI(B: BuilderRef,\n+    pub fn LLVMBuildFPToUI(B: &'a Builder,\n                            Val: ValueRef,\n-                           DestTy: &Type,\n+                           DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildFPToSI(B: BuilderRef,\n+    pub fn LLVMBuildFPToSI(B: &'a Builder,\n                            Val: ValueRef,\n-                           DestTy: &Type,\n+                           DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildUIToFP(B: BuilderRef,\n+    pub fn LLVMBuildUIToFP(B: &'a Builder,\n                            Val: ValueRef,\n-                           DestTy: &Type,\n+                           DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildSIToFP(B: BuilderRef,\n+    pub fn LLVMBuildSIToFP(B: &'a Builder,\n                            Val: ValueRef,\n-                           DestTy: &Type,\n+                           DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildFPTrunc(B: BuilderRef,\n+    pub fn LLVMBuildFPTrunc(B: &'a Builder,\n                             Val: ValueRef,\n-                            DestTy: &Type,\n+                            DestTy: &'a Type,\n                             Name: *const c_char)\n                             -> ValueRef;\n-    pub fn LLVMBuildFPExt(B: BuilderRef,\n+    pub fn LLVMBuildFPExt(B: &'a Builder,\n                           Val: ValueRef,\n-                          DestTy: &Type,\n+                          DestTy: &'a Type,\n                           Name: *const c_char)\n                           -> ValueRef;\n-    pub fn LLVMBuildPtrToInt(B: BuilderRef,\n+    pub fn LLVMBuildPtrToInt(B: &'a Builder,\n                              Val: ValueRef,\n-                             DestTy: &Type,\n+                             DestTy: &'a Type,\n                              Name: *const c_char)\n                              -> ValueRef;\n-    pub fn LLVMBuildIntToPtr(B: BuilderRef,\n+    pub fn LLVMBuildIntToPtr(B: &'a Builder,\n                              Val: ValueRef,\n-                             DestTy: &Type,\n+                             DestTy: &'a Type,\n                              Name: *const c_char)\n                              -> ValueRef;\n-    pub fn LLVMBuildBitCast(B: BuilderRef,\n+    pub fn LLVMBuildBitCast(B: &'a Builder,\n                             Val: ValueRef,\n-                            DestTy: &Type,\n+                            DestTy: &'a Type,\n                             Name: *const c_char)\n                             -> ValueRef;\n-    pub fn LLVMBuildZExtOrBitCast(B: BuilderRef,\n+    pub fn LLVMBuildZExtOrBitCast(B: &'a Builder,\n                                   Val: ValueRef,\n-                                  DestTy: &Type,\n+                                  DestTy: &'a Type,\n                                   Name: *const c_char)\n                                   -> ValueRef;\n-    pub fn LLVMBuildSExtOrBitCast(B: BuilderRef,\n+    pub fn LLVMBuildSExtOrBitCast(B: &'a Builder,\n                                   Val: ValueRef,\n-                                  DestTy: &Type,\n+                                  DestTy: &'a Type,\n                                   Name: *const c_char)\n                                   -> ValueRef;\n-    pub fn LLVMBuildTruncOrBitCast(B: BuilderRef,\n+    pub fn LLVMBuildTruncOrBitCast(B: &'a Builder,\n                                    Val: ValueRef,\n-                                   DestTy: &Type,\n+                                   DestTy: &'a Type,\n                                    Name: *const c_char)\n                                    -> ValueRef;\n-    pub fn LLVMBuildCast(B: BuilderRef,\n+    pub fn LLVMBuildCast(B: &'a Builder,\n                          Op: Opcode,\n                          Val: ValueRef,\n-                         DestTy: &Type,\n+                         DestTy: &'a Type,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildPointerCast(B: BuilderRef,\n+    pub fn LLVMBuildPointerCast(B: &'a Builder,\n                                 Val: ValueRef,\n-                                DestTy: &Type,\n+                                DestTy: &'a Type,\n                                 Name: *const c_char)\n                                 -> ValueRef;\n-    pub fn LLVMRustBuildIntCast(B: BuilderRef,\n+    pub fn LLVMRustBuildIntCast(B: &'a Builder,\n                                 Val: ValueRef,\n-                                DestTy: &Type,\n+                                DestTy: &'a Type,\n                                 IsSized: bool)\n                                 -> ValueRef;\n-    pub fn LLVMBuildFPCast(B: BuilderRef,\n+    pub fn LLVMBuildFPCast(B: &'a Builder,\n                            Val: ValueRef,\n-                           DestTy: &Type,\n+                           DestTy: &'a Type,\n                            Name: *const c_char)\n                            -> ValueRef;\n \n     // Comparisons\n-    pub fn LLVMBuildICmp(B: BuilderRef,\n+    pub fn LLVMBuildICmp(B: &Builder,\n                          Op: c_uint,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n-    pub fn LLVMBuildFCmp(B: BuilderRef,\n+    pub fn LLVMBuildFCmp(B: &Builder,\n                          Op: c_uint,\n                          LHS: ValueRef,\n                          RHS: ValueRef,\n                          Name: *const c_char)\n                          -> ValueRef;\n \n     // Miscellaneous instructions\n-    pub fn LLVMBuildPhi(B: BuilderRef, Ty: &Type, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMRustBuildCall(B: BuilderRef,\n+    pub fn LLVMBuildPhi(B: &Builder, Ty: &Type, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMRustBuildCall(B: &Builder,\n                              Fn: ValueRef,\n                              Args: *const ValueRef,\n                              NumArgs: c_uint,\n                              Bundle: Option<NonNull<OperandBundleDef_opaque>>,\n                              Name: *const c_char)\n                              -> ValueRef;\n-    pub fn LLVMBuildSelect(B: BuilderRef,\n+    pub fn LLVMBuildSelect(B: &Builder,\n                            If: ValueRef,\n                            Then: ValueRef,\n                            Else: ValueRef,\n                            Name: *const c_char)\n                            -> ValueRef;\n-    pub fn LLVMBuildVAArg(B: BuilderRef,\n+    pub fn LLVMBuildVAArg(B: &'a Builder,\n                           list: ValueRef,\n-                          Ty: &Type,\n+                          Ty: &'a Type,\n                           Name: *const c_char)\n                           -> ValueRef;\n-    pub fn LLVMBuildExtractElement(B: BuilderRef,\n+    pub fn LLVMBuildExtractElement(B: &Builder,\n                                    VecVal: ValueRef,\n                                    Index: ValueRef,\n                                    Name: *const c_char)\n                                    -> ValueRef;\n-    pub fn LLVMBuildInsertElement(B: BuilderRef,\n+    pub fn LLVMBuildInsertElement(B: &Builder,\n                                   VecVal: ValueRef,\n                                   EltVal: ValueRef,\n                                   Index: ValueRef,\n                                   Name: *const c_char)\n                                   -> ValueRef;\n-    pub fn LLVMBuildShuffleVector(B: BuilderRef,\n+    pub fn LLVMBuildShuffleVector(B: &Builder,\n                                   V1: ValueRef,\n                                   V2: ValueRef,\n                                   Mask: ValueRef,\n                                   Name: *const c_char)\n                                   -> ValueRef;\n-    pub fn LLVMBuildExtractValue(B: BuilderRef,\n+    pub fn LLVMBuildExtractValue(B: &Builder,\n                                  AggVal: ValueRef,\n                                  Index: c_uint,\n                                  Name: *const c_char)\n                                  -> ValueRef;\n-    pub fn LLVMBuildInsertValue(B: BuilderRef,\n+    pub fn LLVMBuildInsertValue(B: &Builder,\n                                 AggVal: ValueRef,\n                                 EltVal: ValueRef,\n                                 Index: c_uint,\n                                 Name: *const c_char)\n                                 -> ValueRef;\n \n-    pub fn LLVMRustBuildVectorReduceFAdd(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceFAdd(B: &Builder,\n                                          Acc: ValueRef,\n                                          Src: ValueRef)\n                                          -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceFMul(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceFMul(B: &Builder,\n                                          Acc: ValueRef,\n                                          Src: ValueRef)\n                                          -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceAdd(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceAdd(B: &Builder,\n                                         Src: ValueRef)\n                                         -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceMul(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceMul(B: &Builder,\n                                         Src: ValueRef)\n                                         -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceAnd(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceAnd(B: &Builder,\n                                         Src: ValueRef)\n                                         -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceOr(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceOr(B: &Builder,\n                                        Src: ValueRef)\n                                        -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceXor(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceXor(B: &Builder,\n                                         Src: ValueRef)\n                                         -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceMin(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceMin(B: &Builder,\n                                         Src: ValueRef,\n                                         IsSigned: bool)\n                                         -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceMax(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceMax(B: &Builder,\n                                         Src: ValueRef,\n                                         IsSigned: bool)\n                                         -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceFMin(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceFMin(B: &Builder,\n                                          Src: ValueRef,\n                                          IsNaN: bool)\n                                          -> ValueRef;\n-    pub fn LLVMRustBuildVectorReduceFMax(B: BuilderRef,\n+    pub fn LLVMRustBuildVectorReduceFMax(B: &Builder,\n                                          Src: ValueRef,\n                                          IsNaN: bool)\n                                          -> ValueRef;\n \n-    pub fn LLVMRustBuildMinNum(B: BuilderRef, LHS: ValueRef, LHS: ValueRef) -> ValueRef;\n-    pub fn LLVMRustBuildMaxNum(B: BuilderRef, LHS: ValueRef, LHS: ValueRef) -> ValueRef;\n+    pub fn LLVMRustBuildMinNum(B: &Builder, LHS: ValueRef, LHS: ValueRef) -> ValueRef;\n+    pub fn LLVMRustBuildMaxNum(B: &Builder, LHS: ValueRef, LHS: ValueRef) -> ValueRef;\n \n-    pub fn LLVMBuildIsNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMBuildIsNotNull(B: BuilderRef, Val: ValueRef, Name: *const c_char) -> ValueRef;\n-    pub fn LLVMBuildPtrDiff(B: BuilderRef,\n+    pub fn LLVMBuildIsNull(B: &Builder, Val: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildIsNotNull(B: &Builder, Val: ValueRef, Name: *const c_char) -> ValueRef;\n+    pub fn LLVMBuildPtrDiff(B: &Builder,\n                             LHS: ValueRef,\n                             RHS: ValueRef,\n                             Name: *const c_char)\n                             -> ValueRef;\n \n     // Atomic Operations\n-    pub fn LLVMRustBuildAtomicLoad(B: BuilderRef,\n+    pub fn LLVMRustBuildAtomicLoad(B: &Builder,\n                                    PointerVal: ValueRef,\n                                    Name: *const c_char,\n                                    Order: AtomicOrdering)\n                                    -> ValueRef;\n \n-    pub fn LLVMRustBuildAtomicStore(B: BuilderRef,\n+    pub fn LLVMRustBuildAtomicStore(B: &Builder,\n                                     Val: ValueRef,\n                                     Ptr: ValueRef,\n                                     Order: AtomicOrdering)\n                                     -> ValueRef;\n \n-    pub fn LLVMRustBuildAtomicCmpXchg(B: BuilderRef,\n+    pub fn LLVMRustBuildAtomicCmpXchg(B: &Builder,\n                                       LHS: ValueRef,\n                                       CMP: ValueRef,\n                                       RHS: ValueRef,\n@@ -1254,15 +1253,15 @@ extern \"C\" {\n                                       Weak: Bool)\n                                       -> ValueRef;\n \n-    pub fn LLVMBuildAtomicRMW(B: BuilderRef,\n+    pub fn LLVMBuildAtomicRMW(B: &Builder,\n                               Op: AtomicRmwBinOp,\n                               LHS: ValueRef,\n                               RHS: ValueRef,\n                               Order: AtomicOrdering,\n                               SingleThreaded: Bool)\n                               -> ValueRef;\n \n-    pub fn LLVMRustBuildAtomicFence(B: BuilderRef,\n+    pub fn LLVMRustBuildAtomicFence(B: &Builder,\n                                     Order: AtomicOrdering,\n                                     Scope: SynchronizationScope);\n \n@@ -1709,7 +1708,7 @@ extern \"C\" {\n                                          -> OperandBundleDefRef;\n     pub fn LLVMRustFreeOperandBundleDef(Bundle: OperandBundleDefRef);\n \n-    pub fn LLVMRustPositionBuilderAtStart(B: BuilderRef, BB: BasicBlockRef);\n+    pub fn LLVMRustPositionBuilderAtStart(B: &Builder, BB: BasicBlockRef);\n \n     pub fn LLVMRustSetComdat(M: &Module, V: ValueRef, Name: *const c_char);\n     pub fn LLVMRustUnsetComdat(V: ValueRef);"}]}