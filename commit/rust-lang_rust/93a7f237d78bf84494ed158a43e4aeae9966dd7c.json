{"sha": "93a7f237d78bf84494ed158a43e4aeae9966dd7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYTdmMjM3ZDc4YmY4NDQ5NGVkMTU4YTQzZTRhZWFlOTk2NmRkN2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-27T01:57:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-27T01:57:41Z"}, "message": "auto merge of #5115 : sanxiyn/rust/arm-abi, r=brson\n\nType size and alignment code needs to be factored, but I didn't want to interfere with MIPS port. Can be done later.\r\n\r\nFix #4797.", "tree": {"sha": "1937cae3b8037078b465ac9538555b00efce2151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1937cae3b8037078b465ac9538555b00efce2151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a7f237d78bf84494ed158a43e4aeae9966dd7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a7f237d78bf84494ed158a43e4aeae9966dd7c", "html_url": "https://github.com/rust-lang/rust/commit/93a7f237d78bf84494ed158a43e4aeae9966dd7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a7f237d78bf84494ed158a43e4aeae9966dd7c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "html_url": "https://github.com/rust-lang/rust/commit/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5"}, {"sha": "5098cf5bd2abbef4418e93c9ab7db1eac43bb1bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5098cf5bd2abbef4418e93c9ab7db1eac43bb1bb", "html_url": "https://github.com/rust-lang/rust/commit/5098cf5bd2abbef4418e93c9ab7db1eac43bb1bb"}], "stats": {"total": 169, "additions": 168, "deletions": 1}, "files": [{"sha": "259392bef40c8095460373cf7bd536fb2de8e142", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/93a7f237d78bf84494ed158a43e4aeae9966dd7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a7f237d78bf84494ed158a43e4aeae9966dd7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=93a7f237d78bf84494ed158a43e4aeae9966dd7c", "patch": "@@ -0,0 +1,164 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n+use lib::llvm::struct_tys;\n+use lib::llvm::TypeRef;\n+use lib::llvm::{Attribute, StructRetAttribute};\n+use middle::trans::cabi::{ABIInfo, FnType, LLVMType};\n+use middle::trans::common::{T_i8, T_i16, T_i32, T_i64};\n+use middle::trans::common::{T_array, T_ptr, T_void};\n+\n+use core::option::{Option, None, Some};\n+use core::uint;\n+use core::vec;\n+\n+fn align_up_to(off: uint, a: uint) -> uint {\n+    return (off + a - 1u) / a * a;\n+}\n+\n+fn align(off: uint, ty: TypeRef) -> uint {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn ty_align(ty: TypeRef) -> uint {\n+    unsafe {\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer => {\n+                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7) / 8\n+            }\n+            Pointer => 4,\n+            Float => 4,\n+            Double => 8,\n+            Struct => {\n+                do vec::foldl(1, struct_tys(ty)) |a, t| {\n+                    uint::max(a, ty_align(*t))\n+                }\n+            }\n+            Array => {\n+                let elt = llvm::LLVMGetElementType(ty);\n+                ty_align(elt)\n+            }\n+            _ => fail!(~\"ty_align: unhandled type\")\n+        };\n+    }\n+}\n+\n+fn ty_size(ty: TypeRef) -> uint {\n+    unsafe {\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer => {\n+                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7) / 8\n+            }\n+            Pointer => 4,\n+            Float => 4,\n+            Double => 8,\n+            Struct => {\n+                let size = do vec::foldl(0, struct_tys(ty)) |s, t| {\n+                    align(s, *t) + ty_size(*t)\n+                };\n+                align(size, ty)\n+            }\n+            Array => {\n+                let len = llvm::LLVMGetArrayLength(ty) as uint;\n+                let elt = llvm::LLVMGetElementType(ty);\n+                let eltsz = ty_size(elt);\n+                len * eltsz\n+            }\n+            _ => fail!(~\"ty_size: unhandled type\")\n+        };\n+    }\n+}\n+\n+fn classify_ret_ty(ty: TypeRef) -> (LLVMType, Option<Attribute>) {\n+    if is_reg_ty(ty) {\n+        return (LLVMType { cast: false, ty: ty }, None);\n+    }\n+    let size = ty_size(ty);\n+    if size <= 4 {\n+        let llty = if size <= 1 {\n+            T_i8()\n+        } else if size <= 2 {\n+            T_i16()\n+        } else {\n+            T_i32()\n+        };\n+        return (LLVMType { cast: true, ty: llty }, None);\n+    }\n+    (LLVMType { cast: false, ty: T_ptr(ty) }, Some(StructRetAttribute))\n+}\n+\n+fn classify_arg_ty(ty: TypeRef) -> (LLVMType, Option<Attribute>) {\n+    if is_reg_ty(ty) {\n+        return (LLVMType { cast: false, ty: ty }, None);\n+    }\n+    let align = ty_align(ty);\n+    let size = ty_size(ty);\n+    let llty = if align <= 4 {\n+        T_array(T_i32(), (size + 3) / 4)\n+    } else {\n+        T_array(T_i64(), (size + 7) / 8)\n+    };\n+    (LLVMType { cast: true, ty: llty }, None)\n+}\n+\n+fn is_reg_ty(ty: TypeRef) -> bool {\n+    unsafe {\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer\n+            | Pointer\n+            | Float\n+            | Double => true,\n+            _ => false\n+        };\n+    }\n+}\n+\n+enum ARM_ABIInfo { ARM_ABIInfo }\n+\n+impl ABIInfo for ARM_ABIInfo {\n+    fn compute_info(&self,\n+                    atys: &[TypeRef],\n+                    rty: TypeRef,\n+                    ret_def: bool) -> FnType {\n+        let mut arg_tys = ~[];\n+        let mut attrs = ~[];\n+        for atys.each |&aty| {\n+            let (ty, attr) = classify_arg_ty(aty);\n+            arg_tys.push(ty);\n+            attrs.push(attr);\n+        }\n+\n+        let mut (ret_ty, ret_attr) = if ret_def {\n+            classify_ret_ty(rty)\n+        } else {\n+            (LLVMType { cast: false, ty: T_void() }, None)\n+        };\n+\n+        let sret = ret_attr.is_some();\n+        if sret {\n+            arg_tys.unshift(ret_ty);\n+            attrs.unshift(ret_attr);\n+            ret_ty = LLVMType { cast: false, ty: T_void() };\n+        }\n+\n+        return FnType {\n+            arg_tys: arg_tys,\n+            ret_ty: ret_ty,\n+            attrs: attrs,\n+            sret: sret\n+        };\n+    }\n+}\n+\n+pub fn abi_info() -> ABIInfo {\n+    return ARM_ABIInfo as ABIInfo;\n+}"}, {"sha": "ef9cc89eb90df55ed696033f6653fa225b214e21", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93a7f237d78bf84494ed158a43e4aeae9966dd7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a7f237d78bf84494ed158a43e4aeae9966dd7c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=93a7f237d78bf84494ed158a43e4aeae9966dd7c", "patch": "@@ -21,6 +21,7 @@ use lib;\n use middle::trans::base::*;\n use middle::trans::cabi;\n use middle::trans::cabi_x86_64::*;\n+use middle::trans::cabi_arm;\n use middle::trans::build::*;\n use middle::trans::callee::*;\n use middle::trans::common::*;\n@@ -42,7 +43,8 @@ use syntax::parse::token::special_idents;\n \n fn abi_info(arch: session::arch) -> cabi::ABIInfo {\n     return match arch {\n-        arch_x86_64 | arch_arm => x86_64_abi_info(),\n+        arch_x86_64 => x86_64_abi_info(),\n+        arch_arm => cabi_arm::abi_info(),\n         _ => cabi::llvm_abi_info()\n     }\n }"}, {"sha": "f6fe4a04b3ab568adb1463d80b0b26f528143195", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93a7f237d78bf84494ed158a43e4aeae9966dd7c/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/93a7f237d78bf84494ed158a43e4aeae9966dd7c/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=93a7f237d78bf84494ed158a43e4aeae9966dd7c", "patch": "@@ -68,6 +68,7 @@ pub mod middle {\n         pub mod meth;\n         pub mod cabi;\n         pub mod cabi_x86_64;\n+        pub mod cabi_arm;\n         pub mod foreign;\n         pub mod reflect;\n         pub mod shape;"}]}