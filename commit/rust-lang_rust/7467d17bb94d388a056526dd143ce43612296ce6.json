{"sha": "7467d17bb94d388a056526dd143ce43612296ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NjdkMTdiYjk0ZDM4OGEwNTY1MjZkZDE0M2NlNDM2MTIyOTZjZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T22:00:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-20T22:00:36Z"}, "message": "Auto merge of #76544 - Mark-Simulacrum:less-python, r=alexcrichton\n\nDe-couple Python and bootstrap slightly\n\nThis revises rustbuild's entry points from Python to rely less on magic environment variables, preferring to use Cargo-provided environment variables where feasible.\n\nNotably, BUILD_DIR and BOOTSTRAP_CONFIG are *not* moved, because both more-or-less have some non-trivial discovery logic and replicating it in rustbuild seems unfortunate; if it moved to Cargo that would be a different story.\n\nBest reviewed by-commit.", "tree": {"sha": "82fafaa6ab46ea2c3ad8a1b34749985a4b91172f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82fafaa6ab46ea2c3ad8a1b34749985a4b91172f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7467d17bb94d388a056526dd143ce43612296ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7467d17bb94d388a056526dd143ce43612296ce6", "html_url": "https://github.com/rust-lang/rust/commit/7467d17bb94d388a056526dd143ce43612296ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7467d17bb94d388a056526dd143ce43612296ce6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fd5b9d516c035a898dcb437b2f982bea5d4bc88", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd5b9d516c035a898dcb437b2f982bea5d4bc88", "html_url": "https://github.com/rust-lang/rust/commit/1fd5b9d516c035a898dcb437b2f982bea5d4bc88"}, {"sha": "cf33aad8fdd3885fbc26518aaccff0788d1a21a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf33aad8fdd3885fbc26518aaccff0788d1a21a7", "html_url": "https://github.com/rust-lang/rust/commit/cf33aad8fdd3885fbc26518aaccff0788d1a21a7"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "890315a744e56cc93ca254927a75897b5a5614d2", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -3,6 +3,7 @@ authors = [\"The Rust Project Developers\"]\n name = \"bootstrap\"\n version = \"0.0.0\"\n edition = \"2018\"\n+build = \"build.rs\"\n \n [lib]\n path = \"lib.rs\""}, {"sha": "e58cf0d164197926a8a68d98e5b35e8e76680780", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -966,7 +966,6 @@ def bootstrap(help_triggered):\n     parser = argparse.ArgumentParser(description='Build rust')\n     parser.add_argument('--config')\n     parser.add_argument('--build')\n-    parser.add_argument('--src')\n     parser.add_argument('--clean', action='store_true')\n     parser.add_argument('-v', '--verbose', action='count', default=0)\n \n@@ -975,7 +974,7 @@ def bootstrap(help_triggered):\n \n     # Configure initial bootstrap\n     build = RustBuild()\n-    build.rust_root = args.src or os.path.abspath(os.path.join(__file__, '../../..'))\n+    build.rust_root = os.path.abspath(os.path.join(__file__, '../../..'))\n     build.verbose = args.verbose\n     build.clean = args.clean\n \n@@ -1032,18 +1031,12 @@ def bootstrap(help_triggered):\n     args = [build.bootstrap_binary()]\n     args.extend(sys.argv[1:])\n     env = os.environ.copy()\n-    env[\"BUILD\"] = build.build\n-    env[\"SRC\"] = build.rust_root\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n     env[\"BUILD_DIR\"] = build.build_dir\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n-    env[\"CARGO\"] = build.cargo()\n-    env[\"RUSTC\"] = build.rustc()\n     if toml_path:\n         env[\"BOOTSTRAP_CONFIG\"] = toml_path\n-    if build.rustfmt():\n-        env[\"RUSTFMT\"] = build.rustfmt()\n     run(args, env=env, verbose=build.verbose)\n \n "}, {"sha": "d40b924e0ff5fbde6ce732d9abd81c9a5fdb830e", "filename": "src/bootstrap/build.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild.rs?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -0,0 +1,26 @@\n+use std::env;\n+use std::path::PathBuf;\n+\n+fn main() {\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+    println!(\"cargo:rustc-env=BUILD_TRIPLE={}\", env::var(\"HOST\").unwrap());\n+\n+    // This may not be a canonicalized path.\n+    let mut rustc = PathBuf::from(env::var_os(\"RUSTC\").unwrap());\n+\n+    if rustc.is_relative() {\n+        for dir in env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()) {\n+            let absolute = dir.join(&rustc);\n+            if absolute.exists() {\n+                rustc = absolute;\n+                break;\n+            }\n+        }\n+    }\n+    assert!(rustc.is_absolute());\n+\n+    // FIXME: if the path is not utf-8, this is going to break. Unfortunately\n+    // Cargo doesn't have a way for us to specify non-utf-8 paths easily, so\n+    // we'll need to invent some encoding scheme if this becomes a problem.\n+    println!(\"cargo:rustc-env=RUSTC={}\", rustc.to_str().unwrap());\n+}"}, {"sha": "cd90021507ec76180c4381350aa4bf438e8de2f9", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -10,6 +10,9 @@ fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n     config.dry_run = true;\n     config.ninja_in_file = false;\n     // try to avoid spurious failures in dist where we create/delete each others file\n+    config.out = PathBuf::from(env::var_os(\"BOOTSTRAP_OUTPUT_DIRECTORY\").unwrap());\n+    config.initial_rustc = PathBuf::from(env::var_os(\"RUSTC\").unwrap());\n+    config.initial_cargo = PathBuf::from(env::var_os(\"BOOTSTRAP_INITIAL_CARGO\").unwrap());\n     let dir = config\n         .out\n         .join(\"tmp-rustbuild-tests\")"}, {"sha": "d4f6ce64decc788e61c96a04dc1434bbc489b71e", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -291,7 +291,7 @@ struct Build {\n     build_dir: Option<String>,\n     cargo: Option<String>,\n     rustc: Option<String>,\n-    rustfmt: Option<String>, /* allow bootstrap.py to use rustfmt key */\n+    rustfmt: Option<PathBuf>,\n     docs: Option<bool>,\n     compiler_docs: Option<bool>,\n     submodules: Option<bool>,\n@@ -487,13 +487,14 @@ impl Config {\n         config.missing_tools = false;\n \n         // set by bootstrap.py\n-        config.build = TargetSelection::from_user(&env::var(\"BUILD\").expect(\"'BUILD' to be set\"));\n-        config.src = Config::path_from_python(\"SRC\");\n+        config.build = TargetSelection::from_user(&env!(\"BUILD_TRIPLE\"));\n+        let manifest_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n+        // Undo `src/bootstrap`\n+        config.src = manifest_dir.parent().unwrap().parent().unwrap().to_owned();\n         config.out = Config::path_from_python(\"BUILD_DIR\");\n \n-        config.initial_rustc = Config::path_from_python(\"RUSTC\");\n-        config.initial_cargo = Config::path_from_python(\"CARGO\");\n-        config.initial_rustfmt = env::var_os(\"RUSTFMT\").map(Config::normalize_python_path);\n+        config.initial_cargo = PathBuf::from(env!(\"CARGO\"));\n+        config.initial_rustc = PathBuf::from(env!(\"RUSTC\"));\n \n         config\n     }\n@@ -582,6 +583,9 @@ impl Config {\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n         config.tools = build.tools;\n+        if build.rustfmt.is_some() {\n+            config.initial_rustfmt = build.rustfmt;\n+        }\n         set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n         set(&mut config.profiler, build.profiler);\n@@ -836,12 +840,15 @@ impl Config {\n             set(&mut config.missing_tools, t.missing_tools);\n         }\n \n+        // Cargo does not provide a RUSTFMT environment variable, so we\n+        // synthesize it manually. Note that we also later check the config.toml\n+        // and set this to that path if necessary.\n+        let rustfmt = config.initial_rustc.with_file_name(exe(\"rustfmt\", config.build));\n+        config.initial_rustfmt = if rustfmt.exists() { Some(rustfmt) } else { None };\n+\n         // Now that we've reached the end of our configuration, infer the\n         // default values for all options that we haven't otherwise stored yet.\n \n-        set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n-        set(&mut config.initial_cargo, build.cargo.map(PathBuf::from));\n-\n         config.llvm_skip_rebuild = llvm_skip_rebuild.unwrap_or(false);\n \n         let default = false;"}, {"sha": "00522ee6b673c4f940c1314e18fd5925d2a16846", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -1281,6 +1281,8 @@ impl Step for Compiletest {\n             cmd.arg(\"--rustfix-coverage\");\n         }\n \n+        cmd.env(\"BOOTSTRAP_CARGO\", &builder.initial_cargo);\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!(\n@@ -2022,6 +2024,8 @@ impl Step for Bootstrap {\n             .current_dir(builder.src.join(\"src/bootstrap\"))\n             .env(\"RUSTFLAGS\", \"-Cdebuginfo=2\")\n             .env(\"CARGO_TARGET_DIR\", builder.out.join(\"bootstrap\"))\n+            .env(\"BOOTSTRAP_OUTPUT_DIRECTORY\", &builder.config.out)\n+            .env(\"BOOTSTRAP_INITIAL_CARGO\", &builder.config.initial_cargo)\n             .env(\"RUSTC_BOOTSTRAP\", \"1\")\n             .env(\"RUSTC\", &builder.initial_rustc);\n         if let Some(flags) = option_env!(\"RUSTFLAGS\") {"}, {"sha": "460dffb5c8a570a9568d82035b943c253fe6e36f", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -700,6 +700,10 @@ impl<'a> Builder<'a> {\n         }\n \n         add_dylib_path(lib_paths, &mut cmd);\n+\n+        // Provide a RUSTC for this command to use.\n+        cmd.env(\"RUSTC\", &self.initial_rustc);\n+\n         cmd\n     }\n }"}, {"sha": "13385369e4451806399f5e14593ea02594443166", "filename": "src/test/run-make/thumb-none-cortex-m/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -35,4 +35,4 @@ all:\n \t# HACK(eddyb) sets `RUSTC_BOOTSTRAP=1` so Cargo can accept nightly features.\n \t# These come from the top-level Rust workspace, that this crate is not a\n \t# member of, but Cargo tries to load the workspace `Cargo.toml` anyway.\n-\tcd $(WORK_DIR) && cd $(CRATE) && env RUSTC_BOOTSTRAP=1 $(CARGO) build --target $(TARGET) -v\n+\tcd $(WORK_DIR) && cd $(CRATE) && env RUSTC_BOOTSTRAP=1 $(BOOTSTRAP_CARGO) build --target $(TARGET) -v"}, {"sha": "045d02a8ed25d4fdb061b77123d46b122c8a7463", "filename": "src/test/run-make/thumb-none-qemu/script.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7467d17bb94d388a056526dd143ce43612296ce6/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7467d17bb94d388a056526dd143ce43612296ce6/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2Fscript.sh?ref=7467d17bb94d388a056526dd143ce43612296ce6", "patch": "@@ -12,8 +12,8 @@ pushd $WORK_DIR\n         # These come from the top-level Rust workspace, that this crate is not a\n         # member of, but Cargo tries to load the workspace `Cargo.toml` anyway.\n         env RUSTC_BOOTSTRAP=1 RUSTFLAGS=\"-C linker=arm-none-eabi-ld -C link-arg=-Tlink.x\" \\\n-            $CARGO run --target $TARGET           | grep \"x = 42\"\n+            $BOOTSTRAP_CARGO run --target $TARGET           | grep \"x = 42\"\n         env RUSTC_BOOTSTRAP=1 RUSTFLAGS=\"-C linker=arm-none-eabi-ld -C link-arg=-Tlink.x\" \\\n-            $CARGO run --target $TARGET --release | grep \"x = 42\"\n+            $BOOTSTRAP_CARGO run --target $TARGET --release | grep \"x = 42\"\n     popd\n popd"}]}