{"sha": "95dc8ef265183a624593a5ef49df31e53daf160e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZGM4ZWYyNjUxODNhNjI0NTkzYTVlZjQ5ZGYzMWU1M2RhZjE2MGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-04T19:03:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-04T19:41:43Z"}, "message": "make illegal states unrepresentable\n\nonly declarative macros have def-site token map", "tree": {"sha": "33300902005a3496602849a72fecfc350f61a2ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33300902005a3496602849a72fecfc350f61a2ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95dc8ef265183a624593a5ef49df31e53daf160e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95dc8ef265183a624593a5ef49df31e53daf160e", "html_url": "https://github.com/rust-lang/rust/commit/95dc8ef265183a624593a5ef49df31e53daf160e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95dc8ef265183a624593a5ef49df31e53daf160e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d9ea39de6d59fe59e628ef72983315e944412dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9ea39de6d59fe59e628ef72983315e944412dc", "html_url": "https://github.com/rust-lang/rust/commit/7d9ea39de6d59fe59e628ef72983315e944412dc"}], "stats": {"total": 97, "additions": 48, "deletions": 49}, "files": [{"sha": "935c547b0e73c2b1b56d31ad60e312c939113a9d", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/95dc8ef265183a624593a5ef49df31e53daf160e/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc8ef265183a624593a5ef49df31e53daf160e/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=95dc8ef265183a624593a5ef49df31e53daf160e", "patch": "@@ -28,9 +28,9 @@ const TOKEN_LIMIT: usize = 524288;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {\n     /// Old-style `macro_rules`.\n-    MacroRules(mbe::MacroRules),\n+    MacroRules { mac: mbe::MacroRules, def_site_token_map: mbe::TokenMap },\n     /// AKA macros 2.0.\n-    MacroDef(mbe::MacroDef),\n+    MacroDef { mac: mbe::MacroDef, def_site_token_map: mbe::TokenMap },\n     /// Stuff like `line!` and `file!`.\n     Builtin(BuiltinFnLikeExpander),\n     /// `derive(Copy)` and such.\n@@ -47,8 +47,8 @@ impl TokenExpander {\n         tt: &tt::Subtree,\n     ) -> mbe::ExpandResult<tt::Subtree> {\n         match self {\n-            TokenExpander::MacroRules(it) => it.expand(tt),\n-            TokenExpander::MacroDef(it) => it.expand(tt),\n+            TokenExpander::MacroRules { mac, .. } => mac.expand(tt),\n+            TokenExpander::MacroDef { mac, .. } => mac.expand(tt),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt),\n             // FIXME switch these to ExpandResult as well\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n@@ -63,21 +63,21 @@ impl TokenExpander {\n \n     pub(crate) fn map_id_down(&self, id: tt::TokenId) -> tt::TokenId {\n         match self {\n-            TokenExpander::MacroRules(it) => it.map_id_down(id),\n-            TokenExpander::MacroDef(it) => it.map_id_down(id),\n-            TokenExpander::Builtin(..) => id,\n-            TokenExpander::BuiltinDerive(..) => id,\n-            TokenExpander::ProcMacro(..) => id,\n+            TokenExpander::MacroRules { mac, .. } => mac.map_id_down(id),\n+            TokenExpander::MacroDef { mac, .. } => mac.map_id_down(id),\n+            TokenExpander::Builtin(..)\n+            | TokenExpander::BuiltinDerive(..)\n+            | TokenExpander::ProcMacro(..) => id,\n         }\n     }\n \n     pub(crate) fn map_id_up(&self, id: tt::TokenId) -> (tt::TokenId, mbe::Origin) {\n         match self {\n-            TokenExpander::MacroRules(it) => it.map_id_up(id),\n-            TokenExpander::MacroDef(it) => it.map_id_up(id),\n-            TokenExpander::Builtin(..) => (id, mbe::Origin::Call),\n-            TokenExpander::BuiltinDerive(..) => (id, mbe::Origin::Call),\n-            TokenExpander::ProcMacro(..) => (id, mbe::Origin::Call),\n+            TokenExpander::MacroRules { mac, .. } => mac.map_id_up(id),\n+            TokenExpander::MacroDef { mac, .. } => mac.map_id_up(id),\n+            TokenExpander::Builtin(..)\n+            | TokenExpander::BuiltinDerive(..)\n+            | TokenExpander::ProcMacro(..) => (id, mbe::Origin::Call),\n         }\n     }\n }\n@@ -102,7 +102,7 @@ pub trait AstDatabase: SourceDatabase {\n     #[salsa::transparent]\n     fn macro_arg(&self, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>>;\n     fn macro_arg_text(&self, id: MacroCallId) -> Option<GreenNode>;\n-    fn macro_def(&self, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>>;\n+    fn macro_def(&self, id: MacroDefId) -> Option<Arc<TokenExpander>>;\n \n     fn macro_expand(&self, macro_call: MacroCallId) -> ExpandResult<Option<Arc<tt::Subtree>>>;\n     fn expand_proc_macro(&self, call: MacroCallId) -> Result<tt::Subtree, mbe::ExpandError>;\n@@ -133,7 +133,7 @@ pub fn expand_hypothetical(\n         macro_expand_with_arg(db, macro_file.macro_call_id, Some(Arc::new((tt, tmap_1))));\n     let (node, tmap_2) = expansion_to_syntax(db, macro_file, hypothetical_expansion).value?;\n \n-    let token_id = macro_def.0.map_id_down(token_id);\n+    let token_id = macro_def.map_id_down(token_id);\n     let range = tmap_2.range_by_token(token_id)?.by_kind(token_to_map.kind())?;\n     let token = node.syntax_node().covering_element(range).into_token()?;\n     Some((node.syntax_node(), token))\n@@ -262,46 +262,42 @@ fn macro_arg_text(db: &dyn AstDatabase, id: MacroCallId) -> Option<GreenNode> {\n     Some(arg.green())\n }\n \n-fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n+fn macro_def(db: &dyn AstDatabase, id: MacroDefId) -> Option<Arc<TokenExpander>> {\n     match id.kind {\n         MacroDefKind::Declarative(ast_id) => match ast_id.to_node(db) {\n             ast::Macro::MacroRules(macro_rules) => {\n                 let arg = macro_rules.token_tree()?;\n-                let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n-                let rules = match mbe::MacroRules::parse(&tt) {\n+                let (tt, def_site_token_map) = mbe::ast_to_token_tree(&arg);\n+                let mac = match mbe::MacroRules::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_rules.name().map(|n| n.to_string()).unwrap_or_default();\n                         log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n                         return None;\n                     }\n                 };\n-                Some(Arc::new((TokenExpander::MacroRules(rules), tmap)))\n+                Some(Arc::new(TokenExpander::MacroRules { mac, def_site_token_map }))\n             }\n             ast::Macro::MacroDef(macro_def) => {\n                 let arg = macro_def.body()?;\n-                let (tt, tmap) = mbe::ast_to_token_tree(&arg);\n-                let rules = match mbe::MacroDef::parse(&tt) {\n+                let (tt, def_site_token_map) = mbe::ast_to_token_tree(&arg);\n+                let mac = match mbe::MacroDef::parse(&tt) {\n                     Ok(it) => it,\n                     Err(err) => {\n                         let name = macro_def.name().map(|n| n.to_string()).unwrap_or_default();\n                         log::warn!(\"fail on macro_def parse ({}): {:?} {:#?}\", name, err, tt);\n                         return None;\n                     }\n                 };\n-                Some(Arc::new((TokenExpander::MacroDef(rules), tmap)))\n+                Some(Arc::new(TokenExpander::MacroDef { mac, def_site_token_map }))\n             }\n         },\n-        MacroDefKind::BuiltIn(expander, _) => {\n-            Some(Arc::new((TokenExpander::Builtin(expander), mbe::TokenMap::default())))\n-        }\n+        MacroDefKind::BuiltIn(expander, _) => Some(Arc::new(TokenExpander::Builtin(expander))),\n         MacroDefKind::BuiltInDerive(expander, _) => {\n-            Some(Arc::new((TokenExpander::BuiltinDerive(expander), mbe::TokenMap::default())))\n+            Some(Arc::new(TokenExpander::BuiltinDerive(expander)))\n         }\n         MacroDefKind::BuiltInEager(..) => None,\n-        MacroDefKind::ProcMacro(expander, ..) => {\n-            Some(Arc::new((TokenExpander::ProcMacro(expander), mbe::TokenMap::default())))\n-        }\n+        MacroDefKind::ProcMacro(expander, ..) => Some(Arc::new(TokenExpander::ProcMacro(expander))),\n     }\n }\n \n@@ -313,7 +309,7 @@ fn macro_expand_error(db: &dyn AstDatabase, macro_call: MacroCallId) -> Option<E\n     db.macro_expand(macro_call).err\n }\n \n-fn expander(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>> {\n+fn expander(db: &dyn AstDatabase, id: MacroCallId) -> Option<Arc<TokenExpander>> {\n     let lazy_id = match id {\n         MacroCallId::LazyMacro(id) => id,\n         MacroCallId::EagerMacro(_id) => {\n@@ -359,7 +355,7 @@ fn macro_expand_with_arg(\n         Some(it) => it,\n         None => return ExpandResult::str_err(\"Fail to find macro definition\".into()),\n     };\n-    let ExpandResult { value: tt, err } = macro_rules.0.expand(db, lazy_id, &macro_arg.0);\n+    let ExpandResult { value: tt, err } = macro_rules.expand(db, lazy_id, &macro_arg.0);\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n     if count > TOKEN_LIMIT {"}, {"sha": "ed61ebca3ad34d430b097d137905ad0bfc0be4d8", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95dc8ef265183a624593a5ef49df31e53daf160e/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc8ef265183a624593a5ef49df31e53daf160e/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=95dc8ef265183a624593a5ef49df31e53daf160e", "patch": "@@ -5,6 +5,7 @@\n use std::sync::Arc;\n \n use base_db::CrateId;\n+use db::TokenExpander;\n use either::Either;\n use mbe::Origin;\n use parser::SyntaxKind;\n@@ -115,7 +116,7 @@ struct HygieneInfo {\n     /// The `macro_rules!` arguments.\n     def_start: Option<InFile<TextSize>>,\n \n-    macro_def: Arc<(db::TokenExpander, mbe::TokenMap)>,\n+    macro_def: Arc<TokenExpander>,\n     macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n     exp_map: Arc<mbe::TokenMap>,\n }\n@@ -124,13 +125,16 @@ impl HygieneInfo {\n     fn map_ident_up(&self, token: TextRange) -> Option<(InFile<TextRange>, Origin)> {\n         let token_id = self.exp_map.token_by_range(token)?;\n \n-        let (token_id, origin) = self.macro_def.0.map_id_up(token_id);\n+        let (token_id, origin) = self.macro_def.map_id_up(token_id);\n         let (token_map, tt) = match origin {\n             mbe::Origin::Call => (&self.macro_arg.1, self.arg_start),\n-            mbe::Origin::Def => (\n-                &self.macro_def.1,\n-                *self.def_start.as_ref().expect(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n-            ),\n+            mbe::Origin::Def => match (&*self.macro_def, self.def_start) {\n+                (TokenExpander::MacroDef { def_site_token_map, .. }, Some(tt))\n+                | (TokenExpander::MacroRules { def_site_token_map, .. }, Some(tt)) => {\n+                    (def_site_token_map, tt)\n+                }\n+                _ => panic!(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n+            },\n         };\n \n         let range = token_map.range_by_token(token_id)?.by_kind(SyntaxKind::IDENT)?;"}, {"sha": "0402640de306ba0739e64f7a3dd172b91a262368", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/95dc8ef265183a624593a5ef49df31e53daf160e/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95dc8ef265183a624593a5ef49df31e53daf160e/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=95dc8ef265183a624593a5ef49df31e53daf160e", "patch": "@@ -351,7 +351,7 @@ pub struct ExpansionInfo {\n     /// The `macro_rules!` arguments.\n     def: Option<InFile<ast::TokenTree>>,\n \n-    macro_def: Arc<(db::TokenExpander, mbe::TokenMap)>,\n+    macro_def: Arc<db::TokenExpander>,\n     macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n     exp_map: Arc<mbe::TokenMap>,\n }\n@@ -368,7 +368,7 @@ impl ExpansionInfo {\n         assert_eq!(token.file_id, self.arg.file_id);\n         let range = token.value.text_range().checked_sub(self.arg.value.text_range().start())?;\n         let token_id = self.macro_arg.1.token_by_range(range)?;\n-        let token_id = self.macro_def.0.map_id_down(token_id);\n+        let token_id = self.macro_def.map_id_down(token_id);\n \n         let range = self.exp_map.range_by_token(token_id)?.by_kind(token.value.kind())?;\n \n@@ -383,17 +383,16 @@ impl ExpansionInfo {\n     ) -> Option<(InFile<SyntaxToken>, Origin)> {\n         let token_id = self.exp_map.token_by_range(token.value.text_range())?;\n \n-        let (token_id, origin) = self.macro_def.0.map_id_up(token_id);\n+        let (token_id, origin) = self.macro_def.map_id_up(token_id);\n         let (token_map, tt) = match origin {\n             mbe::Origin::Call => (&self.macro_arg.1, self.arg.clone()),\n-            mbe::Origin::Def => (\n-                &self.macro_def.1,\n-                self.def\n-                    .as_ref()\n-                    .expect(\"`Origin::Def` used with non-`macro_rules!` macro\")\n-                    .as_ref()\n-                    .map(|tt| tt.syntax().clone()),\n-            ),\n+            mbe::Origin::Def => match (&*self.macro_def, self.def.as_ref()) {\n+                (db::TokenExpander::MacroRules { def_site_token_map, .. }, Some(tt))\n+                | (db::TokenExpander::MacroDef { def_site_token_map, .. }, Some(tt)) => {\n+                    (def_site_token_map, tt.as_ref().map(|tt| tt.syntax().clone()))\n+                }\n+                _ => panic!(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n+            },\n         };\n \n         let range = token_map.range_by_token(token_id)?.by_kind(token.value.kind())?;"}]}