{"sha": "c297cff7771a84c417913b2023353cf44f9e260c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOTdjZmY3NzcxYTg0YzQxNzkxM2IyMDIzMzUzY2Y0NGY5ZTI2MGM=", "commit": {"author": {"name": "Ziad Hatahet", "email": "hatahet@gmail.com", "date": "2014-03-17T03:42:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-18T20:49:37Z"}, "message": "Documentation and formatting changes for option.rs.", "tree": {"sha": "7fcb0f179ea1968eb5b56f8b623f1eb218fbcb2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcb0f179ea1968eb5b56f8b623f1eb218fbcb2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c297cff7771a84c417913b2023353cf44f9e260c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c297cff7771a84c417913b2023353cf44f9e260c", "html_url": "https://github.com/rust-lang/rust/commit/c297cff7771a84c417913b2023353cf44f9e260c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c297cff7771a84c417913b2023353cf44f9e260c/comments", "author": {"login": "hatahet", "id": 877713, "node_id": "MDQ6VXNlcjg3NzcxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/877713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hatahet", "html_url": "https://github.com/hatahet", "followers_url": "https://api.github.com/users/hatahet/followers", "following_url": "https://api.github.com/users/hatahet/following{/other_user}", "gists_url": "https://api.github.com/users/hatahet/gists{/gist_id}", "starred_url": "https://api.github.com/users/hatahet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hatahet/subscriptions", "organizations_url": "https://api.github.com/users/hatahet/orgs", "repos_url": "https://api.github.com/users/hatahet/repos", "events_url": "https://api.github.com/users/hatahet/events{/privacy}", "received_events_url": "https://api.github.com/users/hatahet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175bf9470a2f1b95215b4b5dc1f12d949a0f8ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/175bf9470a2f1b95215b4b5dc1f12d949a0f8ddd", "html_url": "https://github.com/rust-lang/rust/commit/175bf9470a2f1b95215b4b5dc1f12d949a0f8ddd"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "9327136c771f09544091a942e02f41dae4990c7b", "filename": "src/libstd/option.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c297cff7771a84c417913b2023353cf44f9e260c/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297cff7771a84c417913b2023353cf44f9e260c/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=c297cff7771a84c417913b2023353cf44f9e260c", "patch": "@@ -149,7 +149,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns the contained value or a default\n+    /// Returns the contained value or a default.\n     #[inline]\n     pub fn unwrap_or(self, def: T) -> T {\n         match self {\n@@ -158,7 +158,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns the contained value or computes it from a closure\n+    /// Returns the contained value or computes it from a closure.\n     #[inline]\n     pub fn unwrap_or_else(self, f: || -> T) -> T {\n         match self {\n@@ -183,7 +183,7 @@ impl<T> Option<T> {\n         match self { None => def, Some(t) => f(t) }\n     }\n \n-    /// Apply a function to the contained value or do nothing.\n+    /// Applies a function to the contained value or does nothing.\n     /// Returns true if the contained value was mutated.\n     pub fn mutate(&mut self, f: |T| -> T) -> bool {\n         if self.is_some() {\n@@ -192,7 +192,7 @@ impl<T> Option<T> {\n         } else { false }\n     }\n \n-    /// Apply a function to the contained value or set it to a default.\n+    /// Applies a function to the contained value or sets it to a default.\n     /// Returns true if the contained value was mutated, or false if set to the default.\n     pub fn mutate_or_set(&mut self, def: T, f: |T| -> T) -> bool {\n         if self.is_some() {\n@@ -208,19 +208,19 @@ impl<T> Option<T> {\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Return an iterator over the possibly contained value\n+    /// Returns an iterator over the possibly contained value.\n     #[inline]\n     pub fn iter<'r>(&'r self) -> Item<&'r T> {\n         Item{opt: self.as_ref()}\n     }\n \n-    /// Return a mutable iterator over the possibly contained value\n+    /// Returns a mutable iterator over the possibly contained value.\n     #[inline]\n     pub fn mut_iter<'r>(&'r mut self) -> Item<&'r mut T> {\n         Item{opt: self.as_mut()}\n     }\n \n-    /// Return a consuming iterator over the possibly contained value\n+    /// Returns a consuming iterator over the possibly contained value.\n     #[inline]\n     pub fn move_iter(self) -> Item<T> {\n         Item{opt: self}\n@@ -264,15 +264,15 @@ impl<T> Option<T> {\n     pub fn or_else(self, f: || -> Option<T>) -> Option<T> {\n         match self {\n             Some(_) => self,\n-            None => f(),\n+            None => f()\n         }\n     }\n \n     /////////////////////////////////////////////////////////////////////////\n     // Misc\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Take the value out of the option, leaving a `None` in its place.\n+    /// Takes the value out of the option, leaving a `None` in its place.\n     #[inline]\n     pub fn take(&mut self) -> Option<T> {\n         mem::replace(self, None)\n@@ -282,7 +282,7 @@ impl<T> Option<T> {\n     #[inline(always)]\n     pub fn filtered(self, f: |t: &T| -> bool) -> Option<T> {\n         match self {\n-            Some(x) => if f(&x) {Some(x)} else {None},\n+            Some(x) => if f(&x) { Some(x) } else { None },\n             None => None\n         }\n     }"}]}