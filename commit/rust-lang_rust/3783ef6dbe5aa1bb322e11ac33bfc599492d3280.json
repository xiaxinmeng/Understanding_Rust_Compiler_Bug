{"sha": "3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODNlZjZkYmU1YWExYmIzMjJlMTFhYzMzYmZjNTk5NDkyZDMyODA=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-10-28T19:17:36Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-11-08T22:52:22Z"}, "message": "Stop returning promotables from `mir_const_qualif`", "tree": {"sha": "f39e4fdcddead99c4728485cf0bfc96e41edca35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f39e4fdcddead99c4728485cf0bfc96e41edca35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "html_url": "https://github.com/rust-lang/rust/commit/3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e346646e93cc243567e27bb0f4e8716d56ad1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e346646e93cc243567e27bb0f4e8716d56ad1f1", "html_url": "https://github.com/rust-lang/rust/commit/9e346646e93cc243567e27bb0f4e8716d56ad1f1"}], "stats": {"total": 82, "additions": 16, "deletions": 66}, "files": [{"sha": "bd7b77b0abb17dd7ef69cbc9b3a8a7df59eee307", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "patch": "@@ -93,7 +93,7 @@ rustc_queries! {\n         /// Maps DefId's that have an associated `mir::Body` to the result\n         /// of the MIR qualify_consts pass. The actual meaning of\n         /// the value isn't known except to the pass itself.\n-        query mir_const_qualif(key: DefId) -> (u8, &'tcx BitSet<mir::Local>) {\n+        query mir_const_qualif(key: DefId) -> u8 {\n             desc { |tcx| \"const checking `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { key.is_local() }\n         }"}, {"sha": "0615004125b3ca94df1720fb94ca0241b1f96eb9", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "patch": "@@ -42,7 +42,6 @@ use crate::util::common::ErrorReported;\n use crate::util::profiling::ProfileCategory::*;\n \n use rustc_data_structures::svh::Svh;\n-use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_data_structures::fx::{FxIndexMap, FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::StableVec;"}, {"sha": "1118162bdeb021940ca6a3200ba312ace7e06640", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "patch": "@@ -32,7 +32,6 @@ use syntax::parse::parser::emit_unclosed_delims;\n use syntax::source_map::Spanned;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, FileName};\n-use rustc_index::bit_set::BitSet;\n \n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n@@ -122,9 +121,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n     promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n-    mir_const_qualif => {\n-        (cdata.mir_const_qualif(def_id.index), tcx.arena.alloc(BitSet::new_empty(0)))\n-    }\n+    mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }"}, {"sha": "ad1ab16a410744d9477fa85f07853c6e394e0a27", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "patch": "@@ -955,7 +955,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.kind[def_id] <- match impl_item.kind {\n             ty::AssocKind::Const => {\n                 if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {\n-                    let mir = self.tcx.at(ast_item.span).mir_const_qualif(def_id).0;\n+                    let mir = self.tcx.at(ast_item.span).mir_const_qualif(def_id);\n \n                     EntryKind::AssocConst(container,\n                         ConstQualif { mir },\n@@ -1089,7 +1089,7 @@ impl EncodeContext<'tcx> {\n             hir::ItemKind::Static(_, hir::MutMutable, _) => EntryKind::MutStatic,\n             hir::ItemKind::Static(_, hir::MutImmutable, _) => EntryKind::ImmStatic,\n             hir::ItemKind::Const(_, body_id) => {\n-                let mir = self.tcx.at(item.span).mir_const_qualif(def_id).0;\n+                let mir = self.tcx.at(item.span).mir_const_qualif(def_id);\n                 EntryKind::Const(\n                     ConstQualif { mir },\n                     self.encode_rendered_const_for_body(body_id)\n@@ -1368,7 +1368,7 @@ impl EncodeContext<'tcx> {\n         let id = self.tcx.hir().as_local_hir_id(def_id).unwrap();\n         let body_id = self.tcx.hir().body_owned_by(id);\n         let const_data = self.encode_rendered_const_for_body(body_id);\n-        let mir = self.tcx.mir_const_qualif(def_id).0;\n+        let mir = self.tcx.mir_const_qualif(def_id);\n \n         record!(self.per_def.kind[def_id] <- EntryKind::Const(ConstQualif { mir }, const_data));\n         record!(self.per_def.visibility[def_id] <- ty::Visibility::Public);"}, {"sha": "496a56790679b41d922570682f157f1e6b91bb01", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "patch": "@@ -123,7 +123,7 @@ pub trait Qualif {\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty)\n                     } else {\n-                        let (bits, _) = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n+                        let bits = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n \n                         let qualif = QualifSet(bits).contains::<Self>();\n "}, {"sha": "bea8b499b914ccd151543cf0fc6c7d27231b7d0a", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "patch": "@@ -538,7 +538,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                         // is gone - we can always promote constants even if they\n                         // fail to pass const-checking, as compilation would've\n                         // errored independently and promotion can't change that.\n-                        let (bits, _) = self.tcx.at(constant.span).mir_const_qualif(def_id);\n+                        let bits = self.tcx.at(constant.span).mir_const_qualif(def_id);\n                         if bits == super::qualify_consts::QUALIF_ERROR_BIT {\n                             self.tcx.sess.delay_span_bug(\n                                 constant.span,"}, {"sha": "2b3ca9e9c5b5a0fe000b33c7966e2b1ec430c41e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 55, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3783ef6dbe5aa1bb322e11ac33bfc599492d3280/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=3783ef6dbe5aa1bb322e11ac33bfc599492d3280", "patch": "@@ -258,7 +258,7 @@ trait Qualif {\n                     if cx.tcx.trait_of_item(def_id).is_some() {\n                         Self::in_any_value_of_ty(cx, constant.literal.ty).unwrap_or(false)\n                     } else {\n-                        let (bits, _) = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n+                        let bits = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n \n                         let qualif = PerQualif::decode_from_bits(bits).0[Self::IDX];\n \n@@ -682,7 +682,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n     }\n \n     /// Check a whole const, static initializer or const fn.\n-    fn check_const(&mut self) -> (u8, &'tcx BitSet<Local>) {\n+    fn check_const(&mut self) -> u8 {\n         use crate::transform::check_consts as new_checker;\n \n         debug!(\"const-checking {} {:?}\", self.mode, self.def_id);\n@@ -704,7 +704,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         let mut seen_blocks = BitSet::new_empty(body.basic_blocks().len());\n         let mut bb = START_BLOCK;\n-        let mut has_controlflow_error = false;\n         loop {\n             seen_blocks.insert(bb.index());\n \n@@ -745,7 +744,6 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                     bb = target;\n                 }\n                 _ => {\n-                    has_controlflow_error = true;\n                     self.not_const(ops::Loop);\n                     validator.check_op(ops::Loop);\n                     break;\n@@ -772,51 +770,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             }\n         }\n \n-        // Collect all the temps we need to promote.\n-        let mut promoted_temps = BitSet::new_empty(self.temp_promotion_state.len());\n-\n-        // HACK: if parts of the control-flow graph were skipped due to an error, don't try to\n-        // promote anything, since that can cause errors in a `const` if e.g. rvalue static\n-        // promotion is attempted within a loop body.\n-        let unleash_miri = self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you;\n-        let promotion_candidates = if has_controlflow_error && !unleash_miri {\n-            self.tcx.sess.delay_span_bug(\n-                body.span,\n-                \"check_const: expected control-flow error(s)\",\n-            );\n-\n-            vec![]\n-        } else {\n-            promote_consts::validate_candidates(\n-                self.tcx,\n-                self.body,\n-                self.def_id,\n-                &self.temp_promotion_state,\n-                &self.unchecked_promotion_candidates,\n-            )\n-        };\n-\n-        debug!(\"qualify_const: promotion_candidates={:?}\", promotion_candidates);\n-        for candidate in promotion_candidates {\n-            match candidate {\n-                Candidate::Ref(Location { block: bb, statement_index: stmt_idx }) => {\n-                    if let StatementKind::Assign(box( _, Rvalue::Ref(_, _, place)))\n-                        = &self.body[bb].statements[stmt_idx].kind\n-                    {\n-                        if let PlaceBase::Local(local) = place.base {\n-                            promoted_temps.insert(local);\n-                        }\n-                    }\n-                }\n-\n-                // Only rvalue-static promotion requires extending the lifetime of the promoted\n-                // local.\n-                Candidate::Argument { .. } | Candidate::Repeat(_) => {}\n-            }\n-        }\n-\n-        let qualifs = self.qualifs_in_local(RETURN_PLACE);\n-        (qualifs.encode_to_bits(), self.tcx.arena.alloc(promoted_temps))\n+        self.qualifs_in_local(RETURN_PLACE).encode_to_bits()\n     }\n }\n \n@@ -1346,7 +1300,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n // in `promote_consts`, see the comment in `validate_operand`.\n pub(super) const QUALIF_ERROR_BIT: u8 = 1 << 2;\n \n-fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> u8 {\n     // N.B., this `borrow()` is guaranteed to be valid (i.e., the value\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before\n@@ -1355,7 +1309,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> (u8, &BitSet<Local>) {\n \n     if body.return_ty().references_error() {\n         tcx.sess.delay_span_bug(body.span, \"mir_const_qualif: MIR had errors\");\n-        return (QUALIF_ERROR_BIT, tcx.arena.alloc(BitSet::new_empty(0)));\n+        return QUALIF_ERROR_BIT;\n     }\n \n     Checker::new(tcx, def_id, body, Mode::Const).check_const()\n@@ -1436,11 +1390,11 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n         } else {\n             check_short_circuiting_in_const_local(tcx, body, mode);\n \n-            let promoted_temps = match mode {\n-                Mode::Const => tcx.mir_const_qualif(def_id).1,\n-                _ => Checker::new(tcx, def_id, body, mode).check_const().1,\n+            match mode {\n+                Mode::Const => tcx.mir_const_qualif(def_id),\n+                _ => Checker::new(tcx, def_id, body, mode).check_const(),\n             };\n-            remove_drop_and_storage_dead_on_promoted_locals(body, promoted_temps);\n+            remove_drop_and_storage_dead_on_promoted_locals(body, unimplemented!());\n         }\n \n         if mode == Mode::Static && !tcx.has_attr(def_id, sym::thread_local) {"}]}