{"sha": "099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "node_id": "C_kwDOAAsO6NoAKDA5OWEzNGNkOTViZjU0ZTg1OWY3ZGQwM2EyMWZlODIwMmE1ZTNmNzA", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-21T08:04:50Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-21T08:06:00Z"}, "message": "2229: Annotate stdlib with insignficant dtors", "tree": {"sha": "2c7da8bc61b08615e77a19cad9e65a786d6ac0e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c7da8bc61b08615e77a19cad9e65a786d6ac0e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "html_url": "https://github.com/rust-lang/rust/commit/099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95cfbe43d2d5663e2af1877d7a1a93801d23f532", "url": "https://api.github.com/repos/rust-lang/rust/commits/95cfbe43d2d5663e2af1877d7a1a93801d23f532", "html_url": "https://github.com/rust-lang/rust/commit/95cfbe43d2d5663e2af1877d7a1a93801d23f532"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "5486f86271818accd56bb7d5bffd53633b729dfc", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -162,6 +162,7 @@ pub struct BTreeMap<K, V> {\n \n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         drop(unsafe { ptr::read(self) }.into_iter())\n     }\n@@ -1459,6 +1460,7 @@ impl<K, V> IntoIterator for BTreeMap<K, V> {\n \n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V> Drop for IntoIter<K, V> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         struct DropGuard<'a, K, V>(&'a mut IntoIter<K, V>);\n "}, {"sha": "9f390cfc955b437a338ea80c4241351ae0899b07", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -975,6 +975,7 @@ impl<T> LinkedList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T> Drop for LinkedList<T> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         struct DropGuard<'a, T>(&'a mut LinkedList<T>);\n "}, {"sha": "a79aac39c71b875fd8310a3c8c62f1fbba211278", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -130,6 +130,7 @@ impl<T: Clone, A: Allocator + Clone> Clone for VecDeque<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         /// Runs the destructor for all items in the slice when it gets dropped (normally or\n         /// during unwinding)."}, {"sha": "8b0d7f19b19174102b3392f123ce2ba2693f8d64", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -1441,6 +1441,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         unsafe {\n             self.inner().dec_strong();"}, {"sha": "36ef96e65956946bc22ebc42e3c94a4b3717b312", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -246,6 +246,7 @@ impl<T: Clone, A: Allocator + Clone> Clone for IntoIter<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);\n "}, {"sha": "ef44b6ef82f44a68ebeaeb318d5a00585a38def8", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -2746,6 +2746,7 @@ impl<T: Ord, A: Allocator> Ord for Vec<T, A> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         unsafe {\n             // use drop for [T]"}, {"sha": "06867fd8b84768127ec1236640f16512c14c9b83", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -180,6 +180,7 @@ impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n impl<T, const N: usize> Drop for IntoIter<T, N> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         // SAFETY: This is safe: `as_mut_slice` returns exactly the sub-slice\n         // of elements that have not been moved out yet and that remain"}, {"sha": "3bb4cacb02a4c27d867d49be398adec669c08b39", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/099a34cd95bf54e859f7dd03a21fe8202a5e3f70/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=099a34cd95bf54e859f7dd03a21fe8202a5e3f70", "patch": "@@ -492,6 +492,7 @@ impl<T> SyncOnceCell<T> {\n }\n \n unsafe impl<#[may_dangle] T> Drop for SyncOnceCell<T> {\n+    #[rustc_insignificant_dtor]\n     fn drop(&mut self) {\n         if self.is_initialized() {\n             // SAFETY: The cell is initialized and being dropped, so it can't"}]}