{"sha": "c2a63b97a80cb738f800da61c64e748994709c31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYTYzYjk3YTgwY2I3MzhmODAwZGE2MWM2NGU3NDg5OTQ3MDljMzE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-29T15:46:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-29T15:47:47Z"}, "message": "Rename target_ty to self_ty", "tree": {"sha": "b1287d238b2d93fc3be1b1772ba860d67e716ebc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1287d238b2d93fc3be1b1772ba860d67e716ebc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a63b97a80cb738f800da61c64e748994709c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a63b97a80cb738f800da61c64e748994709c31", "html_url": "https://github.com/rust-lang/rust/commit/c2a63b97a80cb738f800da61c64e748994709c31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a63b97a80cb738f800da61c64e748994709c31/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "html_url": "https://github.com/rust-lang/rust/commit/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "97f162315390dc3318dcc83d09f74e77265f7bdc", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -1574,9 +1574,9 @@ impl Impl {\n         };\n \n         let filter = |impl_def: &Impl| {\n-            let target_ty = impl_def.target_ty(db);\n-            let rref = target_ty.remove_ref();\n-            ty.equals_ctor(rref.as_ref().map_or(&target_ty.ty, |it| &it.ty))\n+            let self_ty = impl_def.self_ty(db);\n+            let rref = self_ty.remove_ref();\n+            ty.equals_ctor(rref.as_ref().map_or(&self_ty.ty, |it| &it.ty))\n         };\n \n         let mut all = Vec::new();\n@@ -1614,16 +1614,16 @@ impl Impl {\n \n     // FIXME: the return type is wrong. This should be a hir version of\n     // `TraitRef` (ie, resolved `TypeRef`).\n-    pub fn target_trait(self, db: &dyn HirDatabase) -> Option<TraitRef> {\n+    pub fn trait_(self, db: &dyn HirDatabase) -> Option<TraitRef> {\n         db.impl_data(self.id).target_trait.clone()\n     }\n \n-    pub fn target_ty(self, db: &dyn HirDatabase) -> Type {\n+    pub fn self_ty(self, db: &dyn HirDatabase) -> Type {\n         let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db.upcast());\n         let krate = self.id.lookup(db.upcast()).container.krate();\n         let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n-        let ty = ctx.lower_ty(&impl_data.target_type);\n+        let ty = ctx.lower_ty(&impl_data.self_ty);\n         Type::new_with_resolver_inner(db, krate, &resolver, ty)\n     }\n "}, {"sha": "214bcc64834a58f505e46b571c1353ff40d63ecd", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -157,7 +157,7 @@ impl TraitData {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImplData {\n     pub target_trait: Option<TraitRef>,\n-    pub target_type: TypeRef,\n+    pub self_ty: TypeRef,\n     pub items: Vec<AssocItemId>,\n     pub is_negative: bool,\n }\n@@ -170,7 +170,7 @@ impl ImplData {\n         let item_tree = impl_loc.id.item_tree(db);\n         let impl_def = &item_tree[impl_loc.id.value];\n         let target_trait = impl_def.target_trait.map(|id| item_tree[id].clone());\n-        let target_type = item_tree[impl_def.target_type].clone();\n+        let self_ty = item_tree[impl_def.self_ty].clone();\n         let is_negative = impl_def.is_negative;\n         let module_id = impl_loc.container;\n         let container = AssocContainerId::ImplId(id);\n@@ -187,7 +187,7 @@ impl ImplData {\n         );\n         let items = items.into_iter().map(|(_, item)| item).collect();\n \n-        Arc::new(ImplData { target_trait, target_type, items, is_negative })\n+        Arc::new(ImplData { target_trait, self_ty, items, is_negative })\n     }\n }\n "}, {"sha": "5449bbf5d0241b70238f561e13efdfe4ba66779e", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -730,7 +730,7 @@ pub struct Trait {\n pub struct Impl {\n     pub generic_params: GenericParamsId,\n     pub target_trait: Option<Idx<TraitRef>>,\n-    pub target_type: Idx<TypeRef>,\n+    pub self_ty: Idx<TypeRef>,\n     pub is_negative: bool,\n     pub items: Box<[AssocItem]>,\n     pub ast_id: FileAstId<ast::Impl>,"}, {"sha": "4b2af564ec43d70d6d9a8d97e845082252ed479a", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -537,7 +537,7 @@ impl Ctx {\n         let generic_params =\n             self.lower_generic_params_and_inner_items(GenericsOwner::Impl, impl_def);\n         let target_trait = impl_def.trait_().map(|tr| self.lower_trait_ref(&tr));\n-        let target_type = self.lower_type_ref(&impl_def.self_ty()?);\n+        let self_ty = self.lower_type_ref(&impl_def.self_ty()?);\n         let is_negative = impl_def.excl_token().is_some();\n \n         // We cannot use `assoc_items()` here as that does not include macro calls.\n@@ -554,7 +554,7 @@ impl Ctx {\n             })\n             .collect();\n         let ast_id = self.source_ast_id_map.ast_id(impl_def);\n-        let res = Impl { generic_params, target_trait, target_type, is_negative, items, ast_id };\n+        let res = Impl { generic_params, target_trait, self_ty, is_negative, items, ast_id };\n         Some(id(self.data().impls.alloc(res)))\n     }\n "}, {"sha": "ee627e125a5e28d23386a5a4e5810d897d55f17a", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -1252,7 +1252,7 @@ pub(crate) fn impl_self_ty_query(db: &dyn HirDatabase, impl_id: ImplId) -> Binde\n     let generics = generics(db.upcast(), impl_id.into());\n     let ctx =\n         TyLoweringContext::new(db, &resolver).with_type_param_mode(TypeParamLoweringMode::Variable);\n-    Binders::new(generics.len(), ctx.lower_ty(&impl_data.target_type))\n+    Binders::new(generics.len(), ctx.lower_ty(&impl_data.self_ty))\n }\n \n pub(crate) fn const_param_ty_query(db: &dyn HirDatabase, def: ConstParamId) -> Ty {"}, {"sha": "4a9e8b21c5ac228cf964cc405eacb62e03519486", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -214,7 +214,7 @@ fn get_doc_link(db: &RootDatabase, definition: Definition) -> Option<String> {\n                 .and_then(|assoc| match assoc.container(db) {\n                     AssocItemContainer::Trait(t) => Some(t.into()),\n                     AssocItemContainer::Impl(impld) => {\n-                        impld.target_ty(db).as_adt().map(|adt| adt.into())\n+                        impld.self_ty(db).as_adt().map(|adt| adt.into())\n                     }\n                 })\n                 .unwrap_or_else(|| f.clone().into()),"}, {"sha": "dfd32c8c1f41536206076499f7039d3d57f96d8a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -195,7 +195,7 @@ fn show_implementations_action(db: &RootDatabase, def: Definition) -> Option<Hov\n     let adt = match def {\n         Definition::ModuleDef(ModuleDef::Trait(it)) => return it.try_to_nav(db).map(to_action),\n         Definition::ModuleDef(ModuleDef::Adt(it)) => Some(it),\n-        Definition::SelfType(it) => it.target_ty(db).as_adt(),\n+        Definition::SelfType(it) => it.self_ty(db).as_adt(),\n         _ => None,\n     }?;\n     adt.try_to_nav(db).map(to_action)\n@@ -318,7 +318,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n         Definition::ModuleDef(md) => match md {\n             ModuleDef::Function(f) => match f.as_assoc_item(db)?.container(db) {\n                 AssocItemContainer::Trait(t) => Some(t.name(db)),\n-                AssocItemContainer::Impl(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n+                AssocItemContainer::Impl(i) => i.self_ty(db).as_adt().map(|adt| adt.name(db)),\n             },\n             ModuleDef::Variant(e) => Some(e.parent_enum(db).name(db)),\n             _ => None,\n@@ -376,7 +376,7 @@ fn hover_for_definition(\n         },\n         Definition::Local(it) => hover_for_local(it, db),\n         Definition::SelfType(impl_def) => {\n-            impl_def.target_ty(db).as_adt().and_then(|adt| from_hir_fmt(db, adt, mod_path))\n+            impl_def.self_ty(db).as_adt().and_then(|adt| from_hir_fmt(db, adt, mod_path))\n         }\n         Definition::GenericParam(it) => from_hir_fmt(db, it, None),\n         Definition::Label(it) => Some(Markup::fenced_block(&it.name(db))),"}, {"sha": "98456967a321968c53556eece398cbcf3549ffa6", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -307,7 +307,7 @@ fn rename_to_self(sema: &Semantics<RootDatabase>, local: hir::Local) -> RenameRe\n         hir::AssocItemContainer::Impl(impl_) => impl_,\n     };\n     let first_param_ty = first_param.ty();\n-    let impl_ty = impl_.target_ty(sema.db);\n+    let impl_ty = impl_.self_ty(sema.db);\n     let (ty, self_param) = if impl_ty.remove_ref().is_some() {\n         // if the impl is a ref to the type we can just match the `&T` with self directly\n         (first_param_ty.clone(), \"self\")"}, {"sha": "11bd385bb992a99f2c63a4950e9402659ebaef83", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -298,7 +298,7 @@ fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Op\n             // FIXME: this also looks very wrong\n             if let Some(assoc_def) = assoc_def {\n                 if let hir::AssocItemContainer::Impl(imp) = assoc_def.container(sema.db) {\n-                    let ty = imp.target_ty(sema.db);\n+                    let ty = imp.self_ty(sema.db);\n                     if let Some(adt) = ty.as_adt() {\n                         let name = adt.name(sema.db);\n                         let idx = path.rfind(':').map_or(0, |idx| idx + 1);"}, {"sha": "dc14552d603091f87a530974cef5147a814d5737", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -92,7 +92,7 @@ fn is_default_implemented(ctx: &AssistContext, impl_: &Impl) -> bool {\n         None => return false,\n     };\n \n-    let ty = impl_def.target_ty(db);\n+    let ty = impl_def.self_ty(db);\n     let krate = impl_def.module(db).krate();\n     let default = FamousDefs(&ctx.sema, Some(krate)).core_default_Default();\n     let default_trait = match default {"}, {"sha": "910010a044fc9bd85b29723f0bae868ca5d8079e", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -91,7 +91,7 @@ fn get_impl_method(\n \n     let scope = ctx.sema.scope(impl_.syntax());\n     let krate = impl_def.module(db).krate();\n-    let ty = impl_def.target_ty(db);\n+    let ty = impl_def.self_ty(db);\n     let traits_in_scope = scope.traits_in_scope();\n     ty.iterate_method_candidates(db, krate, &traits_in_scope, Some(fn_name), |_, func| Some(func))\n }"}, {"sha": "d67524937e60b6f85e6634a656139385dda6c053", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -338,11 +338,11 @@ pub(crate) fn find_struct_impl(\n         // (we currently use the wrong type parameter)\n         // also we wouldn't want to use e.g. `impl S<u32>`\n \n-        let same_ty = match blk.target_ty(db).as_adt() {\n+        let same_ty = match blk.self_ty(db).as_adt() {\n             Some(def) => def == struct_def,\n             None => false,\n         };\n-        let not_trait_impl = blk.target_trait(db).is_none();\n+        let not_trait_impl = blk.trait_(db).is_none();\n \n         if !(same_ty && not_trait_impl) {\n             None"}, {"sha": "e2994eed4fff17fc0e26c967f5a149e08c9c6d25", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -220,7 +220,7 @@ fn complete_enum_variants(\n         };\n \n         if let Some(impl_) = ctx.impl_def.as_ref().and_then(|impl_| ctx.sema.to_def(impl_)) {\n-            if impl_.target_ty(ctx.db) == *ty {\n+            if impl_.self_ty(ctx.db) == *ty {\n                 for &variant in &variants {\n                     let self_path = hir::ModPath::from_segments(\n                         hir::PathKind::Plain,"}, {"sha": "808d7ff7e66c47e55124c3b11b95b99223bbe507", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -40,7 +40,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n                 _ => false,\n             },\n             hir::ScopeDef::MacroDef(_) => true,\n-            hir::ScopeDef::ImplSelfType(impl_) => match impl_.target_ty(ctx.db).as_adt() {\n+            hir::ScopeDef::ImplSelfType(impl_) => match impl_.self_ty(ctx.db).as_adt() {\n                 Some(hir::Adt::Struct(strukt)) => {\n                     acc.add_struct_pat(ctx, strukt, Some(name.clone()));\n                     true"}, {"sha": "1891eb5b36509f7c98a034920e2d8bae8acc8f86", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -117,7 +117,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             if let Some(krate) = ctx.krate {\n                 let ty = match resolution {\n                     PathResolution::TypeParam(param) => param.ty(ctx.db),\n-                    PathResolution::SelfType(impl_def) => impl_def.target_ty(ctx.db),\n+                    PathResolution::SelfType(impl_def) => impl_def.self_ty(ctx.db),\n                     _ => return,\n                 };\n "}, {"sha": "8ce648367116c1f3da30797ff517986cd4962a7b", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a63b97a80cb738f800da61c64e748994709c31/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=c2a63b97a80cb738f800da61c64e748994709c31", "patch": "@@ -361,7 +361,7 @@ fn item_for_path_search(db: &RootDatabase, item: ItemInNs) -> Option<ItemInNs> {\n             Some(assoc_item) => match assoc_item.container(db) {\n                 AssocItemContainer::Trait(trait_) => ItemInNs::from(ModuleDef::from(trait_)),\n                 AssocItemContainer::Impl(impl_) => {\n-                    ItemInNs::from(ModuleDef::from(impl_.target_ty(db).as_adt()?))\n+                    ItemInNs::from(ModuleDef::from(impl_.self_ty(db).as_adt()?))\n                 }\n             },\n             None => item,"}]}