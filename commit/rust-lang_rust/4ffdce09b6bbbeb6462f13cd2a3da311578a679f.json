{"sha": "4ffdce09b6bbbeb6462f13cd2a3da311578a679f", "node_id": "C_kwDOAAsO6NoAKDRmZmRjZTA5YjZiYmJlYjY0NjJmMTNjZDJhM2RhMzExNTc4YTY3OWY", "commit": {"author": {"name": "Jacob Kiesel", "email": "kieseljake@live.com", "date": "2022-09-14T19:28:54Z"}, "committer": {"name": "Jacob Kiesel", "email": "kieseljake@live.com", "date": "2022-09-14T19:35:35Z"}, "message": "refactor: use clippy_utils::Sugg instead of direct string ops", "tree": {"sha": "18696b427d8680e35b53d5e12df576cec5fe3365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18696b427d8680e35b53d5e12df576cec5fe3365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ffdce09b6bbbeb6462f13cd2a3da311578a679f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ffdce09b6bbbeb6462f13cd2a3da311578a679f", "html_url": "https://github.com/rust-lang/rust/commit/4ffdce09b6bbbeb6462f13cd2a3da311578a679f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ffdce09b6bbbeb6462f13cd2a3da311578a679f/comments", "author": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xaeroxe", "id": 6182002, "node_id": "MDQ6VXNlcjYxODIwMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/6182002?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xaeroxe", "html_url": "https://github.com/Xaeroxe", "followers_url": "https://api.github.com/users/Xaeroxe/followers", "following_url": "https://api.github.com/users/Xaeroxe/following{/other_user}", "gists_url": "https://api.github.com/users/Xaeroxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xaeroxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xaeroxe/subscriptions", "organizations_url": "https://api.github.com/users/Xaeroxe/orgs", "repos_url": "https://api.github.com/users/Xaeroxe/repos", "events_url": "https://api.github.com/users/Xaeroxe/events{/privacy}", "received_events_url": "https://api.github.com/users/Xaeroxe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "992560087025370e2a0397a67106b0852e238b4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/992560087025370e2a0397a67106b0852e238b4e", "html_url": "https://github.com/rust-lang/rust/commit/992560087025370e2a0397a67106b0852e238b4e"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "51e98cda845193958d907b4fc721587dda8118a7", "filename": "clippy_lints/src/bool_to_int_with_if.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4ffdce09b6bbbeb6462f13cd2a3da311578a679f/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ffdce09b6bbbeb6462f13cd2a3da311578a679f/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_to_int_with_if.rs?ref=4ffdce09b6bbbeb6462f13cd2a3da311578a679f", "patch": "@@ -1,9 +1,9 @@\n-use rustc_ast::{ExprPrecedence, LitKind};\n+use rustc_ast::LitKind;\n use rustc_hir::{Block, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, source::snippet_block_with_applicability};\n+use clippy_utils::{diagnostics::span_lint_and_then, is_else_clause, sugg::Sugg};\n use rustc_errors::Applicability;\n \n declare_clippy_lint! {\n@@ -69,28 +69,27 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n             return;\n         };\n         let mut applicability = Applicability::MachineApplicable;\n-        let snippet = snippet_block_with_applicability(ctx, check.span, \"..\", None, &mut applicability);\n-\n-        let invert = if inverted { \"!\" } else { \"\" };\n-        let need_parens = should_have_parentheses(check);\n-\n-        let snippet_with_braces = {\n-            let (left_paren, right_paren) = if need_parens {(\"(\", \")\")} else {(\"\", \"\")};\n-            format!(\"{invert}{left_paren}{snippet}{right_paren}\")\n+        let snippet = {\n+            let mut sugg = Sugg::hir_with_applicability(ctx, check, \"..\", &mut applicability);\n+            if inverted {\n+                sugg = !sugg;\n+            }\n+            sugg\n         };\n \n         let ty = ctx.typeck_results().expr_ty(then_lit); // then and else must be of same type\n \n         let suggestion = {\n             let wrap_in_curly = is_else_clause(ctx.tcx, expr);\n-            let (left_curly, right_curly) = if wrap_in_curly {(\"{\", \"}\")} else {(\"\", \"\")};\n-            let (left_paren, right_paren) = if inverted && need_parens {(\"(\", \")\")} else {(\"\", \"\")};\n-            format!(\n-                \"{left_curly}{ty}::from({invert}{left_paren}{snippet}{right_paren}){right_curly}\"\n-            )\n+            let mut s = Sugg::NonParen(format!(\"{ty}::from({snippet})\").into());\n+            if wrap_in_curly {\n+                s = s.blockify();\n+            }\n+            s\n         }; // when used in else clause if statement should be wrapped in curly braces\n \n-        let (inverted_left_paren, inverted_right_paren) = if inverted {(\"(\", \")\")} else {(\"\", \"\")};\n+        let into_snippet = snippet.clone().maybe_par();\n+        let as_snippet = snippet.as_ty(ty);\n \n         span_lint_and_then(ctx,\n             BOOL_TO_INT_WITH_IF,\n@@ -103,7 +102,7 @@ fn check_if_else<'tcx>(ctx: &LateContext<'tcx>, expr: &'tcx rustc_hir::Expr<'tcx\n                 suggestion,\n                 applicability,\n             );\n-            diag.note(format!(\"`{snippet_with_braces} as {ty}` or `{inverted_left_paren}{snippet_with_braces}{inverted_right_paren}.into()` can also be valid options\"));\n+            diag.note(format!(\"`{as_snippet}` or `{into_snippet}.into()` can also be valid options\"));\n         });\n     };\n }\n@@ -135,7 +134,3 @@ fn check_int_literal_equals_val<'tcx>(expr: &'tcx rustc_hir::Expr<'tcx>, expecte\n         false\n     }\n }\n-\n-fn should_have_parentheses<'tcx>(check: &'tcx rustc_hir::Expr<'tcx>) -> bool {\n-    check.precedence().order() < ExprPrecedence::Cast.order()\n-}"}, {"sha": "2c8339cdd7f8a0fa97d0c3c495fc9d90cfb611f3", "filename": "tests/ui/bool_to_int_with_if.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ffdce09b6bbbeb6462f13cd2a3da311578a679f/tests%2Fui%2Fbool_to_int_with_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ffdce09b6bbbeb6462f13cd2a3da311578a679f/tests%2Fui%2Fbool_to_int_with_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.fixed?ref=4ffdce09b6bbbeb6462f13cd2a3da311578a679f", "patch": "@@ -22,12 +22,12 @@ fn main() {\n     // if else if\n     if a {\n         123\n-    } else {i32::from(b)};\n+    } else { i32::from(b) };\n \n     // if else if inverted\n     if a {\n         123\n-    } else {i32::from(!b)};\n+    } else { i32::from(!b) };\n \n     // Shouldn't lint\n "}, {"sha": "e695440f6682ff3dd68792a60e6c905cf0f51c3f", "filename": "tests/ui/bool_to_int_with_if.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ffdce09b6bbbeb6462f13cd2a3da311578a679f/tests%2Fui%2Fbool_to_int_with_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ffdce09b6bbbeb6462f13cd2a3da311578a679f/tests%2Fui%2Fbool_to_int_with_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_to_int_with_if.stderr?ref=4ffdce09b6bbbeb6462f13cd2a3da311578a679f", "patch": "@@ -33,7 +33,7 @@ LL | |         0\n LL | |     };\n    | |_____^ help: replace with from: `i32::from(!a)`\n    |\n-   = note: `!a as i32` or `!a.into()` can also be valid options\n+   = note: `!a as i32` or `(!a).into()` can also be valid options\n \n error: boolean to int conversion using if\n   --> $DIR/bool_to_int_with_if.rs:30:5\n@@ -80,7 +80,7 @@ LL | |         1\n LL | |     } else {\n LL | |         0\n LL | |     };\n-   | |_____^ help: replace with from: `{i32::from(b)}`\n+   | |_____^ help: replace with from: `{ i32::from(b) }`\n    |\n    = note: `b as i32` or `b.into()` can also be valid options\n \n@@ -93,7 +93,7 @@ LL | |         0\n LL | |     } else {\n LL | |         1\n LL | |     };\n-   | |_____^ help: replace with from: `{i32::from(!b)}`\n+   | |_____^ help: replace with from: `{ i32::from(!b) }`\n    |\n    = note: `!b as i32` or `(!b).into()` can also be valid options\n "}]}