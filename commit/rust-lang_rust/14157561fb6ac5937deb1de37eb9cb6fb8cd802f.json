{"sha": "14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "node_id": "C_kwDOAAsO6NoAKDE0MTU3NTYxZmI2YWM1OTM3ZGViMWRlMzdlYjljYjZmYjhjZDgwMmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-29T08:37:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T08:37:31Z"}, "message": "Rollup merge of #109718 - scottmcm:indexvec-last, r=Nilstrieb\n\nRename `IndexVec::last` \u2192 `last_index`\n\nAs I've been trying to replace a `Vec` with an `IndexVec`, having `last` exist on both but returning very different types makes the transition a bit awkward -- the errors are later, where you get things like \"there's no `ty` method on `mir::Field`\" rather than a more localized error like \"hey, there's no `last` on `IndexVec`\".\n\nSo I propose renaming `last` to `last_index` to help distinguish `Vec::last`, which returns an element, and `IndexVec::last_index`, which returns an index.\n\n(Similarly, `Iterator::last` also returns an element, not an index.)", "tree": {"sha": "88c1f389db1c022878ed3ca50cfa6e396a0dd464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88c1f389db1c022878ed3ca50cfa6e396a0dd464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkI/jLCRBK7hj4Ov3rIwAAAOUIAILefHkTSZtMk91SN1cx5EJs\nLVE9JoG44CFC9HRVgTtCMwVU6ojNKdoDMEJnvqTWcJiwd8Xx8QQM6MWIzRKNbuYh\nia/tXs7tFIemy/QwLCfBCkZ1OsfMbpeTsiJug+Rq+NxU5830Nc4OZnehJBh7UG3X\nTxN/PLFFVcJi5Scufhz13EAkPcYW20ezyE9yL4Z1L7bcA78HkmM6GUpQ7S1y94Pv\nXkrIR28cVwAoi9GsiIQlEv3q4pyTkIIFj6Yj0eK2pbtINB7ZCKygjoIqgam1c17U\nsj1TKbFmwwh+Yvw7hLONKalNKhcQWOAekqXV5e1Zl0nXEyV7zjvviu+sDobib8Y=\n=nVbU\n-----END PGP SIGNATURE-----\n", "payload": "tree 88c1f389db1c022878ed3ca50cfa6e396a0dd464\nparent 2a4455d141e651c0ff627998ea484a095ee8b493\nparent 843c5e361e1b392f89f71ac26a951f8dfd84e43a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1680079051 +0530\ncommitter GitHub <noreply@github.com> 1680079051 +0530\n\nRollup merge of #109718 - scottmcm:indexvec-last, r=Nilstrieb\n\nRename `IndexVec::last` \u2192 `last_index`\n\nAs I've been trying to replace a `Vec` with an `IndexVec`, having `last` exist on both but returning very different types makes the transition a bit awkward -- the errors are later, where you get things like \"there's no `ty` method on `mir::Field`\" rather than a more localized error like \"hey, there's no `last` on `IndexVec`\".\n\nSo I propose renaming `last` to `last_index` to help distinguish `Vec::last`, which returns an element, and `IndexVec::last_index`, which returns an index.\n\n(Similarly, `Iterator::last` also returns an element, not an index.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "html_url": "https://github.com/rust-lang/rust/commit/14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a4455d141e651c0ff627998ea484a095ee8b493", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4455d141e651c0ff627998ea484a095ee8b493", "html_url": "https://github.com/rust-lang/rust/commit/2a4455d141e651c0ff627998ea484a095ee8b493"}, {"sha": "843c5e361e1b392f89f71ac26a951f8dfd84e43a", "url": "https://api.github.com/repos/rust-lang/rust/commits/843c5e361e1b392f89f71ac26a951f8dfd84e43a", "html_url": "https://github.com/rust-lang/rust/commit/843c5e361e1b392f89f71ac26a951f8dfd84e43a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "40c848de2beedc23a39d1e4ab60fdcf04897f1b9", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "patch": "@@ -707,7 +707,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n     }\n \n     fn assign(&mut self, dest: Local, rvalue: Rvalue<'tcx>, span: Span) {\n-        let last = self.promoted.basic_blocks.last().unwrap();\n+        let last = self.promoted.basic_blocks.last_index().unwrap();\n         let data = &mut self.promoted[last];\n         data.statements.push(Statement {\n             source_info: SourceInfo::outermost(span),\n@@ -800,7 +800,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         self.visit_operand(arg, loc);\n                     }\n \n-                    let last = self.promoted.basic_blocks.last().unwrap();\n+                    let last = self.promoted.basic_blocks.last_index().unwrap();\n                     let new_target = self.new_block();\n \n                     *self.promoted[last].terminator_mut() = Terminator {"}, {"sha": "acf883fe90cecabc0d58c9b28d44ecee44eff93e", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "patch": "@@ -216,7 +216,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn last(&self) -> Option<I> {\n+    pub fn last_index(&self) -> Option<I> {\n         self.len().checked_sub(1).map(I::new)\n     }\n "}, {"sha": "59b506e7345537ed738a00b7a7f02dfa3bf3bc53", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> MockBlocks<'tcx> {\n     }\n \n     fn push(&mut self, kind: TerminatorKind<'tcx>) -> BasicBlock {\n-        let next_lo = if let Some(last) = self.blocks.last() {\n+        let next_lo = if let Some(last) = self.blocks.last_index() {\n             self.blocks[last].terminator().source_info.span.hi()\n         } else {\n             BytePos(1)"}, {"sha": "aeb67666035289679051e979da86fbfadd07f216", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14157561fb6ac5937deb1de37eb9cb6fb8cd802f/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=14157561fb6ac5937deb1de37eb9cb6fb8cd802f", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> SearchGraph<'tcx> {\n     /// Whether we're currently in a cycle. This should only be used\n     /// for debug assertions.\n     pub(super) fn in_cycle(&self) -> bool {\n-        if let Some(stack_depth) = self.stack.last() {\n+        if let Some(stack_depth) = self.stack.last_index() {\n             // Either the current goal on the stack is the root of a cycle...\n             if self.stack[stack_depth].has_been_used {\n                 return true;"}]}