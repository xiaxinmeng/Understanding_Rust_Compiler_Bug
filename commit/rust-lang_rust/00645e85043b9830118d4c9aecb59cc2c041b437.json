{"sha": "00645e85043b9830118d4c9aecb59cc2c041b437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNjQ1ZTg1MDQzYjk4MzAxMThkNGM5YWVjYjU5Y2MyYzA0MWI0Mzc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-23T10:25:11Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-24T09:40:27Z"}, "message": "Add JoinHandle missing examples", "tree": {"sha": "4d51adb3cc64e95dd058d10abf136d1f9966fa34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d51adb3cc64e95dd058d10abf136d1f9966fa34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00645e85043b9830118d4c9aecb59cc2c041b437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00645e85043b9830118d4c9aecb59cc2c041b437", "html_url": "https://github.com/rust-lang/rust/commit/00645e85043b9830118d4c9aecb59cc2c041b437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00645e85043b9830118d4c9aecb59cc2c041b437/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901", "html_url": "https://github.com/rust-lang/rust/commit/1b38776c1f68c6fd47c1b2f7b7974efc7dd64901"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "0ba009e5867df312c741023dab524444007c9de3", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/00645e85043b9830118d4c9aecb59cc2c041b437/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00645e85043b9830118d4c9aecb59cc2c041b437/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=00645e85043b9830118d4c9aecb59cc2c041b437", "patch": "@@ -749,7 +749,7 @@ impl<T> JoinInner<T> {\n ///\n /// A `JoinHandle` *detaches* the child thread when it is dropped.\n ///\n-/// Due to platform restrictions, it is not possible to `Clone` this\n+/// Due to platform restrictions, it is not possible to [`Clone`] this\n /// handle: the ability to join a child thread is a uniquely-owned\n /// permission.\n ///\n@@ -760,7 +760,7 @@ impl<T> JoinInner<T> {\n ///\n /// Creation from [`thread::spawn`]:\n ///\n-/// ```rust\n+/// ```\n /// use std::thread;\n ///\n /// let join_handle: thread::JoinHandle<_> = thread::spawn(|| {\n@@ -770,7 +770,7 @@ impl<T> JoinInner<T> {\n ///\n /// Creation from [`thread::Builder::spawn`]:\n ///\n-/// ```rust\n+/// ```\n /// use std::thread;\n ///\n /// let builder = thread::Builder::new();\n@@ -780,22 +780,56 @@ impl<T> JoinInner<T> {\n /// }).unwrap();\n /// ```\n ///\n+/// [`Clone`]: ../../std/clone/trait.Clone.html\n /// [`thread::spawn`]: fn.spawn.html\n /// [`thread::Builder::spawn`]: struct.Builder.html#method.spawn\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct JoinHandle<T>(JoinInner<T>);\n \n impl<T> JoinHandle<T> {\n-    /// Extracts a handle to the underlying thread\n+    /// Extracts a handle to the underlying thread.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(thread_id)]\n+    ///\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new();\n+    ///\n+    /// let join_handle: thread::JoinHandle<_> = builder.spawn(|| {\n+    ///     // some work here\n+    /// }).unwrap();\n+    ///\n+    /// let thread = join_handle.thread();\n+    /// println!(\"thread id: {:?}\", thread.id());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }\n \n     /// Waits for the associated thread to finish.\n     ///\n-    /// If the child thread panics, `Err` is returned with the parameter given\n-    /// to `panic`.\n+    /// If the child thread panics, [`Err`] is returned with the parameter given\n+    /// to [`panic`].\n+    ///\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`panic!`]: ../../std/macro.panic.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::thread;\n+    ///\n+    /// let builder = thread::Builder::new();\n+    ///\n+    /// let join_handle: thread::JoinHandle<_> = builder.spawn(|| {\n+    ///     // some work here\n+    /// }).unwrap();\n+    /// join_handle.join().expect(\"Couldn't join on the associated thread\");\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn join(mut self) -> Result<T> {\n         self.0.join()"}]}