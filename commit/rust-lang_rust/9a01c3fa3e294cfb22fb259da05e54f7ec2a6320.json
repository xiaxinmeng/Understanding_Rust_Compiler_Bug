{"sha": "9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMDFjM2ZhM2UyOTRjZmIyMmZiMjU5ZGEwNWU1NGY3ZWMyYTYzMjA=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-20T03:52:53Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Clarify comments about TLS destructor handling in Windows, add a test for TLS destructors.", "tree": {"sha": "4d12c37bfb89368ec5b9b0a0ab7b7771890f56c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d12c37bfb89368ec5b9b0a0ab7b7771890f56c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "html_url": "https://github.com/rust-lang/rust/commit/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/comments", "author": null, "committer": null, "parents": [{"sha": "e4dc3567f8bb2b5b50230aa31d4ad57b631ac8db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4dc3567f8bb2b5b50230aa31d4ad57b631ac8db", "html_url": "https://github.com/rust-lang/rust/commit/e4dc3567f8bb2b5b50230aa31d4ad57b631ac8db"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "c5a04d75858cd96de06273732a430843f505067f", "filename": "src/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "patch": "@@ -222,7 +222,8 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n         // Read the return code pointer *before* we run TLS destructors, to assert\n         // that it was written to by the time that `start` lang item returned.\n         let return_code = ecx.read_scalar(ret_place.into())?.not_undef()?.to_machine_isize(&ecx)?;\n-        // Global destructors.\n+        // Run Windows destructors. (We do not support concurrency on Windows\n+        // yet, so we run the destructor of the main thread separately.)\n         ecx.run_windows_tls_dtors()?;\n         Ok(return_code)\n     })();"}, {"sha": "31a9ee3c94251463495519d130777f45800b8659", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "patch": "@@ -6,7 +6,6 @@ use std::collections::HashSet;\n \n use log::trace;\n \n-use rustc_index::vec::Idx;\n use rustc_middle::ty;\n use rustc_target::abi::{Size, HasDataLayout};\n \n@@ -201,7 +200,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(());\n         }\n         let active_thread = this.get_active_thread()?;\n-        assert_eq!(active_thread.index(), 0, \"concurrency on Windows not supported\");\n+        assert_eq!(this.get_total_thread_count()?, 1, \"concurrency on Windows not supported\");\n         assert!(!this.machine.tls.dtors_running.contains(&active_thread), \"running TLS dtors twice\");\n         this.machine.tls.dtors_running.insert(active_thread);\n         // Windows has a special magic linker section that is run on certain events."}, {"sha": "8c353d6a8853c944f3490404795deffbf51895ed", "filename": "src/thread.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "patch": "@@ -227,6 +227,11 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         self.active_thread\n     }\n \n+    /// Get the total number of threads that were ever spawn by this program.\n+    fn get_total_thread_count(&self) -> usize {\n+        self.threads.len()\n+    }\n+\n     /// Has the given thread terminated?\n     fn has_terminated(&self, thread_id: ThreadId) -> bool {\n         self.threads[thread_id].state == ThreadState::Terminated\n@@ -492,6 +497,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(this.machine.threads.get_active_thread_id())\n     }\n \n+    #[inline]\n+    fn get_total_thread_count(&self) -> InterpResult<'tcx, usize> {\n+        let this = self.eval_context_ref();\n+        Ok(this.machine.threads.get_total_thread_count())\n+    }\n+\n     #[inline]\n     fn has_terminated(&self, thread_id: ThreadId) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_ref();"}, {"sha": "6be5538bb444dbe5b6cc54deb861aecd51dfd977", "filename": "tests/compile-fail/concurrency/dangling_tls_lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Fdangling_tls_lib.rs?ref=9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "patch": "@@ -1,5 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n \n+//! Check that we catch if a thread local is accessed after the thread has\n+//! terminated.\n+\n #![feature(thread_local_internals)]\n \n use std::cell::RefCell;"}, {"sha": "c9b04a728258b0ce6eb5ac062e2c15da58d795fc", "filename": "tests/run-pass/concurrency/tls_lib_drop.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.rs?ref=9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "patch": "@@ -0,0 +1,46 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+\n+//! Check that destructors of the library thread locals are executed immediately\n+//! after a thread terminates.\n+\n+#![feature(thread_local_internals)]\n+\n+use std::cell::RefCell;\n+use std::thread;\n+\n+struct TestCell {\n+    value: RefCell<u8>,\n+}\n+\n+impl Drop for TestCell {\n+    fn drop(&mut self) {\n+        println!(\"Dropping: {}\", self.value.borrow())\n+    }\n+}\n+\n+static A: std::thread::LocalKey<TestCell> = {\n+    #[inline]\n+    fn __init() -> TestCell {\n+        TestCell { value: RefCell::new(0) }\n+    }\n+\n+    unsafe fn __getit() -> Option<&'static TestCell> {\n+        static __KEY: std::thread::__OsLocalKeyInner<TestCell> =\n+            std::thread::__OsLocalKeyInner::new();\n+        __KEY.get(__init)\n+    }\n+\n+    unsafe { std::thread::LocalKey::new(__getit) }\n+};\n+\n+fn main() {\n+    thread::spawn(|| {\n+        A.with(|f| {\n+            assert_eq!(*f.value.borrow(), 0);\n+            *f.value.borrow_mut() = 5;\n+        });\n+    })\n+    .join()\n+    .unwrap();\n+    println!(\"Continue main.\")\n+}"}, {"sha": "2dbfb7721d3683fb4d82c2ce771e3784be86fdc9", "filename": "tests/run-pass/concurrency/tls_lib_drop.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stderr?ref=9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "patch": "@@ -0,0 +1,2 @@\n+warning: thread support is experimental. For example, Miri does not detect data races yet.\n+"}, {"sha": "d2bbb866b77eaf16177e34c496b2b86ae67d8c65", "filename": "tests/run-pass/concurrency/tls_lib_drop.stdout", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9a01c3fa3e294cfb22fb259da05e54f7ec2a6320/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Ftls_lib_drop.stdout?ref=9a01c3fa3e294cfb22fb259da05e54f7ec2a6320", "patch": "@@ -0,0 +1,2 @@\n+Dropping: 5\n+Continue main."}]}