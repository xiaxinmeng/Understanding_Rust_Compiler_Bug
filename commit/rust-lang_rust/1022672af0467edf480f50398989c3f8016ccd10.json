{"sha": "1022672af0467edf480f50398989c3f8016ccd10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMjI2NzJhZjA0NjdlZGY0ODBmNTAzOTg5ODljM2Y4MDE2Y2NkMTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:03:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-15T15:03:52Z"}, "message": "Diagnose shorthand in patterns as well", "tree": {"sha": "a22b4b0caeb6363f0268d2b77812748ea0b5560f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a22b4b0caeb6363f0268d2b77812748ea0b5560f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1022672af0467edf480f50398989c3f8016ccd10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1022672af0467edf480f50398989c3f8016ccd10", "html_url": "https://github.com/rust-lang/rust/commit/1022672af0467edf480f50398989c3f8016ccd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1022672af0467edf480f50398989c3f8016ccd10/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9903a91cd2135d2102cfd8547576331bbc85857", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9903a91cd2135d2102cfd8547576331bbc85857", "html_url": "https://github.com/rust-lang/rust/commit/e9903a91cd2135d2102cfd8547576331bbc85857"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "c36c321f2b5f8f5b46ea99f850ad14339d803d56", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 94, "deletions": 5, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/1022672af0467edf480f50398989c3f8016ccd10/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1022672af0467edf480f50398989c3f8016ccd10/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=1022672af0467edf480f50398989c3f8016ccd10", "patch": "@@ -192,19 +192,20 @@ fn check_field_shorthand(acc: &mut Vec<Diagnostic>, file_id: FileId, node: &Synt\n     match_ast! {\n         match node {\n             ast::RecordExpr(it) => check_expr_field_shorthand(acc, file_id, it),\n-            _ => None\n+            ast::RecordPat(it) => check_pat_field_shorthand(acc, file_id, it),\n+            _ => ()\n         }\n     };\n }\n \n fn check_expr_field_shorthand(\n     acc: &mut Vec<Diagnostic>,\n     file_id: FileId,\n-    record_lit: ast::RecordExpr,\n+    record_expr: ast::RecordExpr,\n ) {\n-    let record_field_list = match record_lit.record_expr_field_list() {\n+    let record_field_list = match record_expr.record_expr_field_list() {\n         Some(it) => it,\n-        None => (),\n+        None => return,\n     };\n     for record_field in record_field_list.fields() {\n         let (name_ref, expr) = match record_field.name_ref().zip(record_field.expr()) {\n@@ -239,6 +240,48 @@ fn check_expr_field_shorthand(\n     }\n }\n \n+fn check_pat_field_shorthand(\n+    acc: &mut Vec<Diagnostic>,\n+    file_id: FileId,\n+    record_pat: ast::RecordPat,\n+) {\n+    let record_pat_field_list = match record_pat.record_pat_field_list() {\n+        Some(it) => it,\n+        None => return,\n+    };\n+    for record_pat_field in record_pat_field_list.fields() {\n+        let (name_ref, pat) = match record_pat_field.name_ref().zip(record_pat_field.pat()) {\n+            Some(it) => it,\n+            None => continue,\n+        };\n+\n+        let field_name = name_ref.syntax().text().to_string();\n+        let field_pat = pat.syntax().text().to_string();\n+        let field_name_is_tup_index = name_ref.as_tuple_field().is_some();\n+        if field_name != field_pat || field_name_is_tup_index {\n+            continue;\n+        }\n+\n+        let mut edit_builder = TextEdit::builder();\n+        edit_builder.delete(record_pat_field.syntax().text_range());\n+        edit_builder.insert(record_pat_field.syntax().text_range().start(), field_name);\n+        let edit = edit_builder.finish();\n+\n+        let field_range = record_pat_field.syntax().text_range();\n+        acc.push(Diagnostic {\n+            // name: None,\n+            range: field_range,\n+            message: \"Shorthand struct pattern\".to_string(),\n+            severity: Severity::WeakWarning,\n+            fix: Some(Fix::new(\n+                \"Use struct field shorthand\",\n+                SourceFileEdit { file_id, edit }.into(),\n+                field_range,\n+            )),\n+        });\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -735,7 +778,7 @@ mod a {\n     }\n \n     #[test]\n-    fn test_check_struct_shorthand_initialization() {\n+    fn test_check_expr_field_shorthand() {\n         check_no_diagnostics(\n             r#\"\n struct A { a: &'static str }\n@@ -786,6 +829,52 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn test_check_pat_field_shorthand() {\n+        check_no_diagnostics(\n+            r#\"\n+struct A { a: &'static str }\n+fn f(a: A) { let A { a: hello } = a; }\n+\"#,\n+        );\n+        check_no_diagnostics(\n+            r#\"\n+struct A(usize);\n+fn f(a: A) { let A { 0: 0 } = a; }\n+\"#,\n+        );\n+\n+        check_fix(\n+            r#\"\n+struct A { a: &'static str }\n+fn f(a: A) {\n+    let A { a<|>: a } = a;\n+}\n+\"#,\n+            r#\"\n+struct A { a: &'static str }\n+fn f(a: A) {\n+    let A { a } = a;\n+}\n+\"#,\n+        );\n+\n+        check_fix(\n+            r#\"\n+struct A { a: &'static str, b: &'static str }\n+fn f(a: A) {\n+    let A { a<|>: a, b } = a;\n+}\n+\"#,\n+            r#\"\n+struct A { a: &'static str, b: &'static str }\n+fn f(a: A) {\n+    let A { a, b } = a;\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_add_field_from_usage() {\n         check_fix("}]}