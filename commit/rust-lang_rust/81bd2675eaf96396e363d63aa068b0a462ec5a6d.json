{"sha": "81bd2675eaf96396e363d63aa068b0a462ec5a6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYmQyNjc1ZWFmOTYzOTZlMzYzZDYzYWEwNjhiMGE0NjJlYzVhNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-12T18:16:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-12T18:16:54Z"}, "message": "Auto merge of #39769 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 7 pull requests\n\n- Successful merges: #39654, #39662, #39697, #39740, #39743, #39756, #39760\n- Failed merges:", "tree": {"sha": "bbda1dd0521dc5015f05037de674d5bb312b598f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbda1dd0521dc5015f05037de674d5bb312b598f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81bd2675eaf96396e363d63aa068b0a462ec5a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81bd2675eaf96396e363d63aa068b0a462ec5a6d", "html_url": "https://github.com/rust-lang/rust/commit/81bd2675eaf96396e363d63aa068b0a462ec5a6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81bd2675eaf96396e363d63aa068b0a462ec5a6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282fa87b55521ed378ba7bc81182d38299f5bc1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/282fa87b55521ed378ba7bc81182d38299f5bc1a", "html_url": "https://github.com/rust-lang/rust/commit/282fa87b55521ed378ba7bc81182d38299f5bc1a"}, {"sha": "2f3dc95778861b26c80e99cfc1d7147f047974eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3dc95778861b26c80e99cfc1d7147f047974eb", "html_url": "https://github.com/rust-lang/rust/commit/2f3dc95778861b26c80e99cfc1d7147f047974eb"}], "stats": {"total": 173, "additions": 110, "deletions": 63}, "files": [{"sha": "f10fb6274c61c813e49d37e27bf06da6c0913de6", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -117,8 +117,8 @@ fn main() {\n }\n ```\n \n-Initialization of a data structure (struct, enum, union) can be simplified if\n-fields of the data structure are initialized with variables which has same\n+Initialization of a data structure (struct, enum, union) can be simplified when\n+fields of the data structure are initialized with variables of the same\n names as the fields.\n \n ```"}, {"sha": "ab4da862033d32ad88485593e7c7b2cedc47ef6d", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -2819,12 +2819,8 @@ Point3d {y: 0, z: 10, .. base};\n #### Struct field init shorthand\n \n When initializing a data structure (struct, enum, union) with named fields,\n-allow writing `fieldname` as a shorthand for `fieldname: fieldname`. This\n-allows a compact syntax for initialization, with less duplication.\n-\n-In the initializer for a `struct` with named fields, a `union` with named\n-fields, or an enum variant with named fields, accept an identifier `field` as a\n-shorthand for `field: field`.\n+it is allowed to write `fieldname` as a shorthand for `fieldname: fieldname`.\n+This allows a compact syntax with less duplication.\n \n Example:\n "}, {"sha": "a05db9b489ca19ad523a4257985cf00a0b5afd3e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -139,25 +139,25 @@\n //! assert!(file.write_all(b\"important message\").is_ok());\n //! ```\n //!\n-//! Or propagate the error up the call stack with [`try!`]:\n+//! Or propagate the error up the call stack with [`?`]:\n //!\n //! ```\n //! # use std::fs::File;\n //! # use std::io::prelude::*;\n //! # use std::io;\n //! # #[allow(dead_code)]\n //! fn write_message() -> io::Result<()> {\n-//!     let mut file = try!(File::create(\"valuable_data.txt\"));\n-//!     try!(file.write_all(b\"important message\"));\n+//!     let mut file = File::create(\"valuable_data.txt\")?;\n+//!     file.write_all(b\"important message\")?;\n //!     Ok(())\n //! }\n //! ```\n //!\n-//! # The `try!` macro\n+//! # The `?` syntax\n //!\n //! When writing code that calls many functions that return the\n-//! [`Result`] type, the error handling can be tedious. The [`try!`]\n-//! macro hides some of the boilerplate of propagating errors up the\n+//! [`Result`] type, the error handling can be tedious. The [`?`]\n+//! syntax hides some of the boilerplate of propagating errors up the\n //! call stack.\n //!\n //! It replaces this:\n@@ -208,37 +208,29 @@\n //! }\n //!\n //! fn write_info(info: &Info) -> io::Result<()> {\n-//!     let mut file = try!(File::create(\"my_best_friends.txt\"));\n+//!     let mut file = File::create(\"my_best_friends.txt\")?;\n //!     // Early return on error\n-//!     try!(file.write_all(format!(\"name: {}\\n\", info.name).as_bytes()));\n-//!     try!(file.write_all(format!(\"age: {}\\n\", info.age).as_bytes()));\n-//!     try!(file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes()));\n+//!     file.write_all(format!(\"name: {}\\n\", info.name).as_bytes())?;\n+//!     file.write_all(format!(\"age: {}\\n\", info.age).as_bytes())?;\n+//!     file.write_all(format!(\"rating: {}\\n\", info.rating).as_bytes())?;\n //!     Ok(())\n //! }\n //! ```\n //!\n //! *It's much nicer!*\n //!\n-//! Wrapping an expression in [`try!`] will result in the unwrapped\n+//! Ending the expression with [`?`] will result in the unwrapped\n //! success ([`Ok`]) value, unless the result is [`Err`], in which case\n-//! [`Err`] is returned early from the enclosing function. Its simple definition\n-//! makes it clear:\n+//! [`Err`] is returned early from the enclosing function.\n //!\n-//! ```\n-//! macro_rules! try {\n-//!     ($e:expr) => (match $e { Ok(e) => e, Err(e) => return Err(e) })\n-//! }\n-//! ```\n-//!\n-//! [`try!`] is imported by the prelude and is available everywhere, but it can only\n-//! be used in functions that return [`Result`] because of the early return of\n-//! [`Err`] that it provides.\n+//! [`?`] can only be used in functions that return [`Result`] because of the\n+//! early return of [`Err`] that it provides.\n //!\n //! [`expect`]: enum.Result.html#method.expect\n //! [`Write`]: ../../std/io/trait.Write.html\n //! [`write_all`]: ../../std/io/trait.Write.html#method.write_all\n //! [`io::Result`]: ../../std/io/type.Result.html\n-//! [`try!`]: ../../std/macro.try.html\n+//! [`?`]: ../../std/macro.try.html\n //! [`Result`]: enum.Result.html\n //! [`Ok(T)`]: enum.Result.html#variant.Ok\n //! [`Err(E)`]: enum.Result.html#variant.Err"}, {"sha": "751ed7d443d290bc04652de2c7c783a7999cb79e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -327,17 +327,24 @@ impl Item {\n         }\n     }\n \n-    pub fn stability_class(&self) -> String {\n-        self.stability.as_ref().map(|ref s| {\n-            let mut base = match s.level {\n-                stability::Unstable => \"unstable\".to_string(),\n-                stability::Stable => String::new(),\n-            };\n+    pub fn stability_class(&self) -> Option<String> {\n+        self.stability.as_ref().and_then(|ref s| {\n+            let mut classes = Vec::with_capacity(2);\n+\n+            if s.level == stability::Unstable {\n+                classes.push(\"unstable\");\n+            }\n+\n             if !s.deprecated_since.is_empty() {\n-                base.push_str(\" deprecated\");\n+                classes.push(\"deprecated\");\n             }\n-            base\n-        }).unwrap_or(String::new())\n+\n+            if classes.len() != 0 {\n+                Some(classes.join(\" \"))\n+            } else {\n+                None\n+            }\n+        })\n     }\n \n     pub fn stable_since(&self) -> Option<&str> {"}, {"sha": "6f8c6aa7094dde3b994234642e18748885f4bb73", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -550,8 +550,8 @@ impl<'a> fmt::Display for HRef<'a> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match href(self.did) {\n             Some((url, shortty, fqp)) => if !f.alternate() {\n-                write!(f, \"<a class='{}' href='{}' title='{}'>{}</a>\",\n-                       shortty, url, fqp.join(\"::\"), self.text)\n+                write!(f, \"<a class='{}' href='{}' title='{} {}'>{}</a>\",\n+                       shortty, url, shortty, fqp.join(\"::\"), self.text)\n             } else {\n                 write!(f, \"{}\", self.text)\n             },"}, {"sha": "ae4c94d4b38c096feb09e98b92b86a48c0528ae6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -1818,7 +1818,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 write!(w, \"\n                        <tr class='{stab} module-item'>\n                            <td><a class='{class}' href='{href}'\n-                                  title='{title}'>{name}</a>{unsafety_flag}</td>\n+                                  title='{title_type} {title}'>{name}</a>{unsafety_flag}</td>\n                            <td class='docblock-short'>\n                                {stab_docs} {docs}\n                            </td>\n@@ -1827,9 +1827,10 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                        stab_docs = stab_docs,\n                        docs = shorter(Some(&Markdown(doc_value).to_string())),\n                        class = myitem.type_(),\n-                       stab = myitem.stability_class(),\n+                       stab = myitem.stability_class().unwrap_or(\"\".to_string()),\n                        unsafety_flag = unsafety_flag,\n                        href = item_path(myitem.type_(), myitem.name.as_ref().unwrap()),\n+                       title_type = myitem.type_(),\n                        title = full_path(cx, myitem))?;\n             }\n         }\n@@ -1936,7 +1937,9 @@ impl<'a> fmt::Display for Initializer<'a> {\n \n fn item_constant(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  c: &clean::Constant) -> fmt::Result {\n-    write!(w, \"<pre class='rust const'>{vis}const \\\n+    write!(w, \"<pre class='rust const'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{vis}const \\\n                {name}: {typ}{init}</pre>\",\n            vis = VisSpace(&it.visibility),\n            name = it.name.as_ref().unwrap(),\n@@ -1947,7 +1950,9 @@ fn item_constant(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n \n fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                s: &clean::Static) -> fmt::Result {\n-    write!(w, \"<pre class='rust static'>{vis}static {mutability}\\\n+    write!(w, \"<pre class='rust static'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{vis}static {mutability}\\\n                {name}: {typ}{init}</pre>\",\n            vis = VisSpace(&it.visibility),\n            mutability = MutableSpace(s.mutability),\n@@ -1971,7 +1976,9 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                          AbiSpace(f.abi),\n                          it.name.as_ref().unwrap(),\n                          f.generics).len();\n-    write!(w, \"<pre class='rust fn'>{vis}{constness}{unsafety}{abi}fn \\\n+    write!(w, \"<pre class='rust fn'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{vis}{constness}{unsafety}{abi}fn \\\n                {name}{generics}{decl}{where_clause}</pre>\",\n            vis = VisSpace(&it.visibility),\n            constness = ConstnessSpace(vis_constness),\n@@ -2006,7 +2013,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n \n     // Output the trait definition\n-    write!(w, \"<pre class='rust trait'>{}{}trait {}{}{}{} \",\n+    write!(w, \"<pre class='rust trait'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"{}{}trait {}{}{}{} \",\n            VisSpace(&it.visibility),\n            UnsafetySpace(t.unsafety),\n            it.name.as_ref().unwrap(),\n@@ -2369,13 +2378,16 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 write!(w, \"<span id='{id}' class='{item_type}'>\n                            <span id='{ns_id}' class='invisible'>\n                            <code>{name}: {ty}</code>\n-                           </span></span><span class='stab {stab}'></span>\",\n+                           </span></span>\",\n                        item_type = ItemType::StructField,\n                        id = id,\n                        ns_id = ns_id,\n-                       stab = field.stability_class(),\n                        name = field.name.as_ref().unwrap(),\n                        ty = ty)?;\n+                if let Some(stability_class) = field.stability_class() {\n+                    write!(w, \"<span class='stab {stab}'></span>\",\n+                        stab = stability_class)?;\n+                }\n                 document(w, cx, field)?;\n             }\n         }\n@@ -2406,11 +2418,14 @@ fn item_union(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         write!(w, \"<h2 class='fields'>Fields</h2>\")?;\n         for (field, ty) in fields {\n             write!(w, \"<span id='{shortty}.{name}' class='{shortty}'><code>{name}: {ty}</code>\n-                       </span><span class='stab {stab}'></span>\",\n+                       </span>\",\n                    shortty = ItemType::StructField,\n-                   stab = field.stability_class(),\n                    name = field.name.as_ref().unwrap(),\n                    ty = ty)?;\n+            if let Some(stability_class) = field.stability_class() {\n+                write!(w, \"<span class='stab {stab}'></span>\",\n+                    stab = stability_class)?;\n+            }\n             document(w, cx, field)?;\n         }\n     }\n@@ -3001,7 +3016,9 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n fn item_typedef(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n     let indent = format!(\"type {}{:#} \", it.name.as_ref().unwrap(), t.generics).len();\n-    write!(w, \"<pre class='rust typedef'>type {}{}{where_clause} = {type_};</pre>\",\n+    write!(w, \"<pre class='rust typedef'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"type {}{}{where_clause} = {type_};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n            where_clause = WhereClause(&t.generics, indent),"}, {"sha": "349bddc87405cbeb2331a714bd8b738f4b0caa67", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -418,8 +418,12 @@ impl Collector {\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n                     line: usize, filename: String) {\n-        let name = format!(\"{} - line {}\", filename, line);\n-        self.cnt += 1;\n+        let name = if self.use_headers {\n+            let s = self.current_header.as_ref().map(|s| &**s).unwrap_or(\"\");\n+            format!(\"{} - {} (line {})\", filename, s, line)\n+        } else {\n+            format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n+        };\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n         let externs = self.externs.clone();"}, {"sha": "8884d0688b8b7661ff406680edd53ce14dab3d22", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -68,7 +68,7 @@\n //! * You want to find the largest or smallest key that is smaller or larger\n //!   than something.\n //! * You want to be able to get all of the entries in order on-demand.\n-//! * You want a sorted map.\n+//! * You want a map sorted by its keys.\n //!\n //! ### Use the `Set` variant of any of these `Map`s when:\n //! * You just want to remember which keys you've seen."}, {"sha": "64af91b487b322f82e913337175eca6a3091de75", "filename": "src/test/run-make/issue-22131/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -4,4 +4,4 @@ all: foo.rs\n \t$(RUSTC) --cfg 'feature=\"bar\"' --crate-type lib foo.rs\n \t$(HOST_RPATH_ENV) '$(RUSTDOC)' --test --cfg 'feature=\"bar\"' \\\n \t\t-L $(TMPDIR) foo.rs |\\\n-\t\tgrep -q 'foo.rs - line 11 ... ok'\n+\t\tgrep -q 'foo.rs - foo (line 11) ... ok'"}, {"sha": "22e509001137e947052d76643e3aca7170d76c4d", "filename": "src/test/rustdoc/attributes.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.f.html '//*[@class=\"docblock attributes\"]' '#[no_mangle]'\n+#[no_mangle]\n+pub extern \"C\" fn f() {}\n+\n+// @has foo/fn.g.html '//*[@class=\"docblock attributes\"]' '#[export_name = \"bar\"]'\n+#[export_name = \"bar\"]\n+pub extern \"C\" fn g() {}\n+\n+// @has foo/enum.Foo.html '//*[@class=\"docblock attributes\"]' '#[repr(i64)]'\n+// @has foo/enum.Foo.html '//*[@class=\"docblock attributes\"]' '#[must_use]'\n+#[repr(i64)]\n+#[must_use]\n+pub enum Foo {\n+    Bar,\n+}"}, {"sha": "d0aba8a0b0a7eb0d427dcae5b254113c70894d85", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bd2675eaf96396e363d63aa068b0a462ec5a6d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=81bd2675eaf96396e363d63aa068b0a462ec5a6d", "patch": "@@ -1998,16 +1998,20 @@ actual:\\n\\\n         for _ in res.stdout.split(\"\\n\")\n                            .filter(|s| s.starts_with(\"test \"))\n                            .inspect(|s| {\n-                               let tmp: Vec<&str> = s.split(\" - line \").collect();\n+                               let tmp: Vec<&str> = s.split(\" - \").collect();\n                                if tmp.len() == 2 {\n                                    let path = tmp[0].rsplit(\"test \").next().unwrap();\n                                    if let Some(ref mut v) = files.get_mut(path) {\n                                        tested += 1;\n-                                       let line = tmp[1].split(\" ...\")\n-                                                        .next()\n-                                                        .unwrap_or(\"0\")\n-                                                        .parse()\n-                                                        .unwrap_or(0);\n+                                       let mut iter = tmp[1].split(\"(line \");\n+                                       iter.next();\n+                                       let line = iter.next()\n+                                                      .unwrap_or(\")\")\n+                                                      .split(\")\")\n+                                                      .next()\n+                                                      .unwrap_or(\"0\")\n+                                                      .parse()\n+                                                      .unwrap_or(0);\n                                        if let Ok(pos) = v.binary_search(&line) {\n                                            v.remove(pos);\n                                        } else {"}]}