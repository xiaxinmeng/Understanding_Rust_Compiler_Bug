{"sha": "7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZmZjOWIxOTUxZjVlNTFhZDE5YmYzYjg1NGY3YWZhODA3M2FhZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-12T10:18:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-12T10:18:53Z"}, "message": "Auto merge of #30695 - ranma42:cleanup-unicode, r=alexcrichton\n\nand the associated update of tables.rs\n\nThe last commit is related to my comment to #29734.", "tree": {"sha": "e0c94bc6ed54dad07b5bf52e7e158981147927b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c94bc6ed54dad07b5bf52e7e158981147927b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "html_url": "https://github.com/rust-lang/rust/commit/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3246eaec90d3369347da28353b8aa23c9347d592", "url": "https://api.github.com/repos/rust-lang/rust/commits/3246eaec90d3369347da28353b8aa23c9347d592", "html_url": "https://github.com/rust-lang/rust/commit/3246eaec90d3369347da28353b8aa23c9347d592"}, {"sha": "3fff63400b3032f64cdd3d0743d9a9c2cab019b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fff63400b3032f64cdd3d0743d9a9c2cab019b4", "html_url": "https://github.com/rust-lang/rust/commit/3fff63400b3032f64cdd3d0743d9a9c2cab019b4"}], "stats": {"total": 172, "additions": 22, "deletions": 150}, "files": [{"sha": "10b864a902dc0a4bebb166b1d8ec0723fa3f4343", "filename": "src/etc/unicode.py", "status": "modified", "additions": 7, "deletions": 131, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "patch": "@@ -271,43 +271,6 @@ def load_properties(f, interestingprops):\n \n     return props\n \n-# load all widths of want_widths, except those in except_cats\n-def load_east_asian_width(want_widths, except_cats):\n-    f = \"EastAsianWidth.txt\"\n-    fetch(f)\n-    widths = {}\n-    re1 = re.compile(\"^([0-9A-F]+);(\\w+) +# (\\w+)\")\n-    re2 = re.compile(\"^([0-9A-F]+)\\.\\.([0-9A-F]+);(\\w+) +# (\\w+)\")\n-\n-    for line in fileinput.input(f):\n-        width = None\n-        d_lo = 0\n-        d_hi = 0\n-        cat = None\n-        m = re1.match(line)\n-        if m:\n-            d_lo = m.group(1)\n-            d_hi = m.group(1)\n-            width = m.group(2)\n-            cat = m.group(3)\n-        else:\n-            m = re2.match(line)\n-            if m:\n-                d_lo = m.group(1)\n-                d_hi = m.group(2)\n-                width = m.group(3)\n-                cat = m.group(4)\n-            else:\n-                continue\n-        if cat in except_cats or width not in want_widths:\n-            continue\n-        d_lo = int(d_lo, 16)\n-        d_hi = int(d_hi, 16)\n-        if width not in widths:\n-            widths[width] = []\n-        widths[width].append((d_lo, d_hi))\n-    return widths\n-\n def escape_char(c):\n     return \"'\\\\u{%x}'\" % c if c != 0 else \"'\\\\0'\"\n \n@@ -316,12 +279,12 @@ def emit_bsearch_range_table(f):\n fn bsearch_range_table(c: char, r: &'static [(char, char)]) -> bool {\n     use core::cmp::Ordering::{Equal, Less, Greater};\n     r.binary_search_by(|&(lo, hi)| {\n-         if lo <= c && c <= hi {\n-             Equal\n+         if c < lo {\n+             Greater\n          } else if hi < c {\n              Less\n          } else {\n-             Greater\n+             Equal\n          }\n      })\n      .is_ok()\n@@ -356,34 +319,25 @@ def emit_property_module(f, mod, tbl, emit):\n def emit_conversions_module(f, to_upper, to_lower, to_title):\n     f.write(\"pub mod conversions {\")\n     f.write(\"\"\"\n-    use core::cmp::Ordering::{Equal, Less, Greater};\n     use core::option::Option;\n     use core::option::Option::{Some, None};\n-    use core::result::Result::{Ok, Err};\n \n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {\n-          None        => [c, '\\\\0', '\\\\0'],\n-          Some(index) => to_lowercase_table[index].1\n+            None        => [c, '\\\\0', '\\\\0'],\n+            Some(index) => to_lowercase_table[index].1,\n         }\n     }\n \n     pub fn to_upper(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_uppercase_table) {\n             None        => [c, '\\\\0', '\\\\0'],\n-            Some(index) => to_uppercase_table[index].1\n+            Some(index) => to_uppercase_table[index].1,\n         }\n     }\n \n     fn bsearch_case_table(c: char, table: &'static [(char, [char; 3])]) -> Option<usize> {\n-        match table.binary_search_by(|&(key, _)| {\n-            if c == key { Equal }\n-            else if key < c { Less }\n-            else { Greater }\n-        }) {\n-            Ok(i) => Some(i),\n-            Err(_) => None,\n-        }\n+        table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n     }\n \n \"\"\")\n@@ -398,47 +352,6 @@ def emit_conversions_module(f, to_upper, to_lower, to_title):\n         is_pub=False, t_type = t_type, pfun=pfun)\n     f.write(\"}\\n\\n\")\n \n-def emit_charwidth_module(f, width_table):\n-    f.write(\"pub mod charwidth {\\n\")\n-    f.write(\"    use core::option::Option;\\n\")\n-    f.write(\"    use core::option::Option::{Some, None};\\n\")\n-    f.write(\"    use core::result::Result::{Ok, Err};\\n\")\n-    f.write(\"\"\"\n-    fn bsearch_range_value_table(c: char, is_cjk: bool, r: &'static [(char, char, u8, u8)]) -> u8 {\n-        use core::cmp::Ordering::{Equal, Less, Greater};\n-        match r.binary_search_by(|&(lo, hi, _, _)| {\n-            if lo <= c && c <= hi { Equal }\n-            else if hi < c { Less }\n-            else { Greater }\n-        }) {\n-            Ok(idx) => {\n-                let (_, _, r_ncjk, r_cjk) = r[idx];\n-                if is_cjk { r_cjk } else { r_ncjk }\n-            }\n-            Err(_) => 1\n-        }\n-    }\n-\"\"\")\n-\n-    f.write(\"\"\"\n-    pub fn width(c: char, is_cjk: bool) -> Option<usize> {\n-        match c as usize {\n-            _c @ 0 => Some(0),          // null is zero width\n-            cu if cu < 0x20 => None,    // control sequences have no width\n-            cu if cu < 0x7F => Some(1), // ASCII\n-            cu if cu < 0xA0 => None,    // more control sequences\n-            _ => Some(bsearch_range_value_table(c, is_cjk, charwidth_table) as usize)\n-        }\n-    }\n-\n-\"\"\")\n-\n-    f.write(\"    // character width table. Based on Markus Kuhn's free wcwidth() implementation,\\n\")\n-    f.write(\"    //     http://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c\\n\")\n-    emit_table(f, \"charwidth_table\", width_table, \"&'static [(char, char, u8, u8)]\", is_pub=False,\n-            pfun=lambda x: \"(%s,%s,%s,%s)\" % (escape_char(x[0]), escape_char(x[1]), x[2], x[3]))\n-    f.write(\"}\\n\\n\")\n-\n def emit_norm_module(f, canon, compat, combine, norm_props):\n     canon_keys = canon.keys()\n     canon_keys.sort()\n@@ -459,43 +372,6 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n     canon_comp_keys = canon_comp.keys()\n     canon_comp_keys.sort()\n \n-def remove_from_wtable(wtable, val):\n-    wtable_out = []\n-    while wtable:\n-        if wtable[0][1] < val:\n-            wtable_out.append(wtable.pop(0))\n-        elif wtable[0][0] > val:\n-            break\n-        else:\n-            (wt_lo, wt_hi, width, width_cjk) = wtable.pop(0)\n-            if wt_lo == wt_hi == val:\n-                continue\n-            elif wt_lo == val:\n-                wtable_out.append((wt_lo+1, wt_hi, width, width_cjk))\n-            elif wt_hi == val:\n-                wtable_out.append((wt_lo, wt_hi-1, width, width_cjk))\n-            else:\n-                wtable_out.append((wt_lo, val-1, width, width_cjk))\n-                wtable_out.append((val+1, wt_hi, width, width_cjk))\n-    if wtable:\n-        wtable_out.extend(wtable)\n-    return wtable_out\n-\n-\n-\n-def optimize_width_table(wtable):\n-    wtable_out = []\n-    w_this = wtable.pop(0)\n-    while wtable:\n-        if w_this[1] == wtable[0][0] - 1 and w_this[2:3] == wtable[0][2:3]:\n-            w_tmp = wtable.pop(0)\n-            w_this = (w_this[0], w_tmp[1], w_tmp[2], w_tmp[3])\n-        else:\n-            wtable_out.append(w_this)\n-            w_this = wtable.pop(0)\n-    wtable_out.append(w_this)\n-    return wtable_out\n-\n if __name__ == \"__main__\":\n     r = \"tables.rs\"\n     if os.path.exists(r):"}, {"sha": "a147bea791c47f4ff1f95f3399cca7046f2af2d4", "filename": "src/librustc_unicode/tables.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb/src%2Flibrustc_unicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb/src%2Flibrustc_unicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Ftables.rs?ref=7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "patch": "@@ -16,13 +16,18 @@\n /// that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.\n pub const UNICODE_VERSION: (u64, u64, u64) = (8, 0, 0);\n \n-fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n+fn bsearch_range_table(c: char, r: &'static [(char, char)]) -> bool {\n     use core::cmp::Ordering::{Equal, Less, Greater};\n-    r.binary_search_by(|&(lo,hi)| {\n-        if lo <= c && c <= hi { Equal }\n-        else if hi < c { Less }\n-        else { Greater }\n-    }).is_ok()\n+    r.binary_search_by(|&(lo, hi)| {\n+         if c < lo {\n+             Greater\n+         } else if hi < c {\n+             Less\n+         } else {\n+             Equal\n+         }\n+     })\n+     .is_ok()\n }\n \n pub mod general_category {\n@@ -1188,34 +1193,25 @@ pub mod property {\n }\n \n pub mod conversions {\n-    use core::cmp::Ordering::{Equal, Less, Greater};\n     use core::option::Option;\n     use core::option::Option::{Some, None};\n-    use core::result::Result::{Ok, Err};\n \n     pub fn to_lower(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_lowercase_table) {\n-          None        => [c, '\\0', '\\0'],\n-          Some(index) => to_lowercase_table[index].1\n+            None        => [c, '\\0', '\\0'],\n+            Some(index) => to_lowercase_table[index].1,\n         }\n     }\n \n     pub fn to_upper(c: char) -> [char; 3] {\n         match bsearch_case_table(c, to_uppercase_table) {\n             None        => [c, '\\0', '\\0'],\n-            Some(index) => to_uppercase_table[index].1\n+            Some(index) => to_uppercase_table[index].1,\n         }\n     }\n \n     fn bsearch_case_table(c: char, table: &'static [(char, [char; 3])]) -> Option<usize> {\n-        match table.binary_search_by(|&(key, _)| {\n-            if c == key { Equal }\n-            else if key < c { Less }\n-            else { Greater }\n-        }) {\n-            Ok(i) => Some(i),\n-            Err(_) => None,\n-        }\n+        table.binary_search_by(|&(key, _)| key.cmp(&c)).ok()\n     }\n \n     const to_lowercase_table: &'static [(char, [char; 3])] = &["}]}