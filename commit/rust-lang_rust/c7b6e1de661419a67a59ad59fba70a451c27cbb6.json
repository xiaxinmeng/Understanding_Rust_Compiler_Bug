{"sha": "c7b6e1de661419a67a59ad59fba70a451c27cbb6", "node_id": "C_kwDOAAsO6NoAKGM3YjZlMWRlNjYxNDE5YTY3YTU5YWQ1OWZiYTcwYTQ1MWMyN2NiYjY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-08T10:39:14Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-08T10:41:42Z"}, "message": "lub: don't bail out due to empty binders", "tree": {"sha": "ff6a226103adf0e99aaede6e8a411f162f15d64d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6a226103adf0e99aaede6e8a411f162f15d64d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7b6e1de661419a67a59ad59fba70a451c27cbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6e1de661419a67a59ad59fba70a451c27cbb6", "html_url": "https://github.com/rust-lang/rust/commit/c7b6e1de661419a67a59ad59fba70a451c27cbb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7b6e1de661419a67a59ad59fba70a451c27cbb6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a7aa7016de32f4d991c30bfa40d3911e18a213", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213", "html_url": "https://github.com/rust-lang/rust/commit/64a7aa7016de32f4d991c30bfa40d3911e18a213"}], "stats": {"total": 205, "additions": 193, "deletions": 12}, "files": [{"sha": "1570a08f3ca8bdb0aa11a3e4bbbe9131fc673a64", "filename": "compiler/rustc_infer/src/infer/glb.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6e1de661419a67a59ad59fba70a451c27cbb6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6e1de661419a67a59ad59fba70a451c27cbb6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fglb.rs?ref=c7b6e1de661419a67a59ad59fba70a451c27cbb6", "patch": "@@ -95,12 +95,20 @@ impl<'tcx> TypeRelation<'tcx> for Glb<'_, '_, 'tcx> {\n         T: Relate<'tcx>,\n     {\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n-\n-        // When higher-ranked types are involved, computing the LUB is\n-        // very challenging, switch to invariance. This is obviously\n-        // overly conservative but works ok in practice.\n-        self.relate_with_variance(ty::Variance::Invariant, ty::VarianceDiagInfo::default(), a, b)?;\n-        Ok(a)\n+        if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n+            // When higher-ranked types are involved, computing the GLB is\n+            // very challenging, switch to invariance. This is obviously\n+            // overly conservative but works ok in practice.\n+            self.relate_with_variance(\n+                ty::Variance::Invariant,\n+                ty::VarianceDiagInfo::default(),\n+                a,\n+                b,\n+            )?;\n+            Ok(a)\n+        } else {\n+            Ok(ty::Binder::dummy(self.relate(a.skip_binder(), b.skip_binder())?))\n+        }\n     }\n }\n "}, {"sha": "9f96d52c85034f36092f4d53f7b6e34339cc630a", "filename": "compiler/rustc_infer/src/infer/lub.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6e1de661419a67a59ad59fba70a451c27cbb6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6e1de661419a67a59ad59fba70a451c27cbb6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flub.rs?ref=c7b6e1de661419a67a59ad59fba70a451c27cbb6", "patch": "@@ -95,12 +95,20 @@ impl<'tcx> TypeRelation<'tcx> for Lub<'_, '_, 'tcx> {\n         T: Relate<'tcx>,\n     {\n         debug!(\"binders(a={:?}, b={:?})\", a, b);\n-\n-        // When higher-ranked types are involved, computing the LUB is\n-        // very challenging, switch to invariance. This is obviously\n-        // overly conservative but works ok in practice.\n-        self.relate_with_variance(ty::Variance::Invariant, ty::VarianceDiagInfo::default(), a, b)?;\n-        Ok(a)\n+        if a.skip_binder().has_escaping_bound_vars() || b.skip_binder().has_escaping_bound_vars() {\n+            // When higher-ranked types are involved, computing the LUB is\n+            // very challenging, switch to invariance. This is obviously\n+            // overly conservative but works ok in practice.\n+            self.relate_with_variance(\n+                ty::Variance::Invariant,\n+                ty::VarianceDiagInfo::default(),\n+                a,\n+                b,\n+            )?;\n+            Ok(a)\n+        } else {\n+            Ok(ty::Binder::dummy(self.relate(a.skip_binder(), b.skip_binder())?))\n+        }\n     }\n }\n "}, {"sha": "ee28dd7c97d616d7c4e82b6e25aface71b181132", "filename": "src/test/ui/lub-glb/empty-binders-err.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6e1de661419a67a59ad59fba70a451c27cbb6/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6e1de661419a67a59ad59fba70a451c27cbb6/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.rs?ref=c7b6e1de661419a67a59ad59fba70a451c27cbb6", "patch": "@@ -0,0 +1,61 @@\n+fn lt<'a: 'a>() -> &'a () {\n+    &()\n+}\n+\n+fn lt_in_fn<'a: 'a>() -> fn(&'a ()) {\n+    |_| ()\n+}\n+\n+struct Contra<'a>(fn(&'a ()));\n+fn lt_in_contra<'a: 'a>() -> Contra<'a> {\n+    Contra(|_| ())\n+}\n+\n+fn covariance<'a, 'b, 'upper, 'lower>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+    let _: &'upper () = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n+        true => lt::<'a>(),\n+        false => lt::<'b>(),\n+    };\n+}\n+\n+fn contra_fn<'a, 'b, 'upper, 'lower>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+\n+    let _: fn(&'lower ()) = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        true => lt_in_fn::<'a>(),\n+        false => lt_in_fn::<'b>(),\n+    };\n+}\n+\n+fn contra_struct<'a, 'b, 'upper, 'lower>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+    let _: Contra<'lower> = match v {\n+        //~^ ERROR lifetime may not live long enough\n+        true => lt_in_contra::<'a>(),\n+        false => lt_in_contra::<'b>(),\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "0d5de978e4301e2c06b6b5adfdedb65114dd952f", "filename": "src/test/ui/lub-glb/empty-binders-err.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6e1de661419a67a59ad59fba70a451c27cbb6/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6e1de661419a67a59ad59fba70a451c27cbb6/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders-err.stderr?ref=c7b6e1de661419a67a59ad59fba70a451c27cbb6", "patch": "@@ -0,0 +1,59 @@\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:22:12\n+   |\n+LL | fn covariance<'a, 'b, 'upper, 'lower>(v: bool)\n+   |               --      ------ lifetime `'upper` defined here\n+   |               |\n+   |               lifetime `'a` defined here\n+...\n+LL |     let _: &'upper () = match v {\n+   |            ^^^^^^^^^^ type annotation requires that `'a` must outlive `'upper`\n+   |\n+   = help: consider adding the following bound: `'a: 'upper`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:22:12\n+   |\n+LL | fn covariance<'a, 'b, 'upper, 'lower>(v: bool)\n+   |                   --  ------ lifetime `'upper` defined here\n+   |                   |\n+   |                   lifetime `'b` defined here\n+...\n+LL |     let _: &'upper () = match v {\n+   |            ^^^^^^^^^^ type annotation requires that `'b` must outlive `'upper`\n+   |\n+   = help: consider adding the following bound: `'b: 'upper`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: add bound `'a: 'upper`\n+   = help: add bound `'b: 'upper`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:39:12\n+   |\n+LL | fn contra_fn<'a, 'b, 'upper, 'lower>(v: bool)\n+   |              --              ------ lifetime `'lower` defined here\n+   |              |\n+   |              lifetime `'a` defined here\n+...\n+LL |     let _: fn(&'lower ()) = match v {\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'lower` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'lower: 'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/empty-binders-err.rs:54:12\n+   |\n+LL | fn contra_struct<'a, 'b, 'upper, 'lower>(v: bool)\n+   |                  --              ------ lifetime `'lower` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+...\n+LL |     let _: Contra<'lower> = match v {\n+   |            ^^^^^^^^^^^^^^ type annotation requires that `'lower` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'lower: 'a`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f9d07e79fdabf6cfae700bc055270fee3cd5bcdc", "filename": "src/test/ui/lub-glb/empty-binders.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c7b6e1de661419a67a59ad59fba70a451c27cbb6/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7b6e1de661419a67a59ad59fba70a451c27cbb6/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fempty-binders.rs?ref=c7b6e1de661419a67a59ad59fba70a451c27cbb6", "patch": "@@ -0,0 +1,45 @@\n+// check-pass\n+//\n+// Check that computing the lub works even for empty binders.\n+fn lt<'a: 'a>() -> &'a () {\n+    &()\n+}\n+\n+fn lt_in_fn<'a: 'a>() -> fn(&'a ()) {\n+    |_| ()\n+}\n+\n+struct Contra<'a>(fn(&'a ()));\n+fn lt_in_contra<'a: 'a>() -> Contra<'a> {\n+    Contra(|_| ())\n+}\n+\n+fn ok<'a, 'b, 'upper, 'lower>(v: bool)\n+where\n+    'upper: 'a,\n+    'upper: 'b,\n+    'a: 'lower,\n+    'b: 'lower,\n+\n+{\n+    let _: &'lower () = match v {\n+        true => lt::<'a>(),\n+        false => lt::<'b>(),\n+    };\n+\n+    // This errored in the past because LUB and GLB always\n+    // bailed out when encountering binders, even if they were\n+    // empty.\n+    let _: fn(&'upper ()) = match v {\n+        true => lt_in_fn::<'a>(),\n+        false => lt_in_fn::<'b>(),\n+    };\n+\n+    // This was already accepted, as relate didn't encounter any binders.\n+    let _: Contra<'upper> = match v {\n+        true => lt_in_contra::<'a>(),\n+        false => lt_in_contra::<'b>(),\n+    };\n+}\n+\n+fn main() {}"}]}