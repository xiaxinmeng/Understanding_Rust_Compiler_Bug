{"sha": "16d4b7b0e5d011c69b41a4a0a440193544795f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZDRiN2IwZTVkMDExYzY5YjQxYTRhMGE0NDAxOTM1NDQ3OTVmNWU=", "commit": {"author": {"name": "Martin Pool", "email": "mbp@google.com", "date": "2016-12-03T21:05:05Z"}, "committer": {"name": "Martin Pool", "email": "mbp@google.com", "date": "2016-12-13T19:28:58Z"}, "message": "doc: Explain meaning of Result iters and link to factory functions.", "tree": {"sha": "a9540c4e8979d7e44a6eec3ad7af36b2cf9ac0e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9540c4e8979d7e44a6eec3ad7af36b2cf9ac0e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d4b7b0e5d011c69b41a4a0a440193544795f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d4b7b0e5d011c69b41a4a0a440193544795f5e", "html_url": "https://github.com/rust-lang/rust/commit/16d4b7b0e5d011c69b41a4a0a440193544795f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d4b7b0e5d011c69b41a4a0a440193544795f5e/comments", "author": {"login": "sourcefrog", "id": 346355, "node_id": "MDQ6VXNlcjM0NjM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/346355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sourcefrog", "html_url": "https://github.com/sourcefrog", "followers_url": "https://api.github.com/users/sourcefrog/followers", "following_url": "https://api.github.com/users/sourcefrog/following{/other_user}", "gists_url": "https://api.github.com/users/sourcefrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/sourcefrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sourcefrog/subscriptions", "organizations_url": "https://api.github.com/users/sourcefrog/orgs", "repos_url": "https://api.github.com/users/sourcefrog/repos", "events_url": "https://api.github.com/users/sourcefrog/events{/privacy}", "received_events_url": "https://api.github.com/users/sourcefrog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sourcefrog", "id": 346355, "node_id": "MDQ6VXNlcjM0NjM1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/346355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sourcefrog", "html_url": "https://github.com/sourcefrog", "followers_url": "https://api.github.com/users/sourcefrog/followers", "following_url": "https://api.github.com/users/sourcefrog/following{/other_user}", "gists_url": "https://api.github.com/users/sourcefrog/gists{/gist_id}", "starred_url": "https://api.github.com/users/sourcefrog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sourcefrog/subscriptions", "organizations_url": "https://api.github.com/users/sourcefrog/orgs", "repos_url": "https://api.github.com/users/sourcefrog/repos", "events_url": "https://api.github.com/users/sourcefrog/events{/privacy}", "received_events_url": "https://api.github.com/users/sourcefrog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f78b420b06104d889240e7e02a4513c8c548a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f78b420b06104d889240e7e02a4513c8c548a19", "html_url": "https://github.com/rust-lang/rust/commit/7f78b420b06104d889240e7e02a4513c8c548a19"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "99c407e5273eae922249ca45ee325e9c8f2028cd", "filename": "src/libcore/result.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/16d4b7b0e5d011c69b41a4a0a440193544795f5e/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d4b7b0e5d011c69b41a4a0a440193544795f5e/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=16d4b7b0e5d011c69b41a4a0a440193544795f5e", "patch": "@@ -501,6 +501,8 @@ impl<T, E> Result<T, E> {\n \n     /// Returns an iterator over the possibly contained value.\n     ///\n+    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -512,6 +514,8 @@ impl<T, E> Result<T, E> {\n     /// let x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter().next(), None);\n     /// ```\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<T> {\n@@ -520,6 +524,8 @@ impl<T, E> Result<T, E> {\n \n     /// Returns a mutable iterator over the possibly contained value.\n     ///\n+    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -535,6 +541,8 @@ impl<T, E> Result<T, E> {\n     /// let mut x: Result<u32, &str> = Err(\"nothing!\");\n     /// assert_eq!(x.iter_mut().next(), None);\n     /// ```\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<T> {\n@@ -848,6 +856,8 @@ impl<T, E> IntoIterator for Result<T, E> {\n \n     /// Returns a consuming iterator over the possibly contained value.\n     ///\n+    /// The iterator yields one value if the result is [`Ok`], otherwise none.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -861,6 +871,8 @@ impl<T, E> IntoIterator for Result<T, E> {\n     /// let v: Vec<u32> = x.into_iter().collect();\n     /// assert_eq!(v, []);\n     /// ```\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n     #[inline]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { inner: self.ok() }\n@@ -893,8 +905,13 @@ impl<'a, T, E> IntoIterator for &'a mut Result<T, E> {\n \n /// An iterator over a reference to the [`Ok`] variant of a [`Result`].\n ///\n+/// The iterator yields one value if the result is [`Ok`], otherwise none.\n+///\n+/// Created by [`Result::iter`].\n+///\n /// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Result`]: enum.Result.html\n+/// [`Result::iter`]: enum.Result.html#method.iter\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> { inner: Option<&'a T> }\n@@ -934,8 +951,11 @@ impl<'a, T> Clone for Iter<'a, T> {\n \n /// An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].\n ///\n+/// Created by [`Result::iter_mut`].\n+///\n /// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Result`]: enum.Result.html\n+/// [`Result::iter_mut`]: enum.Result.html#method.iter_mut\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> { inner: Option<&'a mut T> }\n@@ -968,9 +988,12 @@ impl<'a, T> FusedIterator for IterMut<'a, T> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<'a, A> TrustedLen for IterMut<'a, A> {}\n \n-/// An iterator over the value in a [`Ok`] variant of a [`Result`]. This struct is\n-/// created by the [`into_iter`] method on [`Result`][`Result`] (provided by\n-/// the [`IntoIterator`] trait).\n+/// An iterator over the value in a [`Ok`] variant of a [`Result`].\n+///\n+/// The iterator yields one value if the result is [`Ok`], otherwise none.\n+///\n+/// This struct is created by the [`into_iter`] method on\n+/// [`Result`][`Result`] (provided by the [`IntoIterator`] trait).\n ///\n /// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Result`]: enum.Result.html"}]}